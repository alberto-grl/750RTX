
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015dfc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c30  080160a0  080160a0  000260a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801acd0  0801acd0  00051800  2**0
                  CONTENTS
  4 .ARM          00000008  0801acd0  0801acd0  0002acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801acd8  0801acd8  00051800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801acd8  0801acd8  0002acd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801acdc  0801acdc  0002acdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000524  24000000  0801ace0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cd20  24000540  0801b204  00030540  2**5
                  ALLOC
 10 ._user_heap_stack 00000840  2400d260  0801b204  0003d260  2**0
                  ALLOC
 11 .dtcm         00011800  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00051800  2**0
                  CONTENTS, READONLY
 13 .debug_line   0004a6e4  00000000  00000000  0005182e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004f721  00000000  00000000  0009bf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008b48  00000000  00000000  000eb633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d30  00000000  00000000  000f4180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00198e46  00000000  00000000  000f5eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0003ced6  00000000  00000000  0028ecf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00007a98  00000000  00000000  002cbbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000ab73  00000000  00000000  002d3668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002de1db  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007718  00000000  00000000  002de22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000540 	.word	0x24000540
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016084 	.word	0x08016084

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000544 	.word	0x24000544
 80002dc:	08016084 	.word	0x08016084

080002e0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002e0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002e2:	2b01      	cmp	r3, #1
	IT       LS
 80002e4:	bf98      	it	ls
	BXLS     lr
 80002e6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002ec:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002fe:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000300:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000302:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000304:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800030e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000314:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000318:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800031c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000320:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800032a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800033c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800033e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000340:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800034a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800034c:	2b01      	cmp	r3, #1
	IT       LS
 800034e:	bf98      	it	ls
	BXLS     lr
 8000350:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000356:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000362:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000380:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000386:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800038a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800038e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000392:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000394:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000396:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b974 	b.w	8000750 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	468e      	mov	lr, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14d      	bne.n	800052a <__udivmoddi4+0xaa>
 800048e:	428a      	cmp	r2, r1
 8000490:	4694      	mov	ip, r2
 8000492:	d969      	bls.n	8000568 <__udivmoddi4+0xe8>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b152      	cbz	r2, 80004b0 <__udivmoddi4+0x30>
 800049a:	fa01 f302 	lsl.w	r3, r1, r2
 800049e:	f1c2 0120 	rsb	r1, r2, #32
 80004a2:	fa20 f101 	lsr.w	r1, r0, r1
 80004a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80004aa:	ea41 0e03 	orr.w	lr, r1, r3
 80004ae:	4094      	lsls	r4, r2
 80004b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b4:	0c21      	lsrs	r1, r4, #16
 80004b6:	fbbe f6f8 	udiv	r6, lr, r8
 80004ba:	fa1f f78c 	uxth.w	r7, ip
 80004be:	fb08 e316 	mls	r3, r8, r6, lr
 80004c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004c6:	fb06 f107 	mul.w	r1, r6, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004d6:	f080 811f 	bcs.w	8000718 <__udivmoddi4+0x298>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 811c 	bls.w	8000718 <__udivmoddi4+0x298>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a5b      	subs	r3, r3, r1
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004ec:	fb08 3310 	mls	r3, r8, r0, r3
 80004f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f4:	fb00 f707 	mul.w	r7, r0, r7
 80004f8:	42a7      	cmp	r7, r4
 80004fa:	d90a      	bls.n	8000512 <__udivmoddi4+0x92>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 33ff 	add.w	r3, r0, #4294967295
 8000504:	f080 810a 	bcs.w	800071c <__udivmoddi4+0x29c>
 8000508:	42a7      	cmp	r7, r4
 800050a:	f240 8107 	bls.w	800071c <__udivmoddi4+0x29c>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000516:	1be4      	subs	r4, r4, r7
 8000518:	2600      	movs	r6, #0
 800051a:	b11d      	cbz	r5, 8000524 <__udivmoddi4+0xa4>
 800051c:	40d4      	lsrs	r4, r2
 800051e:	2300      	movs	r3, #0
 8000520:	e9c5 4300 	strd	r4, r3, [r5]
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d909      	bls.n	8000542 <__udivmoddi4+0xc2>
 800052e:	2d00      	cmp	r5, #0
 8000530:	f000 80ef 	beq.w	8000712 <__udivmoddi4+0x292>
 8000534:	2600      	movs	r6, #0
 8000536:	e9c5 0100 	strd	r0, r1, [r5]
 800053a:	4630      	mov	r0, r6
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	fab3 f683 	clz	r6, r3
 8000546:	2e00      	cmp	r6, #0
 8000548:	d14a      	bne.n	80005e0 <__udivmoddi4+0x160>
 800054a:	428b      	cmp	r3, r1
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xd4>
 800054e:	4282      	cmp	r2, r0
 8000550:	f200 80f9 	bhi.w	8000746 <__udivmoddi4+0x2c6>
 8000554:	1a84      	subs	r4, r0, r2
 8000556:	eb61 0303 	sbc.w	r3, r1, r3
 800055a:	2001      	movs	r0, #1
 800055c:	469e      	mov	lr, r3
 800055e:	2d00      	cmp	r5, #0
 8000560:	d0e0      	beq.n	8000524 <__udivmoddi4+0xa4>
 8000562:	e9c5 4e00 	strd	r4, lr, [r5]
 8000566:	e7dd      	b.n	8000524 <__udivmoddi4+0xa4>
 8000568:	b902      	cbnz	r2, 800056c <__udivmoddi4+0xec>
 800056a:	deff      	udf	#255	; 0xff
 800056c:	fab2 f282 	clz	r2, r2
 8000570:	2a00      	cmp	r2, #0
 8000572:	f040 8092 	bne.w	800069a <__udivmoddi4+0x21a>
 8000576:	eba1 010c 	sub.w	r1, r1, ip
 800057a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800057e:	fa1f fe8c 	uxth.w	lr, ip
 8000582:	2601      	movs	r6, #1
 8000584:	0c20      	lsrs	r0, r4, #16
 8000586:	fbb1 f3f7 	udiv	r3, r1, r7
 800058a:	fb07 1113 	mls	r1, r7, r3, r1
 800058e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000592:	fb0e f003 	mul.w	r0, lr, r3
 8000596:	4288      	cmp	r0, r1
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x12c>
 800059a:	eb1c 0101 	adds.w	r1, ip, r1
 800059e:	f103 38ff 	add.w	r8, r3, #4294967295
 80005a2:	d202      	bcs.n	80005aa <__udivmoddi4+0x12a>
 80005a4:	4288      	cmp	r0, r1
 80005a6:	f200 80cb 	bhi.w	8000740 <__udivmoddi4+0x2c0>
 80005aa:	4643      	mov	r3, r8
 80005ac:	1a09      	subs	r1, r1, r0
 80005ae:	b2a4      	uxth	r4, r4
 80005b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b4:	fb07 1110 	mls	r1, r7, r0, r1
 80005b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005bc:	fb0e fe00 	mul.w	lr, lr, r0
 80005c0:	45a6      	cmp	lr, r4
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x156>
 80005c4:	eb1c 0404 	adds.w	r4, ip, r4
 80005c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005cc:	d202      	bcs.n	80005d4 <__udivmoddi4+0x154>
 80005ce:	45a6      	cmp	lr, r4
 80005d0:	f200 80bb 	bhi.w	800074a <__udivmoddi4+0x2ca>
 80005d4:	4608      	mov	r0, r1
 80005d6:	eba4 040e 	sub.w	r4, r4, lr
 80005da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005de:	e79c      	b.n	800051a <__udivmoddi4+0x9a>
 80005e0:	f1c6 0720 	rsb	r7, r6, #32
 80005e4:	40b3      	lsls	r3, r6
 80005e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ee:	fa20 f407 	lsr.w	r4, r0, r7
 80005f2:	fa01 f306 	lsl.w	r3, r1, r6
 80005f6:	431c      	orrs	r4, r3
 80005f8:	40f9      	lsrs	r1, r7
 80005fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000602:	fbb1 f8f9 	udiv	r8, r1, r9
 8000606:	0c20      	lsrs	r0, r4, #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fb09 1118 	mls	r1, r9, r8, r1
 8000610:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000614:	fb08 f00e 	mul.w	r0, r8, lr
 8000618:	4288      	cmp	r0, r1
 800061a:	fa02 f206 	lsl.w	r2, r2, r6
 800061e:	d90b      	bls.n	8000638 <__udivmoddi4+0x1b8>
 8000620:	eb1c 0101 	adds.w	r1, ip, r1
 8000624:	f108 3aff 	add.w	sl, r8, #4294967295
 8000628:	f080 8088 	bcs.w	800073c <__udivmoddi4+0x2bc>
 800062c:	4288      	cmp	r0, r1
 800062e:	f240 8085 	bls.w	800073c <__udivmoddi4+0x2bc>
 8000632:	f1a8 0802 	sub.w	r8, r8, #2
 8000636:	4461      	add	r1, ip
 8000638:	1a09      	subs	r1, r1, r0
 800063a:	b2a4      	uxth	r4, r4
 800063c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000640:	fb09 1110 	mls	r1, r9, r0, r1
 8000644:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000648:	fb00 fe0e 	mul.w	lr, r0, lr
 800064c:	458e      	cmp	lr, r1
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x1e2>
 8000650:	eb1c 0101 	adds.w	r1, ip, r1
 8000654:	f100 34ff 	add.w	r4, r0, #4294967295
 8000658:	d26c      	bcs.n	8000734 <__udivmoddi4+0x2b4>
 800065a:	458e      	cmp	lr, r1
 800065c:	d96a      	bls.n	8000734 <__udivmoddi4+0x2b4>
 800065e:	3802      	subs	r0, #2
 8000660:	4461      	add	r1, ip
 8000662:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000666:	fba0 9402 	umull	r9, r4, r0, r2
 800066a:	eba1 010e 	sub.w	r1, r1, lr
 800066e:	42a1      	cmp	r1, r4
 8000670:	46c8      	mov	r8, r9
 8000672:	46a6      	mov	lr, r4
 8000674:	d356      	bcc.n	8000724 <__udivmoddi4+0x2a4>
 8000676:	d053      	beq.n	8000720 <__udivmoddi4+0x2a0>
 8000678:	b15d      	cbz	r5, 8000692 <__udivmoddi4+0x212>
 800067a:	ebb3 0208 	subs.w	r2, r3, r8
 800067e:	eb61 010e 	sbc.w	r1, r1, lr
 8000682:	fa01 f707 	lsl.w	r7, r1, r7
 8000686:	fa22 f306 	lsr.w	r3, r2, r6
 800068a:	40f1      	lsrs	r1, r6
 800068c:	431f      	orrs	r7, r3
 800068e:	e9c5 7100 	strd	r7, r1, [r5]
 8000692:	2600      	movs	r6, #0
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	40d8      	lsrs	r0, r3
 80006a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a4:	fa21 f303 	lsr.w	r3, r1, r3
 80006a8:	4091      	lsls	r1, r2
 80006aa:	4301      	orrs	r1, r0
 80006ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b0:	fa1f fe8c 	uxth.w	lr, ip
 80006b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80006b8:	fb07 3610 	mls	r6, r7, r0, r3
 80006bc:	0c0b      	lsrs	r3, r1, #16
 80006be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006c2:	fb00 f60e 	mul.w	r6, r0, lr
 80006c6:	429e      	cmp	r6, r3
 80006c8:	fa04 f402 	lsl.w	r4, r4, r2
 80006cc:	d908      	bls.n	80006e0 <__udivmoddi4+0x260>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006d6:	d22f      	bcs.n	8000738 <__udivmoddi4+0x2b8>
 80006d8:	429e      	cmp	r6, r3
 80006da:	d92d      	bls.n	8000738 <__udivmoddi4+0x2b8>
 80006dc:	3802      	subs	r0, #2
 80006de:	4463      	add	r3, ip
 80006e0:	1b9b      	subs	r3, r3, r6
 80006e2:	b289      	uxth	r1, r1
 80006e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006e8:	fb07 3316 	mls	r3, r7, r6, r3
 80006ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006f0:	fb06 f30e 	mul.w	r3, r6, lr
 80006f4:	428b      	cmp	r3, r1
 80006f6:	d908      	bls.n	800070a <__udivmoddi4+0x28a>
 80006f8:	eb1c 0101 	adds.w	r1, ip, r1
 80006fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000700:	d216      	bcs.n	8000730 <__udivmoddi4+0x2b0>
 8000702:	428b      	cmp	r3, r1
 8000704:	d914      	bls.n	8000730 <__udivmoddi4+0x2b0>
 8000706:	3e02      	subs	r6, #2
 8000708:	4461      	add	r1, ip
 800070a:	1ac9      	subs	r1, r1, r3
 800070c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000710:	e738      	b.n	8000584 <__udivmoddi4+0x104>
 8000712:	462e      	mov	r6, r5
 8000714:	4628      	mov	r0, r5
 8000716:	e705      	b.n	8000524 <__udivmoddi4+0xa4>
 8000718:	4606      	mov	r6, r0
 800071a:	e6e3      	b.n	80004e4 <__udivmoddi4+0x64>
 800071c:	4618      	mov	r0, r3
 800071e:	e6f8      	b.n	8000512 <__udivmoddi4+0x92>
 8000720:	454b      	cmp	r3, r9
 8000722:	d2a9      	bcs.n	8000678 <__udivmoddi4+0x1f8>
 8000724:	ebb9 0802 	subs.w	r8, r9, r2
 8000728:	eb64 0e0c 	sbc.w	lr, r4, ip
 800072c:	3801      	subs	r0, #1
 800072e:	e7a3      	b.n	8000678 <__udivmoddi4+0x1f8>
 8000730:	4646      	mov	r6, r8
 8000732:	e7ea      	b.n	800070a <__udivmoddi4+0x28a>
 8000734:	4620      	mov	r0, r4
 8000736:	e794      	b.n	8000662 <__udivmoddi4+0x1e2>
 8000738:	4640      	mov	r0, r8
 800073a:	e7d1      	b.n	80006e0 <__udivmoddi4+0x260>
 800073c:	46d0      	mov	r8, sl
 800073e:	e77b      	b.n	8000638 <__udivmoddi4+0x1b8>
 8000740:	3b02      	subs	r3, #2
 8000742:	4461      	add	r1, ip
 8000744:	e732      	b.n	80005ac <__udivmoddi4+0x12c>
 8000746:	4630      	mov	r0, r6
 8000748:	e709      	b.n	800055e <__udivmoddi4+0xde>
 800074a:	4464      	add	r4, ip
 800074c:	3802      	subs	r0, #2
 800074e:	e742      	b.n	80005d6 <__udivmoddi4+0x156>

08000750 <__aeabi_idiv0>:
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop

08000754 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000758:	4605      	mov	r5, r0
 800075a:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 800075c:	f8b5 8000 	ldrh.w	r8, [r5]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000760:	686a      	ldr	r2, [r5, #4]

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 8000762:	ea4f 0158 	mov.w	r1, r8, lsr #1
  float32_t * p2 = p1 + L;
 8000766:	eb00 0688 	add.w	r6, r0, r8, lsl #2
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800076a:	ea5f 08d8 	movs.w	r8, r8, lsr #3
{
 800076e:	ed2d 8b08 	vpush	{d8-d11}
 8000772:	b082      	sub	sp, #8
  for (l = L >> 2; l > 0; l-- )
 8000774:	f000 80a9 	beq.w	80008ca <arm_cfft_radix8by2_f32+0x176>
 8000778:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800077c:	f100 0310 	add.w	r3, r0, #16
 8000780:	f102 0710 	add.w	r7, r2, #16
 8000784:	f106 0e10 	add.w	lr, r6, #16
 8000788:	f10c 0c10 	add.w	ip, ip, #16
 800078c:	eb03 1808 	add.w	r8, r3, r8, lsl #4
 8000790:	eb00 040c 	add.w	r4, r0, ip
 8000794:	44b4      	add	ip, r6
    t3[1] = pMid1[1];
    t3[2] = pMid1[2];
    t3[3] = pMid1[3];

    t4[0] = pMid2[0];
    t4[1] = pMid2[1];
 8000796:	ed1c 5a03 	vldr	s10, [ip, #-12]
  for (l = L >> 2; l > 0; l-- )
 800079a:	f10e 0e10 	add.w	lr, lr, #16
    t4[0] = pMid2[0];
 800079e:	ed1c 2a04 	vldr	s4, [ip, #-16]
  for (l = L >> 2; l > 0; l-- )
 80007a2:	f10c 0c10 	add.w	ip, ip, #16
    t2[0] = p2[0];
 80007a6:	ed5e 2a08 	vldr	s5, [lr, #-32]	; 0xffffffe0
  for (l = L >> 2; l > 0; l-- )
 80007aa:	3710      	adds	r7, #16
    t2[1] = p2[1];
 80007ac:	ed1e 3a07 	vldr	s6, [lr, #-28]	; 0xffffffe4
  for (l = L >> 2; l > 0; l-- )
 80007b0:	3310      	adds	r3, #16
    t2[2] = p2[2];
 80007b2:	ed5e 3a06 	vldr	s7, [lr, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 80007b6:	3410      	adds	r4, #16
    t2[3] = p2[3];
 80007b8:	ed1e 4a05 	vldr	s8, [lr, #-20]	; 0xffffffec
    t4[2] = pMid2[2];
 80007bc:	ed5c 7a06 	vldr	s15, [ip, #-24]	; 0xffffffe8
    t4[3] = pMid2[3];
 80007c0:	ed5c 6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
    t1[0] = p1[0];
 80007c4:	ed13 1a08 	vldr	s2, [r3, #-32]	; 0xffffffe0
    t1[1] = p1[1];
 80007c8:	ed53 1a07 	vldr	s3, [r3, #-28]	; 0xffffffe4
    t1[2] = p1[2];
 80007cc:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8

    *p1++ = t1[0] + t2[0];
 80007d0:	ee71 ba22 	vadd.f32	s23, s2, s5
    t1[3] = p1[3];
 80007d4:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
    *p1++ = t1[1] + t2[1];
 80007d8:	ee31 ba83 	vadd.f32	s22, s3, s6
    t3[0] = pMid1[0];
 80007dc:	ed54 4a08 	vldr	s9, [r4, #-32]	; 0xffffffe0
    *p1++ = t1[2] + t2[2];
 80007e0:	ee76 aa23 	vadd.f32	s21, s12, s7
    t3[1] = pMid1[1];
 80007e4:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80007e8:	ee37 aa04 	vadd.f32	s20, s14, s8
    t3[2] = pMid1[2];
 80007ec:	ed54 0a06 	vldr	s1, [r4, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
    t2[1] = t1[1] - t2[1];
    t2[2] = t1[2] - t2[2];
    t2[3] = t1[3] - t2[3];    /* for col 2 */

    *pMid1++ = t3[0] + t4[0];
 80007f0:	ee74 9a82 	vadd.f32	s19, s9, s4
    t3[3] = pMid1[3];
 80007f4:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    *pMid1++ = t3[1] + t4[1];
 80007f8:	ee35 9a85 	vadd.f32	s18, s11, s10
    *pMid1++ = t3[2] + t4[2];
 80007fc:	ee70 8aa7 	vadd.f32	s17, s1, s15
    *p1++ = t1[0] + t2[0];
 8000800:	ed43 ba08 	vstr	s23, [r3, #-32]	; 0xffffffe0
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8000804:	ee30 8a26 	vadd.f32	s16, s0, s13
    *p1++ = t1[1] + t2[1];
 8000808:	ed03 ba07 	vstr	s22, [r3, #-28]	; 0xffffffe4
    *p1++ = t1[2] + t2[2];
 800080c:	ed43 aa06 	vstr	s21, [r3, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
 8000810:	ee31 1a62 	vsub.f32	s2, s2, s5
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8000814:	ed03 aa05 	vstr	s20, [r3, #-20]	; 0xffffffec
    t2[1] = t1[1] - t2[1];
 8000818:	ee71 1ac3 	vsub.f32	s3, s3, s6
    *pMid1++ = t3[0] + t4[0];
 800081c:	ed44 9a08 	vstr	s19, [r4, #-32]	; 0xffffffe0

    t4[0] = t4[0] - t3[0];
 8000820:	ee32 2a64 	vsub.f32	s4, s4, s9
    *pMid1++ = t3[1] + t4[1];
 8000824:	ed04 9a07 	vstr	s18, [r4, #-28]	; 0xffffffe4
    t4[1] = t4[1] - t3[1];
 8000828:	ee75 5a65 	vsub.f32	s11, s10, s11
    *pMid1++ = t3[2] + t4[2];
 800082c:	ed44 8a06 	vstr	s17, [r4, #-24]	; 0xffffffe8
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8000830:	ee37 7a44 	vsub.f32	s14, s14, s8
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8000834:	ed04 8a05 	vstr	s16, [r4, #-20]	; 0xffffffec
    t2[2] = t1[2] - t2[2];
 8000838:	ee36 6a63 	vsub.f32	s12, s12, s7
    t4[2] = t4[2] - t3[2];
    t4[3] = t4[3] - t3[3];    /* for col 2 */

    twR = *tw++;
 800083c:	ed57 4a08 	vldr	s9, [r7, #-32]	; 0xffffffe0
    t4[2] = t4[2] - t3[2];
 8000840:	ee77 7ae0 	vsub.f32	s15, s15, s1
    twI = *tw++;
 8000844:	ed17 5a07 	vldr	s10, [r7, #-28]	; 0xffffffe4
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8000848:	ee76 6ac0 	vsub.f32	s13, s13, s0
    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
    m1 = t4[1] * twR;
    m2 = t4[1] * twI;
    m3 = t4[0] * twR;
 800084c:	ee22 4a24 	vmul.f32	s8, s4, s9
  for (l = L >> 2; l > 0; l-- )
 8000850:	4543      	cmp	r3, r8
    m1 = t2[1] * twI;
 8000852:	ee61 2a85 	vmul.f32	s5, s3, s10
    *p2++ = m2 - m3;
 8000856:	ee25 3a41 	vnmul.f32	s6, s10, s2

    *pMid2++ = m0 - m1;
 800085a:	ee64 3ae5 	vnmul.f32	s7, s9, s11
    *p2++ = m0 + m1;
 800085e:	eee1 2a24 	vfma.f32	s5, s2, s9
    *p2++ = m2 - m3;
 8000862:	eea1 3aa4 	vfma.f32	s6, s3, s9
    *pMid2++ = m2 + m3;
 8000866:	eef0 4a44 	vmov.f32	s9, s8
    *pMid2++ = m0 - m1;
 800086a:	eee2 3a05 	vfma.f32	s7, s4, s10
    *pMid2++ = m2 + m3;
 800086e:	eee5 4a85 	vfma.f32	s9, s11, s10
    *p2++ = m0 + m1;
 8000872:	ed4e 2a08 	vstr	s5, [lr, #-32]	; 0xffffffe0
    *p2++ = m2 - m3;
 8000876:	ed0e 3a07 	vstr	s6, [lr, #-28]	; 0xffffffe4
    *pMid2++ = m0 - m1;
 800087a:	ed4c 3a08 	vstr	s7, [ip, #-32]	; 0xffffffe0
    *pMid2++ = m2 + m3;
 800087e:	ed4c 4a07 	vstr	s9, [ip, #-28]	; 0xffffffe4

    twR = *tw++;
 8000882:	ed17 5a06 	vldr	s10, [r7, #-24]	; 0xffffffe8
    twI = *tw++;
 8000886:	ed57 5a05 	vldr	s11, [r7, #-20]	; 0xffffffec
    *p2++ = m2 - m3;

    m0 = t4[2] * twI;
    m1 = t4[3] * twR;
    m2 = t4[3] * twI;
    m3 = t4[2] * twR;
 800088a:	ee67 4a85 	vmul.f32	s9, s15, s10
    m1 = t2[3] * twI;
 800088e:	ee27 3a25 	vmul.f32	s6, s14, s11
    *p2++ = m2 - m3;
 8000892:	ee65 3ac6 	vnmul.f32	s7, s11, s12

    *pMid2++ = m0 - m1;
 8000896:	ee25 4a66 	vnmul.f32	s8, s10, s13
    *p2++ = m0 + m1;
 800089a:	eea6 3a05 	vfma.f32	s6, s12, s10
    *pMid2++ = m2 + m3;
 800089e:	eeb0 6a64 	vmov.f32	s12, s9
 80008a2:	eea6 6aa5 	vfma.f32	s12, s13, s11
    *p2++ = m2 - m3;
 80008a6:	eef0 6a63 	vmov.f32	s13, s7
    *p2++ = m0 + m1;
 80008aa:	ed0e 3a06 	vstr	s6, [lr, #-24]	; 0xffffffe8
    *p2++ = m2 - m3;
 80008ae:	eee7 6a05 	vfma.f32	s13, s14, s10
    *pMid2++ = m0 - m1;
 80008b2:	eeb0 7a44 	vmov.f32	s14, s8
 80008b6:	eea7 7aa5 	vfma.f32	s14, s15, s11
    *p2++ = m2 - m3;
 80008ba:	ed4e 6a05 	vstr	s13, [lr, #-20]	; 0xffffffec
    *pMid2++ = m2 + m3;
 80008be:	ed0c 6a05 	vstr	s12, [ip, #-20]	; 0xffffffec
    *pMid2++ = m0 - m1;
 80008c2:	ed0c 7a06 	vstr	s14, [ip, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 80008c6:	f47f af66 	bne.w	8000796 <arm_cfft_radix8by2_f32+0x42>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80008ca:	b289      	uxth	r1, r1
 80008cc:	2302      	movs	r3, #2
 80008ce:	9101      	str	r1, [sp, #4]
 80008d0:	f000 face 	bl	8000e70 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80008d4:	2302      	movs	r3, #2
 80008d6:	686a      	ldr	r2, [r5, #4]
 80008d8:	9901      	ldr	r1, [sp, #4]
 80008da:	4630      	mov	r0, r6
}
 80008dc:	b002      	add	sp, #8
 80008de:	ecbd 8b08 	vpop	{d8-d11}
 80008e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80008e6:	f000 bac3 	b.w	8000e70 <arm_radix8_butterfly_f32>
 80008ea:	bf00      	nop

080008ec <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f0:	4607      	mov	r7, r0
 80008f2:	ed2d 8b06 	vpush	{d8-d10}
 80008f6:	b08f      	sub	sp, #60	; 0x3c
 80008f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80008fa:	4608      	mov	r0, r1
 80008fc:	910c      	str	r1, [sp, #48]	; 0x30
    uint32_t    L  = S->fftLen >> 1;
 80008fe:	8839      	ldrh	r1, [r7, #0]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000900:	4606      	mov	r6, r0
    p1ap3_0 = p1[0] + p3[0];
 8000902:	edd0 7a00 	vldr	s15, [r0]
    uint32_t    L  = S->fftLen >> 1;
 8000906:	0849      	lsrs	r1, r1, #1
    p1ap3_1 = p1[1] + p3[1];
 8000908:	ed90 7a01 	vldr	s14, [r0, #4]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800090c:	687f      	ldr	r7, [r7, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800090e:	3608      	adds	r6, #8
    float32_t * p3 = p2 + L;
 8000910:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    float32_t * p2 = p1 + L;
 8000914:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000918:	9604      	str	r6, [sp, #16]
    p1ap3_0 = p1[0] + p3[0];
 800091a:	edd2 6a00 	vldr	s13, [r2]
    float32_t * p4 = p3 + L;
 800091e:	eb02 0481 	add.w	r4, r2, r1, lsl #2
    p1ap3_1 = p1[1] + p3[1];
 8000922:	edd2 5a01 	vldr	s11, [r2, #4]
    float32_t * p2 = p1 + L;
 8000926:	008b      	lsls	r3, r1, #2
    p1ap3_0 = p1[0] + p3[0];
 8000928:	ee37 6aa6 	vadd.f32	s12, s15, s13
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800092c:	ed95 5a00 	vldr	s10, [r5]
    p1sp3_0 = p1[0] - p3[0];
 8000930:	ee77 7ae6 	vsub.f32	s15, s15, s13
    L >>= 1;
 8000934:	0849      	lsrs	r1, r1, #1
    p1ap3_1 = p1[1] + p3[1];
 8000936:	ee77 6a25 	vadd.f32	s13, s14, s11
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800093a:	edd5 2a01 	vldr	s5, [r5, #4]
    p1sp3_1 = p1[1] - p3[1];
 800093e:	ee37 7a65 	vsub.f32	s14, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000942:	edd4 5a00 	vldr	s11, [r4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000946:	ee76 3a45 	vsub.f32	s7, s12, s10
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800094a:	ed94 2a01 	vldr	s4, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800094e:	ee35 6a86 	vadd.f32	s12, s11, s12
    L >>= 1;
 8000952:	9107      	str	r1, [sp, #28]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000954:	ee75 4a07 	vadd.f32	s9, s10, s14
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8000958:	4629      	mov	r1, r5
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800095a:	ee35 7a87 	vadd.f32	s14, s11, s14
    float32_t * p3 = p2 + L;
 800095e:	9209      	str	r2, [sp, #36]	; 0x24
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000960:	ee36 6a05 	vadd.f32	s12, s12, s10
    *p2++ = t2[0];
 8000964:	3108      	adds	r1, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000966:	ee32 3aa7 	vadd.f32	s6, s5, s15
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];

    tw2 += twMod2;
 800096a:	f107 0608 	add.w	r6, r7, #8
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800096e:	ee37 7a45 	vsub.f32	s14, s14, s10
    *p2++ = t2[0];
 8000972:	9106      	str	r1, [sp, #24]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000974:	ed80 6a00 	vstr	s12, [r0]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000978:	ee36 4ae2 	vsub.f32	s8, s13, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800097c:	ed94 5a01 	vldr	s10, [r4, #4]
    *p3++ = t3[0];
 8000980:	4611      	mov	r1, r2
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000982:	ed95 6a01 	vldr	s12, [r5, #4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000986:	ee73 3ae5 	vsub.f32	s7, s7, s11
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800098a:	ee76 6a85 	vadd.f32	s13, s13, s10
    *p3++ = t3[0];
 800098e:	3108      	adds	r1, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000990:	ee33 3a42 	vsub.f32	s6, s6, s4
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8000994:	970a      	str	r7, [sp, #40]	; 0x28
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000996:	ee34 4a42 	vsub.f32	s8, s8, s4
    *p3++ = t3[0];
 800099a:	9100      	str	r1, [sp, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800099c:	ee76 6a86 	vadd.f32	s13, s13, s12
    *p3++ = t3[1];
 80009a0:	4611      	mov	r1, r2
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80009a2:	ee72 7a27 	vadd.f32	s15, s4, s15
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80009a6:	ee74 5ae5 	vsub.f32	s11, s9, s11
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80009aa:	edc0 6a01 	vstr	s13, [r0, #4]
    *p2++ = t2[0];
 80009ae:	ed85 3a00 	vstr	s6, [r5]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80009b2:	ee77 7ae2 	vsub.f32	s15, s15, s5
    *p2++ = t2[1];
 80009b6:	ed85 7a01 	vstr	s14, [r5, #4]
    *p3++ = t3[0];
 80009ba:	edc2 3a00 	vstr	s7, [r2]
    *p3++ = t3[1];
 80009be:	ed82 4a01 	vstr	s8, [r2, #4]
    *p4++ = t4[0];
 80009c2:	4622      	mov	r2, r4
 80009c4:	edc4 7a00 	vstr	s15, [r4]
 80009c8:	3208      	adds	r2, #8
    *p4++ = t4[1];
 80009ca:	edc4 5a01 	vstr	s11, [r4, #4]
    *p4++ = t4[0];
 80009ce:	9205      	str	r2, [sp, #20]
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- )
 80009d0:	9a07      	ldr	r2, [sp, #28]
    tw2 += twMod2;
 80009d2:	9603      	str	r6, [sp, #12]
    tw3 += twMod3;
 80009d4:	f107 0610 	add.w	r6, r7, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009d8:	3a02      	subs	r2, #2
    tw3 += twMod3;
 80009da:	9601      	str	r6, [sp, #4]
    tw4 += twMod4;
 80009dc:	f107 0618 	add.w	r6, r7, #24
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009e0:	0852      	lsrs	r2, r2, #1
    tw4 += twMod4;
 80009e2:	9602      	str	r6, [sp, #8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009e4:	9208      	str	r2, [sp, #32]
 80009e6:	f000 8134 	beq.w	8000c52 <arm_cfft_radix8by4_f32+0x366>
 80009ea:	4693      	mov	fp, r2
 80009ec:	f100 0210 	add.w	r2, r0, #16
 80009f0:	3b0c      	subs	r3, #12
 80009f2:	f107 0920 	add.w	r9, r7, #32
 80009f6:	920d      	str	r2, [sp, #52]	; 0x34
 80009f8:	460a      	mov	r2, r1
 80009fa:	f107 0830 	add.w	r8, r7, #48	; 0x30
 80009fe:	4423      	add	r3, r4
 8000a00:	f102 0e10 	add.w	lr, r2, #16
 8000a04:	f1a5 060c 	sub.w	r6, r5, #12
 8000a08:	f8dd a004 	ldr.w	sl, [sp, #4]
 8000a0c:	f105 0010 	add.w	r0, r5, #16
 8000a10:	390c      	subs	r1, #12
 8000a12:	f1a4 0c0c 	sub.w	ip, r4, #12
 8000a16:	f104 0210 	add.w	r2, r4, #16
 8000a1a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a1c:	ed52 5a02 	vldr	s11, [r2, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a20:	f1bb 0b01 	subs.w	fp, fp, #1
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a24:	ed10 5a02 	vldr	s10, [r0, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a28:	f107 0708 	add.w	r7, r7, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a2c:	ed5e 3a02 	vldr	s7, [lr, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a30:	f1a6 0608 	sub.w	r6, r6, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a34:	ed17 7a04 	vldr	s14, [r7, #-16]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a38:	ee35 4a25 	vadd.f32	s8, s10, s11
      p1ap3_1 = p1[1] + p3[1];
 8000a3c:	ed5e 6a01 	vldr	s13, [lr, #-4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a40:	f10a 0a08 	add.w	sl, sl, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a44:	ee37 1a23 	vadd.f32	s2, s14, s7
      p1ap3_1 = p1[1] + p3[1];
 8000a48:	ed57 7a03 	vldr	s15, [r7, #-12]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a4c:	ed52 4a01 	vldr	s9, [r2, #-4]
      p1sp3_0 = p1[0] - p3[0];
 8000a50:	ee37 7a63 	vsub.f32	s14, s14, s7
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a54:	ed10 6a01 	vldr	s12, [r0, #-4]
      p1ap3_1 = p1[1] + p3[1];
 8000a58:	ee77 3aa6 	vadd.f32	s7, s15, s13
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a5c:	ee34 4a01 	vadd.f32	s8, s8, s2
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a60:	f100 0008 	add.w	r0, r0, #8
      p1sp3_1 = p1[1] - p3[1];
 8000a64:	ee77 7ae6 	vsub.f32	s15, s15, s13
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a68:	f1a1 0108 	sub.w	r1, r1, #8
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000a6c:	ee31 1a45 	vsub.f32	s2, s2, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a70:	f109 0910 	add.w	r9, r9, #16
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a74:	ed07 4a04 	vstr	s8, [r7, #-16]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a78:	ee77 0a64 	vsub.f32	s1, s14, s9
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a7c:	ed12 4a01 	vldr	s8, [r2, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a80:	ee37 0ac5 	vsub.f32	s0, s15, s10
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a84:	ed50 6a03 	vldr	s13, [r0, #-12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000a88:	ee77 7ae5 	vsub.f32	s15, s15, s11
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000a8c:	ee31 1a65 	vsub.f32	s2, s2, s11
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a90:	f10e 0e08 	add.w	lr, lr, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a94:	ee76 6a84 	vadd.f32	s13, s13, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a98:	f1ac 0c08 	sub.w	ip, ip, #8
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a9c:	ee30 0a25 	vadd.f32	s0, s0, s11
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000aa0:	f108 0818 	add.w	r8, r8, #24
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000aa4:	ee37 5a85 	vadd.f32	s10, s15, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000aa8:	f102 0208 	add.w	r2, r2, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000aac:	ee76 6aa3 	vadd.f32	s13, s13, s7
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000ab0:	f1a3 0308 	sub.w	r3, r3, #8
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000ab4:	ee70 0a86 	vadd.f32	s1, s1, s12
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000ab8:	ee37 7a46 	vsub.f32	s14, s14, s12
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000abc:	ed47 6a03 	vstr	s13, [r7, #-12]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000ac0:	ee33 6ac6 	vsub.f32	s12, s7, s12

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000ac4:	eddc 7a04 	vldr	s15, [ip, #16]
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000ac8:	edd3 9a04 	vldr	s19, [r3, #16]
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000acc:	ee37 7a24 	vadd.f32	s14, s14, s9
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000ad0:	ed96 8a04 	vldr	s16, [r6, #16]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000ad4:	ee36 4a64 	vsub.f32	s8, s12, s9
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000ad8:	edd1 5a04 	vldr	s11, [r1, #16]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000adc:	ee38 3a27 	vadd.f32	s6, s16, s15
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000ae0:	ed93 9a03 	vldr	s18, [r3, #12]
 8000ae4:	ee75 2aa9 	vadd.f32	s5, s11, s19
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000ae8:	ed9c 2a03 	vldr	s4, [ip, #12]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000aec:	ee75 3ae9 	vsub.f32	s7, s11, s19
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000af0:	edd1 8a03 	vldr	s17, [r1, #12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000af4:	edd6 4a03 	vldr	s9, [r6, #12]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000af8:	ee78 6a09 	vadd.f32	s13, s16, s18
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000afc:	ee33 6a22 	vadd.f32	s12, s6, s5
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000b00:	ee34 aa82 	vadd.f32	s20, s9, s4
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000b04:	ee73 1ac2 	vsub.f32	s3, s7, s4
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000b08:	ed86 6a04 	vstr	s12, [r6, #16]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000b0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b10:	edd3 aa03 	vldr	s21, [r3, #12]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b14:	ee77 7a89 	vadd.f32	s15, s15, s18
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b18:	ed91 6a03 	vldr	s12, [r1, #12]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000b1c:	ee71 1aa4 	vadd.f32	s3, s3, s9
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000b20:	ee73 4ae4 	vsub.f32	s9, s7, s9
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b24:	ee36 6a2a 	vadd.f32	s12, s12, s21
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000b28:	ee76 6ae8 	vsub.f32	s13, s13, s17
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b2c:	ee77 7ae8 	vsub.f32	s15, s15, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b30:	ee36 6a0a 	vadd.f32	s12, s12, s20
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000b34:	ee73 5a65 	vsub.f32	s11, s6, s11
      *p3++ = m0 + m1;
      *p3++ = m2 - m3;
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8000b38:	ee72 2ac3 	vsub.f32	s5, s5, s6
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000b3c:	ee3a 3a68 	vsub.f32	s6, s20, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b40:	ed86 6a03 	vstr	s12, [r6, #12]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000b44:	ee74 4a82 	vadd.f32	s9, s9, s4
      twR = *tw2++;
 8000b48:	ed5a 3a04 	vldr	s7, [sl, #-16]
      twI = *tw2++;
 8000b4c:	ed1a 2a03 	vldr	s4, [sl, #-12]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b50:	ee37 6ac8 	vsub.f32	s12, s15, s16
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000b54:	ee33 3a49 	vsub.f32	s6, s6, s18
      m3 = t2[3] * twR;
 8000b58:	ee66 7aa3 	vmul.f32	s15, s13, s7
      *pEnd2-- = m0 - m1;
 8000b5c:	ee23 8ae1 	vnmul.f32	s16, s7, s3
      *p2++ = m2 - m3;
 8000b60:	ee62 8a60 	vnmul.f32	s17, s4, s1
      m1 = t2[1] * twI;
 8000b64:	ee20 9a02 	vmul.f32	s18, s0, s4
      *pEnd2-- = m2 + m3;
 8000b68:	eee1 7a82 	vfma.f32	s15, s3, s4
      *pEnd2-- = m0 - m1;
 8000b6c:	eea6 8a82 	vfma.f32	s16, s13, s4
      *p2++ = m0 + m1;
 8000b70:	eeb0 2a49 	vmov.f32	s4, s18
      *p2++ = m2 - m3;
 8000b74:	eef0 6a68 	vmov.f32	s13, s17
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000b78:	ee75 5ae9 	vsub.f32	s11, s11, s19
      *p2++ = m0 + m1;
 8000b7c:	eea0 2aa3 	vfma.f32	s4, s1, s7
      *p2++ = m2 - m3;
 8000b80:	eee0 6a23 	vfma.f32	s13, s0, s7
      *p2++ = m0 + m1;
 8000b84:	ed00 2a04 	vstr	s4, [r0, #-16]
      *p2++ = m2 - m3;
 8000b88:	ed40 6a03 	vstr	s13, [r0, #-12]
      *pEnd2-- = m0 - m1;
 8000b8c:	ed81 8a04 	vstr	s16, [r1, #16]
      *pEnd2-- = m2 + m3;
 8000b90:	edc1 7a03 	vstr	s15, [r1, #12]
      twI = tw3[1];
 8000b94:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
      twR = tw3[0];
 8000b98:	ed59 3a08 	vldr	s7, [r9, #-32]	; 0xffffffe0
      *p3++ = m2 - m3;
 8000b9c:	ee27 2ac1 	vnmul.f32	s4, s15, s2
      m1 = t3[1] * twI;
 8000ba0:	ee64 1a27 	vmul.f32	s3, s8, s15
      m1 =  t3[2] * twI;
      m2 =  t3[2] * twR;
      m3 =  t3[3] * twI;
 8000ba4:	ee65 6aa7 	vmul.f32	s13, s11, s15

      *pEnd3-- = m0 - m1;
 8000ba8:	ee67 7ac3 	vnmul.f32	s15, s15, s6
      *p3++ = m2 - m3;
 8000bac:	eef0 5a42 	vmov.f32	s11, s4
      *pEnd3-- = m3 - m2;
 8000bb0:	eee3 6a63 	vfms.f32	s13, s6, s7
      *pEnd3-- = m0 - m1;
 8000bb4:	eee2 7aa3 	vfma.f32	s15, s5, s7
      *p3++ = m2 - m3;
 8000bb8:	eee4 5a23 	vfma.f32	s11, s8, s7
      *p3++ = m0 + m1;
 8000bbc:	eee1 1a23 	vfma.f32	s3, s2, s7
 8000bc0:	ed4e 1a04 	vstr	s3, [lr, #-16]
      *p3++ = m2 - m3;
 8000bc4:	ed4e 5a03 	vstr	s11, [lr, #-12]
      *pEnd3-- = m0 - m1;
 8000bc8:	edcc 7a04 	vstr	s15, [ip, #16]
      *pEnd3-- = m3 - m2;
 8000bcc:	edcc 6a03 	vstr	s13, [ip, #12]

      /* COL 4 */
      twR = tw4[0];
 8000bd0:	ed58 6a0c 	vldr	s13, [r8, #-48]	; 0xffffffd0
      twI = tw4[1];
 8000bd4:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
      m1 = t4[2] * twR;
      m2 = t4[2] * twI;
      m3 = t4[3] * twR;
 8000bd8:	ee66 5a26 	vmul.f32	s11, s12, s13
      *p4++ = m2 - m3;
 8000bdc:	ee67 3ac7 	vnmul.f32	s7, s15, s14
      m1 = t4[1] * twI;
 8000be0:	ee25 3a27 	vmul.f32	s6, s10, s15

      *pEnd4-- = m0 - m1;
 8000be4:	ee26 4ae4 	vnmul.f32	s8, s13, s9
      *p4++ = m2 - m3;
 8000be8:	eee5 3a26 	vfma.f32	s7, s10, s13
      *p4++ = m0 + m1;
 8000bec:	eea7 3a26 	vfma.f32	s6, s14, s13
      *pEnd4-- = m0 - m1;
 8000bf0:	eef0 6a44 	vmov.f32	s13, s8
      *pEnd4-- = m2 + m3;
 8000bf4:	eeb0 7a65 	vmov.f32	s14, s11
      *pEnd4-- = m0 - m1;
 8000bf8:	eee6 6a27 	vfma.f32	s13, s12, s15
      *pEnd4-- = m2 + m3;
 8000bfc:	eea4 7aa7 	vfma.f32	s14, s9, s15
      *p4++ = m2 - m3;
 8000c00:	ed42 3a03 	vstr	s7, [r2, #-12]
      *p4++ = m0 + m1;
 8000c04:	ed02 3a04 	vstr	s6, [r2, #-16]
      *pEnd4-- = m0 - m1;
 8000c08:	edc3 6a04 	vstr	s13, [r3, #16]
      *pEnd4-- = m2 + m3;
 8000c0c:	ed83 7a03 	vstr	s14, [r3, #12]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000c10:	f47f af04 	bne.w	8000a1c <arm_cfft_radix8by4_f32+0x130>
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000c14:	9b08      	ldr	r3, [sp, #32]
 8000c16:	9a04      	ldr	r2, [sp, #16]
 8000c18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c1c:	9204      	str	r2, [sp, #16]
      twI = *tw2++;
 8000c1e:	9a03      	ldr	r2, [sp, #12]
 8000c20:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c24:	9203      	str	r2, [sp, #12]
      *p2++ = m2 - m3;
 8000c26:	9a06      	ldr	r2, [sp, #24]
 8000c28:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c2c:	9206      	str	r2, [sp, #24]
      tw3 += twMod3;
 8000c2e:	9a01      	ldr	r2, [sp, #4]
 8000c30:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000c34:	9201      	str	r2, [sp, #4]
      *p3++ = m2 - m3;
 8000c36:	9a00      	ldr	r2, [sp, #0]
 8000c38:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c3c:	9200      	str	r2, [sp, #0]
      *p4++ = m2 - m3;
 8000c3e:	9a05      	ldr	r2, [sp, #20]
 8000c40:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      tw4 += twMod4;
 8000c44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      *p4++ = m2 - m3;
 8000c48:	9205      	str	r2, [sp, #20]
      tw4 += twMod4;
 8000c4a:	9a02      	ldr	r2, [sp, #8]
 8000c4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000c50:	9302      	str	r3, [sp, #8]
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c52:	9b06      	ldr	r3, [sp, #24]
 8000c54:	9e05      	ldr	r6, [sp, #20]
    p1ap3_0 = p1[0] + p3[0];
 8000c56:	9f04      	ldr	r7, [sp, #16]
 8000c58:	9900      	ldr	r1, [sp, #0]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c5a:	edd6 2a00 	vldr	s5, [r6]
 8000c5e:	ed93 3a00 	vldr	s6, [r3]
    p1ap3_0 = p1[0] + p3[0];
 8000c62:	edd1 6a00 	vldr	s13, [r1]
 8000c66:	ed97 7a00 	vldr	s14, [r7]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c6a:	ee33 6a22 	vadd.f32	s12, s6, s5
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c6e:	ed96 2a01 	vldr	s4, [r6, #4]
    p1ap3_0 = p1[0] + p3[0];
 8000c72:	ee37 5a26 	vadd.f32	s10, s14, s13
    p1ap3_1 = p1[1] + p3[1];
 8000c76:	edd1 4a01 	vldr	s9, [r1, #4]
    p1sp3_0 = p1[0] - p3[0];
 8000c7a:	ee37 7a66 	vsub.f32	s14, s14, s13
    p1ap3_1 = p1[1] + p3[1];
 8000c7e:	edd7 5a01 	vldr	s11, [r7, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c82:	edd3 7a01 	vldr	s15, [r3, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c86:	ee36 6a05 	vadd.f32	s12, s12, s10

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c8a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c8e:	ee77 3a42 	vsub.f32	s7, s14, s4
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    p1sp3_1 = p1[1] - p3[1];
 8000c94:	ee75 6ae4 	vsub.f32	s13, s11, s9
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c98:	980c      	ldr	r0, [sp, #48]	; 0x30
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c9a:	ed87 6a00 	vstr	s12, [r7]
    p1ap3_1 = p1[1] + p3[1];
 8000c9e:	ee75 5aa4 	vadd.f32	s11, s11, s9
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000ca2:	edd6 1a01 	vldr	s3, [r6, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000ca6:	ee73 3aa7 	vadd.f32	s7, s7, s15
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000caa:	ed93 6a01 	vldr	s12, [r3, #4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000cae:	ee75 4a43 	vsub.f32	s9, s10, s6
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cb2:	ee36 4ac3 	vsub.f32	s8, s13, s6
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cb6:	ee36 6a21 	vadd.f32	s12, s12, s3
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cba:	ee35 5ae7 	vsub.f32	s10, s11, s15
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000cc2:	ee36 7ae2 	vsub.f32	s14, s13, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cc6:	ee76 6a25 	vadd.f32	s13, s12, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cca:	ee34 4a22 	vadd.f32	s8, s8, s5
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000cce:	ee74 4ae2 	vsub.f32	s9, s9, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cd2:	edc7 6a01 	vstr	s13, [r7, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cd6:	ee35 5a42 	vsub.f32	s10, s10, s4
    twI = tw2[1];
 8000cda:	9f03      	ldr	r7, [sp, #12]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000cdc:	ee77 7a82 	vadd.f32	s15, s15, s4
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000ce0:	ee37 7a03 	vadd.f32	s14, s14, s6
    twI = tw2[1];
 8000ce4:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw2[0];
 8000ce8:	edd7 5a00 	vldr	s11, [r7]
    m1 = t2[1] * twI;
 8000cec:	ee24 6a26 	vmul.f32	s12, s8, s13
    twI = tw3[1];
 8000cf0:	9f01      	ldr	r7, [sp, #4]
    *p2++ = m2 - m3;
 8000cf2:	ee66 6ae3 	vnmul.f32	s13, s13, s7
    *p2++ = m0 + m1;
 8000cf6:	eea3 6aa5 	vfma.f32	s12, s7, s11
    *p2++ = m2 - m3;
 8000cfa:	eee4 6a25 	vfma.f32	s13, s8, s11
    *p2++ = m0 + m1;
 8000cfe:	ed83 6a00 	vstr	s12, [r3]
    *p2++ = m2 - m3;
 8000d02:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw3[1];
 8000d06:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw3[0];
 8000d0a:	edd7 5a00 	vldr	s11, [r7]
    m1 = t3[1] * twI;
 8000d0e:	ee25 6a26 	vmul.f32	s12, s10, s13
    *p3++ = m0 + m1;
 8000d12:	9b00      	ldr	r3, [sp, #0]
    *p3++ = m2 - m3;
 8000d14:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *p3++ = m0 + m1;
 8000d18:	eea4 6aa5 	vfma.f32	s12, s9, s11
    *p3++ = m2 - m3;
 8000d1c:	eee5 6a25 	vfma.f32	s13, s10, s11
    *p3++ = m0 + m1;
 8000d20:	ed83 6a00 	vstr	s12, [r3]
    *p3++ = m2 - m3;
 8000d24:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw4[1];
 8000d28:	9b02      	ldr	r3, [sp, #8]
 8000d2a:	edd3 6a01 	vldr	s13, [r3, #4]
    twR = tw4[0];
 8000d2e:	edd3 5a00 	vldr	s11, [r3]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d32:	2304      	movs	r3, #4
    m1 = t4[1] * twI;
 8000d34:	ee27 6a26 	vmul.f32	s12, s14, s13
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d38:	9100      	str	r1, [sp, #0]
    *p4++ = m2 - m3;
 8000d3a:	ee66 6ae7 	vnmul.f32	s13, s13, s15
    *p4++ = m0 + m1;
 8000d3e:	eea7 6aa5 	vfma.f32	s12, s15, s11
    *p4++ = m2 - m3;
 8000d42:	eee7 6a25 	vfma.f32	s13, s14, s11
    *p4++ = m0 + m1;
 8000d46:	ed86 6a00 	vstr	s12, [r6]
    *p4++ = m2 - m3;
 8000d4a:	edc6 6a01 	vstr	s13, [r6, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d4e:	f000 f88f 	bl	8000e70 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8000d52:	4628      	mov	r0, r5
 8000d54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d56:	2304      	movs	r3, #4
 8000d58:	9900      	ldr	r1, [sp, #0]
 8000d5a:	686a      	ldr	r2, [r5, #4]
 8000d5c:	f000 f888 	bl	8000e70 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8000d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d62:	686a      	ldr	r2, [r5, #4]
 8000d64:	2304      	movs	r3, #4
 8000d66:	9900      	ldr	r1, [sp, #0]
 8000d68:	f000 f882 	bl	8000e70 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	686a      	ldr	r2, [r5, #4]
 8000d70:	4620      	mov	r0, r4
 8000d72:	9900      	ldr	r1, [sp, #0]
}
 8000d74:	b00f      	add	sp, #60	; 0x3c
 8000d76:	ecbd 8b06 	vpop	{d8-d10}
 8000d7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8000d7e:	f000 b877 	b.w	8000e70 <arm_radix8_butterfly_f32>
 8000d82:	bf00      	nop

08000d84 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8000d84:	2a01      	cmp	r2, #1
{
 8000d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d8a:	4606      	mov	r6, r0
 8000d8c:	4617      	mov	r7, r2
 8000d8e:	460c      	mov	r4, r1
 8000d90:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 8000d92:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 8000d94:	d059      	beq.n	8000e4a <arm_cfft_f32+0xc6>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 8000d96:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000d9a:	d051      	beq.n	8000e40 <arm_cfft_f32+0xbc>
 8000d9c:	d80f      	bhi.n	8000dbe <arm_cfft_f32+0x3a>
 8000d9e:	2d40      	cmp	r5, #64	; 0x40
 8000da0:	d014      	beq.n	8000dcc <arm_cfft_f32+0x48>
 8000da2:	d949      	bls.n	8000e38 <arm_cfft_f32+0xb4>
 8000da4:	2d80      	cmp	r5, #128	; 0x80
 8000da6:	d103      	bne.n	8000db0 <arm_cfft_f32+0x2c>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8000da8:	4621      	mov	r1, r4
 8000daa:	4630      	mov	r0, r6
 8000dac:	f7ff fcd2 	bl	8000754 <arm_cfft_radix8by2_f32>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 8000db0:	f1b8 0f00 	cmp.w	r8, #0
 8000db4:	d113      	bne.n	8000dde <arm_cfft_f32+0x5a>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);

  if (ifftFlag == 1U)
 8000db6:	2f01      	cmp	r7, #1
 8000db8:	d018      	beq.n	8000dec <arm_cfft_f32+0x68>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 8000dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8000dbe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000dc2:	d03d      	beq.n	8000e40 <arm_cfft_f32+0xbc>
 8000dc4:	d931      	bls.n	8000e2a <arm_cfft_f32+0xa6>
 8000dc6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8000dca:	d1f1      	bne.n	8000db0 <arm_cfft_f32+0x2c>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8000dcc:	2301      	movs	r3, #1
 8000dce:	6872      	ldr	r2, [r6, #4]
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f000 f84c 	bl	8000e70 <arm_radix8_butterfly_f32>
  if ( bitReverseFlag )
 8000dd8:	f1b8 0f00 	cmp.w	r8, #0
 8000ddc:	d0eb      	beq.n	8000db6 <arm_cfft_f32+0x32>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8000dde:	68b2      	ldr	r2, [r6, #8]
 8000de0:	4620      	mov	r0, r4
 8000de2:	89b1      	ldrh	r1, [r6, #12]
 8000de4:	f7ff fa7c 	bl	80002e0 <arm_bitreversal_32>
  if (ifftFlag == 1U)
 8000de8:	2f01      	cmp	r7, #1
 8000dea:	d1e6      	bne.n	8000dba <arm_cfft_f32+0x36>
    invL = 1.0f / (float32_t)L;
 8000dec:	ee07 5a90 	vmov	s15, r5
 8000df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df8:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (l= 0; l < L; l++)
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0dc      	beq.n	8000dba <arm_cfft_f32+0x36>
 8000e00:	f104 0108 	add.w	r1, r4, #8
 8000e04:	2300      	movs	r3, #0
      *pSrc++ *=   invL ;
 8000e06:	ed11 7a02 	vldr	s14, [r1, #-8]
    for (l= 0; l < L; l++)
 8000e0a:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
 8000e0c:	ed51 7a01 	vldr	s15, [r1, #-4]
    for (l= 0; l < L; l++)
 8000e10:	3108      	adds	r1, #8
 8000e12:	429d      	cmp	r5, r3
      *pSrc++ *=   invL ;
 8000e14:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pSrc    = -(*pSrc) * invL;
 8000e18:	ee67 7ae6 	vnmul.f32	s15, s15, s13
      *pSrc++ *=   invL ;
 8000e1c:	ed01 7a04 	vstr	s14, [r1, #-16]
      *pSrc    = -(*pSrc) * invL;
 8000e20:	ed41 7a03 	vstr	s15, [r1, #-12]
    for (l= 0; l < L; l++)
 8000e24:	d1ef      	bne.n	8000e06 <arm_cfft_f32+0x82>
}
 8000e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8000e2a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000e2e:	d0cd      	beq.n	8000dcc <arm_cfft_f32+0x48>
 8000e30:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000e34:	d0b8      	beq.n	8000da8 <arm_cfft_f32+0x24>
 8000e36:	e7bb      	b.n	8000db0 <arm_cfft_f32+0x2c>
 8000e38:	2d10      	cmp	r5, #16
 8000e3a:	d0b5      	beq.n	8000da8 <arm_cfft_f32+0x24>
 8000e3c:	2d20      	cmp	r5, #32
 8000e3e:	d1b7      	bne.n	8000db0 <arm_cfft_f32+0x2c>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8000e40:	4621      	mov	r1, r4
 8000e42:	4630      	mov	r0, r6
 8000e44:	f7ff fd52 	bl	80008ec <arm_cfft_radix8by4_f32>
    break;
 8000e48:	e7b2      	b.n	8000db0 <arm_cfft_f32+0x2c>
    for (l = 0; l < L; l++)
 8000e4a:	b175      	cbz	r5, 8000e6a <arm_cfft_f32+0xe6>
 8000e4c:	310c      	adds	r1, #12
 8000e4e:	f04f 0c00 	mov.w	ip, #0
      *pSrc = -*pSrc;
 8000e52:	ed51 7a02 	vldr	s15, [r1, #-8]
    for (l = 0; l < L; l++)
 8000e56:	f10c 0c01 	add.w	ip, ip, #1
 8000e5a:	3108      	adds	r1, #8
      *pSrc = -*pSrc;
 8000e5c:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
 8000e60:	4565      	cmp	r5, ip
      *pSrc = -*pSrc;
 8000e62:	ed41 7a04 	vstr	s15, [r1, #-16]
    for (l = 0; l < L; l++)
 8000e66:	d1f4      	bne.n	8000e52 <arm_cfft_f32+0xce>
 8000e68:	e795      	b.n	8000d96 <arm_cfft_f32+0x12>
  if ( bitReverseFlag )
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0a5      	beq.n	8000dba <arm_cfft_f32+0x36>
 8000e6e:	e7b6      	b.n	8000dde <arm_cfft_f32+0x5a>

08000e70 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8000e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e74:	ed2d 8b10 	vpush	{d8-d15}
 8000e78:	b091      	sub	sp, #68	; 0x44
 8000e7a:	468a      	mov	sl, r1
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 8000e7c:	468b      	mov	fp, r1
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8000e7e:	eddf babe 	vldr	s23, [pc, #760]	; 8001178 <arm_radix8_butterfly_f32+0x308>
{
 8000e82:	900e      	str	r0, [sp, #56]	; 0x38
 8000e84:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8000e88:	4603      	mov	r3, r0
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	930f      	str	r3, [sp, #60]	; 0x3c
      n2 = n2 >> 3;
 8000e8e:	ea4f 07db 	mov.w	r7, fp, lsr #3
 8000e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
      i1 = 0;
 8000e98:	f04f 0e00 	mov.w	lr, #0
 8000e9c:	eb02 1147 	add.w	r1, r2, r7, lsl #5
      n2 = n2 >> 3;
 8000ea0:	970b      	str	r7, [sp, #44]	; 0x2c
      i1 = 0;
 8000ea2:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 8000ea6:	eb01 1007 	add.w	r0, r1, r7, lsl #4
 8000eaa:	eba7 0287 	sub.w	r2, r7, r7, lsl #2
 8000eae:	00e4      	lsls	r4, r4, #3
 8000eb0:	9001      	str	r0, [sp, #4]
 8000eb2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000eb6:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 8000eba:	9403      	str	r4, [sp, #12]
 8000ebc:	017d      	lsls	r5, r7, #5
 8000ebe:	00c4      	lsls	r4, r0, #3
 8000ec0:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8000ec4:	9502      	str	r5, [sp, #8]
 8000ec6:	ea4f 1807 	mov.w	r8, r7, lsl #4
 8000eca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000ecc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8000ed0:	9406      	str	r4, [sp, #24]
 8000ed2:	f108 0004 	add.w	r0, r8, #4
 8000ed6:	f109 0404 	add.w	r4, r9, #4
 8000eda:	eb01 0cc7 	add.w	ip, r1, r7, lsl #3
 8000ede:	442c      	add	r4, r5
 8000ee0:	4428      	add	r0, r5
 8000ee2:	0135      	lsls	r5, r6, #4
 8000ee4:	eb02 1747 	add.w	r7, r2, r7, lsl #5
 8000ee8:	9504      	str	r5, [sp, #16]
 8000eea:	00f5      	lsls	r5, r6, #3
 8000eec:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8000eee:	9505      	str	r5, [sp, #20]
 8000ef0:	9d01      	ldr	r5, [sp, #4]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000ef2:	ed10 7a01 	vldr	s14, [r0, #-4]
         pSrc[2 * i2 + 1] = s5 - r7;
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
         pSrc[2 * i4 + 1] = t2 + r8;

         i1 += n1;
 8000ef6:	44de      	add	lr, fp
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000ef8:	edd2 9a00 	vldr	s19, [r2]
 8000efc:	ed97 5a00 	vldr	s10, [r7]
      } while (i1 < fftLen);
 8000f00:	45f2      	cmp	sl, lr
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000f02:	edd5 4a00 	vldr	s9, [r5]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f06:	ed16 6a01 	vldr	s12, [r6, #-4]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000f0a:	ee39 9a85 	vadd.f32	s18, s19, s10
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f0e:	ed9c 4a00 	vldr	s8, [ip]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000f12:	ee77 5a24 	vadd.f32	s11, s14, s9
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f16:	edd1 6a00 	vldr	s13, [r1]
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8000f1a:	ee77 0a64 	vsub.f32	s1, s14, s9
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f1e:	ed54 7a01 	vldr	s15, [r4, #-4]
 8000f22:	ee74 4ac7 	vsub.f32	s9, s9, s14
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f26:	ee36 1a26 	vadd.f32	s2, s12, s13
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f2a:	ee77 8a84 	vadd.f32	s17, s15, s8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8000f2e:	ee76 6a66 	vsub.f32	s13, s12, s13
         r1 = r1 + r3;
 8000f32:	ee31 7a25 	vadd.f32	s14, s2, s11
         r2 = r2 + r4;
 8000f36:	ee38 6a89 	vadd.f32	s12, s17, s18
         t1 = r1 - r3;
 8000f3a:	ee31 1a65 	vsub.f32	s2, s2, s11
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8000f3e:	ee77 7ac4 	vsub.f32	s15, s15, s8
         pSrc[2 * i1] = r1 + r2;
 8000f42:	ee77 5a06 	vadd.f32	s11, s14, s12
         pSrc[2 * i5] = r1 - r2;
 8000f46:	ee37 7a46 	vsub.f32	s14, s14, s12
         r1 = (r6 - r8) * C81;
 8000f4a:	ee77 2ae9 	vsub.f32	s5, s15, s19
         pSrc[2 * i1] = r1 + r2;
 8000f4e:	ed46 5a01 	vstr	s11, [r6, #-4]
         t1 = r5 - r1;
 8000f52:	eeb0 8a66 	vmov.f32	s16, s13
         pSrc[2 * i5] = r1 - r2;
 8000f56:	ed81 7a00 	vstr	s14, [r1]
         r6 = (r6 + r8) * C81;
 8000f5a:	ee77 7ac5 	vsub.f32	s15, s15, s10
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f5e:	ed94 aa00 	vldr	s20, [r4]
         r1 = (r6 - r8) * C81;
 8000f62:	ee72 2a85 	vadd.f32	s5, s5, s10
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f66:	eddc 1a01 	vldr	s3, [ip, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f6a:	ed91 7a01 	vldr	s14, [r1, #4]
         r6 = (r6 + r8) * C81;
 8000f6e:	ee77 7aa9 	vadd.f32	s15, s15, s19
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8000f72:	ee7a 3a61 	vsub.f32	s7, s20, s3
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000f76:	ed97 6a01 	vldr	s12, [r7, #4]
 8000f7a:	ed92 2a01 	vldr	s4, [r2, #4]
         t1 = r5 - r1;
 8000f7e:	eea2 8aeb 	vfms.f32	s16, s5, s23
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f82:	edd6 5a00 	vldr	s11, [r6]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f86:	ee7a 1a21 	vadd.f32	s3, s20, s3
         r2 = (s6 - s8) * C81;
 8000f8a:	ee33 3ac2 	vsub.f32	s6, s7, s4
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f8e:	ed90 0a00 	vldr	s0, [r0]
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8000f92:	ee35 4ac7 	vsub.f32	s8, s11, s14
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f96:	ed95 5a01 	vldr	s10, [r5, #4]
         s6 = (s6 + s8) * C81;
 8000f9a:	ee73 3ac6 	vsub.f32	s7, s7, s12
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f9e:	ee70 aa05 	vadd.f32	s21, s0, s10
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000fa2:	ee75 5a87 	vadd.f32	s11, s11, s14
         r2 = (s6 - s8) * C81;
 8000fa6:	ee33 3a06 	vadd.f32	s6, s6, s12
         s6 = (s6 + s8) * C81;
 8000faa:	ee33 7a82 	vadd.f32	s14, s7, s4
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8000fae:	ee70 3a45 	vsub.f32	s7, s0, s10
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000fb2:	ee35 5a40 	vsub.f32	s10, s10, s0
         t2 = s5 - r2;
 8000fb6:	eeb0 0a44 	vmov.f32	s0, s8
         s7 = s7 + s6;
 8000fba:	eeb0 aa63 	vmov.f32	s20, s7
 8000fbe:	eef0 9a48 	vmov.f32	s19, s16
         t2 = s5 - r2;
 8000fc2:	eea3 0a6b 	vfms.f32	s0, s6, s23
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000fc6:	ee32 2a06 	vadd.f32	s4, s4, s12
         r5 = r5 + r1;
 8000fca:	eee2 6aab 	vfma.f32	s13, s5, s23
         t2 = r1 - s3;
 8000fce:	ee35 6aea 	vsub.f32	s12, s11, s21
         s7 = s7 + s6;
 8000fd2:	eea7 aa2b 	vfma.f32	s20, s14, s23
 8000fd6:	eee7 9a6b 	vfms.f32	s19, s14, s23
 8000fda:	eea7 5a2b 	vfma.f32	s10, s14, s23
         r7 = r7 + r6;
 8000fde:	eef0 2a60 	vmov.f32	s5, s1
         r1 = r1 + s3;
 8000fe2:	ee35 7aaa 	vadd.f32	s14, s11, s21
 8000fe6:	eef0 5a40 	vmov.f32	s11, s0
         r7 = r7 + r6;
 8000fea:	eee7 2aab 	vfma.f32	s5, s15, s23
         s5 = s5 + r2;
 8000fee:	eea3 4a2b 	vfma.f32	s8, s6, s23
 8000ff2:	eee7 4aab 	vfma.f32	s9, s15, s23
 8000ff6:	eee7 5aeb 	vfms.f32	s11, s15, s23
         r2 = r2 + r4;
 8000ffa:	ee71 aa82 	vadd.f32	s21, s3, s4
         pSrc[2 * i3]     = t1 + s3;
 8000ffe:	ee31 ba42 	vsub.f32	s22, s2, s4
         pSrc[2 * i7]     = t1 - s3;
 8001002:	ee71 7a61 	vsub.f32	s15, s2, s3
         pSrc[2 * i3 + 1] = t2 - r3;
 8001006:	ee36 3a68 	vsub.f32	s6, s12, s17
         pSrc[2 * i7 + 1] = t2 + r3;
 800100a:	ee36 6a49 	vsub.f32	s12, s12, s18
         pSrc[2 * i1 + 1] = r1 + r2;
 800100e:	ee37 1a2a 	vadd.f32	s2, s14, s21
         pSrc[2 * i7]     = t1 - s3;
 8001012:	ee77 7a82 	vadd.f32	s15, s15, s4
         pSrc[2 * i3 + 1] = t2 - r3;
 8001016:	ee33 9a09 	vadd.f32	s18, s6, s18
         pSrc[2 * i2]     = r5 + s7;
 800101a:	ee36 2a8a 	vadd.f32	s4, s13, s20
         pSrc[2 * i1 + 1] = r1 + r2;
 800101e:	ed86 1a00 	vstr	s2, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001022:	ee34 3a62 	vsub.f32	s6, s8, s5
      } while (i1 < fftLen);
 8001026:	441e      	add	r6, r3
         pSrc[2 * i5 + 1] = r1 - r2;
 8001028:	ee37 7a6a 	vsub.f32	s14, s14, s21
         pSrc[2 * i3]     = t1 + s3;
 800102c:	ee7b 1a21 	vadd.f32	s3, s22, s3
         pSrc[2 * i7 + 1] = t2 + r3;
 8001030:	ee36 6a28 	vadd.f32	s12, s12, s17
         pSrc[2 * i8]     = r5 - s7;
 8001034:	ee76 6aca 	vsub.f32	s13, s13, s20
         pSrc[2 * i5 + 1] = r1 - r2;
 8001038:	ed81 7a01 	vstr	s14, [r1, #4]
         pSrc[2 * i6]     = t1 + s8;
 800103c:	ee73 3aa9 	vadd.f32	s7, s7, s19
         pSrc[2 * i3]     = t1 + s3;
 8001040:	ed40 1a01 	vstr	s3, [r0, #-4]
         pSrc[2 * i4]     = t1 - s8;
 8001044:	ee38 5a05 	vadd.f32	s10, s16, s10
         pSrc[2 * i7]     = t1 - s3;
 8001048:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i8 + 1] = s5 + r7;
 800104c:	ee32 4a84 	vadd.f32	s8, s5, s8
         pSrc[2 * i3 + 1] = t2 - r3;
 8001050:	ed80 9a00 	vstr	s18, [r0]
         pSrc[2 * i6 + 1] = t2 - r8;
 8001054:	ee70 4a24 	vadd.f32	s9, s0, s9
         pSrc[2 * i7 + 1] = t2 + r3;
 8001058:	ed85 6a01 	vstr	s12, [r5, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 800105c:	ee70 5aa5 	vadd.f32	s11, s1, s11
         pSrc[2 * i2]     = r5 + s7;
 8001060:	ed04 2a01 	vstr	s4, [r4, #-4]
      } while (i1 < fftLen);
 8001064:	4419      	add	r1, r3
         pSrc[2 * i8]     = r5 - s7;
 8001066:	edc7 6a00 	vstr	s13, [r7]
      } while (i1 < fftLen);
 800106a:	4418      	add	r0, r3
         pSrc[2 * i6]     = t1 + s8;
 800106c:	edcc 3a00 	vstr	s7, [ip]
      } while (i1 < fftLen);
 8001070:	441d      	add	r5, r3
         pSrc[2 * i4]     = t1 - s8;
 8001072:	ed82 5a00 	vstr	s10, [r2]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001076:	ed84 3a00 	vstr	s6, [r4]
      } while (i1 < fftLen);
 800107a:	441c      	add	r4, r3
         pSrc[2 * i8 + 1] = s5 + r7;
 800107c:	ed87 4a01 	vstr	s8, [r7, #4]
      } while (i1 < fftLen);
 8001080:	441f      	add	r7, r3
         pSrc[2 * i6 + 1] = t2 - r8;
 8001082:	edcc 4a01 	vstr	s9, [ip, #4]
      } while (i1 < fftLen);
 8001086:	449c      	add	ip, r3
         pSrc[2 * i4 + 1] = t2 + r8;
 8001088:	edc2 5a01 	vstr	s11, [r2, #4]
      } while (i1 < fftLen);
 800108c:	441a      	add	r2, r3
 800108e:	f63f af30 	bhi.w	8000ef2 <arm_radix8_butterfly_f32+0x82>

      if (n2 < 8)
 8001092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001094:	2a07      	cmp	r2, #7
 8001096:	f240 819f 	bls.w	80013d8 <arm_radix8_butterfly_f32+0x568>
 800109a:	9d02      	ldr	r5, [sp, #8]
 800109c:	f109 0908 	add.w	r9, r9, #8
 80010a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80010a2:	f108 080c 	add.w	r8, r8, #12
 80010a6:	3508      	adds	r5, #8
 80010a8:	9a06      	ldr	r2, [sp, #24]
 80010aa:	9905      	ldr	r1, [sp, #20]
 80010ac:	1975      	adds	r5, r6, r5
 80010ae:	3208      	adds	r2, #8
 80010b0:	9c03      	ldr	r4, [sp, #12]
 80010b2:	3108      	adds	r1, #8
 80010b4:	950a      	str	r5, [sp, #40]	; 0x28
 80010b6:	4635      	mov	r5, r6
 80010b8:	9804      	ldr	r0, [sp, #16]
 80010ba:	3408      	adds	r4, #8
 80010bc:	18aa      	adds	r2, r5, r2
 80010be:	1869      	adds	r1, r5, r1
 80010c0:	3008      	adds	r0, #8
 80010c2:	444e      	add	r6, r9
 80010c4:	9205      	str	r2, [sp, #20]
 80010c6:	462a      	mov	r2, r5
 80010c8:	192c      	adds	r4, r5, r4
 80010ca:	1828      	adds	r0, r5, r0
 80010cc:	320c      	adds	r2, #12
 80010ce:	9106      	str	r1, [sp, #24]
         break;

      ia1 = 0;
      j = 1;
 80010d0:	f04f 0901 	mov.w	r9, #1
 80010d4:	eb05 0108 	add.w	r1, r5, r8
      ia1 = 0;
 80010d8:	f04f 0800 	mov.w	r8, #0
 80010dc:	9609      	str	r6, [sp, #36]	; 0x24
 80010de:	9408      	str	r4, [sp, #32]
 80010e0:	9007      	str	r0, [sp, #28]
 80010e2:	9103      	str	r1, [sp, #12]
 80010e4:	9204      	str	r2, [sp, #16]

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80010e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 80010e8:	46ce      	mov	lr, r9
         si8 = pCoef[2 * ia7 + 1];
 80010ea:	9e05      	ldr	r6, [sp, #20]
         id  = ia1 + twidCoefModifier;
 80010ec:	4490      	add	r8, r2
         co2 = pCoef[2 * ia1];
 80010ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80010f0:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80010f4:	eba8 0188 	sub.w	r1, r8, r8, lsl #2
 80010f8:	ed92 fa00 	vldr	s30, [r2]
         co3 = pCoef[2 * ia2];
 80010fc:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001100:	edd2 ea00 	vldr	s29, [r2]
         co4 = pCoef[2 * ia3];
 8001104:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001108:	ed92 ea00 	vldr	s28, [r2]
         co5 = pCoef[2 * ia4];
 800110c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001110:	edd2 da00 	vldr	s27, [r2]
         co6 = pCoef[2 * ia5];
 8001114:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001118:	ed92 da00 	vldr	s26, [r2]
         co7 = pCoef[2 * ia6];
 800111c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001120:	edd2 ca00 	vldr	s25, [r2]
         co8 = pCoef[2 * ia7];
 8001124:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001128:	ed92 ca00 	vldr	s24, [r2]
         si8 = pCoef[2 * ia7 + 1];
 800112c:	ed92 ba01 	vldr	s22, [r2, #4]
 8001130:	eb02 1201 	add.w	r2, r2, r1, lsl #4
         si2 = pCoef[2 * ia1 + 1];
 8001134:	edd2 aa01 	vldr	s21, [r2, #4]
         si3 = pCoef[2 * ia2 + 1];
 8001138:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800113c:	ed92 aa01 	vldr	s20, [r2, #4]
         si4 = pCoef[2 * ia3 + 1];
 8001140:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001144:	edd2 9a01 	vldr	s19, [r2, #4]
         si5 = pCoef[2 * ia4 + 1];
 8001148:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800114c:	ed92 9a01 	vldr	s18, [r2, #4]
         si6 = pCoef[2 * ia5 + 1];
 8001150:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001154:	edd2 7a01 	vldr	s15, [r2, #4]
         si7 = pCoef[2 * ia6 + 1];
 8001158:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
         si6 = pCoef[2 * ia5 + 1];
 800115c:	edcd 7a01 	vstr	s15, [sp, #4]
         si7 = pCoef[2 * ia6 + 1];
 8001160:	edd2 7a01 	vldr	s15, [r2, #4]
         si8 = pCoef[2 * ia7 + 1];
 8001164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         si7 = pCoef[2 * ia6 + 1];
 8001166:	edcd 7a02 	vstr	s15, [sp, #8]
         si8 = pCoef[2 * ia7 + 1];
 800116a:	e9dd c703 	ldrd	ip, r7, [sp, #12]
 800116e:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8001172:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001176:	e001      	b.n	800117c <arm_radix8_butterfly_f32+0x30c>
 8001178:	3f3504f3 	.word	0x3f3504f3
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800117c:	edd5 3a00 	vldr	s7, [r5]
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;

            i1 += n1;
 8001180:	44de      	add	lr, fp
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001182:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8001186:	edd4 6a00 	vldr	s13, [r4]
         } while (i1 < fftLen);
 800118a:	45f2      	cmp	sl, lr
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800118c:	edd6 4a00 	vldr	s9, [r6]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001190:	ed17 4a01 	vldr	s8, [r7, #-4]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001194:	ee37 6a26 	vadd.f32	s12, s14, s13
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001198:	ed91 3a00 	vldr	s6, [r1]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800119c:	ee33 0aa4 	vadd.f32	s0, s7, s9
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80011a0:	edd2 5a00 	vldr	s11, [r2]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80011a4:	ee77 8a66 	vsub.f32	s17, s14, s13
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80011a8:	edd0 7a00 	vldr	s15, [r0]
 80011ac:	ee76 6ac7 	vsub.f32	s13, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80011b0:	ee34 5a25 	vadd.f32	s10, s8, s11
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011b4:	ed97 1a00 	vldr	s2, [r7]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80011b8:	ee73 0a27 	vadd.f32	s1, s6, s15
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80011bc:	ee73 7a67 	vsub.f32	s15, s6, s15
            r1 = r1 + r3;
 80011c0:	ee35 2a06 	vadd.f32	s4, s10, s12
            r2 = r2 + r4;
 80011c4:	ee30 7a80 	vadd.f32	s14, s1, s0
            t1 = r1 - r3;
 80011c8:	ee35 6a46 	vsub.f32	s12, s10, s12
            r1 = (r6 - r8) * C81;
 80011cc:	ee77 fae3 	vsub.f32	s31, s15, s7
            pSrc[2 * i1] = r1 + r2;
 80011d0:	ee32 5a07 	vadd.f32	s10, s4, s14
            r6 = (r6 + r8) * C81;
 80011d4:	ee77 7ae4 	vsub.f32	s15, s15, s9
            r2 = r1 - r2;
 80011d8:	ee32 2a47 	vsub.f32	s4, s4, s14
            pSrc[2 * i1] = r1 + r2;
 80011dc:	ed07 5a01 	vstr	s10, [r7, #-4]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80011e0:	ee74 5a65 	vsub.f32	s11, s8, s11
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80011e4:	ed90 7a01 	vldr	s14, [r0, #4]
            r6 = (r6 + r8) * C81;
 80011e8:	ee77 7aa3 	vadd.f32	s15, s15, s7
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80011ec:	ed91 3a01 	vldr	s6, [r1, #4]
            r1 = (r6 - r8) * C81;
 80011f0:	ee7f 4aa4 	vadd.f32	s9, s31, s9
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011f4:	ed92 4a01 	vldr	s8, [r2, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80011f8:	ee33 5a47 	vsub.f32	s10, s6, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80011fc:	edd6 3a01 	vldr	s7, [r6, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8001200:	ee71 2a44 	vsub.f32	s5, s2, s8
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001204:	ed9c 8a00 	vldr	s16, [ip]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001208:	ee31 1a04 	vadd.f32	s2, s2, s8
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800120c:	ed95 4a01 	vldr	s8, [r5, #4]
 8001210:	eee7 6aab 	vfma.f32	s13, s15, s23
            s1 = (s6 - s8) * C81;
 8001214:	ee75 fa44 	vsub.f32	s31, s10, s8
            s6 = (s6 + s8) * C81;
 8001218:	ee35 5a63 	vsub.f32	s10, s10, s7
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800121c:	ee33 3a07 	vadd.f32	s6, s6, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001220:	ed94 7a01 	vldr	s14, [r4, #4]
            s1 = (s6 - s8) * C81;
 8001224:	ee7f faa3 	vadd.f32	s31, s31, s7
            s6 = (s6 + s8) * C81;
 8001228:	ee35 5a04 	vadd.f32	s10, s10, s8
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800122c:	ee74 3a23 	vadd.f32	s7, s8, s7
            t1 = r5 - r1;
 8001230:	eeb0 4a65 	vmov.f32	s8, s11
            r5 = r5 + r1;
 8001234:	eee4 5aab 	vfma.f32	s11, s9, s23
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001238:	ee78 1a07 	vadd.f32	s3, s16, s14
            t1 = r5 - r1;
 800123c:	eea4 4aeb 	vfms.f32	s8, s9, s23
            t2 = s5 - s1;
 8001240:	eef0 4a62 	vmov.f32	s9, s5
            s5 = s5 + s1;
 8001244:	eeef 2aab 	vfma.f32	s5, s31, s23
            t2 = s5 - s1;
 8001248:	eeef 4aeb 	vfms.f32	s9, s31, s23
            r7 = r7 + r6;
 800124c:	eef0 fa68 	vmov.f32	s31, s17
 8001250:	eee7 faab 	vfma.f32	s31, s15, s23
            s6 = t2 - r8;
 8001254:	ee74 6aa6 	vadd.f32	s13, s9, s13
 8001258:	eee7 4aeb 	vfms.f32	s9, s15, s23
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800125c:	ee78 7a47 	vsub.f32	s15, s16, s14
            t2 = s1 - s3;
 8001260:	ee37 7a48 	vsub.f32	s14, s14, s16
            s7 = s7 + s6;
 8001264:	eeb0 8a67 	vmov.f32	s16, s15
 8001268:	eea5 7a2b 	vfma.f32	s14, s10, s23
            t2 = t2 + r8;
 800126c:	ee78 4aa4 	vadd.f32	s9, s17, s9
            s7 = s7 + s6;
 8001270:	eea5 8a2b 	vfma.f32	s16, s10, s23
            r1 = t1 + s3;
 8001274:	ee76 8a63 	vsub.f32	s17, s12, s7
 8001278:	ee36 6a43 	vsub.f32	s12, s12, s6
            t1 = t1 - s8;
 800127c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8001280:	eea5 4a6b 	vfms.f32	s8, s10, s23
            t2 = s1 - s3;
 8001284:	ee31 5a61 	vsub.f32	s10, s2, s3
            s1 = s1 + s3;
 8001288:	ee71 1a21 	vadd.f32	s3, s2, s3
            t1 = t1 - s3;
 800128c:	ee33 6a86 	vadd.f32	s12, s7, s12
            r6 = t1 + s8;
 8001290:	ee74 7a27 	vadd.f32	s15, s8, s15
            s2 = s2 + s4;
 8001294:	ee33 4a23 	vadd.f32	s8, s6, s7
            r1 = t1 + s3;
 8001298:	ee38 3a83 	vadd.f32	s6, s17, s6
            p2 = si6 * s6;
 800129c:	eddd 8a01 	vldr	s17, [sp, #4]
            pSrc[2 * i1 + 1] = s1 + s2;
 80012a0:	ee71 3a84 	vadd.f32	s7, s3, s8
            s2 = s1 - s2;
 80012a4:	ee71 1ac4 	vsub.f32	s3, s3, s8
            s1 = t2 - r3;
 80012a8:	ee35 4a60 	vsub.f32	s8, s10, s1
 80012ac:	ee35 5a40 	vsub.f32	s10, s10, s0
            pSrc[2 * i1 + 1] = s1 + s2;
 80012b0:	edc7 3a00 	vstr	s7, [r7]
            p2 = si5 * s2;
 80012b4:	ee29 1a21 	vmul.f32	s2, s18, s3
         } while (i1 < fftLen);
 80012b8:	441f      	add	r7, r3
            s1 = t2 - r3;
 80012ba:	ee34 0a00 	vadd.f32	s0, s8, s0
            t2 = t2 + r3;
 80012be:	ee70 0a85 	vadd.f32	s1, s1, s10
            pSrc[2 * i3 + 1] = p3 - p4;
 80012c2:	ee23 5a4a 	vnmul.f32	s10, s6, s20
            p2 = si3 * s1;
 80012c6:	ee2a 4a00 	vmul.f32	s8, s20, s0
            pSrc[2 * i5]     = p1 + p2;
 80012ca:	eead 1a82 	vfma.f32	s2, s27, s4
            pSrc[2 * i3 + 1] = p3 - p4;
 80012ce:	eeae 5a80 	vfma.f32	s10, s29, s0
            p2 = si7 * t2;
 80012d2:	ed9d 0a02 	vldr	s0, [sp, #8]
            pSrc[2 * i3]     = p1 + p2;
 80012d6:	eeae 4a83 	vfma.f32	s8, s29, s6
            pSrc[2 * i5 + 1] = p3 - p4;
 80012da:	ee62 3a49 	vnmul.f32	s7, s4, s18
            p2 = si7 * t2;
 80012de:	ee20 3a20 	vmul.f32	s6, s0, s1
            r1 = r5 + s7;
 80012e2:	ee35 2a88 	vadd.f32	s4, s11, s16
            pSrc[2 * i5 + 1] = p3 - p4;
 80012e6:	eeed 3aa1 	vfma.f32	s7, s27, s3
            pSrc[2 * i5]     = p1 + p2;
 80012ea:	ed82 1a00 	vstr	s2, [r2]
            s1 = s5 - r7;
 80012ee:	ee72 1aef 	vsub.f32	s3, s5, s31
            pSrc[2 * i7]     = p1 + p2;
 80012f2:	eeac 3a86 	vfma.f32	s6, s25, s12
            pSrc[2 * i7 + 1] = p3 - p4;
 80012f6:	ee26 0a40 	vnmul.f32	s0, s12, s0
            pSrc[2 * i2 + 1] = p3 - p4;
 80012fa:	ee22 6a6a 	vnmul.f32	s12, s4, s21
            r5 = r5 - s7;
 80012fe:	ee75 5ac8 	vsub.f32	s11, s11, s16
            s5 = s5 + r7;
 8001302:	ee7f 2aa2 	vadd.f32	s5, s31, s5
            pSrc[2 * i5 + 1] = p3 - p4;
 8001306:	edc2 3a01 	vstr	s7, [r2, #4]
            pSrc[2 * i2 + 1] = p3 - p4;
 800130a:	eeaf 6a21 	vfma.f32	s12, s30, s3
            pSrc[2 * i3]     = p1 + p2;
 800130e:	ed0c 4a01 	vstr	s8, [ip, #-4]
            p2 = si2 * s1;
 8001312:	ee2a 8aa1 	vmul.f32	s16, s21, s3
            pSrc[2 * i3 + 1] = p3 - p4;
 8001316:	ed8c 5a00 	vstr	s10, [ip]
            pSrc[2 * i7 + 1] = p3 - p4;
 800131a:	eeac 0aa0 	vfma.f32	s0, s25, s1
            pSrc[2 * i7]     = p1 + p2;
 800131e:	ed84 3a00 	vstr	s6, [r4]
            p2 = si8 * s5;
 8001322:	ee6b 0a22 	vmul.f32	s1, s22, s5
         } while (i1 < fftLen);
 8001326:	441a      	add	r2, r3
            pSrc[2 * i2]     = p1 + p2;
 8001328:	eeaf 8a02 	vfma.f32	s16, s30, s4
         } while (i1 < fftLen);
 800132c:	449c      	add	ip, r3
            pSrc[2 * i8 + 1] = p3 - p4;
 800132e:	ee25 1acb 	vnmul.f32	s2, s11, s22
            pSrc[2 * i2 + 1] = p3 - p4;
 8001332:	eeb0 2a46 	vmov.f32	s4, s12
            p2 = si6 * s6;
 8001336:	ee68 3aa6 	vmul.f32	s7, s17, s13
            pSrc[2 * i6 + 1] = p3 - p4;
 800133a:	ee67 1ae8 	vnmul.f32	s3, s15, s17
            pSrc[2 * i7 + 1] = p3 - p4;
 800133e:	ed84 0a01 	vstr	s0, [r4, #4]
            p2 = si4 * t2;
 8001342:	ee29 4aa4 	vmul.f32	s8, s19, s9
            pSrc[2 * i2 + 1] = p3 - p4;
 8001346:	ed81 2a01 	vstr	s4, [r1, #4]
            pSrc[2 * i4 + 1] = p3 - p4;
 800134a:	ee27 6a69 	vnmul.f32	s12, s14, s19
            pSrc[2 * i2]     = p1 + p2;
 800134e:	ed81 8a00 	vstr	s16, [r1]
            pSrc[2 * i8]     = p1 + p2;
 8001352:	eeec 0a25 	vfma.f32	s1, s24, s11
         } while (i1 < fftLen);
 8001356:	441c      	add	r4, r3
            pSrc[2 * i8 + 1] = p3 - p4;
 8001358:	eeac 1a22 	vfma.f32	s2, s24, s5
         } while (i1 < fftLen);
 800135c:	4419      	add	r1, r3
            pSrc[2 * i6]     = p1 + p2;
 800135e:	eeed 3a27 	vfma.f32	s7, s26, s15
            pSrc[2 * i6 + 1] = p3 - p4;
 8001362:	eeed 1a26 	vfma.f32	s3, s26, s13
            pSrc[2 * i4]     = p1 + p2;
 8001366:	eeae 4a07 	vfma.f32	s8, s28, s14
            pSrc[2 * i4 + 1] = p3 - p4;
 800136a:	eeae 6a24 	vfma.f32	s12, s28, s9
            pSrc[2 * i8]     = p1 + p2;
 800136e:	edc6 0a00 	vstr	s1, [r6]
            pSrc[2 * i8 + 1] = p3 - p4;
 8001372:	ed86 1a01 	vstr	s2, [r6, #4]
         } while (i1 < fftLen);
 8001376:	441e      	add	r6, r3
            pSrc[2 * i6]     = p1 + p2;
 8001378:	edc0 3a00 	vstr	s7, [r0]
            pSrc[2 * i6 + 1] = p3 - p4;
 800137c:	edc0 1a01 	vstr	s3, [r0, #4]
         } while (i1 < fftLen);
 8001380:	4418      	add	r0, r3
            pSrc[2 * i4]     = p1 + p2;
 8001382:	ed85 4a00 	vstr	s8, [r5]
            pSrc[2 * i4 + 1] = p3 - p4;
 8001386:	ed85 6a01 	vstr	s12, [r5, #4]
         } while (i1 < fftLen);
 800138a:	441d      	add	r5, r3
 800138c:	f63f aef6 	bhi.w	800117c <arm_radix8_butterfly_f32+0x30c>

         j++;
      } while (j < n2);
 8001390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         j++;
 8001392:	f109 0901 	add.w	r9, r9, #1
      } while (j < n2);
 8001396:	3208      	adds	r2, #8
 8001398:	920a      	str	r2, [sp, #40]	; 0x28
 800139a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800139c:	3208      	adds	r2, #8
 800139e:	9209      	str	r2, [sp, #36]	; 0x24
 80013a0:	9a08      	ldr	r2, [sp, #32]
 80013a2:	3208      	adds	r2, #8
 80013a4:	9208      	str	r2, [sp, #32]
 80013a6:	9a07      	ldr	r2, [sp, #28]
 80013a8:	3208      	adds	r2, #8
 80013aa:	9207      	str	r2, [sp, #28]
 80013ac:	9a06      	ldr	r2, [sp, #24]
 80013ae:	3208      	adds	r2, #8
 80013b0:	9206      	str	r2, [sp, #24]
 80013b2:	9a05      	ldr	r2, [sp, #20]
 80013b4:	3208      	adds	r2, #8
 80013b6:	9205      	str	r2, [sp, #20]
 80013b8:	9a04      	ldr	r2, [sp, #16]
 80013ba:	3208      	adds	r2, #8
 80013bc:	9204      	str	r2, [sp, #16]
 80013be:	9a03      	ldr	r2, [sp, #12]
 80013c0:	3208      	adds	r2, #8
 80013c2:	9203      	str	r2, [sp, #12]
 80013c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80013c6:	454a      	cmp	r2, r9
 80013c8:	f47f ae8d 	bne.w	80010e6 <arm_radix8_butterfly_f32+0x276>

      twidCoefModifier <<= 3;
 80013cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013ce:	4693      	mov	fp, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	930c      	str	r3, [sp, #48]	; 0x30
   } while (n2 > 7);
 80013d6:	e55a      	b.n	8000e8e <arm_radix8_butterfly_f32+0x1e>
}
 80013d8:	b011      	add	sp, #68	; 0x44
 80013da:	ecbd 8b10 	vpop	{d8-d15}
 80013de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013e2:	bf00      	nop

080013e4 <arm_cmplx_mult_cmplx_f32>:
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 80013e4:	b1eb      	cbz	r3, 8001422 <arm_cmplx_mult_cmplx_f32+0x3e>
 80013e6:	3008      	adds	r0, #8
 80013e8:	3108      	adds	r1, #8
 80013ea:	3208      	adds	r2, #8
  {
    /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */

    a = *pSrcA++;
    b = *pSrcA++;
 80013ec:	ed50 7a01 	vldr	s15, [r0, #-4]
  while (blkCnt > 0U)
 80013f0:	3208      	adds	r2, #8
    c = *pSrcB++;
 80013f2:	ed51 6a02 	vldr	s13, [r1, #-8]
  while (blkCnt > 0U)
 80013f6:	3b01      	subs	r3, #1
    d = *pSrcB++;
 80013f8:	ed51 5a01 	vldr	s11, [r1, #-4]
  while (blkCnt > 0U)
 80013fc:	f100 0008 	add.w	r0, r0, #8

    /* store result in destination buffer. */
    *pDst++ = (a * c) - (b * d);
    *pDst++ = (a * d) + (b * c);
 8001400:	ee27 7aa6 	vmul.f32	s14, s15, s13
    a = *pSrcA++;
 8001404:	ed10 6a04 	vldr	s12, [r0, #-16]
    *pDst++ = (a * c) - (b * d);
 8001408:	ee65 7ae7 	vnmul.f32	s15, s11, s15
  while (blkCnt > 0U)
 800140c:	f101 0108 	add.w	r1, r1, #8
    *pDst++ = (a * d) + (b * c);
 8001410:	eea6 7a25 	vfma.f32	s14, s12, s11
    *pDst++ = (a * c) - (b * d);
 8001414:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pDst++ = (a * d) + (b * c);
 8001418:	ed02 7a03 	vstr	s14, [r2, #-12]
    *pDst++ = (a * c) - (b * d);
 800141c:	ed42 7a04 	vstr	s15, [r2, #-16]
  while (blkCnt > 0U)
 8001420:	d1e4      	bne.n	80013ec <arm_cmplx_mult_cmplx_f32+0x8>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 8001422:	4770      	bx	lr

08001424 <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8001424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8001428:	8844      	ldrh	r4, [r0, #2]
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 800142a:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 800142e:	f890 8000 	ldrb.w	r8, [r0]
        float32_t *pState = S->pState;                 /* State pointer */
 8001432:	6887      	ldr	r7, [r0, #8]
  pStateCur = S->pState + (numTaps - 1U);
 8001434:	44a6      	add	lr, r4
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001436:	4598      	cmp	r8, r3
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8001438:	f8d0 9004 	ldr.w	r9, [r0, #4]
  pStateCur = S->pState + (numTaps - 1U);
 800143c:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8001440:	fbb3 faf8 	udiv	sl, r3, r8
  while (blkCnt > 0U)
 8001444:	d834      	bhi.n	80014b0 <arm_fir_decimate_f32+0x8c>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8001446:	ea4f 0c88 	mov.w	ip, r8, lsl #2
  blkCnt = outBlockSize;
 800144a:	4655      	mov	r5, sl
        float32_t *pState = S->pState;                 /* State pointer */
 800144c:	463e      	mov	r6, r7
 800144e:	46f3      	mov	fp, lr
 8001450:	4643      	mov	r3, r8
 8001452:	4608      	mov	r0, r1
      *pStateCur++ = *pSrc++;
 8001454:	ecf0 7a01 	vldmia	r0!, {s15}
    } while (--i);
 8001458:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
 800145a:	eceb 7a01 	vstmia	fp!, {s15}
    } while (--i);
 800145e:	d1f9      	bne.n	8001454 <arm_fir_decimate_f32+0x30>
      *pStateCur++ = *pSrc++;
 8001460:	4461      	add	r1, ip
 8001462:	44e6      	add	lr, ip
    while (tapCnt > 0U)
 8001464:	b1e4      	cbz	r4, 80014a0 <arm_fir_decimate_f32+0x7c>
 8001466:	4623      	mov	r3, r4
    acc0 = 0.0f;
 8001468:	eddf 7a12 	vldr	s15, [pc, #72]	; 80014b4 <arm_fir_decimate_f32+0x90>
    pb = pCoeffs;
 800146c:	46cb      	mov	fp, r9
    while (tapCnt > 0U)
 800146e:	4630      	mov	r0, r6
      acc0 += x0 * c0;
 8001470:	ecfb 6a01 	vldmia	fp!, {s13}
    while (tapCnt > 0U)
 8001474:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
 8001476:	ecb0 7a01 	vldmia	r0!, {s14}
 800147a:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (tapCnt > 0U)
 800147e:	d1f7      	bne.n	8001470 <arm_fir_decimate_f32+0x4c>
  while (blkCnt > 0U)
 8001480:	3d01      	subs	r5, #1
    pState = pState + S->M;
 8001482:	4466      	add	r6, ip

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 8001484:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 8001488:	d1e1      	bne.n	800144e <arm_fir_decimate_f32+0x2a>
    pState = pState + S->M;
 800148a:	fb0a 7c0c 	mla	ip, sl, ip, r7
 800148e:	e003      	b.n	8001498 <arm_fir_decimate_f32+0x74>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8001490:	f85c 3b04 	ldr.w	r3, [ip], #4
 8001494:	f847 3b04 	str.w	r3, [r7], #4
  while (tapCnt > 0U)
 8001498:	3c01      	subs	r4, #1
 800149a:	d1f9      	bne.n	8001490 <arm_fir_decimate_f32+0x6c>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 800149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acc0 = 0.0f;
 80014a0:	eddf 7a04 	vldr	s15, [pc, #16]	; 80014b4 <arm_fir_decimate_f32+0x90>
  while (blkCnt > 0U)
 80014a4:	3d01      	subs	r5, #1
    pState = pState + S->M;
 80014a6:	4466      	add	r6, ip
    *pDst++ = acc0;
 80014a8:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 80014ac:	d1cf      	bne.n	800144e <arm_fir_decimate_f32+0x2a>
 80014ae:	e7ec      	b.n	800148a <arm_fir_decimate_f32+0x66>
        float32_t *pState = S->pState;                 /* State pointer */
 80014b0:	46bc      	mov	ip, r7
 80014b2:	e7f1      	b.n	8001498 <arm_fir_decimate_f32+0x74>
 80014b4:	00000000 	.word	0x00000000

080014b8 <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 80014b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ba:	4616      	mov	r6, r2
 80014bc:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 80014c0:	fbb2 f4f6 	udiv	r4, r2, r6
 80014c4:	fb06 2414 	mls	r4, r6, r4, r2
 80014c8:	b96c      	cbnz	r4, 80014e6 <arm_fir_decimate_init_f32+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 80014ca:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80014cc:	1e4b      	subs	r3, r1, #1
 80014ce:	4605      	mov	r5, r0
    S->numTaps = numTaps;
 80014d0:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80014d2:	441a      	add	r2, r3
 80014d4:	4621      	mov	r1, r4
 80014d6:	4638      	mov	r0, r7
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	f010 fd67 	bl	8011fac <memset>
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;

    status = ARM_MATH_SUCCESS;
 80014de:	4620      	mov	r0, r4
    S->pState = pState;
 80014e0:	60af      	str	r7, [r5, #8]
    S->M = M;
 80014e2:	702e      	strb	r6, [r5, #0]
  }

  return (status);

}
 80014e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
 80014e6:	f06f 0001 	mvn.w	r0, #1
}
 80014ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014ec <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 80014ec:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 80014ee:	4c05      	ldr	r4, [pc, #20]	; (8001504 <loadWPM+0x18>)
{
 80014f0:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 80014f2:	17c3      	asrs	r3, r0, #31
 80014f4:	2100      	movs	r1, #0
 80014f6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80014fa:	f7fe ffa9 	bl	8000450 <__aeabi_uldivmod>
 80014fe:	6020      	str	r0, [r4, #0]

}
 8001500:	bd10      	pop	{r4, pc}
 8001502:	bf00      	nop
 8001504:	24007afc 	.word	0x24007afc

08001508 <DoKeyer>:
#endif
}
#endif

void DoKeyer(void)
{
 8001508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 800150c:	4c9a      	ldr	r4, [pc, #616]	; (8001778 <DoKeyer+0x270>)
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d12f      	bne.n	8001574 <DoKeyer+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 8001514:	4a99      	ldr	r2, [pc, #612]	; (800177c <DoKeyer+0x274>)
 8001516:	7812      	ldrb	r2, [r2, #0]
 8001518:	2a02      	cmp	r2, #2
 800151a:	d029      	beq.n	8001570 <DoKeyer+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 800151c:	4d98      	ldr	r5, [pc, #608]	; (8001780 <DoKeyer+0x278>)
 800151e:	782a      	ldrb	r2, [r5, #0]
 8001520:	2a05      	cmp	r2, #5
 8001522:	d825      	bhi.n	8001570 <DoKeyer+0x68>
 8001524:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001528:	009f0070 	.word	0x009f0070
 800152c:	000600d9 	.word	0x000600d9
 8001530:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 8001534:	4a93      	ldr	r2, [pc, #588]	; (8001784 <DoKeyer+0x27c>)
 8001536:	2001      	movs	r0, #1
 8001538:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80e2 	beq.w	8001704 <DoKeyer+0x1fc>
 8001540:	4f91      	ldr	r7, [pc, #580]	; (8001788 <DoKeyer+0x280>)
	tx = tx_enable;
 8001542:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 8001544:	2300      	movs	r3, #0
			CarrierEnable(1);
 8001546:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 8001548:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 800154a:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 800154c:	f003 fe64 	bl	8005218 <CarrierEnable>
		TXSwitch(1);
 8001550:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 8001552:	2404      	movs	r4, #4
		TXSwitch(1);
 8001554:	f003 fdfc 	bl	8005150 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001558:	f005 fe16 	bl	8007188 <HAL_GetTick>
 800155c:	498b      	ldr	r1, [pc, #556]	; (800178c <DoKeyer+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800155e:	4a8c      	ldr	r2, [pc, #560]	; (8001790 <DoKeyer+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001560:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 8001562:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001564:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8001566:	7813      	ldrb	r3, [r2, #0]
 8001568:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800156c:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800156e:	7013      	strb	r3, [r2, #0]
				}
			}
			break;
		}
	}
}
 8001570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 8001574:	f005 fe08 	bl	8007188 <HAL_GetTick>
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800157e:	4290      	cmp	r0, r2
 8001580:	f200 80b9 	bhi.w	80016f6 <DoKeyer+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0c5      	beq.n	8001514 <DoKeyer+0xc>
 8001588:	f005 fdfe 	bl	8007188 <HAL_GetTick>
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	4298      	cmp	r0, r3
 8001590:	d9c0      	bls.n	8001514 <DoKeyer+0xc>
						pk = Saved_pk;
 8001592:	4f80      	ldr	r7, [pc, #512]	; (8001794 <DoKeyer+0x28c>)
			TXSwitch(0);
 8001594:	2000      	movs	r0, #0
 8001596:	f003 fddb 	bl	8005150 <TXSwitch>
						pk = Saved_pk;
 800159a:	4e7f      	ldr	r6, [pc, #508]	; (8001798 <DoKeyer+0x290>)
			semi_qsk_timeout = 0;
 800159c:	2200      	movs	r2, #0
						pk = Saved_pk;
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 80015a2:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 80015a4:	6031      	str	r1, [r6, #0]
 80015a6:	e7b5      	b.n	8001514 <DoKeyer+0xc>
	if(KEYER_DASH) {
 80015a8:	2140      	movs	r1, #64	; 0x40
 80015aa:	487c      	ldr	r0, [pc, #496]	; (800179c <DoKeyer+0x294>)
 80015ac:	f008 ffa0 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80015b0:	b948      	cbnz	r0, 80015c6 <DoKeyer+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80015b2:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <DoKeyer+0x298>)
 80015b4:	4a76      	ldr	r2, [pc, #472]	; (8001790 <DoKeyer+0x288>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	7811      	ldrb	r1, [r2, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2302      	movne	r3, #2
 80015c0:	2301      	moveq	r3, #1
 80015c2:	430b      	orrs	r3, r1
 80015c4:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	4874      	ldr	r0, [pc, #464]	; (800179c <DoKeyer+0x294>)
 80015ca:	f008 ff91 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80015ce:	b948      	cbnz	r0, 80015e4 <DoKeyer+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80015d0:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <DoKeyer+0x298>)
 80015d2:	4a6f      	ldr	r2, [pc, #444]	; (8001790 <DoKeyer+0x288>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	7811      	ldrb	r1, [r2, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2302      	moveq	r3, #2
 80015e0:	430b      	orrs	r3, r1
 80015e2:	7013      	strb	r3, [r2, #0]
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 80015e4:	f005 fdd0 	bl	8007188 <HAL_GetTick>
 80015e8:	4b68      	ldr	r3, [pc, #416]	; (800178c <DoKeyer+0x284>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4298      	cmp	r0, r3
 80015ee:	d9bf      	bls.n	8001570 <DoKeyer+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 80015f0:	4a67      	ldr	r2, [pc, #412]	; (8001790 <DoKeyer+0x288>)
 80015f2:	7813      	ldrb	r3, [r2, #0]
 80015f4:	f013 0104 	ands.w	r1, r3, #4
 80015f8:	f000 80b9 	beq.w	800176e <DoKeyer+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80015fc:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 8001600:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 8001602:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 8001604:	7029      	strb	r1, [r5, #0]
 8001606:	e7b3      	b.n	8001570 <DoKeyer+0x68>
			if((KEYER_DASH) ||
 8001608:	2140      	movs	r1, #64	; 0x40
 800160a:	4864      	ldr	r0, [pc, #400]	; (800179c <DoKeyer+0x294>)
 800160c:	f008 ff70 	bl	800a4f0 <HAL_GPIO_ReadPin>
 8001610:	b140      	cbz	r0, 8001624 <DoKeyer+0x11c>
					(KEYER_DOT) ||
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	4861      	ldr	r0, [pc, #388]	; (800179c <DoKeyer+0x294>)
 8001616:	f008 ff6b 	bl	800a4f0 <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 800161a:	b118      	cbz	r0, 8001624 <DoKeyer+0x11c>
					(keyerControl & 0x03))
 800161c:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <DoKeyer+0x288>)
					(KEYER_DOT) ||
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	0798      	lsls	r0, r3, #30
 8001622:	d0a5      	beq.n	8001570 <DoKeyer+0x68>
	if(KEYER_DASH) {
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	485d      	ldr	r0, [pc, #372]	; (800179c <DoKeyer+0x294>)
 8001628:	f008 ff62 	bl	800a4f0 <HAL_GPIO_ReadPin>
 800162c:	b948      	cbnz	r0, 8001642 <DoKeyer+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800162e:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <DoKeyer+0x298>)
 8001630:	4a57      	ldr	r2, [pc, #348]	; (8001790 <DoKeyer+0x288>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	7811      	ldrb	r1, [r2, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf14      	ite	ne
 800163a:	2302      	movne	r3, #2
 800163c:	2301      	moveq	r3, #1
 800163e:	430b      	orrs	r3, r1
 8001640:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	4855      	ldr	r0, [pc, #340]	; (800179c <DoKeyer+0x294>)
 8001646:	f008 ff53 	bl	800a4f0 <HAL_GPIO_ReadPin>
 800164a:	b948      	cbnz	r0, 8001660 <DoKeyer+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 800164c:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <DoKeyer+0x298>)
 800164e:	4a50      	ldr	r2, [pc, #320]	; (8001790 <DoKeyer+0x288>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	7811      	ldrb	r1, [r2, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2302      	moveq	r3, #2
 800165c:	430b      	orrs	r3, r1
 800165e:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8001660:	2301      	movs	r3, #1
 8001662:	702b      	strb	r3, [r5, #0]
 8001664:	e784      	b.n	8001570 <DoKeyer+0x68>
			if(keyerControl & DIT_L) {
 8001666:	4a4a      	ldr	r2, [pc, #296]	; (8001790 <DoKeyer+0x288>)
 8001668:	7813      	ldrb	r3, [r2, #0]
 800166a:	07d9      	lsls	r1, r3, #31
 800166c:	d55e      	bpl.n	800172c <DoKeyer+0x224>
				keyerControl |= DIT_PROC;
 800166e:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 8001672:	484c      	ldr	r0, [pc, #304]	; (80017a4 <DoKeyer+0x29c>)
 8001674:	4945      	ldr	r1, [pc, #276]	; (800178c <DoKeyer+0x284>)
 8001676:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 8001678:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800167a:	2303      	movs	r3, #3
				ktimer = ditTime;
 800167c:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 800167e:	702b      	strb	r3, [r5, #0]
 8001680:	e776      	b.n	8001570 <DoKeyer+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 8001682:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800178c <DoKeyer+0x284>
 8001686:	f005 fd7f 	bl	8007188 <HAL_GetTick>
 800168a:	f8d8 3000 	ldr.w	r3, [r8]
 800168e:	4298      	cmp	r0, r3
 8001690:	d84f      	bhi.n	8001732 <DoKeyer+0x22a>
			} else if(keyerControl & IAMBICB) {
 8001692:	4c3f      	ldr	r4, [pc, #252]	; (8001790 <DoKeyer+0x288>)
 8001694:	7823      	ldrb	r3, [r4, #0]
 8001696:	06db      	lsls	r3, r3, #27
 8001698:	f57f af6a 	bpl.w	8001570 <DoKeyer+0x68>
	if(KEYER_DASH) {
 800169c:	2140      	movs	r1, #64	; 0x40
 800169e:	483f      	ldr	r0, [pc, #252]	; (800179c <DoKeyer+0x294>)
 80016a0:	f008 ff26 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80016a4:	b940      	cbnz	r0, 80016b8 <DoKeyer+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <DoKeyer+0x298>)
 80016a8:	7822      	ldrb	r2, [r4, #0]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf14      	ite	ne
 80016b0:	2302      	movne	r3, #2
 80016b2:	2301      	moveq	r3, #1
 80016b4:	4313      	orrs	r3, r2
 80016b6:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4838      	ldr	r0, [pc, #224]	; (800179c <DoKeyer+0x294>)
 80016bc:	f008 ff18 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	f47f af55 	bne.w	8001570 <DoKeyer+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80016c6:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <DoKeyer+0x298>)
 80016c8:	7822      	ldrb	r2, [r4, #0]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf14      	ite	ne
 80016d0:	2301      	movne	r3, #1
 80016d2:	2302      	moveq	r3, #2
 80016d4:	4313      	orrs	r3, r2
 80016d6:	7023      	strb	r3, [r4, #0]
}
 80016d8:	e74a      	b.n	8001570 <DoKeyer+0x68>
			if(keyerControl & DAH_L) {
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <DoKeyer+0x288>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f013 0302 	ands.w	r3, r3, #2
 80016e2:	d00d      	beq.n	8001700 <DoKeyer+0x1f8>
				ktimer = ditTime*3;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <DoKeyer+0x29c>)
				keyerState = KEYED_PREP;
 80016e6:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 80016e8:	4a28      	ldr	r2, [pc, #160]	; (800178c <DoKeyer+0x284>)
 80016ea:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 80016ec:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 80016ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016f2:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 80016f4:	e73c      	b.n	8001570 <DoKeyer+0x68>
		TXSwitch(0);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f003 fd2a 	bl	8005150 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	e741      	b.n	8001584 <DoKeyer+0x7c>
				keyerState = IDLE;
 8001700:	702b      	strb	r3, [r5, #0]
 8001702:	e735      	b.n	8001570 <DoKeyer+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 8001704:	4e28      	ldr	r6, [pc, #160]	; (80017a8 <DoKeyer+0x2a0>)
 8001706:	4f20      	ldr	r7, [pc, #128]	; (8001788 <DoKeyer+0x280>)
 8001708:	7833      	ldrb	r3, [r6, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f43f af19 	beq.w	8001542 <DoKeyer+0x3a>
 8001710:	783b      	ldrb	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f47f af15 	bne.w	8001542 <DoKeyer+0x3a>
					Saved_pk = pk;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <DoKeyer+0x290>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <DoKeyer+0x28c>)
 800171e:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 8001720:	f003 fd16 	bl	8005150 <TXSwitch>
			HAL_Delay(txdelay);
 8001724:	7830      	ldrb	r0, [r6, #0]
 8001726:	f005 fd35 	bl	8007194 <HAL_Delay>
 800172a:	e70a      	b.n	8001542 <DoKeyer+0x3a>
				keyerState = CHK_DAH;
 800172c:	2302      	movs	r3, #2
 800172e:	702b      	strb	r3, [r5, #0]
 8001730:	e71e      	b.n	8001570 <DoKeyer+0x68>
				Key_state = LOW;
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <DoKeyer+0x27c>)
 8001734:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 8001736:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 8001738:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 800173a:	bbb8      	cbnz	r0, 80017ac <DoKeyer+0x2a4>
	tx = tx_enable;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <DoKeyer+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 800173e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80017a4 <DoKeyer+0x29c>
	tx = tx_enable;
 8001742:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 8001744:	f003 fd68 	bl	8005218 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001748:	f005 fd1e 	bl	8007188 <HAL_GetTick>
 800174c:	f8d9 3000 	ldr.w	r3, [r9]
 8001750:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001754:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001756:	2800      	cmp	r0, #0
 8001758:	d039      	beq.n	80017ce <DoKeyer+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 800175a:	f005 fd15 	bl	8007188 <HAL_GetTick>
 800175e:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 8001762:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001764:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 8001766:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001768:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 800176c:	e700      	b.n	8001570 <DoKeyer+0x68>
					keyerControl &= ~(DAH_L);              // clear dah latch
 800176e:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 8001772:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 8001774:	7013      	strb	r3, [r2, #0]
}
 8001776:	e6fb      	b.n	8001570 <DoKeyer+0x68>
 8001778:	2400ae68 	.word	0x2400ae68
 800177c:	2400acda 	.word	0x2400acda
 8001780:	2400acd9 	.word	0x2400acd9
 8001784:	24005124 	.word	0x24005124
 8001788:	2400c4b0 	.word	0x2400c4b0
 800178c:	2400ace4 	.word	0x2400ace4
 8001790:	2400acd8 	.word	0x2400acd8
 8001794:	24006154 	.word	0x24006154
 8001798:	2400ad14 	.word	0x2400ad14
 800179c:	58020000 	.word	0x58020000
 80017a0:	2400ace0 	.word	0x2400ace0
 80017a4:	24007afc 	.word	0x24007afc
 80017a8:	2400c4b1 	.word	0x2400c4b1
	tx = tx_enable;
 80017ac:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <DoKeyer+0x2cc>)
			pk = Saved_pk;
 80017ae:	4f0a      	ldr	r7, [pc, #40]	; (80017d8 <DoKeyer+0x2d0>)
 80017b0:	4e0a      	ldr	r6, [pc, #40]	; (80017dc <DoKeyer+0x2d4>)
			semi_qsk_timeout = 0;
 80017b2:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80017b4:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 80017b6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80017e0 <DoKeyer+0x2d8>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 80017be:	2000      	movs	r0, #0
 80017c0:	f003 fcc6 	bl	8005150 <TXSwitch>
						pk = Saved_pk;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 80017cc:	e7c5      	b.n	800175a <DoKeyer+0x252>
 80017ce:	4e03      	ldr	r6, [pc, #12]	; (80017dc <DoKeyer+0x2d4>)
 80017d0:	4f01      	ldr	r7, [pc, #4]	; (80017d8 <DoKeyer+0x2d0>)
 80017d2:	e7f4      	b.n	80017be <DoKeyer+0x2b6>
 80017d4:	2400c4b0 	.word	0x2400c4b0
 80017d8:	24006154 	.word	0x24006154
 80017dc:	2400ad14 	.word	0x2400ad14
 80017e0:	24007afc 	.word	0x24007afc

080017e4 <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 80017e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80017e8:	497d      	ldr	r1, [pc, #500]	; (80019e0 <cw_tx_char+0x1fc>)
 80017ea:	237e      	movs	r3, #126	; 0x7e
 80017ec:	2500      	movs	r5, #0
 80017ee:	e004      	b.n	80017fa <cw_tx_char+0x16>
 80017f0:	b2d5      	uxtb	r5, r2
 80017f2:	5d4b      	ldrb	r3, [r1, r5]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 808b 	beq.w	8001910 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 80017fa:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80017fc:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 8001800:	d1f6      	bne.n	80017f0 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 8001802:	062b      	lsls	r3, r5, #24
 8001804:	f100 80e6 	bmi.w	80019d4 <cw_tx_char+0x1f0>
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	461e      	mov	r6, r3
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	422b      	tst	r3, r5
 8001810:	d0fb      	beq.n	800180a <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001812:	08b6      	lsrs	r6, r6, #2
 8001814:	f000 80b2 	beq.w	800197c <cw_tx_char+0x198>
 8001818:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80019f4 <cw_tx_char+0x210>
 800181c:	4f71      	ldr	r7, [pc, #452]	; (80019e4 <cw_tx_char+0x200>)
 800181e:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80019fc <cw_tx_char+0x218>
					Saved_pk = pk;
 8001822:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80019f8 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b93b      	cbnz	r3, 800183a <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <cw_tx_char+0x204>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b123      	cbz	r3, 800183a <cw_tx_char+0x56>
 8001830:	f898 3000 	ldrb.w	r3, [r8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8095 	beq.w	8001964 <cw_tx_char+0x180>
	tx = tx_enable;
 800183a:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 800183c:	2300      	movs	r3, #0
			CarrierEnable(1);
 800183e:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 8001840:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 8001842:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 8001846:	f003 fce7 	bl	8005218 <CarrierEnable>
		TXSwitch(1);
 800184a:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 800184c:	4c67      	ldr	r4, [pc, #412]	; (80019ec <cw_tx_char+0x208>)
		TXSwitch(1);
 800184e:	f003 fc7f 	bl	8005150 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001852:	422e      	tst	r6, r5
 8001854:	f8d9 0000 	ldr.w	r0, [r9]
 8001858:	bf14      	ite	ne
 800185a:	f04f 0b03 	movne.w	fp, #3
 800185e:	f04f 0b01 	moveq.w	fp, #1
 8001862:	fb00 fb0b 	mul.w	fp, r0, fp
  uint32_t event = HAL_GetTick() + ms;
 8001866:	f005 fc8f 	bl	8007188 <HAL_GetTick>
 800186a:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 800186c:	e00a      	b.n	8001884 <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 800186e:	f008 fe3f 	bl	800a4f0 <HAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	4620      	mov	r0, r4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d04c      	beq.n	8001916 <cw_tx_char+0x132>
 800187c:	f008 fe38 	bl	800a4f0 <HAL_GPIO_ReadPin>
 8001880:	2800      	cmp	r0, #0
 8001882:	d048      	beq.n	8001916 <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8001884:	f005 fc80 	bl	8007188 <HAL_GetTick>
 8001888:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 800188a:	2140      	movs	r1, #64	; 0x40
 800188c:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 800188e:	459b      	cmp	fp, r3
 8001890:	d8ed      	bhi.n	800186e <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	2800      	cmp	r0, #0
 8001896:	d151      	bne.n	800193c <cw_tx_char+0x158>
	tx = tx_enable;
 8001898:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 800189c:	f003 fcbc 	bl	8005218 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80018a0:	f005 fc72 	bl	8007188 <HAL_GetTick>
 80018a4:	f8d9 b000 	ldr.w	fp, [r9]
 80018a8:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 80018ac:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d04c      	beq.n	800194c <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 80018b2:	f005 fc69 	bl	8007188 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 80018b6:	4c4d      	ldr	r4, [pc, #308]	; (80019ec <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 80018b8:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 80018ba:	e008      	b.n	80018ce <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 80018bc:	f008 fe18 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	4620      	mov	r0, r4
 80018c6:	b3b3      	cbz	r3, 8001936 <cw_tx_char+0x152>
 80018c8:	f008 fe12 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80018cc:	b398      	cbz	r0, 8001936 <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 80018ce:	f005 fc5b 	bl	8007188 <HAL_GetTick>
 80018d2:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 80018d4:	2140      	movs	r1, #64	; 0x40
 80018d6:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 80018d8:	459b      	cmp	fp, r3
 80018da:	d8ef      	bhi.n	80018bc <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 80018dc:	0876      	lsrs	r6, r6, #1
 80018de:	d1a2      	bne.n	8001826 <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 80018e0:	f8d9 6000 	ldr.w	r6, [r9]
  uint32_t event = HAL_GetTick() + ms;
 80018e4:	f005 fc50 	bl	8007188 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 80018e8:	4c40      	ldr	r4, [pc, #256]	; (80019ec <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 80018ea:	0076      	lsls	r6, r6, #1
  uint32_t event = HAL_GetTick() + ms;
 80018ec:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 80018ee:	e008      	b.n	8001902 <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 80018f0:	f008 fdfe 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	4620      	mov	r0, r4
 80018fa:	b1e3      	cbz	r3, 8001936 <cw_tx_char+0x152>
 80018fc:	f008 fdf8 	bl	800a4f0 <HAL_GPIO_ReadPin>
 8001900:	b1c8      	cbz	r0, 8001936 <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8001902:	f005 fc41 	bl	8007188 <HAL_GetTick>
 8001906:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 800190c:	429e      	cmp	r6, r3
 800190e:	d8ef      	bhi.n	80018f0 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8001910:	2000      	movs	r0, #0
}
 8001912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8001916:	6838      	ldr	r0, [r7, #0]
 8001918:	2800      	cmp	r0, #0
 800191a:	d14a      	bne.n	80019b2 <cw_tx_char+0x1ce>
	tx = tx_enable;
 800191c:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8001920:	f003 fc7a 	bl	8005218 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001924:	f005 fc30 	bl	8007188 <HAL_GetTick>
 8001928:	f8d9 3000 	ldr.w	r3, [r9]
 800192c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001930:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001932:	2800      	cmp	r0, #0
 8001934:	d050      	beq.n	80019d8 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001936:	2001      	movs	r0, #1
}
 8001938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 800193c:	2300      	movs	r3, #0
			pk = Saved_pk;
 800193e:	4a2c      	ldr	r2, [pc, #176]	; (80019f0 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8001940:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8001944:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8001946:	f8da 3000 	ldr.w	r3, [sl]
 800194a:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 800194c:	2000      	movs	r0, #0
 800194e:	f003 fbff 	bl	8005150 <TXSwitch>
			semi_qsk_timeout = 0;
 8001952:	2300      	movs	r3, #0
						pk = Saved_pk;
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8001956:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8001958:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 800195c:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e7a6      	b.n	80018b2 <cw_tx_char+0xce>
					Saved_pk = pk;
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8001966:	2001      	movs	r0, #1
					Saved_pk = pk;
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 800196e:	f003 fbef 	bl	8005150 <TXSwitch>
			HAL_Delay(txdelay);
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <cw_tx_char+0x204>)
 8001974:	7818      	ldrb	r0, [r3, #0]
 8001976:	f005 fc0d 	bl	8007194 <HAL_Delay>
 800197a:	e75e      	b.n	800183a <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 800197e:	4c1b      	ldr	r4, [pc, #108]	; (80019ec <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001980:	681e      	ldr	r6, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8001982:	f005 fc01 	bl	8007188 <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001986:	00b6      	lsls	r6, r6, #2
  uint32_t event = HAL_GetTick() + ms;
 8001988:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 800198a:	e00a      	b.n	80019a2 <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 800198c:	f008 fdb0 	bl	800a4f0 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	4620      	mov	r0, r4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0ba      	beq.n	8001910 <cw_tx_char+0x12c>
 800199a:	f008 fda9 	bl	800a4f0 <HAL_GPIO_ReadPin>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d0b6      	beq.n	8001910 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 80019a2:	f005 fbf1 	bl	8007188 <HAL_GetTick>
 80019a6:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 80019a8:	2140      	movs	r1, #64	; 0x40
 80019aa:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 80019ac:	429e      	cmp	r6, r3
 80019ae:	d8ed      	bhi.n	800198c <cw_tx_char+0x1a8>
 80019b0:	e7ae      	b.n	8001910 <cw_tx_char+0x12c>
	tx = tx_enable;
 80019b2:	2300      	movs	r3, #0
			pk = Saved_pk;
 80019b4:	4d10      	ldr	r5, [pc, #64]	; (80019f8 <cw_tx_char+0x214>)
 80019b6:	4c0e      	ldr	r4, [pc, #56]	; (80019f0 <cw_tx_char+0x20c>)
	tx = tx_enable;
 80019b8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 80019bc:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 80019be:	682b      	ldr	r3, [r5, #0]
 80019c0:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f003 fbc4 	bl	8005150 <TXSwitch>
			semi_qsk_timeout = 0;
 80019c8:	2200      	movs	r2, #0
						pk = Saved_pk;
 80019ca:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 80019cc:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 80019ce:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	e79e      	b.n	8001912 <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80019d4:	2640      	movs	r6, #64	; 0x40
 80019d6:	e71f      	b.n	8001818 <cw_tx_char+0x34>
 80019d8:	4d07      	ldr	r5, [pc, #28]	; (80019f8 <cw_tx_char+0x214>)
 80019da:	4c05      	ldr	r4, [pc, #20]	; (80019f0 <cw_tx_char+0x20c>)
 80019dc:	e7f1      	b.n	80019c2 <cw_tx_char+0x1de>
 80019de:	bf00      	nop
 80019e0:	08018ef0 	.word	0x08018ef0
 80019e4:	2400ae68 	.word	0x2400ae68
 80019e8:	2400c4b1 	.word	0x2400c4b1
 80019ec:	58020000 	.word	0x58020000
 80019f0:	2400ad14 	.word	0x2400ad14
 80019f4:	24007afc 	.word	0x24007afc
 80019f8:	24006154 	.word	0x24006154
 80019fc:	2400c4b0 	.word	0x2400c4b0

08001a00 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 8001a02:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <SendCWMessage+0x28>)
 8001a08:	012a      	lsls	r2, r5, #4
 8001a0a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 8001a0e:	5c98      	ldrb	r0, [r3, r2]
 8001a10:	b148      	cbz	r0, 8001a26 <SendCWMessage+0x26>
 8001a12:	2400      	movs	r4, #0
 8001a14:	e002      	b.n	8001a1c <SendCWMessage+0x1c>
 8001a16:	b2e4      	uxtb	r4, r4
 8001a18:	5d28      	ldrb	r0, [r5, r4]
 8001a1a:	b120      	cbz	r0, 8001a26 <SendCWMessage+0x26>
 8001a1c:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8001a1e:	f7ff fee1 	bl	80017e4 <cw_tx_char>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d0f7      	beq.n	8001a16 <SendCWMessage+0x16>
}
 8001a26:	bd38      	pop	{r3, r4, r5, pc}
 8001a28:	24000000 	.word	0x24000000

08001a2c <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <Load_Presets+0x40>)
{
 8001a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a32:	4c0f      	ldr	r4, [pc, #60]	; (8001a70 <Load_Presets+0x44>)
 8001a34:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8001a38:	4f0e      	ldr	r7, [pc, #56]	; (8001a74 <Load_Presets+0x48>)
 8001a3a:	4e0f      	ldr	r6, [pc, #60]	; (8001a78 <Load_Presets+0x4c>)
 8001a3c:	4d0f      	ldr	r5, [pc, #60]	; (8001a7c <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8001a3e:	4621      	mov	r1, r4
 8001a40:	4618      	mov	r0, r3
 8001a42:	f011 f8b5 	bl	8012bb0 <strcpy>
 8001a46:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 8001a48:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8001a4c:	3410      	adds	r4, #16
 8001a4e:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8001a50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8001a54:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8001a58:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8001a5c:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8001a5e:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8001a62:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8001a66:	d1ea      	bne.n	8001a3e <Load_Presets+0x12>
	}
}
 8001a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a6c:	2400ad18 	.word	0x2400ad18
 8001a70:	24000120 	.word	0x24000120
 8001a74:	08018f80 	.word	0x08018f80
 8001a78:	08018fb7 	.word	0x08018fb7
 8001a7c:	08018f6f 	.word	0x08018f6f

08001a80 <SetBW>:
//-----------------------------------------------------------------------------
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	if (newbw == CurrentBW)
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <SetBW+0x94>)
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	4282      	cmp	r2, r0
 8001a86:	d008      	beq.n	8001a9a <SetBW+0x1a>
		return;

	CurrentBW = newbw;
	switch(CurrentMode)
 8001a88:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <SetBW+0x98>)
	CurrentBW = newbw;
 8001a8a:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8001a8c:	7813      	ldrb	r3, [r2, #0]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d803      	bhi.n	8001a9a <SetBW+0x1a>
 8001a92:	e8df f003 	tbb	[pc, r3]
 8001a96:	190e      	.short	0x190e
 8001a98:	032c      	.short	0x032c
		break;

	default :
		break;
	}
}	
 8001a9a:	4770      	bx	lr
		bw[CW] = newbw;
 8001a9c:	491f      	ldr	r1, [pc, #124]	; (8001b1c <SetBW+0x9c>)
		CWindex = 0; // TODO toglimi
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <SetBW+0xa0>)
		bw[CW] = newbw;
 8001aa2:	70c8      	strb	r0, [r1, #3]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001aa4:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001b24 <SetBW+0xa4>
 8001aa8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001b28 <SetBW+0xa8>
		CWindex = 0; // TODO toglimi
 8001aac:	801a      	strh	r2, [r3, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001aae:	f001 bd1f 	b.w	80034f0 <SetMask>
		bw[AM] = newbw;
 8001ab2:	491a      	ldr	r1, [pc, #104]	; (8001b1c <SetBW+0x9c>)
		AMindex = 0; // TODO toglimi
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <SetBW+0xac>)
		bw[AM] = newbw;
 8001ab8:	7008      	strb	r0, [r1, #0]
		SetMask(-3000.0f, 3000.0f);
 8001aba:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001b30 <SetBW+0xb0>
 8001abe:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001b34 <SetBW+0xb4>
		AMindex = 0; // TODO toglimi
 8001ac2:	801a      	strh	r2, [r3, #0]
		SetMask(-3000.0f, 3000.0f);
 8001ac4:	f001 bd14 	b.w	80034f0 <SetMask>
		bw[LSB] = newbw;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <SetBW+0x9c>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001aca:	f1b0 0c00 	subs.w	ip, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001ace:	4917      	ldr	r1, [pc, #92]	; (8001b2c <SetBW+0xac>)
		bw[LSB] = newbw;
 8001ad0:	7050      	strb	r0, [r2, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001ad2:	bf18      	it	ne
 8001ad4:	f04f 0c01 	movne.w	ip, #1
		LSBindex = 0; // TODO toglimi
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <SetBW+0xb8>)
 8001ada:	2200      	movs	r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001adc:	f8a1 c000 	strh.w	ip, [r1]
		SetMask(300.0f, 2500.0f);
 8001ae0:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001b3c <SetBW+0xbc>
 8001ae4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001b40 <SetBW+0xc0>
		LSBindex = 0; // TODO toglimi
 8001ae8:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8001aea:	f001 bd01 	b.w	80034f0 <SetMask>
		bw[USB] = newbw;
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <SetBW+0x9c>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001af0:	f1b0 0c00 	subs.w	ip, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001af4:	490d      	ldr	r1, [pc, #52]	; (8001b2c <SetBW+0xac>)
		bw[USB] = newbw;
 8001af6:	7090      	strb	r0, [r2, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001af8:	bf18      	it	ne
 8001afa:	f04f 0c01 	movne.w	ip, #1
		USBindex = 0; // TODO toglimi
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <SetBW+0xc4>)
 8001b00:	2200      	movs	r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001b02:	f8a1 c000 	strh.w	ip, [r1]
		SetMask(300.0f, 2500.0f);
 8001b06:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001b3c <SetBW+0xbc>
 8001b0a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001b40 <SetBW+0xc0>
		USBindex = 0; // TODO toglimi
 8001b0e:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8001b10:	f001 bcee 	b.w	80034f0 <SetMask>
 8001b14:	24000eeb 	.word	0x24000eeb
 8001b18:	24000eec 	.word	0x24000eec
 8001b1c:	24007af0 	.word	0x24007af0
 8001b20:	24000ee8 	.word	0x24000ee8
 8001b24:	44480000 	.word	0x44480000
 8001b28:	43fa0000 	.word	0x43fa0000
 8001b2c:	240006d0 	.word	0x240006d0
 8001b30:	453b8000 	.word	0x453b8000
 8001b34:	c53b8000 	.word	0xc53b8000
 8001b38:	2400612c 	.word	0x2400612c
 8001b3c:	451c4000 	.word	0x451c4000
 8001b40:	43960000 	.word	0x43960000
 8001b44:	240061bc 	.word	0x240061bc

08001b48 <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8001b4a:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <SetAGC+0x9c>)
{
 8001b4c:	b410      	push	{r4}
	switch(CurrentMode)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8001b50:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d811      	bhi.n	8001b7a <SetAGC+0x32>
 8001b56:	e8df f003 	tbb	[pc, r3]
 8001b5a:	2333      	.short	0x2333
 8001b5c:	0213      	.short	0x0213
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <SetAGC+0xa0>)
	case CW :       agc[CW] = newAGC;
 8001b60:	4922      	ldr	r1, [pc, #136]	; (8001bec <SetAGC+0xa4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001b62:	4c23      	ldr	r4, [pc, #140]	; (8001bf0 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8001b64:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001b68:	4a22      	ldr	r2, [pc, #136]	; (8001bf4 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001b6a:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8001b6e:	681b      	ldr	r3, [r3, #0]
	case CW :       agc[CW] = newAGC;
 8001b70:	70c8      	strb	r0, [r1, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001b72:	4921      	ldr	r1, [pc, #132]	; (8001bf8 <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8001b74:	60d3      	str	r3, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001b76:	f8a1 c006 	strh.w	ip, [r1, #6]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8001b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b7e:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8001b82:	491a      	ldr	r1, [pc, #104]	; (8001bec <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001b84:	4c1a      	ldr	r4, [pc, #104]	; (8001bf0 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8001b86:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case USB :      agc[USB] = newAGC;
 8001b8a:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001b8c:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8001b90:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001b92:	4919      	ldr	r1, [pc, #100]	; (8001bf8 <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8001b94:	681b      	ldr	r3, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001b96:	808c      	strh	r4, [r1, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8001b98:	6093      	str	r3, [r2, #8]
}	
 8001b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b9e:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8001ba2:	4912      	ldr	r1, [pc, #72]	; (8001bec <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001ba4:	4c12      	ldr	r4, [pc, #72]	; (8001bf0 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8001ba6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8001baa:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001bac:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8001bb0:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001bb2:	4911      	ldr	r1, [pc, #68]	; (8001bf8 <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8001bb4:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001bb6:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8001bb8:	6053      	str	r3, [r2, #4]
}	
 8001bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bbe:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	; (8001bf0 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8001bc6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8001bca:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001bcc:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8001bd0:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001bd2:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8001bd4:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001bd6:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8001bd8:	6013      	str	r3, [r2, #0]
}	
 8001bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	24000eec 	.word	0x24000eec
 8001be4:	24000eea 	.word	0x24000eea
 8001be8:	240006c8 	.word	0x240006c8
 8001bec:	24007ae0 	.word	0x24007ae0
 8001bf0:	24005118 	.word	0x24005118
 8001bf4:	24000ef0 	.word	0x24000ef0
 8001bf8:	2400511c 	.word	0x2400511c

08001bfc <Tune_Preset>:
{
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOfreq = psets[Idx].freq;
 8001bfe:	4e45      	ldr	r6, [pc, #276]	; (8001d14 <Tune_Preset+0x118>)
 8001c00:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001c04:	4a44      	ldr	r2, [pc, #272]	; (8001d18 <Tune_Preset+0x11c>)
{
 8001c06:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8001c08:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	if (CurrentMode == newmode)
 8001c0c:	4f43      	ldr	r7, [pc, #268]	; (8001d1c <Tune_Preset+0x120>)
	LOfreq = psets[Idx].freq;
 8001c0e:	0045      	lsls	r5, r0, #1
 8001c10:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8001c12:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8001c14:	6011      	str	r1, [r2, #0]
	if (CurrentMode == newmode)
 8001c16:	783a      	ldrb	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d00e      	beq.n	8001c3a <Tune_Preset+0x3e>
		return;

	CurrentMode = newmode;
 8001c1c:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d80b      	bhi.n	8001c3a <Tune_Preset+0x3e>
 8001c22:	e8df f003 	tbb	[pc, r3]
 8001c26:	372e      	.short	0x372e
 8001c28:	0240      	.short	0x0240
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <Tune_Preset+0x124>)
 8001c2c:	78d8      	ldrb	r0, [r3, #3]
 8001c2e:	f7ff ff27 	bl	8001a80 <SetBW>
 8001c32:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <Tune_Preset+0x128>)
 8001c34:	78d8      	ldrb	r0, [r3, #3]
 8001c36:	f7ff ff87 	bl	8001b48 <SetAGC>
	SetBW( psets[Idx].bw);
 8001c3a:	4425      	add	r5, r4
	if (newbw == CurrentBW)
 8001c3c:	4a3a      	ldr	r2, [pc, #232]	; (8001d28 <Tune_Preset+0x12c>)
	SetBW( psets[Idx].bw);
 8001c3e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	if (newbw == CurrentBW)
 8001c42:	7811      	ldrb	r1, [r2, #0]
	SetBW( psets[Idx].bw);
 8001c44:	7d6b      	ldrb	r3, [r5, #21]
	if (newbw == CurrentBW)
 8001c46:	4299      	cmp	r1, r3
 8001c48:	d012      	beq.n	8001c70 <Tune_Preset+0x74>
	switch(CurrentMode)
 8001c4a:	7839      	ldrb	r1, [r7, #0]
	CurrentBW = newbw;
 8001c4c:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8001c4e:	2903      	cmp	r1, #3
 8001c50:	d80e      	bhi.n	8001c70 <Tune_Preset+0x74>
 8001c52:	e8df f001 	tbb	[pc, r1]
 8001c56:	3d31      	.short	0x3d31
 8001c58:	024e      	.short	0x024e
		bw[CW] = newbw;
 8001c5a:	4931      	ldr	r1, [pc, #196]	; (8001d20 <Tune_Preset+0x124>)
		CWindex = 0; // TODO toglimi
 8001c5c:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <Tune_Preset+0x130>)
		bw[CW] = newbw;
 8001c5e:	70cb      	strb	r3, [r1, #3]
		CWindex = 0; // TODO toglimi
 8001c60:	2300      	movs	r3, #0
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001c62:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001d30 <Tune_Preset+0x134>
 8001c66:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8001d34 <Tune_Preset+0x138>
		CWindex = 0; // TODO toglimi
 8001c6a:	8013      	strh	r3, [r2, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001c6c:	f001 fc40 	bl	80034f0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001c70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001c74:	4830      	ldr	r0, [pc, #192]	; (8001d38 <Tune_Preset+0x13c>)
 8001c76:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8001c7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8001c7e:	f010 bf97 	b.w	8012bb0 <strcpy>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001c82:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <Tune_Preset+0x124>)
 8001c84:	7818      	ldrb	r0, [r3, #0]
 8001c86:	f7ff fefb 	bl	8001a80 <SetBW>
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <Tune_Preset+0x128>)
 8001c8c:	7818      	ldrb	r0, [r3, #0]
 8001c8e:	f7ff ff5b 	bl	8001b48 <SetAGC>
		break;
 8001c92:	e7d2      	b.n	8001c3a <Tune_Preset+0x3e>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001c94:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <Tune_Preset+0x124>)
 8001c96:	7858      	ldrb	r0, [r3, #1]
 8001c98:	f7ff fef2 	bl	8001a80 <SetBW>
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <Tune_Preset+0x128>)
 8001c9e:	7858      	ldrb	r0, [r3, #1]
 8001ca0:	f7ff ff52 	bl	8001b48 <SetAGC>
		break;
 8001ca4:	e7c9      	b.n	8001c3a <Tune_Preset+0x3e>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <Tune_Preset+0x124>)
 8001ca8:	7898      	ldrb	r0, [r3, #2]
 8001caa:	f7ff fee9 	bl	8001a80 <SetBW>
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <Tune_Preset+0x128>)
 8001cb0:	7898      	ldrb	r0, [r3, #2]
 8001cb2:	f7ff ff49 	bl	8001b48 <SetAGC>
		break;
 8001cb6:	e7c0      	b.n	8001c3a <Tune_Preset+0x3e>
		bw[AM] = newbw;
 8001cb8:	4919      	ldr	r1, [pc, #100]	; (8001d20 <Tune_Preset+0x124>)
		AMindex = 0; // TODO toglimi
 8001cba:	4a20      	ldr	r2, [pc, #128]	; (8001d3c <Tune_Preset+0x140>)
		bw[AM] = newbw;
 8001cbc:	700b      	strb	r3, [r1, #0]
		AMindex = 0; // TODO toglimi
 8001cbe:	2300      	movs	r3, #0
		SetMask(-3000.0f, 3000.0f);
 8001cc0:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001d40 <Tune_Preset+0x144>
 8001cc4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001d44 <Tune_Preset+0x148>
		AMindex = 0; // TODO toglimi
 8001cc8:	8013      	strh	r3, [r2, #0]
		SetMask(-3000.0f, 3000.0f);
 8001cca:	f001 fc11 	bl	80034f0 <SetMask>
		break;
 8001cce:	e7cf      	b.n	8001c70 <Tune_Preset+0x74>
		bw[LSB] = newbw;
 8001cd0:	4913      	ldr	r1, [pc, #76]	; (8001d20 <Tune_Preset+0x124>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <Tune_Preset+0x140>)
		bw[LSB] = newbw;
 8001cd4:	704b      	strb	r3, [r1, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001cd6:	3b00      	subs	r3, #0
		SetMask(300.0f, 2500.0f);
 8001cd8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001d48 <Tune_Preset+0x14c>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001cdc:	bf18      	it	ne
 8001cde:	2301      	movne	r3, #1
		SetMask(300.0f, 2500.0f);
 8001ce0:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001d4c <Tune_Preset+0x150>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001ce4:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <Tune_Preset+0x154>)
 8001cea:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8001cec:	f001 fc00 	bl	80034f0 <SetMask>
		break;
 8001cf0:	e7be      	b.n	8001c70 <Tune_Preset+0x74>
		bw[USB] = newbw;
 8001cf2:	490b      	ldr	r1, [pc, #44]	; (8001d20 <Tune_Preset+0x124>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001cf4:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <Tune_Preset+0x140>)
		bw[USB] = newbw;
 8001cf6:	708b      	strb	r3, [r1, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001cf8:	3b00      	subs	r3, #0
		SetMask(300.0f, 2500.0f);
 8001cfa:	eddf 0a13 	vldr	s1, [pc, #76]	; 8001d48 <Tune_Preset+0x14c>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001cfe:	bf18      	it	ne
 8001d00:	2301      	movne	r3, #1
		SetMask(300.0f, 2500.0f);
 8001d02:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001d4c <Tune_Preset+0x150>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001d06:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <Tune_Preset+0x158>)
 8001d0c:	801a      	strh	r2, [r3, #0]
		SetMask(300.0f, 2500.0f);
 8001d0e:	f001 fbef 	bl	80034f0 <SetMask>
		break;
 8001d12:	e7ad      	b.n	8001c70 <Tune_Preset+0x74>
 8001d14:	2400ad18 	.word	0x2400ad18
 8001d18:	24006128 	.word	0x24006128
 8001d1c:	24000eec 	.word	0x24000eec
 8001d20:	24007af0 	.word	0x24007af0
 8001d24:	24007ae0 	.word	0x24007ae0
 8001d28:	24000eeb 	.word	0x24000eeb
 8001d2c:	24000ee8 	.word	0x24000ee8
 8001d30:	44480000 	.word	0x44480000
 8001d34:	43fa0000 	.word	0x43fa0000
 8001d38:	2400acec 	.word	0x2400acec
 8001d3c:	240006d0 	.word	0x240006d0
 8001d40:	453b8000 	.word	0x453b8000
 8001d44:	c53b8000 	.word	0xc53b8000
 8001d48:	451c4000 	.word	0x451c4000
 8001d4c:	43960000 	.word	0x43960000
 8001d50:	2400612c 	.word	0x2400612c
 8001d54:	240061bc 	.word	0x240061bc

08001d58 <SetMode>:
{
 8001d58:	b508      	push	{r3, lr}
	if (CurrentMode == newmode)
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <SetMode+0x6c>)
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4282      	cmp	r2, r0
 8001d60:	d006      	beq.n	8001d70 <SetMode+0x18>
	CurrentMode = newmode;
 8001d62:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8001d64:	2803      	cmp	r0, #3
 8001d66:	d803      	bhi.n	8001d70 <SetMode+0x18>
 8001d68:	e8df f000 	tbb	[pc, r0]
 8001d6c:	0321170d 	.word	0x0321170d
		break;

	default :
		break;
	}
}	
 8001d70:	bd08      	pop	{r3, pc}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <SetMode+0x70>)
 8001d74:	78d8      	ldrb	r0, [r3, #3]
 8001d76:	f7ff fe83 	bl	8001a80 <SetBW>
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <SetMode+0x74>)
 8001d7c:	78d8      	ldrb	r0, [r3, #3]
}	
 8001d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001d82:	f7ff bee1 	b.w	8001b48 <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <SetMode+0x70>)
 8001d88:	7818      	ldrb	r0, [r3, #0]
 8001d8a:	f7ff fe79 	bl	8001a80 <SetBW>
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <SetMode+0x74>)
 8001d90:	7818      	ldrb	r0, [r3, #0]
}	
 8001d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001d96:	f7ff bed7 	b.w	8001b48 <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <SetMode+0x70>)
 8001d9c:	7858      	ldrb	r0, [r3, #1]
 8001d9e:	f7ff fe6f 	bl	8001a80 <SetBW>
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <SetMode+0x74>)
 8001da4:	7858      	ldrb	r0, [r3, #1]
}	
 8001da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001daa:	f7ff becd 	b.w	8001b48 <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <SetMode+0x70>)
 8001db0:	7898      	ldrb	r0, [r3, #2]
 8001db2:	f7ff fe65 	bl	8001a80 <SetBW>
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SetMode+0x74>)
 8001db8:	7898      	ldrb	r0, [r3, #2]
}	
 8001dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001dbe:	f7ff bec3 	b.w	8001b48 <SetAGC>
 8001dc2:	bf00      	nop
 8001dc4:	24000eec 	.word	0x24000eec
 8001dc8:	24007af0 	.word	0x24007af0
 8001dcc:	24007ae0 	.word	0x24007ae0

08001dd0 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8001dd0:	2809      	cmp	r0, #9
{
 8001dd2:	b508      	push	{r3, lr}
	if (idx == 9)
 8001dd4:	d012      	beq.n	8001dfc <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8001dd6:	f1c0 0005 	rsb	r0, r0, #5
 8001dda:	ee07 0a90 	vmov	s15, r0
 8001dde:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8001e08 <SetFstep+0x38>
 8001de2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001de6:	ee27 0b00 	vmul.f64	d0, d7, d0
 8001dea:	f013 f821 	bl	8014e30 <exp>
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <SetFstep+0x40>)
 8001df0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8001df4:	ee17 3a90 	vmov	r3, s15
 8001df8:	6013      	str	r3, [r2, #0]
}	
 8001dfa:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8001dfc:	f242 3328 	movw	r3, #9000	; 0x2328
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <SetFstep+0x40>)
 8001e02:	6013      	str	r3, [r2, #0]
}	
 8001e04:	bd08      	pop	{r3, pc}
 8001e06:	bf00      	nop
 8001e08:	bbb55516 	.word	0xbbb55516
 8001e0c:	40026bb1 	.word	0x40026bb1
 8001e10:	24005110 	.word	0x24005110

08001e14 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e14:	4a3f      	ldr	r2, [pc, #252]	; (8001f14 <FplusClicked+0x100>)
 8001e16:	ee07 0a90 	vmov	s15, r0
 8001e1a:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <FplusClicked+0x104>)
 8001e1c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8001e20:	ed92 6a00 	vldr	s12, [r2]
 8001e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e28:	ed93 7a00 	vldr	s14, [r3]
 8001e2c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e30:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <FplusClicked+0x108>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e32:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	LOfreq  = min(LOfreq, 50000000.f);
 8001e36:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8001f20 <FplusClicked+0x10c>
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e3a:	493a      	ldr	r1, [pc, #232]	; (8001f24 <FplusClicked+0x110>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e3c:	ee26 6a26 	vmul.f32	s12, s12, s13
	if (newbw == CurrentBW)
 8001e40:	4839      	ldr	r0, [pc, #228]	; (8001f28 <FplusClicked+0x114>)
{	
 8001e42:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e44:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e48:	7812      	ldrb	r2, [r2, #0]
	psets[0].bw = bw[CurrentMode];
 8001e4a:	4c38      	ldr	r4, [pc, #224]	; (8001f2c <FplusClicked+0x118>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e4c:	750a      	strb	r2, [r1, #20]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001e4e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8001e52:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8001e56:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8001e5a:	ed83 7a00 	vstr	s14, [r3]
	psets[0].bw = bw[CurrentMode];
 8001e5e:	5ca3      	ldrb	r3, [r4, r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001e60:	ed81 7a04 	vstr	s14, [r1, #16]
	psets[0].bw = bw[CurrentMode];
 8001e64:	754b      	strb	r3, [r1, #21]
	if (newbw == CurrentBW)
 8001e66:	7801      	ldrb	r1, [r0, #0]
 8001e68:	4299      	cmp	r1, r3
 8001e6a:	d010      	beq.n	8001e8e <FplusClicked+0x7a>
	CurrentBW = newbw;
 8001e6c:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8001e6e:	2a03      	cmp	r2, #3
 8001e70:	d80d      	bhi.n	8001e8e <FplusClicked+0x7a>
 8001e72:	e8df f002 	tbb	[pc, r2]
 8001e76:	2212      	.short	0x2212
 8001e78:	0238      	.short	0x0238
		CWindex = 0; // TODO toglimi
 8001e7a:	4a2d      	ldr	r2, [pc, #180]	; (8001f30 <FplusClicked+0x11c>)
 8001e7c:	2100      	movs	r1, #0
		bw[CW] = newbw;
 8001e7e:	70e3      	strb	r3, [r4, #3]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001e80:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8001f34 <FplusClicked+0x120>
 8001e84:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001f38 <FplusClicked+0x124>
		CWindex = 0; // TODO toglimi
 8001e88:	8011      	strh	r1, [r2, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001e8a:	f001 fb31 	bl	80034f0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001e8e:	4925      	ldr	r1, [pc, #148]	; (8001f24 <FplusClicked+0x110>)
 8001e90:	482a      	ldr	r0, [pc, #168]	; (8001f3c <FplusClicked+0x128>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8001e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001e96:	f010 be8b 	b.w	8012bb0 <strcpy>
		AMindex = 0; // TODO toglimi
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <FplusClicked+0x12c>)
		bw[AM] = newbw;
 8001e9e:	7023      	strb	r3, [r4, #0]
		SetMask(-3000.0f, 3000.0f);
 8001ea0:	eddf 0a28 	vldr	s1, [pc, #160]	; 8001f44 <FplusClicked+0x130>
		AMindex = 0; // TODO toglimi
 8001ea4:	8011      	strh	r1, [r2, #0]
		SetMask(-3000.0f, 3000.0f);
 8001ea6:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001f48 <FplusClicked+0x134>
 8001eaa:	f001 fb21 	bl	80034f0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001eae:	491d      	ldr	r1, [pc, #116]	; (8001f24 <FplusClicked+0x110>)
 8001eb0:	4822      	ldr	r0, [pc, #136]	; (8001f3c <FplusClicked+0x128>)
}	
 8001eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001eb6:	f010 be7b 	b.w	8012bb0 <strcpy>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001eba:	1e18      	subs	r0, r3, #0
		bw[LSB] = newbw;
 8001ebc:	7063      	strb	r3, [r4, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001ebe:	4920      	ldr	r1, [pc, #128]	; (8001f40 <FplusClicked+0x12c>)
		LSBindex = 0; // TODO toglimi
 8001ec0:	f04f 0300 	mov.w	r3, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001ec4:	bf18      	it	ne
 8001ec6:	2001      	movne	r0, #1
		LSBindex = 0; // TODO toglimi
 8001ec8:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <FplusClicked+0x138>)
		SetMask(300.0f, 2500.0f);
 8001eca:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001f50 <FplusClicked+0x13c>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001ece:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8001ed0:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001f54 <FplusClicked+0x140>
		LSBindex = 0; // TODO toglimi
 8001ed4:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 8001ed6:	f001 fb0b 	bl	80034f0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001eda:	4912      	ldr	r1, [pc, #72]	; (8001f24 <FplusClicked+0x110>)
 8001edc:	4817      	ldr	r0, [pc, #92]	; (8001f3c <FplusClicked+0x128>)
}	
 8001ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001ee2:	f010 be65 	b.w	8012bb0 <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001ee6:	1e18      	subs	r0, r3, #0
		bw[USB] = newbw;
 8001ee8:	70a3      	strb	r3, [r4, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001eea:	4915      	ldr	r1, [pc, #84]	; (8001f40 <FplusClicked+0x12c>)
		USBindex = 0; // TODO toglimi
 8001eec:	f04f 0300 	mov.w	r3, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001ef0:	bf18      	it	ne
 8001ef2:	2001      	movne	r0, #1
		USBindex = 0; // TODO toglimi
 8001ef4:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <FplusClicked+0x144>)
		SetMask(300.0f, 2500.0f);
 8001ef6:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001f50 <FplusClicked+0x13c>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001efa:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8001efc:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001f54 <FplusClicked+0x140>
		USBindex = 0; // TODO toglimi
 8001f00:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 8001f02:	f001 faf5 	bl	80034f0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001f06:	4907      	ldr	r1, [pc, #28]	; (8001f24 <FplusClicked+0x110>)
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <FplusClicked+0x128>)
}	
 8001f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001f0e:	f010 be4f 	b.w	8012bb0 <strcpy>
 8001f12:	bf00      	nop
 8001f14:	24005110 	.word	0x24005110
 8001f18:	24006128 	.word	0x24006128
 8001f1c:	24000eec 	.word	0x24000eec
 8001f20:	4c3ebc20 	.word	0x4c3ebc20
 8001f24:	2400ad18 	.word	0x2400ad18
 8001f28:	24000eeb 	.word	0x24000eeb
 8001f2c:	24007af0 	.word	0x24007af0
 8001f30:	24000ee8 	.word	0x24000ee8
 8001f34:	44480000 	.word	0x44480000
 8001f38:	43fa0000 	.word	0x43fa0000
 8001f3c:	2400acec 	.word	0x2400acec
 8001f40:	240006d0 	.word	0x240006d0
 8001f44:	453b8000 	.word	0x453b8000
 8001f48:	c53b8000 	.word	0xc53b8000
 8001f4c:	2400612c 	.word	0x2400612c
 8001f50:	451c4000 	.word	0x451c4000
 8001f54:	43960000 	.word	0x43960000
 8001f58:	240061bc 	.word	0x240061bc

08001f5c <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f5c:	4a3f      	ldr	r2, [pc, #252]	; (800205c <FminusClicked+0x100>)
 8001f5e:	ee07 0a90 	vmov	s15, r0
 8001f62:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <FminusClicked+0x104>)
 8001f64:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8001f68:	ed92 6a00 	vldr	s12, [r2]
 8001f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f70:	ed93 7a00 	vldr	s14, [r3]
 8001f74:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001f78:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <FminusClicked+0x108>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f7a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	LOfreq  = max(LOfreq, 8000.f);
 8001f7e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8002068 <FminusClicked+0x10c>
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001f82:	493a      	ldr	r1, [pc, #232]	; (800206c <FminusClicked+0x110>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f84:	ee26 6a26 	vmul.f32	s12, s12, s13
	if (newbw == CurrentBW)
 8001f88:	4839      	ldr	r0, [pc, #228]	; (8002070 <FminusClicked+0x114>)
{	
 8001f8a:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f8c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001f90:	7812      	ldrb	r2, [r2, #0]
	psets[0].bw = bw[CurrentMode];
 8001f92:	4c38      	ldr	r4, [pc, #224]	; (8002074 <FminusClicked+0x118>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001f94:	750a      	strb	r2, [r1, #20]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001f96:	eea6 7b44 	vfms.f64	d7, d6, d4
 8001f9a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 8001f9e:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 8001fa2:	ed83 7a00 	vstr	s14, [r3]
	psets[0].bw = bw[CurrentMode];
 8001fa6:	5ca3      	ldrb	r3, [r4, r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001fa8:	ed81 7a04 	vstr	s14, [r1, #16]
	psets[0].bw = bw[CurrentMode];
 8001fac:	754b      	strb	r3, [r1, #21]
	if (newbw == CurrentBW)
 8001fae:	7801      	ldrb	r1, [r0, #0]
 8001fb0:	4299      	cmp	r1, r3
 8001fb2:	d010      	beq.n	8001fd6 <FminusClicked+0x7a>
	CurrentBW = newbw;
 8001fb4:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8001fb6:	2a03      	cmp	r2, #3
 8001fb8:	d80d      	bhi.n	8001fd6 <FminusClicked+0x7a>
 8001fba:	e8df f002 	tbb	[pc, r2]
 8001fbe:	2212      	.short	0x2212
 8001fc0:	0238      	.short	0x0238
		CWindex = 0; // TODO toglimi
 8001fc2:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <FminusClicked+0x11c>)
 8001fc4:	2100      	movs	r1, #0
		bw[CW] = newbw;
 8001fc6:	70e3      	strb	r3, [r4, #3]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001fc8:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800207c <FminusClicked+0x120>
 8001fcc:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002080 <FminusClicked+0x124>
		CWindex = 0; // TODO toglimi
 8001fd0:	8011      	strh	r1, [r2, #0]
		SetMask(500.0f, 800.0f); //CWPITCH is 650
 8001fd2:	f001 fa8d 	bl	80034f0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001fd6:	4925      	ldr	r1, [pc, #148]	; (800206c <FminusClicked+0x110>)
 8001fd8:	482a      	ldr	r0, [pc, #168]	; (8002084 <FminusClicked+0x128>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8001fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001fde:	f010 bde7 	b.w	8012bb0 <strcpy>
		AMindex = 0; // TODO toglimi
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <FminusClicked+0x12c>)
		bw[AM] = newbw;
 8001fe6:	7023      	strb	r3, [r4, #0]
		SetMask(-3000.0f, 3000.0f);
 8001fe8:	eddf 0a28 	vldr	s1, [pc, #160]	; 800208c <FminusClicked+0x130>
		AMindex = 0; // TODO toglimi
 8001fec:	8011      	strh	r1, [r2, #0]
		SetMask(-3000.0f, 3000.0f);
 8001fee:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002090 <FminusClicked+0x134>
 8001ff2:	f001 fa7d 	bl	80034f0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8001ff6:	491d      	ldr	r1, [pc, #116]	; (800206c <FminusClicked+0x110>)
 8001ff8:	4822      	ldr	r0, [pc, #136]	; (8002084 <FminusClicked+0x128>)
}
 8001ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001ffe:	f010 bdd7 	b.w	8012bb0 <strcpy>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8002002:	1e18      	subs	r0, r3, #0
		bw[LSB] = newbw;
 8002004:	7063      	strb	r3, [r4, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002006:	4920      	ldr	r1, [pc, #128]	; (8002088 <FminusClicked+0x12c>)
		LSBindex = 0; // TODO toglimi
 8002008:	f04f 0300 	mov.w	r3, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 800200c:	bf18      	it	ne
 800200e:	2001      	movne	r0, #1
		LSBindex = 0; // TODO toglimi
 8002010:	4a20      	ldr	r2, [pc, #128]	; (8002094 <FminusClicked+0x138>)
		SetMask(300.0f, 2500.0f);
 8002012:	eddf 0a21 	vldr	s1, [pc, #132]	; 8002098 <FminusClicked+0x13c>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002016:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8002018:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800209c <FminusClicked+0x140>
		LSBindex = 0; // TODO toglimi
 800201c:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 800201e:	f001 fa67 	bl	80034f0 <SetMask>
	strcpy(msg, psets[Idx].name);
 8002022:	4912      	ldr	r1, [pc, #72]	; (800206c <FminusClicked+0x110>)
 8002024:	4817      	ldr	r0, [pc, #92]	; (8002084 <FminusClicked+0x128>)
}
 8002026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800202a:	f010 bdc1 	b.w	8012bb0 <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 800202e:	1e18      	subs	r0, r3, #0
		bw[USB] = newbw;
 8002030:	70a3      	strb	r3, [r4, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002032:	4915      	ldr	r1, [pc, #84]	; (8002088 <FminusClicked+0x12c>)
		USBindex = 0; // TODO toglimi
 8002034:	f04f 0300 	mov.w	r3, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8002038:	bf18      	it	ne
 800203a:	2001      	movne	r0, #1
		USBindex = 0; // TODO toglimi
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <FminusClicked+0x144>)
		SetMask(300.0f, 2500.0f);
 800203e:	eddf 0a16 	vldr	s1, [pc, #88]	; 8002098 <FminusClicked+0x13c>
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002042:	8008      	strh	r0, [r1, #0]
		SetMask(300.0f, 2500.0f);
 8002044:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800209c <FminusClicked+0x140>
		USBindex = 0; // TODO toglimi
 8002048:	8013      	strh	r3, [r2, #0]
		SetMask(300.0f, 2500.0f);
 800204a:	f001 fa51 	bl	80034f0 <SetMask>
	strcpy(msg, psets[Idx].name);
 800204e:	4907      	ldr	r1, [pc, #28]	; (800206c <FminusClicked+0x110>)
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <FminusClicked+0x128>)
}
 8002052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8002056:	f010 bdab 	b.w	8012bb0 <strcpy>
 800205a:	bf00      	nop
 800205c:	24005110 	.word	0x24005110
 8002060:	24006128 	.word	0x24006128
 8002064:	24000eec 	.word	0x24000eec
 8002068:	45fa0000 	.word	0x45fa0000
 800206c:	2400ad18 	.word	0x2400ad18
 8002070:	24000eeb 	.word	0x24000eeb
 8002074:	24007af0 	.word	0x24007af0
 8002078:	24000ee8 	.word	0x24000ee8
 800207c:	44480000 	.word	0x44480000
 8002080:	43fa0000 	.word	0x43fa0000
 8002084:	2400acec 	.word	0x2400acec
 8002088:	240006d0 	.word	0x240006d0
 800208c:	453b8000 	.word	0x453b8000
 8002090:	c53b8000 	.word	0xc53b8000
 8002094:	2400612c 	.word	0x2400612c
 8002098:	451c4000 	.word	0x451c4000
 800209c:	43960000 	.word	0x43960000
 80020a0:	240061bc 	.word	0x240061bc

080020a4 <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop

080020a8 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80020a8:	b510      	push	{r4, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 80020aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ae:	4950      	ldr	r1, [pc, #320]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x148>)
 80020b0:	4850      	ldr	r0, [pc, #320]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x14c>)
 80020b2:	f000 fef3 	bl	8002e9c <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 80020b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ba:	494f      	ldr	r1, [pc, #316]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x150>)
 80020bc:	484f      	ldr	r0, [pc, #316]	; (80021fc <HAL_GPIO_EXTI_Callback+0x154>)
 80020be:	f000 feed 	bl	8002e9c <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 80020c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020c6:	4a4e      	ldr	r2, [pc, #312]	; (8002200 <HAL_GPIO_EXTI_Callback+0x158>)
 80020c8:	494a      	ldr	r1, [pc, #296]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x14c>)
 80020ca:	484e      	ldr	r0, [pc, #312]	; (8002204 <HAL_GPIO_EXTI_Callback+0x15c>)
 80020cc:	f7ff f9aa 	bl	8001424 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 80020d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020d4:	4a4c      	ldr	r2, [pc, #304]	; (8002208 <HAL_GPIO_EXTI_Callback+0x160>)
 80020d6:	4949      	ldr	r1, [pc, #292]	; (80021fc <HAL_GPIO_EXTI_Callback+0x154>)
 80020d8:	484c      	ldr	r0, [pc, #304]	; (800220c <HAL_GPIO_EXTI_Callback+0x164>)
 80020da:	f7ff f9a3 	bl	8001424 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80020de:	494c      	ldr	r1, [pc, #304]	; (8002210 <HAL_GPIO_EXTI_Callback+0x168>)
 80020e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
	 */

	// TODO: check why with the original code above LSB and USB are swapped

	//if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80020e4:	4c4b      	ldr	r4, [pc, #300]	; (8002214 <HAL_GPIO_EXTI_Callback+0x16c>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80020e6:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 80020ea:	f000 fed7 	bl	8002e9c <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 80020ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f2:	4a47      	ldr	r2, [pc, #284]	; (8002210 <HAL_GPIO_EXTI_Callback+0x168>)
 80020f4:	4944      	ldr	r1, [pc, #272]	; (8002208 <HAL_GPIO_EXTI_Callback+0x160>)
 80020f6:	4842      	ldr	r0, [pc, #264]	; (8002200 <HAL_GPIO_EXTI_Callback+0x158>)
 80020f8:	f000 fdbc 	bl	8002c74 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 80020fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002100:	4945      	ldr	r1, [pc, #276]	; (8002218 <HAL_GPIO_EXTI_Callback+0x170>)
 8002102:	4846      	ldr	r0, [pc, #280]	; (800221c <HAL_GPIO_EXTI_Callback+0x174>)
 8002104:	f000 feca 	bl	8002e9c <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8002108:	2301      	movs	r3, #1
 800210a:	2200      	movs	r2, #0
 800210c:	4943      	ldr	r1, [pc, #268]	; (800221c <HAL_GPIO_EXTI_Callback+0x174>)
 800210e:	4844      	ldr	r0, [pc, #272]	; (8002220 <HAL_GPIO_EXTI_Callback+0x178>)
 8002110:	f7fe fe38 	bl	8000d84 <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8002114:	7823      	ldrb	r3, [r4, #0]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d064      	beq.n	80021e4 <HAL_GPIO_EXTI_Callback+0x13c>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 800211a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211e:	4a41      	ldr	r2, [pc, #260]	; (8002224 <HAL_GPIO_EXTI_Callback+0x17c>)
 8002120:	4941      	ldr	r1, [pc, #260]	; (8002228 <HAL_GPIO_EXTI_Callback+0x180>)
 8002122:	483e      	ldr	r0, [pc, #248]	; (800221c <HAL_GPIO_EXTI_Callback+0x174>)
 8002124:	f7ff f95e 	bl	80013e4 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8002128:	2301      	movs	r3, #1
 800212a:	493e      	ldr	r1, [pc, #248]	; (8002224 <HAL_GPIO_EXTI_Callback+0x17c>)
 800212c:	461a      	mov	r2, r3
 800212e:	483c      	ldr	r0, [pc, #240]	; (8002220 <HAL_GPIO_EXTI_Callback+0x178>)
 8002130:	f7fe fe28 	bl	8000d84 <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 8002134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002138:	493c      	ldr	r1, [pc, #240]	; (800222c <HAL_GPIO_EXTI_Callback+0x184>)
 800213a:	483d      	ldr	r0, [pc, #244]	; (8002230 <HAL_GPIO_EXTI_Callback+0x188>)
 800213c:	f000 feae 	bl	8002e9c <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8002140:	7823      	ldrb	r3, [r4, #0]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d82f      	bhi.n	80021a6 <HAL_GPIO_EXTI_Callback+0xfe>
 8002146:	2b00      	cmp	r3, #0
 8002148:	d147      	bne.n	80021da <HAL_GPIO_EXTI_Callback+0x132>
	{	
	case AM :
#ifdef RECEIVE_AM
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 800214a:	493a      	ldr	r1, [pc, #232]	; (8002234 <HAL_GPIO_EXTI_Callback+0x18c>)
 800214c:	4838      	ldr	r0, [pc, #224]	; (8002230 <HAL_GPIO_EXTI_Callback+0x188>)
 800214e:	f000 fff5 	bl	800313c <SDR_demodAM_AGC>
#endif

#ifdef CW_TX_SIDETONE
	// CW tone while keying
	//TODO: make it sine and with attack/decay
	if (TXCarrierEnabled)
 8002152:	4b39      	ldr	r3, [pc, #228]	; (8002238 <HAL_GPIO_EXTI_Callback+0x190>)
 8002154:	7819      	ldrb	r1, [r3, #0]
 8002156:	2900      	cmp	r1, #0
 8002158:	d035      	beq.n	80021c6 <HAL_GPIO_EXTI_Callback+0x11e>
		for (int i=0; i<BSIZE; i++)
		{
			if (i % 64 > 31)
				fAudio[i] = RXVolume * SIDETONE_VOLUME; //Volume
			else
				fAudio[i] = -RXVolume * SIDETONE_VOLUME;
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <HAL_GPIO_EXTI_Callback+0x194>)
 800215c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002240 <HAL_GPIO_EXTI_Callback+0x198>
 8002160:	edd3 7a00 	vldr	s15, [r3]
		for (int i=0; i<BSIZE; i++)
 8002164:	2300      	movs	r3, #0
				fAudio[i] = RXVolume * SIDETONE_VOLUME; //Volume
 8002166:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002244 <HAL_GPIO_EXTI_Callback+0x19c>
				fAudio[i] = -RXVolume * SIDETONE_VOLUME;
 800216a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800216e:	4a31      	ldr	r2, [pc, #196]	; (8002234 <HAL_GPIO_EXTI_Callback+0x18c>)
				fAudio[i] = RXVolume * SIDETONE_VOLUME; //Volume
 8002170:	ee67 7aa6 	vmul.f32	s15, s15, s13
			if (i % 64 > 31)
 8002174:	f013 0f20 	tst.w	r3, #32
		for (int i=0; i<BSIZE; i++)
 8002178:	f103 0301 	add.w	r3, r3, #1
			if (i % 64 > 31)
 800217c:	d10d      	bne.n	800219a <HAL_GPIO_EXTI_Callback+0xf2>
		for (int i=0; i<BSIZE; i++)
 800217e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002182:	eca2 7a01 	vstmia	r2!, {s14}
 8002186:	d1f5      	bne.n	8002174 <HAL_GPIO_EXTI_Callback+0xcc>
#endif

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800218a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800218e:	4829      	ldr	r0, [pc, #164]	; (8002234 <HAL_GPIO_EXTI_Callback+0x18c>)
 8002190:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8002192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8002196:	f000 be0b 	b.w	8002db0 <SDR_float_to_DAC_audio>
		for (int i=0; i<BSIZE; i++)
 800219a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219e:	ece2 7a01 	vstmia	r2!, {s15}
 80021a2:	d1e7      	bne.n	8002174 <HAL_GPIO_EXTI_Callback+0xcc>
 80021a4:	e7f0      	b.n	8002188 <HAL_GPIO_EXTI_Callback+0xe0>
	switch(CurrentMode)
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d1d3      	bne.n	8002152 <HAL_GPIO_EXTI_Callback+0xaa>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 80021aa:	4922      	ldr	r1, [pc, #136]	; (8002234 <HAL_GPIO_EXTI_Callback+0x18c>)
 80021ac:	4820      	ldr	r0, [pc, #128]	; (8002230 <HAL_GPIO_EXTI_Callback+0x188>)
 80021ae:	f001 f855 	bl	800325c <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 80021b2:	4b26      	ldr	r3, [pc, #152]	; (800224c <HAL_GPIO_EXTI_Callback+0x1a4>)
 80021b4:	78db      	ldrb	r3, [r3, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1cb      	bne.n	8002152 <HAL_GPIO_EXTI_Callback+0xaa>
			SDR_CWPeak(fAudio, BSIZE);
 80021ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021be:	481d      	ldr	r0, [pc, #116]	; (8002234 <HAL_GPIO_EXTI_Callback+0x18c>)
 80021c0:	f000 ff32 	bl	8003028 <SDR_CWPeak>
 80021c4:	e7c5      	b.n	8002152 <HAL_GPIO_EXTI_Callback+0xaa>
		if (TransmissionEnabled)
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0dc      	beq.n	8002188 <HAL_GPIO_EXTI_Callback+0xe0>
				fAudio[i] = 0.;
 80021ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d2:	4818      	ldr	r0, [pc, #96]	; (8002234 <HAL_GPIO_EXTI_Callback+0x18c>)
 80021d4:	f00f feea 	bl	8011fac <memset>
 80021d8:	e7d6      	b.n	8002188 <HAL_GPIO_EXTI_Callback+0xe0>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 80021da:	4916      	ldr	r1, [pc, #88]	; (8002234 <HAL_GPIO_EXTI_Callback+0x18c>)
 80021dc:	4814      	ldr	r0, [pc, #80]	; (8002230 <HAL_GPIO_EXTI_Callback+0x188>)
 80021de:	f001 f83d 	bl	800325c <SDR_demodSSB_CW_AGC>
 80021e2:	e7b6      	b.n	8002152 <HAL_GPIO_EXTI_Callback+0xaa>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80021e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <HAL_GPIO_EXTI_Callback+0x174>)
 80021ea:	f000 fe71 	bl	8002ed0 <SDR_mirror_LSB>
 80021ee:	e794      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x72>
 80021f0:	2000f800 	.word	0x2000f800
 80021f4:	2000b800 	.word	0x2000b800
 80021f8:	2000d800 	.word	0x2000d800
 80021fc:	20009800 	.word	0x20009800
 8002200:	20009000 	.word	0x20009000
 8002204:	24006164 	.word	0x24006164
 8002208:	20008800 	.word	0x20008800
 800220c:	24006158 	.word	0x24006158
 8002210:	24009300 	.word	0x24009300
 8002214:	24000eec 	.word	0x24000eec
 8002218:	24008300 	.word	0x24008300
 800221c:	20004800 	.word	0x20004800
 8002220:	08018ee0 	.word	0x08018ee0
 8002224:	20002800 	.word	0x20002800
 8002228:	20006800 	.word	0x20006800
 800222c:	20003800 	.word	0x20003800
 8002230:	2400b480 	.word	0x2400b480
 8002234:	24007b00 	.word	0x24007b00
 8002238:	240061a4 	.word	0x240061a4
 800223c:	24006148 	.word	0x24006148
 8002240:	be4ccccd 	.word	0xbe4ccccd
 8002244:	3e4ccccd 	.word	0x3e4ccccd
 8002248:	240072c0 	.word	0x240072c0
 800224c:	24007af0 	.word	0x24007af0
 8002250:	240061b0 	.word	0x240061b0

08002254 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8002254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It needs a delay between fract div disable and parameter setting.
	 * Reference manual says otherwise.
	 * So we disable at the top of the ISR and set the parameter near the bottom.
	 */
	if (TransmittingWSPR)
 8002258:	4d8e      	ldr	r5, [pc, #568]	; (8002494 <ADC_Stream0_Handler+0x240>)
{
 800225a:	ed2d 8b10 	vpush	{d8-d15}
	if (TransmittingWSPR)
 800225e:	782b      	ldrb	r3, [r5, #0]
{
 8002260:	b095      	sub	sp, #84	; 0x54
	if (TransmittingWSPR)
 8002262:	b123      	cbz	r3, 800226e <ADC_Stream0_Handler+0x1a>
	{
		__HAL_RCC_PLL2FRACN_DISABLE();
 8002264:	4a8c      	ldr	r2, [pc, #560]	; (8002498 <ADC_Stream0_Handler+0x244>)
 8002266:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002268:	f023 0310 	bic.w	r3, r3, #16
 800226c:	62d3      	str	r3, [r2, #44]	; 0x2c

	// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
	else
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800226e:	4f8b      	ldr	r7, [pc, #556]	; (800249c <ADC_Stream0_Handler+0x248>)
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8002270:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <ADC_Stream0_Handler+0x24c>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002272:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 8002276:	781b      	ldrb	r3, [r3, #0]
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002278:	2800      	cmp	r0, #0
 800227a:	bf08      	it	eq
 800227c:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 800227e:	2b03      	cmp	r3, #3
 8002280:	f000 8429 	beq.w	8002ad6 <ADC_Stream0_Handler+0x882>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 8002284:	4b87      	ldr	r3, [pc, #540]	; (80024a4 <ADC_Stream0_Handler+0x250>)
 8002286:	ed93 0a00 	vldr	s0, [r3]
 800228a:	f000 fc35 	bl	8002af8 <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 800228e:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 8002292:	1eb8      	subs	r0, r7, #2
	sum = 0; k = BSIZE;
 8002294:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80024a8 <ADC_Stream0_Handler+0x254>
	{
		sum += pR[k-1];
 8002298:	8814      	ldrh	r4, [r2, #0]
	while(k)
 800229a:	3a08      	subs	r2, #8
		sum += pR[k-2];
 800229c:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 800229e:	b2a4      	uxth	r4, r4
		sum += pR[k-3];
 80022a0:	8896      	ldrh	r6, [r2, #4]
		sum += pR[k-2];
 80022a2:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 80022a4:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 80022a6:	ee07 4a90 	vmov	s15, r4
		sum += pR[k-3];
 80022aa:	b2b6      	uxth	r6, r6
		sum += pR[k-2];
 80022ac:	ee07 3a10 	vmov	s14, r3
		sum += pR[k-4];
 80022b0:	b289      	uxth	r1, r1
		sum += pR[k-1];
 80022b2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-3];
 80022b6:	ee07 6a90 	vmov	s15, r6
		sum += pR[k-2];
 80022ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 80022be:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 80022c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 80022c6:	4290      	cmp	r0, r2
		sum += pR[k-4];
 80022c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80022cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80022d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022d8:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80022dc:	d1dc      	bne.n	8002298 <ADC_Stream0_Handler+0x44>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80022de:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 80022e2:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80022e4:	eddf 7a71 	vldr	s15, [pc, #452]	; 80024ac <ADC_Stream0_Handler+0x258>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80022e8:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4c70      	ldr	r4, [pc, #448]	; (80024b0 <ADC_Stream0_Handler+0x25c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80022ee:	ee20 0a27 	vmul.f32	s0, s0, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80022f2:	4970      	ldr	r1, [pc, #448]	; (80024b4 <ADC_Stream0_Handler+0x260>)
	TestSampledValue=pR[BSIZE/2];
 80022f4:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80022f8:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <ADC_Stream0_Handler+0x264>)
 80022fa:	8022      	strh	r2, [r4, #0]
	TestSampledValue=pR[BSIZE/2];
 80022fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8002300:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 8002304:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <ADC_Stream0_Handler+0x268>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8002306:	4a6e      	ldr	r2, [pc, #440]	; (80024c0 <ADC_Stream0_Handler+0x26c>)
	TestSampledValue=pR[BSIZE/2];
 8002308:	edc3 7a00 	vstr	s15, [r3]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800230c:	f000 fcde 	bl	8002ccc <SDR_downconvert_f32>


	ptDataR = ADC_Rdata;  ptDataI = ADC_Idata;


	if (TransmittingWSPR)
 8002310:	782b      	ldrb	r3, [r5, #0]
 8002312:	b30b      	cbz	r3, 8002358 <ADC_Stream0_Handler+0x104>
	{
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8002314:	4d6b      	ldr	r5, [pc, #428]	; (80024c4 <ADC_Stream0_Handler+0x270>)
 8002316:	496c      	ldr	r1, [pc, #432]	; (80024c8 <ADC_Stream0_Handler+0x274>)
 8002318:	f9b5 2000 	ldrsh.w	r2, [r5]
 800231c:	4b6b      	ldr	r3, [pc, #428]	; (80024cc <ADC_Stream0_Handler+0x278>)
 800231e:	7809      	ldrb	r1, [r1, #0]
 8002320:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002324:	1c53      	adds	r3, r2, #1
 8002326:	4282      	cmp	r2, r0
 8002328:	b21b      	sxth	r3, r3
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 800232a:	485b      	ldr	r0, [pc, #364]	; (8002498 <ADC_Stream0_Handler+0x244>)
 800232c:	4a68      	ldr	r2, [pc, #416]	; (80024d0 <ADC_Stream0_Handler+0x27c>)
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 800232e:	802b      	strh	r3, [r5, #0]
 8002330:	f2c0 8352 	blt.w	80029d8 <ADC_Stream0_Handler+0x784>
		}
		else
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002334:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002338:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
		}
		if (IntCounter == 8)
 800233a:	2b08      	cmp	r3, #8
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 800233c:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <ADC_Stream0_Handler+0x280>)
 800233e:	ea02 0206 	and.w	r2, r2, r6
 8002342:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002346:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (IntCounter == 8)
 8002348:	d101      	bne.n	800234e <ADC_Stream0_Handler+0xfa>
		{
			IntCounter = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	802b      	strh	r3, [r5, #0]
		}
		__HAL_RCC_PLL2FRACN_ENABLE();
 800234e:	4a52      	ldr	r2, [pc, #328]	; (8002498 <ADC_Stream0_Handler+0x244>)
 8002350:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002352:	f043 0310 	orr.w	r3, r3, #16
 8002356:	62d3      	str	r3, [r2, #44]	; 0x2c
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 8002358:	4a5f      	ldr	r2, [pc, #380]	; (80024d8 <ADC_Stream0_Handler+0x284>)
 800235a:	23ff      	movs	r3, #255	; 0xff
 800235c:	495f      	ldr	r1, [pc, #380]	; (80024dc <ADC_Stream0_Handler+0x288>)
 800235e:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8002362:	ed92 2a00 	vldr	s4, [r2]
 8002366:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 800236a:	4a5d      	ldr	r2, [pc, #372]	; (80024e0 <ADC_Stream0_Handler+0x28c>)
 800236c:	edd1 3a00 	vldr	s7, [r1]
 8002370:	edd2 1a00 	vldr	s3, [r2]
 8002374:	4a5b      	ldr	r2, [pc, #364]	; (80024e4 <ADC_Stream0_Handler+0x290>)
 8002376:	495c      	ldr	r1, [pc, #368]	; (80024e8 <ADC_Stream0_Handler+0x294>)
 8002378:	ed92 7a00 	vldr	s14, [r2]
 800237c:	4a5b      	ldr	r2, [pc, #364]	; (80024ec <ADC_Stream0_Handler+0x298>)
 800237e:	ed91 9a00 	vldr	s18, [r1]
 8002382:	eeb0 6a47 	vmov.f32	s12, s14
 8002386:	edd2 2a00 	vldr	s5, [r2]
 800238a:	4959      	ldr	r1, [pc, #356]	; (80024f0 <ADC_Stream0_Handler+0x29c>)
 800238c:	4a59      	ldr	r2, [pc, #356]	; (80024f4 <ADC_Stream0_Handler+0x2a0>)
 800238e:	edd1 ea00 	vldr	s29, [r1]
 8002392:	edd2 8a00 	vldr	s17, [r2]
 8002396:	4958      	ldr	r1, [pc, #352]	; (80024f8 <ADC_Stream0_Handler+0x2a4>)
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <ADC_Stream0_Handler+0x2a8>)
 800239a:	edd1 6a00 	vldr	s13, [r1]
 800239e:	ed92 5a00 	vldr	s10, [r2]
 80023a2:	4957      	ldr	r1, [pc, #348]	; (8002500 <ADC_Stream0_Handler+0x2ac>)
 80023a4:	4a57      	ldr	r2, [pc, #348]	; (8002504 <ADC_Stream0_Handler+0x2b0>)
 80023a6:	edd1 ca00 	vldr	s25, [r1]
 80023aa:	edd2 fa00 	vldr	s31, [r2]
 80023ae:	4956      	ldr	r1, [pc, #344]	; (8002508 <ADC_Stream0_Handler+0x2b4>)
 80023b0:	4a56      	ldr	r2, [pc, #344]	; (800250c <ADC_Stream0_Handler+0x2b8>)
 80023b2:	ed91 da00 	vldr	s26, [r1]
 80023b6:	ed92 8a00 	vldr	s16, [r2]
 80023ba:	4955      	ldr	r1, [pc, #340]	; (8002510 <ADC_Stream0_Handler+0x2bc>)
 80023bc:	4a55      	ldr	r2, [pc, #340]	; (8002514 <ADC_Stream0_Handler+0x2c0>)
 80023be:	edcd 6a02 	vstr	s13, [sp, #8]
 80023c2:	edd2 5a00 	vldr	s11, [r2]
 80023c6:	edd1 6a00 	vldr	s13, [r1]
 80023ca:	4a53      	ldr	r2, [pc, #332]	; (8002518 <ADC_Stream0_Handler+0x2c4>)
 80023cc:	4953      	ldr	r1, [pc, #332]	; (800251c <ADC_Stream0_Handler+0x2c8>)
 80023ce:	ed92 fa00 	vldr	s30, [r2]
 80023d2:	ed91 ca00 	vldr	s24, [r1]
 80023d6:	4a52      	ldr	r2, [pc, #328]	; (8002520 <ADC_Stream0_Handler+0x2cc>)
 80023d8:	4952      	ldr	r1, [pc, #328]	; (8002524 <ADC_Stream0_Handler+0x2d0>)
 80023da:	edd2 ba00 	vldr	s23, [r2]
 80023de:	edcd 6a01 	vstr	s13, [sp, #4]
 80023e2:	4a51      	ldr	r2, [pc, #324]	; (8002528 <ADC_Stream0_Handler+0x2d4>)
 80023e4:	edd1 6a00 	vldr	s13, [r1]
 80023e8:	4950      	ldr	r1, [pc, #320]	; (800252c <ADC_Stream0_Handler+0x2d8>)
 80023ea:	ed92 3a00 	vldr	s6, [r2]
 80023ee:	edcd 6a03 	vstr	s13, [sp, #12]
 80023f2:	4a4f      	ldr	r2, [pc, #316]	; (8002530 <ADC_Stream0_Handler+0x2dc>)
 80023f4:	edd1 6a00 	vldr	s13, [r1]
 80023f8:	494e      	ldr	r1, [pc, #312]	; (8002534 <ADC_Stream0_Handler+0x2e0>)
 80023fa:	edd2 9a00 	vldr	s19, [r2]
 80023fe:	edcd 6a08 	vstr	s13, [sp, #32]
 8002402:	4a4d      	ldr	r2, [pc, #308]	; (8002538 <ADC_Stream0_Handler+0x2e4>)
 8002404:	edd1 6a00 	vldr	s13, [r1]
 8002408:	f8df a158 	ldr.w	sl, [pc, #344]	; 8002564 <ADC_Stream0_Handler+0x310>
 800240c:	494b      	ldr	r1, [pc, #300]	; (800253c <ADC_Stream0_Handler+0x2e8>)
 800240e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8002568 <ADC_Stream0_Handler+0x314>
 8002412:	ed92 ba00 	vldr	s22, [r2]
 8002416:	ed9a 1a00 	vldr	s2, [sl]
 800241a:	edd9 7a00 	vldr	s15, [r9]
 800241e:	8023      	strh	r3, [r4, #0]
 8002420:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 8002424:	edd1 6a00 	vldr	s13, [r1]
 8002428:	4945      	ldr	r1, [pc, #276]	; (8002540 <ADC_Stream0_Handler+0x2ec>)
 800242a:	edcd 6a00 	vstr	s13, [sp]
 800242e:	edd1 6a00 	vldr	s13, [r1]
 8002432:	4944      	ldr	r1, [pc, #272]	; (8002544 <ADC_Stream0_Handler+0x2f0>)
 8002434:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 8002438:	edd1 6a00 	vldr	s13, [r1]
 800243c:	4942      	ldr	r1, [pc, #264]	; (8002548 <ADC_Stream0_Handler+0x2f4>)
 800243e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800256c <ADC_Stream0_Handler+0x318>
 8002442:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8002446:	edd1 6a00 	vldr	s13, [r1]
 800244a:	4f40      	ldr	r7, [pc, #256]	; (800254c <ADC_Stream0_Handler+0x2f8>)
 800244c:	edcd 6a06 	vstr	s13, [sp, #24]
 8002450:	edd8 6a00 	vldr	s13, [r8]
 8002454:	4e3e      	ldr	r6, [pc, #248]	; (8002550 <ADC_Stream0_Handler+0x2fc>)
 8002456:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 800245a:	edd7 6a00 	vldr	s13, [r7]
 800245e:	493d      	ldr	r1, [pc, #244]	; (8002554 <ADC_Stream0_Handler+0x300>)
 8002460:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8002464:	edd6 6a00 	vldr	s13, [r6]
 8002468:	f8df b104 	ldr.w	fp, [pc, #260]	; 8002570 <ADC_Stream0_Handler+0x31c>
 800246c:	edcd 6a07 	vstr	s13, [sp, #28]
 8002470:	edd1 6a00 	vldr	s13, [r1]
 8002474:	4938      	ldr	r1, [pc, #224]	; (8002558 <ADC_Stream0_Handler+0x304>)
 8002476:	4a39      	ldr	r2, [pc, #228]	; (800255c <ADC_Stream0_Handler+0x308>)
 8002478:	f9bb 0000 	ldrsh.w	r0, [fp]
 800247c:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8002480:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 8002484:	edd1 6a00 	vldr	s13, [r1]
 8002488:	4686      	mov	lr, r0
 800248a:	4935      	ldr	r1, [pc, #212]	; (8002560 <ADC_Stream0_Handler+0x30c>)
 800248c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8002490:	e173      	b.n	800277a <ADC_Stream0_Handler+0x526>
 8002492:	bf00      	nop
 8002494:	240061b1 	.word	0x240061b1
 8002498:	58024400 	.word	0x58024400
 800249c:	240076e0 	.word	0x240076e0
 80024a0:	24000eec 	.word	0x24000eec
 80024a4:	24006128 	.word	0x24006128
 80024a8:	00000000 	.word	0x00000000
 80024ac:	3b000000 	.word	0x3b000000
 80024b0:	240005f0 	.word	0x240005f0
 80024b4:	20001800 	.word	0x20001800
 80024b8:	2400ace8 	.word	0x2400ace8
 80024bc:	240061ac 	.word	0x240061ac
 80024c0:	20001000 	.word	0x20001000
 80024c4:	2400055c 	.word	0x2400055c
 80024c8:	240072c6 	.word	0x240072c6
 80024cc:	24005108 	.word	0x24005108
 80024d0:	240050fc 	.word	0x240050fc
 80024d4:	ffff0007 	.word	0xffff0007
 80024d8:	24000564 	.word	0x24000564
 80024dc:	240005b4 	.word	0x240005b4
 80024e0:	24000590 	.word	0x24000590
 80024e4:	24000594 	.word	0x24000594
 80024e8:	24000570 	.word	0x24000570
 80024ec:	24000560 	.word	0x24000560
 80024f0:	240005c8 	.word	0x240005c8
 80024f4:	240005a8 	.word	0x240005a8
 80024f8:	240005cc 	.word	0x240005cc
 80024fc:	240005ac 	.word	0x240005ac
 8002500:	2400057c 	.word	0x2400057c
 8002504:	2400056c 	.word	0x2400056c
 8002508:	240005c0 	.word	0x240005c0
 800250c:	240005a0 	.word	0x240005a0
 8002510:	240005c4 	.word	0x240005c4
 8002514:	240005a4 	.word	0x240005a4
 8002518:	24000568 	.word	0x24000568
 800251c:	24000578 	.word	0x24000578
 8002520:	240005b8 	.word	0x240005b8
 8002524:	240005d8 	.word	0x240005d8
 8002528:	240005bc 	.word	0x240005bc
 800252c:	240005dc 	.word	0x240005dc
 8002530:	24000574 	.word	0x24000574
 8002534:	24000584 	.word	0x24000584
 8002538:	240005b0 	.word	0x240005b0
 800253c:	240005d0 	.word	0x240005d0
 8002540:	240005d4 	.word	0x240005d4
 8002544:	24000580 	.word	0x24000580
 8002548:	240005e8 	.word	0x240005e8
 800254c:	2400058c 	.word	0x2400058c
 8002550:	240005e0 	.word	0x240005e0
 8002554:	240005e4 	.word	0x240005e4
 8002558:	24000588 	.word	0x24000588
 800255c:	20001808 	.word	0x20001808
 8002560:	20001008 	.word	0x20001008
 8002564:	24000598 	.word	0x24000598
 8002568:	2400059c 	.word	0x2400059c
 800256c:	240005ec 	.word	0x240005ec
 8002570:	2400055e 	.word	0x2400055e
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8002574:	eea8 5a84 	vfma.f32	s10, s17, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8002578:	0798      	lsls	r0, r3, #30
 800257a:	eee8 5a04 	vfma.f32	s11, s16, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800257e:	ee7f faaa 	vadd.f32	s31, s31, s21
 8002582:	ee3f fa0a 	vadd.f32	s30, s30, s20
 8002586:	eeaf 5aa4 	vfma.f32	s10, s31, s9
 800258a:	eeef 5a24 	vfma.f32	s11, s30, s9
 800258e:	ee75 6a27 	vadd.f32	s13, s10, s15
 8002592:	ee35 6a87 	vadd.f32	s12, s11, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8002596:	f100 8118 	bmi.w	80027ca <ADC_Stream0_Handler+0x576>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 800259a:	eeab 3a84 	vfma.f32	s6, s23, s8

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 800259e:	075d      	lsls	r5, r3, #29
 80025a0:	eeeb 3a04 	vfma.f32	s7, s22, s8
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80025a4:	ee79 9a8e 	vadd.f32	s19, s19, s28
 80025a8:	ee39 9a2d 	vadd.f32	s18, s18, s27
 80025ac:	eea9 3aa4 	vfma.f32	s6, s19, s9
 80025b0:	eee9 3a24 	vfma.f32	s7, s18, s9
 80025b4:	ee33 9a26 	vadd.f32	s18, s6, s13
 80025b8:	ee73 9a86 	vadd.f32	s19, s7, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80025bc:	f100 8116 	bmi.w	80027ec <ADC_Stream0_Handler+0x598>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80025c0:	eddd 5a02 	vldr	s11, [sp, #8]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80025c4:	0718      	lsls	r0, r3, #28
 80025c6:	ed9d 5a01 	vldr	s10, [sp, #4]
 80025ca:	eeee 5a84 	vfma.f32	s11, s29, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80025ce:	eddd 3a05 	vldr	s7, [sp, #20]
 80025d2:	eead 5a04 	vfma.f32	s10, s26, s8
 80025d6:	ed9d 3a04 	vldr	s6, [sp, #16]
 80025da:	ee7c caa3 	vadd.f32	s25, s25, s7
 80025de:	ee3c ca03 	vadd.f32	s24, s24, s6
 80025e2:	eeec 5aa4 	vfma.f32	s11, s25, s9
 80025e6:	eeac 5a24 	vfma.f32	s10, s24, s9
 80025ea:	ee39 ca25 	vadd.f32	s24, s18, s11
 80025ee:	ee75 ca29 	vadd.f32	s25, s10, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80025f2:	f100 81a5 	bmi.w	8002940 <ADC_Stream0_Handler+0x6ec>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80025f6:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80025fa:	f013 0010 	ands.w	r0, r3, #16
 80025fe:	ed9d 3a03 	vldr	s6, [sp, #12]
 8002602:	eddd 5a00 	vldr	s11, [sp]
 8002606:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 800260a:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800260e:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
 8002612:	eee5 fa84 	vfma.f32	s31, s11, s8
 8002616:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800261a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800261e:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 8002622:	eea5 faa4 	vfma.f32	s30, s11, s9
 8002626:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800262a:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800262c:	ee75 5a25 	vadd.f32	s11, s10, s11
 8002630:	eee5 faa4 	vfma.f32	s31, s11, s9
 8002634:	ee3c fa0f 	vadd.f32	s30, s24, s30
 8002638:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 800263c:	ee7c faaf 	vadd.f32	s31, s25, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8002640:	f040 819b 	bne.w	800297a <ADC_Stream0_Handler+0x726>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002644:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002648:	ea4f 008e 	mov.w	r0, lr, lsl #2
 800264c:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 8002650:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 8002654:	eee3 5a84 	vfma.f32	s11, s7, s8
 8002658:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800265c:	ed9d fa0d 	vldr	s30, [sp, #52]	; 0x34
 8002660:	eea3 5a84 	vfma.f32	s10, s7, s8
 8002664:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002668:	4ddd      	ldr	r5, [pc, #884]	; (80029e0 <ADC_Stream0_Handler+0x78c>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800266a:	ee73 3a8f 	vadd.f32	s7, s7, s30
 800266e:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002672:	4428      	add	r0, r5
 8002674:	4ddb      	ldr	r5, [pc, #876]	; (80029e4 <ADC_Stream0_Handler+0x790>)
 8002676:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800267a:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 800267e:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8002682:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 8002686:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800268a:	eddf 3ad7 	vldr	s7, [pc, #860]	; 80029e8 <ADC_Stream0_Handler+0x794>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800268e:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002692:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002696:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800269a:	ee25 5a23 	vmul.f32	s10, s10, s7
 800269e:	ed80 5a00 	vstr	s10, [r0]
 80026a2:	f10e 0001 	add.w	r0, lr, #1
 80026a6:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 80026aa:	edce 5a00 	vstr	s11, [lr]
 80026ae:	fa0f fe80 	sxth.w	lr, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80026b2:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 80026b6:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80026ba:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		if(idx < BSIZE*4)
 80026be:	f2c0 81d3 	blt.w	8002a68 <ADC_Stream0_Handler+0x814>
#endif


			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 80026c2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80026c6:	eddd 3a06 	vldr	s7, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80026ca:	eddd 5a00 	vldr	s11, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80026ce:	eeb0 5a68 	vmov.f32	s10, s17
			EXTI->SWIER1 |= GPIO_PIN_14;
 80026d2:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80026d4:	eef0 8a67 	vmov.f32	s17, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80026d8:	ed8d da01 	vstr	s26, [sp, #4]
 80026dc:	eeb0 da69 	vmov.f32	s26, s19
 80026e0:	edcd ea02 	vstr	s29, [sp, #8]
 80026e4:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80026e8:	edcd 3a0c 	vstr	s7, [sp, #48]	; 0x30
			EXTI->SWIER1 |= GPIO_PIN_14;
 80026ec:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80026f0:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80026f4:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80026f8:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80026fc:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002700:	eeb0 3a6b 	vmov.f32	s6, s23
		idx = 0;
 8002704:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002708:	eeb0 ba46 	vmov.f32	s22, s12
		inE6Rold = inER;                           inE6Iold = inEI;
 800270c:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002710:	eef0 ba66 	vmov.f32	s23, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8002714:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002718:	eeb0 8a47 	vmov.f32	s16, s14
		inE5Rold  = inER;                          inE5Iold  = inEI;
 800271c:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002720:	edcd fa07 	vstr	s31, [sp, #28]
 8002724:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002728:	edcd ca00 	vstr	s25, [sp]
 800272c:	ed8d ca03 	vstr	s24, [sp, #12]
			EXTI->SWIER1 |= GPIO_PIN_14;
 8002730:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002732:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8002736:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 800273a:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 800273e:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8002742:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002746:	eeb0 9a6d 	vmov.f32	s18, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 800274a:	ed9d ca04 	vldr	s24, [sp, #16]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 800274e:	eef0 9a4e 	vmov.f32	s19, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 8002752:	eddd ca05 	vldr	s25, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 8002756:	eeb0 fa4a 	vmov.f32	s30, s20
 800275a:	eef0 fa6a 	vmov.f32	s31, s21
	while(k--)
 800275e:	3208      	adds	r2, #8
 8002760:	3b01      	subs	r3, #1
 8002762:	eef0 7a41 	vmov.f32	s15, s2
 8002766:	3108      	adds	r1, #8
 8002768:	4594      	cmp	ip, r2
 800276a:	eeb0 6a61 	vmov.f32	s12, s3
 800276e:	b29b      	uxth	r3, r3
 8002770:	d059      	beq.n	8002826 <ADC_Stream0_Handler+0x5d2>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8002772:	eef0 1a60 	vmov.f32	s3, s1
 8002776:	eeb0 1a40 	vmov.f32	s2, s0
 800277a:	eeb0 7a42 	vmov.f32	s14, s4
 800277e:	ed12 0a01 	vldr	s0, [r2, #-4]
 8002782:	ed12 2a02 	vldr	s4, [r2, #-8]
 8002786:	eef0 6a62 	vmov.f32	s13, s5
 800278a:	ed51 0a01 	vldr	s1, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 800278e:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8002790:	ee72 2a07 	vadd.f32	s5, s4, s14
 8002794:	eeb0 7a40 	vmov.f32	s14, s0
 8002798:	eea1 7a04 	vfma.f32	s14, s2, s8
 800279c:	eea2 7aa4 	vfma.f32	s14, s5, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80027a0:	ed51 2a02 	vldr	s5, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80027a4:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80027a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027ac:	eeb0 7a60 	vmov.f32	s14, s1
 80027b0:	eea1 7a84 	vfma.f32	s14, s3, s8
 80027b4:	eea6 7aa4 	vfma.f32	s14, s13, s9
 80027b8:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 80027bc:	f57f aeda 	bpl.w	8002574 <ADC_Stream0_Handler+0x320>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 80027c0:	eeb0 aa47 	vmov.f32	s20, s14
 80027c4:	eef0 aa67 	vmov.f32	s21, s15
 80027c8:	e7c9      	b.n	800275e <ADC_Stream0_Handler+0x50a>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80027ca:	eef0 5a48 	vmov.f32	s11, s16
 80027ce:	eeb0 5a68 	vmov.f32	s10, s17
 80027d2:	eeb0 8a47 	vmov.f32	s16, s14
 80027d6:	eef0 8a67 	vmov.f32	s17, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 80027da:	eef0 da46 	vmov.f32	s27, s12
 80027de:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 80027e2:	eeb0 fa4a 	vmov.f32	s30, s20
 80027e6:	eef0 fa6a 	vmov.f32	s31, s21
 80027ea:	e7b8      	b.n	800275e <ADC_Stream0_Handler+0x50a>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80027ec:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 80027f0:	edcd 9a04 	vstr	s19, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80027f4:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 80027f8:	ed8d 9a05 	vstr	s18, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80027fc:	eef0 5a48 	vmov.f32	s11, s16
 8002800:	eeb0 5a68 	vmov.f32	s10, s17
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002804:	eeb0 ba46 	vmov.f32	s22, s12
 8002808:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800280c:	eeb0 8a47 	vmov.f32	s16, s14
 8002810:	eef0 8a67 	vmov.f32	s17, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002814:	eeb0 9a6d 	vmov.f32	s18, s27
 8002818:	eef0 9a4e 	vmov.f32	s19, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 800281c:	eeb0 fa4a 	vmov.f32	s30, s20
 8002820:	eef0 fa6a 	vmov.f32	s31, s21
 8002824:	e79b      	b.n	800275e <ADC_Stream0_Handler+0x50a>
 8002826:	4b71      	ldr	r3, [pc, #452]	; (80029ec <ADC_Stream0_Handler+0x798>)
 8002828:	eddd 7a02 	vldr	s15, [sp, #8]
 800282c:	ed83 2a00 	vstr	s4, [r3]
 8002830:	4b6f      	ldr	r3, [pc, #444]	; (80029f0 <ADC_Stream0_Handler+0x79c>)
 8002832:	ed8a 0a00 	vstr	s0, [sl]
 8002836:	edc3 0a00 	vstr	s1, [r3]
 800283a:	4b6e      	ldr	r3, [pc, #440]	; (80029f4 <ADC_Stream0_Handler+0x7a0>)
 800283c:	ed89 1a00 	vstr	s2, [r9]
 8002840:	edc3 1a00 	vstr	s3, [r3]
 8002844:	4b6c      	ldr	r3, [pc, #432]	; (80029f8 <ADC_Stream0_Handler+0x7a4>)
 8002846:	4a6d      	ldr	r2, [pc, #436]	; (80029fc <ADC_Stream0_Handler+0x7a8>)
 8002848:	edc3 2a00 	vstr	s5, [r3]
 800284c:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <ADC_Stream0_Handler+0x7ac>)
 800284e:	edc3 8a00 	vstr	s17, [r3]
 8002852:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <ADC_Stream0_Handler+0x7b0>)
 8002854:	ed83 5a00 	vstr	s10, [r3]
 8002858:	4b6b      	ldr	r3, [pc, #428]	; (8002a08 <ADC_Stream0_Handler+0x7b4>)
 800285a:	edc3 fa00 	vstr	s31, [r3]
 800285e:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <ADC_Stream0_Handler+0x7b8>)
 8002860:	ed83 8a00 	vstr	s16, [r3]
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <ADC_Stream0_Handler+0x7bc>)
 8002866:	edc3 5a00 	vstr	s11, [r3]
 800286a:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <ADC_Stream0_Handler+0x7c0>)
 800286c:	ed83 fa00 	vstr	s30, [r3]
 8002870:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <ADC_Stream0_Handler+0x7c4>)
 8002872:	edc3 ba00 	vstr	s23, [r3]
 8002876:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <ADC_Stream0_Handler+0x7c8>)
 8002878:	ed83 3a00 	vstr	s6, [r3]
 800287c:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <ADC_Stream0_Handler+0x7cc>)
 800287e:	edc3 9a00 	vstr	s19, [r3]
 8002882:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <ADC_Stream0_Handler+0x7d0>)
 8002884:	ed83 ba00 	vstr	s22, [r3]
 8002888:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <ADC_Stream0_Handler+0x7d4>)
 800288a:	edc3 3a00 	vstr	s7, [r3]
 800288e:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <ADC_Stream0_Handler+0x7d8>)
 8002890:	ed83 9a00 	vstr	s18, [r3]
 8002894:	4b66      	ldr	r3, [pc, #408]	; (8002a30 <ADC_Stream0_Handler+0x7dc>)
 8002896:	edc3 ea00 	vstr	s29, [r3]
 800289a:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <ADC_Stream0_Handler+0x7e0>)
 800289c:	edc3 7a00 	vstr	s15, [r3]
 80028a0:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <ADC_Stream0_Handler+0x7e4>)
 80028a2:	eddd 7a01 	vldr	s15, [sp, #4]
 80028a6:	edc3 ca00 	vstr	s25, [r3]
 80028aa:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <ADC_Stream0_Handler+0x7e8>)
 80028ac:	ed83 da00 	vstr	s26, [r3]
 80028b0:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <ADC_Stream0_Handler+0x7ec>)
 80028b2:	edc3 7a00 	vstr	s15, [r3]
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <ADC_Stream0_Handler+0x7f0>)
 80028b8:	eddd 7a03 	vldr	s15, [sp, #12]
 80028bc:	ed83 ca00 	vstr	s24, [r3]
 80028c0:	4b61      	ldr	r3, [pc, #388]	; (8002a48 <ADC_Stream0_Handler+0x7f4>)
 80028c2:	edc3 7a00 	vstr	s15, [r3]
 80028c6:	eddd 7a08 	vldr	s15, [sp, #32]
 80028ca:	4b60      	ldr	r3, [pc, #384]	; (8002a4c <ADC_Stream0_Handler+0x7f8>)
 80028cc:	edc3 7a00 	vstr	s15, [r3]
 80028d0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80028d4:	4b5e      	ldr	r3, [pc, #376]	; (8002a50 <ADC_Stream0_Handler+0x7fc>)
 80028d6:	edc3 7a00 	vstr	s15, [r3]
 80028da:	eddd 7a00 	vldr	s15, [sp]
 80028de:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <ADC_Stream0_Handler+0x800>)
 80028e0:	f8ab e000 	strh.w	lr, [fp]
 80028e4:	edc3 7a00 	vstr	s15, [r3]
 80028e8:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80028ec:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <ADC_Stream0_Handler+0x804>)
 80028ee:	edc3 7a00 	vstr	s15, [r3]
 80028f2:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80028f6:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <ADC_Stream0_Handler+0x808>)
 80028f8:	edc3 7a00 	vstr	s15, [r3]
 80028fc:	eddd 7a06 	vldr	s15, [sp, #24]
 8002900:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <ADC_Stream0_Handler+0x80c>)
 8002902:	edc3 7a00 	vstr	s15, [r3]
 8002906:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800290a:	4b56      	ldr	r3, [pc, #344]	; (8002a64 <ADC_Stream0_Handler+0x810>)
 800290c:	edc8 7a00 	vstr	s15, [r8]
 8002910:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8002914:	edc7 7a00 	vstr	s15, [r7]
 8002918:	eddd 7a07 	vldr	s15, [sp, #28]
 800291c:	edc6 7a00 	vstr	s15, [r6]
 8002920:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8002924:	edc3 7a00 	vstr	s15, [r3]
 8002928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292c:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8002930:	8023      	strh	r3, [r4, #0]
 8002932:	edc2 7a00 	vstr	s15, [r2]
		}

		// LED_YELLOW_OFF;

	}
 8002936:	b015      	add	sp, #84	; 0x54
 8002938:	ecbd 8b10 	vpop	{d8-d15}
 800293c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002940:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002944:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002948:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800294c:	edcd ea02 	vstr	s29, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002950:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8002954:	edcd ca10 	vstr	s25, [sp, #64]	; 0x40
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002958:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 800295c:	ed8d ca11 	vstr	s24, [sp, #68]	; 0x44
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002960:	eeb0 da69 	vmov.f32	s26, s19
 8002964:	eef0 ea49 	vmov.f32	s29, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002968:	eeb0 ba46 	vmov.f32	s22, s12
 800296c:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002970:	eeb0 8a47 	vmov.f32	s16, s14
 8002974:	eef0 8a67 	vmov.f32	s17, s15
 8002978:	e6e5      	b.n	8002746 <ADC_Stream0_Handler+0x4f2>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800297a:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800297e:	eef0 3a4b 	vmov.f32	s7, s22
 8002982:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002986:	ed8d da01 	vstr	s26, [sp, #4]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800298a:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800298e:	eeb0 da69 	vmov.f32	s26, s19
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002992:	eddd 5a03 	vldr	s11, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002996:	eeb0 ba46 	vmov.f32	s22, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800299a:	edcd ea02 	vstr	s29, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800299e:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029a2:	edcd 5a08 	vstr	s11, [sp, #32]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80029a6:	eef0 ea49 	vmov.f32	s29, s18
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029aa:	eef0 5a48 	vmov.f32	s11, s16
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029ae:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029b2:	eeb0 8a47 	vmov.f32	s16, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029b6:	ed8d ca03 	vstr	s24, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029ba:	eeb0 5a68 	vmov.f32	s10, s17
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 80029be:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029c2:	eef0 8a67 	vmov.f32	s17, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 80029c6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80029ca:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80029ce:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80029d2:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 80029d6:	e6b2      	b.n	800273e <ADC_Stream0_Handler+0x4ea>
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 80029d8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80029dc:	1c51      	adds	r1, r2, #1
 80029de:	e4ab      	b.n	8002338 <ADC_Stream0_Handler+0xe4>
 80029e0:	2000d800 	.word	0x2000d800
 80029e4:	2000f800 	.word	0x2000f800
 80029e8:	34000000 	.word	0x34000000
 80029ec:	24000564 	.word	0x24000564
 80029f0:	24000590 	.word	0x24000590
 80029f4:	24000594 	.word	0x24000594
 80029f8:	24000560 	.word	0x24000560
 80029fc:	24000588 	.word	0x24000588
 8002a00:	240005a8 	.word	0x240005a8
 8002a04:	240005ac 	.word	0x240005ac
 8002a08:	2400056c 	.word	0x2400056c
 8002a0c:	240005a0 	.word	0x240005a0
 8002a10:	240005a4 	.word	0x240005a4
 8002a14:	24000568 	.word	0x24000568
 8002a18:	240005b8 	.word	0x240005b8
 8002a1c:	240005bc 	.word	0x240005bc
 8002a20:	24000574 	.word	0x24000574
 8002a24:	240005b0 	.word	0x240005b0
 8002a28:	240005b4 	.word	0x240005b4
 8002a2c:	24000570 	.word	0x24000570
 8002a30:	240005c8 	.word	0x240005c8
 8002a34:	240005cc 	.word	0x240005cc
 8002a38:	2400057c 	.word	0x2400057c
 8002a3c:	240005c0 	.word	0x240005c0
 8002a40:	240005c4 	.word	0x240005c4
 8002a44:	24000578 	.word	0x24000578
 8002a48:	240005d8 	.word	0x240005d8
 8002a4c:	240005dc 	.word	0x240005dc
 8002a50:	24000584 	.word	0x24000584
 8002a54:	240005d0 	.word	0x240005d0
 8002a58:	240005d4 	.word	0x240005d4
 8002a5c:	24000580 	.word	0x24000580
 8002a60:	240005e8 	.word	0x240005e8
 8002a64:	240005e4 	.word	0x240005e4
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002a68:	eddd 5a06 	vldr	s11, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002a6c:	eeb0 5a68 	vmov.f32	s10, s17
 8002a70:	eef0 8a67 	vmov.f32	s17, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8002a74:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002a78:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002a7c:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002a80:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002a84:	eeb0 3a6b 	vmov.f32	s6, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 8002a88:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002a8c:	eeb0 ba46 	vmov.f32	s22, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002a90:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002a94:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002a98:	eddd 5a03 	vldr	s11, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002a9c:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002aa0:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002aa4:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002aa8:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002aac:	ed8d da01 	vstr	s26, [sp, #4]
 8002ab0:	eeb0 da69 	vmov.f32	s26, s19
 8002ab4:	edcd ea02 	vstr	s29, [sp, #8]
 8002ab8:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002abc:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002ac0:	eeb0 8a47 	vmov.f32	s16, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002ac4:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002ac8:	edcd ca00 	vstr	s25, [sp]
 8002acc:	ed8d ca03 	vstr	s24, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002ad0:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8002ad4:	e77b      	b.n	80029ce <ADC_Stream0_Handler+0x77a>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8002ad6:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <ADC_Stream0_Handler+0x89c>)
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <ADC_Stream0_Handler+0x8a0>)
 8002ada:	ed92 0a00 	vldr	s0, [r2]
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002ae6:	f000 f807 	bl	8002af8 <SDR_ComputeLO>
 8002aea:	f7ff bbd0 	b.w	800228e <ADC_Stream0_Handler+0x3a>
 8002aee:	bf00      	nop
 8002af0:	24006128 	.word	0x24006128
 8002af4:	24007af8 	.word	0x24007af8

08002af8 <SDR_ComputeLO>:

#include <arm_const_structs.h>

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8002af8:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
	static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f,
			ypi, ypq, tmpi, gain=1.f;

	if (oldfreq != freq)
 8002afa:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <SDR_ComputeLO+0x144>)
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	eef4 7a40 	vcmp.f32	s15, s0
{
 8002b04:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	d173      	bne.n	8002bf6 <SDR_ComputeLO+0xfe>
	// Coupled Quadrature Oscillator with level stabilization
	while(k)
	{                    
		// loop partially unrolled for performance

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b0e:	4a4c      	ldr	r2, [pc, #304]	; (8002c40 <SDR_ComputeLO+0x148>)
 8002b10:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <SDR_ComputeLO+0x14c>)
 8002b12:	ed92 8a00 	vldr	s16, [r2]
 8002b16:	ed93 7a00 	vldr	s14, [r3]
 8002b1a:	4d4b      	ldr	r5, [pc, #300]	; (8002c48 <SDR_ComputeLO+0x150>)
 8002b1c:	4c4b      	ldr	r4, [pc, #300]	; (8002c4c <SDR_ComputeLO+0x154>)
 8002b1e:	484c      	ldr	r0, [pc, #304]	; (8002c50 <SDR_ComputeLO+0x158>)
 8002b20:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <SDR_ComputeLO+0x15c>)
 8002b22:	edd5 5a00 	vldr	s11, [r5]
 8002b26:	edd4 7a00 	vldr	s15, [r4]
 8002b2a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8002b2e:	edd0 6a00 	vldr	s13, [r0]
 8002b32:	4a49      	ldr	r2, [pc, #292]	; (8002c58 <SDR_ComputeLO+0x160>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b34:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 8002b38:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b3a:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 8002b3e:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b40:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 8002b44:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b46:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b4a:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b52:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b56:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b5a:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b5e:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b62:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b66:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b6a:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b6e:	ee66 5aa5 	vmul.f32	s11, s13, s11
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b72:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b76:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b7a:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b7e:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b82:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b86:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b8a:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b92:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002b96:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b9a:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002b9e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002ba2:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002ba6:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002baa:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002bae:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002bb2:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002bb6:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002bba:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8002bbe:	d1b9      	bne.n	8002b34 <SDR_ComputeLO+0x3c>
		ym1i = tmpi;

		k--;
	}
	// compute the gain to be applied to stabilize the level
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8002bc0:	ee66 6a06 	vmul.f32	s13, s12, s12
 8002bc4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002c5c <SDR_ComputeLO+0x164>
 8002bc8:	edc4 7a00 	vstr	s15, [r4]
 8002bcc:	eddf 4a24 	vldr	s9, [pc, #144]	; 8002c60 <SDR_ComputeLO+0x168>
 8002bd0:	eee5 6a05 	vfma.f32	s13, s10, s10
 8002bd4:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <SDR_ComputeLO+0x16c>)
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <SDR_ComputeLO+0x170>)
 8002bd8:	edc5 5a00 	vstr	s11, [r5]
 8002bdc:	ed82 5a00 	vstr	s10, [r2]
 8002be0:	ed83 6a00 	vstr	s12, [r3]
 8002be4:	ee77 7a66 	vsub.f32	s15, s14, s13
}	
 8002be8:	ecbd 8b04 	vpop	{d8-d9}
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8002bec:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8002bf0:	edc0 7a00 	vstr	s15, [r0]
}	
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002bf6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002c6c <SDR_ComputeLO+0x174>
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <SDR_ComputeLO+0x178>)
 8002bfc:	ee60 7a27 	vmul.f32	s15, s0, s15
		oldfreq  =  freq;
 8002c00:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002c04:	ed92 7a00 	vldr	s14, [r2]
 8002c08:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8002c0c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8002c10:	eeb0 0b49 	vmov.f64	d0, d9
 8002c14:	f012 fa50 	bl	80150b8 <cos>
 8002c18:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <SDR_ComputeLO+0x148>)
		sintheta = -sin(TWOPI * freq / SamplingRate);
 8002c1e:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002c22:	ed83 8a00 	vstr	s16, [r3]
		sintheta = -sin(TWOPI * freq / SamplingRate);
 8002c26:	f012 fa93 	bl	8015150 <sin>
 8002c2a:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SDR_ComputeLO+0x14c>)
 8002c30:	eeb1 7a47 	vneg.f32	s14, s14
 8002c34:	ed83 7a00 	vstr	s14, [r3]
 8002c38:	e76f      	b.n	8002b1a <SDR_ComputeLO+0x22>
 8002c3a:	bf00      	nop
 8002c3c:	24000204 	.word	0x24000204
 8002c40:	240005f4 	.word	0x240005f4
 8002c44:	240005fc 	.word	0x240005fc
 8002c48:	24000208 	.word	0x24000208
 8002c4c:	24000614 	.word	0x24000614
 8002c50:	24000200 	.word	0x24000200
 8002c54:	24005938 	.word	0x24005938
 8002c58:	24005138 	.word	0x24005138
 8002c5c:	46000200 	.word	0x46000200
 8002c60:	39000000 	.word	0x39000000
 8002c64:	24000618 	.word	0x24000618
 8002c68:	2400061c 	.word	0x2400061c
 8002c6c:	40c90fdb 	.word	0x40c90fdb
 8002c70:	24006150 	.word	0x24006150

08002c74 <SDR_2R_toC_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time
	while(blkCnt)
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	d028      	beq.n	8002cca <SDR_2R_toC_f32+0x56>
 8002c78:	3010      	adds	r0, #16
 8002c7a:	3110      	adds	r1, #16
 8002c7c:	3220      	adds	r2, #32
	{
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002c7e:	f850 cc10 	ldr.w	ip, [r0, #-16]
	while(blkCnt)
 8002c82:	3110      	adds	r1, #16
 8002c84:	3010      	adds	r0, #16
 8002c86:	3b01      	subs	r3, #1
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002c88:	f842 cc20 	str.w	ip, [r2, #-32]
	while(blkCnt)
 8002c8c:	f102 0220 	add.w	r2, r2, #32
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002c90:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8002c94:	f842 cc3c 	str.w	ip, [r2, #-60]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002c98:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8002c9c:	f842 cc38 	str.w	ip, [r2, #-56]
 8002ca0:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8002ca4:	f842 cc34 	str.w	ip, [r2, #-52]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002ca8:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8002cac:	f842 cc30 	str.w	ip, [r2, #-48]
 8002cb0:	f851 cc18 	ldr.w	ip, [r1, #-24]
 8002cb4:	f842 cc2c 	str.w	ip, [r2, #-44]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002cb8:	f850 cc14 	ldr.w	ip, [r0, #-20]
 8002cbc:	f842 cc28 	str.w	ip, [r2, #-40]
 8002cc0:	f851 cc14 	ldr.w	ip, [r1, #-20]
 8002cc4:	f842 cc24 	str.w	ip, [r2, #-36]
	while(blkCnt)
 8002cc8:	d1d9      	bne.n	8002c7e <SDR_2R_toC_f32+0xa>

		blkCnt--;
	}
}
 8002cca:	4770      	bx	lr

08002ccc <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <SDR_downconvert_f32+0xd8>)
	float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;

	// loop Unrolling
	blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
	while(blkCnt)
 8002cce:	3110      	adds	r1, #16
 8002cd0:	3210      	adds	r2, #16
 8002cd2:	3008      	adds	r0, #8
		tmp2=((*(pt+1)-offset)) / 2048.f;
		tmp1 = tmp2;
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3 = tmp4;
#else
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002cd4:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002da8 <SDR_downconvert_f32+0xdc>
 8002cd8:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	4c33      	ldr	r4, [pc, #204]	; (8002dac <SDR_downconvert_f32+0xe0>)
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002ce0:	f830 ec08 	ldrh.w	lr, [r0, #-8]
	while(blkCnt)
 8002ce4:	3110      	adds	r1, #16
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002ce6:	ed13 5a04 	vldr	s10, [r3, #-16]
	while(blkCnt)
 8002cea:	3410      	adds	r4, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002cec:	ee06 ea10 	vmov	s12, lr
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002cf0:	f830 ec06 	ldrh.w	lr, [r0, #-6]
	while(blkCnt)
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	3210      	adds	r2, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002cf8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002cfc:	ee06 ea90 	vmov	s13, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d00:	f830 ec02 	ldrh.w	lr, [r0, #-2]
	while(blkCnt)
 8002d04:	4563      	cmp	r3, ip
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002d06:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	while(blkCnt)
 8002d0a:	f100 0008 	add.w	r0, r0, #8
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002d0e:	ee36 6a40 	vsub.f32	s12, s12, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d12:	ee07 ea90 	vmov	s15, lr
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d16:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002d1a:	ee76 6ac0 	vsub.f32	s13, s13, s0
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002d1e:	ee26 6a25 	vmul.f32	s12, s12, s11
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d22:	ee07 ea10 	vmov	s14, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002d2a:	ee66 6aa5 	vmul.f32	s13, s13, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002d2e:	ee25 5a06 	vmul.f32	s10, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d36:	ee77 7ac0 	vsub.f32	s15, s15, s0
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002d3a:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8002d3e:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d42:	ee37 7a40 	vsub.f32	s14, s14, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8002d46:	ee67 7aa5 	vmul.f32	s15, s15, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002d4a:	ee25 6a06 	vmul.f32	s12, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002d4e:	ee27 7a25 	vmul.f32	s14, s14, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002d52:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		*zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8002d56:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8002d5a:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002d5e:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8002d62:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8002d66:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002d6a:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		*zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8002d6e:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8002d72:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002d76:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8002d7a:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8002d7e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002d82:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		*zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8002d86:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8002d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d8e:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8002d92:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8002d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(blkCnt)
 8002d9e:	d19f      	bne.n	8002ce0 <SDR_downconvert_f32+0x14>
		pt += 4;
		blkCnt--;
	}	
}
 8002da0:	bd10      	pop	{r4, pc}
 8002da2:	bf00      	nop
 8002da4:	24005138 	.word	0x24005138
 8002da8:	3a000000 	.word	0x3a000000
 8002dac:	24005938 	.word	0x24005938

08002db0 <SDR_float_to_DAC_audio>:
	short *AudioBuffer;

	AudioBuffer = pDst;

	/* loop Unrolling */
	blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8002db0:	0893      	lsrs	r3, r2, #2
	while(blkCnt--)
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d058      	beq.n	8002e68 <SDR_float_to_DAC_audio+0xb8>
 8002db6:	f103 3cff 	add.w	ip, r3, #4294967295
	{
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002dba:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <SDR_float_to_DAC_audio+0xe4>)
 8002dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dc0:	fa1f fc8c 	uxth.w	ip, ip
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	f100 0310 	add.w	r3, r0, #16
 8002dcc:	3020      	adds	r0, #32
 8002dce:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 8002dd2:	f101 0008 	add.w	r0, r1, #8
{
 8002dd6:	b500      	push	{lr}
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002dd8:	eeb0 5a47 	vmov.f32	s10, s14
 8002ddc:	ed53 5a04 	vldr	s11, [r3, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002de0:	ed13 6a03 	vldr	s12, [r3, #-12]
	while(blkCnt--)
 8002de4:	3008      	adds	r0, #8
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002de6:	ed53 6a02 	vldr	s13, [r3, #-8]
	while(blkCnt--)
 8002dea:	3310      	adds	r3, #16
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002dec:	eea5 5aa7 	vfma.f32	s10, s11, s15
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002df0:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002df4:	eef0 5a47 	vmov.f32	s11, s14
	while(blkCnt--)
 8002df8:	459c      	cmp	ip, r3
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002dfa:	eee7 5a86 	vfma.f32	s11, s15, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002dfe:	eeb0 6a47 	vmov.f32	s12, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e02:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e06:	eea7 6aa6 	vfma.f32	s12, s15, s13
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e0a:	eef0 6a47 	vmov.f32	s13, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e0e:	ee15 ea10 	vmov	lr, s10
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e12:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e16:	f820 ec10 	strh.w	lr, [r0, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e1a:	eee7 6aa4 	vfma.f32	s13, s15, s9
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e1e:	ee15 ea90 	vmov	lr, s11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e22:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e26:	f820 ec0e 	strh.w	lr, [r0, #-14]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e2a:	ee16 ea10 	vmov	lr, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e2e:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e32:	f820 ec0c 	strh.w	lr, [r0, #-12]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * RXVolume);
 8002e36:	ee16 ea90 	vmov	lr, s13
 8002e3a:	f820 ec0a 	strh.w	lr, [r0, #-10]
	while(blkCnt--)
 8002e3e:	d1cb      	bne.n	8002dd8 <SDR_float_to_DAC_audio+0x28>
	}	

	// SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
	SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8002e40:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002e42:	f001 021f 	and.w	r2, r1, #31
 8002e46:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e48:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002e4c:	4812      	ldr	r0, [pc, #72]	; (8002e98 <SDR_float_to_DAC_audio+0xe8>)
 8002e4e:	440a      	add	r2, r1
 8002e50:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002e54:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002e56:	1a53      	subs	r3, r2, r1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	dcf9      	bgt.n	8002e50 <SDR_float_to_DAC_audio+0xa0>
 8002e5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e60:	f3bf 8f6f 	isb	sy
#endif
	return;
}	
 8002e64:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( dsize > 0 ) { 
 8002e68:	0093      	lsls	r3, r2, #2
 8002e6a:	b902      	cbnz	r2, 8002e6e <SDR_float_to_DAC_audio+0xbe>
 8002e6c:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002e6e:	f001 021f 	and.w	r2, r1, #31
 8002e72:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002e74:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002e78:	4807      	ldr	r0, [pc, #28]	; (8002e98 <SDR_float_to_DAC_audio+0xe8>)
 8002e7a:	440a      	add	r2, r1
 8002e7c:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002e80:	3120      	adds	r1, #32
      } while ( op_size > 0 );
 8002e82:	1a53      	subs	r3, r2, r1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	dcf9      	bgt.n	8002e7c <SDR_float_to_DAC_audio+0xcc>
 8002e88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e8c:	f3bf 8f6f 	isb	sy
	return;
 8002e90:	e7ec      	b.n	8002e6c <SDR_float_to_DAC_audio+0xbc>
 8002e92:	bf00      	nop
 8002e94:	24006148 	.word	0x24006148
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <SDR_memcpy_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time.
	while(blkCnt > 0u)
 8002e9c:	0892      	lsrs	r2, r2, #2
 8002e9e:	d016      	beq.n	8002ece <SDR_memcpy_f32+0x32>
 8002ea0:	3110      	adds	r1, #16
 8002ea2:	3010      	adds	r0, #16
	{
		/* Copy and then store the results in the destination buffer */
		in1 = *pSrc++;  *pDst++ = in1;
 8002ea4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	while(blkCnt > 0u)
 8002ea8:	3110      	adds	r1, #16
 8002eaa:	3a01      	subs	r2, #1
 8002eac:	f100 0010 	add.w	r0, r0, #16
		in1 = *pSrc++;  *pDst++ = in1;
 8002eb0:	f840 3c20 	str.w	r3, [r0, #-32]
		in2 = *pSrc++;  *pDst++ = in2;
 8002eb4:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8002eb8:	f840 3c1c 	str.w	r3, [r0, #-28]
		in3 = *pSrc++;  *pDst++ = in3;
 8002ebc:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8002ec0:	f840 3c18 	str.w	r3, [r0, #-24]
		in4 = *pSrc++;  *pDst++ = in4;
 8002ec4:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8002ec8:	f840 3c14 	str.w	r3, [r0, #-20]
	while(blkCnt > 0u)
 8002ecc:	d1ea      	bne.n	8002ea4 <SDR_memcpy_f32+0x8>

		// Decrement the loop counter
		blkCnt--;
	}
}
 8002ece:	4770      	bx	lr

08002ed0 <SDR_mirror_LSB>:
{
	uint32_t blkCnt;            /* loop counter */
	float *pbR, *pbI, *peR, *peI;

	// loop Unrolling */
	blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8002ed0:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002ed2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

	//  Compute 4 outputs at a time.
	while(blkCnt--)
 8002ed6:	2a01      	cmp	r2, #1
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002ed8:	440b      	add	r3, r1
	while(blkCnt--)
 8002eda:	f1a2 0102 	sub.w	r1, r2, #2
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002ede:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 8002ee2:	d036      	beq.n	8002f52 <SDR_mirror_LSB+0x82>
 8002ee4:	f1a3 0220 	sub.w	r2, r3, #32
 8002ee8:	f1a3 0c1c 	sub.w	ip, r3, #28
 8002eec:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8002ef0:	4402      	add	r2, r0
 8002ef2:	4460      	add	r0, ip
	{
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002ef4:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 8002ef8:	3a20      	subs	r2, #32
 8002efa:	3820      	subs	r0, #32
 8002efc:	3901      	subs	r1, #1
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002efe:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 8002f02:	3320      	adds	r3, #32
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002f04:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 8002f08:	f1b1 3fff 	cmp.w	r1, #4294967295
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002f0c:	eef1 7a67 	vneg.f32	s15, s15
 8002f10:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002f14:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 8002f18:	f843 cc38 	str.w	ip, [r3, #-56]
 8002f1c:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8002f20:	eef1 7a67 	vneg.f32	s15, s15
 8002f24:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002f28:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8002f2c:	f843 cc30 	str.w	ip, [r3, #-48]
 8002f30:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002f34:	eef1 7a67 	vneg.f32	s15, s15
 8002f38:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002f3c:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 8002f40:	f843 cc28 	str.w	ip, [r3, #-40]
 8002f44:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8002f48:	eef1 7a67 	vneg.f32	s15, s15
 8002f4c:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8002f50:	d1d0      	bne.n	8002ef4 <SDR_mirror_LSB+0x24>
	}
}
 8002f52:	4770      	bx	lr

08002f54 <SDR_compute_IIR_parms>:
#endif
	r = Qfactor;

	a1 = a2 = b0 = 0.f;
	r2 = r*r;
	wr = 2.f * cwpitch / rate * myPI;
 8002f54:	492b      	ldr	r1, [pc, #172]	; (8003004 <SDR_compute_IIR_parms+0xb0>)
 8002f56:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003008 <SDR_compute_IIR_parms+0xb4>
 8002f5a:	edd1 7a00 	vldr	s15, [r1]
	float rate = SamplingRate/256; //SamplingRate / decimation
 8002f5e:	4a2b      	ldr	r2, [pc, #172]	; (800300c <SDR_compute_IIR_parms+0xb8>)
	wr = 2.f * cwpitch / rate * myPI;
 8002f60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f64:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8003010 <SDR_compute_IIR_parms+0xbc>
 8002f68:	ed92 7a00 	vldr	s14, [r2]
{
 8002f6c:	b508      	push	{r3, lr}
 8002f6e:	ed2d 8b06 	vpush	{d8-d10}
	wr = 2.f * cwpitch / rate * myPI;
 8002f72:	eec7 8a87 	vdiv.f32	s17, s15, s14
	r = Qfactor;
 8002f76:	4b27      	ldr	r3, [pc, #156]	; (8003014 <SDR_compute_IIR_parms+0xc0>)
 8002f78:	edd3 9a00 	vldr	s19, [r3]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002f7c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	r2 = r*r;
 8002f80:	ee69 aaa9 	vmul.f32	s21, s19, s19
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002f84:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8002f88:	ee3a 9a88 	vadd.f32	s18, s21, s16
	// (see the Proakis & Manolakis book)
	a1 = -2.f * r * cosw0;
	a2 = r2;
	// b0 is normalized for gain ~ 2dB on all the band
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002f8c:	ee38 8a69 	vsub.f32	s16, s16, s19
	wr = 2.f * cwpitch / rate * myPI;
 8002f90:	ee68 8a80 	vmul.f32	s17, s17, s0
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002f94:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8002f98:	f012 f88e 	bl	80150b8 <cos>
 8002f9c:	ee8a 5a09 	vdiv.f32	s10, s20, s18
	a1 = -2.f * r * cosw0;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <SDR_compute_IIR_parms+0xc4>)
	a2 = r2;
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <SDR_compute_IIR_parms+0xc8>)
 8002fa4:	edc2 aa00 	vstr	s21, [r2]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002fa8:	eeb0 6b40 	vmov.f64	d6, d0
	a1 = -2.f * r * cosw0;
 8002fac:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002fb0:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8002fb4:	eeb7 aaca 	vcvt.f64.f32	d10, s20
	a1 = -2.f * r * cosw0;
 8002fb8:	ee69 7aa7 	vmul.f32	s15, s19, s15
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002fbc:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002fc0:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8002fc4:	ee25 6b06 	vmul.f64	d6, d5, d6
 8002fc8:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	a1 = -2.f * r * cosw0;
 8002fcc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002fd0:	ed83 6a00 	vstr	s12, [r3]
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002fd4:	f012 f870 	bl	80150b8 <cos>
 8002fd8:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8002fdc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003020 <SDR_compute_IIR_parms+0xcc>
 8002fe0:	4b10      	ldr	r3, [pc, #64]	; (8003024 <SDR_compute_IIR_parms+0xd0>)
 8002fe2:	ee28 7a07 	vmul.f32	s14, s16, s14
 8002fe6:	eeaa 6b40 	vfms.f64	d6, d10, d0
 8002fea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8002fee:	ecbd 8b06 	vpop	{d8-d10}
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002ff2:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8002ff6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002ffa:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002ffe:	ed83 7a00 	vstr	s14, [r3]
}
 8003002:	bd08      	pop	{r3, pc}
 8003004:	24007af8 	.word	0x24007af8
 8003008:	44000000 	.word	0x44000000
 800300c:	24006150 	.word	0x24006150
 8003010:	40490fdb 	.word	0x40490fdb
 8003014:	24006144 	.word	0x24006144
 8003018:	240072cc 	.word	0x240072cc
 800301c:	240072d0 	.word	0x240072d0
 8003020:	3f99999a 	.word	0x3f99999a
 8003024:	24007aec 	.word	0x24007aec

08003028 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
	static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	register float x0, y0;
	uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8003028:	0889      	lsrs	r1, r1, #2

	// Compute 4 outputs at a time, loop unrolled for performance
	while(blkCnt--)
 800302a:	2900      	cmp	r1, #0
 800302c:	d077      	beq.n	800311e <SDR_CWPeak+0xf6>
 800302e:	1e4b      	subs	r3, r1, #1
 8003030:	f8df c104 	ldr.w	ip, [pc, #260]	; 8003138 <SDR_CWPeak+0x110>
	{
		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003034:	493a      	ldr	r1, [pc, #232]	; (8003120 <SDR_CWPeak+0xf8>)
 8003036:	3010      	adds	r0, #16
 8003038:	4a3a      	ldr	r2, [pc, #232]	; (8003124 <SDR_CWPeak+0xfc>)
 800303a:	eddc 2a00 	vldr	s5, [ip]
 800303e:	ed91 6a00 	vldr	s12, [r1]
 8003042:	ed92 5a00 	vldr	s10, [r2]
{
 8003046:	b4f0      	push	{r4, r5, r6, r7}
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003048:	4c37      	ldr	r4, [pc, #220]	; (8003128 <SDR_CWPeak+0x100>)
 800304a:	4f38      	ldr	r7, [pc, #224]	; (800312c <SDR_CWPeak+0x104>)
 800304c:	edd4 4a00 	vldr	s9, [r4]
 8003050:	4e37      	ldr	r6, [pc, #220]	; (8003130 <SDR_CWPeak+0x108>)
 8003052:	4d38      	ldr	r5, [pc, #224]	; (8003134 <SDR_CWPeak+0x10c>)
 8003054:	eeb1 2a64 	vneg.f32	s4, s9
 8003058:	ed97 7a00 	vldr	s14, [r7]
 800305c:	edd6 5a00 	vldr	s11, [r6]
 8003060:	edd5 6a00 	vldr	s13, [r5]
 8003064:	ee66 3a47 	vnmul.f32	s7, s12, s14
 8003068:	ed10 7a04 	vldr	s14, [r0, #-16]
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800306c:	ee26 4a66 	vnmul.f32	s8, s12, s13
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003070:	ed50 7a03 	vldr	s15, [r0, #-12]
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003074:	ed50 6a02 	vldr	s13, [r0, #-8]
	while(blkCnt--)
 8003078:	3010      	adds	r0, #16
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800307a:	eee2 3a22 	vfma.f32	s7, s4, s5
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800307e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003082:	eea2 4a25 	vfma.f32	s8, s4, s11
	while(blkCnt--)
 8003086:	3b01      	subs	r3, #1
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800308c:	eee7 3a05 	vfma.f32	s7, s14, s10
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003090:	eea3 4a85 	vfma.f32	s8, s7, s10
		*buf++ = y0;
 8003094:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003098:	ed92 5a00 	vldr	s10, [r2]
 800309c:	ed91 6a00 	vldr	s12, [r1]
 80030a0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80030a4:	edd4 4a00 	vldr	s9, [r4]
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80030a8:	ee25 7a26 	vmul.f32	s14, s10, s13
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80030ac:	ee65 6a03 	vmul.f32	s13, s10, s6
 80030b0:	eee6 7a62 	vfms.f32	s15, s12, s5
 80030b4:	eea6 7a63 	vfms.f32	s14, s12, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80030b8:	eeb1 2a64 	vneg.f32	s4, s9
 80030bc:	eee4 7ae3 	vfms.f32	s15, s9, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80030c0:	eea4 7ae7 	vfms.f32	s14, s9, s15
 80030c4:	eee6 6a67 	vfms.f32	s13, s12, s15
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030c8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80030cc:	eee4 7ac4 	vfms.f32	s15, s9, s8
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80030d0:	eee4 6ac7 	vfms.f32	s13, s9, s14
 80030d4:	eef0 2a66 	vmov.f32	s5, s13
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030d8:	ee65 6a07 	vmul.f32	s13, s10, s14
 80030dc:	eee6 6a44 	vfms.f32	s13, s12, s8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030e0:	eeb0 4a67 	vmov.f32	s8, s15
 80030e4:	eed6 7a25 	vfnms.f32	s15, s12, s11
 80030e8:	eea6 4a65 	vfms.f32	s8, s12, s11
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030ec:	ee65 5a22 	vmul.f32	s11, s10, s5
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80030f0:	eee4 6aa7 	vfma.f32	s13, s9, s15
 80030f4:	eee6 5a44 	vfms.f32	s11, s12, s8
		*buf++ = y0;
 80030f8:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
		*buf++ = y0;
 80030fc:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003100:	eee4 5ae6 	vfms.f32	s11, s9, s13
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;
 8003104:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	while(blkCnt--)
 8003108:	d1ac      	bne.n	8003064 <SDR_CWPeak+0x3c>
 800310a:	ed87 7a00 	vstr	s14, [r7]
 800310e:	edc6 5a00 	vstr	s11, [r6]
 8003112:	edc5 6a00 	vstr	s13, [r5]
 8003116:	edcc 2a00 	vstr	s5, [ip]
	}
}
 800311a:	bcf0      	pop	{r4, r5, r6, r7}
 800311c:	4770      	bx	lr
 800311e:	4770      	bx	lr
 8003120:	240072d0 	.word	0x240072d0
 8003124:	24007aec 	.word	0x24007aec
 8003128:	240072cc 	.word	0x240072cc
 800312c:	2400060c 	.word	0x2400060c
 8003130:	24000608 	.word	0x24000608
 8003134:	24000610 	.word	0x24000610
 8003138:	24000604 	.word	0x24000604

0800313c <SDR_demodAM_AGC>:

#ifdef RECEIVE_AM

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 800313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

		if(pk < audiotmp)
		{
			pk = audiotmp;
			hangcnt = Hcount[AM];
 8003140:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <SDR_demodAM_AGC+0xf8>)
{
 8003142:	b082      	sub	sp, #8
 8003144:	4f3c      	ldr	r7, [pc, #240]	; (8003238 <SDR_demodAM_AGC+0xfc>)
 8003146:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 800314a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8003258 <SDR_demodAM_AGC+0x11c>
			hangcnt = Hcount[AM];
 800314e:	f8b3 e000 	ldrh.w	lr, [r3]
 8003152:	683a      	ldr	r2, [r7, #0]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8003154:	eddf 4a39 	vldr	s9, [pc, #228]	; 800323c <SDR_demodAM_AGC+0x100>

		if(hangcnt == 0)
			pk  *= Decay[AM];

		// DC removal filter -----------------------
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8003158:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8003240 <SDR_demodAM_AGC+0x104>
 800315c:	ed98 7a00 	vldr	s14, [r8]
 8003160:	4b38      	ldr	r3, [pc, #224]	; (8003244 <SDR_demodAM_AGC+0x108>)
 8003162:	4d39      	ldr	r5, [pc, #228]	; (8003248 <SDR_demodAM_AGC+0x10c>)
 8003164:	4c39      	ldr	r4, [pc, #228]	; (800324c <SDR_demodAM_AGC+0x110>)
			pk  *= Decay[AM];
 8003166:	4e3a      	ldr	r6, [pc, #232]	; (8003250 <SDR_demodAM_AGC+0x114>)
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8003168:	edd0 7a01 	vldr	s15, [r0, #4]
 800316c:	edd0 6a00 	vldr	s13, [r0]
 8003170:	ee67 7aa7 	vmul.f32	s15, s15, s15
		audiotmp /= max(pk, AgcThreshold);
 8003174:	ed95 6a00 	vldr	s12, [r5]
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8003178:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800317c:	edcd 7a01 	vstr	s15, [sp, #4]
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8003180:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8003184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 800318c:	bfa8      	it	ge
 800318e:	eef1 5ae7 	vsqrtge.f32	s11, s15
		if(pk < audiotmp)
 8003192:	edd3 7a00 	vldr	s15, [r3]
      *pOut = 0.0f;
 8003196:	bfb8      	it	lt
 8003198:	eef0 5a64 	vmovlt.f32	s11, s9
 800319c:	eef4 7ae5 	vcmpe.f32	s15, s11
 80031a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a4:	d504      	bpl.n	80031b0 <SDR_demodAM_AGC+0x74>
			pk = audiotmp;
 80031a6:	eef0 7a65 	vmov.f32	s15, s11
			hangcnt = Hcount[AM];
 80031aa:	4672      	mov	r2, lr
			pk = audiotmp;
 80031ac:	edc3 5a00 	vstr	s11, [r3]
		audiotmp /= max(pk, AgcThreshold);
 80031b0:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 80031b4:	eec5 6a86 	vdiv.f32	s13, s11, s12
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80031b8:	eef0 5a66 	vmov.f32	s11, s13
		audiotmp /= max(pk, AgcThreshold);
 80031bc:	edc4 6a00 	vstr	s13, [r4]
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80031c0:	eee7 5a05 	vfma.f32	s11, s14, s10
		if(hangcnt == 0)
 80031c4:	b9da      	cbnz	r2, 80031fe <SDR_demodAM_AGC+0xc2>
			pk  *= Decay[AM];
 80031c6:	edd6 6a00 	vldr	s13, [r6]
	for(k=j=0; k<BSIZE*2; k+=2)
 80031ca:	3008      	adds	r0, #8
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80031cc:	edcd 5a00 	vstr	s11, [sp]
			pk  *= Decay[AM];
 80031d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80031d4:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80031d8:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80031da:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 80031de:	ed9d 7a00 	vldr	s14, [sp]
			pk  *= Decay[AM];
 80031e2:	edc3 6a00 	vstr	s13, [r3]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80031e6:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80031ea:	d1bd      	bne.n	8003168 <SDR_demodAM_AGC+0x2c>
		// -----------------------------------------
	}
	PeakAudioValue=pk;
 80031ec:	4919      	ldr	r1, [pc, #100]	; (8003254 <SDR_demodAM_AGC+0x118>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	603a      	str	r2, [r7, #0]
 80031f2:	ed88 7a00 	vstr	s14, [r8]
 80031f6:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
}
 80031f8:	b002      	add	sp, #8
 80031fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80031fe:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8003202:	3008      	adds	r0, #8
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8003204:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8003208:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800320a:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 800320e:	ed9d 7a00 	vldr	s14, [sp]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8003212:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8003216:	d1a7      	bne.n	8003168 <SDR_demodAM_AGC+0x2c>
	PeakAudioValue=pk;
 8003218:	490e      	ldr	r1, [pc, #56]	; (8003254 <SDR_demodAM_AGC+0x118>)
	if(hangcnt > 0)  hangcnt--;
 800321a:	2a00      	cmp	r2, #0
	PeakAudioValue=pk;
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	603a      	str	r2, [r7, #0]
 8003220:	ed88 7a00 	vstr	s14, [r8]
 8003224:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 8003226:	dd01      	ble.n	800322c <SDR_demodAM_AGC+0xf0>
 8003228:	3a01      	subs	r2, #1
 800322a:	603a      	str	r2, [r7, #0]
}
 800322c:	b002      	add	sp, #8
 800322e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003232:	bf00      	nop
 8003234:	2400511c 	.word	0x2400511c
 8003238:	2400a42c 	.word	0x2400a42c
 800323c:	00000000 	.word	0x00000000
 8003240:	3f75c28f 	.word	0x3f75c28f
 8003244:	2400ad14 	.word	0x2400ad14
 8003248:	240006d4 	.word	0x240006d4
 800324c:	24007ae8 	.word	0x24007ae8
 8003250:	24000ef0 	.word	0x24000ef0
 8003254:	24006140 	.word	0x24006140
 8003258:	24000600 	.word	0x24000600

0800325c <SDR_demodSSB_CW_AGC>:
#endif

//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 800325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(pk < sav)
		{
			pk = sav;
			if(CurrentMode == CW) hangcnt = Hcount[CW];
			else
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8003260:	4b3a      	ldr	r3, [pc, #232]	; (800334c <SDR_demodSSB_CW_AGC+0xf0>)
 8003262:	f241 0e04 	movw	lr, #4100	; 0x1004
 8003266:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8003364 <SDR_demodSSB_CW_AGC+0x108>
		if(pk < sav)
 800326a:	4a39      	ldr	r2, [pc, #228]	; (8003350 <SDR_demodSSB_CW_AGC+0xf4>)
 800326c:	4486      	add	lr, r0
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800326e:	889f      	ldrh	r7, [r3, #4]
 8003270:	885e      	ldrh	r6, [r3, #2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003272:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8003276:	1d03      	adds	r3, r0, #4
		if(pk < sav)
 8003278:	edd2 7a00 	vldr	s15, [r2]
 800327c:	f8d8 0000 	ldr.w	r0, [r8]
 8003280:	4d34      	ldr	r5, [pc, #208]	; (8003354 <SDR_demodSSB_CW_AGC+0xf8>)
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003282:	4c35      	ldr	r4, [pc, #212]	; (8003358 <SDR_demodSSB_CW_AGC+0xfc>)

		if(hangcnt == 0)
		{
			if(CurrentMode == CW) pk  *= Decay[CW];
			else
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8003284:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8003368 <SDR_demodSSB_CW_AGC+0x10c>
 8003288:	e014      	b.n	80032b4 <SDR_demodSSB_CW_AGC+0x58>
			if(CurrentMode == CW) pk  *= Decay[CW];
 800328a:	f894 c000 	ldrb.w	ip, [r4]
 800328e:	f1bc 0f03 	cmp.w	ip, #3
 8003292:	d052      	beq.n	800333a <SDR_demodSSB_CW_AGC+0xde>
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8003294:	f1bc 0f01 	cmp.w	ip, #1
 8003298:	ed92 7a00 	vldr	s14, [r2]
 800329c:	bf0c      	ite	eq
 800329e:	edda 7a01 	vldreq	s15, [sl, #4]
 80032a2:	edda 7a02 	vldrne	s15, [sl, #8]
 80032a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032aa:	edc2 7a00 	vstr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 80032ae:	3308      	adds	r3, #8
 80032b0:	459e      	cmp	lr, r3
 80032b2:	d02d      	beq.n	8003310 <SDR_demodSSB_CW_AGC+0xb4>
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80032b4:	ed93 7a00 	vldr	s14, [r3]
 80032b8:	ed53 6a01 	vldr	s13, [r3, #-4]
 80032bc:	ee27 7a07 	vmul.f32	s14, s14, s14
 80032c0:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 80032c4:	eeb1 6ac7 	vsqrt.f32	s12, s14
		if(pk < sav)
 80032c8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	dd0f      	ble.n	80032f2 <SDR_demodSSB_CW_AGC+0x96>
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80032d2:	f894 c000 	ldrb.w	ip, [r4]
			pk = sav;
 80032d6:	ed82 6a00 	vstr	s12, [r2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80032da:	f1bc 0f03 	cmp.w	ip, #3
 80032de:	d026      	beq.n	800332e <SDR_demodSSB_CW_AGC+0xd2>
 80032e0:	eef0 7a46 	vmov.f32	s15, s12
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80032e4:	f1bc 0f01 	cmp.w	ip, #1
 80032e8:	bf0c      	ite	eq
 80032ea:	4630      	moveq	r0, r6
 80032ec:	4638      	movne	r0, r7
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 80032ee:	ed53 6a01 	vldr	s13, [r3, #-4]
 80032f2:	ed95 7a00 	vldr	s14, [r5]
 80032f6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80032fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032fe:	eca1 7a01 	vstmia	r1!, {s14}
		if(hangcnt == 0)
 8003302:	2800      	cmp	r0, #0
 8003304:	d0c1      	beq.n	800328a <SDR_demodSSB_CW_AGC+0x2e>
	for(k=j=0; k<BSIZE*2; k+=2)
 8003306:	3308      	adds	r3, #8
		}
	}
	PeakAudioValue=pk;
 8003308:	edd2 7a00 	vldr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 800330c:	459e      	cmp	lr, r3
 800330e:	d1d1      	bne.n	80032b4 <SDR_demodSSB_CW_AGC+0x58>
 8003310:	4a12      	ldr	r2, [pc, #72]	; (800335c <SDR_demodSSB_CW_AGC+0x100>)
	if(hangcnt > 0)  hangcnt--;
 8003312:	2800      	cmp	r0, #0
	PeakAudioValue=pk;
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <SDR_demodSSB_CW_AGC+0x104>)
 8003316:	f8c8 0000 	str.w	r0, [r8]
 800331a:	ed82 6a00 	vstr	s12, [r2]
 800331e:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 8003322:	dd02      	ble.n	800332a <SDR_demodSSB_CW_AGC+0xce>
 8003324:	3801      	subs	r0, #1
 8003326:	f8c8 0000 	str.w	r0, [r8]
}
 800332a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332e:	eef0 7a46 	vmov.f32	s15, s12
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 8003332:	ed53 6a01 	vldr	s13, [r3, #-4]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003336:	4648      	mov	r0, r9
 8003338:	e7db      	b.n	80032f2 <SDR_demodSSB_CW_AGC+0x96>
			if(CurrentMode == CW) pk  *= Decay[CW];
 800333a:	ed92 7a00 	vldr	s14, [r2]
 800333e:	edda 7a03 	vldr	s15, [sl, #12]
 8003342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003346:	edc2 7a00 	vstr	s15, [r2]
 800334a:	e7b0      	b.n	80032ae <SDR_demodSSB_CW_AGC+0x52>
 800334c:	2400511c 	.word	0x2400511c
 8003350:	2400ad14 	.word	0x2400ad14
 8003354:	240006d4 	.word	0x240006d4
 8003358:	24000eec 	.word	0x24000eec
 800335c:	240005f8 	.word	0x240005f8
 8003360:	24006140 	.word	0x24006140
 8003364:	2400a42c 	.word	0x2400a42c
 8003368:	24000ef0 	.word	0x24000ef0
 800336c:	00000000 	.word	0x00000000

08003370 <make_kaiser>:
	return sum;
}

// Compute an entire Kaiser window
// More efficient than repeatedly calling kaiser(n,M,beta)
int make_kaiser(float * const window,unsigned int const M,float const beta){
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	ed2d 8b02 	vpush	{d8}
	assert(window != NULL);
 8003376:	2800      	cmp	r0, #0
 8003378:	f000 80a1 	beq.w	80034be <make_kaiser+0x14e>
	if(window == NULL)
		return -1;
	// Precompute unchanging partial values
	float const numc = M_PI * beta;
 800337c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	for(int k=2;k<40;k++){
 8003380:	2302      	movs	r3, #2
	const float t = 0.25 * x * x;
 8003382:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
	float sum = 1 + t;
 8003386:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	float const numc = M_PI * beta;
 800338a:	ed9f 4b51 	vldr	d4, [pc, #324]	; 80034d0 <make_kaiser+0x160>
		if(term < 1e-12 * sum)
 800338e:	ed9f 3b52 	vldr	d3, [pc, #328]	; 80034d8 <make_kaiser+0x168>
	float const numc = M_PI * beta;
 8003392:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003396:	eef7 1bc7 	vcvt.f32.f64	s3, d7
	const float t = 0.25 * x * x;
 800339a:	eeb7 7ae1 	vcvt.f64.f32	d7, s3
 800339e:	ee27 7b07 	vmul.f64	d7, d7, d7
 80033a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033a6:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
	float sum = 1 + t;
 80033aa:	ee75 5a25 	vadd.f32	s11, s10, s11
	float term = t;
 80033ae:	eef0 7a45 	vmov.f32	s15, s10
 80033b2:	e002      	b.n	80033ba <make_kaiser+0x4a>
	for(int k=2;k<40;k++){
 80033b4:	3301      	adds	r3, #1
 80033b6:	2b28      	cmp	r3, #40	; 0x28
 80033b8:	d016      	beq.n	80033e8 <make_kaiser+0x78>
		term *= t/(k*k);
 80033ba:	fb03 f203 	mul.w	r2, r3, r3
 80033be:	ee07 2a10 	vmov	s14, r2
 80033c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033c6:	eec5 6a07 	vdiv.f32	s13, s10, s14
 80033ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
		sum += term;
 80033ce:	ee75 5aa7 	vadd.f32	s11, s11, s15
		if(term < 1e-12 * sum)
 80033d2:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80033d6:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
 80033da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80033de:	eeb4 4bc6 	vcmpe.f64	d4, d6
 80033e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e6:	d5e5      	bpl.n	80033b4 <make_kaiser+0x44>
	float const inv_denom = 1. / i0(numc); // Inverse of denominator
	float const pc = 2.0 / (M-1);
 80033e8:	1e4d      	subs	r5, r1, #1
 80033ea:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80033ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0

	// The window is symmetrical, so compute only half of it and mirror
	// this won't compute the middle value in an odd-length sequence
	for(int n = 0; n < M/2; n++){
 80033f2:	084c      	lsrs	r4, r1, #1
	float const pc = 2.0 / (M-1);
 80033f4:	ee07 5a90 	vmov	s15, r5
 80033f8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80033fc:	ee81 0a25 	vdiv.f32	s0, s2, s11
 8003400:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8003404:	eef7 0bc7 	vcvt.f32.f64	s1, d7
	for(int n = 0; n < M/2; n++){
 8003408:	d04d      	beq.n	80034a6 <make_kaiser+0x136>
	const float t = 0.25 * x * x;
 800340a:	eeb5 3b00 	vmov.f64	d3, #80	; 0x3e800000  0.250
 800340e:	4686      	mov	lr, r0
		float const p = pc * n  - 1;
 8003410:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
	for(int n = 0; n < M/2; n++){
 8003414:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80034e0 <make_kaiser+0x170>
 8003418:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 800341c:	2200      	movs	r2, #0
		if(term < 1e-12 * sum)
 800341e:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 80034d8 <make_kaiser+0x168>
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 8003422:	ee21 7a87 	vmul.f32	s14, s3, s14
	for(int k=2;k<40;k++){
 8003426:	2302      	movs	r3, #2
	const float t = 0.25 * x * x;
 8003428:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800342c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003430:	ee27 7b03 	vmul.f64	d7, d7, d3
 8003434:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
	float sum = 1 + t;
 8003438:	ee75 5a01 	vadd.f32	s11, s10, s2
	float term = t;
 800343c:	eef0 7a45 	vmov.f32	s15, s10
 8003440:	e002      	b.n	8003448 <make_kaiser+0xd8>
	for(int k=2;k<40;k++){
 8003442:	3301      	adds	r3, #1
 8003444:	2b28      	cmp	r3, #40	; 0x28
 8003446:	d016      	beq.n	8003476 <make_kaiser+0x106>
		term *= t/(k*k);
 8003448:	fb03 f603 	mul.w	r6, r3, r3
 800344c:	ee07 6a10 	vmov	s14, r6
 8003450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003454:	eec5 6a07 	vdiv.f32	s13, s10, s14
 8003458:	ee67 7aa6 	vmul.f32	s15, s15, s13
		sum += term;
 800345c:	ee75 5aa7 	vadd.f32	s11, s11, s15
		if(term < 1e-12 * sum)
 8003460:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8003464:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
 8003468:	ee26 6b04 	vmul.f64	d6, d6, d4
 800346c:	eeb4 2bc6 	vcmpe.f64	d2, d6
 8003470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003474:	d5e5      	bpl.n	8003442 <make_kaiser+0xd2>
	for(int n = 0; n < M/2; n++){
 8003476:	3201      	adds	r2, #1
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 8003478:	ee65 5a80 	vmul.f32	s11, s11, s0
	for(int n = 0; n < M/2; n++){
 800347c:	42a2      	cmp	r2, r4
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 800347e:	ecee 5a01 	vstmia	lr!, {s11}
 8003482:	ed6c 5a01 	vstmdb	ip!, {s11}
	for(int n = 0; n < M/2; n++){
 8003486:	d00e      	beq.n	80034a6 <make_kaiser+0x136>
		float const p = pc * n  - 1;
 8003488:	ee07 2a90 	vmov	s15, r2
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 800348c:	eef0 6a41 	vmov.f32	s13, s2
		float const p = pc * n  - 1;
 8003490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003494:	eef0 7a48 	vmov.f32	s15, s16
 8003498:	eee0 7a87 	vfma.f32	s15, s1, s14
		window[M-1-n] = window[n] = i0(numc * sqrtf(1-p*p)) * inv_denom;
 800349c:	eee7 6ae7 	vfms.f32	s13, s15, s15
 80034a0:	eeb1 7ae6 	vsqrt.f32	s14, s13
 80034a4:	e7bd      	b.n	8003422 <make_kaiser+0xb2>
	}
	// If sequence length is odd, middle value is unity
	if(M & 1)
 80034a6:	07cb      	lsls	r3, r1, #31
 80034a8:	d505      	bpl.n	80034b6 <make_kaiser+0x146>
		window[(M-1)/2] = 1; // The -1 is actually unnecessary
 80034aa:	086d      	lsrs	r5, r5, #1
 80034ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034b0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80034b4:	6003      	str	r3, [r0, #0]

	return 0;
}
 80034b6:	2000      	movs	r0, #0
 80034b8:	ecbd 8b02 	vpop	{d8}
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
	assert(window != NULL);
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <make_kaiser+0x174>)
 80034c0:	f44f 71c3 	mov.w	r1, #390	; 0x186
 80034c4:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <make_kaiser+0x178>)
 80034c6:	4809      	ldr	r0, [pc, #36]	; (80034ec <make_kaiser+0x17c>)
 80034c8:	f00e fd04 	bl	8011ed4 <__assert_func>
 80034cc:	f3af 8000 	nop.w
 80034d0:	54442d18 	.word	0x54442d18
 80034d4:	400921fb 	.word	0x400921fb
 80034d8:	812dea11 	.word	0x812dea11
 80034dc:	3d719799 	.word	0x3d719799
 80034e0:	00000000 	.word	0x00000000
 80034e4:	08018fc8 	.word	0x08018fc8
 80034e8:	08018ff0 	.word	0x08018ff0
 80034ec:	08018fd8 	.word	0x08018fd8

080034f0 <SetMask>:
		float f;
		if(n <= N/2)
			f = (float)n / N;
		else
			f = (float)(n-N) / N;
		if(f >= low / AudioRate && f <= high /AudioRate)
 80034f0:	4b3e      	ldr	r3, [pc, #248]	; (80035ec <SetMask+0xfc>)
	for(int n=0;n<N;n++){
 80034f2:	2200      	movs	r2, #0
 80034f4:	493e      	ldr	r1, [pc, #248]	; (80035f0 <SetMask+0x100>)
			FFTmask[n * 2] = 1024;
		else
			FFTmask[n * 2] = 0;
 80034f6:	2000      	movs	r0, #0
		if(f >= low / AudioRate && f <= high /AudioRate)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
			f = (float)(n-N) / N;
 80034fc:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 80035f4 <SetMask+0x104>
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003500:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8003504:	eec0 5aa7 	vdiv.f32	s11, s1, s15
{
 8003508:	b5b0      	push	{r4, r5, r7, lr}
 800350a:	af00      	add	r7, sp, #0
	float kaiser_window[M];
 800350c:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
			FFTmask[n * 2] = 1024;
 8003510:	f04f 4489 	mov.w	r4, #1149239296	; 0x44800000
	float kaiser_window[M];
 8003514:	466d      	mov	r5, sp
	for(int n=0;n<N;n++){
 8003516:	e00c      	b.n	8003532 <SetMask+0x42>
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003518:	eef4 5ae7 	vcmpe.f32	s11, s15
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	db1d      	blt.n	800355e <SetMask+0x6e>
	for(int n=0;n<N;n++){
 8003522:	3201      	adds	r2, #1
			FFTmask[n * 2] = 1024;
 8003524:	f841 4c04 	str.w	r4, [r1, #-4]
		FFTmask[n * 2 + 1] = 0; // Imaginary part
 8003528:	f841 0b08 	str.w	r0, [r1], #8
	for(int n=0;n<N;n++){
 800352c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003530:	d01d      	beq.n	800356e <SetMask+0x7e>
			f = (float)n / N;
 8003532:	ee07 2a90 	vmov	s15, r2
			f = (float)(n-N) / N;
 8003536:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
		if(n <= N/2)
 800353a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
			f = (float)n / N;
 800353e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			f = (float)(n-N) / N;
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			f = (float)n / N;
 800354a:	bfd4      	ite	le
 800354c:	ee67 7a06 	vmulle.f32	s15, s14, s12
			f = (float)(n-N) / N;
 8003550:	ee67 7a86 	vmulgt.f32	s15, s15, s12
		if(f >= low / AudioRate && f <= high /AudioRate)
 8003554:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	d9dc      	bls.n	8003518 <SetMask+0x28>
	for(int n=0;n<N;n++){
 800355e:	3201      	adds	r2, #1
			FFTmask[n * 2] = 0;
 8003560:	f841 0c04 	str.w	r0, [r1, #-4]
		FFTmask[n * 2 + 1] = 0; // Imaginary part
 8003564:	f841 0b08 	str.w	r0, [r1], #8
	for(int n=0;n<N;n++){
 8003568:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800356c:	d1e1      	bne.n	8003532 <SetMask+0x42>
	}


	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTmask, INVERSEFFT, NOREVERSE);
 800356e:	2301      	movs	r3, #1
 8003570:	4c21      	ldr	r4, [pc, #132]	; (80035f8 <SetMask+0x108>)
 8003572:	4822      	ldr	r0, [pc, #136]	; (80035fc <SetMask+0x10c>)
 8003574:	461a      	mov	r2, r3
 8003576:	4621      	mov	r1, r4
 8003578:	f7fd fc04 	bl	8000d84 <arm_cfft_f32>
	make_kaiser(kaiser_window,M,Kaiser_beta); //TODO: integrate coefficient in window shaping loop
 800357c:	f240 2101 	movw	r1, #513	; 0x201
 8003580:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003584:	4628      	mov	r0, r5
 8003586:	f7ff fef3 	bl	8003370 <make_kaiser>


	// Round trip through FFT/IFFT scales by N
	float const gain = 1./N;
	// Shift to beginning of buffer to make causal; apply window and gain
	for(int n = M - 1; n >= 0; n--){
 800358a:	f605 0004 	addw	r0, r5, #2052	; 0x804
 800358e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
	make_kaiser(kaiser_window,M,Kaiser_beta); //TODO: integrate coefficient in window shaping loop
 8003592:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8003596:	eddf 6a17 	vldr	s13, [pc, #92]	; 80035f4 <SetMask+0x104>
		FFTmask[n * 2] = FFTmask[((n-M/2+N)%N) * 2] * kaiser_window[n] * gain;
 800359a:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800359e:	ed70 7a01 	vldmdb	r0!, {s15}
 80035a2:	4615      	mov	r5, r2
	for(int n = M - 1; n >= 0; n--){
 80035a4:	3a08      	subs	r2, #8
		FFTmask[n * 2] = FFTmask[((n-M/2+N)%N) * 2] * kaiser_window[n] * gain;
 80035a6:	eb04 0cc3 	add.w	ip, r4, r3, lsl #3
 80035aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
	for(int n = M - 1; n >= 0; n--){
 80035ae:	42a5      	cmp	r5, r4
		FFTmask[n * 2] = FFTmask[((n-M/2+N)%N) * 2] * kaiser_window[n] * gain;
 80035b0:	f101 31ff 	add.w	r1, r1, #4294967295
 80035b4:	ed9c 7a00 	vldr	s14, [ip]
 80035b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035bc:	ed82 7a02 	vstr	s14, [r2, #8]
	//	FFTmask[n * 2 + 1] = FFTmask[((n-M/2+N)%N) * 2 + 1];
		FFTmask[n * 2 + 1] = FFTmask[((n-M/2+N)%N) * 2 + 1] * kaiser_window[n] * gain;
 80035c0:	ed9c 7a01 	vldr	s14, [ip, #4]
 80035c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c8:	edc2 7a03 	vstr	s15, [r2, #12]
	for(int n = M - 1; n >= 0; n--){
 80035cc:	d1e5      	bne.n	800359a <SetMask+0xaa>
	}
	// Pad with zeroes on right side
	memset(FFTmask + M * 2,0,(N-M)* 2 * sizeof(*FFTmask));
 80035ce:	f640 72f8 	movw	r2, #4088	; 0xff8
 80035d2:	2100      	movs	r1, #0
 80035d4:	480a      	ldr	r0, [pc, #40]	; (8003600 <SetMask+0x110>)
 80035d6:	f00e fce9 	bl	8011fac <memset>


	// Now back to frequency domain
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTmask, DIRECTFFT, NOREVERSE);
 80035da:	2301      	movs	r3, #1
 80035dc:	2200      	movs	r2, #0
 80035de:	4906      	ldr	r1, [pc, #24]	; (80035f8 <SetMask+0x108>)
 80035e0:	4806      	ldr	r0, [pc, #24]	; (80035fc <SetMask+0x10c>)
 80035e2:	f7fd fbcf 	bl	8000d84 <arm_cfft_f32>

			blkCnt--;
		}
	}
#endif
}
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bdb0      	pop	{r4, r5, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	24000ee0 	.word	0x24000ee0
 80035f0:	20006804 	.word	0x20006804
 80035f4:	3a800000 	.word	0x3a800000
 80035f8:	20006800 	.word	0x20006800
 80035fc:	08018ee0 	.word	0x08018ee0
 8003600:	20007808 	.word	0x20007808

08003604 <pack_call>:
	return m;
}

static long
unsigned int pack_call(char const *callsign)
{
 8003604:	b510      	push	{r4, lr}
	unsigned int i;
	long unsigned int n;
	char call6[6];
	memset(call6,' ',sizeof(call6));
 8003606:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
{
 800360a:	b082      	sub	sp, #8
 800360c:	4604      	mov	r4, r0
	memset(call6,' ',sizeof(call6));
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f8ad 3004 	strh.w	r3, [sp, #4]
	// callsign is 6 characters in length. Exactly.
	size_t call_len = strlen(callsign);
 8003614:	f7fc fec4 	bl	80003a0 <strlen>
	if( call_len > 6 ) {
 8003618:	2806      	cmp	r0, #6
 800361a:	f200 808f 	bhi.w	800373c <pack_call+0x138>
		return 0;
	}
	if( isdigit((int) callsign[2]) ) {
 800361e:	78a2      	ldrb	r2, [r4, #2]
 8003620:	4b5b      	ldr	r3, [pc, #364]	; (8003790 <pack_call+0x18c>)
 8003622:	5cd2      	ldrb	r2, [r2, r3]
 8003624:	0752      	lsls	r2, r2, #29
 8003626:	d57c      	bpl.n	8003722 <pack_call+0x11e>
		for (i=0; i<call_len; i++) {
 8003628:	b120      	cbz	r0, 8003634 <pack_call+0x30>
			call6[i]=callsign[i];
 800362a:	4602      	mov	r2, r0
 800362c:	4621      	mov	r1, r4
 800362e:	4668      	mov	r0, sp
 8003630:	f00e fcae 	bl	8011f90 <memcpy>
		for (i=1; i<call_len+1; i++) {
			call6[i]=callsign[i-1];
		}
	}
	for (i=0; i<6; i++) {
		call6[i]=get_callsign_character_code(call6[i]);
 8003634:	f89d 3000 	ldrb.w	r3, [sp]
	if( ch >=48 && ch <=57 ) { //0-9
 8003638:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800363c:	fa5f fe8c 	uxtb.w	lr, ip
 8003640:	f1be 0f09 	cmp.w	lr, #9
 8003644:	d908      	bls.n	8003658 <pack_call+0x54>
	if( ch == 32 ) {  //space
 8003646:	2b20      	cmp	r3, #32
 8003648:	f000 809a 	beq.w	8003780 <pack_call+0x17c>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 800364c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003650:	2a19      	cmp	r2, #25
 8003652:	d976      	bls.n	8003742 <pack_call+0x13e>
	return -1;
 8003654:	f04f 0eff 	mov.w	lr, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003658:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 800365c:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003660:	fa5f f48c 	uxtb.w	r4, ip
 8003664:	2c09      	cmp	r4, #9
 8003666:	d907      	bls.n	8003678 <pack_call+0x74>
	if( ch == 32 ) {  //space
 8003668:	2b20      	cmp	r3, #32
 800366a:	f000 8087 	beq.w	800377c <pack_call+0x178>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 800366e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003672:	2a19      	cmp	r2, #25
 8003674:	d979      	bls.n	800376a <pack_call+0x166>
	return -1;
 8003676:	24ff      	movs	r4, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003678:	f89d 3002 	ldrb.w	r3, [sp, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 800367c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	2a09      	cmp	r2, #9
 8003684:	d906      	bls.n	8003694 <pack_call+0x90>
	if( ch == 32 ) {  //space
 8003686:	2b20      	cmp	r3, #32
 8003688:	d076      	beq.n	8003778 <pack_call+0x174>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 800368a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800368e:	2a19      	cmp	r2, #25
 8003690:	d968      	bls.n	8003764 <pack_call+0x160>
	return -1;
 8003692:	22ff      	movs	r2, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003694:	f89d 1003 	ldrb.w	r1, [sp, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 8003698:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b09      	cmp	r3, #9
 80036a0:	d906      	bls.n	80036b0 <pack_call+0xac>
	if( ch == 32 ) {  //space
 80036a2:	2920      	cmp	r1, #32
 80036a4:	d066      	beq.n	8003774 <pack_call+0x170>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80036a6:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80036aa:	2b19      	cmp	r3, #25
 80036ac:	d956      	bls.n	800375c <pack_call+0x158>
	return -1;
 80036ae:	23ff      	movs	r3, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80036b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
	if( ch >=48 && ch <=57 ) { //0-9
 80036b4:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 80036b8:	b2c9      	uxtb	r1, r1
 80036ba:	2909      	cmp	r1, #9
 80036bc:	d906      	bls.n	80036cc <pack_call+0xc8>
	if( ch == 32 ) {  //space
 80036be:	2820      	cmp	r0, #32
 80036c0:	d061      	beq.n	8003786 <pack_call+0x182>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80036c2:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80036c6:	2919      	cmp	r1, #25
 80036c8:	d940      	bls.n	800374c <pack_call+0x148>
	return -1;
 80036ca:	21ff      	movs	r1, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80036cc:	f89d c005 	ldrb.w	ip, [sp, #5]
	if( ch >=48 && ch <=57 ) { //0-9
 80036d0:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 80036d4:	b2c0      	uxtb	r0, r0
 80036d6:	2809      	cmp	r0, #9
 80036d8:	d907      	bls.n	80036ea <pack_call+0xe6>
	if( ch == 32 ) {  //space
 80036da:	f1bc 0f20 	cmp.w	ip, #32
 80036de:	d054      	beq.n	800378a <pack_call+0x186>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80036e0:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 80036e4:	2819      	cmp	r0, #25
 80036e6:	d935      	bls.n	8003754 <pack_call+0x150>
	return -1;
 80036e8:	20ff      	movs	r0, #255	; 0xff
	}
	n = call6[0];
	n = n*36+call6[1];
 80036ea:	f04f 0c24 	mov.w	ip, #36	; 0x24
	n = n*10+call6[2];
	n = n*27+call6[3]-10;
 80036ee:	3b0a      	subs	r3, #10
	n = n*27+call6[4]-10;
 80036f0:	390a      	subs	r1, #10
	n = n*27+call6[5]-10;
 80036f2:	380a      	subs	r0, #10
	n = n*36+call6[1];
 80036f4:	fb1c 4c0e 	smlabb	ip, ip, lr, r4
	n = n*10+call6[2];
 80036f8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80036fc:	eb02 024c 	add.w	r2, r2, ip, lsl #1
	n = n*27+call6[3]-10;
 8003700:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003704:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8003708:	4413      	add	r3, r2
	n = n*27+call6[4]-10;
 800370a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800370e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003712:	440b      	add	r3, r1
	n = n*27+call6[5]-10;
 8003714:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003718:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800371c:	4418      	add	r0, r3
	return n;
}
 800371e:	b002      	add	sp, #8
 8003720:	bd10      	pop	{r4, pc}
	} else if( isdigit((int) callsign[1]) ) {
 8003722:	7862      	ldrb	r2, [r4, #1]
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	075b      	lsls	r3, r3, #29
 8003728:	d584      	bpl.n	8003634 <pack_call+0x30>
		for (i=1; i<call_len+1; i++) {
 800372a:	2800      	cmp	r0, #0
 800372c:	d082      	beq.n	8003634 <pack_call+0x30>
			call6[i]=callsign[i-1];
 800372e:	4602      	mov	r2, r0
 8003730:	4621      	mov	r1, r4
 8003732:	f10d 0001 	add.w	r0, sp, #1
 8003736:	f00e fc2b 	bl	8011f90 <memcpy>
 800373a:	e77b      	b.n	8003634 <pack_call+0x30>
		return 0;
 800373c:	2000      	movs	r0, #0
}
 800373e:	b002      	add	sp, #8
 8003740:	bd10      	pop	{r4, pc}
		return ch-55;
 8003742:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 8003746:	fa5f fe8c 	uxtb.w	lr, ip
 800374a:	e785      	b.n	8003658 <pack_call+0x54>
 800374c:	f1a0 0137 	sub.w	r1, r0, #55	; 0x37
 8003750:	b2c9      	uxtb	r1, r1
 8003752:	e7bb      	b.n	80036cc <pack_call+0xc8>
 8003754:	f1ac 0037 	sub.w	r0, ip, #55	; 0x37
 8003758:	b2c0      	uxtb	r0, r0
 800375a:	e7c6      	b.n	80036ea <pack_call+0xe6>
 800375c:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e7a5      	b.n	80036b0 <pack_call+0xac>
 8003764:	3b37      	subs	r3, #55	; 0x37
 8003766:	b2da      	uxtb	r2, r3
 8003768:	e794      	b.n	8003694 <pack_call+0x90>
 800376a:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 800376e:	fa5f f48c 	uxtb.w	r4, ip
 8003772:	e781      	b.n	8003678 <pack_call+0x74>
		return 36;
 8003774:	2324      	movs	r3, #36	; 0x24
 8003776:	e79b      	b.n	80036b0 <pack_call+0xac>
 8003778:	2224      	movs	r2, #36	; 0x24
 800377a:	e78b      	b.n	8003694 <pack_call+0x90>
 800377c:	2424      	movs	r4, #36	; 0x24
 800377e:	e77b      	b.n	8003678 <pack_call+0x74>
 8003780:	f04f 0e24 	mov.w	lr, #36	; 0x24
 8003784:	e768      	b.n	8003658 <pack_call+0x54>
 8003786:	2124      	movs	r1, #36	; 0x24
 8003788:	e7a0      	b.n	80036cc <pack_call+0xc8>
 800378a:	2024      	movs	r0, #36	; 0x24
 800378c:	e7ad      	b.n	80036ea <pack_call+0xe6>
 800378e:	bf00      	nop
 8003790:	0801959d 	.word	0x0801959d

08003794 <get_wspr_channel_symbols>:
	memcpy(sym, tmp, sizeof(tmp));
}

int
get_wspr_channel_symbols(char* rawmessage, uint8_t* symbols)
{
 8003794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,
			0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,
			0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,1,0,
			0,0
	};
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003798:	4abb      	ldr	r2, [pc, #748]	; (8003a88 <get_wspr_channel_symbols+0x2f4>)
	char *callsign, *grid, *powstr;
	char grid4[5], message[23];

	memset(message,0,sizeof(char)*23);
 800379a:	2300      	movs	r3, #0
{
 800379c:	4605      	mov	r5, r0
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 800379e:	4614      	mov	r4, r2
{
 80037a0:	ed2d 8b02 	vpush	{d8}
 80037a4:	b0ed      	sub	sp, #436	; 0x1b4
 80037a6:	af00      	add	r7, sp, #0
	i=0;
	while ( rawmessage[i] != 0 && i<23 ) {
 80037a8:	f890 c000 	ldrb.w	ip, [r0]
	memset(message,0,sizeof(char)*23);
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80037ae:	f107 0634 	add.w	r6, r7, #52	; 0x34
{
 80037b2:	6039      	str	r1, [r7, #0]
	memset(message,0,sizeof(char)*23);
 80037b4:	f8c7 302f 	str.w	r3, [r7, #47]	; 0x2f
 80037b8:	e9c7 3307 	strd	r3, r3, [r7, #28]
 80037bc:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80037c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80037c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80037c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037cc:	e886 0003 	stmia.w	r6, {r0, r1}
	while ( rawmessage[i] != 0 && i<23 ) {
 80037d0:	f1bc 0f00 	cmp.w	ip, #0
 80037d4:	d00d      	beq.n	80037f2 <get_wspr_channel_symbols+0x5e>
 80037d6:	f107 021c 	add.w	r2, r7, #28
 80037da:	1c6b      	adds	r3, r5, #1
 80037dc:	43e8      	mvns	r0, r5
 80037de:	4664      	mov	r4, ip
 80037e0:	e000      	b.n	80037e4 <get_wspr_channel_symbols+0x50>
 80037e2:	b134      	cbz	r4, 80037f2 <get_wspr_channel_symbols+0x5e>
		message[i]=rawmessage[i];
 80037e4:	f802 4b01 	strb.w	r4, [r2], #1
	while ( rawmessage[i] != 0 && i<23 ) {
 80037e8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80037ec:	18c1      	adds	r1, r0, r3
 80037ee:	2917      	cmp	r1, #23
 80037f0:	d1f7      	bne.n	80037e2 <get_wspr_channel_symbols+0x4e>
		i++;
	}

	size_t i1=strcspn(message," ");
 80037f2:	49a6      	ldr	r1, [pc, #664]	; (8003a8c <get_wspr_channel_symbols+0x2f8>)
 80037f4:	f107 001c 	add.w	r0, r7, #28
 80037f8:	f00f f9e2 	bl	8012bc0 <strcspn>
	size_t i2=strcspn(message,"/");
 80037fc:	49a4      	ldr	r1, [pc, #656]	; (8003a90 <get_wspr_channel_symbols+0x2fc>)
	size_t i1=strcspn(message," ");
 80037fe:	4604      	mov	r4, r0
	size_t i2=strcspn(message,"/");
 8003800:	f107 001c 	add.w	r0, r7, #28
 8003804:	f00f f9dc 	bl	8012bc0 <strcspn>
	size_t i3=strcspn(message,"<");
 8003808:	49a2      	ldr	r1, [pc, #648]	; (8003a94 <get_wspr_channel_symbols+0x300>)
	size_t i2=strcspn(message,"/");
 800380a:	4606      	mov	r6, r0
	size_t i3=strcspn(message,"<");
 800380c:	f107 001c 	add.w	r0, r7, #28
 8003810:	f00f f9d6 	bl	8012bc0 <strcspn>
	size_t mlen=strlen(message);

	// Use the presence and/or absence of "<" and "/" to decide what
	// type of message. No sanity checks! Beware!

	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003814:	3c04      	subs	r4, #4
	size_t i4=strcspn(message,">");
 8003816:	49a0      	ldr	r1, [pc, #640]	; (8003a98 <get_wspr_channel_symbols+0x304>)
	size_t i3=strcspn(message,"<");
 8003818:	4605      	mov	r5, r0
	size_t i4=strcspn(message,">");
 800381a:	f107 001c 	add.w	r0, r7, #28
 800381e:	f00f f9cf 	bl	8012bc0 <strcspn>
 8003822:	4680      	mov	r8, r0
	size_t mlen=strlen(message);
 8003824:	f107 001c 	add.w	r0, r7, #28
 8003828:	f7fc fdba 	bl	80003a0 <strlen>
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 800382c:	2c02      	cmp	r4, #2
	size_t mlen=strlen(message);
 800382e:	4603      	mov	r3, r0
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003830:	d804      	bhi.n	800383c <get_wspr_channel_symbols+0xa8>
 8003832:	4286      	cmp	r6, r0
 8003834:	d102      	bne.n	800383c <get_wspr_channel_symbols+0xa8>
 8003836:	4285      	cmp	r5, r0
 8003838:	f000 8136 	beq.w	8003aa8 <get_wspr_channel_symbols+0x314>
		for (i=0; i<4; i++) {
			grid4[i]=get_locator_character_code(*(grid+i));
		}
		m = pack_grid4_power(grid4,power);

	} else if ( i3 == 0 && i4 < mlen ) {
 800383c:	b90d      	cbnz	r5, 8003842 <get_wspr_channel_symbols+0xae>
 800383e:	4598      	cmp	r8, r3
 8003840:	d37e      	bcc.n	8003940 <get_wspr_channel_symbols+0x1ac>
		for(i=0; i<j-1; i++) {
			grid6[i]=grid[i+1];
		}
		grid6[5]=grid[0];
		n = pack_call(grid6);
	} else if ( i2 < mlen ) {  // just looks for a right slash
 8003842:	429e      	cmp	r6, r3
 8003844:	d307      	bcc.n	8003856 <get_wspr_channel_symbols+0xc2>
		pack_prefix(callsign, &n1, &ng, &nadd);
		ntype=power + 1 + nadd;
		m=128*ng+ntype+64;
		n=n1;
	} else {
		return 0;
 8003846:	2000      	movs	r0, #0

	for (i=0; i < 162; i++) {
		symbols[i] = 2 * channelbits[i] + pr3[i];
	}
	return 1;
}
 8003848:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 800384c:	46bd      	mov	sp, r7
 800384e:	ecbd 8b02 	vpop	{d8}
 8003852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		callsign = strtok (message," ");
 8003856:	498d      	ldr	r1, [pc, #564]	; (8003a8c <get_wspr_channel_symbols+0x2f8>)
 8003858:	f107 001c 	add.w	r0, r7, #28
 800385c:	f00f f9c2 	bl	8012be4 <strtok>
 8003860:	4604      	mov	r4, r0
 8003862:	4682      	mov	sl, r0
		if( i2==0 || i2>strlen(callsign) ) return 0; //guards against pathological case
 8003864:	2e00      	cmp	r6, #0
 8003866:	d0ee      	beq.n	8003846 <get_wspr_channel_symbols+0xb2>
 8003868:	f7fc fd9a 	bl	80003a0 <strlen>
 800386c:	42b0      	cmp	r0, r6
 800386e:	d3ea      	bcc.n	8003846 <get_wspr_channel_symbols+0xb2>
		powstr = strtok (NULL," ");
 8003870:	4986      	ldr	r1, [pc, #536]	; (8003a8c <get_wspr_channel_symbols+0x2f8>)
 8003872:	2000      	movs	r0, #0
 8003874:	f00f f9b6 	bl	8012be4 <strtok>
		int power = atoi (powstr);
 8003878:	f00e fb4a 	bl	8011f10 <atoi>
		if( power < 0 ) power=0;
 800387c:	283c      	cmp	r0, #60	; 0x3c
 800387e:	4605      	mov	r5, r0
		power=power+nu[power%10];
 8003880:	4b86      	ldr	r3, [pc, #536]	; (8003a9c <get_wspr_channel_symbols+0x308>)
 8003882:	bfa8      	it	ge
 8003884:	253c      	movge	r5, #60	; 0x3c
	size_t i1 = strcspn(callsign,"/");
 8003886:	4982      	ldr	r1, [pc, #520]	; (8003a90 <get_wspr_channel_symbols+0x2fc>)
 8003888:	4620      	mov	r0, r4
 800388a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
		power=power+nu[power%10];
 800388e:	fba3 2305 	umull	r2, r3, r3, r5
 8003892:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003896:	08db      	lsrs	r3, r3, #3
 8003898:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800389c:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	441d      	add	r5, r3
	size_t i1 = strcspn(callsign,"/");
 80038a6:	f00f f98b 	bl	8012bc0 <strcspn>
	if( callsign[i1+2] == 0 ) {
 80038aa:	f100 0802 	add.w	r8, r0, #2
	size_t i1 = strcspn(callsign,"/");
 80038ae:	4606      	mov	r6, r0
	if( callsign[i1+2] == 0 ) {
 80038b0:	f814 3008 	ldrb.w	r3, [r4, r8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 843f 	beq.w	8004138 <get_wspr_channel_symbols+0x9a4>
	} else if( callsign[i1+3]==0 ) {
 80038ba:	eb04 0900 	add.w	r9, r4, r0
 80038be:	f899 3003 	ldrb.w	r3, [r9, #3]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 8522 	bne.w	800430c <get_wspr_channel_symbols+0xb78>
		for (i=0; i<i1; i++) {
 80038c8:	b300      	cbz	r0, 800390c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 80038ca:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 80038cc:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 80038ce:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 80038d2:	d01b      	beq.n	800390c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 80038d4:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 80038d6:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 80038d8:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 80038dc:	d016      	beq.n	800390c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 80038de:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 80038e0:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 80038e2:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 80038e6:	d011      	beq.n	800390c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 80038e8:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 80038ea:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 80038ec:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 80038f0:	d00c      	beq.n	800390c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 80038f2:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 80038f4:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 80038f6:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 80038fa:	d007      	beq.n	800390c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 80038fc:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 80038fe:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 8003900:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8003904:	d002      	beq.n	800390c <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8003906:	79a3      	ldrb	r3, [r4, #6]
 8003908:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		*n=pack_call(call6);
 800390c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003910:	4618      	mov	r0, r3
 8003912:	ee08 3a10 	vmov	s16, r3
 8003916:	f7ff fe75 	bl	8003604 <pack_call>
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 800391a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800391e:	f81a 2008 	ldrb.w	r2, [sl, r8]
		*n=pack_call(call6);
 8003922:	4604      	mov	r4, r0
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 8003924:	3b30      	subs	r3, #48	; 0x30
 8003926:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800392a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		*m=60000 + 26 + *m;
 800392e:	f64e 234a 	movw	r3, #59978	; 0xea4a
 8003932:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8003934:	01db      	lsls	r3, r3, #7
		*nadd=1;
 8003936:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 8003938:	3541      	adds	r5, #65	; 0x41
 800393a:	4428      	add	r0, r5
 800393c:	18c5      	adds	r5, r0, r3
		n=n1;
 800393e:	e11a      	b.n	8003b76 <get_wspr_channel_symbols+0x3e2>
		callsign=strtok(message,"<> ");
 8003940:	4957      	ldr	r1, [pc, #348]	; (8003aa0 <get_wspr_channel_symbols+0x30c>)
 8003942:	f107 001c 	add.w	r0, r7, #28
 8003946:	f00f f94d 	bl	8012be4 <strtok>
		grid=strtok(NULL," ");
 800394a:	4950      	ldr	r1, [pc, #320]	; (8003a8c <get_wspr_channel_symbols+0x2f8>)
		callsign=strtok(message,"<> ");
 800394c:	4606      	mov	r6, r0
		grid=strtok(NULL," ");
 800394e:	2000      	movs	r0, #0
 8003950:	f00f f948 	bl	8012be4 <strtok>
		powstr=strtok(NULL," ");
 8003954:	494d      	ldr	r1, [pc, #308]	; (8003a8c <get_wspr_channel_symbols+0x2f8>)
		grid=strtok(NULL," ");
 8003956:	4604      	mov	r4, r0
		powstr=strtok(NULL," ");
 8003958:	2000      	movs	r0, #0
 800395a:	f00f f943 	bl	8012be4 <strtok>
		callsign=strtok(message,"<> ");
 800395e:	46b0      	mov	r8, r6
		int power = atoi(powstr);
 8003960:	f00e fad6 	bl	8011f10 <atoi>
		if( power < 0 ) power=0;
 8003964:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 8003966:	4b4d      	ldr	r3, [pc, #308]	; (8003a9c <get_wspr_channel_symbols+0x308>)
 8003968:	bfa8      	it	ge
 800396a:	203c      	movge	r0, #60	; 0x3c
 800396c:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8003970:	4630      	mov	r0, r6
		power=power+nu[power%10];
 8003972:	fba3 1302 	umull	r1, r3, r3, r2
 8003976:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800397a:	08db      	lsrs	r3, r3, #3
 800397c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003980:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8003984:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8003988:	442a      	add	r2, r5
		ntype=-(power+1);
 800398a:	43d5      	mvns	r5, r2
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 800398c:	f7fc fd08 	bl	80003a0 <strlen>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003990:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <get_wspr_channel_symbols+0x310>)
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8003992:	07b1      	lsls	r1, r6, #30
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003994:	4403      	add	r3, r0
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8003996:	f000 8296 	beq.w	8003ec6 <get_wspr_channel_symbols+0x732>
	} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {
 800399a:	4632      	mov	r2, r6
 800399c:	07d2      	lsls	r2, r2, #31
 800399e:	f140 8366 	bpl.w	800406e <get_wspr_channel_symbols+0x8da>
		while (length > 12)
 80039a2:	280c      	cmp	r0, #12
 80039a4:	f240 8514 	bls.w	80043d0 <get_wspr_channel_symbols+0xc3c>
 80039a8:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80039aa:	461a      	mov	r2, r3
 80039ac:	4619      	mov	r1, r3
 80039ae:	46a1      	mov	r9, r4
 80039b0:	469c      	mov	ip, r3
			c += ((uint32_t)k[10])<<16;
 80039b2:	f816 ec02 	ldrb.w	lr, [r6, #-2]
			length -= 12;
 80039b6:	380c      	subs	r0, #12
			c += ((uint32_t)k[9])<<8;
 80039b8:	f816 3c03 	ldrb.w	r3, [r6, #-3]
			c += ((uint32_t)k[10])<<16;
 80039bc:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
			c += ((uint32_t)k[11])<<24;
 80039c0:	f816 8c01 	ldrb.w	r8, [r6, #-1]
		while (length > 12)
 80039c4:	280c      	cmp	r0, #12
			c += ((uint32_t)k[11])<<24;
 80039c6:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
			a += ((uint32_t)k[2])<<16;
 80039ca:	f816 3c0a 	ldrb.w	r3, [r6, #-10]
 80039ce:	ea4f 4403 	mov.w	r4, r3, lsl #16
			c += k[8];
 80039d2:	f816 3c04 	ldrb.w	r3, [r6, #-4]
			c += ((uint32_t)k[11])<<24;
 80039d6:	449e      	add	lr, r3
			a += ((uint32_t)k[1])<<8;
 80039d8:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
			c += ((uint32_t)k[11])<<24;
 80039dc:	eb0e 6e08 	add.w	lr, lr, r8, lsl #24
			mix(a,b,c);
 80039e0:	eb04 2403 	add.w	r4, r4, r3, lsl #8
			b += ((uint32_t)k[6])<<16;
 80039e4:	f816 3c06 	ldrb.w	r3, [r6, #-6]
			c += ((uint32_t)k[11])<<24;
 80039e8:	4472      	add	r2, lr
			a += k[0];
 80039ea:	f816 ec0c 	ldrb.w	lr, [r6, #-12]
			b += ((uint32_t)k[6])<<16;
 80039ee:	ea4f 4303 	mov.w	r3, r3, lsl #16
			mix(a,b,c);
 80039f2:	4474      	add	r4, lr
			b += ((uint32_t)k[5])<<8;
 80039f4:	f816 ec07 	ldrb.w	lr, [r6, #-7]
			b += ((uint32_t)k[7])<<24;
 80039f8:	eb03 230e 	add.w	r3, r3, lr, lsl #8
			a += ((uint32_t)k[3])<<24;
 80039fc:	f816 ec09 	ldrb.w	lr, [r6, #-9]
			mix(a,b,c);
 8003a00:	eb04 640e 	add.w	r4, r4, lr, lsl #24
 8003a04:	46b6      	mov	lr, r6
		while (length > 12)
 8003a06:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 8003a0a:	eba4 0402 	sub.w	r4, r4, r2
 8003a0e:	4464      	add	r4, ip
			b += k[4];
 8003a10:	f816 cc14 	ldrb.w	ip, [r6, #-20]
			b += ((uint32_t)k[7])<<24;
 8003a14:	4463      	add	r3, ip
 8003a16:	f816 cc11 	ldrb.w	ip, [r6, #-17]
			mix(a,b,c);
 8003a1a:	ea84 7432 	eor.w	r4, r4, r2, ror #28
			b += ((uint32_t)k[7])<<24;
 8003a1e:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 8003a22:	440b      	add	r3, r1
			mix(a,b,c);
 8003a24:	4621      	mov	r1, r4
 8003a26:	441a      	add	r2, r3
 8003a28:	eba3 0304 	sub.w	r3, r3, r4
 8003a2c:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8003a30:	4411      	add	r1, r2
 8003a32:	eba2 0203 	sub.w	r2, r2, r3
 8003a36:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8003a3a:	440b      	add	r3, r1
 8003a3c:	eba1 0102 	sub.w	r1, r1, r2
 8003a40:	ea81 4432 	eor.w	r4, r1, r2, ror #16
 8003a44:	441a      	add	r2, r3
 8003a46:	eba3 0304 	sub.w	r3, r3, r4
 8003a4a:	eb04 0c02 	add.w	ip, r4, r2
 8003a4e:	ea83 3174 	eor.w	r1, r3, r4, ror #13
 8003a52:	eba2 0201 	sub.w	r2, r2, r1
 8003a56:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8003a5a:	4461      	add	r1, ip
		while (length > 12)
 8003a5c:	d8a9      	bhi.n	80039b2 <get_wspr_channel_symbols+0x21e>
 8003a5e:	464c      	mov	r4, r9
 8003a60:	4663      	mov	r3, ip
 8003a62:	46f0      	mov	r8, lr
		switch(length)                   /* all the case statements fall through */
 8003a64:	3801      	subs	r0, #1
 8003a66:	280b      	cmp	r0, #11
 8003a68:	f200 82bd 	bhi.w	8003fe6 <get_wspr_channel_symbols+0x852>
 8003a6c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003a70:	029b029f 	.word	0x029b029f
 8003a74:	02930297 	.word	0x02930297
 8003a78:	028c0290 	.word	0x028c0290
 8003a7c:	02840288 	.word	0x02840288
 8003a80:	027d0281 	.word	0x027d0281
 8003a84:	02750279 	.word	0x02750279
 8003a88:	080160a0 	.word	0x080160a0
 8003a8c:	080191d4 	.word	0x080191d4
 8003a90:	08018ffc 	.word	0x08018ffc
 8003a94:	08019000 	.word	0x08019000
 8003a98:	08019004 	.word	0x08019004
 8003a9c:	cccccccd 	.word	0xcccccccd
 8003aa0:	08019008 	.word	0x08019008
 8003aa4:	deadbf81 	.word	0xdeadbf81
		callsign = strtok(message," ");
 8003aa8:	49ce      	ldr	r1, [pc, #824]	; (8003de4 <get_wspr_channel_symbols+0x650>)
 8003aaa:	f107 001c 	add.w	r0, r7, #28
 8003aae:	f00f f899 	bl	8012be4 <strtok>
		grid = strtok(NULL," ");
 8003ab2:	49cc      	ldr	r1, [pc, #816]	; (8003de4 <get_wspr_channel_symbols+0x650>)
		callsign = strtok(message," ");
 8003ab4:	4604      	mov	r4, r0
		grid = strtok(NULL," ");
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f00f f894 	bl	8012be4 <strtok>
		powstr = strtok(NULL," ");
 8003abc:	49c9      	ldr	r1, [pc, #804]	; (8003de4 <get_wspr_channel_symbols+0x650>)
		grid = strtok(NULL," ");
 8003abe:	4606      	mov	r6, r0
		powstr = strtok(NULL," ");
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f00f f88f 	bl	8012be4 <strtok>
		int power = atoi(powstr);
 8003ac6:	f00e fa23 	bl	8011f10 <atoi>
 8003aca:	4605      	mov	r5, r0
		n = pack_call(callsign);
 8003acc:	4620      	mov	r0, r4
 8003ace:	f7ff fd99 	bl	8003604 <pack_call>
			grid4[i]=get_locator_character_code(*(grid+i));
 8003ad2:	7833      	ldrb	r3, [r6, #0]
		n = pack_call(callsign);
 8003ad4:	4604      	mov	r4, r0
	if( ch >=48 && ch <=57 ) { //0-9
 8003ad6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	2a09      	cmp	r2, #9
 8003ade:	d908      	bls.n	8003af2 <get_wspr_channel_symbols+0x35e>
	if( ch == 32 ) {  //space
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	f000 845c 	beq.w	800439e <get_wspr_channel_symbols+0xc0a>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003ae6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003aea:	b2d2      	uxtb	r2, r2
	return -1;
 8003aec:	2a12      	cmp	r2, #18
 8003aee:	bf28      	it	cs
 8003af0:	22ff      	movcs	r2, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003af2:	7871      	ldrb	r1, [r6, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 8003af4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b09      	cmp	r3, #9
 8003afc:	d908      	bls.n	8003b10 <get_wspr_channel_symbols+0x37c>
	if( ch == 32 ) {  //space
 8003afe:	2920      	cmp	r1, #32
 8003b00:	f000 844a 	beq.w	8004398 <get_wspr_channel_symbols+0xc04>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003b04:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8003b08:	b2db      	uxtb	r3, r3
	return -1;
 8003b0a:	2b12      	cmp	r3, #18
 8003b0c:	bf28      	it	cs
 8003b0e:	23ff      	movcs	r3, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003b10:	78b1      	ldrb	r1, [r6, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 8003b12:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8003b16:	b2c0      	uxtb	r0, r0
 8003b18:	2809      	cmp	r0, #9
 8003b1a:	d907      	bls.n	8003b2c <get_wspr_channel_symbols+0x398>
	if( ch == 32 ) {  //space
 8003b1c:	2920      	cmp	r1, #32
 8003b1e:	f000 8441 	beq.w	80043a4 <get_wspr_channel_symbols+0xc10>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003b22:	3941      	subs	r1, #65	; 0x41
 8003b24:	b2c8      	uxtb	r0, r1
	return -1;
 8003b26:	2812      	cmp	r0, #18
 8003b28:	bf28      	it	cs
 8003b2a:	20ff      	movcs	r0, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003b2c:	78f6      	ldrb	r6, [r6, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 8003b2e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8003b32:	b2c9      	uxtb	r1, r1
 8003b34:	2909      	cmp	r1, #9
 8003b36:	d908      	bls.n	8003b4a <get_wspr_channel_symbols+0x3b6>
	if( ch == 32 ) {  //space
 8003b38:	2e20      	cmp	r6, #32
 8003b3a:	f000 8427 	beq.w	800438c <get_wspr_channel_symbols+0xbf8>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003b3e:	f1a6 0141 	sub.w	r1, r6, #65	; 0x41
 8003b42:	b2c9      	uxtb	r1, r1
	return -1;
 8003b44:	2912      	cmp	r1, #18
 8003b46:	bf28      	it	cs
 8003b48:	21ff      	movcs	r1, #255	; 0xff
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8003b4a:	f06f 0609 	mvn.w	r6, #9
 8003b4e:	b21b      	sxth	r3, r3
 8003b50:	fb06 f202 	mul.w	r2, r6, r2
 8003b54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b58:	32b3      	adds	r2, #179	; 0xb3
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	1a12      	subs	r2, r2, r0
 8003b5e:	20b4      	movs	r0, #180	; 0xb4
 8003b60:	fb00 3302 	mla	r3, r0, r2, r3
 8003b64:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8003b68:	440b      	add	r3, r1
 8003b6a:	ee08 2a10 	vmov	s16, r2
 8003b6e:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
	m=m*128+power+64;
 8003b72:	f103 0540 	add.w	r5, r3, #64	; 0x40
	it=0xFF & (n>>20);
 8003b76:	0d23      	lsrs	r3, r4, #20
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8003b78:	f3c5 4283 	ubfx	r2, r5, #18, #4
	memset(data,0,sizeof(data));
 8003b7c:	2600      	movs	r6, #0
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003b7e:	ee18 0a10 	vmov	r0, s16
	it=0xFF & (n>>20);
 8003b82:	743b      	strb	r3, [r7, #16]
	it=0xFF & (n>>12);
 8003b84:	0b23      	lsrs	r3, r4, #12
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8003b86:	eb02 1204 	add.w	r2, r2, r4, lsl #4
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003b8a:	4631      	mov	r1, r6
	it=0xFF & (n>>12);
 8003b8c:	747b      	strb	r3, [r7, #17]
	it=0xFF & (m>>10);
 8003b8e:	12ab      	asrs	r3, r5, #10
	it=0xFF & (n>>4);
 8003b90:	0924      	lsrs	r4, r4, #4
	data[3]=it;
 8003b92:	74fa      	strb	r2, [r7, #19]
	it=0xFF & (m>>10);
 8003b94:	753b      	strb	r3, [r7, #20]
	it=0xFF & (m>>2);
 8003b96:	10ab      	asrs	r3, r5, #2
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003b98:	22b0      	movs	r2, #176	; 0xb0
	it=0xFF & (n>>4);
 8003b9a:	74bc      	strb	r4, [r7, #18]
	it=0xFF & (m>>2);
 8003b9c:	757b      	strb	r3, [r7, #21]
	it=(m & 0x03)<<6 ;
 8003b9e:	01ab      	lsls	r3, r5, #6
	memset(data,0,sizeof(data));
 8003ba0:	f8c7 6017 	str.w	r6, [r7, #23]
	it=(m & 0x03)<<6 ;
 8003ba4:	75bb      	strb	r3, [r7, #22]
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8003ba6:	466b      	mov	r3, sp
			ENCODE(sym,encstate);
 8003ba8:	4d8f      	ldr	r5, [pc, #572]	; (8003de8 <get_wspr_channel_symbols+0x654>)
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8003baa:	ee08 3a90 	vmov	s17, r3
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003bae:	f00e f9fd 	bl	8011fac <memset>
	while(nbytes-- != 0) {
 8003bb2:	f107 0310 	add.w	r3, r7, #16
 8003bb6:	4a8d      	ldr	r2, [pc, #564]	; (8003dec <get_wspr_channel_symbols+0x658>)
			ENCODE(sym,encstate);
 8003bb8:	4c8d      	ldr	r4, [pc, #564]	; (8003df0 <get_wspr_channel_symbols+0x65c>)
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bc0:	60fe      	str	r6, [r7, #12]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003bc2:	68b8      	ldr	r0, [r7, #8]
	while(nbytes-- != 0) {
 8003bc4:	3310      	adds	r3, #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	f810 9b01 	ldrb.w	r9, [r0], #1
 8003bcc:	60b8      	str	r0, [r7, #8]
 8003bce:	ea4f 10d9 	mov.w	r0, r9, lsr #7
 8003bd2:	f3c9 1880 	ubfx	r8, r9, #6, #1
 8003bd6:	f3c9 1e40 	ubfx	lr, r9, #5, #1
 8003bda:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 8003bde:	f3c9 1c00 	ubfx	ip, r9, #4, #1
 8003be2:	f3c9 0680 	ubfx	r6, r9, #2, #1
 8003be6:	ea48 0841 	orr.w	r8, r8, r1, lsl #1
			ENCODE(sym,encstate);
 8003bea:	ea01 0005 	and.w	r0, r1, r5
 8003bee:	4021      	ands	r1, r4
 8003bf0:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003bf4:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003bf8:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
			ENCODE(sym,encstate);
 8003bfc:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8003c00:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003c04:	b2c9      	uxtb	r1, r1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c06:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
			ENCODE(sym,encstate);
 8003c0a:	f812 a001 	ldrb.w	sl, [r2, r1]
 8003c0e:	b2c0      	uxtb	r0, r0
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c10:	f3c9 01c0 	ubfx	r1, r9, #3, #1
			ENCODE(sym,encstate);
 8003c14:	5c10      	ldrb	r0, [r2, r0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c16:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
			ENCODE(sym,encstate);
 8003c1a:	ea4a 0a40 	orr.w	sl, sl, r0, lsl #1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c1e:	f3c9 0040 	ubfx	r0, r9, #1, #1
 8003c22:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 8003c26:	6079      	str	r1, [r7, #4]
 8003c28:	f009 0101 	and.w	r1, r9, #1
			ENCODE(sym,encstate);
 8003c2c:	ea08 0905 	and.w	r9, r8, r5
 8003c30:	ea08 0804 	and.w	r8, r8, r4
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c34:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
			ENCODE(sym,encstate);
 8003c38:	ea89 4919 	eor.w	r9, r9, r9, lsr #16
 8003c3c:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8003c40:	ea89 2919 	eor.w	r9, r9, r9, lsr #8
 8003c44:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8003c48:	fa5f f989 	uxtb.w	r9, r9
 8003c4c:	fa5f f888 	uxtb.w	r8, r8
 8003c50:	f812 9009 	ldrb.w	r9, [r2, r9]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c54:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
			ENCODE(sym,encstate);
 8003c58:	f812 8008 	ldrb.w	r8, [r2, r8]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c5c:	60f9      	str	r1, [r7, #12]
			ENCODE(sym,encstate);
 8003c5e:	ea48 0949 	orr.w	r9, r8, r9, lsl #1
 8003c62:	ea0e 0805 	and.w	r8, lr, r5
 8003c66:	ea0e 0e04 	and.w	lr, lr, r4
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8003c70:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8003c74:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8003c78:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8003c7c:	fa5f f888 	uxtb.w	r8, r8
 8003c80:	fa5f fe8e 	uxtb.w	lr, lr
 8003c84:	f812 8008 	ldrb.w	r8, [r2, r8]
 8003c88:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8003c8c:	ea4e 0848 	orr.w	r8, lr, r8, lsl #1
 8003c90:	ea0c 0e05 	and.w	lr, ip, r5
 8003c94:	ea0c 0c04 	and.w	ip, ip, r4
 8003c98:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8003c9c:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8003ca0:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8003ca4:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8003ca8:	fa5f fe8e 	uxtb.w	lr, lr
 8003cac:	fa5f fc8c 	uxtb.w	ip, ip
 8003cb0:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8003cb4:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8003cb8:	ea4c 0e4e 	orr.w	lr, ip, lr, lsl #1
 8003cbc:	ea01 0c05 	and.w	ip, r1, r5
 8003cc0:	4021      	ands	r1, r4
 8003cc2:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8003cc6:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8003cca:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8003cce:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8003cd2:	fa5f fc8c 	uxtb.w	ip, ip
 8003cd6:	b2c9      	uxtb	r1, r1
 8003cd8:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8003cdc:	5c51      	ldrb	r1, [r2, r1]
 8003cde:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
 8003ce2:	ea06 0105 	and.w	r1, r6, r5
 8003ce6:	4026      	ands	r6, r4
 8003ce8:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8003cec:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8003cf0:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8003cf4:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8003cf8:	b2c9      	uxtb	r1, r1
 8003cfa:	b2f6      	uxtb	r6, r6
 8003cfc:	5c51      	ldrb	r1, [r2, r1]
 8003cfe:	5d96      	ldrb	r6, [r2, r6]
 8003d00:	ea46 0141 	orr.w	r1, r6, r1, lsl #1
 8003d04:	ea00 0605 	and.w	r6, r0, r5
 8003d08:	4020      	ands	r0, r4
 8003d0a:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8003d0e:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003d12:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8003d16:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003d1a:	b2f6      	uxtb	r6, r6
 8003d1c:	b2c0      	uxtb	r0, r0
 8003d1e:	5d96      	ldrb	r6, [r2, r6]
 8003d20:	5c10      	ldrb	r0, [r2, r0]
 8003d22:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	4028      	ands	r0, r5
 8003d2a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003d2e:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003d32:	b2c0      	uxtb	r0, r0
 8003d34:	f812 b000 	ldrb.w	fp, [r2, r0]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	4020      	ands	r0, r4
 8003d3c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003d40:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003d44:	b2c0      	uxtb	r0, r0
 8003d46:	5c10      	ldrb	r0, [r2, r0]
 8003d48:	ea40 0b4b 	orr.w	fp, r0, fp, lsl #1
			*symbols++ = sym >> 1;
 8003d4c:	ea4f 006a 	mov.w	r0, sl, asr #1
			*symbols++ = sym & 1;
 8003d50:	f00a 0a01 	and.w	sl, sl, #1
			*symbols++ = sym >> 1;
 8003d54:	f803 0c20 	strb.w	r0, [r3, #-32]
 8003d58:	ea4f 0069 	mov.w	r0, r9, asr #1
			*symbols++ = sym & 1;
 8003d5c:	f009 0901 	and.w	r9, r9, #1
 8003d60:	f803 ac1f 	strb.w	sl, [r3, #-31]
			*symbols++ = sym >> 1;
 8003d64:	f803 0c1e 	strb.w	r0, [r3, #-30]
 8003d68:	ea4f 0068 	mov.w	r0, r8, asr #1
			*symbols++ = sym & 1;
 8003d6c:	f008 0801 	and.w	r8, r8, #1
 8003d70:	f803 9c1d 	strb.w	r9, [r3, #-29]
			*symbols++ = sym >> 1;
 8003d74:	f803 0c1c 	strb.w	r0, [r3, #-28]
 8003d78:	ea4f 006e 	mov.w	r0, lr, asr #1
			*symbols++ = sym & 1;
 8003d7c:	f00e 0e01 	and.w	lr, lr, #1
 8003d80:	f803 8c1b 	strb.w	r8, [r3, #-27]
			*symbols++ = sym >> 1;
 8003d84:	f803 0c1a 	strb.w	r0, [r3, #-26]
 8003d88:	ea4f 006c 	mov.w	r0, ip, asr #1
			*symbols++ = sym & 1;
 8003d8c:	f803 ec19 	strb.w	lr, [r3, #-25]
 8003d90:	f00c 0c01 	and.w	ip, ip, #1
			*symbols++ = sym >> 1;
 8003d94:	f803 0c18 	strb.w	r0, [r3, #-24]
 8003d98:	1048      	asrs	r0, r1, #1
			*symbols++ = sym & 1;
 8003d9a:	f001 0101 	and.w	r1, r1, #1
 8003d9e:	f803 cc17 	strb.w	ip, [r3, #-23]
			*symbols++ = sym >> 1;
 8003da2:	f803 0c16 	strb.w	r0, [r3, #-22]
 8003da6:	1070      	asrs	r0, r6, #1
			*symbols++ = sym & 1;
 8003da8:	f803 1c15 	strb.w	r1, [r3, #-21]
 8003dac:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8003db0:	f803 0c14 	strb.w	r0, [r3, #-20]
 8003db4:	ea4f 006b 	mov.w	r0, fp, asr #1
	while(nbytes-- != 0) {
 8003db8:	f107 011b 	add.w	r1, r7, #27
			*symbols++ = sym & 1;
 8003dbc:	f00b 0b01 	and.w	fp, fp, #1
			*symbols++ = sym >> 1;
 8003dc0:	f803 0c12 	strb.w	r0, [r3, #-18]
	while(nbytes-- != 0) {
 8003dc4:	68b8      	ldr	r0, [r7, #8]
			*symbols++ = sym & 1;
 8003dc6:	f803 6c13 	strb.w	r6, [r3, #-19]
	while(nbytes-- != 0) {
 8003dca:	4288      	cmp	r0, r1
			*symbols++ = sym & 1;
 8003dcc:	f803 bc11 	strb.w	fp, [r3, #-17]
	while(nbytes-- != 0) {
 8003dd0:	f47f aef7 	bne.w	8003bc2 <get_wspr_channel_symbols+0x42e>
 8003dd4:	f04f 0e00 	mov.w	lr, #0
 8003dd8:	f107 0b5c 	add.w	fp, r7, #92	; 0x5c
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003ddc:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003df4 <get_wspr_channel_symbols+0x660>
	i = p = 0;
 8003de0:	46f4      	mov	ip, lr
 8003de2:	e009      	b.n	8003df8 <get_wspr_channel_symbols+0x664>
 8003de4:	080191d4 	.word	0x080191d4
 8003de8:	f2d05351 	.word	0xf2d05351
 8003dec:	0801901c 	.word	0x0801901c
 8003df0:	e4613c47 	.word	0xe4613c47
 8003df4:	84422110 	.word	0x84422110
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003df8:	fa5f f58e 	uxtb.w	r5, lr
			tmp[j] = sym[p];
 8003dfc:	f50c 72d0 	add.w	r2, ip, #416	; 0x1a0
 8003e00:	f107 0110 	add.w	r1, r7, #16
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003e04:	2300      	movs	r3, #0
			p++;
 8003e06:	f10c 0001 	add.w	r0, ip, #1
			tmp[j] = sym[p];
 8003e0a:	1854      	adds	r4, r2, r1
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003e0c:	462a      	mov	r2, r5
 8003e0e:	02ad      	lsls	r5, r5, #10
 8003e10:	18ad      	adds	r5, r5, r2
 8003e12:	f143 0300 	adc.w	r3, r3, #0
 8003e16:	052a      	lsls	r2, r5, #20
 8003e18:	051e      	lsls	r6, r3, #20
 8003e1a:	18aa      	adds	r2, r5, r2
 8003e1c:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 8003e20:	eb43 0306 	adc.w	r3, r3, r6
 8003e24:	1892      	adds	r2, r2, r2
 8003e26:	415b      	adcs	r3, r3
 8003e28:	ea02 060a 	and.w	r6, r2, sl
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	0235      	lsls	r5, r6, #8
 8003e32:	021a      	lsls	r2, r3, #8
 8003e34:	19ad      	adds	r5, r5, r6
 8003e36:	ea42 6216 	orr.w	r2, r2, r6, lsr #24
 8003e3a:	ea4f 4105 	mov.w	r1, r5, lsl #16
 8003e3e:	eb43 0202 	adc.w	r2, r3, r2
 8003e42:	1869      	adds	r1, r5, r1
 8003e44:	ea4f 4902 	mov.w	r9, r2, lsl #16
 8003e48:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8003e4c:	ea49 4915 	orr.w	r9, r9, r5, lsr #16
 8003e50:	eb42 0209 	adc.w	r2, r2, r9
 8003e54:	eb18 0606 	adds.w	r6, r8, r6
 8003e58:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003e5c:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 8003e60:	eb43 0302 	adc.w	r3, r3, r2
 8003e64:	b2db      	uxtb	r3, r3
		if (j < 162 ) {
 8003e66:	2ba1      	cmp	r3, #161	; 0xa1
 8003e68:	f200 80fa 	bhi.w	8004060 <get_wspr_channel_symbols+0x8cc>
			p++;
 8003e6c:	fa5f fc80 	uxtb.w	ip, r0
			tmp[j] = sym[p];
 8003e70:	f814 2cb0 	ldrb.w	r2, [r4, #-176]
	while (p < 162) {
 8003e74:	f10e 0e01 	add.w	lr, lr, #1
 8003e78:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
			tmp[j] = sym[p];
 8003e7c:	f80b 2003 	strb.w	r2, [fp, r3]
	while (p < 162) {
 8003e80:	d1ba      	bne.n	8003df8 <get_wspr_channel_symbols+0x664>
	memcpy(sym, tmp, sizeof(tmp));
 8003e82:	22a2      	movs	r2, #162	; 0xa2
 8003e84:	4659      	mov	r1, fp
 8003e86:	ee18 0a10 	vmov	r0, s16
 8003e8a:	f207 15a1 	addw	r5, r7, #417	; 0x1a1
 8003e8e:	f00e f87f 	bl	8011f90 <memcpy>
	for (i=0; i < 162; i++) {
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	f107 02ff 	add.w	r2, r7, #255	; 0xff
 8003e98:	48d3      	ldr	r0, [pc, #844]	; (80041e8 <get_wspr_channel_symbols+0xa54>)
 8003e9a:	1e59      	subs	r1, r3, #1
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003e9c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003ea0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8003ea4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	for (i=0; i < 162; i++) {
 8003ea8:	42aa      	cmp	r2, r5
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003eaa:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i=0; i < 162; i++) {
 8003eae:	d1f5      	bne.n	8003e9c <get_wspr_channel_symbols+0x708>
	return 1;
 8003eb0:	ee18 3a90 	vmov	r3, s17
 8003eb4:	2001      	movs	r0, #1
}
 8003eb6:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8003eba:	469d      	mov	sp, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	ecbd 8b02 	vpop	{d8}
 8003ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (length > 12)
 8003ec6:	280c      	cmp	r0, #12
 8003ec8:	f240 8263 	bls.w	8004392 <get_wspr_channel_symbols+0xbfe>
 8003ecc:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	46a6      	mov	lr, r4
			c += k[2];
 8003ed4:	f856 4c04 	ldr.w	r4, [r6, #-4]
			length -= 12;
 8003ed8:	380c      	subs	r0, #12
 8003eda:	46b4      	mov	ip, r6
		while (length > 12)
 8003edc:	360c      	adds	r6, #12
			c += k[2];
 8003ede:	4422      	add	r2, r4
			mix(a,b,c);
 8003ee0:	f856 4c18 	ldr.w	r4, [r6, #-24]
		while (length > 12)
 8003ee4:	280c      	cmp	r0, #12
			mix(a,b,c);
 8003ee6:	eba4 0402 	sub.w	r4, r4, r2
 8003eea:	4423      	add	r3, r4
 8003eec:	ea83 7332 	eor.w	r3, r3, r2, ror #28
 8003ef0:	461c      	mov	r4, r3
			b += k[1];
 8003ef2:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8003ef6:	440b      	add	r3, r1
			mix(a,b,c);
 8003ef8:	4621      	mov	r1, r4
 8003efa:	441a      	add	r2, r3
 8003efc:	eba3 0304 	sub.w	r3, r3, r4
 8003f00:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8003f04:	4411      	add	r1, r2
 8003f06:	eba2 0203 	sub.w	r2, r2, r3
 8003f0a:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8003f0e:	440b      	add	r3, r1
 8003f10:	eba1 0102 	sub.w	r1, r1, r2
 8003f14:	ea81 4132 	eor.w	r1, r1, r2, ror #16
 8003f18:	441a      	add	r2, r3
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	eba3 0301 	sub.w	r3, r3, r1
 8003f20:	ea83 3171 	eor.w	r1, r3, r1, ror #13
 8003f24:	4623      	mov	r3, r4
 8003f26:	4413      	add	r3, r2
 8003f28:	eba2 0201 	sub.w	r2, r2, r1
 8003f2c:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8003f30:	4419      	add	r1, r3
		while (length > 12)
 8003f32:	d8cf      	bhi.n	8003ed4 <get_wspr_channel_symbols+0x740>
 8003f34:	4674      	mov	r4, lr
 8003f36:	46e0      	mov	r8, ip
		switch(length)
 8003f38:	3801      	subs	r0, #1
 8003f3a:	280b      	cmp	r0, #11
 8003f3c:	d853      	bhi.n	8003fe6 <get_wspr_channel_symbols+0x852>
 8003f3e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003f42:	0036      	.short	0x0036
 8003f44:	017d013f 	.word	0x017d013f
 8003f48:	01720179 	.word	0x01720179
 8003f4c:	0164016b 	.word	0x0164016b
 8003f50:	0159015d 	.word	0x0159015d
 8003f54:	014c0155 	.word	0x014c0155
 8003f58:	0143      	.short	0x0143
		case 12: c+=((uint32_t)k[11])<<24;
 8003f5a:	f898 000b 	ldrb.w	r0, [r8, #11]
 8003f5e:	eb02 6200 	add.w	r2, r2, r0, lsl #24
		case 11: c+=((uint32_t)k[10])<<16;
 8003f62:	f898 000a 	ldrb.w	r0, [r8, #10]
 8003f66:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		case 10: c+=((uint32_t)k[9])<<8;
 8003f6a:	f898 0009 	ldrb.w	r0, [r8, #9]
 8003f6e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		case 9 : c+=k[8];
 8003f72:	f898 0008 	ldrb.w	r0, [r8, #8]
 8003f76:	4402      	add	r2, r0
		case 8 : b+=((uint32_t)k[7])<<24;
 8003f78:	f898 0007 	ldrb.w	r0, [r8, #7]
 8003f7c:	eb01 6100 	add.w	r1, r1, r0, lsl #24
		case 7 : b+=((uint32_t)k[6])<<16;
 8003f80:	f898 0006 	ldrb.w	r0, [r8, #6]
 8003f84:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		case 6 : b+=((uint32_t)k[5])<<8;
 8003f88:	f898 0005 	ldrb.w	r0, [r8, #5]
 8003f8c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		case 5 : b+=k[4];
 8003f90:	f898 0004 	ldrb.w	r0, [r8, #4]
 8003f94:	4401      	add	r1, r0
		case 4 : a+=((uint32_t)k[3])<<24;
 8003f96:	f898 0003 	ldrb.w	r0, [r8, #3]
 8003f9a:	eb03 6300 	add.w	r3, r3, r0, lsl #24
		case 3 : a+=((uint32_t)k[2])<<16;
 8003f9e:	f898 0002 	ldrb.w	r0, [r8, #2]
 8003fa2:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=((uint32_t)k[1])<<8;
 8003fa6:	f898 0001 	ldrb.w	r0, [r8, #1]
 8003faa:	eb03 2300 	add.w	r3, r3, r0, lsl #8
		case 1 : a+=k[0];
 8003fae:	f898 0000 	ldrb.w	r0, [r8]
 8003fb2:	4403      	add	r3, r0
	final(a,b,c);
 8003fb4:	404a      	eors	r2, r1
 8003fb6:	eba2 40b1 	sub.w	r0, r2, r1, ror #18
 8003fba:	4043      	eors	r3, r0
 8003fbc:	eba3 5370 	sub.w	r3, r3, r0, ror #21
 8003fc0:	4059      	eors	r1, r3
 8003fc2:	eba1 12f3 	sub.w	r2, r1, r3, ror #7
 8003fc6:	ea80 0102 	eor.w	r1, r0, r2
 8003fca:	eba1 4132 	sub.w	r1, r1, r2, ror #16
 8003fce:	404b      	eors	r3, r1
 8003fd0:	eba3 7331 	sub.w	r3, r3, r1, ror #28
 8003fd4:	405a      	eors	r2, r3
 8003fd6:	eba2 43b3 	sub.w	r3, r2, r3, ror #18
 8003fda:	ea81 0203 	eor.w	r2, r1, r3
 8003fde:	eba2 2333 	sub.w	r3, r2, r3, ror #8
	c=(32767&c);
 8003fe2:	f3c3 020e 	ubfx	r2, r3, #0, #15
		m=128*ihash + ntype + 64;
 8003fe6:	eb05 13c2 	add.w	r3, r5, r2, lsl #7
		memset(grid6,0,sizeof(char)*7);
 8003fea:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8003fee:	2200      	movs	r2, #0
		j=strlen(grid);
 8003ff0:	4620      	mov	r0, r4
		memset(grid6,0,sizeof(char)*7);
 8003ff2:	ee08 1a10 	vmov	s16, r1
		m=128*ihash + ntype + 64;
 8003ff6:	f103 0540 	add.w	r5, r3, #64	; 0x40
		memset(grid6,0,sizeof(char)*7);
 8003ffa:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8003ffe:	f8c7 2103 	str.w	r2, [r7, #259]	; 0x103
		j=strlen(grid);
 8004002:	f7fc f9cd 	bl	80003a0 <strlen>
		for(i=0; i<j-1; i++) {
 8004006:	3801      	subs	r0, #1
 8004008:	2800      	cmp	r0, #0
 800400a:	dd20      	ble.n	800404e <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 800400c:	7863      	ldrb	r3, [r4, #1]
		for(i=0; i<j-1; i++) {
 800400e:	2801      	cmp	r0, #1
			grid6[i]=grid[i+1];
 8004010:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 8004014:	d01b      	beq.n	800404e <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8004016:	78a3      	ldrb	r3, [r4, #2]
		for(i=0; i<j-1; i++) {
 8004018:	2802      	cmp	r0, #2
			grid6[i]=grid[i+1];
 800401a:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for(i=0; i<j-1; i++) {
 800401e:	d016      	beq.n	800404e <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8004020:	78e3      	ldrb	r3, [r4, #3]
		for(i=0; i<j-1; i++) {
 8004022:	2803      	cmp	r0, #3
			grid6[i]=grid[i+1];
 8004024:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for(i=0; i<j-1; i++) {
 8004028:	d011      	beq.n	800404e <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 800402a:	7923      	ldrb	r3, [r4, #4]
		for(i=0; i<j-1; i++) {
 800402c:	2804      	cmp	r0, #4
			grid6[i]=grid[i+1];
 800402e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for(i=0; i<j-1; i++) {
 8004032:	d00c      	beq.n	800404e <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8004034:	7963      	ldrb	r3, [r4, #5]
		for(i=0; i<j-1; i++) {
 8004036:	2805      	cmp	r0, #5
			grid6[i]=grid[i+1];
 8004038:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for(i=0; i<j-1; i++) {
 800403c:	d007      	beq.n	800404e <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 800403e:	79a3      	ldrb	r3, [r4, #6]
		for(i=0; i<j-1; i++) {
 8004040:	2806      	cmp	r0, #6
			grid6[i]=grid[i+1];
 8004042:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for(i=0; i<j-1; i++) {
 8004046:	d002      	beq.n	800404e <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8004048:	79e3      	ldrb	r3, [r4, #7]
 800404a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		grid6[5]=grid[0];
 800404e:	7823      	ldrb	r3, [r4, #0]
		n = pack_call(grid6);
 8004050:	ee18 0a10 	vmov	r0, s16
		grid6[5]=grid[0];
 8004054:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		n = pack_call(grid6);
 8004058:	f7ff fad4 	bl	8003604 <pack_call>
 800405c:	4604      	mov	r4, r0
 800405e:	e58a      	b.n	8003b76 <get_wspr_channel_symbols+0x3e2>
	while (p < 162) {
 8004060:	f1bc 0fa1 	cmp.w	ip, #161	; 0xa1
 8004064:	f10e 0e01 	add.w	lr, lr, #1
 8004068:	f67f aec6 	bls.w	8003df8 <get_wspr_channel_symbols+0x664>
 800406c:	e709      	b.n	8003e82 <get_wspr_channel_symbols+0x6ee>
		while (length > 12)
 800406e:	280c      	cmp	r0, #12
 8004070:	f240 81ab 	bls.w	80043ca <get_wspr_channel_symbols+0xc36>
 8004074:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8004076:	461a      	mov	r2, r3
 8004078:	4619      	mov	r1, r3
 800407a:	46a6      	mov	lr, r4
			c += k[4] + (((uint32_t)k[5])<<16);
 800407c:	f836 cc02 	ldrh.w	ip, [r6, #-2]
			length -= 12;
 8004080:	380c      	subs	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 8004082:	f836 4c04 	ldrh.w	r4, [r6, #-4]
		while (length > 12)
 8004086:	280c      	cmp	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 8004088:	eb04 440c 	add.w	r4, r4, ip, lsl #16
			a += k[0] + (((uint32_t)k[1])<<16);
 800408c:	f836 cc0a 	ldrh.w	ip, [r6, #-10]
			c += k[4] + (((uint32_t)k[5])<<16);
 8004090:	4422      	add	r2, r4
 8004092:	4614      	mov	r4, r2
			a += k[0] + (((uint32_t)k[1])<<16);
 8004094:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
			mix(a,b,c);
 8004098:	eb02 420c 	add.w	r2, r2, ip, lsl #16
			b += k[2] + (((uint32_t)k[3])<<16);
 800409c:	f836 cc06 	ldrh.w	ip, [r6, #-6]
			mix(a,b,c);
 80040a0:	eba2 0204 	sub.w	r2, r2, r4
 80040a4:	441a      	add	r2, r3
			b += k[2] + (((uint32_t)k[3])<<16);
 80040a6:	f836 3c08 	ldrh.w	r3, [r6, #-8]
 80040aa:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 80040ae:	46b4      	mov	ip, r6
			mix(a,b,c);
 80040b0:	ea82 7234 	eor.w	r2, r2, r4, ror #28
		while (length > 12)
 80040b4:	f106 060c 	add.w	r6, r6, #12
			b += k[2] + (((uint32_t)k[3])<<16);
 80040b8:	440b      	add	r3, r1
			mix(a,b,c);
 80040ba:	eb03 0104 	add.w	r1, r3, r4
 80040be:	eba3 0302 	sub.w	r3, r3, r2
 80040c2:	ea83 63b2 	eor.w	r3, r3, r2, ror #26
 80040c6:	440a      	add	r2, r1
 80040c8:	eba1 0103 	sub.w	r1, r1, r3
 80040cc:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 80040d0:	4413      	add	r3, r2
 80040d2:	eba2 0201 	sub.w	r2, r2, r1
 80040d6:	eb01 0403 	add.w	r4, r1, r3
 80040da:	ea82 4231 	eor.w	r2, r2, r1, ror #16
 80040de:	eba3 0302 	sub.w	r3, r3, r2
 80040e2:	ea83 3172 	eor.w	r1, r3, r2, ror #13
 80040e6:	eb02 0304 	add.w	r3, r2, r4
 80040ea:	eba4 0201 	sub.w	r2, r4, r1
 80040ee:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 80040f2:	4419      	add	r1, r3
		while (length > 12)
 80040f4:	d8c2      	bhi.n	800407c <get_wspr_channel_symbols+0x8e8>
 80040f6:	4674      	mov	r4, lr
 80040f8:	46e0      	mov	r8, ip
		switch(length)
 80040fa:	3801      	subs	r0, #1
 80040fc:	280b      	cmp	r0, #11
 80040fe:	f63f af72 	bhi.w	8003fe6 <get_wspr_channel_symbols+0x852>
 8004102:	a601      	add	r6, pc, #4	; (adr r6, 8004108 <get_wspr_channel_symbols+0x974>)
 8004104:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8004108:	08003faf 	.word	0x08003faf
 800410c:	080041c1 	.word	0x080041c1
 8004110:	080041b9 	.word	0x080041b9
 8004114:	080042bd 	.word	0x080042bd
 8004118:	080042b7 	.word	0x080042b7
 800411c:	080042a1 	.word	0x080042a1
 8004120:	08004299 	.word	0x08004299
 8004124:	0800427b 	.word	0x0800427b
 8004128:	08004275 	.word	0x08004275
 800412c:	08004251 	.word	0x08004251
 8004130:	08004249 	.word	0x08004249
 8004134:	080042cd 	.word	0x080042cd
		for (i=0; i<i1; i++) {
 8004138:	b300      	cbz	r0, 800417c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 800413a:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 800413c:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 800413e:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8004142:	d01b      	beq.n	800417c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 8004144:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 8004146:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 8004148:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 800414c:	d016      	beq.n	800417c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 800414e:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 8004150:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 8004152:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 8004156:	d011      	beq.n	800417c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 8004158:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 800415a:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 800415c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 8004160:	d00c      	beq.n	800417c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 8004162:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 8004164:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 8004166:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 800416a:	d007      	beq.n	800417c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 800416c:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 800416e:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 8004170:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8004174:	d002      	beq.n	800417c <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 8004176:	79a3      	ldrb	r3, [r4, #6]
 8004178:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		call6[i] = '\0';
 800417c:	f107 0210 	add.w	r2, r7, #16
 8004180:	f506 73d0 	add.w	r3, r6, #416	; 0x1a0
 8004184:	4413      	add	r3, r2
		*n=pack_call(call6);
 8004186:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800418a:	4610      	mov	r0, r2
 800418c:	ee08 2a10 	vmov	s16, r2
		call6[i] = '\0';
 8004190:	2200      	movs	r2, #0
 8004192:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 8004196:	f7ff fa35 	bl	8003604 <pack_call>
		int nc = callsign[i1+1];
 800419a:	4653      	mov	r3, sl
		*n=pack_call(call6);
 800419c:	4604      	mov	r4, r0
		int nc = callsign[i1+1];
 800419e:	4433      	add	r3, r6
 80041a0:	785a      	ldrb	r2, [r3, #1]
		if( nc >= 48 && nc <= 57 ) {
 80041a2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80041a6:	2b09      	cmp	r3, #9
 80041a8:	f200 80a6 	bhi.w	80042f8 <get_wspr_channel_symbols+0xb64>
		*m=60000-32768+*m;
 80041ac:	f646 2330 	movw	r3, #27184	; 0x6a30
 80041b0:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 80041b2:	01db      	lsls	r3, r3, #7
 80041b4:	f7ff bbbf 	b.w	8003936 <get_wspr_channel_symbols+0x1a2>
		case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */
 80041b8:	f898 0002 	ldrb.w	r0, [r8, #2]
 80041bc:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=k[0];
 80041c0:	f8b8 0000 	ldrh.w	r0, [r8]
 80041c4:	4403      	add	r3, r0
		break;
 80041c6:	e6f5      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;
 80041c8:	4646      	mov	r6, r8
 80041ca:	f8d8 0008 	ldr.w	r0, [r8, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 80041ce:	4402      	add	r2, r0
 80041d0:	6870      	ldr	r0, [r6, #4]
 80041d2:	4401      	add	r1, r0
 80041d4:	6830      	ldr	r0, [r6, #0]
 80041d6:	4403      	add	r3, r0
 80041d8:	e6ec      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
 80041da:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80041de:	4646      	mov	r6, r8
 80041e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80041e4:	e7f3      	b.n	80041ce <get_wspr_channel_symbols+0xa3a>
 80041e6:	bf00      	nop
 80041e8:	0801911b 	.word	0x0801911b
		case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;
 80041ec:	4646      	mov	r6, r8
 80041ee:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 80041f2:	e7ec      	b.n	80041ce <get_wspr_channel_symbols+0xa3a>
		case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;
 80041f4:	4646      	mov	r6, r8
 80041f6:	f898 0008 	ldrb.w	r0, [r8, #8]
 80041fa:	e7e8      	b.n	80041ce <get_wspr_channel_symbols+0xa3a>
		case 8 : b+=k[1]; a+=k[0]; break;
 80041fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004200:	4401      	add	r1, r0
 8004202:	f8d8 0000 	ldr.w	r0, [r8]
 8004206:	4403      	add	r3, r0
 8004208:	e6d4      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 7 : b+=k[1]&0xffffff; a+=k[0]; break;
 800420a:	e9d8 6000 	ldrd	r6, r0, [r8]
 800420e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004212:	4433      	add	r3, r6
 8004214:	4401      	add	r1, r0
 8004216:	e6cd      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 6 : b+=k[1]&0xffff; a+=k[0]; break;
 8004218:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800421c:	4401      	add	r1, r0
 800421e:	f8d8 0000 	ldr.w	r0, [r8]
 8004222:	4403      	add	r3, r0
 8004224:	e6c6      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 5 : b+=k[1]&0xff; a+=k[0]; break;
 8004226:	f898 0004 	ldrb.w	r0, [r8, #4]
 800422a:	4401      	add	r1, r0
 800422c:	f8d8 0000 	ldr.w	r0, [r8]
 8004230:	4403      	add	r3, r0
 8004232:	e6bf      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 4 : a+=k[0]; break;
 8004234:	f8d8 0000 	ldr.w	r0, [r8]
 8004238:	4403      	add	r3, r0
 800423a:	e6bb      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 3 : a+=k[0]&0xffffff; break;
 800423c:	f8d8 0000 	ldr.w	r0, [r8]
 8004240:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004244:	4403      	add	r3, r0
 8004246:	e6b5      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */
 8004248:	f898 000a 	ldrb.w	r0, [r8, #10]
 800424c:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004250:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8004254:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004256:	f8b8 0000 	ldrh.w	r0, [r8]
 800425a:	4418      	add	r0, r3
		case 10: c+=k[4];
 800425c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8004260:	441a      	add	r2, r3
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004262:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8004266:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 800426a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800426e:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8004272:	e69f      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 9 : c+=k8[8];                      /* fall through */
 8004274:	f898 0008 	ldrb.w	r0, [r8, #8]
 8004278:	4402      	add	r2, r0
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 800427a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800427e:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004280:	f8b8 0000 	ldrh.w	r0, [r8]
 8004284:	4418      	add	r0, r3
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 8004286:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800428a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 800428e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8004292:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8004296:	e68d      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */
 8004298:	f898 0006 	ldrb.w	r0, [r8, #6]
 800429c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80042a0:	f8b8 0000 	ldrh.w	r0, [r8]
 80042a4:	4418      	add	r0, r3
		case 6 : b+=k[2];
 80042a6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80042aa:	4419      	add	r1, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 80042ac:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80042b0:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80042b4:	e67e      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 5 : b+=k8[4];                      /* fall through */
 80042b6:	f898 0004 	ldrb.w	r0, [r8, #4]
 80042ba:	4401      	add	r1, r0
		case 4 : a+=k[0]+(((uint32_t)k[1])<<16);
 80042bc:	f8b8 0000 	ldrh.w	r0, [r8]
 80042c0:	4418      	add	r0, r3
 80042c2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80042c6:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80042ca:	e673      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 80042cc:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 80042d0:	4402      	add	r2, r0
		b+=k[2]+(((uint32_t)k[3])<<16);
 80042d2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80042d6:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 80042d8:	f8b8 0000 	ldrh.w	r0, [r8]
 80042dc:	4418      	add	r0, r3
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 80042de:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80042e2:	eb02 4203 	add.w	r2, r2, r3, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 80042e6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80042ea:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80042ee:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80042f2:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80042f6:	e65d      	b.n	8003fb4 <get_wspr_channel_symbols+0x820>
		} else if ( nc >= 65 && nc <= 90 ) {
 80042f8:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80042fc:	2b19      	cmp	r3, #25
 80042fe:	d854      	bhi.n	80043aa <get_wspr_channel_symbols+0xc16>
		*m=60000-32768+*m;
 8004300:	f646 2329 	movw	r3, #27177	; 0x6a29
 8004304:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8004306:	01db      	lsls	r3, r3, #7
 8004308:	f7ff bb15 	b.w	8003936 <get_wspr_channel_symbols+0x1a2>
		char const * pfx = strtok (callsign,"/");
 800430c:	4936      	ldr	r1, [pc, #216]	; (80043e8 <get_wspr_channel_symbols+0xc54>)
 800430e:	4620      	mov	r0, r4
 8004310:	f00e fc68 	bl	8012be4 <strtok>
		char const * call = strtok(NULL," ");
 8004314:	4935      	ldr	r1, [pc, #212]	; (80043ec <get_wspr_channel_symbols+0xc58>)
		char const * pfx = strtok (callsign,"/");
 8004316:	4606      	mov	r6, r0
		char const * call = strtok(NULL," ");
 8004318:	2000      	movs	r0, #0
 800431a:	f00e fc63 	bl	8012be4 <strtok>
		*n = pack_call (call);
 800431e:	f7ff f971 	bl	8003604 <pack_call>
 8004322:	4604      	mov	r4, r0
		size_t plen=strlen (pfx);
 8004324:	4630      	mov	r0, r6
 8004326:	f7fc f83b 	bl	80003a0 <strlen>
		if( plen ==1 ) {
 800432a:	2801      	cmp	r0, #1
 800432c:	d042      	beq.n	80043b4 <get_wspr_channel_symbols+0xc20>
		} else if( plen == 2 ) {
 800432e:	2802      	cmp	r0, #2
 8004330:	d03e      	beq.n	80043b0 <get_wspr_channel_symbols+0xc1c>
		for (i=0; i<plen; i++) {
 8004332:	2800      	cmp	r0, #0
 8004334:	d050      	beq.n	80043d8 <get_wspr_channel_symbols+0xc44>
			*m=0;
 8004336:	2300      	movs	r3, #0
 8004338:	f10a 3cff 	add.w	ip, sl, #4294967295
 800433c:	46d0      	mov	r8, sl
			} else if ( nc >= 65 && nc <= 90 ) {
 800433e:	4662      	mov	r2, ip
			int nc = callsign[i];
 8004340:	f81c 6f01 	ldrb.w	r6, [ip, #1]!
			if( nc >= 48 && nc <= 57 ) {
 8004344:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
			} else if ( nc >= 65 && nc <= 90 ) {
 8004348:	f1a6 0e41 	sub.w	lr, r6, #65	; 0x41
			if( nc >= 48 && nc <= 57 ) {
 800434c:	2909      	cmp	r1, #9
 800434e:	d906      	bls.n	800435e <get_wspr_channel_symbols+0xbca>
			} else if ( nc >= 65 && nc <= 90 ) {
 8004350:	f1be 0f19 	cmp.w	lr, #25
				nc=36;
 8004354:	f04f 0124 	mov.w	r1, #36	; 0x24
				nc=nc-65+10;
 8004358:	bf98      	it	ls
 800435a:	f1a6 0137 	subls.w	r1, r6, #55	; 0x37
		for (i=0; i<plen; i++) {
 800435e:	4646      	mov	r6, r8
 8004360:	3202      	adds	r2, #2
 8004362:	1b92      	subs	r2, r2, r6
			*m=37*(*m)+nc;
 8004364:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
		for (i=0; i<plen; i++) {
 8004368:	4290      	cmp	r0, r2
			*m=37*(*m)+nc;
 800436a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800436e:	440b      	add	r3, r1
		for (i=0; i<plen; i++) {
 8004370:	d8e5      	bhi.n	800433e <get_wspr_channel_symbols+0xbaa>
		if( *m > 32768 ) {
 8004372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004376:	dd20      	ble.n	80043ba <get_wspr_channel_symbols+0xc26>
			*m=*m-32768;
 8004378:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800437c:	f507 7280 	add.w	r2, r7, #256	; 0x100
			*nadd=1;
 8004380:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 8004382:	01db      	lsls	r3, r3, #7
 8004384:	ee08 2a10 	vmov	s16, r2
 8004388:	f7ff bad6 	b.w	8003938 <get_wspr_channel_symbols+0x1a4>
		return 36;
 800438c:	2124      	movs	r1, #36	; 0x24
 800438e:	f7ff bbdc 	b.w	8003b4a <get_wspr_channel_symbols+0x3b6>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8004392:	461a      	mov	r2, r3
 8004394:	4619      	mov	r1, r3
 8004396:	e5cf      	b.n	8003f38 <get_wspr_channel_symbols+0x7a4>
		return 36;
 8004398:	2324      	movs	r3, #36	; 0x24
 800439a:	f7ff bbb9 	b.w	8003b10 <get_wspr_channel_symbols+0x37c>
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	f7ff bba7 	b.w	8003af2 <get_wspr_channel_symbols+0x35e>
 80043a4:	2024      	movs	r0, #36	; 0x24
 80043a6:	f7ff bbc1 	b.w	8003b2c <get_wspr_channel_symbols+0x398>
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <get_wspr_channel_symbols+0xc5c>)
		*m=60000-32768+*m;
 80043ac:	f7ff bac3 	b.w	8003936 <get_wspr_channel_symbols+0x1a2>
			*m=36;
 80043b0:	2324      	movs	r3, #36	; 0x24
		for (i=0; i<plen; i++) {
 80043b2:	e7c1      	b.n	8004338 <get_wspr_channel_symbols+0xba4>
			*m=37*(*m)+36;
 80043b4:	f44f 63ab 	mov.w	r3, #1368	; 0x558
 80043b8:	e7be      	b.n	8004338 <get_wspr_channel_symbols+0xba4>
 80043ba:	f507 7280 	add.w	r2, r7, #256	; 0x100
		m=128*ng+ntype+64;
 80043be:	01db      	lsls	r3, r3, #7
		*nadd=0;
 80043c0:	2000      	movs	r0, #0
 80043c2:	ee08 2a10 	vmov	s16, r2
 80043c6:	f7ff bab7 	b.w	8003938 <get_wspr_channel_symbols+0x1a4>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80043ca:	461a      	mov	r2, r3
 80043cc:	4619      	mov	r1, r3
 80043ce:	e694      	b.n	80040fa <get_wspr_channel_symbols+0x966>
 80043d0:	461a      	mov	r2, r3
 80043d2:	4619      	mov	r1, r3
 80043d4:	f7ff bb46 	b.w	8003a64 <get_wspr_channel_symbols+0x2d0>
 80043d8:	f507 7280 	add.w	r2, r7, #256	; 0x100
		for (i=0; i<plen; i++) {
 80043dc:	4603      	mov	r3, r0
 80043de:	ee08 2a10 	vmov	s16, r2
 80043e2:	f7ff baa9 	b.w	8003938 <get_wspr_channel_symbols+0x1a4>
 80043e6:	bf00      	nop
 80043e8:	08018ffc 	.word	0x08018ffc
 80043ec:	080191d4 	.word	0x080191d4
 80043f0:	00354300 	.word	0x00354300
 80043f4:	00000000 	.word	0x00000000

080043f8 <SendWSPR>:
{
 80043f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 80043fc:	496c      	ldr	r1, [pc, #432]	; (80045b0 <SendWSPR+0x1b8>)
 80043fe:	486d      	ldr	r0, [pc, #436]	; (80045b4 <SendWSPR+0x1bc>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004400:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80045f0 <SendWSPR+0x1f8>
 8004404:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 80045f4 <SendWSPR+0x1fc>
{
 8004408:	ed2d 8b02 	vpush	{d8}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 800440c:	f7ff f9c2 	bl	8003794 <get_wspr_channel_symbols>
	LOfreq = (double)WSPR_FREQ;
 8004410:	4b69      	ldr	r3, [pc, #420]	; (80045b8 <SendWSPR+0x1c0>)
 8004412:	486a      	ldr	r0, [pc, #424]	; (80045bc <SendWSPR+0x1c4>)
	LastTXFreq = LOfreq;
 8004414:	4a6a      	ldr	r2, [pc, #424]	; (80045c0 <SendWSPR+0x1c8>)
	LOfreq = (double)WSPR_FREQ;
 8004416:	6003      	str	r3, [r0, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8004418:	496a      	ldr	r1, [pc, #424]	; (80045c4 <SendWSPR+0x1cc>)
 800441a:	486b      	ldr	r0, [pc, #428]	; (80045c8 <SendWSPR+0x1d0>)
	LastTXFreq = LOfreq;
 800441c:	6013      	str	r3, [r2, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 800441e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 80045a8 <SendWSPR+0x1b0>
 8004422:	f000 fbf1 	bl	8004c08 <SetWSPRPLLCoeff>
	WSPRTXFraction = 20; //percentage
 8004426:	2214      	movs	r2, #20
 8004428:	4968      	ldr	r1, [pc, #416]	; (80045cc <SendWSPR+0x1d4>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 800442a:	f8d8 3000 	ldr.w	r3, [r8]
	WSPRTXFraction = 20; //percentage
 800442e:	700a      	strb	r2, [r1, #0]
				LED_GREEN_ON;
 8004430:	4d67      	ldr	r5, [pc, #412]	; (80045d0 <SendWSPR+0x1d8>)
			if(KEYER_DASH || KEYER_DOT)
 8004432:	4c68      	ldr	r4, [pc, #416]	; (80045d4 <SendWSPR+0x1dc>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004434:	e014      	b.n	8004460 <SendWSPR+0x68>
 8004436:	f8db 3000 	ldr.w	r3, [fp]
 800443a:	07da      	lsls	r2, r3, #31
 800443c:	d51e      	bpl.n	800447c <SendWSPR+0x84>
				LED_GREEN_ON;
 800443e:	2201      	movs	r2, #1
 8004440:	f006 f85c 	bl	800a4fc <HAL_GPIO_WritePin>
			if(KEYER_DASH || KEYER_DOT)
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	4620      	mov	r0, r4
 8004448:	f006 f852 	bl	800a4f0 <HAL_GPIO_ReadPin>
 800444c:	4603      	mov	r3, r0
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	4620      	mov	r0, r4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d036      	beq.n	80044c4 <SendWSPR+0xcc>
 8004456:	f006 f84b 	bl	800a4f0 <HAL_GPIO_ReadPin>
 800445a:	b398      	cbz	r0, 80044c4 <SendWSPR+0xcc>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 800445c:	f8d8 3000 	ldr.w	r3, [r8]
				LED_GREEN_OFF;
 8004460:	2200      	movs	r2, #0
				LED_GREEN_ON;
 8004462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004466:	4628      	mov	r0, r5
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0e4      	beq.n	8004436 <SendWSPR+0x3e>
			if (SystemSeconds % 2 == 0)
 800446c:	07de      	lsls	r6, r3, #31
 800446e:	d5e6      	bpl.n	800443e <SendWSPR+0x46>
				LED_GREEN_OFF;
 8004470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004474:	4628      	mov	r0, r5
 8004476:	f006 f841 	bl	800a4fc <HAL_GPIO_WritePin>
 800447a:	e7e3      	b.n	8004444 <SendWSPR+0x4c>
		if (((rand() % 101) > WSPRTXFraction) && (!WSPRFirstTime))
 800447c:	f00e fb3a 	bl	8012af4 <rand>
 8004480:	4b52      	ldr	r3, [pc, #328]	; (80045cc <SendWSPR+0x1d4>)
 8004482:	2165      	movs	r1, #101	; 0x65
 8004484:	781a      	ldrb	r2, [r3, #0]
 8004486:	4b54      	ldr	r3, [pc, #336]	; (80045d8 <SendWSPR+0x1e0>)
 8004488:	fb83 3400 	smull	r3, r4, r3, r0
 800448c:	17c3      	asrs	r3, r0, #31
 800448e:	ebc3 1324 	rsb	r3, r3, r4, asr #4
 8004492:	4c52      	ldr	r4, [pc, #328]	; (80045dc <SendWSPR+0x1e4>)
 8004494:	fb01 0013 	mls	r0, r1, r3, r0
 8004498:	4290      	cmp	r0, r2
 800449a:	dd17      	ble.n	80044cc <SendWSPR+0xd4>
 800449c:	7823      	ldrb	r3, [r4, #0]
 800449e:	b9ab      	cbnz	r3, 80044cc <SendWSPR+0xd4>
				if(KEYER_DASH || KEYER_DOT)
 80044a0:	4c4c      	ldr	r4, [pc, #304]	; (80045d4 <SendWSPR+0x1dc>)
 80044a2:	e002      	b.n	80044aa <SendWSPR+0xb2>
 80044a4:	f006 f824 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80044a8:	b160      	cbz	r0, 80044c4 <SendWSPR+0xcc>
			while (SystemSeconds != 1)
 80044aa:	f8d8 3000 	ldr.w	r3, [r8]
				if(KEYER_DASH || KEYER_DOT)
 80044ae:	2140      	movs	r1, #64	; 0x40
 80044b0:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d0bc      	beq.n	8004430 <SendWSPR+0x38>
				if(KEYER_DASH || KEYER_DOT)
 80044b6:	f006 f81b 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	4620      	mov	r0, r4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ef      	bne.n	80044a4 <SendWSPR+0xac>
}
 80044c4:	ecbd 8b02 	vpop	{d8}
 80044c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (HAL_ADCEx_MultiModeStart_DMA(HAdc1,
 80044cc:	4b44      	ldr	r3, [pc, #272]	; (80045e0 <SendWSPR+0x1e8>)
 80044ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d2:	4944      	ldr	r1, [pc, #272]	; (80045e4 <SendWSPR+0x1ec>)
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	f004 f851 	bl	800857c <HAL_ADCEx_MultiModeStart_DMA>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d161      	bne.n	80045a2 <SendWSPR+0x1aa>
			WSPRFirstTime = 0;
 80044de:	2300      	movs	r3, #0
			TXSwitch(1);
 80044e0:	2001      	movs	r0, #1
			WSPRFirstTime = 0;
 80044e2:	7023      	strb	r3, [r4, #0]
			TXSwitch(1);
 80044e4:	f000 fe34 	bl	8005150 <TXSwitch>
			CarrierEnable(1);
 80044e8:	2001      	movs	r0, #1
				if(KEYER_DASH || KEYER_DOT)
 80044ea:	4c3a      	ldr	r4, [pc, #232]	; (80045d4 <SendWSPR+0x1dc>)
			CarrierEnable(1);
 80044ec:	f000 fe94 	bl	8005218 <CarrierEnable>
			while (SystemSeconds != 1)
 80044f0:	e00a      	b.n	8004508 <SendWSPR+0x110>
				if(KEYER_DASH || KEYER_DOT)
 80044f2:	f005 fffd 	bl	800a4f0 <HAL_GPIO_ReadPin>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2180      	movs	r1, #128	; 0x80
 80044fa:	4620      	mov	r0, r4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0e1      	beq.n	80044c4 <SendWSPR+0xcc>
 8004500:	f005 fff6 	bl	800a4f0 <HAL_GPIO_ReadPin>
 8004504:	2800      	cmp	r0, #0
 8004506:	d0dd      	beq.n	80044c4 <SendWSPR+0xcc>
			while (SystemSeconds != 1)
 8004508:	f8d8 7000 	ldr.w	r7, [r8]
				if(KEYER_DASH || KEYER_DOT)
 800450c:	2140      	movs	r1, #64	; 0x40
 800450e:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 8004510:	2f01      	cmp	r7, #1
 8004512:	d1ee      	bne.n	80044f2 <SendWSPR+0xfa>
			WSPRTone = syms[txIndex++];
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <SendWSPR+0x1b8>)
 8004516:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80045f8 <SendWSPR+0x200>
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	4699      	mov	r9, r3
			WSPRStartTick = HAL_GetTick();
 800451e:	4d32      	ldr	r5, [pc, #200]	; (80045e8 <SendWSPR+0x1f0>)
						LED_GREEN_OFF;
 8004520:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 80045d0 <SendWSPR+0x1d8>
			WSPRTone = syms[txIndex++];
 8004524:	f88a 2000 	strb.w	r2, [sl]
			WSPRStartTick = HAL_GetTick();
 8004528:	f002 fe2e 	bl	8007188 <HAL_GetTick>
 800452c:	6028      	str	r0, [r5, #0]
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 800452e:	4b2f      	ldr	r3, [pc, #188]	; (80045ec <SendWSPR+0x1f4>)
 8004530:	037c      	lsls	r4, r7, #13
 8004532:	fba3 3404 	umull	r3, r4, r3, r4
 8004536:	07fb      	lsls	r3, r7, #31
 8004538:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 800453c:	d524      	bpl.n	8004588 <SendWSPR+0x190>
 800453e:	e001      	b.n	8004544 <SendWSPR+0x14c>
						LED_GREEN_OFF;
 8004540:	f005 ffdc 	bl	800a4fc <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004544:	f002 fe20 	bl	8007188 <HAL_GetTick>
 8004548:	682e      	ldr	r6, [r5, #0]
 800454a:	4603      	mov	r3, r0
						LED_GREEN_OFF;
 800454c:	2200      	movs	r2, #0
 800454e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004552:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004556:	1b9b      	subs	r3, r3, r6
 8004558:	429c      	cmp	r4, r3
 800455a:	d8f1      	bhi.n	8004540 <SendWSPR+0x148>
				WSPRTone = syms[txIndex++];
 800455c:	3701      	adds	r7, #1
 800455e:	f819 3f01 	ldrb.w	r3, [r9, #1]!
			while (txIndex < 162) {
 8004562:	2fa2      	cmp	r7, #162	; 0xa2
				WSPRTone = syms[txIndex++];
 8004564:	f88a 3000 	strb.w	r3, [sl]
			while (txIndex < 162) {
 8004568:	d1e1      	bne.n	800452e <SendWSPR+0x136>
			TXSwitch(0);
 800456a:	2000      	movs	r0, #0
 800456c:	f000 fdf0 	bl	8005150 <TXSwitch>
			CarrierEnable(0);
 8004570:	2000      	movs	r0, #0
 8004572:	f000 fe51 	bl	8005218 <CarrierEnable>
			HAL_ADCEx_MultiModeStop_DMA(HAdc1);
 8004576:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <SendWSPR+0x1e8>)
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	f004 f87b 	bl	8008674 <HAL_ADCEx_MultiModeStop_DMA>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 800457e:	f8d8 3000 	ldr.w	r3, [r8]
 8004582:	e755      	b.n	8004430 <SendWSPR+0x38>
						LED_GREEN_ON;
 8004584:	f005 ffba 	bl	800a4fc <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004588:	f002 fdfe 	bl	8007188 <HAL_GetTick>
 800458c:	682e      	ldr	r6, [r5, #0]
 800458e:	4603      	mov	r3, r0
						LED_GREEN_ON;
 8004590:	2201      	movs	r2, #1
 8004592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004596:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 800459a:	1b9b      	subs	r3, r3, r6
 800459c:	42a3      	cmp	r3, r4
 800459e:	d3f1      	bcc.n	8004584 <SendWSPR+0x18c>
 80045a0:	e7dc      	b.n	800455c <SendWSPR+0x164>
				Error_Handler();
 80045a2:	f000 fe97 	bl	80052d4 <Error_Handler>
 80045a6:	e79a      	b.n	80044de <SendWSPR+0xe6>
 80045a8:	c0000000 	.word	0xc0000000
 80045ac:	415adb21 	.word	0x415adb21
 80045b0:	24000624 	.word	0x24000624
 80045b4:	0801900c 	.word	0x0801900c
 80045b8:	4ad6d90e 	.word	0x4ad6d90e
 80045bc:	24006128 	.word	0x24006128
 80045c0:	24006130 	.word	0x24006130
 80045c4:	24005108 	.word	0x24005108
 80045c8:	240050fc 	.word	0x240050fc
 80045cc:	240072c5 	.word	0x240072c5
 80045d0:	58020400 	.word	0x58020400
 80045d4:	58020000 	.word	0x58020000
 80045d8:	288df0cb 	.word	0x288df0cb
 80045dc:	2400020c 	.word	0x2400020c
 80045e0:	24005114 	.word	0x24005114
 80045e4:	240072e0 	.word	0x240072e0
 80045e8:	24000620 	.word	0x24000620
 80045ec:	aaaaaaab 	.word	0xaaaaaaab
 80045f0:	240061a0 	.word	0x240061a0
 80045f4:	2400619c 	.word	0x2400619c
 80045f8:	240072c6 	.word	0x240072c6

080045fc <DisplayStatus.part.0>:
	static char StringStep[8];
	static char StringTxPower[8];

	if (!DisableDisplay)
	{
		switch(Fstep)
 80045fc:	4b98      	ldr	r3, [pc, #608]	; (8004860 <DisplayStatus.part.0+0x264>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
void DisplayStatus(void)
 8004604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004608:	b084      	sub	sp, #16
		switch(Fstep)
 800460a:	f000 811f 	beq.w	800484c <DisplayStatus.part.0+0x250>
 800460e:	d81f      	bhi.n	8004650 <DisplayStatus.part.0+0x54>
 8004610:	2b0a      	cmp	r3, #10
 8004612:	f000 810d 	beq.w	8004830 <DisplayStatus.part.0+0x234>
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d110      	bne.n	800463c <DisplayStatus.part.0+0x40>
		{
		case 1:			strcpy(StringStep,"   1 "); break;
		case 10: 		strcpy(StringStep,"  10 "); break;
		case 100: 		strcpy(StringStep," 100 "); break;
 800461a:	4b92      	ldr	r3, [pc, #584]	; (8004864 <DisplayStatus.part.0+0x268>)
 800461c:	4d92      	ldr	r5, [pc, #584]	; (8004868 <DisplayStatus.part.0+0x26c>)
 800461e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004622:	6028      	str	r0, [r5, #0]
 8004624:	80a9      	strh	r1, [r5, #4]
		case 9000: 		strcpy(StringStep,"   9K"); break;
		case 10000:		strcpy(StringStep,"  10K"); break;
		case 100000: 	strcpy(StringStep," 100K"); break;
		}

		switch(CurrentMode)
 8004626:	4b91      	ldr	r3, [pc, #580]	; (800486c <DisplayStatus.part.0+0x270>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b03      	cmp	r3, #3
 800462c:	f200 8115 	bhi.w	800485a <DisplayStatus.part.0+0x25e>
 8004630:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004634:	00f100f5 	.word	0x00f100f5
 8004638:	002900cc 	.word	0x002900cc
		switch(Fstep)
 800463c:	2b01      	cmp	r3, #1
 800463e:	f040 80f2 	bne.w	8004826 <DisplayStatus.part.0+0x22a>
		case 1:			strcpy(StringStep,"   1 "); break;
 8004642:	4b8b      	ldr	r3, [pc, #556]	; (8004870 <DisplayStatus.part.0+0x274>)
 8004644:	4d88      	ldr	r5, [pc, #544]	; (8004868 <DisplayStatus.part.0+0x26c>)
 8004646:	e893 0003 	ldmia.w	r3, {r0, r1}
 800464a:	6028      	str	r0, [r5, #0]
 800464c:	80a9      	strh	r1, [r5, #4]
 800464e:	e7ea      	b.n	8004626 <DisplayStatus.part.0+0x2a>
		switch(Fstep)
 8004650:	f242 7210 	movw	r2, #10000	; 0x2710
 8004654:	4293      	cmp	r3, r2
 8004656:	f000 80f2 	beq.w	800483e <DisplayStatus.part.0+0x242>
 800465a:	4a86      	ldr	r2, [pc, #536]	; (8004874 <DisplayStatus.part.0+0x278>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d106      	bne.n	800466e <DisplayStatus.part.0+0x72>
		case 100000: 	strcpy(StringStep," 100K"); break;
 8004660:	4b85      	ldr	r3, [pc, #532]	; (8004878 <DisplayStatus.part.0+0x27c>)
 8004662:	4d81      	ldr	r5, [pc, #516]	; (8004868 <DisplayStatus.part.0+0x26c>)
 8004664:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004668:	6028      	str	r0, [r5, #0]
 800466a:	80a9      	strh	r1, [r5, #4]
 800466c:	e7db      	b.n	8004626 <DisplayStatus.part.0+0x2a>
		switch(Fstep)
 800466e:	f242 3228 	movw	r2, #9000	; 0x2328
 8004672:	4293      	cmp	r3, r2
 8004674:	f040 80d7 	bne.w	8004826 <DisplayStatus.part.0+0x22a>
		case 9000: 		strcpy(StringStep,"   9K"); break;
 8004678:	4b80      	ldr	r3, [pc, #512]	; (800487c <DisplayStatus.part.0+0x280>)
 800467a:	4d7b      	ldr	r5, [pc, #492]	; (8004868 <DisplayStatus.part.0+0x26c>)
 800467c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004680:	6028      	str	r0, [r5, #0]
 8004682:	80a9      	strh	r1, [r5, #4]
 8004684:	e7cf      	b.n	8004626 <DisplayStatus.part.0+0x2a>
		{
		case LSB: strcpy(StringMode,"LSB"); break;
		case USB: strcpy(StringMode,"USB"); break;
		case AM: strcpy(StringMode,"AM"); break;
		case CW: strcpy(StringMode,"CW"); break;
 8004686:	4b7e      	ldr	r3, [pc, #504]	; (8004880 <DisplayStatus.part.0+0x284>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4f7e      	ldr	r7, [pc, #504]	; (8004884 <DisplayStatus.part.0+0x288>)
 800468c:	0c1a      	lsrs	r2, r3, #16
 800468e:	803b      	strh	r3, [r7, #0]
 8004690:	70ba      	strb	r2, [r7, #2]
		}
		switch (CurrentAGC)
 8004692:	4b7d      	ldr	r3, [pc, #500]	; (8004888 <DisplayStatus.part.0+0x28c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80a0 	beq.w	80047dc <DisplayStatus.part.0+0x1e0>
 800469c:	2b01      	cmp	r3, #1
 800469e:	d105      	bne.n	80046ac <DisplayStatus.part.0+0xb0>
		{
		case Fast: strcpy(StringAGC,"Fast"); break;
		case Slow: strcpy(StringAGC,"Slow"); break;
 80046a0:	4a7a      	ldr	r2, [pc, #488]	; (800488c <DisplayStatus.part.0+0x290>)
 80046a2:	4b7b      	ldr	r3, [pc, #492]	; (8004890 <DisplayStatus.part.0+0x294>)
 80046a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046a8:	6018      	str	r0, [r3, #0]
 80046aa:	7119      	strb	r1, [r3, #4]
		}
		switch (CurrentBW)
 80046ac:	4b79      	ldr	r3, [pc, #484]	; (8004894 <DisplayStatus.part.0+0x298>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 809e 	beq.w	80047f2 <DisplayStatus.part.0+0x1f6>
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	f040 80b3 	bne.w	8004822 <DisplayStatus.part.0+0x226>
		{
		case Narrow: strcpy(StringWidth,"Narrow"); break;
		case Wide: strcpy(StringWidth,"Wide"); break;
 80046bc:	4b76      	ldr	r3, [pc, #472]	; (8004898 <DisplayStatus.part.0+0x29c>)
 80046be:	4e77      	ldr	r6, [pc, #476]	; (800489c <DisplayStatus.part.0+0x2a0>)
 80046c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046c4:	6030      	str	r0, [r6, #0]
 80046c6:	7131      	strb	r1, [r6, #4]
		}
		switch (TxPowerOut)
 80046c8:	4b75      	ldr	r3, [pc, #468]	; (80048a0 <DisplayStatus.part.0+0x2a4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d0:	f000 809d 	beq.w	800480e <DisplayStatus.part.0+0x212>
 80046d4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80046d8:	4c72      	ldr	r4, [pc, #456]	; (80048a4 <DisplayStatus.part.0+0x2a8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	f000 80a5 	beq.w	800482a <DisplayStatus.part.0+0x22e>
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		{
		case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 80046e4:	bf04      	itt	eq
 80046e6:	4b70      	ldreq	r3, [pc, #448]	; (80048a8 <DisplayStatus.part.0+0x2ac>)
 80046e8:	6023      	streq	r3, [r4, #0]
   HAL_ADC_PollForConversion(&hadc3, 100);
 80046ea:	2164      	movs	r1, #100	; 0x64
 80046ec:	486f      	ldr	r0, [pc, #444]	; (80048ac <DisplayStatus.part.0+0x2b0>)
 80046ee:	f002 fd95 	bl	800721c <HAL_ADC_PollForConversion>
   adcVRefVal = HAL_ADC_GetValue(&hadc3);
 80046f2:	486e      	ldr	r0, [pc, #440]	; (80048ac <DisplayStatus.part.0+0x2b0>)
 80046f4:	f002 fe1e 	bl	8007334 <HAL_ADC_GetValue>
   HAL_ADC_PollForConversion(&hadc3, 100);
 80046f8:	2164      	movs	r1, #100	; 0x64
   adcVRefVal = HAL_ADC_GetValue(&hadc3);
 80046fa:	4680      	mov	r8, r0
   HAL_ADC_PollForConversion(&hadc3, 100);
 80046fc:	486b      	ldr	r0, [pc, #428]	; (80048ac <DisplayStatus.part.0+0x2b0>)
 80046fe:	f002 fd8d 	bl	800721c <HAL_ADC_PollForConversion>
   adcTempVal = HAL_ADC_GetValue(&hadc3);
 8004702:	486a      	ldr	r0, [pc, #424]	; (80048ac <DisplayStatus.part.0+0x2b0>)
 8004704:	f002 fe16 	bl	8007334 <HAL_ADC_GetValue>
   	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 8004708:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 80048f8 <DisplayStatus.part.0+0x2fc>
   	VRefMilliVoltsValue = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcVRefVal, ADC_RESOLUTION_16B);
 800470c:	f640 42e4 	movw	r2, #3300	; 0xce4
   	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 8004710:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 80048fc <DisplayStatus.part.0+0x300>
   	VRefMilliVoltsValue = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcVRefVal, ADC_RESOLUTION_16B);
 8004714:	f8bc 1060 	ldrh.w	r1, [ip, #96]	; 0x60
		//		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGGprovaprova %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, RXVolume);
		//sprintf((char *)UartTXString, "\e[6;1H123456789012345678901234567890123456789012345678901234567890\r");
		//TODO: TinyUSB seems to have a 64 byte limit in USB out buffer. For now we split the string.
		//		Best solution would be to have an auto split write function
		int32_t Temp = adc_ReadInternalTemp();
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s Temp %d    \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, Temp);
 8004718:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80048b0 <DisplayStatus.part.0+0x2b4>
   	VRefMilliVoltsValue = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcVRefVal, ADC_RESOLUTION_16B);
 800471c:	fb02 f101 	mul.w	r1, r2, r1
 8004720:	fbb1 f2f8 	udiv	r2, r1, r8
   	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 8004724:	fb02 f000 	mul.w	r0, r2, r0
 8004728:	f8bc 1020 	ldrh.w	r1, [ip, #32]
 800472c:	0883      	lsrs	r3, r0, #2
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s Temp %d    \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, Temp);
 800472e:	4861      	ldr	r0, [pc, #388]	; (80048b4 <DisplayStatus.part.0+0x2b8>)
   	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 8004730:	fbae 2303 	umull	r2, r3, lr, r3
 8004734:	f8bc 2040 	ldrh.w	r2, [ip, #64]	; 0x40
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s Temp %d    \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, Temp);
 8004738:	9500      	str	r5, [sp, #0]
   	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 800473a:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 800473e:	1a52      	subs	r2, r2, r1
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s Temp %d    \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, Temp);
 8004740:	495d      	ldr	r1, [pc, #372]	; (80048b8 <DisplayStatus.part.0+0x2bc>)
   	Temp = __HAL_ADC_CALC_TEMPERATURE(VRefMilliVoltsValue, adcTempVal, ADC_RESOLUTION_16B);
 8004742:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	fb93 f3f2 	sdiv	r3, r3, r2
 800474c:	331e      	adds	r3, #30
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s Temp %d    \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, Temp);
 800474e:	9303      	str	r3, [sp, #12]
 8004750:	4b5a      	ldr	r3, [pc, #360]	; (80048bc <DisplayStatus.part.0+0x2c0>)
 8004752:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004756:	edd3 7a00 	vldr	s15, [r3]
 800475a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800475e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004762:	ec53 2b17 	vmov	r2, r3, d7
 8004766:	f00e fa03 	bl	8012b70 <siprintf>
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 800476a:	4852      	ldr	r0, [pc, #328]	; (80048b4 <DisplayStatus.part.0+0x2b8>)
 800476c:	f7fb fe18 	bl	80003a0 <strlen>
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
 8004770:	4950      	ldr	r1, [pc, #320]	; (80048b4 <DisplayStatus.part.0+0x2b8>)
 8004772:	4602      	mov	r2, r0
 8004774:	2000      	movs	r0, #0
 8004776:	f00a fd2b 	bl	800f1d0 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
 800477a:	2000      	movs	r0, #0
 800477c:	f00a fce4 	bl	800f148 <tud_cdc_n_write_flush>
	HAL_Delay(1);
 8004780:	2001      	movs	r0, #1
 8004782:	f002 fd07 	bl	8007194 <HAL_Delay>
		PrintUI(UartTXString);
		sprintf((char *)UartTXString, "\e[6;1HAGC %s ERR %d WPM %d PWR %s Volume %1.1f   \r", StringAGC, TXFreqError, keyer_speed, StringTxPower, RXVolume);
 8004786:	494e      	ldr	r1, [pc, #312]	; (80048c0 <DisplayStatus.part.0+0x2c4>)
 8004788:	4a4e      	ldr	r2, [pc, #312]	; (80048c4 <DisplayStatus.part.0+0x2c8>)
 800478a:	ed91 7a00 	vldr	s14, [r1]
 800478e:	6810      	ldr	r0, [r2, #0]
 8004790:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004794:	4b4c      	ldr	r3, [pc, #304]	; (80048c8 <DisplayStatus.part.0+0x2cc>)
 8004796:	494d      	ldr	r1, [pc, #308]	; (80048cc <DisplayStatus.part.0+0x2d0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3d      	ldr	r2, [pc, #244]	; (8004890 <DisplayStatus.part.0+0x294>)
 800479c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80047a0:	e9cd 0400 	strd	r0, r4, [sp]
 80047a4:	4843      	ldr	r0, [pc, #268]	; (80048b4 <DisplayStatus.part.0+0x2b8>)
 80047a6:	f00e f9e3 	bl	8012b70 <siprintf>
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 80047aa:	4842      	ldr	r0, [pc, #264]	; (80048b4 <DisplayStatus.part.0+0x2b8>)
 80047ac:	f7fb fdf8 	bl	80003a0 <strlen>
  return tud_cdc_n_write(0, buffer, bufsize);
 80047b0:	4940      	ldr	r1, [pc, #256]	; (80048b4 <DisplayStatus.part.0+0x2b8>)
 80047b2:	4602      	mov	r2, r0
 80047b4:	2000      	movs	r0, #0
 80047b6:	f00a fd0b 	bl	800f1d0 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 80047ba:	2000      	movs	r0, #0
 80047bc:	f00a fcc4 	bl	800f148 <tud_cdc_n_write_flush>
	HAL_Delay(1);
 80047c0:	2001      	movs	r0, #1
		PrintUI(UartTXString);
	}
}
 80047c2:	b004      	add	sp, #16
 80047c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(1);
 80047c8:	f002 bce4 	b.w	8007194 <HAL_Delay>
		case USB: strcpy(StringMode,"USB"); break;
 80047cc:	4b40      	ldr	r3, [pc, #256]	; (80048d0 <DisplayStatus.part.0+0x2d4>)
 80047ce:	4f2d      	ldr	r7, [pc, #180]	; (8004884 <DisplayStatus.part.0+0x288>)
 80047d0:	603b      	str	r3, [r7, #0]
		switch (CurrentAGC)
 80047d2:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <DisplayStatus.part.0+0x28c>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f47f af60 	bne.w	800469c <DisplayStatus.part.0+0xa0>
		case Fast: strcpy(StringAGC,"Fast"); break;
 80047dc:	4a3d      	ldr	r2, [pc, #244]	; (80048d4 <DisplayStatus.part.0+0x2d8>)
 80047de:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <DisplayStatus.part.0+0x294>)
 80047e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047e4:	6018      	str	r0, [r3, #0]
 80047e6:	7119      	strb	r1, [r3, #4]
		switch (CurrentBW)
 80047e8:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <DisplayStatus.part.0+0x298>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f47f af62 	bne.w	80046b6 <DisplayStatus.part.0+0xba>
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80047f2:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <DisplayStatus.part.0+0x2dc>)
 80047f4:	4e29      	ldr	r6, [pc, #164]	; (800489c <DisplayStatus.part.0+0x2a0>)
 80047f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047fa:	0c0b      	lsrs	r3, r1, #16
 80047fc:	6030      	str	r0, [r6, #0]
 80047fe:	80b1      	strh	r1, [r6, #4]
 8004800:	71b3      	strb	r3, [r6, #6]
		switch (TxPowerOut)
 8004802:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <DisplayStatus.part.0+0x2a4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480a:	f47f af63 	bne.w	80046d4 <DisplayStatus.part.0+0xd8>
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 800480e:	4c25      	ldr	r4, [pc, #148]	; (80048a4 <DisplayStatus.part.0+0x2a8>)
 8004810:	4b32      	ldr	r3, [pc, #200]	; (80048dc <DisplayStatus.part.0+0x2e0>)
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	e769      	b.n	80046ea <DisplayStatus.part.0+0xee>
		case LSB: strcpy(StringMode,"LSB"); break;
 8004816:	4f1b      	ldr	r7, [pc, #108]	; (8004884 <DisplayStatus.part.0+0x288>)
 8004818:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <DisplayStatus.part.0+0x2e4>)
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	e739      	b.n	8004692 <DisplayStatus.part.0+0x96>
		case AM: strcpy(StringMode,"AM"); break;
 800481e:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <DisplayStatus.part.0+0x2e8>)
 8004820:	e732      	b.n	8004688 <DisplayStatus.part.0+0x8c>
 8004822:	4e1e      	ldr	r6, [pc, #120]	; (800489c <DisplayStatus.part.0+0x2a0>)
 8004824:	e750      	b.n	80046c8 <DisplayStatus.part.0+0xcc>
 8004826:	4d10      	ldr	r5, [pc, #64]	; (8004868 <DisplayStatus.part.0+0x26c>)
 8004828:	e6fd      	b.n	8004626 <DisplayStatus.part.0+0x2a>
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 800482a:	4b2f      	ldr	r3, [pc, #188]	; (80048e8 <DisplayStatus.part.0+0x2ec>)
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	e75c      	b.n	80046ea <DisplayStatus.part.0+0xee>
		case 10: 		strcpy(StringStep,"  10 "); break;
 8004830:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <DisplayStatus.part.0+0x2f0>)
 8004832:	4d0d      	ldr	r5, [pc, #52]	; (8004868 <DisplayStatus.part.0+0x26c>)
 8004834:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004838:	6028      	str	r0, [r5, #0]
 800483a:	80a9      	strh	r1, [r5, #4]
 800483c:	e6f3      	b.n	8004626 <DisplayStatus.part.0+0x2a>
		case 10000:		strcpy(StringStep,"  10K"); break;
 800483e:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <DisplayStatus.part.0+0x2f4>)
 8004840:	4d09      	ldr	r5, [pc, #36]	; (8004868 <DisplayStatus.part.0+0x26c>)
 8004842:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004846:	6028      	str	r0, [r5, #0]
 8004848:	80a9      	strh	r1, [r5, #4]
 800484a:	e6ec      	b.n	8004626 <DisplayStatus.part.0+0x2a>
		case 1000: 		strcpy(StringStep,"   1K"); break;
 800484c:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <DisplayStatus.part.0+0x2f8>)
 800484e:	4d06      	ldr	r5, [pc, #24]	; (8004868 <DisplayStatus.part.0+0x26c>)
 8004850:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004854:	6028      	str	r0, [r5, #0]
 8004856:	80a9      	strh	r1, [r5, #4]
 8004858:	e6e5      	b.n	8004626 <DisplayStatus.part.0+0x2a>
 800485a:	4f0a      	ldr	r7, [pc, #40]	; (8004884 <DisplayStatus.part.0+0x288>)
 800485c:	e719      	b.n	8004692 <DisplayStatus.part.0+0x96>
 800485e:	bf00      	nop
 8004860:	24005110 	.word	0x24005110
 8004864:	080191d0 	.word	0x080191d0
 8004868:	24006184 	.word	0x24006184
 800486c:	24000eec 	.word	0x24000eec
 8004870:	080191c0 	.word	0x080191c0
 8004874:	000186a0 	.word	0x000186a0
 8004878:	080191f0 	.word	0x080191f0
 800487c:	080191e0 	.word	0x080191e0
 8004880:	080191fc 	.word	0x080191fc
 8004884:	2400617c 	.word	0x2400617c
 8004888:	24000eea 	.word	0x24000eea
 800488c:	08019208 	.word	0x08019208
 8004890:	24006174 	.word	0x24006174
 8004894:	24000eeb 	.word	0x24000eeb
 8004898:	08019218 	.word	0x08019218
 800489c:	24006194 	.word	0x24006194
 80048a0:	240061b4 	.word	0x240061b4
 80048a4:	2400618c 	.word	0x2400618c
 80048a8:	00776f4c 	.word	0x00776f4c
 80048ac:	2400a3c8 	.word	0x2400a3c8
 80048b0:	3a83126f 	.word	0x3a83126f
 80048b4:	240062c0 	.word	0x240062c0
 80048b8:	08019220 	.word	0x08019220
 80048bc:	24006128 	.word	0x24006128
 80048c0:	24006148 	.word	0x24006148
 80048c4:	2400acdc 	.word	0x2400acdc
 80048c8:	240061a8 	.word	0x240061a8
 80048cc:	0801925c 	.word	0x0801925c
 80048d0:	00425355 	.word	0x00425355
 80048d4:	08019200 	.word	0x08019200
 80048d8:	08019210 	.word	0x08019210
 80048dc:	0064694d 	.word	0x0064694d
 80048e0:	0042534c 	.word	0x0042534c
 80048e4:	080191f8 	.word	0x080191f8
 80048e8:	0078614d 	.word	0x0078614d
 80048ec:	080191c8 	.word	0x080191c8
 80048f0:	080191e8 	.word	0x080191e8
 80048f4:	080191d8 	.word	0x080191d8
 80048f8:	1ff1e800 	.word	0x1ff1e800
 80048fc:	09ee009f 	.word	0x09ee009f

08004900 <tud_mount_cb>:
}
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop

08004904 <tud_umount_cb>:
}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop

08004908 <tud_suspend_cb>:
}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop

0800490c <tud_resume_cb>:
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop

08004910 <tud_audio_get_req_entity_cb>:
{
 8004910:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8004912:	794d      	ldrb	r5, [r1, #5]
{
 8004914:	b08f      	sub	sp, #60	; 0x3c
 8004916:	460c      	mov	r4, r1
 8004918:	4606      	mov	r6, r0
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 800491a:	2d04      	cmp	r5, #4
 800491c:	d004      	beq.n	8004928 <tud_audio_get_req_entity_cb+0x18>
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 800491e:	2d02      	cmp	r5, #2
 8004920:	d010      	beq.n	8004944 <tud_audio_get_req_entity_cb+0x34>
	return false;
 8004922:	2000      	movs	r0, #0
}
 8004924:	b00f      	add	sp, #60	; 0x3c
 8004926:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 8004928:	78cf      	ldrb	r7, [r1, #3]
 800492a:	2f01      	cmp	r7, #1
 800492c:	d01e      	beq.n	800496c <tud_audio_get_req_entity_cb+0x5c>
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 800492e:	2f02      	cmp	r7, #2
 8004930:	d1f7      	bne.n	8004922 <tud_audio_get_req_entity_cb+0x12>
 8004932:	784b      	ldrb	r3, [r1, #1]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d1f4      	bne.n	8004922 <tud_audio_get_req_entity_cb+0x12>
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 8004938:	aa01      	add	r2, sp, #4
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 800493a:	f88d 3004 	strb.w	r3, [sp, #4]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 800493e:	f00a fb1d 	bl	800ef7c <tud_audio_buffer_and_schedule_control_xfer>
 8004942:	e7ef      	b.n	8004924 <tud_audio_get_req_entity_cb+0x14>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 8004944:	78cb      	ldrb	r3, [r1, #3]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d04c      	beq.n	80049e4 <tud_audio_get_req_entity_cb+0xd4>
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 800494a:	2b02      	cmp	r3, #2
 800494c:	d1e9      	bne.n	8004922 <tud_audio_get_req_entity_cb+0x12>
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 800494e:	784a      	ldrb	r2, [r1, #1]
 8004950:	2a02      	cmp	r2, #2
 8004952:	d05b      	beq.n	8004a0c <tud_audio_get_req_entity_cb+0xfc>
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 8004954:	2a01      	cmp	r2, #1
 8004956:	d1e4      	bne.n	8004922 <tud_audio_get_req_entity_cb+0x12>
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 8004958:	788c      	ldrb	r4, [r1, #2]
 800495a:	4a32      	ldr	r2, [pc, #200]	; (8004a24 <tud_audio_get_req_entity_cb+0x114>)
 800495c:	f832 4014 	ldrh.w	r4, [r2, r4, lsl #1]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 8004960:	aa01      	add	r2, sp, #4
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 8004962:	f8ad 4004 	strh.w	r4, [sp, #4]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 8004966:	f00a fb09 	bl	800ef7c <tud_audio_buffer_and_schedule_control_xfer>
 800496a:	e7db      	b.n	8004924 <tud_audio_get_req_entity_cb+0x14>
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 800496c:	784b      	ldrb	r3, [r1, #1]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d044      	beq.n	80049fc <tud_audio_get_req_entity_cb+0xec>
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8004972:	2b02      	cmp	r3, #2
 8004974:	d1d5      	bne.n	8004922 <tud_audio_get_req_entity_cb+0x12>
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 8004976:	222a      	movs	r2, #42	; 0x2a
 8004978:	2100      	movs	r1, #0
 800497a:	a803      	add	r0, sp, #12
 800497c:	f00d fb16 	bl	8011fac <memset>
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8004980:	2300      	movs	r3, #0
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8004982:	4621      	mov	r1, r4
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8004984:	f64a 4444 	movw	r4, #44100	; 0xac44
 8004988:	f645 0288 	movw	r2, #22664	; 0x5888
 800498c:	f8ad 3008 	strh.w	r3, [sp, #8]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 8004990:	f8ad 300c 	strh.w	r3, [sp, #12]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8004994:	4630      	mov	r0, r6
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8004996:	f8ad 3014 	strh.w	r3, [sp, #20]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 800499a:	f8ad 3018 	strh.w	r3, [sp, #24]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 800499e:	f44f 43ee 	mov.w	r3, #30464	; 0x7700
 80049a2:	f8ad 4006 	strh.w	r4, [sp, #6]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80049a6:	f8ad 400a 	strh.w	r4, [sp, #10]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80049aa:	f64b 3480 	movw	r4, #48000	; 0xbb80
 80049ae:	f8ad 201e 	strh.w	r2, [sp, #30]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80049b2:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 80049b6:	aa01      	add	r2, sp, #4
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80049b8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80049bc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 80049c0:	2332      	movs	r3, #50	; 0x32
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 80049c2:	f8ad 5004 	strh.w	r5, [sp, #4]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80049c6:	f8ad 7020 	strh.w	r7, [sp, #32]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80049ca:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80049ce:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80049d2:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80049d6:	f8ad 4012 	strh.w	r4, [sp, #18]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80049da:	f8ad 4016 	strh.w	r4, [sp, #22]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 80049de:	f00a facd 	bl	800ef7c <tud_audio_buffer_and_schedule_control_xfer>
 80049e2:	e79f      	b.n	8004924 <tud_audio_get_req_entity_cb+0x14>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 80049e4:	784b      	ldrb	r3, [r1, #1]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d19b      	bne.n	8004922 <tud_audio_get_req_entity_cb+0x12>
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 80049ea:	788a      	ldrb	r2, [r1, #2]
 80049ec:	4c0e      	ldr	r4, [pc, #56]	; (8004a28 <tud_audio_get_req_entity_cb+0x118>)
 80049ee:	5ca4      	ldrb	r4, [r4, r2]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 80049f0:	aa01      	add	r2, sp, #4
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 80049f2:	f88d 4004 	strb.w	r4, [sp, #4]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 80049f6:	f00a fac1 	bl	800ef7c <tud_audio_buffer_and_schedule_control_xfer>
 80049fa:	e793      	b.n	8004924 <tud_audio_get_req_entity_cb+0x14>
			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 80049fc:	4c0b      	ldr	r4, [pc, #44]	; (8004a2c <tud_audio_get_req_entity_cb+0x11c>)
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 80049fe:	462b      	mov	r3, r5
 8004a00:	aa01      	add	r2, sp, #4
			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 8004a02:	6824      	ldr	r4, [r4, #0]
 8004a04:	9401      	str	r4, [sp, #4]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 8004a06:	f00a fab9 	bl	800ef7c <tud_audio_buffer_and_schedule_control_xfer>
 8004a0a:	e78b      	b.n	8004924 <tud_audio_get_req_entity_cb+0x14>
			audio_control_range_2_n_t(1) range_vol = {
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <tud_audio_get_req_entity_cb+0x120>)
 8004a0e:	aa01      	add	r2, sp, #4
 8004a10:	e893 0003 	ldmia.w	r3, {r0, r1}
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 8004a14:	2308      	movs	r3, #8
			audio_control_range_2_n_t(1) range_vol = {
 8004a16:	e882 0003 	stmia.w	r2, {r0, r1}
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f00a faad 	bl	800ef7c <tud_audio_buffer_and_schedule_control_xfer>
 8004a22:	e77f      	b.n	8004924 <tud_audio_get_req_entity_cb+0x14>
 8004a24:	2400c4b4 	.word	0x2400c4b4
 8004a28:	2400ad0c 	.word	0x2400ad0c
 8004a2c:	24000310 	.word	0x24000310
 8004a30:	080160c8 	.word	0x080160c8

08004a34 <tud_audio_set_req_entity_cb>:
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8004a34:	794b      	ldrb	r3, [r1, #5]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d010      	beq.n	8004a5c <tud_audio_set_req_entity_cb+0x28>
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d001      	beq.n	8004a42 <tud_audio_set_req_entity_cb+0xe>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8004a3e:	2000      	movs	r0, #0
}
 8004a40:	4770      	bx	lr
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8004a42:	784b      	ldrb	r3, [r1, #1]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d1fa      	bne.n	8004a3e <tud_audio_set_req_entity_cb+0xa>
	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 8004a48:	78c8      	ldrb	r0, [r1, #3]
 8004a4a:	2801      	cmp	r0, #1
 8004a4c:	d1f7      	bne.n	8004a3e <tud_audio_set_req_entity_cb+0xa>
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 8004a4e:	88cb      	ldrh	r3, [r1, #6]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d1f4      	bne.n	8004a3e <tud_audio_set_req_entity_cb+0xa>
		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <tud_audio_set_req_entity_cb+0x60>)
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	601a      	str	r2, [r3, #0]
		return true;
 8004a5a:	4770      	bx	lr
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8004a5c:	7848      	ldrb	r0, [r1, #1]
 8004a5e:	2801      	cmp	r0, #1
 8004a60:	d1ed      	bne.n	8004a3e <tud_audio_set_req_entity_cb+0xa>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 8004a62:	78cb      	ldrb	r3, [r1, #3]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d00b      	beq.n	8004a80 <tud_audio_set_req_entity_cb+0x4c>
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d1e8      	bne.n	8004a3e <tud_audio_set_req_entity_cb+0xa>
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 8004a6c:	88cb      	ldrh	r3, [r1, #6]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d1e5      	bne.n	8004a3e <tud_audio_set_req_entity_cb+0xa>
		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 8004a72:	f9b2 c000 	ldrsh.w	ip, [r2]
 8004a76:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <tud_audio_set_req_entity_cb+0x64>)
 8004a78:	788a      	ldrb	r2, [r1, #2]
 8004a7a:	f823 c012 	strh.w	ip, [r3, r2, lsl #1]
		return true;
 8004a7e:	4770      	bx	lr
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 8004a80:	88c8      	ldrh	r0, [r1, #6]
 8004a82:	2801      	cmp	r0, #1
 8004a84:	d1db      	bne.n	8004a3e <tud_audio_set_req_entity_cb+0xa>
		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 8004a86:	f992 c000 	ldrsb.w	ip, [r2]
 8004a8a:	788b      	ldrb	r3, [r1, #2]
 8004a8c:	4a03      	ldr	r2, [pc, #12]	; (8004a9c <tud_audio_set_req_entity_cb+0x68>)
 8004a8e:	f802 c003 	strb.w	ip, [r2, r3]
		return true;
 8004a92:	4770      	bx	lr
 8004a94:	24000310 	.word	0x24000310
 8004a98:	2400c4b4 	.word	0x2400c4b4
 8004a9c:	2400ad0c 	.word	0x2400ad0c

08004aa0 <tud_audio_set_itf_close_EP_cb>:
}
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	4770      	bx	lr

08004aa4 <tud_audio_set_itf_cb>:
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 8004aa4:	884b      	ldrh	r3, [r1, #2]
	spk_data_size = 0;
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <tud_audio_set_itf_cb+0x1c>)

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	6010      	str	r0, [r2, #0]
	if(alt != 0)
 8004aae:	b12b      	cbz	r3, 8004abc <tud_audio_set_itf_cb+0x18>
		current_resolution = resolutions_per_format[alt-1];
 8004ab0:	4a04      	ldr	r2, [pc, #16]	; (8004ac4 <tud_audio_set_itf_cb+0x20>)
 8004ab2:	4905      	ldr	r1, [pc, #20]	; (8004ac8 <tud_audio_set_itf_cb+0x24>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004aba:	700b      	strb	r3, [r1, #0]
}
 8004abc:	2001      	movs	r0, #1
 8004abe:	4770      	bx	lr
 8004ac0:	2400b47c 	.word	0x2400b47c
 8004ac4:	080192c0 	.word	0x080192c0
 8004ac8:	24007af4 	.word	0x24007af4

08004acc <tud_audio_rx_done_pre_read_cb>:
{
 8004acc:	460a      	mov	r2, r1
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
  return tud_audio_n_read(0, buffer, bufsize);
 8004ace:	2000      	movs	r0, #0
 8004ad0:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <tud_audio_rx_done_pre_read_cb+0x18>)
 8004ad2:	b508      	push	{r3, lr}
 8004ad4:	f009 ff00 	bl	800e8d8 <tud_audio_n_read>
	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <tud_audio_rx_done_pre_read_cb+0x1c>)
 8004ada:	4602      	mov	r2, r0
}
 8004adc:	2001      	movs	r0, #1
	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 8004ade:	601a      	str	r2, [r3, #0]
}
 8004ae0:	bd08      	pop	{r3, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2400ae6c 	.word	0x2400ae6c
 8004ae8:	2400b47c 	.word	0x2400b47c

08004aec <tud_audio_tx_done_pre_load_cb>:
}
 8004aec:	2001      	movs	r0, #1
 8004aee:	4770      	bx	lr

08004af0 <tud_audio_tx_done_post_load_cb>:
}
 8004af0:	2001      	movs	r0, #1
 8004af2:	4770      	bx	lr

08004af4 <tud_cdc_line_state_cb>:
}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop

08004af8 <tud_cdc_rx_cb>:
}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop

08004afc <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM13)
 8004afc:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004afe:	6803      	ldr	r3, [r0, #0]
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <HAL_TIM_PeriodElapsedCallback+0x10>
	if (htim->Instance == TIM7)
 8004b04:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d010      	beq.n	8004b2c <HAL_TIM_PeriodElapsedCallback+0x30>
 8004b0a:	4770      	bx	lr

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8004b0c:	2100      	movs	r1, #0
{
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	4604      	mov	r4, r0
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	f00b f9bf 	bl	800fe98 <tud_task_ext>
		MainLoopCounter++;  //used with debugger to check frequency of main loop
 8004b1a:	4909      	ldr	r1, [pc, #36]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x44>)
	if (htim->Instance == TIM7)
 8004b1c:	6823      	ldr	r3, [r4, #0]
		MainLoopCounter++;  //used with debugger to check frequency of main loop
 8004b1e:	680a      	ldr	r2, [r1, #0]
 8004b20:	3201      	adds	r2, #1
 8004b22:	600a      	str	r2, [r1, #0]
	if (htim->Instance == TIM7)
 8004b24:	4a05      	ldr	r2, [pc, #20]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d002      	beq.n	8004b30 <HAL_TIM_PeriodElapsedCallback+0x34>
}
 8004b2a:	bd10      	pop	{r4, pc}
		DoKeyer();
 8004b2c:	f7fc bcec 	b.w	8001508 <DoKeyer>
}
 8004b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		DoKeyer();
 8004b34:	f7fc bce8 	b.w	8001508 <DoKeyer>
 8004b38:	40001c00 	.word	0x40001c00
 8004b3c:	40001400 	.word	0x40001400
 8004b40:	24006138 	.word	0x24006138

08004b44 <HAL_ADC_ConvCpltCallback>:
{
 8004b44:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8004b48:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004b4c:	490a      	ldr	r1, [pc, #40]	; (8004b78 <HAL_ADC_ConvCpltCallback+0x34>)
 8004b4e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8004b52:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004b56:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d1fa      	bne.n	8004b52 <HAL_ADC_ConvCpltCallback+0xe>
 8004b5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b60:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(1);
 8004b64:	2001      	movs	r0, #1
 8004b66:	f7fd fb75 	bl	8002254 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = SET;
 8004b6a:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <HAL_ADC_ConvCpltCallback+0x38>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
}
 8004b70:	bd08      	pop	{r3, pc}
 8004b72:	bf00      	nop
 8004b74:	240076e0 	.word	0x240076e0
 8004b78:	e000ed00 	.word	0xe000ed00
 8004b7c:	2400c4b2 	.word	0x2400c4b2

08004b80 <HAL_ADC_ConvHalfCpltCallback>:
{
 8004b80:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8004b84:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004b88:	490a      	ldr	r1, [pc, #40]	; (8004bb4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8004b8a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8004b8e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004b92:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d1fa      	bne.n	8004b8e <HAL_ADC_ConvHalfCpltCallback+0xe>
 8004b98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b9c:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(0);
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f7fd fb57 	bl	8002254 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = RESET;
 8004ba6:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
}
 8004bac:	bd08      	pop	{r3, pc}
 8004bae:	bf00      	nop
 8004bb0:	240072e0 	.word	0x240072e0
 8004bb4:	e000ed00 	.word	0xe000ed00
 8004bb8:	2400c4b2 	.word	0x2400c4b2

08004bbc <HAL_DAC_ConvCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[BSIZE];
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <HAL_DAC_ConvCpltCallbackCh1+0x8>)
 8004bbe:	4a02      	ldr	r2, [pc, #8]	; (8004bc8 <HAL_DAC_ConvCpltCallbackCh1+0xc>)
 8004bc0:	601a      	str	r2, [r3, #0]
}
 8004bc2:	4770      	bx	lr
 8004bc4:	240072c0 	.word	0x240072c0
 8004bc8:	24000ae0 	.word	0x24000ae0

08004bcc <HAL_DAC_ConvHalfCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[0];
 8004bcc:	4b01      	ldr	r3, [pc, #4]	; (8004bd4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x8>)
 8004bce:	4a02      	ldr	r2, [pc, #8]	; (8004bd8 <HAL_DAC_ConvHalfCpltCallbackCh1+0xc>)
 8004bd0:	601a      	str	r2, [r3, #0]
}
 8004bd2:	4770      	bx	lr
 8004bd4:	240072c0 	.word	0x240072c0
 8004bd8:	240006e0 	.word	0x240006e0

08004bdc <HAL_ADC_LevelOutOfWindowCallback>:
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004bdc:	4907      	ldr	r1, [pc, #28]	; (8004bfc <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 8004bde:	2002      	movs	r0, #2
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004be2:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004be4:	4a07      	ldr	r2, [pc, #28]	; (8004c04 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 8004be6:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004be8:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004bea:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf0:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004bf2:	6853      	ldr	r3, [r2, #4]
 8004bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf8:	6053      	str	r3, [r2, #4]
}
 8004bfa:	4770      	bx	lr
 8004bfc:	2400a300 	.word	0x2400a300
 8004c00:	2400613e 	.word	0x2400613e
 8004c04:	2400a364 	.word	0x2400a364

08004c08 <SetWSPRPLLCoeff>:
 * for 7040.1 PLL coeffs are N 450, M 17, P 94, FracDiv 48
 */


void SetWSPRPLLCoeff(double TXFreq, uint16_t *FracDivCoeff, uint16_t *FracPWMCoeff)
{
 8004c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
	uint32_t m, n, p, od;
	volatile uint32_t fm, fn, fp, fod, FracDiv, i;
	LastTXFreq = (float)TXFreq;
#define TEST_COEFF 1
	for (i = 0; i < 4; i++) {
 8004c0c:	2300      	movs	r3, #0
	LastTXFreq = (float)TXFreq;
 8004c0e:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8004c12:	4aab      	ldr	r2, [pc, #684]	; (8004ec0 <SetWSPRPLLCoeff+0x2b8>)
{
 8004c14:	ed2d 8b0c 	vpush	{d8-d13}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8004c18:	f20f 2b94 	addw	fp, pc, #660	; 0x294
 8004c1c:	e9db ab00 	ldrd	sl, fp, [fp]
{
 8004c20:	b091      	sub	sp, #68	; 0x44
	LastTXFreq = (float)TXFreq;
 8004c22:	edc2 7a00 	vstr	s15, [r2]
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8004c26:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	for (i = 0; i < 4; i++) {
 8004c2a:	9307      	str	r3, [sp, #28]
 8004c2c:	9b07      	ldr	r3, [sp, #28]
{
 8004c2e:	9000      	str	r0, [sp, #0]
	for (i = 0; i < 4; i++) {
 8004c30:	2b03      	cmp	r3, #3
{
 8004c32:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 4; i++) {
 8004c34:	f200 80d3 	bhi.w	8004dde <SetWSPRPLLCoeff+0x1d6>
		for (m = 2; m <= 25; m++) //was 64
		{
			for (n = 2; n <= 512; n++) //was 1
			{
				for (p = 2; p <= 128; p += 2) {
					OutF = XTalFreq * n / m / p / od;
 8004c38:	4ba2      	ldr	r3, [pc, #648]	; (8004ec4 <SetWSPRPLLCoeff+0x2bc>)
 8004c3a:	eeb0 8b40 	vmov.f64	d8, d0
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8004c3e:	ed9f caa2 	vldr	s24, [pc, #648]	; 8004ec8 <SetWSPRPLLCoeff+0x2c0>
						MinDiff = abs(OutF - TF);

						fp = p;
						fn = n;
						fm = m;
						fod = od;
 8004c42:	2501      	movs	r5, #1
							&& ((XTalFreq * n / m) > 150000000.0)
 8004c44:	eddf aaa1 	vldr	s21, [pc, #644]	; 8004ecc <SetWSPRPLLCoeff+0x2c4>
					OutF = XTalFreq * n / m / p / od;
 8004c48:	ed93 aa00 	vldr	s20, [r3]
							&& ((XTalFreq * n / m) < 960000000.0)) {
 8004c4c:	eddf baa0 	vldr	s23, [pc, #640]	; 8004ed0 <SetWSPRPLLCoeff+0x2c8>
 8004c50:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8004edc <SetWSPRPLLCoeff+0x2d4>
		}
		if (fn < 511) {
			OutF = XTalFreq * fn / fm / fp / fod;
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
					* 8192 * 8); //FracDiv PWM has 8 levels
 8004c54:	ed9f 9b98 	vldr	d9, [pc, #608]	; 8004eb8 <SetWSPRPLLCoeff+0x2b0>
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8004c58:	ed9d 7a07 	vldr	s14, [sp, #28]
 8004c5c:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
		for (m = 2; m <= 25; m++) //was 64
 8004c60:	2402      	movs	r4, #2
			for (n = 2; n <= 512; n++) //was 1
 8004c62:	f240 2601 	movw	r6, #513	; 0x201
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8004c66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c6a:	ee27 7a0c 	vmul.f32	s14, s14, s24
 8004c6e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004c72:	ee37 7b08 	vadd.f64	d7, d7, d8
 8004c76:	ed8d 7b08 	vstr	d7, [sp, #32]
		MinDiff = 999999999;
 8004c7a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
					OutF = XTalFreq * n / m / p / od;
 8004c7e:	ee07 4a90 	vmov	s15, r4
			for (n = 2; n <= 512; n++) //was 1
 8004c82:	2702      	movs	r7, #2
					OutF = XTalFreq * n / m / p / od;
 8004c84:	eef8 dae7 	vcvt.f32.s32	s27, s15
 8004c88:	ee8c baad 	vdiv.f32	s22, s25, s27
 8004c8c:	ee07 7a90 	vmov	s15, r7
 8004c90:	eeb8 dae7 	vcvt.f32.s32	s26, s15
 8004c94:	ee2d da0a 	vmul.f32	s26, s26, s20
							&& ((XTalFreq * n / m) > 150000000.0)
 8004c98:	ee6d 7a0b 	vmul.f32	s15, s26, s22
 8004c9c:	eef4 7a6a 	vcmp.f32	s15, s21
 8004ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca4:	dd05      	ble.n	8004cb2 <SetWSPRPLLCoeff+0xaa>
 8004ca6:	eef4 7aeb 	vcmpe.f32	s15, s23
 8004caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cae:	f100 80b7 	bmi.w	8004e20 <SetWSPRPLLCoeff+0x218>
				for (p = 2; p <= 128; p += 2) {
 8004cb2:	2302      	movs	r3, #2
					OutF = XTalFreq * n / m / p / od;
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	3302      	adds	r3, #2
 8004cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cbe:	ee67 7aad 	vmul.f32	s15, s15, s27
 8004cc2:	ee8d 7a27 	vdiv.f32	s14, s26, s15
 8004cc6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004cca:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004cce:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004cd2:	ed9d 5b0c 	vldr	d5, [sp, #48]	; 0x30
 8004cd6:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8004cda:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004cde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	dd03      	ble.n	8004cf0 <SetWSPRPLLCoeff+0xe8>
 8004ce8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
				for (p = 2; p <= 128; p += 2) {
 8004cf0:	2b82      	cmp	r3, #130	; 0x82
 8004cf2:	d1df      	bne.n	8004cb4 <SetWSPRPLLCoeff+0xac>
			for (n = 2; n <= 512; n++) //was 1
 8004cf4:	3701      	adds	r7, #1
 8004cf6:	42b7      	cmp	r7, r6
 8004cf8:	d1c8      	bne.n	8004c8c <SetWSPRPLLCoeff+0x84>
		for (m = 2; m <= 25; m++) //was 64
 8004cfa:	3401      	adds	r4, #1
 8004cfc:	2c1a      	cmp	r4, #26
 8004cfe:	d1be      	bne.n	8004c7e <SetWSPRPLLCoeff+0x76>
		if (fn < 511) {
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004d06:	f200 80ce 	bhi.w	8004ea6 <SetWSPRPLLCoeff+0x29e>
			OutF = XTalFreq * fn / fm / fp / fod;
 8004d0a:	ed9d 6a03 	vldr	s12, [sp, #12]
 8004d0e:	eddd 6a02 	vldr	s13, [sp, #8]
 8004d12:	eddd 7a04 	vldr	s15, [sp, #16]
 8004d16:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004d1a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d22:	ee26 6a0a 	vmul.f32	s12, s12, s20
 8004d26:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004d2a:	eddd 7a05 	vldr	s15, [sp, #20]
 8004d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004d3a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004d3e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8004d42:	9b03      	ldr	r3, [sp, #12]
 8004d44:	eddd 6a02 	vldr	s13, [sp, #8]
 8004d48:	eddd 7a04 	vldr	s15, [sp, #16]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	ee06 3a10 	vmov	s12, r3
 8004d5a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004d5e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004d62:	eddd 7a05 	vldr	s15, [sp, #20]
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	ee26 6a0a 	vmul.f32	s12, s12, s20
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004d76:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004d7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8004d7e:	ed9d 5b08 	vldr	d5, [sp, #32]
 8004d82:	ed9d 4b0c 	vldr	d4, [sp, #48]	; 0x30
 8004d86:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8004d8a:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8004d8e:	ee35 5b44 	vsub.f64	d5, d5, d4
 8004d92:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d96:	ee85 7b06 	vdiv.f64	d7, d5, d6
					* 8192 * 8); //FracDiv PWM has 8 levels
 8004d9a:	ee27 7b09 	vmul.f64	d7, d7, d9
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8004d9e:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8004da2:	ed8d 7a06 	vstr	s14, [sp, #24]
		} else {
			FracDiv = 8191 * 8;
		}

		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8004da6:	9b06      	ldr	r3, [sp, #24]
 8004da8:	4a4a      	ldr	r2, [pc, #296]	; (8004ed4 <SetWSPRPLLCoeff+0x2cc>)
 8004daa:	f003 0307 	and.w	r3, r3, #7
		FracDiv >>= 0x03;
		FracDivCoeff[i] = FracDiv;
 8004dae:	9900      	ldr	r1, [sp, #0]
		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8004db0:	f8a9 3000 	strh.w	r3, [r9]
 8004db4:	8013      	strh	r3, [r2, #0]
		FracDiv >>= 0x03;
 8004db6:	9b06      	ldr	r3, [sp, #24]
 8004db8:	08db      	lsrs	r3, r3, #3
 8004dba:	9306      	str	r3, [sp, #24]
		FracDivCoeff[i] = FracDiv;
 8004dbc:	9a06      	ldr	r2, [sp, #24]
 8004dbe:	9b07      	ldr	r3, [sp, #28]
 8004dc0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		FracPWMCoeff[i] = FracDivPWM;
 8004dc4:	9a07      	ldr	r2, [sp, #28]
	for (i = 0; i < 4; i++) {
 8004dc6:	9b07      	ldr	r3, [sp, #28]
		FracPWMCoeff[i] = FracDivPWM;
 8004dc8:	9901      	ldr	r1, [sp, #4]
	for (i = 0; i < 4; i++) {
 8004dca:	3301      	adds	r3, #1
 8004dcc:	9307      	str	r3, [sp, #28]
		FracPWMCoeff[i] = FracDivPWM;
 8004dce:	f8b9 3000 	ldrh.w	r3, [r9]
 8004dd2:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	for (i = 0; i < 4; i++) {
 8004dd6:	9b07      	ldr	r3, [sp, #28]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	f67f af3d 	bls.w	8004c58 <SetWSPRPLLCoeff+0x50>
	}
	__HAL_RCC_PLL2_DISABLE();
 8004dde:	4a3e      	ldr	r2, [pc, #248]	; (8004ed8 <SetWSPRPLLCoeff+0x2d0>)
 8004de0:	6813      	ldr	r3, [r2, #0]
 8004de2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004de6:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the same for the 4 WSPR tones
 8004de8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004dea:	9902      	ldr	r1, [sp, #8]
 8004dec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004df0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8004df4:	6293      	str	r3, [r2, #40]	; 0x28
 8004df6:	9903      	ldr	r1, [sp, #12]
 8004df8:	9b04      	ldr	r3, [sp, #16]
 8004dfa:	3901      	subs	r1, #1
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004e02:	025b      	lsls	r3, r3, #9
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	430b      	orrs	r3, r1
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e14:	6013      	str	r3, [r2, #0]
}
 8004e16:	b011      	add	sp, #68	; 0x44
 8004e18:	ecbd 8b0c 	vpop	{d8-d13}
 8004e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (p = 2; p <= 128; p += 2) {
 8004e20:	f04f 0802 	mov.w	r8, #2
					OutF = XTalFreq * n / m / p / od;
 8004e24:	ee07 8a90 	vmov	s15, r8
 8004e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e2c:	ee67 7aad 	vmul.f32	s15, s15, s27
 8004e30:	ee8d 7a27 	vdiv.f32	s14, s26, s15
 8004e34:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004e38:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004e3c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004e40:	ed9d 5b0c 	vldr	d5, [sp, #48]	; 0x30
 8004e44:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8004e48:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004e4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e54:	d51d      	bpl.n	8004e92 <SetWSPRPLLCoeff+0x28a>
 8004e56:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004e5a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004e5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e62:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6a:	dd12      	ble.n	8004e92 <SetWSPRPLLCoeff+0x28a>
						MinDiff = abs(OutF - TF);
 8004e6c:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8004e70:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004e74:	ee30 0b47 	vsub.f64	d0, d0, d7
 8004e78:	f00d f828 	bl	8011ecc <abs>
 8004e7c:	ee07 0a90 	vmov	s15, r0
 8004e80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e84:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
						fp = p;
 8004e88:	f8cd 8010 	str.w	r8, [sp, #16]
						fn = n;
 8004e8c:	9703      	str	r7, [sp, #12]
						fm = m;
 8004e8e:	9402      	str	r4, [sp, #8]
						fod = od;
 8004e90:	9505      	str	r5, [sp, #20]
				for (p = 2; p <= 128; p += 2) {
 8004e92:	f108 0802 	add.w	r8, r8, #2
 8004e96:	f1b8 0f82 	cmp.w	r8, #130	; 0x82
 8004e9a:	d1c3      	bne.n	8004e24 <SetWSPRPLLCoeff+0x21c>
			for (n = 2; n <= 512; n++) //was 1
 8004e9c:	3701      	adds	r7, #1
 8004e9e:	42b7      	cmp	r7, r6
 8004ea0:	f47f aef4 	bne.w	8004c8c <SetWSPRPLLCoeff+0x84>
 8004ea4:	e729      	b.n	8004cfa <SetWSPRPLLCoeff+0xf2>
			FracDiv = 8191 * 8;
 8004ea6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8004eaa:	9306      	str	r3, [sp, #24]
 8004eac:	e77b      	b.n	8004da6 <SetWSPRPLLCoeff+0x19e>
 8004eae:	bf00      	nop
 8004eb0:	ff800000 	.word	0xff800000
 8004eb4:	41cdcd64 	.word	0x41cdcd64
 8004eb8:	00000000 	.word	0x00000000
 8004ebc:	40f00000 	.word	0x40f00000
 8004ec0:	24006130 	.word	0x24006130
 8004ec4:	240072c8 	.word	0x240072c8
 8004ec8:	3fbb7e91 	.word	0x3fbb7e91
 8004ecc:	4d0f0d18 	.word	0x4d0f0d18
 8004ed0:	4e64e1c0 	.word	0x4e64e1c0
 8004ed4:	24006134 	.word	0x24006134
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	24005104 	.word	0x24005104

08004ee0 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8004ee0:	4a92      	ldr	r2, [pc, #584]	; (800512c <SetTXPLL+0x24c>)
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8004ee2:	4b93      	ldr	r3, [pc, #588]	; (8005130 <SetTXPLL+0x250>)
{
 8004ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee8:	ed2d 8b08 	vpush	{d8-d11}
 8004eec:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8004ef0:	b08a      	sub	sp, #40	; 0x28
 8004ef2:	eeb0 8a40 	vmov.f32	s16, s0
				OutF = XTalFreq * n / m / p / od;
 8004ef6:	edd2 9a00 	vldr	s19, [r2]
	for (m = 2; m <= 25; m++) //was 64
 8004efa:	2602      	movs	r6, #2
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004efc:	ed9f aa8d 	vldr	s20, [pc, #564]	; 8005134 <SetTXPLL+0x254>
 8004f00:	ed9f ba8d 	vldr	s22, [pc, #564]	; 8005138 <SetTXPLL+0x258>
		for (n = 2; n <= 512; n++) //was 1
 8004f04:	f240 2801 	movw	r8, #513	; 0x201
					MinDiff = abs(OutF - TF);

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 8004f08:	2701      	movs	r7, #1
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8004f0a:	9303      	str	r3, [sp, #12]
	MinDiff = 999999999;
 8004f0c:	9303      	str	r3, [sp, #12]
				OutF = XTalFreq * n / m / p / od;
 8004f0e:	ee07 6a90 	vmov	s15, r6
		for (n = 2; n <= 512; n++) //was 1
 8004f12:	2502      	movs	r5, #2
				OutF = XTalFreq * n / m / p / od;
 8004f14:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8004f18:	eecb aa89 	vdiv.f32	s21, s23, s18
 8004f1c:	ee07 5a90 	vmov	s15, r5
 8004f20:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8004f24:	ee68 8aa9 	vmul.f32	s17, s17, s19
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004f28:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8004f2c:	eef4 7a4a 	vcmp.f32	s15, s20
 8004f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f34:	dd05      	ble.n	8004f42 <SetTXPLL+0x62>
 8004f36:	eef4 7acb 	vcmpe.f32	s15, s22
 8004f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3e:	f100 80b8 	bmi.w	80050b2 <SetTXPLL+0x1d2>
			for (p = 2; p <= 128; p+=2)
 8004f42:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	3302      	adds	r3, #2
 8004f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f4e:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004f52:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8004f56:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004f5a:	eddd 7a02 	vldr	s15, [sp, #8]
 8004f5e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004f62:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	dd00      	ble.n	8004f72 <SetTXPLL+0x92>
 8004f70:	9a02      	ldr	r2, [sp, #8]
			for (p = 2; p <= 128; p+=2)
 8004f72:	2b82      	cmp	r3, #130	; 0x82
 8004f74:	d1e6      	bne.n	8004f44 <SetTXPLL+0x64>
		for (n = 2; n <= 512; n++) //was 1
 8004f76:	3501      	adds	r5, #1
 8004f78:	4545      	cmp	r5, r8
 8004f7a:	d1cf      	bne.n	8004f1c <SetTXPLL+0x3c>
	for (m = 2; m <= 25; m++) //was 64
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	2e1a      	cmp	r6, #26
 8004f80:	d1c5      	bne.n	8004f0e <SetTXPLL+0x2e>
				}
			}
		}
	}
	if (fn < 511)
 8004f82:	9b05      	ldr	r3, [sp, #20]
 8004f84:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004f88:	f200 80cc 	bhi.w	8005124 <SetTXPLL+0x244>
	{
		OutF = XTalFreq * fn / fm / fp / fod;
 8004f8c:	eddd 6a05 	vldr	s13, [sp, #20]
 8004f90:	ed9d 7a04 	vldr	s14, [sp, #16]
 8004f94:	eddd 7a06 	vldr	s15, [sp, #24]
 8004f98:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004f9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004fa0:	ed9d 6a07 	vldr	s12, [sp, #28]
 8004fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8004fa8:	eddf 5a64 	vldr	s11, [pc, #400]	; 800513c <SetTXPLL+0x25c>
		OutF = XTalFreq * fn / fm / fp / fod;
 8004fac:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004fb0:	ee66 6aa9 	vmul.f32	s13, s13, s19
 8004fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc0:	ed8d 7a02 	vstr	s14, [sp, #8]
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8004fc4:	9b05      	ldr	r3, [sp, #20]
 8004fc6:	ed9d 7a04 	vldr	s14, [sp, #16]
 8004fca:	eddd 7a06 	vldr	s15, [sp, #24]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004fd4:	ed9d 6a07 	vldr	s12, [sp, #28]
 8004fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fdc:	ee06 3a90 	vmov	s13, r3
 8004fe0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004fe4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fec:	ee66 9aa9 	vmul.f32	s19, s13, s19
 8004ff0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ff4:	ee89 7aa7 	vdiv.f32	s14, s19, s15
 8004ff8:	ed8d 7a01 	vstr	s14, [sp, #4]
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8004ffc:	eddd 6a02 	vldr	s13, [sp, #8]
 8005000:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005004:	eddd 7a02 	vldr	s15, [sp, #8]
 8005008:	ee38 8a66 	vsub.f32	s16, s16, s13
 800500c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005010:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005014:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501c:	edcd 7a08 	vstr	s15, [sp, #32]
	else
	{
		FracDiv = 8191;
	}

	TXFreqError = MinDiff;
 8005020:	eddd 7a03 	vldr	s15, [sp, #12]
	for (i=0; i< 50; i++)
 8005024:	2000      	movs	r0, #0
	__HAL_RCC_PLL2_DISABLE();
 8005026:	4a46      	ldr	r2, [pc, #280]	; (8005140 <SetTXPLL+0x260>)
	TXFreqError = MinDiff;
 8005028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800502c:	4b45      	ldr	r3, [pc, #276]	; (8005144 <SetTXPLL+0x264>)
 800502e:	edc3 7a00 	vstr	s15, [r3]
	__HAL_RCC_PLL2_DISABLE();
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005038:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 800503a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800503c:	9904      	ldr	r1, [sp, #16]
 800503e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005042:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005046:	6293      	str	r3, [r2, #40]	; 0x28
 8005048:	9905      	ldr	r1, [sp, #20]
 800504a:	9b06      	ldr	r3, [sp, #24]
 800504c:	3901      	subs	r1, #1
 800504e:	3b01      	subs	r3, #1
 8005050:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	b29b      	uxth	r3, r3
 8005058:	430b      	orrs	r3, r1
 800505a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505e:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005066:	6013      	str	r3, [r2, #0]

	SetFracPLL(FracDiv);
 8005068:	9908      	ldr	r1, [sp, #32]
	__HAL_RCC_PLL2FRACN_DISABLE();
 800506a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800506c:	f023 0310 	bic.w	r3, r3, #16
 8005070:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8005072:	9009      	str	r0, [sp, #36]	; 0x24
 8005074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005076:	2b31      	cmp	r3, #49	; 0x31
 8005078:	d80b      	bhi.n	8005092 <SetTXPLL+0x1b2>
		i++;
 800507a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507c:	3301      	adds	r3, #1
 800507e:	9309      	str	r3, [sp, #36]	; 0x24
		i--;
 8005080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005082:	3b01      	subs	r3, #1
 8005084:	9309      	str	r3, [sp, #36]	; 0x24
	for (i=0; i< 50; i++)
 8005086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005088:	3301      	adds	r3, #1
 800508a:	9309      	str	r3, [sp, #36]	; 0x24
 800508c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508e:	2b31      	cmp	r3, #49	; 0x31
 8005090:	d9f3      	bls.n	800507a <SetTXPLL+0x19a>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8005092:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <SetTXPLL+0x260>)
 8005094:	4b2c      	ldr	r3, [pc, #176]	; (8005148 <SetTXPLL+0x268>)
 8005096:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8005098:	4003      	ands	r3, r0
 800509a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800509e:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 80050a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050a2:	f043 0310 	orr.w	r3, r3, #16
 80050a6:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif

}
 80050a8:	b00a      	add	sp, #40	; 0x28
 80050aa:	ecbd 8b08 	vpop	{d8-d11}
 80050ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			for (p = 2; p <= 128; p+=2)
 80050b2:	2402      	movs	r4, #2
				OutF = XTalFreq * n / m / p / od;
 80050b4:	ee07 4a90 	vmov	s15, r4
 80050b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050bc:	ee67 7a89 	vmul.f32	s15, s15, s18
 80050c0:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 80050c4:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80050c8:	eddd 7a02 	vldr	s15, [sp, #8]
 80050cc:	ed9d 7a03 	vldr	s14, [sp, #12]
 80050d0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80050d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050dc:	d51a      	bpl.n	8005114 <SetTXPLL+0x234>
 80050de:	eddd 7a02 	vldr	s15, [sp, #8]
 80050e2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80050e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ee:	dd11      	ble.n	8005114 <SetTXPLL+0x234>
					MinDiff = abs(OutF - TF);
 80050f0:	ed9d 0a02 	vldr	s0, [sp, #8]
 80050f4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80050f8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80050fc:	f00c fee6 	bl	8011ecc <abs>
 8005100:	ee07 0a90 	vmov	s15, r0
 8005104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005108:	edcd 7a03 	vstr	s15, [sp, #12]
					fp = p;
 800510c:	9406      	str	r4, [sp, #24]
					fn = n;
 800510e:	9505      	str	r5, [sp, #20]
					fm = m;
 8005110:	9604      	str	r6, [sp, #16]
					fod = od;
 8005112:	9707      	str	r7, [sp, #28]
			for (p = 2; p <= 128; p+=2)
 8005114:	3402      	adds	r4, #2
 8005116:	2c82      	cmp	r4, #130	; 0x82
 8005118:	d1cc      	bne.n	80050b4 <SetTXPLL+0x1d4>
		for (n = 2; n <= 512; n++) //was 1
 800511a:	3501      	adds	r5, #1
 800511c:	4545      	cmp	r5, r8
 800511e:	f47f aefd 	bne.w	8004f1c <SetTXPLL+0x3c>
 8005122:	e72b      	b.n	8004f7c <SetTXPLL+0x9c>
		FracDiv = 8191;
 8005124:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005128:	9308      	str	r3, [sp, #32]
 800512a:	e779      	b.n	8005020 <SetTXPLL+0x140>
 800512c:	240072c8 	.word	0x240072c8
 8005130:	4e6e6b28 	.word	0x4e6e6b28
 8005134:	4d0f0d18 	.word	0x4d0f0d18
 8005138:	4e64e1c0 	.word	0x4e64e1c0
 800513c:	46000000 	.word	0x46000000
 8005140:	58024400 	.word	0x58024400
 8005144:	240061a8 	.word	0x240061a8
 8005148:	ffff0007 	.word	0xffff0007
 800514c:	00000000 	.word	0x00000000

08005150 <TXSwitch>:


void TXSwitch(uint8_t Status)
{
 8005150:	b530      	push	{r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005152:	2300      	movs	r3, #0
{
 8005154:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005156:	e9cd 3300 	strd	r3, r3, [sp]
 800515a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800515e:	9304      	str	r3, [sp, #16]

	if (Status)
 8005160:	b378      	cbz	r0, 80051c2 <TXSwitch+0x72>
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 8005162:	4d27      	ldr	r5, [pc, #156]	; (8005200 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 8005164:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 8005166:	4c27      	ldr	r4, [pc, #156]	; (8005204 <TXSwitch+0xb4>)
 8005168:	ed95 0a00 	vldr	s0, [r5]
 800516c:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8005170:	4b25      	ldr	r3, [pc, #148]	; (8005208 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 8005172:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 8005176:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8005178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517c:	d11c      	bne.n	80051b8 <TXSwitch+0x68>
			SetTXPLL(LOfreq);
			LastTXFreq = LOfreq;
		}

		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800517e:	2200      	movs	r2, #0
 8005180:	2303      	movs	r3, #3
 8005182:	f44f 7400 	mov.w	r4, #512	; 0x200
 8005186:	2502      	movs	r5, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005188:	4669      	mov	r1, sp
 800518a:	4820      	ldr	r0, [pc, #128]	; (800520c <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800518c:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005190:	2300      	movs	r3, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005192:	e9cd 4500 	strd	r4, r5, [sp]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005196:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005198:	f005 f870 	bl	800a27c <HAL_GPIO_Init>

		RELAY_TX_ON;
 800519c:	2201      	movs	r2, #1
 800519e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051a2:	481b      	ldr	r0, [pc, #108]	; (8005210 <TXSwitch+0xc0>)
 80051a4:	f005 f9aa 	bl	800a4fc <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 80051a8:	2201      	movs	r2, #1
 80051aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051ae:	4819      	ldr	r0, [pc, #100]	; (8005214 <TXSwitch+0xc4>)
 80051b0:	f005 f9a4 	bl	800a4fc <HAL_GPIO_WritePin>
		RELAY_TX_OFF;
		LED_YELLOW_OFF;
		TransmissionEnabled = 0;

	}
}
 80051b4:	b007      	add	sp, #28
 80051b6:	bd30      	pop	{r4, r5, pc}
			SetTXPLL(LOfreq);
 80051b8:	f7ff fe92 	bl	8004ee0 <SetTXPLL>
			LastTXFreq = LOfreq;
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	6023      	str	r3, [r4, #0]
 80051c0:	e7dd      	b.n	800517e <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80051c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80051f8 <TXSwitch+0xa8>
 80051c6:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80051c8:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ca:	4669      	mov	r1, sp
 80051cc:	480f      	ldr	r0, [pc, #60]	; (800520c <TXSwitch+0xbc>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80051ce:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80051d0:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051d4:	f005 f852 	bl	800a27c <HAL_GPIO_Init>
		RELAY_TX_OFF;
 80051d8:	4622      	mov	r2, r4
 80051da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051de:	480c      	ldr	r0, [pc, #48]	; (8005210 <TXSwitch+0xc0>)
 80051e0:	f005 f98c 	bl	800a4fc <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 80051e4:	4622      	mov	r2, r4
 80051e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051ea:	480a      	ldr	r0, [pc, #40]	; (8005214 <TXSwitch+0xc4>)
 80051ec:	f005 f986 	bl	800a4fc <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <TXSwitch+0xb8>)
 80051f2:	701c      	strb	r4, [r3, #0]
}
 80051f4:	b007      	add	sp, #28
 80051f6:	bd30      	pop	{r4, r5, pc}
 80051f8:	00000200 	.word	0x00000200
 80051fc:	00000001 	.word	0x00000001
 8005200:	24006128 	.word	0x24006128
 8005204:	24006130 	.word	0x24006130
 8005208:	240061b0 	.word	0x240061b0
 800520c:	58020800 	.word	0x58020800
 8005210:	58020c00 	.word	0x58020c00
 8005214:	58020400 	.word	0x58020400

08005218 <CarrierEnable>:


void CarrierEnable(uint8_t Status)
{
 8005218:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521a:	2400      	movs	r4, #0
{
 800521c:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521e:	e9cd 4400 	strd	r4, r4, [sp]
 8005222:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005226:	9404      	str	r4, [sp, #16]
	if (Status)
 8005228:	b320      	cbz	r0, 8005274 <CarrierEnable+0x5c>
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800522a:	4622      	mov	r2, r4
 800522c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005230:	4822      	ldr	r0, [pc, #136]	; (80052bc <CarrierEnable+0xa4>)
 8005232:	f005 f963 	bl	800a4fc <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8005236:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <CarrierEnable+0xa8>)
 8005238:	4622      	mov	r2, r4
 800523a:	2110      	movs	r1, #16
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4821      	ldr	r0, [pc, #132]	; (80052c4 <CarrierEnable+0xac>)
 8005240:	f003 fc64 	bl	8008b0c <HAL_DAC_SetValue>
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005248:	2302      	movs	r3, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800524a:	4669      	mov	r1, sp
 800524c:	481e      	ldr	r0, [pc, #120]	; (80052c8 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800524e:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005250:	e9cd 2300 	strd	r2, r3, [sp]
 8005254:	2200      	movs	r2, #0
 8005256:	2303      	movs	r3, #3
 8005258:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800525c:	f005 f80e 	bl	800a27c <HAL_GPIO_Init>

		TXCarrierEnabled = 1;
 8005260:	2201      	movs	r2, #1
 8005262:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 8005264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005268:	4819      	ldr	r0, [pc, #100]	; (80052d0 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 800526a:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 800526c:	f005 f946 	bl	800a4fc <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		LED_GREEN_OFF;
	}
}
 8005270:	b007      	add	sp, #28
 8005272:	bd30      	pop	{r4, r5, pc}
 8005274:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800527a:	4810      	ldr	r0, [pc, #64]	; (80052bc <CarrierEnable+0xa4>)
 800527c:	2201      	movs	r2, #1
 800527e:	f005 f93d 	bl	800a4fc <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8005282:	462b      	mov	r3, r5
 8005284:	462a      	mov	r2, r5
 8005286:	2110      	movs	r1, #16
 8005288:	480e      	ldr	r0, [pc, #56]	; (80052c4 <CarrierEnable+0xac>)
 800528a:	f003 fc3f 	bl	8008b0c <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800528e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005292:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 8005294:	480d      	ldr	r0, [pc, #52]	; (80052cc <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005296:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 8005298:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800529a:	480b      	ldr	r0, [pc, #44]	; (80052c8 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800529c:	e9cd 2300 	strd	r2, r3, [sp]
 80052a0:	2300      	movs	r3, #0
 80052a2:	2202      	movs	r2, #2
 80052a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052a8:	f004 ffe8 	bl	800a27c <HAL_GPIO_Init>
		LED_GREEN_OFF;
 80052ac:	462a      	mov	r2, r5
 80052ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052b2:	4807      	ldr	r0, [pc, #28]	; (80052d0 <CarrierEnable+0xb8>)
 80052b4:	f005 f922 	bl	800a4fc <HAL_GPIO_WritePin>
}
 80052b8:	b007      	add	sp, #28
 80052ba:	bd30      	pop	{r4, r5, pc}
 80052bc:	58020c00 	.word	0x58020c00
 80052c0:	240061b4 	.word	0x240061b4
 80052c4:	2400a430 	.word	0x2400a430
 80052c8:	58020800 	.word	0x58020800
 80052cc:	240061a4 	.word	0x240061a4
 80052d0:	58020400 	.word	0x58020400

080052d4 <Error_Handler>:
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80052d4:	4e09      	ldr	r6, [pc, #36]	; (80052fc <Error_Handler+0x28>)
{
 80052d6:	4d0a      	ldr	r5, [pc, #40]	; (8005300 <Error_Handler+0x2c>)
 80052d8:	4c0a      	ldr	r4, [pc, #40]	; (8005304 <Error_Handler+0x30>)
 80052da:	b508      	push	{r3, lr}
 80052dc:	6833      	ldr	r3, [r6, #0]
 80052de:	fb05 f303 	mul.w	r3, r5, r3
 80052e2:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80052e6:	d200      	bcs.n	80052ea <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80052e8:	e7fe      	b.n	80052e8 <Error_Handler+0x14>
			LED_switch();
 80052ea:	f7fc fedb 	bl	80020a4 <LED_switch>
 80052ee:	6833      	ldr	r3, [r6, #0]
 80052f0:	fb05 f303 	mul.w	r3, r5, r3
 80052f4:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80052f8:	d2f7      	bcs.n	80052ea <Error_Handler+0x16>
 80052fa:	e7f5      	b.n	80052e8 <Error_Handler+0x14>
 80052fc:	2400ad10 	.word	0x2400ad10
 8005300:	c28f5c29 	.word	0xc28f5c29
 8005304:	051eb851 	.word	0x051eb851

08005308 <SystemClock_Config_For_OC>:
{
 8005308:	b530      	push	{r4, r5, lr}
 800530a:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800530c:	224c      	movs	r2, #76	; 0x4c
 800530e:	2100      	movs	r1, #0
 8005310:	a80a      	add	r0, sp, #40	; 0x28
 8005312:	f00c fe4b 	bl	8011fac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005316:	2220      	movs	r2, #32
 8005318:	2100      	movs	r1, #0
 800531a:	a802      	add	r0, sp, #8
 800531c:	f00c fe46 	bl	8011fac <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005320:	22c0      	movs	r2, #192	; 0xc0
 8005322:	2100      	movs	r1, #0
 8005324:	a81e      	add	r0, sp, #120	; 0x78
 8005326:	f00c fe41 	bl	8011fac <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800532a:	2002      	movs	r0, #2
 800532c:	f005 fa18 	bl	800a760 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005330:	4a49      	ldr	r2, [pc, #292]	; (8005458 <SystemClock_Config_For_OC+0x150>)
 8005332:	2300      	movs	r3, #0
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	6991      	ldr	r1, [r2, #24]
 8005338:	4b48      	ldr	r3, [pc, #288]	; (800545c <SystemClock_Config_For_OC+0x154>)
 800533a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800533e:	6191      	str	r1, [r2, #24]
 8005340:	6991      	ldr	r1, [r2, #24]
 8005342:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8005346:	9101      	str	r1, [sp, #4]
 8005348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800534a:	f041 0101 	orr.w	r1, r1, #1
 800534e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800535a:	6993      	ldr	r3, [r2, #24]
 800535c:	0499      	lsls	r1, r3, #18
 800535e:	d5fc      	bpl.n	800535a <SystemClock_Config_For_OC+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005360:	4a3f      	ldr	r2, [pc, #252]	; (8005460 <SystemClock_Config_For_OC+0x158>)
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8005362:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005364:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005366:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005368:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	f043 0302 	orr.w	r3, r3, #2
 8005372:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005374:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = 10;
 8005376:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800537a:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 800537c:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800537e:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8005380:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8005382:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005384:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005388:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800538a:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 800538e:	230a      	movs	r3, #10
 8005390:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 8005394:	4b33      	ldr	r3, [pc, #204]	; (8005464 <SystemClock_Config_For_OC+0x15c>)
 8005396:	4a34      	ldr	r2, [pc, #208]	; (8005468 <SystemClock_Config_For_OC+0x160>)
 8005398:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800539a:	2221      	movs	r2, #33	; 0x21
 800539c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80053a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053a4:	f005 fa8c 	bl	800a8c0 <HAL_RCC_OscConfig>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d152      	bne.n	8005452 <SystemClock_Config_For_OC+0x14a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053ac:	223f      	movs	r2, #63	; 0x3f
 80053ae:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) //was FLASH_LATENCY_4
 80053b0:	4621      	mov	r1, r4
 80053b2:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053b8:	2200      	movs	r2, #0
 80053ba:	2308      	movs	r3, #8
 80053bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053c0:	2240      	movs	r2, #64	; 0x40
 80053c2:	2340      	movs	r3, #64	; 0x40
 80053c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80053c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053cc:	2340      	movs	r3, #64	; 0x40
 80053ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) //was FLASH_LATENCY_4
 80053d2:	f005 fe5b 	bl	800b08c <HAL_RCC_ClockConfig>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d13b      	bne.n	8005452 <SystemClock_Config_For_OC+0x14a>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80053da:	4a24      	ldr	r2, [pc, #144]	; (800546c <SystemClock_Config_For_OC+0x164>)
 80053dc:	2300      	movs	r3, #0
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80053de:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80053e2:	903c      	str	r0, [sp, #240]	; 0xf0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053e4:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80053e6:	9140      	str	r1, [sp, #256]	; 0x100
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80053e8:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 80053ec:	2204      	movs	r2, #4
 80053ee:	2326      	movs	r3, #38	; 0x26
 80053f0:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80053f4:	2218      	movs	r2, #24
 80053f6:	2302      	movs	r3, #2
 80053f8:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 80053fc:	2202      	movs	r2, #2
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8005404:	2200      	movs	r2, #0
 8005406:	2300      	movs	r3, #0
 8005408:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 800540c:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8005410:	f44f 6280 	mov.w	r2, #1024	; 0x400
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8005414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8005418:	9245      	str	r2, [sp, #276]	; 0x114
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800541a:	2205      	movs	r2, #5
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800541c:	9347      	str	r3, [sp, #284]	; 0x11c
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 8005424:	2202      	movs	r2, #2
 8005426:	2308      	movs	r3, #8
 8005428:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 800542c:	2205      	movs	r2, #5
 800542e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005432:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005436:	f006 f915 	bl	800b664 <HAL_RCCEx_PeriphCLKConfig>
 800543a:	b950      	cbnz	r0, 8005452 <SystemClock_Config_For_OC+0x14a>
	HAL_PWREx_EnableUSBVoltageDetector();
 800543c:	f005 f9b4 	bl	800a7a8 <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8005440:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005444:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8005448:	4628      	mov	r0, r5
 800544a:	f005 fd2d 	bl	800aea8 <HAL_RCC_MCOConfig>
}
 800544e:	b04f      	add	sp, #316	; 0x13c
 8005450:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8005452:	f7ff ff3f 	bl	80052d4 <Error_Handler>
 8005456:	bf00      	nop
 8005458:	58024800 	.word	0x58024800
 800545c:	58000400 	.word	0x58000400
 8005460:	58024400 	.word	0x58024400
 8005464:	240072c8 	.word	0x240072c8
 8005468:	4bbebbd3 	.word	0x4bbebbd3
 800546c:	000c0042 	.word	0x000c0042

08005470 <UserInput>:
{
 8005470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (WSPRBeaconState == SEND_WSPR)
 8005474:	4d90      	ldr	r5, [pc, #576]	; (80056b8 <UserInput+0x248>)
{
 8005476:	b089      	sub	sp, #36	; 0x24
	if (WSPRBeaconState == SEND_WSPR)
 8005478:	782e      	ldrb	r6, [r5, #0]
 800547a:	2e02      	cmp	r6, #2
 800547c:	f000 813e 	beq.w	80056fc <UserInput+0x28c>
	if (USBRXLength)
 8005480:	4b8e      	ldr	r3, [pc, #568]	; (80056bc <UserInput+0x24c>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	2a00      	cmp	r2, #0
 8005486:	d12f      	bne.n	80054e8 <UserInput+0x78>
		result = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
  return tud_cdc_n_connected(0);
 800548a:	2000      	movs	r0, #0
 800548c:	f88d 3007 	strb.w	r3, [sp, #7]
 8005490:	f009 fdfc 	bl	800f08c <tud_cdc_n_connected>
	if ( tud_cdc_connected() )
 8005494:	2800      	cmp	r0, #0
 8005496:	d130      	bne.n	80054fa <UserInput+0x8a>
		result = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (result == HAL_OK)
 800549e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d03b      	beq.n	8005522 <UserInput+0xb2>
 80054aa:	4d85      	ldr	r5, [pc, #532]	; (80056c0 <UserInput+0x250>)
	EncVal = TIM4->CNT;
 80054ac:	4b85      	ldr	r3, [pc, #532]	; (80056c4 <UserInput+0x254>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80054ae:	4e86      	ldr	r6, [pc, #536]	; (80056c8 <UserInput+0x258>)
	EncVal = TIM4->CNT;
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80054b2:	8832      	ldrh	r2, [r6, #0]
	EncVal = TIM4->CNT;
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	4f85      	ldr	r7, [pc, #532]	; (80056cc <UserInput+0x25c>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80054b8:	1a98      	subs	r0, r3, r2
	EncVal = TIM4->CNT;
 80054ba:	803b      	strh	r3, [r7, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80054bc:	b201      	sxth	r1, r0
 80054be:	b280      	uxth	r0, r0
	if (DiffEncVal < 0)
 80054c0:	2900      	cmp	r1, #0
 80054c2:	f2c0 80e8 	blt.w	8005696 <UserInput+0x226>
	if (DiffEncVal > 0)
 80054c6:	f000 8095 	beq.w	80055f4 <UserInput+0x184>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 80054ca:	f7fc fd47 	bl	8001f5c <FminusClicked>
	if (!DisableDisplay)
 80054ce:	782c      	ldrb	r4, [r5, #0]
 80054d0:	b914      	cbnz	r4, 80054d8 <UserInput+0x68>
 80054d2:	f7ff f893 	bl	80045fc <DisplayStatus.part.0>
	if (!DisableDisplay)
 80054d6:	782c      	ldrb	r4, [r5, #0]
		LastEncVal = EncVal;
 80054d8:	883b      	ldrh	r3, [r7, #0]
 80054da:	8033      	strh	r3, [r6, #0]
	if (!DisableDisplay)
 80054dc:	2c00      	cmp	r4, #0
 80054de:	f000 808d 	beq.w	80055fc <UserInput+0x18c>
}
 80054e2:	b009      	add	sp, #36	; 0x24
 80054e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		result = HAL_OK;
 80054e8:	2200      	movs	r2, #0
 80054ea:	2000      	movs	r0, #0
 80054ec:	f88d 2007 	strb.w	r2, [sp, #7]
		USBRXLength = 0;
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	f009 fdcb 	bl	800f08c <tud_cdc_n_connected>
	if ( tud_cdc_connected() )
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d0ce      	beq.n	8005498 <UserInput+0x28>
  return tud_cdc_n_available(0);
 80054fa:	2000      	movs	r0, #0
 80054fc:	f009 fddc 	bl	800f0b8 <tud_cdc_n_available>
		if ( tud_cdc_available() )
 8005500:	2800      	cmp	r0, #0
 8005502:	d0cc      	beq.n	800549e <UserInput+0x2e>
  return tud_cdc_n_read(0, buffer, bufsize);
 8005504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005508:	4971      	ldr	r1, [pc, #452]	; (80056d0 <UserInput+0x260>)
 800550a:	2000      	movs	r0, #0
 800550c:	f009 fde0 	bl	800f0d0 <tud_cdc_n_read>
			result = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	f88d 3007 	strb.w	r3, [sp, #7]
	if (result == HAL_OK)
 8005516:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800551a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1c3      	bne.n	80054aa <UserInput+0x3a>
		switch (UartRXString[0])
 8005522:	4b6b      	ldr	r3, [pc, #428]	; (80056d0 <UserInput+0x260>)
		UartRXDataReady = RESET;
 8005524:	496b      	ldr	r1, [pc, #428]	; (80056d4 <UserInput+0x264>)
		switch (UartRXString[0])
 8005526:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 8005528:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 800552a:	3b2b      	subs	r3, #43	; 0x2b
 800552c:	2b4c      	cmp	r3, #76	; 0x4c
 800552e:	d859      	bhi.n	80055e4 <UserInput+0x174>
 8005530:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005534:	00580150 	.word	0x00580150
 8005538:	00580162 	.word	0x00580162
 800553c:	00580058 	.word	0x00580058
 8005540:	017b0177 	.word	0x017b0177
 8005544:	0183017f 	.word	0x0183017f
 8005548:	018b0187 	.word	0x018b0187
 800554c:	0193018f 	.word	0x0193018f
 8005550:	00580197 	.word	0x00580197
 8005554:	00580058 	.word	0x00580058
 8005558:	00580058 	.word	0x00580058
 800555c:	00580058 	.word	0x00580058
 8005560:	019b0058 	.word	0x019b0058
 8005564:	01a3019f 	.word	0x01a3019f
 8005568:	00580058 	.word	0x00580058
 800556c:	00580058 	.word	0x00580058
 8005570:	01a70058 	.word	0x01a70058
 8005574:	01b101ac 	.word	0x01b101ac
 8005578:	00580058 	.word	0x00580058
 800557c:	00580058 	.word	0x00580058
 8005580:	00580058 	.word	0x00580058
 8005584:	00580058 	.word	0x00580058
 8005588:	00580058 	.word	0x00580058
 800558c:	005801b6 	.word	0x005801b6
 8005590:	02d301be 	.word	0x02d301be
 8005594:	00580058 	.word	0x00580058
 8005598:	00580058 	.word	0x00580058
 800559c:	00580058 	.word	0x00580058
 80055a0:	02be02db 	.word	0x02be02db
 80055a4:	005802c2 	.word	0x005802c2
 80055a8:	02c60058 	.word	0x02c60058
 80055ac:	004d02ca 	.word	0x004d02ca
 80055b0:	00580058 	.word	0x00580058
 80055b4:	01cd0058 	.word	0x01cd0058
 80055b8:	01d10058 	.word	0x01d10058
 80055bc:	00580058 	.word	0x00580058
 80055c0:	01d50058 	.word	0x01d50058
 80055c4:	02190215 	.word	0x02190215
 80055c8:	029c026e 	.word	0x029c026e
 80055cc:	014c      	.short	0x014c
			keyer_speed += 1;
 80055ce:	4b42      	ldr	r3, [pc, #264]	; (80056d8 <UserInput+0x268>)
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 80055d4:	2832      	cmp	r0, #50	; 0x32
 80055d6:	f340 828c 	ble.w	8005af2 <UserInput+0x682>
				keyer_speed = 50;
 80055da:	2232      	movs	r2, #50	; 0x32
 80055dc:	4610      	mov	r0, r2
 80055de:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 80055e0:	f7fb ff84 	bl	80014ec <loadWPM>
	if (!DisableDisplay)
 80055e4:	4d36      	ldr	r5, [pc, #216]	; (80056c0 <UserInput+0x250>)
 80055e6:	782b      	ldrb	r3, [r5, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f47f af5f 	bne.w	80054ac <UserInput+0x3c>
 80055ee:	f7ff f805 	bl	80045fc <DisplayStatus.part.0>
 80055f2:	e75b      	b.n	80054ac <UserInput+0x3c>
	if (!DisableDisplay)
 80055f4:	782c      	ldrb	r4, [r5, #0]
 80055f6:	2c00      	cmp	r4, #0
 80055f8:	f47f af73 	bne.w	80054e2 <UserInput+0x72>
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80055fc:	4b37      	ldr	r3, [pc, #220]	; (80056dc <UserInput+0x26c>)
 80055fe:	ed93 7a00 	vldr	s14, [r3]
 8005602:	ed9f 0b29 	vldr	d0, [pc, #164]	; 80056a8 <UserInput+0x238>
 8005606:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800560a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800560e:	f00f fdeb 	bl	80151e8 <log10>
 8005612:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <UserInput+0x270>)
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f       \r", SValue);
 8005614:	4933      	ldr	r1, [pc, #204]	; (80056e4 <UserInput+0x274>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005616:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f       \r", SValue);
 800561a:	4833      	ldr	r0, [pc, #204]	; (80056e8 <UserInput+0x278>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800561c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80056b0 <UserInput+0x240>
 8005620:	eea0 7b06 	vfma.f64	d7, d0, d6
 8005624:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8005628:	ed83 7a00 	vstr	s14, [r3]
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f       \r", SValue);
 800562c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005630:	ec53 2b17 	vmov	r2, r3, d7
 8005634:	f00d fa9c 	bl	8012b70 <siprintf>
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 8005638:	482b      	ldr	r0, [pc, #172]	; (80056e8 <UserInput+0x278>)
 800563a:	f7fa feb1 	bl	80003a0 <strlen>
  return tud_cdc_n_write(0, buffer, bufsize);
 800563e:	492a      	ldr	r1, [pc, #168]	; (80056e8 <UserInput+0x278>)
 8005640:	4602      	mov	r2, r0
 8005642:	4620      	mov	r0, r4
 8005644:	f009 fdc4 	bl	800f1d0 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8005648:	4620      	mov	r0, r4
 800564a:	f009 fd7d 	bl	800f148 <tud_cdc_n_write_flush>
	HAL_Delay(1);
 800564e:	2001      	movs	r0, #1
 8005650:	f001 fda0 	bl	8007194 <HAL_Delay>
		if (OVFDetected)
 8005654:	4a25      	ldr	r2, [pc, #148]	; (80056ec <UserInput+0x27c>)
 8005656:	8813      	ldrh	r3, [r2, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 809e 	beq.w	800579a <UserInput+0x32a>
			OVFDetected--;
 800565e:	3b01      	subs	r3, #1
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8005660:	4923      	ldr	r1, [pc, #140]	; (80056f0 <UserInput+0x280>)
 8005662:	4c21      	ldr	r4, [pc, #132]	; (80056e8 <UserInput+0x278>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8005664:	2580      	movs	r5, #128	; 0x80
			OVFDetected--;
 8005666:	b29b      	uxth	r3, r3
 8005668:	8013      	strh	r3, [r2, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 800566a:	4a22      	ldr	r2, [pc, #136]	; (80056f4 <UserInput+0x284>)
 800566c:	6816      	ldr	r6, [r2, #0]
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 800566e:	c907      	ldmia	r1, {r0, r1, r2}
 8005670:	c403      	stmia	r4!, {r0, r1}
 8005672:	f824 2b02 	strh.w	r2, [r4], #2
 8005676:	0c12      	lsrs	r2, r2, #16
 8005678:	7022      	strb	r2, [r4, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 800567a:	4a1f      	ldr	r2, [pc, #124]	; (80056f8 <UserInput+0x288>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 800567c:	6035      	str	r5, [r6, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	6015      	str	r5, [r2, #0]
			if (!OVFDetected)
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 8091 	bne.w	80057aa <UserInput+0x33a>
				__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 8005688:	6873      	ldr	r3, [r6, #4]
 800568a:	432b      	orrs	r3, r5
 800568c:	6073      	str	r3, [r6, #4]
				__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 800568e:	6853      	ldr	r3, [r2, #4]
 8005690:	432b      	orrs	r3, r5
 8005692:	6053      	str	r3, [r2, #4]
 8005694:	e089      	b.n	80057aa <UserInput+0x33a>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 8005696:	1ad0      	subs	r0, r2, r3
 8005698:	b280      	uxth	r0, r0
 800569a:	f7fc fbbb 	bl	8001e14 <FplusClicked>
	if (!DisableDisplay)
 800569e:	782c      	ldrb	r4, [r5, #0]
 80056a0:	2c00      	cmp	r4, #0
 80056a2:	f47f af19 	bne.w	80054d8 <UserInput+0x68>
 80056a6:	e714      	b.n	80054d2 <UserInput+0x62>
 80056a8:	00000000 	.word	0x00000000
 80056ac:	409f4000 	.word	0x409f4000
 80056b0:	9916f6a6 	.word	0x9916f6a6
 80056b4:	400a93fc 	.word	0x400a93fc
 80056b8:	240072c4 	.word	0x240072c4
 80056bc:	240061b8 	.word	0x240061b8
 80056c0:	24000f00 	.word	0x24000f00
 80056c4:	40000800 	.word	0x40000800
 80056c8:	2400612e 	.word	0x2400612e
 80056cc:	24000f02 	.word	0x24000f02
 80056d0:	240061c0 	.word	0x240061c0
 80056d4:	240061be 	.word	0x240061be
 80056d8:	2400acdc 	.word	0x2400acdc
 80056dc:	24006140 	.word	0x24006140
 80056e0:	2400614c 	.word	0x2400614c
 80056e4:	08019290 	.word	0x08019290
 80056e8:	240062c0 	.word	0x240062c0
 80056ec:	2400613e 	.word	0x2400613e
 80056f0:	080192a8 	.word	0x080192a8
 80056f4:	2400a300 	.word	0x2400a300
 80056f8:	2400a364 	.word	0x2400a364
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 80056fc:	48c8      	ldr	r0, [pc, #800]	; (8005a20 <UserInput+0x5b0>)
 80056fe:	f002 ffb9 	bl	8008674 <HAL_ADCEx_MultiModeStop_DMA>
		SendWSPR(); //endless loop, only way to exit is by CW keying.
 8005702:	f7fe fe79 	bl	80043f8 <SendWSPR>
		if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8005706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570a:	49c6      	ldr	r1, [pc, #792]	; (8005a24 <UserInput+0x5b4>)
 800570c:	48c4      	ldr	r0, [pc, #784]	; (8005a20 <UserInput+0x5b0>)
 800570e:	f002 ff35 	bl	800857c <HAL_ADCEx_MultiModeStart_DMA>
 8005712:	4604      	mov	r4, r0
 8005714:	2800      	cmp	r0, #0
 8005716:	f040 81f6 	bne.w	8005b06 <UserInput+0x696>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800571a:	f44f 7800 	mov.w	r8, #512	; 0x200
 800571e:	f04f 0901 	mov.w	r9, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005722:	a902      	add	r1, sp, #8
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005724:	9604      	str	r6, [sp, #16]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005726:	e9cd 0005 	strd	r0, r0, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800572a:	48bf      	ldr	r0, [pc, #764]	; (8005a28 <UserInput+0x5b8>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800572c:	e9cd 8902 	strd	r8, r9, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005730:	f004 fda4 	bl	800a27c <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8005734:	4622      	mov	r2, r4
 8005736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800573a:	48bc      	ldr	r0, [pc, #752]	; (8005a2c <UserInput+0x5bc>)
 800573c:	f004 fede 	bl	800a4fc <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8005740:	4622      	mov	r2, r4
 8005742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005746:	48ba      	ldr	r0, [pc, #744]	; (8005a30 <UserInput+0x5c0>)
 8005748:	f004 fed8 	bl	800a4fc <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 800574c:	4bb9      	ldr	r3, [pc, #740]	; (8005a34 <UserInput+0x5c4>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800574e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005752:	48b6      	ldr	r0, [pc, #728]	; (8005a2c <UserInput+0x5bc>)
 8005754:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8005756:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005758:	9406      	str	r4, [sp, #24]
 800575a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800575e:	e9cd 4404 	strd	r4, r4, [sp, #16]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005762:	f004 fecb 	bl	800a4fc <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8005766:	4623      	mov	r3, r4
 8005768:	4622      	mov	r2, r4
 800576a:	2110      	movs	r1, #16
 800576c:	48b2      	ldr	r0, [pc, #712]	; (8005a38 <UserInput+0x5c8>)
 800576e:	f003 f9cd 	bl	8008b0c <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005772:	2202      	movs	r2, #2
 8005774:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005776:	a902      	add	r1, sp, #8
 8005778:	48ab      	ldr	r0, [pc, #684]	; (8005a28 <UserInput+0x5b8>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800577a:	e9cd 2304 	strd	r2, r3, [sp, #16]
		TXCarrierEnabled = 0;
 800577e:	4baf      	ldr	r3, [pc, #700]	; (8005a3c <UserInput+0x5cc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005780:	e9cd 8902 	strd	r8, r9, [sp, #8]
		TXCarrierEnabled = 0;
 8005784:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005786:	f004 fd79 	bl	800a27c <HAL_GPIO_Init>
		LED_GREEN_OFF;
 800578a:	4622      	mov	r2, r4
 800578c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005790:	48a7      	ldr	r0, [pc, #668]	; (8005a30 <UserInput+0x5c0>)
 8005792:	f004 feb3 	bl	800a4fc <HAL_GPIO_WritePin>
		WSPRBeaconState = NO_FIX;
 8005796:	702c      	strb	r4, [r5, #0]
 8005798:	e672      	b.n	8005480 <UserInput+0x10>
			sprintf((char*)UartTXString, "\e[4;1H   \r");
 800579a:	4aa9      	ldr	r2, [pc, #676]	; (8005a40 <UserInput+0x5d0>)
 800579c:	4ba9      	ldr	r3, [pc, #676]	; (8005a44 <UserInput+0x5d4>)
 800579e:	ca07      	ldmia	r2, {r0, r1, r2}
 80057a0:	0c14      	lsrs	r4, r2, #16
 80057a2:	c303      	stmia	r3!, {r0, r1}
 80057a4:	f823 2b02 	strh.w	r2, [r3], #2
 80057a8:	701c      	strb	r4, [r3, #0]
	tud_cdc_write(UartTXString, strlen((char *)UartTXString));
 80057aa:	48a6      	ldr	r0, [pc, #664]	; (8005a44 <UserInput+0x5d4>)
 80057ac:	f7fa fdf8 	bl	80003a0 <strlen>
  return tud_cdc_n_write(0, buffer, bufsize);
 80057b0:	49a4      	ldr	r1, [pc, #656]	; (8005a44 <UserInput+0x5d4>)
 80057b2:	4602      	mov	r2, r0
 80057b4:	2000      	movs	r0, #0
 80057b6:	f009 fd0b 	bl	800f1d0 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 80057ba:	2000      	movs	r0, #0
 80057bc:	f009 fcc4 	bl	800f148 <tud_cdc_n_write_flush>
	HAL_Delay(1);
 80057c0:	2001      	movs	r0, #1
}
 80057c2:	b009      	add	sp, #36	; 0x24
 80057c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 80057c8:	f001 bce4 	b.w	8007194 <HAL_Delay>
			SetBW((Bwidth)Wide);  break;
 80057cc:	2001      	movs	r0, #1
 80057ce:	f7fc f957 	bl	8001a80 <SetBW>
 80057d2:	e707      	b.n	80055e4 <UserInput+0x174>
			RXVolume += 0.1;
 80057d4:	4b9c      	ldr	r3, [pc, #624]	; (8005a48 <UserInput+0x5d8>)
			if (RXVolume > 1.0)
 80057d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			RXVolume += 0.1;
 80057da:	ed93 7a00 	vldr	s14, [r3]
 80057de:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 8005a18 <UserInput+0x5a8>
 80057e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80057e6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80057ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80057ee:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 80057f2:	edc3 7a00 	vstr	s15, [r3]
 80057f6:	e6f5      	b.n	80055e4 <UserInput+0x174>
			RXVolume -= 0.1;
 80057f8:	4b93      	ldr	r3, [pc, #588]	; (8005a48 <UserInput+0x5d8>)
			if (RXVolume < 0)
 80057fa:	2200      	movs	r2, #0
			RXVolume -= 0.1;
 80057fc:	ed93 7a00 	vldr	s14, [r3]
 8005800:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8005a18 <UserInput+0x5a8>
 8005804:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005808:	ee37 7b46 	vsub.f64	d7, d7, d6
 800580c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (RXVolume < 0)
 8005810:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			RXVolume -= 0.1;
 8005818:	bf54      	ite	pl
 800581a:	ed83 7a00 	vstrpl	s14, [r3]
				RXVolume = 0;
 800581e:	601a      	strmi	r2, [r3, #0]
 8005820:	e6e0      	b.n	80055e4 <UserInput+0x174>
			FminusClicked(1); break; //change to 2 for step equal to selection
 8005822:	2001      	movs	r0, #1
 8005824:	f7fc fb9a 	bl	8001f5c <FminusClicked>
 8005828:	e6dc      	b.n	80055e4 <UserInput+0x174>
			FplusClicked(1); break;  //change to 2 for step equal to selection
 800582a:	2001      	movs	r0, #1
 800582c:	f7fc faf2 	bl	8001e14 <FplusClicked>
 8005830:	e6d8      	b.n	80055e4 <UserInput+0x174>
			SetFstep(5);  break;
 8005832:	2005      	movs	r0, #5
 8005834:	f7fc facc 	bl	8001dd0 <SetFstep>
 8005838:	e6d4      	b.n	80055e4 <UserInput+0x174>
			SetFstep(4);  break;
 800583a:	2004      	movs	r0, #4
 800583c:	f7fc fac8 	bl	8001dd0 <SetFstep>
 8005840:	e6d0      	b.n	80055e4 <UserInput+0x174>
			SetFstep(3);  break;
 8005842:	2003      	movs	r0, #3
 8005844:	f7fc fac4 	bl	8001dd0 <SetFstep>
 8005848:	e6cc      	b.n	80055e4 <UserInput+0x174>
			SetFstep(2);  break;
 800584a:	2002      	movs	r0, #2
 800584c:	f7fc fac0 	bl	8001dd0 <SetFstep>
 8005850:	e6c8      	b.n	80055e4 <UserInput+0x174>
			SetFstep(1); break;
 8005852:	2001      	movs	r0, #1
 8005854:	f7fc fabc 	bl	8001dd0 <SetFstep>
 8005858:	e6c4      	b.n	80055e4 <UserInput+0x174>
			SetFstep(0); break;
 800585a:	2000      	movs	r0, #0
 800585c:	f7fc fab8 	bl	8001dd0 <SetFstep>
 8005860:	e6c0      	b.n	80055e4 <UserInput+0x174>
			SetFstep(9); break;
 8005862:	2009      	movs	r0, #9
 8005864:	f7fc fab4 	bl	8001dd0 <SetFstep>
 8005868:	e6bc      	b.n	80055e4 <UserInput+0x174>
			DisableDisplay = 1; break;
 800586a:	4d78      	ldr	r5, [pc, #480]	; (8005a4c <UserInput+0x5dc>)
 800586c:	2301      	movs	r3, #1
 800586e:	702b      	strb	r3, [r5, #0]
	if (!DisableDisplay)
 8005870:	e61c      	b.n	80054ac <UserInput+0x3c>
			SendCWMessage(0); break;
 8005872:	2000      	movs	r0, #0
 8005874:	f7fc f8c4 	bl	8001a00 <SendCWMessage>
 8005878:	e6b4      	b.n	80055e4 <UserInput+0x174>
			SendCWMessage(1); break;
 800587a:	2001      	movs	r0, #1
 800587c:	f7fc f8c0 	bl	8001a00 <SendCWMessage>
 8005880:	e6b0      	b.n	80055e4 <UserInput+0x174>
			TxPowerOut = LOW_POWER_OUT;
 8005882:	4b73      	ldr	r3, [pc, #460]	; (8005a50 <UserInput+0x5e0>)
 8005884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005888:	601a      	str	r2, [r3, #0]
			break;
 800588a:	e6ab      	b.n	80055e4 <UserInput+0x174>
			TxPowerOut = MID_POWER_OUT;
 800588c:	4b70      	ldr	r3, [pc, #448]	; (8005a50 <UserInput+0x5e0>)
 800588e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005892:	601a      	str	r2, [r3, #0]
			break;
 8005894:	e6a6      	b.n	80055e4 <UserInput+0x174>
			TxPowerOut = MAX_POWER_OUT;
 8005896:	4b6e      	ldr	r3, [pc, #440]	; (8005a50 <UserInput+0x5e0>)
 8005898:	f640 72ff 	movw	r2, #4095	; 0xfff
 800589c:	601a      	str	r2, [r3, #0]
			break;
 800589e:	e6a1      	b.n	80055e4 <UserInput+0x174>
			if (ShowWF)
 80058a0:	4b6c      	ldr	r3, [pc, #432]	; (8005a54 <UserInput+0x5e4>)
 80058a2:	781a      	ldrb	r2, [r3, #0]
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	f000 8126 	beq.w	8005af6 <UserInput+0x686>
				ShowWF=0;
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	e699      	b.n	80055e4 <UserInput+0x174>
			SetWSPRPLLCoeff((double)LOfreq, FracDivCoeff, FracPWMCoeff);
 80058b0:	4b69      	ldr	r3, [pc, #420]	; (8005a58 <UserInput+0x5e8>)
 80058b2:	496a      	ldr	r1, [pc, #424]	; (8005a5c <UserInput+0x5ec>)
 80058b4:	ed93 0a00 	vldr	s0, [r3]
 80058b8:	4869      	ldr	r0, [pc, #420]	; (8005a60 <UserInput+0x5f0>)
 80058ba:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80058be:	f7ff f9a3 	bl	8004c08 <SetWSPRPLLCoeff>
			TransmittingWSPR = 1;
 80058c2:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <UserInput+0x5f4>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
			SendWSPR();
 80058c8:	f7fe fd96 	bl	80043f8 <SendWSPR>
			break;
 80058cc:	e68a      	b.n	80055e4 <UserInput+0x174>
			SetMode((Mode)LSB); break;
 80058ce:	2001      	movs	r0, #1
 80058d0:	f7fc fa42 	bl	8001d58 <SetMode>
 80058d4:	e686      	b.n	80055e4 <UserInput+0x174>
			SetBW((Bwidth)Narrow);  break;
 80058d6:	2000      	movs	r0, #0
 80058d8:	f7fc f8d2 	bl	8001a80 <SetBW>
 80058dc:	e682      	b.n	80055e4 <UserInput+0x174>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058de:	2400      	movs	r4, #0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058e0:	2302      	movs	r3, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80058e2:	f44f 7600 	mov.w	r6, #512	; 0x200
 80058e6:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058e8:	a902      	add	r1, sp, #8
 80058ea:	484f      	ldr	r0, [pc, #316]	; (8005a28 <UserInput+0x5b8>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058ec:	9304      	str	r3, [sp, #16]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80058f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058f6:	f004 fcc1 	bl	800a27c <HAL_GPIO_Init>
		RELAY_TX_OFF;
 80058fa:	4622      	mov	r2, r4
 80058fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005900:	484a      	ldr	r0, [pc, #296]	; (8005a2c <UserInput+0x5bc>)
 8005902:	f004 fdfb 	bl	800a4fc <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8005906:	4622      	mov	r2, r4
 8005908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800590c:	4848      	ldr	r0, [pc, #288]	; (8005a30 <UserInput+0x5c0>)
 800590e:	f004 fdf5 	bl	800a4fc <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005912:	4b48      	ldr	r3, [pc, #288]	; (8005a34 <UserInput+0x5c4>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005918:	4844      	ldr	r0, [pc, #272]	; (8005a2c <UserInput+0x5bc>)
 800591a:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 800591c:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800591e:	9406      	str	r4, [sp, #24]
 8005920:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005924:	e9cd 4404 	strd	r4, r4, [sp, #16]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005928:	f004 fde8 	bl	800a4fc <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 800592c:	4623      	mov	r3, r4
 800592e:	4622      	mov	r2, r4
 8005930:	2110      	movs	r1, #16
 8005932:	4841      	ldr	r0, [pc, #260]	; (8005a38 <UserInput+0x5c8>)
 8005934:	f003 f8ea 	bl	8008b0c <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005938:	2202      	movs	r2, #2
 800593a:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800593c:	a902      	add	r1, sp, #8
 800593e:	483a      	ldr	r0, [pc, #232]	; (8005a28 <UserInput+0x5b8>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005940:	e9cd 2304 	strd	r2, r3, [sp, #16]
		TXCarrierEnabled = 0;
 8005944:	4b3d      	ldr	r3, [pc, #244]	; (8005a3c <UserInput+0x5cc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005946:	e9cd 6702 	strd	r6, r7, [sp, #8]
		TXCarrierEnabled = 0;
 800594a:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800594c:	f004 fc96 	bl	800a27c <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8005950:	4622      	mov	r2, r4
 8005952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005956:	4836      	ldr	r0, [pc, #216]	; (8005a30 <UserInput+0x5c0>)
 8005958:	f004 fdd0 	bl	800a4fc <HAL_GPIO_WritePin>
}
 800595c:	e642      	b.n	80055e4 <UserInput+0x174>
			SetAGC((Agctype)Slow);  break;
 800595e:	2001      	movs	r0, #1
 8005960:	f7fc f8f2 	bl	8001b48 <SetAGC>
 8005964:	e63e      	b.n	80055e4 <UserInput+0x174>
		if (LastTXFreq != LOfreq)
 8005966:	4d3c      	ldr	r5, [pc, #240]	; (8005a58 <UserInput+0x5e8>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005968:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 800596a:	4c3f      	ldr	r4, [pc, #252]	; (8005a68 <UserInput+0x5f8>)
		TransmissionEnabled = 1;
 800596c:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 800596e:	ed95 0a00 	vldr	s0, [r5]
 8005972:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8005976:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <UserInput+0x5c4>)
		if (LastTXFreq != LOfreq)
 8005978:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800597c:	9306      	str	r3, [sp, #24]
		TransmissionEnabled = 1;
 800597e:	7011      	strb	r1, [r2, #0]
		if (LastTXFreq != LOfreq)
 8005980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005984:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005988:	e9cd 3304 	strd	r3, r3, [sp, #16]
		if (LastTXFreq != LOfreq)
 800598c:	f040 80b6 	bne.w	8005afc <UserInput+0x68c>
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005990:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005992:	f44f 7800 	mov.w	r8, #512	; 0x200
 8005996:	f04f 0902 	mov.w	r9, #2
 800599a:	2600      	movs	r6, #0
 800599c:	2703      	movs	r7, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800599e:	a902      	add	r1, sp, #8
 80059a0:	4821      	ldr	r0, [pc, #132]	; (8005a28 <UserInput+0x5b8>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80059a2:	9406      	str	r4, [sp, #24]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80059a4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80059a8:	e9cd 6704 	strd	r6, r7, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059ac:	f004 fc66 	bl	800a27c <HAL_GPIO_Init>
		RELAY_TX_ON;
 80059b0:	2201      	movs	r2, #1
 80059b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059b6:	481d      	ldr	r0, [pc, #116]	; (8005a2c <UserInput+0x5bc>)
 80059b8:	f004 fda0 	bl	800a4fc <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 80059bc:	2201      	movs	r2, #1
 80059be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059c2:	481b      	ldr	r0, [pc, #108]	; (8005a30 <UserInput+0x5c0>)
 80059c4:	f004 fd9a 	bl	800a4fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80059c8:	4622      	mov	r2, r4
 80059ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059ce:	4817      	ldr	r0, [pc, #92]	; (8005a2c <UserInput+0x5bc>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d0:	9406      	str	r4, [sp, #24]
 80059d2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80059d6:	e9cd 4404 	strd	r4, r4, [sp, #16]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80059da:	f004 fd8f 	bl	800a4fc <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 80059de:	4b1c      	ldr	r3, [pc, #112]	; (8005a50 <UserInput+0x5e0>)
 80059e0:	4622      	mov	r2, r4
 80059e2:	2110      	movs	r1, #16
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4814      	ldr	r0, [pc, #80]	; (8005a38 <UserInput+0x5c8>)
 80059e8:	f003 f890 	bl	8008b0c <HAL_DAC_SetValue>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059ec:	a902      	add	r1, sp, #8
 80059ee:	480e      	ldr	r0, [pc, #56]	; (8005a28 <UserInput+0x5b8>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80059f0:	9406      	str	r4, [sp, #24]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80059f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80059f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059fa:	f004 fc3f 	bl	800a27c <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 80059fe:	2201      	movs	r2, #1
 8005a00:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <UserInput+0x5cc>)
		LED_GREEN_ON;
 8005a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a06:	480a      	ldr	r0, [pc, #40]	; (8005a30 <UserInput+0x5c0>)
		TXCarrierEnabled = 1;
 8005a08:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8005a0a:	f004 fd77 	bl	800a4fc <HAL_GPIO_WritePin>
}
 8005a0e:	e5e9      	b.n	80055e4 <UserInput+0x174>
			SetMode((Mode)USB); break;
 8005a10:	2002      	movs	r0, #2
 8005a12:	f7fc f9a1 	bl	8001d58 <SetMode>
 8005a16:	e5e5      	b.n	80055e4 <UserInput+0x174>
 8005a18:	9999999a 	.word	0x9999999a
 8005a1c:	3fb99999 	.word	0x3fb99999
 8005a20:	2400a300 	.word	0x2400a300
 8005a24:	240072e0 	.word	0x240072e0
 8005a28:	58020800 	.word	0x58020800
 8005a2c:	58020c00 	.word	0x58020c00
 8005a30:	58020400 	.word	0x58020400
 8005a34:	240061b0 	.word	0x240061b0
 8005a38:	2400a430 	.word	0x2400a430
 8005a3c:	240061a4 	.word	0x240061a4
 8005a40:	080192b4 	.word	0x080192b4
 8005a44:	240062c0 	.word	0x240062c0
 8005a48:	24006148 	.word	0x24006148
 8005a4c:	24000f00 	.word	0x24000f00
 8005a50:	240061b4 	.word	0x240061b4
 8005a54:	24006170 	.word	0x24006170
 8005a58:	24006128 	.word	0x24006128
 8005a5c:	24005108 	.word	0x24005108
 8005a60:	240050fc 	.word	0x240050fc
 8005a64:	240061b1 	.word	0x240061b1
 8005a68:	24006130 	.word	0x24006130
	__HAL_RCC_PLL2FRACN_DISABLE();
 8005a6c:	4a27      	ldr	r2, [pc, #156]	; (8005b0c <UserInput+0x69c>)
	for (i=0; i< 50; i++)
 8005a6e:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 8005a70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005a72:	f023 0310 	bic.w	r3, r3, #16
 8005a76:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8005a78:	9102      	str	r1, [sp, #8]
 8005a7a:	9b02      	ldr	r3, [sp, #8]
 8005a7c:	2b31      	cmp	r3, #49	; 0x31
 8005a7e:	d80b      	bhi.n	8005a98 <UserInput+0x628>
		i++;
 8005a80:	9b02      	ldr	r3, [sp, #8]
 8005a82:	3301      	adds	r3, #1
 8005a84:	9302      	str	r3, [sp, #8]
		i--;
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	9302      	str	r3, [sp, #8]
	for (i=0; i< 50; i++)
 8005a8c:	9b02      	ldr	r3, [sp, #8]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	9b02      	ldr	r3, [sp, #8]
 8005a94:	2b31      	cmp	r3, #49	; 0x31
 8005a96:	d9f3      	bls.n	8005a80 <UserInput+0x610>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8005a98:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <UserInput+0x69c>)
 8005a9a:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <UserInput+0x6a0>)
 8005a9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005a9e:	400b      	ands	r3, r1
 8005aa0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005aa4:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8005aa6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005aa8:	f043 0310 	orr.w	r3, r3, #16
 8005aac:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005aae:	e599      	b.n	80055e4 <UserInput+0x174>
			DisableDisplay = 0; break;
 8005ab0:	4d18      	ldr	r5, [pc, #96]	; (8005b14 <UserInput+0x6a4>)
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	702b      	strb	r3, [r5, #0]
	if (!DisableDisplay)
 8005ab6:	e59a      	b.n	80055ee <UserInput+0x17e>
			SetMode((Mode)CW); break;
 8005ab8:	2003      	movs	r0, #3
 8005aba:	f7fc f94d 	bl	8001d58 <SetMode>
 8005abe:	e591      	b.n	80055e4 <UserInput+0x174>
			SetAGC((Agctype)Fast);  break;
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	f7fc f841 	bl	8001b48 <SetAGC>
 8005ac6:	e58d      	b.n	80055e4 <UserInput+0x174>
			keyer_speed -= 1;
 8005ac8:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <UserInput+0x6a8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 8005ace:	2802      	cmp	r0, #2
 8005ad0:	dc0f      	bgt.n	8005af2 <UserInput+0x682>
				keyer_speed = 3;
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8005ad8:	e582      	b.n	80055e0 <UserInput+0x170>
			uwTick = SystemSeconds = SystemMinutes = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	480f      	ldr	r0, [pc, #60]	; (8005b1c <UserInput+0x6ac>)
 8005ade:	4910      	ldr	r1, [pc, #64]	; (8005b20 <UserInput+0x6b0>)
 8005ae0:	4a10      	ldr	r2, [pc, #64]	; (8005b24 <UserInput+0x6b4>)
 8005ae2:	6003      	str	r3, [r0, #0]
 8005ae4:	600b      	str	r3, [r1, #0]
 8005ae6:	6013      	str	r3, [r2, #0]
			break;
 8005ae8:	e57c      	b.n	80055e4 <UserInput+0x174>
			SetMode((Mode)AM); break;
 8005aea:	2000      	movs	r0, #0
 8005aec:	f7fc f934 	bl	8001d58 <SetMode>
 8005af0:	e578      	b.n	80055e4 <UserInput+0x174>
			keyer_speed += 1;
 8005af2:	6018      	str	r0, [r3, #0]
 8005af4:	e574      	b.n	80055e0 <UserInput+0x170>
				ShowWF=1;
 8005af6:	2201      	movs	r2, #1
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	e573      	b.n	80055e4 <UserInput+0x174>
			SetTXPLL(LOfreq);
 8005afc:	f7ff f9f0 	bl	8004ee0 <SetTXPLL>
			LastTXFreq = LOfreq;
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	e744      	b.n	8005990 <UserInput+0x520>
			Error_Handler();
 8005b06:	f7ff fbe5 	bl	80052d4 <Error_Handler>
 8005b0a:	bf00      	nop
 8005b0c:	58024400 	.word	0x58024400
 8005b10:	ffff0007 	.word	0xffff0007
 8005b14:	24000f00 	.word	0x24000f00
 8005b18:	2400acdc 	.word	0x2400acdc
 8005b1c:	2400619c 	.word	0x2400619c
 8005b20:	240061a0 	.word	0x240061a0
 8005b24:	2400c504 	.word	0x2400c504

08005b28 <MX_TIM6_Init_Custom_Rate>:
{
 8005b28:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b2a:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8005b2c:	4c0f      	ldr	r4, [pc, #60]	; (8005b6c <MX_TIM6_Init_Custom_Rate+0x44>)
 8005b2e:	4810      	ldr	r0, [pc, #64]	; (8005b70 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8005b30:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 8005b32:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b36:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b38:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b3a:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8005b3c:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005b40:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 8005b42:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b46:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005b4a:	f006 ff65 	bl	800ca18 <HAL_TIM_Base_Init>
 8005b4e:	b950      	cbnz	r0, 8005b66 <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005b50:	4603      	mov	r3, r0
 8005b52:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005b54:	a901      	add	r1, sp, #4
 8005b56:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b58:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005b5a:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005b5c:	f007 fd2c 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005b60:	b908      	cbnz	r0, 8005b66 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8005b62:	b004      	add	sp, #16
 8005b64:	bd10      	pop	{r4, pc}
		Error_Handler();
 8005b66:	f7ff fbb5 	bl	80052d4 <Error_Handler>
 8005b6a:	bf00      	nop
 8005b6c:	2400abac 	.word	0x2400abac
 8005b70:	40001000 	.word	0x40001000
 8005b74:	00000000 	.word	0x00000000

08005b78 <main>:
{
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	ed2d 8b0a 	vpush	{d8-d12}
 8005b80:	b0e1      	sub	sp, #388	; 0x184
  HAL_Init();
 8005b82:	f001 fac5 	bl	8007110 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005b86:	4ad4      	ldr	r2, [pc, #848]	; (8005ed8 <main+0x360>)
 8005b88:	6953      	ldr	r3, [r2, #20]
 8005b8a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8005b8e:	d111      	bne.n	8005bb4 <main+0x3c>
  __ASM volatile ("dsb 0xF":::"memory");
 8005b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005b94:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005b98:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005b9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ba0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005ba4:	6953      	ldr	r3, [r2, #20]
 8005ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005baa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005bb0:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bb6:	4dc9      	ldr	r5, [pc, #804]	; (8005edc <main+0x364>)
	SystemClock_Config_For_OC();
 8005bb8:	f7ff fba6 	bl	8005308 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB sometimes (and almost always on an Android phone) does not initialize
 8005bbc:	2014      	movs	r0, #20
 8005bbe:	f001 fae9 	bl	8007194 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bc2:	945a      	str	r4, [sp, #360]	; 0x168
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8005bca:	48c5      	ldr	r0, [pc, #788]	; (8005ee0 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bcc:	2601      	movs	r6, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005bce:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005bd2:	f04f 0a08 	mov.w	sl, #8
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005bd6:	f04f 0904 	mov.w	r9, #4
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005bda:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bde:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
 8005be2:	e9cd 4458 	strd	r4, r4, [sp, #352]	; 0x160
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005be6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005bea:	f043 0304 	orr.w	r3, r3, #4
 8005bee:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005bf2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	9305      	str	r3, [sp, #20]
 8005bfc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005bfe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c06:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005c0a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	9306      	str	r3, [sp, #24]
 8005c14:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c16:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005c22:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	9307      	str	r3, [sp, #28]
 8005c2c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c2e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c32:	f043 0302 	orr.w	r3, r3, #2
 8005c36:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005c3a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	9308      	str	r3, [sp, #32]
 8005c44:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c46:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c4a:	f043 0308 	orr.w	r3, r3, #8
 8005c4e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005c52:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8005c5e:	f004 fc4d 	bl	800a4fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 8005c62:	4622      	mov	r2, r4
 8005c64:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005c68:	489e      	ldr	r0, [pc, #632]	; (8005ee4 <main+0x36c>)
 8005c6a:	f004 fc47 	bl	800a4fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 8005c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c72:	2300      	movs	r3, #0
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8005c74:	a956      	add	r1, sp, #344	; 0x158
 8005c76:	489c      	ldr	r0, [pc, #624]	; (8005ee8 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c78:	9658      	str	r6, [sp, #352]	; 0x160
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 8005c7a:	e9cd 2356 	strd	r2, r3, [sp, #344]	; 0x158
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8005c7e:	f004 fafd 	bl	800a27c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8005c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8005c8a:	a956      	add	r1, sp, #344	; 0x158
 8005c8c:	4896      	ldr	r0, [pc, #600]	; (8005ee8 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c8e:	9658      	str	r6, [sp, #352]	; 0x160
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8005c90:	e9cd 2356 	strd	r2, r3, [sp, #344]	; 0x158
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8005c94:	f004 faf2 	bl	800a27c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8005c98:	22c0      	movs	r2, #192	; 0xc0
 8005c9a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c9c:	a956      	add	r1, sp, #344	; 0x158
 8005c9e:	4893      	ldr	r0, [pc, #588]	; (8005eec <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ca0:	9658      	str	r6, [sp, #352]	; 0x160
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8005ca2:	e9cd 2356 	strd	r2, r3, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca6:	f004 fae9 	bl	800a27c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8005caa:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8005cae:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cb0:	a956      	add	r1, sp, #344	; 0x158
 8005cb2:	488b      	ldr	r0, [pc, #556]	; (8005ee0 <main+0x368>)
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8005cb4:	e9cd 2356 	strd	r2, r3, [sp, #344]	; 0x158
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e9cd 2358 	strd	r2, r3, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cc0:	f004 fadc 	bl	800a27c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8005cc4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005cc8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cca:	a956      	add	r1, sp, #344	; 0x158
 8005ccc:	4885      	ldr	r0, [pc, #532]	; (8005ee4 <main+0x36c>)
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8005cce:	e9cd 2356 	strd	r2, r3, [sp, #344]	; 0x158
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e9cd 2358 	strd	r2, r3, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cda:	f004 facf 	bl	800a27c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 8005cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ce2:	2300      	movs	r3, #0
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005ce4:	a956      	add	r1, sp, #344	; 0x158
 8005ce6:	487f      	ldr	r0, [pc, #508]	; (8005ee4 <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ce8:	9658      	str	r6, [sp, #352]	; 0x160
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 8005cea:	e9cd 2356 	strd	r2, r3, [sp, #344]	; 0x158
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005cee:	f004 fac5 	bl	800a27c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cf8:	a956      	add	r1, sp, #344	; 0x158
 8005cfa:	487b      	ldr	r0, [pc, #492]	; (8005ee8 <main+0x370>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005cfc:	945a      	str	r4, [sp, #360]	; 0x168
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005cfe:	e9cd 2356 	strd	r2, r3, [sp, #344]	; 0x158
 8005d02:	2303      	movs	r3, #3
 8005d04:	2200      	movs	r2, #0
 8005d06:	e9cd 2358 	strd	r2, r3, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d0a:	f004 fab7 	bl	800a27c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8005d0e:	4622      	mov	r2, r4
 8005d10:	2104      	movs	r1, #4
 8005d12:	2028      	movs	r0, #40	; 0x28
 8005d14:	f002 fdc2 	bl	800889c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d18:	2028      	movs	r0, #40	; 0x28
 8005d1a:	f002 fdfd 	bl	8008918 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005d1e:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005d22:	4622      	mov	r2, r4
 8005d24:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005d26:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005d28:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005d2a:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8005d2e:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  hadc1.Instance = ADC1;
 8005d32:	4d6f      	ldr	r5, [pc, #444]	; (8005ef0 <main+0x378>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005d34:	4033      	ands	r3, r6
 8005d36:	9304      	str	r3, [sp, #16]
 8005d38:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005d3a:	f002 fdaf 	bl	800889c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005d3e:	200b      	movs	r0, #11
 8005d40:	f002 fdea 	bl	8008918 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8005d44:	4622      	mov	r2, r4
 8005d46:	2102      	movs	r1, #2
 8005d48:	200c      	movs	r0, #12
 8005d4a:	f002 fda7 	bl	800889c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005d4e:	200c      	movs	r0, #12
 8005d50:	f002 fde2 	bl	8008918 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005d54:	4b67      	ldr	r3, [pc, #412]	; (8005ef4 <main+0x37c>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005d56:	942e      	str	r4, [sp, #184]	; 0xb8
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005d58:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8005d5a:	9444      	str	r4, [sp, #272]	; 0x110
  ADC_MultiModeTypeDef multimode = {0};
 8005d5c:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005d5e:	9433      	str	r4, [sp, #204]	; 0xcc
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005d60:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005d62:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005d64:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005d66:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 8005d6a:	61ae      	str	r6, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005d6c:	f8c5 a008 	str.w	sl, [r5, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005d70:	f8c5 9010 	str.w	r9, [r5, #16]
  ADC_MultiModeTypeDef multimode = {0};
 8005d74:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005d78:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
 8005d7c:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  ADC_ChannelConfTypeDef sConfig = {0};
 8005d80:	e9cd 4445 	strd	r4, r4, [sp, #276]	; 0x114
 8005d84:	e9cd 4447 	strd	r4, r4, [sp, #284]	; 0x11c
 8005d88:	e9cd 4449 	strd	r4, r4, [sp, #292]	; 0x124
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005d8c:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005d90:	f44f 7480 	mov.w	r4, #256	; 0x100
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005d94:	e9c5 3b00 	strd	r3, fp, [r5]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005d98:	2303      	movs	r3, #3
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005d9a:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005d9c:	e9c5 380b 	strd	r3, r8, [r5, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005da0:	f002 fa8c 	bl	80082bc <HAL_ADC_Init>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	f040 8468 	bne.w	800667a <main+0xb02>
  multimode.Mode = ADC_DUALMODE_INTERL;
 8005daa:	2207      	movs	r2, #7
 8005dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005db0:	a90a      	add	r1, sp, #40	; 0x28
 8005db2:	4628      	mov	r0, r5
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8005db4:	940c      	str	r4, [sp, #48]	; 0x30
  multimode.Mode = ADC_DUALMODE_INTERL;
 8005db6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005dba:	f002 fcf5 	bl	80087a8 <HAL_ADCEx_MultiModeConfigChannel>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f040 845b 	bne.w	800667a <main+0xb02>
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005dc4:	4b4c      	ldr	r3, [pc, #304]	; (8005ef8 <main+0x380>)
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8005dc6:	a92e      	add	r1, sp, #184	; 0xb8
 8005dc8:	4628      	mov	r0, r5
  AnalogWDGConfig.ITMode = ENABLE;
 8005dca:	f88d 60c4 	strb.w	r6, [sp, #196]	; 0xc4
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005dce:	9330      	str	r3, [sp, #192]	; 0xc0
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8005dd0:	ed9f cb37 	vldr	d12, [pc, #220]	; 8005eb0 <main+0x338>
  AnalogWDGConfig.HighThreshold = 4094;
 8005dd4:	ed9f bb38 	vldr	d11, [pc, #224]	; 8005eb8 <main+0x340>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8005dd8:	ed8d cb2e 	vstr	d12, [sp, #184]	; 0xb8
  AnalogWDGConfig.HighThreshold = 4094;
 8005ddc:	ed8d bb32 	vstr	d11, [sp, #200]	; 0xc8
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8005de0:	f001 fe68 	bl	8007ab4 <HAL_ADC_AnalogWDGConfig>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f040 8448 	bne.w	800667a <main+0xb02>
  sConfig.OffsetSignedSaturation = DISABLE;
 8005dea:	f88d 0129 	strb.w	r0, [sp, #297]	; 0x129
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005dee:	a944      	add	r1, sp, #272	; 0x110
 8005df0:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8005df2:	ed9f ab33 	vldr	d10, [pc, #204]	; 8005ec0 <main+0x348>
 8005df6:	ed9f 9b34 	vldr	d9, [pc, #208]	; 8005ec8 <main+0x350>
 8005dfa:	ed9f 8b35 	vldr	d8, [pc, #212]	; 8005ed0 <main+0x358>
 8005dfe:	ed8d ab44 	vstr	d10, [sp, #272]	; 0x110
 8005e02:	ed8d 9b46 	vstr	d9, [sp, #280]	; 0x118
 8005e06:	ed8d 8b48 	vstr	d8, [sp, #288]	; 0x120
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005e0a:	f001 fc23 	bl	8007654 <HAL_ADC_ConfigChannel>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f040 8433 	bne.w	800667a <main+0xb02>
  hadc2.Instance = ADC2;
 8005e14:	4f39      	ldr	r7, [pc, #228]	; (8005efc <main+0x384>)
 8005e16:	4a3a      	ldr	r2, [pc, #232]	; (8005f00 <main+0x388>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005e18:	9028      	str	r0, [sp, #160]	; 0xa0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005e1a:	903c      	str	r0, [sp, #240]	; 0xf0
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005e1c:	902d      	str	r0, [sp, #180]	; 0xb4
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005e1e:	60f8      	str	r0, [r7, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005e20:	7738      	strb	r0, [r7, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8005e22:	62f8      	str	r0, [r7, #44]	; 0x2c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005e24:	6378      	str	r0, [r7, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8005e26:	f887 0038 	strb.w	r0, [r7, #56]	; 0x38
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005e2a:	82bc      	strh	r4, [r7, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e2c:	f8c7 9010 	str.w	r9, [r7, #16]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005e30:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  hadc2.Init.NbrOfConversion = 1;
 8005e34:	61be      	str	r6, [r7, #24]
  hadc2.Instance = ADC2;
 8005e36:	603a      	str	r2, [r7, #0]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005e38:	e9cd 0029 	strd	r0, r0, [sp, #164]	; 0xa4
 8005e3c:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
  ADC_ChannelConfTypeDef sConfig = {0};
 8005e40:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8005e44:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
 8005e48:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005e4c:	4638      	mov	r0, r7
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005e4e:	e9c7 ba01 	strd	fp, sl, [r7, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005e52:	f002 fa33 	bl	80082bc <HAL_ADC_Init>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f040 840f 	bne.w	800667a <main+0xb02>
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005e5c:	4b26      	ldr	r3, [pc, #152]	; (8005ef8 <main+0x380>)
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8005e5e:	a928      	add	r1, sp, #160	; 0xa0
 8005e60:	4638      	mov	r0, r7
  AnalogWDGConfig.ITMode = ENABLE;
 8005e62:	f88d 60ac 	strb.w	r6, [sp, #172]	; 0xac
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005e66:	932a      	str	r3, [sp, #168]	; 0xa8
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8005e68:	ed8d cb28 	vstr	d12, [sp, #160]	; 0xa0
  AnalogWDGConfig.HighThreshold = 4094;
 8005e6c:	ed8d bb2c 	vstr	d11, [sp, #176]	; 0xb0
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8005e70:	f001 fe20 	bl	8007ab4 <HAL_ADC_AnalogWDGConfig>
 8005e74:	4602      	mov	r2, r0
 8005e76:	2800      	cmp	r0, #0
 8005e78:	f040 83ff 	bne.w	800667a <main+0xb02>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e7c:	a93c      	add	r1, sp, #240	; 0xf0
 8005e7e:	4638      	mov	r0, r7
  sConfig.OffsetSignedSaturation = DISABLE;
 8005e80:	f88d 2109 	strb.w	r2, [sp, #265]	; 0x109
  sConfig.Channel = ADC_CHANNEL_5;
 8005e84:	ed8d ab3c 	vstr	d10, [sp, #240]	; 0xf0
 8005e88:	ed8d 9b3e 	vstr	d9, [sp, #248]	; 0xf8
 8005e8c:	ed8d 8b40 	vstr	d8, [sp, #256]	; 0x100
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e90:	f001 fbe0 	bl	8007654 <HAL_ADC_ConfigChannel>
 8005e94:	4601      	mov	r1, r0
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f040 83ef 	bne.w	800667a <main+0xb02>
  DAC_ChannelConfTypeDef sConfig = {0};
 8005e9c:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8005e9e:	4c19      	ldr	r4, [pc, #100]	; (8005f04 <main+0x38c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8005ea0:	a856      	add	r0, sp, #344	; 0x158
 8005ea2:	f00c f883 	bl	8011fac <memset>
  hdac1.Instance = DAC1;
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <main+0x390>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005ea8:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	e02e      	b.n	8005f0c <main+0x394>
 8005eae:	bf00      	nop
 8005eb0:	7dc00000 	.word	0x7dc00000
 8005eb4:	00c00000 	.word	0x00c00000
 8005eb8:	00000ffe 	.word	0x00000ffe
 8005ebc:	00000001 	.word	0x00000001
 8005ec0:	14f00020 	.word	0x14f00020
 8005ec4:	00000006 	.word	0x00000006
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	000007ff 	.word	0x000007ff
 8005ed0:	00000004 	.word	0x00000004
 8005ed4:	00000000 	.word	0x00000000
 8005ed8:	e000ed00 	.word	0xe000ed00
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	58020400 	.word	0x58020400
 8005ee4:	58020c00 	.word	0x58020c00
 8005ee8:	58020800 	.word	0x58020800
 8005eec:	58020000 	.word	0x58020000
 8005ef0:	2400a300 	.word	0x2400a300
 8005ef4:	40022000 	.word	0x40022000
 8005ef8:	14f00020 	.word	0x14f00020
 8005efc:	2400a364 	.word	0x2400a364
 8005f00:	40022100 	.word	0x40022100
 8005f04:	2400a430 	.word	0x2400a430
 8005f08:	40007400 	.word	0x40007400
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005f0c:	f002 fd28 	bl	8008960 <HAL_DAC_Init>
 8005f10:	4602      	mov	r2, r0
 8005f12:	2800      	cmp	r0, #0
 8005f14:	f040 83b1 	bne.w	800667a <main+0xb02>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005f18:	2116      	movs	r1, #22
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005f1a:	905a      	str	r0, [sp, #360]	; 0x168
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e9cd 0156 	strd	r0, r1, [sp, #344]	; 0x158
 8005f22:	2000      	movs	r0, #0
 8005f24:	2101      	movs	r1, #1
 8005f26:	e9cd 0158 	strd	r0, r1, [sp, #352]	; 0x160
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005f2a:	a956      	add	r1, sp, #344	; 0x158
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f002 fe57 	bl	8008be0 <HAL_DAC_ConfigChannel>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2800      	cmp	r0, #0
 8005f36:	f040 83a0 	bne.w	800667a <main+0xb02>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005f3a:	2210      	movs	r2, #16
 8005f3c:	a956      	add	r1, sp, #344	; 0x158
 8005f3e:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005f40:	9357      	str	r3, [sp, #348]	; 0x15c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005f42:	f002 fe4d 	bl	8008be0 <HAL_DAC_ConfigChannel>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f040 8397 	bne.w	800667a <main+0xb02>
  hlptim2.Instance = LPTIM2;
 8005f4c:	48bb      	ldr	r0, [pc, #748]	; (800623c <main+0x6c4>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8005f4e:	2300      	movs	r3, #0
  hlptim2.Instance = LPTIM2;
 8005f50:	4abb      	ldr	r2, [pc, #748]	; (8006240 <main+0x6c8>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005f52:	f64f 76ff 	movw	r6, #65535	; 0xffff
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8005f56:	6303      	str	r3, [r0, #48]	; 0x30
  hlptim2.Instance = LPTIM2;
 8005f58:	6002      	str	r2, [r0, #0]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8005f5a:	2200      	movs	r2, #0
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005f5c:	6146      	str	r6, [r0, #20]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8005f5e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8005f62:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e9c0 2308 	strd	r2, r3, [r0, #32]
 8005f6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005f70:	2300      	movs	r3, #0
 8005f72:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8005f76:	f004 fad3 	bl	800a520 <HAL_LPTIM_Init>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f040 837d 	bne.w	800667a <main+0xb02>
  htim6.Instance = TIM6;
 8005f80:	4cb0      	ldr	r4, [pc, #704]	; (8006244 <main+0x6cc>)
  htim6.Init.Period = 8191;
 8005f82:	f641 73ff 	movw	r3, #8191	; 0x1fff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f86:	901b      	str	r0, [sp, #108]	; 0x6c
  htim6.Init.Period = 8191;
 8005f88:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f8a:	2380      	movs	r3, #128	; 0x80
  htim6.Init.Prescaler = 0;
 8005f8c:	6060      	str	r0, [r4, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f8e:	61a3      	str	r3, [r4, #24]
  htim6.Instance = TIM6;
 8005f90:	4bad      	ldr	r3, [pc, #692]	; (8006248 <main+0x6d0>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f92:	60a0      	str	r0, [r4, #8]
  htim6.Instance = TIM6;
 8005f94:	6023      	str	r3, [r4, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f96:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f006 fd3c 	bl	800ca18 <HAL_TIM_Base_Init>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f040 836a 	bne.w	800667a <main+0xb02>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005fa6:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fa8:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005faa:	a919      	add	r1, sp, #100	; 0x64
 8005fac:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005fae:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005fb0:	f007 fb02 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	f040 835f 	bne.w	800667a <main+0xb02>
  huart3.Instance = USART3;
 8005fbc:	4ca3      	ldr	r4, [pc, #652]	; (800624c <main+0x6d4>)
 8005fbe:	4aa4      	ldr	r2, [pc, #656]	; (8006250 <main+0x6d8>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005fc0:	60a0      	str	r0, [r4, #8]
  huart3.Instance = USART3;
 8005fc2:	6022      	str	r2, [r4, #0]
  huart3.Init.BaudRate = 115200;
 8005fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fc8:	61a0      	str	r0, [r4, #24]
  huart3.Init.BaudRate = 115200;
 8005fca:	6062      	str	r2, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005fcc:	220c      	movs	r2, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8005fce:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fd2:	e9c4 0007 	strd	r0, r0, [r4, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005fd6:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005fd8:	6162      	str	r2, [r4, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fda:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005fde:	f008 f93d 	bl	800e25c <HAL_UART_Init>
 8005fe2:	4601      	mov	r1, r0
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f040 8348 	bne.w	800667a <main+0xb02>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005fea:	4620      	mov	r0, r4
 8005fec:	f008 f98e 	bl	800e30c <HAL_UARTEx_SetTxFifoThreshold>
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	f040 8341 	bne.w	800667a <main+0xb02>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f008 f9c9 	bl	800e390 <HAL_UARTEx_SetRxFifoThreshold>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f040 833b 	bne.w	800667a <main+0xb02>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006004:	4620      	mov	r0, r4
 8006006:	f008 f963 	bl	800e2d0 <HAL_UARTEx_DisableFifoMode>
 800600a:	2800      	cmp	r0, #0
 800600c:	f040 8335 	bne.w	800667a <main+0xb02>
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006010:	2201      	movs	r2, #1
 8006012:	2302      	movs	r3, #2
  htim4.Instance = TIM4;
 8006014:	4c8f      	ldr	r4, [pc, #572]	; (8006254 <main+0x6dc>)
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006016:	a94c      	add	r1, sp, #304	; 0x130
  TIM_Encoder_InitTypeDef sConfig = {0};
 8006018:	904f      	str	r0, [sp, #316]	; 0x13c
 800601a:	9053      	str	r0, [sp, #332]	; 0x14c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800601c:	9018      	str	r0, [sp, #96]	; 0x60
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800601e:	6120      	str	r0, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006020:	61a0      	str	r0, [r4, #24]
  htim4.Init.Period = 65535;
 8006022:	60e6      	str	r6, [r4, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006024:	e9cd 234c 	strd	r2, r3, [sp, #304]	; 0x130
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006028:	2301      	movs	r3, #1
  sConfig.IC1Filter = 8;
 800602a:	2208      	movs	r2, #8
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800602c:	934e      	str	r3, [sp, #312]	; 0x138
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800602e:	9352      	str	r3, [sp, #328]	; 0x148
  sConfig.IC2Filter = 8;
 8006030:	2308      	movs	r3, #8
 8006032:	9354      	str	r3, [sp, #336]	; 0x150
  htim4.Instance = TIM4;
 8006034:	4b88      	ldr	r3, [pc, #544]	; (8006258 <main+0x6e0>)
 8006036:	6023      	str	r3, [r4, #0]
  sConfig.IC1Filter = 8;
 8006038:	2302      	movs	r3, #2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800603a:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800603e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006042:	4620      	mov	r0, r4
  sConfig.IC1Filter = 8;
 8006044:	e9cd 2350 	strd	r2, r3, [sp, #320]	; 0x140
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006048:	f006 ff08 	bl	800ce5c <HAL_TIM_Encoder_Init>
 800604c:	4603      	mov	r3, r0
 800604e:	2800      	cmp	r0, #0
 8006050:	f040 8313 	bne.w	800667a <main+0xb02>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006054:	a916      	add	r1, sp, #88	; 0x58
 8006056:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006058:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800605a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800605c:	f007 faac 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 8006060:	2800      	cmp	r0, #0
 8006062:	f040 830a 	bne.w	800667a <main+0xb02>
  htim7.Instance = TIM7;
 8006066:	4c7d      	ldr	r4, [pc, #500]	; (800625c <main+0x6e4>)
 8006068:	4b7d      	ldr	r3, [pc, #500]	; (8006260 <main+0x6e8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800606a:	9015      	str	r0, [sp, #84]	; 0x54
  htim7.Instance = TIM7;
 800606c:	6023      	str	r3, [r4, #0]
  htim7.Init.Period = 8192;
 800606e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006072:	61a0      	str	r0, [r4, #24]
  htim7.Init.Period = 8192;
 8006074:	60e3      	str	r3, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006076:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800607a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800607e:	4620      	mov	r0, r4
 8006080:	f006 fcca 	bl	800ca18 <HAL_TIM_Base_Init>
 8006084:	2800      	cmp	r0, #0
 8006086:	f040 82f8 	bne.w	800667a <main+0xb02>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800608a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800608c:	a913      	add	r1, sp, #76	; 0x4c
 800608e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006090:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006092:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006094:	f007 fa90 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 8006098:	2800      	cmp	r0, #0
 800609a:	f040 82ee 	bne.w	800667a <main+0xb02>
	htim7.Instance = TIM7;
 800609e:	4b70      	ldr	r3, [pc, #448]	; (8006260 <main+0x6e8>)
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060a0:	61a0      	str	r0, [r4, #24]
	htim7.Instance = TIM7;
 80060a2:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 80060a4:	f247 5330 	movw	r3, #30000	; 0x7530
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060a8:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80060ac:	4620      	mov	r0, r4
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 80060ae:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80060b0:	f006 fcb2 	bl	800ca18 <HAL_TIM_Base_Init>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f040 82df 	bne.w	800667a <main+0xb02>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80060bc:	a913      	add	r1, sp, #76	; 0x4c
 80060be:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060c0:	9313      	str	r3, [sp, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060c2:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80060c4:	f007 fa78 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f040 82d6 	bne.w	800667a <main+0xb02>
  htim2.Instance = TIM2;
 80060ce:	4c65      	ldr	r4, [pc, #404]	; (8006264 <main+0x6ec>)
 80060d0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  htim2.Init.Period = 10000;
 80060d4:	f242 7310 	movw	r3, #10000	; 0x2710
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060d8:	9024      	str	r0, [sp, #144]	; 0x90
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060da:	9012      	str	r0, [sp, #72]	; 0x48
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060dc:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060de:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060e0:	61a0      	str	r0, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060e2:	9027      	str	r0, [sp, #156]	; 0x9c
  htim2.Init.Period = 10000;
 80060e4:	60e3      	str	r3, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060e6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim2.Init.Prescaler = 0;
 80060ea:	e9c4 6000 	strd	r6, r0, [r4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060ee:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80060f2:	4620      	mov	r0, r4
 80060f4:	f006 fc90 	bl	800ca18 <HAL_TIM_Base_Init>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	f040 82be 	bne.w	800667a <main+0xb02>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060fe:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006102:	a924      	add	r1, sp, #144	; 0x90
 8006104:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006106:	9724      	str	r7, [sp, #144]	; 0x90
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006108:	f007 f8ca 	bl	800d2a0 <HAL_TIM_ConfigClockSource>
 800610c:	2800      	cmp	r0, #0
 800610e:	f040 82b4 	bne.w	800667a <main+0xb02>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006112:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006114:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006116:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006118:	4620      	mov	r0, r4
 800611a:	f007 fa4d 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 800611e:	2800      	cmp	r0, #0
 8006120:	f040 82ab 	bne.w	800667a <main+0xb02>
	htim2.Init.Period = 15000;
 8006124:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006128:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800612a:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800612c:	61a0      	str	r0, [r4, #24]
	htim2.Init.Period = 15000;
 800612e:	60e3      	str	r3, [r4, #12]
	htim2.Init.Prescaler = 0;
 8006130:	e9c4 6000 	strd	r6, r0, [r4]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006134:	4620      	mov	r0, r4
 8006136:	f006 fc6f 	bl	800ca18 <HAL_TIM_Base_Init>
 800613a:	2800      	cmp	r0, #0
 800613c:	f040 829d 	bne.w	800667a <main+0xb02>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006140:	a924      	add	r1, sp, #144	; 0x90
 8006142:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006144:	9724      	str	r7, [sp, #144]	; 0x90
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006146:	f007 f8ab 	bl	800d2a0 <HAL_TIM_ConfigClockSource>
 800614a:	4603      	mov	r3, r0
 800614c:	2800      	cmp	r0, #0
 800614e:	f040 8294 	bne.w	800667a <main+0xb02>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006152:	a910      	add	r1, sp, #64	; 0x40
 8006154:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006156:	9310      	str	r3, [sp, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006158:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800615a:	f007 fa2d 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 800615e:	2800      	cmp	r0, #0
 8006160:	f040 828b 	bne.w	800667a <main+0xb02>
  htim3.Instance = TIM3;
 8006164:	4b40      	ldr	r3, [pc, #256]	; (8006268 <main+0x6f0>)
 8006166:	4a41      	ldr	r2, [pc, #260]	; (800626c <main+0x6f4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006168:	9020      	str	r0, [sp, #128]	; 0x80
  htim3.Instance = TIM3;
 800616a:	601a      	str	r2, [r3, #0]
  htim3.Init.Period = 65535;
 800616c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006170:	901c      	str	r0, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006172:	900f      	str	r0, [sp, #60]	; 0x3c
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006174:	901f      	str	r0, [sp, #124]	; 0x7c
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006176:	6118      	str	r0, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006178:	6198      	str	r0, [r3, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800617a:	9023      	str	r0, [sp, #140]	; 0x8c
  htim3.Init.Period = 65535;
 800617c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800617e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006182:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006186:	e9c3 0001 	strd	r0, r0, [r3, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800618a:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800618e:	4618      	mov	r0, r3
 8006190:	f006 fc42 	bl	800ca18 <HAL_TIM_Base_Init>
 8006194:	2800      	cmp	r0, #0
 8006196:	f040 8270 	bne.w	800667a <main+0xb02>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800619a:	a920      	add	r1, sp, #128	; 0x80
 800619c:	4832      	ldr	r0, [pc, #200]	; (8006268 <main+0x6f0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800619e:	463e      	mov	r6, r7
 80061a0:	9720      	str	r7, [sp, #128]	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80061a2:	f007 f87d 	bl	800d2a0 <HAL_TIM_ConfigClockSource>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f040 8267 	bne.w	800667a <main+0xb02>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80061ac:	482e      	ldr	r0, [pc, #184]	; (8006268 <main+0x6f0>)
 80061ae:	f006 fd9f 	bl	800ccf0 <HAL_TIM_IC_Init>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f040 8261 	bne.w	800667a <main+0xb02>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061b8:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80061ba:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061bc:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80061be:	482a      	ldr	r0, [pc, #168]	; (8006268 <main+0x6f0>)
 80061c0:	f007 f9fa 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 80061c4:	4602      	mov	r2, r0
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f040 8257 	bne.w	800667a <main+0xb02>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80061cc:	f04f 0800 	mov.w	r8, #0
 80061d0:	f04f 0901 	mov.w	r9, #1
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80061d4:	a91c      	add	r1, sp, #112	; 0x70
 80061d6:	4824      	ldr	r0, [pc, #144]	; (8006268 <main+0x6f0>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80061d8:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 80061dc:	f04f 0800 	mov.w	r8, #0
 80061e0:	f04f 0900 	mov.w	r9, #0
 80061e4:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80061e8:	f006 ff7c 	bl	800d0e4 <HAL_TIM_IC_ConfigChannel>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	f040 8244 	bne.w	800667a <main+0xb02>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80061f2:	4b1f      	ldr	r3, [pc, #124]	; (8006270 <main+0x6f8>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80061f4:	2209      	movs	r2, #9
 80061f6:	f8df e080 	ldr.w	lr, [pc, #128]	; 8006278 <main+0x700>
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80061fa:	2702      	movs	r7, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80061fc:	60d8      	str	r0, [r3, #12]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80061fe:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006200:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006202:	611f      	str	r7, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006204:	e9c3 8908 	strd	r8, r9, [r3, #32]
 8006208:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
 800620c:	f04f 0802 	mov.w	r8, #2
 8006210:	f04f 0900 	mov.w	r9, #0
 8006214:	e9c3 8906 	strd	r8, r9, [r3, #24]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006218:	e9c3 e200 	strd	lr, r2, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800621c:	f004 f9f2 	bl	800a604 <HAL_PCD_Init>
 8006220:	2800      	cmp	r0, #0
 8006222:	f040 822a 	bne.w	800667a <main+0xb02>
  htim13.Instance = TIM13;
 8006226:	4b13      	ldr	r3, [pc, #76]	; (8006274 <main+0x6fc>)
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006228:	2280      	movs	r2, #128	; 0x80
  htim13.Init.Prescaler = 250;
 800622a:	f8df c050 	ldr.w	ip, [pc, #80]	; 800627c <main+0x704>
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800622e:	619a      	str	r2, [r3, #24]
  htim13.Init.Prescaler = 250;
 8006230:	22fa      	movs	r2, #250	; 0xfa
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006232:	6098      	str	r0, [r3, #8]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006234:	6118      	str	r0, [r3, #16]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006236:	4618      	mov	r0, r3
 8006238:	e022      	b.n	8006280 <main+0x708>
 800623a:	bf00      	nop
 800623c:	2400a538 	.word	0x2400a538
 8006240:	58002400 	.word	0x58002400
 8006244:	2400abac 	.word	0x2400abac
 8006248:	40001000 	.word	0x40001000
 800624c:	2400ac44 	.word	0x2400ac44
 8006250:	40004800 	.word	0x40004800
 8006254:	2400ab60 	.word	0x2400ab60
 8006258:	40000800 	.word	0x40000800
 800625c:	2400abf8 	.word	0x2400abf8
 8006260:	40001400 	.word	0x40001400
 8006264:	2400aac8 	.word	0x2400aac8
 8006268:	2400ab14 	.word	0x2400ab14
 800626c:	40000400 	.word	0x40000400
 8006270:	2400a570 	.word	0x2400a570
 8006274:	2400aa7c 	.word	0x2400aa7c
 8006278:	40080000 	.word	0x40080000
 800627c:	40001c00 	.word	0x40001c00
  htim13.Init.Prescaler = 250;
 8006280:	e9c3 c200 	strd	ip, r2, [r3]
  htim13.Init.Period = 500;
 8006284:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006288:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800628a:	f006 fbc5 	bl	800ca18 <HAL_TIM_Base_Init>
 800628e:	2800      	cmp	r0, #0
 8006290:	f040 81f3 	bne.w	800667a <main+0xb02>
  hadc3.Instance = ADC3;
 8006294:	4ca0      	ldr	r4, [pc, #640]	; (8006518 <main+0x9a0>)
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_4;
 8006296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ADC_ChannelConfTypeDef sConfig = {0};
 800629a:	903a      	str	r0, [sp, #232]	; 0xe8
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_4;
 800629c:	6363      	str	r3, [r4, #52]	; 0x34
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 800629e:	2360      	movs	r3, #96	; 0x60
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80062a0:	7720      	strb	r0, [r4, #28]
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 80062a2:	6423      	str	r3, [r4, #64]	; 0x40
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80062a4:	2301      	movs	r3, #1
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80062a6:	6460      	str	r0, [r4, #68]	; 0x44
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80062a8:	60e3      	str	r3, [r4, #12]
  hadc3.Init.OversamplingMode = ENABLE;
 80062aa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80062ae:	64a3      	str	r3, [r4, #72]	; 0x48
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80062b0:	2308      	movs	r3, #8
  hadc3.Init.NbrOfConversion = 2;
 80062b2:	61a7      	str	r7, [r4, #24]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80062b4:	60a3      	str	r3, [r4, #8]
  hadc3.Init.Oversampling.Ratio = 8;
 80062b6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc3.Instance = ADC3;
 80062b8:	4b98      	ldr	r3, [pc, #608]	; (800651c <main+0x9a4>)
 80062ba:	6023      	str	r3, [r4, #0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80062bc:	2304      	movs	r3, #4
 80062be:	6123      	str	r3, [r4, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80062c0:	f44f 7380 	mov.w	r3, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 80062c4:	e9cd 0034 	strd	r0, r0, [sp, #208]	; 0xd0
 80062c8:	e9cd 0036 	strd	r0, r0, [sp, #216]	; 0xd8
 80062cc:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80062d0:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80062d4:	e9c4 060b 	strd	r0, r6, [r4, #44]	; 0x2c
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80062d8:	82a3      	strh	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80062da:	4620      	mov	r0, r4
 80062dc:	f001 ffee 	bl	80082bc <HAL_ADC_Init>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	f040 81ca 	bne.w	800667a <main+0xb02>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80062e6:	4a8e      	ldr	r2, [pc, #568]	; (8006520 <main+0x9a8>)
 80062e8:	2306      	movs	r3, #6
  sConfig.OffsetSignedSaturation = DISABLE;
 80062ea:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80062ee:	a934      	add	r1, sp, #208	; 0xd0
 80062f0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80062f2:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 80062f6:	2206      	movs	r2, #6
 80062f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80062fc:	ed8d 8b38 	vstr	d8, [sp, #224]	; 0xe0
 8006300:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006304:	f001 f9a6 	bl	8007654 <HAL_ADC_ConfigChannel>
 8006308:	2800      	cmp	r0, #0
 800630a:	f040 81b6 	bne.w	800667a <main+0xb02>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800630e:	4a85      	ldr	r2, [pc, #532]	; (8006524 <main+0x9ac>)
 8006310:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006312:	a934      	add	r1, sp, #208	; 0xd0
 8006314:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006316:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800631a:	f001 f99b 	bl	8007654 <HAL_ADC_ConfigChannel>
 800631e:	2800      	cmp	r0, #0
 8006320:	f040 81ab 	bne.w	800667a <main+0xb02>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8006324:	4b80      	ldr	r3, [pc, #512]	; (8006528 <main+0x9b0>)
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	03d9      	lsls	r1, r3, #15
 800632a:	d426      	bmi.n	800637a <main+0x802>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800632c:	487e      	ldr	r0, [pc, #504]	; (8006528 <main+0x9b0>)
 800632e:	2300      	movs	r3, #0
 8006330:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006334:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8006338:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800633c:	f643 77e0 	movw	r7, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006340:	f3c6 344e 	ubfx	r4, r6, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006344:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 8006348:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800634a:	ea04 0107 	and.w	r1, r4, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800634e:	4633      	mov	r3, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006350:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8006354:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006356:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	d1f8      	bne.n	8006350 <main+0x7d8>
    } while(sets-- != 0U);
 800635e:	3c20      	subs	r4, #32
 8006360:	f114 0f20 	cmn.w	r4, #32
 8006364:	d1f1      	bne.n	800634a <main+0x7d2>
 8006366:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800636a:	6943      	ldr	r3, [r0, #20]
 800636c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006370:	6143      	str	r3, [r0, #20]
 8006372:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006376:	f3bf 8f6f 	isb	sy
	TU_ASSERT(tusb_init());
 800637a:	f00b fd0d 	bl	8011d98 <tusb_init>
 800637e:	b960      	cbnz	r0, 800639a <main+0x822>
 8006380:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006384:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8006388:	07db      	lsls	r3, r3, #31
 800638a:	d500      	bpl.n	800638e <main+0x816>
 800638c:	be00      	bkpt	0x0000
}
 800638e:	2000      	movs	r0, #0
 8006390:	b061      	add	sp, #388	; 0x184
 8006392:	ecbd 8b0a 	vpop	{d8-d12}
 8006396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	MX_TIM6_Init_Custom_Rate();
 800639a:	f7ff fbc5 	bl	8005b28 <MX_TIM6_Init_Custom_Rate>
	if( HAL_OK != HAL_ADC_Start(&hadc3))
 800639e:	485e      	ldr	r0, [pc, #376]	; (8006518 <main+0x9a0>)
 80063a0:	f001 fe14 	bl	8007fcc <HAL_ADC_Start>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 8168 	bne.w	800667a <main+0xb02>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80063aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80063ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063b2:	485e      	ldr	r0, [pc, #376]	; (800652c <main+0x9b4>)
 80063b4:	f002 f890 	bl	80084d8 <HAL_ADCEx_Calibration_Start>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f040 815e 	bne.w	800667a <main+0xb02>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80063be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80063c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063c6:	485a      	ldr	r0, [pc, #360]	; (8006530 <main+0x9b8>)
 80063c8:	f002 f886 	bl	80084d8 <HAL_ADCEx_Calibration_Start>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f040 8154 	bne.w	800667a <main+0xb02>
	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80063d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80063d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063da:	484f      	ldr	r0, [pc, #316]	; (8006518 <main+0x9a0>)
 80063dc:	f002 f87c 	bl	80084d8 <HAL_ADCEx_Calibration_Start>
 80063e0:	4604      	mov	r4, r0
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f040 8149 	bne.w	800667a <main+0xb02>
	HAL_Delay(1);
 80063e8:	2001      	movs	r0, #1
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 80063ea:	4f52      	ldr	r7, [pc, #328]	; (8006534 <main+0x9bc>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 80063ec:	f44f 6800 	mov.w	r8, #2048	; 0x800
	AMindex  = LSBindex = 1;
 80063f0:	4606      	mov	r6, r0
	HAL_Delay(1);
 80063f2:	f000 fecf 	bl	8007194 <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80063f6:	4621      	mov	r1, r4
 80063f8:	484f      	ldr	r0, [pc, #316]	; (8006538 <main+0x9c0>)
 80063fa:	f006 fe13 	bl	800d024 <HAL_TIM_Encoder_Start>
	RXVolume= 0.1;
 80063fe:	4b4f      	ldr	r3, [pc, #316]	; (800653c <main+0x9c4>)
 8006400:	4a4f      	ldr	r2, [pc, #316]	; (8006540 <main+0x9c8>)
	SetFstep(2);
 8006402:	2002      	movs	r0, #2
	RXVolume= 0.1;
 8006404:	601a      	str	r2, [r3, #0]
	SetFstep(2);
 8006406:	f7fb fce3 	bl	8001dd0 <SetFstep>
	cwpitch = CWPITCH;
 800640a:	4b4e      	ldr	r3, [pc, #312]	; (8006544 <main+0x9cc>)
	meanavg = 0.f;
 800640c:	2100      	movs	r1, #0
	cwpitch = CWPITCH;
 800640e:	4a4e      	ldr	r2, [pc, #312]	; (8006548 <main+0x9d0>)
	CarrierEnable(0);
 8006410:	4620      	mov	r0, r4
	cwpitch = CWPITCH;
 8006412:	601a      	str	r2, [r3, #0]
	meanavg = 0.f;
 8006414:	4a4d      	ldr	r2, [pc, #308]	; (800654c <main+0x9d4>)
	os_time = 0;
 8006416:	4b4e      	ldr	r3, [pc, #312]	; (8006550 <main+0x9d8>)
	meanavg = 0.f;
 8006418:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 800641a:	4a4e      	ldr	r2, [pc, #312]	; (8006554 <main+0x9dc>)
 800641c:	494e      	ldr	r1, [pc, #312]	; (8006558 <main+0x9e0>)
	os_time = 0;
 800641e:	601c      	str	r4, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8006420:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8006422:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 8006426:	4a4d      	ldr	r2, [pc, #308]	; (800655c <main+0x9e4>)
	AGC_decay[Fast] = 0.9995f;
 8006428:	4b4d      	ldr	r3, [pc, #308]	; (8006560 <main+0x9e8>)
	Muted   = false;
 800642a:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 800642c:	4a4d      	ldr	r2, [pc, #308]	; (8006564 <main+0x9ec>)
 800642e:	8016      	strh	r6, [r2, #0]
 8006430:	4a4d      	ldr	r2, [pc, #308]	; (8006568 <main+0x9f0>)
 8006432:	8016      	strh	r6, [r2, #0]
	USBindex = CWindex  = 1;
 8006434:	4a4d      	ldr	r2, [pc, #308]	; (800656c <main+0x9f4>)
 8006436:	8016      	strh	r6, [r2, #0]
 8006438:	4a4d      	ldr	r2, [pc, #308]	; (8006570 <main+0x9f8>)
 800643a:	8016      	strh	r6, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 800643c:	4a4d      	ldr	r2, [pc, #308]	; (8006574 <main+0x9fc>)
 800643e:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 8006440:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 8006444:	4a4c      	ldr	r2, [pc, #304]	; (8006578 <main+0xa00>)
 8006446:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8006448:	4a4c      	ldr	r2, [pc, #304]	; (800657c <main+0xa04>)
 800644a:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 800644c:	4a4c      	ldr	r2, [pc, #304]	; (8006580 <main+0xa08>)
 800644e:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 8006450:	4b4c      	ldr	r3, [pc, #304]	; (8006584 <main+0xa0c>)
 8006452:	4a4d      	ldr	r2, [pc, #308]	; (8006588 <main+0xa10>)
 8006454:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8006456:	4b4d      	ldr	r3, [pc, #308]	; (800658c <main+0xa14>)
 8006458:	4a4d      	ldr	r2, [pc, #308]	; (8006590 <main+0xa18>)
 800645a:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 800645c:	4a4d      	ldr	r2, [pc, #308]	; (8006594 <main+0xa1c>)
 800645e:	4b4e      	ldr	r3, [pc, #312]	; (8006598 <main+0xa20>)
 8006460:	601a      	str	r2, [r3, #0]
	HAdc1 = &hadc1;
 8006462:	4b4e      	ldr	r3, [pc, #312]	; (800659c <main+0xa24>)
 8006464:	601d      	str	r5, [r3, #0]
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8006466:	4b4e      	ldr	r3, [pc, #312]	; (80065a0 <main+0xa28>)
 8006468:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 800646a:	f7fe fed5 	bl	8005218 <CarrierEnable>
	TXSwitch(0);
 800646e:	4620      	mov	r0, r4
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8006470:	4c4c      	ldr	r4, [pc, #304]	; (80065a4 <main+0xa2c>)
	TXSwitch(0);
 8006472:	f7fe fe6d 	bl	8005150 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 8006476:	494c      	ldr	r1, [pc, #304]	; (80065a8 <main+0xa30>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8006478:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800647a:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 800647e:	4a4b      	ldr	r2, [pc, #300]	; (80065ac <main+0xa34>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8006480:	9303      	str	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006482:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 8006486:	680b      	ldr	r3, [r1, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006488:	eddf 6a49 	vldr	s13, [pc, #292]	; 80065b0 <main+0xa38>
	__HAL_RCC_PLL2_DISABLE();
 800648c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.01;
 8006490:	4848      	ldr	r0, [pc, #288]	; (80065b4 <main+0xa3c>)
	__HAL_RCC_PLL2_DISABLE();
 8006492:	600b      	str	r3, [r1, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006494:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006496:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800649a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800649e:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8006510 <main+0x998>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80064a2:	628b      	str	r3, [r1, #40]	; 0x28
 80064a4:	9b03      	ldr	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 80064a6:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80064aa:	3b01      	subs	r3, #1
 80064ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b0:	431a      	orrs	r2, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 80064b2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80064b6:	638a      	str	r2, [r1, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 80064b8:	680b      	ldr	r3, [r1, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 80064ba:	ee67 7a26 	vmul.f32	s15, s14, s13
	CWThreshold = 0.01;
 80064be:	4a3e      	ldr	r2, [pc, #248]	; (80065b8 <main+0xa40>)
	__HAL_RCC_PLL2_ENABLE();
 80064c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064c4:	600b      	str	r3, [r1, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 80064c6:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <main+0xa44>)
	CWThreshold = 0.01;
 80064c8:	6002      	str	r2, [r0, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 80064ca:	edc3 7a00 	vstr	s15, [r3]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 80064ce:	ed87 7a00 	vstr	s14, [r7]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 80064d2:	f7fc fd3f 	bl	8002f54 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 80064d6:	493a      	ldr	r1, [pc, #232]	; (80065c0 <main+0xa48>)
 80064d8:	2204      	movs	r2, #4
 80064da:	4b3a      	ldr	r3, [pc, #232]	; (80065c4 <main+0xa4c>)
 80064dc:	483a      	ldr	r0, [pc, #232]	; (80065c8 <main+0xa50>)
 80064de:	e9cd 1800 	strd	r1, r8, [sp]
 80064e2:	2140      	movs	r1, #64	; 0x40
 80064e4:	f7fa ffe8 	bl	80014b8 <arm_fir_decimate_init_f32>
 80064e8:	7020      	strb	r0, [r4, #0]
	while(arc != ARM_MATH_SUCCESS)
 80064ea:	b100      	cbz	r0, 80064ee <main+0x976>
 80064ec:	e7fe      	b.n	80064ec <main+0x974>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 80064ee:	4a37      	ldr	r2, [pc, #220]	; (80065cc <main+0xa54>)
 80064f0:	2140      	movs	r1, #64	; 0x40
 80064f2:	4b34      	ldr	r3, [pc, #208]	; (80065c4 <main+0xa4c>)
 80064f4:	4836      	ldr	r0, [pc, #216]	; (80065d0 <main+0xa58>)
 80064f6:	e9cd 2800 	strd	r2, r8, [sp]
 80064fa:	2204      	movs	r2, #4
 80064fc:	f7fa ffdc 	bl	80014b8 <arm_fir_decimate_init_f32>
 8006500:	4605      	mov	r5, r0
 8006502:	7020      	strb	r0, [r4, #0]
	while(arc != ARM_MATH_SUCCESS)
 8006504:	2800      	cmp	r0, #0
 8006506:	d065      	beq.n	80065d4 <main+0xa5c>
 8006508:	e7fe      	b.n	8006508 <main+0x990>
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
 8006510:	8f04fefd 	.word	0x8f04fefd
 8006514:	3feffff9 	.word	0x3feffff9
 8006518:	2400a3c8 	.word	0x2400a3c8
 800651c:	58026000 	.word	0x58026000
 8006520:	cfb80000 	.word	0xcfb80000
 8006524:	cb840000 	.word	0xcb840000
 8006528:	e000ed00 	.word	0xe000ed00
 800652c:	2400a300 	.word	0x2400a300
 8006530:	2400a364 	.word	0x2400a364
 8006534:	24006150 	.word	0x24006150
 8006538:	2400ab60 	.word	0x2400ab60
 800653c:	24006148 	.word	0x24006148
 8006540:	3dcccccd 	.word	0x3dcccccd
 8006544:	24007af8 	.word	0x24007af8
 8006548:	44228000 	.word	0x44228000
 800654c:	2400ace8 	.word	0x2400ace8
 8006550:	2400ad10 	.word	0x2400ad10
 8006554:	24006144 	.word	0x24006144
 8006558:	3f7cac08 	.word	0x3f7cac08
 800655c:	2400613c 	.word	0x2400613c
 8006560:	240006c8 	.word	0x240006c8
 8006564:	2400612c 	.word	0x2400612c
 8006568:	240006d0 	.word	0x240006d0
 800656c:	24000ee8 	.word	0x24000ee8
 8006570:	240061bc 	.word	0x240061bc
 8006574:	24007af0 	.word	0x24007af0
 8006578:	24007ae0 	.word	0x24007ae0
 800657c:	3f7fdf3b 	.word	0x3f7fdf3b
 8006580:	3f7ffcb9 	.word	0x3f7ffcb9
 8006584:	24005118 	.word	0x24005118
 8006588:	001e0002 	.word	0x001e0002
 800658c:	240006d4 	.word	0x240006d4
 8006590:	3949539c 	.word	0x3949539c
 8006594:	3ca3d70a 	.word	0x3ca3d70a
 8006598:	2400ad14 	.word	0x2400ad14
 800659c:	24005114 	.word	0x24005114
 80065a0:	4af42400 	.word	0x4af42400
 80065a4:	24007ae4 	.word	0x24007ae4
 80065a8:	58024400 	.word	0x58024400
 80065ac:	01012e00 	.word	0x01012e00
 80065b0:	3b800000 	.word	0x3b800000
 80065b4:	24000ee4 	.word	0x24000ee4
 80065b8:	3c23d70a 	.word	0x3c23d70a
 80065bc:	24000ee0 	.word	0x24000ee0
 80065c0:	24003000 	.word	0x24003000
 80065c4:	24000210 	.word	0x24000210
 80065c8:	24006164 	.word	0x24006164
 80065cc:	24000f04 	.word	0x24000f04
 80065d0:	24006158 	.word	0x24006158
	Load_Presets();
 80065d4:	f7fb fa2a 	bl	8001a2c <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 80065d8:	4630      	mov	r0, r6
 80065da:	f7fb fb0f 	bl	8001bfc <Tune_Preset>
	keyerState = IDLE;
 80065de:	4a28      	ldr	r2, [pc, #160]	; (8006680 <main+0xb08>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 80065e0:	4b28      	ldr	r3, [pc, #160]	; (8006684 <main+0xb0c>)
	keyer_speed = 15;
 80065e2:	200f      	movs	r0, #15
	keyerState = IDLE;
 80065e4:	7015      	strb	r5, [r2, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 80065e6:	2210      	movs	r2, #16
 80065e8:	701a      	strb	r2, [r3, #0]
	keyer_speed = 15;
 80065ea:	4b27      	ldr	r3, [pc, #156]	; (8006688 <main+0xb10>)
 80065ec:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 80065ee:	f7fa ff7d 	bl	80014ec <loadWPM>
	keyer_mode = 1; //->  iambic
 80065f2:	4a26      	ldr	r2, [pc, #152]	; (800668c <main+0xb14>)
	txdelay = 10;
 80065f4:	200a      	movs	r0, #10
	if (!DisableDisplay)
 80065f6:	4b26      	ldr	r3, [pc, #152]	; (8006690 <main+0xb18>)
	keyer_mode = 1; //->  iambic
 80065f8:	7016      	strb	r6, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 80065fa:	4a26      	ldr	r2, [pc, #152]	; (8006694 <main+0xb1c>)
	txdelay = 10;
 80065fc:	4926      	ldr	r1, [pc, #152]	; (8006698 <main+0xb20>)
	keyer_swap = 0; //->  DI/DAH
 80065fe:	7015      	strb	r5, [r2, #0]
	if (!DisableDisplay)
 8006600:	781b      	ldrb	r3, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 8006602:	4a26      	ldr	r2, [pc, #152]	; (800669c <main+0xb24>)
	txdelay = 10;
 8006604:	7008      	strb	r0, [r1, #0]
	TxPowerOut = MID_POWER_OUT;
 8006606:	f8c2 8000 	str.w	r8, [r2]
	if (!DisableDisplay)
 800660a:	b90b      	cbnz	r3, 8006610 <main+0xa98>
 800660c:	f7fd fff6 	bl	80045fc <DisplayStatus.part.0>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8006610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006614:	4922      	ldr	r1, [pc, #136]	; (80066a0 <main+0xb28>)
 8006616:	4823      	ldr	r0, [pc, #140]	; (80066a4 <main+0xb2c>)
 8006618:	f001 ffb0 	bl	800857c <HAL_ADCEx_MultiModeStart_DMA>
 800661c:	bb68      	cbnz	r0, 800667a <main+0xb02>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 800661e:	4822      	ldr	r0, [pc, #136]	; (80066a8 <main+0xb30>)
 8006620:	f006 fb08 	bl	800cc34 <HAL_TIM_Base_Start_IT>
 8006624:	4604      	mov	r4, r0
 8006626:	bb40      	cbnz	r0, 800667a <main+0xb02>
	HAL_TIM_Base_Start(&htim6);
 8006628:	4820      	ldr	r0, [pc, #128]	; (80066ac <main+0xb34>)
 800662a:	f006 faab 	bl	800cb84 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 800662e:	4820      	ldr	r0, [pc, #128]	; (80066b0 <main+0xb38>)
 8006630:	f006 faa8 	bl	800cb84 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8006634:	4621      	mov	r1, r4
 8006636:	481f      	ldr	r0, [pc, #124]	; (80066b4 <main+0xb3c>)
 8006638:	f002 f9a8 	bl	800898c <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 800663c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006640:	4a1d      	ldr	r2, [pc, #116]	; (80066b8 <main+0xb40>)
 8006642:	4621      	mov	r1, r4
 8006644:	481b      	ldr	r0, [pc, #108]	; (80066b4 <main+0xb3c>)
 8006646:	9400      	str	r4, [sp, #0]
 8006648:	f002 f9d4 	bl	80089f4 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800664c:	4620      	mov	r0, r4
 800664e:	f000 fdb9 	bl	80071c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8006652:	2110      	movs	r1, #16
 8006654:	4817      	ldr	r0, [pc, #92]	; (80066b4 <main+0xb3c>)
 8006656:	f002 f999 	bl	800898c <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 800665a:	4623      	mov	r3, r4
 800665c:	4622      	mov	r2, r4
 800665e:	2110      	movs	r1, #16
 8006660:	4814      	ldr	r0, [pc, #80]	; (80066b4 <main+0xb3c>)
 8006662:	f002 fa53 	bl	8008b0c <HAL_DAC_SetValue>
	if (HAL_TIM_Base_Start_IT(&htim13) != HAL_OK)
 8006666:	4815      	ldr	r0, [pc, #84]	; (80066bc <main+0xb44>)
 8006668:	f006 fae4 	bl	800cc34 <HAL_TIM_Base_Start_IT>
 800666c:	b928      	cbnz	r0, 800667a <main+0xb02>
		UserInput();
 800666e:	f7fe feff 	bl	8005470 <UserInput>
		HAL_Delay(50);
 8006672:	2032      	movs	r0, #50	; 0x32
 8006674:	f000 fd8e 	bl	8007194 <HAL_Delay>
	while (1)
 8006678:	e7f9      	b.n	800666e <main+0xaf6>
    Error_Handler();
 800667a:	f7fe fe2b 	bl	80052d4 <Error_Handler>
 800667e:	bf00      	nop
 8006680:	2400acd9 	.word	0x2400acd9
 8006684:	2400acd8 	.word	0x2400acd8
 8006688:	2400acdc 	.word	0x2400acdc
 800668c:	2400acda 	.word	0x2400acda
 8006690:	24000f00 	.word	0x24000f00
 8006694:	2400ace0 	.word	0x2400ace0
 8006698:	2400c4b1 	.word	0x2400c4b1
 800669c:	240061b4 	.word	0x240061b4
 80066a0:	240072e0 	.word	0x240072e0
 80066a4:	2400a300 	.word	0x2400a300
 80066a8:	2400abf8 	.word	0x2400abf8
 80066ac:	2400abac 	.word	0x2400abac
 80066b0:	2400aac8 	.word	0x2400aac8
 80066b4:	2400a430 	.word	0x2400a430
 80066b8:	240006e0 	.word	0x240006e0
 80066bc:	2400aa7c 	.word	0x2400aa7c

080066c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066c2:	4c14      	ldr	r4, [pc, #80]	; (8006714 <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80066c4:	2102      	movs	r1, #2
{
 80066c6:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80066c8:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ca:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80066ce:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066d2:	430b      	orrs	r3, r1
 80066d4:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80066d8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80066dc:	400b      	ands	r3, r1
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80066e2:	f002 f8db 	bl	800889c <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80066e6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 80066ea:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 80066ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80066f4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80066f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8006700:	f000 fd60 	bl	80071c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8006704:	f000 fd72 	bl	80071ec <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8006708:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800670a:	b002      	add	sp, #8
 800670c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8006710:	f000 bd62 	b.w	80071d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8006714:	58024400 	.word	0x58024400

08006718 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8006718:	4956      	ldr	r1, [pc, #344]	; (8006874 <HAL_ADC_MspInit+0x15c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800671a:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 800671c:	6802      	ldr	r2, [r0, #0]
{
 800671e:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8006720:	428a      	cmp	r2, r1
{
 8006722:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006724:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8006728:	9308      	str	r3, [sp, #32]
 800672a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800672e:	d02d      	beq.n	800678c <HAL_ADC_MspInit+0x74>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8006730:	4b51      	ldr	r3, [pc, #324]	; (8006878 <HAL_ADC_MspInit+0x160>)
 8006732:	429a      	cmp	r2, r3
 8006734:	d005      	beq.n	8006742 <HAL_ADC_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8006736:	4b51      	ldr	r3, [pc, #324]	; (800687c <HAL_ADC_MspInit+0x164>)
 8006738:	429a      	cmp	r2, r3
 800673a:	f000 8088 	beq.w	800684e <HAL_ADC_MspInit+0x136>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800673e:	b00c      	add	sp, #48	; 0x30
 8006740:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006742:	4a4f      	ldr	r2, [pc, #316]	; (8006880 <HAL_ADC_MspInit+0x168>)
 8006744:	6813      	ldr	r3, [r2, #0]
 8006746:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006748:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800674a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800674c:	d071      	beq.n	8006832 <HAL_ADC_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800674e:	4b4d      	ldr	r3, [pc, #308]	; (8006884 <HAL_ADC_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006750:	2402      	movs	r4, #2
 8006752:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006754:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006756:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800675a:	484b      	ldr	r0, [pc, #300]	; (8006888 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800675c:	f042 0202 	orr.w	r2, r2, #2
 8006760:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006770:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006774:	f003 fd82 	bl	800a27c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006778:	2200      	movs	r2, #0
 800677a:	2012      	movs	r0, #18
 800677c:	4611      	mov	r1, r2
 800677e:	f002 f88d 	bl	800889c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006782:	2012      	movs	r0, #18
 8006784:	f002 f8c8 	bl	8008918 <HAL_NVIC_EnableIRQ>
}
 8006788:	b00c      	add	sp, #48	; 0x30
 800678a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800678c:	4a3c      	ldr	r2, [pc, #240]	; (8006880 <HAL_ADC_MspInit+0x168>)
 800678e:	4604      	mov	r4, r0
 8006790:	6813      	ldr	r3, [r2, #0]
 8006792:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006794:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006796:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006798:	d03d      	beq.n	8006816 <HAL_ADC_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800679a:	4b3a      	ldr	r3, [pc, #232]	; (8006884 <HAL_ADC_MspInit+0x16c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800679c:	a906      	add	r1, sp, #24
 800679e:	483a      	ldr	r0, [pc, #232]	; (8006888 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 80067a4:	4d39      	ldr	r5, [pc, #228]	; (800688c <HAL_ADC_MspInit+0x174>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067a6:	f042 0202 	orr.w	r2, r2, #2
 80067aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80067ae:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80067ba:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067bc:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80067be:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067c2:	f003 fd5b 	bl	800a27c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 80067c6:	4932      	ldr	r1, [pc, #200]	; (8006890 <HAL_ADC_MspInit+0x178>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80067c8:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067ca:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80067cc:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067ce:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80067d0:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80067d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80067d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80067dc:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80067e0:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80067e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067ec:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80067f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067f4:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80067f6:	f002 fba9 	bl	8008f4c <HAL_DMA_Init>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d137      	bne.n	800686e <HAL_ADC_MspInit+0x156>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80067fe:	2200      	movs	r2, #0
 8006800:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006802:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006804:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006806:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006808:	f002 f848 	bl	800889c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800680c:	2012      	movs	r0, #18
 800680e:	f002 f883 	bl	8008918 <HAL_NVIC_EnableIRQ>
}
 8006812:	b00c      	add	sp, #48	; 0x30
 8006814:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006816:	4b1b      	ldr	r3, [pc, #108]	; (8006884 <HAL_ADC_MspInit+0x16c>)
 8006818:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800681c:	f042 0220 	orr.w	r2, r2, #32
 8006820:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	9b01      	ldr	r3, [sp, #4]
 8006830:	e7b3      	b.n	800679a <HAL_ADC_MspInit+0x82>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006832:	4b14      	ldr	r3, [pc, #80]	; (8006884 <HAL_ADC_MspInit+0x16c>)
 8006834:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006838:	f042 0220 	orr.w	r2, r2, #32
 800683c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	9303      	str	r3, [sp, #12]
 800684a:	9b03      	ldr	r3, [sp, #12]
 800684c:	e77f      	b.n	800674e <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800684e:	f5a3 53e0 	sub.w	r3, r3, #7168	; 0x1c00
 8006852:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006856:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800685a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800685e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006866:	9305      	str	r3, [sp, #20]
 8006868:	9b05      	ldr	r3, [sp, #20]
}
 800686a:	b00c      	add	sp, #48	; 0x30
 800686c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800686e:	f7fe fd31 	bl	80052d4 <Error_Handler>
 8006872:	e7c4      	b.n	80067fe <HAL_ADC_MspInit+0xe6>
 8006874:	40022000 	.word	0x40022000
 8006878:	40022100 	.word	0x40022100
 800687c:	58026000 	.word	0x58026000
 8006880:	2400c4bc 	.word	0x2400c4bc
 8006884:	58024400 	.word	0x58024400
 8006888:	58020400 	.word	0x58020400
 800688c:	2400a444 	.word	0x2400a444
 8006890:	40020010 	.word	0x40020010

08006894 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8006894:	4b2c      	ldr	r3, [pc, #176]	; (8006948 <HAL_DAC_MspInit+0xb4>)
 8006896:	6802      	ldr	r2, [r0, #0]
{
 8006898:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 800689a:	429a      	cmp	r2, r3
{
 800689c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800689e:	f04f 0400 	mov.w	r4, #0
 80068a2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80068a6:	9404      	str	r4, [sp, #16]
 80068a8:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 80068ac:	d001      	beq.n	80068b2 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80068ae:	b008      	add	sp, #32
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 80068b2:	4b26      	ldr	r3, [pc, #152]	; (800694c <HAL_DAC_MspInit+0xb8>)
 80068b4:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068b6:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80068b8:	4e25      	ldr	r6, [pc, #148]	; (8006950 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 80068ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80068be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80068c2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80068c6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80068ca:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80068ce:	9200      	str	r2, [sp, #0]
 80068d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80068de:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80068ea:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ec:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ee:	4819      	ldr	r0, [pc, #100]	; (8006954 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80068f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f4:	f003 fcc2 	bl	800a27c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80068f8:	4a17      	ldr	r2, [pc, #92]	; (8006958 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80068fa:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80068fc:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80068fe:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006900:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8006902:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006904:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006908:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800690a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800690e:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006914:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006916:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006918:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800691a:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800691e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006922:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006924:	f002 fb12 	bl	8008f4c <HAL_DMA_Init>
 8006928:	b958      	cbnz	r0, 8006942 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800692a:	2200      	movs	r2, #0
 800692c:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800692e:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006930:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006932:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006934:	f001 ffb2 	bl	800889c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006938:	2036      	movs	r0, #54	; 0x36
 800693a:	f001 ffed 	bl	8008918 <HAL_NVIC_EnableIRQ>
}
 800693e:	b008      	add	sp, #32
 8006940:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8006942:	f7fe fcc7 	bl	80052d4 <Error_Handler>
 8006946:	e7f0      	b.n	800692a <HAL_DAC_MspInit+0x96>
 8006948:	40007400 	.word	0x40007400
 800694c:	58024400 	.word	0x58024400
 8006950:	2400a4bc 	.word	0x2400a4bc
 8006954:	58020000 	.word	0x58020000
 8006958:	40020028 	.word	0x40020028
 800695c:	00000000 	.word	0x00000000

08006960 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8006960:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006962:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8006964:	6801      	ldr	r1, [r0, #0]
{
 8006966:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 8006968:	4291      	cmp	r1, r2
{
 800696a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800696c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006970:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006974:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8006976:	d001      	beq.n	800697c <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8006978:	b008      	add	sp, #32
 800697a:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800697c:	4b15      	ldr	r3, [pc, #84]	; (80069d4 <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 800697e:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006980:	a902      	add	r1, sp, #8
 8006982:	4815      	ldr	r0, [pc, #84]	; (80069d8 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8006984:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800698c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006990:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006994:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006998:	9200      	str	r2, [sp, #0]
 800699a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800699c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80069a0:	f042 0202 	orr.w	r2, r2, #2
 80069a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80069a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80069ac:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ae:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80069b2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80069c8 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80069ba:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069be:	f003 fc5d 	bl	800a27c <HAL_GPIO_Init>
}
 80069c2:	b008      	add	sp, #32
 80069c4:	bd10      	pop	{r4, pc}
 80069c6:	bf00      	nop
 80069c8:	00000400 	.word	0x00000400
 80069cc:	00000002 	.word	0x00000002
 80069d0:	58002400 	.word	0x58002400
 80069d4:	58024400 	.word	0x58024400
 80069d8:	58020400 	.word	0x58020400
 80069dc:	00000000 	.word	0x00000000

080069e0 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM2)
 80069e0:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e2:	2200      	movs	r2, #0
{
 80069e4:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 80069e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80069ea:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ec:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80069f0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80069f4:	920a      	str	r2, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM2)
 80069f6:	d022      	beq.n	8006a3e <HAL_TIM_Base_MspInit+0x5e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80069f8:	4945      	ldr	r1, [pc, #276]	; (8006b10 <HAL_TIM_Base_MspInit+0x130>)
 80069fa:	428b      	cmp	r3, r1
 80069fc:	d035      	beq.n	8006a6a <HAL_TIM_Base_MspInit+0x8a>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80069fe:	4945      	ldr	r1, [pc, #276]	; (8006b14 <HAL_TIM_Base_MspInit+0x134>)
 8006a00:	428b      	cmp	r3, r1
 8006a02:	d053      	beq.n	8006aac <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8006a04:	4944      	ldr	r1, [pc, #272]	; (8006b18 <HAL_TIM_Base_MspInit+0x138>)
 8006a06:	428b      	cmp	r3, r1
 8006a08:	d004      	beq.n	8006a14 <HAL_TIM_Base_MspInit+0x34>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM13)
 8006a0a:	4944      	ldr	r1, [pc, #272]	; (8006b1c <HAL_TIM_Base_MspInit+0x13c>)
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	d063      	beq.n	8006ad8 <HAL_TIM_Base_MspInit+0xf8>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006a10:	b00c      	add	sp, #48	; 0x30
 8006a12:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006a14:	4b42      	ldr	r3, [pc, #264]	; (8006b20 <HAL_TIM_Base_MspInit+0x140>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8006a16:	2101      	movs	r1, #1
 8006a18:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006a1a:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006a1e:	f044 0420 	orr.w	r4, r4, #32
 8006a22:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8006a32:	f001 ff33 	bl	800889c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006a36:	2037      	movs	r0, #55	; 0x37
 8006a38:	f001 ff6e 	bl	8008918 <HAL_NVIC_EnableIRQ>
 8006a3c:	e7e8      	b.n	8006a10 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006a3e:	4b38      	ldr	r3, [pc, #224]	; (8006b20 <HAL_TIM_Base_MspInit+0x140>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8006a40:	2104      	movs	r1, #4
 8006a42:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006a44:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006a48:	f044 0401 	orr.w	r4, r4, #1
 8006a4c:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8006a5c:	f001 ff1e 	bl	800889c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006a60:	201c      	movs	r0, #28
 8006a62:	f001 ff59 	bl	8008918 <HAL_NVIC_EnableIRQ>
}
 8006a66:	b00c      	add	sp, #48	; 0x30
 8006a68:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a6a:	4b2d      	ldr	r3, [pc, #180]	; (8006b20 <HAL_TIM_Base_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a6c:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a6e:	a906      	add	r1, sp, #24
 8006a70:	482c      	ldr	r0, [pc, #176]	; (8006b24 <HAL_TIM_Base_MspInit+0x144>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006a76:	4322      	orrs	r2, r4
 8006a78:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006a7c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006a80:	4022      	ands	r2, r4
 8006a82:	9201      	str	r2, [sp, #4]
 8006a84:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a8a:	4322      	orrs	r2, r4
 8006a8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a94:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a96:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006a98:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8006b08 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a9c:	9302      	str	r3, [sp, #8]
 8006a9e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006aa0:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aa4:	f003 fbea 	bl	800a27c <HAL_GPIO_Init>
}
 8006aa8:	b00c      	add	sp, #48	; 0x30
 8006aaa:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006aac:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <HAL_TIM_Base_MspInit+0x140>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006aae:	2101      	movs	r1, #1
 8006ab0:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006ab2:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006ab6:	f044 0410 	orr.w	r4, r4, #16
 8006aba:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	9303      	str	r3, [sp, #12]
 8006ac8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006aca:	f001 fee7 	bl	800889c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006ace:	2036      	movs	r0, #54	; 0x36
 8006ad0:	f001 ff22 	bl	8008918 <HAL_NVIC_EnableIRQ>
}
 8006ad4:	b00c      	add	sp, #48	; 0x30
 8006ad6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006ad8:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <HAL_TIM_Base_MspInit+0x140>)
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 6, 0);
 8006ada:	202c      	movs	r0, #44	; 0x2c
 8006adc:	2106      	movs	r1, #6
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006ade:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006ae2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8006ae6:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af2:	9305      	str	r3, [sp, #20]
 8006af4:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 6, 0);
 8006af6:	f001 fed1 	bl	800889c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006afa:	202c      	movs	r0, #44	; 0x2c
 8006afc:	f001 ff0c 	bl	8008918 <HAL_NVIC_EnableIRQ>
}
 8006b00:	e786      	b.n	8006a10 <HAL_TIM_Base_MspInit+0x30>
 8006b02:	bf00      	nop
 8006b04:	f3af 8000 	nop.w
 8006b08:	00000010 	.word	0x00000010
 8006b0c:	00000002 	.word	0x00000002
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40001000 	.word	0x40001000
 8006b18:	40001400 	.word	0x40001400
 8006b1c:	40001c00 	.word	0x40001c00
 8006b20:	58024400 	.word	0x58024400
 8006b24:	58020400 	.word	0x58020400

08006b28 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8006b28:	4a1d      	ldr	r2, [pc, #116]	; (8006ba0 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b2a:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8006b2c:	6801      	ldr	r1, [r0, #0]
{
 8006b2e:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 8006b30:	4291      	cmp	r1, r2
{
 8006b32:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b34:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b38:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006b3c:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8006b3e:	d002      	beq.n	8006b46 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006b40:	b009      	add	sp, #36	; 0x24
 8006b42:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006b46:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b48:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b4a:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006b4c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006b50:	f042 0204 	orr.w	r2, r2, #4
 8006b54:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006b58:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006b5c:	f002 0204 	and.w	r2, r2, #4
 8006b60:	9200      	str	r2, [sp, #0]
 8006b62:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b68:	f042 0208 	orr.w	r2, r2, #8
 8006b6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006b70:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b76:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b78:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b7c:	480a      	ldr	r0, [pc, #40]	; (8006ba8 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006b7e:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006b84:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8006b98 <HAL_TIM_Encoder_MspInit+0x70>
 8006b88:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b8c:	f003 fb76 	bl	800a27c <HAL_GPIO_Init>
}
 8006b90:	b009      	add	sp, #36	; 0x24
 8006b92:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b96:	bf00      	nop
 8006b98:	00003000 	.word	0x00003000
 8006b9c:	00000002 	.word	0x00000002
 8006ba0:	40000800 	.word	0x40000800
 8006ba4:	58024400 	.word	0x58024400
 8006ba8:	58020c00 	.word	0x58020c00

08006bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006bac:	b5d0      	push	{r4, r6, r7, lr}
 8006bae:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bb0:	2100      	movs	r1, #0
{
 8006bb2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006bb4:	22c0      	movs	r2, #192	; 0xc0
 8006bb6:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bb8:	9108      	str	r1, [sp, #32]
 8006bba:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8006bbe:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006bc2:	f00b f9f3 	bl	8011fac <memset>
  if(huart->Instance==USART3)
 8006bc6:	4b2e      	ldr	r3, [pc, #184]	; (8006c80 <HAL_UART_MspInit+0xd4>)
 8006bc8:	6822      	ldr	r2, [r4, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d001      	beq.n	8006bd2 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006bce:	b03a      	add	sp, #232	; 0xe8
 8006bd0:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bd6:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006bd8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bdc:	f004 fd42 	bl	800b664 <HAL_RCCEx_PeriphCLKConfig>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d149      	bne.n	8006c78 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006be4:	4b27      	ldr	r3, [pc, #156]	; (8006c84 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006be6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006bea:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006bec:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8006bee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8006bf6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006bfa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006bfe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006c02:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006c06:	9201      	str	r2, [sp, #4]
 8006c08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006c0e:	f042 0202 	orr.w	r2, r2, #2
 8006c12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006c16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006c1a:	f002 0202 	and.w	r2, r2, #2
 8006c1e:	9202      	str	r2, [sp, #8]
 8006c20:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006c26:	f042 0208 	orr.w	r2, r2, #8
 8006c2a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006c32:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c34:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006c38:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c3c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c3e:	a904      	add	r1, sp, #16
 8006c40:	4811      	ldr	r0, [pc, #68]	; (8006c88 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c42:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006c44:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c48:	f003 fb18 	bl	800a27c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c52:	a904      	add	r1, sp, #16
 8006c54:	480d      	ldr	r0, [pc, #52]	; (8006c8c <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006c56:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c5c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c60:	f003 fb0c 	bl	800a27c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8006c64:	2200      	movs	r2, #0
 8006c66:	2101      	movs	r1, #1
 8006c68:	2027      	movs	r0, #39	; 0x27
 8006c6a:	f001 fe17 	bl	800889c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006c6e:	2027      	movs	r0, #39	; 0x27
 8006c70:	f001 fe52 	bl	8008918 <HAL_NVIC_EnableIRQ>
}
 8006c74:	b03a      	add	sp, #232	; 0xe8
 8006c76:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8006c78:	f7fe fb2c 	bl	80052d4 <Error_Handler>
 8006c7c:	e7b2      	b.n	8006be4 <HAL_UART_MspInit+0x38>
 8006c7e:	bf00      	nop
 8006c80:	40004800 	.word	0x40004800
 8006c84:	58024400 	.word	0x58024400
 8006c88:	58020400 	.word	0x58020400
 8006c8c:	58020c00 	.word	0x58020c00

08006c90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006c90:	b510      	push	{r4, lr}
 8006c92:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c94:	2100      	movs	r1, #0
{
 8006c96:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c98:	22c0      	movs	r2, #192	; 0xc0
 8006c9a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c9c:	9106      	str	r1, [sp, #24]
 8006c9e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8006ca2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ca6:	f00b f981 	bl	8011fac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8006caa:	4b27      	ldr	r3, [pc, #156]	; (8006d48 <HAL_PCD_MspInit+0xb8>)
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d001      	beq.n	8006cb6 <HAL_PCD_MspInit+0x26>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006cb2:	b038      	add	sp, #224	; 0xe0
 8006cb4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006cb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006d38 <HAL_PCD_MspInit+0xa8>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006cba:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cbe:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006cc0:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006cc4:	932a      	str	r3, [sp, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cc6:	f004 fccd 	bl	800b664 <HAL_RCCEx_PeriphCLKConfig>
 8006cca:	bb90      	cbnz	r0, 8006d32 <HAL_PCD_MspInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ccc:	4c1f      	ldr	r4, [pc, #124]	; (8006d4c <HAL_PCD_MspInit+0xbc>)
    HAL_PWREx_EnableUSBVoltageDetector();
 8006cce:	f003 fd6b 	bl	800a7a8 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8006cd2:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cd4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cda:	481d      	ldr	r0, [pc, #116]	; (8006d50 <HAL_PCD_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006ce4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8006ce8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006cea:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cec:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006cf0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006d40 <HAL_PCD_MspInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006cfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d02:	f003 fabb 	bl	800a27c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d06:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2104      	movs	r1, #4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);
 8006d12:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d14:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8006d18:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8006d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d20:	9301      	str	r3, [sp, #4]
 8006d22:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 4, 0);
 8006d24:	f001 fdba 	bl	800889c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d28:	2065      	movs	r0, #101	; 0x65
 8006d2a:	f001 fdf5 	bl	8008918 <HAL_NVIC_EnableIRQ>
}
 8006d2e:	b038      	add	sp, #224	; 0xe0
 8006d30:	bd10      	pop	{r4, pc}
      Error_Handler();
 8006d32:	f7fe facf 	bl	80052d4 <Error_Handler>
 8006d36:	e7c9      	b.n	8006ccc <HAL_PCD_MspInit+0x3c>
 8006d38:	00040000 	.word	0x00040000
 8006d3c:	00000000 	.word	0x00000000
 8006d40:	00001800 	.word	0x00001800
 8006d44:	00000002 	.word	0x00000002
 8006d48:	40080000 	.word	0x40080000
 8006d4c:	58024400 	.word	0x58024400
 8006d50:	58020000 	.word	0x58020000

08006d54 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop

08006d58 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d58:	e7fe      	b.n	8006d58 <HardFault_Handler>
 8006d5a:	bf00      	nop

08006d5c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d5c:	e7fe      	b.n	8006d5c <MemManage_Handler>
 8006d5e:	bf00      	nop

08006d60 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d60:	e7fe      	b.n	8006d60 <BusFault_Handler>
 8006d62:	bf00      	nop

08006d64 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d64:	e7fe      	b.n	8006d64 <UsageFault_Handler>
 8006d66:	bf00      	nop

08006d68 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8006d68:	f000 b9aa 	b.w	80070c0 <ADC3_IRQHandler>

08006d6c <DebugMon_Handler>:
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop

08006d70 <PendSV_Handler>:
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop

08006d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint32_t SystemSeconds, SystemMinutes;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d76:	f000 f9fb 	bl	8007170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if ((uwTick % 1000) == 0)
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <SysTick_Handler+0x3c>)
 8006d7c:	490d      	ldr	r1, [pc, #52]	; (8006db4 <SysTick_Handler+0x40>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a0d      	ldr	r2, [pc, #52]	; (8006db8 <SysTick_Handler+0x44>)
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 8006d8a:	d310      	bcc.n	8006dae <SysTick_Handler+0x3a>
	{
		SystemSeconds++;
 8006d8c:	490b      	ldr	r1, [pc, #44]	; (8006dbc <SysTick_Handler+0x48>)
 8006d8e:	4a0c      	ldr	r2, [pc, #48]	; (8006dc0 <SysTick_Handler+0x4c>)
 8006d90:	680b      	ldr	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 8006d92:	480c      	ldr	r0, [pc, #48]	; (8006dc4 <SysTick_Handler+0x50>)
		SystemSeconds++;
 8006d94:	3301      	adds	r3, #1
 8006d96:	fb03 f202 	mul.w	r2, r3, r2
 8006d9a:	600b      	str	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 8006d9c:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
 8006da0:	d305      	bcc.n	8006dae <SysTick_Handler+0x3a>
		{
			SystemMinutes++;
 8006da2:	4a09      	ldr	r2, [pc, #36]	; (8006dc8 <SysTick_Handler+0x54>)
			SystemSeconds = 0;
 8006da4:	2000      	movs	r0, #0
			SystemMinutes++;
 8006da6:	6813      	ldr	r3, [r2, #0]
			SystemSeconds = 0;
 8006da8:	6008      	str	r0, [r1, #0]
			SystemMinutes++;
 8006daa:	3301      	adds	r3, #1
 8006dac:	6013      	str	r3, [r2, #0]
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8006dae:	bd08      	pop	{r3, pc}
 8006db0:	2400c504 	.word	0x2400c504
 8006db4:	26e978d5 	.word	0x26e978d5
 8006db8:	00418937 	.word	0x00418937
 8006dbc:	240061a0 	.word	0x240061a0
 8006dc0:	eeeeeeef 	.word	0xeeeeeeef
 8006dc4:	04444444 	.word	0x04444444
 8006dc8:	2400619c 	.word	0x2400619c

08006dcc <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <DMA1_Stream0_IRQHandler+0x8>)
 8006dce:	f002 bf05 	b.w	8009bdc <HAL_DMA_IRQHandler>
 8006dd2:	bf00      	nop
 8006dd4:	2400a444 	.word	0x2400a444

08006dd8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <DMA1_Stream1_IRQHandler+0x8>)
 8006dda:	f002 beff 	b.w	8009bdc <HAL_DMA_IRQHandler>
 8006dde:	bf00      	nop
 8006de0:	2400a4bc 	.word	0x2400a4bc

08006de4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006de4:	4804      	ldr	r0, [pc, #16]	; (8006df8 <ADC_IRQHandler+0x14>)
{
 8006de6:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 8006de8:	f000 fab0 	bl	800734c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8006dec:	4803      	ldr	r0, [pc, #12]	; (8006dfc <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8006df2:	f000 baab 	b.w	800734c <HAL_ADC_IRQHandler>
 8006df6:	bf00      	nop
 8006df8:	2400a300 	.word	0x2400a300
 8006dfc:	2400a364 	.word	0x2400a364

08006e00 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006e00:	4801      	ldr	r0, [pc, #4]	; (8006e08 <TIM2_IRQHandler+0x8>)
 8006e02:	f006 bb21 	b.w	800d448 <HAL_TIM_IRQHandler>
 8006e06:	bf00      	nop
 8006e08:	2400aac8 	.word	0x2400aac8

08006e0c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006e0c:	4801      	ldr	r0, [pc, #4]	; (8006e14 <USART3_IRQHandler+0x8>)
 8006e0e:	f006 bc43 	b.w	800d698 <HAL_UART_IRQHandler>
 8006e12:	bf00      	nop
 8006e14:	2400ac44 	.word	0x2400ac44

08006e18 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 8006e18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006e1c:	f003 bb72 	b.w	800a504 <HAL_GPIO_EXTI_IRQHandler>

08006e20 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8006e20:	4801      	ldr	r0, [pc, #4]	; (8006e28 <TIM8_UP_TIM13_IRQHandler+0x8>)
 8006e22:	f006 bb11 	b.w	800d448 <HAL_TIM_IRQHandler>
 8006e26:	bf00      	nop
 8006e28:	2400aa7c 	.word	0x2400aa7c

08006e2c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8006e2c:	4804      	ldr	r0, [pc, #16]	; (8006e40 <TIM6_DAC_IRQHandler+0x14>)
{
 8006e2e:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8006e30:	f001 fea2 	bl	8008b78 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8006e34:	4803      	ldr	r0, [pc, #12]	; (8006e44 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8006e3a:	f006 bb05 	b.w	800d448 <HAL_TIM_IRQHandler>
 8006e3e:	bf00      	nop
 8006e40:	2400a430 	.word	0x2400a430
 8006e44:	2400abac 	.word	0x2400abac

08006e48 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006e48:	4801      	ldr	r0, [pc, #4]	; (8006e50 <TIM7_IRQHandler+0x8>)
 8006e4a:	f006 bafd 	b.w	800d448 <HAL_TIM_IRQHandler>
 8006e4e:	bf00      	nop
 8006e50:	2400abf8 	.word	0x2400abf8

08006e54 <OTG_FS_IRQHandler>:
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8006e54:	2000      	movs	r0, #0
 8006e56:	f00a bbeb 	b.w	8011630 <dcd_int_handler>
 8006e5a:	bf00      	nop

08006e5c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	4770      	bx	lr

08006e60 <_kill>:

int _kill(int pid, int sig)
{
 8006e60:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006e62:	f00b f859 	bl	8011f18 <__errno>
 8006e66:	2216      	movs	r2, #22
 8006e68:	4603      	mov	r3, r0
	return -1;
}
 8006e6a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8006e6e:	601a      	str	r2, [r3, #0]
}
 8006e70:	bd08      	pop	{r3, pc}
 8006e72:	bf00      	nop

08006e74 <_exit>:

void _exit (int status)
{
 8006e74:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006e76:	f00b f84f 	bl	8011f18 <__errno>
 8006e7a:	2316      	movs	r3, #22
 8006e7c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8006e7e:	e7fe      	b.n	8006e7e <_exit+0xa>

08006e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e80:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e82:	1e16      	subs	r6, r2, #0
 8006e84:	dd07      	ble.n	8006e96 <_read+0x16>
 8006e86:	460c      	mov	r4, r1
 8006e88:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8006e8a:	f3af 8000 	nop.w
 8006e8e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e92:	42a5      	cmp	r5, r4
 8006e94:	d1f9      	bne.n	8006e8a <_read+0xa>
	}

return len;
}
 8006e96:	4630      	mov	r0, r6
 8006e98:	bd70      	pop	{r4, r5, r6, pc}
 8006e9a:	bf00      	nop

08006e9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e9c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e9e:	1e16      	subs	r6, r2, #0
 8006ea0:	dd07      	ble.n	8006eb2 <_write+0x16>
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8006ea6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006eaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006eae:	42ac      	cmp	r4, r5
 8006eb0:	d1f9      	bne.n	8006ea6 <_write+0xa>
	}
	return len;
}
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	bf00      	nop

08006eb8 <_close>:

int _close(int file)
{
	return -1;
}
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop

08006ec0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006ec4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006ec6:	604b      	str	r3, [r1, #4]
}
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop

08006ecc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006ecc:	2001      	movs	r0, #1
 8006ece:	4770      	bx	lr

08006ed0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	4770      	bx	lr

08006ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ed4:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ed6:	4c0d      	ldr	r4, [pc, #52]	; (8006f0c <_sbrk+0x38>)
{
 8006ed8:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006eda:	490d      	ldr	r1, [pc, #52]	; (8006f10 <_sbrk+0x3c>)
 8006edc:	4d0d      	ldr	r5, [pc, #52]	; (8006f14 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8006ede:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ee0:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8006ee2:	b12a      	cbz	r2, 8006ef0 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006ee4:	4413      	add	r3, r2
 8006ee6:	428b      	cmp	r3, r1
 8006ee8:	d808      	bhi.n	8006efc <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8006eea:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8006eec:	6023      	str	r3, [r4, #0]
}
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8006ef0:	4809      	ldr	r0, [pc, #36]	; (8006f18 <_sbrk+0x44>)
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8006ef6:	4413      	add	r3, r2
 8006ef8:	428b      	cmp	r3, r1
 8006efa:	d9f6      	bls.n	8006eea <_sbrk+0x16>
    errno = ENOMEM;
 8006efc:	f00b f80c 	bl	8011f18 <__errno>
 8006f00:	230c      	movs	r3, #12
    return (void *)-1;
 8006f02:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8006f06:	6003      	str	r3, [r0, #0]
}
 8006f08:	4610      	mov	r0, r2
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	2400c4c0 	.word	0x2400c4c0
 8006f10:	24080000 	.word	0x24080000
 8006f14:	00000620 	.word	0x00000620
 8006f18:	2400d260 	.word	0x2400d260

08006f1c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006f1c:	4929      	ldr	r1, [pc, #164]	; (8006fc4 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006f1e:	4a2a      	ldr	r2, [pc, #168]	; (8006fc8 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006f20:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8006f28:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006f2e:	6813      	ldr	r3, [r2, #0]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	2b06      	cmp	r3, #6
 8006f36:	d805      	bhi.n	8006f44 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006f38:	6813      	ldr	r3, [r2, #0]
 8006f3a:	f023 030f 	bic.w	r3, r3, #15
 8006f3e:	f043 0307 	orr.w	r3, r3, #7
 8006f42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006f44:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006f46:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006f48:	4a21      	ldr	r2, [pc, #132]	; (8006fd0 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8006f4a:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006f4c:	481e      	ldr	r0, [pc, #120]	; (8006fc8 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8006f4e:	f041 0101 	orr.w	r1, r1, #1
 8006f52:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006f54:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006f56:	6819      	ldr	r1, [r3, #0]
 8006f58:	400a      	ands	r2, r1
 8006f5a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006f5c:	6803      	ldr	r3, [r0, #0]
 8006f5e:	071b      	lsls	r3, r3, #28
 8006f60:	d505      	bpl.n	8006f6e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006f62:	6803      	ldr	r3, [r0, #0]
 8006f64:	f023 030f 	bic.w	r3, r3, #15
 8006f68:	f043 0307 	orr.w	r3, r3, #7
 8006f6c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006f6e:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <SystemInit+0xb0>)
 8006f70:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006f72:	4918      	ldr	r1, [pc, #96]	; (8006fd4 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8006f74:	4c18      	ldr	r4, [pc, #96]	; (8006fd8 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8006f76:	4819      	ldr	r0, [pc, #100]	; (8006fdc <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8006f78:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006f7a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006f7c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006f7e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8006f80:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8006f82:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006f86:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006f88:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006f8a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006f8e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006f90:	4c13      	ldr	r4, [pc, #76]	; (8006fe0 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 8006f92:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006f96:	4913      	ldr	r1, [pc, #76]	; (8006fe4 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8006f98:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8006f9a:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	4019      	ands	r1, r3
 8006fa0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006fa4:	d203      	bcs.n	8006fae <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006fa6:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <SystemInit+0xcc>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006fae:	490f      	ldr	r1, [pc, #60]	; (8006fec <SystemInit+0xd0>)
 8006fb0:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006fb4:	4b03      	ldr	r3, [pc, #12]	; (8006fc4 <SystemInit+0xa8>)
 8006fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006fba:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006fc0:	609a      	str	r2, [r3, #8]
}
 8006fc2:	4770      	bx	lr
 8006fc4:	e000ed00 	.word	0xe000ed00
 8006fc8:	52002000 	.word	0x52002000
 8006fcc:	58024400 	.word	0x58024400
 8006fd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8006fd4:	01010280 	.word	0x01010280
 8006fd8:	02020200 	.word	0x02020200
 8006fdc:	01ff0000 	.word	0x01ff0000
 8006fe0:	5c001000 	.word	0x5c001000
 8006fe4:	ffff0000 	.word	0xffff0000
 8006fe8:	51008000 	.word	0x51008000
 8006fec:	52004000 	.word	0x52004000

08006ff0 <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
	return (uint8_t const *)&desc_device;
}
 8006ff0:	4800      	ldr	r0, [pc, #0]	; (8006ff4 <tud_descriptor_device_cb+0x4>)
 8006ff2:	4770      	bx	lr
 8006ff4:	080194b0 	.word	0x080194b0

08006ff8 <tud_descriptor_configuration_cb>:
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
	(void)index; // for multiple configurations
	return desc_configuration;
}
 8006ff8:	4800      	ldr	r0, [pc, #0]	; (8006ffc <tud_descriptor_configuration_cb+0x4>)
 8006ffa:	4770      	bx	lr
 8006ffc:	0801932c 	.word	0x0801932c

08007000 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8007000:	b538      	push	{r3, r4, r5, lr}
	(void)langid;

	uint8_t chr_count;

	if (index == 0)
 8007002:	b948      	cbnz	r0, 8007018 <tud_descriptor_string_cb+0x18>
	{
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8007004:	4a18      	ldr	r2, [pc, #96]	; (8007068 <tud_descriptor_string_cb+0x68>)
 8007006:	f44f 7341 	mov.w	r3, #772	; 0x304
 800700a:	4d18      	ldr	r5, [pc, #96]	; (800706c <tud_descriptor_string_cb+0x6c>)
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	8812      	ldrh	r2, [r2, #0]
 8007010:	806a      	strh	r2, [r5, #2]
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));

	return _desc_str;
 8007012:	4816      	ldr	r0, [pc, #88]	; (800706c <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8007014:	802b      	strh	r3, [r5, #0]
}
 8007016:	bd38      	pop	{r3, r4, r5, pc}
		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 8007018:	2806      	cmp	r0, #6
 800701a:	d81f      	bhi.n	800705c <tud_descriptor_string_cb+0x5c>
		const char* str = string_desc_arr[index];
 800701c:	4b12      	ldr	r3, [pc, #72]	; (8007068 <tud_descriptor_string_cb+0x68>)
 800701e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
		chr_count = (uint8_t) strlen(str);
 8007022:	4620      	mov	r0, r4
 8007024:	f7f9 f9bc 	bl	80003a0 <strlen>
 8007028:	b2c0      	uxtb	r0, r0
		if (chr_count > 31) chr_count = 31;
 800702a:	281f      	cmp	r0, #31
 800702c:	4602      	mov	r2, r0
 800702e:	bf28      	it	cs
 8007030:	221f      	movcs	r2, #31
		for (uint8_t i = 0; i < chr_count; i++)
 8007032:	b1a8      	cbz	r0, 8007060 <tud_descriptor_string_cb+0x60>
 8007034:	4d0d      	ldr	r5, [pc, #52]	; (800706c <tud_descriptor_string_cb+0x6c>)
 8007036:	1e60      	subs	r0, r4, #1
 8007038:	2300      	movs	r3, #0
 800703a:	4629      	mov	r1, r5
			_desc_str[1 + i] = str[i];
 800703c:	3301      	adds	r3, #1
 800703e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f821 4f02 	strh.w	r4, [r1, #2]!
		for (uint8_t i = 0; i < chr_count; i++)
 8007048:	429a      	cmp	r2, r3
 800704a:	d8f7      	bhi.n	800703c <tud_descriptor_string_cb+0x3c>
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 800704c:	1c53      	adds	r3, r2, #1
	return _desc_str;
 800704e:	4807      	ldr	r0, [pc, #28]	; (800706c <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8007050:	b2db      	uxtb	r3, r3
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007058:	802b      	strh	r3, [r5, #0]
	return _desc_str;
 800705a:	e7dc      	b.n	8007016 <tud_descriptor_string_cb+0x16>
		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 800705c:	2000      	movs	r0, #0
}
 800705e:	bd38      	pop	{r3, r4, r5, pc}
		for (uint8_t i = 0; i < chr_count; i++)
 8007060:	f240 3302 	movw	r3, #770	; 0x302
 8007064:	4d01      	ldr	r5, [pc, #4]	; (800706c <tud_descriptor_string_cb+0x6c>)
 8007066:	e7d4      	b.n	8007012 <tud_descriptor_string_cb+0x12>
 8007068:	2400031c 	.word	0x2400031c
 800706c:	2400c4c4 	.word	0x2400c4c4

08007070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070a8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007074:	f7ff ff52 	bl	8006f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800707a:	e003      	b.n	8007084 <LoopCopyDataInit>

0800707c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800707e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007082:	3104      	adds	r1, #4

08007084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007084:	480a      	ldr	r0, [pc, #40]	; (80070b0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8007088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800708a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800708c:	d3f6      	bcc.n	800707c <CopyDataInit>
  ldr  r2, =_sbss
 800708e:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8007090:	e002      	b.n	8007098 <LoopFillZerobss>

08007092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007094:	f842 3b04 	str.w	r3, [r2], #4

08007098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007098:	4b08      	ldr	r3, [pc, #32]	; (80070bc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800709a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800709c:	d3f9      	bcc.n	8007092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800709e:	f00a ff53 	bl	8011f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070a2:	f7fe fd69 	bl	8005b78 <main>
  bx  lr    
 80070a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80070a8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80070ac:	0801ace0 	.word	0x0801ace0
  ldr  r0, =_sdata
 80070b0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80070b4:	24000524 	.word	0x24000524
  ldr  r2, =_sbss
 80070b8:	24000540 	.word	0x24000540
  ldr  r3, = _ebss
 80070bc:	2400d260 	.word	0x2400d260

080070c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070c0:	e7fe      	b.n	80070c0 <ADC3_IRQHandler>
	...

080070c4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80070c4:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <HAL_InitTick+0x40>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	b90b      	cbnz	r3, 80070ce <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80070ca:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80070cc:	4770      	bx	lr
{
 80070ce:	b510      	push	{r4, lr}
 80070d0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80070d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070d6:	4a0c      	ldr	r2, [pc, #48]	; (8007108 <HAL_InitTick+0x44>)
 80070d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80070dc:	6810      	ldr	r0, [r2, #0]
 80070de:	fbb0 f0f3 	udiv	r0, r0, r3
 80070e2:	f001 fc27 	bl	8008934 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070e6:	2c0f      	cmp	r4, #15
 80070e8:	d800      	bhi.n	80070ec <HAL_InitTick+0x28>
 80070ea:	b108      	cbz	r0, 80070f0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80070ec:	2001      	movs	r0, #1
}
 80070ee:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070f0:	2200      	movs	r2, #0
 80070f2:	4621      	mov	r1, r4
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	f001 fbd0 	bl	800889c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <HAL_InitTick+0x48>)
 80070fe:	2000      	movs	r0, #0
 8007100:	601c      	str	r4, [r3, #0]
}
 8007102:	bd10      	pop	{r4, pc}
 8007104:	24000338 	.word	0x24000338
 8007108:	24000314 	.word	0x24000314
 800710c:	2400033c 	.word	0x2400033c

08007110 <HAL_Init>:
{
 8007110:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007112:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007114:	4c12      	ldr	r4, [pc, #72]	; (8007160 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007116:	f001 fbaf 	bl	8008878 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800711a:	f003 ff17 	bl	800af4c <HAL_RCC_GetSysClockFreq>
 800711e:	4b11      	ldr	r3, [pc, #68]	; (8007164 <HAL_Init+0x54>)
 8007120:	4911      	ldr	r1, [pc, #68]	; (8007168 <HAL_Init+0x58>)
 8007122:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007124:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007126:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800712a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800712e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007130:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007132:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8007136:	490d      	ldr	r1, [pc, #52]	; (800716c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007138:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800713c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800713e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8007142:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007144:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007146:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007148:	f7ff ffbc 	bl	80070c4 <HAL_InitTick>
 800714c:	b110      	cbz	r0, 8007154 <HAL_Init+0x44>
    return HAL_ERROR;
 800714e:	2401      	movs	r4, #1
}
 8007150:	4620      	mov	r0, r4
 8007152:	bd10      	pop	{r4, pc}
 8007154:	4604      	mov	r4, r0
  HAL_MspInit();
 8007156:	f7ff fab3 	bl	80066c0 <HAL_MspInit>
}
 800715a:	4620      	mov	r0, r4
 800715c:	bd10      	pop	{r4, pc}
 800715e:	bf00      	nop
 8007160:	24000318 	.word	0x24000318
 8007164:	58024400 	.word	0x58024400
 8007168:	080192c4 	.word	0x080192c4
 800716c:	24000314 	.word	0x24000314

08007170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8007170:	4a03      	ldr	r2, [pc, #12]	; (8007180 <HAL_IncTick+0x10>)
 8007172:	4b04      	ldr	r3, [pc, #16]	; (8007184 <HAL_IncTick+0x14>)
 8007174:	6811      	ldr	r1, [r2, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	440b      	add	r3, r1
 800717a:	6013      	str	r3, [r2, #0]
}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	2400c504 	.word	0x2400c504
 8007184:	24000338 	.word	0x24000338

08007188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007188:	4b01      	ldr	r3, [pc, #4]	; (8007190 <HAL_GetTick+0x8>)
 800718a:	6818      	ldr	r0, [r3, #0]
}
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	2400c504 	.word	0x2400c504

08007194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007198:	f7ff fff6 	bl	8007188 <HAL_GetTick>
 800719c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800719e:	1c63      	adds	r3, r4, #1
 80071a0:	d002      	beq.n	80071a8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80071a2:	4b04      	ldr	r3, [pc, #16]	; (80071b4 <HAL_Delay+0x20>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80071a8:	f7ff ffee 	bl	8007188 <HAL_GetTick>
 80071ac:	1b43      	subs	r3, r0, r5
 80071ae:	42a3      	cmp	r3, r4
 80071b0:	d3fa      	bcc.n	80071a8 <HAL_Delay+0x14>
  {
  }
}
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	24000338 	.word	0x24000338

080071b8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80071b8:	4b01      	ldr	r3, [pc, #4]	; (80071c0 <HAL_GetREVID+0x8>)
 80071ba:	6818      	ldr	r0, [r3, #0]
}
 80071bc:	0c00      	lsrs	r0, r0, #16
 80071be:	4770      	bx	lr
 80071c0:	5c001000 	.word	0x5c001000

080071c4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80071c4:	4a03      	ldr	r2, [pc, #12]	; (80071d4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 80071c6:	6813      	ldr	r3, [r2, #0]
 80071c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071cc:	4318      	orrs	r0, r3
 80071ce:	6010      	str	r0, [r2, #0]
}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	58003c00 	.word	0x58003c00

080071d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80071d8:	4a03      	ldr	r2, [pc, #12]	; (80071e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	f023 0302 	bic.w	r3, r3, #2
 80071e0:	4318      	orrs	r0, r3
 80071e2:	6010      	str	r0, [r2, #0]
}
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	58003c00 	.word	0x58003c00

080071ec <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80071ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80071ee:	4c0a      	ldr	r4, [pc, #40]	; (8007218 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071f8:	f7ff ffc6 	bl	8007188 <HAL_GetTick>
 80071fc:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80071fe:	e004      	b.n	800720a <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8007200:	f7ff ffc2 	bl	8007188 <HAL_GetTick>
 8007204:	1b40      	subs	r0, r0, r5
 8007206:	280a      	cmp	r0, #10
 8007208:	d804      	bhi.n	8007214 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	071b      	lsls	r3, r3, #28
 800720e:	d5f7      	bpl.n	8007200 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8007210:	2000      	movs	r0, #0
}
 8007212:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8007214:	2003      	movs	r0, #3
}
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	58003c00 	.word	0x58003c00

0800721c <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800721c:	4a41      	ldr	r2, [pc, #260]	; (8007324 <HAL_ADC_PollForConversion+0x108>)
 800721e:	6803      	ldr	r3, [r0, #0]
 8007220:	4293      	cmp	r3, r2
{
 8007222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007226:	4605      	mov	r5, r0
 8007228:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800722a:	d05a      	beq.n	80072e2 <HAL_ADC_PollForConversion+0xc6>
 800722c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007230:	4293      	cmp	r3, r2
 8007232:	d056      	beq.n	80072e2 <HAL_ADC_PollForConversion+0xc6>
 8007234:	4a3c      	ldr	r2, [pc, #240]	; (8007328 <HAL_ADC_PollForConversion+0x10c>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8007236:	692c      	ldr	r4, [r5, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007238:	6897      	ldr	r7, [r2, #8]
 800723a:	2c08      	cmp	r4, #8
 800723c:	f007 071f 	and.w	r7, r7, #31
 8007240:	d00a      	beq.n	8007258 <HAL_ADC_PollForConversion+0x3c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007242:	2f09      	cmp	r7, #9
 8007244:	d84f      	bhi.n	80072e6 <HAL_ADC_PollForConversion+0xca>
 8007246:	f240 2121 	movw	r1, #545	; 0x221
 800724a:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800724c:	07c9      	lsls	r1, r1, #31
 800724e:	d54a      	bpl.n	80072e6 <HAL_ADC_PollForConversion+0xca>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	07da      	lsls	r2, r3, #31
 8007254:	d44b      	bmi.n	80072ee <HAL_ADC_PollForConversion+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8007256:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8007258:	f7ff ff96 	bl	8007188 <HAL_GetTick>

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800725c:	682a      	ldr	r2, [r5, #0]
  tickstart = HAL_GetTick();
 800725e:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8007260:	1c73      	adds	r3, r6, #1
 8007262:	d127      	bne.n	80072b4 <HAL_ADC_PollForConversion+0x98>
 8007264:	6813      	ldr	r3, [r2, #0]
 8007266:	421c      	tst	r4, r3
 8007268:	d0fc      	beq.n	8007264 <HAL_ADC_PollForConversion+0x48>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800726a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800726c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007270:	656b      	str	r3, [r5, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007272:	68d3      	ldr	r3, [r2, #12]
 8007274:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8007278:	d10f      	bne.n	800729a <HAL_ADC_PollForConversion+0x7e>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800727a:	7d6b      	ldrb	r3, [r5, #21]
 800727c:	b96b      	cbnz	r3, 800729a <HAL_ADC_PollForConversion+0x7e>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800727e:	6813      	ldr	r3, [r2, #0]
 8007280:	0718      	lsls	r0, r3, #28
 8007282:	d50a      	bpl.n	800729a <HAL_ADC_PollForConversion+0x7e>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007284:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728a:	656b      	str	r3, [r5, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800728c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800728e:	04d9      	lsls	r1, r3, #19
 8007290:	d403      	bmi.n	800729a <HAL_ADC_PollForConversion+0x7e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007292:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007294:	f043 0301 	orr.w	r3, r3, #1
 8007298:	656b      	str	r3, [r5, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800729a:	4b24      	ldr	r3, [pc, #144]	; (800732c <HAL_ADC_PollForConversion+0x110>)
 800729c:	429a      	cmp	r2, r3
 800729e:	d031      	beq.n	8007304 <HAL_ADC_PollForConversion+0xe8>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80072a0:	68d0      	ldr	r0, [r2, #12]
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80072a2:	2c08      	cmp	r4, #8
 80072a4:	d02a      	beq.n	80072fc <HAL_ADC_PollForConversion+0xe0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80072a6:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80072aa:	d137      	bne.n	800731c <HAL_ADC_PollForConversion+0x100>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80072ac:	230c      	movs	r3, #12
 80072ae:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80072b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80072b4:	6813      	ldr	r3, [r2, #0]
 80072b6:	4223      	tst	r3, r4
 80072b8:	d1d7      	bne.n	800726a <HAL_ADC_PollForConversion+0x4e>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80072ba:	f7ff ff65 	bl	8007188 <HAL_GetTick>
 80072be:	eba0 0008 	sub.w	r0, r0, r8
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80072c2:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80072c4:	42b0      	cmp	r0, r6
 80072c6:	d801      	bhi.n	80072cc <HAL_ADC_PollForConversion+0xb0>
 80072c8:	2e00      	cmp	r6, #0
 80072ca:	d1c9      	bne.n	8007260 <HAL_ADC_PollForConversion+0x44>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80072cc:	6813      	ldr	r3, [r2, #0]
 80072ce:	4023      	ands	r3, r4
 80072d0:	d1c6      	bne.n	8007260 <HAL_ADC_PollForConversion+0x44>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80072d2:	6d6a      	ldr	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
 80072d4:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80072d6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80072da:	f042 0204 	orr.w	r2, r2, #4
 80072de:	656a      	str	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
 80072e0:	e7e6      	b.n	80072b0 <HAL_ADC_PollForConversion+0x94>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80072e2:	4a13      	ldr	r2, [pc, #76]	; (8007330 <HAL_ADC_PollForConversion+0x114>)
 80072e4:	e7a7      	b.n	8007236 <HAL_ADC_PollForConversion+0x1a>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80072e6:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80072e8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80072ec:	d0b3      	beq.n	8007256 <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072ee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 80072f0:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072f2:	f043 0320 	orr.w	r3, r3, #32
 80072f6:	656b      	str	r3, [r5, #84]	; 0x54
}
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80072fc:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80072fe:	6014      	str	r4, [r2, #0]
}
 8007300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007304:	2f09      	cmp	r7, #9
 8007306:	d902      	bls.n	800730e <HAL_ADC_PollForConversion+0xf2>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007308:	4b06      	ldr	r3, [pc, #24]	; (8007324 <HAL_ADC_PollForConversion+0x108>)
 800730a:	68d8      	ldr	r0, [r3, #12]
 800730c:	e7c9      	b.n	80072a2 <HAL_ADC_PollForConversion+0x86>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800730e:	f240 2321 	movw	r3, #545	; 0x221
 8007312:	fa23 f707 	lsr.w	r7, r3, r7
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007316:	07fb      	lsls	r3, r7, #31
 8007318:	d4c2      	bmi.n	80072a0 <HAL_ADC_PollForConversion+0x84>
 800731a:	e7f5      	b.n	8007308 <HAL_ADC_PollForConversion+0xec>
  return HAL_OK;
 800731c:	2000      	movs	r0, #0
}
 800731e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007322:	bf00      	nop
 8007324:	40022000 	.word	0x40022000
 8007328:	58026300 	.word	0x58026300
 800732c:	40022100 	.word	0x40022100
 8007330:	40022300 	.word	0x40022300

08007334 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8007334:	6803      	ldr	r3, [r0, #0]
 8007336:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop

0800733c <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800733c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800733e:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007340:	f7fd fc1e 	bl	8004b80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007344:	bd08      	pop	{r3, pc}
 8007346:	bf00      	nop

08007348 <HAL_ADC_ErrorCallback>:
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop

0800734c <HAL_ADC_IRQHandler>:
{
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800734e:	4a90      	ldr	r2, [pc, #576]	; (8007590 <HAL_ADC_IRQHandler+0x244>)
{
 8007350:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007352:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007354:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007356:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007358:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800735a:	f000 8095 	beq.w	8007488 <HAL_ADC_IRQHandler+0x13c>
 800735e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007362:	4293      	cmp	r3, r2
 8007364:	f000 8090 	beq.w	8007488 <HAL_ADC_IRQHandler+0x13c>
 8007368:	4a8a      	ldr	r2, [pc, #552]	; (8007594 <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800736a:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800736c:	07a9      	lsls	r1, r5, #30
 800736e:	f007 071f 	and.w	r7, r7, #31
 8007372:	d502      	bpl.n	800737a <HAL_ADC_IRQHandler+0x2e>
 8007374:	07b2      	lsls	r2, r6, #30
 8007376:	f100 80aa 	bmi.w	80074ce <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800737a:	0769      	lsls	r1, r5, #29
 800737c:	d579      	bpl.n	8007472 <HAL_ADC_IRQHandler+0x126>
 800737e:	0772      	lsls	r2, r6, #29
 8007380:	d577      	bpl.n	8007472 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007382:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007384:	06d2      	lsls	r2, r2, #27
 8007386:	d403      	bmi.n	8007390 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007388:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800738a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800738e:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8007396:	d11c      	bne.n	80073d2 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007398:	4a7f      	ldr	r2, [pc, #508]	; (8007598 <HAL_ADC_IRQHandler+0x24c>)
 800739a:	4293      	cmp	r3, r2
 800739c:	f000 80e8 	beq.w	8007570 <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80073a0:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80073a2:	0490      	lsls	r0, r2, #18
 80073a4:	d415      	bmi.n	80073d2 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	0711      	lsls	r1, r2, #28
 80073aa:	d512      	bpl.n	80073d2 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	0752      	lsls	r2, r2, #29
 80073b0:	f100 80f6 	bmi.w	80075a0 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	f022 020c 	bic.w	r2, r2, #12
 80073ba:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80073bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80073be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c2:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80073c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80073c6:	04db      	lsls	r3, r3, #19
 80073c8:	d403      	bmi.n	80073d2 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80073cc:	f043 0301 	orr.w	r3, r3, #1
 80073d0:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80073d2:	4620      	mov	r0, r4
 80073d4:	f7fd fbb6 	bl	8004b44 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	220c      	movs	r2, #12
 80073dc:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80073de:	06a8      	lsls	r0, r5, #26
 80073e0:	d54d      	bpl.n	800747e <HAL_ADC_IRQHandler+0x132>
 80073e2:	06b1      	lsls	r1, r6, #26
 80073e4:	d54b      	bpl.n	800747e <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80073e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80073e8:	06d1      	lsls	r1, r2, #27
 80073ea:	d403      	bmi.n	80073f4 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80073ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80073ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073f2:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80073f4:	4968      	ldr	r1, [pc, #416]	; (8007598 <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80073f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073f8:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80073fa:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80073fc:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8007400:	d073      	beq.n	80074ea <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007402:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007404:	b9d2      	cbnz	r2, 800743c <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007406:	018a      	lsls	r2, r1, #6
 8007408:	f100 80aa 	bmi.w	8007560 <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	0650      	lsls	r0, r2, #25
 8007410:	d514      	bpl.n	800743c <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007412:	0289      	lsls	r1, r1, #10
 8007414:	d412      	bmi.n	800743c <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	0712      	lsls	r2, r2, #28
 800741a:	f100 80cc 	bmi.w	80075b6 <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007424:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007426:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800742c:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800742e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007430:	05d8      	lsls	r0, r3, #23
 8007432:	d403      	bmi.n	800743c <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007434:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800743c:	4620      	mov	r0, r4
 800743e:	f001 f9a9 	bl	8008794 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	2260      	movs	r2, #96	; 0x60
 8007446:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007448:	0629      	lsls	r1, r5, #24
 800744a:	d501      	bpl.n	8007450 <HAL_ADC_IRQHandler+0x104>
 800744c:	0632      	lsls	r2, r6, #24
 800744e:	d460      	bmi.n	8007512 <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007450:	05e8      	lsls	r0, r5, #23
 8007452:	d501      	bpl.n	8007458 <HAL_ADC_IRQHandler+0x10c>
 8007454:	05f1      	lsls	r1, r6, #23
 8007456:	d467      	bmi.n	8007528 <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007458:	05aa      	lsls	r2, r5, #22
 800745a:	d501      	bpl.n	8007460 <HAL_ADC_IRQHandler+0x114>
 800745c:	05b0      	lsls	r0, r6, #22
 800745e:	d44c      	bmi.n	80074fa <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007460:	06e9      	lsls	r1, r5, #27
 8007462:	d501      	bpl.n	8007468 <HAL_ADC_IRQHandler+0x11c>
 8007464:	06f2      	lsls	r2, r6, #27
 8007466:	d411      	bmi.n	800748c <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007468:	0568      	lsls	r0, r5, #21
 800746a:	d501      	bpl.n	8007470 <HAL_ADC_IRQHandler+0x124>
 800746c:	0571      	lsls	r1, r6, #21
 800746e:	d467      	bmi.n	8007540 <HAL_ADC_IRQHandler+0x1f4>
}
 8007470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007472:	0728      	lsls	r0, r5, #28
 8007474:	d5b3      	bpl.n	80073de <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007476:	0731      	lsls	r1, r6, #28
 8007478:	d483      	bmi.n	8007382 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800747a:	06a8      	lsls	r0, r5, #26
 800747c:	d4b1      	bmi.n	80073e2 <HAL_ADC_IRQHandler+0x96>
 800747e:	066a      	lsls	r2, r5, #25
 8007480:	d5e2      	bpl.n	8007448 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007482:	0670      	lsls	r0, r6, #25
 8007484:	d5e0      	bpl.n	8007448 <HAL_ADC_IRQHandler+0xfc>
 8007486:	e7ae      	b.n	80073e6 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007488:	4a44      	ldr	r2, [pc, #272]	; (800759c <HAL_ADC_IRQHandler+0x250>)
 800748a:	e76e      	b.n	800736a <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800748c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800748e:	b17a      	cbz	r2, 80074b0 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007490:	2f00      	cmp	r7, #0
 8007492:	d072      	beq.n	800757a <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007494:	4a3e      	ldr	r2, [pc, #248]	; (8007590 <HAL_ADC_IRQHandler+0x244>)
 8007496:	4293      	cmp	r3, r2
 8007498:	f000 808b 	beq.w	80075b2 <HAL_ADC_IRQHandler+0x266>
 800749c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80074a0:	4293      	cmp	r3, r2
 80074a2:	f000 8086 	beq.w	80075b2 <HAL_ADC_IRQHandler+0x266>
 80074a6:	4a3b      	ldr	r2, [pc, #236]	; (8007594 <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80074a8:	6892      	ldr	r2, [r2, #8]
 80074aa:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 80074ae:	d00b      	beq.n	80074c8 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80074b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 80074b2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80074b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074b8:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80074ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074bc:	f043 0302 	orr.w	r3, r3, #2
 80074c0:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 80074c2:	f7ff ff41 	bl	8007348 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	2210      	movs	r2, #16
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	e7cc      	b.n	8007468 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80074ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074d0:	06d8      	lsls	r0, r3, #27
 80074d2:	d403      	bmi.n	80074dc <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80074d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80074da:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80074dc:	4620      	mov	r0, r4
 80074de:	f001 f961 	bl	80087a4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	2202      	movs	r2, #2
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	e747      	b.n	800737a <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80074ea:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80074ec:	2901      	cmp	r1, #1
 80074ee:	d988      	bls.n	8007402 <HAL_ADC_IRQHandler+0xb6>
 80074f0:	2f00      	cmp	r7, #0
 80074f2:	d086      	beq.n	8007402 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80074f4:	4926      	ldr	r1, [pc, #152]	; (8007590 <HAL_ADC_IRQHandler+0x244>)
 80074f6:	68c9      	ldr	r1, [r1, #12]
 80074f8:	e784      	b.n	8007404 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80074fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80074fc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80074fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007502:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007504:	f001 f94c 	bl	80087a0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	e7a6      	b.n	8007460 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007512:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007514:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800751c:	f7fd fb5e 	bl	8004bdc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	2280      	movs	r2, #128	; 0x80
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	e793      	b.n	8007450 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007528:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800752a:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800752c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007530:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007532:	f001 f933 	bl	800879c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e78b      	b.n	8007458 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007540:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007542:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007546:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007548:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800754c:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800754e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007550:	f042 0208 	orr.w	r2, r2, #8
 8007554:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007556:	6019      	str	r1, [r3, #0]
}
 8007558:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800755c:	f001 b91c 	b.w	8008798 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007560:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007564:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007568:	4302      	orrs	r2, r0
 800756a:	f47f af67 	bne.w	800743c <HAL_ADC_IRQHandler+0xf0>
 800756e:	e74d      	b.n	800740c <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007570:	2f09      	cmp	r7, #9
 8007572:	d906      	bls.n	8007582 <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007574:	4a06      	ldr	r2, [pc, #24]	; (8007590 <HAL_ADC_IRQHandler+0x244>)
 8007576:	68d2      	ldr	r2, [r2, #12]
 8007578:	e713      	b.n	80073a2 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	0797      	lsls	r7, r2, #30
 800757e:	d0a3      	beq.n	80074c8 <HAL_ADC_IRQHandler+0x17c>
 8007580:	e796      	b.n	80074b0 <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007582:	f240 2221 	movw	r2, #545	; 0x221
 8007586:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007588:	07d2      	lsls	r2, r2, #31
 800758a:	f53f af09 	bmi.w	80073a0 <HAL_ADC_IRQHandler+0x54>
 800758e:	e7f1      	b.n	8007574 <HAL_ADC_IRQHandler+0x228>
 8007590:	40022000 	.word	0x40022000
 8007594:	58026300 	.word	0x58026300
 8007598:	40022100 	.word	0x40022100
 800759c:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075a2:	f043 0310 	orr.w	r3, r3, #16
 80075a6:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80075b0:	e70f      	b.n	80073d2 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80075b2:	4a05      	ldr	r2, [pc, #20]	; (80075c8 <HAL_ADC_IRQHandler+0x27c>)
 80075b4:	e778      	b.n	80074a8 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075b8:	f043 0310 	orr.w	r3, r3, #16
 80075bc:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075c0:	f043 0301 	orr.w	r3, r3, #1
 80075c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80075c6:	e739      	b.n	800743c <HAL_ADC_IRQHandler+0xf0>
 80075c8:	40022300 	.word	0x40022300

080075cc <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80075ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075d0:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80075d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 80075d6:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80075d8:	d11d      	bne.n	8007616 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80075da:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80075dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e0:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80075e2:	680a      	ldr	r2, [r1, #0]
 80075e4:	f012 0f08 	tst.w	r2, #8
 80075e8:	68ca      	ldr	r2, [r1, #12]
 80075ea:	d01b      	beq.n	8007624 <ADC_DMAConvCplt+0x58>
 80075ec:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80075f0:	d10d      	bne.n	800760e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80075f2:	68ca      	ldr	r2, [r1, #12]
 80075f4:	0494      	lsls	r4, r2, #18
 80075f6:	d40a      	bmi.n	800760e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007602:	04d1      	lsls	r1, r2, #19
 8007604:	d403      	bmi.n	800760e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007606:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007608:	f042 0201 	orr.w	r2, r2, #1
 800760c:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd fa98 	bl	8004b44 <HAL_ADC_ConvCpltCallback>
}
 8007614:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007616:	06d2      	lsls	r2, r2, #27
 8007618:	d40a      	bmi.n	8007630 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800761a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800761c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007622:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007624:	0790      	lsls	r0, r2, #30
 8007626:	d0e7      	beq.n	80075f8 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8007628:	4618      	mov	r0, r3
 800762a:	f7fd fa8b 	bl	8004b44 <HAL_ADC_ConvCpltCallback>
 800762e:	e7f1      	b.n	8007614 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff fe89 	bl	8007348 <HAL_ADC_ErrorCallback>
}
 8007636:	bd10      	pop	{r4, pc}

08007638 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007638:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800763a:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800763c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800763e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007642:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007644:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007646:	f043 0304 	orr.w	r3, r3, #4
 800764a:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800764c:	f7ff fe7c 	bl	8007348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007650:	bd08      	pop	{r3, pc}
 8007652:	bf00      	nop

08007654 <HAL_ADC_ConfigChannel>:
{
 8007654:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8007656:	2200      	movs	r2, #0
{
 8007658:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800765a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800765c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8007660:	2a01      	cmp	r2, #1
 8007662:	f000 813b 	beq.w	80078dc <HAL_ADC_ConfigChannel+0x288>
 8007666:	4603      	mov	r3, r0
 8007668:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800766a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800766c:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007670:	6894      	ldr	r4, [r2, #8]
 8007672:	0764      	lsls	r4, r4, #29
 8007674:	f100 8099 	bmi.w	80077aa <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007678:	680c      	ldr	r4, [r1, #0]
 800767a:	f3c4 0513 	ubfx	r5, r4, #0, #20
 800767e:	2d00      	cmp	r5, #0
 8007680:	f040 809e 	bne.w	80077c0 <HAL_ADC_ConfigChannel+0x16c>
 8007684:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8007688:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800768a:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 800768c:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007690:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007692:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8007696:	4330      	orrs	r0, r6
 8007698:	f00c 0c0c 	and.w	ip, ip, #12
 800769c:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 800769e:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80076a2:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 80076a6:	4084      	lsls	r4, r0
 80076a8:	fa0e fe00 	lsl.w	lr, lr, r0
 80076ac:	f85c 0005 	ldr.w	r0, [ip, r5]
 80076b0:	ea20 000e 	bic.w	r0, r0, lr
 80076b4:	4304      	orrs	r4, r0
 80076b6:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076ba:	6890      	ldr	r0, [r2, #8]
 80076bc:	0740      	lsls	r0, r0, #29
 80076be:	d47d      	bmi.n	80077bc <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80076c0:	6895      	ldr	r5, [r2, #8]
 80076c2:	f015 0508 	ands.w	r5, r5, #8
 80076c6:	d156      	bne.n	8007776 <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80076c8:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 80076ca:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80076cc:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80076d0:	4fb7      	ldr	r7, [pc, #732]	; (80079b0 <HAL_ADC_ConfigChannel+0x35c>)
 80076d2:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 80076d6:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80076da:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 80076de:	fa00 fe04 	lsl.w	lr, r0, r4
 80076e2:	6888      	ldr	r0, [r1, #8]
 80076e4:	fa00 f404 	lsl.w	r4, r0, r4
 80076e8:	f85c 0006 	ldr.w	r0, [ip, r6]
 80076ec:	ea20 000e 	bic.w	r0, r0, lr
 80076f0:	4320      	orrs	r0, r4
 80076f2:	f84c 0006 	str.w	r0, [ip, r6]
 80076f6:	6838      	ldr	r0, [r7, #0]
 80076f8:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80076fc:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007700:	f000 8095 	beq.w	800782e <HAL_ADC_ConfigChannel+0x1da>
 8007704:	68d0      	ldr	r0, [r2, #12]
 8007706:	68d6      	ldr	r6, [r2, #12]
 8007708:	06c7      	lsls	r7, r0, #27
 800770a:	f100 8107 	bmi.w	800791c <HAL_ADC_ConfigChannel+0x2c8>
 800770e:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8007712:	6948      	ldr	r0, [r1, #20]
 8007714:	0076      	lsls	r6, r6, #1
 8007716:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800771a:	690f      	ldr	r7, [r1, #16]
 800771c:	2f04      	cmp	r7, #4
 800771e:	f000 80e0 	beq.w	80078e2 <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007722:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8007726:	6808      	ldr	r0, [r1, #0]
 8007728:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 800772c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007730:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007734:	ea40 000c 	orr.w	r0, r0, ip
 8007738:	4330      	orrs	r0, r6
 800773a:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800773e:	7e48      	ldrb	r0, [r1, #25]
 8007740:	690e      	ldr	r6, [r1, #16]
 8007742:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007744:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8007748:	bf0c      	ite	eq
 800774a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 800774e:	2700      	movne	r7, #0
 8007750:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007754:	4338      	orrs	r0, r7
 8007756:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800775a:	7e0c      	ldrb	r4, [r1, #24]
 800775c:	6908      	ldr	r0, [r1, #16]
 800775e:	2c01      	cmp	r4, #1
 8007760:	d104      	bne.n	800776c <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007762:	f000 001f 	and.w	r0, r0, #31
 8007766:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800776a:	4085      	lsls	r5, r0
 800776c:	6910      	ldr	r0, [r2, #16]
 800776e:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8007772:	4305      	orrs	r5, r0
 8007774:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007776:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007778:	07c4      	lsls	r4, r0, #31
 800777a:	d414      	bmi.n	80077a6 <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800777c:	68ce      	ldr	r6, [r1, #12]
 800777e:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8007780:	f006 0718 	and.w	r7, r6, #24
 8007784:	488b      	ldr	r0, [pc, #556]	; (80079b4 <HAL_ADC_ConfigChannel+0x360>)
 8007786:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 800778a:	40f8      	lsrs	r0, r7
 800778c:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8007790:	4020      	ands	r0, r4
 8007792:	ea25 0507 	bic.w	r5, r5, r7
 8007796:	4328      	orrs	r0, r5
 8007798:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800779c:	4886      	ldr	r0, [pc, #536]	; (80079b8 <HAL_ADC_ConfigChannel+0x364>)
 800779e:	4286      	cmp	r6, r0
 80077a0:	d04d      	beq.n	800783e <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80077a2:	2c00      	cmp	r4, #0
 80077a4:	db15      	blt.n	80077d2 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077a6:	2000      	movs	r0, #0
 80077a8:	e003      	b.n	80077b2 <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ac:	f042 0220 	orr.w	r2, r2, #32
 80077b0:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80077b8:	b003      	add	sp, #12
 80077ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80077bc:	6890      	ldr	r0, [r2, #8]
 80077be:	e7da      	b.n	8007776 <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c0:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80077c4:	b115      	cbz	r5, 80077cc <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80077c6:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80077ca:	40a8      	lsls	r0, r5
 80077cc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80077d0:	e75b      	b.n	800768a <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077d2:	497a      	ldr	r1, [pc, #488]	; (80079bc <HAL_ADC_ConfigChannel+0x368>)
 80077d4:	428a      	cmp	r2, r1
 80077d6:	f000 80c7 	beq.w	8007968 <HAL_ADC_ConfigChannel+0x314>
 80077da:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80077de:	428a      	cmp	r2, r1
 80077e0:	f000 80c2 	beq.w	8007968 <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80077e4:	4d76      	ldr	r5, [pc, #472]	; (80079c0 <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077e6:	4877      	ldr	r0, [pc, #476]	; (80079c4 <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80077e8:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077ea:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80077ec:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80077f0:	43c0      	mvns	r0, r0
 80077f2:	f000 0001 	and.w	r0, r0, #1
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f000 80c5 	beq.w	8007986 <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80077fc:	4872      	ldr	r0, [pc, #456]	; (80079c8 <HAL_ADC_ConfigChannel+0x374>)
 80077fe:	4284      	cmp	r4, r0
 8007800:	f000 810e 	beq.w	8007a20 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007804:	4871      	ldr	r0, [pc, #452]	; (80079cc <HAL_ADC_ConfigChannel+0x378>)
 8007806:	4284      	cmp	r4, r0
 8007808:	f000 812d 	beq.w	8007a66 <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800780c:	4870      	ldr	r0, [pc, #448]	; (80079d0 <HAL_ADC_ConfigChannel+0x37c>)
 800780e:	4284      	cmp	r4, r0
 8007810:	d1c9      	bne.n	80077a6 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8007812:	0249      	lsls	r1, r1, #9
 8007814:	d4c7      	bmi.n	80077a6 <HAL_ADC_ConfigChannel+0x152>
 8007816:	496b      	ldr	r1, [pc, #428]	; (80079c4 <HAL_ADC_ConfigChannel+0x370>)
 8007818:	428a      	cmp	r2, r1
 800781a:	d1c4      	bne.n	80077a6 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800781c:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800781e:	2000      	movs	r0, #0
 8007820:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8007824:	4332      	orrs	r2, r6
 8007826:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800782a:	60aa      	str	r2, [r5, #8]
}
 800782c:	e7c1      	b.n	80077b2 <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800782e:	68d6      	ldr	r6, [r2, #12]
 8007830:	6948      	ldr	r0, [r1, #20]
 8007832:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8007836:	0076      	lsls	r6, r6, #1
 8007838:	fa00 f606 	lsl.w	r6, r0, r6
 800783c:	e76d      	b.n	800771a <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800783e:	2f00      	cmp	r7, #0
 8007840:	d073      	beq.n	800792a <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007842:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007846:	2800      	cmp	r0, #0
 8007848:	f000 80c6 	beq.w	80079d8 <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 800784c:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007850:	3001      	adds	r0, #1
 8007852:	f000 001f 	and.w	r0, r0, #31
 8007856:	2809      	cmp	r0, #9
 8007858:	f240 80be 	bls.w	80079d8 <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007860:	2800      	cmp	r0, #0
 8007862:	f000 8114 	beq.w	8007a8e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8007866:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800786a:	3001      	adds	r0, #1
 800786c:	0680      	lsls	r0, r0, #26
 800786e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007872:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8007876:	2d00      	cmp	r5, #0
 8007878:	f000 8107 	beq.w	8007a8a <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 800787c:	fab5 f585 	clz	r5, r5
 8007880:	2601      	movs	r6, #1
 8007882:	3501      	adds	r5, #1
 8007884:	f005 051f 	and.w	r5, r5, #31
 8007888:	fa06 f505 	lsl.w	r5, r6, r5
 800788c:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8007892:	2c00      	cmp	r4, #0
 8007894:	f000 80f7 	beq.w	8007a86 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8007898:	fab4 f484 	clz	r4, r4
 800789c:	f06f 061d 	mvn.w	r6, #29
 80078a0:	1c60      	adds	r0, r4, #1
 80078a2:	f000 041f 	and.w	r4, r0, #31
 80078a6:	2003      	movs	r0, #3
 80078a8:	fb10 6004 	smlabb	r0, r0, r4, r6
 80078ac:	0500      	lsls	r0, r0, #20
 80078ae:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078b2:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 80078b4:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80078b6:	f102 0514 	add.w	r5, r2, #20
 80078ba:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 80078bc:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80078c0:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80078c4:	fa04 f700 	lsl.w	r7, r4, r0
 80078c8:	5974      	ldr	r4, [r6, r5]
 80078ca:	ea24 0407 	bic.w	r4, r4, r7
 80078ce:	688f      	ldr	r7, [r1, #8]
 80078d0:	fa07 f000 	lsl.w	r0, r7, r0
 80078d4:	4320      	orrs	r0, r4
 80078d6:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80078d8:	680c      	ldr	r4, [r1, #0]
}
 80078da:	e762      	b.n	80077a2 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 80078dc:	2002      	movs	r0, #2
}
 80078de:	b003      	add	sp, #12
 80078e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80078e2:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80078e4:	680c      	ldr	r4, [r1, #0]
 80078e6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80078ea:	06a5      	lsls	r5, r4, #26
 80078ec:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 80078f0:	d030      	beq.n	8007954 <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80078f2:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80078f4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80078f8:	4285      	cmp	r5, r0
 80078fa:	d026      	beq.n	800794a <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80078fc:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80078fe:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007902:	4285      	cmp	r5, r0
 8007904:	d02b      	beq.n	800795e <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007906:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8007908:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800790c:	4285      	cmp	r5, r0
 800790e:	f47f af32 	bne.w	8007776 <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007912:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8007914:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007918:	66d0      	str	r0, [r2, #108]	; 0x6c
 800791a:	e72c      	b.n	8007776 <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800791c:	0876      	lsrs	r6, r6, #1
 800791e:	6948      	ldr	r0, [r1, #20]
 8007920:	f006 0608 	and.w	r6, r6, #8
 8007924:	fa00 f606 	lsl.w	r6, r0, r6
 8007928:	e6f7      	b.n	800771a <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800792a:	0ea4      	lsrs	r4, r4, #26
 800792c:	3401      	adds	r4, #1
 800792e:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007932:	2e09      	cmp	r6, #9
 8007934:	d82d      	bhi.n	8007992 <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007936:	06a5      	lsls	r5, r4, #26
 8007938:	2001      	movs	r0, #1
 800793a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800793e:	40b0      	lsls	r0, r6
 8007940:	4305      	orrs	r5, r0
 8007942:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8007946:	0500      	lsls	r0, r0, #20
 8007948:	e7b3      	b.n	80078b2 <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800794a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800794c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007950:	6650      	str	r0, [r2, #100]	; 0x64
 8007952:	e7d3      	b.n	80078fc <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007954:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8007956:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800795a:	6610      	str	r0, [r2, #96]	; 0x60
 800795c:	e7c9      	b.n	80078f2 <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800795e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8007960:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007964:	6690      	str	r0, [r2, #104]	; 0x68
 8007966:	e7ce      	b.n	8007906 <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007968:	4814      	ldr	r0, [pc, #80]	; (80079bc <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800796a:	4d1a      	ldr	r5, [pc, #104]	; (80079d4 <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800796c:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007970:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007972:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8007976:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007978:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800797a:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 800797e:	43c0      	mvns	r0, r0
 8007980:	f000 0001 	and.w	r0, r0, #1
 8007984:	e737      	b.n	80077f6 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8007988:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800798a:	f042 0220 	orr.w	r2, r2, #32
 800798e:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8007990:	e70f      	b.n	80077b2 <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007992:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8007996:	06a5      	lsls	r5, r4, #26
 8007998:	2401      	movs	r4, #1
 800799a:	381e      	subs	r0, #30
 800799c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80079a0:	fa04 f606 	lsl.w	r6, r4, r6
 80079a4:	0500      	lsls	r0, r0, #20
 80079a6:	4335      	orrs	r5, r6
 80079a8:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80079ac:	e781      	b.n	80078b2 <HAL_ADC_ConfigChannel+0x25e>
 80079ae:	bf00      	nop
 80079b0:	5c001000 	.word	0x5c001000
 80079b4:	000fffff 	.word	0x000fffff
 80079b8:	47ff0000 	.word	0x47ff0000
 80079bc:	40022000 	.word	0x40022000
 80079c0:	58026300 	.word	0x58026300
 80079c4:	58026000 	.word	0x58026000
 80079c8:	cb840000 	.word	0xcb840000
 80079cc:	c7520000 	.word	0xc7520000
 80079d0:	cfb80000 	.word	0xcfb80000
 80079d4:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079d8:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80079dc:	2800      	cmp	r0, #0
 80079de:	d05e      	beq.n	8007a9e <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 80079e0:	fab0 f080 	clz	r0, r0
 80079e4:	3001      	adds	r0, #1
 80079e6:	0680      	lsls	r0, r0, #26
 80079e8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ec:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	d052      	beq.n	8007a9a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80079f4:	fab5 f585 	clz	r5, r5
 80079f8:	2601      	movs	r6, #1
 80079fa:	3501      	adds	r5, #1
 80079fc:	f005 051f 	and.w	r5, r5, #31
 8007a00:	fa06 f505 	lsl.w	r5, r6, r5
 8007a04:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a06:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	d042      	beq.n	8007a94 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8007a0e:	fab4 f484 	clz	r4, r4
 8007a12:	3401      	adds	r4, #1
 8007a14:	f004 041f 	and.w	r4, r4, #31
 8007a18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8007a1c:	0520      	lsls	r0, r4, #20
 8007a1e:	e748      	b.n	80078b2 <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007a20:	0208      	lsls	r0, r1, #8
 8007a22:	f53f aec0 	bmi.w	80077a6 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a26:	491f      	ldr	r1, [pc, #124]	; (8007aa4 <HAL_ADC_ConfigChannel+0x450>)
 8007a28:	428a      	cmp	r2, r1
 8007a2a:	f47f aebc 	bne.w	80077a6 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a2e:	4a1e      	ldr	r2, [pc, #120]	; (8007aa8 <HAL_ADC_ConfigChannel+0x454>)
 8007a30:	481e      	ldr	r0, [pc, #120]	; (8007aac <HAL_ADC_ConfigChannel+0x458>)
 8007a32:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007a34:	68a9      	ldr	r1, [r5, #8]
 8007a36:	0992      	lsrs	r2, r2, #6
 8007a38:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8007a3c:	fba0 0202 	umull	r0, r2, r0, r2
 8007a40:	4331      	orrs	r1, r6
 8007a42:	0992      	lsrs	r2, r2, #6
 8007a44:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007a48:	3201      	adds	r2, #1
 8007a4a:	60a9      	str	r1, [r5, #8]
 8007a4c:	0052      	lsls	r2, r2, #1
 8007a4e:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8007a50:	9a01      	ldr	r2, [sp, #4]
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	f43f aea7 	beq.w	80077a6 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8007a58:	9a01      	ldr	r2, [sp, #4]
 8007a5a:	3a01      	subs	r2, #1
 8007a5c:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8007a5e:	9a01      	ldr	r2, [sp, #4]
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d1f9      	bne.n	8007a58 <HAL_ADC_ConfigChannel+0x404>
 8007a64:	e69f      	b.n	80077a6 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007a66:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8007a6a:	f47f ae9c 	bne.w	80077a6 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a6e:	490d      	ldr	r1, [pc, #52]	; (8007aa4 <HAL_ADC_ConfigChannel+0x450>)
 8007a70:	428a      	cmp	r2, r1
 8007a72:	f47f ae98 	bne.w	80077a6 <HAL_ADC_ConfigChannel+0x152>
 8007a76:	68aa      	ldr	r2, [r5, #8]
 8007a78:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8007a7c:	4332      	orrs	r2, r6
 8007a7e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007a82:	60aa      	str	r2, [r5, #8]
}
 8007a84:	e695      	b.n	80077b2 <HAL_ADC_ConfigChannel+0x15e>
 8007a86:	480a      	ldr	r0, [pc, #40]	; (8007ab0 <HAL_ADC_ConfigChannel+0x45c>)
 8007a88:	e713      	b.n	80078b2 <HAL_ADC_ConfigChannel+0x25e>
 8007a8a:	2502      	movs	r5, #2
 8007a8c:	e6fe      	b.n	800788c <HAL_ADC_ConfigChannel+0x238>
 8007a8e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007a92:	e6ee      	b.n	8007872 <HAL_ADC_ConfigChannel+0x21e>
 8007a94:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007a98:	e70b      	b.n	80078b2 <HAL_ADC_ConfigChannel+0x25e>
 8007a9a:	2502      	movs	r5, #2
 8007a9c:	e7b2      	b.n	8007a04 <HAL_ADC_ConfigChannel+0x3b0>
 8007a9e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007aa2:	e7a3      	b.n	80079ec <HAL_ADC_ConfigChannel+0x398>
 8007aa4:	58026000 	.word	0x58026000
 8007aa8:	24000314 	.word	0x24000314
 8007aac:	053e2d63 	.word	0x053e2d63
 8007ab0:	fe500000 	.word	0xfe500000

08007ab4 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8007ab4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8007ab8:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007aba:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8007abc:	2a01      	cmp	r2, #1
 8007abe:	f000 80f3 	beq.w	8007ca8 <HAL_ADC_AnalogWDGConfig+0x1f4>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007ac2:	681a      	ldr	r2, [r3, #0]
{
 8007ac4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8007ac6:	2401      	movs	r4, #1
 8007ac8:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007acc:	6894      	ldr	r4, [r2, #8]
 8007ace:	0765      	lsls	r5, r4, #29
 8007ad0:	d428      	bmi.n	8007b24 <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007ad2:	6894      	ldr	r4, [r2, #8]
 8007ad4:	0724      	lsls	r4, r4, #28
 8007ad6:	d426      	bmi.n	8007b26 <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007ad8:	680c      	ldr	r4, [r1, #0]
 8007ada:	4db8      	ldr	r5, [pc, #736]	; (8007dbc <HAL_ADC_AnalogWDGConfig+0x308>)
 8007adc:	42ac      	cmp	r4, r5
 8007ade:	f000 80a0 	beq.w	8007c22 <HAL_ADC_AnalogWDGConfig+0x16e>
      switch (AnalogWDGConfig->WatchdogMode)
 8007ae2:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8007ae6:	d02e      	beq.n	8007b46 <HAL_ADC_AnalogWDGConfig+0x92>
 8007ae8:	d827      	bhi.n	8007b3a <HAL_ADC_AnalogWDGConfig+0x86>
 8007aea:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8007aee:	d02a      	beq.n	8007b46 <HAL_ADC_AnalogWDGConfig+0x92>
 8007af0:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007af4:	d027      	beq.n	8007b46 <HAL_ADC_AnalogWDGConfig+0x92>
 8007af6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007afa:	d024      	beq.n	8007b46 <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007afc:	f004 0001 	and.w	r0, r4, #1
 8007b00:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 8007b04:	4eae      	ldr	r6, [pc, #696]	; (8007dc0 <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007b06:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8007b0a:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007b0c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8007b10:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 8007b14:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8007b18:	ea24 0406 	bic.w	r4, r4, r6
 8007b1c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007b20:	680c      	ldr	r4, [r1, #0]
}
 8007b22:	e023      	b.n	8007b6c <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007b24:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007b28:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b2a:	f042 0220 	orr.w	r2, r2, #32
 8007b2e:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007b36:	bc70      	pop	{r4, r5, r6}
 8007b38:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8007b3a:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8007b3e:	d002      	beq.n	8007b46 <HAL_ADC_AnalogWDGConfig+0x92>
 8007b40:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8007b44:	d1da      	bne.n	8007afc <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007b46:	489f      	ldr	r0, [pc, #636]	; (8007dc4 <HAL_ADC_AnalogWDGConfig+0x310>)
 8007b48:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007b4a:	6888      	ldr	r0, [r1, #8]
 8007b4c:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007b50:	f000 80cb 	beq.w	8007cea <HAL_ADC_AnalogWDGConfig+0x236>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	f040 80df 	bne.w	8007d18 <HAL_ADC_AnalogWDGConfig+0x264>
 8007b5a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8007b5e:	2501      	movs	r5, #1
 8007b60:	4085      	lsls	r5, r0
 8007b62:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8007b66:	4328      	orrs	r0, r5
 8007b68:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007b6c:	4896      	ldr	r0, [pc, #600]	; (8007dc8 <HAL_ADC_AnalogWDGConfig+0x314>)
 8007b6e:	6800      	ldr	r0, [r0, #0]
 8007b70:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8007b74:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007b78:	68d0      	ldr	r0, [r2, #12]
 8007b7a:	d04b      	beq.n	8007c14 <HAL_ADC_AnalogWDGConfig+0x160>
 8007b7c:	f010 0f10 	tst.w	r0, #16
 8007b80:	68d0      	ldr	r0, [r2, #12]
 8007b82:	d047      	beq.n	8007c14 <HAL_ADC_AnalogWDGConfig+0x160>
 8007b84:	0840      	lsrs	r0, r0, #1
 8007b86:	690d      	ldr	r5, [r1, #16]
 8007b88:	f000 0008 	and.w	r0, r0, #8
 8007b8c:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007b90:	4d8d      	ldr	r5, [pc, #564]	; (8007dc8 <HAL_ADC_AnalogWDGConfig+0x314>)
 8007b92:	682d      	ldr	r5, [r5, #0]
 8007b94:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 8007b98:	68d5      	ldr	r5, [r2, #12]
 8007b9a:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8007b9e:	d031      	beq.n	8007c04 <HAL_ADC_AnalogWDGConfig+0x150>
 8007ba0:	f015 0f10 	tst.w	r5, #16
 8007ba4:	68d5      	ldr	r5, [r2, #12]
 8007ba6:	d02d      	beq.n	8007c04 <HAL_ADC_AnalogWDGConfig+0x150>
 8007ba8:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8007bac:	694d      	ldr	r5, [r1, #20]
 8007bae:	f00c 0c08 	and.w	ip, ip, #8
 8007bb2:	fa05 fc0c 	lsl.w	ip, r5, ip
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007bb6:	4d83      	ldr	r5, [pc, #524]	; (8007dc4 <HAL_ADC_AnalogWDGConfig+0x310>)
 8007bb8:	42ac      	cmp	r4, r5
 8007bba:	d077      	beq.n	8007cac <HAL_ADC_AnalogWDGConfig+0x1f8>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8007bbc:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 8007bc0:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007bc4:	ea44 040c 	orr.w	r4, r4, ip
 8007bc8:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007bcc:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8007bd0:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007bd4:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8007bd6:	f44f 7400 	mov.w	r4, #512	; 0x200
 8007bda:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007bde:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007be0:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8007be4:	6558      	str	r0, [r3, #84]	; 0x54
 8007be6:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007be8:	7b09      	ldrb	r1, [r1, #12]
 8007bea:	2901      	cmp	r1, #1
 8007bec:	f000 808e 	beq.w	8007d0c <HAL_ADC_AnalogWDGConfig+0x258>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007bf0:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8007bf8:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007c00:	bc70      	pop	{r4, r5, r6}
 8007c02:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007c04:	f3c5 0c82 	ubfx	ip, r5, #2, #3
 8007c08:	694d      	ldr	r5, [r1, #20]
 8007c0a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007c0e:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007c12:	e7d0      	b.n	8007bb6 <HAL_ADC_AnalogWDGConfig+0x102>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007c14:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007c18:	690d      	ldr	r5, [r1, #16]
 8007c1a:	0040      	lsls	r0, r0, #1
 8007c1c:	fa05 f000 	lsl.w	r0, r5, r0
 8007c20:	e7b6      	b.n	8007b90 <HAL_ADC_AnalogWDGConfig+0xdc>
      switch (AnalogWDGConfig->WatchdogMode)
 8007c22:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8007c26:	f000 80f0 	beq.w	8007e0a <HAL_ADC_AnalogWDGConfig+0x356>
 8007c2a:	d82a      	bhi.n	8007c82 <HAL_ADC_AnalogWDGConfig+0x1ce>
 8007c2c:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8007c30:	f000 80e0 	beq.w	8007df4 <HAL_ADC_AnalogWDGConfig+0x340>
 8007c34:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007c38:	d118      	bne.n	8007c6c <HAL_ADC_AnalogWDGConfig+0x1b8>
  MODIFY_REG(*preg,
 8007c3a:	68d4      	ldr	r4, [r2, #12]
 8007c3c:	4863      	ldr	r0, [pc, #396]	; (8007dcc <HAL_ADC_AnalogWDGConfig+0x318>)
 8007c3e:	4020      	ands	r0, r4
 8007c40:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8007c44:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007c46:	4860      	ldr	r0, [pc, #384]	; (8007dc8 <HAL_ADC_AnalogWDGConfig+0x314>)
 8007c48:	6800      	ldr	r0, [r0, #0]
 8007c4a:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8007c4e:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007c52:	68d0      	ldr	r0, [r2, #12]
 8007c54:	d069      	beq.n	8007d2a <HAL_ADC_AnalogWDGConfig+0x276>
 8007c56:	f010 0f10 	tst.w	r0, #16
 8007c5a:	690d      	ldr	r5, [r1, #16]
 8007c5c:	68d0      	ldr	r0, [r2, #12]
 8007c5e:	f040 8099 	bne.w	8007d94 <HAL_ADC_AnalogWDGConfig+0x2e0>
 8007c62:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007c66:	0040      	lsls	r0, r0, #1
 8007c68:	4085      	lsls	r5, r0
 8007c6a:	e063      	b.n	8007d34 <HAL_ADC_AnalogWDGConfig+0x280>
      switch (AnalogWDGConfig->WatchdogMode)
 8007c6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007c70:	f040 80b4 	bne.w	8007ddc <HAL_ADC_AnalogWDGConfig+0x328>
 8007c74:	68d4      	ldr	r4, [r2, #12]
 8007c76:	4855      	ldr	r0, [pc, #340]	; (8007dcc <HAL_ADC_AnalogWDGConfig+0x318>)
 8007c78:	4020      	ands	r0, r4
 8007c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007c7e:	60d0      	str	r0, [r2, #12]
}
 8007c80:	e7e1      	b.n	8007c46 <HAL_ADC_AnalogWDGConfig+0x192>
 8007c82:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8007c86:	f000 80ae 	beq.w	8007de6 <HAL_ADC_AnalogWDGConfig+0x332>
 8007c8a:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8007c8e:	f040 80a5 	bne.w	8007ddc <HAL_ADC_AnalogWDGConfig+0x328>
  MODIFY_REG(*preg,
 8007c92:	68d5      	ldr	r5, [r2, #12]
 8007c94:	6888      	ldr	r0, [r1, #8]
 8007c96:	4c4d      	ldr	r4, [pc, #308]	; (8007dcc <HAL_ADC_AnalogWDGConfig+0x318>)
 8007c98:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007c9c:	402c      	ands	r4, r5
 8007c9e:	4320      	orrs	r0, r4
 8007ca0:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8007ca4:	60d0      	str	r0, [r2, #12]
}
 8007ca6:	e7ce      	b.n	8007c46 <HAL_ADC_AnalogWDGConfig+0x192>
  __HAL_LOCK(hadc);
 8007ca8:	2002      	movs	r0, #2
}
 8007caa:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8007cac:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8007cb0:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007cb4:	ea44 040c 	orr.w	r4, r4, ip
 8007cb8:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007cbc:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8007cc0:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007cc4:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8007cc6:	f44f 7480 	mov.w	r4, #256	; 0x100
 8007cca:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007cce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007cd0:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8007cd4:	6558      	str	r0, [r3, #84]	; 0x54
 8007cd6:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007cd8:	7b09      	ldrb	r1, [r1, #12]
 8007cda:	2901      	cmp	r1, #1
 8007cdc:	d078      	beq.n	8007dd0 <HAL_ADC_AnalogWDGConfig+0x31c>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007cde:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007ce6:	6051      	str	r1, [r2, #4]
}
 8007ce8:	e722      	b.n	8007b30 <HAL_ADC_AnalogWDGConfig+0x7c>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007cea:	2d00      	cmp	r5, #0
 8007cec:	d05e      	beq.n	8007dac <HAL_ADC_AnalogWDGConfig+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cee:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f000 8094 	beq.w	8007e20 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8007cf8:	fab0 f080 	clz	r0, r0
 8007cfc:	2501      	movs	r5, #1
 8007cfe:	4085      	lsls	r5, r0
 8007d00:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8007d04:	4328      	orrs	r0, r5
 8007d06:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 8007d0a:	e72f      	b.n	8007b6c <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007d0c:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d0e:	2000      	movs	r0, #0
 8007d10:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007d14:	6051      	str	r1, [r2, #4]
}
 8007d16:	e70b      	b.n	8007b30 <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d18:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d04a      	beq.n	8007db6 <HAL_ADC_AnalogWDGConfig+0x302>
  return __builtin_clz(value);
 8007d20:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007d24:	2501      	movs	r5, #1
 8007d26:	4085      	lsls	r5, r0
 8007d28:	e71b      	b.n	8007b62 <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007d2a:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007d2e:	690d      	ldr	r5, [r1, #16]
 8007d30:	0040      	lsls	r0, r0, #1
 8007d32:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007d34:	4824      	ldr	r0, [pc, #144]	; (8007dc8 <HAL_ADC_AnalogWDGConfig+0x314>)
 8007d36:	6800      	ldr	r0, [r0, #0]
 8007d38:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8007d3c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007d40:	68d0      	ldr	r0, [r2, #12]
 8007d42:	d003      	beq.n	8007d4c <HAL_ADC_AnalogWDGConfig+0x298>
 8007d44:	f010 0f10 	tst.w	r0, #16
 8007d48:	68d0      	ldr	r0, [r2, #12]
 8007d4a:	d128      	bne.n	8007d9e <HAL_ADC_AnalogWDGConfig+0x2ea>
 8007d4c:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007d50:	694c      	ldr	r4, [r1, #20]
 8007d52:	0040      	lsls	r0, r0, #1
 8007d54:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8007d58:	6a14      	ldr	r4, [r2, #32]
 8007d5a:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007d5e:	4304      	orrs	r4, r0
 8007d60:	6214      	str	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8007d62:	2480      	movs	r4, #128	; 0x80
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007d64:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8007d66:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8007d6a:	4328      	orrs	r0, r5
 8007d6c:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007d6e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007d70:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8007d74:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d76:	2000      	movs	r0, #0
 8007d78:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 8007d7a:	7b09      	ldrb	r1, [r1, #12]
 8007d7c:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007d7e:	6851      	ldr	r1, [r2, #4]
 8007d80:	bf0c      	ite	eq
 8007d82:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007d84:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 8007d88:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007d90:	bc70      	pop	{r4, r5, r6}
 8007d92:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007d94:	0840      	lsrs	r0, r0, #1
 8007d96:	f000 0008 	and.w	r0, r0, #8
 8007d9a:	4085      	lsls	r5, r0
 8007d9c:	e7ca      	b.n	8007d34 <HAL_ADC_AnalogWDGConfig+0x280>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007d9e:	0840      	lsrs	r0, r0, #1
 8007da0:	694c      	ldr	r4, [r1, #20]
 8007da2:	f000 0008 	and.w	r0, r0, #8
 8007da6:	fa04 f000 	lsl.w	r0, r4, r0
 8007daa:	e7d5      	b.n	8007d58 <HAL_ADC_AnalogWDGConfig+0x2a4>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007dac:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8007db0:	2501      	movs	r5, #1
 8007db2:	4085      	lsls	r5, r0
 8007db4:	e7a4      	b.n	8007d00 <HAL_ADC_AnalogWDGConfig+0x24c>
 8007db6:	2501      	movs	r5, #1
 8007db8:	e6d3      	b.n	8007b62 <HAL_ADC_AnalogWDGConfig+0xae>
 8007dba:	bf00      	nop
 8007dbc:	7dc00000 	.word	0x7dc00000
 8007dc0:	7dcfffff 	.word	0x7dcfffff
 8007dc4:	001fffff 	.word	0x001fffff
 8007dc8:	5c001000 	.word	0x5c001000
 8007dcc:	823fffff 	.word	0x823fffff
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007dd0:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007dd8:	6051      	str	r1, [r2, #4]
}
 8007dda:	e6a9      	b.n	8007b30 <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 8007ddc:	68d4      	ldr	r4, [r2, #12]
 8007dde:	4811      	ldr	r0, [pc, #68]	; (8007e24 <HAL_ADC_AnalogWDGConfig+0x370>)
 8007de0:	4020      	ands	r0, r4
 8007de2:	60d0      	str	r0, [r2, #12]
}
 8007de4:	e72f      	b.n	8007c46 <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8007de6:	68d4      	ldr	r4, [r2, #12]
 8007de8:	480e      	ldr	r0, [pc, #56]	; (8007e24 <HAL_ADC_AnalogWDGConfig+0x370>)
 8007dea:	4020      	ands	r0, r4
 8007dec:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8007df0:	60d0      	str	r0, [r2, #12]
}
 8007df2:	e728      	b.n	8007c46 <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8007df4:	68d5      	ldr	r5, [r2, #12]
 8007df6:	6888      	ldr	r0, [r1, #8]
 8007df8:	4c0a      	ldr	r4, [pc, #40]	; (8007e24 <HAL_ADC_AnalogWDGConfig+0x370>)
 8007dfa:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007dfe:	402c      	ands	r4, r5
 8007e00:	4320      	orrs	r0, r4
 8007e02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8007e06:	60d0      	str	r0, [r2, #12]
}
 8007e08:	e71d      	b.n	8007c46 <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8007e0a:	68d5      	ldr	r5, [r2, #12]
 8007e0c:	6888      	ldr	r0, [r1, #8]
 8007e0e:	4c05      	ldr	r4, [pc, #20]	; (8007e24 <HAL_ADC_AnalogWDGConfig+0x370>)
 8007e10:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007e14:	402c      	ands	r4, r5
 8007e16:	4320      	orrs	r0, r4
 8007e18:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8007e1c:	60d0      	str	r0, [r2, #12]
}
 8007e1e:	e712      	b.n	8007c46 <HAL_ADC_AnalogWDGConfig+0x192>
 8007e20:	2501      	movs	r5, #1
 8007e22:	e76d      	b.n	8007d00 <HAL_ADC_AnalogWDGConfig+0x24c>
 8007e24:	823fffff 	.word	0x823fffff

08007e28 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e28:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007e30:	689a      	ldr	r2, [r3, #8]
{
 8007e32:	b570      	push	{r4, r5, r6, lr}
 8007e34:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007e36:	d103      	bne.n	8007e40 <ADC_ConversionStop+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007e38:	0712      	lsls	r2, r2, #28
 8007e3a:	d401      	bmi.n	8007e40 <ADC_ConversionStop+0x18>
  return HAL_OK;
 8007e3c:	2000      	movs	r0, #0
}
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	0196      	lsls	r6, r2, #6
 8007e44:	d504      	bpl.n	8007e50 <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007e46:	8aa0      	ldrh	r0, [r4, #20]
 8007e48:	f240 1201 	movw	r2, #257	; 0x101
 8007e4c:	4290      	cmp	r0, r2
 8007e4e:	d01a      	beq.n	8007e86 <ADC_ConversionStop+0x5e>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007e50:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	d040      	beq.n	8007ed8 <ADC_ConversionStop+0xb0>
 8007e56:	0756      	lsls	r6, r2, #29
 8007e58:	d508      	bpl.n	8007e6c <ADC_ConversionStop+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	0790      	lsls	r0, r2, #30
 8007e5e:	d405      	bmi.n	8007e6c <ADC_ConversionStop+0x44>
  MODIFY_REG(ADCx->CR,
 8007e60:	6898      	ldr	r0, [r3, #8]
 8007e62:	4a2d      	ldr	r2, [pc, #180]	; (8007f18 <ADC_ConversionStop+0xf0>)
 8007e64:	4002      	ands	r2, r0
 8007e66:	f042 0210 	orr.w	r2, r2, #16
 8007e6a:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007e6c:	2901      	cmp	r1, #1
 8007e6e:	d019      	beq.n	8007ea4 <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	0712      	lsls	r2, r2, #28
 8007e74:	d502      	bpl.n	8007e7c <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	0790      	lsls	r0, r2, #30
 8007e7a:	d534      	bpl.n	8007ee6 <ADC_ConversionStop+0xbe>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007e7c:	2903      	cmp	r1, #3
 8007e7e:	bf14      	ite	ne
 8007e80:	2504      	movne	r5, #4
 8007e82:	250c      	moveq	r5, #12
 8007e84:	e00f      	b.n	8007ea6 <ADC_ConversionStop+0x7e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	0650      	lsls	r0, r2, #25
 8007e8a:	d406      	bmi.n	8007e9a <ADC_ConversionStop+0x72>
 8007e8c:	4a23      	ldr	r2, [pc, #140]	; (8007f1c <ADC_ConversionStop+0xf4>)
 8007e8e:	e001      	b.n	8007e94 <ADC_ConversionStop+0x6c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007e90:	3a01      	subs	r2, #1
 8007e92:	d018      	beq.n	8007ec6 <ADC_ConversionStop+0x9e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007e94:	6819      	ldr	r1, [r3, #0]
 8007e96:	0649      	lsls	r1, r1, #25
 8007e98:	d5fa      	bpl.n	8007e90 <ADC_ConversionStop+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007e9a:	2240      	movs	r2, #64	; 0x40
 8007e9c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	0752      	lsls	r2, r2, #29
 8007ea2:	d427      	bmi.n	8007ef4 <ADC_ConversionStop+0xcc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007ea4:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8007ea6:	f7ff f96f 	bl	8007188 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007eaa:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007eac:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	421d      	tst	r5, r3
 8007eb2:	d0c3      	beq.n	8007e3c <ADC_ConversionStop+0x14>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007eb4:	f7ff f968 	bl	8007188 <HAL_GetTick>
 8007eb8:	1b83      	subs	r3, r0, r6
 8007eba:	2b05      	cmp	r3, #5
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007ebc:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007ebe:	d9f6      	bls.n	8007eae <ADC_ConversionStop+0x86>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	422a      	tst	r2, r5
 8007ec4:	d0f3      	beq.n	8007eae <ADC_ConversionStop+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ec6:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8007ec8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eca:	f043 0310 	orr.w	r3, r3, #16
 8007ece:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ed2:	4303      	orrs	r3, r0
 8007ed4:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007ed8:	0715      	lsls	r5, r2, #28
 8007eda:	d502      	bpl.n	8007ee2 <ADC_ConversionStop+0xba>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	0792      	lsls	r2, r2, #30
 8007ee0:	d513      	bpl.n	8007f0a <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007ee2:	2508      	movs	r5, #8
        break;
 8007ee4:	e7df      	b.n	8007ea6 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8007ee6:	6898      	ldr	r0, [r3, #8]
 8007ee8:	4a0b      	ldr	r2, [pc, #44]	; (8007f18 <ADC_ConversionStop+0xf0>)
 8007eea:	4002      	ands	r2, r0
 8007eec:	f042 0220 	orr.w	r2, r2, #32
 8007ef0:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8007ef2:	e7c3      	b.n	8007e7c <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	0796      	lsls	r6, r2, #30
 8007ef8:	d4d4      	bmi.n	8007ea4 <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR,
 8007efa:	6899      	ldr	r1, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007efc:	2504      	movs	r5, #4
 8007efe:	4a06      	ldr	r2, [pc, #24]	; (8007f18 <ADC_ConversionStop+0xf0>)
 8007f00:	400a      	ands	r2, r1
 8007f02:	f042 0210 	orr.w	r2, r2, #16
 8007f06:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007f08:	e7cd      	b.n	8007ea6 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8007f0a:	6899      	ldr	r1, [r3, #8]
 8007f0c:	4a02      	ldr	r2, [pc, #8]	; (8007f18 <ADC_ConversionStop+0xf0>)
 8007f0e:	400a      	ands	r2, r1
 8007f10:	f042 0220 	orr.w	r2, r2, #32
 8007f14:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8007f16:	e7e4      	b.n	8007ee2 <ADC_ConversionStop+0xba>
 8007f18:	7fffffc0 	.word	0x7fffffc0
 8007f1c:	000cdc00 	.word	0x000cdc00

08007f20 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f20:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	07d1      	lsls	r1, r2, #31
 8007f26:	d501      	bpl.n	8007f2c <ADC_Enable+0xc>
  return HAL_OK;
 8007f28:	2000      	movs	r0, #0
}
 8007f2a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007f2c:	6899      	ldr	r1, [r3, #8]
 8007f2e:	4a21      	ldr	r2, [pc, #132]	; (8007fb4 <ADC_Enable+0x94>)
 8007f30:	4211      	tst	r1, r2
{
 8007f32:	b570      	push	{r4, r5, r6, lr}
 8007f34:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007f36:	d12c      	bne.n	8007f92 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8007f38:	6899      	ldr	r1, [r3, #8]
 8007f3a:	4a1f      	ldr	r2, [pc, #124]	; (8007fb8 <ADC_Enable+0x98>)
 8007f3c:	400a      	ands	r2, r1
 8007f3e:	f042 0201 	orr.w	r2, r2, #1
 8007f42:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007f44:	f7ff f920 	bl	8007188 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	4a1c      	ldr	r2, [pc, #112]	; (8007fbc <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8007f4c:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d028      	beq.n	8007fa4 <ADC_Enable+0x84>
 8007f52:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d024      	beq.n	8007fa4 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007f5a:	4a19      	ldr	r2, [pc, #100]	; (8007fc0 <ADC_Enable+0xa0>)
 8007f5c:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	07d6      	lsls	r6, r2, #31
 8007f62:	d414      	bmi.n	8007f8e <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8007f64:	4e14      	ldr	r6, [pc, #80]	; (8007fb8 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f66:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f68:	07d0      	lsls	r0, r2, #31
 8007f6a:	d404      	bmi.n	8007f76 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	4032      	ands	r2, r6
 8007f70:	f042 0201 	orr.w	r2, r2, #1
 8007f74:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007f76:	f7ff f907 	bl	8007188 <HAL_GetTick>
 8007f7a:	1b43      	subs	r3, r0, r5
 8007f7c:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f7e:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007f80:	d902      	bls.n	8007f88 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	07d1      	lsls	r1, r2, #31
 8007f86:	d504      	bpl.n	8007f92 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	07d2      	lsls	r2, r2, #31
 8007f8c:	d5eb      	bpl.n	8007f66 <ADC_Enable+0x46>
  return HAL_OK;
 8007f8e:	2000      	movs	r0, #0
}
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f92:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8007f94:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f96:	f043 0310 	orr.w	r3, r3, #16
 8007f9a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f9e:	4303      	orrs	r3, r0
 8007fa0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007fa4:	4a07      	ldr	r2, [pc, #28]	; (8007fc4 <ADC_Enable+0xa4>)
 8007fa6:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007fa8:	06d2      	lsls	r2, r2, #27
 8007faa:	d0d8      	beq.n	8007f5e <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007fac:	4a06      	ldr	r2, [pc, #24]	; (8007fc8 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d1d5      	bne.n	8007f5e <ADC_Enable+0x3e>
 8007fb2:	e7ec      	b.n	8007f8e <ADC_Enable+0x6e>
 8007fb4:	8000003f 	.word	0x8000003f
 8007fb8:	7fffffc0 	.word	0x7fffffc0
 8007fbc:	40022000 	.word	0x40022000
 8007fc0:	58026300 	.word	0x58026300
 8007fc4:	40022300 	.word	0x40022300
 8007fc8:	40022100 	.word	0x40022100

08007fcc <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007fcc:	4a39      	ldr	r2, [pc, #228]	; (80080b4 <HAL_ADC_Start+0xe8>)
 8007fce:	6803      	ldr	r3, [r0, #0]
 8007fd0:	4293      	cmp	r3, r2
{
 8007fd2:	b570      	push	{r4, r5, r6, lr}
 8007fd4:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007fd6:	d046      	beq.n	8008066 <HAL_ADC_Start+0x9a>
 8007fd8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d042      	beq.n	8008066 <HAL_ADC_Start+0x9a>
 8007fe0:	4a35      	ldr	r2, [pc, #212]	; (80080b8 <HAL_ADC_Start+0xec>)
 8007fe2:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007fe4:	689d      	ldr	r5, [r3, #8]
 8007fe6:	f015 0504 	ands.w	r5, r5, #4
 8007fea:	d142      	bne.n	8008072 <HAL_ADC_Start+0xa6>
    __HAL_LOCK(hadc);
 8007fec:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d03e      	beq.n	8008072 <HAL_ADC_Start+0xa6>
 8007ff4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8007ff6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8007ff8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8007ffc:	f7ff ff90 	bl	8007f20 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8008000:	2800      	cmp	r0, #0
 8008002:	d138      	bne.n	8008076 <HAL_ADC_Start+0xaa>
      ADC_STATE_CLR_SET(hadc->State,
 8008004:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008006:	f006 061f 	and.w	r6, r6, #31
 800800a:	4a2c      	ldr	r2, [pc, #176]	; (80080bc <HAL_ADC_Start+0xf0>)
 800800c:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800800e:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8008010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008014:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008016:	4a2a      	ldr	r2, [pc, #168]	; (80080c0 <HAL_ADC_Start+0xf4>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d045      	beq.n	80080a8 <HAL_ADC_Start+0xdc>
 800801c:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800801e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008020:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008024:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008026:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800802c:	d040      	beq.n	80080b0 <HAL_ADC_Start+0xe4>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800802e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008030:	f022 0206 	bic.w	r2, r2, #6
 8008034:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008036:	221c      	movs	r2, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008038:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800803a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008044:	d020      	beq.n	8008088 <HAL_ADC_Start+0xbc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008046:	2e09      	cmp	r6, #9
 8008048:	d918      	bls.n	800807c <HAL_ADC_Start+0xb0>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800804a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800804c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008050:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008052:	68cb      	ldr	r3, [r1, #12]
 8008054:	019b      	lsls	r3, r3, #6
 8008056:	d505      	bpl.n	8008064 <HAL_ADC_Start+0x98>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008058:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800805a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800805e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008062:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008064:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008066:	4a17      	ldr	r2, [pc, #92]	; (80080c4 <HAL_ADC_Start+0xf8>)
 8008068:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800806a:	689d      	ldr	r5, [r3, #8]
 800806c:	f015 0504 	ands.w	r5, r5, #4
 8008070:	d0bc      	beq.n	8007fec <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8008072:	2002      	movs	r0, #2
}
 8008074:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8008076:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 800807a:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800807c:	f240 2221 	movw	r2, #545	; 0x221
 8008080:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008084:	07f5      	lsls	r5, r6, #31
 8008086:	d5e0      	bpl.n	800804a <HAL_ADC_Start+0x7e>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	0192      	lsls	r2, r2, #6
 800808c:	d505      	bpl.n	800809a <HAL_ADC_Start+0xce>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800808e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008090:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008094:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008098:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 800809a:	6899      	ldr	r1, [r3, #8]
 800809c:	4a0a      	ldr	r2, [pc, #40]	; (80080c8 <HAL_ADC_Start+0xfc>)
 800809e:	400a      	ands	r2, r1
 80080a0:	f042 0204 	orr.w	r2, r2, #4
 80080a4:	609a      	str	r2, [r3, #8]
}
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80080a8:	4902      	ldr	r1, [pc, #8]	; (80080b4 <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80080aa:	2e00      	cmp	r6, #0
 80080ac:	d0b7      	beq.n	800801e <HAL_ADC_Start+0x52>
 80080ae:	e7ba      	b.n	8008026 <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 80080b0:	65a2      	str	r2, [r4, #88]	; 0x58
 80080b2:	e7c0      	b.n	8008036 <HAL_ADC_Start+0x6a>
 80080b4:	40022000 	.word	0x40022000
 80080b8:	58026300 	.word	0x58026300
 80080bc:	fffff0fe 	.word	0xfffff0fe
 80080c0:	40022100 	.word	0x40022100
 80080c4:	40022300 	.word	0x40022300
 80080c8:	7fffffc0 	.word	0x7fffffc0

080080cc <ADC_Disable>:
{
 80080cc:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80080ce:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80080d0:	689a      	ldr	r2, [r3, #8]
 80080d2:	0795      	lsls	r5, r2, #30
 80080d4:	d502      	bpl.n	80080dc <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80080d6:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80080d8:	2000      	movs	r0, #0
}
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80080de:	07d4      	lsls	r4, r2, #31
 80080e0:	d529      	bpl.n	8008136 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	4604      	mov	r4, r0
 80080e6:	f002 020d 	and.w	r2, r2, #13
 80080ea:	2a01      	cmp	r2, #1
 80080ec:	d008      	beq.n	8008100 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80080f0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080f2:	f043 0310 	orr.w	r3, r3, #16
 80080f6:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080fa:	4303      	orrs	r3, r0
 80080fc:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8008100:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008102:	2103      	movs	r1, #3
 8008104:	4a0d      	ldr	r2, [pc, #52]	; (800813c <ADC_Disable+0x70>)
 8008106:	4002      	ands	r2, r0
 8008108:	f042 0202 	orr.w	r2, r2, #2
 800810c:	609a      	str	r2, [r3, #8]
 800810e:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8008110:	f7ff f83a 	bl	8007188 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008114:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8008116:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	07d9      	lsls	r1, r3, #31
 800811c:	d50b      	bpl.n	8008136 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800811e:	f7ff f833 	bl	8007188 <HAL_GetTick>
 8008122:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008124:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008126:	2802      	cmp	r0, #2
 8008128:	d902      	bls.n	8008130 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	07d2      	lsls	r2, r2, #31
 800812e:	d4de      	bmi.n	80080ee <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	07db      	lsls	r3, r3, #31
 8008134:	d4f3      	bmi.n	800811e <ADC_Disable+0x52>
  return HAL_OK;
 8008136:	2000      	movs	r0, #0
}
 8008138:	bd38      	pop	{r3, r4, r5, pc}
 800813a:	bf00      	nop
 800813c:	7fffffc0 	.word	0x7fffffc0

08008140 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008140:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008142:	4a57      	ldr	r2, [pc, #348]	; (80082a0 <ADC_ConfigureBoostMode+0x160>)
{
 8008144:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008146:	6803      	ldr	r3, [r0, #0]
 8008148:	4293      	cmp	r3, r2
 800814a:	d026      	beq.n	800819a <ADC_ConfigureBoostMode+0x5a>
 800814c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008150:	4293      	cmp	r3, r2
 8008152:	d022      	beq.n	800819a <ADC_ConfigureBoostMode+0x5a>
 8008154:	4b53      	ldr	r3, [pc, #332]	; (80082a4 <ADC_ConfigureBoostMode+0x164>)
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800815c:	d022      	beq.n	80081a4 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800815e:	f003 f8bd 	bl	800b2dc <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8008162:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8008164:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8008166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800816a:	f000 8088 	beq.w	800827e <ADC_ConfigureBoostMode+0x13e>
 800816e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008172:	d06c      	beq.n	800824e <ADC_ConfigureBoostMode+0x10e>
 8008174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008178:	f000 8081 	beq.w	800827e <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800817c:	f7ff f81c 	bl	80071b8 <HAL_GetREVID>
 8008180:	f241 0303 	movw	r3, #4099	; 0x1003
 8008184:	4298      	cmp	r0, r3
 8008186:	d84b      	bhi.n	8008220 <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
 8008188:	4b47      	ldr	r3, [pc, #284]	; (80082a8 <ADC_ConfigureBoostMode+0x168>)
 800818a:	429d      	cmp	r5, r3
 800818c:	d92a      	bls.n	80081e4 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800818e:	6822      	ldr	r2, [r4, #0]
 8008190:	6893      	ldr	r3, [r2, #8]
 8008192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008196:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008198:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800819a:	4b44      	ldr	r3, [pc, #272]	; (80082ac <ADC_ConfigureBoostMode+0x16c>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80081a2:	d1dc      	bne.n	800815e <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80081a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80081a8:	2100      	movs	r1, #0
 80081aa:	f004 fa6d 	bl	800c688 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80081ae:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80081b0:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80081b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80081b6:	d06c      	beq.n	8008292 <ADC_ConfigureBoostMode+0x152>
 80081b8:	d808      	bhi.n	80081cc <ADC_ConfigureBoostMode+0x8c>
 80081ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80081be:	d050      	beq.n	8008262 <ADC_ConfigureBoostMode+0x122>
 80081c0:	d916      	bls.n	80081f0 <ADC_ConfigureBoostMode+0xb0>
 80081c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081c6:	d1d9      	bne.n	800817c <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 80081c8:	0945      	lsrs	r5, r0, #5
        break;
 80081ca:	e7d7      	b.n	800817c <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 80081cc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80081d0:	d045      	beq.n	800825e <ADC_ConfigureBoostMode+0x11e>
 80081d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80081d6:	d1d1      	bne.n	800817c <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80081d8:	f7fe ffee 	bl	80071b8 <HAL_GetREVID>
 80081dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80081e0:	4298      	cmp	r0, r3
 80081e2:	d840      	bhi.n	8008266 <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	6893      	ldr	r3, [r2, #8]
 80081e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081ec:	6093      	str	r3, [r2, #8]
}
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80081f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f4:	d006      	beq.n	8008204 <ADC_ConfigureBoostMode+0xc4>
 80081f6:	d90a      	bls.n	800820e <ADC_ConfigureBoostMode+0xce>
 80081f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80081fc:	d002      	beq.n	8008204 <ADC_ConfigureBoostMode+0xc4>
 80081fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008202:	d1bb      	bne.n	800817c <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008204:	0c9b      	lsrs	r3, r3, #18
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800820c:	e7b6      	b.n	800817c <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 800820e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008212:	d0f7      	beq.n	8008204 <ADC_ConfigureBoostMode+0xc4>
 8008214:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008218:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800821c:	d0f2      	beq.n	8008204 <ADC_ConfigureBoostMode+0xc4>
 800821e:	e7ad      	b.n	800817c <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8008220:	4b23      	ldr	r3, [pc, #140]	; (80082b0 <ADC_ConfigureBoostMode+0x170>)
 8008222:	429d      	cmp	r5, r3
 8008224:	d805      	bhi.n	8008232 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008226:	6822      	ldr	r2, [r4, #0]
 8008228:	6893      	ldr	r3, [r2, #8]
 800822a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822e:	6093      	str	r3, [r2, #8]
}
 8008230:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8008232:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <ADC_ConfigureBoostMode+0x174>)
 8008234:	429d      	cmp	r5, r3
 8008236:	d91a      	bls.n	800826e <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
 8008238:	4b1f      	ldr	r3, [pc, #124]	; (80082b8 <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800823a:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 800823c:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800823e:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8008240:	d829      	bhi.n	8008296 <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800824a:	6093      	str	r3, [r2, #8]
}
 800824c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 800824e:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8008250:	f7fe ffb2 	bl	80071b8 <HAL_GetREVID>
 8008254:	f241 0303 	movw	r3, #4099	; 0x1003
 8008258:	4298      	cmp	r0, r3
 800825a:	d8e1      	bhi.n	8008220 <ADC_ConfigureBoostMode+0xe0>
 800825c:	e794      	b.n	8008188 <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
 800825e:	09c5      	lsrs	r5, r0, #7
        break;
 8008260:	e78c      	b.n	800817c <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8008262:	0905      	lsrs	r5, r0, #4
        break;
 8008264:	e78a      	b.n	800817c <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8008266:	4b12      	ldr	r3, [pc, #72]	; (80082b0 <ADC_ConfigureBoostMode+0x170>)
 8008268:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 800826c:	d2db      	bcs.n	8008226 <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800826e:	6822      	ldr	r2, [r4, #0]
 8008270:	6893      	ldr	r3, [r2, #8]
 8008272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800827a:	6093      	str	r3, [r2, #8]
}
 800827c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800827e:	0c1b      	lsrs	r3, r3, #16
 8008280:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8008284:	f7fe ff98 	bl	80071b8 <HAL_GetREVID>
 8008288:	f241 0303 	movw	r3, #4099	; 0x1003
 800828c:	4298      	cmp	r0, r3
 800828e:	d8c7      	bhi.n	8008220 <ADC_ConfigureBoostMode+0xe0>
 8008290:	e77a      	b.n	8008188 <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
 8008292:	0985      	lsrs	r5, r0, #6
        break;
 8008294:	e772      	b.n	800817c <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008296:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800829a:	6093      	str	r3, [r2, #8]
}
 800829c:	bd38      	pop	{r3, r4, r5, pc}
 800829e:	bf00      	nop
 80082a0:	40022000 	.word	0x40022000
 80082a4:	58026300 	.word	0x58026300
 80082a8:	01312d00 	.word	0x01312d00
 80082ac:	40022300 	.word	0x40022300
 80082b0:	00bebc21 	.word	0x00bebc21
 80082b4:	017d7841 	.word	0x017d7841
 80082b8:	02faf081 	.word	0x02faf081

080082bc <HAL_ADC_Init>:
{
 80082bc:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80082be:	2300      	movs	r3, #0
{
 80082c0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80082c2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80082c4:	2800      	cmp	r0, #0
 80082c6:	f000 80d1 	beq.w	800846c <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80082ca:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80082cc:	4604      	mov	r4, r0
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	f000 80bb 	beq.w	800844a <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80082d4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80082d6:	6893      	ldr	r3, [r2, #8]
 80082d8:	009d      	lsls	r5, r3, #2
 80082da:	d503      	bpl.n	80082e4 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80082dc:	6891      	ldr	r1, [r2, #8]
 80082de:	4b72      	ldr	r3, [pc, #456]	; (80084a8 <HAL_ADC_Init+0x1ec>)
 80082e0:	400b      	ands	r3, r1
 80082e2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80082e4:	6893      	ldr	r3, [r2, #8]
 80082e6:	00d8      	lsls	r0, r3, #3
 80082e8:	d416      	bmi.n	8008318 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80082ea:	4b70      	ldr	r3, [pc, #448]	; (80084ac <HAL_ADC_Init+0x1f0>)
 80082ec:	4970      	ldr	r1, [pc, #448]	; (80084b0 <HAL_ADC_Init+0x1f4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80082f0:	6890      	ldr	r0, [r2, #8]
 80082f2:	099b      	lsrs	r3, r3, #6
 80082f4:	fba1 1303 	umull	r1, r3, r1, r3
 80082f8:	496e      	ldr	r1, [pc, #440]	; (80084b4 <HAL_ADC_Init+0x1f8>)
 80082fa:	099b      	lsrs	r3, r3, #6
 80082fc:	4001      	ands	r1, r0
 80082fe:	3301      	adds	r3, #1
 8008300:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8008304:	6091      	str	r1, [r2, #8]
 8008306:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	b12b      	cbz	r3, 8008318 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 800830c:	9b01      	ldr	r3, [sp, #4]
 800830e:	3b01      	subs	r3, #1
 8008310:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1f9      	bne.n	800830c <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008318:	6893      	ldr	r3, [r2, #8]
 800831a:	00d9      	lsls	r1, r3, #3
 800831c:	d424      	bmi.n	8008368 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800831e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8008320:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008322:	f043 0310 	orr.w	r3, r3, #16
 8008326:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008328:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800832a:	432b      	orrs	r3, r5
 800832c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800832e:	6893      	ldr	r3, [r2, #8]
 8008330:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008334:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008336:	d11d      	bne.n	8008374 <HAL_ADC_Init+0xb8>
 8008338:	06db      	lsls	r3, r3, #27
 800833a:	d41b      	bmi.n	8008374 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 800833c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800833e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008342:	f043 0302 	orr.w	r3, r3, #2
 8008346:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008348:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800834a:	07de      	lsls	r6, r3, #31
 800834c:	d428      	bmi.n	80083a0 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800834e:	4b5a      	ldr	r3, [pc, #360]	; (80084b8 <HAL_ADC_Init+0x1fc>)
 8008350:	429a      	cmp	r2, r3
 8008352:	d017      	beq.n	8008384 <HAL_ADC_Init+0xc8>
 8008354:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008358:	429a      	cmp	r2, r3
 800835a:	d013      	beq.n	8008384 <HAL_ADC_Init+0xc8>
 800835c:	4b57      	ldr	r3, [pc, #348]	; (80084bc <HAL_ADC_Init+0x200>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	07d9      	lsls	r1, r3, #31
 8008362:	d41d      	bmi.n	80083a0 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008364:	4a56      	ldr	r2, [pc, #344]	; (80084c0 <HAL_ADC_Init+0x204>)
 8008366:	e015      	b.n	8008394 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008368:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800836a:	2500      	movs	r5, #0
 800836c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008370:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008372:	d0e1      	beq.n	8008338 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008374:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8008376:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008378:	f043 0310 	orr.w	r3, r3, #16
}
 800837c:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800837e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008380:	b002      	add	sp, #8
 8008382:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008384:	4a4c      	ldr	r2, [pc, #304]	; (80084b8 <HAL_ADC_Init+0x1fc>)
 8008386:	4b4f      	ldr	r3, [pc, #316]	; (80084c4 <HAL_ADC_Init+0x208>)
 8008388:	6892      	ldr	r2, [r2, #8]
 800838a:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800838c:	4313      	orrs	r3, r2
 800838e:	07d8      	lsls	r0, r3, #31
 8008390:	d406      	bmi.n	80083a0 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008392:	4a4d      	ldr	r2, [pc, #308]	; (80084c8 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008394:	6893      	ldr	r3, [r2, #8]
 8008396:	6861      	ldr	r1, [r4, #4]
 8008398:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800839c:	430b      	orrs	r3, r1
 800839e:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80083a0:	f7fe ff0a 	bl	80071b8 <HAL_GetREVID>
 80083a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80083a8:	68a1      	ldr	r1, [r4, #8]
 80083aa:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80083ac:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80083ae:	d852      	bhi.n	8008456 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80083b0:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80083b4:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80083b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80083b8:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80083bc:	4302      	orrs	r2, r0
 80083be:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d103      	bne.n	80083cc <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80083c4:	6a23      	ldr	r3, [r4, #32]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80083cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083ce:	b123      	cbz	r3, 80083da <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80083d0:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80083d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80083d6:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80083d8:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	493b      	ldr	r1, [pc, #236]	; (80084cc <HAL_ADC_Init+0x210>)
 80083de:	68d8      	ldr	r0, [r3, #12]
 80083e0:	4001      	ands	r1, r0
 80083e2:	430a      	orrs	r2, r1
 80083e4:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80083ec:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80083ee:	d11c      	bne.n	800842a <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80083f0:	0712      	lsls	r2, r2, #28
 80083f2:	d41a      	bmi.n	800842a <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80083f4:	68d8      	ldr	r0, [r3, #12]
 80083f6:	4a36      	ldr	r2, [pc, #216]	; (80084d0 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80083f8:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80083fa:	4002      	ands	r2, r0
 80083fc:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8008400:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008402:	430a      	orrs	r2, r1
 8008404:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8008406:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800840a:	2a01      	cmp	r2, #1
 800840c:	d03a      	beq.n	8008484 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800840e:	691a      	ldr	r2, [r3, #16]
 8008410:	f022 0201 	bic.w	r2, r2, #1
 8008414:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8008416:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8008418:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800841a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800841c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008420:	430a      	orrs	r2, r1
 8008422:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8008424:	f7ff fe8c 	bl	8008140 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008428:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800842a:	68e2      	ldr	r2, [r4, #12]
 800842c:	2a01      	cmp	r2, #1
 800842e:	d021      	beq.n	8008474 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008432:	f022 020f 	bic.w	r2, r2, #15
 8008436:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008438:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 800843a:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	f043 0301 	orr.w	r3, r3, #1
 8008444:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008446:	b002      	add	sp, #8
 8008448:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 800844a:	f7fe f965 	bl	8006718 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800844e:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8008450:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8008454:	e73e      	b.n	80082d4 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8008456:	2910      	cmp	r1, #16
 8008458:	d1aa      	bne.n	80083b0 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800845a:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800845c:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800845e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8008462:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008464:	430a      	orrs	r2, r1
 8008466:	f042 021c 	orr.w	r2, r2, #28
 800846a:	e7a9      	b.n	80083c0 <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 800846c:	2501      	movs	r5, #1
}
 800846e:	4628      	mov	r0, r5
 8008470:	b002      	add	sp, #8
 8008472:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008476:	69a2      	ldr	r2, [r4, #24]
 8008478:	f021 010f 	bic.w	r1, r1, #15
 800847c:	3a01      	subs	r2, #1
 800847e:	430a      	orrs	r2, r1
 8008480:	631a      	str	r2, [r3, #48]	; 0x30
 8008482:	e7d9      	b.n	8008438 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8008484:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8008488:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800848a:	3901      	subs	r1, #1
 800848c:	6918      	ldr	r0, [r3, #16]
 800848e:	4332      	orrs	r2, r6
 8008490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008494:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008496:	430a      	orrs	r2, r1
 8008498:	490e      	ldr	r1, [pc, #56]	; (80084d4 <HAL_ADC_Init+0x218>)
 800849a:	4001      	ands	r1, r0
 800849c:	430a      	orrs	r2, r1
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	611a      	str	r2, [r3, #16]
 80084a4:	e7b7      	b.n	8008416 <HAL_ADC_Init+0x15a>
 80084a6:	bf00      	nop
 80084a8:	5fffffc0 	.word	0x5fffffc0
 80084ac:	24000314 	.word	0x24000314
 80084b0:	053e2d63 	.word	0x053e2d63
 80084b4:	6fffffc0 	.word	0x6fffffc0
 80084b8:	40022000 	.word	0x40022000
 80084bc:	58026000 	.word	0x58026000
 80084c0:	58026300 	.word	0x58026300
 80084c4:	40022100 	.word	0x40022100
 80084c8:	40022300 	.word	0x40022300
 80084cc:	fff0c003 	.word	0xfff0c003
 80084d0:	ffffbffc 	.word	0xffffbffc
 80084d4:	fc00f81e 	.word	0xfc00f81e

080084d8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80084d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80084da:	2300      	movs	r3, #0
{
 80084dc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80084de:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80084e0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d040      	beq.n	800856a <HAL_ADCEx_Calibration_Start+0x92>
 80084e8:	2301      	movs	r3, #1
 80084ea:	4604      	mov	r4, r0
 80084ec:	460e      	mov	r6, r1
 80084ee:	4615      	mov	r5, r2
 80084f0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80084f4:	f7ff fdea 	bl	80080cc <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80084f8:	b9e8      	cbnz	r0, 8008536 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80084fa:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80084fc:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 8008500:	4b1b      	ldr	r3, [pc, #108]	; (8008570 <HAL_ADCEx_Calibration_Start+0x98>)
 8008502:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
 8008506:	4d1b      	ldr	r5, [pc, #108]	; (8008574 <HAL_ADCEx_Calibration_Start+0x9c>)
 8008508:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800850a:	4f1b      	ldr	r7, [pc, #108]	; (8008578 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 800850c:	f043 0302 	orr.w	r3, r3, #2
 8008510:	6563      	str	r3, [r4, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	689e      	ldr	r6, [r3, #8]
 8008516:	4035      	ands	r5, r6
 8008518:	4315      	orrs	r5, r2
 800851a:	430d      	orrs	r5, r1
 800851c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8008520:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	2a00      	cmp	r2, #0
 8008526:	db0f      	blt.n	8008548 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008528:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	6563      	str	r3, [r4, #84]	; 0x54
 8008534:	e003      	b.n	800853e <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008536:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008538:	f043 0310 	orr.w	r3, r3, #16
 800853c:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800853e:	2300      	movs	r3, #0
 8008540:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8008544:	b003      	add	sp, #12
 8008546:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8008548:	9a01      	ldr	r2, [sp, #4]
 800854a:	3201      	adds	r2, #1
 800854c:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800854e:	9a01      	ldr	r2, [sp, #4]
 8008550:	42ba      	cmp	r2, r7
 8008552:	d3e6      	bcc.n	8008522 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8008554:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8008556:	2200      	movs	r2, #0
        return HAL_ERROR;
 8008558:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800855a:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800855e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8008562:	f043 0310 	orr.w	r3, r3, #16
 8008566:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8008568:	e7ec      	b.n	8008544 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 800856a:	2002      	movs	r0, #2
}
 800856c:	b003      	add	sp, #12
 800856e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008570:	ffffeefd 	.word	0xffffeefd
 8008574:	3ffeffc0 	.word	0x3ffeffc0
 8008578:	25c3f800 	.word	0x25c3f800

0800857c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008580:	f8d0 8000 	ldr.w	r8, [r0]
{
 8008584:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008586:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800858a:	f015 0504 	ands.w	r5, r5, #4
 800858e:	d117      	bne.n	80085c0 <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008590:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008594:	4604      	mov	r4, r0
 8008596:	2b01      	cmp	r3, #1
 8008598:	d012      	beq.n	80085c0 <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800859a:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 800859c:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80085a0:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80085a2:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80085a4:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 80085a6:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80085aa:	d00d      	beq.n	80085c8 <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085ac:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80085ae:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 80085b0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085b4:	f043 0320 	orr.w	r3, r3, #32
 80085b8:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 80085ba:	b01a      	add	sp, #104	; 0x68
 80085bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80085c0:	2002      	movs	r0, #2
}
 80085c2:	b01a      	add	sp, #104	; 0x68
 80085c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c8:	4d22      	ldr	r5, [pc, #136]	; (8008654 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 80085ca:	460e      	mov	r6, r1
 80085cc:	4617      	mov	r7, r2
 80085ce:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 80085d0:	f7ff fca6 	bl	8007f20 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80085d4:	b128      	cbz	r0, 80085e2 <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 80085d6:	2300      	movs	r3, #0
 80085d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80085dc:	b01a      	add	sp, #104	; 0x68
 80085de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80085e2:	a801      	add	r0, sp, #4
 80085e4:	f7ff fc9c 	bl	8007f20 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d1f4      	bne.n	80085d6 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 80085ec:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80085ee:	4a1a      	ldr	r2, [pc, #104]	; (8008658 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80085f0:	4b1a      	ldr	r3, [pc, #104]	; (800865c <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 80085f2:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80085f4:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 80085f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80085fc:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 80085fe:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8008600:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008602:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008604:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008606:	4b16      	ldr	r3, [pc, #88]	; (8008660 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8008608:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800860a:	4b16      	ldr	r3, [pc, #88]	; (8008664 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 800860c:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800860e:	d01d      	beq.n	800864c <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8008610:	45ac      	cmp	ip, r5
 8008612:	d01b      	beq.n	800864c <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8008614:	4914      	ldr	r1, [pc, #80]	; (8008668 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008616:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8008618:	463b      	mov	r3, r7
 800861a:	4632      	mov	r2, r6
 800861c:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800861e:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 8008622:	2500      	movs	r5, #0
 8008624:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008628:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800862c:	f045 0510 	orr.w	r5, r5, #16
 8008630:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8008634:	f000 fef8 	bl	8009428 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8008638:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800863a:	4b0c      	ldr	r3, [pc, #48]	; (800866c <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 800863c:	6891      	ldr	r1, [r2, #8]
 800863e:	400b      	ands	r3, r1
 8008640:	f043 0304 	orr.w	r3, r3, #4
 8008644:	6093      	str	r3, [r2, #8]
}
 8008646:	b01a      	add	sp, #104	; 0x68
 8008648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800864c:	4908      	ldr	r1, [pc, #32]	; (8008670 <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 800864e:	e7e2      	b.n	8008616 <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 8008650:	40022000 	.word	0x40022000
 8008654:	40022100 	.word	0x40022100
 8008658:	fffff0fe 	.word	0xfffff0fe
 800865c:	080075cd 	.word	0x080075cd
 8008660:	0800733d 	.word	0x0800733d
 8008664:	08007639 	.word	0x08007639
 8008668:	58026300 	.word	0x58026300
 800866c:	7fffffc0 	.word	0x7fffffc0
 8008670:	40022300 	.word	0x40022300

08008674 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8008674:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008676:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800867a:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 800867c:	2b01      	cmp	r3, #1
 800867e:	d05a      	beq.n	8008736 <HAL_ADCEx_MultiModeStop_DMA+0xc2>
 8008680:	2601      	movs	r6, #1


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008682:	2103      	movs	r1, #3
 8008684:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008686:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800868a:	f7ff fbcd 	bl	8007e28 <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800868e:	4605      	mov	r5, r0
 8008690:	bb40      	cbnz	r0, 80086e4 <HAL_ADCEx_MultiModeStop_DMA+0x70>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008692:	4b3d      	ldr	r3, [pc, #244]	; (8008788 <HAL_ADCEx_MultiModeStop_DMA+0x114>)
 8008694:	6822      	ldr	r2, [r4, #0]
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008696:	9016      	str	r0, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008698:	429a      	cmp	r2, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800869a:	9017      	str	r0, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800869c:	d028      	beq.n	80086f0 <HAL_ADCEx_MultiModeStop_DMA+0x7c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800869e:	6d63      	ldr	r3, [r4, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80086a0:	4635      	mov	r5, r6
      __HAL_UNLOCK(hadc);
 80086a2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80086a6:	f043 0320 	orr.w	r3, r3, #32
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80086aa:	4628      	mov	r0, r5
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80086ac:	6563      	str	r3, [r4, #84]	; 0x54
}
 80086ae:	b01a      	add	sp, #104	; 0x68
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80086b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80086b4:	f001 f850 	bl	8009758 <HAL_DMA_Abort>
    if (tmp_hal_status == HAL_ERROR)
 80086b8:	2801      	cmp	r0, #1
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80086ba:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_ERROR)
 80086bc:	d053      	beq.n	8008766 <HAL_ADCEx_MultiModeStop_DMA+0xf2>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	6853      	ldr	r3, [r2, #4]
 80086c2:	f023 0310 	bic.w	r3, r3, #16
 80086c6:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d155      	bne.n	8008778 <HAL_ADCEx_MultiModeStop_DMA+0x104>
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 80086cc:	a801      	add	r0, sp, #4
 80086ce:	f7ff fcfd 	bl	80080cc <ADC_Disable>
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 80086d2:	4620      	mov	r0, r4
 80086d4:	f7ff fcfa 	bl	80080cc <ADC_Disable>
    ADC_STATE_CLR_SET(hadc->State,
 80086d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80086da:	4b2c      	ldr	r3, [pc, #176]	; (800878c <HAL_ADCEx_MultiModeStop_DMA+0x118>)
 80086dc:	4013      	ands	r3, r2
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 80086e8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80086ec:	b01a      	add	sp, #104	; 0x68
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	4b27      	ldr	r3, [pc, #156]	; (8008790 <HAL_ADCEx_MultiModeStop_DMA+0x11c>)
 80086f2:	9301      	str	r3, [sp, #4]
    tickstart = HAL_GetTick();
 80086f4:	f7fe fd48 	bl	8007188 <HAL_GetTick>
    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80086f8:	9b01      	ldr	r3, [sp, #4]
    tickstart = HAL_GetTick();
 80086fa:	4605      	mov	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	075b      	lsls	r3, r3, #29
 8008700:	d41d      	bmi.n	800873e <HAL_ADCEx_MultiModeStop_DMA+0xca>
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	075a      	lsls	r2, r3, #29
 8008708:	d5d3      	bpl.n	80086b2 <HAL_ADCEx_MultiModeStop_DMA+0x3e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800870a:	f7fe fd3d 	bl	8007188 <HAL_GetTick>
 800870e:	1b43      	subs	r3, r0, r5
 8008710:	2b05      	cmp	r3, #5
 8008712:	d91b      	bls.n	800874c <HAL_ADCEx_MultiModeStop_DMA+0xd8>
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008714:	9b01      	ldr	r3, [sp, #4]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	0750      	lsls	r0, r2, #29
 800871a:	d51f      	bpl.n	800875c <HAL_ADCEx_MultiModeStop_DMA+0xe8>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008720:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8008722:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8008724:	2200      	movs	r2, #0
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008726:	f043 0310 	orr.w	r3, r3, #16
}
 800872a:	4628      	mov	r0, r5
          __HAL_UNLOCK(hadc);
 800872c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008730:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008732:	b01a      	add	sp, #104	; 0x68
 8008734:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8008736:	2502      	movs	r5, #2
}
 8008738:	4628      	mov	r0, r5
 800873a:	b01a      	add	sp, #104	; 0x68
 800873c:	bd70      	pop	{r4, r5, r6, pc}
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008742:	f7fe fd21 	bl	8007188 <HAL_GetTick>
 8008746:	1b43      	subs	r3, r0, r5
 8008748:	2b05      	cmp	r3, #5
 800874a:	d8e3      	bhi.n	8008714 <HAL_ADCEx_MultiModeStop_DMA+0xa0>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800874c:	6822      	ldr	r2, [r4, #0]
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800874e:	9b01      	ldr	r3, [sp, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f013 0f04 	tst.w	r3, #4
 8008756:	6893      	ldr	r3, [r2, #8]
 8008758:	d1d7      	bne.n	800870a <HAL_ADCEx_MultiModeStop_DMA+0x96>
 800875a:	e7d4      	b.n	8008706 <HAL_ADCEx_MultiModeStop_DMA+0x92>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	6891      	ldr	r1, [r2, #8]
 8008760:	0749      	lsls	r1, r1, #29
 8008762:	d5f5      	bpl.n	8008750 <HAL_ADCEx_MultiModeStop_DMA+0xdc>
 8008764:	e7dc      	b.n	8008720 <HAL_ADCEx_MultiModeStop_DMA+0xac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008766:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008768:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800876a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008770:	6853      	ldr	r3, [r2, #4]
 8008772:	f023 0310 	bic.w	r3, r3, #16
 8008776:	6053      	str	r3, [r2, #4]
      (void) ADC_Disable(hadc);
 8008778:	4620      	mov	r0, r4
 800877a:	f7ff fca7 	bl	80080cc <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 800877e:	a801      	add	r0, sp, #4
 8008780:	f7ff fca4 	bl	80080cc <ADC_Disable>
 8008784:	e7a8      	b.n	80086d8 <HAL_ADCEx_MultiModeStop_DMA+0x64>
 8008786:	bf00      	nop
 8008788:	40022000 	.word	0x40022000
 800878c:	ffffeefe 	.word	0xffffeefe
 8008790:	40022100 	.word	0x40022100

08008794 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop

08008798 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop

0800879c <HAL_ADCEx_LevelOutOfWindow2Callback>:
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop

080087a0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop

080087a4 <HAL_ADCEx_EndOfSamplingCallback>:
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop

080087a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80087a8:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80087aa:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80087ae:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80087b0:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80087b2:	2a01      	cmp	r2, #1
 80087b4:	d04d      	beq.n	8008852 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80087b6:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80087b8:	4c2b      	ldr	r4, [pc, #172]	; (8008868 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80087ba:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80087bc:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80087be:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80087c0:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80087c2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 80087c4:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80087c8:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80087ca:	d008      	beq.n	80087de <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087cc:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80087ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087d2:	f041 0120 	orr.w	r1, r1, #32
 80087d6:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80087d8:	b01a      	add	sp, #104	; 0x68
 80087da:	bcf0      	pop	{r4, r5, r6, r7}
 80087dc:	4770      	bx	lr
 80087de:	4c23      	ldr	r4, [pc, #140]	; (800886c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80087e0:	68a2      	ldr	r2, [r4, #8]
 80087e2:	0752      	lsls	r2, r2, #29
 80087e4:	d50b      	bpl.n	80087fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80087e6:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80087ea:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087ec:	f042 0220 	orr.w	r2, r2, #32
 80087f0:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80087f8:	b01a      	add	sp, #104	; 0x68
 80087fa:	bcf0      	pop	{r4, r5, r6, r7}
 80087fc:	4770      	bx	lr
 80087fe:	68a8      	ldr	r0, [r5, #8]
 8008800:	f010 0004 	ands.w	r0, r0, #4
 8008804:	d1f0      	bne.n	80087e8 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008806:	b1c6      	cbz	r6, 800883a <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008808:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008874 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800880c:	684f      	ldr	r7, [r1, #4]
 800880e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8008812:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008816:	433a      	orrs	r2, r7
 8008818:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800881c:	68ad      	ldr	r5, [r5, #8]
 800881e:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008820:	432a      	orrs	r2, r5
 8008822:	07d4      	lsls	r4, r2, #31
 8008824:	d413      	bmi.n	800884e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8008826:	688a      	ldr	r2, [r1, #8]
 8008828:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800882c:	4316      	orrs	r6, r2
 800882e:	4a10      	ldr	r2, [pc, #64]	; (8008870 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8008830:	400a      	ands	r2, r1
 8008832:	4316      	orrs	r6, r2
 8008834:	f8cc 6008 	str.w	r6, [ip, #8]
 8008838:	e7db      	b.n	80087f2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800883a:	490e      	ldr	r1, [pc, #56]	; (8008874 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 800883c:	688a      	ldr	r2, [r1, #8]
 800883e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008842:	608a      	str	r2, [r1, #8]
 8008844:	68a8      	ldr	r0, [r5, #8]
 8008846:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008848:	4302      	orrs	r2, r0
 800884a:	07d0      	lsls	r0, r2, #31
 800884c:	d505      	bpl.n	800885a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800884e:	2000      	movs	r0, #0
 8008850:	e7cf      	b.n	80087f2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8008852:	2002      	movs	r0, #2
}
 8008854:	b01a      	add	sp, #104	; 0x68
 8008856:	bcf0      	pop	{r4, r5, r6, r7}
 8008858:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800885a:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800885c:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800885e:	4a04      	ldr	r2, [pc, #16]	; (8008870 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8008860:	4022      	ands	r2, r4
 8008862:	608a      	str	r2, [r1, #8]
 8008864:	e7c5      	b.n	80087f2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008866:	bf00      	nop
 8008868:	40022000 	.word	0x40022000
 800886c:	40022100 	.word	0x40022100
 8008870:	fffff0e0 	.word	0xfffff0e0
 8008874:	40022300 	.word	0x40022300

08008878 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008878:	4906      	ldr	r1, [pc, #24]	; (8008894 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800887a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800887e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8008880:	4b05      	ldr	r3, [pc, #20]	; (8008898 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008882:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008884:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008888:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800888c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800888e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008890:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008892:	4770      	bx	lr
 8008894:	e000ed00 	.word	0xe000ed00
 8008898:	05fa0000 	.word	0x05fa0000

0800889c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800889c:	4b1b      	ldr	r3, [pc, #108]	; (800890c <HAL_NVIC_SetPriority+0x70>)
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088a4:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088a6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088aa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088ae:	f1be 0f04 	cmp.w	lr, #4
 80088b2:	bf28      	it	cs
 80088b4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088b8:	f1bc 0f06 	cmp.w	ip, #6
 80088bc:	d91a      	bls.n	80088f4 <HAL_NVIC_SetPriority+0x58>
 80088be:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088c0:	f04f 3cff 	mov.w	ip, #4294967295
 80088c4:	fa0c fc03 	lsl.w	ip, ip, r3
 80088c8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088cc:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80088d0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088d2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80088d6:	ea21 010c 	bic.w	r1, r1, ip
 80088da:	fa01 f103 	lsl.w	r1, r1, r3
 80088de:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80088e2:	db0a      	blt.n	80088fa <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088e4:	0109      	lsls	r1, r1, #4
 80088e6:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <HAL_NVIC_SetPriority+0x74>)
 80088e8:	b2c9      	uxtb	r1, r1
 80088ea:	4403      	add	r3, r0
 80088ec:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80088f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80088f4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088f6:	4613      	mov	r3, r2
 80088f8:	e7e8      	b.n	80088cc <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088fa:	f000 000f 	and.w	r0, r0, #15
 80088fe:	0109      	lsls	r1, r1, #4
 8008900:	4b04      	ldr	r3, [pc, #16]	; (8008914 <HAL_NVIC_SetPriority+0x78>)
 8008902:	b2c9      	uxtb	r1, r1
 8008904:	4403      	add	r3, r0
 8008906:	7619      	strb	r1, [r3, #24]
 8008908:	f85d fb04 	ldr.w	pc, [sp], #4
 800890c:	e000ed00 	.word	0xe000ed00
 8008910:	e000e100 	.word	0xe000e100
 8008914:	e000ecfc 	.word	0xe000ecfc

08008918 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008918:	2800      	cmp	r0, #0
 800891a:	db07      	blt.n	800892c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800891c:	2301      	movs	r3, #1
 800891e:	f000 011f 	and.w	r1, r0, #31
 8008922:	4a03      	ldr	r2, [pc, #12]	; (8008930 <HAL_NVIC_EnableIRQ+0x18>)
 8008924:	0940      	lsrs	r0, r0, #5
 8008926:	408b      	lsls	r3, r1
 8008928:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	e000e100 	.word	0xe000e100

08008934 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008934:	1e43      	subs	r3, r0, #1
 8008936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800893a:	d20c      	bcs.n	8008956 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800893c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008940:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008942:	4906      	ldr	r1, [pc, #24]	; (800895c <HAL_SYSTICK_Config+0x28>)
 8008944:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008948:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800894a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800894c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008950:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008952:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008954:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008956:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	e000ed00 	.word	0xe000ed00

08008960 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8008960:	b188      	cbz	r0, 8008986 <HAL_DAC_Init+0x26>
{
 8008962:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008964:	7903      	ldrb	r3, [r0, #4]
 8008966:	4604      	mov	r4, r0
 8008968:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800896c:	b13b      	cbz	r3, 800897e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800896e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008970:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008972:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8008974:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8008976:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008978:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800897a:	7122      	strb	r2, [r4, #4]
}
 800897c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800897e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8008980:	f7fd ff88 	bl	8006894 <HAL_DAC_MspInit>
 8008984:	e7f3      	b.n	800896e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8008986:	2001      	movs	r0, #1
}
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop

0800898c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800898c:	7942      	ldrb	r2, [r0, #5]
 800898e:	2a01      	cmp	r2, #1
 8008990:	d02e      	beq.n	80089f0 <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008992:	4603      	mov	r3, r0
 8008994:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008998:	6800      	ldr	r0, [r0, #0]
 800899a:	2201      	movs	r2, #1
{
 800899c:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 800899e:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 80089a2:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80089a6:	6804      	ldr	r4, [r0, #0]
 80089a8:	fa02 f20e 	lsl.w	r2, r2, lr
 80089ac:	4322      	orrs	r2, r4
 80089ae:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80089b0:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 80089b2:	b969      	cbnz	r1, 80089d0 <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80089b4:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 80089b8:	4562      	cmp	r2, ip
 80089ba:	d103      	bne.n	80089c4 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80089bc:	6842      	ldr	r2, [r0, #4]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80089c4:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80089c6:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 80089c8:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80089ca:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 80089cc:	715a      	strb	r2, [r3, #5]
}
 80089ce:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80089d0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80089d4:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 80089d8:	4562      	cmp	r2, ip
 80089da:	d1f3      	bne.n	80089c4 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80089dc:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 80089de:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80089e0:	f042 0202 	orr.w	r2, r2, #2
 80089e4:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 80089e6:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80089e8:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 80089ea:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 80089ec:	715a      	strb	r2, [r3, #5]
}
 80089ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 80089f0:	2002      	movs	r0, #2
}
 80089f2:	4770      	bx	lr

080089f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80089f8:	7940      	ldrb	r0, [r0, #5]
{
 80089fa:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 80089fc:	2801      	cmp	r0, #1
 80089fe:	d053      	beq.n	8008aa8 <HAL_DAC_Start_DMA+0xb4>
 8008a00:	460d      	mov	r5, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008a06:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8008a08:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8008a0e:	bb3d      	cbnz	r5, 8008a60 <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008a10:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008a12:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008a14:	4a37      	ldr	r2, [pc, #220]	; (8008af4 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008a16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008afc <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008a1a:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008a1c:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008a1e:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008a26:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8008b00 <HAL_DAC_Start_DMA+0x10c>
 8008a2a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008a2e:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8008a30:	d042      	beq.n	8008ab8 <HAL_DAC_Start_DMA+0xc4>
 8008a32:	2f08      	cmp	r7, #8
 8008a34:	d03d      	beq.n	8008ab2 <HAL_DAC_Start_DMA+0xbe>
 8008a36:	2f00      	cmp	r7, #0
 8008a38:	d038      	beq.n	8008aac <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008a3a:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008a3c:	6837      	ldr	r7, [r6, #0]
 8008a3e:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8008a42:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008a44:	f000 fcf0 	bl	8009428 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008a48:	2300      	movs	r3, #0
 8008a4a:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8008a4c:	bb38      	cbnz	r0, 8008a9e <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	f005 0110 	and.w	r1, r5, #16
 8008a54:	2501      	movs	r5, #1
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	408d      	lsls	r5, r1
 8008a5a:	4315      	orrs	r5, r2
 8008a5c:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8008a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008a60:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8008a62:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008a64:	4a24      	ldr	r2, [pc, #144]	; (8008af8 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008a66:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8008b04 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008a6a:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008a6c:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008a6e:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008a72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008a76:	f8df c090 	ldr.w	ip, [pc, #144]	; 8008b08 <HAL_DAC_Start_DMA+0x114>
 8008a7a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008a7e:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8008a80:	d02f      	beq.n	8008ae2 <HAL_DAC_Start_DMA+0xee>
 8008a82:	2f08      	cmp	r7, #8
 8008a84:	d024      	beq.n	8008ad0 <HAL_DAC_Start_DMA+0xdc>
 8008a86:	b1d7      	cbz	r7, 8008abe <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008a88:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008a8a:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008a8c:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008a90:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008a92:	f000 fcc9 	bl	8009428 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8008a96:	2300      	movs	r3, #0
 8008a98:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d0d7      	beq.n	8008a4e <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008a9e:	6923      	ldr	r3, [r4, #16]
 8008aa0:	f043 0304 	orr.w	r3, r3, #4
 8008aa4:	6123      	str	r3, [r4, #16]
}
 8008aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8008aa8:	2002      	movs	r0, #2
}
 8008aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008aac:	f106 0208 	add.w	r2, r6, #8
        break;
 8008ab0:	e7c4      	b.n	8008a3c <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008ab2:	f106 0210 	add.w	r2, r6, #16
        break;
 8008ab6:	e7c1      	b.n	8008a3c <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008ab8:	f106 020c 	add.w	r2, r6, #12
        break;
 8008abc:	e7be      	b.n	8008a3c <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008abe:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008ac0:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ac4:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008ac8:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008aca:	f000 fcad 	bl	8009428 <HAL_DMA_Start_IT>
 8008ace:	e7e2      	b.n	8008a96 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ad0:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008ad2:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ad6:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008ada:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008adc:	f000 fca4 	bl	8009428 <HAL_DMA_Start_IT>
 8008ae0:	e7d9      	b.n	8008a96 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ae2:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008ae4:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008ae8:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008aec:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008aee:	f000 fc9b 	bl	8009428 <HAL_DMA_Start_IT>
 8008af2:	e7d0      	b.n	8008a96 <HAL_DAC_Start_DMA+0xa2>
 8008af4:	08008b3d 	.word	0x08008b3d
 8008af8:	08008d41 	.word	0x08008d41
 8008afc:	08008b4d 	.word	0x08008b4d
 8008b00:	08008b5d 	.word	0x08008b5d
 8008b04:	08008d55 	.word	0x08008d55
 8008b08:	08008d65 	.word	0x08008d65

08008b0c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008b0c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8008b0e:	6800      	ldr	r0, [r0, #0]
{
 8008b10:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8008b12:	2400      	movs	r4, #0
 8008b14:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8008b16:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8008b18:	b951      	cbnz	r1, 8008b30 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008b1a:	9901      	ldr	r1, [sp, #4]
 8008b1c:	3108      	adds	r1, #8
 8008b1e:	440a      	add	r2, r1
 8008b20:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8008b22:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8008b24:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8008b26:	6013      	str	r3, [r2, #0]
}
 8008b28:	b003      	add	sp, #12
 8008b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b2e:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008b30:	9901      	ldr	r1, [sp, #4]
 8008b32:	3114      	adds	r1, #20
 8008b34:	440a      	add	r2, r1
 8008b36:	9201      	str	r2, [sp, #4]
 8008b38:	e7f3      	b.n	8008b22 <HAL_DAC_SetValue+0x16>
 8008b3a:	bf00      	nop

08008b3c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008b3c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b3e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008b40:	4620      	mov	r0, r4
 8008b42:	f7fc f83b 	bl	8004bbc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008b46:	2301      	movs	r3, #1
 8008b48:	7123      	strb	r3, [r4, #4]
}
 8008b4a:	bd10      	pop	{r4, pc}

08008b4c <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008b4c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008b4e:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008b50:	f7fc f83c 	bl	8004bcc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008b54:	bd08      	pop	{r3, pc}
 8008b56:	bf00      	nop

08008b58 <HAL_DAC_ErrorCallbackCh1>:
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop

08008b5c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008b5c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b5e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008b60:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008b62:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008b64:	f043 0304 	orr.w	r3, r3, #4
 8008b68:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008b6a:	f7ff fff5 	bl	8008b58 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	7123      	strb	r3, [r4, #4]
}
 8008b72:	bd10      	pop	{r4, pc}

08008b74 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop

08008b78 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008b78:	6803      	ldr	r3, [r0, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	0491      	lsls	r1, r2, #18
{
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008b82:	d502      	bpl.n	8008b8a <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b86:	0492      	lsls	r2, r2, #18
 8008b88:	d418      	bmi.n	8008bbc <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	0091      	lsls	r1, r2, #2
 8008b8e:	d502      	bpl.n	8008b96 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8008b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b92:	0092      	lsls	r2, r2, #2
 8008b94:	d400      	bmi.n	8008b98 <HAL_DAC_IRQHandler+0x20>
}
 8008b96:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8008b98:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008b9a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008b9e:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8008ba0:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008ba2:	6922      	ldr	r2, [r4, #16]
 8008ba4:	f042 0202 	orr.w	r2, r2, #2
 8008ba8:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008baa:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8008bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008bb6:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008bb8:	f000 b8e0 	b.w	8008d7c <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008bbc:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008bc2:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008bc4:	6902      	ldr	r2, [r0, #16]
 8008bc6:	f042 0201 	orr.w	r2, r2, #1
 8008bca:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008bcc:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bd4:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008bd6:	f7ff ffcd 	bl	8008b74 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	e7d5      	b.n	8008b8a <HAL_DAC_IRQHandler+0x12>
 8008bde:	bf00      	nop

08008be0 <HAL_DAC_ConfigChannel>:
{
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8008be4:	7943      	ldrb	r3, [r0, #5]
{
 8008be6:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8008be8:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	f000 8098 	beq.w	8008d20 <HAL_DAC_ConfigChannel+0x140>
 8008bf0:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008bf2:	2904      	cmp	r1, #4
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	4614      	mov	r4, r2
  __HAL_LOCK(hdac);
 8008bf8:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008bfa:	f04f 0302 	mov.w	r3, #2
 8008bfe:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008c00:	d045      	beq.n	8008c8e <HAL_DAC_ConfigChannel+0xae>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008c02:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8008c06:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008c08:	6933      	ldr	r3, [r6, #16]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d108      	bne.n	8008c20 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008c0e:	241f      	movs	r4, #31
    tmpreg1 = hdac->Instance->CCR;
 8008c10:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008c12:	4094      	lsls	r4, r2
 8008c14:	ea23 0404 	bic.w	r4, r3, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c18:	6973      	ldr	r3, [r6, #20]
 8008c1a:	4093      	lsls	r3, r2
 8008c1c:	4323      	orrs	r3, r4
    hdac->Instance->CCR = tmpreg1;
 8008c1e:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008c20:	2407      	movs	r4, #7
 8008c22:	fa04 f302 	lsl.w	r3, r4, r2
  tmpreg1 = hdac->Instance->MCR;
 8008c26:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008c28:	ea24 0403 	bic.w	r4, r4, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008c2c:	e9d6 7302 	ldrd	r7, r3, [r6, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d028      	beq.n	8008c86 <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d028      	beq.n	8008c8a <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008c38:	fab7 f387 	clz	r3, r7
 8008c3c:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008c3e:	433b      	orrs	r3, r7
 8008c40:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c42:	6871      	ldr	r1, [r6, #4]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c44:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c46:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c48:	4323      	orrs	r3, r4
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008c4a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 8008c4e:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008c50:	4094      	lsls	r4, r2
 8008c52:	6803      	ldr	r3, [r0, #0]
 8008c54:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008c58:	f640 74fe 	movw	r4, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008c5c:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008c5e:	4094      	lsls	r4, r2
  tmpreg1 = hdac->Instance->CR;
 8008c60:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008c62:	ea23 0304 	bic.w	r3, r3, r4
  hdac->State = HAL_DAC_STATE_READY;
 8008c66:	2401      	movs	r4, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c68:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c6a:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8008c6c:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c6e:	fa01 f302 	lsl.w	r3, r1, r2
 8008c72:	6802      	ldr	r2, [r0, #0]
  __HAL_UNLOCK(hdac);
 8008c74:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c76:	ea22 0203 	bic.w	r2, r2, r3
 8008c7a:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 8008c7c:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8008c7e:	712c      	strb	r4, [r5, #4]
  __HAL_UNLOCK(hdac);
 8008c80:	7169      	strb	r1, [r5, #5]
}
 8008c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	e7d9      	b.n	8008c3e <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e7d7      	b.n	8008c3e <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 8008c8e:	f7fe fa7b 	bl	8007188 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008c92:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8008c94:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 8008c98:	bb1c      	cbnz	r4, 8008ce2 <HAL_DAC_ConfigChannel+0x102>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008c9a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8008d38 <HAL_DAC_ConfigChannel+0x158>
 8008c9e:	ea13 0f08 	tst.w	r3, r8
 8008ca2:	d00d      	beq.n	8008cc0 <HAL_DAC_ConfigChannel+0xe0>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008ca4:	f7fe fa70 	bl	8007188 <HAL_GetTick>
 8008ca8:	1bc3      	subs	r3, r0, r7
 8008caa:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008cac:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008cae:	d903      	bls.n	8008cb8 <HAL_DAC_ConfigChannel+0xd8>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cb2:	ea12 0f08 	tst.w	r2, r8
 8008cb6:	d136      	bne.n	8008d26 <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cba:	ea13 0f08 	tst.w	r3, r8
 8008cbe:	d1f1      	bne.n	8008ca4 <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	f7fe fa67 	bl	8007194 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008cc6:	6828      	ldr	r0, [r5, #0]
 8008cc8:	69b3      	ldr	r3, [r6, #24]
 8008cca:	6403      	str	r3, [r0, #64]	; 0x40
 8008ccc:	e011      	b.n	8008cf2 <HAL_DAC_ConfigChannel+0x112>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008cce:	f7fe fa5b 	bl	8007188 <HAL_GetTick>
 8008cd2:	1bc3      	subs	r3, r0, r7
 8008cd4:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008cd6:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008cd8:	d902      	bls.n	8008ce0 <HAL_DAC_ConfigChannel+0x100>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cdc:	2a00      	cmp	r2, #0
 8008cde:	db22      	blt.n	8008d26 <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dbf3      	blt.n	8008cce <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 8008ce6:	2001      	movs	r0, #1
 8008ce8:	f7fe fa54 	bl	8007194 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008cec:	6828      	ldr	r0, [r5, #0]
 8008cee:	69b3      	ldr	r3, [r6, #24]
 8008cf0:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008cf2:	f004 0210 	and.w	r2, r4, #16
 8008cf6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008cfa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008cfc:	4091      	lsls	r1, r2
 8008cfe:	ea23 0301 	bic.w	r3, r3, r1
 8008d02:	69f1      	ldr	r1, [r6, #28]
 8008d04:	4091      	lsls	r1, r2
 8008d06:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008d08:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008d0a:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008d0c:	4091      	lsls	r1, r2
 8008d0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008d10:	ea23 0301 	bic.w	r3, r3, r1
 8008d14:	6a31      	ldr	r1, [r6, #32]
 8008d16:	4091      	lsls	r1, r2
 8008d18:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008d1a:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008d1c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008d1e:	e773      	b.n	8008c08 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 8008d20:	2002      	movs	r0, #2
}
 8008d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008d26:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008d28:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008d2a:	f043 0308 	orr.w	r3, r3, #8
            return HAL_TIMEOUT;
 8008d2e:	4610      	mov	r0, r2
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008d30:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008d32:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8008d34:	e7a5      	b.n	8008c82 <HAL_DAC_ConfigChannel+0xa2>
 8008d36:	bf00      	nop
 8008d38:	20008000 	.word	0x20008000

08008d3c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop

08008d40 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008d40:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d42:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008d44:	4620      	mov	r0, r4
 8008d46:	f7ff fff9 	bl	8008d3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	7123      	strb	r3, [r4, #4]
}
 8008d4e:	bd10      	pop	{r4, pc}

08008d50 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop

08008d54 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008d54:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008d56:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008d58:	f7ff fffa 	bl	8008d50 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008d5c:	bd08      	pop	{r3, pc}
 8008d5e:	bf00      	nop

08008d60 <HAL_DACEx_ErrorCallbackCh2>:
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop

08008d64 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008d64:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d66:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008d68:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008d6a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008d6c:	f043 0304 	orr.w	r3, r3, #4
 8008d70:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008d72:	f7ff fff5 	bl	8008d60 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008d76:	2301      	movs	r3, #1
 8008d78:	7123      	strb	r3, [r4, #4]
}
 8008d7a:	bd10      	pop	{r4, pc}

08008d7c <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop

08008d80 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d80:	6802      	ldr	r2, [r0, #0]
 8008d82:	4b34      	ldr	r3, [pc, #208]	; (8008e54 <DMA_CalcBaseAndBitshift+0xd4>)
 8008d84:	4934      	ldr	r1, [pc, #208]	; (8008e58 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8008d86:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d88:	4d34      	ldr	r5, [pc, #208]	; (8008e5c <DMA_CalcBaseAndBitshift+0xdc>)
 8008d8a:	4c35      	ldr	r4, [pc, #212]	; (8008e60 <DMA_CalcBaseAndBitshift+0xe0>)
 8008d8c:	42aa      	cmp	r2, r5
 8008d8e:	bf18      	it	ne
 8008d90:	429a      	cmpne	r2, r3
 8008d92:	bf0c      	ite	eq
 8008d94:	2301      	moveq	r3, #1
 8008d96:	2300      	movne	r3, #0
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	bf08      	it	eq
 8008d9c:	f043 0301 	orreq.w	r3, r3, #1
 8008da0:	3130      	adds	r1, #48	; 0x30
 8008da2:	42a2      	cmp	r2, r4
 8008da4:	bf08      	it	eq
 8008da6:	f043 0301 	orreq.w	r3, r3, #1
 8008daa:	3430      	adds	r4, #48	; 0x30
 8008dac:	428a      	cmp	r2, r1
 8008dae:	bf08      	it	eq
 8008db0:	f043 0301 	orreq.w	r3, r3, #1
 8008db4:	3130      	adds	r1, #48	; 0x30
 8008db6:	42a2      	cmp	r2, r4
 8008db8:	bf08      	it	eq
 8008dba:	f043 0301 	orreq.w	r3, r3, #1
 8008dbe:	3430      	adds	r4, #48	; 0x30
 8008dc0:	428a      	cmp	r2, r1
 8008dc2:	bf08      	it	eq
 8008dc4:	f043 0301 	orreq.w	r3, r3, #1
 8008dc8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008dcc:	42a2      	cmp	r2, r4
 8008dce:	bf08      	it	eq
 8008dd0:	f043 0301 	orreq.w	r3, r3, #1
 8008dd4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008dd8:	428a      	cmp	r2, r1
 8008dda:	bf08      	it	eq
 8008ddc:	f043 0301 	orreq.w	r3, r3, #1
 8008de0:	3130      	adds	r1, #48	; 0x30
 8008de2:	42a2      	cmp	r2, r4
 8008de4:	bf08      	it	eq
 8008de6:	f043 0301 	orreq.w	r3, r3, #1
 8008dea:	3430      	adds	r4, #48	; 0x30
 8008dec:	428a      	cmp	r2, r1
 8008dee:	bf08      	it	eq
 8008df0:	f043 0301 	orreq.w	r3, r3, #1
 8008df4:	3130      	adds	r1, #48	; 0x30
 8008df6:	42a2      	cmp	r2, r4
 8008df8:	bf08      	it	eq
 8008dfa:	f043 0301 	orreq.w	r3, r3, #1
 8008dfe:	3430      	adds	r4, #48	; 0x30
 8008e00:	428a      	cmp	r2, r1
 8008e02:	bf08      	it	eq
 8008e04:	f043 0301 	orreq.w	r3, r3, #1
 8008e08:	3130      	adds	r1, #48	; 0x30
 8008e0a:	42a2      	cmp	r2, r4
 8008e0c:	bf08      	it	eq
 8008e0e:	f043 0301 	orreq.w	r3, r3, #1
 8008e12:	428a      	cmp	r2, r1
 8008e14:	bf08      	it	eq
 8008e16:	f043 0301 	orreq.w	r3, r3, #1
 8008e1a:	b913      	cbnz	r3, 8008e22 <DMA_CalcBaseAndBitshift+0xa2>
 8008e1c:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <DMA_CalcBaseAndBitshift+0xe4>)
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d113      	bne.n	8008e4a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e22:	b2d3      	uxtb	r3, r2
 8008e24:	4910      	ldr	r1, [pc, #64]	; (8008e68 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008e26:	4c11      	ldr	r4, [pc, #68]	; (8008e6c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e28:	3b10      	subs	r3, #16
 8008e2a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8008e2e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008e32:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008e36:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008e3a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008e3c:	bf88      	it	hi
 8008e3e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008e40:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008e42:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	bc30      	pop	{r4, r5}
 8008e48:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008e4a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8008e4e:	6583      	str	r3, [r0, #88]	; 0x58
 8008e50:	e7f8      	b.n	8008e44 <DMA_CalcBaseAndBitshift+0xc4>
 8008e52:	bf00      	nop
 8008e54:	40020010 	.word	0x40020010
 8008e58:	40020040 	.word	0x40020040
 8008e5c:	40020028 	.word	0x40020028
 8008e60:	40020058 	.word	0x40020058
 8008e64:	400204b8 	.word	0x400204b8
 8008e68:	aaaaaaab 	.word	0xaaaaaaab
 8008e6c:	080194c4 	.word	0x080194c4
 8008e70:	fffffc00 	.word	0xfffffc00

08008e74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008e74:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e76:	4a29      	ldr	r2, [pc, #164]	; (8008f1c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8008e78:	4929      	ldr	r1, [pc, #164]	; (8008f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8008e7a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e7c:	4d29      	ldr	r5, [pc, #164]	; (8008f24 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8008e7e:	4c2a      	ldr	r4, [pc, #168]	; (8008f28 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8008e80:	42ab      	cmp	r3, r5
 8008e82:	bf18      	it	ne
 8008e84:	4293      	cmpne	r3, r2
 8008e86:	bf0c      	ite	eq
 8008e88:	2201      	moveq	r2, #1
 8008e8a:	2200      	movne	r2, #0
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	bf08      	it	eq
 8008e90:	f042 0201 	orreq.w	r2, r2, #1
 8008e94:	3128      	adds	r1, #40	; 0x28
 8008e96:	42a3      	cmp	r3, r4
 8008e98:	bf08      	it	eq
 8008e9a:	f042 0201 	orreq.w	r2, r2, #1
 8008e9e:	3428      	adds	r4, #40	; 0x28
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	bf08      	it	eq
 8008ea4:	f042 0201 	orreq.w	r2, r2, #1
 8008ea8:	3128      	adds	r1, #40	; 0x28
 8008eaa:	42a3      	cmp	r3, r4
 8008eac:	bf08      	it	eq
 8008eae:	f042 0201 	orreq.w	r2, r2, #1
 8008eb2:	428b      	cmp	r3, r1
 8008eb4:	bf08      	it	eq
 8008eb6:	f042 0201 	orreq.w	r2, r2, #1
 8008eba:	b912      	cbnz	r2, 8008ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8008ebc:	4a1b      	ldr	r2, [pc, #108]	; (8008f2c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d113      	bne.n	8008eea <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	4c1a      	ldr	r4, [pc, #104]	; (8008f30 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008ec6:	4a1b      	ldr	r2, [pc, #108]	; (8008f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008ec8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008eca:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008ecc:	4d1a      	ldr	r5, [pc, #104]	; (8008f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008ece:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008ed2:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008ed4:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008ed8:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008edc:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008ede:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008ee2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008ee4:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008ee6:	bc30      	pop	{r4, r5}
 8008ee8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008eea:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008eec:	4913      	ldr	r1, [pc, #76]	; (8008f3c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008eee:	4c14      	ldr	r4, [pc, #80]	; (8008f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008ef0:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008ef2:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008ef4:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008ef6:	fba4 2302 	umull	r2, r3, r4, r2
 8008efa:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008efe:	d800      	bhi.n	8008f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8008f00:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008f02:	4a10      	ldr	r2, [pc, #64]	; (8008f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f04:	f003 051f 	and.w	r5, r3, #31
 8008f08:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008f0a:	4c0f      	ldr	r4, [pc, #60]	; (8008f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008f0c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f0e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008f10:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008f12:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f14:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008f16:	6602      	str	r2, [r0, #96]	; 0x60
}
 8008f18:	e7e5      	b.n	8008ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8008f1a:	bf00      	nop
 8008f1c:	58025408 	.word	0x58025408
 8008f20:	58025430 	.word	0x58025430
 8008f24:	5802541c 	.word	0x5802541c
 8008f28:	58025444 	.word	0x58025444
 8008f2c:	58025494 	.word	0x58025494
 8008f30:	cccccccd 	.word	0xcccccccd
 8008f34:	16009600 	.word	0x16009600
 8008f38:	58025880 	.word	0x58025880
 8008f3c:	bffdfbf0 	.word	0xbffdfbf0
 8008f40:	aaaaaaab 	.word	0xaaaaaaab
 8008f44:	10008200 	.word	0x10008200
 8008f48:	40020880 	.word	0x40020880

08008f4c <HAL_DMA_Init>:
{
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008f50:	f7fe f91a 	bl	8007188 <HAL_GetTick>
  if(hdma == NULL)
 8008f54:	2c00      	cmp	r4, #0
 8008f56:	f000 8177 	beq.w	8009248 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	4a92      	ldr	r2, [pc, #584]	; (80091a8 <HAL_DMA_Init+0x25c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d048      	beq.n	8008ff6 <HAL_DMA_Init+0xaa>
 8008f64:	3218      	adds	r2, #24
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d045      	beq.n	8008ff6 <HAL_DMA_Init+0xaa>
 8008f6a:	3230      	adds	r2, #48	; 0x30
 8008f6c:	498f      	ldr	r1, [pc, #572]	; (80091ac <HAL_DMA_Init+0x260>)
 8008f6e:	428b      	cmp	r3, r1
 8008f70:	bf18      	it	ne
 8008f72:	4293      	cmpne	r3, r2
 8008f74:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008f78:	bf0c      	ite	eq
 8008f7a:	2201      	moveq	r2, #1
 8008f7c:	2200      	movne	r2, #0
 8008f7e:	428b      	cmp	r3, r1
 8008f80:	bf08      	it	eq
 8008f82:	f042 0201 	orreq.w	r2, r2, #1
 8008f86:	3118      	adds	r1, #24
 8008f88:	428b      	cmp	r3, r1
 8008f8a:	bf08      	it	eq
 8008f8c:	f042 0201 	orreq.w	r2, r2, #1
 8008f90:	3118      	adds	r1, #24
 8008f92:	428b      	cmp	r3, r1
 8008f94:	bf08      	it	eq
 8008f96:	f042 0201 	orreq.w	r2, r2, #1
 8008f9a:	3118      	adds	r1, #24
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	bf08      	it	eq
 8008fa0:	f042 0201 	orreq.w	r2, r2, #1
 8008fa4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8008fa8:	428b      	cmp	r3, r1
 8008faa:	bf08      	it	eq
 8008fac:	f042 0201 	orreq.w	r2, r2, #1
 8008fb0:	3118      	adds	r1, #24
 8008fb2:	428b      	cmp	r3, r1
 8008fb4:	bf08      	it	eq
 8008fb6:	f042 0201 	orreq.w	r2, r2, #1
 8008fba:	3118      	adds	r1, #24
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	bf08      	it	eq
 8008fc0:	f042 0201 	orreq.w	r2, r2, #1
 8008fc4:	3118      	adds	r1, #24
 8008fc6:	428b      	cmp	r3, r1
 8008fc8:	bf08      	it	eq
 8008fca:	f042 0201 	orreq.w	r2, r2, #1
 8008fce:	3118      	adds	r1, #24
 8008fd0:	428b      	cmp	r3, r1
 8008fd2:	bf08      	it	eq
 8008fd4:	f042 0201 	orreq.w	r2, r2, #1
 8008fd8:	3118      	adds	r1, #24
 8008fda:	428b      	cmp	r3, r1
 8008fdc:	bf08      	it	eq
 8008fde:	f042 0201 	orreq.w	r2, r2, #1
 8008fe2:	3118      	adds	r1, #24
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	bf08      	it	eq
 8008fe8:	f042 0201 	orreq.w	r2, r2, #1
 8008fec:	b91a      	cbnz	r2, 8008ff6 <HAL_DMA_Init+0xaa>
 8008fee:	4a70      	ldr	r2, [pc, #448]	; (80091b0 <HAL_DMA_Init+0x264>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	f040 8198 	bne.w	8009326 <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 8008ff6:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ff8:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8008ffa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ffe:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	f022 0201 	bic.w	r2, r2, #1
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	e006      	b.n	800901a <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800900c:	f7fe f8bc 	bl	8007188 <HAL_GetTick>
 8009010:	1b43      	subs	r3, r0, r5
 8009012:	2b05      	cmp	r3, #5
 8009014:	f200 80ff 	bhi.w	8009216 <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	07d6      	lsls	r6, r2, #31
 800901e:	d4f5      	bmi.n	800900c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8009020:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009024:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8009026:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009028:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800902a:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800902c:	4302      	orrs	r2, r0
 800902e:	6960      	ldr	r0, [r4, #20]
 8009030:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009032:	69e0      	ldr	r0, [r4, #28]
 8009034:	430a      	orrs	r2, r1
 8009036:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009038:	485e      	ldr	r0, [pc, #376]	; (80091b4 <HAL_DMA_Init+0x268>)
 800903a:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 800903c:	6a25      	ldr	r5, [r4, #32]
 800903e:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009040:	4d5d      	ldr	r5, [pc, #372]	; (80091b8 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 8009042:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009044:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009046:	2804      	cmp	r0, #4
 8009048:	f000 8100 	beq.w	800924c <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800904c:	682e      	ldr	r6, [r5, #0]
 800904e:	4d5b      	ldr	r5, [pc, #364]	; (80091bc <HAL_DMA_Init+0x270>)
 8009050:	4035      	ands	r5, r6
 8009052:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8009056:	f080 80bb 	bcs.w	80091d0 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800905a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800905c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800905e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8009062:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009064:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009066:	4620      	mov	r0, r4
 8009068:	f7ff fe8a 	bl	8008d80 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800906c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800906e:	233f      	movs	r3, #63	; 0x3f
 8009070:	f002 021f 	and.w	r2, r2, #31
 8009074:	4093      	lsls	r3, r2
 8009076:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009078:	6822      	ldr	r2, [r4, #0]
 800907a:	4b4b      	ldr	r3, [pc, #300]	; (80091a8 <HAL_DMA_Init+0x25c>)
 800907c:	4850      	ldr	r0, [pc, #320]	; (80091c0 <HAL_DMA_Init+0x274>)
 800907e:	494b      	ldr	r1, [pc, #300]	; (80091ac <HAL_DMA_Init+0x260>)
 8009080:	4282      	cmp	r2, r0
 8009082:	bf18      	it	ne
 8009084:	429a      	cmpne	r2, r3
 8009086:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800908a:	bf0c      	ite	eq
 800908c:	2301      	moveq	r3, #1
 800908e:	2300      	movne	r3, #0
 8009090:	428a      	cmp	r2, r1
 8009092:	bf08      	it	eq
 8009094:	f043 0301 	orreq.w	r3, r3, #1
 8009098:	3130      	adds	r1, #48	; 0x30
 800909a:	4282      	cmp	r2, r0
 800909c:	bf08      	it	eq
 800909e:	f043 0301 	orreq.w	r3, r3, #1
 80090a2:	3030      	adds	r0, #48	; 0x30
 80090a4:	428a      	cmp	r2, r1
 80090a6:	bf08      	it	eq
 80090a8:	f043 0301 	orreq.w	r3, r3, #1
 80090ac:	3130      	adds	r1, #48	; 0x30
 80090ae:	4282      	cmp	r2, r0
 80090b0:	bf08      	it	eq
 80090b2:	f043 0301 	orreq.w	r3, r3, #1
 80090b6:	3030      	adds	r0, #48	; 0x30
 80090b8:	428a      	cmp	r2, r1
 80090ba:	bf08      	it	eq
 80090bc:	f043 0301 	orreq.w	r3, r3, #1
 80090c0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80090c4:	4282      	cmp	r2, r0
 80090c6:	bf08      	it	eq
 80090c8:	f043 0301 	orreq.w	r3, r3, #1
 80090cc:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80090d0:	428a      	cmp	r2, r1
 80090d2:	bf08      	it	eq
 80090d4:	f043 0301 	orreq.w	r3, r3, #1
 80090d8:	3130      	adds	r1, #48	; 0x30
 80090da:	4282      	cmp	r2, r0
 80090dc:	bf08      	it	eq
 80090de:	f043 0301 	orreq.w	r3, r3, #1
 80090e2:	3030      	adds	r0, #48	; 0x30
 80090e4:	428a      	cmp	r2, r1
 80090e6:	bf08      	it	eq
 80090e8:	f043 0301 	orreq.w	r3, r3, #1
 80090ec:	3130      	adds	r1, #48	; 0x30
 80090ee:	4282      	cmp	r2, r0
 80090f0:	bf08      	it	eq
 80090f2:	f043 0301 	orreq.w	r3, r3, #1
 80090f6:	3030      	adds	r0, #48	; 0x30
 80090f8:	428a      	cmp	r2, r1
 80090fa:	bf08      	it	eq
 80090fc:	f043 0301 	orreq.w	r3, r3, #1
 8009100:	3130      	adds	r1, #48	; 0x30
 8009102:	4282      	cmp	r2, r0
 8009104:	bf08      	it	eq
 8009106:	f043 0301 	orreq.w	r3, r3, #1
 800910a:	3030      	adds	r0, #48	; 0x30
 800910c:	428a      	cmp	r2, r1
 800910e:	bf08      	it	eq
 8009110:	f043 0301 	orreq.w	r3, r3, #1
 8009114:	492b      	ldr	r1, [pc, #172]	; (80091c4 <HAL_DMA_Init+0x278>)
 8009116:	4282      	cmp	r2, r0
 8009118:	bf08      	it	eq
 800911a:	f043 0301 	orreq.w	r3, r3, #1
 800911e:	482a      	ldr	r0, [pc, #168]	; (80091c8 <HAL_DMA_Init+0x27c>)
 8009120:	428a      	cmp	r2, r1
 8009122:	bf08      	it	eq
 8009124:	f043 0301 	orreq.w	r3, r3, #1
 8009128:	3128      	adds	r1, #40	; 0x28
 800912a:	4282      	cmp	r2, r0
 800912c:	bf08      	it	eq
 800912e:	f043 0301 	orreq.w	r3, r3, #1
 8009132:	3028      	adds	r0, #40	; 0x28
 8009134:	428a      	cmp	r2, r1
 8009136:	bf08      	it	eq
 8009138:	f043 0301 	orreq.w	r3, r3, #1
 800913c:	3128      	adds	r1, #40	; 0x28
 800913e:	4282      	cmp	r2, r0
 8009140:	bf08      	it	eq
 8009142:	f043 0301 	orreq.w	r3, r3, #1
 8009146:	3028      	adds	r0, #40	; 0x28
 8009148:	428a      	cmp	r2, r1
 800914a:	bf08      	it	eq
 800914c:	f043 0301 	orreq.w	r3, r3, #1
 8009150:	3128      	adds	r1, #40	; 0x28
 8009152:	4282      	cmp	r2, r0
 8009154:	bf08      	it	eq
 8009156:	f043 0301 	orreq.w	r3, r3, #1
 800915a:	428a      	cmp	r2, r1
 800915c:	bf08      	it	eq
 800915e:	f043 0301 	orreq.w	r3, r3, #1
 8009162:	b913      	cbnz	r3, 800916a <HAL_DMA_Init+0x21e>
 8009164:	4b19      	ldr	r3, [pc, #100]	; (80091cc <HAL_DMA_Init+0x280>)
 8009166:	429a      	cmp	r2, r3
 8009168:	d118      	bne.n	800919c <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800916a:	4620      	mov	r0, r4
 800916c:	f7ff fe82 	bl	8008e74 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009170:	68a3      	ldr	r3, [r4, #8]
 8009172:	2b80      	cmp	r3, #128	; 0x80
 8009174:	d05c      	beq.n	8009230 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009176:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009178:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800917a:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800917c:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800917e:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009182:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009184:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009186:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009188:	d859      	bhi.n	800923e <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800918a:	1e50      	subs	r0, r2, #1
 800918c:	2807      	cmp	r0, #7
 800918e:	d96e      	bls.n	800926e <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009190:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009192:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009196:	2000      	movs	r0, #0
 8009198:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800919a:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800919c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800919e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091a0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80091a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80091a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a8:	40020010 	.word	0x40020010
 80091ac:	40020040 	.word	0x40020040
 80091b0:	400204b8 	.word	0x400204b8
 80091b4:	fe10803f 	.word	0xfe10803f
 80091b8:	5c001000 	.word	0x5c001000
 80091bc:	ffff0000 	.word	0xffff0000
 80091c0:	40020028 	.word	0x40020028
 80091c4:	58025408 	.word	0x58025408
 80091c8:	5802541c 	.word	0x5802541c
 80091cc:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80091d0:	6865      	ldr	r5, [r4, #4]
 80091d2:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 80091d6:	2e1f      	cmp	r6, #31
 80091d8:	d924      	bls.n	8009224 <HAL_DMA_Init+0x2d8>
 80091da:	3d4f      	subs	r5, #79	; 0x4f
 80091dc:	2d03      	cmp	r5, #3
 80091de:	d801      	bhi.n	80091e4 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 80091e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80091e4:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80091e6:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80091e8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80091ea:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 80091ee:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80091f2:	f47f af37 	bne.w	8009064 <HAL_DMA_Init+0x118>
 80091f6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80091f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80091fa:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	f43f af31 	beq.w	8009064 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009202:	2900      	cmp	r1, #0
 8009204:	d169      	bne.n	80092da <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 8009206:	2801      	cmp	r0, #1
 8009208:	f000 8088 	beq.w	800931c <HAL_DMA_Init+0x3d0>
 800920c:	f030 0102 	bics.w	r1, r0, #2
 8009210:	f47f af28 	bne.w	8009064 <HAL_DMA_Init+0x118>
 8009214:	e069      	b.n	80092ea <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009216:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8009218:	2303      	movs	r3, #3
        return HAL_ERROR;
 800921a:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800921c:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800921e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009224:	4d73      	ldr	r5, [pc, #460]	; (80093f4 <HAL_DMA_Init+0x4a8>)
 8009226:	fa25 f606 	lsr.w	r6, r5, r6
 800922a:	07f5      	lsls	r5, r6, #31
 800922c:	d5da      	bpl.n	80091e4 <HAL_DMA_Init+0x298>
 800922e:	e7d7      	b.n	80091e0 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009230:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009232:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009234:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009238:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800923a:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800923c:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800923e:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8009240:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009244:	6763      	str	r3, [r4, #116]	; 0x74
 8009246:	e7a9      	b.n	800919c <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 8009248:	2001      	movs	r0, #1
}
 800924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800924c:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800924e:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8009252:	432e      	orrs	r6, r5
 8009254:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009256:	4e68      	ldr	r6, [pc, #416]	; (80093f8 <HAL_DMA_Init+0x4ac>)
 8009258:	403e      	ands	r6, r7
 800925a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 800925e:	d2b7      	bcs.n	80091d0 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009260:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009262:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009264:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8009268:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800926c:	e7c4      	b.n	80091f8 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800926e:	6821      	ldr	r1, [r4, #0]
 8009270:	4b62      	ldr	r3, [pc, #392]	; (80093fc <HAL_DMA_Init+0x4b0>)
 8009272:	4d63      	ldr	r5, [pc, #396]	; (8009400 <HAL_DMA_Init+0x4b4>)
 8009274:	42a9      	cmp	r1, r5
 8009276:	bf18      	it	ne
 8009278:	4299      	cmpne	r1, r3
 800927a:	f105 0514 	add.w	r5, r5, #20
 800927e:	bf0c      	ite	eq
 8009280:	2301      	moveq	r3, #1
 8009282:	2300      	movne	r3, #0
 8009284:	42a9      	cmp	r1, r5
 8009286:	bf08      	it	eq
 8009288:	f043 0301 	orreq.w	r3, r3, #1
 800928c:	3514      	adds	r5, #20
 800928e:	42a9      	cmp	r1, r5
 8009290:	bf08      	it	eq
 8009292:	f043 0301 	orreq.w	r3, r3, #1
 8009296:	3514      	adds	r5, #20
 8009298:	42a9      	cmp	r1, r5
 800929a:	bf08      	it	eq
 800929c:	f043 0301 	orreq.w	r3, r3, #1
 80092a0:	3514      	adds	r5, #20
 80092a2:	42a9      	cmp	r1, r5
 80092a4:	bf08      	it	eq
 80092a6:	f043 0301 	orreq.w	r3, r3, #1
 80092aa:	3514      	adds	r5, #20
 80092ac:	42a9      	cmp	r1, r5
 80092ae:	bf08      	it	eq
 80092b0:	f043 0301 	orreq.w	r3, r3, #1
 80092b4:	b93b      	cbnz	r3, 80092c6 <HAL_DMA_Init+0x37a>
 80092b6:	4b53      	ldr	r3, [pc, #332]	; (8009404 <HAL_DMA_Init+0x4b8>)
 80092b8:	4299      	cmp	r1, r3
 80092ba:	d004      	beq.n	80092c6 <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80092bc:	4b52      	ldr	r3, [pc, #328]	; (8009408 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80092be:	4953      	ldr	r1, [pc, #332]	; (800940c <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80092c4:	e003      	b.n	80092ce <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80092c6:	4b52      	ldr	r3, [pc, #328]	; (8009410 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80092c8:	4952      	ldr	r1, [pc, #328]	; (8009414 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80092ce:	2201      	movs	r2, #1
 80092d0:	4082      	lsls	r2, r0
 80092d2:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80092d6:	6762      	str	r2, [r4, #116]	; 0x74
 80092d8:	e75d      	b.n	8009196 <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80092da:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80092de:	d00e      	beq.n	80092fe <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 80092e0:	2802      	cmp	r0, #2
 80092e2:	d905      	bls.n	80092f0 <HAL_DMA_Init+0x3a4>
 80092e4:	2803      	cmp	r0, #3
 80092e6:	f47f aebd 	bne.w	8009064 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092ea:	01e9      	lsls	r1, r5, #7
 80092ec:	f57f aeba 	bpl.w	8009064 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 80092f0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80092f2:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80092f4:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80092f6:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80092f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80092fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 80092fe:	2803      	cmp	r0, #3
 8009300:	f63f aeb0 	bhi.w	8009064 <HAL_DMA_Init+0x118>
 8009304:	a101      	add	r1, pc, #4	; (adr r1, 800930c <HAL_DMA_Init+0x3c0>)
 8009306:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800930a:	bf00      	nop
 800930c:	080092f1 	.word	0x080092f1
 8009310:	080092eb 	.word	0x080092eb
 8009314:	080092f1 	.word	0x080092f1
 8009318:	0800931d 	.word	0x0800931d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800931c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8009320:	f47f aea0 	bne.w	8009064 <HAL_DMA_Init+0x118>
 8009324:	e7e4      	b.n	80092f0 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009326:	4a35      	ldr	r2, [pc, #212]	; (80093fc <HAL_DMA_Init+0x4b0>)
 8009328:	4835      	ldr	r0, [pc, #212]	; (8009400 <HAL_DMA_Init+0x4b4>)
 800932a:	493b      	ldr	r1, [pc, #236]	; (8009418 <HAL_DMA_Init+0x4cc>)
 800932c:	4283      	cmp	r3, r0
 800932e:	bf18      	it	ne
 8009330:	4293      	cmpne	r3, r2
 8009332:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8009336:	bf0c      	ite	eq
 8009338:	2201      	moveq	r2, #1
 800933a:	2200      	movne	r2, #0
 800933c:	428b      	cmp	r3, r1
 800933e:	bf08      	it	eq
 8009340:	f042 0201 	orreq.w	r2, r2, #1
 8009344:	3128      	adds	r1, #40	; 0x28
 8009346:	4283      	cmp	r3, r0
 8009348:	bf08      	it	eq
 800934a:	f042 0201 	orreq.w	r2, r2, #1
 800934e:	3028      	adds	r0, #40	; 0x28
 8009350:	428b      	cmp	r3, r1
 8009352:	bf08      	it	eq
 8009354:	f042 0201 	orreq.w	r2, r2, #1
 8009358:	3128      	adds	r1, #40	; 0x28
 800935a:	4283      	cmp	r3, r0
 800935c:	bf08      	it	eq
 800935e:	f042 0201 	orreq.w	r2, r2, #1
 8009362:	428b      	cmp	r3, r1
 8009364:	bf08      	it	eq
 8009366:	f042 0201 	orreq.w	r2, r2, #1
 800936a:	b912      	cbnz	r2, 8009372 <HAL_DMA_Init+0x426>
 800936c:	4a25      	ldr	r2, [pc, #148]	; (8009404 <HAL_DMA_Init+0x4b8>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d138      	bne.n	80093e4 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 8009372:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8009374:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009376:	4d29      	ldr	r5, [pc, #164]	; (800941c <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8009378:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800937c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009380:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009382:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009384:	68a2      	ldr	r2, [r4, #8]
 8009386:	2a40      	cmp	r2, #64	; 0x40
 8009388:	d02a      	beq.n	80093e0 <HAL_DMA_Init+0x494>
 800938a:	2a80      	cmp	r2, #128	; 0x80
 800938c:	bf0c      	ite	eq
 800938e:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8009392:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009394:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009396:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800939a:	08d2      	lsrs	r2, r2, #3
 800939c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80093a0:	6961      	ldr	r1, [r4, #20]
 80093a2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80093a6:	69a1      	ldr	r1, [r4, #24]
 80093a8:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80093ac:	69e1      	ldr	r1, [r4, #28]
 80093ae:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80093b2:	491b      	ldr	r1, [pc, #108]	; (8009420 <HAL_DMA_Init+0x4d4>)
 80093b4:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80093b8:	4419      	add	r1, r3
 80093ba:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80093bc:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80093be:	4819      	ldr	r0, [pc, #100]	; (8009424 <HAL_DMA_Init+0x4d8>)
 80093c0:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80093c4:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80093c6:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80093c8:	090b      	lsrs	r3, r1, #4
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80093ce:	f7ff fcd7 	bl	8008d80 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80093d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80093d4:	2301      	movs	r3, #1
 80093d6:	f002 021f 	and.w	r2, r2, #31
 80093da:	4093      	lsls	r3, r2
 80093dc:	6043      	str	r3, [r0, #4]
 80093de:	e64b      	b.n	8009078 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80093e0:	2010      	movs	r0, #16
 80093e2:	e7d7      	b.n	8009394 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80093e4:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80093e6:	2303      	movs	r3, #3
    return HAL_ERROR;
 80093e8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80093ea:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80093ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80093f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f2:	bf00      	nop
 80093f4:	c3c0003f 	.word	0xc3c0003f
 80093f8:	ffff0000 	.word	0xffff0000
 80093fc:	58025408 	.word	0x58025408
 8009400:	5802541c 	.word	0x5802541c
 8009404:	58025494 	.word	0x58025494
 8009408:	1000823f 	.word	0x1000823f
 800940c:	40020940 	.word	0x40020940
 8009410:	1600963f 	.word	0x1600963f
 8009414:	58025940 	.word	0x58025940
 8009418:	58025430 	.word	0x58025430
 800941c:	fffe000f 	.word	0xfffe000f
 8009420:	a7fdabf8 	.word	0xa7fdabf8
 8009424:	cccccccd 	.word	0xcccccccd

08009428 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8009428:	2800      	cmp	r0, #0
 800942a:	f000 8177 	beq.w	800971c <HAL_DMA_Start_IT+0x2f4>
 800942e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8009430:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009434:	2801      	cmp	r0, #1
 8009436:	f000 8173 	beq.w	8009720 <HAL_DMA_Start_IT+0x2f8>
 800943a:	2001      	movs	r0, #1
{
 800943c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8009440:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8009444:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8009448:	4284      	cmp	r4, r0
 800944a:	d008      	beq.n	800945e <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800944c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8009450:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009452:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009456:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 800945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800945e:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8009460:	f8dc 4000 	ldr.w	r4, [ip]
 8009464:	4d53      	ldr	r5, [pc, #332]	; (80095b4 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8009466:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800946a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800946c:	4e52      	ldr	r6, [pc, #328]	; (80095b8 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800946e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8009472:	4852      	ldr	r0, [pc, #328]	; (80095bc <HAL_DMA_Start_IT+0x194>)
 8009474:	42ac      	cmp	r4, r5
 8009476:	bf18      	it	ne
 8009478:	4284      	cmpne	r4, r0
 800947a:	f105 0518 	add.w	r5, r5, #24
 800947e:	bf0c      	ite	eq
 8009480:	2001      	moveq	r0, #1
 8009482:	2000      	movne	r0, #0
 8009484:	42ac      	cmp	r4, r5
 8009486:	bf08      	it	eq
 8009488:	f040 0001 	orreq.w	r0, r0, #1
 800948c:	3518      	adds	r5, #24
 800948e:	42ac      	cmp	r4, r5
 8009490:	bf08      	it	eq
 8009492:	f040 0001 	orreq.w	r0, r0, #1
 8009496:	3518      	adds	r5, #24
 8009498:	42ac      	cmp	r4, r5
 800949a:	bf08      	it	eq
 800949c:	f040 0001 	orreq.w	r0, r0, #1
 80094a0:	3518      	adds	r5, #24
 80094a2:	42ac      	cmp	r4, r5
 80094a4:	bf08      	it	eq
 80094a6:	f040 0001 	orreq.w	r0, r0, #1
 80094aa:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80094ae:	42ac      	cmp	r4, r5
 80094b0:	bf08      	it	eq
 80094b2:	f040 0001 	orreq.w	r0, r0, #1
 80094b6:	3518      	adds	r5, #24
 80094b8:	42ac      	cmp	r4, r5
 80094ba:	bf08      	it	eq
 80094bc:	f040 0001 	orreq.w	r0, r0, #1
 80094c0:	3518      	adds	r5, #24
 80094c2:	42ac      	cmp	r4, r5
 80094c4:	bf08      	it	eq
 80094c6:	f040 0001 	orreq.w	r0, r0, #1
 80094ca:	3518      	adds	r5, #24
 80094cc:	42ac      	cmp	r4, r5
 80094ce:	bf08      	it	eq
 80094d0:	f040 0001 	orreq.w	r0, r0, #1
 80094d4:	3518      	adds	r5, #24
 80094d6:	42ac      	cmp	r4, r5
 80094d8:	bf08      	it	eq
 80094da:	f040 0001 	orreq.w	r0, r0, #1
 80094de:	3518      	adds	r5, #24
 80094e0:	42ac      	cmp	r4, r5
 80094e2:	bf08      	it	eq
 80094e4:	f040 0001 	orreq.w	r0, r0, #1
 80094e8:	3518      	adds	r5, #24
 80094ea:	42ac      	cmp	r4, r5
 80094ec:	bf08      	it	eq
 80094ee:	f040 0001 	orreq.w	r0, r0, #1
 80094f2:	3518      	adds	r5, #24
 80094f4:	42ac      	cmp	r4, r5
 80094f6:	bf14      	ite	ne
 80094f8:	4681      	movne	r9, r0
 80094fa:	f040 0901 	orreq.w	r9, r0, #1
 80094fe:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8009502:	42ac      	cmp	r4, r5
 8009504:	bf18      	it	ne
 8009506:	42b4      	cmpne	r4, r6
 8009508:	bf0c      	ite	eq
 800950a:	2501      	moveq	r5, #1
 800950c:	2500      	movne	r5, #0
 800950e:	d002      	beq.n	8009516 <HAL_DMA_Start_IT+0xee>
 8009510:	f1b9 0f00 	cmp.w	r9, #0
 8009514:	d054      	beq.n	80095c0 <HAL_DMA_Start_IT+0x198>
 8009516:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009518:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800951c:	f026 0601 	bic.w	r6, r6, #1
 8009520:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009522:	2d00      	cmp	r5, #0
 8009524:	d078      	beq.n	8009618 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009526:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800952a:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800952c:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8009530:	b117      	cbz	r7, 8009538 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009532:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8009536:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009538:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 800953c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8009540:	f006 081f 	and.w	r8, r6, #31
 8009544:	fa0e fe08 	lsl.w	lr, lr, r8
 8009548:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800954c:	6826      	ldr	r6, [r4, #0]
 800954e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8009552:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009554:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009556:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800955a:	2b40      	cmp	r3, #64	; 0x40
 800955c:	f000 80e2 	beq.w	8009724 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009560:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009562:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009564:	b91d      	cbnz	r5, 800956e <HAL_DMA_Start_IT+0x146>
 8009566:	f1b9 0f00 	cmp.w	r9, #0
 800956a:	f000 80e1 	beq.w	8009730 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	f023 031e 	bic.w	r3, r3, #30
 8009574:	f043 0316 	orr.w	r3, r3, #22
 8009578:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800957a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800957e:	b11b      	cbz	r3, 8009588 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	f043 0308 	orr.w	r3, r3, #8
 8009586:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009588:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	03d2      	lsls	r2, r2, #15
 8009590:	d503      	bpl.n	800959a <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009598:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800959a:	b11f      	cbz	r7, 80095a4 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a2:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 80095a4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095a6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80095a8:	f043 0301 	orr.w	r3, r3, #1
 80095ac:	6023      	str	r3, [r4, #0]
}
 80095ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b2:	bf00      	nop
 80095b4:	40020058 	.word	0x40020058
 80095b8:	40020010 	.word	0x40020010
 80095bc:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095c0:	4f61      	ldr	r7, [pc, #388]	; (8009748 <HAL_DMA_Start_IT+0x320>)
 80095c2:	4e62      	ldr	r6, [pc, #392]	; (800974c <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095c4:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095c8:	42b4      	cmp	r4, r6
 80095ca:	bf18      	it	ne
 80095cc:	42bc      	cmpne	r4, r7
 80095ce:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80095d2:	bf0c      	ite	eq
 80095d4:	2701      	moveq	r7, #1
 80095d6:	2700      	movne	r7, #0
 80095d8:	42b4      	cmp	r4, r6
 80095da:	bf08      	it	eq
 80095dc:	f047 0701 	orreq.w	r7, r7, #1
 80095e0:	3614      	adds	r6, #20
 80095e2:	42b4      	cmp	r4, r6
 80095e4:	bf08      	it	eq
 80095e6:	f047 0701 	orreq.w	r7, r7, #1
 80095ea:	3614      	adds	r6, #20
 80095ec:	42b4      	cmp	r4, r6
 80095ee:	bf08      	it	eq
 80095f0:	f047 0701 	orreq.w	r7, r7, #1
 80095f4:	3614      	adds	r6, #20
 80095f6:	42b4      	cmp	r4, r6
 80095f8:	bf08      	it	eq
 80095fa:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80095fe:	6826      	ldr	r6, [r4, #0]
 8009600:	f026 0601 	bic.w	r6, r6, #1
 8009604:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009606:	4e52      	ldr	r6, [pc, #328]	; (8009750 <HAL_DMA_Start_IT+0x328>)
 8009608:	42b4      	cmp	r4, r6
 800960a:	bf08      	it	eq
 800960c:	f047 0701 	orreq.w	r7, r7, #1
 8009610:	b917      	cbnz	r7, 8009618 <HAL_DMA_Start_IT+0x1f0>
 8009612:	4f50      	ldr	r7, [pc, #320]	; (8009754 <HAL_DMA_Start_IT+0x32c>)
 8009614:	42bc      	cmp	r4, r7
 8009616:	d10b      	bne.n	8009630 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009618:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800961c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800961e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8009622:	b117      	cbz	r7, 800962a <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009624:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8009628:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800962a:	f1b9 0f00 	cmp.w	r9, #0
 800962e:	d183      	bne.n	8009538 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009630:	4f46      	ldr	r7, [pc, #280]	; (800974c <HAL_DMA_Start_IT+0x324>)
 8009632:	f8df e114 	ldr.w	lr, [pc, #276]	; 8009748 <HAL_DMA_Start_IT+0x320>
 8009636:	4574      	cmp	r4, lr
 8009638:	bf18      	it	ne
 800963a:	42bc      	cmpne	r4, r7
 800963c:	f10e 0e14 	add.w	lr, lr, #20
 8009640:	bf0c      	ite	eq
 8009642:	2701      	moveq	r7, #1
 8009644:	2700      	movne	r7, #0
 8009646:	4574      	cmp	r4, lr
 8009648:	bf08      	it	eq
 800964a:	f047 0701 	orreq.w	r7, r7, #1
 800964e:	f10e 0e14 	add.w	lr, lr, #20
 8009652:	4574      	cmp	r4, lr
 8009654:	bf08      	it	eq
 8009656:	f047 0701 	orreq.w	r7, r7, #1
 800965a:	f10e 0e14 	add.w	lr, lr, #20
 800965e:	4574      	cmp	r4, lr
 8009660:	bf08      	it	eq
 8009662:	f047 0701 	orreq.w	r7, r7, #1
 8009666:	f10e 0e14 	add.w	lr, lr, #20
 800966a:	4574      	cmp	r4, lr
 800966c:	bf08      	it	eq
 800966e:	f047 0701 	orreq.w	r7, r7, #1
 8009672:	f10e 0e14 	add.w	lr, lr, #20
 8009676:	4574      	cmp	r4, lr
 8009678:	bf08      	it	eq
 800967a:	f047 0701 	orreq.w	r7, r7, #1
 800967e:	b917      	cbnz	r7, 8009686 <HAL_DMA_Start_IT+0x25e>
 8009680:	4f34      	ldr	r7, [pc, #208]	; (8009754 <HAL_DMA_Start_IT+0x32c>)
 8009682:	42bc      	cmp	r4, r7
 8009684:	d154      	bne.n	8009730 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009686:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800968a:	2701      	movs	r7, #1
 800968c:	f000 0e1f 	and.w	lr, r0, #31
 8009690:	fa07 f70e 	lsl.w	r7, r7, lr
 8009694:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009698:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800969a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800969e:	2b40      	cmp	r3, #64	; 0x40
 80096a0:	d043      	beq.n	800972a <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80096a2:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80096a4:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	f023 030e 	bic.w	r3, r3, #14
 80096ac:	f043 030a 	orr.w	r3, r3, #10
 80096b0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80096b2:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d02d      	beq.n	8009716 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	f043 0304 	orr.w	r3, r3, #4
 80096c0:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80096c2:	4b21      	ldr	r3, [pc, #132]	; (8009748 <HAL_DMA_Start_IT+0x320>)
 80096c4:	4a21      	ldr	r2, [pc, #132]	; (800974c <HAL_DMA_Start_IT+0x324>)
 80096c6:	4294      	cmp	r4, r2
 80096c8:	bf18      	it	ne
 80096ca:	429c      	cmpne	r4, r3
 80096cc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80096d0:	bf0c      	ite	eq
 80096d2:	2301      	moveq	r3, #1
 80096d4:	2300      	movne	r3, #0
 80096d6:	4294      	cmp	r4, r2
 80096d8:	bf08      	it	eq
 80096da:	f043 0301 	orreq.w	r3, r3, #1
 80096de:	3214      	adds	r2, #20
 80096e0:	4294      	cmp	r4, r2
 80096e2:	bf08      	it	eq
 80096e4:	f043 0301 	orreq.w	r3, r3, #1
 80096e8:	3214      	adds	r2, #20
 80096ea:	4294      	cmp	r4, r2
 80096ec:	bf08      	it	eq
 80096ee:	f043 0301 	orreq.w	r3, r3, #1
 80096f2:	3214      	adds	r2, #20
 80096f4:	4294      	cmp	r4, r2
 80096f6:	bf08      	it	eq
 80096f8:	f043 0301 	orreq.w	r3, r3, #1
 80096fc:	3214      	adds	r2, #20
 80096fe:	4294      	cmp	r4, r2
 8009700:	bf08      	it	eq
 8009702:	f043 0301 	orreq.w	r3, r3, #1
 8009706:	3214      	adds	r2, #20
 8009708:	4294      	cmp	r4, r2
 800970a:	bf08      	it	eq
 800970c:	f043 0301 	orreq.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	f43f af47 	beq.w	80095a4 <HAL_DMA_Start_IT+0x17c>
 8009716:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800971a:	e735      	b.n	8009588 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 800971c:	2001      	movs	r0, #1
 800971e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8009720:	2002      	movs	r0, #2
}
 8009722:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009724:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009726:	60e1      	str	r1, [r4, #12]
 8009728:	e71c      	b.n	8009564 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800972a:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800972c:	60e1      	str	r1, [r4, #12]
 800972e:	e7ba      	b.n	80096a6 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	f023 030e 	bic.w	r3, r3, #14
 8009736:	f043 030a 	orr.w	r3, r3, #10
 800973a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800973c:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1ba      	bne.n	80096ba <HAL_DMA_Start_IT+0x292>
 8009744:	e7bd      	b.n	80096c2 <HAL_DMA_Start_IT+0x29a>
 8009746:	bf00      	nop
 8009748:	5802541c 	.word	0x5802541c
 800974c:	58025408 	.word	0x58025408
 8009750:	58025480 	.word	0x58025480
 8009754:	58025494 	.word	0x58025494

08009758 <HAL_DMA_Abort>:
{
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800975c:	f7fd fd14 	bl	8007188 <HAL_GetTick>
  if(hdma == NULL)
 8009760:	2d00      	cmp	r5, #0
 8009762:	f000 8124 	beq.w	80099ae <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009766:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800976a:	2b02      	cmp	r3, #2
 800976c:	f040 80dd 	bne.w	800992a <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009770:	682c      	ldr	r4, [r5, #0]
 8009772:	4606      	mov	r6, r0
 8009774:	4b8f      	ldr	r3, [pc, #572]	; (80099b4 <HAL_DMA_Abort+0x25c>)
 8009776:	4890      	ldr	r0, [pc, #576]	; (80099b8 <HAL_DMA_Abort+0x260>)
 8009778:	4a90      	ldr	r2, [pc, #576]	; (80099bc <HAL_DMA_Abort+0x264>)
 800977a:	4284      	cmp	r4, r0
 800977c:	bf18      	it	ne
 800977e:	429c      	cmpne	r4, r3
 8009780:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009784:	498e      	ldr	r1, [pc, #568]	; (80099c0 <HAL_DMA_Abort+0x268>)
 8009786:	bf0c      	ite	eq
 8009788:	2301      	moveq	r3, #1
 800978a:	2300      	movne	r3, #0
 800978c:	4284      	cmp	r4, r0
 800978e:	bf08      	it	eq
 8009790:	f043 0301 	orreq.w	r3, r3, #1
 8009794:	3018      	adds	r0, #24
 8009796:	4284      	cmp	r4, r0
 8009798:	bf08      	it	eq
 800979a:	f043 0301 	orreq.w	r3, r3, #1
 800979e:	3018      	adds	r0, #24
 80097a0:	4284      	cmp	r4, r0
 80097a2:	bf08      	it	eq
 80097a4:	f043 0301 	orreq.w	r3, r3, #1
 80097a8:	3018      	adds	r0, #24
 80097aa:	4284      	cmp	r4, r0
 80097ac:	bf08      	it	eq
 80097ae:	f043 0301 	orreq.w	r3, r3, #1
 80097b2:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80097b6:	4284      	cmp	r4, r0
 80097b8:	bf08      	it	eq
 80097ba:	f043 0301 	orreq.w	r3, r3, #1
 80097be:	3018      	adds	r0, #24
 80097c0:	4284      	cmp	r4, r0
 80097c2:	bf08      	it	eq
 80097c4:	f043 0301 	orreq.w	r3, r3, #1
 80097c8:	3018      	adds	r0, #24
 80097ca:	4284      	cmp	r4, r0
 80097cc:	bf08      	it	eq
 80097ce:	f043 0301 	orreq.w	r3, r3, #1
 80097d2:	3018      	adds	r0, #24
 80097d4:	4284      	cmp	r4, r0
 80097d6:	bf08      	it	eq
 80097d8:	f043 0301 	orreq.w	r3, r3, #1
 80097dc:	3018      	adds	r0, #24
 80097de:	4284      	cmp	r4, r0
 80097e0:	bf08      	it	eq
 80097e2:	f043 0301 	orreq.w	r3, r3, #1
 80097e6:	3018      	adds	r0, #24
 80097e8:	4284      	cmp	r4, r0
 80097ea:	bf08      	it	eq
 80097ec:	f043 0301 	orreq.w	r3, r3, #1
 80097f0:	3018      	adds	r0, #24
 80097f2:	4284      	cmp	r4, r0
 80097f4:	bf08      	it	eq
 80097f6:	f043 0301 	orreq.w	r3, r3, #1
 80097fa:	3018      	adds	r0, #24
 80097fc:	4284      	cmp	r4, r0
 80097fe:	bf08      	it	eq
 8009800:	f043 0301 	orreq.w	r3, r3, #1
 8009804:	428c      	cmp	r4, r1
 8009806:	bf18      	it	ne
 8009808:	4294      	cmpne	r4, r2
 800980a:	bf0c      	ite	eq
 800980c:	2201      	moveq	r2, #1
 800980e:	2200      	movne	r2, #0
 8009810:	d002      	beq.n	8009818 <HAL_DMA_Abort+0xc0>
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 8090 	beq.w	8009938 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009818:	6821      	ldr	r1, [r4, #0]
 800981a:	f021 011e 	bic.w	r1, r1, #30
 800981e:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009820:	6961      	ldr	r1, [r4, #20]
 8009822:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009826:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009828:	2a00      	cmp	r2, #0
 800982a:	f000 80b0 	beq.w	800998e <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800982e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8009830:	6813      	ldr	r3, [r2, #0]
 8009832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009836:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	f023 0301 	bic.w	r3, r3, #1
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	e005      	b.n	800984e <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009842:	f7fd fca1 	bl	8007188 <HAL_GetTick>
 8009846:	1b83      	subs	r3, r0, r6
 8009848:	2b05      	cmp	r3, #5
 800984a:	f200 80a6 	bhi.w	800999a <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	07db      	lsls	r3, r3, #31
 8009852:	d4f6      	bmi.n	8009842 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009854:	682a      	ldr	r2, [r5, #0]
 8009856:	4b57      	ldr	r3, [pc, #348]	; (80099b4 <HAL_DMA_Abort+0x25c>)
 8009858:	4857      	ldr	r0, [pc, #348]	; (80099b8 <HAL_DMA_Abort+0x260>)
 800985a:	495a      	ldr	r1, [pc, #360]	; (80099c4 <HAL_DMA_Abort+0x26c>)
 800985c:	4282      	cmp	r2, r0
 800985e:	bf18      	it	ne
 8009860:	429a      	cmpne	r2, r3
 8009862:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8009866:	bf0c      	ite	eq
 8009868:	2301      	moveq	r3, #1
 800986a:	2300      	movne	r3, #0
 800986c:	428a      	cmp	r2, r1
 800986e:	bf08      	it	eq
 8009870:	f043 0301 	orreq.w	r3, r3, #1
 8009874:	3130      	adds	r1, #48	; 0x30
 8009876:	4282      	cmp	r2, r0
 8009878:	bf08      	it	eq
 800987a:	f043 0301 	orreq.w	r3, r3, #1
 800987e:	3030      	adds	r0, #48	; 0x30
 8009880:	428a      	cmp	r2, r1
 8009882:	bf08      	it	eq
 8009884:	f043 0301 	orreq.w	r3, r3, #1
 8009888:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800988c:	4282      	cmp	r2, r0
 800988e:	bf08      	it	eq
 8009890:	f043 0301 	orreq.w	r3, r3, #1
 8009894:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009898:	428a      	cmp	r2, r1
 800989a:	bf08      	it	eq
 800989c:	f043 0301 	orreq.w	r3, r3, #1
 80098a0:	3130      	adds	r1, #48	; 0x30
 80098a2:	4282      	cmp	r2, r0
 80098a4:	bf08      	it	eq
 80098a6:	f043 0301 	orreq.w	r3, r3, #1
 80098aa:	3030      	adds	r0, #48	; 0x30
 80098ac:	428a      	cmp	r2, r1
 80098ae:	bf08      	it	eq
 80098b0:	f043 0301 	orreq.w	r3, r3, #1
 80098b4:	3130      	adds	r1, #48	; 0x30
 80098b6:	4282      	cmp	r2, r0
 80098b8:	bf08      	it	eq
 80098ba:	f043 0301 	orreq.w	r3, r3, #1
 80098be:	3030      	adds	r0, #48	; 0x30
 80098c0:	428a      	cmp	r2, r1
 80098c2:	bf08      	it	eq
 80098c4:	f043 0301 	orreq.w	r3, r3, #1
 80098c8:	3130      	adds	r1, #48	; 0x30
 80098ca:	4282      	cmp	r2, r0
 80098cc:	bf08      	it	eq
 80098ce:	f043 0301 	orreq.w	r3, r3, #1
 80098d2:	428a      	cmp	r2, r1
 80098d4:	bf08      	it	eq
 80098d6:	f043 0301 	orreq.w	r3, r3, #1
 80098da:	3118      	adds	r1, #24
 80098dc:	428a      	cmp	r2, r1
 80098de:	bf08      	it	eq
 80098e0:	f043 0301 	orreq.w	r3, r3, #1
 80098e4:	b933      	cbnz	r3, 80098f4 <HAL_DMA_Abort+0x19c>
 80098e6:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 80098ea:	4b35      	ldr	r3, [pc, #212]	; (80099c0 <HAL_DMA_Abort+0x268>)
 80098ec:	429a      	cmp	r2, r3
 80098ee:	bf18      	it	ne
 80098f0:	428a      	cmpne	r2, r1
 80098f2:	d16f      	bne.n	80099d4 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80098f4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80098f6:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80098f8:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80098fa:	f002 021f 	and.w	r2, r2, #31
 80098fe:	4093      	lsls	r3, r2
 8009900:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8009902:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009904:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8009908:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800990a:	b133      	cbz	r3, 800991a <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800990c:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800990e:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009916:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009918:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800991a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800991c:	2201      	movs	r2, #1
  return HAL_OK;
 800991e:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8009920:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009924:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8009928:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800992a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800992c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800992e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009930:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009932:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8009936:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009938:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800993a:	4923      	ldr	r1, [pc, #140]	; (80099c8 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800993c:	f022 020e 	bic.w	r2, r2, #14
 8009940:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009942:	4a22      	ldr	r2, [pc, #136]	; (80099cc <HAL_DMA_Abort+0x274>)
 8009944:	428c      	cmp	r4, r1
 8009946:	bf18      	it	ne
 8009948:	4294      	cmpne	r4, r2
 800994a:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800994e:	bf0c      	ite	eq
 8009950:	2201      	moveq	r2, #1
 8009952:	2200      	movne	r2, #0
 8009954:	428c      	cmp	r4, r1
 8009956:	bf08      	it	eq
 8009958:	f042 0201 	orreq.w	r2, r2, #1
 800995c:	3114      	adds	r1, #20
 800995e:	428c      	cmp	r4, r1
 8009960:	bf08      	it	eq
 8009962:	f042 0201 	orreq.w	r2, r2, #1
 8009966:	3114      	adds	r1, #20
 8009968:	428c      	cmp	r4, r1
 800996a:	bf08      	it	eq
 800996c:	f042 0201 	orreq.w	r2, r2, #1
 8009970:	3114      	adds	r1, #20
 8009972:	428c      	cmp	r4, r1
 8009974:	bf08      	it	eq
 8009976:	f042 0201 	orreq.w	r2, r2, #1
 800997a:	3114      	adds	r1, #20
 800997c:	428c      	cmp	r4, r1
 800997e:	bf08      	it	eq
 8009980:	f042 0201 	orreq.w	r2, r2, #1
 8009984:	b91a      	cbnz	r2, 800998e <HAL_DMA_Abort+0x236>
 8009986:	4a12      	ldr	r2, [pc, #72]	; (80099d0 <HAL_DMA_Abort+0x278>)
 8009988:	4294      	cmp	r4, r2
 800998a:	f47f af55 	bne.w	8009838 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800998e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009990:	680a      	ldr	r2, [r1, #0]
 8009992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009996:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8009998:	e74e      	b.n	8009838 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800999a:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800999c:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 800999e:	2300      	movs	r3, #0
        return HAL_ERROR;
 80099a0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80099a2:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80099a4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80099a8:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 80099ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80099ae:	2001      	movs	r0, #1
}
 80099b0:	bd70      	pop	{r4, r5, r6, pc}
 80099b2:	bf00      	nop
 80099b4:	40020058 	.word	0x40020058
 80099b8:	40020040 	.word	0x40020040
 80099bc:	40020010 	.word	0x40020010
 80099c0:	40020028 	.word	0x40020028
 80099c4:	40020070 	.word	0x40020070
 80099c8:	58025408 	.word	0x58025408
 80099cc:	5802541c 	.word	0x5802541c
 80099d0:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80099d4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80099d6:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80099d8:	4b16      	ldr	r3, [pc, #88]	; (8009a34 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80099da:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80099de:	4c16      	ldr	r4, [pc, #88]	; (8009a38 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80099e0:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80099e2:	42a2      	cmp	r2, r4
 80099e4:	bf18      	it	ne
 80099e6:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80099e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80099ea:	bf0c      	ite	eq
 80099ec:	2301      	moveq	r3, #1
 80099ee:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80099f0:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80099f2:	4812      	ldr	r0, [pc, #72]	; (8009a3c <HAL_DMA_Abort+0x2e4>)
 80099f4:	4912      	ldr	r1, [pc, #72]	; (8009a40 <HAL_DMA_Abort+0x2e8>)
 80099f6:	4282      	cmp	r2, r0
 80099f8:	bf08      	it	eq
 80099fa:	f043 0301 	orreq.w	r3, r3, #1
 80099fe:	3028      	adds	r0, #40	; 0x28
 8009a00:	428a      	cmp	r2, r1
 8009a02:	bf08      	it	eq
 8009a04:	f043 0301 	orreq.w	r3, r3, #1
 8009a08:	3128      	adds	r1, #40	; 0x28
 8009a0a:	4282      	cmp	r2, r0
 8009a0c:	bf08      	it	eq
 8009a0e:	f043 0301 	orreq.w	r3, r3, #1
 8009a12:	428a      	cmp	r2, r1
 8009a14:	bf08      	it	eq
 8009a16:	f043 0301 	orreq.w	r3, r3, #1
 8009a1a:	3114      	adds	r1, #20
 8009a1c:	428a      	cmp	r2, r1
 8009a1e:	bf08      	it	eq
 8009a20:	f043 0301 	orreq.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f47f af6c 	bne.w	8009902 <HAL_DMA_Abort+0x1aa>
 8009a2a:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <HAL_DMA_Abort+0x2ec>)
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	f43f af68 	beq.w	8009902 <HAL_DMA_Abort+0x1aa>
 8009a32:	e772      	b.n	800991a <HAL_DMA_Abort+0x1c2>
 8009a34:	5802541c 	.word	0x5802541c
 8009a38:	58025408 	.word	0x58025408
 8009a3c:	58025430 	.word	0x58025430
 8009a40:	58025444 	.word	0x58025444
 8009a44:	58025494 	.word	0x58025494

08009a48 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d05f      	beq.n	8009b0c <HAL_DMA_Abort_IT+0xc4>
{
 8009a4c:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a4e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8009a52:	4603      	mov	r3, r0
 8009a54:	2a02      	cmp	r2, #2
 8009a56:	d155      	bne.n	8009b04 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a58:	6801      	ldr	r1, [r0, #0]
 8009a5a:	4a57      	ldr	r2, [pc, #348]	; (8009bb8 <HAL_DMA_Abort_IT+0x170>)
 8009a5c:	4291      	cmp	r1, r2
 8009a5e:	d048      	beq.n	8009af2 <HAL_DMA_Abort_IT+0xaa>
 8009a60:	3218      	adds	r2, #24
 8009a62:	4291      	cmp	r1, r2
 8009a64:	d045      	beq.n	8009af2 <HAL_DMA_Abort_IT+0xaa>
 8009a66:	3230      	adds	r2, #48	; 0x30
 8009a68:	4c54      	ldr	r4, [pc, #336]	; (8009bbc <HAL_DMA_Abort_IT+0x174>)
 8009a6a:	4855      	ldr	r0, [pc, #340]	; (8009bc0 <HAL_DMA_Abort_IT+0x178>)
 8009a6c:	42a1      	cmp	r1, r4
 8009a6e:	bf18      	it	ne
 8009a70:	4291      	cmpne	r1, r2
 8009a72:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8009a76:	bf0c      	ite	eq
 8009a78:	2201      	moveq	r2, #1
 8009a7a:	2200      	movne	r2, #0
 8009a7c:	4281      	cmp	r1, r0
 8009a7e:	bf08      	it	eq
 8009a80:	f042 0201 	orreq.w	r2, r2, #1
 8009a84:	3030      	adds	r0, #48	; 0x30
 8009a86:	42a1      	cmp	r1, r4
 8009a88:	bf08      	it	eq
 8009a8a:	f042 0201 	orreq.w	r2, r2, #1
 8009a8e:	3430      	adds	r4, #48	; 0x30
 8009a90:	4281      	cmp	r1, r0
 8009a92:	bf08      	it	eq
 8009a94:	f042 0201 	orreq.w	r2, r2, #1
 8009a98:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009a9c:	42a1      	cmp	r1, r4
 8009a9e:	bf08      	it	eq
 8009aa0:	f042 0201 	orreq.w	r2, r2, #1
 8009aa4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8009aa8:	4281      	cmp	r1, r0
 8009aaa:	bf08      	it	eq
 8009aac:	f042 0201 	orreq.w	r2, r2, #1
 8009ab0:	3030      	adds	r0, #48	; 0x30
 8009ab2:	42a1      	cmp	r1, r4
 8009ab4:	bf08      	it	eq
 8009ab6:	f042 0201 	orreq.w	r2, r2, #1
 8009aba:	3430      	adds	r4, #48	; 0x30
 8009abc:	4281      	cmp	r1, r0
 8009abe:	bf08      	it	eq
 8009ac0:	f042 0201 	orreq.w	r2, r2, #1
 8009ac4:	3030      	adds	r0, #48	; 0x30
 8009ac6:	42a1      	cmp	r1, r4
 8009ac8:	bf08      	it	eq
 8009aca:	f042 0201 	orreq.w	r2, r2, #1
 8009ace:	3430      	adds	r4, #48	; 0x30
 8009ad0:	4281      	cmp	r1, r0
 8009ad2:	bf08      	it	eq
 8009ad4:	f042 0201 	orreq.w	r2, r2, #1
 8009ad8:	3030      	adds	r0, #48	; 0x30
 8009ada:	42a1      	cmp	r1, r4
 8009adc:	bf08      	it	eq
 8009ade:	f042 0201 	orreq.w	r2, r2, #1
 8009ae2:	4281      	cmp	r1, r0
 8009ae4:	bf08      	it	eq
 8009ae6:	f042 0201 	orreq.w	r2, r2, #1
 8009aea:	b912      	cbnz	r2, 8009af2 <HAL_DMA_Abort_IT+0xaa>
 8009aec:	4a35      	ldr	r2, [pc, #212]	; (8009bc4 <HAL_DMA_Abort_IT+0x17c>)
 8009aee:	4291      	cmp	r1, r2
 8009af0:	d10e      	bne.n	8009b10 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8009af2:	2204      	movs	r2, #4
  return HAL_OK;
 8009af4:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8009af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8009afa:	680b      	ldr	r3, [r1, #0]
 8009afc:	f023 0301 	bic.w	r3, r3, #1
 8009b00:	600b      	str	r3, [r1, #0]
}
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b04:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8009b06:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b08:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009b0c:	2001      	movs	r0, #1
}
 8009b0e:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b10:	4a2d      	ldr	r2, [pc, #180]	; (8009bc8 <HAL_DMA_Abort_IT+0x180>)
 8009b12:	4d2e      	ldr	r5, [pc, #184]	; (8009bcc <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009b14:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b16:	42a9      	cmp	r1, r5
 8009b18:	bf18      	it	ne
 8009b1a:	4291      	cmpne	r1, r2
 8009b1c:	4c2c      	ldr	r4, [pc, #176]	; (8009bd0 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009b1e:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b22:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8009b26:	bf0c      	ite	eq
 8009b28:	2201      	moveq	r2, #1
 8009b2a:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009b2c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b2e:	42a1      	cmp	r1, r4
 8009b30:	bf08      	it	eq
 8009b32:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8009b36:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b38:	3428      	adds	r4, #40	; 0x28
 8009b3a:	42a9      	cmp	r1, r5
 8009b3c:	bf08      	it	eq
 8009b3e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8009b42:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b46:	42a1      	cmp	r1, r4
 8009b48:	bf08      	it	eq
 8009b4a:	f042 0201 	orreq.w	r2, r2, #1
 8009b4e:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8009b50:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b52:	42a1      	cmp	r1, r4
 8009b54:	bf08      	it	eq
 8009b56:	f042 0201 	orreq.w	r2, r2, #1
 8009b5a:	481e      	ldr	r0, [pc, #120]	; (8009bd4 <HAL_DMA_Abort_IT+0x18c>)
 8009b5c:	4281      	cmp	r1, r0
 8009b5e:	bf08      	it	eq
 8009b60:	f042 0201 	orreq.w	r2, r2, #1
 8009b64:	b912      	cbnz	r2, 8009b6c <HAL_DMA_Abort_IT+0x124>
 8009b66:	4a1c      	ldr	r2, [pc, #112]	; (8009bd8 <HAL_DMA_Abort_IT+0x190>)
 8009b68:	4291      	cmp	r1, r2
 8009b6a:	d117      	bne.n	8009b9c <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009b6c:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b6e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009b70:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b74:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009b76:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b7a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009b7e:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b80:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009b82:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8009b84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b86:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8009b8a:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8009b8c:	b132      	cbz	r2, 8009b9c <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009b8e:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b90:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009b94:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009b98:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b9a:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8009b9c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8009b9e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8009ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8009ba2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8009ba6:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8009baa:	b11a      	cbz	r2, 8009bb4 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8009bac:	4618      	mov	r0, r3
 8009bae:	4790      	blx	r2
  return HAL_OK;
 8009bb0:	4620      	mov	r0, r4
}
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8009bb4:	4610      	mov	r0, r2
}
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	40020010 	.word	0x40020010
 8009bbc:	40020040 	.word	0x40020040
 8009bc0:	40020070 	.word	0x40020070
 8009bc4:	400204b8 	.word	0x400204b8
 8009bc8:	5802541c 	.word	0x5802541c
 8009bcc:	58025408 	.word	0x58025408
 8009bd0:	58025430 	.word	0x58025430
 8009bd4:	58025480 	.word	0x58025480
 8009bd8:	58025494 	.word	0x58025494

08009bdc <HAL_DMA_IRQHandler>:
{
 8009bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8009be0:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8009be2:	4b9c      	ldr	r3, [pc, #624]	; (8009e54 <HAL_DMA_IRQHandler+0x278>)
{
 8009be4:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009be6:	4e9c      	ldr	r6, [pc, #624]	; (8009e58 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8009be8:	681d      	ldr	r5, [r3, #0]
{
 8009bea:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8009bec:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009bee:	6803      	ldr	r3, [r0, #0]
 8009bf0:	4a9a      	ldr	r2, [pc, #616]	; (8009e5c <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bf2:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	bf18      	it	ne
 8009bf8:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8009bfa:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009bfc:	bf08      	it	eq
 8009bfe:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8009c00:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009c02:	bf18      	it	ne
 8009c04:	2600      	movne	r6, #0
 8009c06:	d045      	beq.n	8009c94 <HAL_DMA_IRQHandler+0xb8>
 8009c08:	3218      	adds	r2, #24
 8009c0a:	4895      	ldr	r0, [pc, #596]	; (8009e60 <HAL_DMA_IRQHandler+0x284>)
 8009c0c:	4283      	cmp	r3, r0
 8009c0e:	bf18      	it	ne
 8009c10:	4293      	cmpne	r3, r2
 8009c12:	f100 0018 	add.w	r0, r0, #24
 8009c16:	bf0c      	ite	eq
 8009c18:	2201      	moveq	r2, #1
 8009c1a:	2200      	movne	r2, #0
 8009c1c:	4283      	cmp	r3, r0
 8009c1e:	bf08      	it	eq
 8009c20:	f042 0201 	orreq.w	r2, r2, #1
 8009c24:	3018      	adds	r0, #24
 8009c26:	4283      	cmp	r3, r0
 8009c28:	bf08      	it	eq
 8009c2a:	f042 0201 	orreq.w	r2, r2, #1
 8009c2e:	3018      	adds	r0, #24
 8009c30:	4283      	cmp	r3, r0
 8009c32:	bf08      	it	eq
 8009c34:	f042 0201 	orreq.w	r2, r2, #1
 8009c38:	3018      	adds	r0, #24
 8009c3a:	4283      	cmp	r3, r0
 8009c3c:	bf08      	it	eq
 8009c3e:	f042 0201 	orreq.w	r2, r2, #1
 8009c42:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8009c46:	4283      	cmp	r3, r0
 8009c48:	bf08      	it	eq
 8009c4a:	f042 0201 	orreq.w	r2, r2, #1
 8009c4e:	3018      	adds	r0, #24
 8009c50:	4283      	cmp	r3, r0
 8009c52:	bf08      	it	eq
 8009c54:	f042 0201 	orreq.w	r2, r2, #1
 8009c58:	3018      	adds	r0, #24
 8009c5a:	4283      	cmp	r3, r0
 8009c5c:	bf08      	it	eq
 8009c5e:	f042 0201 	orreq.w	r2, r2, #1
 8009c62:	3018      	adds	r0, #24
 8009c64:	4283      	cmp	r3, r0
 8009c66:	bf08      	it	eq
 8009c68:	f042 0201 	orreq.w	r2, r2, #1
 8009c6c:	3018      	adds	r0, #24
 8009c6e:	4283      	cmp	r3, r0
 8009c70:	bf08      	it	eq
 8009c72:	f042 0201 	orreq.w	r2, r2, #1
 8009c76:	3018      	adds	r0, #24
 8009c78:	4283      	cmp	r3, r0
 8009c7a:	bf08      	it	eq
 8009c7c:	f042 0201 	orreq.w	r2, r2, #1
 8009c80:	3018      	adds	r0, #24
 8009c82:	4283      	cmp	r3, r0
 8009c84:	bf08      	it	eq
 8009c86:	f042 0201 	orreq.w	r2, r2, #1
 8009c8a:	b91a      	cbnz	r2, 8009c94 <HAL_DMA_IRQHandler+0xb8>
 8009c8c:	4a75      	ldr	r2, [pc, #468]	; (8009e64 <HAL_DMA_IRQHandler+0x288>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	f040 8250 	bne.w	800a134 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009c94:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8009c98:	2208      	movs	r2, #8
 8009c9a:	f001 0c1f 	and.w	ip, r1, #31
 8009c9e:	fa02 f20c 	lsl.w	r2, r2, ip
 8009ca2:	4217      	tst	r7, r2
 8009ca4:	f040 8188 	bne.w	8009fb8 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009ca8:	fa27 f20c 	lsr.w	r2, r7, ip
 8009cac:	07d2      	lsls	r2, r2, #31
 8009cae:	d50c      	bpl.n	8009cca <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009cb0:	695a      	ldr	r2, [r3, #20]
 8009cb2:	0610      	lsls	r0, r2, #24
 8009cb4:	d509      	bpl.n	8009cca <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	fa02 f20c 	lsl.w	r2, r2, ip
 8009cbc:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009cbe:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8009cc2:	f042 0202 	orr.w	r2, r2, #2
 8009cc6:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009cca:	f04f 0e04 	mov.w	lr, #4
 8009cce:	fa0e f00c 	lsl.w	r0, lr, ip
 8009cd2:	4238      	tst	r0, r7
 8009cd4:	d05b      	beq.n	8009d8e <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009cd6:	2e00      	cmp	r6, #0
 8009cd8:	d14f      	bne.n	8009d7a <HAL_DMA_IRQHandler+0x19e>
 8009cda:	4a61      	ldr	r2, [pc, #388]	; (8009e60 <HAL_DMA_IRQHandler+0x284>)
 8009cdc:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8009e68 <HAL_DMA_IRQHandler+0x28c>
 8009ce0:	4543      	cmp	r3, r8
 8009ce2:	bf18      	it	ne
 8009ce4:	4293      	cmpne	r3, r2
 8009ce6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8009cea:	bf0c      	ite	eq
 8009cec:	2201      	moveq	r2, #1
 8009cee:	2200      	movne	r2, #0
 8009cf0:	4543      	cmp	r3, r8
 8009cf2:	bf08      	it	eq
 8009cf4:	f042 0201 	orreq.w	r2, r2, #1
 8009cf8:	f108 0818 	add.w	r8, r8, #24
 8009cfc:	4543      	cmp	r3, r8
 8009cfe:	bf08      	it	eq
 8009d00:	f042 0201 	orreq.w	r2, r2, #1
 8009d04:	f108 0818 	add.w	r8, r8, #24
 8009d08:	4543      	cmp	r3, r8
 8009d0a:	bf08      	it	eq
 8009d0c:	f042 0201 	orreq.w	r2, r2, #1
 8009d10:	f108 0818 	add.w	r8, r8, #24
 8009d14:	4543      	cmp	r3, r8
 8009d16:	bf08      	it	eq
 8009d18:	f042 0201 	orreq.w	r2, r2, #1
 8009d1c:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8009d20:	4543      	cmp	r3, r8
 8009d22:	bf08      	it	eq
 8009d24:	f042 0201 	orreq.w	r2, r2, #1
 8009d28:	f108 0818 	add.w	r8, r8, #24
 8009d2c:	4543      	cmp	r3, r8
 8009d2e:	bf08      	it	eq
 8009d30:	f042 0201 	orreq.w	r2, r2, #1
 8009d34:	f108 0818 	add.w	r8, r8, #24
 8009d38:	4543      	cmp	r3, r8
 8009d3a:	bf08      	it	eq
 8009d3c:	f042 0201 	orreq.w	r2, r2, #1
 8009d40:	f108 0818 	add.w	r8, r8, #24
 8009d44:	4543      	cmp	r3, r8
 8009d46:	bf08      	it	eq
 8009d48:	f042 0201 	orreq.w	r2, r2, #1
 8009d4c:	f108 0818 	add.w	r8, r8, #24
 8009d50:	4543      	cmp	r3, r8
 8009d52:	bf08      	it	eq
 8009d54:	f042 0201 	orreq.w	r2, r2, #1
 8009d58:	f108 0818 	add.w	r8, r8, #24
 8009d5c:	4543      	cmp	r3, r8
 8009d5e:	bf08      	it	eq
 8009d60:	f042 0201 	orreq.w	r2, r2, #1
 8009d64:	f108 0818 	add.w	r8, r8, #24
 8009d68:	4543      	cmp	r3, r8
 8009d6a:	bf08      	it	eq
 8009d6c:	f042 0201 	orreq.w	r2, r2, #1
 8009d70:	b91a      	cbnz	r2, 8009d7a <HAL_DMA_IRQHandler+0x19e>
 8009d72:	4a3c      	ldr	r2, [pc, #240]	; (8009e64 <HAL_DMA_IRQHandler+0x288>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	f040 8219 	bne.w	800a1ac <HAL_DMA_IRQHandler+0x5d0>
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	0792      	lsls	r2, r2, #30
 8009d7e:	d506      	bpl.n	8009d8e <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009d80:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009d82:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8009d86:	f042 0204 	orr.w	r2, r2, #4
 8009d8a:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009d8e:	2210      	movs	r2, #16
 8009d90:	fa02 fc0c 	lsl.w	ip, r2, ip
 8009d94:	ea1c 0f07 	tst.w	ip, r7
 8009d98:	d06c      	beq.n	8009e74 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009d9a:	2e00      	cmp	r6, #0
 8009d9c:	d145      	bne.n	8009e2a <HAL_DMA_IRQHandler+0x24e>
 8009d9e:	4a30      	ldr	r2, [pc, #192]	; (8009e60 <HAL_DMA_IRQHandler+0x284>)
 8009da0:	4e31      	ldr	r6, [pc, #196]	; (8009e68 <HAL_DMA_IRQHandler+0x28c>)
 8009da2:	42b3      	cmp	r3, r6
 8009da4:	bf18      	it	ne
 8009da6:	4293      	cmpne	r3, r2
 8009da8:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8009dac:	bf0c      	ite	eq
 8009dae:	2201      	moveq	r2, #1
 8009db0:	2200      	movne	r2, #0
 8009db2:	42b3      	cmp	r3, r6
 8009db4:	bf08      	it	eq
 8009db6:	f042 0201 	orreq.w	r2, r2, #1
 8009dba:	3618      	adds	r6, #24
 8009dbc:	42b3      	cmp	r3, r6
 8009dbe:	bf08      	it	eq
 8009dc0:	f042 0201 	orreq.w	r2, r2, #1
 8009dc4:	3618      	adds	r6, #24
 8009dc6:	42b3      	cmp	r3, r6
 8009dc8:	bf08      	it	eq
 8009dca:	f042 0201 	orreq.w	r2, r2, #1
 8009dce:	3618      	adds	r6, #24
 8009dd0:	42b3      	cmp	r3, r6
 8009dd2:	bf08      	it	eq
 8009dd4:	f042 0201 	orreq.w	r2, r2, #1
 8009dd8:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8009ddc:	42b3      	cmp	r3, r6
 8009dde:	bf08      	it	eq
 8009de0:	f042 0201 	orreq.w	r2, r2, #1
 8009de4:	3618      	adds	r6, #24
 8009de6:	42b3      	cmp	r3, r6
 8009de8:	bf08      	it	eq
 8009dea:	f042 0201 	orreq.w	r2, r2, #1
 8009dee:	3618      	adds	r6, #24
 8009df0:	42b3      	cmp	r3, r6
 8009df2:	bf08      	it	eq
 8009df4:	f042 0201 	orreq.w	r2, r2, #1
 8009df8:	3618      	adds	r6, #24
 8009dfa:	42b3      	cmp	r3, r6
 8009dfc:	bf08      	it	eq
 8009dfe:	f042 0201 	orreq.w	r2, r2, #1
 8009e02:	3618      	adds	r6, #24
 8009e04:	42b3      	cmp	r3, r6
 8009e06:	bf08      	it	eq
 8009e08:	f042 0201 	orreq.w	r2, r2, #1
 8009e0c:	3618      	adds	r6, #24
 8009e0e:	42b3      	cmp	r3, r6
 8009e10:	bf08      	it	eq
 8009e12:	f042 0201 	orreq.w	r2, r2, #1
 8009e16:	3618      	adds	r6, #24
 8009e18:	42b3      	cmp	r3, r6
 8009e1a:	bf08      	it	eq
 8009e1c:	f042 0201 	orreq.w	r2, r2, #1
 8009e20:	b91a      	cbnz	r2, 8009e2a <HAL_DMA_IRQHandler+0x24e>
 8009e22:	4a10      	ldr	r2, [pc, #64]	; (8009e64 <HAL_DMA_IRQHandler+0x288>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	f040 81c9 	bne.w	800a1bc <HAL_DMA_IRQHandler+0x5e0>
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	0710      	lsls	r0, r2, #28
 8009e2e:	d521      	bpl.n	8009e74 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009e30:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	0356      	lsls	r6, r2, #13
 8009e38:	f100 814c 	bmi.w	800a0d4 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	05d2      	lsls	r2, r2, #23
 8009e40:	d403      	bmi.n	8009e4a <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	f022 0208 	bic.w	r2, r2, #8
 8009e48:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8009e4a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8009e4e:	b18b      	cbz	r3, 8009e74 <HAL_DMA_IRQHandler+0x298>
 8009e50:	e00c      	b.n	8009e6c <HAL_DMA_IRQHandler+0x290>
 8009e52:	bf00      	nop
 8009e54:	24000314 	.word	0x24000314
 8009e58:	40020010 	.word	0x40020010
 8009e5c:	40020028 	.word	0x40020028
 8009e60:	40020058 	.word	0x40020058
 8009e64:	400204b8 	.word	0x400204b8
 8009e68:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8009e6c:	4648      	mov	r0, r9
 8009e6e:	4798      	blx	r3
 8009e70:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e74:	f001 011f 	and.w	r1, r1, #31
 8009e78:	2620      	movs	r6, #32
 8009e7a:	408e      	lsls	r6, r1
 8009e7c:	423e      	tst	r6, r7
 8009e7e:	d068      	beq.n	8009f52 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009e80:	f8d9 2000 	ldr.w	r2, [r9]
 8009e84:	4ba5      	ldr	r3, [pc, #660]	; (800a11c <HAL_DMA_IRQHandler+0x540>)
 8009e86:	4fa6      	ldr	r7, [pc, #664]	; (800a120 <HAL_DMA_IRQHandler+0x544>)
 8009e88:	42ba      	cmp	r2, r7
 8009e8a:	bf18      	it	ne
 8009e8c:	429a      	cmpne	r2, r3
 8009e8e:	f107 0718 	add.w	r7, r7, #24
 8009e92:	bf0c      	ite	eq
 8009e94:	2301      	moveq	r3, #1
 8009e96:	2300      	movne	r3, #0
 8009e98:	42ba      	cmp	r2, r7
 8009e9a:	bf08      	it	eq
 8009e9c:	f043 0301 	orreq.w	r3, r3, #1
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	42ba      	cmp	r2, r7
 8009ea4:	bf08      	it	eq
 8009ea6:	f043 0301 	orreq.w	r3, r3, #1
 8009eaa:	3718      	adds	r7, #24
 8009eac:	42ba      	cmp	r2, r7
 8009eae:	bf08      	it	eq
 8009eb0:	f043 0301 	orreq.w	r3, r3, #1
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	42ba      	cmp	r2, r7
 8009eb8:	bf08      	it	eq
 8009eba:	f043 0301 	orreq.w	r3, r3, #1
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	42ba      	cmp	r2, r7
 8009ec2:	bf08      	it	eq
 8009ec4:	f043 0301 	orreq.w	r3, r3, #1
 8009ec8:	3718      	adds	r7, #24
 8009eca:	42ba      	cmp	r2, r7
 8009ecc:	bf08      	it	eq
 8009ece:	f043 0301 	orreq.w	r3, r3, #1
 8009ed2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8009ed6:	42ba      	cmp	r2, r7
 8009ed8:	bf08      	it	eq
 8009eda:	f043 0301 	orreq.w	r3, r3, #1
 8009ede:	3718      	adds	r7, #24
 8009ee0:	42ba      	cmp	r2, r7
 8009ee2:	bf08      	it	eq
 8009ee4:	f043 0301 	orreq.w	r3, r3, #1
 8009ee8:	3718      	adds	r7, #24
 8009eea:	42ba      	cmp	r2, r7
 8009eec:	bf08      	it	eq
 8009eee:	f043 0301 	orreq.w	r3, r3, #1
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	42ba      	cmp	r2, r7
 8009ef6:	bf08      	it	eq
 8009ef8:	f043 0301 	orreq.w	r3, r3, #1
 8009efc:	3718      	adds	r7, #24
 8009efe:	42ba      	cmp	r2, r7
 8009f00:	bf08      	it	eq
 8009f02:	f043 0301 	orreq.w	r3, r3, #1
 8009f06:	3718      	adds	r7, #24
 8009f08:	42ba      	cmp	r2, r7
 8009f0a:	bf08      	it	eq
 8009f0c:	f043 0301 	orreq.w	r3, r3, #1
 8009f10:	3718      	adds	r7, #24
 8009f12:	42ba      	cmp	r2, r7
 8009f14:	bf08      	it	eq
 8009f16:	f043 0301 	orreq.w	r3, r3, #1
 8009f1a:	b91b      	cbnz	r3, 8009f24 <HAL_DMA_IRQHandler+0x348>
 8009f1c:	4b81      	ldr	r3, [pc, #516]	; (800a124 <HAL_DMA_IRQHandler+0x548>)
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	f040 8162 	bne.w	800a1e8 <HAL_DMA_IRQHandler+0x60c>
 8009f24:	6813      	ldr	r3, [r2, #0]
 8009f26:	06db      	lsls	r3, r3, #27
 8009f28:	d513      	bpl.n	8009f52 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009f2a:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009f2c:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8009f30:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f32:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009f34:	f000 80ae 	beq.w	800a094 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009f38:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009f3c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009f3e:	f000 80d3 	beq.w	800a0e8 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009f42:	031c      	lsls	r4, r3, #12
 8009f44:	f140 80de 	bpl.w	800a104 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 8009f48:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8009f4c:	b10b      	cbz	r3, 8009f52 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 8009f4e:	4648      	mov	r0, r9
 8009f50:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009f52:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 80b9 	beq.w	800a0ce <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009f5c:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8009f60:	07d8      	lsls	r0, r3, #31
 8009f62:	d51f      	bpl.n	8009fa4 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 8009f64:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 8009f68:	2104      	movs	r1, #4
 8009f6a:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8009f6e:	6813      	ldr	r3, [r2, #0]
 8009f70:	f023 0301 	bic.w	r3, r3, #1
 8009f74:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009f76:	4b6c      	ldr	r3, [pc, #432]	; (800a128 <HAL_DMA_IRQHandler+0x54c>)
 8009f78:	fba3 3505 	umull	r3, r5, r3, r5
 8009f7c:	0aad      	lsrs	r5, r5, #10
 8009f7e:	e002      	b.n	8009f86 <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009f80:	6813      	ldr	r3, [r2, #0]
 8009f82:	07d9      	lsls	r1, r3, #31
 8009f84:	d504      	bpl.n	8009f90 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	42ab      	cmp	r3, r5
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	d9f7      	bls.n	8009f80 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009f90:	6813      	ldr	r3, [r2, #0]
 8009f92:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8009f94:	bf4c      	ite	mi
 8009f96:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8009f98:	2301      	movpl	r3, #1
 8009f9a:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8009fa4:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 8090 	beq.w	800a0ce <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 8009fae:	4648      	mov	r0, r9
}
 8009fb0:	b003      	add	sp, #12
 8009fb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 8009fb6:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	0740      	lsls	r0, r0, #29
 8009fbc:	d50a      	bpl.n	8009fd4 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009fbe:	6818      	ldr	r0, [r3, #0]
 8009fc0:	f020 0004 	bic.w	r0, r0, #4
 8009fc4:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009fc6:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009fc8:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8009fcc:	f042 0201 	orr.w	r2, r2, #1
 8009fd0:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009fd4:	fa27 f20c 	lsr.w	r2, r7, ip
 8009fd8:	07d2      	lsls	r2, r2, #31
 8009fda:	f57f ae76 	bpl.w	8009cca <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009fde:	4a53      	ldr	r2, [pc, #332]	; (800a12c <HAL_DMA_IRQHandler+0x550>)
 8009fe0:	4853      	ldr	r0, [pc, #332]	; (800a130 <HAL_DMA_IRQHandler+0x554>)
 8009fe2:	4283      	cmp	r3, r0
 8009fe4:	bf18      	it	ne
 8009fe6:	4293      	cmpne	r3, r2
 8009fe8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009fec:	bf0c      	ite	eq
 8009fee:	2201      	moveq	r2, #1
 8009ff0:	2200      	movne	r2, #0
 8009ff2:	4283      	cmp	r3, r0
 8009ff4:	bf08      	it	eq
 8009ff6:	f042 0201 	orreq.w	r2, r2, #1
 8009ffa:	3018      	adds	r0, #24
 8009ffc:	4283      	cmp	r3, r0
 8009ffe:	bf08      	it	eq
 800a000:	f042 0201 	orreq.w	r2, r2, #1
 800a004:	3018      	adds	r0, #24
 800a006:	4283      	cmp	r3, r0
 800a008:	bf08      	it	eq
 800a00a:	f042 0201 	orreq.w	r2, r2, #1
 800a00e:	3018      	adds	r0, #24
 800a010:	4283      	cmp	r3, r0
 800a012:	bf08      	it	eq
 800a014:	f042 0201 	orreq.w	r2, r2, #1
 800a018:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800a01c:	4283      	cmp	r3, r0
 800a01e:	bf08      	it	eq
 800a020:	f042 0201 	orreq.w	r2, r2, #1
 800a024:	3018      	adds	r0, #24
 800a026:	4283      	cmp	r3, r0
 800a028:	bf08      	it	eq
 800a02a:	f042 0201 	orreq.w	r2, r2, #1
 800a02e:	3018      	adds	r0, #24
 800a030:	4283      	cmp	r3, r0
 800a032:	bf08      	it	eq
 800a034:	f042 0201 	orreq.w	r2, r2, #1
 800a038:	3018      	adds	r0, #24
 800a03a:	4283      	cmp	r3, r0
 800a03c:	bf08      	it	eq
 800a03e:	f042 0201 	orreq.w	r2, r2, #1
 800a042:	3018      	adds	r0, #24
 800a044:	4283      	cmp	r3, r0
 800a046:	bf08      	it	eq
 800a048:	f042 0201 	orreq.w	r2, r2, #1
 800a04c:	3018      	adds	r0, #24
 800a04e:	4283      	cmp	r3, r0
 800a050:	bf08      	it	eq
 800a052:	f042 0201 	orreq.w	r2, r2, #1
 800a056:	3018      	adds	r0, #24
 800a058:	4283      	cmp	r3, r0
 800a05a:	bf08      	it	eq
 800a05c:	f042 0201 	orreq.w	r2, r2, #1
 800a060:	3018      	adds	r0, #24
 800a062:	4283      	cmp	r3, r0
 800a064:	bf08      	it	eq
 800a066:	f042 0201 	orreq.w	r2, r2, #1
 800a06a:	2a00      	cmp	r2, #0
 800a06c:	f47f ae20 	bne.w	8009cb0 <HAL_DMA_IRQHandler+0xd4>
 800a070:	2e00      	cmp	r6, #0
 800a072:	f47f ae1d 	bne.w	8009cb0 <HAL_DMA_IRQHandler+0xd4>
 800a076:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a078:	2204      	movs	r2, #4
 800a07a:	fa02 f20c 	lsl.w	r2, r2, ip
 800a07e:	423a      	tst	r2, r7
 800a080:	f040 8094 	bne.w	800a1ac <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a084:	2210      	movs	r2, #16
 800a086:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a08a:	ea17 0f0c 	tst.w	r7, ip
 800a08e:	f43f aef1 	beq.w	8009e74 <HAL_DMA_IRQHandler+0x298>
 800a092:	e684      	b.n	8009d9e <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a094:	f023 0316 	bic.w	r3, r3, #22
 800a098:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a09a:	6953      	ldr	r3, [r2, #20]
 800a09c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0a0:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a0a2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800a0a6:	b39b      	cbz	r3, 800a110 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a0a8:	6813      	ldr	r3, [r2, #0]
 800a0aa:	f023 0308 	bic.w	r3, r3, #8
 800a0ae:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a0b0:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800a0b2:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 800a0b4:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a0b6:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800a0ba:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a0be:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 800a0c0:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a0c4:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f47f af70 	bne.w	8009fae <HAL_DMA_IRQHandler+0x3d2>
}
 800a0ce:	b003      	add	sp, #12
 800a0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	0318      	lsls	r0, r3, #12
 800a0d8:	f57f aeb7 	bpl.w	8009e4a <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a0dc:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f47f aec3 	bne.w	8009e6c <HAL_DMA_IRQHandler+0x290>
 800a0e6:	e6c5      	b.n	8009e74 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a0e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800a0ec:	f47f af2c 	bne.w	8009f48 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a0f0:	6811      	ldr	r1, [r2, #0]
 800a0f2:	f021 0110 	bic.w	r1, r1, #16
 800a0f6:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800a0f8:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800a0fa:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800a0fe:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800a102:	e721      	b.n	8009f48 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 800a104:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f47f af20 	bne.w	8009f4e <HAL_DMA_IRQHandler+0x372>
 800a10e:	e720      	b.n	8009f52 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a110:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1c7      	bne.n	800a0a8 <HAL_DMA_IRQHandler+0x4cc>
 800a118:	e7ca      	b.n	800a0b0 <HAL_DMA_IRQHandler+0x4d4>
 800a11a:	bf00      	nop
 800a11c:	40020010 	.word	0x40020010
 800a120:	40020028 	.word	0x40020028
 800a124:	400204b8 	.word	0x400204b8
 800a128:	1b4e81b5 	.word	0x1b4e81b5
 800a12c:	40020058 	.word	0x40020058
 800a130:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a134:	4a4e      	ldr	r2, [pc, #312]	; (800a270 <HAL_DMA_IRQHandler+0x694>)
 800a136:	4d4f      	ldr	r5, [pc, #316]	; (800a274 <HAL_DMA_IRQHandler+0x698>)
 800a138:	42ab      	cmp	r3, r5
 800a13a:	bf18      	it	ne
 800a13c:	4293      	cmpne	r3, r2
 800a13e:	f105 0514 	add.w	r5, r5, #20
 800a142:	bf0c      	ite	eq
 800a144:	2201      	moveq	r2, #1
 800a146:	2200      	movne	r2, #0
 800a148:	42ab      	cmp	r3, r5
 800a14a:	bf08      	it	eq
 800a14c:	f042 0201 	orreq.w	r2, r2, #1
 800a150:	3514      	adds	r5, #20
 800a152:	42ab      	cmp	r3, r5
 800a154:	bf08      	it	eq
 800a156:	f042 0201 	orreq.w	r2, r2, #1
 800a15a:	3514      	adds	r5, #20
 800a15c:	42ab      	cmp	r3, r5
 800a15e:	bf08      	it	eq
 800a160:	f042 0201 	orreq.w	r2, r2, #1
 800a164:	3514      	adds	r5, #20
 800a166:	42ab      	cmp	r3, r5
 800a168:	bf08      	it	eq
 800a16a:	f042 0201 	orreq.w	r2, r2, #1
 800a16e:	3514      	adds	r5, #20
 800a170:	42ab      	cmp	r3, r5
 800a172:	bf08      	it	eq
 800a174:	f042 0201 	orreq.w	r2, r2, #1
 800a178:	b912      	cbnz	r2, 800a180 <HAL_DMA_IRQHandler+0x5a4>
 800a17a:	4a3f      	ldr	r2, [pc, #252]	; (800a278 <HAL_DMA_IRQHandler+0x69c>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d1a6      	bne.n	800a0ce <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a180:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 800a184:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a186:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a188:	f005 051f 	and.w	r5, r5, #31
 800a18c:	40ae      	lsls	r6, r5
 800a18e:	420e      	tst	r6, r1
 800a190:	d019      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0x5ea>
 800a192:	0757      	lsls	r7, r2, #29
 800a194:	d517      	bpl.n	800a1c6 <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a196:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a198:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a19a:	d54b      	bpl.n	800a234 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a19c:	03d1      	lsls	r1, r2, #15
 800a19e:	d44f      	bmi.n	800a240 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a1a0:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f47f af02 	bne.w	8009fae <HAL_DMA_IRQHandler+0x3d2>
 800a1aa:	e790      	b.n	800a0ce <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a1ac:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a1ae:	2210      	movs	r2, #16
 800a1b0:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a1b4:	ea17 0f0c 	tst.w	r7, ip
 800a1b8:	f43f ae5c 	beq.w	8009e74 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	0752      	lsls	r2, r2, #29
 800a1c0:	f57f ae58 	bpl.w	8009e74 <HAL_DMA_IRQHandler+0x298>
 800a1c4:	e634      	b.n	8009e30 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a1c6:	2602      	movs	r6, #2
 800a1c8:	40ae      	lsls	r6, r5
 800a1ca:	420e      	tst	r6, r1
 800a1cc:	d011      	beq.n	800a1f2 <HAL_DMA_IRQHandler+0x616>
 800a1ce:	0797      	lsls	r7, r2, #30
 800a1d0:	d50f      	bpl.n	800a1f2 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a1d2:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1d4:	0414      	lsls	r4, r2, #16
 800a1d6:	d539      	bpl.n	800a24c <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a1d8:	03d0      	lsls	r0, r2, #15
 800a1da:	d443      	bmi.n	800a264 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 800a1dc:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f47f aee4 	bne.w	8009fae <HAL_DMA_IRQHandler+0x3d2>
 800a1e6:	e772      	b.n	800a0ce <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a1e8:	6813      	ldr	r3, [r2, #0]
 800a1ea:	079f      	lsls	r7, r3, #30
 800a1ec:	f57f aeb1 	bpl.w	8009f52 <HAL_DMA_IRQHandler+0x376>
 800a1f0:	e69b      	b.n	8009f2a <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a1f2:	2608      	movs	r6, #8
 800a1f4:	40ae      	lsls	r6, r5
 800a1f6:	420e      	tst	r6, r1
 800a1f8:	f43f af69 	beq.w	800a0ce <HAL_DMA_IRQHandler+0x4f2>
 800a1fc:	0711      	lsls	r1, r2, #28
 800a1fe:	f57f af66 	bpl.w	800a0ce <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a202:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800a204:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a206:	f022 020e 	bic.w	r2, r2, #14
 800a20a:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a20c:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800a20e:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a212:	fa03 f505 	lsl.w	r5, r3, r5
 800a216:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a218:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800a21c:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800a220:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800a224:	2a00      	cmp	r2, #0
 800a226:	f43f af52 	beq.w	800a0ce <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800a22a:	4648      	mov	r0, r9
}
 800a22c:	b003      	add	sp, #12
 800a22e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 800a232:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a234:	0692      	lsls	r2, r2, #26
 800a236:	d403      	bmi.n	800a240 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	f022 0204 	bic.w	r2, r2, #4
 800a23e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800a240:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800a244:	2b00      	cmp	r3, #0
 800a246:	f47f aeb2 	bne.w	8009fae <HAL_DMA_IRQHandler+0x3d2>
 800a24a:	e740      	b.n	800a0ce <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a24c:	f012 0220 	ands.w	r2, r2, #32
 800a250:	d108      	bne.n	800a264 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a252:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a254:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a256:	f021 010a 	bic.w	r1, r1, #10
 800a25a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a25c:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a260:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800a264:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f47f aea0 	bne.w	8009fae <HAL_DMA_IRQHandler+0x3d2>
 800a26e:	e72e      	b.n	800a0ce <HAL_DMA_IRQHandler+0x4f2>
 800a270:	58025408 	.word	0x58025408
 800a274:	5802541c 	.word	0x5802541c
 800a278:	58025494 	.word	0x58025494

0800a27c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a280:	680c      	ldr	r4, [r1, #0]
{
 800a282:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a284:	2c00      	cmp	r4, #0
 800a286:	f000 80a6 	beq.w	800a3d6 <HAL_GPIO_Init+0x15a>
 800a28a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a28e:	4f8e      	ldr	r7, [pc, #568]	; (800a4c8 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 800a290:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a292:	2201      	movs	r2, #1
 800a294:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800a296:	ea12 0e04 	ands.w	lr, r2, r4
 800a29a:	f000 8095 	beq.w	800a3c8 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a29e:	684d      	ldr	r5, [r1, #4]
 800a2a0:	f005 0903 	and.w	r9, r5, #3
 800a2a4:	f109 36ff 	add.w	r6, r9, #4294967295
 800a2a8:	2e01      	cmp	r6, #1
 800a2aa:	f240 8097 	bls.w	800a3dc <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a2ae:	f1b9 0f03 	cmp.w	r9, #3
 800a2b2:	f040 80d1 	bne.w	800a458 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a2b6:	fa09 f20c 	lsl.w	r2, r9, ip
 800a2ba:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 800a2be:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a2c0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a2c4:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a2c8:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 800a2cc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a2ce:	d07b      	beq.n	800a3c8 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2d0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800a2d4:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2d8:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2dc:	f042 0202 	orr.w	r2, r2, #2
 800a2e0:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2e4:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a2ec:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800a2f0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800a2f4:	f002 0202 	and.w	r2, r2, #2
 800a2f8:	9201      	str	r2, [sp, #4]
 800a2fa:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2fc:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800a2fe:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a302:	fa02 f209 	lsl.w	r2, r2, r9
 800a306:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a30a:	4e70      	ldr	r6, [pc, #448]	; (800a4cc <HAL_GPIO_Init+0x250>)
 800a30c:	42b0      	cmp	r0, r6
 800a30e:	d029      	beq.n	800a364 <HAL_GPIO_Init+0xe8>
 800a310:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a314:	42b0      	cmp	r0, r6
 800a316:	f000 80ac 	beq.w	800a472 <HAL_GPIO_Init+0x1f6>
 800a31a:	4e6d      	ldr	r6, [pc, #436]	; (800a4d0 <HAL_GPIO_Init+0x254>)
 800a31c:	42b0      	cmp	r0, r6
 800a31e:	f000 80ae 	beq.w	800a47e <HAL_GPIO_Init+0x202>
 800a322:	4e6c      	ldr	r6, [pc, #432]	; (800a4d4 <HAL_GPIO_Init+0x258>)
 800a324:	42b0      	cmp	r0, r6
 800a326:	f000 809e 	beq.w	800a466 <HAL_GPIO_Init+0x1ea>
 800a32a:	4e6b      	ldr	r6, [pc, #428]	; (800a4d8 <HAL_GPIO_Init+0x25c>)
 800a32c:	42b0      	cmp	r0, r6
 800a32e:	f000 80b2 	beq.w	800a496 <HAL_GPIO_Init+0x21a>
 800a332:	4e6a      	ldr	r6, [pc, #424]	; (800a4dc <HAL_GPIO_Init+0x260>)
 800a334:	42b0      	cmp	r0, r6
 800a336:	f000 80b4 	beq.w	800a4a2 <HAL_GPIO_Init+0x226>
 800a33a:	4e69      	ldr	r6, [pc, #420]	; (800a4e0 <HAL_GPIO_Init+0x264>)
 800a33c:	42b0      	cmp	r0, r6
 800a33e:	f000 80a4 	beq.w	800a48a <HAL_GPIO_Init+0x20e>
 800a342:	4e68      	ldr	r6, [pc, #416]	; (800a4e4 <HAL_GPIO_Init+0x268>)
 800a344:	42b0      	cmp	r0, r6
 800a346:	f000 80b2 	beq.w	800a4ae <HAL_GPIO_Init+0x232>
 800a34a:	4e67      	ldr	r6, [pc, #412]	; (800a4e8 <HAL_GPIO_Init+0x26c>)
 800a34c:	42b0      	cmp	r0, r6
 800a34e:	f000 80b4 	beq.w	800a4ba <HAL_GPIO_Init+0x23e>
 800a352:	4e66      	ldr	r6, [pc, #408]	; (800a4ec <HAL_GPIO_Init+0x270>)
 800a354:	42b0      	cmp	r0, r6
 800a356:	bf0c      	ite	eq
 800a358:	2609      	moveq	r6, #9
 800a35a:	260a      	movne	r6, #10
 800a35c:	fa06 f909 	lsl.w	r9, r6, r9
 800a360:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a364:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a36c:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800a36e:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 800a372:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800a374:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800a378:	bf54      	ite	pl
 800a37a:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 800a37e:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 800a382:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a384:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 800a386:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800a388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800a38c:	bf54      	ite	pl
 800a38e:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 800a392:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 800a396:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a398:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a39c:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a39e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800a3a2:	bf54      	ite	pl
 800a3a4:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 800a3a8:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a3ac:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a3ae:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800a3b2:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800a3b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 800a3ba:	bf54      	ite	pl
 800a3bc:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 800a3c0:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800a3c4:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 800a3c8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a3ca:	f10c 0c02 	add.w	ip, ip, #2
 800a3ce:	fa34 f203 	lsrs.w	r2, r4, r3
 800a3d2:	f47f af5e 	bne.w	800a292 <HAL_GPIO_Init+0x16>
  }
}
 800a3d6:	b003      	add	sp, #12
 800a3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3dc:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 800a3e0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3e2:	fa08 f80c 	lsl.w	r8, r8, ip
 800a3e6:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a3ea:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3ec:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a3f0:	fa06 f60c 	lsl.w	r6, r6, ip
 800a3f4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800a3f8:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a3fa:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 800a3fe:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a402:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a404:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a408:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800a40a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800a40c:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a40e:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a412:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a414:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a418:	fa06 f60c 	lsl.w	r6, r6, ip
 800a41c:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 800a420:	fa09 f20c 	lsl.w	r2, r9, ip
 800a424:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a426:	f47f af4a 	bne.w	800a2be <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a42a:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800a42e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a432:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800a436:	260f      	movs	r6, #15
 800a438:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800a43c:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 800a440:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a444:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a448:	690e      	ldr	r6, [r1, #16]
 800a44a:	fa06 f60b 	lsl.w	r6, r6, fp
 800a44e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 800a452:	f8c9 6020 	str.w	r6, [r9, #32]
 800a456:	e732      	b.n	800a2be <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a458:	f04f 0803 	mov.w	r8, #3
 800a45c:	fa08 f80c 	lsl.w	r8, r8, ip
 800a460:	ea6f 0808 	mvn.w	r8, r8
 800a464:	e7d2      	b.n	800a40c <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a466:	2603      	movs	r6, #3
 800a468:	fa06 f909 	lsl.w	r9, r6, r9
 800a46c:	ea42 0209 	orr.w	r2, r2, r9
 800a470:	e778      	b.n	800a364 <HAL_GPIO_Init+0xe8>
 800a472:	2601      	movs	r6, #1
 800a474:	fa06 f909 	lsl.w	r9, r6, r9
 800a478:	ea42 0209 	orr.w	r2, r2, r9
 800a47c:	e772      	b.n	800a364 <HAL_GPIO_Init+0xe8>
 800a47e:	2602      	movs	r6, #2
 800a480:	fa06 f909 	lsl.w	r9, r6, r9
 800a484:	ea42 0209 	orr.w	r2, r2, r9
 800a488:	e76c      	b.n	800a364 <HAL_GPIO_Init+0xe8>
 800a48a:	2606      	movs	r6, #6
 800a48c:	fa06 f909 	lsl.w	r9, r6, r9
 800a490:	ea42 0209 	orr.w	r2, r2, r9
 800a494:	e766      	b.n	800a364 <HAL_GPIO_Init+0xe8>
 800a496:	2604      	movs	r6, #4
 800a498:	fa06 f909 	lsl.w	r9, r6, r9
 800a49c:	ea42 0209 	orr.w	r2, r2, r9
 800a4a0:	e760      	b.n	800a364 <HAL_GPIO_Init+0xe8>
 800a4a2:	2605      	movs	r6, #5
 800a4a4:	fa06 f909 	lsl.w	r9, r6, r9
 800a4a8:	ea42 0209 	orr.w	r2, r2, r9
 800a4ac:	e75a      	b.n	800a364 <HAL_GPIO_Init+0xe8>
 800a4ae:	2607      	movs	r6, #7
 800a4b0:	fa06 f909 	lsl.w	r9, r6, r9
 800a4b4:	ea42 0209 	orr.w	r2, r2, r9
 800a4b8:	e754      	b.n	800a364 <HAL_GPIO_Init+0xe8>
 800a4ba:	2608      	movs	r6, #8
 800a4bc:	fa06 f909 	lsl.w	r9, r6, r9
 800a4c0:	ea42 0209 	orr.w	r2, r2, r9
 800a4c4:	e74e      	b.n	800a364 <HAL_GPIO_Init+0xe8>
 800a4c6:	bf00      	nop
 800a4c8:	58024400 	.word	0x58024400
 800a4cc:	58020000 	.word	0x58020000
 800a4d0:	58020800 	.word	0x58020800
 800a4d4:	58020c00 	.word	0x58020c00
 800a4d8:	58021000 	.word	0x58021000
 800a4dc:	58021400 	.word	0x58021400
 800a4e0:	58021800 	.word	0x58021800
 800a4e4:	58021c00 	.word	0x58021c00
 800a4e8:	58022000 	.word	0x58022000
 800a4ec:	58022400 	.word	0x58022400

0800a4f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a4f0:	6903      	ldr	r3, [r0, #16]
 800a4f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800a4f4:	bf14      	ite	ne
 800a4f6:	2001      	movne	r0, #1
 800a4f8:	2000      	moveq	r0, #0
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a4fc:	b902      	cbnz	r2, 800a500 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a4fe:	0409      	lsls	r1, r1, #16
 800a500:	6181      	str	r1, [r0, #24]
  }
}
 800a502:	4770      	bx	lr

0800a504 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a508:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800a50c:	4201      	tst	r1, r0
 800a50e:	d100      	bne.n	800a512 <HAL_GPIO_EXTI_IRQHandler+0xe>
 800a510:	4770      	bx	lr
{
 800a512:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a514:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a518:	f7f7 fdc6 	bl	80020a8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a51c:	bd08      	pop	{r3, pc}
 800a51e:	bf00      	nop

0800a520 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800a520:	2800      	cmp	r0, #0
 800a522:	d05e      	beq.n	800a5e2 <HAL_LPTIM_Init+0xc2>
{
 800a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800a526:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800a52a:	4604      	mov	r4, r0
 800a52c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a530:	2b00      	cmp	r3, #0
 800a532:	d051      	beq.n	800a5d8 <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a534:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a536:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a538:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a53c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a540:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 800a542:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a544:	d03c      	beq.n	800a5c0 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a546:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800a54a:	d039      	beq.n	800a5c0 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800a54c:	6962      	ldr	r2, [r4, #20]
 800a54e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a552:	429a      	cmp	r2, r3
 800a554:	d003      	beq.n	800a55e <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800a556:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800a55a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a55e:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 800a560:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a562:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 800a564:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800a566:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a568:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a56a:	4e22      	ldr	r6, [pc, #136]	; (800a5f4 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 800a56c:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a56e:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a570:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800a572:	b1ed      	cbz	r5, 800a5b0 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800a574:	2d01      	cmp	r5, #1
 800a576:	d11f      	bne.n	800a5b8 <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800a578:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 800a57c:	4328      	orrs	r0, r5
 800a57e:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800a580:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a584:	4282      	cmp	r2, r0
 800a586:	d004      	beq.n	800a592 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a588:	69a0      	ldr	r0, [r4, #24]
 800a58a:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 800a58c:	69e0      	ldr	r0, [r4, #28]
 800a58e:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a590:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800a592:	4a19      	ldr	r2, [pc, #100]	; (800a5f8 <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 800a594:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800a596:	4291      	cmp	r1, r2
 800a598:	d015      	beq.n	800a5c6 <HAL_LPTIM_Init+0xa6>
 800a59a:	4b18      	ldr	r3, [pc, #96]	; (800a5fc <HAL_LPTIM_Init+0xdc>)
 800a59c:	4299      	cmp	r1, r3
 800a59e:	d012      	beq.n	800a5c6 <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800a5a0:	4b17      	ldr	r3, [pc, #92]	; (800a600 <HAL_LPTIM_Init+0xe0>)
 800a5a2:	4299      	cmp	r1, r3
 800a5a4:	d01f      	beq.n	800a5e6 <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a5a6:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800a5a8:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a5aa:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800a5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800a5b0:	69e0      	ldr	r0, [r4, #28]
 800a5b2:	6925      	ldr	r5, [r4, #16]
 800a5b4:	4328      	orrs	r0, r5
 800a5b6:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800a5b8:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800a5bc:	d1e0      	bne.n	800a580 <HAL_LPTIM_Init+0x60>
 800a5be:	e7db      	b.n	800a578 <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800a5c0:	f020 001e 	bic.w	r0, r0, #30
 800a5c4:	e7c2      	b.n	800a54c <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800a5c6:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 800a5ca:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800a5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 800a5d8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 800a5dc:	f7fc f9c0 	bl	8006960 <HAL_LPTIM_MspInit>
 800a5e0:	e7a8      	b.n	800a534 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 800a5e2:	2001      	movs	r0, #1
}
 800a5e4:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800a5e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a5e8:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800a5ea:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800a5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f4:	ff19f1fe 	.word	0xff19f1fe
 800a5f8:	40002400 	.word	0x40002400
 800a5fc:	58002400 	.word	0x58002400
 800a600:	58002800 	.word	0x58002800

0800a604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a606:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a608:	2800      	cmp	r0, #0
 800a60a:	f000 8088 	beq.w	800a71e <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a60e:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 800a612:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800a614:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d079      	beq.n	800a712 <HAL_PCD_Init+0x10e>
 800a61e:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a620:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a622:	462e      	mov	r6, r5
 800a624:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800a626:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a62a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a62c:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a62e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800a632:	bf08      	it	eq
 800a634:	60eb      	streq	r3, [r5, #12]
  __HAL_PCD_DISABLE(hpcd);
 800a636:	f003 ff8f 	bl	800e558 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a63a:	f856 eb10 	ldr.w	lr, [r6], #16
 800a63e:	46b4      	mov	ip, r6
 800a640:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a646:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a64a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a64c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a650:	e884 0003 	stmia.w	r4, {r0, r1}
 800a654:	4670      	mov	r0, lr
 800a656:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a65a:	f003 fedb 	bl	800e414 <USB_CoreInit>
 800a65e:	4604      	mov	r4, r0
 800a660:	b130      	cbz	r0, 800a670 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800a662:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a664:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800a666:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a668:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 800a66c:	b00b      	add	sp, #44	; 0x2c
 800a66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a670:	4601      	mov	r1, r0
 800a672:	6828      	ldr	r0, [r5, #0]
 800a674:	f003 ff78 	bl	800e568 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a678:	6868      	ldr	r0, [r5, #4]
 800a67a:	b358      	cbz	r0, 800a6d4 <HAL_PCD_Init+0xd0>
 800a67c:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800a67e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a682:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800a684:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a688:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800a68c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a694:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a698:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800a69c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6a0:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a6a2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 800a6a6:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a6a8:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6ac:	d3ea      	bcc.n	800a684 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6b4:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800a6b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800a6ba:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6be:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800a6c0:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6c4:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a6c6:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a6ca:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a6ce:	e9c3 22a1 	strd	r2, r2, [r3, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6d2:	d3ed      	bcc.n	800a6b0 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a6d4:	466c      	mov	r4, sp
 800a6d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a6d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a6dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6de:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a6e2:	e884 0003 	stmia.w	r4, {r0, r1}
 800a6e6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a6ea:	6828      	ldr	r0, [r5, #0]
 800a6ec:	f003 ff72 	bl	800e5d4 <USB_DevInit>
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d1b5      	bne.n	800a662 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 800a6f6:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800a6f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800a6fa:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800a6fe:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800a700:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 800a704:	d00f      	beq.n	800a726 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 800a706:	6828      	ldr	r0, [r5, #0]
 800a708:	f004 f878 	bl	800e7fc <USB_DevDisconnect>
}
 800a70c:	4620      	mov	r0, r4
 800a70e:	b00b      	add	sp, #44	; 0x2c
 800a710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800a712:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 800a716:	f7fc fabb 	bl	8006c90 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800a71a:	6828      	ldr	r0, [r5, #0]
 800a71c:	e780      	b.n	800a620 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800a71e:	2401      	movs	r4, #1
}
 800a720:	4620      	mov	r0, r4
 800a722:	b00b      	add	sp, #44	; 0x2c
 800a724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a726:	4628      	mov	r0, r5
 800a728:	f000 f802 	bl	800a730 <HAL_PCDEx_ActivateLPM>
 800a72c:	e7eb      	b.n	800a706 <HAL_PCD_Init+0x102>
 800a72e:	bf00      	nop

0800a730 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a730:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800a732:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a736:	4909      	ldr	r1, [pc, #36]	; (800a75c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a738:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800a73a:	4660      	mov	r0, ip
{
 800a73c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800a73e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800a740:	f883 c4f4 	strb.w	ip, [r3, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 800a744:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a748:	6993      	ldr	r3, [r2, #24]
}
 800a74a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a74e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a752:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a754:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a756:	4319      	orrs	r1, r3
 800a758:	6551      	str	r1, [r2, #84]	; 0x54
}
 800a75a:	4770      	bx	lr
 800a75c:	10000003 	.word	0x10000003

0800a760 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a760:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a762:	4c10      	ldr	r4, [pc, #64]	; (800a7a4 <HAL_PWREx_ConfigSupply+0x44>)
 800a764:	68e3      	ldr	r3, [r4, #12]
 800a766:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a76a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a76c:	d105      	bne.n	800a77a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a76e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a772:	1a18      	subs	r0, r3, r0
 800a774:	bf18      	it	ne
 800a776:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a778:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a77a:	f023 0307 	bic.w	r3, r3, #7
 800a77e:	4318      	orrs	r0, r3
 800a780:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800a782:	f7fc fd01 	bl	8007188 <HAL_GetTick>
 800a786:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a788:	e005      	b.n	800a796 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a78a:	f7fc fcfd 	bl	8007188 <HAL_GetTick>
 800a78e:	1b40      	subs	r0, r0, r5
 800a790:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a794:	d804      	bhi.n	800a7a0 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a796:	6863      	ldr	r3, [r4, #4]
 800a798:	049b      	lsls	r3, r3, #18
 800a79a:	d5f6      	bpl.n	800a78a <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800a79c:	2000      	movs	r0, #0
}
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800a7a0:	2001      	movs	r0, #1
}
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	58024800 	.word	0x58024800

0800a7a8 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a7a8:	4a02      	ldr	r2, [pc, #8]	; (800a7b4 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800a7aa:	68d3      	ldr	r3, [r2, #12]
 800a7ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7b0:	60d3      	str	r3, [r2, #12]
}
 800a7b2:	4770      	bx	lr
 800a7b4:	58024800 	.word	0x58024800

0800a7b8 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7b8:	4b3b      	ldr	r3, [pc, #236]	; (800a8a8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800a7ba:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a7be:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a7c0:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800a7c2:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a7c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a7c8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800a7cc:	d038      	beq.n	800a840 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a7ce:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a7d2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7d6:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a7da:	fb05 f101 	mul.w	r1, r5, r1
 800a7de:	2a01      	cmp	r2, #1
 800a7e0:	ee07 1a90 	vmov	s15, r1
 800a7e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800a7e8:	d002      	beq.n	800a7f0 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800a7ea:	2a02      	cmp	r2, #2
 800a7ec:	d04e      	beq.n	800a88c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800a7ee:	b34a      	cbz	r2, 800a844 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f0:	ee07 0a90 	vmov	s15, r0
 800a7f4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800a8ac <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800a7f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fe:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a802:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800a8b0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800a806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a80a:	ee06 3a90 	vmov	s13, r3
 800a80e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a812:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a816:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a81a:	eee7 6a25 	vfma.f32	s13, s14, s11
 800a81e:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a822:	4b21      	ldr	r3, [pc, #132]	; (800a8a8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800a824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a826:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a82a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a82c:	ee07 3a90 	vmov	s15, r3
 800a830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a83c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a840:	bc30      	pop	{r4, r5}
 800a842:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	0692      	lsls	r2, r2, #26
 800a848:	d527      	bpl.n	800a89a <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a84a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a84c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a850:	4a18      	ldr	r2, [pc, #96]	; (800a8b4 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a852:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a858:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a85c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a860:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800a8b0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800a864:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a868:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a86a:	ee06 3a90 	vmov	s13, r3
 800a86e:	ee05 2a90 	vmov	s11, r2
 800a872:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a876:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800a87a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a87e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800a882:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a886:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a88a:	e7ca      	b.n	800a822 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a88c:	ee07 0a90 	vmov	s15, r0
 800a890:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a8b8 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800a894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a898:	e7b0      	b.n	800a7fc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a89a:	ee07 0a90 	vmov	s15, r0
 800a89e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800a8bc <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800a8a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8a6:	e7a9      	b.n	800a7fc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800a8a8:	58024400 	.word	0x58024400
 800a8ac:	4a742400 	.word	0x4a742400
 800a8b0:	39000000 	.word	0x39000000
 800a8b4:	03d09000 	.word	0x03d09000
 800a8b8:	4bbebc20 	.word	0x4bbebc20
 800a8bc:	4c742400 	.word	0x4c742400

0800a8c0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f000 81e8 	beq.w	800ac96 <HAL_RCC_OscConfig+0x3d6>
{
 800a8c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8c8:	6803      	ldr	r3, [r0, #0]
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	07d9      	lsls	r1, r3, #31
 800a8ce:	d52e      	bpl.n	800a92e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8d0:	49a4      	ldr	r1, [pc, #656]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800a8d2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8d4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a8da:	2a10      	cmp	r2, #16
 800a8dc:	f000 8107 	beq.w	800aaee <HAL_RCC_OscConfig+0x22e>
 800a8e0:	2a18      	cmp	r2, #24
 800a8e2:	f000 80ff 	beq.w	800aae4 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8e6:	6863      	ldr	r3, [r4, #4]
 800a8e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ec:	f000 812a 	beq.w	800ab44 <HAL_RCC_OscConfig+0x284>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 8168 	beq.w	800abc6 <HAL_RCC_OscConfig+0x306>
 800a8f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8fa:	4b9a      	ldr	r3, [pc, #616]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	f000 8289 	beq.w	800ae14 <HAL_RCC_OscConfig+0x554>
 800a902:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a90e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a910:	f7fc fc3a 	bl	8007188 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a914:	4e93      	ldr	r6, [pc, #588]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800a916:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a918:	e005      	b.n	800a926 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a91a:	f7fc fc35 	bl	8007188 <HAL_GetTick>
 800a91e:	1b40      	subs	r0, r0, r5
 800a920:	2864      	cmp	r0, #100	; 0x64
 800a922:	f200 814e 	bhi.w	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a926:	6833      	ldr	r3, [r6, #0]
 800a928:	039b      	lsls	r3, r3, #14
 800a92a:	d5f6      	bpl.n	800a91a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	079d      	lsls	r5, r3, #30
 800a930:	f100 808a 	bmi.w	800aa48 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a934:	06d9      	lsls	r1, r3, #27
 800a936:	d533      	bpl.n	800a9a0 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a938:	4a8a      	ldr	r2, [pc, #552]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800a93a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a93c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a93e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a942:	2b08      	cmp	r3, #8
 800a944:	f000 80e3 	beq.w	800ab0e <HAL_RCC_OscConfig+0x24e>
 800a948:	2b18      	cmp	r3, #24
 800a94a:	f000 80db 	beq.w	800ab04 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a94e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800a950:	4d84      	ldr	r5, [pc, #528]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 816f 	beq.w	800ac36 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a95e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a960:	f7fc fc12 	bl	8007188 <HAL_GetTick>
 800a964:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a966:	e005      	b.n	800a974 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a968:	f7fc fc0e 	bl	8007188 <HAL_GetTick>
 800a96c:	1b80      	subs	r0, r0, r6
 800a96e:	2802      	cmp	r0, #2
 800a970:	f200 8127 	bhi.w	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	05db      	lsls	r3, r3, #23
 800a978:	d5f6      	bpl.n	800a968 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a97a:	f7fc fc1d 	bl	80071b8 <HAL_GetREVID>
 800a97e:	f241 0303 	movw	r3, #4099	; 0x1003
 800a982:	4298      	cmp	r0, r3
 800a984:	f200 826d 	bhi.w	800ae62 <HAL_RCC_OscConfig+0x5a2>
 800a988:	6a22      	ldr	r2, [r4, #32]
 800a98a:	686b      	ldr	r3, [r5, #4]
 800a98c:	2a20      	cmp	r2, #32
 800a98e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a992:	bf0c      	ite	eq
 800a994:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800a998:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a99c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	071d      	lsls	r5, r3, #28
 800a9a2:	d516      	bpl.n	800a9d2 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a9a4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800a9a6:	4d6f      	ldr	r5, [pc, #444]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 8122 	beq.w	800abf2 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800a9ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a9b0:	f043 0301 	orr.w	r3, r3, #1
 800a9b4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a9b6:	f7fc fbe7 	bl	8007188 <HAL_GetTick>
 800a9ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a9bc:	e005      	b.n	800a9ca <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9be:	f7fc fbe3 	bl	8007188 <HAL_GetTick>
 800a9c2:	1b80      	subs	r0, r0, r6
 800a9c4:	2802      	cmp	r0, #2
 800a9c6:	f200 80fc 	bhi.w	800abc2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a9ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a9cc:	0798      	lsls	r0, r3, #30
 800a9ce:	d5f6      	bpl.n	800a9be <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	069a      	lsls	r2, r3, #26
 800a9d4:	d516      	bpl.n	800aa04 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a9d6:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800a9d8:	4d62      	ldr	r5, [pc, #392]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 811a 	beq.w	800ac14 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9e6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a9e8:	f7fc fbce 	bl	8007188 <HAL_GetTick>
 800a9ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9ee:	e005      	b.n	800a9fc <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9f0:	f7fc fbca 	bl	8007188 <HAL_GetTick>
 800a9f4:	1b80      	subs	r0, r0, r6
 800a9f6:	2802      	cmp	r0, #2
 800a9f8:	f200 80e3 	bhi.w	800abc2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	049f      	lsls	r7, r3, #18
 800aa00:	d5f6      	bpl.n	800a9f0 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	0759      	lsls	r1, r3, #29
 800aa06:	f100 80a3 	bmi.w	800ab50 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aa0c:	b1d0      	cbz	r0, 800aa44 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aa0e:	4d55      	ldr	r5, [pc, #340]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800aa10:	692b      	ldr	r3, [r5, #16]
 800aa12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa16:	2b18      	cmp	r3, #24
 800aa18:	f000 81ae 	beq.w	800ad78 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800aa1c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa1e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800aa20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa24:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa26:	f000 8142 	beq.w	800acae <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800aa2a:	f7fc fbad 	bl	8007188 <HAL_GetTick>
 800aa2e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa30:	e005      	b.n	800aa3e <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa32:	f7fc fba9 	bl	8007188 <HAL_GetTick>
 800aa36:	1b00      	subs	r0, r0, r4
 800aa38:	2802      	cmp	r0, #2
 800aa3a:	f200 80c2 	bhi.w	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa3e:	682b      	ldr	r3, [r5, #0]
 800aa40:	019b      	lsls	r3, r3, #6
 800aa42:	d4f6      	bmi.n	800aa32 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800aa44:	2000      	movs	r0, #0
}
 800aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa48:	4a46      	ldr	r2, [pc, #280]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800aa4a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aa4e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800aa52:	d12d      	bne.n	800aab0 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa54:	4b43      	ldr	r3, [pc, #268]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800aa56:	68e2      	ldr	r2, [r4, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	0759      	lsls	r1, r3, #29
 800aa5c:	d501      	bpl.n	800aa62 <HAL_RCC_OscConfig+0x1a2>
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	d04e      	beq.n	800ab00 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa62:	4d40      	ldr	r5, [pc, #256]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	f023 0319 	bic.w	r3, r3, #25
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aa6e:	f7fc fb8b 	bl	8007188 <HAL_GetTick>
 800aa72:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa74:	e005      	b.n	800aa82 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa76:	f7fc fb87 	bl	8007188 <HAL_GetTick>
 800aa7a:	1b80      	subs	r0, r0, r6
 800aa7c:	2802      	cmp	r0, #2
 800aa7e:	f200 80a0 	bhi.w	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	075b      	lsls	r3, r3, #29
 800aa86:	d5f6      	bpl.n	800aa76 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa88:	f7fc fb96 	bl	80071b8 <HAL_GetREVID>
 800aa8c:	f241 0303 	movw	r3, #4099	; 0x1003
 800aa90:	4298      	cmp	r0, r3
 800aa92:	f200 80f7 	bhi.w	800ac84 <HAL_RCC_OscConfig+0x3c4>
 800aa96:	6922      	ldr	r2, [r4, #16]
 800aa98:	686b      	ldr	r3, [r5, #4]
 800aa9a:	2a40      	cmp	r2, #64	; 0x40
 800aa9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800aaa0:	bf0c      	ite	eq
 800aaa2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800aaa6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800aaaa:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	e741      	b.n	800a934 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aab0:	2b18      	cmp	r3, #24
 800aab2:	f000 80e3 	beq.w	800ac7c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aab6:	4d2b      	ldr	r5, [pc, #172]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aab8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aaba:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aabc:	2a00      	cmp	r2, #0
 800aabe:	f000 80cc 	beq.w	800ac5a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aac2:	f023 0319 	bic.w	r3, r3, #25
 800aac6:	4313      	orrs	r3, r2
 800aac8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aaca:	f7fc fb5d 	bl	8007188 <HAL_GetTick>
 800aace:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aad0:	e004      	b.n	800aadc <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aad2:	f7fc fb59 	bl	8007188 <HAL_GetTick>
 800aad6:	1b80      	subs	r0, r0, r6
 800aad8:	2802      	cmp	r0, #2
 800aada:	d872      	bhi.n	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	075f      	lsls	r7, r3, #29
 800aae0:	d5f7      	bpl.n	800aad2 <HAL_RCC_OscConfig+0x212>
 800aae2:	e7d1      	b.n	800aa88 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aae4:	f001 0103 	and.w	r1, r1, #3
 800aae8:	2902      	cmp	r1, #2
 800aaea:	f47f aefc 	bne.w	800a8e6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaee:	4a1d      	ldr	r2, [pc, #116]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800aaf0:	6812      	ldr	r2, [r2, #0]
 800aaf2:	0392      	lsls	r2, r2, #14
 800aaf4:	f57f af1b 	bpl.w	800a92e <HAL_RCC_OscConfig+0x6e>
 800aaf8:	6862      	ldr	r2, [r4, #4]
 800aafa:	2a00      	cmp	r2, #0
 800aafc:	f47f af17 	bne.w	800a92e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800ab00:	2001      	movs	r0, #1
}
 800ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ab04:	f002 0203 	and.w	r2, r2, #3
 800ab08:	2a01      	cmp	r2, #1
 800ab0a:	f47f af20 	bne.w	800a94e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab0e:	4b15      	ldr	r3, [pc, #84]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	05da      	lsls	r2, r3, #23
 800ab14:	d502      	bpl.n	800ab1c <HAL_RCC_OscConfig+0x25c>
 800ab16:	69e3      	ldr	r3, [r4, #28]
 800ab18:	2b80      	cmp	r3, #128	; 0x80
 800ab1a:	d1f1      	bne.n	800ab00 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab1c:	f7fc fb4c 	bl	80071b8 <HAL_GetREVID>
 800ab20:	f241 0303 	movw	r3, #4099	; 0x1003
 800ab24:	4298      	cmp	r0, r3
 800ab26:	f200 80b8 	bhi.w	800ac9a <HAL_RCC_OscConfig+0x3da>
 800ab2a:	6a22      	ldr	r2, [r4, #32]
 800ab2c:	2a20      	cmp	r2, #32
 800ab2e:	f000 81a7 	beq.w	800ae80 <HAL_RCC_OscConfig+0x5c0>
 800ab32:	490c      	ldr	r1, [pc, #48]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800ab34:	684b      	ldr	r3, [r1, #4]
 800ab36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ab3a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800ab3e:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	e72d      	b.n	800a9a0 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab44:	4a07      	ldr	r2, [pc, #28]	; (800ab64 <HAL_RCC_OscConfig+0x2a4>)
 800ab46:	6813      	ldr	r3, [r2, #0]
 800ab48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab4c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab4e:	e6df      	b.n	800a910 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800ab50:	4d05      	ldr	r5, [pc, #20]	; (800ab68 <HAL_RCC_OscConfig+0x2a8>)
 800ab52:	682b      	ldr	r3, [r5, #0]
 800ab54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab58:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800ab5a:	f7fc fb15 	bl	8007188 <HAL_GetTick>
 800ab5e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab60:	e009      	b.n	800ab76 <HAL_RCC_OscConfig+0x2b6>
 800ab62:	bf00      	nop
 800ab64:	58024400 	.word	0x58024400
 800ab68:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab6c:	f7fc fb0c 	bl	8007188 <HAL_GetTick>
 800ab70:	1b80      	subs	r0, r0, r6
 800ab72:	2864      	cmp	r0, #100	; 0x64
 800ab74:	d825      	bhi.n	800abc2 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab76:	682b      	ldr	r3, [r5, #0]
 800ab78:	05da      	lsls	r2, r3, #23
 800ab7a:	d5f7      	bpl.n	800ab6c <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab7c:	68a3      	ldr	r3, [r4, #8]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	f000 8178 	beq.w	800ae74 <HAL_RCC_OscConfig+0x5b4>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8153 	beq.w	800ae30 <HAL_RCC_OscConfig+0x570>
 800ab8a:	2b05      	cmp	r3, #5
 800ab8c:	4ba5      	ldr	r3, [pc, #660]	; (800ae24 <HAL_RCC_OscConfig+0x564>)
 800ab8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab90:	f000 817f 	beq.w	800ae92 <HAL_RCC_OscConfig+0x5d2>
 800ab94:	f022 0201 	bic.w	r2, r2, #1
 800ab98:	671a      	str	r2, [r3, #112]	; 0x70
 800ab9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab9c:	f022 0204 	bic.w	r2, r2, #4
 800aba0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800aba2:	f7fc faf1 	bl	8007188 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aba6:	4e9f      	ldr	r6, [pc, #636]	; (800ae24 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aba8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800abac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abae:	e004      	b.n	800abba <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abb0:	f7fc faea 	bl	8007188 <HAL_GetTick>
 800abb4:	1b40      	subs	r0, r0, r5
 800abb6:	42b8      	cmp	r0, r7
 800abb8:	d803      	bhi.n	800abc2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abba:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800abbc:	079b      	lsls	r3, r3, #30
 800abbe:	d5f7      	bpl.n	800abb0 <HAL_RCC_OscConfig+0x2f0>
 800abc0:	e723      	b.n	800aa0a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800abc2:	2003      	movs	r0, #3
}
 800abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abc6:	4d97      	ldr	r5, [pc, #604]	; (800ae24 <HAL_RCC_OscConfig+0x564>)
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abce:	602b      	str	r3, [r5, #0]
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abd6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800abd8:	f7fc fad6 	bl	8007188 <HAL_GetTick>
 800abdc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800abde:	e004      	b.n	800abea <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abe0:	f7fc fad2 	bl	8007188 <HAL_GetTick>
 800abe4:	1b80      	subs	r0, r0, r6
 800abe6:	2864      	cmp	r0, #100	; 0x64
 800abe8:	d8eb      	bhi.n	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800abea:	682b      	ldr	r3, [r5, #0]
 800abec:	039f      	lsls	r7, r3, #14
 800abee:	d4f7      	bmi.n	800abe0 <HAL_RCC_OscConfig+0x320>
 800abf0:	e69c      	b.n	800a92c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800abf2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800abf4:	f023 0301 	bic.w	r3, r3, #1
 800abf8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800abfa:	f7fc fac5 	bl	8007188 <HAL_GetTick>
 800abfe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac00:	e004      	b.n	800ac0c <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac02:	f7fc fac1 	bl	8007188 <HAL_GetTick>
 800ac06:	1b80      	subs	r0, r0, r6
 800ac08:	2802      	cmp	r0, #2
 800ac0a:	d8da      	bhi.n	800abc2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ac0e:	0799      	lsls	r1, r3, #30
 800ac10:	d4f7      	bmi.n	800ac02 <HAL_RCC_OscConfig+0x342>
 800ac12:	e6dd      	b.n	800a9d0 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac1a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ac1c:	f7fc fab4 	bl	8007188 <HAL_GetTick>
 800ac20:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac22:	e004      	b.n	800ac2e <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac24:	f7fc fab0 	bl	8007188 <HAL_GetTick>
 800ac28:	1b80      	subs	r0, r0, r6
 800ac2a:	2802      	cmp	r0, #2
 800ac2c:	d8c9      	bhi.n	800abc2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac2e:	682b      	ldr	r3, [r5, #0]
 800ac30:	0498      	lsls	r0, r3, #18
 800ac32:	d4f7      	bmi.n	800ac24 <HAL_RCC_OscConfig+0x364>
 800ac34:	e6e5      	b.n	800aa02 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800ac36:	682b      	ldr	r3, [r5, #0]
 800ac38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ac3e:	f7fc faa3 	bl	8007188 <HAL_GetTick>
 800ac42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac44:	e004      	b.n	800ac50 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ac46:	f7fc fa9f 	bl	8007188 <HAL_GetTick>
 800ac4a:	1b80      	subs	r0, r0, r6
 800ac4c:	2802      	cmp	r0, #2
 800ac4e:	d8b8      	bhi.n	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	05df      	lsls	r7, r3, #23
 800ac54:	d4f7      	bmi.n	800ac46 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	e6a2      	b.n	800a9a0 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800ac5a:	f023 0301 	bic.w	r3, r3, #1
 800ac5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ac60:	f7fc fa92 	bl	8007188 <HAL_GetTick>
 800ac64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac66:	e004      	b.n	800ac72 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac68:	f7fc fa8e 	bl	8007188 <HAL_GetTick>
 800ac6c:	1b80      	subs	r0, r0, r6
 800ac6e:	2802      	cmp	r0, #2
 800ac70:	d8a7      	bhi.n	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac72:	682b      	ldr	r3, [r5, #0]
 800ac74:	0758      	lsls	r0, r3, #29
 800ac76:	d4f7      	bmi.n	800ac68 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	e65b      	b.n	800a934 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ac7c:	0790      	lsls	r0, r2, #30
 800ac7e:	f47f af1a 	bne.w	800aab6 <HAL_RCC_OscConfig+0x1f6>
 800ac82:	e6e7      	b.n	800aa54 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac84:	686b      	ldr	r3, [r5, #4]
 800ac86:	6922      	ldr	r2, [r4, #16]
 800ac88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ac8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ac90:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	e64e      	b.n	800a934 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800ac96:	2001      	movs	r0, #1
}
 800ac98:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac9a:	4a62      	ldr	r2, [pc, #392]	; (800ae24 <HAL_RCC_OscConfig+0x564>)
 800ac9c:	6a21      	ldr	r1, [r4, #32]
 800ac9e:	68d3      	ldr	r3, [r2, #12]
 800aca0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800aca4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800aca8:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	e678      	b.n	800a9a0 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800acae:	f7fc fa6b 	bl	8007188 <HAL_GetTick>
 800acb2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acb4:	e004      	b.n	800acc0 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acb6:	f7fc fa67 	bl	8007188 <HAL_GetTick>
 800acba:	1b80      	subs	r0, r0, r6
 800acbc:	2802      	cmp	r0, #2
 800acbe:	d880      	bhi.n	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	0199      	lsls	r1, r3, #6
 800acc4:	d4f7      	bmi.n	800acb6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acc6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800acc8:	4b57      	ldr	r3, [pc, #348]	; (800ae28 <HAL_RCC_OscConfig+0x568>)
 800acca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800accc:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800acce:	4957      	ldr	r1, [pc, #348]	; (800ae2c <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acd0:	4e54      	ldr	r6, [pc, #336]	; (800ae24 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acd2:	4313      	orrs	r3, r2
 800acd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800acd6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800acda:	62ab      	str	r3, [r5, #40]	; 0x28
 800acdc:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800ace0:	3b01      	subs	r3, #1
 800ace2:	3a01      	subs	r2, #1
 800ace4:	025b      	lsls	r3, r3, #9
 800ace6:	0412      	lsls	r2, r2, #16
 800ace8:	b29b      	uxth	r3, r3
 800acea:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800acee:	4313      	orrs	r3, r2
 800acf0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800acf2:	3a01      	subs	r2, #1
 800acf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acf8:	4313      	orrs	r3, r2
 800acfa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800acfc:	3a01      	subs	r2, #1
 800acfe:	0612      	lsls	r2, r2, #24
 800ad00:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ad04:	4313      	orrs	r3, r2
 800ad06:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800ad08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ad0a:	f023 0301 	bic.w	r3, r3, #1
 800ad0e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad10:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800ad12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ad14:	4011      	ands	r1, r2
 800ad16:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800ad1a:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ad1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ad20:	f023 030c 	bic.w	r3, r3, #12
 800ad24:	4313      	orrs	r3, r2
 800ad26:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad28:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ad2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ad2c:	f023 0302 	bic.w	r3, r3, #2
 800ad30:	4313      	orrs	r3, r2
 800ad32:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ad36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad3a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ad3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad42:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ad46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad4a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800ad4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ad4e:	f043 0301 	orr.w	r3, r3, #1
 800ad52:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ad5c:	f7fc fa14 	bl	8007188 <HAL_GetTick>
 800ad60:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad62:	e005      	b.n	800ad70 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad64:	f7fc fa10 	bl	8007188 <HAL_GetTick>
 800ad68:	1b00      	subs	r0, r0, r4
 800ad6a:	2802      	cmp	r0, #2
 800ad6c:	f63f af29 	bhi.w	800abc2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad70:	6833      	ldr	r3, [r6, #0]
 800ad72:	019a      	lsls	r2, r3, #6
 800ad74:	d5f6      	bpl.n	800ad64 <HAL_RCC_OscConfig+0x4a4>
 800ad76:	e665      	b.n	800aa44 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad78:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ad7a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad7c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad7e:	f43f ae62 	beq.w	800aa46 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad82:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ad88:	428b      	cmp	r3, r1
 800ad8a:	f47f aeb9 	bne.w	800ab00 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad8e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad94:	429a      	cmp	r2, r3
 800ad96:	f47f aeb3 	bne.w	800ab00 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ad9c:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800ada0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ada2:	429a      	cmp	r2, r3
 800ada4:	f47f aeac 	bne.w	800ab00 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ada8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adaa:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800adae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800adb0:	429a      	cmp	r2, r3
 800adb2:	f47f aea5 	bne.w	800ab00 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800adb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800adb8:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800adbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800adbe:	429a      	cmp	r2, r3
 800adc0:	f47f ae9e 	bne.w	800ab00 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800adc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800adc6:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800adca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800adcc:	429e      	cmp	r6, r3
 800adce:	f47f ae97 	bne.w	800ab00 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800add2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800add4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800add6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800adda:	429a      	cmp	r2, r3
 800addc:	f43f ae32 	beq.w	800aa44 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800ade0:	4a10      	ldr	r2, [pc, #64]	; (800ae24 <HAL_RCC_OscConfig+0x564>)
 800ade2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800adea:	f7fc f9cd 	bl	8007188 <HAL_GetTick>
 800adee:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800adf0:	f7fc f9ca 	bl	8007188 <HAL_GetTick>
 800adf4:	42a8      	cmp	r0, r5
 800adf6:	d0fb      	beq.n	800adf0 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800adf8:	4a0a      	ldr	r2, [pc, #40]	; (800ae24 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 800adfa:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800adfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800adfe:	4b0b      	ldr	r3, [pc, #44]	; (800ae2c <HAL_RCC_OscConfig+0x56c>)
 800ae00:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ae02:	4023      	ands	r3, r4
 800ae04:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ae08:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800ae0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ae0c:	f043 0301 	orr.w	r3, r3, #1
 800ae10:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800ae12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	e575      	b.n	800a910 <HAL_RCC_OscConfig+0x50>
 800ae24:	58024400 	.word	0x58024400
 800ae28:	fffffc0c 	.word	0xfffffc0c
 800ae2c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae30:	4d1c      	ldr	r5, [pc, #112]	; (800aea4 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae32:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ae38:	f023 0301 	bic.w	r3, r3, #1
 800ae3c:	672b      	str	r3, [r5, #112]	; 0x70
 800ae3e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ae40:	f023 0304 	bic.w	r3, r3, #4
 800ae44:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800ae46:	f7fc f99f 	bl	8007188 <HAL_GetTick>
 800ae4a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae4c:	e005      	b.n	800ae5a <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae4e:	f7fc f99b 	bl	8007188 <HAL_GetTick>
 800ae52:	1b80      	subs	r0, r0, r6
 800ae54:	42b8      	cmp	r0, r7
 800ae56:	f63f aeb4 	bhi.w	800abc2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ae5c:	0798      	lsls	r0, r3, #30
 800ae5e:	d4f6      	bmi.n	800ae4e <HAL_RCC_OscConfig+0x58e>
 800ae60:	e5d3      	b.n	800aa0a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae62:	68eb      	ldr	r3, [r5, #12]
 800ae64:	6a22      	ldr	r2, [r4, #32]
 800ae66:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800ae6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ae6e:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	e595      	b.n	800a9a0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae74:	4a0b      	ldr	r2, [pc, #44]	; (800aea4 <HAL_RCC_OscConfig+0x5e4>)
 800ae76:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800ae78:	f043 0301 	orr.w	r3, r3, #1
 800ae7c:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae7e:	e690      	b.n	800aba2 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae80:	4a08      	ldr	r2, [pc, #32]	; (800aea4 <HAL_RCC_OscConfig+0x5e4>)
 800ae82:	6853      	ldr	r3, [r2, #4]
 800ae84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ae88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae8c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	e586      	b.n	800a9a0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae92:	f042 0204 	orr.w	r2, r2, #4
 800ae96:	671a      	str	r2, [r3, #112]	; 0x70
 800ae98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae9a:	f042 0201 	orr.w	r2, r2, #1
 800ae9e:	671a      	str	r2, [r3, #112]	; 0x70
 800aea0:	e67f      	b.n	800aba2 <HAL_RCC_OscConfig+0x2e2>
 800aea2:	bf00      	nop
 800aea4:	58024400 	.word	0x58024400

0800aea8 <HAL_RCC_MCOConfig>:
{
 800aea8:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800aeaa:	4e25      	ldr	r6, [pc, #148]	; (800af40 <HAL_RCC_MCOConfig+0x98>)
{
 800aeac:	b088      	sub	sp, #32
 800aeae:	460d      	mov	r5, r1
 800aeb0:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 800aeb2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800aeb6:	b9f8      	cbnz	r0, 800aef8 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800aeb8:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 800aebc:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800aec0:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 800aec2:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800aec6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800aeca:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 800aecc:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800aed0:	481c      	ldr	r0, [pc, #112]	; (800af44 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800aed6:	2302      	movs	r3, #2
 800aed8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aedc:	2200      	movs	r2, #0
 800aede:	2303      	movs	r3, #3
 800aee0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800aee4:	f7ff f9ca 	bl	800a27c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800aee8:	6932      	ldr	r2, [r6, #16]
 800aeea:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 800aeee:	432a      	orrs	r2, r5
 800aef0:	4322      	orrs	r2, r4
 800aef2:	6132      	str	r2, [r6, #16]
}
 800aef4:	b008      	add	sp, #32
 800aef6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800aef8:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 800aefc:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800af00:	4811      	ldr	r0, [pc, #68]	; (800af48 <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 800af02:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800af06:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800af0a:	f003 0304 	and.w	r3, r3, #4
 800af0e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800af10:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 800af12:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800af14:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 800af16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af1a:	2200      	movs	r2, #0
 800af1c:	2303      	movs	r3, #3
 800af1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800af22:	2300      	movs	r3, #0
 800af24:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800af26:	f7ff f9a9 	bl	800a27c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800af2a:	6933      	ldr	r3, [r6, #16]
 800af2c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800af30:	ea43 0105 	orr.w	r1, r3, r5
 800af34:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 800af38:	6131      	str	r1, [r6, #16]
}
 800af3a:	b008      	add	sp, #32
 800af3c:	bd70      	pop	{r4, r5, r6, pc}
 800af3e:	bf00      	nop
 800af40:	58024400 	.word	0x58024400
 800af44:	58020000 	.word	0x58020000
 800af48:	58020800 	.word	0x58020800

0800af4c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af4c:	4a47      	ldr	r2, [pc, #284]	; (800b06c <HAL_RCC_GetSysClockFreq+0x120>)
 800af4e:	6913      	ldr	r3, [r2, #16]
 800af50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af54:	2b10      	cmp	r3, #16
 800af56:	d004      	beq.n	800af62 <HAL_RCC_GetSysClockFreq+0x16>
 800af58:	2b18      	cmp	r3, #24
 800af5a:	d00d      	beq.n	800af78 <HAL_RCC_GetSysClockFreq+0x2c>
 800af5c:	b11b      	cbz	r3, 800af66 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800af5e:	4844      	ldr	r0, [pc, #272]	; (800b070 <HAL_RCC_GetSysClockFreq+0x124>)
 800af60:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af62:	4844      	ldr	r0, [pc, #272]	; (800b074 <HAL_RCC_GetSysClockFreq+0x128>)
 800af64:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af66:	6813      	ldr	r3, [r2, #0]
 800af68:	0699      	lsls	r1, r3, #26
 800af6a:	d54a      	bpl.n	800b002 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af6c:	6813      	ldr	r3, [r2, #0]
 800af6e:	4842      	ldr	r0, [pc, #264]	; (800b078 <HAL_RCC_GetSysClockFreq+0x12c>)
 800af70:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800af74:	40d8      	lsrs	r0, r3
 800af76:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af78:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800af7a:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800af7c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800af7e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800af80:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af84:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800af86:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800af8a:	d038      	beq.n	800affe <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af8c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800af90:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af94:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af98:	fb05 f101 	mul.w	r1, r5, r1
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	ee07 1a90 	vmov	s15, r1
 800afa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800afa6:	d002      	beq.n	800afae <HAL_RCC_GetSysClockFreq+0x62>
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	d02c      	beq.n	800b006 <HAL_RCC_GetSysClockFreq+0xba>
 800afac:	b393      	cbz	r3, 800b014 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afae:	ee07 0a90 	vmov	s15, r0
 800afb2:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b07c <HAL_RCC_GetSysClockFreq+0x130>
 800afb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800afbc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800afc0:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800b080 <HAL_RCC_GetSysClockFreq+0x134>
 800afc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afc8:	ee06 3a90 	vmov	s13, r3
 800afcc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800afd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800afd4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800afd8:	eee7 6a25 	vfma.f32	s13, s14, s11
 800afdc:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800afe0:	4b22      	ldr	r3, [pc, #136]	; (800b06c <HAL_RCC_GetSysClockFreq+0x120>)
 800afe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800afe8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800affa:	ee17 0a90 	vmov	r0, s15
}
 800affe:	bc30      	pop	{r4, r5}
 800b000:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b002:	481d      	ldr	r0, [pc, #116]	; (800b078 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800b004:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b006:	ee07 0a90 	vmov	s15, r0
 800b00a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800b084 <HAL_RCC_GetSysClockFreq+0x138>
 800b00e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b012:	e7d2      	b.n	800afba <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b014:	6813      	ldr	r3, [r2, #0]
 800b016:	069b      	lsls	r3, r3, #26
 800b018:	d520      	bpl.n	800b05c <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b01a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b01c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b020:	4915      	ldr	r1, [pc, #84]	; (800b078 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b022:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b026:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b028:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b030:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800b080 <HAL_RCC_GetSysClockFreq+0x134>
 800b034:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b038:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b03a:	ee06 3a90 	vmov	s13, r3
 800b03e:	ee05 1a90 	vmov	s11, r1
 800b042:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b046:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b04a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b04e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b052:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b056:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b05a:	e7c1      	b.n	800afe0 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b05c:	ee07 0a90 	vmov	s15, r0
 800b060:	eddf 6a09 	vldr	s13, [pc, #36]	; 800b088 <HAL_RCC_GetSysClockFreq+0x13c>
 800b064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b068:	e7a7      	b.n	800afba <HAL_RCC_GetSysClockFreq+0x6e>
 800b06a:	bf00      	nop
 800b06c:	58024400 	.word	0x58024400
 800b070:	003d0900 	.word	0x003d0900
 800b074:	017d7840 	.word	0x017d7840
 800b078:	03d09000 	.word	0x03d09000
 800b07c:	4a742400 	.word	0x4a742400
 800b080:	39000000 	.word	0x39000000
 800b084:	4bbebc20 	.word	0x4bbebc20
 800b088:	4c742400 	.word	0x4c742400

0800b08c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800b08c:	2800      	cmp	r0, #0
 800b08e:	f000 810c 	beq.w	800b2aa <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b092:	4a8c      	ldr	r2, [pc, #560]	; (800b2c4 <HAL_RCC_ClockConfig+0x238>)
 800b094:	6813      	ldr	r3, [r2, #0]
 800b096:	f003 030f 	and.w	r3, r3, #15
 800b09a:	428b      	cmp	r3, r1
{
 800b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b0a4:	d20c      	bcs.n	800b0c0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0a6:	6813      	ldr	r3, [r2, #0]
 800b0a8:	f023 030f 	bic.w	r3, r3, #15
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0b0:	6813      	ldr	r3, [r2, #0]
 800b0b2:	f003 030f 	and.w	r3, r3, #15
 800b0b6:	428b      	cmp	r3, r1
 800b0b8:	d002      	beq.n	800b0c0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800b0ba:	2001      	movs	r0, #1
}
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	075f      	lsls	r7, r3, #29
 800b0c4:	d50b      	bpl.n	800b0de <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0c6:	4980      	ldr	r1, [pc, #512]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b0c8:	6920      	ldr	r0, [r4, #16]
 800b0ca:	698a      	ldr	r2, [r1, #24]
 800b0cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b0d0:	4290      	cmp	r0, r2
 800b0d2:	d904      	bls.n	800b0de <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0d4:	698a      	ldr	r2, [r1, #24]
 800b0d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b0da:	4302      	orrs	r2, r0
 800b0dc:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0de:	071e      	lsls	r6, r3, #28
 800b0e0:	d50b      	bpl.n	800b0fa <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0e2:	4979      	ldr	r1, [pc, #484]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b0e4:	6960      	ldr	r0, [r4, #20]
 800b0e6:	69ca      	ldr	r2, [r1, #28]
 800b0e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b0ec:	4290      	cmp	r0, r2
 800b0ee:	d904      	bls.n	800b0fa <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0f0:	69ca      	ldr	r2, [r1, #28]
 800b0f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b0f6:	4302      	orrs	r2, r0
 800b0f8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0fa:	06d8      	lsls	r0, r3, #27
 800b0fc:	d50b      	bpl.n	800b116 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b0fe:	4972      	ldr	r1, [pc, #456]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b100:	69a0      	ldr	r0, [r4, #24]
 800b102:	69ca      	ldr	r2, [r1, #28]
 800b104:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b108:	4290      	cmp	r0, r2
 800b10a:	d904      	bls.n	800b116 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b10c:	69ca      	ldr	r2, [r1, #28]
 800b10e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b112:	4302      	orrs	r2, r0
 800b114:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b116:	0699      	lsls	r1, r3, #26
 800b118:	d50b      	bpl.n	800b132 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b11a:	496b      	ldr	r1, [pc, #428]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b11c:	69e0      	ldr	r0, [r4, #28]
 800b11e:	6a0a      	ldr	r2, [r1, #32]
 800b120:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b124:	4290      	cmp	r0, r2
 800b126:	d904      	bls.n	800b132 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b128:	6a0a      	ldr	r2, [r1, #32]
 800b12a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b12e:	4302      	orrs	r2, r0
 800b130:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b132:	079a      	lsls	r2, r3, #30
 800b134:	f140 80ab 	bpl.w	800b28e <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b138:	4863      	ldr	r0, [pc, #396]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b13a:	68e1      	ldr	r1, [r4, #12]
 800b13c:	6982      	ldr	r2, [r0, #24]
 800b13e:	f002 020f 	and.w	r2, r2, #15
 800b142:	4291      	cmp	r1, r2
 800b144:	d904      	bls.n	800b150 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b146:	6982      	ldr	r2, [r0, #24]
 800b148:	f022 020f 	bic.w	r2, r2, #15
 800b14c:	430a      	orrs	r2, r1
 800b14e:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b150:	07d8      	lsls	r0, r3, #31
 800b152:	d530      	bpl.n	800b1b6 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b154:	4a5c      	ldr	r2, [pc, #368]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b156:	68a1      	ldr	r1, [r4, #8]
 800b158:	6993      	ldr	r3, [r2, #24]
 800b15a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b15e:	430b      	orrs	r3, r1
 800b160:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b162:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b164:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b166:	2902      	cmp	r1, #2
 800b168:	f000 80a1 	beq.w	800b2ae <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b16c:	2903      	cmp	r1, #3
 800b16e:	f000 8098 	beq.w	800b2a2 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b172:	2901      	cmp	r1, #1
 800b174:	f000 80a1 	beq.w	800b2ba <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b178:	0758      	lsls	r0, r3, #29
 800b17a:	d59e      	bpl.n	800b0ba <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b17c:	4e52      	ldr	r6, [pc, #328]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b17e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b182:	6933      	ldr	r3, [r6, #16]
 800b184:	f023 0307 	bic.w	r3, r3, #7
 800b188:	430b      	orrs	r3, r1
 800b18a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800b18c:	f7fb fffc 	bl	8007188 <HAL_GetTick>
 800b190:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b192:	e005      	b.n	800b1a0 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b194:	f7fb fff8 	bl	8007188 <HAL_GetTick>
 800b198:	1bc0      	subs	r0, r0, r7
 800b19a:	4540      	cmp	r0, r8
 800b19c:	f200 808b 	bhi.w	800b2b6 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1a0:	6933      	ldr	r3, [r6, #16]
 800b1a2:	6862      	ldr	r2, [r4, #4]
 800b1a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1a8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b1ac:	d1f2      	bne.n	800b194 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	0799      	lsls	r1, r3, #30
 800b1b2:	d506      	bpl.n	800b1c2 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b1b4:	68e1      	ldr	r1, [r4, #12]
 800b1b6:	4844      	ldr	r0, [pc, #272]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b1b8:	6982      	ldr	r2, [r0, #24]
 800b1ba:	f002 020f 	and.w	r2, r2, #15
 800b1be:	428a      	cmp	r2, r1
 800b1c0:	d869      	bhi.n	800b296 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b1c2:	4940      	ldr	r1, [pc, #256]	; (800b2c4 <HAL_RCC_ClockConfig+0x238>)
 800b1c4:	680a      	ldr	r2, [r1, #0]
 800b1c6:	f002 020f 	and.w	r2, r2, #15
 800b1ca:	42aa      	cmp	r2, r5
 800b1cc:	d90a      	bls.n	800b1e4 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1ce:	680a      	ldr	r2, [r1, #0]
 800b1d0:	f022 020f 	bic.w	r2, r2, #15
 800b1d4:	432a      	orrs	r2, r5
 800b1d6:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1d8:	680a      	ldr	r2, [r1, #0]
 800b1da:	f002 020f 	and.w	r2, r2, #15
 800b1de:	42aa      	cmp	r2, r5
 800b1e0:	f47f af6b 	bne.w	800b0ba <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b1e4:	075a      	lsls	r2, r3, #29
 800b1e6:	d50b      	bpl.n	800b200 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b1e8:	4937      	ldr	r1, [pc, #220]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b1ea:	6920      	ldr	r0, [r4, #16]
 800b1ec:	698a      	ldr	r2, [r1, #24]
 800b1ee:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b1f2:	4290      	cmp	r0, r2
 800b1f4:	d204      	bcs.n	800b200 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b1f6:	698a      	ldr	r2, [r1, #24]
 800b1f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b1fc:	4302      	orrs	r2, r0
 800b1fe:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b200:	071f      	lsls	r7, r3, #28
 800b202:	d50b      	bpl.n	800b21c <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b204:	4930      	ldr	r1, [pc, #192]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b206:	6960      	ldr	r0, [r4, #20]
 800b208:	69ca      	ldr	r2, [r1, #28]
 800b20a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b20e:	4290      	cmp	r0, r2
 800b210:	d204      	bcs.n	800b21c <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b212:	69ca      	ldr	r2, [r1, #28]
 800b214:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b218:	4302      	orrs	r2, r0
 800b21a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b21c:	06de      	lsls	r6, r3, #27
 800b21e:	d50b      	bpl.n	800b238 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b220:	4929      	ldr	r1, [pc, #164]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b222:	69a0      	ldr	r0, [r4, #24]
 800b224:	69ca      	ldr	r2, [r1, #28]
 800b226:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b22a:	4290      	cmp	r0, r2
 800b22c:	d204      	bcs.n	800b238 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b22e:	69ca      	ldr	r2, [r1, #28]
 800b230:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b234:	4302      	orrs	r2, r0
 800b236:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b238:	069d      	lsls	r5, r3, #26
 800b23a:	d50b      	bpl.n	800b254 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b23c:	4a22      	ldr	r2, [pc, #136]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b23e:	69e1      	ldr	r1, [r4, #28]
 800b240:	6a13      	ldr	r3, [r2, #32]
 800b242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b246:	4299      	cmp	r1, r3
 800b248:	d204      	bcs.n	800b254 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b24a:	6a13      	ldr	r3, [r2, #32]
 800b24c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b250:	430b      	orrs	r3, r1
 800b252:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b254:	f7ff fe7a 	bl	800af4c <HAL_RCC_GetSysClockFreq>
 800b258:	4a1b      	ldr	r2, [pc, #108]	; (800b2c8 <HAL_RCC_ClockConfig+0x23c>)
 800b25a:	4603      	mov	r3, r0
 800b25c:	481b      	ldr	r0, [pc, #108]	; (800b2cc <HAL_RCC_ClockConfig+0x240>)
 800b25e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b260:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b262:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800b266:	4d1a      	ldr	r5, [pc, #104]	; (800b2d0 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b268:	f002 020f 	and.w	r2, r2, #15
 800b26c:	4c19      	ldr	r4, [pc, #100]	; (800b2d4 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b26e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b270:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b272:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800b276:	4818      	ldr	r0, [pc, #96]	; (800b2d8 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b278:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b27c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800b27e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800b280:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b282:	40d3      	lsrs	r3, r2
 800b284:	6023      	str	r3, [r4, #0]
}
 800b286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b28a:	f7fb bf1b 	b.w	80070c4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b28e:	07da      	lsls	r2, r3, #31
 800b290:	f53f af60 	bmi.w	800b154 <HAL_RCC_ClockConfig+0xc8>
 800b294:	e795      	b.n	800b1c2 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b296:	6982      	ldr	r2, [r0, #24]
 800b298:	f022 020f 	bic.w	r2, r2, #15
 800b29c:	4311      	orrs	r1, r2
 800b29e:	6181      	str	r1, [r0, #24]
 800b2a0:	e78f      	b.n	800b1c2 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b2a2:	019f      	lsls	r7, r3, #6
 800b2a4:	f53f af6a 	bmi.w	800b17c <HAL_RCC_ClockConfig+0xf0>
 800b2a8:	e707      	b.n	800b0ba <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800b2aa:	2001      	movs	r0, #1
}
 800b2ac:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b2ae:	039b      	lsls	r3, r3, #14
 800b2b0:	f53f af64 	bmi.w	800b17c <HAL_RCC_ClockConfig+0xf0>
 800b2b4:	e701      	b.n	800b0ba <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800b2b6:	2003      	movs	r0, #3
 800b2b8:	e700      	b.n	800b0bc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b2ba:	05de      	lsls	r6, r3, #23
 800b2bc:	f53f af5e 	bmi.w	800b17c <HAL_RCC_ClockConfig+0xf0>
 800b2c0:	e6fb      	b.n	800b0ba <HAL_RCC_ClockConfig+0x2e>
 800b2c2:	bf00      	nop
 800b2c4:	52002000 	.word	0x52002000
 800b2c8:	58024400 	.word	0x58024400
 800b2cc:	080192c4 	.word	0x080192c4
 800b2d0:	24000314 	.word	0x24000314
 800b2d4:	24000318 	.word	0x24000318
 800b2d8:	2400033c 	.word	0x2400033c

0800b2dc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b2dc:	4a18      	ldr	r2, [pc, #96]	; (800b340 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2de:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b2e0:	6913      	ldr	r3, [r2, #16]
 800b2e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2e6:	2b10      	cmp	r3, #16
 800b2e8:	d01a      	beq.n	800b320 <HAL_RCC_GetHCLKFreq+0x44>
 800b2ea:	2b18      	cmp	r3, #24
 800b2ec:	d023      	beq.n	800b336 <HAL_RCC_GetHCLKFreq+0x5a>
 800b2ee:	b1cb      	cbz	r3, 800b324 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800b2f0:	4814      	ldr	r0, [pc, #80]	; (800b344 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b2f2:	4b13      	ldr	r3, [pc, #76]	; (800b340 <HAL_RCC_GetHCLKFreq+0x64>)
 800b2f4:	4914      	ldr	r1, [pc, #80]	; (800b348 <HAL_RCC_GetHCLKFreq+0x6c>)
 800b2f6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2f8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b2fa:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2fe:	4c13      	ldr	r4, [pc, #76]	; (800b34c <HAL_RCC_GetHCLKFreq+0x70>)
 800b300:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b304:	4d12      	ldr	r5, [pc, #72]	; (800b350 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b306:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b308:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b30a:	f002 021f 	and.w	r2, r2, #31
 800b30e:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b312:	f003 001f 	and.w	r0, r3, #31
 800b316:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800b31a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b31c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b320:	480c      	ldr	r0, [pc, #48]	; (800b354 <HAL_RCC_GetHCLKFreq+0x78>)
 800b322:	e7e6      	b.n	800b2f2 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b324:	6813      	ldr	r3, [r2, #0]
 800b326:	069b      	lsls	r3, r3, #26
 800b328:	d508      	bpl.n	800b33c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b32a:	6812      	ldr	r2, [r2, #0]
 800b32c:	480a      	ldr	r0, [pc, #40]	; (800b358 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b32e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800b332:	40d0      	lsrs	r0, r2
 800b334:	e7dd      	b.n	800b2f2 <HAL_RCC_GetHCLKFreq+0x16>
 800b336:	f7ff fa3f 	bl	800a7b8 <HAL_RCC_GetSysClockFreq.part.0>
 800b33a:	e7da      	b.n	800b2f2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b33c:	4806      	ldr	r0, [pc, #24]	; (800b358 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b33e:	e7d8      	b.n	800b2f2 <HAL_RCC_GetHCLKFreq+0x16>
 800b340:	58024400 	.word	0x58024400
 800b344:	003d0900 	.word	0x003d0900
 800b348:	080192c4 	.word	0x080192c4
 800b34c:	24000318 	.word	0x24000318
 800b350:	24000314 	.word	0x24000314
 800b354:	017d7840 	.word	0x017d7840
 800b358:	03d09000 	.word	0x03d09000

0800b35c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b35c:	4a1c      	ldr	r2, [pc, #112]	; (800b3d0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b35e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b360:	6913      	ldr	r3, [r2, #16]
 800b362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b366:	2b10      	cmp	r3, #16
 800b368:	d021      	beq.n	800b3ae <HAL_RCC_GetPCLK1Freq+0x52>
 800b36a:	2b18      	cmp	r3, #24
 800b36c:	d02b      	beq.n	800b3c6 <HAL_RCC_GetPCLK1Freq+0x6a>
 800b36e:	b303      	cbz	r3, 800b3b2 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800b370:	4818      	ldr	r0, [pc, #96]	; (800b3d4 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b372:	4a17      	ldr	r2, [pc, #92]	; (800b3d0 <HAL_RCC_GetPCLK1Freq+0x74>)
 800b374:	4918      	ldr	r1, [pc, #96]	; (800b3d8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800b376:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800b378:	4d18      	ldr	r5, [pc, #96]	; (800b3dc <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b37a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b37e:	4c18      	ldr	r4, [pc, #96]	; (800b3e0 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b380:	5ccb      	ldrb	r3, [r1, r3]
 800b382:	f003 031f 	and.w	r3, r3, #31
 800b386:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b38a:	6990      	ldr	r0, [r2, #24]
 800b38c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800b390:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b392:	5c08      	ldrb	r0, [r1, r0]
 800b394:	f000 001f 	and.w	r0, r0, #31
 800b398:	40c3      	lsrs	r3, r0
 800b39a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b39c:	69d2      	ldr	r2, [r2, #28]
 800b39e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800b3a2:	5c88      	ldrb	r0, [r1, r2]
 800b3a4:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b3a8:	fa23 f000 	lsr.w	r0, r3, r0
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3ae:	480d      	ldr	r0, [pc, #52]	; (800b3e4 <HAL_RCC_GetPCLK1Freq+0x88>)
 800b3b0:	e7df      	b.n	800b372 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3b2:	6813      	ldr	r3, [r2, #0]
 800b3b4:	069b      	lsls	r3, r3, #26
 800b3b6:	d509      	bpl.n	800b3cc <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3b8:	6810      	ldr	r0, [r2, #0]
 800b3ba:	4b0b      	ldr	r3, [pc, #44]	; (800b3e8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800b3bc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800b3c0:	fa23 f000 	lsr.w	r0, r3, r0
 800b3c4:	e7d5      	b.n	800b372 <HAL_RCC_GetPCLK1Freq+0x16>
 800b3c6:	f7ff f9f7 	bl	800a7b8 <HAL_RCC_GetSysClockFreq.part.0>
 800b3ca:	e7d2      	b.n	800b372 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b3cc:	4806      	ldr	r0, [pc, #24]	; (800b3e8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800b3ce:	e7d0      	b.n	800b372 <HAL_RCC_GetPCLK1Freq+0x16>
 800b3d0:	58024400 	.word	0x58024400
 800b3d4:	003d0900 	.word	0x003d0900
 800b3d8:	080192c4 	.word	0x080192c4
 800b3dc:	24000314 	.word	0x24000314
 800b3e0:	24000318 	.word	0x24000318
 800b3e4:	017d7840 	.word	0x017d7840
 800b3e8:	03d09000 	.word	0x03d09000

0800b3ec <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3ec:	4a1c      	ldr	r2, [pc, #112]	; (800b460 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b3ee:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3f0:	6913      	ldr	r3, [r2, #16]
 800b3f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3f6:	2b10      	cmp	r3, #16
 800b3f8:	d021      	beq.n	800b43e <HAL_RCC_GetPCLK2Freq+0x52>
 800b3fa:	2b18      	cmp	r3, #24
 800b3fc:	d02b      	beq.n	800b456 <HAL_RCC_GetPCLK2Freq+0x6a>
 800b3fe:	b303      	cbz	r3, 800b442 <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800b400:	4818      	ldr	r0, [pc, #96]	; (800b464 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b402:	4a17      	ldr	r2, [pc, #92]	; (800b460 <HAL_RCC_GetPCLK2Freq+0x74>)
 800b404:	4918      	ldr	r1, [pc, #96]	; (800b468 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800b406:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800b408:	4d18      	ldr	r5, [pc, #96]	; (800b46c <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b40a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b40e:	4c18      	ldr	r4, [pc, #96]	; (800b470 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b410:	5ccb      	ldrb	r3, [r1, r3]
 800b412:	f003 031f 	and.w	r3, r3, #31
 800b416:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b41a:	6990      	ldr	r0, [r2, #24]
 800b41c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800b420:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b422:	5c08      	ldrb	r0, [r1, r0]
 800b424:	f000 001f 	and.w	r0, r0, #31
 800b428:	40c3      	lsrs	r3, r0
 800b42a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b42c:	69d2      	ldr	r2, [r2, #28]
 800b42e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800b432:	5c88      	ldrb	r0, [r1, r2]
 800b434:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b438:	fa23 f000 	lsr.w	r0, r3, r0
 800b43c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b43e:	480d      	ldr	r0, [pc, #52]	; (800b474 <HAL_RCC_GetPCLK2Freq+0x88>)
 800b440:	e7df      	b.n	800b402 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b442:	6813      	ldr	r3, [r2, #0]
 800b444:	069b      	lsls	r3, r3, #26
 800b446:	d509      	bpl.n	800b45c <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b448:	6810      	ldr	r0, [r2, #0]
 800b44a:	4b0b      	ldr	r3, [pc, #44]	; (800b478 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800b44c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800b450:	fa23 f000 	lsr.w	r0, r3, r0
 800b454:	e7d5      	b.n	800b402 <HAL_RCC_GetPCLK2Freq+0x16>
 800b456:	f7ff f9af 	bl	800a7b8 <HAL_RCC_GetSysClockFreq.part.0>
 800b45a:	e7d2      	b.n	800b402 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b45c:	4806      	ldr	r0, [pc, #24]	; (800b478 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800b45e:	e7d0      	b.n	800b402 <HAL_RCC_GetPCLK2Freq+0x16>
 800b460:	58024400 	.word	0x58024400
 800b464:	003d0900 	.word	0x003d0900
 800b468:	080192c4 	.word	0x080192c4
 800b46c:	24000314 	.word	0x24000314
 800b470:	24000318 	.word	0x24000318
 800b474:	017d7840 	.word	0x017d7840
 800b478:	03d09000 	.word	0x03d09000

0800b47c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b47e:	4c3a      	ldr	r4, [pc, #232]	; (800b568 <RCCEx_PLL2_Config+0xec>)
 800b480:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	2b03      	cmp	r3, #3
 800b488:	d067      	beq.n	800b55a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	4606      	mov	r6, r0
 800b48e:	460f      	mov	r7, r1
 800b490:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b494:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b496:	f7fb fe77 	bl	8007188 <HAL_GetTick>
 800b49a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b49c:	e004      	b.n	800b4a8 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b49e:	f7fb fe73 	bl	8007188 <HAL_GetTick>
 800b4a2:	1b43      	subs	r3, r0, r5
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d856      	bhi.n	800b556 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	011a      	lsls	r2, r3, #4
 800b4ac:	d4f7      	bmi.n	800b49e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b4ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b4b0:	6832      	ldr	r2, [r6, #0]
 800b4b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b4b6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b4ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4bc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	3a01      	subs	r2, #1
 800b4c4:	025b      	lsls	r3, r3, #9
 800b4c6:	0412      	lsls	r2, r2, #16
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	6872      	ldr	r2, [r6, #4]
 800b4d2:	3a01      	subs	r2, #1
 800b4d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	6932      	ldr	r2, [r6, #16]
 800b4dc:	3a01      	subs	r2, #1
 800b4de:	0612      	lsls	r2, r2, #24
 800b4e0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b4e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b4ea:	6972      	ldr	r2, [r6, #20]
 800b4ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b4f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b4f6:	69b3      	ldr	r3, [r6, #24]
 800b4f8:	f022 0220 	bic.w	r2, r2, #32
 800b4fc:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b4fe:	4b1b      	ldr	r3, [pc, #108]	; (800b56c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b500:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b502:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b504:	f022 0210 	bic.w	r2, r2, #16
 800b508:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b50a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b50c:	69f2      	ldr	r2, [r6, #28]
 800b50e:	400b      	ands	r3, r1
 800b510:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b514:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b516:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b518:	f043 0310 	orr.w	r3, r3, #16
 800b51c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b51e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b520:	b1ef      	cbz	r7, 800b55e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b522:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b524:	bf0c      	ite	eq
 800b526:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b52a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800b52e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b530:	4c0d      	ldr	r4, [pc, #52]	; (800b568 <RCCEx_PLL2_Config+0xec>)
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b538:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b53a:	f7fb fe25 	bl	8007188 <HAL_GetTick>
 800b53e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b540:	e004      	b.n	800b54c <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b542:	f7fb fe21 	bl	8007188 <HAL_GetTick>
 800b546:	1b40      	subs	r0, r0, r5
 800b548:	2802      	cmp	r0, #2
 800b54a:	d804      	bhi.n	800b556 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	d5f7      	bpl.n	800b542 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800b552:	2000      	movs	r0, #0
}
 800b554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800b556:	2003      	movs	r0, #3
}
 800b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b55a:	2001      	movs	r0, #1
}
 800b55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b55e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b562:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b564:	e7e4      	b.n	800b530 <RCCEx_PLL2_Config+0xb4>
 800b566:	bf00      	nop
 800b568:	58024400 	.word	0x58024400
 800b56c:	ffff0007 	.word	0xffff0007

0800b570 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b572:	4c3a      	ldr	r4, [pc, #232]	; (800b65c <RCCEx_PLL3_Config+0xec>)
 800b574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b576:	f003 0303 	and.w	r3, r3, #3
 800b57a:	2b03      	cmp	r3, #3
 800b57c:	d067      	beq.n	800b64e <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	4606      	mov	r6, r0
 800b582:	460f      	mov	r7, r1
 800b584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b588:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b58a:	f7fb fdfd 	bl	8007188 <HAL_GetTick>
 800b58e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b590:	e004      	b.n	800b59c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b592:	f7fb fdf9 	bl	8007188 <HAL_GetTick>
 800b596:	1b43      	subs	r3, r0, r5
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d856      	bhi.n	800b64a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	009a      	lsls	r2, r3, #2
 800b5a0:	d4f7      	bmi.n	800b592 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b5a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5a4:	6832      	ldr	r2, [r6, #0]
 800b5a6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800b5aa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b5ae:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5b0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	3a01      	subs	r2, #1
 800b5b8:	025b      	lsls	r3, r3, #9
 800b5ba:	0412      	lsls	r2, r2, #16
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	6872      	ldr	r2, [r6, #4]
 800b5c6:	3a01      	subs	r2, #1
 800b5c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	6932      	ldr	r2, [r6, #16]
 800b5d0:	3a01      	subs	r2, #1
 800b5d2:	0612      	lsls	r2, r2, #24
 800b5d4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b5dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b5de:	6972      	ldr	r2, [r6, #20]
 800b5e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b5e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b5ea:	69b3      	ldr	r3, [r6, #24]
 800b5ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b5f0:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5f2:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b5f4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b5f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b5f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b600:	69f2      	ldr	r2, [r6, #28]
 800b602:	400b      	ands	r3, r1
 800b604:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b608:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b60a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b60c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b610:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b612:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b614:	b1ef      	cbz	r7, 800b652 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b616:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b618:	bf0c      	ite	eq
 800b61a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b61e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800b622:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b624:	4c0d      	ldr	r4, [pc, #52]	; (800b65c <RCCEx_PLL3_Config+0xec>)
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b62c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b62e:	f7fb fdab 	bl	8007188 <HAL_GetTick>
 800b632:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b634:	e004      	b.n	800b640 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b636:	f7fb fda7 	bl	8007188 <HAL_GetTick>
 800b63a:	1b40      	subs	r0, r0, r5
 800b63c:	2802      	cmp	r0, #2
 800b63e:	d804      	bhi.n	800b64a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	d5f7      	bpl.n	800b636 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800b646:	2000      	movs	r0, #0
}
 800b648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800b64a:	2003      	movs	r0, #3
}
 800b64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b64e:	2001      	movs	r0, #1
}
 800b650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b652:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b656:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b658:	e7e4      	b.n	800b624 <RCCEx_PLL3_Config+0xb4>
 800b65a:	bf00      	nop
 800b65c:	58024400 	.word	0x58024400
 800b660:	ffff0007 	.word	0xffff0007

0800b664 <HAL_RCCEx_PeriphCLKConfig>:
{
 800b664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b668:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800b66c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b66e:	011d      	lsls	r5, r3, #4
 800b670:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800b674:	d523      	bpl.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b676:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800b678:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b67c:	f000 854f 	beq.w	800c11e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800b680:	d812      	bhi.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b682:	2900      	cmp	r1, #0
 800b684:	f000 85a5 	beq.w	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800b688:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b68c:	f040 859e 	bne.w	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b690:	2102      	movs	r1, #2
 800b692:	3008      	adds	r0, #8
 800b694:	f7ff fef2 	bl	800b47c <RCCEx_PLL2_Config>
 800b698:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800b69a:	2e00      	cmp	r6, #0
 800b69c:	f040 851e 	bne.w	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b6a0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b6a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b6a6:	e003      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b6a8:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800b6ac:	f040 858e 	bne.w	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b6b0:	4dae      	ldr	r5, [pc, #696]	; (800b96c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b6b2:	2600      	movs	r6, #0
 800b6b4:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800b6b6:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800b6ba:	4301      	orrs	r1, r0
 800b6bc:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b6be:	05d8      	lsls	r0, r3, #23
 800b6c0:	d50a      	bpl.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b6c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b6c4:	2904      	cmp	r1, #4
 800b6c6:	d806      	bhi.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800b6c8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b6cc:	05390532 	.word	0x05390532
 800b6d0:	03100516 	.word	0x03100516
 800b6d4:	0310      	.short	0x0310
 800b6d6:	2601      	movs	r6, #1
 800b6d8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b6da:	0599      	lsls	r1, r3, #22
 800b6dc:	d51d      	bpl.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800b6de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b6e0:	2980      	cmp	r1, #128	; 0x80
 800b6e2:	f000 8512 	beq.w	800c10a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 800b6e6:	f200 80f9 	bhi.w	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x278>
 800b6ea:	2900      	cmp	r1, #0
 800b6ec:	f000 8420 	beq.w	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800b6f0:	2940      	cmp	r1, #64	; 0x40
 800b6f2:	f040 80fa 	bne.w	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	f104 0008 	add.w	r0, r4, #8
 800b6fc:	f7ff febe 	bl	800b47c <RCCEx_PLL2_Config>
 800b700:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b702:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b706:	2d00      	cmp	r5, #0
 800b708:	f040 83eb 	bne.w	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b70c:	4f97      	ldr	r7, [pc, #604]	; (800b96c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b70e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800b710:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b712:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 800b716:	4301      	orrs	r1, r0
 800b718:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b71a:	055f      	lsls	r7, r3, #21
 800b71c:	d521      	bpl.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b71e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800b722:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800b726:	f000 851d 	beq.w	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800b72a:	f200 80e1 	bhi.w	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800b72e:	2900      	cmp	r1, #0
 800b730:	f000 8405 	beq.w	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800b734:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b738:	f040 80e2 	bne.w	800b900 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b73c:	2100      	movs	r1, #0
 800b73e:	f104 0008 	add.w	r0, r4, #8
 800b742:	f7ff fe9b 	bl	800b47c <RCCEx_PLL2_Config>
 800b746:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b748:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b74c:	2d00      	cmp	r5, #0
 800b74e:	f040 83cf 	bne.w	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b752:	4f86      	ldr	r7, [pc, #536]	; (800b96c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b754:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800b758:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b75a:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800b75e:	4301      	orrs	r1, r0
 800b760:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b762:	0518      	lsls	r0, r3, #20
 800b764:	d521      	bpl.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b766:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800b76a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800b76e:	f000 84b9 	beq.w	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xa80>
 800b772:	f200 80c8 	bhi.w	800b906 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800b776:	2900      	cmp	r1, #0
 800b778:	f000 83d4 	beq.w	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800b77c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800b780:	f040 80c9 	bne.w	800b916 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b784:	2100      	movs	r1, #0
 800b786:	f104 0008 	add.w	r0, r4, #8
 800b78a:	f7ff fe77 	bl	800b47c <RCCEx_PLL2_Config>
 800b78e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b790:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b794:	2d00      	cmp	r5, #0
 800b796:	f040 83a2 	bne.w	800bede <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b79a:	4f74      	ldr	r7, [pc, #464]	; (800b96c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b79c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800b7a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7a2:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800b7a6:	4301      	orrs	r1, r0
 800b7a8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b7aa:	0199      	lsls	r1, r3, #6
 800b7ac:	d518      	bpl.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 800b7ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b7b0:	2920      	cmp	r1, #32
 800b7b2:	f000 841e 	beq.w	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800b7b6:	f200 80b1 	bhi.w	800b91c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b7ba:	b139      	cbz	r1, 800b7cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b7bc:	2910      	cmp	r1, #16
 800b7be:	f040 80b0 	bne.w	800b922 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7c2:	486a      	ldr	r0, [pc, #424]	; (800b96c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b7c4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b7c6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b7ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800b7cc:	2d00      	cmp	r5, #0
 800b7ce:	f040 83d3 	bne.w	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b7d2:	4f66      	ldr	r7, [pc, #408]	; (800b96c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b7d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b7d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b7d8:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800b7dc:	4301      	orrs	r1, r0
 800b7de:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b7e0:	04df      	lsls	r7, r3, #19
 800b7e2:	d51f      	bpl.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b7e4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800b7e6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b7ea:	f000 84b1 	beq.w	800c150 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800b7ee:	f200 809b 	bhi.w	800b928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800b7f2:	2900      	cmp	r1, #0
 800b7f4:	f000 8390 	beq.w	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800b7f8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b7fc:	f040 809c 	bne.w	800b938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b800:	2100      	movs	r1, #0
 800b802:	f104 0008 	add.w	r0, r4, #8
 800b806:	f7ff fe39 	bl	800b47c <RCCEx_PLL2_Config>
 800b80a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b80c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b810:	2d00      	cmp	r5, #0
 800b812:	f040 8368 	bne.w	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b816:	4f55      	ldr	r7, [pc, #340]	; (800b96c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b818:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800b81a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b81c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b820:	4301      	orrs	r1, r0
 800b822:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b824:	0498      	lsls	r0, r3, #18
 800b826:	d51d      	bpl.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b828:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b82a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800b82e:	f000 840f 	beq.w	800c050 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 800b832:	f200 8084 	bhi.w	800b93e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b836:	b159      	cbz	r1, 800b850 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800b838:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800b83c:	f040 8087 	bne.w	800b94e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b840:	2101      	movs	r1, #1
 800b842:	f104 0008 	add.w	r0, r4, #8
 800b846:	f7ff fe19 	bl	800b47c <RCCEx_PLL2_Config>
 800b84a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b84c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b850:	2d00      	cmp	r5, #0
 800b852:	f040 839b 	bne.w	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b856:	4f45      	ldr	r7, [pc, #276]	; (800b96c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b858:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800b85a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b85c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800b860:	4301      	orrs	r1, r0
 800b862:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b864:	0459      	lsls	r1, r3, #17
 800b866:	d51d      	bpl.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b868:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800b86c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800b870:	f000 83fa 	beq.w	800c068 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b874:	d86e      	bhi.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800b876:	b151      	cbz	r1, 800b88e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b878:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800b87c:	d172      	bne.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b87e:	2101      	movs	r1, #1
 800b880:	f104 0008 	add.w	r0, r4, #8
 800b884:	f7ff fdfa 	bl	800b47c <RCCEx_PLL2_Config>
 800b888:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b88a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b88e:	2d00      	cmp	r5, #0
 800b890:	f040 8380 	bne.w	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b894:	4f35      	ldr	r7, [pc, #212]	; (800b96c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b896:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800b89a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b89c:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800b8a0:	4301      	orrs	r1, r0
 800b8a2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8a4:	041f      	lsls	r7, r3, #16
 800b8a6:	d50d      	bpl.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 800b8a8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b8aa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800b8ae:	f000 83c7 	beq.w	800c040 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800b8b2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800b8b6:	f000 8225 	beq.w	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800b8ba:	2900      	cmp	r1, #0
 800b8bc:	f000 822a 	beq.w	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800b8c0:	2601      	movs	r6, #1
 800b8c2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b8c4:	01d8      	lsls	r0, r3, #7
 800b8c6:	d55f      	bpl.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
 800b8c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b8ca:	2903      	cmp	r1, #3
 800b8cc:	f200 84bb 	bhi.w	800c246 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800b8d0:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b8d4:	03e10056 	.word	0x03e10056
 800b8d8:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
 800b8dc:	29c0      	cmp	r1, #192	; 0xc0
 800b8de:	f43f af12 	beq.w	800b706 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b8e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b8e6:	f43f af0e 	beq.w	800b706 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b8ea:	2601      	movs	r6, #1
 800b8ec:	4635      	mov	r5, r6
 800b8ee:	e714      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b8f0:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800b8f4:	f43f af2a 	beq.w	800b74c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800b8f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b8fc:	f43f af26 	beq.w	800b74c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800b900:	2601      	movs	r6, #1
 800b902:	4635      	mov	r5, r6
 800b904:	e72d      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b906:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800b90a:	f43f af43 	beq.w	800b794 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800b90e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800b912:	f43f af3f 	beq.w	800b794 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800b916:	2601      	movs	r6, #1
 800b918:	4635      	mov	r5, r6
 800b91a:	e746      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 800b91c:	2930      	cmp	r1, #48	; 0x30
 800b91e:	f43f af55 	beq.w	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b922:	2601      	movs	r6, #1
 800b924:	4635      	mov	r5, r6
 800b926:	e75b      	b.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b928:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800b92c:	f43f af70 	beq.w	800b810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800b930:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800b934:	f43f af6c 	beq.w	800b810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800b938:	2601      	movs	r6, #1
 800b93a:	4635      	mov	r5, r6
 800b93c:	e772      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b93e:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800b942:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800b946:	d083      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800b948:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800b94c:	d080      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800b94e:	2601      	movs	r6, #1
 800b950:	4635      	mov	r5, r6
 800b952:	e787      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b954:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800b958:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b95c:	d097      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b95e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800b962:	d094      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b964:	2601      	movs	r6, #1
 800b966:	4635      	mov	r5, r6
 800b968:	e79c      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b96a:	bf00      	nop
 800b96c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b970:	2102      	movs	r1, #2
 800b972:	f104 0008 	add.w	r0, r4, #8
 800b976:	f7ff fd81 	bl	800b47c <RCCEx_PLL2_Config>
 800b97a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b97c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b980:	2d00      	cmp	r5, #0
 800b982:	f000 82fb 	beq.w	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x918>
 800b986:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b988:	0259      	lsls	r1, r3, #9
 800b98a:	f100 825a 	bmi.w	800be42 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b98e:	07d8      	lsls	r0, r3, #31
 800b990:	d52f      	bpl.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b992:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800b994:	2928      	cmp	r1, #40	; 0x28
 800b996:	d82a      	bhi.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x38a>
 800b998:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b99c:	002901fa 	.word	0x002901fa
 800b9a0:	00290029 	.word	0x00290029
 800b9a4:	00290029 	.word	0x00290029
 800b9a8:	00290029 	.word	0x00290029
 800b9ac:	00290406 	.word	0x00290406
 800b9b0:	00290029 	.word	0x00290029
 800b9b4:	00290029 	.word	0x00290029
 800b9b8:	00290029 	.word	0x00290029
 800b9bc:	002901f2 	.word	0x002901f2
 800b9c0:	00290029 	.word	0x00290029
 800b9c4:	00290029 	.word	0x00290029
 800b9c8:	00290029 	.word	0x00290029
 800b9cc:	002901fa 	.word	0x002901fa
 800b9d0:	00290029 	.word	0x00290029
 800b9d4:	00290029 	.word	0x00290029
 800b9d8:	00290029 	.word	0x00290029
 800b9dc:	002901fa 	.word	0x002901fa
 800b9e0:	00290029 	.word	0x00290029
 800b9e4:	00290029 	.word	0x00290029
 800b9e8:	00290029 	.word	0x00290029
 800b9ec:	01fa      	.short	0x01fa
 800b9ee:	2601      	movs	r6, #1
 800b9f0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b9f2:	0799      	lsls	r1, r3, #30
 800b9f4:	d517      	bpl.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b9f6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b9f8:	2905      	cmp	r1, #5
 800b9fa:	f200 8420 	bhi.w	800c23e <HAL_RCCEx_PeriphCLKConfig+0xbda>
 800b9fe:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ba02:	000e      	.short	0x000e
 800ba04:	000603bb 	.word	0x000603bb
 800ba08:	000e000e 	.word	0x000e000e
 800ba0c:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba0e:	2101      	movs	r1, #1
 800ba10:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ba14:	f7ff fdac 	bl	800b570 <RCCEx_PLL3_Config>
 800ba18:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba1a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800ba1e:	2d00      	cmp	r5, #0
 800ba20:	f000 8299 	beq.w	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800ba24:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba26:	075f      	lsls	r7, r3, #29
 800ba28:	d518      	bpl.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba2a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ba2e:	2905      	cmp	r1, #5
 800ba30:	f200 840d 	bhi.w	800c24e <HAL_RCCEx_PeriphCLKConfig+0xbea>
 800ba34:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ba38:	03ac000e 	.word	0x03ac000e
 800ba3c:	000e0006 	.word	0x000e0006
 800ba40:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba44:	2101      	movs	r1, #1
 800ba46:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ba4a:	f7ff fd91 	bl	800b570 <RCCEx_PLL3_Config>
 800ba4e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ba50:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800ba54:	2d00      	cmp	r5, #0
 800ba56:	f000 8286 	beq.w	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x902>
 800ba5a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ba5c:	0698      	lsls	r0, r3, #26
 800ba5e:	d51f      	bpl.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ba60:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800ba64:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800ba68:	f000 8309 	beq.w	800c07e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800ba6c:	f200 810b 	bhi.w	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800ba70:	b159      	cbz	r1, 800ba8a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba72:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800ba76:	f040 8110 	bne.w	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	f104 0008 	add.w	r0, r4, #8
 800ba80:	f7ff fcfc 	bl	800b47c <RCCEx_PLL2_Config>
 800ba84:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ba86:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800ba8a:	2d00      	cmp	r5, #0
 800ba8c:	f040 825f 	bne.w	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba90:	4fa6      	ldr	r7, [pc, #664]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ba92:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800ba96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba98:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800ba9c:	4301      	orrs	r1, r0
 800ba9e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800baa0:	0659      	lsls	r1, r3, #25
 800baa2:	d51f      	bpl.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800baa4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800baa8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800baac:	f000 82b2 	beq.w	800c014 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800bab0:	f200 80f6 	bhi.w	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800bab4:	b159      	cbz	r1, 800bace <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800bab6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800baba:	f040 80fb 	bne.w	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800babe:	2100      	movs	r1, #0
 800bac0:	f104 0008 	add.w	r0, r4, #8
 800bac4:	f7ff fcda 	bl	800b47c <RCCEx_PLL2_Config>
 800bac8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800baca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bace:	2d00      	cmp	r5, #0
 800bad0:	f040 8262 	bne.w	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bad4:	4f95      	ldr	r7, [pc, #596]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bad6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800bada:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800badc:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800bae0:	4301      	orrs	r1, r0
 800bae2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bae4:	061f      	lsls	r7, r3, #24
 800bae6:	d51f      	bpl.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bae8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800baec:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800baf0:	f000 829b 	beq.w	800c02a <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 800baf4:	f200 80e1 	bhi.w	800bcba <HAL_RCCEx_PeriphCLKConfig+0x656>
 800baf8:	b159      	cbz	r1, 800bb12 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800bafa:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bafe:	f040 80e6 	bne.w	800bcce <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb02:	2100      	movs	r1, #0
 800bb04:	f104 0008 	add.w	r0, r4, #8
 800bb08:	f7ff fcb8 	bl	800b47c <RCCEx_PLL2_Config>
 800bb0c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bb0e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bb12:	2d00      	cmp	r5, #0
 800bb14:	f040 823c 	bne.w	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bb18:	4f84      	ldr	r7, [pc, #528]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb1a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800bb1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb20:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800bb24:	4301      	orrs	r1, r0
 800bb26:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bb28:	0718      	lsls	r0, r3, #28
 800bb2a:	d50b      	bpl.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bb2c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800bb30:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800bb34:	f000 82b8 	beq.w	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bb38:	4f7c      	ldr	r7, [pc, #496]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb3c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800bb40:	4301      	orrs	r1, r0
 800bb42:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb44:	06d9      	lsls	r1, r3, #27
 800bb46:	d50b      	bpl.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bb48:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800bb4c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800bb50:	f000 82b7 	beq.w	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb54:	4f75      	ldr	r7, [pc, #468]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb58:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800bb5c:	4301      	orrs	r1, r0
 800bb5e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bb60:	031f      	lsls	r7, r3, #12
 800bb62:	d50e      	bpl.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
 800bb64:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800bb68:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bb6c:	f000 80f4 	beq.w	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800bb70:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800bb74:	f000 80f8 	beq.w	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x704>
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	f000 822e 	beq.w	800bfda <HAL_RCCEx_PeriphCLKConfig+0x976>
 800bb7e:	2601      	movs	r6, #1
 800bb80:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb82:	0358      	lsls	r0, r3, #13
 800bb84:	d50f      	bpl.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
 800bb86:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800bb8a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bb8e:	f000 80cf 	beq.w	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bb92:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800bb96:	f000 80d3 	beq.w	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800bb9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bb9e:	f000 8214 	beq.w	800bfca <HAL_RCCEx_PeriphCLKConfig+0x966>
 800bba2:	2601      	movs	r6, #1
 800bba4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bba6:	03d9      	lsls	r1, r3, #15
 800bba8:	d509      	bpl.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
 800bbaa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bbac:	2900      	cmp	r1, #0
 800bbae:	f000 8203 	beq.w	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x954>
 800bbb2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bbb6:	f000 819d 	beq.w	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800bbba:	2601      	movs	r6, #1
 800bbbc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bbbe:	009f      	lsls	r7, r3, #2
 800bbc0:	f100 80f1 	bmi.w	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bbc4:	0398      	lsls	r0, r3, #14
 800bbc6:	d50c      	bpl.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
 800bbc8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800bbcc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bbd0:	f000 81ea 	beq.w	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800bbd4:	d97e      	bls.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800bbd6:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800bbda:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bbde:	d07b      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x674>
 800bbe0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bbe2:	02d9      	lsls	r1, r3, #11
 800bbe4:	d506      	bpl.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bbe6:	4851      	ldr	r0, [pc, #324]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bbe8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800bbea:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800bbec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bbf0:	4329      	orrs	r1, r5
 800bbf2:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bbf4:	00df      	lsls	r7, r3, #3
 800bbf6:	d507      	bpl.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bbf8:	484c      	ldr	r0, [pc, #304]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bbfa:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800bbfe:	6901      	ldr	r1, [r0, #16]
 800bc00:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800bc04:	4329      	orrs	r1, r5
 800bc06:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc08:	029d      	lsls	r5, r3, #10
 800bc0a:	d506      	bpl.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc0c:	4847      	ldr	r0, [pc, #284]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc0e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800bc10:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800bc12:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800bc16:	4329      	orrs	r1, r5
 800bc18:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc1a:	0058      	lsls	r0, r3, #1
 800bc1c:	d509      	bpl.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc1e:	4943      	ldr	r1, [pc, #268]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc20:	6908      	ldr	r0, [r1, #16]
 800bc22:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800bc26:	6108      	str	r0, [r1, #16]
 800bc28:	6908      	ldr	r0, [r1, #16]
 800bc2a:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800bc2e:	4328      	orrs	r0, r5
 800bc30:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	da06      	bge.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc36:	483d      	ldr	r0, [pc, #244]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc38:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800bc3a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800bc3c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800bc40:	4329      	orrs	r1, r5
 800bc42:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc44:	0219      	lsls	r1, r3, #8
 800bc46:	d507      	bpl.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc48:	4938      	ldr	r1, [pc, #224]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc4a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800bc4e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800bc50:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800bc54:	4303      	orrs	r3, r0
 800bc56:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bc58:	07d3      	lsls	r3, r2, #31
 800bc5a:	f100 80b0 	bmi.w	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bc5e:	0797      	lsls	r7, r2, #30
 800bc60:	f100 80ba 	bmi.w	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bc64:	0755      	lsls	r5, r2, #29
 800bc66:	f100 80c4 	bmi.w	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bc6a:	0710      	lsls	r0, r2, #28
 800bc6c:	f100 80ce 	bmi.w	800be0c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bc70:	06d1      	lsls	r1, r2, #27
 800bc72:	f100 80d8 	bmi.w	800be26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bc76:	0692      	lsls	r2, r2, #26
 800bc78:	f100 8125 	bmi.w	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
 800bc7c:	1e30      	subs	r0, r6, #0
 800bc7e:	bf18      	it	ne
 800bc80:	2001      	movne	r0, #1
}
 800bc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bc86:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800bc8a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bc8e:	f43f aefc 	beq.w	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bc92:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800bc96:	f43f aef8 	beq.w	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bc9a:	2601      	movs	r6, #1
 800bc9c:	4635      	mov	r5, r6
 800bc9e:	e6ff      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bca0:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800bca4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800bca8:	f43f af11 	beq.w	800bace <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800bcac:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800bcb0:	f43f af0d 	beq.w	800bace <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800bcb4:	2601      	movs	r6, #1
 800bcb6:	4635      	mov	r5, r6
 800bcb8:	e714      	b.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bcba:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800bcbe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bcc2:	f43f af26 	beq.w	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800bcc6:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800bcca:	f43f af22 	beq.w	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800bcce:	2601      	movs	r6, #1
 800bcd0:	4635      	mov	r5, r6
 800bcd2:	e729      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
 800bcd4:	2900      	cmp	r1, #0
 800bcd6:	d183      	bne.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
 800bcd8:	2d00      	cmp	r5, #0
 800bcda:	f040 8163 	bne.w	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bcde:	4d13      	ldr	r5, [pc, #76]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bce0:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800bce2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800bce6:	4301      	orrs	r1, r0
 800bce8:	6569      	str	r1, [r5, #84]	; 0x54
 800bcea:	e77a      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bcec:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800bcee:	2d00      	cmp	r5, #0
 800bcf0:	f040 80fb 	bne.w	800beea <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bcf4:	4f0d      	ldr	r7, [pc, #52]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bcf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcfa:	f021 0107 	bic.w	r1, r1, #7
 800bcfe:	4301      	orrs	r1, r0
 800bd00:	6539      	str	r1, [r7, #80]	; 0x50
 800bd02:	e4ea      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd04:	2101      	movs	r1, #1
 800bd06:	f104 0008 	add.w	r0, r4, #8
 800bd0a:	f7ff fbb7 	bl	800b47c <RCCEx_PLL2_Config>
 800bd0e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd10:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd14:	2d00      	cmp	r5, #0
 800bd16:	f040 811c 	bne.w	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd1a:	4f04      	ldr	r7, [pc, #16]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bd1c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bd1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd20:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800bd24:	4301      	orrs	r1, r0
 800bd26:	6539      	str	r1, [r7, #80]	; 0x50
 800bd28:	e5cc      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800bd2a:	bf00      	nop
 800bd2c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd30:	2101      	movs	r1, #1
 800bd32:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bd36:	f7ff fc1b 	bl	800b570 <RCCEx_PLL3_Config>
 800bd3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bd3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd40:	2d00      	cmp	r5, #0
 800bd42:	f040 812d 	bne.w	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd46:	4fb1      	ldr	r7, [pc, #708]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd48:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800bd4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd4e:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800bd52:	4301      	orrs	r1, r0
 800bd54:	6579      	str	r1, [r7, #84]	; 0x54
 800bd56:	e726      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd58:	2102      	movs	r1, #2
 800bd5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bd5e:	f7ff fc07 	bl	800b570 <RCCEx_PLL3_Config>
 800bd62:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd64:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd68:	2d00      	cmp	r5, #0
 800bd6a:	f040 8117 	bne.w	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd6e:	4fa7      	ldr	r7, [pc, #668]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd70:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800bd74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd76:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800bd7a:	4301      	orrs	r1, r0
 800bd7c:	65b9      	str	r1, [r7, #88]	; 0x58
 800bd7e:	e700      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd80:	2101      	movs	r1, #1
 800bd82:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bd86:	f7ff fbf3 	bl	800b570 <RCCEx_PLL3_Config>
 800bd8a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bd8c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd90:	2d00      	cmp	r5, #0
 800bd92:	f040 80da 	bne.w	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bd96:	4f9d      	ldr	r7, [pc, #628]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd98:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800bd9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd9c:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800bda0:	4301      	orrs	r1, r0
 800bda2:	6579      	str	r1, [r7, #84]	; 0x54
 800bda4:	e625      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bda6:	2102      	movs	r1, #2
 800bda8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bdac:	f7ff fbe0 	bl	800b570 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bdb0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	f43f af05 	beq.w	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
 800bdba:	2601      	movs	r6, #1
 800bdbc:	e702      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	f104 0008 	add.w	r0, r4, #8
 800bdc4:	f7ff fb5a 	bl	800b47c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bdc8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	f43f af47 	beq.w	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bdd0:	0797      	lsls	r7, r2, #30
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	f57f af46 	bpl.w	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdd8:	2101      	movs	r1, #1
 800bdda:	f104 0008 	add.w	r0, r4, #8
 800bdde:	f7ff fb4d 	bl	800b47c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bde2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f43f af3d 	beq.w	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bdea:	0755      	lsls	r5, r2, #29
 800bdec:	4606      	mov	r6, r0
 800bdee:	f57f af3c 	bpl.w	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdf2:	2102      	movs	r1, #2
 800bdf4:	f104 0008 	add.w	r0, r4, #8
 800bdf8:	f7ff fb40 	bl	800b47c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bdfc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bdfe:	2800      	cmp	r0, #0
 800be00:	f43f af33 	beq.w	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800be04:	4606      	mov	r6, r0
 800be06:	0710      	lsls	r0, r2, #28
 800be08:	f57f af32 	bpl.w	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be0c:	2100      	movs	r1, #0
 800be0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800be12:	f7ff fbad 	bl	800b570 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800be16:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800be18:	2800      	cmp	r0, #0
 800be1a:	f43f af29 	beq.w	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800be1e:	06d1      	lsls	r1, r2, #27
 800be20:	4606      	mov	r6, r0
 800be22:	f57f af28 	bpl.w	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be26:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800be2a:	2101      	movs	r1, #1
 800be2c:	4628      	mov	r0, r5
 800be2e:	f7ff fb9f 	bl	800b570 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800be32:	2800      	cmp	r0, #0
 800be34:	f000 80db 	beq.w	800bfee <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800be38:	6863      	ldr	r3, [r4, #4]
 800be3a:	069b      	lsls	r3, r3, #26
 800be3c:	d54c      	bpl.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800be3e:	4606      	mov	r6, r0
 800be40:	e043      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be42:	4f73      	ldr	r7, [pc, #460]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be4a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800be4c:	f7fb f99c 	bl	8007188 <HAL_GetTick>
 800be50:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be52:	e006      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be54:	f7fb f998 	bl	8007188 <HAL_GetTick>
 800be58:	eba0 0008 	sub.w	r0, r0, r8
 800be5c:	2864      	cmp	r0, #100	; 0x64
 800be5e:	f200 81af 	bhi.w	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	05da      	lsls	r2, r3, #23
 800be66:	d5f5      	bpl.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
 800be68:	2d00      	cmp	r5, #0
 800be6a:	f040 81e3 	bne.w	800c234 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800be6e:	4a67      	ldr	r2, [pc, #412]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800be70:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800be74:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800be76:	4059      	eors	r1, r3
 800be78:	f411 7f40 	tst.w	r1, #768	; 0x300
 800be7c:	d00b      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be7e:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800be80:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be82:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800be86:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800be8a:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be8c:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800be8e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800be92:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800be94:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800be96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be9a:	f000 81ad 	beq.w	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be9e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800bea2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800bea6:	f000 81bb 	beq.w	800c220 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 800beaa:	4958      	ldr	r1, [pc, #352]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800beac:	690a      	ldr	r2, [r1, #16]
 800beae:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800beb2:	610a      	str	r2, [r1, #16]
 800beb4:	4855      	ldr	r0, [pc, #340]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800beb6:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800beba:	6f07      	ldr	r7, [r0, #112]	; 0x70
 800bebc:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bebe:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bec2:	6701      	str	r1, [r0, #112]	; 0x70
 800bec4:	e563      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bec6:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800beca:	2102      	movs	r1, #2
 800becc:	4628      	mov	r0, r5
 800bece:	f7ff fb4f 	bl	800b570 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f43f aed2 	beq.w	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
 800bed8:	2001      	movs	r0, #1
}
 800beda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bede:	462e      	mov	r6, r5
 800bee0:	e463      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x146>
 800bee2:	462e      	mov	r6, r5
 800bee4:	e419      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800bee6:	462e      	mov	r6, r5
 800bee8:	e49c      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800beea:	462e      	mov	r6, r5
 800beec:	f7ff bbf5 	b.w	800b6da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bef0:	462e      	mov	r6, r5
 800bef2:	e436      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bef4:	2102      	movs	r1, #2
 800bef6:	f104 0008 	add.w	r0, r4, #8
 800befa:	f7ff fabf 	bl	800b47c <RCCEx_PLL2_Config>
 800befe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf00:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf04:	2d00      	cmp	r5, #0
 800bf06:	d15e      	bne.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bf08:	4f40      	ldr	r7, [pc, #256]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf0a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bf0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf0e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800bf12:	4301      	orrs	r1, r0
 800bf14:	64f9      	str	r1, [r7, #76]	; 0x4c
 800bf16:	e652      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf18:	483c      	ldr	r0, [pc, #240]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf1a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bf1c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bf20:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800bf22:	e475      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf24:	4839      	ldr	r0, [pc, #228]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf26:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bf28:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bf2c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800bf2e:	e431      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf30:	4836      	ldr	r0, [pc, #216]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf32:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bf34:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bf38:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800bf3a:	f7ff bbe4 	b.w	800b706 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf3e:	4833      	ldr	r0, [pc, #204]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf40:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bf42:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bf46:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800bf48:	e400      	b.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bf4a:	462e      	mov	r6, r5
 800bf4c:	e551      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800bf4e:	462e      	mov	r6, r5
 800bf50:	e5a6      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800bf52:	462e      	mov	r6, r5
 800bf54:	e4b6      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bf56:	4f2d      	ldr	r7, [pc, #180]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf58:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800bf5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf5c:	f021 0107 	bic.w	r1, r1, #7
 800bf60:	4301      	orrs	r1, r0
 800bf62:	6579      	str	r1, [r7, #84]	; 0x54
 800bf64:	e55f      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf66:	4f29      	ldr	r7, [pc, #164]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf68:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800bf6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf6e:	f021 0107 	bic.w	r1, r1, #7
 800bf72:	4301      	orrs	r1, r0
 800bf74:	65b9      	str	r1, [r7, #88]	; 0x58
 800bf76:	e571      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bf78:	462e      	mov	r6, r5
 800bf7a:	e431      	b.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bf7c:	4f23      	ldr	r7, [pc, #140]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf7e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bf80:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf82:	f021 0103 	bic.w	r1, r1, #3
 800bf86:	4301      	orrs	r1, r0
 800bf88:	64f9      	str	r1, [r7, #76]	; 0x4c
 800bf8a:	e4fd      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800bf8c:	462e      	mov	r6, r5
 800bf8e:	e469      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800bf90:	462e      	mov	r6, r5
 800bf92:	e5c9      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800bf94:	462e      	mov	r6, r5
 800bf96:	e485      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800bf98:	462e      	mov	r6, r5
 800bf9a:	e5a3      	b.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800bf9c:	462e      	mov	r6, r5
 800bf9e:	e5f0      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bfa0:	462e      	mov	r6, r5
 800bfa2:	e600      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800bfa4:	462e      	mov	r6, r5
 800bfa6:	e61c      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfa8:	4f18      	ldr	r7, [pc, #96]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bfaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfac:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800bfb0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	d1f6      	bne.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x940>
 800bfb6:	e692      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfb8:	4814      	ldr	r0, [pc, #80]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bfba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bfbc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bfc0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800bfc2:	2d00      	cmp	r5, #0
 800bfc4:	d0a0      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800bfc6:	462e      	mov	r6, r5
 800bfc8:	e5f9      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfca:	4810      	ldr	r0, [pc, #64]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bfcc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bfce:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bfd2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	d1e3      	bne.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800bfd8:	e6b5      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfda:	f104 0008 	add.w	r0, r4, #8
 800bfde:	f7ff fa4d 	bl	800b47c <RCCEx_PLL2_Config>
 800bfe2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bfe4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bfe8:	2d00      	cmp	r5, #0
 800bfea:	d1d7      	bne.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800bfec:	e6bf      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bfee:	6862      	ldr	r2, [r4, #4]
 800bff0:	e641      	b.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bff2:	2102      	movs	r1, #2
 800bff4:	f104 0008 	add.w	r0, r4, #8
 800bff8:	f7ff fa40 	bl	800b47c <RCCEx_PLL2_Config>
 800bffc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bffe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c002:	2d00      	cmp	r5, #0
 800c004:	d1b8      	bne.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800c006:	f7ff bbe4 	b.w	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800c00a:	bf00      	nop
 800c00c:	58024400 	.word	0x58024400
 800c010:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c014:	2102      	movs	r1, #2
 800c016:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c01a:	f7ff faa9 	bl	800b570 <RCCEx_PLL3_Config>
 800c01e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c020:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c024:	2d00      	cmp	r5, #0
 800c026:	d1b7      	bne.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800c028:	e554      	b.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c02a:	2102      	movs	r1, #2
 800c02c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c030:	f7ff fa9e 	bl	800b570 <RCCEx_PLL3_Config>
 800c034:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c036:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c03a:	2d00      	cmp	r5, #0
 800c03c:	d1a8      	bne.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 800c03e:	e56b      	b.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c040:	4884      	ldr	r0, [pc, #528]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c042:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c044:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c048:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c04a:	2d00      	cmp	r5, #0
 800c04c:	d181      	bne.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800c04e:	e664      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c050:	2101      	movs	r1, #1
 800c052:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c056:	f7ff fa8b 	bl	800b570 <RCCEx_PLL3_Config>
 800c05a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c05c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c060:	2d00      	cmp	r5, #0
 800c062:	d193      	bne.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x928>
 800c064:	f7ff bbf7 	b.w	800b856 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c068:	2101      	movs	r1, #1
 800c06a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c06e:	f7ff fa7f 	bl	800b570 <RCCEx_PLL3_Config>
 800c072:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c074:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c078:	2d00      	cmp	r5, #0
 800c07a:	d18b      	bne.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x930>
 800c07c:	e40a      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c07e:	2102      	movs	r1, #2
 800c080:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c084:	f7ff fa74 	bl	800b570 <RCCEx_PLL3_Config>
 800c088:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c08a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c08e:	2d00      	cmp	r5, #0
 800c090:	f47f af5d 	bne.w	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800c094:	e4fc      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c096:	486f      	ldr	r0, [pc, #444]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c098:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c09a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c09e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c0a0:	2d00      	cmp	r5, #0
 800c0a2:	f47f ac70 	bne.w	800b986 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800c0a6:	e769      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0a8:	2102      	movs	r1, #2
 800c0aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c0ae:	f7ff fa5f 	bl	800b570 <RCCEx_PLL3_Config>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f040 8094 	bne.w	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c0b8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c0bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c0c0:	e53a      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0c2:	2102      	movs	r1, #2
 800c0c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c0c8:	f7ff fa52 	bl	800b570 <RCCEx_PLL3_Config>
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	f040 808d 	bne.w	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0d2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0d6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c0da:	e53b      	b.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c0dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c0e0:	f7ff baed 	b.w	800b6be <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c0ea:	f7ff fa41 	bl	800b570 <RCCEx_PLL3_Config>
 800c0ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c0f0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c0f4:	f7ff bb4e 	b.w	800b794 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c0fe:	f7ff fa37 	bl	800b570 <RCCEx_PLL3_Config>
 800c102:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c104:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c108:	e5f1      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c10a:	2100      	movs	r1, #0
 800c10c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c110:	f7ff fa2e 	bl	800b570 <RCCEx_PLL3_Config>
 800c114:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c116:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c11a:	f7ff baf4 	b.w	800b706 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c11e:	2102      	movs	r1, #2
 800c120:	3028      	adds	r0, #40	; 0x28
 800c122:	f7ff fa25 	bl	800b570 <RCCEx_PLL3_Config>
 800c126:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c128:	2e00      	cmp	r6, #0
 800c12a:	f43f aab9 	beq.w	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c12e:	e7d5      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c130:	4848      	ldr	r0, [pc, #288]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
 800c132:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c134:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c136:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c13a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c13c:	e5d7      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c13e:	2100      	movs	r1, #0
 800c140:	f104 0008 	add.w	r0, r4, #8
 800c144:	f7ff f99a 	bl	800b47c <RCCEx_PLL2_Config>
 800c148:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c14a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c14e:	e5ce      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c150:	2100      	movs	r1, #0
 800c152:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c156:	f7ff fa0b 	bl	800b570 <RCCEx_PLL3_Config>
 800c15a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c15c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c160:	f7ff bb56 	b.w	800b810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c164:	2100      	movs	r1, #0
 800c166:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c16a:	f7ff fa01 	bl	800b570 <RCCEx_PLL3_Config>
 800c16e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c170:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c174:	f7ff baea 	b.w	800b74c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c178:	2101      	movs	r1, #1
 800c17a:	f104 0008 	add.w	r0, r4, #8
 800c17e:	f7ff f97d 	bl	800b47c <RCCEx_PLL2_Config>
 800c182:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c184:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c188:	2d00      	cmp	r5, #0
 800c18a:	f47f ac4b 	bne.w	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800c18e:	e6e2      	b.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c190:	2101      	movs	r1, #1
 800c192:	f104 0008 	add.w	r0, r4, #8
 800c196:	f7ff f971 	bl	800b47c <RCCEx_PLL2_Config>
 800c19a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c19c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c1a0:	2d00      	cmp	r5, #0
 800c1a2:	f47f ac5a 	bne.w	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800c1a6:	e6de      	b.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1a8:	2101      	movs	r1, #1
 800c1aa:	f104 0008 	add.w	r0, r4, #8
 800c1ae:	f7ff f965 	bl	800b47c <RCCEx_PLL2_Config>
 800c1b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c1b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c1b8:	2d00      	cmp	r5, #0
 800c1ba:	f47f aec6 	bne.w	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 800c1be:	e5ea      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
 800c1c0:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c1c2:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800c1c6:	4635      	mov	r5, r6
 800c1c8:	f7ff bbe1 	b.w	800b98e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c1cc:	2601      	movs	r6, #1
 800c1ce:	f7ff ba76 	b.w	800b6be <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1d2:	4d20      	ldr	r5, [pc, #128]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c1d4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800c1d6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800c1da:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 800c1dc:	f7ff ba68 	b.w	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c1e0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 800c1e4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c1e6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c1ea:	e4a5      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c1ec:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 800c1f0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c1f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c1f6:	e4ad      	b.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
 800c1f8:	f7fa ffc6 	bl	8007188 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1fc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800c254 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
 800c200:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c202:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c206:	e004      	b.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c208:	f7fa ffbe 	bl	8007188 <HAL_GetTick>
 800c20c:	1bc0      	subs	r0, r0, r7
 800c20e:	4548      	cmp	r0, r9
 800c210:	d8d6      	bhi.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c212:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c216:	079b      	lsls	r3, r3, #30
 800c218:	d5f6      	bpl.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c21a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c21e:	e63e      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800c220:	480c      	ldr	r0, [pc, #48]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c222:	4a0d      	ldr	r2, [pc, #52]	; (800c258 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 800c224:	6901      	ldr	r1, [r0, #16]
 800c226:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800c22a:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800c22e:	430a      	orrs	r2, r1
 800c230:	6102      	str	r2, [r0, #16]
 800c232:	e63f      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c234:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c238:	462e      	mov	r6, r5
 800c23a:	f7ff bba8 	b.w	800b98e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c23e:	2601      	movs	r6, #1
 800c240:	4635      	mov	r5, r6
 800c242:	f7ff bbf0 	b.w	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
 800c246:	2601      	movs	r6, #1
 800c248:	4635      	mov	r5, r6
 800c24a:	f7ff bb9d 	b.w	800b988 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c24e:	2601      	movs	r6, #1
 800c250:	4635      	mov	r5, r6
 800c252:	e403      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c254:	58024400 	.word	0x58024400
 800c258:	00ffffcf 	.word	0x00ffffcf

0800c25c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800c25c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c25e:	f7ff f83d 	bl	800b2dc <HAL_RCC_GetHCLKFreq>
 800c262:	4b05      	ldr	r3, [pc, #20]	; (800c278 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800c264:	4a05      	ldr	r2, [pc, #20]	; (800c27c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800c266:	6a1b      	ldr	r3, [r3, #32]
 800c268:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c26c:	5cd3      	ldrb	r3, [r2, r3]
 800c26e:	f003 031f 	and.w	r3, r3, #31
}
 800c272:	40d8      	lsrs	r0, r3
 800c274:	bd08      	pop	{r3, pc}
 800c276:	bf00      	nop
 800c278:	58024400 	.word	0x58024400
 800c27c:	080192c4 	.word	0x080192c4

0800c280 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c280:	4b4f      	ldr	r3, [pc, #316]	; (800c3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800c282:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c284:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c286:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c288:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800c28a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c28e:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c292:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800c294:	d05c      	beq.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c296:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c29a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c29e:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c2a2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c2a6:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c2a8:	ee07 4a90 	vmov	s15, r4
 800c2ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c2b0:	d003      	beq.n	800c2ba <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800c2b2:	2902      	cmp	r1, #2
 800c2b4:	d075      	beq.n	800c3a2 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	d04f      	beq.n	800c35a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2ba:	ee07 2a90 	vmov	s15, r2
 800c2be:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800c2c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c2cc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d4:	ee06 3a90 	vmov	s13, r3
 800c2d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c2dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c2e0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c2e4:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c2e8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c2ec:	4a34      	ldr	r2, [pc, #208]	; (800c3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800c2ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c2f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c2f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c2f8:	ee07 3a10 	vmov	s14, r3
 800c2fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c300:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c302:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c30a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c30e:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c312:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c314:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c318:	ee07 3a10 	vmov	s14, r3
 800c31c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c320:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c32c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c330:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c332:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c336:	ee07 3a90 	vmov	s15, r3
 800c33a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c33e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c346:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c34a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800c34e:	4770      	bx	lr
 800c350:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c352:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c356:	6082      	str	r2, [r0, #8]
}
 800c358:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c35a:	6819      	ldr	r1, [r3, #0]
 800c35c:	0689      	lsls	r1, r1, #26
 800c35e:	d527      	bpl.n	800c3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c360:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c362:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c366:	4919      	ldr	r1, [pc, #100]	; (800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c368:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c36e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c376:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c37e:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c380:	ee06 3a90 	vmov	s13, r3
 800c384:	ee05 1a90 	vmov	s11, r1
 800c388:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c38c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c390:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c394:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800c398:	eee7 6a05 	vfma.f32	s13, s14, s10
 800c39c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c3a0:	e7a4      	b.n	800c2ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3a2:	ee07 2a90 	vmov	s15, r2
 800c3a6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800c3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800c3aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3ae:	e78a      	b.n	800c2c6 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3b0:	ee07 2a90 	vmov	s15, r2
 800c3b4:	eddf 6a07 	vldr	s13, [pc, #28]	; 800c3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800c3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3bc:	e783      	b.n	800c2c6 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800c3be:	bf00      	nop
 800c3c0:	58024400 	.word	0x58024400
 800c3c4:	4a742400 	.word	0x4a742400
 800c3c8:	39000000 	.word	0x39000000
 800c3cc:	03d09000 	.word	0x03d09000
 800c3d0:	4bbebc20 	.word	0x4bbebc20
 800c3d4:	4c742400 	.word	0x4c742400

0800c3d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c3d8:	4b4f      	ldr	r3, [pc, #316]	; (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800c3da:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c3dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c3de:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c3e0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800c3e2:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c3e6:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c3ea:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800c3ec:	d05c      	beq.n	800c4a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c3ee:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c3f2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c3f6:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c3fa:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c3fe:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c400:	ee07 4a90 	vmov	s15, r4
 800c404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c408:	d003      	beq.n	800c412 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800c40a:	2902      	cmp	r1, #2
 800c40c:	d075      	beq.n	800c4fa <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800c40e:	2900      	cmp	r1, #0
 800c410:	d04f      	beq.n	800c4b2 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c412:	ee07 2a90 	vmov	s15, r2
 800c416:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800c41a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c420:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c424:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c520 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c42c:	ee06 3a90 	vmov	s13, r3
 800c430:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c434:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c438:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c43c:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c440:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c444:	4a34      	ldr	r2, [pc, #208]	; (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800c446:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c44a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c44c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c450:	ee07 3a10 	vmov	s14, r3
 800c454:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c458:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c45a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c45e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c466:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c46a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c46c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c470:	ee07 3a10 	vmov	s14, r3
 800c474:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c478:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c47c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c484:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c488:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c48a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c48e:	ee07 3a90 	vmov	s15, r3
 800c492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c496:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c49a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c49e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c4a2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800c4a6:	4770      	bx	lr
 800c4a8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c4aa:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c4ae:	6082      	str	r2, [r0, #8]
}
 800c4b0:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4b2:	6819      	ldr	r1, [r3, #0]
 800c4b4:	0689      	lsls	r1, r1, #26
 800c4b6:	d527      	bpl.n	800c508 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4b8:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4ba:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4be:	4919      	ldr	r1, [pc, #100]	; (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4c6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4ce:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c520 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4d6:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4d8:	ee06 3a90 	vmov	s13, r3
 800c4dc:	ee05 1a90 	vmov	s11, r1
 800c4e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c4e4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c4e8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c4ec:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800c4f0:	eee7 6a05 	vfma.f32	s13, s14, s10
 800c4f4:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c4f8:	e7a4      	b.n	800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4fa:	ee07 2a90 	vmov	s15, r2
 800c4fe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800c502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c506:	e78a      	b.n	800c41e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c508:	ee07 2a90 	vmov	s15, r2
 800c50c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800c510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c514:	e783      	b.n	800c41e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800c516:	bf00      	nop
 800c518:	58024400 	.word	0x58024400
 800c51c:	4a742400 	.word	0x4a742400
 800c520:	39000000 	.word	0x39000000
 800c524:	03d09000 	.word	0x03d09000
 800c528:	4bbebc20 	.word	0x4bbebc20
 800c52c:	4c742400 	.word	0x4c742400

0800c530 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c530:	4b4f      	ldr	r3, [pc, #316]	; (800c670 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800c532:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c534:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c536:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c538:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800c53a:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c53e:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c542:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800c544:	d05c      	beq.n	800c600 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c546:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c54a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c54e:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c552:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c556:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c558:	ee07 4a90 	vmov	s15, r4
 800c55c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c560:	d07e      	beq.n	800c660 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800c562:	2902      	cmp	r1, #2
 800c564:	d075      	beq.n	800c652 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800c566:	2900      	cmp	r1, #0
 800c568:	d04f      	beq.n	800c60a <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c56a:	ee07 2a90 	vmov	s15, r2
 800c56e:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c674 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800c572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c578:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c57c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c678 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800c580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c584:	ee06 3a90 	vmov	s13, r3
 800c588:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c58c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c590:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c594:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c598:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c59c:	4a34      	ldr	r2, [pc, #208]	; (800c670 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800c59e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c5a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c5a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c5a8:	ee07 3a10 	vmov	s14, r3
 800c5ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c5b0:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c5b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c5b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5be:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c5c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c5c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c5c8:	ee07 3a10 	vmov	s14, r3
 800c5cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c5d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c5d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5dc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c5e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c5e2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c5e6:	ee07 3a90 	vmov	s15, r3
 800c5ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c5fa:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800c5fe:	4770      	bx	lr
 800c600:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c602:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c606:	6082      	str	r2, [r0, #8]
}
 800c608:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c60a:	6819      	ldr	r1, [r3, #0]
 800c60c:	0689      	lsls	r1, r1, #26
 800c60e:	d5ac      	bpl.n	800c56a <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c610:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c612:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c616:	4919      	ldr	r1, [pc, #100]	; (800c67c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c618:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c61e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c626:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c678 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800c62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c62e:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c630:	ee06 3a90 	vmov	s13, r3
 800c634:	ee05 1a90 	vmov	s11, r1
 800c638:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c63c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c640:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c644:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800c648:	eee7 6a05 	vfma.f32	s13, s14, s10
 800c64c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c650:	e7a4      	b.n	800c59c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c652:	ee07 2a90 	vmov	s15, r2
 800c656:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800c680 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800c65a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c65e:	e78a      	b.n	800c576 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c660:	ee07 2a90 	vmov	s15, r2
 800c664:	eddf 6a07 	vldr	s13, [pc, #28]	; 800c684 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800c668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c66c:	e783      	b.n	800c576 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800c66e:	bf00      	nop
 800c670:	58024400 	.word	0x58024400
 800c674:	4c742400 	.word	0x4c742400
 800c678:	39000000 	.word	0x39000000
 800c67c:	03d09000 	.word	0x03d09000
 800c680:	4bbebc20 	.word	0x4bbebc20
 800c684:	4a742400 	.word	0x4a742400

0800c688 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c688:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800c68c:	430b      	orrs	r3, r1
{
 800c68e:	b500      	push	{lr}
 800c690:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c692:	f000 8084 	beq.w	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c696:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800c69a:	430b      	orrs	r3, r1
 800c69c:	d039      	beq.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c69e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800c6a2:	430b      	orrs	r3, r1
 800c6a4:	f000 80e6 	beq.w	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c6a8:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800c6ac:	430b      	orrs	r3, r1
 800c6ae:	f000 8089 	beq.w	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c6b2:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800c6b6:	430b      	orrs	r3, r1
 800c6b8:	d061      	beq.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c6ba:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800c6be:	430b      	orrs	r3, r1
 800c6c0:	f000 8112 	beq.w	800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c6c4:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	f000 80a3 	beq.w	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c6ce:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800c6d2:	430b      	orrs	r3, r1
 800c6d4:	f000 80fa 	beq.w	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c6d8:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800c6dc:	430b      	orrs	r3, r1
 800c6de:	f000 8143 	beq.w	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c6e2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800c6e6:	ea50 0301 	orrs.w	r3, r0, r1
 800c6ea:	d137      	bne.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c6ec:	4a99      	ldr	r2, [pc, #612]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c6ee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c6f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800c6f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6f8:	f000 8083 	beq.w	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c6fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c700:	f000 8156 	beq.w	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800c704:	bb53      	cbnz	r3, 800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c706:	6810      	ldr	r0, [r2, #0]
 800c708:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800c70c:	d044      	beq.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 800c70e:	4892      	ldr	r0, [pc, #584]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800c710:	e042      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c712:	4a90      	ldr	r2, [pc, #576]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c714:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c716:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800c71a:	2b80      	cmp	r3, #128	; 0x80
 800c71c:	f000 80a5 	beq.w	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800c720:	d920      	bls.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800c722:	2bc0      	cmp	r3, #192	; 0xc0
 800c724:	d037      	beq.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800c726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c72a:	d117      	bne.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c72c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c72e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c734:	0749      	lsls	r1, r1, #29
 800c736:	d502      	bpl.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f000 80c1 	beq.w	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c73e:	4a85      	ldr	r2, [pc, #532]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c740:	6812      	ldr	r2, [r2, #0]
 800c742:	05d0      	lsls	r0, r2, #23
 800c744:	d503      	bpl.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800c746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c74a:	f000 8101 	beq.w	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c74e:	4a81      	ldr	r2, [pc, #516]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c750:	6812      	ldr	r2, [r2, #0]
 800c752:	0391      	lsls	r1, r2, #14
 800c754:	d502      	bpl.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800c756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c75a:	d0d8      	beq.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800c75c:	2000      	movs	r0, #0
}
 800c75e:	b005      	add	sp, #20
 800c760:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800c764:	2b00      	cmp	r3, #0
 800c766:	d04c      	beq.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c768:	2b40      	cmp	r3, #64	; 0x40
 800c76a:	d1f7      	bne.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c76c:	6810      	ldr	r0, [r2, #0]
 800c76e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c772:	d011      	beq.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c774:	a801      	add	r0, sp, #4
 800c776:	f7ff fd83 	bl	800c280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c77a:	9801      	ldr	r0, [sp, #4]
 800c77c:	e00c      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c77e:	4a75      	ldr	r2, [pc, #468]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c780:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c782:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800c786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c78a:	d06e      	beq.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800c78c:	d937      	bls.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800c78e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c792:	f040 8087 	bne.w	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c796:	4871      	ldr	r0, [pc, #452]	; (800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800c798:	b005      	add	sp, #20
 800c79a:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c79e:	4b6d      	ldr	r3, [pc, #436]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a2:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800c7a6:	2b04      	cmp	r3, #4
 800c7a8:	d8d8      	bhi.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800c7aa:	a201      	add	r2, pc, #4	; (adr r2, 800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800c7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b0:	0800c853 	.word	0x0800c853
 800c7b4:	0800c82f 	.word	0x0800c82f
 800c7b8:	0800c83f 	.word	0x0800c83f
 800c7bc:	0800c797 	.word	0x0800c797
 800c7c0:	0800c83b 	.word	0x0800c83b
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c7c4:	4a63      	ldr	r2, [pc, #396]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c7c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c7c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800c7cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7d0:	d04b      	beq.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800c7d2:	d944      	bls.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800c7d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c7d8:	d0dd      	beq.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800c7da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7de:	d1bd      	bne.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7e0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7e2:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7e8:	0752      	lsls	r2, r2, #29
 800c7ea:	d5a8      	bpl.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1a6      	bne.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7f0:	4b58      	ldr	r3, [pc, #352]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c7f2:	485b      	ldr	r0, [pc, #364]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c7fa:	40d8      	lsrs	r0, r3
 800c7fc:	e7cc      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d154      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c802:	6810      	ldr	r0, [r2, #0]
 800c804:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800c808:	d0c6      	beq.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c80a:	a801      	add	r0, sp, #4
 800c80c:	f7ff fe90 	bl	800c530 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c810:	9802      	ldr	r0, [sp, #8]
 800c812:	e7c1      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c814:	4a4f      	ldr	r2, [pc, #316]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c816:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800c81c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c820:	f000 80d0 	beq.w	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800c824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c828:	d0da      	beq.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d196      	bne.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c82e:	4b49      	ldr	r3, [pc, #292]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c830:	6818      	ldr	r0, [r3, #0]
 800c832:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c836:	d0af      	beq.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c838:	e79c      	b.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c83a:	4a46      	ldr	r2, [pc, #280]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c83c:	e776      	b.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c83e:	4b45      	ldr	r3, [pc, #276]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c840:	6818      	ldr	r0, [r3, #0]
 800c842:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c846:	d0a7      	beq.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c848:	a801      	add	r0, sp, #4
 800c84a:	f7ff fdc5 	bl	800c3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c84e:	9801      	ldr	r0, [sp, #4]
 800c850:	e7a2      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c852:	4b40      	ldr	r3, [pc, #256]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c854:	6818      	ldr	r0, [r3, #0]
 800c856:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800c85a:	d09d      	beq.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c85c:	e7d5      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0cf      	beq.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c866:	d081      	beq.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c868:	e778      	b.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c86a:	6810      	ldr	r0, [r2, #0]
 800c86c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c870:	d092      	beq.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c872:	e7e9      	b.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c874:	4a37      	ldr	r2, [pc, #220]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c876:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c878:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800c87c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c880:	d0f3      	beq.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800c882:	d806      	bhi.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c884:	2b00      	cmp	r3, #0
 800c886:	d0bc      	beq.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c88c:	f43f af6e 	beq.w	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c890:	e764      	b.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800c892:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c896:	f43f af7e 	beq.w	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800c89a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c89e:	f43f af45 	beq.w	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800c8a2:	e75b      	b.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800c8a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8a8:	d09a      	beq.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800c8aa:	e757      	b.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800c8ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8b0:	f43f af5c 	beq.w	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c8b4:	e752      	b.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8b6:	6810      	ldr	r0, [r2, #0]
 800c8b8:	f010 0004 	ands.w	r0, r0, #4
 800c8bc:	f43f af6c 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8c0:	6813      	ldr	r3, [r2, #0]
 800c8c2:	4827      	ldr	r0, [pc, #156]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c8c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c8c8:	40d8      	lsrs	r0, r3
 800c8ca:	e765      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c8cc:	4b21      	ldr	r3, [pc, #132]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c8ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800c8d0:	03d2      	lsls	r2, r2, #15
 800c8d2:	d5bf      	bpl.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8d4:	6818      	ldr	r0, [r3, #0]
 800c8d6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c8da:	f43f af5d 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8de:	a801      	add	r0, sp, #4
 800c8e0:	f7ff fcce 	bl	800c280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c8e4:	9803      	ldr	r0, [sp, #12]
 800c8e6:	e757      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c8e8:	4a1a      	ldr	r2, [pc, #104]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c8ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c8ec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800c8f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c8f4:	d0df      	beq.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800c8f6:	d810      	bhi.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800c8f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8fc:	d058      	beq.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800c8fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c902:	d118      	bne.n	800c936 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c904:	4b13      	ldr	r3, [pc, #76]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c906:	6818      	ldr	r0, [r3, #0]
 800c908:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c90c:	f43f af44 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c910:	a801      	add	r0, sp, #4
 800c912:	f7ff fd61 	bl	800c3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c916:	9802      	ldr	r0, [sp, #8]
 800c918:	e73e      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800c91a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c91e:	d012      	beq.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800c920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c924:	f47f af1a 	bne.w	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c928:	4b0a      	ldr	r3, [pc, #40]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c92a:	6818      	ldr	r0, [r3, #0]
 800c92c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800c930:	f43f af32 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c934:	e6eb      	b.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800c936:	2b00      	cmp	r3, #0
 800c938:	f47f af10 	bne.w	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 800c93c:	b005      	add	sp, #20
 800c93e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800c942:	f7fe bd0b 	b.w	800b35c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c946:	6810      	ldr	r0, [r2, #0]
 800c948:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800c94c:	f43f af24 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 800c950:	4804      	ldr	r0, [pc, #16]	; (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c952:	e721      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c954:	58024400 	.word	0x58024400
 800c958:	017d7840 	.word	0x017d7840
 800c95c:	00bb8000 	.word	0x00bb8000
 800c960:	03d09000 	.word	0x03d09000
 800c964:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c968:	4b28      	ldr	r3, [pc, #160]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c96a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c96c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800c970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c974:	d037      	beq.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800c976:	d814      	bhi.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800c978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c97c:	d03f      	beq.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800c97e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c982:	d0bf      	beq.n	800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800c984:	2b00      	cmp	r3, #0
 800c986:	f47f aee9 	bne.w	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c98a:	f7fe fca7 	bl	800b2dc <HAL_RCC_GetHCLKFreq>
 800c98e:	4b1f      	ldr	r3, [pc, #124]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c990:	4a1f      	ldr	r2, [pc, #124]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800c992:	6a1b      	ldr	r3, [r3, #32]
 800c994:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c998:	5cd3      	ldrb	r3, [r2, r3]
 800c99a:	f003 031f 	and.w	r3, r3, #31
 800c99e:	40d8      	lsrs	r0, r3
        break;
 800c9a0:	e6fa      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800c9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9a6:	d017      	beq.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800c9a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9ac:	d0bc      	beq.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800c9ae:	e6d5      	b.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9b0:	6810      	ldr	r0, [r2, #0]
 800c9b2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c9b6:	f43f aeef 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ba:	a801      	add	r0, sp, #4
 800c9bc:	f7ff fc60 	bl	800c280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9c0:	9802      	ldr	r0, [sp, #8]
 800c9c2:	e6e9      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9c4:	6810      	ldr	r0, [r2, #0]
 800c9c6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c9ca:	f43f aee5 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9ce:	a801      	add	r0, sp, #4
 800c9d0:	f7ff fd02 	bl	800c3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c9d4:	9803      	ldr	r0, [sp, #12]
 800c9d6:	e6df      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c9da:	6818      	ldr	r0, [r3, #0]
 800c9dc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800c9e0:	f43f aeda 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c9e4:	e7b4      	b.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9e6:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c9e8:	6818      	ldr	r0, [r3, #0]
 800c9ea:	f010 0004 	ands.w	r0, r0, #4
 800c9ee:	f43f aed3 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4807      	ldr	r0, [pc, #28]	; (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800c9f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c9fa:	40d8      	lsrs	r0, r3
 800c9fc:	e6cc      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9fe:	4b03      	ldr	r3, [pc, #12]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ca06:	f43f aec7 	beq.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ca0a:	e7d6      	b.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800ca0c:	58024400 	.word	0x58024400
 800ca10:	080192c4 	.word	0x080192c4
 800ca14:	03d09000 	.word	0x03d09000

0800ca18 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	f000 80a5 	beq.w	800cb68 <HAL_TIM_Base_Init+0x150>
{
 800ca1e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca20:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ca24:	4604      	mov	r4, r0
 800ca26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d076      	beq.n	800cb1c <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca2e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ca30:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca32:	494e      	ldr	r1, [pc, #312]	; (800cb6c <HAL_TIM_Base_Init+0x154>)
 800ca34:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800ca38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca3c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800ca40:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca42:	fab1 f181 	clz	r1, r1
 800ca46:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800ca4a:	d027      	beq.n	800ca9c <HAL_TIM_Base_Init+0x84>
 800ca4c:	bb31      	cbnz	r1, 800ca9c <HAL_TIM_Base_Init+0x84>
 800ca4e:	4848      	ldr	r0, [pc, #288]	; (800cb70 <HAL_TIM_Base_Init+0x158>)
 800ca50:	4d48      	ldr	r5, [pc, #288]	; (800cb74 <HAL_TIM_Base_Init+0x15c>)
 800ca52:	4282      	cmp	r2, r0
 800ca54:	d067      	beq.n	800cb26 <HAL_TIM_Base_Init+0x10e>
 800ca56:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ca5a:	4282      	cmp	r2, r0
 800ca5c:	d063      	beq.n	800cb26 <HAL_TIM_Base_Init+0x10e>
 800ca5e:	1b55      	subs	r5, r2, r5
 800ca60:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ca64:	fab5 f585 	clz	r5, r5
 800ca68:	4282      	cmp	r2, r0
 800ca6a:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800ca6e:	d063      	beq.n	800cb38 <HAL_TIM_Base_Init+0x120>
 800ca70:	2d00      	cmp	r5, #0
 800ca72:	d161      	bne.n	800cb38 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca74:	4840      	ldr	r0, [pc, #256]	; (800cb78 <HAL_TIM_Base_Init+0x160>)
 800ca76:	4941      	ldr	r1, [pc, #260]	; (800cb7c <HAL_TIM_Base_Init+0x164>)
 800ca78:	428a      	cmp	r2, r1
 800ca7a:	bf18      	it	ne
 800ca7c:	4282      	cmpne	r2, r0
 800ca7e:	d065      	beq.n	800cb4c <HAL_TIM_Base_Init+0x134>
 800ca80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ca84:	428a      	cmp	r2, r1
 800ca86:	d061      	beq.n	800cb4c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca88:	69a0      	ldr	r0, [r4, #24]
 800ca8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca8e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca90:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800ca92:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca94:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca96:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ca98:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca9a:	e023      	b.n	800cae4 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca9c:	4d35      	ldr	r5, [pc, #212]	; (800cb74 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800caa2:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800caa4:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800caa6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800caa8:	fab5 f585 	clz	r5, r5
 800caac:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800caae:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cab4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cab6:	69a0      	ldr	r0, [r4, #24]
 800cab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cabc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800cabe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cac0:	68e3      	ldr	r3, [r4, #12]
 800cac2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cac4:	6863      	ldr	r3, [r4, #4]
 800cac6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cac8:	b951      	cbnz	r1, 800cae0 <HAL_TIM_Base_Init+0xc8>
 800caca:	b94d      	cbnz	r5, 800cae0 <HAL_TIM_Base_Init+0xc8>
 800cacc:	492a      	ldr	r1, [pc, #168]	; (800cb78 <HAL_TIM_Base_Init+0x160>)
 800cace:	4b2b      	ldr	r3, [pc, #172]	; (800cb7c <HAL_TIM_Base_Init+0x164>)
 800cad0:	429a      	cmp	r2, r3
 800cad2:	bf18      	it	ne
 800cad4:	428a      	cmpne	r2, r1
 800cad6:	d003      	beq.n	800cae0 <HAL_TIM_Base_Init+0xc8>
 800cad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cadc:	429a      	cmp	r2, r3
 800cade:	d101      	bne.n	800cae4 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cae0:	6963      	ldr	r3, [r4, #20]
 800cae2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cae4:	2301      	movs	r3, #1
  return HAL_OK;
 800cae6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800cae8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800caea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800caee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800caf2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800caf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800cafa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800cafe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800cb0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb0e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800cb12:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800cb16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800cb1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cb20:	f7f9 ff5e 	bl	80069e0 <HAL_TIM_Base_MspInit>
 800cb24:	e783      	b.n	800ca2e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb26:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cb2c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb2e:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800cb32:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb34:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb36:	e7ba      	b.n	800caae <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800cb38:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cb3e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb40:	480f      	ldr	r0, [pc, #60]	; (800cb80 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb42:	4282      	cmp	r2, r0
 800cb44:	d0b3      	beq.n	800caae <HAL_TIM_Base_Init+0x96>
 800cb46:	2d00      	cmp	r5, #0
 800cb48:	d1b1      	bne.n	800caae <HAL_TIM_Base_Init+0x96>
 800cb4a:	e793      	b.n	800ca74 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb4c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb52:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb54:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb56:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb5c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800cb5e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800cb60:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb62:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cb64:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb66:	e7b1      	b.n	800cacc <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800cb68:	2001      	movs	r0, #1
}
 800cb6a:	4770      	bx	lr
 800cb6c:	40010000 	.word	0x40010000
 800cb70:	40000400 	.word	0x40000400
 800cb74:	40010400 	.word	0x40010400
 800cb78:	40014000 	.word	0x40014000
 800cb7c:	40014400 	.word	0x40014400
 800cb80:	40000c00 	.word	0x40000c00

0800cb84 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800cb84:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d13d      	bne.n	800cc08 <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb8c:	6802      	ldr	r2, [r0, #0]
 800cb8e:	4b23      	ldr	r3, [pc, #140]	; (800cc1c <HAL_TIM_Base_Start+0x98>)
 800cb90:	4923      	ldr	r1, [pc, #140]	; (800cc20 <HAL_TIM_Base_Start+0x9c>)
 800cb92:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800cb96:	bf18      	it	ne
 800cb98:	429a      	cmpne	r2, r3
{
 800cb9a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb9c:	bf0c      	ite	eq
 800cb9e:	2301      	moveq	r3, #1
 800cba0:	2300      	movne	r3, #0
 800cba2:	4d20      	ldr	r5, [pc, #128]	; (800cc24 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800cba4:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cba6:	42aa      	cmp	r2, r5
 800cba8:	bf08      	it	eq
 800cbaa:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800cbae:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbb2:	4c1d      	ldr	r4, [pc, #116]	; (800cc28 <HAL_TIM_Base_Start+0xa4>)
 800cbb4:	428a      	cmp	r2, r1
 800cbb6:	bf08      	it	eq
 800cbb8:	f043 0301 	orreq.w	r3, r3, #1
 800cbbc:	481b      	ldr	r0, [pc, #108]	; (800cc2c <HAL_TIM_Base_Start+0xa8>)
 800cbbe:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800cbc2:	42a2      	cmp	r2, r4
 800cbc4:	bf08      	it	eq
 800cbc6:	f043 0301 	orreq.w	r3, r3, #1
 800cbca:	4282      	cmp	r2, r0
 800cbcc:	bf08      	it	eq
 800cbce:	f043 0301 	orreq.w	r3, r3, #1
 800cbd2:	428a      	cmp	r2, r1
 800cbd4:	bf08      	it	eq
 800cbd6:	f043 0301 	orreq.w	r3, r3, #1
 800cbda:	b933      	cbnz	r3, 800cbea <HAL_TIM_Base_Start+0x66>
 800cbdc:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800cbe0:	1a10      	subs	r0, r2, r0
 800cbe2:	fab0 f080 	clz	r0, r0
 800cbe6:	0940      	lsrs	r0, r0, #5
 800cbe8:	b198      	cbz	r0, 800cc12 <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbea:	6891      	ldr	r1, [r2, #8]
 800cbec:	4b10      	ldr	r3, [pc, #64]	; (800cc30 <HAL_TIM_Base_Start+0xac>)
 800cbee:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbf0:	2b06      	cmp	r3, #6
 800cbf2:	d00b      	beq.n	800cc0c <HAL_TIM_Base_Start+0x88>
 800cbf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbf8:	d008      	beq.n	800cc0c <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800cbfa:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800cbfc:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800cbfe:	f043 0301 	orr.w	r3, r3, #1
 800cc02:	6013      	str	r3, [r2, #0]
}
 800cc04:	bc30      	pop	{r4, r5}
 800cc06:	4770      	bx	lr
    return HAL_ERROR;
 800cc08:	2001      	movs	r0, #1
}
 800cc0a:	4770      	bx	lr
  return HAL_OK;
 800cc0c:	2000      	movs	r0, #0
}
 800cc0e:	bc30      	pop	{r4, r5}
 800cc10:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800cc12:	6813      	ldr	r3, [r2, #0]
 800cc14:	f043 0301 	orr.w	r3, r3, #1
 800cc18:	6013      	str	r3, [r2, #0]
 800cc1a:	e7f3      	b.n	800cc04 <HAL_TIM_Base_Start+0x80>
 800cc1c:	40010000 	.word	0x40010000
 800cc20:	40000800 	.word	0x40000800
 800cc24:	40000400 	.word	0x40000400
 800cc28:	40000c00 	.word	0x40000c00
 800cc2c:	40010400 	.word	0x40010400
 800cc30:	00010007 	.word	0x00010007

0800cc34 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800cc34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d141      	bne.n	800ccc0 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc3c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800cc3e:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc40:	4b24      	ldr	r3, [pc, #144]	; (800ccd4 <HAL_TIM_Base_Start_IT+0xa0>)
 800cc42:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800cc46:	bf18      	it	ne
 800cc48:	429a      	cmpne	r2, r3
{
 800cc4a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc4c:	bf0c      	ite	eq
 800cc4e:	2301      	moveq	r3, #1
 800cc50:	2300      	movne	r3, #0
 800cc52:	4d21      	ldr	r5, [pc, #132]	; (800ccd8 <HAL_TIM_Base_Start_IT+0xa4>)
 800cc54:	4c21      	ldr	r4, [pc, #132]	; (800ccdc <HAL_TIM_Base_Start_IT+0xa8>)
 800cc56:	42aa      	cmp	r2, r5
 800cc58:	bf08      	it	eq
 800cc5a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800cc5e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc62:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc64:	42a2      	cmp	r2, r4
 800cc66:	bf08      	it	eq
 800cc68:	f043 0301 	orreq.w	r3, r3, #1
 800cc6c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc70:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc74:	481a      	ldr	r0, [pc, #104]	; (800cce0 <HAL_TIM_Base_Start_IT+0xac>)
 800cc76:	42a2      	cmp	r2, r4
 800cc78:	bf08      	it	eq
 800cc7a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc7e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc80:	4282      	cmp	r2, r0
 800cc82:	bf08      	it	eq
 800cc84:	f043 0301 	orreq.w	r3, r3, #1
 800cc88:	4916      	ldr	r1, [pc, #88]	; (800cce4 <HAL_TIM_Base_Start_IT+0xb0>)
 800cc8a:	428a      	cmp	r2, r1
 800cc8c:	bf08      	it	eq
 800cc8e:	f043 0301 	orreq.w	r3, r3, #1
 800cc92:	b933      	cbnz	r3, 800cca2 <HAL_TIM_Base_Start_IT+0x6e>
 800cc94:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800cc98:	1a10      	subs	r0, r2, r0
 800cc9a:	fab0 f080 	clz	r0, r0
 800cc9e:	0940      	lsrs	r0, r0, #5
 800cca0:	b198      	cbz	r0, 800ccca <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cca2:	6891      	ldr	r1, [r2, #8]
 800cca4:	4b10      	ldr	r3, [pc, #64]	; (800cce8 <HAL_TIM_Base_Start_IT+0xb4>)
 800cca6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cca8:	2b06      	cmp	r3, #6
 800ccaa:	d00b      	beq.n	800ccc4 <HAL_TIM_Base_Start_IT+0x90>
 800ccac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccb0:	d008      	beq.n	800ccc4 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800ccb2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800ccb4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800ccb6:	f043 0301 	orr.w	r3, r3, #1
 800ccba:	6013      	str	r3, [r2, #0]
}
 800ccbc:	bc30      	pop	{r4, r5}
 800ccbe:	4770      	bx	lr
    return HAL_ERROR;
 800ccc0:	2001      	movs	r0, #1
}
 800ccc2:	4770      	bx	lr
  return HAL_OK;
 800ccc4:	2000      	movs	r0, #0
}
 800ccc6:	bc30      	pop	{r4, r5}
 800ccc8:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800ccca:	6813      	ldr	r3, [r2, #0]
 800cccc:	f043 0301 	orr.w	r3, r3, #1
 800ccd0:	6013      	str	r3, [r2, #0]
 800ccd2:	e7f3      	b.n	800ccbc <HAL_TIM_Base_Start_IT+0x88>
 800ccd4:	40010000 	.word	0x40010000
 800ccd8:	40000400 	.word	0x40000400
 800ccdc:	40000800 	.word	0x40000800
 800cce0:	40010400 	.word	0x40010400
 800cce4:	40001800 	.word	0x40001800
 800cce8:	00010007 	.word	0x00010007

0800ccec <HAL_TIM_IC_MspInit>:
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop

0800ccf0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	f000 80a5 	beq.w	800ce40 <HAL_TIM_IC_Init+0x150>
{
 800ccf6:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800ccf8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d076      	beq.n	800cdf4 <HAL_TIM_IC_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd06:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800cd08:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd0a:	494e      	ldr	r1, [pc, #312]	; (800ce44 <HAL_TIM_IC_Init+0x154>)
 800cd0c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800cd10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd14:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800cd18:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd1a:	fab1 f181 	clz	r1, r1
 800cd1e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800cd22:	d027      	beq.n	800cd74 <HAL_TIM_IC_Init+0x84>
 800cd24:	bb31      	cbnz	r1, 800cd74 <HAL_TIM_IC_Init+0x84>
 800cd26:	4848      	ldr	r0, [pc, #288]	; (800ce48 <HAL_TIM_IC_Init+0x158>)
 800cd28:	4d48      	ldr	r5, [pc, #288]	; (800ce4c <HAL_TIM_IC_Init+0x15c>)
 800cd2a:	4282      	cmp	r2, r0
 800cd2c:	d067      	beq.n	800cdfe <HAL_TIM_IC_Init+0x10e>
 800cd2e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800cd32:	4282      	cmp	r2, r0
 800cd34:	d063      	beq.n	800cdfe <HAL_TIM_IC_Init+0x10e>
 800cd36:	1b55      	subs	r5, r2, r5
 800cd38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800cd3c:	fab5 f585 	clz	r5, r5
 800cd40:	4282      	cmp	r2, r0
 800cd42:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800cd46:	d063      	beq.n	800ce10 <HAL_TIM_IC_Init+0x120>
 800cd48:	2d00      	cmp	r5, #0
 800cd4a:	d161      	bne.n	800ce10 <HAL_TIM_IC_Init+0x120>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd4c:	4840      	ldr	r0, [pc, #256]	; (800ce50 <HAL_TIM_IC_Init+0x160>)
 800cd4e:	4941      	ldr	r1, [pc, #260]	; (800ce54 <HAL_TIM_IC_Init+0x164>)
 800cd50:	428a      	cmp	r2, r1
 800cd52:	bf18      	it	ne
 800cd54:	4282      	cmpne	r2, r0
 800cd56:	d065      	beq.n	800ce24 <HAL_TIM_IC_Init+0x134>
 800cd58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cd5c:	428a      	cmp	r2, r1
 800cd5e:	d061      	beq.n	800ce24 <HAL_TIM_IC_Init+0x134>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd60:	69a0      	ldr	r0, [r4, #24]
 800cd62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd66:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd68:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800cd6a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800cd6c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd6e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cd70:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd72:	e023      	b.n	800cdbc <HAL_TIM_IC_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd74:	4d35      	ldr	r5, [pc, #212]	; (800ce4c <HAL_TIM_IC_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cd7a:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd7c:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800cd7e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd80:	fab5 f585 	clz	r5, r5
 800cd84:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd86:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd8c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd8e:	69a0      	ldr	r0, [r4, #24]
 800cd90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd94:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800cd96:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd98:	68e3      	ldr	r3, [r4, #12]
 800cd9a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cd9c:	6863      	ldr	r3, [r4, #4]
 800cd9e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cda0:	b951      	cbnz	r1, 800cdb8 <HAL_TIM_IC_Init+0xc8>
 800cda2:	b94d      	cbnz	r5, 800cdb8 <HAL_TIM_IC_Init+0xc8>
 800cda4:	492a      	ldr	r1, [pc, #168]	; (800ce50 <HAL_TIM_IC_Init+0x160>)
 800cda6:	4b2b      	ldr	r3, [pc, #172]	; (800ce54 <HAL_TIM_IC_Init+0x164>)
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	bf18      	it	ne
 800cdac:	428a      	cmpne	r2, r1
 800cdae:	d003      	beq.n	800cdb8 <HAL_TIM_IC_Init+0xc8>
 800cdb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d101      	bne.n	800cdbc <HAL_TIM_IC_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 800cdb8:	6963      	ldr	r3, [r4, #20]
 800cdba:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800cdbc:	2301      	movs	r3, #1
  return HAL_OK;
 800cdbe:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800cdc0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdc2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdc6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800cdca:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800cdce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800cdd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800cdd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800cde2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cde6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800cdea:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800cdee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800cdf4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800cdf8:	f7ff ff78 	bl	800ccec <HAL_TIM_IC_MspInit>
 800cdfc:	e783      	b.n	800cd06 <HAL_TIM_IC_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cdfe:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ce04:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce06:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800ce0a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce0c:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce0e:	e7ba      	b.n	800cd86 <HAL_TIM_IC_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800ce10:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ce16:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce18:	480f      	ldr	r0, [pc, #60]	; (800ce58 <HAL_TIM_IC_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce1a:	4282      	cmp	r2, r0
 800ce1c:	d0b3      	beq.n	800cd86 <HAL_TIM_IC_Init+0x96>
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	d1b1      	bne.n	800cd86 <HAL_TIM_IC_Init+0x96>
 800ce22:	e793      	b.n	800cd4c <HAL_TIM_IC_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce24:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce2a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce2c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce2e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce34:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800ce36:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800ce38:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce3a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ce3c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce3e:	e7b1      	b.n	800cda4 <HAL_TIM_IC_Init+0xb4>
    return HAL_ERROR;
 800ce40:	2001      	movs	r0, #1
}
 800ce42:	4770      	bx	lr
 800ce44:	40010000 	.word	0x40010000
 800ce48:	40000400 	.word	0x40000400
 800ce4c:	40010400 	.word	0x40010400
 800ce50:	40014000 	.word	0x40014000
 800ce54:	40014400 	.word	0x40014400
 800ce58:	40000c00 	.word	0x40000c00

0800ce5c <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	f000 80cc 	beq.w	800cffa <HAL_TIM_Encoder_Init+0x19e>
{
 800ce62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800ce64:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ce68:	4604      	mov	r4, r0
 800ce6a:	460d      	mov	r5, r1
 800ce6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 809b 	beq.w	800cfac <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ce76:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ce78:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ce7a:	4a61      	ldr	r2, [pc, #388]	; (800d000 <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ce7c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ce84:	6899      	ldr	r1, [r3, #8]
 800ce86:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce8a:	495e      	ldr	r1, [pc, #376]	; (800d004 <HAL_TIM_Encoder_Init+0x1a8>)
 800ce8c:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ce90:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800ce92:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce94:	fab1 f181 	clz	r1, r1
 800ce98:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800ce9c:	d02b      	beq.n	800cef6 <HAL_TIM_Encoder_Init+0x9a>
 800ce9e:	bb51      	cbnz	r1, 800cef6 <HAL_TIM_Encoder_Init+0x9a>
 800cea0:	4859      	ldr	r0, [pc, #356]	; (800d008 <HAL_TIM_Encoder_Init+0x1ac>)
 800cea2:	4283      	cmp	r3, r0
 800cea4:	f000 8087 	beq.w	800cfb6 <HAL_TIM_Encoder_Init+0x15a>
 800cea8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ceac:	4283      	cmp	r3, r0
 800ceae:	f000 8082 	beq.w	800cfb6 <HAL_TIM_Encoder_Init+0x15a>
 800ceb2:	4e56      	ldr	r6, [pc, #344]	; (800d00c <HAL_TIM_Encoder_Init+0x1b0>)
 800ceb4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ceb8:	1b9e      	subs	r6, r3, r6
 800ceba:	4283      	cmp	r3, r0
 800cebc:	fab6 f686 	clz	r6, r6
 800cec0:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800cec4:	f000 8081 	beq.w	800cfca <HAL_TIM_Encoder_Init+0x16e>
 800cec8:	2e00      	cmp	r6, #0
 800ceca:	d17e      	bne.n	800cfca <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cecc:	4850      	ldr	r0, [pc, #320]	; (800d010 <HAL_TIM_Encoder_Init+0x1b4>)
 800cece:	4951      	ldr	r1, [pc, #324]	; (800d014 <HAL_TIM_Encoder_Init+0x1b8>)
 800ced0:	428b      	cmp	r3, r1
 800ced2:	bf18      	it	ne
 800ced4:	4283      	cmpne	r3, r0
 800ced6:	f000 8082 	beq.w	800cfde <HAL_TIM_Encoder_Init+0x182>
 800ceda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cede:	428b      	cmp	r3, r1
 800cee0:	d07d      	beq.n	800cfde <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cee2:	69a1      	ldr	r1, [r4, #24]
 800cee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cee8:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ceea:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800ceec:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800ceee:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cef0:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cef2:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cef4:	e023      	b.n	800cf3e <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cef6:	4e45      	ldr	r6, [pc, #276]	; (800d00c <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cef8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cefc:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cefe:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800cf00:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf02:	fab6 f686 	clz	r6, r6
 800cf06:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf08:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf0e:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf10:	69a0      	ldr	r0, [r4, #24]
 800cf12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf16:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800cf18:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf1a:	68e2      	ldr	r2, [r4, #12]
 800cf1c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cf1e:	6862      	ldr	r2, [r4, #4]
 800cf20:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf22:	b951      	cbnz	r1, 800cf3a <HAL_TIM_Encoder_Init+0xde>
 800cf24:	b94e      	cbnz	r6, 800cf3a <HAL_TIM_Encoder_Init+0xde>
 800cf26:	493a      	ldr	r1, [pc, #232]	; (800d010 <HAL_TIM_Encoder_Init+0x1b4>)
 800cf28:	4a3a      	ldr	r2, [pc, #232]	; (800d014 <HAL_TIM_Encoder_Init+0x1b8>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	bf18      	it	ne
 800cf2e:	428b      	cmpne	r3, r1
 800cf30:	d003      	beq.n	800cf3a <HAL_TIM_Encoder_Init+0xde>
 800cf32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d101      	bne.n	800cf3e <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800cf3a:	6962      	ldr	r2, [r4, #20]
 800cf3c:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cf3e:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800cf40:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cf42:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cf44:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cf48:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800cf4a:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cf4c:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cf50:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800cf52:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cf54:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800cf58:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cf5a:	492f      	ldr	r1, [pc, #188]	; (800d018 <HAL_TIM_Encoder_Init+0x1bc>)
 800cf5c:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cf5e:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cf60:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cf64:	68e9      	ldr	r1, [r5, #12]
 800cf66:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800cf68:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cf6a:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cf6e:	6a29      	ldr	r1, [r5, #32]
 800cf70:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cf74:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800cf76:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cf78:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800cf7c:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cf7e:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800cf82:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cf84:	4825      	ldr	r0, [pc, #148]	; (800d01c <HAL_TIM_Encoder_Init+0x1c0>)
 800cf86:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cf8a:	4302      	orrs	r2, r0
  return HAL_OK;
 800cf8c:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800cf8e:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800cf90:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf92:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cf96:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cf9a:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cf9e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cfa2:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800cfa6:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800cfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800cfac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800cfb0:	f7f9 fdba 	bl	8006b28 <HAL_TIM_Encoder_MspInit>
 800cfb4:	e75f      	b.n	800ce76 <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfb6:	4e15      	ldr	r6, [pc, #84]	; (800d00c <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cfbc:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfbe:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800cfc0:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfc2:	fab6 f686 	clz	r6, r6
 800cfc6:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfc8:	e79e      	b.n	800cf08 <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800cfca:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cfd0:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfd2:	4813      	ldr	r0, [pc, #76]	; (800d020 <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfd4:	4283      	cmp	r3, r0
 800cfd6:	d097      	beq.n	800cf08 <HAL_TIM_Encoder_Init+0xac>
 800cfd8:	2e00      	cmp	r6, #0
 800cfda:	d195      	bne.n	800cf08 <HAL_TIM_Encoder_Init+0xac>
 800cfdc:	e776      	b.n	800cecc <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfde:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfe0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfe4:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfe6:	69a1      	ldr	r1, [r4, #24]
 800cfe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cfec:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfee:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800cff0:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800cff2:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cff4:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800cff6:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cff8:	e795      	b.n	800cf26 <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800cffa:	2001      	movs	r0, #1
}
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	fffebff8 	.word	0xfffebff8
 800d004:	40010000 	.word	0x40010000
 800d008:	40000400 	.word	0x40000400
 800d00c:	40010400 	.word	0x40010400
 800d010:	40014000 	.word	0x40014000
 800d014:	40014400 	.word	0x40014400
 800d018:	fffffcfc 	.word	0xfffffcfc
 800d01c:	ffff0303 	.word	0xffff0303
 800d020:	40000c00 	.word	0x40000c00

0800d024 <HAL_TIM_Encoder_Start>:
{
 800d024:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d026:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d02a:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d02e:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d032:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d034:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d038:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800d03a:	b9c1      	cbnz	r1, 800d06e <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d123      	bne.n	800d088 <HAL_TIM_Encoder_Start+0x64>
 800d040:	2a01      	cmp	r2, #1
 800d042:	d121      	bne.n	800d088 <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d044:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d046:	2302      	movs	r3, #2
 800d048:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d04c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d050:	6a13      	ldr	r3, [r2, #32]
 800d052:	f023 0301 	bic.w	r3, r3, #1
 800d056:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d058:	6a13      	ldr	r3, [r2, #32]
 800d05a:	f043 0301 	orr.w	r3, r3, #1
 800d05e:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800d060:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d062:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800d064:	f043 0301 	orr.w	r3, r3, #1
 800d068:	6013      	str	r3, [r2, #0]
}
 800d06a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800d06e:	2904      	cmp	r1, #4
 800d070:	fa5f fc8c 	uxtb.w	ip, ip
 800d074:	fa5f fe8e 	uxtb.w	lr, lr
 800d078:	d027      	beq.n	800d0ca <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d104      	bne.n	800d088 <HAL_TIM_Encoder_Start+0x64>
 800d07e:	f1bc 0f01 	cmp.w	ip, #1
 800d082:	d101      	bne.n	800d088 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d084:	2a01      	cmp	r2, #1
 800d086:	d002      	beq.n	800d08e <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800d088:	2001      	movs	r0, #1
}
 800d08a:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d08e:	f1be 0f01 	cmp.w	lr, #1
 800d092:	d1f9      	bne.n	800d088 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d094:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d096:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d098:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d09c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0a0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0a4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d0a8:	6a13      	ldr	r3, [r2, #32]
 800d0aa:	f023 0301 	bic.w	r3, r3, #1
 800d0ae:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0b0:	6a13      	ldr	r3, [r2, #32]
 800d0b2:	f043 0301 	orr.w	r3, r3, #1
 800d0b6:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800d0b8:	6a13      	ldr	r3, [r2, #32]
 800d0ba:	f023 0310 	bic.w	r3, r3, #16
 800d0be:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0c0:	6a13      	ldr	r3, [r2, #32]
 800d0c2:	f043 0310 	orr.w	r3, r3, #16
 800d0c6:	6213      	str	r3, [r2, #32]
}
 800d0c8:	e7ca      	b.n	800d060 <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d0ca:	f1bc 0f01 	cmp.w	ip, #1
 800d0ce:	d1db      	bne.n	800d088 <HAL_TIM_Encoder_Start+0x64>
 800d0d0:	f1be 0f01 	cmp.w	lr, #1
 800d0d4:	d1d8      	bne.n	800d088 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0d6:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d0d8:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0da:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0de:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d0e2:	e7e9      	b.n	800d0b8 <HAL_TIM_Encoder_Start+0x94>

0800d0e4 <HAL_TIM_IC_ConfigChannel>:
{
 800d0e4:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800d0e6:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800d0ea:	2801      	cmp	r0, #1
 800d0ec:	f000 80d4 	beq.w	800d298 <HAL_TIM_IC_ConfigChannel+0x1b4>
 800d0f0:	2001      	movs	r0, #1
{
 800d0f2:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800d0f4:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800d0f8:	b15a      	cbz	r2, 800d112 <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 800d0fa:	2a04      	cmp	r2, #4
 800d0fc:	d054      	beq.n	800d1a8 <HAL_TIM_IC_ConfigChannel+0xc4>
  else if (Channel == TIM_CHANNEL_3)
 800d0fe:	2a08      	cmp	r2, #8
 800d100:	f000 80a2 	beq.w	800d248 <HAL_TIM_IC_ConfigChannel+0x164>
  else if (Channel == TIM_CHANNEL_4)
 800d104:	2a0c      	cmp	r2, #12
 800d106:	d079      	beq.n	800d1fc <HAL_TIM_IC_ConfigChannel+0x118>
  __HAL_UNLOCK(htim);
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d10e:	bcf0      	pop	{r4, r5, r6, r7}
 800d110:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 800d112:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d114:	f8df c184 	ldr.w	ip, [pc, #388]	; 800d29c <HAL_TIM_IC_ConfigChannel+0x1b8>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d118:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d11a:	4562      	cmp	r2, ip
    TIM_TI1_SetConfig(htim->Instance,
 800d11c:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d11e:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 800d122:	e9d1 4500 	ldrd	r4, r5, [r1]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d126:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d128:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 800d12a:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d12c:	d01d      	beq.n	800d16a <HAL_TIM_IC_ConfigChannel+0x86>
 800d12e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d132:	d01a      	beq.n	800d16a <HAL_TIM_IC_ConfigChannel+0x86>
 800d134:	f5ac 4c7c 	sub.w	ip, ip, #64512	; 0xfc00
 800d138:	4562      	cmp	r2, ip
 800d13a:	d016      	beq.n	800d16a <HAL_TIM_IC_ConfigChannel+0x86>
 800d13c:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800d140:	4562      	cmp	r2, ip
 800d142:	d012      	beq.n	800d16a <HAL_TIM_IC_ConfigChannel+0x86>
 800d144:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800d148:	4562      	cmp	r2, ip
 800d14a:	d00e      	beq.n	800d16a <HAL_TIM_IC_ConfigChannel+0x86>
 800d14c:	f50c 4c78 	add.w	ip, ip, #63488	; 0xf800
 800d150:	4562      	cmp	r2, ip
 800d152:	d00a      	beq.n	800d16a <HAL_TIM_IC_ConfigChannel+0x86>
 800d154:	f5ac 4c6c 	sub.w	ip, ip, #60416	; 0xec00
 800d158:	4562      	cmp	r2, ip
 800d15a:	d006      	beq.n	800d16a <HAL_TIM_IC_ConfigChannel+0x86>
 800d15c:	f50c 3c94 	add.w	ip, ip, #75776	; 0x12800
 800d160:	4562      	cmp	r2, ip
 800d162:	d002      	beq.n	800d16a <HAL_TIM_IC_ConfigChannel+0x86>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d164:	f047 0c01 	orr.w	ip, r7, #1
 800d168:	e003      	b.n	800d172 <HAL_TIM_IC_ConfigChannel+0x8e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d16a:	f027 0c03 	bic.w	ip, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 800d16e:	ea45 0c0c 	orr.w	ip, r5, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d172:	0100      	lsls	r0, r0, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d174:	f026 050a 	bic.w	r5, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d178:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d17c:	f004 040a 	and.w	r4, r4, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d180:	b2c0      	uxtb	r0, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d182:	432c      	orrs	r4, r5
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d184:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d186:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 800d18a:	6190      	str	r0, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800d18c:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 800d18e:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d190:	6994      	ldr	r4, [r2, #24]
 800d192:	f024 040c 	bic.w	r4, r4, #12
 800d196:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d198:	6991      	ldr	r1, [r2, #24]
 800d19a:	4329      	orrs	r1, r5
 800d19c:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d1a4:	bcf0      	pop	{r4, r5, r6, r7}
 800d1a6:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1ac:	6a15      	ldr	r5, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d1ae:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1b0:	f025 0510 	bic.w	r5, r5, #16
    TIM_TI2_SetConfig(htim->Instance,
 800d1b4:	e9d1 4600 	ldrd	r4, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1b8:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d1ba:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d1bc:	b281      	uxth	r1, r0
  tmpccmr1 = TIMx->CCMR1;
 800d1be:	6990      	ldr	r0, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d1c0:	0124      	lsls	r4, r4, #4
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d1c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d1c6:	f004 04a0 	and.w	r4, r4, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d1ca:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d1ce:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d1d2:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800d1d4:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800d1d6:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d1d8:	f020 01a0 	bic.w	r1, r0, #160	; 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 800d1dc:	2000      	movs	r0, #0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d1de:	4321      	orrs	r1, r4
  TIMx->CCER = tmpccer;
 800d1e0:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d1e2:	6994      	ldr	r4, [r2, #24]
 800d1e4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 800d1e8:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d1ea:	6991      	ldr	r1, [r2, #24]
 800d1ec:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800d1f0:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d1f8:	bcf0      	pop	{r4, r5, r6, r7}
 800d1fa:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d200:	6a15      	ldr	r5, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d202:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d204:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800d208:	e9d1 4600 	ldrd	r4, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d20c:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d20e:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d210:	b281      	uxth	r1, r0
  tmpccmr2 = TIMx->CCMR2;
 800d212:	69d0      	ldr	r0, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d214:	0324      	lsls	r4, r4, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d216:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d21a:	f404 4420 	and.w	r4, r4, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d21e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d222:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d226:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800d228:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 800d22a:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d22c:	f420 4120 	bic.w	r1, r0, #40960	; 0xa000
  HAL_StatusTypeDef status = HAL_OK;
 800d230:	2000      	movs	r0, #0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d232:	4321      	orrs	r1, r4
  TIMx->CCER = tmpccer ;
 800d234:	6211      	str	r1, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d236:	69d4      	ldr	r4, [r2, #28]
 800d238:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 800d23c:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d23e:	69d1      	ldr	r1, [r2, #28]
 800d240:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800d244:	61d1      	str	r1, [r2, #28]
 800d246:	e75f      	b.n	800d108 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d24c:	6a15      	ldr	r5, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d24e:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d250:	f425 7580 	bic.w	r5, r5, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800d254:	e9d1 6400 	ldrd	r6, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d258:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d25a:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d25c:	b2c1      	uxtb	r1, r0
  tmpccmr2 = TIMx->CCMR2;
 800d25e:	69d0      	ldr	r0, [r2, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d260:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d262:	f020 0003 	bic.w	r0, r0, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d266:	f406 6620 	and.w	r6, r6, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 800d26a:	4320      	orrs	r0, r4
  tmpccer = TIMx->CCER;
 800d26c:	6a14      	ldr	r4, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d26e:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d272:	f424 6420 	bic.w	r4, r4, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d276:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d278:	4334      	orrs	r4, r6
  HAL_StatusTypeDef status = HAL_OK;
 800d27a:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmr2;
 800d27c:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 800d27e:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d280:	69d4      	ldr	r4, [r2, #28]
 800d282:	f024 040c 	bic.w	r4, r4, #12
 800d286:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d288:	69d1      	ldr	r1, [r2, #28]
 800d28a:	4329      	orrs	r1, r5
 800d28c:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d294:	bcf0      	pop	{r4, r5, r6, r7}
 800d296:	4770      	bx	lr
  __HAL_LOCK(htim);
 800d298:	2002      	movs	r0, #2
}
 800d29a:	4770      	bx	lr
 800d29c:	40010000 	.word	0x40010000

0800d2a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800d2a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	f000 8081 	beq.w	800d3ac <HAL_TIM_ConfigClockSource+0x10c>
 800d2aa:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d2ac:	2302      	movs	r3, #2
{
 800d2ae:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 800d2b0:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800d2b2:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d2b4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800d2b8:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2bc:	4b5a      	ldr	r3, [pc, #360]	; (800d428 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800d2be:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2c0:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800d2c2:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800d2c4:	680b      	ldr	r3, [r1, #0]
 800d2c6:	2b70      	cmp	r3, #112	; 0x70
 800d2c8:	f000 809c 	beq.w	800d404 <HAL_TIM_ConfigClockSource+0x164>
 800d2cc:	d825      	bhi.n	800d31a <HAL_TIM_ConfigClockSource+0x7a>
 800d2ce:	2b50      	cmp	r3, #80	; 0x50
 800d2d0:	d06e      	beq.n	800d3b0 <HAL_TIM_ConfigClockSource+0x110>
 800d2d2:	d939      	bls.n	800d348 <HAL_TIM_ConfigClockSource+0xa8>
 800d2d4:	2b60      	cmp	r3, #96	; 0x60
 800d2d6:	d118      	bne.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2d8:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d2da:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2dc:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d2e0:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2e2:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d2e4:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800d2e6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d2e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d2ec:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800d2f0:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d2f2:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800d2f6:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d2f8:	4b4c      	ldr	r3, [pc, #304]	; (800d42c <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800d2fa:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 800d2fe:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800d300:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d302:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d304:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800d308:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800d30a:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800d30c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d30e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d312:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800d316:	bc70      	pop	{r4, r5, r6}
 800d318:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800d31a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d31e:	d060      	beq.n	800d3e2 <HAL_TIM_ConfigClockSource+0x142>
 800d320:	d933      	bls.n	800d38a <HAL_TIM_ConfigClockSource+0xea>
 800d322:	4943      	ldr	r1, [pc, #268]	; (800d430 <HAL_TIM_ConfigClockSource+0x190>)
 800d324:	428b      	cmp	r3, r1
 800d326:	d006      	beq.n	800d336 <HAL_TIM_ConfigClockSource+0x96>
 800d328:	d929      	bls.n	800d37e <HAL_TIM_ConfigClockSource+0xde>
 800d32a:	4942      	ldr	r1, [pc, #264]	; (800d434 <HAL_TIM_ConfigClockSource+0x194>)
 800d32c:	428b      	cmp	r3, r1
 800d32e:	d002      	beq.n	800d336 <HAL_TIM_ConfigClockSource+0x96>
 800d330:	3110      	adds	r1, #16
 800d332:	428b      	cmp	r3, r1
 800d334:	d1e9      	bne.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800d336:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d338:	493c      	ldr	r1, [pc, #240]	; (800d42c <HAL_TIM_ConfigClockSource+0x18c>)
 800d33a:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800d33c:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d33e:	430b      	orrs	r3, r1
 800d340:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800d344:	60a3      	str	r3, [r4, #8]
}
 800d346:	e7e0      	b.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d348:	2b40      	cmp	r3, #64	; 0x40
 800d34a:	d123      	bne.n	800d394 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800d34c:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d34e:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d350:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d352:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d356:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d35a:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800d35c:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d35e:	4b33      	ldr	r3, [pc, #204]	; (800d42c <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d360:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d362:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d364:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d368:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d36c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d36e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d370:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d372:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d374:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d376:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800d37a:	60a3      	str	r3, [r4, #8]
}
 800d37c:	e7c5      	b.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d37e:	f023 0110 	bic.w	r1, r3, #16
 800d382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d386:	d1c0      	bne.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
 800d388:	e7d5      	b.n	800d336 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800d38a:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800d38e:	bf18      	it	ne
 800d390:	2001      	movne	r0, #1
 800d392:	e7ba      	b.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d394:	d8b9      	bhi.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
 800d396:	2b20      	cmp	r3, #32
 800d398:	d0cd      	beq.n	800d336 <HAL_TIM_ConfigClockSource+0x96>
 800d39a:	d903      	bls.n	800d3a4 <HAL_TIM_ConfigClockSource+0x104>
 800d39c:	2b30      	cmp	r3, #48	; 0x30
 800d39e:	d0ca      	beq.n	800d336 <HAL_TIM_ConfigClockSource+0x96>
 800d3a0:	2001      	movs	r0, #1
 800d3a2:	e7b2      	b.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
 800d3a4:	f033 0110 	bics.w	r1, r3, #16
 800d3a8:	d1af      	bne.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
 800d3aa:	e7c4      	b.n	800d336 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800d3ac:	2002      	movs	r0, #2
}
 800d3ae:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800d3b0:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3b2:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3b4:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3b6:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3ba:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3be:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800d3c0:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d3c2:	4b1a      	ldr	r3, [pc, #104]	; (800d42c <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3c4:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3c6:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3c8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3cc:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d3d0:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d3d2:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d3d4:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d3d6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d3d8:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d3da:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800d3de:	60a3      	str	r3, [r4, #8]
}
 800d3e0:	e793      	b.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3e2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d3e6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3e8:	432b      	orrs	r3, r5
 800d3ea:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3ec:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d3f0:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d3f6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d3f8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3fa:	68a3      	ldr	r3, [r4, #8]
 800d3fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d400:	60a3      	str	r3, [r4, #8]
      break;
 800d402:	e782      	b.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d404:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d408:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d40a:	432b      	orrs	r3, r5
 800d40c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d40e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d412:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d414:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d418:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d41a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800d41c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d41e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d422:	60a3      	str	r3, [r4, #8]
      break;
 800d424:	e771      	b.n	800d30a <HAL_TIM_ConfigClockSource+0x6a>
 800d426:	bf00      	nop
 800d428:	ffce0088 	.word	0xffce0088
 800d42c:	ffcfff8f 	.word	0xffcfff8f
 800d430:	00100020 	.word	0x00100020
 800d434:	00100030 	.word	0x00100030

0800d438 <HAL_TIM_OC_DelayElapsedCallback>:
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop

0800d43c <HAL_TIM_IC_CaptureCallback>:
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop

0800d440 <HAL_TIM_PWM_PulseFinishedCallback>:
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop

0800d444 <HAL_TIM_TriggerCallback>:
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop

0800d448 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d448:	6803      	ldr	r3, [r0, #0]
 800d44a:	691a      	ldr	r2, [r3, #16]
 800d44c:	0791      	lsls	r1, r2, #30
{
 800d44e:	b510      	push	{r4, lr}
 800d450:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d452:	d502      	bpl.n	800d45a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d454:	68da      	ldr	r2, [r3, #12]
 800d456:	0792      	lsls	r2, r2, #30
 800d458:	d468      	bmi.n	800d52c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d45a:	691a      	ldr	r2, [r3, #16]
 800d45c:	0752      	lsls	r2, r2, #29
 800d45e:	d502      	bpl.n	800d466 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d460:	68da      	ldr	r2, [r3, #12]
 800d462:	0750      	lsls	r0, r2, #29
 800d464:	d44f      	bmi.n	800d506 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d466:	691a      	ldr	r2, [r3, #16]
 800d468:	0711      	lsls	r1, r2, #28
 800d46a:	d502      	bpl.n	800d472 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d46c:	68da      	ldr	r2, [r3, #12]
 800d46e:	0712      	lsls	r2, r2, #28
 800d470:	d437      	bmi.n	800d4e2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d472:	691a      	ldr	r2, [r3, #16]
 800d474:	06d0      	lsls	r0, r2, #27
 800d476:	d502      	bpl.n	800d47e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d478:	68da      	ldr	r2, [r3, #12]
 800d47a:	06d1      	lsls	r1, r2, #27
 800d47c:	d41e      	bmi.n	800d4bc <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d47e:	691a      	ldr	r2, [r3, #16]
 800d480:	07d2      	lsls	r2, r2, #31
 800d482:	d502      	bpl.n	800d48a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d484:	68da      	ldr	r2, [r3, #12]
 800d486:	07d0      	lsls	r0, r2, #31
 800d488:	d469      	bmi.n	800d55e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d48a:	691a      	ldr	r2, [r3, #16]
 800d48c:	0611      	lsls	r1, r2, #24
 800d48e:	d502      	bpl.n	800d496 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d490:	68da      	ldr	r2, [r3, #12]
 800d492:	0612      	lsls	r2, r2, #24
 800d494:	d46b      	bmi.n	800d56e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d496:	691a      	ldr	r2, [r3, #16]
 800d498:	05d0      	lsls	r0, r2, #23
 800d49a:	d502      	bpl.n	800d4a2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d49c:	68da      	ldr	r2, [r3, #12]
 800d49e:	0611      	lsls	r1, r2, #24
 800d4a0:	d46d      	bmi.n	800d57e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d4a2:	691a      	ldr	r2, [r3, #16]
 800d4a4:	0652      	lsls	r2, r2, #25
 800d4a6:	d502      	bpl.n	800d4ae <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d4a8:	68da      	ldr	r2, [r3, #12]
 800d4aa:	0650      	lsls	r0, r2, #25
 800d4ac:	d46f      	bmi.n	800d58e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d4ae:	691a      	ldr	r2, [r3, #16]
 800d4b0:	0691      	lsls	r1, r2, #26
 800d4b2:	d502      	bpl.n	800d4ba <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d4b4:	68da      	ldr	r2, [r3, #12]
 800d4b6:	0692      	lsls	r2, r2, #26
 800d4b8:	d449      	bmi.n	800d54e <HAL_TIM_IRQHandler+0x106>
}
 800d4ba:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d4bc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4c0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800d4c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d4c4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4c6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d4c8:	69db      	ldr	r3, [r3, #28]
 800d4ca:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d4ce:	d16f      	bne.n	800d5b0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4d0:	f7ff ffb2 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f7ff ffb3 	bl	800d440 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4da:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d4dc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4de:	7722      	strb	r2, [r4, #28]
 800d4e0:	e7cd      	b.n	800d47e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d4e2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4e6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800d4e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d4ea:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d4ee:	69db      	ldr	r3, [r3, #28]
 800d4f0:	079b      	lsls	r3, r3, #30
 800d4f2:	d15a      	bne.n	800d5aa <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4f4:	f7ff ffa0 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f7ff ffa1 	bl	800d440 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4fe:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d500:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d502:	7722      	strb	r2, [r4, #28]
 800d504:	e7b5      	b.n	800d472 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d506:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d50a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800d50c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d50e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d510:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d518:	d144      	bne.n	800d5a4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d51a:	f7ff ff8d 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d51e:	4620      	mov	r0, r4
 800d520:	f7ff ff8e 	bl	800d440 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d524:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d526:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d528:	7722      	strb	r2, [r4, #28]
 800d52a:	e79c      	b.n	800d466 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d52c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d530:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d532:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d534:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d536:	699b      	ldr	r3, [r3, #24]
 800d538:	0799      	lsls	r1, r3, #30
 800d53a:	d130      	bne.n	800d59e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d53c:	f7ff ff7c 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d540:	4620      	mov	r0, r4
 800d542:	f7ff ff7d 	bl	800d440 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d546:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d548:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d54a:	7722      	strb	r2, [r4, #28]
 800d54c:	e785      	b.n	800d45a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d54e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d552:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d554:	611a      	str	r2, [r3, #16]
}
 800d556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d55a:	f000 b887 	b.w	800d66c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d55e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800d562:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d564:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d566:	f7f7 fac9 	bl	8004afc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d56a:	6823      	ldr	r3, [r4, #0]
 800d56c:	e78d      	b.n	800d48a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d56e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800d572:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d574:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d576:	f000 f87b 	bl	800d670 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d57a:	6823      	ldr	r3, [r4, #0]
 800d57c:	e78b      	b.n	800d496 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d57e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800d582:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d584:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d586:	f000 f875 	bl	800d674 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	e789      	b.n	800d4a2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d58e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800d592:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d594:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d596:	f7ff ff55 	bl	800d444 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d59a:	6823      	ldr	r3, [r4, #0]
 800d59c:	e787      	b.n	800d4ae <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800d59e:	f7ff ff4d 	bl	800d43c <HAL_TIM_IC_CaptureCallback>
 800d5a2:	e7d0      	b.n	800d546 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800d5a4:	f7ff ff4a 	bl	800d43c <HAL_TIM_IC_CaptureCallback>
 800d5a8:	e7bc      	b.n	800d524 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800d5aa:	f7ff ff47 	bl	800d43c <HAL_TIM_IC_CaptureCallback>
 800d5ae:	e7a6      	b.n	800d4fe <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800d5b0:	f7ff ff44 	bl	800d43c <HAL_TIM_IC_CaptureCallback>
 800d5b4:	e791      	b.n	800d4da <HAL_TIM_IRQHandler+0x92>
 800d5b6:	bf00      	nop

0800d5b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d04b      	beq.n	800d658 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5c0:	6803      	ldr	r3, [r0, #0]
 800d5c2:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d5c4:	2002      	movs	r0, #2
{
 800d5c6:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d5c8:	4d24      	ldr	r5, [pc, #144]	; (800d65c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d5ca:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d5ce:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800d5d0:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800d5d2:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d5d4:	d029      	beq.n	800d62a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800d5d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d5da:	42ab      	cmp	r3, r5
 800d5dc:	d025      	beq.n	800d62a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5de:	4d20      	ldr	r5, [pc, #128]	; (800d660 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5e0:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5e4:	42ab      	cmp	r3, r5
 800d5e6:	bf18      	it	ne
 800d5e8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d5ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d5f0:	bf0c      	ite	eq
 800d5f2:	f04f 0c01 	moveq.w	ip, #1
 800d5f6:	f04f 0c00 	movne.w	ip, #0
 800d5fa:	42ab      	cmp	r3, r5
 800d5fc:	bf08      	it	eq
 800d5fe:	f04c 0c01 	orreq.w	ip, ip, #1
 800d602:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d606:	42ab      	cmp	r3, r5
 800d608:	bf08      	it	eq
 800d60a:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d60e:	680d      	ldr	r5, [r1, #0]
 800d610:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d612:	4d14      	ldr	r5, [pc, #80]	; (800d664 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800d614:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d616:	42ab      	cmp	r3, r5
 800d618:	bf14      	ite	ne
 800d61a:	4660      	movne	r0, ip
 800d61c:	f04c 0001 	orreq.w	r0, ip, #1
 800d620:	b960      	cbnz	r0, 800d63c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800d622:	4811      	ldr	r0, [pc, #68]	; (800d668 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800d624:	4283      	cmp	r3, r0
 800d626:	d009      	beq.n	800d63c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800d628:	e00d      	b.n	800d646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d62a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d62c:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d630:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d632:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800d634:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d638:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800d63a:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d63c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d63e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d642:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d644:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800d646:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d648:	2101      	movs	r1, #1

  return HAL_OK;
 800d64a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d64c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d650:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800d654:	bc30      	pop	{r4, r5}
 800d656:	4770      	bx	lr
  __HAL_LOCK(htim);
 800d658:	2002      	movs	r0, #2
}
 800d65a:	4770      	bx	lr
 800d65c:	40010000 	.word	0x40010000
 800d660:	40000400 	.word	0x40000400
 800d664:	40001800 	.word	0x40001800
 800d668:	40014000 	.word	0x40014000

0800d66c <HAL_TIMEx_CommutCallback>:
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop

0800d670 <HAL_TIMEx_BreakCallback>:
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop

0800d674 <HAL_TIMEx_Break2Callback>:
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop

0800d678 <HAL_UART_TxCpltCallback>:
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop

0800d67c <HAL_UART_ErrorCallback>:
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop

0800d680 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d680:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d682:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800d684:	2300      	movs	r3, #0
 800d686:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d68a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d68e:	f7ff fff5 	bl	800d67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d692:	bd08      	pop	{r3, pc}

0800d694 <HAL_UARTEx_RxEventCallback>:
}
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop

0800d698 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d698:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d69a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d69e:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800d6a0:	ea12 0f0c 	tst.w	r2, ip
{
 800d6a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d6a6:	681d      	ldr	r5, [r3, #0]
{
 800d6a8:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d6aa:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800d6ac:	f000 8121 	beq.w	800d8f2 <HAL_UART_IRQHandler+0x25a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d6b0:	4eb1      	ldr	r6, [pc, #708]	; (800d978 <HAL_UART_IRQHandler+0x2e0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d6b2:	48b2      	ldr	r0, [pc, #712]	; (800d97c <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d6b4:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d6b8:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d6ba:	ea5c 0600 	orrs.w	r6, ip, r0
 800d6be:	f040 8089 	bne.w	800d7d4 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6c2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800d6c4:	2801      	cmp	r0, #1
 800d6c6:	d022      	beq.n	800d70e <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d6c8:	02d0      	lsls	r0, r2, #11
 800d6ca:	d502      	bpl.n	800d6d2 <HAL_UART_IRQHandler+0x3a>
 800d6cc:	024e      	lsls	r6, r1, #9
 800d6ce:	f100 8139 	bmi.w	800d944 <HAL_UART_IRQHandler+0x2ac>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d6d2:	0610      	lsls	r0, r2, #24
 800d6d4:	d506      	bpl.n	800d6e4 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d6d6:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d6da:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d6de:	4301      	orrs	r1, r0
 800d6e0:	f040 8128 	bne.w	800d934 <HAL_UART_IRQHandler+0x29c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d6e4:	0651      	lsls	r1, r2, #25
 800d6e6:	d567      	bpl.n	800d7b8 <HAL_UART_IRQHandler+0x120>
 800d6e8:	066e      	lsls	r6, r5, #25
 800d6ea:	d565      	bpl.n	800d7b8 <HAL_UART_IRQHandler+0x120>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ec:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f4:	e843 2100 	strex	r1, r2, [r3]
 800d6f8:	2900      	cmp	r1, #0
 800d6fa:	d1f7      	bne.n	800d6ec <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6fc:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6fe:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d700:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800d702:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->TxISR = NULL;
 800d706:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800d708:	f7ff ffb6 	bl	800d678 <HAL_UART_TxCpltCallback>
}
 800d70c:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d70e:	06d0      	lsls	r0, r2, #27
 800d710:	d5da      	bpl.n	800d6c8 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d712:	06ee      	lsls	r6, r5, #27
 800d714:	d5d8      	bpl.n	800d6c8 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d716:	2210      	movs	r2, #16
 800d718:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d71a:	689a      	ldr	r2, [r3, #8]
 800d71c:	0655      	lsls	r5, r2, #25
 800d71e:	f140 813c 	bpl.w	800d99a <HAL_UART_IRQHandler+0x302>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d722:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800d726:	6801      	ldr	r1, [r0, #0]
 800d728:	684a      	ldr	r2, [r1, #4]
 800d72a:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800d72c:	2a00      	cmp	r2, #0
 800d72e:	d0ed      	beq.n	800d70c <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d730:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800d734:	4291      	cmp	r1, r2
 800d736:	d9e9      	bls.n	800d70c <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800d738:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d73c:	69c2      	ldr	r2, [r0, #28]
 800d73e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d742:	d02f      	beq.n	800d7a4 <HAL_UART_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d744:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d74c:	e843 2100 	strex	r1, r2, [r3]
 800d750:	2900      	cmp	r1, #0
 800d752:	d1f7      	bne.n	800d744 <HAL_UART_IRQHandler+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d754:	f103 0208 	add.w	r2, r3, #8
 800d758:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d75c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d760:	f103 0508 	add.w	r5, r3, #8
 800d764:	e845 2100 	strex	r1, r2, [r5]
 800d768:	2900      	cmp	r1, #0
 800d76a:	d1f3      	bne.n	800d754 <HAL_UART_IRQHandler+0xbc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	f103 0208 	add.w	r2, r3, #8
 800d770:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d778:	f103 0508 	add.w	r5, r3, #8
 800d77c:	e845 2100 	strex	r1, r2, [r5]
 800d780:	2900      	cmp	r1, #0
 800d782:	d1f3      	bne.n	800d76c <HAL_UART_IRQHandler+0xd4>
          huart->RxState = HAL_UART_STATE_READY;
 800d784:	2220      	movs	r2, #32
 800d786:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d78a:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d790:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d794:	e843 2100 	strex	r1, r2, [r3]
 800d798:	2900      	cmp	r1, #0
 800d79a:	d1f7      	bne.n	800d78c <HAL_UART_IRQHandler+0xf4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d79c:	f7fb ffdc 	bl	8009758 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d7a0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d7a4:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d7a6:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d7a8:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d7aa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800d7ae:	1ac9      	subs	r1, r1, r3
 800d7b0:	b289      	uxth	r1, r1
 800d7b2:	f7ff ff6f 	bl	800d694 <HAL_UARTEx_RxEventCallback>
}
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d7b8:	0210      	lsls	r0, r2, #8
 800d7ba:	d502      	bpl.n	800d7c2 <HAL_UART_IRQHandler+0x12a>
 800d7bc:	0069      	lsls	r1, r5, #1
 800d7be:	f100 80e7 	bmi.w	800d990 <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d7c2:	01d3      	lsls	r3, r2, #7
 800d7c4:	d5a2      	bpl.n	800d70c <HAL_UART_IRQHandler+0x74>
 800d7c6:	2d00      	cmp	r5, #0
 800d7c8:	daa0      	bge.n	800d70c <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d7ca:	4620      	mov	r0, r4
}
 800d7cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d7d0:	f000 bd7a 	b.w	800e2c8 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7d4:	07d6      	lsls	r6, r2, #31
 800d7d6:	d509      	bpl.n	800d7ec <HAL_UART_IRQHandler+0x154>
 800d7d8:	05ee      	lsls	r6, r5, #23
 800d7da:	d507      	bpl.n	800d7ec <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7dc:	2601      	movs	r6, #1
 800d7de:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7e0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800d7e4:	f046 0601 	orr.w	r6, r6, #1
 800d7e8:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7ec:	0796      	lsls	r6, r2, #30
 800d7ee:	f140 8092 	bpl.w	800d916 <HAL_UART_IRQHandler+0x27e>
 800d7f2:	07ce      	lsls	r6, r1, #31
 800d7f4:	d50a      	bpl.n	800d80c <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7f6:	2602      	movs	r6, #2
 800d7f8:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7fa:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800d7fe:	f046 0604 	orr.w	r6, r6, #4
 800d802:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d806:	0756      	lsls	r6, r2, #29
 800d808:	f100 808b 	bmi.w	800d922 <HAL_UART_IRQHandler+0x28a>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d80c:	0716      	lsls	r6, r2, #28
 800d80e:	d50b      	bpl.n	800d828 <HAL_UART_IRQHandler+0x190>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d810:	f005 0620 	and.w	r6, r5, #32
 800d814:	4330      	orrs	r0, r6
 800d816:	d007      	beq.n	800d828 <HAL_UART_IRQHandler+0x190>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d818:	2008      	movs	r0, #8
 800d81a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d81c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800d820:	f040 0008 	orr.w	r0, r0, #8
 800d824:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d828:	0516      	lsls	r6, r2, #20
 800d82a:	d50a      	bpl.n	800d842 <HAL_UART_IRQHandler+0x1aa>
 800d82c:	0168      	lsls	r0, r5, #5
 800d82e:	d508      	bpl.n	800d842 <HAL_UART_IRQHandler+0x1aa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d830:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d834:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d836:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800d83a:	f040 0020 	orr.w	r0, r0, #32
 800d83e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d842:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800d846:	2800      	cmp	r0, #0
 800d848:	f43f af60 	beq.w	800d70c <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d84c:	0696      	lsls	r6, r2, #26
 800d84e:	d50b      	bpl.n	800d868 <HAL_UART_IRQHandler+0x1d0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d850:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d854:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800d858:	ea55 0201 	orrs.w	r2, r5, r1
 800d85c:	d004      	beq.n	800d868 <HAL_UART_IRQHandler+0x1d0>
        if (huart->RxISR != NULL)
 800d85e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800d860:	b112      	cbz	r2, 800d868 <HAL_UART_IRQHandler+0x1d0>
          huart->RxISR(huart);
 800d862:	4620      	mov	r0, r4
 800d864:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d866:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800d868:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d86c:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d86e:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d872:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d876:	4315      	orrs	r5, r2
 800d878:	f000 80c5 	beq.w	800da06 <HAL_UART_IRQHandler+0x36e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d880:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d884:	e843 2100 	strex	r1, r2, [r3]
 800d888:	2900      	cmp	r1, #0
 800d88a:	d1f7      	bne.n	800d87c <HAL_UART_IRQHandler+0x1e4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d88c:	483c      	ldr	r0, [pc, #240]	; (800d980 <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88e:	f103 0208 	add.w	r2, r3, #8
 800d892:	e852 2f00 	ldrex	r2, [r2]
 800d896:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d898:	f103 0508 	add.w	r5, r3, #8
 800d89c:	e845 2100 	strex	r1, r2, [r5]
 800d8a0:	2900      	cmp	r1, #0
 800d8a2:	d1f4      	bne.n	800d88e <HAL_UART_IRQHandler+0x1f6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8a4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800d8a6:	2a01      	cmp	r2, #1
 800d8a8:	d054      	beq.n	800d954 <HAL_UART_IRQHandler+0x2bc>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8aa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d8ac:	2120      	movs	r1, #32
 800d8ae:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8b2:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8b4:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800d8b6:	6762      	str	r2, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8b8:	064d      	lsls	r5, r1, #25
 800d8ba:	d565      	bpl.n	800d988 <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8bc:	f103 0208 	add.w	r2, r3, #8
 800d8c0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c8:	f103 0008 	add.w	r0, r3, #8
 800d8cc:	e840 2100 	strex	r1, r2, [r0]
 800d8d0:	2900      	cmp	r1, #0
 800d8d2:	d1f3      	bne.n	800d8bc <HAL_UART_IRQHandler+0x224>
          if (huart->hdmarx != NULL)
 800d8d4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	d055      	beq.n	800d988 <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d8dc:	4b29      	ldr	r3, [pc, #164]	; (800d984 <HAL_UART_IRQHandler+0x2ec>)
 800d8de:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d8e0:	f7fc f8b2 	bl	8009a48 <HAL_DMA_Abort_IT>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	f43f af11 	beq.w	800d70c <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d8ea:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800d8ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d8f0:	e00e      	b.n	800d910 <HAL_UART_IRQHandler+0x278>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8f2:	0696      	lsls	r6, r2, #26
 800d8f4:	f57f aee5 	bpl.w	800d6c2 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d8f8:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8fc:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800d900:	ea56 060c 	orrs.w	r6, r6, ip
 800d904:	f43f aedd 	beq.w	800d6c2 <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800d908:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f43f aefe 	beq.w	800d70c <HAL_UART_IRQHandler+0x74>
}
 800d910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d914:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d916:	0756      	lsls	r6, r2, #29
 800d918:	f57f af78 	bpl.w	800d80c <HAL_UART_IRQHandler+0x174>
 800d91c:	07ce      	lsls	r6, r1, #31
 800d91e:	f57f af75 	bpl.w	800d80c <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d922:	2604      	movs	r6, #4
 800d924:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d926:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800d92a:	f046 0602 	orr.w	r6, r6, #2
 800d92e:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800d932:	e76b      	b.n	800d80c <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
 800d934:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d936:	2b00      	cmp	r3, #0
 800d938:	f43f aee8 	beq.w	800d70c <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800d93c:	4620      	mov	r0, r4
}
 800d93e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800d942:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d944:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800d948:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d94a:	621a      	str	r2, [r3, #32]
}
 800d94c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800d950:	f000 bcb8 	b.w	800e2c4 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d954:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d958:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d95c:	e843 2100 	strex	r1, r2, [r3]
 800d960:	2900      	cmp	r1, #0
 800d962:	d0a2      	beq.n	800d8aa <HAL_UART_IRQHandler+0x212>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d964:	e853 2f00 	ldrex	r2, [r3]
 800d968:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96c:	e843 2100 	strex	r1, r2, [r3]
 800d970:	2900      	cmp	r1, #0
 800d972:	d1ef      	bne.n	800d954 <HAL_UART_IRQHandler+0x2bc>
 800d974:	e799      	b.n	800d8aa <HAL_UART_IRQHandler+0x212>
 800d976:	bf00      	nop
 800d978:	04000120 	.word	0x04000120
 800d97c:	10000001 	.word	0x10000001
 800d980:	effffffe 	.word	0xeffffffe
 800d984:	0800d681 	.word	0x0800d681
            HAL_UART_ErrorCallback(huart);
 800d988:	4620      	mov	r0, r4
 800d98a:	f7ff fe77 	bl	800d67c <HAL_UART_ErrorCallback>
}
 800d98e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d990:	4620      	mov	r0, r4
}
 800d992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d996:	f000 bc99 	b.w	800e2cc <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d99a:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800d99e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800d9a2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d9a6:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800d9a8:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d9aa:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800d9ac:	2a00      	cmp	r2, #0
 800d9ae:	f43f aead 	beq.w	800d70c <HAL_UART_IRQHandler+0x74>
 800d9b2:	2900      	cmp	r1, #0
 800d9b4:	f43f aeaa 	beq.w	800d70c <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c0:	e843 2000 	strex	r0, r2, [r3]
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d1f7      	bne.n	800d9b8 <HAL_UART_IRQHandler+0x320>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9c8:	4d12      	ldr	r5, [pc, #72]	; (800da14 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ca:	f103 0208 	add.w	r2, r3, #8
 800d9ce:	e852 2f00 	ldrex	r2, [r2]
 800d9d2:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d4:	f103 0608 	add.w	r6, r3, #8
 800d9d8:	e846 2000 	strex	r0, r2, [r6]
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d1f4      	bne.n	800d9ca <HAL_UART_IRQHandler+0x332>
        huart->RxState = HAL_UART_STATE_READY;
 800d9e0:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800d9e2:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d9e4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9e8:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ea:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9ee:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f2:	e843 2000 	strex	r0, r2, [r3]
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d1f7      	bne.n	800d9ea <HAL_UART_IRQHandler+0x352>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9fa:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d9fc:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9fe:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da00:	f7ff fe48 	bl	800d694 <HAL_UARTEx_RxEventCallback>
}
 800da04:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800da06:	4620      	mov	r0, r4
 800da08:	f7ff fe38 	bl	800d67c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da0c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 800da10:	bd70      	pop	{r4, r5, r6, pc}
 800da12:	bf00      	nop
 800da14:	effffffe 	.word	0xeffffffe

0800da18 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da18:	6901      	ldr	r1, [r0, #16]
 800da1a:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800da1c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da1e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da20:	49c0      	ldr	r1, [pc, #768]	; (800dd24 <UART_SetConfig+0x30c>)
{
 800da22:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da24:	6945      	ldr	r5, [r0, #20]
{
 800da26:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da28:	69c0      	ldr	r0, [r0, #28]
{
 800da2a:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da2c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da2e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da30:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da32:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da34:	4dbc      	ldr	r5, [pc, #752]	; (800dd28 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da36:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da38:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da3a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da3c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da3e:	685a      	ldr	r2, [r3, #4]
 800da40:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800da44:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da48:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da4a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da4c:	f000 80e0 	beq.w	800dc10 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800da50:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da52:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800da54:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da56:	4ab5      	ldr	r2, [pc, #724]	; (800dd2c <UART_SetConfig+0x314>)
 800da58:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da5c:	4311      	orrs	r1, r2
 800da5e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da62:	f022 020f 	bic.w	r2, r2, #15
 800da66:	432a      	orrs	r2, r5
 800da68:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da6a:	4ab1      	ldr	r2, [pc, #708]	; (800dd30 <UART_SetConfig+0x318>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d023      	beq.n	800dab8 <UART_SetConfig+0xa0>
 800da70:	4ab0      	ldr	r2, [pc, #704]	; (800dd34 <UART_SetConfig+0x31c>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d076      	beq.n	800db64 <UART_SetConfig+0x14c>
 800da76:	4ab0      	ldr	r2, [pc, #704]	; (800dd38 <UART_SetConfig+0x320>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	f000 818f 	beq.w	800dd9c <UART_SetConfig+0x384>
 800da7e:	4aaf      	ldr	r2, [pc, #700]	; (800dd3c <UART_SetConfig+0x324>)
 800da80:	4293      	cmp	r3, r2
 800da82:	f000 81e1 	beq.w	800de48 <UART_SetConfig+0x430>
 800da86:	4aae      	ldr	r2, [pc, #696]	; (800dd40 <UART_SetConfig+0x328>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	f000 8121 	beq.w	800dcd0 <UART_SetConfig+0x2b8>
 800da8e:	4aad      	ldr	r2, [pc, #692]	; (800dd44 <UART_SetConfig+0x32c>)
 800da90:	4293      	cmp	r3, r2
 800da92:	f000 81e3 	beq.w	800de5c <UART_SetConfig+0x444>
 800da96:	4aac      	ldr	r2, [pc, #688]	; (800dd48 <UART_SetConfig+0x330>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	f000 8234 	beq.w	800df06 <UART_SetConfig+0x4ee>
 800da9e:	4aab      	ldr	r2, [pc, #684]	; (800dd4c <UART_SetConfig+0x334>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	f000 81e7 	beq.w	800de74 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800daa6:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800daa8:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800daaa:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800daae:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800dab0:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800dab2:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800dab4:	b007      	add	sp, #28
 800dab6:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dab8:	4ba5      	ldr	r3, [pc, #660]	; (800dd50 <UART_SetConfig+0x338>)
 800daba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dabc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dac0:	2b28      	cmp	r3, #40	; 0x28
 800dac2:	d8f0      	bhi.n	800daa6 <UART_SetConfig+0x8e>
 800dac4:	4aa3      	ldr	r2, [pc, #652]	; (800dd54 <UART_SetConfig+0x33c>)
 800dac6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dac8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800dacc:	d055      	beq.n	800db7a <UART_SetConfig+0x162>
    switch (clocksource)
 800dace:	2b20      	cmp	r3, #32
 800dad0:	f200 814a 	bhi.w	800dd68 <UART_SetConfig+0x350>
 800dad4:	2b20      	cmp	r3, #32
 800dad6:	d8e6      	bhi.n	800daa6 <UART_SetConfig+0x8e>
 800dad8:	a201      	add	r2, pc, #4	; (adr r2, 800dae0 <UART_SetConfig+0xc8>)
 800dada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dade:	bf00      	nop
 800dae0:	0800dd1f 	.word	0x0800dd1f
 800dae4:	0800dd19 	.word	0x0800dd19
 800dae8:	0800daa7 	.word	0x0800daa7
 800daec:	0800daa7 	.word	0x0800daa7
 800daf0:	0800dd09 	.word	0x0800dd09
 800daf4:	0800daa7 	.word	0x0800daa7
 800daf8:	0800daa7 	.word	0x0800daa7
 800dafc:	0800daa7 	.word	0x0800daa7
 800db00:	0800dcfb 	.word	0x0800dcfb
 800db04:	0800daa7 	.word	0x0800daa7
 800db08:	0800daa7 	.word	0x0800daa7
 800db0c:	0800daa7 	.word	0x0800daa7
 800db10:	0800daa7 	.word	0x0800daa7
 800db14:	0800daa7 	.word	0x0800daa7
 800db18:	0800daa7 	.word	0x0800daa7
 800db1c:	0800daa7 	.word	0x0800daa7
 800db20:	0800dce5 	.word	0x0800dce5
 800db24:	0800daa7 	.word	0x0800daa7
 800db28:	0800daa7 	.word	0x0800daa7
 800db2c:	0800daa7 	.word	0x0800daa7
 800db30:	0800daa7 	.word	0x0800daa7
 800db34:	0800daa7 	.word	0x0800daa7
 800db38:	0800daa7 	.word	0x0800daa7
 800db3c:	0800daa7 	.word	0x0800daa7
 800db40:	0800daa7 	.word	0x0800daa7
 800db44:	0800daa7 	.word	0x0800daa7
 800db48:	0800daa7 	.word	0x0800daa7
 800db4c:	0800daa7 	.word	0x0800daa7
 800db50:	0800daa7 	.word	0x0800daa7
 800db54:	0800daa7 	.word	0x0800daa7
 800db58:	0800daa7 	.word	0x0800daa7
 800db5c:	0800daa7 	.word	0x0800daa7
 800db60:	0800de89 	.word	0x0800de89
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db64:	4b7a      	ldr	r3, [pc, #488]	; (800dd50 <UART_SetConfig+0x338>)
 800db66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db68:	f003 0307 	and.w	r3, r3, #7
 800db6c:	2b05      	cmp	r3, #5
 800db6e:	d89a      	bhi.n	800daa6 <UART_SetConfig+0x8e>
 800db70:	4a79      	ldr	r2, [pc, #484]	; (800dd58 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db72:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800db76:	5cd3      	ldrb	r3, [r2, r3]
 800db78:	d1a9      	bne.n	800dace <UART_SetConfig+0xb6>
    switch (clocksource)
 800db7a:	2b20      	cmp	r3, #32
 800db7c:	f200 8145 	bhi.w	800de0a <UART_SetConfig+0x3f2>
 800db80:	2b20      	cmp	r3, #32
 800db82:	d890      	bhi.n	800daa6 <UART_SetConfig+0x8e>
 800db84:	a201      	add	r2, pc, #4	; (adr r2, 800db8c <UART_SetConfig+0x174>)
 800db86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8a:	bf00      	nop
 800db8c:	0800def3 	.word	0x0800def3
 800db90:	0800deed 	.word	0x0800deed
 800db94:	0800daa7 	.word	0x0800daa7
 800db98:	0800daa7 	.word	0x0800daa7
 800db9c:	0800def9 	.word	0x0800def9
 800dba0:	0800daa7 	.word	0x0800daa7
 800dba4:	0800daa7 	.word	0x0800daa7
 800dba8:	0800daa7 	.word	0x0800daa7
 800dbac:	0800dedb 	.word	0x0800dedb
 800dbb0:	0800daa7 	.word	0x0800daa7
 800dbb4:	0800daa7 	.word	0x0800daa7
 800dbb8:	0800daa7 	.word	0x0800daa7
 800dbbc:	0800daa7 	.word	0x0800daa7
 800dbc0:	0800daa7 	.word	0x0800daa7
 800dbc4:	0800daa7 	.word	0x0800daa7
 800dbc8:	0800daa7 	.word	0x0800daa7
 800dbcc:	0800dec7 	.word	0x0800dec7
 800dbd0:	0800daa7 	.word	0x0800daa7
 800dbd4:	0800daa7 	.word	0x0800daa7
 800dbd8:	0800daa7 	.word	0x0800daa7
 800dbdc:	0800daa7 	.word	0x0800daa7
 800dbe0:	0800daa7 	.word	0x0800daa7
 800dbe4:	0800daa7 	.word	0x0800daa7
 800dbe8:	0800daa7 	.word	0x0800daa7
 800dbec:	0800daa7 	.word	0x0800daa7
 800dbf0:	0800daa7 	.word	0x0800daa7
 800dbf4:	0800daa7 	.word	0x0800daa7
 800dbf8:	0800daa7 	.word	0x0800daa7
 800dbfc:	0800daa7 	.word	0x0800daa7
 800dc00:	0800daa7 	.word	0x0800daa7
 800dc04:	0800daa7 	.word	0x0800daa7
 800dc08:	0800daa7 	.word	0x0800daa7
 800dc0c:	0800df03 	.word	0x0800df03
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dc10:	6898      	ldr	r0, [r3, #8]
 800dc12:	4a46      	ldr	r2, [pc, #280]	; (800dd2c <UART_SetConfig+0x314>)
 800dc14:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc16:	484e      	ldr	r0, [pc, #312]	; (800dd50 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dc18:	430a      	orrs	r2, r1
 800dc1a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dc20:	f022 020f 	bic.w	r2, r2, #15
 800dc24:	430a      	orrs	r2, r1
 800dc26:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc28:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800dc2a:	f003 0307 	and.w	r3, r3, #7
 800dc2e:	2b05      	cmp	r3, #5
 800dc30:	f63f af39 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800dc34:	4a49      	ldr	r2, [pc, #292]	; (800dd5c <UART_SetConfig+0x344>)
 800dc36:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800dc38:	2b20      	cmp	r3, #32
 800dc3a:	f200 80b9 	bhi.w	800ddb0 <UART_SetConfig+0x398>
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	f67f af31 	bls.w	800daa6 <UART_SetConfig+0x8e>
 800dc44:	3b02      	subs	r3, #2
 800dc46:	2b1e      	cmp	r3, #30
 800dc48:	f63f af2d 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800dc4c:	a201      	add	r2, pc, #4	; (adr r2, 800dc54 <UART_SetConfig+0x23c>)
 800dc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc52:	bf00      	nop
 800dc54:	0800debd 	.word	0x0800debd
 800dc58:	0800daa7 	.word	0x0800daa7
 800dc5c:	0800deb3 	.word	0x0800deb3
 800dc60:	0800daa7 	.word	0x0800daa7
 800dc64:	0800daa7 	.word	0x0800daa7
 800dc68:	0800daa7 	.word	0x0800daa7
 800dc6c:	0800dea1 	.word	0x0800dea1
 800dc70:	0800daa7 	.word	0x0800daa7
 800dc74:	0800daa7 	.word	0x0800daa7
 800dc78:	0800daa7 	.word	0x0800daa7
 800dc7c:	0800daa7 	.word	0x0800daa7
 800dc80:	0800daa7 	.word	0x0800daa7
 800dc84:	0800daa7 	.word	0x0800daa7
 800dc88:	0800daa7 	.word	0x0800daa7
 800dc8c:	0800de8d 	.word	0x0800de8d
 800dc90:	0800daa7 	.word	0x0800daa7
 800dc94:	0800daa7 	.word	0x0800daa7
 800dc98:	0800daa7 	.word	0x0800daa7
 800dc9c:	0800daa7 	.word	0x0800daa7
 800dca0:	0800daa7 	.word	0x0800daa7
 800dca4:	0800daa7 	.word	0x0800daa7
 800dca8:	0800daa7 	.word	0x0800daa7
 800dcac:	0800daa7 	.word	0x0800daa7
 800dcb0:	0800daa7 	.word	0x0800daa7
 800dcb4:	0800daa7 	.word	0x0800daa7
 800dcb8:	0800daa7 	.word	0x0800daa7
 800dcbc:	0800daa7 	.word	0x0800daa7
 800dcc0:	0800daa7 	.word	0x0800daa7
 800dcc4:	0800daa7 	.word	0x0800daa7
 800dcc8:	0800daa7 	.word	0x0800daa7
 800dccc:	0800dec3 	.word	0x0800dec3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dcd0:	4b1f      	ldr	r3, [pc, #124]	; (800dd50 <UART_SetConfig+0x338>)
 800dcd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd4:	f003 0307 	and.w	r3, r3, #7
 800dcd8:	2b05      	cmp	r3, #5
 800dcda:	f63f aee4 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800dcde:	4a20      	ldr	r2, [pc, #128]	; (800dd60 <UART_SetConfig+0x348>)
 800dce0:	5cd3      	ldrb	r3, [r2, r3]
 800dce2:	e6f1      	b.n	800dac8 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dce4:	4b1a      	ldr	r3, [pc, #104]	; (800dd50 <UART_SetConfig+0x338>)
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	0692      	lsls	r2, r2, #26
 800dcea:	f140 80c1 	bpl.w	800de70 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	481c      	ldr	r0, [pc, #112]	; (800dd64 <UART_SetConfig+0x34c>)
 800dcf2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800dcf6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800dcf8:	e03b      	b.n	800dd72 <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcfa:	a803      	add	r0, sp, #12
 800dcfc:	f7fe fb6c 	bl	800c3d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd00:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800dd02:	b938      	cbnz	r0, 800dd14 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 800dd04:	2000      	movs	r0, #0
 800dd06:	e6cf      	b.n	800daa8 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd08:	4668      	mov	r0, sp
 800dd0a:	f7fe fab9 	bl	800c280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd0e:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800dd10:	2800      	cmp	r0, #0
 800dd12:	d0f7      	beq.n	800dd04 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd14:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dd16:	e02c      	b.n	800dd72 <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd18:	f7fd fb68 	bl	800b3ec <HAL_RCC_GetPCLK2Freq>
        break;
 800dd1c:	e7f1      	b.n	800dd02 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd1e:	f7fd fb1d 	bl	800b35c <HAL_RCC_GetPCLK1Freq>
        break;
 800dd22:	e7ee      	b.n	800dd02 <UART_SetConfig+0x2ea>
 800dd24:	cfff69f3 	.word	0xcfff69f3
 800dd28:	58000c00 	.word	0x58000c00
 800dd2c:	11fff4ff 	.word	0x11fff4ff
 800dd30:	40011000 	.word	0x40011000
 800dd34:	40004400 	.word	0x40004400
 800dd38:	40004800 	.word	0x40004800
 800dd3c:	40004c00 	.word	0x40004c00
 800dd40:	40005000 	.word	0x40005000
 800dd44:	40011400 	.word	0x40011400
 800dd48:	40007800 	.word	0x40007800
 800dd4c:	40007c00 	.word	0x40007c00
 800dd50:	58024400 	.word	0x58024400
 800dd54:	080194cc 	.word	0x080194cc
 800dd58:	080194f8 	.word	0x080194f8
 800dd5c:	08019500 	.word	0x08019500
 800dd60:	080194f8 	.word	0x080194f8
 800dd64:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800dd68:	2b40      	cmp	r3, #64	; 0x40
 800dd6a:	f47f ae9c 	bne.w	800daa6 <UART_SetConfig+0x8e>
 800dd6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd72:	4b6c      	ldr	r3, [pc, #432]	; (800df24 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd74:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd78:	6862      	ldr	r2, [r4, #4]
 800dd7a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800dd7e:	fbb0 f3f3 	udiv	r3, r0, r3
 800dd82:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800dd86:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd8a:	f1a3 0210 	sub.w	r2, r3, #16
 800dd8e:	428a      	cmp	r2, r1
 800dd90:	f63f ae89 	bhi.w	800daa6 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dd94:	6822      	ldr	r2, [r4, #0]
 800dd96:	2000      	movs	r0, #0
 800dd98:	60d3      	str	r3, [r2, #12]
 800dd9a:	e685      	b.n	800daa8 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd9c:	4b62      	ldr	r3, [pc, #392]	; (800df28 <UART_SetConfig+0x510>)
 800dd9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dda0:	f003 0307 	and.w	r3, r3, #7
 800dda4:	2b05      	cmp	r3, #5
 800dda6:	f63f ae7e 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800ddaa:	4a60      	ldr	r2, [pc, #384]	; (800df2c <UART_SetConfig+0x514>)
 800ddac:	5cd3      	ldrb	r3, [r2, r3]
 800ddae:	e68b      	b.n	800dac8 <UART_SetConfig+0xb0>
    switch (clocksource)
 800ddb0:	2b40      	cmp	r3, #64	; 0x40
 800ddb2:	f47f ae78 	bne.w	800daa6 <UART_SetConfig+0x8e>
 800ddb6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ddba:	4b5a      	ldr	r3, [pc, #360]	; (800df24 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddbc:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ddbe:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddc2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ddc6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddca:	4299      	cmp	r1, r3
 800ddcc:	f63f ae6b 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800ddd0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800ddd4:	f63f ae67 	bhi.w	800daa6 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddd8:	2300      	movs	r3, #0
 800ddda:	4619      	mov	r1, r3
 800dddc:	f7f2 fb38 	bl	8000450 <__aeabi_uldivmod>
 800dde0:	462a      	mov	r2, r5
 800dde2:	0209      	lsls	r1, r1, #8
 800dde4:	0203      	lsls	r3, r0, #8
 800dde6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800ddea:	0868      	lsrs	r0, r5, #1
 800ddec:	1818      	adds	r0, r3, r0
 800ddee:	f04f 0300 	mov.w	r3, #0
 800ddf2:	f141 0100 	adc.w	r1, r1, #0
 800ddf6:	f7f2 fb2b 	bl	8000450 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ddfa:	4a4d      	ldr	r2, [pc, #308]	; (800df30 <UART_SetConfig+0x518>)
 800ddfc:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de00:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de02:	4291      	cmp	r1, r2
 800de04:	f63f ae4f 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800de08:	e7c4      	b.n	800dd94 <UART_SetConfig+0x37c>
    switch (clocksource)
 800de0a:	2b40      	cmp	r3, #64	; 0x40
 800de0c:	f47f ae4b 	bne.w	800daa6 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de10:	4b44      	ldr	r3, [pc, #272]	; (800df24 <UART_SetConfig+0x50c>)
 800de12:	6862      	ldr	r2, [r4, #4]
 800de14:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800de18:	0853      	lsrs	r3, r2, #1
 800de1a:	fbb0 f0f1 	udiv	r0, r0, r1
 800de1e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de22:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de26:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de2a:	f1a0 0210 	sub.w	r2, r0, #16
 800de2e:	429a      	cmp	r2, r3
 800de30:	f63f ae39 	bhi.w	800daa6 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de34:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de38:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800de3c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de3e:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800de40:	4303      	orrs	r3, r0
 800de42:	2000      	movs	r0, #0
 800de44:	60d3      	str	r3, [r2, #12]
 800de46:	e62f      	b.n	800daa8 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de48:	4b37      	ldr	r3, [pc, #220]	; (800df28 <UART_SetConfig+0x510>)
 800de4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de4c:	f003 0307 	and.w	r3, r3, #7
 800de50:	2b05      	cmp	r3, #5
 800de52:	f63f ae28 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800de56:	4a37      	ldr	r2, [pc, #220]	; (800df34 <UART_SetConfig+0x51c>)
 800de58:	5cd3      	ldrb	r3, [r2, r3]
 800de5a:	e635      	b.n	800dac8 <UART_SetConfig+0xb0>
 800de5c:	4b32      	ldr	r3, [pc, #200]	; (800df28 <UART_SetConfig+0x510>)
 800de5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de64:	2b28      	cmp	r3, #40	; 0x28
 800de66:	f63f ae1e 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800de6a:	4a33      	ldr	r2, [pc, #204]	; (800df38 <UART_SetConfig+0x520>)
 800de6c:	5cd3      	ldrb	r3, [r2, r3]
 800de6e:	e62b      	b.n	800dac8 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800de70:	4832      	ldr	r0, [pc, #200]	; (800df3c <UART_SetConfig+0x524>)
 800de72:	e77e      	b.n	800dd72 <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de74:	4b2c      	ldr	r3, [pc, #176]	; (800df28 <UART_SetConfig+0x510>)
 800de76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de78:	f003 0307 	and.w	r3, r3, #7
 800de7c:	2b05      	cmp	r3, #5
 800de7e:	f63f ae12 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800de82:	4a2f      	ldr	r2, [pc, #188]	; (800df40 <UART_SetConfig+0x528>)
 800de84:	5cd3      	ldrb	r3, [r2, r3]
 800de86:	e61f      	b.n	800dac8 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800de88:	482e      	ldr	r0, [pc, #184]	; (800df44 <UART_SetConfig+0x52c>)
 800de8a:	e772      	b.n	800dd72 <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de8c:	4b26      	ldr	r3, [pc, #152]	; (800df28 <UART_SetConfig+0x510>)
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	0690      	lsls	r0, r2, #26
 800de92:	d542      	bpl.n	800df1a <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4829      	ldr	r0, [pc, #164]	; (800df3c <UART_SetConfig+0x524>)
 800de98:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800de9c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800de9e:	e78c      	b.n	800ddba <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dea0:	a803      	add	r0, sp, #12
 800dea2:	f7fe fa99 	bl	800c3d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dea6:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800dea8:	2800      	cmp	r0, #0
 800deaa:	f43f af2b 	beq.w	800dd04 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800deae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800deb0:	e783      	b.n	800ddba <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deb2:	4668      	mov	r0, sp
 800deb4:	f7fe f9e4 	bl	800c280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800deb8:	9801      	ldr	r0, [sp, #4]
        break;
 800deba:	e7f5      	b.n	800dea8 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800debc:	f7fe f9ce 	bl	800c25c <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800dec0:	e7f2      	b.n	800dea8 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800dec2:	4820      	ldr	r0, [pc, #128]	; (800df44 <UART_SetConfig+0x52c>)
 800dec4:	e779      	b.n	800ddba <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dec6:	4b18      	ldr	r3, [pc, #96]	; (800df28 <UART_SetConfig+0x510>)
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	0691      	lsls	r1, r2, #26
 800decc:	d527      	bpl.n	800df1e <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	481a      	ldr	r0, [pc, #104]	; (800df3c <UART_SetConfig+0x524>)
 800ded2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ded6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800ded8:	e79a      	b.n	800de10 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800deda:	a803      	add	r0, sp, #12
 800dedc:	f7fe fa7c 	bl	800c3d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dee0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800dee2:	2800      	cmp	r0, #0
 800dee4:	f43f af0e 	beq.w	800dd04 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dee8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800deea:	e791      	b.n	800de10 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800deec:	f7fd fa7e 	bl	800b3ec <HAL_RCC_GetPCLK2Freq>
        break;
 800def0:	e7f7      	b.n	800dee2 <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800def2:	f7fd fa33 	bl	800b35c <HAL_RCC_GetPCLK1Freq>
        break;
 800def6:	e7f4      	b.n	800dee2 <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800def8:	4668      	mov	r0, sp
 800defa:	f7fe f9c1 	bl	800c280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800defe:	9801      	ldr	r0, [sp, #4]
        break;
 800df00:	e7ef      	b.n	800dee2 <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800df02:	4810      	ldr	r0, [pc, #64]	; (800df44 <UART_SetConfig+0x52c>)
 800df04:	e784      	b.n	800de10 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df06:	4b08      	ldr	r3, [pc, #32]	; (800df28 <UART_SetConfig+0x510>)
 800df08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df0a:	f003 0307 	and.w	r3, r3, #7
 800df0e:	2b05      	cmp	r3, #5
 800df10:	f63f adc9 	bhi.w	800daa6 <UART_SetConfig+0x8e>
 800df14:	4a0c      	ldr	r2, [pc, #48]	; (800df48 <UART_SetConfig+0x530>)
 800df16:	5cd3      	ldrb	r3, [r2, r3]
 800df18:	e5d6      	b.n	800dac8 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800df1a:	4808      	ldr	r0, [pc, #32]	; (800df3c <UART_SetConfig+0x524>)
 800df1c:	e74d      	b.n	800ddba <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800df1e:	4807      	ldr	r0, [pc, #28]	; (800df3c <UART_SetConfig+0x524>)
 800df20:	e776      	b.n	800de10 <UART_SetConfig+0x3f8>
 800df22:	bf00      	nop
 800df24:	08019508 	.word	0x08019508
 800df28:	58024400 	.word	0x58024400
 800df2c:	080194f8 	.word	0x080194f8
 800df30:	000ffcff 	.word	0x000ffcff
 800df34:	080194f8 	.word	0x080194f8
 800df38:	080194cc 	.word	0x080194cc
 800df3c:	03d09000 	.word	0x03d09000
 800df40:	080194f8 	.word	0x080194f8
 800df44:	003d0900 	.word	0x003d0900
 800df48:	080194f8 	.word	0x080194f8

0800df4c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800df4e:	07da      	lsls	r2, r3, #31
{
 800df50:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df52:	d506      	bpl.n	800df62 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df54:	6801      	ldr	r1, [r0, #0]
 800df56:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800df58:	684a      	ldr	r2, [r1, #4]
 800df5a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800df5e:	4322      	orrs	r2, r4
 800df60:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df62:	079c      	lsls	r4, r3, #30
 800df64:	d506      	bpl.n	800df74 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df66:	6801      	ldr	r1, [r0, #0]
 800df68:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800df6a:	684a      	ldr	r2, [r1, #4]
 800df6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800df70:	4322      	orrs	r2, r4
 800df72:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df74:	0759      	lsls	r1, r3, #29
 800df76:	d506      	bpl.n	800df86 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df78:	6801      	ldr	r1, [r0, #0]
 800df7a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800df7c:	684a      	ldr	r2, [r1, #4]
 800df7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800df82:	4322      	orrs	r2, r4
 800df84:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df86:	071a      	lsls	r2, r3, #28
 800df88:	d506      	bpl.n	800df98 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df8a:	6801      	ldr	r1, [r0, #0]
 800df8c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800df8e:	684a      	ldr	r2, [r1, #4]
 800df90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800df94:	4322      	orrs	r2, r4
 800df96:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df98:	06dc      	lsls	r4, r3, #27
 800df9a:	d506      	bpl.n	800dfaa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df9c:	6801      	ldr	r1, [r0, #0]
 800df9e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800dfa0:	688a      	ldr	r2, [r1, #8]
 800dfa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dfa6:	4322      	orrs	r2, r4
 800dfa8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dfaa:	0699      	lsls	r1, r3, #26
 800dfac:	d506      	bpl.n	800dfbc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dfae:	6801      	ldr	r1, [r0, #0]
 800dfb0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800dfb2:	688a      	ldr	r2, [r1, #8]
 800dfb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dfb8:	4322      	orrs	r2, r4
 800dfba:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dfbc:	065a      	lsls	r2, r3, #25
 800dfbe:	d50a      	bpl.n	800dfd6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfc0:	6801      	ldr	r1, [r0, #0]
 800dfc2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800dfc4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfc6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800dfce:	ea42 0204 	orr.w	r2, r2, r4
 800dfd2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfd4:	d00b      	beq.n	800dfee <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfd6:	061b      	lsls	r3, r3, #24
 800dfd8:	d506      	bpl.n	800dfe8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfda:	6802      	ldr	r2, [r0, #0]
 800dfdc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800dfde:	6853      	ldr	r3, [r2, #4]
 800dfe0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800dfe4:	430b      	orrs	r3, r1
 800dfe6:	6053      	str	r3, [r2, #4]
}
 800dfe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfec:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfee:	684a      	ldr	r2, [r1, #4]
 800dff0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800dff2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800dff6:	4322      	orrs	r2, r4
 800dff8:	604a      	str	r2, [r1, #4]
 800dffa:	e7ec      	b.n	800dfd6 <UART_AdvFeatureConfig+0x8a>

0800dffc <UART_CheckIdleState>:
{
 800dffc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dffe:	2300      	movs	r3, #0
{
 800e000:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e002:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800e006:	f7f9 f8bf 	bl	8007188 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e00a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800e00c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e00e:	6813      	ldr	r3, [r2, #0]
 800e010:	071b      	lsls	r3, r3, #28
 800e012:	d40e      	bmi.n	800e032 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e014:	6813      	ldr	r3, [r2, #0]
 800e016:	0759      	lsls	r1, r3, #29
 800e018:	d432      	bmi.n	800e080 <UART_CheckIdleState+0x84>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e01a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800e01c:	2220      	movs	r2, #32
  return HAL_OK;
 800e01e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800e020:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e024:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e028:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e02c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e02e:	6723      	str	r3, [r4, #112]	; 0x70
}
 800e030:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e032:	69d3      	ldr	r3, [r2, #28]
 800e034:	0298      	lsls	r0, r3, #10
 800e036:	d4ed      	bmi.n	800e014 <UART_CheckIdleState+0x18>
 800e038:	e00c      	b.n	800e054 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e03a:	6819      	ldr	r1, [r3, #0]
 800e03c:	461a      	mov	r2, r3
 800e03e:	0749      	lsls	r1, r1, #29
 800e040:	d505      	bpl.n	800e04e <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e042:	69d9      	ldr	r1, [r3, #28]
 800e044:	0708      	lsls	r0, r1, #28
 800e046:	d44f      	bmi.n	800e0e8 <UART_CheckIdleState+0xec>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e048:	69d9      	ldr	r1, [r3, #28]
 800e04a:	0509      	lsls	r1, r1, #20
 800e04c:	d47a      	bmi.n	800e144 <UART_CheckIdleState+0x148>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e04e:	69db      	ldr	r3, [r3, #28]
 800e050:	0298      	lsls	r0, r3, #10
 800e052:	d4df      	bmi.n	800e014 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e054:	f7f9 f898 	bl	8007188 <HAL_GetTick>
 800e058:	1b43      	subs	r3, r0, r5
 800e05a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	d3eb      	bcc.n	800e03a <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e062:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e06a:	e843 2100 	strex	r1, r2, [r3]
 800e06e:	2900      	cmp	r1, #0
 800e070:	d1f7      	bne.n	800e062 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 800e072:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e074:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800e076:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 800e07a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800e07e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e080:	69d3      	ldr	r3, [r2, #28]
 800e082:	025b      	lsls	r3, r3, #9
 800e084:	d4c9      	bmi.n	800e01a <UART_CheckIdleState+0x1e>
 800e086:	e00d      	b.n	800e0a4 <UART_CheckIdleState+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	0750      	lsls	r0, r2, #29
 800e08c:	d507      	bpl.n	800e09e <UART_CheckIdleState+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e08e:	69da      	ldr	r2, [r3, #28]
 800e090:	0711      	lsls	r1, r2, #28
 800e092:	f100 8085 	bmi.w	800e1a0 <UART_CheckIdleState+0x1a4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e096:	69da      	ldr	r2, [r3, #28]
 800e098:	0512      	lsls	r2, r2, #20
 800e09a:	f100 80af 	bmi.w	800e1fc <UART_CheckIdleState+0x200>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e09e:	69db      	ldr	r3, [r3, #28]
 800e0a0:	025b      	lsls	r3, r3, #9
 800e0a2:	d4ba      	bmi.n	800e01a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0a4:	f7f9 f870 	bl	8007188 <HAL_GetTick>
 800e0a8:	1b43      	subs	r3, r0, r5
 800e0aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0ae:	6823      	ldr	r3, [r4, #0]
 800e0b0:	d3ea      	bcc.n	800e088 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ba:	e843 2100 	strex	r1, r2, [r3]
 800e0be:	2900      	cmp	r1, #0
 800e0c0:	d1f7      	bne.n	800e0b2 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c2:	f103 0208 	add.w	r2, r3, #8
 800e0c6:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0ca:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ce:	f103 0008 	add.w	r0, r3, #8
 800e0d2:	e840 2100 	strex	r1, r2, [r0]
 800e0d6:	2900      	cmp	r1, #0
 800e0d8:	d1f3      	bne.n	800e0c2 <UART_CheckIdleState+0xc6>
      huart->RxState = HAL_UART_STATE_READY;
 800e0da:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e0dc:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800e0de:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 800e0e2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800e0e6:	bd38      	pop	{r3, r4, r5, pc}
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0e8:	2208      	movs	r2, #8
 800e0ea:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ec:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0f4:	e843 2100 	strex	r1, r2, [r3]
 800e0f8:	2900      	cmp	r1, #0
 800e0fa:	d1f7      	bne.n	800e0ec <UART_CheckIdleState+0xf0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0fc:	4856      	ldr	r0, [pc, #344]	; (800e258 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fe:	f103 0208 	add.w	r2, r3, #8
 800e102:	e852 2f00 	ldrex	r2, [r2]
 800e106:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e108:	f103 0508 	add.w	r5, r3, #8
 800e10c:	e845 2100 	strex	r1, r2, [r5]
 800e110:	2900      	cmp	r1, #0
 800e112:	d1f4      	bne.n	800e0fe <UART_CheckIdleState+0x102>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e114:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e116:	2a01      	cmp	r2, #1
 800e118:	d00b      	beq.n	800e132 <UART_CheckIdleState+0x136>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e11a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e11c:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e11e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e120:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e124:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e126:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e128:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e12c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e130:	e797      	b.n	800e062 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e132:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e136:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e13a:	e843 2100 	strex	r1, r2, [r3]
 800e13e:	2900      	cmp	r1, #0
 800e140:	d1f7      	bne.n	800e132 <UART_CheckIdleState+0x136>
 800e142:	e7ea      	b.n	800e11a <UART_CheckIdleState+0x11e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e148:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e14e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e152:	e843 2100 	strex	r1, r2, [r3]
 800e156:	2900      	cmp	r1, #0
 800e158:	d1f7      	bne.n	800e14a <UART_CheckIdleState+0x14e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e15a:	483f      	ldr	r0, [pc, #252]	; (800e258 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e15c:	f103 0208 	add.w	r2, r3, #8
 800e160:	e852 2f00 	ldrex	r2, [r2]
 800e164:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e166:	f103 0508 	add.w	r5, r3, #8
 800e16a:	e845 2100 	strex	r1, r2, [r5]
 800e16e:	2900      	cmp	r1, #0
 800e170:	d1f4      	bne.n	800e15c <UART_CheckIdleState+0x160>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e172:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e174:	2a01      	cmp	r2, #1
 800e176:	d00a      	beq.n	800e18e <UART_CheckIdleState+0x192>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e178:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e17a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e17c:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e17e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e182:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e186:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e188:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e18c:	e769      	b.n	800e062 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e192:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e196:	e843 2100 	strex	r1, r2, [r3]
 800e19a:	2900      	cmp	r1, #0
 800e19c:	d1f7      	bne.n	800e18e <UART_CheckIdleState+0x192>
 800e19e:	e7eb      	b.n	800e178 <UART_CheckIdleState+0x17c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1a0:	2208      	movs	r2, #8
 800e1a2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ac:	e843 2100 	strex	r1, r2, [r3]
 800e1b0:	2900      	cmp	r1, #0
 800e1b2:	d1f7      	bne.n	800e1a4 <UART_CheckIdleState+0x1a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e1b4:	4828      	ldr	r0, [pc, #160]	; (800e258 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b6:	f103 0208 	add.w	r2, r3, #8
 800e1ba:	e852 2f00 	ldrex	r2, [r2]
 800e1be:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c0:	f103 0508 	add.w	r5, r3, #8
 800e1c4:	e845 2100 	strex	r1, r2, [r5]
 800e1c8:	2900      	cmp	r1, #0
 800e1ca:	d1f4      	bne.n	800e1b6 <UART_CheckIdleState+0x1ba>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1cc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e1ce:	2a01      	cmp	r2, #1
 800e1d0:	d00b      	beq.n	800e1ea <UART_CheckIdleState+0x1ee>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1d2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e1d4:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e1d6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e1d8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e1dc:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1de:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e1e0:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e1e4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e1e8:	e763      	b.n	800e0b2 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ea:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1ee:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f2:	e843 2100 	strex	r1, r2, [r3]
 800e1f6:	2900      	cmp	r1, #0
 800e1f8:	d1f7      	bne.n	800e1ea <UART_CheckIdleState+0x1ee>
 800e1fa:	e7ea      	b.n	800e1d2 <UART_CheckIdleState+0x1d6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e200:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e202:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e206:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20a:	e843 2100 	strex	r1, r2, [r3]
 800e20e:	2900      	cmp	r1, #0
 800e210:	d1f7      	bne.n	800e202 <UART_CheckIdleState+0x206>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e212:	4811      	ldr	r0, [pc, #68]	; (800e258 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e214:	f103 0208 	add.w	r2, r3, #8
 800e218:	e852 2f00 	ldrex	r2, [r2]
 800e21c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21e:	f103 0508 	add.w	r5, r3, #8
 800e222:	e845 2100 	strex	r1, r2, [r5]
 800e226:	2900      	cmp	r1, #0
 800e228:	d1f4      	bne.n	800e214 <UART_CheckIdleState+0x218>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e22a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e22c:	2a01      	cmp	r2, #1
 800e22e:	d00a      	beq.n	800e246 <UART_CheckIdleState+0x24a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e230:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e232:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e234:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e236:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e23a:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e23e:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e240:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e244:	e735      	b.n	800e0b2 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e246:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e24a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24e:	e843 2100 	strex	r1, r2, [r3]
 800e252:	2900      	cmp	r1, #0
 800e254:	d1f7      	bne.n	800e246 <UART_CheckIdleState+0x24a>
 800e256:	e7eb      	b.n	800e230 <UART_CheckIdleState+0x234>
 800e258:	effffffe 	.word	0xeffffffe

0800e25c <HAL_UART_Init>:
  if (huart == NULL)
 800e25c:	b380      	cbz	r0, 800e2c0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e25e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800e262:	b510      	push	{r4, lr}
 800e264:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800e266:	b333      	cbz	r3, 800e2b6 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800e268:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e26a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e26c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e26e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800e272:	6813      	ldr	r3, [r2, #0]
 800e274:	f023 0301 	bic.w	r3, r3, #1
 800e278:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e27a:	f7ff fbcd 	bl	800da18 <UART_SetConfig>
 800e27e:	2801      	cmp	r0, #1
 800e280:	d017      	beq.n	800e2b2 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e284:	b98b      	cbnz	r3, 800e2aa <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e286:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800e288:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e28a:	685a      	ldr	r2, [r3, #4]
 800e28c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e290:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e292:	689a      	ldr	r2, [r3, #8]
 800e294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e298:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	f042 0201 	orr.w	r2, r2, #1
}
 800e2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800e2a4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800e2a6:	f7ff bea9 	b.w	800dffc <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f7ff fe4e 	bl	800df4c <UART_AdvFeatureConfig>
 800e2b0:	e7e9      	b.n	800e286 <HAL_UART_Init+0x2a>
}
 800e2b2:	2001      	movs	r0, #1
 800e2b4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800e2b6:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800e2ba:	f7f8 fc77 	bl	8006bac <HAL_UART_MspInit>
 800e2be:	e7d3      	b.n	800e268 <HAL_UART_Init+0xc>
}
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	4770      	bx	lr

0800e2c4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop

0800e2c8 <HAL_UARTEx_RxFifoFullCallback>:
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop

0800e2cc <HAL_UARTEx_TxFifoEmptyCallback>:
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop

0800e2d0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e2d0:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e2d4:	2a01      	cmp	r2, #1
 800e2d6:	d017      	beq.n	800e308 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2d8:	6802      	ldr	r2, [r0, #0]
 800e2da:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e2dc:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e2de:	2100      	movs	r1, #0
{
 800e2e0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800e2e2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800e2e6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2e8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e2ea:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e2ec:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800e2f0:	f024 0401 	bic.w	r4, r4, #1
 800e2f4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e2f6:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2f8:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800e2fa:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e2fc:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e300:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e304:	bc30      	pop	{r4, r5}
 800e306:	4770      	bx	lr
  __HAL_LOCK(huart);
 800e308:	2002      	movs	r0, #2
}
 800e30a:	4770      	bx	lr

0800e30c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e30c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e310:	2a01      	cmp	r2, #1
 800e312:	d037      	beq.n	800e384 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e314:	6802      	ldr	r2, [r0, #0]
 800e316:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e318:	2024      	movs	r0, #36	; 0x24
{
 800e31a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e31c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e320:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e322:	6810      	ldr	r0, [r2, #0]
 800e324:	f020 0001 	bic.w	r0, r0, #1
 800e328:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e32a:	6890      	ldr	r0, [r2, #8]
 800e32c:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800e330:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e332:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e334:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e336:	b310      	cbz	r0, 800e37e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e338:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e33a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e33c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e340:	4911      	ldr	r1, [pc, #68]	; (800e388 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e342:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e346:	4d11      	ldr	r5, [pc, #68]	; (800e38c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e348:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e34c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e350:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e354:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e356:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e35a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e35c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e360:	fbb1 f1f5 	udiv	r1, r1, r5
 800e364:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e368:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e36a:	2100      	movs	r1, #0
 800e36c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e370:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e372:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e374:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e378:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e37c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e37e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e380:	4608      	mov	r0, r1
 800e382:	e7ef      	b.n	800e364 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e384:	2002      	movs	r0, #2
}
 800e386:	4770      	bx	lr
 800e388:	08019528 	.word	0x08019528
 800e38c:	08019520 	.word	0x08019520

0800e390 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800e390:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e394:	2a01      	cmp	r2, #1
 800e396:	d037      	beq.n	800e408 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e398:	6802      	ldr	r2, [r0, #0]
 800e39a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e39c:	2024      	movs	r0, #36	; 0x24
{
 800e39e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e3a0:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3a4:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e3a6:	6810      	ldr	r0, [r2, #0]
 800e3a8:	f020 0001 	bic.w	r0, r0, #1
 800e3ac:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e3ae:	6890      	ldr	r0, [r2, #8]
 800e3b0:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800e3b4:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e3b6:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e3b8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e3ba:	b310      	cbz	r0, 800e402 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e3bc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e3be:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3c0:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3c4:	4911      	ldr	r1, [pc, #68]	; (800e40c <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e3c6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e3ca:	4d11      	ldr	r5, [pc, #68]	; (800e410 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3cc:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3d0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e3d4:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3d8:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e3da:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3de:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3e0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3e4:	fbb1 f1f5 	udiv	r1, r1, r5
 800e3e8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e3ec:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3f4:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e3f6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e3f8:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e3fc:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e400:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e402:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e404:	4608      	mov	r0, r1
 800e406:	e7ef      	b.n	800e3e8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e408:	2002      	movs	r0, #2
}
 800e40a:	4770      	bx	lr
 800e40c:	08019528 	.word	0x08019528
 800e410:	08019520 	.word	0x08019520

0800e414 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e414:	b084      	sub	sp, #16
 800e416:	4684      	mov	ip, r0
 800e418:	b500      	push	{lr}
 800e41a:	b083      	sub	sp, #12
 800e41c:	f10d 0e14 	add.w	lr, sp, #20
 800e420:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e426:	2b01      	cmp	r3, #1
 800e428:	d13e      	bne.n	800e4a8 <USB_CoreInit+0x94>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e42a:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e42c:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800e430:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e432:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800e436:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e438:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e43a:	68c2      	ldr	r2, [r0, #12]
 800e43c:	ea03 0302 	and.w	r3, r3, r2
 800e440:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e442:	68c3      	ldr	r3, [r0, #12]
 800e444:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e448:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800e44a:	d07c      	beq.n	800e546 <USB_CoreInit+0x132>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800e44c:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800e44e:	4a40      	ldr	r2, [pc, #256]	; (800e550 <USB_CoreInit+0x13c>)
  __IO uint32_t count = 0U;
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	e003      	b.n	800e45c <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e454:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	db41      	blt.n	800e4e0 <USB_CoreInit+0xcc>
    count++;
 800e45c:	9b00      	ldr	r3, [sp, #0]
 800e45e:	3301      	adds	r3, #1
 800e460:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e462:	9b00      	ldr	r3, [sp, #0]
 800e464:	4293      	cmp	r3, r2
 800e466:	d9f5      	bls.n	800e454 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800e468:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800e46a:	9b07      	ldr	r3, [sp, #28]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d116      	bne.n	800e49e <USB_CoreInit+0x8a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e470:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e474:	4b37      	ldr	r3, [pc, #220]	; (800e554 <USB_CoreInit+0x140>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e476:	b292      	uxth	r2, r2
 800e478:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e47c:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800e480:	4313      	orrs	r3, r2
 800e482:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e486:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e48a:	f043 0306 	orr.w	r3, r3, #6
 800e48e:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e492:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e496:	f043 0320 	orr.w	r3, r3, #32
 800e49a:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800e49e:	b003      	add	sp, #12
 800e4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4a4:	b004      	add	sp, #16
 800e4a6:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e4a8:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e4aa:	2100      	movs	r1, #0
    if (count > 200000U)
 800e4ac:	4a28      	ldr	r2, [pc, #160]	; (800e550 <USB_CoreInit+0x13c>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e4ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b2:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e4b4:	9101      	str	r1, [sp, #4]
 800e4b6:	e003      	b.n	800e4c0 <USB_CoreInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e4b8:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	db2c      	blt.n	800e51a <USB_CoreInit+0x106>
    count++;
 800e4c0:	9b01      	ldr	r3, [sp, #4]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e4c6:	9b01      	ldr	r3, [sp, #4]
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d9f5      	bls.n	800e4b8 <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 800e4cc:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800e4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4d0:	b9e3      	cbnz	r3, 800e50c <USB_CoreInit+0xf8>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e4d2:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e4d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4da:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e4de:	e7c4      	b.n	800e46a <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 800e4e0:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 800e4e2:	4a1b      	ldr	r2, [pc, #108]	; (800e550 <USB_CoreInit+0x13c>)
  count = 0U;
 800e4e4:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e4e6:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e4ea:	f043 0301 	orr.w	r3, r3, #1
 800e4ee:	f8cc 3010 	str.w	r3, [ip, #16]
 800e4f2:	e004      	b.n	800e4fe <USB_CoreInit+0xea>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e4f4:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e4f8:	f010 0001 	ands.w	r0, r0, #1
 800e4fc:	d0b5      	beq.n	800e46a <USB_CoreInit+0x56>
    count++;
 800e4fe:	9b00      	ldr	r3, [sp, #0]
 800e500:	3301      	adds	r3, #1
 800e502:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e504:	9b00      	ldr	r3, [sp, #0]
 800e506:	4293      	cmp	r3, r2
 800e508:	d9f4      	bls.n	800e4f4 <USB_CoreInit+0xe0>
 800e50a:	e7ad      	b.n	800e468 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e50c:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e514:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e518:	e7a7      	b.n	800e46a <USB_CoreInit+0x56>
  count = 0U;
 800e51a:	2300      	movs	r3, #0
    if (count > 200000U)
 800e51c:	4a0c      	ldr	r2, [pc, #48]	; (800e550 <USB_CoreInit+0x13c>)
  count = 0U;
 800e51e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e520:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e524:	f043 0301 	orr.w	r3, r3, #1
 800e528:	f8cc 3010 	str.w	r3, [ip, #16]
 800e52c:	e004      	b.n	800e538 <USB_CoreInit+0x124>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e52e:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e532:	f010 0001 	ands.w	r0, r0, #1
 800e536:	d0ca      	beq.n	800e4ce <USB_CoreInit+0xba>
    count++;
 800e538:	9b01      	ldr	r3, [sp, #4]
 800e53a:	3301      	adds	r3, #1
 800e53c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e53e:	9b01      	ldr	r3, [sp, #4]
 800e540:	4293      	cmp	r3, r2
 800e542:	d9f4      	bls.n	800e52e <USB_CoreInit+0x11a>
 800e544:	e7c2      	b.n	800e4cc <USB_CoreInit+0xb8>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e546:	68c3      	ldr	r3, [r0, #12]
 800e548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e54c:	60c3      	str	r3, [r0, #12]
 800e54e:	e77d      	b.n	800e44c <USB_CoreInit+0x38>
 800e550:	00030d40 	.word	0x00030d40
 800e554:	03ee0000 	.word	0x03ee0000

0800e558 <USB_DisableGlobalInt>:
{
 800e558:	4603      	mov	r3, r0
}
 800e55a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e55c:	689a      	ldr	r2, [r3, #8]
 800e55e:	f022 0201 	bic.w	r2, r2, #1
 800e562:	609a      	str	r2, [r3, #8]
}
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop

0800e568 <USB_SetCurrentMode>:
{
 800e568:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e56a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e56c:	2901      	cmp	r1, #1
{
 800e56e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e570:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e574:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e576:	d017      	beq.n	800e5a8 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800e578:	b9a1      	cbnz	r1, 800e5a4 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e57a:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800e57c:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e57e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e582:	60c3      	str	r3, [r0, #12]
 800e584:	e001      	b.n	800e58a <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e586:	2c32      	cmp	r4, #50	; 0x32
 800e588:	d00c      	beq.n	800e5a4 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800e58a:	2001      	movs	r0, #1
      ms++;
 800e58c:	4404      	add	r4, r0
      HAL_Delay(1U);
 800e58e:	f7f8 fe01 	bl	8007194 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800e592:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e594:	07db      	lsls	r3, r3, #31
 800e596:	d4f6      	bmi.n	800e586 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800e598:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800e59c:	fab0 f080 	clz	r0, r0
 800e5a0:	0940      	lsrs	r0, r0, #5
}
 800e5a2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e5a4:	2001      	movs	r0, #1
}
 800e5a6:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e5a8:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800e5aa:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e5ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e5b0:	60c3      	str	r3, [r0, #12]
 800e5b2:	e001      	b.n	800e5b8 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e5b4:	2c32      	cmp	r4, #50	; 0x32
 800e5b6:	d0f5      	beq.n	800e5a4 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800e5b8:	2001      	movs	r0, #1
      ms++;
 800e5ba:	4404      	add	r4, r0
      HAL_Delay(1U);
 800e5bc:	f7f8 fdea 	bl	8007194 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800e5c0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e5c2:	07da      	lsls	r2, r3, #31
 800e5c4:	d5f6      	bpl.n	800e5b4 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800e5c6:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800e5ca:	fab0 f080 	clz	r0, r0
 800e5ce:	0940      	lsrs	r0, r0, #5
 800e5d0:	e7e7      	b.n	800e5a2 <USB_SetCurrentMode+0x3a>
 800e5d2:	bf00      	nop

0800e5d4 <USB_DevInit>:
{
 800e5d4:	b084      	sub	sp, #16
 800e5d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	ac0b      	add	r4, sp, #44	; 0x2c
 800e5de:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e5e0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800e5ec:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800e5f0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800e5f4:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800e5f8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800e5fc:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800e600:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800e604:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800e608:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800e60c:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800e610:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800e614:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800e618:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800e61c:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800e620:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800e624:	2d00      	cmp	r5, #0
 800e626:	f040 80aa 	bne.w	800e77e <USB_DevInit+0x1aa>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e62a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800e62e:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800e632:	f043 0302 	orr.w	r3, r3, #2
 800e636:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e63a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e63c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e640:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e642:	6803      	ldr	r3, [r0, #0]
 800e644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e648:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e64a:	6803      	ldr	r3, [r0, #0]
 800e64c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e650:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800e652:	2300      	movs	r3, #0
 800e654:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e658:	f8dc 3000 	ldr.w	r3, [ip]
 800e65c:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e662:	2b01      	cmp	r3, #1
 800e664:	f000 80b5 	beq.w	800e7d2 <USB_DevInit+0x1fe>
  USBx_DEVICE->DCFG |= speed;
 800e668:	f8dc 3000 	ldr.w	r3, [ip]
 800e66c:	f043 0303 	orr.w	r3, r3, #3
 800e670:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 800e674:	2300      	movs	r3, #0
    if (count > 200000U)
 800e676:	4a5e      	ldr	r2, [pc, #376]	; (800e7f0 <USB_DevInit+0x21c>)
  __IO uint32_t count = 0U;
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	e003      	b.n	800e684 <USB_DevInit+0xb0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e67c:	6903      	ldr	r3, [r0, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f2c0 8094 	blt.w	800e7ac <USB_DevInit+0x1d8>
    count++;
 800e684:	9b00      	ldr	r3, [sp, #0]
 800e686:	3301      	adds	r3, #1
 800e688:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e68a:	9b00      	ldr	r3, [sp, #0]
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d9f5      	bls.n	800e67c <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 800e690:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 800e692:	2300      	movs	r3, #0
    if (count > 200000U)
 800e694:	4a56      	ldr	r2, [pc, #344]	; (800e7f0 <USB_DevInit+0x21c>)
  __IO uint32_t count = 0U;
 800e696:	9301      	str	r3, [sp, #4]
 800e698:	e002      	b.n	800e6a0 <USB_DevInit+0xcc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e69a:	6903      	ldr	r3, [r0, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	db75      	blt.n	800e78c <USB_DevInit+0x1b8>
    count++;
 800e6a0:	9b01      	ldr	r3, [sp, #4]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e6a6:	9b01      	ldr	r3, [sp, #4]
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d9f6      	bls.n	800e69a <USB_DevInit+0xc6>
    ret = HAL_ERROR;
 800e6ac:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e6b4:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e6b8:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6bc:	b1dc      	cbz	r4, 800e6f6 <USB_DevInit+0x122>
 800e6be:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e6c2:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e6c6:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800e6ca:	4617      	mov	r7, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e6cc:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800e6d0:	e007      	b.n	800e6e2 <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800e6d2:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6d4:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e6d6:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e6d8:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6dc:	3320      	adds	r3, #32
 800e6de:	4294      	cmp	r4, r2
 800e6e0:	d030      	beq.n	800e744 <USB_DevInit+0x170>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e6e2:	681e      	ldr	r6, [r3, #0]
 800e6e4:	2e00      	cmp	r6, #0
 800e6e6:	daf4      	bge.n	800e6d2 <USB_DevInit+0xfe>
      if (i == 0U)
 800e6e8:	b112      	cbz	r2, 800e6f0 <USB_DevInit+0x11c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e6ea:	f8c3 8000 	str.w	r8, [r3]
 800e6ee:	e7f1      	b.n	800e6d4 <USB_DevInit+0x100>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e6f0:	f8c3 9000 	str.w	r9, [r3]
 800e6f4:	e7ee      	b.n	800e6d4 <USB_DevInit+0x100>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e6f6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800e6fa:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e6fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e700:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e704:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800e708:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e70a:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == 0U)
 800e70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e70e:	b91b      	cbnz	r3, 800e718 <USB_DevInit+0x144>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e710:	6983      	ldr	r3, [r0, #24]
 800e712:	f043 0310 	orr.w	r3, r3, #16
 800e716:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e718:	6982      	ldr	r2, [r0, #24]
 800e71a:	4b36      	ldr	r3, [pc, #216]	; (800e7f4 <USB_DevInit+0x220>)
 800e71c:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800e71e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e720:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800e722:	b11a      	cbz	r2, 800e72c <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e724:	6983      	ldr	r3, [r0, #24]
 800e726:	f043 0308 	orr.w	r3, r3, #8
 800e72a:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800e72c:	2d01      	cmp	r5, #1
 800e72e:	d103      	bne.n	800e738 <USB_DevInit+0x164>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e730:	6982      	ldr	r2, [r0, #24]
 800e732:	4b31      	ldr	r3, [pc, #196]	; (800e7f8 <USB_DevInit+0x224>)
 800e734:	4313      	orrs	r3, r2
 800e736:	6183      	str	r3, [r0, #24]
}
 800e738:	4608      	mov	r0, r1
 800e73a:	b003      	add	sp, #12
 800e73c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e740:	b004      	add	sp, #16
 800e742:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e744:	2200      	movs	r2, #0
 800e746:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e74a:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e74e:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e752:	4617      	mov	r7, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e754:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800e758:	e007      	b.n	800e76a <USB_DevInit+0x196>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e75a:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e75c:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e75e:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e760:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e764:	3320      	adds	r3, #32
 800e766:	4294      	cmp	r4, r2
 800e768:	d0c5      	beq.n	800e6f6 <USB_DevInit+0x122>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e76a:	681e      	ldr	r6, [r3, #0]
 800e76c:	2e00      	cmp	r6, #0
 800e76e:	daf4      	bge.n	800e75a <USB_DevInit+0x186>
      if (i == 0U)
 800e770:	b112      	cbz	r2, 800e778 <USB_DevInit+0x1a4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e772:	f8c3 8000 	str.w	r8, [r3]
 800e776:	e7f1      	b.n	800e75c <USB_DevInit+0x188>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e778:	f8c3 9000 	str.w	r9, [r3]
 800e77c:	e7ee      	b.n	800e75c <USB_DevInit+0x188>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e77e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e780:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e788:	6383      	str	r3, [r0, #56]	; 0x38
 800e78a:	e762      	b.n	800e652 <USB_DevInit+0x7e>
  count = 0U;
 800e78c:	2300      	movs	r3, #0
    if (count > 200000U)
 800e78e:	4a18      	ldr	r2, [pc, #96]	; (800e7f0 <USB_DevInit+0x21c>)
  count = 0U;
 800e790:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e792:	2310      	movs	r3, #16
 800e794:	6103      	str	r3, [r0, #16]
 800e796:	e002      	b.n	800e79e <USB_DevInit+0x1ca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e798:	6903      	ldr	r3, [r0, #16]
 800e79a:	06db      	lsls	r3, r3, #27
 800e79c:	d587      	bpl.n	800e6ae <USB_DevInit+0xda>
    count++;
 800e79e:	9b01      	ldr	r3, [sp, #4]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e7a4:	9b01      	ldr	r3, [sp, #4]
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d9f6      	bls.n	800e798 <USB_DevInit+0x1c4>
 800e7aa:	e77f      	b.n	800e6ac <USB_DevInit+0xd8>
  count = 0U;
 800e7ac:	2300      	movs	r3, #0
    if (count > 200000U)
 800e7ae:	4a10      	ldr	r2, [pc, #64]	; (800e7f0 <USB_DevInit+0x21c>)
  count = 0U;
 800e7b0:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e7b2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800e7b6:	6103      	str	r3, [r0, #16]
 800e7b8:	e004      	b.n	800e7c4 <USB_DevInit+0x1f0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e7ba:	6901      	ldr	r1, [r0, #16]
 800e7bc:	f011 0120 	ands.w	r1, r1, #32
 800e7c0:	f43f af67 	beq.w	800e692 <USB_DevInit+0xbe>
    count++;
 800e7c4:	9b00      	ldr	r3, [sp, #0]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e7ca:	9b00      	ldr	r3, [sp, #0]
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d9f4      	bls.n	800e7ba <USB_DevInit+0x1e6>
 800e7d0:	e75e      	b.n	800e690 <USB_DevInit+0xbc>
    if (cfg.speed == USBD_HS_SPEED)
 800e7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7d4:	b923      	cbnz	r3, 800e7e0 <USB_DevInit+0x20c>
  USBx_DEVICE->DCFG |= speed;
 800e7d6:	f8dc 3000 	ldr.w	r3, [ip]
 800e7da:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800e7de:	e749      	b.n	800e674 <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 800e7e0:	f8dc 3000 	ldr.w	r3, [ip]
 800e7e4:	f043 0301 	orr.w	r3, r3, #1
 800e7e8:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800e7ec:	e742      	b.n	800e674 <USB_DevInit+0xa0>
 800e7ee:	bf00      	nop
 800e7f0:	00030d40 	.word	0x00030d40
 800e7f4:	803c3800 	.word	0x803c3800
 800e7f8:	40000004 	.word	0x40000004

0800e7fc <USB_DevDisconnect>:
{
 800e7fc:	4603      	mov	r3, r0
}
 800e7fe:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e800:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e804:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e808:	f022 0203 	bic.w	r2, r2, #3
 800e80c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e810:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800e814:	f043 0302 	orr.w	r3, r3, #2
 800e818:	604b      	str	r3, [r1, #4]
}
 800e81a:	4770      	bx	lr

0800e81c <audiod_tx_done_cb.constprop.0>:
// This function is called once a transmit of an audio packet was successfully completed. Here, we encode samples and place it in IN EP's buffer for next transmission.
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
 800e81c:	b5f0      	push	{r4, r5, r6, r7, lr}
// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
  if (audio->p_desc)
 800e81e:	4c2a      	ldr	r4, [pc, #168]	; (800e8c8 <audiod_tx_done_cb.constprop.0+0xac>)
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
 800e820:	b083      	sub	sp, #12
  if (audio->p_desc)
 800e822:	6862      	ldr	r2, [r4, #4]
 800e824:	b312      	cbz	r2, 800e86c <audiod_tx_done_cb.constprop.0+0x50>

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 800e826:	7813      	ldrb	r3, [r2, #0]
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800e828:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 800e82c:	4413      	add	r3, r2
 800e82e:	f1ac 0c08 	sub.w	ip, ip, #8
 800e832:	4494      	add	ip, r2

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800e834:	88da      	ldrh	r2, [r3, #6]
 800e836:	4413      	add	r3, r2

    uint8_t tmp = 0;
    while (p_desc < p_desc_end)
 800e838:	459c      	cmp	ip, r3
 800e83a:	d917      	bls.n	800e86c <audiod_tx_done_cb.constprop.0+0x50>
 800e83c:	4605      	mov	r5, r0
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 800e83e:	f894 e00c 	ldrb.w	lr, [r4, #12]
    uint8_t tmp = 0;
 800e842:	2600      	movs	r6, #0
 800e844:	e003      	b.n	800e84e <audiod_tx_done_cb.constprop.0+0x32>
 800e846:	781a      	ldrb	r2, [r3, #0]
 800e848:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800e84a:	459c      	cmp	ip, r3
 800e84c:	d90e      	bls.n	800e86c <audiod_tx_done_cb.constprop.0+0x50>
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800e84e:	785a      	ldrb	r2, [r3, #1]
 800e850:	2a04      	cmp	r2, #4
 800e852:	d1f8      	bne.n	800e846 <audiod_tx_done_cb.constprop.0+0x2a>
 800e854:	78d9      	ldrb	r1, [r3, #3]
          *idxItf = tmp;
          *pp_desc_int = p_desc;
          return true;
        }
        // Increase index, bytes read, and pointer
        tmp++;
 800e856:	1c72      	adds	r2, r6, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800e858:	2900      	cmp	r1, #0
 800e85a:	d1f4      	bne.n	800e846 <audiod_tx_done_cb.constprop.0+0x2a>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800e85c:	7898      	ldrb	r0, [r3, #2]
 800e85e:	4570      	cmp	r0, lr
 800e860:	d007      	beq.n	800e872 <audiod_tx_done_cb.constprop.0+0x56>
        tmp++;
 800e862:	b2d6      	uxtb	r6, r2
 800e864:	781a      	ldrb	r2, [r3, #0]
 800e866:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800e868:	459c      	cmp	ip, r3
 800e86a:	d8f0      	bhi.n	800e84e <audiod_tx_done_cb.constprop.0+0x32>
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 800e86c:	2000      	movs	r0, #0
}
 800e86e:	b003      	add	sp, #12
 800e870:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (audio->alt_setting[idxItf] == 0) return false;
 800e872:	69e3      	ldr	r3, [r4, #28]
 800e874:	5d9b      	ldrb	r3, [r3, r6]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d0f8      	beq.n	800e86c <audiod_tx_done_cb.constprop.0+0x50>
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800e87a:	4a14      	ldr	r2, [pc, #80]	; (800e8cc <audiod_tx_done_cb.constprop.0+0xb0>)
 800e87c:	b12a      	cbz	r2, 800e88a <audiod_tx_done_cb.constprop.0+0x6e>
 800e87e:	7a22      	ldrb	r2, [r4, #8]
 800e880:	4628      	mov	r0, r5
 800e882:	f7f6 f933 	bl	8004aec <tud_audio_tx_done_pre_load_cb>
 800e886:	2800      	cmp	r0, #0
 800e888:	d0f0      	beq.n	800e86c <audiod_tx_done_cb.constprop.0+0x50>
  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 800e88a:	4811      	ldr	r0, [pc, #68]	; (800e8d0 <audiod_tx_done_cb.constprop.0+0xb4>)
 800e88c:	f000 fea4 	bl	800f5d8 <tu_fifo_count>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800e890:	8963      	ldrh	r3, [r4, #10]
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 800e892:	4a0f      	ldr	r2, [pc, #60]	; (800e8d0 <audiod_tx_done_cb.constprop.0+0xb4>)
 800e894:	4298      	cmp	r0, r3
 800e896:	7a21      	ldrb	r1, [r4, #8]
 800e898:	bf28      	it	cs
 800e89a:	4618      	movcs	r0, r3
 800e89c:	b287      	uxth	r7, r0
 800e89e:	4628      	mov	r0, r5
 800e8a0:	463b      	mov	r3, r7
 800e8a2:	f002 f8c1 	bl	8010a28 <usbd_edpt_xfer_fifo>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d0e0      	beq.n	800e86c <audiod_tx_done_cb.constprop.0+0x50>
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800e8aa:	4b0a      	ldr	r3, [pc, #40]	; (800e8d4 <audiod_tx_done_cb.constprop.0+0xb8>)
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d0de      	beq.n	800e86e <audiod_tx_done_cb.constprop.0+0x52>
 800e8b0:	69e2      	ldr	r2, [r4, #28]
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	7a23      	ldrb	r3, [r4, #8]
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	5d94      	ldrb	r4, [r2, r6]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	9400      	str	r4, [sp, #0]
 800e8be:	f7f6 f917 	bl	8004af0 <tud_audio_tx_done_post_load_cb>
}
 800e8c2:	b003      	add	sp, #12
 800e8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	2400c508 	.word	0x2400c508
 800e8cc:	08004aed 	.word	0x08004aed
 800e8d0:	2400c534 	.word	0x2400c534
 800e8d4:	08004af1 	.word	0x08004af1

0800e8d8 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 800e8d8:	b928      	cbnz	r0, 800e8e6 <tud_audio_n_read+0xe>
 800e8da:	4804      	ldr	r0, [pc, #16]	; (800e8ec <tud_audio_n_read+0x14>)
 800e8dc:	6843      	ldr	r3, [r0, #4]
 800e8de:	b113      	cbz	r3, 800e8e6 <tud_audio_n_read+0xe>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 800e8e0:	3020      	adds	r0, #32
 800e8e2:	f000 bef5 	b.w	800f6d0 <tu_fifo_read_n>
}
 800e8e6:	2000      	movs	r0, #0
 800e8e8:	4770      	bx	lr
 800e8ea:	bf00      	nop
 800e8ec:	2400c508 	.word	0x2400c508

0800e8f0 <audiod_init>:
{
 800e8f0:	b530      	push	{r4, r5, lr}
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800e8f2:	4c11      	ldr	r4, [pc, #68]	; (800e938 <audiod_init+0x48>)
{
 800e8f4:	b083      	sub	sp, #12
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800e8f6:	2238      	movs	r2, #56	; 0x38
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	4620      	mov	r0, r4
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800e8fc:	2501      	movs	r5, #1
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800e8fe:	f003 fb55 	bl	8011fac <memset>
        audio->ctrl_buf = ctrl_buf_1;
 800e902:	4a0e      	ldr	r2, [pc, #56]	; (800e93c <audiod_init+0x4c>)
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 800e904:	2340      	movs	r3, #64	; 0x40
        audio->alt_setting = alt_setting_1;
 800e906:	490e      	ldr	r1, [pc, #56]	; (800e940 <audiod_init+0x50>)
        audio->ctrl_buf = ctrl_buf_1;
 800e908:	6162      	str	r2, [r4, #20]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800e90a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 800e90e:	7623      	strb	r3, [r4, #24]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800e910:	f44f 7242 	mov.w	r2, #776	; 0x308
 800e914:	462b      	mov	r3, r5
        audio->alt_setting = alt_setting_1;
 800e916:	61e1      	str	r1, [r4, #28]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 800e918:	9500      	str	r5, [sp, #0]
 800e91a:	490a      	ldr	r1, [pc, #40]	; (800e944 <audiod_init+0x54>)
 800e91c:	f000 fe42 	bl	800f5a4 <tu_fifo_config>
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 800e920:	462b      	mov	r3, r5
 800e922:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 800e926:	4908      	ldr	r1, [pc, #32]	; (800e948 <audiod_init+0x58>)
 800e928:	f104 0020 	add.w	r0, r4, #32
 800e92c:	9500      	str	r5, [sp, #0]
 800e92e:	f000 fe39 	bl	800f5a4 <tu_fifo_config>
}
 800e932:	b003      	add	sp, #12
 800e934:	bd30      	pop	{r4, r5, pc}
 800e936:	bf00      	nop
 800e938:	2400c508 	.word	0x2400c508
 800e93c:	2400ce5c 	.word	0x2400ce5c
 800e940:	2400c540 	.word	0x2400c540
 800e944:	2400c544 	.word	0x2400c544
 800e948:	2400c84c 	.word	0x2400c84c

0800e94c <audiod_reset>:
{
 800e94c:	b510      	push	{r4, lr}
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 800e94e:	4c08      	ldr	r4, [pc, #32]	; (800e970 <audiod_reset+0x24>)
 800e950:	2300      	movs	r3, #0
    tu_fifo_clear(&audio->ep_in_ff);
 800e952:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 800e956:	6123      	str	r3, [r4, #16]
 800e958:	e9c4 3300 	strd	r3, r3, [r4]
 800e95c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    tu_fifo_clear(&audio->ep_in_ff);
 800e960:	f001 f9a2 	bl	800fca8 <tu_fifo_clear>
    tu_fifo_clear(&audio->ep_out_ff);
 800e964:	f104 0020 	add.w	r0, r4, #32
}
 800e968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_clear(&audio->ep_out_ff);
 800e96c:	f001 b99c 	b.w	800fca8 <tu_fifo_clear>
 800e970:	2400c508 	.word	0x2400c508

0800e974 <audiod_open>:
  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 800e974:	794a      	ldrb	r2, [r1, #5]
 800e976:	2a01      	cmp	r2, #1
 800e978:	d102      	bne.n	800e980 <audiod_open+0xc>
 800e97a:	798a      	ldrb	r2, [r1, #6]
 800e97c:	2a01      	cmp	r2, #1
 800e97e:	d001      	beq.n	800e984 <audiod_open+0x10>
 800e980:	2000      	movs	r0, #0
}
 800e982:	4770      	bx	lr
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 800e984:	79ca      	ldrb	r2, [r1, #7]
 800e986:	2a20      	cmp	r2, #32
 800e988:	d1fa      	bne.n	800e980 <audiod_open+0xc>
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 800e98a:	790a      	ldrb	r2, [r1, #4]
 800e98c:	2a01      	cmp	r2, #1
 800e98e:	d0f7      	beq.n	800e980 <audiod_open+0xc>
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 800e990:	78ca      	ldrb	r2, [r1, #3]
 800e992:	2a00      	cmp	r2, #0
 800e994:	d1f4      	bne.n	800e980 <audiod_open+0xc>
    if (!_audiod_fct[i].p_desc)
 800e996:	4603      	mov	r3, r0
{
 800e998:	b410      	push	{r4}
    if (!_audiod_fct[i].p_desc)
 800e99a:	4c0b      	ldr	r4, [pc, #44]	; (800e9c8 <audiod_open+0x54>)
 800e99c:	6860      	ldr	r0, [r4, #4]
 800e99e:	b948      	cbnz	r0, 800e9b4 <audiod_open+0x40>
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 800e9a0:	f44f 729c 	mov.w	r2, #312	; 0x138
  return drv_len;
 800e9a4:	f44f 7098 	mov.w	r0, #304	; 0x130
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 800e9a8:	6061      	str	r1, [r4, #4]
      _audiod_fct[i].rhport = rhport;
 800e9aa:	7023      	strb	r3, [r4, #0]
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 800e9ac:	8262      	strh	r2, [r4, #18]
}
 800e9ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9b2:	4770      	bx	lr
  TU_ASSERT( i < CFG_TUD_AUDIO );
 800e9b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e9b8:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 800e9bc:	f010 0001 	ands.w	r0, r0, #1
 800e9c0:	d0f5      	beq.n	800e9ae <audiod_open+0x3a>
 800e9c2:	be00      	bkpt	0x0000
 800e9c4:	4610      	mov	r0, r2
 800e9c6:	e7f2      	b.n	800e9ae <audiod_open+0x3a>
 800e9c8:	2400c508 	.word	0x2400c508

0800e9cc <audiod_control_xfer_cb>:
  if ( stage == CONTROL_STAGE_SETUP )
 800e9cc:	2901      	cmp	r1, #1
{
 800e9ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	b083      	sub	sp, #12
 800e9d6:	4614      	mov	r4, r2
  if ( stage == CONTROL_STAGE_SETUP )
 800e9d8:	d006      	beq.n	800e9e8 <audiod_control_xfer_cb+0x1c>
  else if ( stage == CONTROL_STAGE_DATA )
 800e9da:	2902      	cmp	r1, #2
 800e9dc:	d041      	beq.n	800ea62 <audiod_control_xfer_cb+0x96>
  return true;
 800e9de:	2201      	movs	r2, #1
}
 800e9e0:	4610      	mov	r0, r2
 800e9e2:	b003      	add	sp, #12
 800e9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 800e9e8:	7810      	ldrb	r0, [r2, #0]
 800e9ea:	f010 0860 	ands.w	r8, r0, #96	; 0x60
 800e9ee:	d129      	bne.n	800ea44 <audiod_control_xfer_cb+0x78>
    switch (p_request->bRequest)
 800e9f0:	7853      	ldrb	r3, [r2, #1]
 800e9f2:	2b0a      	cmp	r3, #10
 800e9f4:	f000 8090 	beq.w	800eb18 <audiod_control_xfer_cb+0x14c>
 800e9f8:	2b0b      	cmp	r3, #11
 800e9fa:	d126      	bne.n	800ea4a <audiod_control_xfer_cb+0x7e>
  if (audio->p_desc)
 800e9fc:	4f9e      	ldr	r7, [pc, #632]	; (800ec78 <audiod_control_xfer_cb+0x2ac>)
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	b352      	cbz	r2, 800ea58 <audiod_control_xfer_cb+0x8c>
 800ea02:	7816      	ldrb	r6, [r2, #0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800ea04:	8a7b      	ldrh	r3, [r7, #18]
 800ea06:	4416      	add	r6, r2
 800ea08:	3b08      	subs	r3, #8
 800ea0a:	441a      	add	r2, r3
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800ea0c:	88f3      	ldrh	r3, [r6, #6]
 800ea0e:	441e      	add	r6, r3
    while (p_desc < p_desc_end)
 800ea10:	42b2      	cmp	r2, r6
 800ea12:	d921      	bls.n	800ea58 <audiod_control_xfer_cb+0x8c>
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800ea14:	f8b4 a004 	ldrh.w	sl, [r4, #4]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800ea18:	fa5f fa8a 	uxtb.w	sl, sl
 800ea1c:	e003      	b.n	800ea26 <audiod_control_xfer_cb+0x5a>
 800ea1e:	7833      	ldrb	r3, [r6, #0]
 800ea20:	441e      	add	r6, r3
    while (p_desc < p_desc_end)
 800ea22:	42b2      	cmp	r2, r6
 800ea24:	d918      	bls.n	800ea58 <audiod_control_xfer_cb+0x8c>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ea26:	7873      	ldrb	r3, [r6, #1]
 800ea28:	2b04      	cmp	r3, #4
 800ea2a:	d1f8      	bne.n	800ea1e <audiod_control_xfer_cb+0x52>
 800ea2c:	78f3      	ldrb	r3, [r6, #3]
        tmp++;
 800ea2e:	f108 0101 	add.w	r1, r8, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1f3      	bne.n	800ea1e <audiod_control_xfer_cb+0x52>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800ea36:	78b0      	ldrb	r0, [r6, #2]
 800ea38:	4550      	cmp	r0, sl
 800ea3a:	f000 808f 	beq.w	800eb5c <audiod_control_xfer_cb+0x190>
        tmp++;
 800ea3e:	fa5f f881 	uxtb.w	r8, r1
 800ea42:	e7ec      	b.n	800ea1e <audiod_control_xfer_cb+0x52>
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 800ea44:	f1b8 0f20 	cmp.w	r8, #32
 800ea48:	d03a      	beq.n	800eac0 <audiod_control_xfer_cb+0xf4>
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 800ea4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ea4e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ea52:	07d8      	lsls	r0, r3, #31
 800ea54:	d500      	bpl.n	800ea58 <audiod_control_xfer_cb+0x8c>
 800ea56:	be00      	bkpt	0x0000
 800ea58:	2200      	movs	r2, #0
}
 800ea5a:	4610      	mov	r0, r2
 800ea5c:	b003      	add	sp, #12
 800ea5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 800ea62:	7813      	ldrb	r3, [r2, #0]
 800ea64:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 800ea68:	2a20      	cmp	r2, #32
 800ea6a:	d1b8      	bne.n	800e9de <audiod_control_xfer_cb+0x12>
    switch (p_request->bmRequestType_bit.recipient)
 800ea6c:	f003 031f 	and.w	r3, r3, #31
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	f000 80d6 	beq.w	800ec22 <audiod_control_xfer_cb+0x256>
 800ea76:	2b02      	cmp	r3, #2
 800ea78:	d1e7      	bne.n	800ea4a <audiod_control_xfer_cb+0x7e>
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 800ea7a:	88a0      	ldrh	r0, [r4, #4]
        if (tud_audio_set_req_ep_cb)
 800ea7c:	4b7f      	ldr	r3, [pc, #508]	; (800ec7c <audiod_control_xfer_cb+0x2b0>)
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 800ea7e:	b2c0      	uxtb	r0, r0
        if (tud_audio_set_req_ep_cb)
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d0e9      	beq.n	800ea58 <audiod_control_xfer_cb+0x8c>
static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    if (_audiod_fct[i].p_desc)
 800ea84:	4f7c      	ldr	r7, [pc, #496]	; (800ec78 <audiod_control_xfer_cb+0x2ac>)
 800ea86:	6879      	ldr	r1, [r7, #4]
 800ea88:	2900      	cmp	r1, #0
 800ea8a:	d0e5      	beq.n	800ea58 <audiod_control_xfer_cb+0x8c>
 800ea8c:	780b      	ldrb	r3, [r1, #0]
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 800ea8e:	8a7a      	ldrh	r2, [r7, #18]
 800ea90:	440b      	add	r3, r1
 800ea92:	4411      	add	r1, r2

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800ea94:	88da      	ldrh	r2, [r3, #6]
 800ea96:	4413      	add	r3, r2

      while (p_desc < p_desc_end)
 800ea98:	4299      	cmp	r1, r3
 800ea9a:	d804      	bhi.n	800eaa6 <audiod_control_xfer_cb+0xda>
 800ea9c:	e7dc      	b.n	800ea58 <audiod_control_xfer_cb+0x8c>
 800ea9e:	781a      	ldrb	r2, [r3, #0]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	4299      	cmp	r1, r3
 800eaa4:	d9d8      	bls.n	800ea58 <audiod_control_xfer_cb+0x8c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800eaa6:	785a      	ldrb	r2, [r3, #1]
 800eaa8:	2a05      	cmp	r2, #5
 800eaaa:	d1f8      	bne.n	800ea9e <audiod_control_xfer_cb+0xd2>
 800eaac:	789a      	ldrb	r2, [r3, #2]
 800eaae:	4282      	cmp	r2, r0
 800eab0:	d1f5      	bne.n	800ea9e <audiod_control_xfer_cb+0xd2>
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800eab2:	697a      	ldr	r2, [r7, #20]
 800eab4:	4621      	mov	r1, r4
 800eab6:	4628      	mov	r0, r5
 800eab8:	f3af 8000 	nop.w
 800eabc:	4602      	mov	r2, r0
 800eabe:	e78f      	b.n	800e9e0 <audiod_control_xfer_cb+0x14>
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800eac0:	8893      	ldrh	r3, [r2, #4]
    switch (p_request->bmRequestType_bit.recipient)
 800eac2:	f000 021f 	and.w	r2, r0, #31
 800eac6:	2a01      	cmp	r2, #1
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800eac8:	b2de      	uxtb	r6, r3
    switch (p_request->bmRequestType_bit.recipient)
 800eaca:	f000 80ee 	beq.w	800ecaa <audiod_control_xfer_cb+0x2de>
 800eace:	2a02      	cmp	r2, #2
 800ead0:	d1bb      	bne.n	800ea4a <audiod_control_xfer_cb+0x7e>
    if (_audiod_fct[i].p_desc)
 800ead2:	4f69      	ldr	r7, [pc, #420]	; (800ec78 <audiod_control_xfer_cb+0x2ac>)
 800ead4:	6879      	ldr	r1, [r7, #4]
 800ead6:	2900      	cmp	r1, #0
 800ead8:	d0be      	beq.n	800ea58 <audiod_control_xfer_cb+0x8c>
 800eada:	780b      	ldrb	r3, [r1, #0]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 800eadc:	8a7a      	ldrh	r2, [r7, #18]
 800eade:	440b      	add	r3, r1
 800eae0:	4411      	add	r1, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800eae2:	88da      	ldrh	r2, [r3, #6]
 800eae4:	4413      	add	r3, r2
      while (p_desc < p_desc_end)
 800eae6:	4299      	cmp	r1, r3
 800eae8:	d804      	bhi.n	800eaf4 <audiod_control_xfer_cb+0x128>
 800eaea:	e7b5      	b.n	800ea58 <audiod_control_xfer_cb+0x8c>
 800eaec:	781a      	ldrb	r2, [r3, #0]
 800eaee:	4413      	add	r3, r2
 800eaf0:	4299      	cmp	r1, r3
 800eaf2:	d9b1      	bls.n	800ea58 <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800eaf4:	785a      	ldrb	r2, [r3, #1]
 800eaf6:	2a05      	cmp	r2, #5
 800eaf8:	d1f8      	bne.n	800eaec <audiod_control_xfer_cb+0x120>
 800eafa:	789a      	ldrb	r2, [r3, #2]
 800eafc:	42b2      	cmp	r2, r6
 800eafe:	d1f5      	bne.n	800eaec <audiod_control_xfer_cb+0x120>
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800eb00:	0603      	lsls	r3, r0, #24
 800eb02:	f100 8171 	bmi.w	800ede8 <audiod_control_xfer_cb+0x41c>
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 800eb06:	7e3b      	ldrb	r3, [r7, #24]
 800eb08:	4621      	mov	r1, r4
 800eb0a:	697a      	ldr	r2, [r7, #20]
 800eb0c:	4628      	mov	r0, r5
}
 800eb0e:	b003      	add	sp, #12
 800eb10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 800eb14:	f002 b82c 	b.w	8010b70 <tud_control_xfer>
  if (audio->p_desc)
 800eb18:	4f57      	ldr	r7, [pc, #348]	; (800ec78 <audiod_control_xfer_cb+0x2ac>)
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d09b      	beq.n	800ea58 <audiod_control_xfer_cb+0x8c>
 800eb20:	7803      	ldrb	r3, [r0, #0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800eb22:	8a7a      	ldrh	r2, [r7, #18]
 800eb24:	4403      	add	r3, r0
 800eb26:	3a08      	subs	r2, #8
 800eb28:	4410      	add	r0, r2
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800eb2a:	88da      	ldrh	r2, [r3, #6]
 800eb2c:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800eb2e:	4298      	cmp	r0, r3
 800eb30:	d992      	bls.n	800ea58 <audiod_control_xfer_cb+0x8c>
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800eb32:	88a6      	ldrh	r6, [r4, #4]
 800eb34:	b2f6      	uxtb	r6, r6
 800eb36:	e003      	b.n	800eb40 <audiod_control_xfer_cb+0x174>
 800eb38:	781a      	ldrb	r2, [r3, #0]
 800eb3a:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 800eb3c:	4298      	cmp	r0, r3
 800eb3e:	d98b      	bls.n	800ea58 <audiod_control_xfer_cb+0x8c>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800eb40:	785a      	ldrb	r2, [r3, #1]
 800eb42:	2a04      	cmp	r2, #4
 800eb44:	d1f8      	bne.n	800eb38 <audiod_control_xfer_cb+0x16c>
 800eb46:	78da      	ldrb	r2, [r3, #3]
        tmp++;
 800eb48:	f108 0101 	add.w	r1, r8, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800eb4c:	2a00      	cmp	r2, #0
 800eb4e:	d1f3      	bne.n	800eb38 <audiod_control_xfer_cb+0x16c>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800eb50:	789a      	ldrb	r2, [r3, #2]
 800eb52:	42b2      	cmp	r2, r6
 800eb54:	d05f      	beq.n	800ec16 <audiod_control_xfer_cb+0x24a>
        tmp++;
 800eb56:	fa5f f881 	uxtb.w	r8, r1
 800eb5a:	e7ed      	b.n	800eb38 <audiod_control_xfer_cb+0x16c>
  if (audio->ep_in_as_intf_num == itf)
 800eb5c:	4699      	mov	r9, r3
 800eb5e:	7b3b      	ldrb	r3, [r7, #12]
  uint8_t const alt = tu_u16_low(p_request->wValue);
 800eb60:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  if (audio->ep_in_as_intf_num == itf)
 800eb64:	4553      	cmp	r3, sl
 800eb66:	f000 8115 	beq.w	800ed94 <audiod_control_xfer_cb+0x3c8>
  if (audio->ep_out_as_intf_num == itf)
 800eb6a:	7c3b      	ldrb	r3, [r7, #16]
 800eb6c:	4553      	cmp	r3, sl
 800eb6e:	f000 8126 	beq.w	800edbe <audiod_control_xfer_cb+0x3f2>
  audio->alt_setting[idxItf] = alt;
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	fa5f f28b 	uxtb.w	r2, fp
 800eb78:	f803 2008 	strb.w	r2, [r3, r8]
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800eb7c:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f1a8 0808 	sub.w	r8, r8, #8
 800eb86:	4498      	add	r8, r3
  while (p_desc < p_desc_end)
 800eb88:	45b0      	cmp	r8, r6
 800eb8a:	d805      	bhi.n	800eb98 <audiod_control_xfer_cb+0x1cc>
 800eb8c:	e087      	b.n	800ec9e <audiod_control_xfer_cb+0x2d2>
 800eb8e:	7833      	ldrb	r3, [r6, #0]
 800eb90:	441e      	add	r6, r3
 800eb92:	45b0      	cmp	r8, r6
 800eb94:	f240 8083 	bls.w	800ec9e <audiod_control_xfer_cb+0x2d2>
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 800eb98:	7873      	ldrb	r3, [r6, #1]
 800eb9a:	2b04      	cmp	r3, #4
 800eb9c:	d1f7      	bne.n	800eb8e <audiod_control_xfer_cb+0x1c2>
 800eb9e:	78b3      	ldrb	r3, [r6, #2]
 800eba0:	4553      	cmp	r3, sl
 800eba2:	d1f4      	bne.n	800eb8e <audiod_control_xfer_cb+0x1c2>
 800eba4:	78f3      	ldrb	r3, [r6, #3]
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d1f1      	bne.n	800eb8e <audiod_control_xfer_cb+0x1c2>
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 800ebaa:	f896 b004 	ldrb.w	fp, [r6, #4]
      while (foundEPs < nEps && p_desc < p_desc_end)
 800ebae:	f1bb 0f00 	cmp.w	fp, #0
 800ebb2:	d06b      	beq.n	800ec8c <audiod_control_xfer_cb+0x2c0>
 800ebb4:	45b0      	cmp	r8, r6
 800ebb6:	f67f af4f 	bls.w	800ea58 <audiod_control_xfer_cb+0x8c>
 800ebba:	7833      	ldrb	r3, [r6, #0]
 800ebbc:	45cb      	cmp	fp, r9
 800ebbe:	441e      	add	r6, r3
 800ebc0:	d962      	bls.n	800ec88 <audiod_control_xfer_cb+0x2bc>
 800ebc2:	45b0      	cmp	r8, r6
 800ebc4:	f67f af48 	bls.w	800ea58 <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 800ebc8:	7873      	ldrb	r3, [r6, #1]
 800ebca:	2b05      	cmp	r3, #5
 800ebcc:	d1f5      	bne.n	800ebba <audiod_control_xfer_cb+0x1ee>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800ebce:	4631      	mov	r1, r6
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	f001 feb1 	bl	8010938 <usbd_edpt_open>
 800ebd6:	4602      	mov	r2, r0
          usbd_edpt_clear_stall(rhport, ep_addr);
 800ebd8:	4628      	mov	r0, r5
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800ebda:	2a00      	cmp	r2, #0
 800ebdc:	f000 8121 	beq.w	800ee22 <audiod_control_xfer_cb+0x456>
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 800ebe0:	78b1      	ldrb	r1, [r6, #2]
          usbd_edpt_clear_stall(rhport, ep_addr);
 800ebe2:	9101      	str	r1, [sp, #4]
 800ebe4:	f001 ff58 	bl	8010a98 <usbd_edpt_clear_stall>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 800ebe8:	9901      	ldr	r1, [sp, #4]
 800ebea:	09cb      	lsrs	r3, r1, #7
 800ebec:	f040 8106 	bne.w	800edfc <audiod_control_xfer_cb+0x430>
            audio->ep_out = ep_addr;
 800ebf0:	7379      	strb	r1, [r7, #13]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800ebf2:	4628      	mov	r0, r5
            audio->ep_out_as_intf_num = itf;
 800ebf4:	f887 a010 	strb.w	sl, [r7, #16]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800ebf8:	88b3      	ldrh	r3, [r6, #4]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800ebfa:	4a21      	ldr	r2, [pc, #132]	; (800ec80 <audiod_control_xfer_cb+0x2b4>)
 800ebfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 800ec00:	81fb      	strh	r3, [r7, #14]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800ec02:	f001 ff11 	bl	8010a28 <usbd_edpt_xfer_fifo>
 800ec06:	2800      	cmp	r0, #0
 800ec08:	f43f af26 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
          foundEPs += 1;
 800ec0c:	f109 0901 	add.w	r9, r9, #1
 800ec10:	fa5f f989 	uxtb.w	r9, r9
 800ec14:	e7d1      	b.n	800ebba <audiod_control_xfer_cb+0x1ee>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 800ec16:	69fa      	ldr	r2, [r7, #28]
 800ec18:	2301      	movs	r3, #1
 800ec1a:	4621      	mov	r1, r4
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	4442      	add	r2, r8
 800ec20:	e775      	b.n	800eb0e <audiod_control_xfer_cb+0x142>
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800ec22:	88a3      	ldrh	r3, [r4, #4]
 800ec24:	b2de      	uxtb	r6, r3
        if (entityID != 0)
 800ec26:	0a1b      	lsrs	r3, r3, #8
 800ec28:	f000 8091 	beq.w	800ed4e <audiod_control_xfer_cb+0x382>
          if (tud_audio_set_req_entity_cb)
 800ec2c:	4a15      	ldr	r2, [pc, #84]	; (800ec84 <audiod_control_xfer_cb+0x2b8>)
 800ec2e:	2a00      	cmp	r2, #0
 800ec30:	f43f af12 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800ec34:	4f10      	ldr	r7, [pc, #64]	; (800ec78 <audiod_control_xfer_cb+0x2ac>)
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800ec36:	b2da      	uxtb	r2, r3
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800ec38:	6879      	ldr	r1, [r7, #4]
 800ec3a:	2900      	cmp	r1, #0
 800ec3c:	f43f af0c 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
 800ec40:	788b      	ldrb	r3, [r1, #2]
 800ec42:	42b3      	cmp	r3, r6
 800ec44:	f47f af08 	bne.w	800ea58 <audiod_control_xfer_cb+0x8c>
  return desc8 + desc8[DESC_OFFSET_LEN];
 800ec48:	780b      	ldrb	r3, [r1, #0]
 800ec4a:	18c8      	adds	r0, r1, r3
 800ec4c:	5ccb      	ldrb	r3, [r1, r3]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 800ec4e:	88c1      	ldrh	r1, [r0, #6]
 800ec50:	4403      	add	r3, r0
 800ec52:	4408      	add	r0, r1
      while (p_desc < p_desc_end)
 800ec54:	4298      	cmp	r0, r3
 800ec56:	d805      	bhi.n	800ec64 <audiod_control_xfer_cb+0x298>
 800ec58:	e6fe      	b.n	800ea58 <audiod_control_xfer_cb+0x8c>
 800ec5a:	7819      	ldrb	r1, [r3, #0]
 800ec5c:	440b      	add	r3, r1
 800ec5e:	4298      	cmp	r0, r3
 800ec60:	f67f aefa 	bls.w	800ea58 <audiod_control_xfer_cb+0x8c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800ec64:	78d9      	ldrb	r1, [r3, #3]
 800ec66:	4291      	cmp	r1, r2
 800ec68:	d1f7      	bne.n	800ec5a <audiod_control_xfer_cb+0x28e>
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800ec6a:	697a      	ldr	r2, [r7, #20]
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	4628      	mov	r0, r5
 800ec70:	f7f5 fee0 	bl	8004a34 <tud_audio_set_req_entity_cb>
 800ec74:	4602      	mov	r2, r0
 800ec76:	e6b3      	b.n	800e9e0 <audiod_control_xfer_cb+0x14>
 800ec78:	2400c508 	.word	0x2400c508
 800ec7c:	00000000 	.word	0x00000000
 800ec80:	2400c528 	.word	0x2400c528
 800ec84:	08004a35 	.word	0x08004a35
      TU_VERIFY(foundEPs == nEps);
 800ec88:	f47f aee6 	bne.w	800ea58 <audiod_control_xfer_cb+0x8c>
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 800ec8c:	4b69      	ldr	r3, [pc, #420]	; (800ee34 <audiod_control_xfer_cb+0x468>)
 800ec8e:	b133      	cbz	r3, 800ec9e <audiod_control_xfer_cb+0x2d2>
 800ec90:	4621      	mov	r1, r4
 800ec92:	4628      	mov	r0, r5
 800ec94:	f7f5 ff06 	bl	8004aa4 <tud_audio_set_itf_cb>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	f43f aedd 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
  tud_control_status(rhport, p_request);
 800ec9e:	4621      	mov	r1, r4
 800eca0:	4628      	mov	r0, r5
 800eca2:	f001 ff4b 	bl	8010b3c <tud_control_status>
  return true;
 800eca6:	2201      	movs	r2, #1
 800eca8:	e69a      	b.n	800e9e0 <audiod_control_xfer_cb+0x14>
        if (entityID != 0)
 800ecaa:	0a1b      	lsrs	r3, r3, #8
 800ecac:	d027      	beq.n	800ecfe <audiod_control_xfer_cb+0x332>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800ecae:	4f62      	ldr	r7, [pc, #392]	; (800ee38 <audiod_control_xfer_cb+0x46c>)
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800ecb0:	b2da      	uxtb	r2, r3
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800ecb2:	6879      	ldr	r1, [r7, #4]
 800ecb4:	2900      	cmp	r1, #0
 800ecb6:	f43f aecf 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
 800ecba:	788b      	ldrb	r3, [r1, #2]
 800ecbc:	42b3      	cmp	r3, r6
 800ecbe:	f47f aecb 	bne.w	800ea58 <audiod_control_xfer_cb+0x8c>
 800ecc2:	780b      	ldrb	r3, [r1, #0]
 800ecc4:	18ce      	adds	r6, r1, r3
 800ecc6:	5ccb      	ldrb	r3, [r1, r3]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 800ecc8:	88f1      	ldrh	r1, [r6, #6]
 800ecca:	4433      	add	r3, r6
 800eccc:	440e      	add	r6, r1
      while (p_desc < p_desc_end)
 800ecce:	429e      	cmp	r6, r3
 800ecd0:	d805      	bhi.n	800ecde <audiod_control_xfer_cb+0x312>
 800ecd2:	e6c1      	b.n	800ea58 <audiod_control_xfer_cb+0x8c>
 800ecd4:	7819      	ldrb	r1, [r3, #0]
 800ecd6:	440b      	add	r3, r1
 800ecd8:	429e      	cmp	r6, r3
 800ecda:	f67f aebd 	bls.w	800ea58 <audiod_control_xfer_cb+0x8c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800ecde:	78d9      	ldrb	r1, [r3, #3]
 800ece0:	4291      	cmp	r1, r2
 800ece2:	d1f7      	bne.n	800ecd4 <audiod_control_xfer_cb+0x308>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800ece4:	0601      	lsls	r1, r0, #24
 800ece6:	f57f af0e 	bpl.w	800eb06 <audiod_control_xfer_cb+0x13a>
            if (tud_audio_get_req_entity_cb)
 800ecea:	4b54      	ldr	r3, [pc, #336]	; (800ee3c <audiod_control_xfer_cb+0x470>)
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f43f aeb3 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
              return tud_audio_get_req_entity_cb(rhport, p_request);
 800ecf2:	4621      	mov	r1, r4
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	f7f5 fe0b 	bl	8004910 <tud_audio_get_req_entity_cb>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	e670      	b.n	800e9e0 <audiod_control_xfer_cb+0x14>
    if (_audiod_fct[i].p_desc)
 800ecfe:	4f4e      	ldr	r7, [pc, #312]	; (800ee38 <audiod_control_xfer_cb+0x46c>)
 800ed00:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800ed04:	f1bc 0f00 	cmp.w	ip, #0
 800ed08:	f43f aea6 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800ed0c:	8a79      	ldrh	r1, [r7, #18]
 800ed0e:	3908      	subs	r1, #8
 800ed10:	4461      	add	r1, ip
      while (p_desc < p_desc_end)
 800ed12:	458c      	cmp	ip, r1
 800ed14:	f4bf aea0 	bcs.w	800ea58 <audiod_control_xfer_cb+0x8c>
 800ed18:	4663      	mov	r3, ip
 800ed1a:	e004      	b.n	800ed26 <audiod_control_xfer_cb+0x35a>
 800ed1c:	781a      	ldrb	r2, [r3, #0]
 800ed1e:	4413      	add	r3, r2
 800ed20:	4299      	cmp	r1, r3
 800ed22:	f67f ae99 	bls.w	800ea58 <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800ed26:	785a      	ldrb	r2, [r3, #1]
 800ed28:	2a04      	cmp	r2, #4
 800ed2a:	d1f7      	bne.n	800ed1c <audiod_control_xfer_cb+0x350>
 800ed2c:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800ed30:	42b2      	cmp	r2, r6
 800ed32:	d1f3      	bne.n	800ed1c <audiod_control_xfer_cb+0x350>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800ed34:	0602      	lsls	r2, r0, #24
 800ed36:	f57f aee6 	bpl.w	800eb06 <audiod_control_xfer_cb+0x13a>
            if (tud_audio_get_req_itf_cb)
 800ed3a:	4b41      	ldr	r3, [pc, #260]	; (800ee40 <audiod_control_xfer_cb+0x474>)
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f43f ae8b 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
              return tud_audio_get_req_itf_cb(rhport, p_request);
 800ed42:	4621      	mov	r1, r4
 800ed44:	4628      	mov	r0, r5
 800ed46:	f3af 8000 	nop.w
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	e648      	b.n	800e9e0 <audiod_control_xfer_cb+0x14>
          if (tud_audio_set_req_itf_cb)
 800ed4e:	4b3d      	ldr	r3, [pc, #244]	; (800ee44 <audiod_control_xfer_cb+0x478>)
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f43f ae81 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
    if (_audiod_fct[i].p_desc)
 800ed56:	4f38      	ldr	r7, [pc, #224]	; (800ee38 <audiod_control_xfer_cb+0x46c>)
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	f43f ae7c 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800ed60:	8a79      	ldrh	r1, [r7, #18]
 800ed62:	3908      	subs	r1, #8
 800ed64:	4401      	add	r1, r0
      while (p_desc < p_desc_end)
 800ed66:	4288      	cmp	r0, r1
 800ed68:	f4bf ae76 	bcs.w	800ea58 <audiod_control_xfer_cb+0x8c>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	e004      	b.n	800ed7a <audiod_control_xfer_cb+0x3ae>
 800ed70:	781a      	ldrb	r2, [r3, #0]
 800ed72:	4413      	add	r3, r2
 800ed74:	4299      	cmp	r1, r3
 800ed76:	f67f ae6f 	bls.w	800ea58 <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800ed7a:	785a      	ldrb	r2, [r3, #1]
 800ed7c:	2a04      	cmp	r2, #4
 800ed7e:	d1f7      	bne.n	800ed70 <audiod_control_xfer_cb+0x3a4>
 800ed80:	7882      	ldrb	r2, [r0, #2]
 800ed82:	42b2      	cmp	r2, r6
 800ed84:	d1f4      	bne.n	800ed70 <audiod_control_xfer_cb+0x3a4>
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800ed86:	697a      	ldr	r2, [r7, #20]
 800ed88:	4621      	mov	r1, r4
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f3af 8000 	nop.w
 800ed90:	4602      	mov	r2, r0
 800ed92:	e625      	b.n	800e9e0 <audiod_control_xfer_cb+0x14>
    usbd_edpt_close(rhport, audio->ep_in);
 800ed94:	7a39      	ldrb	r1, [r7, #8]
 800ed96:	4628      	mov	r0, r5
    audio->ep_in_as_intf_num = 0;
 800ed98:	f887 900c 	strb.w	r9, [r7, #12]
    usbd_edpt_close(rhport, audio->ep_in);
 800ed9c:	f001 fe9c 	bl	8010ad8 <usbd_edpt_close>
    tu_fifo_clear(&audio->ep_in_ff);
 800eda0:	4829      	ldr	r0, [pc, #164]	; (800ee48 <audiod_control_xfer_cb+0x47c>)
 800eda2:	f000 ff81 	bl	800fca8 <tu_fifo_clear>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 800eda6:	4b29      	ldr	r3, [pc, #164]	; (800ee4c <audiod_control_xfer_cb+0x480>)
 800eda8:	b133      	cbz	r3, 800edb8 <audiod_control_xfer_cb+0x3ec>
 800edaa:	4621      	mov	r1, r4
 800edac:	4628      	mov	r0, r5
 800edae:	f7f5 fe77 	bl	8004aa0 <tud_audio_set_itf_close_EP_cb>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	f43f ae50 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
    audio->ep_in = 0;                           // Necessary?
 800edb8:	2300      	movs	r3, #0
 800edba:	723b      	strb	r3, [r7, #8]
 800edbc:	e6d5      	b.n	800eb6a <audiod_control_xfer_cb+0x19e>
    audio->ep_out_as_intf_num = 0;
 800edbe:	2300      	movs	r3, #0
    usbd_edpt_close(rhport, audio->ep_out);
 800edc0:	7b79      	ldrb	r1, [r7, #13]
 800edc2:	4628      	mov	r0, r5
    audio->ep_out_as_intf_num = 0;
 800edc4:	743b      	strb	r3, [r7, #16]
    usbd_edpt_close(rhport, audio->ep_out);
 800edc6:	f001 fe87 	bl	8010ad8 <usbd_edpt_close>
    tu_fifo_clear(&audio->ep_out_ff);
 800edca:	4821      	ldr	r0, [pc, #132]	; (800ee50 <audiod_control_xfer_cb+0x484>)
 800edcc:	f000 ff6c 	bl	800fca8 <tu_fifo_clear>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 800edd0:	4b1e      	ldr	r3, [pc, #120]	; (800ee4c <audiod_control_xfer_cb+0x480>)
 800edd2:	b133      	cbz	r3, 800ede2 <audiod_control_xfer_cb+0x416>
 800edd4:	4621      	mov	r1, r4
 800edd6:	4628      	mov	r0, r5
 800edd8:	f7f5 fe62 	bl	8004aa0 <tud_audio_set_itf_close_EP_cb>
 800eddc:	2800      	cmp	r0, #0
 800edde:	f43f ae3b 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
    audio->ep_out = 0;                          // Necessary?
 800ede2:	2300      	movs	r3, #0
 800ede4:	737b      	strb	r3, [r7, #13]
 800ede6:	e6c4      	b.n	800eb72 <audiod_control_xfer_cb+0x1a6>
          if (tud_audio_get_req_ep_cb)
 800ede8:	4b1a      	ldr	r3, [pc, #104]	; (800ee54 <audiod_control_xfer_cb+0x488>)
 800edea:	2b00      	cmp	r3, #0
 800edec:	f43f ae34 	beq.w	800ea58 <audiod_control_xfer_cb+0x8c>
            return tud_audio_get_req_ep_cb(rhport, p_request);
 800edf0:	4621      	mov	r1, r4
 800edf2:	4628      	mov	r0, r5
 800edf4:	f3af 8000 	nop.w
 800edf8:	4602      	mov	r2, r0
 800edfa:	e5f1      	b.n	800e9e0 <audiod_control_xfer_cb+0x14>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 800edfc:	78f3      	ldrb	r3, [r6, #3]
 800edfe:	f013 0f30 	tst.w	r3, #48	; 0x30
 800ee02:	f47f af03 	bne.w	800ec0c <audiod_control_xfer_cb+0x240>
            audio->ep_in = ep_addr;
 800ee06:	7239      	strb	r1, [r7, #8]
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 800ee08:	4628      	mov	r0, r5
            audio->ep_in_as_intf_num = itf;
 800ee0a:	f887 a00c 	strb.w	sl, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800ee0e:	88b3      	ldrh	r3, [r6, #4]
 800ee10:	f3c3 030a 	ubfx	r3, r3, #0, #11
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 800ee14:	817b      	strh	r3, [r7, #10]
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 800ee16:	f7ff fd01 	bl	800e81c <audiod_tx_done_cb.constprop.0>
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	f47f aef6 	bne.w	800ec0c <audiod_control_xfer_cb+0x240>
 800ee20:	e61a      	b.n	800ea58 <audiod_control_xfer_cb+0x8c>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800ee22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee26:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ee2a:	07dc      	lsls	r4, r3, #31
 800ee2c:	f57f ae14 	bpl.w	800ea58 <audiod_control_xfer_cb+0x8c>
 800ee30:	be00      	bkpt	0x0000
 800ee32:	e5d5      	b.n	800e9e0 <audiod_control_xfer_cb+0x14>
 800ee34:	08004aa5 	.word	0x08004aa5
 800ee38:	2400c508 	.word	0x2400c508
 800ee3c:	08004911 	.word	0x08004911
	...
 800ee48:	2400c534 	.word	0x2400c534
 800ee4c:	08004aa1 	.word	0x08004aa1
 800ee50:	2400c528 	.word	0x2400c528
 800ee54:	00000000 	.word	0x00000000

0800ee58 <audiod_xfer_cb>:
{
 800ee58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800ee5c:	4c42      	ldr	r4, [pc, #264]	; (800ef68 <audiod_xfer_cb+0x110>)
{
 800ee5e:	b083      	sub	sp, #12
 800ee60:	4606      	mov	r6, r0
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800ee62:	7a22      	ldrb	r2, [r4, #8]
 800ee64:	428a      	cmp	r2, r1
 800ee66:	d063      	beq.n	800ef30 <audiod_xfer_cb+0xd8>
    if (audio->ep_out == ep_addr)
 800ee68:	7b62      	ldrb	r2, [r4, #13]
 800ee6a:	428a      	cmp	r2, r1
 800ee6c:	d13a      	bne.n	800eee4 <audiod_xfer_cb+0x8c>
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800ee6e:	f8df e104 	ldr.w	lr, [pc, #260]	; 800ef74 <audiod_xfer_cb+0x11c>
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 800ee72:	b29d      	uxth	r5, r3
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800ee74:	f04f 0301 	mov.w	r3, #1
 800ee78:	f1be 0f00 	cmp.w	lr, #0
 800ee7c:	d06a      	beq.n	800ef54 <audiod_xfer_cb+0xfc>
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	b93b      	cbnz	r3, 800ee92 <audiod_xfer_cb+0x3a>
 800ee82:	4a3a      	ldr	r2, [pc, #232]	; (800ef6c <audiod_xfer_cb+0x114>)
 800ee84:	f04f 0301 	mov.w	r3, #1
 800ee88:	2a00      	cmp	r2, #0
 800ee8a:	d059      	beq.n	800ef40 <audiod_xfer_cb+0xe8>
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d058      	beq.n	800ef44 <audiod_xfer_cb+0xec>
  if (audio->p_desc)
 800ee92:	6860      	ldr	r0, [r4, #4]
 800ee94:	b330      	cbz	r0, 800eee4 <audiod_xfer_cb+0x8c>
  return desc8 + desc8[DESC_OFFSET_LEN];
 800ee96:	f890 c000 	ldrb.w	ip, [r0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800ee9a:	8a63      	ldrh	r3, [r4, #18]
 800ee9c:	4484      	add	ip, r0
 800ee9e:	3b08      	subs	r3, #8
 800eea0:	4418      	add	r0, r3
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800eea2:	f8bc 3006 	ldrh.w	r3, [ip, #6]
 800eea6:	449c      	add	ip, r3
    while (p_desc < p_desc_end)
 800eea8:	4560      	cmp	r0, ip
 800eeaa:	d91b      	bls.n	800eee4 <audiod_xfer_cb+0x8c>
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 800eeac:	f894 9010 	ldrb.w	r9, [r4, #16]
    uint8_t tmp = 0;
 800eeb0:	2700      	movs	r7, #0
 800eeb2:	e004      	b.n	800eebe <audiod_xfer_cb+0x66>
 800eeb4:	f89c 2000 	ldrb.w	r2, [ip]
 800eeb8:	4494      	add	ip, r2
    while (p_desc < p_desc_end)
 800eeba:	4560      	cmp	r0, ip
 800eebc:	d912      	bls.n	800eee4 <audiod_xfer_cb+0x8c>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800eebe:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800eec2:	2a04      	cmp	r2, #4
 800eec4:	d1f6      	bne.n	800eeb4 <audiod_xfer_cb+0x5c>
 800eec6:	f89c 2003 	ldrb.w	r2, [ip, #3]
        tmp++;
 800eeca:	1c7b      	adds	r3, r7, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800eecc:	2a00      	cmp	r2, #0
 800eece:	d1f1      	bne.n	800eeb4 <audiod_xfer_cb+0x5c>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800eed0:	f89c 8002 	ldrb.w	r8, [ip, #2]
 800eed4:	45c8      	cmp	r8, r9
 800eed6:	d009      	beq.n	800eeec <audiod_xfer_cb+0x94>
 800eed8:	f89c 2000 	ldrb.w	r2, [ip]
        tmp++;
 800eedc:	b2df      	uxtb	r7, r3
 800eede:	4494      	add	ip, r2
    while (p_desc < p_desc_end)
 800eee0:	4560      	cmp	r0, ip
 800eee2:	d8ec      	bhi.n	800eebe <audiod_xfer_cb+0x66>
  return false;
 800eee4:	2000      	movs	r0, #0
}
 800eee6:	b003      	add	sp, #12
 800eee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (tud_audio_rx_done_pre_read_cb)
 800eeec:	f1be 0f00 	cmp.w	lr, #0
 800eef0:	d032      	beq.n	800ef58 <audiod_xfer_cb+0x100>
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 800eef2:	460b      	mov	r3, r1
 800eef4:	69e1      	ldr	r1, [r4, #28]
 800eef6:	4630      	mov	r0, r6
 800eef8:	5dc9      	ldrb	r1, [r1, r7]
 800eefa:	9100      	str	r1, [sp, #0]
 800eefc:	4629      	mov	r1, r5
 800eefe:	f7f5 fde5 	bl	8004acc <tud_audio_rx_done_pre_read_cb>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d0ee      	beq.n	800eee4 <audiod_xfer_cb+0x8c>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800ef06:	89e3      	ldrh	r3, [r4, #14]
 800ef08:	4630      	mov	r0, r6
 800ef0a:	4a19      	ldr	r2, [pc, #100]	; (800ef70 <audiod_xfer_cb+0x118>)
 800ef0c:	7b61      	ldrb	r1, [r4, #13]
 800ef0e:	f001 fd8b 	bl	8010a28 <usbd_edpt_xfer_fifo>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d0e6      	beq.n	800eee4 <audiod_xfer_cb+0x8c>
  if (tud_audio_rx_done_post_read_cb)
 800ef16:	4b15      	ldr	r3, [pc, #84]	; (800ef6c <audiod_xfer_cb+0x114>)
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d0e4      	beq.n	800eee6 <audiod_xfer_cb+0x8e>
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 800ef1c:	69e2      	ldr	r2, [r4, #28]
 800ef1e:	4629      	mov	r1, r5
 800ef20:	7b63      	ldrb	r3, [r4, #13]
 800ef22:	4630      	mov	r0, r6
 800ef24:	5dd4      	ldrb	r4, [r2, r7]
 800ef26:	2200      	movs	r2, #0
 800ef28:	9400      	str	r4, [sp, #0]
 800ef2a:	f3af 8000 	nop.w
 800ef2e:	e7da      	b.n	800eee6 <audiod_xfer_cb+0x8e>
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800ef30:	69e2      	ldr	r2, [r4, #28]
 800ef32:	2a00      	cmp	r2, #0
 800ef34:	d098      	beq.n	800ee68 <audiod_xfer_cb+0x10>
}
 800ef36:	b003      	add	sp, #12
 800ef38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 800ef3c:	f7ff bc6e 	b.w	800e81c <audiod_tx_done_cb.constprop.0>
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800ef40:	4613      	mov	r3, r2
 800ef42:	e7a3      	b.n	800ee8c <audiod_xfer_cb+0x34>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800ef44:	89e3      	ldrh	r3, [r4, #14]
 800ef46:	4630      	mov	r0, r6
 800ef48:	4a09      	ldr	r2, [pc, #36]	; (800ef70 <audiod_xfer_cb+0x118>)
 800ef4a:	f001 fd6d 	bl	8010a28 <usbd_edpt_xfer_fifo>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d1c9      	bne.n	800eee6 <audiod_xfer_cb+0x8e>
 800ef52:	e7c7      	b.n	800eee4 <audiod_xfer_cb+0x8c>
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 800ef54:	4673      	mov	r3, lr
 800ef56:	e792      	b.n	800ee7e <audiod_xfer_cb+0x26>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800ef58:	89e3      	ldrh	r3, [r4, #14]
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	4a04      	ldr	r2, [pc, #16]	; (800ef70 <audiod_xfer_cb+0x118>)
 800ef5e:	f001 fd63 	bl	8010a28 <usbd_edpt_xfer_fifo>
 800ef62:	2800      	cmp	r0, #0
 800ef64:	d1da      	bne.n	800ef1c <audiod_xfer_cb+0xc4>
 800ef66:	e7bd      	b.n	800eee4 <audiod_xfer_cb+0x8c>
 800ef68:	2400c508 	.word	0x2400c508
 800ef6c:	00000000 	.word	0x00000000
 800ef70:	2400c528 	.word	0x2400c528
 800ef74:	08004acd 	.word	0x08004acd

0800ef78 <audiod_sof_isr>:
}
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop

0800ef7c <tud_audio_buffer_and_schedule_control_xfer>:
{
 800ef7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef80:	460c      	mov	r4, r1
 800ef82:	4611      	mov	r1, r2
 800ef84:	b082      	sub	sp, #8
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 800ef86:	f994 2000 	ldrsb.w	r2, [r4]
 800ef8a:	2a00      	cmp	r2, #0
 800ef8c:	da44      	bge.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
  switch (p_request->bmRequestType_bit.recipient)
 800ef8e:	7822      	ldrb	r2, [r4, #0]
 800ef90:	4606      	mov	r6, r0
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800ef92:	88a0      	ldrh	r0, [r4, #4]
  switch (p_request->bmRequestType_bit.recipient)
 800ef94:	f002 021f 	and.w	r2, r2, #31
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800ef98:	fa5f f880 	uxtb.w	r8, r0
  switch (p_request->bmRequestType_bit.recipient)
 800ef9c:	2a01      	cmp	r2, #1
 800ef9e:	d032      	beq.n	800f006 <tud_audio_buffer_and_schedule_control_xfer+0x8a>
 800efa0:	2a02      	cmp	r2, #2
 800efa2:	d13d      	bne.n	800f020 <tud_audio_buffer_and_schedule_control_xfer+0xa4>
    if (_audiod_fct[i].p_desc)
 800efa4:	4d38      	ldr	r5, [pc, #224]	; (800f088 <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
 800efa6:	686f      	ldr	r7, [r5, #4]
 800efa8:	2f00      	cmp	r7, #0
 800efaa:	d035      	beq.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800efac:	f897 c000 	ldrb.w	ip, [r7]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 800efb0:	8a6a      	ldrh	r2, [r5, #18]
 800efb2:	44bc      	add	ip, r7
 800efb4:	4417      	add	r7, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800efb6:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800efba:	4494      	add	ip, r2
      while (p_desc < p_desc_end)
 800efbc:	4567      	cmp	r7, ip
 800efbe:	d805      	bhi.n	800efcc <tud_audio_buffer_and_schedule_control_xfer+0x50>
 800efc0:	e02a      	b.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800efc2:	f89c 0000 	ldrb.w	r0, [ip]
 800efc6:	4484      	add	ip, r0
 800efc8:	4567      	cmp	r7, ip
 800efca:	d925      	bls.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800efcc:	f89c e001 	ldrb.w	lr, [ip, #1]
 800efd0:	f1be 0f05 	cmp.w	lr, #5
 800efd4:	d1f5      	bne.n	800efc2 <tud_audio_buffer_and_schedule_control_xfer+0x46>
 800efd6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800efda:	4542      	cmp	r2, r8
 800efdc:	d1f1      	bne.n	800efc2 <tud_audio_buffer_and_schedule_control_xfer+0x46>
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 800efde:	7e2a      	ldrb	r2, [r5, #24]
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 800efe0:	6968      	ldr	r0, [r5, #20]
 800efe2:	4293      	cmp	r3, r2
 800efe4:	bf28      	it	cs
 800efe6:	4613      	movcs	r3, r2
  if (count > destsz) {
 800efe8:	429a      	cmp	r2, r3
 800efea:	d315      	bcc.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
  memcpy(dest, src, count);
 800efec:	461a      	mov	r2, r3
 800efee:	9301      	str	r3, [sp, #4]
 800eff0:	f002 ffce 	bl	8011f90 <memcpy>
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 800eff4:	9b01      	ldr	r3, [sp, #4]
 800eff6:	696a      	ldr	r2, [r5, #20]
 800eff8:	4621      	mov	r1, r4
 800effa:	4630      	mov	r0, r6
}
 800effc:	b002      	add	sp, #8
 800effe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 800f002:	f001 bdb5 	b.w	8010b70 <tud_control_xfer>
      if (entityID != 0)
 800f006:	0a00      	lsrs	r0, r0, #8
 800f008:	d012      	beq.n	800f030 <tud_audio_buffer_and_schedule_control_xfer+0xb4>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f00a:	4d1f      	ldr	r5, [pc, #124]	; (800f088 <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800f00c:	b2c0      	uxtb	r0, r0
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f00e:	686f      	ldr	r7, [r5, #4]
 800f010:	b117      	cbz	r7, 800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f012:	78ba      	ldrb	r2, [r7, #2]
 800f014:	4542      	cmp	r2, r8
 800f016:	d023      	beq.n	800f060 <tud_audio_buffer_and_schedule_control_xfer+0xe4>
}
 800f018:	2000      	movs	r0, #0
 800f01a:	b002      	add	sp, #8
 800f01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 800f020:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f024:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f028:	07db      	lsls	r3, r3, #31
 800f02a:	d5f5      	bpl.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f02c:	be00      	bkpt	0x0000
 800f02e:	e7f3      	b.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
    if (_audiod_fct[i].p_desc)
 800f030:	4d15      	ldr	r5, [pc, #84]	; (800f088 <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
 800f032:	686f      	ldr	r7, [r5, #4]
 800f034:	2f00      	cmp	r7, #0
 800f036:	d0ef      	beq.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800f038:	8a68      	ldrh	r0, [r5, #18]
 800f03a:	3808      	subs	r0, #8
 800f03c:	4438      	add	r0, r7
      while (p_desc < p_desc_end)
 800f03e:	4287      	cmp	r7, r0
 800f040:	d2ea      	bcs.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f042:	46bc      	mov	ip, r7
 800f044:	e004      	b.n	800f050 <tud_audio_buffer_and_schedule_control_xfer+0xd4>
 800f046:	f89c 2000 	ldrb.w	r2, [ip]
 800f04a:	4494      	add	ip, r2
 800f04c:	4560      	cmp	r0, ip
 800f04e:	d9e3      	bls.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800f050:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800f054:	2a04      	cmp	r2, #4
 800f056:	d1f6      	bne.n	800f046 <tud_audio_buffer_and_schedule_control_xfer+0xca>
 800f058:	78ba      	ldrb	r2, [r7, #2]
 800f05a:	4542      	cmp	r2, r8
 800f05c:	d1f3      	bne.n	800f046 <tud_audio_buffer_and_schedule_control_xfer+0xca>
 800f05e:	e7be      	b.n	800efde <tud_audio_buffer_and_schedule_control_xfer+0x62>
 800f060:	783a      	ldrb	r2, [r7, #0]
 800f062:	eb07 0c02 	add.w	ip, r7, r2
 800f066:	5cba      	ldrb	r2, [r7, r2]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 800f068:	f8bc 7006 	ldrh.w	r7, [ip, #6]
 800f06c:	4462      	add	r2, ip
 800f06e:	44bc      	add	ip, r7
      while (p_desc < p_desc_end)
 800f070:	4594      	cmp	ip, r2
 800f072:	d804      	bhi.n	800f07e <tud_audio_buffer_and_schedule_control_xfer+0x102>
 800f074:	e7d0      	b.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800f076:	7817      	ldrb	r7, [r2, #0]
 800f078:	443a      	add	r2, r7
 800f07a:	4594      	cmp	ip, r2
 800f07c:	d9cc      	bls.n	800f018 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800f07e:	78d7      	ldrb	r7, [r2, #3]
 800f080:	4287      	cmp	r7, r0
 800f082:	d1f8      	bne.n	800f076 <tud_audio_buffer_and_schedule_control_xfer+0xfa>
 800f084:	e7ab      	b.n	800efde <tud_audio_buffer_and_schedule_control_xfer+0x62>
 800f086:	bf00      	nop
 800f088:	2400c508 	.word	0x2400c508

0800f08c <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 800f08c:	b510      	push	{r4, lr}
 800f08e:	4604      	mov	r4, r0

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 800f090:	f000 fe82 	bl	800fd98 <tud_mounted>
 800f094:	b908      	cbnz	r0, 800f09a <tud_cdc_n_connected+0xe>
 800f096:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
 800f098:	bd10      	pop	{r4, pc}
 800f09a:	f000 fe85 	bl	800fda8 <tud_suspended>
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	d1f9      	bne.n	800f096 <tud_cdc_n_connected+0xa>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 800f0a2:	f44f 7394 	mov.w	r3, #296	; 0x128
 800f0a6:	4803      	ldr	r0, [pc, #12]	; (800f0b4 <tud_cdc_n_connected+0x28>)
 800f0a8:	fb03 0004 	mla	r0, r3, r4, r0
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800f0ac:	7900      	ldrb	r0, [r0, #4]
 800f0ae:	f000 0001 	and.w	r0, r0, #1
}
 800f0b2:	bd10      	pop	{r4, pc}
 800f0b4:	2400ce9c 	.word	0x2400ce9c

0800f0b8 <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800f0b8:	f44f 7294 	mov.w	r2, #296	; 0x128
{
 800f0bc:	b508      	push	{r3, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800f0be:	4b03      	ldr	r3, [pc, #12]	; (800f0cc <tud_cdc_n_available+0x14>)
 800f0c0:	fb02 3000 	mla	r0, r2, r0, r3
 800f0c4:	3010      	adds	r0, #16
 800f0c6:	f000 fa87 	bl	800f5d8 <tu_fifo_count>
}
 800f0ca:	bd08      	pop	{r3, pc}
 800f0cc:	2400ce9c 	.word	0x2400ce9c

0800f0d0 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 800f0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d4:	f44f 7594 	mov.w	r5, #296	; 0x128
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 800f0d8:	4f1a      	ldr	r7, [pc, #104]	; (800f144 <tud_cdc_n_read+0x74>)
 800f0da:	b292      	uxth	r2, r2
 800f0dc:	fb00 f505 	mul.w	r5, r0, r5
 800f0e0:	f105 0410 	add.w	r4, r5, #16
 800f0e4:	443c      	add	r4, r7
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f000 faf2 	bl	800f6d0 <tu_fifo_read_n>
 800f0ec:	4606      	mov	r6, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f000 fa92 	bl	800f618 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800f0f4:	283f      	cmp	r0, #63	; 0x3f
 800f0f6:	d802      	bhi.n	800f0fe <tud_cdc_n_read+0x2e>
  _prep_out_transaction(p_cdc);
  return num_read;
}
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800f0fe:	eb07 0805 	add.w	r8, r7, r5
 800f102:	2000      	movs	r0, #0
 800f104:	f898 1003 	ldrb.w	r1, [r8, #3]
 800f108:	f001 fc3a 	bl	8010980 <usbd_edpt_claim>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d0f3      	beq.n	800f0f8 <tud_cdc_n_read+0x28>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f110:	4620      	mov	r0, r4
 800f112:	f000 fa81 	bl	800f618 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800f116:	283f      	cmp	r0, #63	; 0x3f
 800f118:	d90b      	bls.n	800f132 <tud_cdc_n_read+0x62>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800f11a:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 800f11e:	2340      	movs	r3, #64	; 0x40
 800f120:	f898 1003 	ldrb.w	r1, [r8, #3]
 800f124:	2000      	movs	r0, #0
 800f126:	443a      	add	r2, r7
 800f128:	f001 fc46 	bl	80109b8 <usbd_edpt_xfer>
}
 800f12c:	4630      	mov	r0, r6
 800f12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800f132:	f898 1003 	ldrb.w	r1, [r8, #3]
 800f136:	2000      	movs	r0, #0
 800f138:	f001 fc30 	bl	801099c <usbd_edpt_release>
}
 800f13c:	4630      	mov	r0, r6
 800f13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f142:	bf00      	nop
 800f144:	2400ce9c 	.word	0x2400ce9c

0800f148 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 800f148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f14c:	4604      	mov	r4, r0
 800f14e:	f000 fe23 	bl	800fd98 <tud_mounted>
 800f152:	b910      	cbnz	r0, 800f15a <tud_cdc_n_write_flush+0x12>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 800f154:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
 800f156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f15a:	f000 fe25 	bl	800fda8 <tud_suspended>
 800f15e:	4606      	mov	r6, r0
 800f160:	2800      	cmp	r0, #0
 800f162:	d1f7      	bne.n	800f154 <tud_cdc_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 800f164:	f44f 7094 	mov.w	r0, #296	; 0x128
 800f168:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f1cc <tud_cdc_n_write_flush+0x84>
 800f16c:	fb00 f404 	mul.w	r4, r0, r4
 800f170:	f104 051c 	add.w	r5, r4, #28
 800f174:	4445      	add	r5, r8
 800f176:	4628      	mov	r0, r5
 800f178:	f000 fa2e 	bl	800f5d8 <tu_fifo_count>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d0e9      	beq.n	800f154 <tud_cdc_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 800f180:	eb08 0704 	add.w	r7, r8, r4
 800f184:	4630      	mov	r0, r6
 800f186:	78b9      	ldrb	r1, [r7, #2]
 800f188:	f001 fbfa 	bl	8010980 <usbd_edpt_claim>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d0e1      	beq.n	800f154 <tud_cdc_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 800f190:	34e8      	adds	r4, #232	; 0xe8
 800f192:	4628      	mov	r0, r5
 800f194:	2240      	movs	r2, #64	; 0x40
 800f196:	4444      	add	r4, r8
 800f198:	4621      	mov	r1, r4
 800f19a:	f000 fa99 	bl	800f6d0 <tu_fifo_read_n>
  if ( count )
 800f19e:	4605      	mov	r5, r0
 800f1a0:	b170      	cbz	r0, 800f1c0 <tud_cdc_n_write_flush+0x78>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	4622      	mov	r2, r4
 800f1a6:	78b9      	ldrb	r1, [r7, #2]
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	f001 fc05 	bl	80109b8 <usbd_edpt_xfer>
 800f1ae:	b950      	cbnz	r0, 800f1c6 <tud_cdc_n_write_flush+0x7e>
 800f1b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f1b4:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f1b8:	07db      	lsls	r3, r3, #31
 800f1ba:	d5cb      	bpl.n	800f154 <tud_cdc_n_write_flush+0xc>
 800f1bc:	be00      	bkpt	0x0000
 800f1be:	e7ca      	b.n	800f156 <tud_cdc_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800f1c0:	78b9      	ldrb	r1, [r7, #2]
 800f1c2:	f001 fbeb 	bl	801099c <usbd_edpt_release>
    return 0;
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	e7c5      	b.n	800f156 <tud_cdc_n_write_flush+0xe>
 800f1ca:	bf00      	nop
 800f1cc:	2400ce9c 	.word	0x2400ce9c

0800f1d0 <tud_cdc_n_write>:
{
 800f1d0:	b538      	push	{r3, r4, r5, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800f1d2:	f44f 7394 	mov.w	r3, #296	; 0x128
 800f1d6:	4c0b      	ldr	r4, [pc, #44]	; (800f204 <tud_cdc_n_write+0x34>)
 800f1d8:	b292      	uxth	r2, r2
{
 800f1da:	4605      	mov	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800f1dc:	fb03 4400 	mla	r4, r3, r0, r4
 800f1e0:	341c      	adds	r4, #28
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f000 fbc6 	bl	800f974 <tu_fifo_write_n>
 800f1e8:	4603      	mov	r3, r0
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800f1ea:	4620      	mov	r0, r4
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 800f1ec:	461c      	mov	r4, r3
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 800f1ee:	f000 f9f3 	bl	800f5d8 <tu_fifo_count>
 800f1f2:	283f      	cmp	r0, #63	; 0x3f
 800f1f4:	d801      	bhi.n	800f1fa <tud_cdc_n_write+0x2a>
}
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	bd38      	pop	{r3, r4, r5, pc}
    tud_cdc_n_write_flush(itf);
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f7ff ffa4 	bl	800f148 <tud_cdc_n_write_flush>
}
 800f200:	4620      	mov	r0, r4
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	2400ce9c 	.word	0x2400ce9c

0800f208 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 800f208:	b510      	push	{r4, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800f20a:	4c12      	ldr	r4, [pc, #72]	; (800f254 <cdcd_init+0x4c>)
{
 800f20c:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800f20e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f212:	2100      	movs	r1, #0
 800f214:	4620      	mov	r0, r4
 800f216:	f002 fec9 	bl	8011fac <memset>
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f21a:	2300      	movs	r3, #0
    p_cdc->wanted_char = (char) -1;
 800f21c:	21ff      	movs	r1, #255	; 0xff
    p_cdc->line_coding.bit_rate  = 115200;
 800f21e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    p_cdc->line_coding.data_bits = 8;
 800f222:	2008      	movs	r0, #8
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f224:	9300      	str	r3, [sp, #0]
    p_cdc->wanted_char = (char) -1;
 800f226:	7161      	strb	r1, [r4, #5]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f228:	2301      	movs	r3, #1
 800f22a:	f104 0128 	add.w	r1, r4, #40	; 0x28
    p_cdc->line_coding.bit_rate  = 115200;
 800f22e:	60a2      	str	r2, [r4, #8]
    p_cdc->line_coding.data_bits = 8;
 800f230:	73a0      	strb	r0, [r4, #14]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800f232:	2240      	movs	r2, #64	; 0x40
 800f234:	f104 0010 	add.w	r0, r4, #16
 800f238:	f000 f9b4 	bl	800f5a4 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 800f23c:	2301      	movs	r3, #1
 800f23e:	2240      	movs	r2, #64	; 0x40
 800f240:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800f244:	f104 001c 	add.w	r0, r4, #28
 800f248:	9300      	str	r3, [sp, #0]
 800f24a:	f000 f9ab 	bl	800f5a4 <tu_fifo_config>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 800f24e:	b002      	add	sp, #8
 800f250:	bd10      	pop	{r4, pc}
 800f252:	bf00      	nop
 800f254:	2400ce9c 	.word	0x2400ce9c

0800f258 <cdcd_reset>:

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800f258:	4b09      	ldr	r3, [pc, #36]	; (800f280 <cdcd_reset+0x28>)
 800f25a:	2200      	movs	r2, #0
{
 800f25c:	b510      	push	{r4, lr}
    tu_fifo_clear(&p_cdc->rx_ff);
    tu_fifo_clear(&p_cdc->tx_ff);
 800f25e:	f103 041c 	add.w	r4, r3, #28
    tu_fifo_clear(&p_cdc->rx_ff);
 800f262:	f103 0010 	add.w	r0, r3, #16
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800f266:	601a      	str	r2, [r3, #0]
 800f268:	711a      	strb	r2, [r3, #4]
    tu_fifo_clear(&p_cdc->rx_ff);
 800f26a:	f000 fd1d 	bl	800fca8 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 800f26e:	4620      	mov	r0, r4
 800f270:	f000 fd1a 	bl	800fca8 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800f274:	4620      	mov	r0, r4
 800f276:	2101      	movs	r1, #1
  }
}
 800f278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 800f27c:	f000 bd1a 	b.w	800fcb4 <tu_fifo_set_overwritable>
 800f280:	2400ce9c 	.word	0x2400ce9c

0800f284 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800f284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800f288:	794b      	ldrb	r3, [r1, #5]
{
 800f28a:	b082      	sub	sp, #8
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800f28c:	2b02      	cmp	r3, #2
 800f28e:	d102      	bne.n	800f296 <cdcd_open+0x12>
 800f290:	798b      	ldrb	r3, [r1, #6]
 800f292:	2b02      	cmp	r3, #2
 800f294:	d004      	beq.n	800f2a0 <cdcd_open+0x1c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
      break;
    }
  }
  TU_ASSERT(p_cdc, 0);
 800f296:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
 800f298:	4628      	mov	r0, r5
 800f29a:	b002      	add	sp, #8
 800f29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 800f2a0:	4e32      	ldr	r6, [pc, #200]	; (800f36c <cdcd_open+0xe8>)
 800f2a2:	78b3      	ldrb	r3, [r6, #2]
 800f2a4:	b13b      	cbz	r3, 800f2b6 <cdcd_open+0x32>
  TU_ASSERT(p_cdc, 0);
 800f2a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f2aa:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800f2ae:	07db      	lsls	r3, r3, #31
 800f2b0:	d5f1      	bpl.n	800f296 <cdcd_open+0x12>
 800f2b2:	be00      	bkpt	0x0000
 800f2b4:	e7ef      	b.n	800f296 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800f2b6:	788b      	ldrb	r3, [r1, #2]
 800f2b8:	4607      	mov	r7, r0
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800f2ba:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800f2bc:	7033      	strb	r3, [r6, #0]
 800f2be:	780c      	ldrb	r4, [r1, #0]
 800f2c0:	440c      	add	r4, r1
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f2c2:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800f2c4:	2924      	cmp	r1, #36	; 0x24
 800f2c6:	d10b      	bne.n	800f2e0 <cdcd_open+0x5c>
 800f2c8:	2a08      	cmp	r2, #8
 800f2ca:	d802      	bhi.n	800f2d2 <cdcd_open+0x4e>
 800f2cc:	e00f      	b.n	800f2ee <cdcd_open+0x6a>
 800f2ce:	42aa      	cmp	r2, r5
 800f2d0:	d30d      	bcc.n	800f2ee <cdcd_open+0x6a>
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f2d2:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f2d4:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
 800f2d6:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f2d8:	7861      	ldrb	r1, [r4, #1]
 800f2da:	b29d      	uxth	r5, r3
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800f2dc:	2924      	cmp	r1, #36	; 0x24
 800f2de:	d0f6      	beq.n	800f2ce <cdcd_open+0x4a>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800f2e0:	2905      	cmp	r1, #5
 800f2e2:	d01b      	beq.n	800f31c <cdcd_open+0x98>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800f2e4:	2904      	cmp	r1, #4
 800f2e6:	d102      	bne.n	800f2ee <cdcd_open+0x6a>
 800f2e8:	7963      	ldrb	r3, [r4, #5]
 800f2ea:	2b0a      	cmp	r3, #10
 800f2ec:	d029      	beq.n	800f342 <cdcd_open+0xbe>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f2ee:	4820      	ldr	r0, [pc, #128]	; (800f370 <cdcd_open+0xec>)
 800f2f0:	f000 f992 	bl	800f618 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800f2f4:	283f      	cmp	r0, #63	; 0x3f
 800f2f6:	d9cf      	bls.n	800f298 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800f2f8:	78f1      	ldrb	r1, [r6, #3]
 800f2fa:	2000      	movs	r0, #0
 800f2fc:	f001 fb40 	bl	8010980 <usbd_edpt_claim>
 800f300:	2800      	cmp	r0, #0
 800f302:	d0c9      	beq.n	800f298 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f304:	481a      	ldr	r0, [pc, #104]	; (800f370 <cdcd_open+0xec>)
 800f306:	f000 f987 	bl	800f618 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800f30a:	283f      	cmp	r0, #63	; 0x3f
 800f30c:	d914      	bls.n	800f338 <cdcd_open+0xb4>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800f30e:	2340      	movs	r3, #64	; 0x40
 800f310:	4a18      	ldr	r2, [pc, #96]	; (800f374 <cdcd_open+0xf0>)
 800f312:	78f1      	ldrb	r1, [r6, #3]
 800f314:	2000      	movs	r0, #0
 800f316:	f001 fb4f 	bl	80109b8 <usbd_edpt_xfer>
 800f31a:	e7bd      	b.n	800f298 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 800f31c:	4621      	mov	r1, r4
 800f31e:	4638      	mov	r0, r7
 800f320:	f001 fb0a 	bl	8010938 <usbd_edpt_open>
 800f324:	2800      	cmp	r0, #0
 800f326:	d0be      	beq.n	800f2a6 <cdcd_open+0x22>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800f328:	78a3      	ldrb	r3, [r4, #2]
 800f32a:	7073      	strb	r3, [r6, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f32c:	7822      	ldrb	r2, [r4, #0]
    drv_len += tu_desc_len(p_desc);
 800f32e:	18ab      	adds	r3, r5, r2
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f330:	4414      	add	r4, r2
 800f332:	b29d      	uxth	r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f334:	7861      	ldrb	r1, [r4, #1]
 800f336:	e7d5      	b.n	800f2e4 <cdcd_open+0x60>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800f338:	78f1      	ldrb	r1, [r6, #3]
 800f33a:	2000      	movs	r0, #0
 800f33c:	f001 fb2e 	bl	801099c <usbd_edpt_release>
    return false;
 800f340:	e7aa      	b.n	800f298 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 800f342:	4b0d      	ldr	r3, [pc, #52]	; (800f378 <cdcd_open+0xf4>)
 800f344:	4638      	mov	r0, r7
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f346:	f894 8000 	ldrb.w	r8, [r4]
 800f34a:	9301      	str	r3, [sp, #4]
 800f34c:	3301      	adds	r3, #1
 800f34e:	eb04 0108 	add.w	r1, r4, r8
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	2302      	movs	r3, #2
 800f356:	461a      	mov	r2, r3
 800f358:	f001 fa98 	bl	801088c <usbd_open_edpt_pair>
 800f35c:	2800      	cmp	r0, #0
 800f35e:	d0a2      	beq.n	800f2a6 <cdcd_open+0x22>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 800f360:	f105 030e 	add.w	r3, r5, #14
 800f364:	fa18 f383 	uxtah	r3, r8, r3
 800f368:	b29d      	uxth	r5, r3
 800f36a:	e7c0      	b.n	800f2ee <cdcd_open+0x6a>
 800f36c:	2400ce9c 	.word	0x2400ce9c
 800f370:	2400ceac 	.word	0x2400ceac
 800f374:	2400cf44 	.word	0x2400cf44
 800f378:	2400ce9e 	.word	0x2400ce9e

0800f37c <cdcd_control_xfer_cb>:
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800f37c:	7813      	ldrb	r3, [r2, #0]
 800f37e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f382:	2b20      	cmp	r3, #32
{
 800f384:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800f386:	d10f      	bne.n	800f3a8 <cdcd_control_xfer_cb+0x2c>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
 800f388:	4694      	mov	ip, r2
 800f38a:	4c33      	ldr	r4, [pc, #204]	; (800f458 <cdcd_control_xfer_cb+0xdc>)
 800f38c:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800f390:	7822      	ldrb	r2, [r4, #0]
 800f392:	429a      	cmp	r2, r3
 800f394:	d108      	bne.n	800f3a8 <cdcd_control_xfer_cb+0x2c>
  }

  switch ( request->bRequest )
 800f396:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800f39a:	3b20      	subs	r3, #32
 800f39c:	2b03      	cmp	r3, #3
 800f39e:	d803      	bhi.n	800f3a8 <cdcd_control_xfer_cb+0x2c>
 800f3a0:	e8df f003 	tbb	[pc, r3]
 800f3a4:	05312816 	.word	0x05312816
 800f3a8:	2400      	movs	r4, #0

    default: return false; // stall unsupported request
  }

  return true;
}
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800f3ae:	2901      	cmp	r1, #1
 800f3b0:	d042      	beq.n	800f438 <cdcd_control_xfer_cb+0xbc>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800f3b2:	4b2a      	ldr	r3, [pc, #168]	; (800f45c <cdcd_control_xfer_cb+0xe0>)
 800f3b4:	f04f 0401 	mov.w	r4, #1
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d042      	beq.n	800f442 <cdcd_control_xfer_cb+0xc6>
 800f3bc:	2903      	cmp	r1, #3
 800f3be:	bf14      	ite	ne
 800f3c0:	2400      	movne	r4, #0
 800f3c2:	f004 0401 	andeq.w	r4, r4, #1
 800f3c6:	2c00      	cmp	r4, #0
 800f3c8:	d13f      	bne.n	800f44a <cdcd_control_xfer_cb+0xce>
  return true;
 800f3ca:	2401      	movs	r4, #1
}
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	bd70      	pop	{r4, r5, r6, pc}
      if (stage == CONTROL_STAGE_SETUP)
 800f3d0:	2901      	cmp	r1, #1
 800f3d2:	d011      	beq.n	800f3f8 <cdcd_control_xfer_cb+0x7c>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800f3d4:	4b22      	ldr	r3, [pc, #136]	; (800f460 <cdcd_control_xfer_cb+0xe4>)
 800f3d6:	f04f 0401 	mov.w	r4, #1
 800f3da:	b3a3      	cbz	r3, 800f446 <cdcd_control_xfer_cb+0xca>
 800f3dc:	2903      	cmp	r1, #3
 800f3de:	bf14      	ite	ne
 800f3e0:	2400      	movne	r4, #0
 800f3e2:	f004 0401 	andeq.w	r4, r4, #1
 800f3e6:	2c00      	cmp	r4, #0
 800f3e8:	d0ef      	beq.n	800f3ca <cdcd_control_xfer_cb+0x4e>
 800f3ea:	491e      	ldr	r1, [pc, #120]	; (800f464 <cdcd_control_xfer_cb+0xe8>)
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	f3af 8000 	nop.w
 800f3f2:	e7da      	b.n	800f3aa <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800f3f4:	2901      	cmp	r1, #1
 800f3f6:	d1e8      	bne.n	800f3ca <cdcd_control_xfer_cb+0x4e>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800f3f8:	2307      	movs	r3, #7
 800f3fa:	4a1a      	ldr	r2, [pc, #104]	; (800f464 <cdcd_control_xfer_cb+0xe8>)
 800f3fc:	4661      	mov	r1, ip
  return true;
 800f3fe:	2401      	movs	r4, #1
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800f400:	f001 fbb6 	bl	8010b70 <tud_control_xfer>
 800f404:	e7d1      	b.n	800f3aa <cdcd_control_xfer_cb+0x2e>
      if (stage == CONTROL_STAGE_SETUP)
 800f406:	2901      	cmp	r1, #1
 800f408:	d016      	beq.n	800f438 <cdcd_control_xfer_cb+0xbc>
      else if (stage == CONTROL_STAGE_ACK)
 800f40a:	2903      	cmp	r1, #3
 800f40c:	d1dd      	bne.n	800f3ca <cdcd_control_xfer_cb+0x4e>
        bool const dtr = tu_bit_test(request->wValue, 0);
 800f40e:	f8bc 5002 	ldrh.w	r5, [ip, #2]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800f412:	4815      	ldr	r0, [pc, #84]	; (800f468 <cdcd_control_xfer_cb+0xec>)
 800f414:	f005 0601 	and.w	r6, r5, #1
        p_cdc->line_state = (uint8_t) request->wValue;
 800f418:	7125      	strb	r5, [r4, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800f41a:	f086 0101 	eor.w	r1, r6, #1
 800f41e:	f000 fc49 	bl	800fcb4 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800f422:	4b12      	ldr	r3, [pc, #72]	; (800f46c <cdcd_control_xfer_cb+0xf0>)
 800f424:	2b00      	cmp	r3, #0
 800f426:	d0d0      	beq.n	800f3ca <cdcd_control_xfer_cb+0x4e>
 800f428:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800f42c:	4631      	mov	r1, r6
 800f42e:	2000      	movs	r0, #0
  return true;
 800f430:	2401      	movs	r4, #1
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800f432:	f7f5 fb5f 	bl	8004af4 <tud_cdc_line_state_cb>
 800f436:	e7b8      	b.n	800f3aa <cdcd_control_xfer_cb+0x2e>
        tud_control_status(rhport, request);
 800f438:	4661      	mov	r1, ip
  return true;
 800f43a:	2401      	movs	r4, #1
        tud_control_status(rhport, request);
 800f43c:	f001 fb7e 	bl	8010b3c <tud_control_status>
 800f440:	e7b3      	b.n	800f3aa <cdcd_control_xfer_cb+0x2e>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800f442:	461c      	mov	r4, r3
 800f444:	e7ba      	b.n	800f3bc <cdcd_control_xfer_cb+0x40>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 800f446:	461c      	mov	r4, r3
 800f448:	e7c8      	b.n	800f3dc <cdcd_control_xfer_cb+0x60>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800f44a:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800f44e:	2000      	movs	r0, #0
 800f450:	f3af 8000 	nop.w
 800f454:	e7a9      	b.n	800f3aa <cdcd_control_xfer_cb+0x2e>
 800f456:	bf00      	nop
 800f458:	2400ce9c 	.word	0x2400ce9c
	...
 800f464:	2400cea4 	.word	0x2400cea4
 800f468:	2400ceb8 	.word	0x2400ceb8
 800f46c:	08004af5 	.word	0x08004af5

0800f470 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800f470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800f474:	4e44      	ldr	r6, [pc, #272]	; (800f588 <cdcd_xfer_cb+0x118>)
{
 800f476:	460c      	mov	r4, r1
 800f478:	4607      	mov	r7, r0
 800f47a:	461d      	mov	r5, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800f47c:	78f2      	ldrb	r2, [r6, #3]
 800f47e:	428a      	cmp	r2, r1
 800f480:	d15e      	bne.n	800f540 <cdcd_xfer_cb+0xd0>
  TU_ASSERT(itf < CFG_TUD_CDC);

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 800f482:	b29a      	uxth	r2, r3
 800f484:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800f488:	f106 0010 	add.w	r0, r6, #16
 800f48c:	f000 fa72 	bl	800f974 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 800f490:	4b3e      	ldr	r3, [pc, #248]	; (800f58c <cdcd_xfer_cb+0x11c>)
 800f492:	b1d3      	cbz	r3, 800f4ca <cdcd_xfer_cb+0x5a>
 800f494:	7973      	ldrb	r3, [r6, #5]
 800f496:	2bff      	cmp	r3, #255	; 0xff
 800f498:	d017      	beq.n	800f4ca <cdcd_xfer_cb+0x5a>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800f49a:	b1b5      	cbz	r5, 800f4ca <cdcd_xfer_cb+0x5a>
 800f49c:	f106 08a7 	add.w	r8, r6, #167	; 0xa7
 800f4a0:	eb08 0a05 	add.w	sl, r8, r5
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800f4a4:	f1a8 0997 	sub.w	r9, r8, #151	; 0x97
 800f4a8:	e002      	b.n	800f4b0 <cdcd_xfer_cb+0x40>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800f4aa:	45d0      	cmp	r8, sl
 800f4ac:	d00d      	beq.n	800f4ca <cdcd_xfer_cb+0x5a>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800f4ae:	7973      	ldrb	r3, [r6, #5]
 800f4b0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d1f8      	bne.n	800f4aa <cdcd_xfer_cb+0x3a>
 800f4b8:	4648      	mov	r0, r9
 800f4ba:	f000 f8a3 	bl	800f604 <tu_fifo_empty>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d1f3      	bne.n	800f4aa <cdcd_xfer_cb+0x3a>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 800f4c2:	7971      	ldrb	r1, [r6, #5]
 800f4c4:	f3af 8000 	nop.w
 800f4c8:	e7ef      	b.n	800f4aa <cdcd_xfer_cb+0x3a>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800f4ca:	4b31      	ldr	r3, [pc, #196]	; (800f590 <cdcd_xfer_cb+0x120>)
 800f4cc:	b123      	cbz	r3, 800f4d8 <cdcd_xfer_cb+0x68>
 800f4ce:	4831      	ldr	r0, [pc, #196]	; (800f594 <cdcd_xfer_cb+0x124>)
 800f4d0:	f000 f898 	bl	800f604 <tu_fifo_empty>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d04f      	beq.n	800f578 <cdcd_xfer_cb+0x108>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f4d8:	482e      	ldr	r0, [pc, #184]	; (800f594 <cdcd_xfer_cb+0x124>)
 800f4da:	f000 f89d 	bl	800f618 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800f4de:	283f      	cmp	r0, #63	; 0x3f
 800f4e0:	d905      	bls.n	800f4ee <cdcd_xfer_cb+0x7e>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800f4e2:	78f1      	ldrb	r1, [r6, #3]
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	f001 fa4b 	bl	8010980 <usbd_edpt_claim>
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d137      	bne.n	800f55e <cdcd_xfer_cb+0xee>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800f4ee:	78b3      	ldrb	r3, [r6, #2]
 800f4f0:	42a3      	cmp	r3, r4
 800f4f2:	d003      	beq.n	800f4fc <cdcd_xfer_cb+0x8c>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 800f4f4:	2401      	movs	r4, #1
}
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 800f4fc:	4b26      	ldr	r3, [pc, #152]	; (800f598 <cdcd_xfer_cb+0x128>)
 800f4fe:	b113      	cbz	r3, 800f506 <cdcd_xfer_cb+0x96>
 800f500:	2000      	movs	r0, #0
 800f502:	f3af 8000 	nop.w
    if ( 0 == tud_cdc_n_write_flush(itf) )
 800f506:	2000      	movs	r0, #0
 800f508:	f7ff fe1e 	bl	800f148 <tud_cdc_n_write_flush>
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d1f1      	bne.n	800f4f4 <cdcd_xfer_cb+0x84>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 800f510:	4822      	ldr	r0, [pc, #136]	; (800f59c <cdcd_xfer_cb+0x12c>)
 800f512:	f000 f861 	bl	800f5d8 <tu_fifo_count>
 800f516:	2d00      	cmp	r5, #0
 800f518:	d0ec      	beq.n	800f4f4 <cdcd_xfer_cb+0x84>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d1ea      	bne.n	800f4f4 <cdcd_xfer_cb+0x84>
 800f51e:	f015 053f 	ands.w	r5, r5, #63	; 0x3f
 800f522:	d1e7      	bne.n	800f4f4 <cdcd_xfer_cb+0x84>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 800f524:	78b1      	ldrb	r1, [r6, #2]
 800f526:	4638      	mov	r0, r7
 800f528:	f001 fa2a 	bl	8010980 <usbd_edpt_claim>
 800f52c:	4604      	mov	r4, r0
 800f52e:	2800      	cmp	r0, #0
 800f530:	d0e0      	beq.n	800f4f4 <cdcd_xfer_cb+0x84>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 800f532:	462b      	mov	r3, r5
 800f534:	462a      	mov	r2, r5
 800f536:	78b1      	ldrb	r1, [r6, #2]
 800f538:	4638      	mov	r0, r7
 800f53a:	f001 fa3d 	bl	80109b8 <usbd_edpt_xfer>
 800f53e:	e7da      	b.n	800f4f6 <cdcd_xfer_cb+0x86>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800f540:	78b3      	ldrb	r3, [r6, #2]
 800f542:	428b      	cmp	r3, r1
 800f544:	d0da      	beq.n	800f4fc <cdcd_xfer_cb+0x8c>
  TU_ASSERT(itf < CFG_TUD_CDC);
 800f546:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f54a:	f8d3 4df0 	ldr.w	r4, [r3, #3568]	; 0xdf0
 800f54e:	f014 0401 	ands.w	r4, r4, #1
 800f552:	d0d0      	beq.n	800f4f6 <cdcd_xfer_cb+0x86>
 800f554:	be00      	bkpt	0x0000
 800f556:	2400      	movs	r4, #0
}
 800f558:	4620      	mov	r0, r4
 800f55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800f55e:	480d      	ldr	r0, [pc, #52]	; (800f594 <cdcd_xfer_cb+0x124>)
 800f560:	f000 f85a 	bl	800f618 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800f564:	283f      	cmp	r0, #63	; 0x3f
 800f566:	d90a      	bls.n	800f57e <cdcd_xfer_cb+0x10e>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800f568:	2340      	movs	r3, #64	; 0x40
 800f56a:	4a0d      	ldr	r2, [pc, #52]	; (800f5a0 <cdcd_xfer_cb+0x130>)
 800f56c:	78f1      	ldrb	r1, [r6, #3]
 800f56e:	2000      	movs	r0, #0
 800f570:	f001 fa22 	bl	80109b8 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
 800f574:	78b3      	ldrb	r3, [r6, #2]
 800f576:	e7bb      	b.n	800f4f0 <cdcd_xfer_cb+0x80>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 800f578:	f7f5 fabe 	bl	8004af8 <tud_cdc_rx_cb>
 800f57c:	e7ac      	b.n	800f4d8 <cdcd_xfer_cb+0x68>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800f57e:	78f1      	ldrb	r1, [r6, #3]
 800f580:	2000      	movs	r0, #0
 800f582:	f001 fa0b 	bl	801099c <usbd_edpt_release>
 800f586:	e7b2      	b.n	800f4ee <cdcd_xfer_cb+0x7e>
 800f588:	2400ce9c 	.word	0x2400ce9c
 800f58c:	00000000 	.word	0x00000000
 800f590:	08004af9 	.word	0x08004af9
 800f594:	2400ceac 	.word	0x2400ceac
 800f598:	00000000 	.word	0x00000000
 800f59c:	2400ceb8 	.word	0x2400ceb8
 800f5a0:	2400cf44 	.word	0x2400cf44

0800f5a4 <tu_fifo_config>:
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800f5a4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
{
 800f5a8:	4684      	mov	ip, r0
 800f5aa:	f89d 0000 	ldrb.w	r0, [sp]
  if (depth > 0x8000) return false;
 800f5ae:	d810      	bhi.n	800f5d2 <tu_fifo_config+0x2e>
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
  f->depth        = depth;
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f5b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
  f->buffer       = (uint8_t*) buffer;
 800f5b4:	f8cc 1000 	str.w	r1, [ip]
  f->overwritable = overwritable;
  f->rd_idx       = 0;
 800f5b8:	2100      	movs	r1, #0
  f->depth        = depth;
 800f5ba:	f8ac 2004 	strh.w	r2, [ip, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f5be:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
  f->wr_idx       = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800f5c2:	2001      	movs	r0, #1
  f->rd_idx       = 0;
 800f5c4:	f8ac 100a 	strh.w	r1, [ip, #10]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800f5c8:	f8ac 3006 	strh.w	r3, [ip, #6]
  f->wr_idx       = 0;
 800f5cc:	f8ac 1008 	strh.w	r1, [ip, #8]
  return true;
 800f5d0:	4770      	bx	lr
  if (depth > 0x8000) return false;
 800f5d2:	2000      	movs	r0, #0
}
 800f5d4:	4770      	bx	lr
 800f5d6:	bf00      	nop

0800f5d8 <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800f5d8:	8903      	ldrh	r3, [r0, #8]
 800f5da:	8942      	ldrh	r2, [r0, #10]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	8880      	ldrh	r0, [r0, #4]
 800f5e0:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d305      	bcc.n	800f5f2 <tu_fifo_count+0x1a>
    return (uint16_t) (wr_idx - rd_idx);
 800f5e6:	1a9b      	subs	r3, r3, r2
 800f5e8:	b29b      	uxth	r3, r3
}
 800f5ea:	4298      	cmp	r0, r3
 800f5ec:	bf28      	it	cs
 800f5ee:	4618      	movcs	r0, r3
 800f5f0:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f5f2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800f5f6:	4413      	add	r3, r2
 800f5f8:	b29b      	uxth	r3, r3
}
 800f5fa:	4298      	cmp	r0, r3
 800f5fc:	bf28      	it	cs
 800f5fe:	4618      	movcs	r0, r3
 800f600:	4770      	bx	lr
 800f602:	bf00      	nop

0800f604 <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return f->wr_idx == f->rd_idx;
 800f604:	8902      	ldrh	r2, [r0, #8]
 800f606:	8943      	ldrh	r3, [r0, #10]
 800f608:	b290      	uxth	r0, r2
 800f60a:	b29b      	uxth	r3, r3
}
 800f60c:	1ac0      	subs	r0, r0, r3
 800f60e:	fab0 f080 	clz	r0, r0
 800f612:	0940      	lsrs	r0, r0, #5
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop

0800f618 <tu_fifo_remaining>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800f618:	8903      	ldrh	r3, [r0, #8]
 800f61a:	8942      	ldrh	r2, [r0, #10]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	8880      	ldrh	r0, [r0, #4]
 800f620:	b292      	uxth	r2, r2
  if (wr_idx >= rd_idx)
 800f622:	4293      	cmp	r3, r2
 800f624:	d306      	bcc.n	800f634 <tu_fifo_remaining+0x1c>
    return (uint16_t) (wr_idx - rd_idx);
 800f626:	1a9b      	subs	r3, r3, r2
 800f628:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800f62a:	4298      	cmp	r0, r3
 800f62c:	d908      	bls.n	800f640 <tu_fifo_remaining+0x28>
 800f62e:	1ac0      	subs	r0, r0, r3
 800f630:	b280      	uxth	r0, r0
 800f632:	4770      	bx	lr
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f634:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800f638:	4413      	add	r3, r2
 800f63a:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800f63c:	4298      	cmp	r0, r3
 800f63e:	d8f6      	bhi.n	800f62e <tu_fifo_remaining+0x16>
 800f640:	2000      	movs	r0, #0
}
 800f642:	4770      	bx	lr

0800f644 <tu_fifo_read>:
{
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f644:	f8b0 c008 	ldrh.w	ip, [r0, #8]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800f648:	8882      	ldrh	r2, [r0, #4]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f64a:	fa1f fc8c 	uxth.w	ip, ip
{
 800f64e:	b538      	push	{r3, r4, r5, lr}
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f650:	8943      	ldrh	r3, [r0, #10]
{
 800f652:	4604      	mov	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800f654:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 800f656:	459c      	cmp	ip, r3
 800f658:	d32b      	bcc.n	800f6b2 <tu_fifo_read+0x6e>
    return (uint16_t) (wr_idx - rd_idx);
 800f65a:	ebac 0503 	sub.w	r5, ip, r3
 800f65e:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800f660:	b368      	cbz	r0, 800f6be <tu_fifo_read+0x7a>
  if ( cnt > f->depth )
 800f662:	4282      	cmp	r2, r0
 800f664:	d20b      	bcs.n	800f67e <tu_fifo_read+0x3a>
  if ( wr_idx >= f->depth )
 800f666:	4594      	cmp	ip, r2
    rd_idx = wr_idx - f->depth;
 800f668:	bf2c      	ite	cs
 800f66a:	ebac 0302 	subcs.w	r3, ip, r2
    rd_idx = wr_idx + f->depth;
 800f66e:	eb0c 0302 	addcc.w	r3, ip, r2
 800f672:	b29b      	uxth	r3, r3
  while ( idx >= depth ) idx -= depth;
 800f674:	429a      	cmp	r2, r3
  f->rd_idx = rd_idx;
 800f676:	8163      	strh	r3, [r4, #10]
  while ( idx >= depth ) idx -= depth;
 800f678:	d803      	bhi.n	800f682 <tu_fifo_read+0x3e>
 800f67a:	1a9b      	subs	r3, r3, r2
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	429a      	cmp	r2, r3
 800f680:	d9fb      	bls.n	800f67a <tu_fifo_read+0x36>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800f682:	88e2      	ldrh	r2, [r4, #6]
 800f684:	4608      	mov	r0, r1
 800f686:	6825      	ldr	r5, [r4, #0]
 800f688:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f68c:	fb02 5103 	mla	r1, r2, r3, r5
 800f690:	f002 fc7e 	bl	8011f90 <memcpy>

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f694:	8961      	ldrh	r1, [r4, #10]
 800f696:	88a2      	ldrh	r2, [r4, #4]
  return true;
 800f698:	2001      	movs	r0, #1
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f69a:	b289      	uxth	r1, r1
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f69c:	1c4b      	adds	r3, r1, #1
 800f69e:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f6a0:	4299      	cmp	r1, r3
 800f6a2:	d90e      	bls.n	800f6c2 <tu_fifo_read+0x7e>
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	fa02 f100 	lsl.w	r1, r2, r0
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800f6aa:	1a5b      	subs	r3, r3, r1
 800f6ac:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f6ae:	8163      	strh	r3, [r4, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 800f6b0:	bd38      	pop	{r3, r4, r5, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f6b2:	ebc3 0542 	rsb	r5, r3, r2, lsl #1
 800f6b6:	4465      	add	r5, ip
 800f6b8:	b2a8      	uxth	r0, r5
  if ( cnt == 0 ) return false;
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	d1d1      	bne.n	800f662 <tu_fifo_read+0x1e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f6be:	8963      	ldrh	r3, [r4, #10]
 800f6c0:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f6c2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800f6c6:	ea4f 0142 	mov.w	r1, r2, lsl #1
 800f6ca:	daee      	bge.n	800f6aa <tu_fifo_read+0x66>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800f6cc:	8163      	strh	r3, [r4, #10]
}
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}

0800f6d0 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800f6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f6d4:	8903      	ldrh	r3, [r0, #8]
{
 800f6d6:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f6d8:	8944      	ldrh	r4, [r0, #10]
{
 800f6da:	4688      	mov	r8, r1
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f6dc:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800f6de:	8885      	ldrh	r5, [r0, #4]
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f6e0:	b2a4      	uxth	r4, r4
  if (wr_idx >= rd_idx)
 800f6e2:	42a3      	cmp	r3, r4
 800f6e4:	d353      	bcc.n	800f78e <tu_fifo_read_n+0xbe>
    return (uint16_t) (wr_idx - rd_idx);
 800f6e6:	1b1f      	subs	r7, r3, r4
 800f6e8:	b2bf      	uxth	r7, r7
  if ( cnt == 0 ) return 0;
 800f6ea:	2f00      	cmp	r7, #0
 800f6ec:	d044      	beq.n	800f778 <tu_fifo_read_n+0xa8>
  if ( cnt > f->depth )
 800f6ee:	42bd      	cmp	r5, r7
 800f6f0:	d33a      	bcc.n	800f768 <tu_fifo_read_n+0x98>
  if ( cnt < n ) n = cnt;
 800f6f2:	42ba      	cmp	r2, r7
 800f6f4:	bf28      	it	cs
 800f6f6:	463a      	movcs	r2, r7
  while ( idx >= depth ) idx -= depth;
 800f6f8:	42a5      	cmp	r5, r4
 800f6fa:	b297      	uxth	r7, r2
 800f6fc:	d803      	bhi.n	800f706 <tu_fifo_read_n+0x36>
 800f6fe:	1b64      	subs	r4, r4, r5
 800f700:	b2a4      	uxth	r4, r4
 800f702:	42a5      	cmp	r5, r4
 800f704:	d9fb      	bls.n	800f6fe <tu_fifo_read_n+0x2e>
  uint16_t const lin_count = f->depth - rd_ptr;
 800f706:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800f708:	88f2      	ldrh	r2, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800f70a:	6831      	ldr	r1, [r6, #0]
  uint16_t const lin_count = f->depth - rd_ptr;
 800f70c:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800f70e:	f3c2 000e 	ubfx	r0, r2, #0, #15
      if ( n <= lin_count )
 800f712:	429f      	cmp	r7, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800f714:	4682      	mov	sl, r0
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800f716:	fb00 1104 	mla	r1, r0, r4, r1
      if ( n <= lin_count )
 800f71a:	d91f      	bls.n	800f75c <tu_fifo_read_n+0x8c>
  uint16_t lin_bytes = lin_count * f->item_size;
 800f71c:	fb13 f300 	smulbb	r3, r3, r0
        memcpy(app_buf, ff_buf, lin_bytes);
 800f720:	4640      	mov	r0, r8
 800f722:	fa1f f983 	uxth.w	r9, r3
 800f726:	464a      	mov	r2, r9
 800f728:	f002 fc32 	bl	8011f90 <memcpy>
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800f72c:	1b7a      	subs	r2, r7, r5
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800f72e:	eb08 0009 	add.w	r0, r8, r9
 800f732:	6831      	ldr	r1, [r6, #0]
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800f734:	4422      	add	r2, r4
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800f736:	fb12 f20a 	smulbb	r2, r2, sl
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800f73a:	b292      	uxth	r2, r2
 800f73c:	f002 fc28 	bl	8011f90 <memcpy>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f740:	8972      	ldrh	r2, [r6, #10]
 800f742:	88b5      	ldrh	r5, [r6, #4]
 800f744:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f746:	19d3      	adds	r3, r2, r7
 800f748:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d916      	bls.n	800f77c <tu_fifo_read_n+0xac>
 800f74e:	006a      	lsls	r2, r5, #1
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800f750:	1a9b      	subs	r3, r3, r2
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}
 800f752:	4638      	mov	r0, r7
 800f754:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f756:	8173      	strh	r3, [r6, #10]
}
 800f758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy(app_buf, ff_buf, n*f->item_size);
 800f75c:	fb00 f207 	mul.w	r2, r0, r7
 800f760:	4640      	mov	r0, r8
 800f762:	f002 fc15 	bl	8011f90 <memcpy>
 800f766:	e7eb      	b.n	800f740 <tu_fifo_read_n+0x70>
  if ( wr_idx >= f->depth )
 800f768:	42ab      	cmp	r3, r5
  f->rd_idx = rd_idx;
 800f76a:	462f      	mov	r7, r5
    rd_idx = wr_idx - f->depth;
 800f76c:	bf2c      	ite	cs
 800f76e:	1b5b      	subcs	r3, r3, r5
    rd_idx = wr_idx + f->depth;
 800f770:	195b      	addcc	r3, r3, r5
 800f772:	b29c      	uxth	r4, r3
  f->rd_idx = rd_idx;
 800f774:	8174      	strh	r4, [r6, #10]
    cnt = f->depth;
 800f776:	e7bc      	b.n	800f6f2 <tu_fifo_read_n+0x22>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f778:	8973      	ldrh	r3, [r6, #10]
 800f77a:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f77c:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 800f780:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800f784:	dae4      	bge.n	800f750 <tu_fifo_read_n+0x80>
}
 800f786:	4638      	mov	r0, r7
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f788:	8173      	strh	r3, [r6, #10]
}
 800f78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f78e:	ebc4 0745 	rsb	r7, r4, r5, lsl #1
 800f792:	441f      	add	r7, r3
 800f794:	b2bf      	uxth	r7, r7
 800f796:	e7a8      	b.n	800f6ea <tu_fifo_read_n+0x1a>

0800f798 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800f798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79c:	460f      	mov	r7, r1
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f79e:	8901      	ldrh	r1, [r0, #8]
 800f7a0:	8943      	ldrh	r3, [r0, #10]
{
 800f7a2:	b083      	sub	sp, #12
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f7a4:	b289      	uxth	r1, r1
{
 800f7a6:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800f7a8:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800f7aa:	8884      	ldrh	r4, [r0, #4]
  if (wr_idx >= rd_idx)
 800f7ac:	4299      	cmp	r1, r3
 800f7ae:	f0c0 80a0 	bcc.w	800f8f2 <tu_fifo_read_n_const_addr_full_words+0x15a>
    return (uint16_t) (wr_idx - rd_idx);
 800f7b2:	1acd      	subs	r5, r1, r3
 800f7b4:	ea4f 0944 	mov.w	r9, r4, lsl #1
 800f7b8:	b2ad      	uxth	r5, r5
  if ( cnt == 0 ) return 0;
 800f7ba:	2d00      	cmp	r5, #0
 800f7bc:	f000 8090 	beq.w	800f8e0 <tu_fifo_read_n_const_addr_full_words+0x148>
  if ( cnt > f->depth )
 800f7c0:	42ac      	cmp	r4, r5
 800f7c2:	f0c0 8085 	bcc.w	800f8d0 <tu_fifo_read_n_const_addr_full_words+0x138>
  if ( cnt < n ) n = cnt;
 800f7c6:	4295      	cmp	r5, r2
 800f7c8:	bf28      	it	cs
 800f7ca:	4615      	movcs	r5, r2
  while ( idx >= depth ) idx -= depth;
 800f7cc:	429c      	cmp	r4, r3
 800f7ce:	d803      	bhi.n	800f7d8 <tu_fifo_read_n_const_addr_full_words+0x40>
 800f7d0:	1b1b      	subs	r3, r3, r4
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	429c      	cmp	r4, r3
 800f7d6:	d9fb      	bls.n	800f7d0 <tu_fifo_read_n_const_addr_full_words+0x38>
  uint16_t const lin_count = f->depth - rd_ptr;
 800f7d8:	1ae2      	subs	r2, r4, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800f7da:	f8b6 e006 	ldrh.w	lr, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800f7de:	f8d6 8000 	ldr.w	r8, [r6]
  uint16_t const lin_count = f->depth - rd_ptr;
 800f7e2:	b292      	uxth	r2, r2
  uint16_t lin_bytes = lin_count * f->item_size;
 800f7e4:	f3ce 0c0e 	ubfx	ip, lr, #0, #15
      if ( n <= lin_count )
 800f7e8:	4295      	cmp	r5, r2
  uint16_t lin_bytes = lin_count * f->item_size;
 800f7ea:	46e6      	mov	lr, ip
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800f7ec:	fb0c 8c03 	mla	ip, ip, r3, r8
      if ( n <= lin_count )
 800f7f0:	d81e      	bhi.n	800f830 <tu_fifo_read_n_const_addr_full_words+0x98>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800f7f2:	fb15 f40e 	smulbb	r4, r5, lr
  uint16_t full_words = len >> 2;
 800f7f6:	f3c4 018d 	ubfx	r1, r4, #2, #14
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800f7fa:	b2a2      	uxth	r2, r4
  while(full_words--)
 800f7fc:	2900      	cmp	r1, #0
 800f7fe:	d07f      	beq.n	800f900 <tu_fifo_read_n_const_addr_full_words+0x168>
 800f800:	eb0c 0181 	add.w	r1, ip, r1, lsl #2


#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800f804:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f808:	4561      	cmp	r1, ip
    *reg_tx = tu_unaligned_read32(ff_buf);
 800f80a:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800f80c:	d1fa      	bne.n	800f804 <tu_fifo_read_n_const_addr_full_words+0x6c>
  if ( bytes_rem )
 800f80e:	f012 0203 	ands.w	r2, r2, #3
 800f812:	d155      	bne.n	800f8c0 <tu_fifo_read_n_const_addr_full_words+0x128>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f814:	8972      	ldrh	r2, [r6, #10]
 800f816:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f818:	1953      	adds	r3, r2, r5
 800f81a:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d961      	bls.n	800f8e4 <tu_fifo_read_n_const_addr_full_words+0x14c>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800f820:	eba3 0309 	sub.w	r3, r3, r9
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 800f824:	4628      	mov	r0, r5
 800f826:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f828:	8173      	strh	r3, [r6, #10]
}
 800f82a:	b003      	add	sp, #12
 800f82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint16_t lin_bytes = lin_count * f->item_size;
 800f830:	fb12 f20e 	smulbb	r2, r2, lr
 800f834:	b292      	uxth	r2, r2
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800f836:	f022 0003 	bic.w	r0, r2, #3
 800f83a:	fa1f fa80 	uxth.w	sl, r0
  while(full_words--)
 800f83e:	ea4f 0b90 	mov.w	fp, r0, lsr #2
 800f842:	b138      	cbz	r0, 800f854 <tu_fifo_read_n_const_addr_full_words+0xbc>
 800f844:	eb0c 0b8b 	add.w	fp, ip, fp, lsl #2
 800f848:	4660      	mov	r0, ip
 800f84a:	f850 1b04 	ldr.w	r1, [r0], #4
 800f84e:	4583      	cmp	fp, r0
    *reg_tx = tu_unaligned_read32(ff_buf);
 800f850:	6039      	str	r1, [r7, #0]
  while(full_words--)
 800f852:	d1fa      	bne.n	800f84a <tu_fifo_read_n_const_addr_full_words+0xb2>
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800f854:	1b2c      	subs	r4, r5, r4
        if (rem > 0)
 800f856:	f012 0b03 	ands.w	fp, r2, #3
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800f85a:	441c      	add	r4, r3
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800f85c:	fb14 f40e 	smulbb	r4, r4, lr
 800f860:	b2a4      	uxth	r4, r4
        if (rem > 0)
 800f862:	d01f      	beq.n	800f8a4 <tu_fifo_read_n_const_addr_full_words+0x10c>
          while(rem--) *dst_u8++ = *ff_buf++;
 800f864:	eb0c 010a 	add.w	r1, ip, sl
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800f868:	f1cb 0a04 	rsb	sl, fp, #4
          uint32_t tmp32=0;
 800f86c:	2300      	movs	r3, #0
          while(rem--) *dst_u8++ = *ff_buf++;
 800f86e:	465a      	mov	r2, fp
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800f870:	fa1f fa8a 	uxth.w	sl, sl
 800f874:	a801      	add	r0, sp, #4
          uint32_t tmp32=0;
 800f876:	9301      	str	r3, [sp, #4]
 800f878:	45a2      	cmp	sl, r4
 800f87a:	bf28      	it	cs
 800f87c:	46a2      	movcs	sl, r4
          while(rem--) *dst_u8++ = *ff_buf++;
 800f87e:	f002 fb87 	bl	8011f90 <memcpy>
 800f882:	ab01      	add	r3, sp, #4
          wrap_bytes -= remrem;
 800f884:	eba4 040a 	sub.w	r4, r4, sl
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800f888:	fa5f f28a 	uxtb.w	r2, sl
          while(rem--) *dst_u8++ = *ff_buf++;
 800f88c:	eb03 000b 	add.w	r0, r3, fp
          wrap_bytes -= remrem;
 800f890:	b2a4      	uxth	r4, r4
          while(remrem--) *dst_u8++ = *ff_buf++;
 800f892:	f1ba 0f00 	cmp.w	sl, #0
 800f896:	d003      	beq.n	800f8a0 <tu_fifo_read_n_const_addr_full_words+0x108>
 800f898:	4641      	mov	r1, r8
 800f89a:	4490      	add	r8, r2
 800f89c:	f002 fb78 	bl	8011f90 <memcpy>
          *reg_tx = tmp32;
 800f8a0:	9b01      	ldr	r3, [sp, #4]
 800f8a2:	603b      	str	r3, [r7, #0]
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 800f8a4:	2c00      	cmp	r4, #0
 800f8a6:	d0b5      	beq.n	800f814 <tu_fifo_read_n_const_addr_full_words+0x7c>
  while(full_words--)
 800f8a8:	08a1      	lsrs	r1, r4, #2
 800f8aa:	d02b      	beq.n	800f904 <tu_fifo_read_n_const_addr_full_words+0x16c>
 800f8ac:	eb08 0181 	add.w	r1, r8, r1, lsl #2
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800f8b0:	f858 3b04 	ldr.w	r3, [r8], #4
 800f8b4:	4588      	cmp	r8, r1
    *reg_tx = tu_unaligned_read32(ff_buf);
 800f8b6:	603b      	str	r3, [r7, #0]
  while(full_words--)
 800f8b8:	d1fa      	bne.n	800f8b0 <tu_fifo_read_n_const_addr_full_words+0x118>
  if ( bytes_rem )
 800f8ba:	f014 0203 	ands.w	r2, r4, #3
 800f8be:	d0a9      	beq.n	800f814 <tu_fifo_read_n_const_addr_full_words+0x7c>
    uint32_t tmp32 = 0;
 800f8c0:	2300      	movs	r3, #0
    memcpy(&tmp32, ff_buf, bytes_rem);
 800f8c2:	a801      	add	r0, sp, #4
    uint32_t tmp32 = 0;
 800f8c4:	9301      	str	r3, [sp, #4]
    memcpy(&tmp32, ff_buf, bytes_rem);
 800f8c6:	f002 fb63 	bl	8011f90 <memcpy>
    *reg_tx = tmp32;
 800f8ca:	9b01      	ldr	r3, [sp, #4]
 800f8cc:	603b      	str	r3, [r7, #0]
 800f8ce:	e7a1      	b.n	800f814 <tu_fifo_read_n_const_addr_full_words+0x7c>
  if ( wr_idx >= f->depth )
 800f8d0:	42a1      	cmp	r1, r4
  f->rd_idx = rd_idx;
 800f8d2:	4625      	mov	r5, r4
    rd_idx = wr_idx - f->depth;
 800f8d4:	bf2c      	ite	cs
 800f8d6:	1b0b      	subcs	r3, r1, r4
    rd_idx = wr_idx + f->depth;
 800f8d8:	190b      	addcc	r3, r1, r4
 800f8da:	b29b      	uxth	r3, r3
  f->rd_idx = rd_idx;
 800f8dc:	8173      	strh	r3, [r6, #10]
    cnt = f->depth;
 800f8de:	e772      	b.n	800f7c6 <tu_fifo_read_n_const_addr_full_words+0x2e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f8e0:	8973      	ldrh	r3, [r6, #10]
 800f8e2:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f8e4:	454b      	cmp	r3, r9
 800f8e6:	da9b      	bge.n	800f820 <tu_fifo_read_n_const_addr_full_words+0x88>
}
 800f8e8:	4628      	mov	r0, r5
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800f8ea:	8173      	strh	r3, [r6, #10]
}
 800f8ec:	b003      	add	sp, #12
 800f8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f8f2:	ebc3 0544 	rsb	r5, r3, r4, lsl #1
 800f8f6:	ea4f 0944 	mov.w	r9, r4, lsl #1
 800f8fa:	440d      	add	r5, r1
 800f8fc:	b2ad      	uxth	r5, r5
 800f8fe:	e75c      	b.n	800f7ba <tu_fifo_read_n_const_addr_full_words+0x22>
  while(full_words--)
 800f900:	4661      	mov	r1, ip
 800f902:	e784      	b.n	800f80e <tu_fifo_read_n_const_addr_full_words+0x76>
 800f904:	4641      	mov	r1, r8
 800f906:	e7d8      	b.n	800f8ba <tu_fifo_read_n_const_addr_full_words+0x122>

0800f908 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800f908:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 800f90a:	8905      	ldrh	r5, [r0, #8]
{
 800f90c:	4604      	mov	r4, r0
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800f90e:	8903      	ldrh	r3, [r0, #8]
 800f910:	8940      	ldrh	r0, [r0, #10]
  uint16_t const wr_idx = f->wr_idx;
 800f912:	b2ad      	uxth	r5, r5
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800f914:	b29b      	uxth	r3, r3
 800f916:	88a2      	ldrh	r2, [r4, #4]
 800f918:	b280      	uxth	r0, r0
  if (wr_idx >= rd_idx)
 800f91a:	4283      	cmp	r3, r0
 800f91c:	d320      	bcc.n	800f960 <tu_fifo_write+0x58>
    return (uint16_t) (wr_idx - rd_idx);
 800f91e:	1a1b      	subs	r3, r3, r0
 800f920:	b29b      	uxth	r3, r3

  if ( tu_fifo_full(f) && !f->overwritable )
 800f922:	429a      	cmp	r2, r3
 800f924:	d802      	bhi.n	800f92c <tu_fifo_write+0x24>
 800f926:	79e0      	ldrb	r0, [r4, #7]
 800f928:	09c0      	lsrs	r0, r0, #7
 800f92a:	d018      	beq.n	800f95e <tu_fifo_write+0x56>
  while ( idx >= depth ) idx -= depth;
 800f92c:	4295      	cmp	r5, r2
 800f92e:	462b      	mov	r3, r5
 800f930:	d303      	bcc.n	800f93a <tu_fifo_write+0x32>
 800f932:	1a9b      	subs	r3, r3, r2
 800f934:	b29b      	uxth	r3, r3
 800f936:	4293      	cmp	r3, r2
 800f938:	d2fb      	bcs.n	800f932 <tu_fifo_write+0x2a>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800f93a:	88e2      	ldrh	r2, [r4, #6]
 800f93c:	6820      	ldr	r0, [r4, #0]
 800f93e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f942:	fb02 0003 	mla	r0, r2, r3, r0
 800f946:	f002 fb23 	bl	8011f90 <memcpy>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f94a:	1c6b      	adds	r3, r5, #1

    // Write data
    _ff_push(f, data, wr_ptr);

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800f94c:	88a2      	ldrh	r2, [r4, #4]
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f94e:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f950:	0051      	lsls	r1, r2, #1
 800f952:	429d      	cmp	r5, r3
 800f954:	d909      	bls.n	800f96a <tu_fifo_write+0x62>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800f956:	1a5b      	subs	r3, r3, r1
 800f958:	b29b      	uxth	r3, r3

    ret = true;
 800f95a:	2001      	movs	r0, #1
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800f95c:	8123      	strh	r3, [r4, #8]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 800f95e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f960:	ebc0 0042 	rsb	r0, r0, r2, lsl #1
 800f964:	4403      	add	r3, r0
 800f966:	b29b      	uxth	r3, r3
 800f968:	e7db      	b.n	800f922 <tu_fifo_write+0x1a>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f96a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800f96e:	dbf4      	blt.n	800f95a <tu_fifo_write+0x52>
 800f970:	e7f1      	b.n	800f956 <tu_fifo_write+0x4e>
 800f972:	bf00      	nop

0800f974 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800f974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f978:	b083      	sub	sp, #12
  if ( n == 0 ) return 0;
 800f97a:	2a00      	cmp	r2, #0
 800f97c:	d044      	beq.n	800fa08 <tu_fifo_write_n+0x94>
  uint16_t wr_idx = f->wr_idx;
 800f97e:	8907      	ldrh	r7, [r0, #8]
 800f980:	4606      	mov	r6, r0
  uint16_t rd_idx = f->rd_idx;
 800f982:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 800f984:	79c0      	ldrb	r0, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 800f986:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 800f988:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 800f98a:	09c0      	lsrs	r0, r0, #7
 800f98c:	d142      	bne.n	800fa14 <tu_fifo_write_n+0xa0>
  if (wr_idx >= rd_idx)
 800f98e:	429f      	cmp	r7, r3
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800f990:	88b5      	ldrh	r5, [r6, #4]
  if (wr_idx >= rd_idx)
 800f992:	d255      	bcs.n	800fa40 <tu_fifo_write_n+0xcc>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800f994:	ebc3 0345 	rsb	r3, r3, r5, lsl #1
 800f998:	443b      	add	r3, r7
 800f99a:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800f99c:	429d      	cmp	r5, r3
 800f99e:	d933      	bls.n	800fa08 <tu_fifo_write_n+0x94>
 800f9a0:	eba5 0803 	sub.w	r8, r5, r3
 800f9a4:	f8b6 a006 	ldrh.w	sl, [r6, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800f9a8:	fa1f f888 	uxth.w	r8, r8
 800f9ac:	4590      	cmp	r8, r2
 800f9ae:	bf28      	it	cs
 800f9b0:	4690      	movcs	r8, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800f9b2:	eb08 0907 	add.w	r9, r8, r7
 800f9b6:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 800f9ba:	42bd      	cmp	r5, r7
 800f9bc:	463c      	mov	r4, r7
 800f9be:	d803      	bhi.n	800f9c8 <tu_fifo_write_n+0x54>
 800f9c0:	1b64      	subs	r4, r4, r5
 800f9c2:	b2a4      	uxth	r4, r4
 800f9c4:	42ac      	cmp	r4, r5
 800f9c6:	d2fb      	bcs.n	800f9c0 <tu_fifo_write_n+0x4c>
  uint16_t const lin_count = f->depth - wr_ptr;
 800f9c8:	1b2b      	subs	r3, r5, r4
  uint16_t lin_bytes = lin_count * f->item_size;
 800f9ca:	f3ca 020e 	ubfx	r2, sl, #0, #15
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800f9ce:	6830      	ldr	r0, [r6, #0]
  uint16_t const lin_count = f->depth - wr_ptr;
 800f9d0:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800f9d2:	4692      	mov	sl, r2
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800f9d4:	fb02 0004 	mla	r0, r2, r4, r0
      if(n <= lin_count)
 800f9d8:	4543      	cmp	r3, r8
 800f9da:	d342      	bcc.n	800fa62 <tu_fifo_write_n+0xee>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800f9dc:	fb02 f208 	mul.w	r2, r2, r8
 800f9e0:	f002 fad6 	bl	8011f90 <memcpy>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800f9e4:	88b2      	ldrh	r2, [r6, #4]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800f9e6:	454f      	cmp	r7, r9
 800f9e8:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800f9ec:	d802      	bhi.n	800f9f4 <tu_fifo_write_n+0x80>
 800f9ee:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
 800f9f2:	db03      	blt.n	800f9fc <tu_fifo_write_n+0x88>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800f9f4:	eba9 0903 	sub.w	r9, r9, r3
 800f9f8:	fa1f f989 	uxth.w	r9, r9
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 800f9fc:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800f9fe:	f8a6 9008 	strh.w	r9, [r6, #8]
}
 800fa02:	b003      	add	sp, #12
 800fa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 800fa08:	f04f 0800 	mov.w	r8, #0
}
 800fa0c:	4640      	mov	r0, r8
 800fa0e:	b003      	add	sp, #12
 800fa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 800fa14:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800fa18:	4542      	cmp	r2, r8
 800fa1a:	d214      	bcs.n	800fa46 <tu_fifo_write_n+0xd2>
  if (wr_idx >= rd_idx)
 800fa1c:	429f      	cmp	r7, r3
 800fa1e:	d34e      	bcc.n	800fabe <tu_fifo_write_n+0x14a>
    return (uint16_t) (wr_idx - rd_idx);
 800fa20:	1af8      	subs	r0, r7, r3
 800fa22:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800fa26:	b280      	uxth	r0, r0
      if (overflowable_count + n >= 2*f->depth)
 800fa28:	4410      	add	r0, r2
 800fa2a:	42a0      	cmp	r0, r4
 800fa2c:	da2d      	bge.n	800fa8a <tu_fifo_write_n+0x116>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fa2e:	eb02 0907 	add.w	r9, r2, r7
 800fa32:	4645      	mov	r5, r8
 800fa34:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fa38:	4690      	mov	r8, r2
 800fa3a:	fa1f f989 	uxth.w	r9, r9
 800fa3e:	e7bc      	b.n	800f9ba <tu_fifo_write_n+0x46>
    return (uint16_t) (wr_idx - rd_idx);
 800fa40:	1afb      	subs	r3, r7, r3
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	e7aa      	b.n	800f99c <tu_fifo_write_n+0x28>
        buf8 += (n - f->depth) * f->item_size;
 800fa46:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fa4a:	eba2 0208 	sub.w	r2, r2, r8
 800fa4e:	f3ca 000e 	ubfx	r0, sl, #0, #15
 800fa52:	fb00 1102 	mla	r1, r0, r2, r1
  if (n)
 800fa56:	f1b8 0f00 	cmp.w	r8, #0
 800fa5a:	d0d7      	beq.n	800fa0c <tu_fifo_write_n+0x98>
  uint16_t rd_idx = f->rd_idx;
 800fa5c:	461f      	mov	r7, r3
 800fa5e:	4645      	mov	r5, r8
 800fa60:	e7a7      	b.n	800f9b2 <tu_fifo_write_n+0x3e>
  uint16_t lin_bytes = lin_count * f->item_size;
 800fa62:	fb13 f302 	smulbb	r3, r3, r2
        memcpy(ff_buf, app_buf, lin_bytes);
 800fa66:	9101      	str	r1, [sp, #4]
 800fa68:	fa1f fb83 	uxth.w	fp, r3
 800fa6c:	465a      	mov	r2, fp
 800fa6e:	f002 fa8f 	bl	8011f90 <memcpy>
  uint16_t const wrap_count = n - lin_count;
 800fa72:	eba8 0205 	sub.w	r2, r8, r5
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fa76:	9901      	ldr	r1, [sp, #4]
  uint16_t const wrap_count = n - lin_count;
 800fa78:	4422      	add	r2, r4
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fa7a:	6830      	ldr	r0, [r6, #0]
 800fa7c:	4459      	add	r1, fp
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fa7e:	fb12 f20a 	smulbb	r2, r2, sl
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800fa82:	b292      	uxth	r2, r2
 800fa84:	f002 fa84 	bl	8011f90 <memcpy>
 800fa88:	e7ac      	b.n	800f9e4 <tu_fifo_write_n+0x70>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800fa8a:	eb03 0908 	add.w	r9, r3, r8
 800fa8e:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fa92:	eba9 0702 	sub.w	r7, r9, r2
 800fa96:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fa98:	42bb      	cmp	r3, r7
 800fa9a:	d806      	bhi.n	800faaa <tu_fifo_write_n+0x136>
 800fa9c:	42bc      	cmp	r4, r7
 800fa9e:	dd04      	ble.n	800faaa <tu_fifo_write_n+0x136>
 800faa0:	4645      	mov	r5, r8
 800faa2:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800faa6:	4690      	mov	r8, r2
 800faa8:	e787      	b.n	800f9ba <tu_fifo_write_n+0x46>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800faaa:	1b3f      	subs	r7, r7, r4
  uint16_t new_idx = (uint16_t) (idx + offset);
 800faac:	4645      	mov	r5, r8
 800faae:	4690      	mov	r8, r2
 800fab0:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 800fab4:	b2bf      	uxth	r7, r7
 800fab6:	443a      	add	r2, r7
 800fab8:	fa1f f982 	uxth.w	r9, r2
 800fabc:	e77d      	b.n	800f9ba <tu_fifo_write_n+0x46>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fabe:	ebc3 0048 	rsb	r0, r3, r8, lsl #1
 800fac2:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800fac6:	4438      	add	r0, r7
 800fac8:	b280      	uxth	r0, r0
 800faca:	e7ad      	b.n	800fa28 <tu_fifo_write_n+0xb4>

0800facc <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 800facc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad0:	b085      	sub	sp, #20
  if ( n == 0 ) return 0;
 800fad2:	2a00      	cmp	r2, #0
 800fad4:	d056      	beq.n	800fb84 <tu_fifo_write_n_const_addr_full_words+0xb8>
 800fad6:	460e      	mov	r6, r1
  if ( !f->overwritable )
 800fad8:	79c1      	ldrb	r1, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 800fada:	8907      	ldrh	r7, [r0, #8]
 800fadc:	4605      	mov	r5, r0
  uint16_t rd_idx = f->rd_idx;
 800fade:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 800fae0:	09c9      	lsrs	r1, r1, #7
  uint16_t wr_idx = f->wr_idx;
 800fae2:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 800fae4:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 800fae6:	d153      	bne.n	800fb90 <tu_fifo_write_n_const_addr_full_words+0xc4>
  if (wr_idx >= rd_idx)
 800fae8:	429f      	cmp	r7, r3
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800faea:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  if (wr_idx >= rd_idx)
 800faee:	d263      	bcs.n	800fbb8 <tu_fifo_write_n_const_addr_full_words+0xec>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800faf0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 800faf4:	443b      	add	r3, r7
 800faf6:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 800faf8:	459c      	cmp	ip, r3
 800fafa:	d943      	bls.n	800fb84 <tu_fifo_write_n_const_addr_full_words+0xb8>
 800fafc:	ebac 0803 	sub.w	r8, ip, r3
 800fb00:	fa1f f888 	uxth.w	r8, r8
 800fb04:	4590      	cmp	r8, r2
 800fb06:	bf28      	it	cs
 800fb08:	4690      	movcs	r8, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fb0a:	eb08 0907 	add.w	r9, r8, r7
 800fb0e:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 800fb12:	45bc      	cmp	ip, r7
 800fb14:	463b      	mov	r3, r7
 800fb16:	d804      	bhi.n	800fb22 <tu_fifo_write_n_const_addr_full_words+0x56>
 800fb18:	eba3 030c 	sub.w	r3, r3, ip
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	4563      	cmp	r3, ip
 800fb20:	d2fa      	bcs.n	800fb18 <tu_fifo_write_n_const_addr_full_words+0x4c>
  uint16_t const lin_count = f->depth - wr_ptr;
 800fb22:	ebac 0003 	sub.w	r0, ip, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 800fb26:	88e9      	ldrh	r1, [r5, #6]
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fb28:	f8d5 a000 	ldr.w	sl, [r5]
  uint16_t const lin_count = f->depth - wr_ptr;
 800fb2c:	b280      	uxth	r0, r0
  uint16_t lin_bytes = lin_count * f->item_size;
 800fb2e:	f3c1 0e0e 	ubfx	lr, r1, #0, #15
      if(n <= lin_count)
 800fb32:	4540      	cmp	r0, r8
  uint16_t lin_bytes = lin_count * f->item_size;
 800fb34:	4671      	mov	r1, lr
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800fb36:	fb0e ae03 	mla	lr, lr, r3, sl
      if(n <= lin_count)
 800fb3a:	d346      	bcc.n	800fbca <tu_fifo_write_n_const_addr_full_words+0xfe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800fb3c:	fb11 f208 	smulbb	r2, r1, r8
  uint16_t full_words = len >> 2;
 800fb40:	f3c2 008d 	ubfx	r0, r2, #2, #14
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800fb44:	b292      	uxth	r2, r2
  while(full_words--)
 800fb46:	2800      	cmp	r0, #0
 800fb48:	f000 80ac 	beq.w	800fca4 <tu_fifo_write_n_const_addr_full_words+0x1d8>
 800fb4c:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 800fb50:	6833      	ldr	r3, [r6, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800fb52:	f84e 3b04 	str.w	r3, [lr], #4
  while(full_words--)
 800fb56:	4570      	cmp	r0, lr
 800fb58:	d1fa      	bne.n	800fb50 <tu_fifo_write_n_const_addr_full_words+0x84>
  if ( bytes_rem )
 800fb5a:	f012 0203 	ands.w	r2, r2, #3
 800fb5e:	f040 8099 	bne.w	800fc94 <tu_fifo_write_n_const_addr_full_words+0x1c8>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fb62:	45b9      	cmp	r9, r7
 800fb64:	ea4f 034c 	mov.w	r3, ip, lsl #1
 800fb68:	d302      	bcc.n	800fb70 <tu_fifo_write_n_const_addr_full_words+0xa4>
 800fb6a:	ebb9 0f4c 	cmp.w	r9, ip, lsl #1
 800fb6e:	db03      	blt.n	800fb78 <tu_fifo_write_n_const_addr_full_words+0xac>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fb70:	eba9 0903 	sub.w	r9, r9, r3
 800fb74:	fa1f f989 	uxth.w	r9, r9
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 800fb78:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fb7a:	f8a5 9008 	strh.w	r9, [r5, #8]
}
 800fb7e:	b005      	add	sp, #20
 800fb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 800fb84:	f04f 0800 	mov.w	r8, #0
}
 800fb88:	4640      	mov	r0, r8
 800fb8a:	b005      	add	sp, #20
 800fb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 800fb90:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 800fb94:	4542      	cmp	r2, r8
 800fb96:	d212      	bcs.n	800fbbe <tu_fifo_write_n_const_addr_full_words+0xf2>
  if (wr_idx >= rd_idx)
 800fb98:	429f      	cmp	r7, r3
 800fb9a:	d368      	bcc.n	800fc6e <tu_fifo_write_n_const_addr_full_words+0x1a2>
    return (uint16_t) (wr_idx - rd_idx);
 800fb9c:	1af9      	subs	r1, r7, r3
 800fb9e:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800fba2:	b289      	uxth	r1, r1
      if (overflowable_count + n >= 2*f->depth)
 800fba4:	4411      	add	r1, r2
 800fba6:	4281      	cmp	r1, r0
 800fba8:	da4b      	bge.n	800fc42 <tu_fifo_write_n_const_addr_full_words+0x176>
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fbaa:	eb02 0907 	add.w	r9, r2, r7
 800fbae:	46c4      	mov	ip, r8
 800fbb0:	4690      	mov	r8, r2
 800fbb2:	fa1f f989 	uxth.w	r9, r9
 800fbb6:	e7ac      	b.n	800fb12 <tu_fifo_write_n_const_addr_full_words+0x46>
    return (uint16_t) (wr_idx - rd_idx);
 800fbb8:	1afb      	subs	r3, r7, r3
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	e79c      	b.n	800faf8 <tu_fifo_write_n_const_addr_full_words+0x2c>
  if (n)
 800fbbe:	f1b8 0f00 	cmp.w	r8, #0
 800fbc2:	d0e1      	beq.n	800fb88 <tu_fifo_write_n_const_addr_full_words+0xbc>
 800fbc4:	46c4      	mov	ip, r8
  uint16_t rd_idx = f->rd_idx;
 800fbc6:	461f      	mov	r7, r3
 800fbc8:	e79f      	b.n	800fb0a <tu_fifo_write_n_const_addr_full_words+0x3e>
  uint16_t lin_bytes = lin_count * f->item_size;
 800fbca:	fb10 f001 	smulbb	r0, r0, r1
 800fbce:	b280      	uxth	r0, r0
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800fbd0:	f020 0203 	bic.w	r2, r0, #3
 800fbd4:	b294      	uxth	r4, r2
  while(full_words--)
 800fbd6:	ea4f 0b92 	mov.w	fp, r2, lsr #2
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800fbda:	9401      	str	r4, [sp, #4]
  while(full_words--)
 800fbdc:	b13a      	cbz	r2, 800fbee <tu_fifo_write_n_const_addr_full_words+0x122>
 800fbde:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 800fbe2:	4672      	mov	r2, lr
    tu_unaligned_write32(ff_buf, *reg_rx);
 800fbe4:	6834      	ldr	r4, [r6, #0]
 800fbe6:	f842 4b04 	str.w	r4, [r2], #4
  while(full_words--)
 800fbea:	4593      	cmp	fp, r2
 800fbec:	d1fa      	bne.n	800fbe4 <tu_fifo_write_n_const_addr_full_words+0x118>
  uint16_t const wrap_count = n - lin_count;
 800fbee:	eba8 040c 	sub.w	r4, r8, ip
        if (rem > 0)
 800fbf2:	f010 0b03 	ands.w	fp, r0, #3
  uint16_t const wrap_count = n - lin_count;
 800fbf6:	441c      	add	r4, r3
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800fbf8:	fb14 f401 	smulbb	r4, r4, r1
 800fbfc:	b2a4      	uxth	r4, r4
        if (rem > 0)
 800fbfe:	d01c      	beq.n	800fc3a <tu_fifo_write_n_const_addr_full_words+0x16e>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fc00:	f1cb 0304 	rsb	r3, fp, #4
          while(rem--) *ff_buf++ = *src_u8++;
 800fc04:	9801      	ldr	r0, [sp, #4]
          uint32_t tmp32 = *rx_fifo;
 800fc06:	6832      	ldr	r2, [r6, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 800fc08:	a903      	add	r1, sp, #12
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	4470      	add	r0, lr
          uint32_t tmp32 = *rx_fifo;
 800fc0e:	9203      	str	r2, [sp, #12]
          while(rem--) *ff_buf++ = *src_u8++;
 800fc10:	465a      	mov	r2, fp
 800fc12:	42a3      	cmp	r3, r4
 800fc14:	bf28      	it	cs
 800fc16:	4623      	movcs	r3, r4
          wrap_bytes -= remrem;
 800fc18:	1ae4      	subs	r4, r4, r3
 800fc1a:	9301      	str	r3, [sp, #4]
          while(rem--) *ff_buf++ = *src_u8++;
 800fc1c:	f002 f9b8 	bl	8011f90 <memcpy>
 800fc20:	ab03      	add	r3, sp, #12
          wrap_bytes -= remrem;
 800fc22:	b2a4      	uxth	r4, r4
          ff_buf = f->buffer;
 800fc24:	f8d5 a000 	ldr.w	sl, [r5]
          while(rem--) *ff_buf++ = *src_u8++;
 800fc28:	eb03 010b 	add.w	r1, r3, fp
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800fc2c:	9b01      	ldr	r3, [sp, #4]
 800fc2e:	b2da      	uxtb	r2, r3
          while(remrem--) *ff_buf++ = *src_u8++;
 800fc30:	b11b      	cbz	r3, 800fc3a <tu_fifo_write_n_const_addr_full_words+0x16e>
 800fc32:	4650      	mov	r0, sl
 800fc34:	4492      	add	sl, r2
 800fc36:	f002 f9ab 	bl	8011f90 <memcpy>
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800fc3a:	b9fc      	cbnz	r4, 800fc7c <tu_fifo_write_n_const_addr_full_words+0x1b0>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800fc3c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800fc40:	e78f      	b.n	800fb62 <tu_fifo_write_n_const_addr_full_words+0x96>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800fc42:	eb03 0908 	add.w	r9, r3, r8
 800fc46:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fc4a:	eba9 0702 	sub.w	r7, r9, r2
 800fc4e:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800fc50:	42bb      	cmp	r3, r7
 800fc52:	d804      	bhi.n	800fc5e <tu_fifo_write_n_const_addr_full_words+0x192>
 800fc54:	42b8      	cmp	r0, r7
 800fc56:	dd02      	ble.n	800fc5e <tu_fifo_write_n_const_addr_full_words+0x192>
 800fc58:	46c4      	mov	ip, r8
 800fc5a:	4690      	mov	r8, r2
 800fc5c:	e759      	b.n	800fb12 <tu_fifo_write_n_const_addr_full_words+0x46>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800fc5e:	1a3f      	subs	r7, r7, r0
  uint16_t new_idx = (uint16_t) (idx + offset);
 800fc60:	46c4      	mov	ip, r8
 800fc62:	4690      	mov	r8, r2
 800fc64:	b2bf      	uxth	r7, r7
 800fc66:	443a      	add	r2, r7
 800fc68:	fa1f f982 	uxth.w	r9, r2
 800fc6c:	e751      	b.n	800fb12 <tu_fifo_write_n_const_addr_full_words+0x46>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800fc6e:	ebc3 0148 	rsb	r1, r3, r8, lsl #1
 800fc72:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800fc76:	4439      	add	r1, r7
 800fc78:	b289      	uxth	r1, r1
 800fc7a:	e793      	b.n	800fba4 <tu_fifo_write_n_const_addr_full_words+0xd8>
  while(full_words--)
 800fc7c:	08a0      	lsrs	r0, r4, #2
 800fc7e:	d00f      	beq.n	800fca0 <tu_fifo_write_n_const_addr_full_words+0x1d4>
 800fc80:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 800fc84:	6833      	ldr	r3, [r6, #0]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800fc86:	f84a 3b04 	str.w	r3, [sl], #4
  while(full_words--)
 800fc8a:	4582      	cmp	sl, r0
 800fc8c:	d1fa      	bne.n	800fc84 <tu_fifo_write_n_const_addr_full_words+0x1b8>
  if ( bytes_rem )
 800fc8e:	f014 0203 	ands.w	r2, r4, #3
 800fc92:	d0d3      	beq.n	800fc3c <tu_fifo_write_n_const_addr_full_words+0x170>
    uint32_t tmp32 = *reg_rx;
 800fc94:	6833      	ldr	r3, [r6, #0]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800fc96:	a903      	add	r1, sp, #12
    uint32_t tmp32 = *reg_rx;
 800fc98:	9303      	str	r3, [sp, #12]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800fc9a:	f002 f979 	bl	8011f90 <memcpy>
 800fc9e:	e7cd      	b.n	800fc3c <tu_fifo_write_n_const_addr_full_words+0x170>
  while(full_words--)
 800fca0:	4650      	mov	r0, sl
 800fca2:	e7f4      	b.n	800fc8e <tu_fifo_write_n_const_addr_full_words+0x1c2>
 800fca4:	4670      	mov	r0, lr
 800fca6:	e758      	b.n	800fb5a <tu_fifo_write_n_const_addr_full_words+0x8e>

0800fca8 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 800fca8:	4603      	mov	r3, r0
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 800fcaa:	2200      	movs	r2, #0
  f->wr_idx = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 800fcac:	2001      	movs	r0, #1
  f->rd_idx = 0;
 800fcae:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800fcb0:	811a      	strh	r2, [r3, #8]
}
 800fcb2:	4770      	bx	lr

0800fcb4 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 800fcb4:	4603      	mov	r3, r0

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
 800fcb6:	2001      	movs	r0, #1
  f->overwritable = overwritable;
 800fcb8:	79da      	ldrb	r2, [r3, #7]
 800fcba:	f361 12c7 	bfi	r2, r1, #7, #1
 800fcbe:	71da      	strb	r2, [r3, #7]
}
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop

0800fcc4 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 800fcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc8:	4b29      	ldr	r3, [pc, #164]	; (800fd70 <configuration_reset+0xac>)
 800fcca:	4607      	mov	r7, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800fccc:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800fd80 <configuration_reset+0xbc>
 800fcd0:	f898 2000 	ldrb.w	r2, [r8]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d03a      	beq.n	800fd4e <configuration_reset+0x8a>
 800fcd8:	2400      	movs	r4, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fcda:	4d26      	ldr	r5, [pc, #152]	; (800fd74 <configuration_reset+0xb0>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fcdc:	4e26      	ldr	r6, [pc, #152]	; (800fd78 <configuration_reset+0xb4>)
    drvid -= _app_driver_count;
 800fcde:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fce0:	42a2      	cmp	r2, r4
    drvid -= _app_driver_count;
 800fce2:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fce4:	d83d      	bhi.n	800fd62 <configuration_reset+0x9e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fcec:	d908      	bls.n	800fd00 <configuration_reset+0x3c>
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
 800fcee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fcf2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800fcf6:	07db      	lsls	r3, r3, #31
 800fcf8:	d500      	bpl.n	800fcfc <configuration_reset+0x38>
 800fcfa:	be00      	bkpt	0x0000
  }

  tu_varclr(&_usbd_dev);
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
}
 800fcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fd00:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->reset(rhport);
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	4638      	mov	r0, r7
 800fd08:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800fd0a:	3401      	adds	r4, #1
 800fd0c:	f898 2000 	ldrb.w	r2, [r8]
 800fd10:	b2e4      	uxtb	r4, r4
 800fd12:	1c53      	adds	r3, r2, #1
 800fd14:	42a3      	cmp	r3, r4
 800fd16:	dae2      	bge.n	800fcde <configuration_reset+0x1a>
  tu_varclr(&_usbd_dev);
 800fd18:	4b18      	ldr	r3, [pc, #96]	; (800fd7c <configuration_reset+0xb8>)
 800fd1a:	2237      	movs	r2, #55	; 0x37
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f002 f944 	bl	8011fac <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800fd24:	f04f 32ff 	mov.w	r2, #4294967295
 800fd28:	f8c0 2003 	str.w	r2, [r0, #3]
 800fd2c:	f8c0 2007 	str.w	r2, [r0, #7]
 800fd30:	f8c0 200b 	str.w	r2, [r0, #11]
 800fd34:	f8c0 200f 	str.w	r2, [r0, #15]
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 800fd38:	f8c0 2013 	str.w	r2, [r0, #19]
 800fd3c:	f8c0 2017 	str.w	r2, [r0, #23]
 800fd40:	f8c0 201b 	str.w	r2, [r0, #27]
 800fd44:	f8c0 201f 	str.w	r2, [r0, #31]
 800fd48:	f8a0 2023 	strh.w	r2, [r0, #35]	; 0x23
 800fd4c:	e7d6      	b.n	800fcfc <configuration_reset+0x38>
    driver->reset(rhport);
 800fd4e:	f7ff fa83 	bl	800f258 <cdcd_reset>
 800fd52:	4638      	mov	r0, r7
 800fd54:	f7fe fdfa 	bl	800e94c <audiod_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800fd58:	f898 3000 	ldrb.w	r3, [r8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1c6      	bne.n	800fcee <configuration_reset+0x2a>
 800fd60:	e7da      	b.n	800fd18 <configuration_reset+0x54>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fd62:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fd66:	6832      	ldr	r2, [r6, #0]
    TU_ASSERT(driver, );
 800fd68:	eb12 03c3 	adds.w	r3, r2, r3, lsl #3
 800fd6c:	d1ca      	bne.n	800fd04 <configuration_reset+0x40>
 800fd6e:	e7be      	b.n	800fcee <configuration_reset+0x2a>
 800fd70:	00000000 	.word	0x00000000
 800fd74:	08019530 	.word	0x08019530
 800fd78:	2400cfc4 	.word	0x2400cfc4
 800fd7c:	2400cfcc 	.word	0x2400cfcc
 800fd80:	2400cfc8 	.word	0x2400cfc8

0800fd84 <usbd_int_set>:

void usbd_int_set(bool enabled)
{
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 800fd84:	4b03      	ldr	r3, [pc, #12]	; (800fd94 <usbd_int_set+0x10>)
  if (enabled)
 800fd86:	b110      	cbz	r0, 800fd8e <usbd_int_set+0xa>
    dcd_int_enable(_usbd_rhport);
 800fd88:	7818      	ldrb	r0, [r3, #0]
 800fd8a:	f001 b807 	b.w	8010d9c <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
 800fd8e:	7818      	ldrb	r0, [r3, #0]
 800fd90:	f001 b80a 	b.w	8010da8 <dcd_int_disable>
 800fd94:	24000350 	.word	0x24000350

0800fd98 <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
 800fd98:	4b02      	ldr	r3, [pc, #8]	; (800fda4 <tud_mounted+0xc>)
 800fd9a:	7858      	ldrb	r0, [r3, #1]
}
 800fd9c:	3800      	subs	r0, #0
 800fd9e:	bf18      	it	ne
 800fda0:	2001      	movne	r0, #1
 800fda2:	4770      	bx	lr
 800fda4:	2400cfcc 	.word	0x2400cfcc

0800fda8 <tud_suspended>:
  return _usbd_dev.suspended;
 800fda8:	4b02      	ldr	r3, [pc, #8]	; (800fdb4 <tud_suspended+0xc>)
 800fdaa:	7818      	ldrb	r0, [r3, #0]
}
 800fdac:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	2400cfcc 	.word	0x2400cfcc

0800fdb8 <tud_init>:
{
 800fdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return _usbd_rhport != RHPORT_INVALID;
 800fdbc:	4f2e      	ldr	r7, [pc, #184]	; (800fe78 <tud_init+0xc0>)
  if ( tud_inited() ) return true;
 800fdbe:	783b      	ldrb	r3, [r7, #0]
 800fdc0:	2bff      	cmp	r3, #255	; 0xff
 800fdc2:	d002      	beq.n	800fdca <tud_init+0x12>
 800fdc4:	2001      	movs	r0, #1
}
 800fdc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 800fdca:	4e2c      	ldr	r6, [pc, #176]	; (800fe7c <tud_init+0xc4>)
  tu_varclr(&_usbd_dev);
 800fdcc:	2237      	movs	r2, #55	; 0x37
 800fdce:	2100      	movs	r1, #0
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	482b      	ldr	r0, [pc, #172]	; (800fe80 <tud_init+0xc8>)
 800fdd4:	f002 f8ea 	bl	8011fac <memset>
 800fdd8:	1d30      	adds	r0, r6, #4
 800fdda:	f7ff ff65 	bl	800fca8 <tu_fifo_clear>
  if ( usbd_app_driver_get_cb )
 800fdde:	4d29      	ldr	r5, [pc, #164]	; (800fe84 <tud_init+0xcc>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
 800fde0:	4b29      	ldr	r3, [pc, #164]	; (800fe88 <tud_init+0xd0>)
 800fde2:	601e      	str	r6, [r3, #0]
  if ( usbd_app_driver_get_cb )
 800fde4:	b125      	cbz	r5, 800fdf0 <tud_init+0x38>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 800fde6:	4829      	ldr	r0, [pc, #164]	; (800fe8c <tud_init+0xd4>)
 800fde8:	f3af 8000 	nop.w
 800fdec:	4b28      	ldr	r3, [pc, #160]	; (800fe90 <tud_init+0xd8>)
 800fdee:	6018      	str	r0, [r3, #0]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800fdf0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800fe8c <tud_init+0xd4>
 800fdf4:	f899 2000 	ldrb.w	r2, [r9]
 800fdf8:	b36d      	cbz	r5, 800fe56 <tud_init+0x9e>
 800fdfa:	f04f 0800 	mov.w	r8, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fdfe:	4d25      	ldr	r5, [pc, #148]	; (800fe94 <tud_init+0xdc>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fe00:	4e23      	ldr	r6, [pc, #140]	; (800fe90 <tud_init+0xd8>)
    drvid -= _app_driver_count;
 800fe02:	eba8 0302 	sub.w	r3, r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fe06:	4542      	cmp	r2, r8
    drvid -= _app_driver_count;
 800fe08:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fe0a:	d82d      	bhi.n	800fe68 <tud_init+0xb0>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe12:	d90a      	bls.n	800fe2a <tud_init+0x72>
    TU_ASSERT(driver);
 800fe14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fe18:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 800fe1c:	f010 0001 	ands.w	r0, r0, #1
 800fe20:	d0d1      	beq.n	800fdc6 <tud_init+0xe>
 800fe22:	be00      	bkpt	0x0000
 800fe24:	2000      	movs	r0, #0
}
 800fe26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800fe2a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->init();
 800fe2e:	681b      	ldr	r3, [r3, #0]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800fe30:	f108 0801 	add.w	r8, r8, #1
    driver->init();
 800fe34:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800fe36:	f899 2000 	ldrb.w	r2, [r9]
 800fe3a:	fa5f f888 	uxtb.w	r8, r8
 800fe3e:	1c53      	adds	r3, r2, #1
 800fe40:	4543      	cmp	r3, r8
 800fe42:	dade      	bge.n	800fe02 <tud_init+0x4a>
  dcd_init(rhport);
 800fe44:	4620      	mov	r0, r4
  _usbd_rhport = rhport;
 800fe46:	703c      	strb	r4, [r7, #0]
  dcd_init(rhport);
 800fe48:	f001 f802 	bl	8010e50 <dcd_init>
  dcd_int_enable(rhport);
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f000 ffa5 	bl	8010d9c <dcd_int_enable>
  return true;
 800fe52:	2001      	movs	r0, #1
 800fe54:	e7b7      	b.n	800fdc6 <tud_init+0xe>
    driver->init();
 800fe56:	f7ff f9d7 	bl	800f208 <cdcd_init>
 800fe5a:	f7fe fd49 	bl	800e8f0 <audiod_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800fe5e:	f899 3000 	ldrb.w	r3, [r9]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1d6      	bne.n	800fe14 <tud_init+0x5c>
 800fe66:	e7ed      	b.n	800fe44 <tud_init+0x8c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800fe68:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800fe6c:	6832      	ldr	r2, [r6, #0]
    TU_ASSERT(driver);
 800fe6e:	eb12 03c3 	adds.w	r3, r2, r3, lsl #3
 800fe72:	d1dc      	bne.n	800fe2e <tud_init+0x76>
 800fe74:	e7ce      	b.n	800fe14 <tud_init+0x5c>
 800fe76:	bf00      	nop
 800fe78:	24000350 	.word	0x24000350
 800fe7c:	24000340 	.word	0x24000340
 800fe80:	2400cfcc 	.word	0x2400cfcc
 800fe84:	00000000 	.word	0x00000000
 800fe88:	2400d004 	.word	0x2400d004
 800fe8c:	2400cfc8 	.word	0x2400cfc8
 800fe90:	2400cfc4 	.word	0x2400cfc4
 800fe94:	08019530 	.word	0x08019530

0800fe98 <tud_task_ext>:
{
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _usbd_rhport != RHPORT_INVALID;
 800fe9c:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80101b0 <tud_task_ext+0x318>
{
 800fea0:	b08b      	sub	sp, #44	; 0x2c
  if ( !tud_inited() ) return;
 800fea2:	f899 3000 	ldrb.w	r3, [r9]
 800fea6:	2bff      	cmp	r3, #255	; 0xff
 800fea8:	d052      	beq.n	800ff50 <tud_task_ext+0xb8>
 800feaa:	4db9      	ldr	r5, [pc, #740]	; (8010190 <tud_task_ext+0x2f8>)
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800feac:	f8df a304 	ldr.w	sl, [pc, #772]	; 80101b4 <tud_task_ext+0x31c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800feb0:	f8df b304 	ldr.w	fp, [pc, #772]	; 80101b8 <tud_task_ext+0x320>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 800feb4:	682e      	ldr	r6, [r5, #0]
  qhdl->interrupt_set(false);
 800feb6:	2000      	movs	r0, #0
 800feb8:	4634      	mov	r4, r6
 800feba:	f854 3b04 	ldr.w	r3, [r4], #4
 800febe:	4798      	blx	r3
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 800fec0:	a907      	add	r1, sp, #28
 800fec2:	4620      	mov	r0, r4
 800fec4:	f7ff fbbe 	bl	800f644 <tu_fifo_read>
 800fec8:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 800feca:	6833      	ldr	r3, [r6, #0]
 800fecc:	2001      	movs	r0, #1
 800fece:	4798      	blx	r3
 800fed0:	2c00      	cmp	r4, #0
 800fed2:	d03d      	beq.n	800ff50 <tud_task_ext+0xb8>
    switch ( event.event_id )
 800fed4:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800fed8:	3b01      	subs	r3, #1
 800feda:	2b07      	cmp	r3, #7
 800fedc:	f200 80c4 	bhi.w	8010068 <tud_task_ext+0x1d0>
 800fee0:	e8df f003 	tbb	[pc, r3]
 800fee4:	94c2aab7 	.word	0x94c2aab7
 800fee8:	040a3981 	.word	0x040a3981
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 800feec:	9b08      	ldr	r3, [sp, #32]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d0e0      	beq.n	800feb4 <tud_task_ext+0x1c>
 800fef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fef4:	4798      	blx	r3
 800fef6:	e7dd      	b.n	800feb4 <tud_task_ext+0x1c>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800fef8:	f89d 1020 	ldrb.w	r1, [sp, #32]
        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 800fefc:	4ba5      	ldr	r3, [pc, #660]	; (8010194 <tud_task_ext+0x2fc>)
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800fefe:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 800ff02:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ff06:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 800ff0a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800ff0e:	f36f 0200 	bfc	r2, #0, #1
 800ff12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800ff16:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800ff1a:	f36f 0282 	bfc	r2, #2, #1
 800ff1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        if ( 0 == epnum )
 800ff22:	2800      	cmp	r0, #0
 800ff24:	f000 80bd 	beq.w	80100a2 <tud_task_ext+0x20a>
  if ( usbd_app_driver_get_cb )
 800ff28:	4a9b      	ldr	r2, [pc, #620]	; (8010198 <tud_task_ext+0x300>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 800ff2a:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
 800ff2c:	b132      	cbz	r2, 800ff3c <tud_task_ext+0xa4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800ff2e:	4a9b      	ldr	r2, [pc, #620]	; (801019c <tud_task_ext+0x304>)
 800ff30:	7812      	ldrb	r2, [r2, #0]
 800ff32:	4293      	cmp	r3, r2
 800ff34:	f0c0 80ad 	bcc.w	8010092 <tud_task_ext+0x1fa>
    drvid -= _app_driver_count;
 800ff38:	1a9b      	subs	r3, r3, r2
 800ff3a:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	f240 809c 	bls.w	801007a <tud_task_ext+0x1e2>
          TU_ASSERT(driver, );
 800ff42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ff46:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ff4a:	07da      	lsls	r2, r3, #31
 800ff4c:	d500      	bpl.n	800ff50 <tud_task_ext+0xb8>
 800ff4e:	be00      	bkpt	0x0000
}
 800ff50:	b00b      	add	sp, #44	; 0x2c
 800ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _usbd_dev.connected = 1;
 800ff56:	4c8f      	ldr	r4, [pc, #572]	; (8010194 <tud_task_ext+0x2fc>)
  usbd_control_set_complete_callback(NULL);
 800ff58:	2000      	movs	r0, #0
        if ( !process_control_request(event.rhport, &event.setup_received) )
 800ff5a:	f89d 801c 	ldrb.w	r8, [sp, #28]
        _usbd_dev.connected = 1;
 800ff5e:	7823      	ldrb	r3, [r4, #0]
 800ff60:	f043 0301 	orr.w	r3, r3, #1
 800ff64:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 800ff66:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ff6a:	f36f 0300 	bfc	r3, #0, #1
 800ff6e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800ff72:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ff76:	f36f 0382 	bfc	r3, #2, #1
 800ff7a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 800ff7e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800ff82:	f36f 0300 	bfc	r3, #0, #1
 800ff86:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 800ff8a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800ff8e:	f36f 0382 	bfc	r3, #2, #1
 800ff92:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  usbd_control_set_complete_callback(NULL);
 800ff96:	f000 fe53 	bl	8010c40 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 800ff9a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800ff9e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800ffa2:	2a60      	cmp	r2, #96	; 0x60
 800ffa4:	d00d      	beq.n	800ffc2 <tud_task_ext+0x12a>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 800ffa6:	2a40      	cmp	r2, #64	; 0x40
 800ffa8:	f000 8087 	beq.w	80100ba <tud_task_ext+0x222>
  switch ( p_request->bmRequestType_bit.recipient )
 800ffac:	f003 031f 	and.w	r3, r3, #31
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	f000 8103 	beq.w	80101bc <tud_task_ext+0x324>
 800ffb6:	2b02      	cmp	r3, #2
 800ffb8:	f000 80b0 	beq.w	801011c <tud_task_ext+0x284>
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f000 808a 	beq.w	80100d6 <tud_task_ext+0x23e>
    default: TU_BREAKPOINT(); return false;
 800ffc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ffc6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800ffca:	07d9      	lsls	r1, r3, #31
 800ffcc:	d500      	bpl.n	800ffd0 <tud_task_ext+0x138>
 800ffce:	be00      	bkpt	0x0000
          dcd_edpt_stall(event.rhport, 0);
 800ffd0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	f001 faa5 	bl	8011524 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800ffda:	2180      	movs	r1, #128	; 0x80
 800ffdc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ffe0:	f001 faa0 	bl	8011524 <dcd_edpt_stall>
 800ffe4:	e766      	b.n	800feb4 <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 800ffe6:	4a6b      	ldr	r2, [pc, #428]	; (8010194 <tud_task_ext+0x2fc>)
          if (tud_resume_cb) tud_resume_cb();
 800ffe8:	f04f 0301 	mov.w	r3, #1
 800ffec:	496c      	ldr	r1, [pc, #432]	; (80101a0 <tud_task_ext+0x308>)
        if ( _usbd_dev.connected )
 800ffee:	7812      	ldrb	r2, [r2, #0]
 800fff0:	f002 0201 	and.w	r2, r2, #1
          if (tud_resume_cb) tud_resume_cb();
 800fff4:	2900      	cmp	r1, #0
 800fff6:	d05e      	beq.n	80100b6 <tud_task_ext+0x21e>
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f43f af5a 	beq.w	800feb4 <tud_task_ext+0x1c>
 8010000:	2a00      	cmp	r2, #0
 8010002:	f43f af57 	beq.w	800feb4 <tud_task_ext+0x1c>
 8010006:	f7f4 fc81 	bl	800490c <tud_resume_cb>
 801000a:	e753      	b.n	800feb4 <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 801000c:	4c61      	ldr	r4, [pc, #388]	; (8010194 <tud_task_ext+0x2fc>)
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 801000e:	f04f 0301 	mov.w	r3, #1
 8010012:	4964      	ldr	r1, [pc, #400]	; (80101a4 <tud_task_ext+0x30c>)
        if ( _usbd_dev.connected )
 8010014:	7822      	ldrb	r2, [r4, #0]
 8010016:	f002 0201 	and.w	r2, r2, #1
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 801001a:	2900      	cmp	r1, #0
 801001c:	d049      	beq.n	80100b2 <tud_task_ext+0x21a>
 801001e:	b2db      	uxtb	r3, r3
 8010020:	2b00      	cmp	r3, #0
 8010022:	f43f af47 	beq.w	800feb4 <tud_task_ext+0x1c>
 8010026:	2a00      	cmp	r2, #0
 8010028:	f43f af44 	beq.w	800feb4 <tud_task_ext+0x1c>
 801002c:	7820      	ldrb	r0, [r4, #0]
 801002e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8010032:	f7f4 fc69 	bl	8004908 <tud_suspend_cb>
 8010036:	e73d      	b.n	800feb4 <tud_task_ext+0x1c>
  configuration_reset(rhport);
 8010038:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801003c:	f7ff fe42 	bl	800fcc4 <configuration_reset>
  usbd_control_reset();
 8010040:	f000 fdf4 	bl	8010c2c <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 8010044:	4b58      	ldr	r3, [pc, #352]	; (80101a8 <tud_task_ext+0x310>)
 8010046:	2b00      	cmp	r3, #0
 8010048:	f43f af34 	beq.w	800feb4 <tud_task_ext+0x1c>
 801004c:	f7f4 fc5a 	bl	8004904 <tud_umount_cb>
 8010050:	e730      	b.n	800feb4 <tud_task_ext+0x1c>
  configuration_reset(rhport);
 8010052:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010056:	f7ff fe35 	bl	800fcc4 <configuration_reset>
  usbd_control_reset();
 801005a:	f000 fde7 	bl	8010c2c <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 801005e:	4b4d      	ldr	r3, [pc, #308]	; (8010194 <tud_task_ext+0x2fc>)
 8010060:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8010064:	709a      	strb	r2, [r3, #2]
      break;
 8010066:	e725      	b.n	800feb4 <tud_task_ext+0x1c>
        TU_BREAKPOINT();
 8010068:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801006c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010070:	07db      	lsls	r3, r3, #31
 8010072:	f57f af1f 	bpl.w	800feb4 <tud_task_ext+0x1c>
 8010076:	be00      	bkpt	0x0000
  {
 8010078:	e71c      	b.n	800feb4 <tud_task_ext+0x1c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801007a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801007e:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8010082:	691c      	ldr	r4, [r3, #16]
 8010084:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8010088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801008a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801008e:	47a0      	blx	r4
 8010090:	e710      	b.n	800feb4 <tud_task_ext+0x1c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010092:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010096:	f8db 2000 	ldr.w	r2, [fp]
          TU_ASSERT(driver, );
 801009a:	eb12 03c3 	adds.w	r3, r2, r3, lsl #3
 801009e:	d1f0      	bne.n	8010082 <tud_task_ext+0x1ea>
 80100a0:	e74f      	b.n	800ff42 <tud_task_ext+0xaa>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 80100a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100a4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80100a8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80100ac:	f000 fdde 	bl	8010c6c <usbd_control_xfer_cb>
 80100b0:	e700      	b.n	800feb4 <tud_task_ext+0x1c>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80100b2:	460b      	mov	r3, r1
 80100b4:	e7b3      	b.n	801001e <tud_task_ext+0x186>
          if (tud_resume_cb) tud_resume_cb();
 80100b6:	460b      	mov	r3, r1
 80100b8:	e79e      	b.n	800fff8 <tud_task_ext+0x160>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 80100ba:	483c      	ldr	r0, [pc, #240]	; (80101ac <tud_task_ext+0x314>)
 80100bc:	2800      	cmp	r0, #0
 80100be:	d087      	beq.n	800ffd0 <tud_task_ext+0x138>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80100c0:	f000 fdbe 	bl	8010c40 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80100c4:	4640      	mov	r0, r8
 80100c6:	aa08      	add	r2, sp, #32
 80100c8:	2101      	movs	r1, #1
 80100ca:	f3af 8000 	nop.w
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80100ce:	2800      	cmp	r0, #0
 80100d0:	f47f aef0 	bne.w	800feb4 <tud_task_ext+0x1c>
 80100d4:	e77c      	b.n	800ffd0 <tud_task_ext+0x138>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 80100d6:	2a20      	cmp	r2, #32
 80100d8:	f000 80aa 	beq.w	8010230 <tud_task_ext+0x398>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80100dc:	2a00      	cmp	r2, #0
 80100de:	f47f af70 	bne.w	800ffc2 <tud_task_ext+0x12a>
      switch ( p_request->bRequest )
 80100e2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80100e6:	2b09      	cmp	r3, #9
 80100e8:	f63f af6b 	bhi.w	800ffc2 <tud_task_ext+0x12a>
 80100ec:	a201      	add	r2, pc, #4	; (adr r2, 80100f4 <tud_task_ext+0x25c>)
 80100ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f2:	bf00      	nop
 80100f4:	0801029d 	.word	0x0801029d
 80100f8:	08010387 	.word	0x08010387
 80100fc:	0800ffc3 	.word	0x0800ffc3
 8010100:	0801036b 	.word	0x0801036b
 8010104:	0800ffc3 	.word	0x0800ffc3
 8010108:	08010351 	.word	0x08010351
 801010c:	080102ff 	.word	0x080102ff
 8010110:	0800ffc3 	.word	0x0800ffc3
 8010114:	080102e9 	.word	0x080102e9
 8010118:	080102bf 	.word	0x080102bf
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 801011c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8010120:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8010124:	2b08      	cmp	r3, #8
 8010126:	f63f af4c 	bhi.w	800ffc2 <tud_task_ext+0x12a>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 801012a:	eb04 0043 	add.w	r0, r4, r3, lsl #1
  if ( usbd_app_driver_get_cb )
 801012e:	4e1a      	ldr	r6, [pc, #104]	; (8010198 <tud_task_ext+0x300>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8010130:	005b      	lsls	r3, r3, #1
 8010132:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
 8010136:	ea4f 1cd1 	mov.w	ip, r1, lsr #7
 801013a:	7cc0      	ldrb	r0, [r0, #19]
  if ( usbd_app_driver_get_cb )
 801013c:	b136      	cbz	r6, 801014c <tud_task_ext+0x2b4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801013e:	4e17      	ldr	r6, [pc, #92]	; (801019c <tud_task_ext+0x304>)
 8010140:	7836      	ldrb	r6, [r6, #0]
 8010142:	42b0      	cmp	r0, r6
 8010144:	f0c0 8174 	bcc.w	8010430 <tud_task_ext+0x598>
    drvid -= _app_driver_count;
 8010148:	1b80      	subs	r0, r0, r6
 801014a:	b2c0      	uxtb	r0, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801014c:	2801      	cmp	r0, #1
 801014e:	f240 8092 	bls.w	8010276 <tud_task_ext+0x3de>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8010152:	2a00      	cmp	r2, #0
 8010154:	f47f af3c 	bne.w	800ffd0 <tud_task_ext+0x138>
  return NULL;
 8010158:	4616      	mov	r6, r2
        switch ( p_request->bRequest )
 801015a:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 801015e:	f002 00fd 	and.w	r0, r2, #253	; 0xfd
 8010162:	2801      	cmp	r0, #1
 8010164:	f000 817a 	beq.w	801045c <tud_task_ext+0x5c4>
 8010168:	2a00      	cmp	r2, #0
 801016a:	f47f af2a 	bne.w	800ffc2 <tud_task_ext+0x12a>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 801016e:	4423      	add	r3, r4
            tud_control_xfer(rhport, p_request, &status, 2);
 8010170:	4640      	mov	r0, r8
 8010172:	f10d 021a 	add.w	r2, sp, #26
 8010176:	a908      	add	r1, sp, #32
  return _usbd_dev.ep_status[epnum][dir].stalled;
 8010178:	449c      	add	ip, r3
 801017a:	f89c 3025 	ldrb.w	r3, [ip, #37]	; 0x25
 801017e:	f3c3 0340 	ubfx	r3, r3, #1, #1
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8010182:	f8ad 301a 	strh.w	r3, [sp, #26]
            tud_control_xfer(rhport, p_request, &status, 2);
 8010186:	2302      	movs	r3, #2
 8010188:	f000 fcf2 	bl	8010b70 <tud_control_xfer>
          break;
 801018c:	e692      	b.n	800feb4 <tud_task_ext+0x1c>
 801018e:	bf00      	nop
 8010190:	2400d004 	.word	0x2400d004
 8010194:	2400cfcc 	.word	0x2400cfcc
 8010198:	00000000 	.word	0x00000000
 801019c:	2400cfc8 	.word	0x2400cfc8
 80101a0:	0800490d 	.word	0x0800490d
 80101a4:	08004909 	.word	0x08004909
 80101a8:	08004905 	.word	0x08004905
 80101ac:	00000000 	.word	0x00000000
 80101b0:	24000350 	.word	0x24000350
 80101b4:	08019530 	.word	0x08019530
 80101b8:	2400cfc4 	.word	0x2400cfc4
 80101bc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80101c0:	2b0f      	cmp	r3, #15
 80101c2:	f63f af05 	bhi.w	800ffd0 <tud_task_ext+0x138>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80101c6:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 80101c8:	4abb      	ldr	r2, [pc, #748]	; (80104b8 <tud_task_ext+0x620>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80101ca:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 80101cc:	b132      	cbz	r2, 80101dc <tud_task_ext+0x344>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80101ce:	4abb      	ldr	r2, [pc, #748]	; (80104bc <tud_task_ext+0x624>)
 80101d0:	7812      	ldrb	r2, [r2, #0]
 80101d2:	4293      	cmp	r3, r2
 80101d4:	f0c0 8139 	bcc.w	801044a <tud_task_ext+0x5b2>
    drvid -= _app_driver_count;
 80101d8:	1a9b      	subs	r3, r3, r2
 80101da:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80101dc:	2b01      	cmp	r3, #1
 80101de:	f63f aef7 	bhi.w	800ffd0 <tud_task_ext+0x138>
 80101e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80101e6:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80101ea:	68e0      	ldr	r0, [r4, #12]
 80101ec:	f000 fd28 	bl	8010c40 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80101f0:	68e3      	ldr	r3, [r4, #12]
 80101f2:	aa08      	add	r2, sp, #32
 80101f4:	2101      	movs	r1, #1
 80101f6:	4640      	mov	r0, r8
 80101f8:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
 80101fa:	2800      	cmp	r0, #0
 80101fc:	f47f ae5a 	bne.w	800feb4 <tud_task_ext+0x1c>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8010200:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8010204:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 8010208:	f47f aee2 	bne.w	800ffd0 <tud_task_ext+0x138>
        switch(p_request->bRequest)
 801020c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8010210:	3b0a      	subs	r3, #10
 8010212:	2b01      	cmp	r3, #1
 8010214:	f63f aedc 	bhi.w	800ffd0 <tud_task_ext+0x138>
            usbd_control_set_complete_callback(NULL);
 8010218:	f000 fd12 	bl	8010c40 <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 801021c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8010220:	2b0a      	cmp	r3, #10
 8010222:	f000 8173 	beq.w	801050c <tud_task_ext+0x674>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8010226:	a908      	add	r1, sp, #32
 8010228:	4640      	mov	r0, r8
 801022a:	f000 fc87 	bl	8010b3c <tud_control_status>
 801022e:	e641      	b.n	800feb4 <tud_task_ext+0x1c>
 8010230:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8010234:	2b0f      	cmp	r3, #15
 8010236:	f63f aecb 	bhi.w	800ffd0 <tud_task_ext+0x138>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801023a:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 801023c:	4a9e      	ldr	r2, [pc, #632]	; (80104b8 <tud_task_ext+0x620>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801023e:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 8010240:	b132      	cbz	r2, 8010250 <tud_task_ext+0x3b8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010242:	4a9e      	ldr	r2, [pc, #632]	; (80104bc <tud_task_ext+0x624>)
 8010244:	7812      	ldrb	r2, [r2, #0]
 8010246:	4293      	cmp	r3, r2
 8010248:	f0c0 8140 	bcc.w	80104cc <tud_task_ext+0x634>
    drvid -= _app_driver_count;
 801024c:	1a9b      	subs	r3, r3, r2
 801024e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010250:	2b01      	cmp	r3, #1
 8010252:	f63f aebd 	bhi.w	800ffd0 <tud_task_ext+0x138>
 8010256:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801025a:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 801025e:	68e0      	ldr	r0, [r4, #12]
 8010260:	f000 fcee 	bl	8010c40 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8010264:	68e3      	ldr	r3, [r4, #12]
 8010266:	4640      	mov	r0, r8
 8010268:	aa08      	add	r2, sp, #32
 801026a:	2101      	movs	r1, #1
 801026c:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 801026e:	2800      	cmp	r0, #0
 8010270:	f47f ae20 	bne.w	800feb4 <tud_task_ext+0x1c>
 8010274:	e6ac      	b.n	800ffd0 <tud_task_ext+0x138>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010276:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801027a:	eb0a 06c0 	add.w	r6, sl, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 801027e:	2a00      	cmp	r2, #0
 8010280:	f43f af6b 	beq.w	801015a <tud_task_ext+0x2c2>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8010284:	68f0      	ldr	r0, [r6, #12]
 8010286:	f000 fcdb 	bl	8010c40 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 801028a:	68f3      	ldr	r3, [r6, #12]
 801028c:	4640      	mov	r0, r8
 801028e:	aa08      	add	r2, sp, #32
 8010290:	2101      	movs	r1, #1
 8010292:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010294:	2800      	cmp	r0, #0
 8010296:	f47f ae0d 	bne.w	800feb4 <tud_task_ext+0x1c>
 801029a:	e699      	b.n	800ffd0 <tud_task_ext+0x138>
          tud_control_xfer(rhport, p_request, &status, 2);
 801029c:	2302      	movs	r3, #2
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 801029e:	7821      	ldrb	r1, [r4, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
 80102a0:	4640      	mov	r0, r8
 80102a2:	f10d 021a 	add.w	r2, sp, #26
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80102a6:	fa21 f403 	lsr.w	r4, r1, r3
 80102aa:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80102ae:	401c      	ands	r4, r3
 80102b0:	4321      	orrs	r1, r4
 80102b2:	f8ad 101a 	strh.w	r1, [sp, #26]
          tud_control_xfer(rhport, p_request, &status, 2);
 80102b6:	a908      	add	r1, sp, #32
 80102b8:	f000 fc5a 	bl	8010b70 <tud_control_xfer>
        break;
 80102bc:	e5fa      	b.n	800feb4 <tud_task_ext+0x1c>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80102be:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
          if (_usbd_dev.cfg_num != cfg_num)
 80102c2:	7863      	ldrb	r3, [r4, #1]
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80102c4:	9201      	str	r2, [sp, #4]
          if (_usbd_dev.cfg_num != cfg_num)
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d007      	beq.n	80102da <tud_task_ext+0x442>
            if ( _usbd_dev.cfg_num )
 80102ca:	7863      	ldrb	r3, [r4, #1]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f040 816d 	bne.w	80105ac <tud_task_ext+0x714>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 80102d2:	9b01      	ldr	r3, [sp, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f040 8123 	bne.w	8010520 <tud_task_ext+0x688>
          _usbd_dev.cfg_num = cfg_num;
 80102da:	9b01      	ldr	r3, [sp, #4]
          tud_control_status(rhport, p_request);
 80102dc:	4640      	mov	r0, r8
 80102de:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
 80102e0:	7063      	strb	r3, [r4, #1]
          tud_control_status(rhport, p_request);
 80102e2:	f000 fc2b 	bl	8010b3c <tud_control_status>
        break;
 80102e6:	e5e5      	b.n	800feb4 <tud_task_ext+0x1c>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80102e8:	7863      	ldrb	r3, [r4, #1]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80102ea:	4640      	mov	r0, r8
 80102ec:	f10d 021a 	add.w	r2, sp, #26
 80102f0:	a908      	add	r1, sp, #32
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80102f2:	f88d 301a 	strb.w	r3, [sp, #26]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80102f6:	2301      	movs	r3, #1
 80102f8:	f000 fc3a 	bl	8010b70 <tud_control_xfer>
        break;
 80102fc:	e5da      	b.n	800feb4 <tud_task_ext+0x1c>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80102fe:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8010302:	0a03      	lsrs	r3, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8010304:	b2c0      	uxtb	r0, r0
  switch(desc_type)
 8010306:	1e5a      	subs	r2, r3, #1
 8010308:	2a0e      	cmp	r2, #14
 801030a:	f63f ae61 	bhi.w	800ffd0 <tud_task_ext+0x138>
 801030e:	a101      	add	r1, pc, #4	; (adr r1, 8010314 <tud_task_ext+0x47c>)
 8010310:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010314:	080103cf 	.word	0x080103cf
 8010318:	080103a3 	.word	0x080103a3
 801031c:	0801040d 	.word	0x0801040d
 8010320:	0800ffd1 	.word	0x0800ffd1
 8010324:	0800ffd1 	.word	0x0800ffd1
 8010328:	080103e7 	.word	0x080103e7
 801032c:	080103a3 	.word	0x080103a3
 8010330:	0800ffd1 	.word	0x0800ffd1
 8010334:	0800ffd1 	.word	0x0800ffd1
 8010338:	0800ffd1 	.word	0x0800ffd1
 801033c:	0800ffd1 	.word	0x0800ffd1
 8010340:	0800ffd1 	.word	0x0800ffd1
 8010344:	0800ffd1 	.word	0x0800ffd1
 8010348:	0800ffd1 	.word	0x0800ffd1
 801034c:	0801041d 	.word	0x0801041d
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8010350:	a808      	add	r0, sp, #32
 8010352:	f000 fc7b 	bl	8010c4c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8010356:	4640      	mov	r0, r8
 8010358:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 801035c:	f000 fd30 	bl	8010dc0 <dcd_set_address>
          _usbd_dev.addressed = 1;
 8010360:	7823      	ldrb	r3, [r4, #0]
 8010362:	f043 0302 	orr.w	r3, r3, #2
 8010366:	7023      	strb	r3, [r4, #0]
        break;
 8010368:	e5a4      	b.n	800feb4 <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 801036a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801036e:	2b01      	cmp	r3, #1
 8010370:	f47f ae2e 	bne.w	800ffd0 <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = true;
 8010374:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 8010376:	4640      	mov	r0, r8
 8010378:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = true;
 801037a:	f043 0308 	orr.w	r3, r3, #8
 801037e:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 8010380:	f000 fbdc 	bl	8010b3c <tud_control_status>
        break;
 8010384:	e596      	b.n	800feb4 <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8010386:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801038a:	2b01      	cmp	r3, #1
 801038c:	f47f ae20 	bne.w	800ffd0 <tud_task_ext+0x138>
          _usbd_dev.remote_wakeup_en = false;
 8010390:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 8010392:	4640      	mov	r0, r8
 8010394:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
 8010396:	f36f 03c3 	bfc	r3, #3, #1
 801039a:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 801039c:	f000 fbce 	bl	8010b3c <tud_control_status>
        break;
 80103a0:	e588      	b.n	800feb4 <tud_task_ext+0x1c>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	f000 8121 	beq.w	80105ea <tud_task_ext+0x752>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80103a8:	4b45      	ldr	r3, [pc, #276]	; (80104c0 <tud_task_ext+0x628>)
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	f43f ae10 	beq.w	800ffd0 <tud_task_ext+0x138>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80103b0:	f3af 8000 	nop.w
 80103b4:	4602      	mov	r2, r0
      TU_ASSERT(desc_config);
 80103b6:	2a00      	cmp	r2, #0
 80103b8:	f43f ae03 	beq.w	800ffc2 <tud_task_ext+0x12a>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 80103bc:	4640      	mov	r0, r8
 80103be:	8853      	ldrh	r3, [r2, #2]
 80103c0:	a908      	add	r1, sp, #32
 80103c2:	f000 fbd5 	bl	8010b70 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80103c6:	2800      	cmp	r0, #0
 80103c8:	f47f ad74 	bne.w	800feb4 <tud_task_ext+0x1c>
 80103cc:	e600      	b.n	800ffd0 <tud_task_ext+0x138>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 80103ce:	f7f6 fe0f 	bl	8006ff0 <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 80103d2:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 80103d4:	4602      	mov	r2, r0
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 80103d6:	a908      	add	r1, sp, #32
 80103d8:	4640      	mov	r0, r8
 80103da:	f000 fbc9 	bl	8010b70 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80103de:	2800      	cmp	r0, #0
 80103e0:	f47f ad68 	bne.w	800feb4 <tud_task_ext+0x1c>
 80103e4:	e5f4      	b.n	800ffd0 <tud_task_ext+0x138>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 80103e6:	4b37      	ldr	r3, [pc, #220]	; (80104c4 <tud_task_ext+0x62c>)
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	f43f adf1 	beq.w	800ffd0 <tud_task_ext+0x138>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80103ee:	f3af 8000 	nop.w
      TU_VERIFY(desc_qualifier);
 80103f2:	4602      	mov	r2, r0
 80103f4:	2800      	cmp	r0, #0
 80103f6:	f43f adeb 	beq.w	800ffd0 <tud_task_ext+0x138>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80103fa:	4640      	mov	r0, r8
 80103fc:	7813      	ldrb	r3, [r2, #0]
 80103fe:	a908      	add	r1, sp, #32
 8010400:	f000 fbb6 	bl	8010b70 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8010404:	2800      	cmp	r0, #0
 8010406:	f47f ad55 	bne.w	800feb4 <tud_task_ext+0x1c>
 801040a:	e5e1      	b.n	800ffd0 <tud_task_ext+0x138>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 801040c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8010410:	f7f6 fdf6 	bl	8007000 <tud_descriptor_string_cb>
      TU_VERIFY(desc_str);
 8010414:	4602      	mov	r2, r0
 8010416:	2800      	cmp	r0, #0
 8010418:	d1ef      	bne.n	80103fa <tud_task_ext+0x562>
 801041a:	e5d9      	b.n	800ffd0 <tud_task_ext+0x138>
      if (!tud_descriptor_bos_cb) return false;
 801041c:	4b2a      	ldr	r3, [pc, #168]	; (80104c8 <tud_task_ext+0x630>)
 801041e:	2b00      	cmp	r3, #0
 8010420:	f43f add6 	beq.w	800ffd0 <tud_task_ext+0x138>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8010424:	f3af 8000 	nop.w
      TU_ASSERT(desc_bos);
 8010428:	4602      	mov	r2, r0
 801042a:	2800      	cmp	r0, #0
 801042c:	d1c6      	bne.n	80103bc <tud_task_ext+0x524>
 801042e:	e5c8      	b.n	800ffc2 <tud_task_ext+0x12a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010430:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010434:	f8db 6000 	ldr.w	r6, [fp]
 8010438:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 801043c:	2a00      	cmp	r2, #0
 801043e:	f43f ae8c 	beq.w	801015a <tud_task_ext+0x2c2>
        TU_VERIFY(driver);
 8010442:	2e00      	cmp	r6, #0
 8010444:	f47f af1e 	bne.w	8010284 <tud_task_ext+0x3ec>
 8010448:	e5c2      	b.n	800ffd0 <tud_task_ext+0x138>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801044a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801044e:	f8db 4000 	ldr.w	r4, [fp]
      TU_VERIFY(driver);
 8010452:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 8010456:	f43f adbb 	beq.w	800ffd0 <tud_task_ext+0x138>
 801045a:	e6c6      	b.n	80101ea <tud_task_ext+0x352>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 801045c:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8010460:	b947      	cbnz	r7, 8010474 <tud_task_ext+0x5dc>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8010462:	2a01      	cmp	r2, #1
 8010464:	d03b      	beq.n	80104de <tud_task_ext+0x646>
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8010466:	18e7      	adds	r7, r4, r3
 8010468:	4467      	add	r7, ip
 801046a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801046e:	3720      	adds	r7, #32
 8010470:	079b      	lsls	r3, r3, #30
 8010472:	d513      	bpl.n	801049c <tud_task_ext+0x604>
            if (driver)
 8010474:	2e00      	cmp	r6, #0
 8010476:	f43f ad1d 	beq.w	800feb4 <tud_task_ext+0x1c>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 801047a:	68f0      	ldr	r0, [r6, #12]
 801047c:	f000 fbe0 	bl	8010c40 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8010480:	68f3      	ldr	r3, [r6, #12]
 8010482:	aa08      	add	r2, sp, #32
 8010484:	2101      	movs	r1, #1
 8010486:	4640      	mov	r0, r8
 8010488:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
 801048a:	2000      	movs	r0, #0
 801048c:	f000 fbd8 	bl	8010c40 <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8010490:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010494:	07d8      	lsls	r0, r3, #31
 8010496:	f53f ad0d 	bmi.w	800feb4 <tud_task_ext+0x1c>
 801049a:	e6c4      	b.n	8010226 <tud_task_ext+0x38e>
    dcd_edpt_stall(rhport, ep_addr);
 801049c:	f899 0000 	ldrb.w	r0, [r9]
 80104a0:	f001 f840 	bl	8011524 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 80104a4:	797b      	ldrb	r3, [r7, #5]
 80104a6:	f043 0302 	orr.w	r3, r3, #2
 80104aa:	717b      	strb	r3, [r7, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 80104ac:	797b      	ldrb	r3, [r7, #5]
 80104ae:	f043 0301 	orr.w	r3, r3, #1
 80104b2:	717b      	strb	r3, [r7, #5]
 80104b4:	e7de      	b.n	8010474 <tud_task_ext+0x5dc>
 80104b6:	bf00      	nop
 80104b8:	00000000 	.word	0x00000000
 80104bc:	2400cfc8 	.word	0x2400cfc8
	...
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80104cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80104d0:	f8db 4000 	ldr.w	r4, [fp]
        TU_VERIFY(driver);
 80104d4:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 80104d8:	f43f ad7a 	beq.w	800ffd0 <tud_task_ext+0x138>
 80104dc:	e6bf      	b.n	801025e <tud_task_ext+0x3c6>
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80104de:	4423      	add	r3, r4
 80104e0:	449c      	add	ip, r3
 80104e2:	f89c 3025 	ldrb.w	r3, [ip, #37]	; 0x25
 80104e6:	f10c 0220 	add.w	r2, ip, #32
 80104ea:	0798      	lsls	r0, r3, #30
 80104ec:	d5c2      	bpl.n	8010474 <tud_task_ext+0x5dc>
    dcd_edpt_clear_stall(rhport, ep_addr);
 80104ee:	f899 0000 	ldrb.w	r0, [r9]
 80104f2:	9200      	str	r2, [sp, #0]
 80104f4:	f001 f886 	bl	8011604 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80104f8:	9a00      	ldr	r2, [sp, #0]
 80104fa:	7953      	ldrb	r3, [r2, #5]
 80104fc:	f367 0341 	bfi	r3, r7, #1, #1
 8010500:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010502:	7953      	ldrb	r3, [r2, #5]
 8010504:	f367 0300 	bfi	r3, r7, #0, #1
 8010508:	7153      	strb	r3, [r2, #5]
 801050a:	e7b3      	b.n	8010474 <tud_task_ext+0x5dc>
              tud_control_xfer(rhport, p_request, &alternate, 1);
 801050c:	a908      	add	r1, sp, #32
 801050e:	4640      	mov	r0, r8
 8010510:	2301      	movs	r3, #1
 8010512:	f10d 021a 	add.w	r2, sp, #26
              uint8_t alternate = 0;
 8010516:	f88d 401a 	strb.w	r4, [sp, #26]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 801051a:	f000 fb29 	bl	8010b70 <tud_control_xfer>
 801051e:	e4c9      	b.n	800feb4 <tud_task_ext+0x1c>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8010520:	1e58      	subs	r0, r3, #1
 8010522:	b2c0      	uxtb	r0, r0
 8010524:	f7f6 fd68 	bl	8006ff8 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8010528:	2800      	cmp	r0, #0
 801052a:	d036      	beq.n	801059a <tud_task_ext+0x702>
 801052c:	7843      	ldrb	r3, [r0, #1]
 801052e:	2b02      	cmp	r3, #2
 8010530:	d133      	bne.n	801059a <tud_task_ext+0x702>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8010532:	7823      	ldrb	r3, [r4, #0]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8010534:	f100 0709 	add.w	r7, r0, #9
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8010538:	79c2      	ldrb	r2, [r0, #7]
 801053a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801053e:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8010542:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8010546:	011b      	lsls	r3, r3, #4
 8010548:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801054c:	430b      	orrs	r3, r1
 801054e:	7023      	strb	r3, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8010550:	8843      	ldrh	r3, [r0, #2]
 8010552:	f8cd 8008 	str.w	r8, [sp, #8]
 8010556:	18c3      	adds	r3, r0, r3
 8010558:	9404      	str	r4, [sp, #16]
 801055a:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 801055c:	9b03      	ldr	r3, [sp, #12]
 801055e:	42bb      	cmp	r3, r7
 8010560:	d97c      	bls.n	801065c <tud_task_ext+0x7c4>
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8010562:	787b      	ldrb	r3, [r7, #1]
 8010564:	2b0b      	cmp	r3, #11
 8010566:	d074      	beq.n	8010652 <tud_task_ext+0x7ba>
    uint8_t assoc_itf_count = 1;
 8010568:	2301      	movs	r3, #1
 801056a:	9300      	str	r3, [sp, #0]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 801056c:	787b      	ldrb	r3, [r7, #1]
 801056e:	2b04      	cmp	r3, #4
 8010570:	d113      	bne.n	801059a <tud_task_ext+0x702>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8010572:	9b03      	ldr	r3, [sp, #12]
 8010574:	494f      	ldr	r1, [pc, #316]	; (80106b4 <tud_task_ext+0x81c>)
 8010576:	1bda      	subs	r2, r3, r7
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010578:	4b4f      	ldr	r3, [pc, #316]	; (80106b8 <tud_task_ext+0x820>)
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 801057a:	b292      	uxth	r2, r2
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	2900      	cmp	r1, #0
 8010580:	d076      	beq.n	8010670 <tud_task_ext+0x7d8>
 8010582:	2600      	movs	r6, #0
 8010584:	4639      	mov	r1, r7
 8010586:	4617      	mov	r7, r2
 8010588:	46b0      	mov	r8, r6
    drvid -= _app_driver_count;
 801058a:	1af4      	subs	r4, r6, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801058c:	429e      	cmp	r6, r3
    drvid -= _app_driver_count;
 801058e:	b2e4      	uxtb	r4, r4
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010590:	d357      	bcc.n	8010642 <tud_task_ext+0x7aa>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010592:	2c01      	cmp	r4, #1
 8010594:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010598:	d911      	bls.n	80105be <tud_task_ext+0x726>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 801059a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801059e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80105a2:	07dc      	lsls	r4, r3, #31
 80105a4:	f57f ad0d 	bpl.w	800ffc2 <tud_task_ext+0x12a>
 80105a8:	be00      	bkpt	0x0000
 80105aa:	e50a      	b.n	800ffc2 <tud_task_ext+0x12a>
              dcd_edpt_close_all(rhport);
 80105ac:	4640      	mov	r0, r8
 80105ae:	f000 fd45 	bl	801103c <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 80105b2:	78a6      	ldrb	r6, [r4, #2]
              configuration_reset(rhport);
 80105b4:	4640      	mov	r0, r8
 80105b6:	f7ff fb85 	bl	800fcc4 <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 80105ba:	70a6      	strb	r6, [r4, #2]
 80105bc:	e689      	b.n	80102d2 <tud_task_ext+0x43a>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80105be:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80105c2:	68a3      	ldr	r3, [r4, #8]
 80105c4:	463a      	mov	r2, r7
 80105c6:	9802      	ldr	r0, [sp, #8]
 80105c8:	9105      	str	r1, [sp, #20]
 80105ca:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80105cc:	2808      	cmp	r0, #8
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80105ce:	f106 0301 	add.w	r3, r6, #1
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80105d2:	9905      	ldr	r1, [sp, #20]
 80105d4:	d901      	bls.n	80105da <tud_task_ext+0x742>
 80105d6:	4287      	cmp	r7, r0
 80105d8:	d20b      	bcs.n	80105f2 <tud_task_ext+0x75a>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80105da:	b2de      	uxtb	r6, r3
 80105dc:	4b36      	ldr	r3, [pc, #216]	; (80106b8 <tud_task_ext+0x820>)
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	46b0      	mov	r8, r6
 80105e2:	1c5a      	adds	r2, r3, #1
 80105e4:	42b2      	cmp	r2, r6
 80105e6:	dad0      	bge.n	801058a <tud_task_ext+0x6f2>
 80105e8:	e7d7      	b.n	801059a <tud_task_ext+0x702>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80105ea:	f7f6 fd05 	bl	8006ff8 <tud_descriptor_configuration_cb>
 80105ee:	4602      	mov	r2, r0
 80105f0:	e6e1      	b.n	80103b6 <tud_task_ext+0x51e>
 80105f2:	460f      	mov	r7, r1
        if ( assoc_itf_count == 1)
 80105f4:	9b00      	ldr	r3, [sp, #0]
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d106      	bne.n	8010608 <tud_task_ext+0x770>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80105fa:	9900      	ldr	r1, [sp, #0]
 80105fc:	68a2      	ldr	r2, [r4, #8]
 80105fe:	4b2f      	ldr	r3, [pc, #188]	; (80106bc <tud_task_ext+0x824>)
 8010600:	429a      	cmp	r2, r3
 8010602:	bf08      	it	eq
 8010604:	2102      	moveq	r1, #2
 8010606:	9100      	str	r1, [sp, #0]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010608:	2200      	movs	r2, #0
 801060a:	e008      	b.n	801061e <tud_task_ext+0x786>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 801060c:	78b9      	ldrb	r1, [r7, #2]
 801060e:	440b      	add	r3, r1
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8010610:	9904      	ldr	r1, [sp, #16]
 8010612:	fa51 f383 	uxtab	r3, r1, r3
 8010616:	78d9      	ldrb	r1, [r3, #3]
 8010618:	29ff      	cmp	r1, #255	; 0xff
 801061a:	d1be      	bne.n	801059a <tud_task_ext+0x702>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 801061c:	70de      	strb	r6, [r3, #3]
 801061e:	b2d3      	uxtb	r3, r2
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010620:	9900      	ldr	r1, [sp, #0]
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8010622:	3201      	adds	r2, #1
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8010624:	4299      	cmp	r1, r3
 8010626:	d8f1      	bhi.n	801060c <tud_task_ext+0x774>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8010628:	4633      	mov	r3, r6
 801062a:	4639      	mov	r1, r7
 801062c:	4602      	mov	r2, r0
        p_desc += drv_len;
 801062e:	4407      	add	r7, r0
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8010630:	4823      	ldr	r0, [pc, #140]	; (80106c0 <tud_task_ext+0x828>)
 8010632:	f001 fc1f 	bl	8011e74 <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8010636:	4b20      	ldr	r3, [pc, #128]	; (80106b8 <tud_task_ext+0x820>)
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	3301      	adds	r3, #1
 801063c:	4543      	cmp	r3, r8
 801063e:	da8d      	bge.n	801055c <tud_task_ext+0x6c4>
 8010640:	e7ab      	b.n	801059a <tud_task_ext+0x702>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010642:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8010646:	f8db 4000 	ldr.w	r4, [fp]
      TU_ASSERT(driver);
 801064a:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 801064e:	d1b8      	bne.n	80105c2 <tud_task_ext+0x72a>
 8010650:	e7a3      	b.n	801059a <tud_task_ext+0x702>
      assoc_itf_count = desc_iad->bInterfaceCount;
 8010652:	78fa      	ldrb	r2, [r7, #3]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8010654:	783b      	ldrb	r3, [r7, #0]
 8010656:	9200      	str	r2, [sp, #0]
 8010658:	441f      	add	r7, r3
 801065a:	e787      	b.n	801056c <tud_task_ext+0x6d4>
  if (tud_mount_cb) tud_mount_cb();
 801065c:	4b19      	ldr	r3, [pc, #100]	; (80106c4 <tud_task_ext+0x82c>)
 801065e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010662:	9c04      	ldr	r4, [sp, #16]
 8010664:	2b00      	cmp	r3, #0
 8010666:	f43f ae38 	beq.w	80102da <tud_task_ext+0x442>
 801066a:	f7f4 f949 	bl	8004900 <tud_mount_cb>
 801066e:	e634      	b.n	80102da <tud_task_ext+0x442>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010670:	4688      	mov	r8, r1
 8010672:	4c15      	ldr	r4, [pc, #84]	; (80106c8 <tud_task_ext+0x830>)
 8010674:	4639      	mov	r1, r7
 8010676:	4616      	mov	r6, r2
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010678:	f1b8 0f02 	cmp.w	r8, #2
 801067c:	fa5f f788 	uxtb.w	r7, r8
 8010680:	d08b      	beq.n	801059a <tud_task_ext+0x702>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8010682:	68a3      	ldr	r3, [r4, #8]
 8010684:	4632      	mov	r2, r6
 8010686:	9802      	ldr	r0, [sp, #8]
 8010688:	9105      	str	r1, [sp, #20]
 801068a:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 801068c:	4286      	cmp	r6, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801068e:	4623      	mov	r3, r4
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010690:	9905      	ldr	r1, [sp, #20]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8010692:	f104 0418 	add.w	r4, r4, #24
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8010696:	d301      	bcc.n	801069c <tud_task_ext+0x804>
 8010698:	2808      	cmp	r0, #8
 801069a:	d807      	bhi.n	80106ac <tud_task_ext+0x814>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 801069c:	4b06      	ldr	r3, [pc, #24]	; (80106b8 <tud_task_ext+0x820>)
 801069e:	f108 0801 	add.w	r8, r8, #1
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	3301      	adds	r3, #1
 80106a6:	4598      	cmp	r8, r3
 80106a8:	dde6      	ble.n	8010678 <tud_task_ext+0x7e0>
 80106aa:	e776      	b.n	801059a <tud_task_ext+0x702>
 80106ac:	463e      	mov	r6, r7
 80106ae:	461c      	mov	r4, r3
 80106b0:	460f      	mov	r7, r1
 80106b2:	e79f      	b.n	80105f4 <tud_task_ext+0x75c>
 80106b4:	00000000 	.word	0x00000000
 80106b8:	2400cfc8 	.word	0x2400cfc8
 80106bc:	0800f285 	.word	0x0800f285
 80106c0:	2400cfdf 	.word	0x2400cfdf
 80106c4:	08004901 	.word	0x08004901
 80106c8:	08019530 	.word	0x08019530

080106cc <dcd_event_handler>:
{
 80106cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (event->event_id)
 80106d0:	7843      	ldrb	r3, [r0, #1]
{
 80106d2:	b085      	sub	sp, #20
 80106d4:	4605      	mov	r5, r0
 80106d6:	460e      	mov	r6, r1
  switch (event->event_id)
 80106d8:	3b02      	subs	r3, #2
 80106da:	2b03      	cmp	r3, #3
 80106dc:	f200 80c3 	bhi.w	8010866 <dcd_event_handler+0x19a>
 80106e0:	e8df f003 	tbb	[pc, r3]
 80106e4:	021f4733 	.word	0x021f4733
      if ( _usbd_dev.connected )
 80106e8:	4b62      	ldr	r3, [pc, #392]	; (8010874 <dcd_event_handler+0x1a8>)
 80106ea:	781a      	ldrb	r2, [r3, #0]
 80106ec:	07d1      	lsls	r1, r2, #31
 80106ee:	d515      	bpl.n	801071c <dcd_event_handler+0x50>
        _usbd_dev.suspended = 0;
 80106f0:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80106f2:	4961      	ldr	r1, [pc, #388]	; (8010878 <dcd_event_handler+0x1ac>)
        _usbd_dev.suspended = 0;
 80106f4:	f36f 0282 	bfc	r2, #2, #1
        osal_queue_send(_usbd_q, event, in_isr);
 80106f8:	680f      	ldr	r7, [r1, #0]
        _usbd_dev.suspended = 0;
 80106fa:	701a      	strb	r2, [r3, #0]
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 80106fc:	b9ee      	cbnz	r6, 801073a <dcd_event_handler+0x6e>
  qhdl->interrupt_set(false);
 80106fe:	463c      	mov	r4, r7
 8010700:	4630      	mov	r0, r6
 8010702:	f854 3b04 	ldr.w	r3, [r4], #4
 8010706:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8010708:	4629      	mov	r1, r5
 801070a:	4620      	mov	r0, r4
 801070c:	f7ff f8fc 	bl	800f908 <tu_fifo_write>
 8010710:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	2001      	movs	r0, #1
 8010716:	4798      	blx	r3

  if (!in_isr) {
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8010718:	2c00      	cmp	r4, #0
 801071a:	d075      	beq.n	8010808 <dcd_event_handler+0x13c>
}
 801071c:	b005      	add	sp, #20
 801071e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if ( _usbd_dev.connected )
 8010722:	4b54      	ldr	r3, [pc, #336]	; (8010874 <dcd_event_handler+0x1a8>)
 8010724:	781a      	ldrb	r2, [r3, #0]
 8010726:	07d0      	lsls	r0, r2, #31
 8010728:	d5f8      	bpl.n	801071c <dcd_event_handler+0x50>
        _usbd_dev.suspended = 1;
 801072a:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 801072c:	4952      	ldr	r1, [pc, #328]	; (8010878 <dcd_event_handler+0x1ac>)
        _usbd_dev.suspended = 1;
 801072e:	f042 0204 	orr.w	r2, r2, #4
        osal_queue_send(_usbd_q, event, in_isr);
 8010732:	680f      	ldr	r7, [r1, #0]
        _usbd_dev.suspended = 1;
 8010734:	701a      	strb	r2, [r3, #0]
  if (!in_isr) {
 8010736:	2e00      	cmp	r6, #0
 8010738:	d0e1      	beq.n	80106fe <dcd_event_handler+0x32>
  bool success = tu_fifo_write(&qhdl->ff, data);
 801073a:	4629      	mov	r1, r5
 801073c:	1d38      	adds	r0, r7, #4
 801073e:	f7ff f8e3 	bl	800f908 <tu_fifo_write>
 8010742:	4604      	mov	r4, r0
  TU_ASSERT(success);
 8010744:	2c00      	cmp	r4, #0
 8010746:	d1e9      	bne.n	801071c <dcd_event_handler+0x50>
 8010748:	e05e      	b.n	8010808 <dcd_event_handler+0x13c>
      _usbd_dev.connected  = 0;
 801074a:	4b4a      	ldr	r3, [pc, #296]	; (8010874 <dcd_event_handler+0x1a8>)
      _usbd_dev.cfg_num    = 0;
 801074c:	2100      	movs	r1, #0
      _usbd_dev.connected  = 0;
 801074e:	781a      	ldrb	r2, [r3, #0]
 8010750:	f36f 0200 	bfc	r2, #0, #1
 8010754:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 8010756:	781a      	ldrb	r2, [r3, #0]
 8010758:	f36f 0241 	bfc	r2, #1, #1
 801075c:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 801075e:	7059      	strb	r1, [r3, #1]
      _usbd_dev.suspended  = 0;
 8010760:	781a      	ldrb	r2, [r3, #0]
 8010762:	f361 0282 	bfi	r2, r1, #2, #1
      osal_queue_send(_usbd_q, event, in_isr);
 8010766:	4944      	ldr	r1, [pc, #272]	; (8010878 <dcd_event_handler+0x1ac>)
      _usbd_dev.suspended  = 0;
 8010768:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 801076a:	680f      	ldr	r7, [r1, #0]
  if (!in_isr) {
 801076c:	2e00      	cmp	r6, #0
 801076e:	d1e4      	bne.n	801073a <dcd_event_handler+0x6e>
 8010770:	e7c5      	b.n	80106fe <dcd_event_handler+0x32>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010772:	4f42      	ldr	r7, [pc, #264]	; (801087c <dcd_event_handler+0x1b0>)
 8010774:	4c42      	ldr	r4, [pc, #264]	; (8010880 <dcd_event_handler+0x1b4>)
 8010776:	783a      	ldrb	r2, [r7, #0]
 8010778:	2c00      	cmp	r4, #0
 801077a:	d04d      	beq.n	8010818 <dcd_event_handler+0x14c>
 801077c:	2400      	movs	r4, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801077e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8010884 <dcd_event_handler+0x1b8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010782:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8010888 <dcd_event_handler+0x1bc>
 8010786:	e004      	b.n	8010792 <dcd_event_handler+0xc6>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010788:	3401      	adds	r4, #1
 801078a:	1c53      	adds	r3, r2, #1
 801078c:	b2e4      	uxtb	r4, r4
 801078e:	42a3      	cmp	r3, r4
 8010790:	db15      	blt.n	80107be <dcd_event_handler+0xf2>
    drvid -= _app_driver_count;
 8010792:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010794:	4294      	cmp	r4, r2
    drvid -= _app_driver_count;
 8010796:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010798:	d354      	bcc.n	8010844 <dcd_event_handler+0x178>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 801079a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801079e:	2b01      	cmp	r3, #1
 80107a0:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
 80107a4:	d8f0      	bhi.n	8010788 <dcd_event_handler+0xbc>
        if (driver && driver->sof)
 80107a6:	694b      	ldr	r3, [r1, #20]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d0ed      	beq.n	8010788 <dcd_event_handler+0xbc>
          driver->sof(event->rhport, event->sof.frame_count);
 80107ac:	6869      	ldr	r1, [r5, #4]
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80107ae:	3401      	adds	r4, #1
          driver->sof(event->rhport, event->sof.frame_count);
 80107b0:	7828      	ldrb	r0, [r5, #0]
 80107b2:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80107b4:	783a      	ldrb	r2, [r7, #0]
 80107b6:	b2e4      	uxtb	r4, r4
 80107b8:	1c53      	adds	r3, r2, #1
 80107ba:	42a3      	cmp	r3, r4
 80107bc:	dae9      	bge.n	8010792 <dcd_event_handler+0xc6>
      if ( _usbd_dev.suspended )
 80107be:	4b2d      	ldr	r3, [pc, #180]	; (8010874 <dcd_event_handler+0x1a8>)
 80107c0:	781a      	ldrb	r2, [r3, #0]
 80107c2:	0752      	lsls	r2, r2, #29
 80107c4:	d5aa      	bpl.n	801071c <dcd_event_handler+0x50>
        _usbd_dev.suspended = 0;
 80107c6:	781a      	ldrb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80107c8:	2100      	movs	r1, #0
        _usbd_dev.suspended = 0;
 80107ca:	f36f 0282 	bfc	r2, #2, #1
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80107ce:	9103      	str	r1, [sp, #12]
 80107d0:	e9cd 1101 	strd	r1, r1, [sp, #4]
        _usbd_dev.suspended = 0;
 80107d4:	701a      	strb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80107d6:	2105      	movs	r1, #5
 80107d8:	782b      	ldrb	r3, [r5, #0]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 80107da:	4a27      	ldr	r2, [pc, #156]	; (8010878 <dcd_event_handler+0x1ac>)
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80107dc:	f88d 1005 	strb.w	r1, [sp, #5]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 80107e0:	6815      	ldr	r5, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80107e2:	f88d 3004 	strb.w	r3, [sp, #4]
 80107e6:	2e00      	cmp	r6, #0
 80107e8:	d134      	bne.n	8010854 <dcd_event_handler+0x188>
  qhdl->interrupt_set(false);
 80107ea:	462c      	mov	r4, r5
 80107ec:	4630      	mov	r0, r6
 80107ee:	f854 3b04 	ldr.w	r3, [r4], #4
 80107f2:	4798      	blx	r3
  bool success = tu_fifo_write(&qhdl->ff, data);
 80107f4:	a901      	add	r1, sp, #4
 80107f6:	4620      	mov	r0, r4
 80107f8:	f7ff f886 	bl	800f908 <tu_fifo_write>
 80107fc:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 80107fe:	682b      	ldr	r3, [r5, #0]
 8010800:	2001      	movs	r0, #1
 8010802:	4798      	blx	r3
  TU_ASSERT(success);
 8010804:	2c00      	cmp	r4, #0
 8010806:	d189      	bne.n	801071c <dcd_event_handler+0x50>
 8010808:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801080c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010810:	07db      	lsls	r3, r3, #31
 8010812:	d583      	bpl.n	801071c <dcd_event_handler+0x50>
 8010814:	be00      	bkpt	0x0000
}
 8010816:	e781      	b.n	801071c <dcd_event_handler+0x50>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010818:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8010884 <dcd_event_handler+0x1b8>
 801081c:	e004      	b.n	8010828 <dcd_event_handler+0x15c>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 801081e:	3401      	adds	r4, #1
 8010820:	1c53      	adds	r3, r2, #1
 8010822:	b2e4      	uxtb	r4, r4
 8010824:	42a3      	cmp	r3, r4
 8010826:	dbca      	blt.n	80107be <dcd_event_handler+0xf2>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8010828:	2c01      	cmp	r4, #1
 801082a:	d8f8      	bhi.n	801081e <dcd_event_handler+0x152>
 801082c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
        if (driver && driver->sof)
 8010830:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8010834:	695b      	ldr	r3, [r3, #20]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d0f1      	beq.n	801081e <dcd_event_handler+0x152>
          driver->sof(event->rhport, event->sof.frame_count);
 801083a:	6869      	ldr	r1, [r5, #4]
 801083c:	7828      	ldrb	r0, [r5, #0]
 801083e:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8010840:	783a      	ldrb	r2, [r7, #0]
 8010842:	e7ec      	b.n	801081e <dcd_event_handler+0x152>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8010844:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010848:	f8d9 3000 	ldr.w	r3, [r9]
        if (driver && driver->sof)
 801084c:	eb13 01c1 	adds.w	r1, r3, r1, lsl #3
 8010850:	d09a      	beq.n	8010788 <dcd_event_handler+0xbc>
 8010852:	e7a8      	b.n	80107a6 <dcd_event_handler+0xda>
  bool success = tu_fifo_write(&qhdl->ff, data);
 8010854:	a901      	add	r1, sp, #4
 8010856:	1d28      	adds	r0, r5, #4
 8010858:	f7ff f856 	bl	800f908 <tu_fifo_write>
 801085c:	4604      	mov	r4, r0
  TU_ASSERT(success);
 801085e:	2c00      	cmp	r4, #0
 8010860:	f47f af5c 	bne.w	801071c <dcd_event_handler+0x50>
 8010864:	e7d0      	b.n	8010808 <dcd_event_handler+0x13c>
      osal_queue_send(_usbd_q, event, in_isr);
 8010866:	4b04      	ldr	r3, [pc, #16]	; (8010878 <dcd_event_handler+0x1ac>)
 8010868:	681f      	ldr	r7, [r3, #0]
  if (!in_isr) {
 801086a:	2900      	cmp	r1, #0
 801086c:	f47f af65 	bne.w	801073a <dcd_event_handler+0x6e>
 8010870:	e745      	b.n	80106fe <dcd_event_handler+0x32>
 8010872:	bf00      	nop
 8010874:	2400cfcc 	.word	0x2400cfcc
 8010878:	2400d004 	.word	0x2400d004
 801087c:	2400cfc8 	.word	0x2400cfc8
 8010880:	00000000 	.word	0x00000000
 8010884:	08019530 	.word	0x08019530
 8010888:	2400cfc4 	.word	0x2400cfc4

0801088c <usbd_open_edpt_pair>:
{
 801088c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010890:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  for(int i=0; i<ep_count; i++)
 8010892:	2a00      	cmp	r2, #0
 8010894:	d046      	beq.n	8010924 <usbd_open_edpt_pair+0x98>
 8010896:	460c      	mov	r4, r1
 8010898:	461e      	mov	r6, r3
 801089a:	4615      	mov	r5, r2
 801089c:	f04f 0b00 	mov.w	fp, #0
  rhport = _usbd_rhport;
 80108a0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010930 <usbd_open_edpt_pair+0xa4>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80108a4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8010934 <usbd_open_edpt_pair+0xa8>
 80108a8:	e016      	b.n	80108d8 <usbd_open_edpt_pair+0x4c>
 80108aa:	f898 1002 	ldrb.w	r1, [r8, #2]
  rhport = _usbd_rhport;
 80108ae:	f899 a000 	ldrb.w	sl, [r9]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80108b2:	f001 faab 	bl	8011e0c <tu_edpt_validate>
 80108b6:	4603      	mov	r3, r0
  return dcd_edpt_open(rhport, desc_ep);
 80108b8:	4621      	mov	r1, r4
 80108ba:	4650      	mov	r0, sl
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80108bc:	b1d3      	cbz	r3, 80108f4 <usbd_open_edpt_pair+0x68>
  return dcd_edpt_open(rhport, desc_ep);
 80108be:	f000 fb0f 	bl	8010ee0 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80108c2:	b1f0      	cbz	r0, 8010902 <usbd_open_edpt_pair+0x76>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80108c4:	78a3      	ldrb	r3, [r4, #2]
 80108c6:	09da      	lsrs	r2, r3, #7
 80108c8:	d124      	bne.n	8010914 <usbd_open_edpt_pair+0x88>
  for(int i=0; i<ep_count; i++)
 80108ca:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_out) = desc_ep->bEndpointAddress;
 80108ce:	703b      	strb	r3, [r7, #0]
 80108d0:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
 80108d2:	45ab      	cmp	fp, r5
 80108d4:	441c      	add	r4, r3
 80108d6:	d025      	beq.n	8010924 <usbd_open_edpt_pair+0x98>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80108d8:	7863      	ldrb	r3, [r4, #1]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80108da:	4620      	mov	r0, r4
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80108dc:	2b05      	cmp	r3, #5
 80108de:	d110      	bne.n	8010902 <usbd_open_edpt_pair+0x76>
 80108e0:	78e1      	ldrb	r1, [r4, #3]
 80108e2:	f001 0103 	and.w	r1, r1, #3
 80108e6:	42b1      	cmp	r1, r6
 80108e8:	d10b      	bne.n	8010902 <usbd_open_edpt_pair+0x76>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80108ea:	78a3      	ldrb	r3, [r4, #2]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80108ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108f0:	2b08      	cmp	r3, #8
 80108f2:	d9da      	bls.n	80108aa <usbd_open_edpt_pair+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80108f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80108f8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80108fc:	07da      	lsls	r2, r3, #31
 80108fe:	d500      	bpl.n	8010902 <usbd_open_edpt_pair+0x76>
 8010900:	be00      	bkpt	0x0000
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8010902:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010906:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801090a:	07db      	lsls	r3, r3, #31
 801090c:	d40d      	bmi.n	801092a <usbd_open_edpt_pair+0x9e>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 801090e:	2000      	movs	r0, #0
}
 8010910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (*ep_in) = desc_ep->bEndpointAddress;
 8010914:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  for(int i=0; i<ep_count; i++)
 8010916:	f10b 0b01 	add.w	fp, fp, #1
      (*ep_in) = desc_ep->bEndpointAddress;
 801091a:	7013      	strb	r3, [r2, #0]
  for(int i=0; i<ep_count; i++)
 801091c:	45ab      	cmp	fp, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
 801091e:	7823      	ldrb	r3, [r4, #0]
 8010920:	441c      	add	r4, r3
 8010922:	d1d9      	bne.n	80108d8 <usbd_open_edpt_pair+0x4c>
  return true;
 8010924:	2001      	movs	r0, #1
}
 8010926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 801092a:	be00      	bkpt	0x0000
 801092c:	e7ef      	b.n	801090e <usbd_open_edpt_pair+0x82>
 801092e:	bf00      	nop
 8010930:	24000350 	.word	0x24000350
 8010934:	2400cfcc 	.word	0x2400cfcc

08010938 <usbd_edpt_open>:
{
 8010938:	b538      	push	{r3, r4, r5, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801093a:	788b      	ldrb	r3, [r1, #2]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 801093c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010940:	2b08      	cmp	r3, #8
 8010942:	d908      	bls.n	8010956 <usbd_edpt_open+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010944:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010948:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801094c:	07db      	lsls	r3, r3, #31
 801094e:	d500      	bpl.n	8010952 <usbd_edpt_open+0x1a>
 8010950:	be00      	bkpt	0x0000
}
 8010952:	2000      	movs	r0, #0
 8010954:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010956:	4a08      	ldr	r2, [pc, #32]	; (8010978 <usbd_edpt_open+0x40>)
 8010958:	460c      	mov	r4, r1
  rhport = _usbd_rhport;
 801095a:	4b08      	ldr	r3, [pc, #32]	; (801097c <usbd_edpt_open+0x44>)
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 801095c:	4608      	mov	r0, r1
 801095e:	7891      	ldrb	r1, [r2, #2]
  rhport = _usbd_rhport;
 8010960:	781d      	ldrb	r5, [r3, #0]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8010962:	f001 fa53 	bl	8011e0c <tu_edpt_validate>
 8010966:	2800      	cmp	r0, #0
 8010968:	d0ec      	beq.n	8010944 <usbd_edpt_open+0xc>
  return dcd_edpt_open(rhport, desc_ep);
 801096a:	4621      	mov	r1, r4
 801096c:	4628      	mov	r0, r5
}
 801096e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
 8010972:	f000 bab5 	b.w	8010ee0 <dcd_edpt_open>
 8010976:	bf00      	nop
 8010978:	2400cfcc 	.word	0x2400cfcc
 801097c:	24000350 	.word	0x24000350

08010980 <usbd_edpt_claim>:
{
 8010980:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010982:	4805      	ldr	r0, [pc, #20]	; (8010998 <usbd_edpt_claim+0x18>)
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010984:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8010986:	09da      	lsrs	r2, r3, #7
 8010988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801098c:	3225      	adds	r2, #37	; 0x25
 801098e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8010992:	4418      	add	r0, r3
 8010994:	f001 ba0e 	b.w	8011db4 <tu_edpt_claim>
 8010998:	2400cfcc 	.word	0x2400cfcc

0801099c <usbd_edpt_release>:
{
 801099c:	460b      	mov	r3, r1
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 801099e:	4805      	ldr	r0, [pc, #20]	; (80109b4 <usbd_edpt_release+0x18>)
  return tu_edpt_release(ep_state, _usbd_mutex);
 80109a0:	2100      	movs	r1, #0
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80109a2:	09da      	lsrs	r2, r3, #7
 80109a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109a8:	3225      	adds	r2, #37	; 0x25
 80109aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  return tu_edpt_release(ep_state, _usbd_mutex);
 80109ae:	4418      	add	r0, r3
 80109b0:	f001 ba18 	b.w	8011de4 <tu_edpt_release>
 80109b4:	2400cfcc 	.word	0x2400cfcc

080109b8 <usbd_edpt_xfer>:
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80109b8:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
{
 80109bc:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80109be:	4c18      	ldr	r4, [pc, #96]	; (8010a20 <usbd_edpt_xfer+0x68>)
 80109c0:	eb04 044c 	add.w	r4, r4, ip, lsl #1
 80109c4:	eb04 10d1 	add.w	r0, r4, r1, lsr #7
 80109c8:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
 80109cc:	f01c 0f01 	tst.w	ip, #1
 80109d0:	d008      	beq.n	80109e4 <usbd_edpt_xfer+0x2c>
 80109d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80109d6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80109da:	07da      	lsls	r2, r3, #31
 80109dc:	d500      	bpl.n	80109e0 <usbd_edpt_xfer+0x28>
 80109de:	be00      	bkpt	0x0000
 80109e0:	2000      	movs	r0, #0
}
 80109e2:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80109e4:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
 80109e8:	f100 0420 	add.w	r4, r0, #32
  rhport = _usbd_rhport;
 80109ec:	480d      	ldr	r0, [pc, #52]	; (8010a24 <usbd_edpt_xfer+0x6c>)
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80109ee:	f04c 0c01 	orr.w	ip, ip, #1
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 80109f2:	7800      	ldrb	r0, [r0, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80109f4:	f884 c005 	strb.w	ip, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 80109f8:	f000 fb74 	bl	80110e4 <dcd_edpt_xfer>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d1f0      	bne.n	80109e2 <usbd_edpt_xfer+0x2a>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010a00:	7963      	ldrb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010a02:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010a06:	f360 0300 	bfi	r3, r0, #0, #1
 8010a0a:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8010a0c:	7963      	ldrb	r3, [r4, #5]
 8010a0e:	f360 0382 	bfi	r3, r0, #2, #1
 8010a12:	7163      	strb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010a14:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 8010a18:	07db      	lsls	r3, r3, #31
 8010a1a:	d5e1      	bpl.n	80109e0 <usbd_edpt_xfer+0x28>
 8010a1c:	be00      	bkpt	0x0000
}
 8010a1e:	bd10      	pop	{r4, pc}
 8010a20:	2400cfcc 	.word	0x2400cfcc
 8010a24:	24000350 	.word	0x24000350

08010a28 <usbd_edpt_xfer_fifo>:
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010a28:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
{
 8010a2c:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8010a2e:	4c18      	ldr	r4, [pc, #96]	; (8010a90 <usbd_edpt_xfer_fifo+0x68>)
 8010a30:	eb04 044c 	add.w	r4, r4, ip, lsl #1
 8010a34:	eb04 10d1 	add.w	r0, r4, r1, lsr #7
 8010a38:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
 8010a3c:	f01c 0f01 	tst.w	ip, #1
 8010a40:	d008      	beq.n	8010a54 <usbd_edpt_xfer_fifo+0x2c>
 8010a42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010a46:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010a4a:	07da      	lsls	r2, r3, #31
 8010a4c:	d500      	bpl.n	8010a50 <usbd_edpt_xfer_fifo+0x28>
 8010a4e:	be00      	bkpt	0x0000
 8010a50:	2000      	movs	r0, #0
}
 8010a52:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8010a54:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
 8010a58:	f100 0420 	add.w	r4, r0, #32
  rhport = _usbd_rhport;
 8010a5c:	480d      	ldr	r0, [pc, #52]	; (8010a94 <usbd_edpt_xfer_fifo+0x6c>)
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8010a5e:	f04c 0c01 	orr.w	ip, ip, #1
  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 8010a62:	7800      	ldrb	r0, [r0, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8010a64:	f884 c005 	strb.w	ip, [r4, #5]
  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 8010a68:	f000 fc1c 	bl	80112a4 <dcd_edpt_xfer_fifo>
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	d1f0      	bne.n	8010a52 <usbd_edpt_xfer_fifo+0x2a>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010a70:	7963      	ldrb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010a72:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010a76:	f360 0300 	bfi	r3, r0, #0, #1
 8010a7a:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8010a7c:	7963      	ldrb	r3, [r4, #5]
 8010a7e:	f360 0382 	bfi	r3, r0, #2, #1
 8010a82:	7163      	strb	r3, [r4, #5]
    TU_BREAKPOINT();
 8010a84:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 8010a88:	07db      	lsls	r3, r3, #31
 8010a8a:	d5e1      	bpl.n	8010a50 <usbd_edpt_xfer_fifo+0x28>
 8010a8c:	be00      	bkpt	0x0000
}
 8010a8e:	bd10      	pop	{r4, pc}
 8010a90:	2400cfcc 	.word	0x2400cfcc
 8010a94:	24000350 	.word	0x24000350

08010a98 <usbd_edpt_clear_stall>:
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8010a98:	4a0d      	ldr	r2, [pc, #52]	; (8010ad0 <usbd_edpt_clear_stall+0x38>)
 8010a9a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8010a9e:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010aa2:	eb02 13d1 	add.w	r3, r2, r1, lsr #7
 8010aa6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010aaa:	0792      	lsls	r2, r2, #30
 8010aac:	d400      	bmi.n	8010ab0 <usbd_edpt_clear_stall+0x18>
 8010aae:	4770      	bx	lr
{
 8010ab0:	b510      	push	{r4, lr}
 8010ab2:	f103 0420 	add.w	r4, r3, #32
  rhport = _usbd_rhport;
 8010ab6:	4b07      	ldr	r3, [pc, #28]	; (8010ad4 <usbd_edpt_clear_stall+0x3c>)
    dcd_edpt_clear_stall(rhport, ep_addr);
 8010ab8:	7818      	ldrb	r0, [r3, #0]
 8010aba:	f000 fda3 	bl	8011604 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8010abe:	7963      	ldrb	r3, [r4, #5]
 8010ac0:	f36f 0341 	bfc	r3, #1, #1
 8010ac4:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010ac6:	7963      	ldrb	r3, [r4, #5]
 8010ac8:	f36f 0300 	bfc	r3, #0, #1
 8010acc:	7163      	strb	r3, [r4, #5]
}
 8010ace:	bd10      	pop	{r4, pc}
 8010ad0:	2400cfcc 	.word	0x2400cfcc
 8010ad4:	24000350 	.word	0x24000350

08010ad8 <usbd_edpt_close>:
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
  rhport = _usbd_rhport;

  TU_ASSERT(dcd_edpt_close, /**/);
 8010ad8:	4b15      	ldr	r3, [pc, #84]	; (8010b30 <usbd_edpt_close+0x58>)
 8010ada:	b1fb      	cbz	r3, 8010b1c <usbd_edpt_close+0x44>
  rhport = _usbd_rhport;
 8010adc:	4b15      	ldr	r3, [pc, #84]	; (8010b34 <usbd_edpt_close+0x5c>)
{
 8010ade:	b510      	push	{r4, lr}
 8010ae0:	460c      	mov	r4, r1
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_close(rhport, ep_addr);
 8010ae2:	7818      	ldrb	r0, [r3, #0]
 8010ae4:	f000 fc84 	bl	80113f0 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8010ae8:	4b13      	ldr	r3, [pc, #76]	; (8010b38 <usbd_edpt_close+0x60>)
 8010aea:	f004 017f 	and.w	r1, r4, #127	; 0x7f
 8010aee:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010af2:	eb03 11d4 	add.w	r1, r3, r4, lsr #7
 8010af6:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8010afa:	f36f 0341 	bfc	r3, #1, #1
 8010afe:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8010b02:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8010b06:	f36f 0300 	bfc	r3, #0, #1
 8010b0a:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8010b0e:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8010b12:	f36f 0382 	bfc	r3, #2, #1
 8010b16:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25

  return;
}
 8010b1a:	bd10      	pop	{r4, pc}
  TU_ASSERT(dcd_edpt_close, /**/);
 8010b1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010b20:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010b24:	07db      	lsls	r3, r3, #31
 8010b26:	d501      	bpl.n	8010b2c <usbd_edpt_close+0x54>
 8010b28:	be00      	bkpt	0x0000
 8010b2a:	4770      	bx	lr
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	080113f1 	.word	0x080113f1
 8010b34:	24000350 	.word	0x24000350
 8010b38:	2400cfcc 	.word	0x2400cfcc

08010b3c <tud_control_status>:
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8010b3c:	b410      	push	{r4}
  _ctrl_xfer.request       = (*request);
 8010b3e:	4c0b      	ldr	r4, [pc, #44]	; (8010b6c <tud_control_status+0x30>)
{
 8010b40:	460b      	mov	r3, r1
 8010b42:	4684      	mov	ip, r0
  _ctrl_xfer.request       = (*request);
 8010b44:	6808      	ldr	r0, [r1, #0]
 8010b46:	4622      	mov	r2, r4
 8010b48:	6849      	ldr	r1, [r1, #4]
 8010b4a:	c203      	stmia	r2!, {r0, r1}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010b4c:	f993 2000 	ldrsb.w	r2, [r3]
  _ctrl_xfer.buffer        = NULL;
 8010b50:	2300      	movs	r3, #0
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010b52:	4660      	mov	r0, ip
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010b54:	429a      	cmp	r2, r3
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010b56:	461a      	mov	r2, r3
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8010b58:	e9c4 3302 	strd	r3, r3, [r4, #8]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010b5c:	bfac      	ite	ge
 8010b5e:	2180      	movge	r1, #128	; 0x80
 8010b60:	4619      	movlt	r1, r3

  return _status_stage_xact(rhport, request);
}
 8010b62:	f85d 4b04 	ldr.w	r4, [sp], #4
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010b66:	f7ff bf27 	b.w	80109b8 <usbd_edpt_xfer>
 8010b6a:	bf00      	nop
 8010b6c:	2400d0c8 	.word	0x2400d0c8

08010b70 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8010b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  _ctrl_xfer.request       = (*request);
 8010b72:	4f2c      	ldr	r7, [pc, #176]	; (8010c24 <tud_control_xfer+0xb4>)
{
 8010b74:	468c      	mov	ip, r1
 8010b76:	4606      	mov	r6, r0
  _ctrl_xfer.request       = (*request);
 8010b78:	6808      	ldr	r0, [r1, #0]
 8010b7a:	46be      	mov	lr, r7
 8010b7c:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8010b7e:	60ba      	str	r2, [r7, #8]
{
 8010b80:	b083      	sub	sp, #12
  _ctrl_xfer.request       = (*request);
 8010b82:	e8ae 0003 	stmia.w	lr!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
 8010b86:	2100      	movs	r1, #0
 8010b88:	81f9      	strh	r1, [r7, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8010b8a:	f8bc 5006 	ldrh.w	r5, [ip, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8010b8e:	42ab      	cmp	r3, r5
 8010b90:	bf28      	it	cs
 8010b92:	462b      	movcs	r3, r5
 8010b94:	81bb      	strh	r3, [r7, #12]

  if (request->wLength > 0U)
 8010b96:	b18d      	cbz	r5, 8010bbc <tud_control_xfer+0x4c>
  {
    if(_ctrl_xfer.data_len > 0U)
 8010b98:	b333      	cbz	r3, 8010be8 <tud_control_xfer+0x78>
    {
      TU_ASSERT(buffer);
 8010b9a:	4614      	mov	r4, r2
 8010b9c:	b362      	cbz	r2, 8010bf8 <tud_control_xfer+0x88>
 8010b9e:	2b40      	cmp	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010ba0:	f997 2000 	ldrsb.w	r2, [r7]
 8010ba4:	bf28      	it	cs
 8010ba6:	2340      	movcs	r3, #64	; 0x40
 8010ba8:	2a00      	cmp	r2, #0
 8010baa:	db2e      	blt.n	8010c0a <tud_control_xfer+0x9a>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010bac:	4a1e      	ldr	r2, [pc, #120]	; (8010c28 <tud_control_xfer+0xb8>)
 8010bae:	4630      	mov	r0, r6
 8010bb0:	f7ff ff02 	bl	80109b8 <usbd_edpt_xfer>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8010bb4:	b178      	cbz	r0, 8010bd6 <tud_control_xfer+0x66>
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
 8010bb6:	2001      	movs	r0, #1
}
 8010bb8:	b003      	add	sp, #12
 8010bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010bbc:	f99c 1000 	ldrsb.w	r1, [ip]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010bc0:	462b      	mov	r3, r5
 8010bc2:	462a      	mov	r2, r5
 8010bc4:	4630      	mov	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010bc6:	2900      	cmp	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010bc8:	bfac      	ite	ge
 8010bca:	2180      	movge	r1, #128	; 0x80
 8010bcc:	2100      	movlt	r1, #0
 8010bce:	f7ff fef3 	bl	80109b8 <usbd_edpt_xfer>
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8010bd2:	2800      	cmp	r0, #0
 8010bd4:	d1ef      	bne.n	8010bb6 <tud_control_xfer+0x46>
 8010bd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010bda:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010bde:	07db      	lsls	r3, r3, #31
 8010be0:	d510      	bpl.n	8010c04 <tud_control_xfer+0x94>
 8010be2:	be00      	bkpt	0x0000
}
 8010be4:	b003      	add	sp, #12
 8010be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010be8:	f997 1000 	ldrsb.w	r1, [r7]
 8010bec:	461a      	mov	r2, r3
 8010bee:	2900      	cmp	r1, #0
 8010bf0:	bfac      	ite	ge
 8010bf2:	4619      	movge	r1, r3
 8010bf4:	2180      	movlt	r1, #128	; 0x80
 8010bf6:	e7da      	b.n	8010bae <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 8010bf8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010bfc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010c00:	07da      	lsls	r2, r3, #31
 8010c02:	d40c      	bmi.n	8010c1e <tud_control_xfer+0xae>
 8010c04:	2000      	movs	r0, #0
}
 8010c06:	b003      	add	sp, #12
 8010c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  memcpy(dest, src, count);
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	4621      	mov	r1, r4
 8010c0e:	4806      	ldr	r0, [pc, #24]	; (8010c28 <tud_control_xfer+0xb8>)
 8010c10:	9301      	str	r3, [sp, #4]
 8010c12:	f001 f9bd 	bl	8011f90 <memcpy>
    ep_addr = EDPT_CTRL_IN;
 8010c16:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010c18:	4a03      	ldr	r2, [pc, #12]	; (8010c28 <tud_control_xfer+0xb8>)
 8010c1a:	9b01      	ldr	r3, [sp, #4]
 8010c1c:	e7c7      	b.n	8010bae <tud_control_xfer+0x3e>
      TU_ASSERT(buffer);
 8010c1e:	be00      	bkpt	0x0000
 8010c20:	4620      	mov	r0, r4
 8010c22:	e7c9      	b.n	8010bb8 <tud_control_xfer+0x48>
 8010c24:	2400d0c8 	.word	0x2400d0c8
 8010c28:	2400d0dc 	.word	0x2400d0dc

08010c2c <usbd_control_reset>:
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
  tu_varclr(&_ctrl_xfer);
 8010c2c:	4b03      	ldr	r3, [pc, #12]	; (8010c3c <usbd_control_reset+0x10>)
 8010c2e:	2200      	movs	r2, #0
 8010c30:	e9c3 2200 	strd	r2, r2, [r3]
 8010c34:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8010c38:	611a      	str	r2, [r3, #16]
}
 8010c3a:	4770      	bx	lr
 8010c3c:	2400d0c8 	.word	0x2400d0c8

08010c40 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 8010c40:	4b01      	ldr	r3, [pc, #4]	; (8010c48 <usbd_control_set_complete_callback+0x8>)
 8010c42:	6118      	str	r0, [r3, #16]
}
 8010c44:	4770      	bx	lr
 8010c46:	bf00      	nop
 8010c48:	2400d0c8 	.word	0x2400d0c8

08010c4c <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8010c4c:	b410      	push	{r4}
 8010c4e:	4602      	mov	r2, r0
  _ctrl_xfer.request       = (*request);
 8010c50:	4c05      	ldr	r4, [pc, #20]	; (8010c68 <usbd_control_set_request+0x1c>)
 8010c52:	6800      	ldr	r0, [r0, #0]
 8010c54:	4623      	mov	r3, r4
 8010c56:	6851      	ldr	r1, [r2, #4]
 8010c58:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8010c5a:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8010c5c:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 8010c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	2400d0c8 	.word	0x2400d0c8

08010c6c <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8010c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010c6e:	4c48      	ldr	r4, [pc, #288]	; (8010d90 <usbd_control_xfer_cb+0x124>)
 8010c70:	09c9      	lsrs	r1, r1, #7
{
 8010c72:	b083      	sub	sp, #12
 8010c74:	4606      	mov	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010c76:	7822      	ldrb	r2, [r4, #0]
{
 8010c78:	461f      	mov	r7, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8010c7a:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
 8010c7e:	d01a      	beq.n	8010cb6 <usbd_control_xfer_cb+0x4a>
  {
    TU_ASSERT(0 == xferred_bytes);
 8010c80:	b14b      	cbz	r3, 8010c96 <usbd_control_xfer_cb+0x2a>
 8010c82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010c86:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010c8a:	07da      	lsls	r2, r3, #31
 8010c8c:	d465      	bmi.n	8010d5a <usbd_control_xfer_cb+0xee>
 8010c8e:	2500      	movs	r5, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
 8010c90:	4628      	mov	r0, r5
 8010c92:	b003      	add	sp, #12
 8010c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8010c96:	4b3f      	ldr	r3, [pc, #252]	; (8010d94 <usbd_control_xfer_cb+0x128>)
 8010c98:	b113      	cbz	r3, 8010ca0 <usbd_control_xfer_cb+0x34>
 8010c9a:	4621      	mov	r1, r4
 8010c9c:	f3af 8000 	nop.w
    if (_ctrl_xfer.complete_cb)
 8010ca0:	6923      	ldr	r3, [r4, #16]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d055      	beq.n	8010d52 <usbd_control_xfer_cb+0xe6>
    return true;
 8010ca6:	2501      	movs	r5, #1
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8010ca8:	4a39      	ldr	r2, [pc, #228]	; (8010d90 <usbd_control_xfer_cb+0x124>)
 8010caa:	2103      	movs	r1, #3
 8010cac:	4630      	mov	r0, r6
 8010cae:	4798      	blx	r3
}
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	b003      	add	sp, #12
 8010cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8010cb6:	f994 2000 	ldrsb.w	r2, [r4]
 8010cba:	2a00      	cmp	r2, #0
 8010cbc:	db06      	blt.n	8010ccc <usbd_control_xfer_cb+0x60>
    TU_VERIFY(_ctrl_xfer.buffer);
 8010cbe:	68a0      	ldr	r0, [r4, #8]
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	d0e4      	beq.n	8010c8e <usbd_control_xfer_cb+0x22>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	4934      	ldr	r1, [pc, #208]	; (8010d98 <usbd_control_xfer_cb+0x12c>)
 8010cc8:	f001 f962 	bl	8011f90 <memcpy>
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010ccc:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010cd0:	88e5      	ldrh	r5, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010cd2:	44bc      	add	ip, r7
  _ctrl_xfer.buffer += xferred_bytes;
 8010cd4:	68a1      	ldr	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010cd6:	fa1f fc8c 	uxth.w	ip, ip
  _ctrl_xfer.buffer += xferred_bytes;
 8010cda:	4439      	add	r1, r7
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010cdc:	4565      	cmp	r5, ip
 8010cde:	bf18      	it	ne
 8010ce0:	2f3f      	cmpne	r7, #63	; 0x3f
  _ctrl_xfer.buffer += xferred_bytes;
 8010ce2:	60a1      	str	r1, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8010ce4:	f8a4 c00e 	strh.w	ip, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8010ce8:	bf94      	ite	ls
 8010cea:	2501      	movls	r5, #1
 8010cec:	2500      	movhi	r5, #0
 8010cee:	d81b      	bhi.n	8010d28 <usbd_control_xfer_cb+0xbc>
    if ( _ctrl_xfer.complete_cb )
 8010cf0:	6923      	ldr	r3, [r4, #16]
 8010cf2:	b123      	cbz	r3, 8010cfe <usbd_control_xfer_cb+0x92>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8010cf4:	4a26      	ldr	r2, [pc, #152]	; (8010d90 <usbd_control_xfer_cb+0x124>)
 8010cf6:	2102      	movs	r1, #2
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	4798      	blx	r3
    if ( is_ok )
 8010cfc:	b378      	cbz	r0, 8010d5e <usbd_control_xfer_cb+0xf2>
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010cfe:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010d00:	f994 2000 	ldrsb.w	r2, [r4]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d04:	4630      	mov	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8010d06:	429a      	cmp	r2, r3
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8010d08:	461a      	mov	r2, r3
 8010d0a:	bfac      	ite	ge
 8010d0c:	2180      	movge	r1, #128	; 0x80
 8010d0e:	4619      	movlt	r1, r3
 8010d10:	f7ff fe52 	bl	80109b8 <usbd_edpt_xfer>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8010d14:	4605      	mov	r5, r0
 8010d16:	b9e0      	cbnz	r0, 8010d52 <usbd_control_xfer_cb+0xe6>
    TU_ASSERT( _data_stage_xact(rhport) );
 8010d18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010d1c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010d20:	07db      	lsls	r3, r3, #31
 8010d22:	d5b4      	bpl.n	8010c8e <usbd_control_xfer_cb+0x22>
 8010d24:	be00      	bkpt	0x0000
 8010d26:	e7b3      	b.n	8010c90 <usbd_control_xfer_cb+0x24>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8010d28:	89a2      	ldrh	r2, [r4, #12]
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010d2a:	f994 0000 	ldrsb.w	r0, [r4]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8010d2e:	eba2 030c 	sub.w	r3, r2, ip
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	2b40      	cmp	r3, #64	; 0x40
 8010d36:	bf28      	it	cs
 8010d38:	2340      	movcs	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	db18      	blt.n	8010d70 <usbd_control_xfer_cb+0x104>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010d3e:	4594      	cmp	ip, r2
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8010d40:	4629      	mov	r1, r5
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010d42:	d023      	beq.n	8010d8c <usbd_control_xfer_cb+0x120>
 8010d44:	4a14      	ldr	r2, [pc, #80]	; (8010d98 <usbd_control_xfer_cb+0x12c>)
 8010d46:	4630      	mov	r0, r6
 8010d48:	f7ff fe36 	bl	80109b8 <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
 8010d4c:	4605      	mov	r5, r0
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d0e2      	beq.n	8010d18 <usbd_control_xfer_cb+0xac>
    return true;
 8010d52:	2501      	movs	r5, #1
}
 8010d54:	4628      	mov	r0, r5
 8010d56:	b003      	add	sp, #12
 8010d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_ASSERT(0 == xferred_bytes);
 8010d5a:	be00      	bkpt	0x0000
 8010d5c:	e797      	b.n	8010c8e <usbd_control_xfer_cb+0x22>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8010d5e:	4601      	mov	r1, r0
 8010d60:	4630      	mov	r0, r6
 8010d62:	f000 fbdf 	bl	8011524 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8010d66:	2180      	movs	r1, #128	; 0x80
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f000 fbdb 	bl	8011524 <dcd_edpt_stall>
 8010d6e:	e78f      	b.n	8010c90 <usbd_control_xfer_cb+0x24>
    if ( xact_len ) {
 8010d70:	4594      	cmp	ip, r2
 8010d72:	d008      	beq.n	8010d86 <usbd_control_xfer_cb+0x11a>
  memcpy(dest, src, count);
 8010d74:	461a      	mov	r2, r3
 8010d76:	4808      	ldr	r0, [pc, #32]	; (8010d98 <usbd_control_xfer_cb+0x12c>)
 8010d78:	9301      	str	r3, [sp, #4]
 8010d7a:	f001 f909 	bl	8011f90 <memcpy>
    ep_addr = EDPT_CTRL_IN;
 8010d7e:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010d80:	4a05      	ldr	r2, [pc, #20]	; (8010d98 <usbd_control_xfer_cb+0x12c>)
 8010d82:	9b01      	ldr	r3, [sp, #4]
 8010d84:	e7df      	b.n	8010d46 <usbd_control_xfer_cb+0xda>
    ep_addr = EDPT_CTRL_IN;
 8010d86:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8010d88:	462a      	mov	r2, r5
 8010d8a:	e7dc      	b.n	8010d46 <usbd_control_xfer_cb+0xda>
 8010d8c:	462a      	mov	r2, r5
 8010d8e:	e7da      	b.n	8010d46 <usbd_control_xfer_cb+0xda>
 8010d90:	2400d0c8 	.word	0x2400d0c8
 8010d94:	00000000 	.word	0x00000000
 8010d98:	2400d0dc 	.word	0x2400d0dc

08010d9c <dcd_int_enable>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010d9c:	4b01      	ldr	r3, [pc, #4]	; (8010da4 <dcd_int_enable+0x8>)
 8010d9e:	2220      	movs	r2, #32
 8010da0:	60da      	str	r2, [r3, #12]

void dcd_int_enable (uint8_t rhport)
{
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
}
 8010da2:	4770      	bx	lr
 8010da4:	e000e100 	.word	0xe000e100

08010da8 <dcd_int_disable>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010da8:	4b04      	ldr	r3, [pc, #16]	; (8010dbc <dcd_int_disable+0x14>)
 8010daa:	2220      	movs	r2, #32
 8010dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8010db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010db4:	f3bf 8f6f 	isb	sy

void dcd_int_disable (uint8_t rhport)
{
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
}
 8010db8:	4770      	bx	lr
 8010dba:	bf00      	nop
 8010dbc:	e000e100 	.word	0xe000e100

08010dc0 <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8010dc0:	b410      	push	{r4}
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8010dc2:	4c1b      	ldr	r4, [pc, #108]	; (8010e30 <dcd_set_address+0x70>)
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
  xfer->buffer      = buffer;
  xfer->ff          = NULL;
  xfer->total_len   = total_bytes;
 8010dc4:	f04f 0c00 	mov.w	ip, #0
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8010dc8:	4a1a      	ldr	r2, [pc, #104]	; (8010e34 <dcd_set_address+0x74>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8010dca:	6823      	ldr	r3, [r4, #0]
  xfer->buffer      = buffer;
 8010dcc:	481a      	ldr	r0, [pc, #104]	; (8010e38 <dcd_set_address+0x78>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8010dce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010dd2:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  // EP0 can only handle one packet
  if(epnum == 0) {
    ep0_pending[dir] = total_bytes;
 8010dd6:	4b19      	ldr	r3, [pc, #100]	; (8010e3c <dcd_set_address+0x7c>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8010dd8:	6021      	str	r1, [r4, #0]
    ep0_pending[dir] = total_bytes;
 8010dda:	f8a3 c002 	strh.w	ip, [r3, #2]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8010dde:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  xfer->total_len   = total_bytes;
 8010de2:	f8a0 c018 	strh.w	ip, [r0, #24]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8010de6:	6113      	str	r3, [r2, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8010de8:	6813      	ldr	r3, [r2, #0]
 8010dea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010dee:	6013      	str	r3, [r2, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010df0:	6813      	ldr	r3, [r2, #0]
 8010df2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  xfer->buffer      = buffer;
 8010df6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8010e28 <dcd_set_address+0x68>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  xfer->buffer      = buffer;
 8010dfe:	ed80 7b04 	vstr	d7, [r0, #16]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010e02:	d002      	beq.n	8010e0a <dcd_set_address+0x4a>
}
 8010e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e08:	4770      	bx	lr
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8010e0a:	7f03      	ldrb	r3, [r0, #28]
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d1f9      	bne.n	8010e04 <dcd_set_address+0x44>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8010e10:	68a1      	ldr	r1, [r4, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8010e12:	6813      	ldr	r3, [r2, #0]
 8010e14:	f411 7f80 	tst.w	r1, #256	; 0x100
 8010e18:	bf14      	ite	ne
 8010e1a:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 8010e1e:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8010e22:	430b      	orrs	r3, r1
 8010e24:	6013      	str	r3, [r2, #0]
}
 8010e26:	e7ed      	b.n	8010e04 <dcd_set_address+0x44>
	...
 8010e30:	40080800 	.word	0x40080800
 8010e34:	40080900 	.word	0x40080900
 8010e38:	2400d130 	.word	0x2400d130
 8010e3c:	2400d128 	.word	0x2400d128

08010e40 <dcd_connect>:
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010e40:	4a02      	ldr	r2, [pc, #8]	; (8010e4c <dcd_connect+0xc>)
 8010e42:	6853      	ldr	r3, [r2, #4]
 8010e44:	f023 0302 	bic.w	r3, r3, #2
 8010e48:	6053      	str	r3, [r2, #4]
}
 8010e4a:	4770      	bx	lr
 8010e4c:	40080800 	.word	0x40080800

08010e50 <dcd_init>:
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010e50:	4a20      	ldr	r2, [pc, #128]	; (8010ed4 <dcd_init+0x84>)
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8010e52:	4920      	ldr	r1, [pc, #128]	; (8010ed4 <dcd_init+0x84>)
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010e54:	68d3      	ldr	r3, [r2, #12]
 8010e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 8010e5a:	b510      	push	{r4, lr}
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010e5c:	60d3      	str	r3, [r2, #12]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8010e5e:	690b      	ldr	r3, [r1, #16]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	dafc      	bge.n	8010e5e <dcd_init+0xe>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010e64:	690b      	ldr	r3, [r1, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8010e66:	4a1b      	ldr	r2, [pc, #108]	; (8010ed4 <dcd_init+0x84>)
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010e68:	f043 0301 	orr.w	r3, r3, #1
 8010e6c:	610b      	str	r3, [r1, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8010e6e:	6913      	ldr	r3, [r2, #16]
 8010e70:	f013 0301 	ands.w	r3, r3, #1
 8010e74:	d1fb      	bne.n	8010e6e <dcd_init+0x1e>
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 8010e76:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8010e7a:	2801      	cmp	r0, #1
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 8010e7c:	6954      	ldr	r4, [r2, #20]
 8010e7e:	6953      	ldr	r3, [r2, #20]
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8010e80:	bf18      	it	ne
 8010e82:	f04f 0c03 	movne.w	ip, #3
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8010e86:	4914      	ldr	r1, [pc, #80]	; (8010ed8 <dcd_init+0x88>)
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8010e88:	bf08      	it	eq
 8010e8a:	f04f 0c01 	moveq.w	ip, #1
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 8010e8e:	4323      	orrs	r3, r4
 8010e90:	6153      	str	r3, [r2, #20]
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 8010e92:	6993      	ldr	r3, [r2, #24]
 8010e94:	f043 0306 	orr.w	r3, r3, #6
 8010e98:	6193      	str	r3, [r2, #24]
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8010e9a:	680b      	ldr	r3, [r1, #0]
 8010e9c:	f043 0304 	orr.w	r3, r3, #4
 8010ea0:	600b      	str	r3, [r1, #0]
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 8010ea2:	680a      	ldr	r2, [r1, #0]
  if (!(rhport == 1 && (CFG_TUSB_RHPORT1_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010ea4:	4b0b      	ldr	r3, [pc, #44]	; (8010ed4 <dcd_init+0x84>)
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 8010ea6:	f022 0203 	bic.w	r2, r2, #3
 8010eaa:	600a      	str	r2, [r1, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8010eac:	680c      	ldr	r4, [r1, #0]
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8010eae:	4a0b      	ldr	r2, [pc, #44]	; (8010edc <dcd_init+0x8c>)
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8010eb0:	ea44 040c 	orr.w	r4, r4, ip
 8010eb4:	600c      	str	r4, [r1, #0]
  if (!(rhport == 1 && (CFG_TUSB_RHPORT1_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010eb6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010eb8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8010ebc:	6399      	str	r1, [r3, #56]	; 0x38
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8010ebe:	6999      	ldr	r1, [r3, #24]
 8010ec0:	430a      	orrs	r2, r1
 8010ec2:	619a      	str	r2, [r3, #24]
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010ec4:	689a      	ldr	r2, [r3, #8]
 8010ec6:	f042 0201 	orr.w	r2, r2, #1
 8010eca:	609a      	str	r2, [r3, #8]
  dcd_connect(rhport);
 8010ecc:	f7ff ffb8 	bl	8010e40 <dcd_connect>
}
 8010ed0:	bd10      	pop	{r4, pc}
 8010ed2:	bf00      	nop
 8010ed4:	40080000 	.word	0x40080000
 8010ed8:	40080800 	.word	0x40080800
 8010edc:	80003810 	.word	0x80003810

08010ee0 <dcd_edpt_open>:
  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8010ee0:	7888      	ldrb	r0, [r1, #2]
 8010ee2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  TU_ASSERT(epnum < EP_MAX);
 8010ee6:	2b08      	cmp	r3, #8
 8010ee8:	d87e      	bhi.n	8010fe8 <dcd_edpt_open+0x108>
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8010eea:	4a4e      	ldr	r2, [pc, #312]	; (8011024 <dcd_edpt_open+0x144>)
{
 8010eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8010ef0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8010ef4:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8010ef8:	eb0e 1ed0 	add.w	lr, lr, r0, lsr #7
 8010efc:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
  if(dir == TUSB_DIR_OUT)
 8010f00:	09c0      	lsrs	r0, r0, #7
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8010f02:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8010f06:	f10c 0203 	add.w	r2, ip, #3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8010f0a:	f8ae c00a 	strh.w	ip, [lr, #10]
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8010f0e:	ea4f 06a2 	mov.w	r6, r2, asr #2
  xfer->interval = desc_edpt->bInterval;
 8010f12:	798c      	ldrb	r4, [r1, #6]
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8010f14:	ea4f 0292 	mov.w	r2, r2, lsr #2
  xfer->interval = desc_edpt->bInterval;
 8010f18:	f88e 400c 	strb.w	r4, [lr, #12]
  if(dir == TUSB_DIR_OUT)
 8010f1c:	d03a      	beq.n	8010f94 <dcd_edpt_open+0xb4>
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 8010f1e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8011034 <dcd_edpt_open+0x154>
 8010f22:	4d41      	ldr	r5, [pc, #260]	; (8011028 <dcd_edpt_open+0x148>)
 8010f24:	f8b8 7000 	ldrh.w	r7, [r8]
 8010f28:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8010f2a:	19b8      	adds	r0, r7, r6
 8010f2c:	eb00 0e04 	add.w	lr, r0, r4
 8010f30:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 8010f34:	d863      	bhi.n	8010ffe <dcd_edpt_open+0x11e>
    _allocated_fifo_words_tx += fifo_size;
 8010f36:	443a      	add	r2, r7
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8010f38:	b280      	uxth	r0, r0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8010f3a:	78cc      	ldrb	r4, [r1, #3]
    _allocated_fifo_words_tx += fifo_size;
 8010f3c:	f8a8 2000 	strh.w	r2, [r8]
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8010f40:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
 8010f44:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8010f48:	f004 0103 	and.w	r1, r4, #3
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8010f4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f50:	eb05 0582 	add.w	r5, r5, r2, lsl #2
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8010f54:	2901      	cmp	r1, #1
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8010f56:	ea4f 5283 	mov.w	r2, r3, lsl #22
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8010f5a:	6068      	str	r0, [r5, #4]
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8010f5c:	ea4f 1543 	mov.w	r5, r3, lsl #5
 8010f60:	4832      	ldr	r0, [pc, #200]	; (801102c <dcd_edpt_open+0x14c>)
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8010f62:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8010f66:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8010f6a:	582a      	ldr	r2, [r5, r0]
 8010f6c:	ea4c 0202 	orr.w	r2, ip, r2
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8010f70:	bf14      	ite	ne
 8010f72:	f04f 5c80 	movne.w	ip, #268435456	; 0x10000000
 8010f76:	f04f 0c00 	moveq.w	ip, #0
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8010f7a:	430a      	orrs	r2, r1
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 8010f7c:	492c      	ldr	r1, [pc, #176]	; (8011030 <dcd_edpt_open+0x150>)
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8010f7e:	ea42 020c 	orr.w	r2, r2, ip
 8010f82:	502a      	str	r2, [r5, r0]
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 8010f84:	2001      	movs	r0, #1
 8010f86:	69ca      	ldr	r2, [r1, #28]
 8010f88:	fa00 f303 	lsl.w	r3, r0, r3
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	61cb      	str	r3, [r1, #28]
}
 8010f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8010f94:	0052      	lsls	r2, r2, #1
    if (usb_otg->GRXFSIZ < sz)
 8010f96:	4c24      	ldr	r4, [pc, #144]	; (8011028 <dcd_edpt_open+0x148>)
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8010f98:	3221      	adds	r2, #33	; 0x21
    if (usb_otg->GRXFSIZ < sz)
 8010f9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010f9c:	4295      	cmp	r5, r2
 8010f9e:	d206      	bcs.n	8010fae <dcd_edpt_open+0xce>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8010fa0:	4d24      	ldr	r5, [pc, #144]	; (8011034 <dcd_edpt_open+0x154>)
 8010fa2:	882d      	ldrh	r5, [r5, #0]
 8010fa4:	4415      	add	r5, r2
 8010fa6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8010faa:	dc32      	bgt.n	8011012 <dcd_edpt_open+0x132>
      usb_otg->GRXFSIZ = sz;
 8010fac:	6262      	str	r2, [r4, #36]	; 0x24
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8010fae:	78ca      	ldrb	r2, [r1, #3]
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8010fb0:	015d      	lsls	r5, r3, #5
 8010fb2:	4821      	ldr	r0, [pc, #132]	; (8011038 <dcd_edpt_open+0x158>)
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8010fb4:	3310      	adds	r3, #16
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8010fb6:	f002 0103 	and.w	r1, r2, #3
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8010fba:	4c1d      	ldr	r4, [pc, #116]	; (8011030 <dcd_edpt_open+0x150>)
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8010fbc:	582e      	ldr	r6, [r5, r0]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8010fbe:	2901      	cmp	r1, #1
 8010fc0:	bf14      	ite	ne
 8010fc2:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8010fc6:	2200      	moveq	r2, #0
 8010fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8010fcc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8010fd0:	4332      	orrs	r2, r6
 8010fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010fd6:	502a      	str	r2, [r5, r0]
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8010fd8:	2001      	movs	r0, #1
 8010fda:	69e2      	ldr	r2, [r4, #28]
 8010fdc:	fa00 f303 	lsl.w	r3, r0, r3
 8010fe0:	4313      	orrs	r3, r2
 8010fe2:	61e3      	str	r3, [r4, #28]
}
 8010fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_ASSERT(epnum < EP_MAX);
 8010fe8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010fec:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8010ff0:	07d9      	lsls	r1, r3, #31
 8010ff2:	d502      	bpl.n	8010ffa <dcd_edpt_open+0x11a>
 8010ff4:	be00      	bkpt	0x0000
 8010ff6:	2000      	movs	r0, #0
 8010ff8:	4770      	bx	lr
 8010ffa:	2000      	movs	r0, #0
}
 8010ffc:	4770      	bx	lr
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 8010ffe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011002:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011006:	07db      	lsls	r3, r3, #31
 8011008:	d500      	bpl.n	801100c <dcd_edpt_open+0x12c>
 801100a:	be00      	bkpt	0x0000
 801100c:	2000      	movs	r0, #0
}
 801100e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8011012:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011016:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 801101a:	07da      	lsls	r2, r3, #31
 801101c:	d5f6      	bpl.n	801100c <dcd_edpt_open+0x12c>
 801101e:	be00      	bkpt	0x0000
 8011020:	e7b6      	b.n	8010f90 <dcd_edpt_open+0xb0>
 8011022:	bf00      	nop
 8011024:	2400d130 	.word	0x2400d130
 8011028:	40080000 	.word	0x40080000
 801102c:	40080900 	.word	0x40080900
 8011030:	40080800 	.word	0x40080800
 8011034:	2400d11c 	.word	0x2400d11c
 8011038:	40080b00 	.word	0x40080b00

0801103c <dcd_edpt_close_all>:
{
 801103c:	b430      	push	{r4, r5}
    out_ep[n].DOEPCTL = 0;
 801103e:	2300      	movs	r3, #0
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011040:	4a23      	ldr	r2, [pc, #140]	; (80110d0 <dcd_edpt_close_all+0x94>)
    out_ep[n].DOEPCTL = 0;
 8011042:	4824      	ldr	r0, [pc, #144]	; (80110d4 <dcd_edpt_close_all+0x98>)
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8011044:	f04f 1501 	mov.w	r5, #65537	; 0x10001
    in_ep[n].DIEPCTL = 0;
 8011048:	4923      	ldr	r1, [pc, #140]	; (80110d8 <dcd_edpt_close_all+0x9c>)
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 801104a:	4c24      	ldr	r4, [pc, #144]	; (80110dc <dcd_edpt_close_all+0xa0>)
    in_ep[n].DIEPCTL = 0;
 801104c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011050:	8553      	strh	r3, [r2, #42]	; 0x2a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011052:	8753      	strh	r3, [r2, #58]	; 0x3a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011054:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011058:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801105c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011060:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011064:	f8a2 308a 	strh.w	r3, [r2, #138]	; 0x8a
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011068:	f8a2 309a 	strh.w	r3, [r2, #154]	; 0x9a
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801106c:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011070:	f8a2 30ba 	strh.w	r3, [r2, #186]	; 0xba
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011074:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011078:	f8a2 30da 	strh.w	r3, [r2, #218]	; 0xda
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801107c:	f8a2 30ea 	strh.w	r3, [r2, #234]	; 0xea
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8011080:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8011084:	f8a2 310a 	strh.w	r3, [r2, #266]	; 0x10a
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8011088:	61e5      	str	r5, [r4, #28]
    out_ep[n].DOEPCTL = 0;
 801108a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    in_ep[n].DIEPCTL = 0;
 801108e:	620b      	str	r3, [r1, #32]
    out_ep[n].DOEPCTL = 0;
 8011090:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    in_ep[n].DIEPCTL = 0;
 8011094:	640b      	str	r3, [r1, #64]	; 0x40
    out_ep[n].DOEPCTL = 0;
 8011096:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
    in_ep[n].DIEPCTL = 0;
 801109a:	660b      	str	r3, [r1, #96]	; 0x60
    out_ep[n].DOEPCTL = 0;
 801109c:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    in_ep[n].DIEPCTL = 0;
 80110a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    out_ep[n].DOEPCTL = 0;
 80110a4:	f8c0 31a0 	str.w	r3, [r0, #416]	; 0x1a0
    in_ep[n].DIEPCTL = 0;
 80110a8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
    out_ep[n].DOEPCTL = 0;
 80110ac:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
    in_ep[n].DIEPCTL = 0;
 80110b0:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
    out_ep[n].DOEPCTL = 0;
 80110b4:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
    in_ep[n].DIEPCTL = 0;
 80110b8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
    out_ep[n].DOEPCTL = 0;
 80110bc:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  _allocated_fifo_words_tx = 16;
 80110c0:	4907      	ldr	r1, [pc, #28]	; (80110e0 <dcd_edpt_close_all+0xa4>)
    in_ep[n].DIEPCTL = 0;
 80110c2:	6003      	str	r3, [r0, #0]
  _allocated_fifo_words_tx = 16;
 80110c4:	2010      	movs	r0, #16
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80110c6:	f8a2 311a 	strh.w	r3, [r2, #282]	; 0x11a
  _allocated_fifo_words_tx = 16;
 80110ca:	8008      	strh	r0, [r1, #0]
}
 80110cc:	bc30      	pop	{r4, r5}
 80110ce:	4770      	bx	lr
 80110d0:	2400d130 	.word	0x2400d130
 80110d4:	40080b00 	.word	0x40080b00
 80110d8:	40080900 	.word	0x40080900
 80110dc:	40080800 	.word	0x40080800
 80110e0:	2400d11c 	.word	0x2400d11c

080110e4 <dcd_edpt_xfer>:
{
 80110e4:	b4f0      	push	{r4, r5, r6, r7}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80110e6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = buffer;
 80110ea:	4d69      	ldr	r5, [pc, #420]	; (8011290 <dcd_edpt_xfer+0x1ac>)
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80110ec:	09ce      	lsrs	r6, r1, #7
  xfer->ff          = NULL;
 80110ee:	2700      	movs	r7, #0
  xfer->buffer      = buffer;
 80110f0:	0060      	lsls	r0, r4, #1
 80110f2:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 80110f6:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 80110fa:	0109      	lsls	r1, r1, #4
  xfer->ff          = NULL;
 80110fc:	6047      	str	r7, [r0, #4]
  xfer->buffer      = buffer;
 80110fe:	506a      	str	r2, [r5, r1]
  xfer->total_len   = total_bytes;
 8011100:	8103      	strh	r3, [r0, #8]
  if(epnum == 0) {
 8011102:	2c00      	cmp	r4, #0
 8011104:	d044      	beq.n	8011190 <dcd_edpt_xfer+0xac>
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
    return true;
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 8011106:	8942      	ldrh	r2, [r0, #10]
 8011108:	fbb3 f1f2 	udiv	r1, r3, r2
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 801110c:	fb02 3211 	mls	r2, r2, r1, r3
  uint16_t num_packets = (total_bytes / xfer->max_size);
 8011110:	b289      	uxth	r1, r1

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 8011112:	b292      	uxth	r2, r2
 8011114:	b9da      	cbnz	r2, 801114e <dcd_edpt_xfer+0x6a>
 8011116:	b1d3      	cbz	r3, 801114e <dcd_edpt_xfer+0x6a>
  if(dir == TUSB_DIR_IN) {
 8011118:	b9ee      	cbnz	r6, 8011156 <dcd_edpt_xfer+0x72>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 801111a:	485e      	ldr	r0, [pc, #376]	; (8011294 <dcd_edpt_xfer+0x1b0>)
 801111c:	0166      	lsls	r6, r4, #5
 801111e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8011122:	6917      	ldr	r7, [r2, #16]
 8011124:	f007 4760 	and.w	r7, r7, #3758096384	; 0xe0000000
 8011128:	6117      	str	r7, [r2, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 801112a:	6917      	ldr	r7, [r2, #16]
 801112c:	433b      	orrs	r3, r7
 801112e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 8011132:	6113      	str	r3, [r2, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8011134:	5833      	ldr	r3, [r6, r0]
 8011136:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801113a:	5033      	str	r3, [r6, r0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 801113c:	5833      	ldr	r3, [r6, r0]
 801113e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011146:	d053      	beq.n	80111f0 <dcd_edpt_xfer+0x10c>

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}
 8011148:	2001      	movs	r0, #1
 801114a:	bcf0      	pop	{r4, r5, r6, r7}
 801114c:	4770      	bx	lr
    num_packets++;
 801114e:	3101      	adds	r1, #1
 8011150:	b289      	uxth	r1, r1
  if(dir == TUSB_DIR_IN) {
 8011152:	2e00      	cmp	r6, #0
 8011154:	d0e1      	beq.n	801111a <dcd_edpt_xfer+0x36>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8011156:	4a50      	ldr	r2, [pc, #320]	; (8011298 <dcd_edpt_xfer+0x1b4>)
 8011158:	0160      	lsls	r0, r4, #5
 801115a:	ea43 41c1 	orr.w	r1, r3, r1, lsl #19
 801115e:	eb02 1644 	add.w	r6, r2, r4, lsl #5
 8011162:	6131      	str	r1, [r6, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8011164:	5881      	ldr	r1, [r0, r2]
 8011166:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 801116a:	5081      	str	r1, [r0, r2]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 801116c:	5881      	ldr	r1, [r0, r2]
 801116e:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8011172:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8011176:	d04d      	beq.n	8011214 <dcd_edpt_xfer+0x130>
    if(total_bytes != 0) {
 8011178:	2b00      	cmp	r3, #0
 801117a:	d0e5      	beq.n	8011148 <dcd_edpt_xfer+0x64>
      dev->DIEPEMPMSK |= (1 << epnum);
 801117c:	4a47      	ldr	r2, [pc, #284]	; (801129c <dcd_edpt_xfer+0x1b8>)
 801117e:	2301      	movs	r3, #1
}
 8011180:	2001      	movs	r0, #1
      dev->DIEPEMPMSK |= (1 << epnum);
 8011182:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011184:	fa03 f404 	lsl.w	r4, r3, r4
 8011188:	430c      	orrs	r4, r1
 801118a:	6354      	str	r4, [r2, #52]	; 0x34
}
 801118c:	bcf0      	pop	{r4, r5, r6, r7}
 801118e:	4770      	bx	lr
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8011190:	eb05 1206 	add.w	r2, r5, r6, lsl #4
    ep0_pending[dir] -= total_bytes;
 8011194:	4942      	ldr	r1, [pc, #264]	; (80112a0 <dcd_edpt_xfer+0x1bc>)
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8011196:	8952      	ldrh	r2, [r2, #10]
 8011198:	429a      	cmp	r2, r3
 801119a:	bf28      	it	cs
 801119c:	461a      	movcs	r2, r3
 801119e:	1a9b      	subs	r3, r3, r2
 80111a0:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]
  if(dir == TUSB_DIR_IN) {
 80111a4:	2e00      	cmp	r6, #0
 80111a6:	d149      	bne.n	801123c <dcd_edpt_xfer+0x158>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 80111a8:	4b3a      	ldr	r3, [pc, #232]	; (8011294 <dcd_edpt_xfer+0x1b0>)
 80111aa:	6919      	ldr	r1, [r3, #16]
 80111ac:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
 80111b0:	6119      	str	r1, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 80111b2:	6919      	ldr	r1, [r3, #16]
 80111b4:	430a      	orrs	r2, r1
 80111b6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80111ba:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 80111bc:	681a      	ldr	r2, [r3, #0]
 80111be:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80111c2:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80111ca:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80111ce:	d1bb      	bne.n	8011148 <dcd_edpt_xfer+0x64>
 80111d0:	7b2a      	ldrb	r2, [r5, #12]
 80111d2:	2a01      	cmp	r2, #1
 80111d4:	d1b8      	bne.n	8011148 <dcd_edpt_xfer+0x64>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80111d6:	4a31      	ldr	r2, [pc, #196]	; (801129c <dcd_edpt_xfer+0x1b8>)
 80111d8:	6891      	ldr	r1, [r2, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	f411 7f80 	tst.w	r1, #256	; 0x100
 80111e0:	bf14      	ite	ne
 80111e2:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 80111e6:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 80111ea:	430a      	orrs	r2, r1
 80111ec:	601a      	str	r2, [r3, #0]
 80111ee:	e7ab      	b.n	8011148 <dcd_edpt_xfer+0x64>
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80111f0:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80111f4:	7b23      	ldrb	r3, [r4, #12]
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d1a6      	bne.n	8011148 <dcd_edpt_xfer+0x64>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80111fa:	4b28      	ldr	r3, [pc, #160]	; (801129c <dcd_edpt_xfer+0x1b8>)
 80111fc:	689a      	ldr	r2, [r3, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 80111fe:	5833      	ldr	r3, [r6, r0]
 8011200:	f412 7f80 	tst.w	r2, #256	; 0x100
 8011204:	bf14      	ite	ne
 8011206:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 801120a:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 801120e:	4313      	orrs	r3, r2
 8011210:	5033      	str	r3, [r6, r0]
 8011212:	e799      	b.n	8011148 <dcd_edpt_xfer+0x64>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011214:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 8011218:	7f29      	ldrb	r1, [r5, #28]
 801121a:	2901      	cmp	r1, #1
 801121c:	d1ac      	bne.n	8011178 <dcd_edpt_xfer+0x94>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 801121e:	491f      	ldr	r1, [pc, #124]	; (801129c <dcd_edpt_xfer+0x1b8>)
 8011220:	6889      	ldr	r1, [r1, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8011222:	f411 7f80 	tst.w	r1, #256	; 0x100
 8011226:	5881      	ldr	r1, [r0, r2]
 8011228:	bf14      	ite	ne
 801122a:	f04f 5580 	movne.w	r5, #268435456	; 0x10000000
 801122e:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 8011232:	4329      	orrs	r1, r5
 8011234:	5081      	str	r1, [r0, r2]
    if(total_bytes != 0) {
 8011236:	2b00      	cmp	r3, #0
 8011238:	d086      	beq.n	8011148 <dcd_edpt_xfer+0x64>
 801123a:	e79f      	b.n	801117c <dcd_edpt_xfer+0x98>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 801123c:	4b16      	ldr	r3, [pc, #88]	; (8011298 <dcd_edpt_xfer+0x1b4>)
 801123e:	f442 2100 	orr.w	r1, r2, #524288	; 0x80000
 8011242:	6119      	str	r1, [r3, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8011244:	6819      	ldr	r1, [r3, #0]
 8011246:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 801124a:	6019      	str	r1, [r3, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 801124c:	6819      	ldr	r1, [r3, #0]
 801124e:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8011252:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8011256:	d008      	beq.n	801126a <dcd_edpt_xfer+0x186>
    if(total_bytes != 0) {
 8011258:	2a00      	cmp	r2, #0
 801125a:	f43f af75 	beq.w	8011148 <dcd_edpt_xfer+0x64>
      dev->DIEPEMPMSK |= (1 << epnum);
 801125e:	4a0f      	ldr	r2, [pc, #60]	; (801129c <dcd_edpt_xfer+0x1b8>)
 8011260:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011262:	f043 0301 	orr.w	r3, r3, #1
 8011266:	6353      	str	r3, [r2, #52]	; 0x34
 8011268:	e76e      	b.n	8011148 <dcd_edpt_xfer+0x64>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 801126a:	7f29      	ldrb	r1, [r5, #28]
 801126c:	2901      	cmp	r1, #1
 801126e:	d1f3      	bne.n	8011258 <dcd_edpt_xfer+0x174>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8011270:	490a      	ldr	r1, [pc, #40]	; (801129c <dcd_edpt_xfer+0x1b8>)
 8011272:	6888      	ldr	r0, [r1, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8011274:	6819      	ldr	r1, [r3, #0]
 8011276:	f410 7f80 	tst.w	r0, #256	; 0x100
 801127a:	bf14      	ite	ne
 801127c:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 8011280:	f04f 5000 	moveq.w	r0, #536870912	; 0x20000000
 8011284:	4301      	orrs	r1, r0
 8011286:	6019      	str	r1, [r3, #0]
    if(total_bytes != 0) {
 8011288:	2a00      	cmp	r2, #0
 801128a:	f43f af5d 	beq.w	8011148 <dcd_edpt_xfer+0x64>
 801128e:	e7e6      	b.n	801125e <dcd_edpt_xfer+0x17a>
 8011290:	2400d130 	.word	0x2400d130
 8011294:	40080b00 	.word	0x40080b00
 8011298:	40080900 	.word	0x40080900
 801129c:	40080800 	.word	0x40080800
 80112a0:	2400d128 	.word	0x2400d128

080112a4 <dcd_edpt_xfer_fifo>:
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 80112a4:	88d0      	ldrh	r0, [r2, #6]
 80112a6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80112aa:	2801      	cmp	r0, #1
 80112ac:	d00a      	beq.n	80112c4 <dcd_edpt_xfer_fifo+0x20>
 80112ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80112b2:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 80112b6:	f010 0001 	ands.w	r0, r0, #1
 80112ba:	d002      	beq.n	80112c2 <dcd_edpt_xfer_fifo+0x1e>
 80112bc:	be00      	bkpt	0x0000
 80112be:	2000      	movs	r0, #0
 80112c0:	4770      	bx	lr

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}
 80112c2:	4770      	bx	lr
{
 80112c4:	b4f0      	push	{r4, r5, r6, r7}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80112c6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = NULL;
 80112ca:	4d44      	ldr	r5, [pc, #272]	; (80113dc <dcd_edpt_xfer_fifo+0x138>)
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80112cc:	09ce      	lsrs	r6, r1, #7
 80112ce:	2700      	movs	r7, #0
 80112d0:	0060      	lsls	r0, r4, #1
 80112d2:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 80112d6:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 80112da:	0109      	lsls	r1, r1, #4
  xfer->ff          = ff;
 80112dc:	6042      	str	r2, [r0, #4]
  xfer->buffer      = NULL;
 80112de:	506f      	str	r7, [r5, r1]
  uint16_t num_packets = (total_bytes / xfer->max_size);
 80112e0:	8941      	ldrh	r1, [r0, #10]
  xfer->total_len   = total_bytes;
 80112e2:	8103      	strh	r3, [r0, #8]
  uint16_t num_packets = (total_bytes / xfer->max_size);
 80112e4:	fbb3 f2f1 	udiv	r2, r3, r1
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80112e8:	fb01 3112 	mls	r1, r1, r2, r3
  uint16_t num_packets = (total_bytes / xfer->max_size);
 80112ec:	b292      	uxth	r2, r2
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 80112ee:	b289      	uxth	r1, r1
 80112f0:	bb61      	cbnz	r1, 801134c <dcd_edpt_xfer_fifo+0xa8>
 80112f2:	b35b      	cbz	r3, 801134c <dcd_edpt_xfer_fifo+0xa8>
  if(epnum == 0) {
 80112f4:	b95c      	cbnz	r4, 801130e <dcd_edpt_xfer_fifo+0x6a>
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 80112f6:	483a      	ldr	r0, [pc, #232]	; (80113e0 <dcd_edpt_xfer_fifo+0x13c>)
 80112f8:	eb05 1306 	add.w	r3, r5, r6, lsl #4
 80112fc:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
 8011300:	895b      	ldrh	r3, [r3, #10]
 8011302:	428b      	cmp	r3, r1
 8011304:	bf28      	it	cs
 8011306:	460b      	movcs	r3, r1
    ep0_pending[dir] -= total_bytes;
 8011308:	1ac9      	subs	r1, r1, r3
 801130a:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
  if(dir == TUSB_DIR_IN) {
 801130e:	bb06      	cbnz	r6, 8011352 <dcd_edpt_xfer_fifo+0xae>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8011310:	4e34      	ldr	r6, [pc, #208]	; (80113e4 <dcd_edpt_xfer_fifo+0x140>)
 8011312:	ea4f 1c44 	mov.w	ip, r4, lsl #5
 8011316:	eb06 1044 	add.w	r0, r6, r4, lsl #5
 801131a:	6901      	ldr	r1, [r0, #16]
 801131c:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
 8011320:	6101      	str	r1, [r0, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8011322:	6901      	ldr	r1, [r0, #16]
 8011324:	ea41 42c2 	orr.w	r2, r1, r2, lsl #19
 8011328:	4313      	orrs	r3, r2
 801132a:	6103      	str	r3, [r0, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 801132c:	f85c 3006 	ldr.w	r3, [ip, r6]
 8011330:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011334:	f84c 3006 	str.w	r3, [ip, r6]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011338:	f85c 3006 	ldr.w	r3, [ip, r6]
 801133c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011344:	d032      	beq.n	80113ac <dcd_edpt_xfer_fifo+0x108>
  return true;
 8011346:	2001      	movs	r0, #1
}
 8011348:	bcf0      	pop	{r4, r5, r6, r7}
 801134a:	4770      	bx	lr
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 801134c:	3201      	adds	r2, #1
 801134e:	b292      	uxth	r2, r2
 8011350:	e7d0      	b.n	80112f4 <dcd_edpt_xfer_fifo+0x50>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8011352:	4925      	ldr	r1, [pc, #148]	; (80113e8 <dcd_edpt_xfer_fifo+0x144>)
 8011354:	0160      	lsls	r0, r4, #5
 8011356:	ea43 42c2 	orr.w	r2, r3, r2, lsl #19
 801135a:	eb01 1644 	add.w	r6, r1, r4, lsl #5
 801135e:	6132      	str	r2, [r6, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8011360:	5842      	ldr	r2, [r0, r1]
 8011362:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8011366:	5042      	str	r2, [r0, r1]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011368:	5842      	ldr	r2, [r0, r1]
 801136a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 801136e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8011372:	d009      	beq.n	8011388 <dcd_edpt_xfer_fifo+0xe4>
    if(total_bytes != 0) {
 8011374:	2b00      	cmp	r3, #0
 8011376:	d0e6      	beq.n	8011346 <dcd_edpt_xfer_fifo+0xa2>
      dev->DIEPEMPMSK |= (1 << epnum);
 8011378:	4b1c      	ldr	r3, [pc, #112]	; (80113ec <dcd_edpt_xfer_fifo+0x148>)
 801137a:	2001      	movs	r0, #1
 801137c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801137e:	fa00 f404 	lsl.w	r4, r0, r4
 8011382:	4314      	orrs	r4, r2
 8011384:	635c      	str	r4, [r3, #52]	; 0x34
 8011386:	e7df      	b.n	8011348 <dcd_edpt_xfer_fifo+0xa4>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011388:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 801138c:	7f2a      	ldrb	r2, [r5, #28]
 801138e:	2a01      	cmp	r2, #1
 8011390:	d1f0      	bne.n	8011374 <dcd_edpt_xfer_fifo+0xd0>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8011392:	4a16      	ldr	r2, [pc, #88]	; (80113ec <dcd_edpt_xfer_fifo+0x148>)
 8011394:	6892      	ldr	r2, [r2, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8011396:	f412 7f80 	tst.w	r2, #256	; 0x100
 801139a:	5842      	ldr	r2, [r0, r1]
 801139c:	bf14      	ite	ne
 801139e:	f04f 5580 	movne.w	r5, #268435456	; 0x10000000
 80113a2:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 80113a6:	432a      	orrs	r2, r5
 80113a8:	5042      	str	r2, [r0, r1]
 80113aa:	e7e3      	b.n	8011374 <dcd_edpt_xfer_fifo+0xd0>
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80113ac:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80113b0:	7b20      	ldrb	r0, [r4, #12]
 80113b2:	2801      	cmp	r0, #1
 80113b4:	d1c7      	bne.n	8011346 <dcd_edpt_xfer_fifo+0xa2>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80113b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80113ba:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 80113be:	689a      	ldr	r2, [r3, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 80113c0:	f85c 3006 	ldr.w	r3, [ip, r6]
 80113c4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80113c8:	bf14      	ite	ne
 80113ca:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 80113ce:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 80113d2:	4313      	orrs	r3, r2
 80113d4:	f84c 3006 	str.w	r3, [ip, r6]
 80113d8:	e7b6      	b.n	8011348 <dcd_edpt_xfer_fifo+0xa4>
 80113da:	bf00      	nop
 80113dc:	2400d130 	.word	0x2400d130
 80113e0:	2400d128 	.word	0x2400d128
 80113e4:	40080b00 	.word	0x40080b00
 80113e8:	40080900 	.word	0x40080900
 80113ec:	40080800 	.word	0x40080800

080113f0 <dcd_edpt_close>:
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  if(dir == TUSB_DIR_IN) {
 80113f0:	09cb      	lsrs	r3, r1, #7
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80113f2:	f001 007f 	and.w	r0, r1, #127	; 0x7f

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 80113f6:	b430      	push	{r4, r5}
  if(dir == TUSB_DIR_IN) {
 80113f8:	d132      	bne.n	8011460 <dcd_edpt_close+0x70>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80113fa:	b970      	cbnz	r0, 801141a <dcd_edpt_close+0x2a>
 80113fc:	4b42      	ldr	r3, [pc, #264]	; (8011508 <dcd_edpt_close+0x118>)
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	601a      	str	r2, [r3, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_disable(rhport, ep_addr, false);

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8011402:	4b42      	ldr	r3, [pc, #264]	; (801150c <dcd_edpt_close+0x11c>)
 8011404:	2200      	movs	r2, #0
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
    _allocated_fifo_words_tx -= fifo_size;
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 8011406:	4942      	ldr	r1, [pc, #264]	; (8011510 <dcd_edpt_close+0x120>)
 8011408:	f04f 0c01 	mov.w	ip, #1
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 801140c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 8011410:	f881 c000 	strb.w	ip, [r1]
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8011414:	8142      	strh	r2, [r0, #10]
  }
}
 8011416:	bc30      	pop	{r4, r5}
 8011418:	4770      	bx	lr
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 801141a:	4c3b      	ldr	r4, [pc, #236]	; (8011508 <dcd_edpt_close+0x118>)
 801141c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8011420:	f85c 2004 	ldr.w	r2, [ip, r4]
 8011424:	eb04 1340 	add.w	r3, r4, r0, lsl #5
 8011428:	2a00      	cmp	r2, #0
 801142a:	dae8      	bge.n	80113fe <dcd_edpt_close+0xe>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 801142c:	4d39      	ldr	r5, [pc, #228]	; (8011514 <dcd_edpt_close+0x124>)
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 801142e:	493a      	ldr	r1, [pc, #232]	; (8011518 <dcd_edpt_close+0x128>)
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8011430:	686a      	ldr	r2, [r5, #4]
 8011432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011436:	606a      	str	r2, [r5, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8011438:	694a      	ldr	r2, [r1, #20]
 801143a:	0615      	lsls	r5, r2, #24
 801143c:	d5fc      	bpl.n	8011438 <dcd_edpt_close+0x48>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 801143e:	f85c 2004 	ldr.w	r2, [ip, r4]
 8011442:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011446:	f84c 2004 	str.w	r2, [ip, r4]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 801144a:	689a      	ldr	r2, [r3, #8]
 801144c:	0792      	lsls	r2, r2, #30
 801144e:	d5fc      	bpl.n	801144a <dcd_edpt_close+0x5a>
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8011450:	4a30      	ldr	r2, [pc, #192]	; (8011514 <dcd_edpt_close+0x124>)
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8011452:	2102      	movs	r1, #2
 8011454:	6099      	str	r1, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8011456:	6853      	ldr	r3, [r2, #4]
 8011458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801145c:	6053      	str	r3, [r2, #4]
 801145e:	e7d0      	b.n	8011402 <dcd_edpt_close+0x12>
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8011460:	2800      	cmp	r0, #0
 8011462:	d033      	beq.n	80114cc <dcd_edpt_close+0xdc>
 8011464:	4a2d      	ldr	r2, [pc, #180]	; (801151c <dcd_edpt_close+0x12c>)
 8011466:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 801146a:	b204      	sxth	r4, r0
 801146c:	f85c 1002 	ldr.w	r1, [ip, r2]
 8011470:	eb02 1340 	add.w	r3, r2, r0, lsl #5
 8011474:	2900      	cmp	r1, #0
 8011476:	db31      	blt.n	80114dc <dcd_edpt_close+0xec>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8011478:	6819      	ldr	r1, [r3, #0]
 801147a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 801147e:	6019      	str	r1, [r3, #0]
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8011480:	4a25      	ldr	r2, [pc, #148]	; (8011518 <dcd_edpt_close+0x128>)
 8011482:	6913      	ldr	r3, [r2, #16]
 8011484:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8011488:	6113      	str	r3, [r2, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 801148a:	6913      	ldr	r3, [r2, #16]
 801148c:	f043 0320 	orr.w	r3, r3, #32
 8011490:	6113      	str	r3, [r2, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8011492:	6913      	ldr	r3, [r2, #16]
 8011494:	f013 0320 	ands.w	r3, r3, #32
 8011498:	d1fb      	bne.n	8011492 <dcd_edpt_close+0xa2>
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 801149a:	491c      	ldr	r1, [pc, #112]	; (801150c <dcd_edpt_close+0x11c>)
 801149c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80114a0:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 80114a4:	491e      	ldr	r1, [pc, #120]	; (8011520 <dcd_edpt_close+0x130>)
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 80114a6:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 80114aa:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80114ae:	8343      	strh	r3, [r0, #26]
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 80114b0:	880b      	ldrh	r3, [r1, #0]
 80114b2:	b292      	uxth	r2, r2
 80114b4:	f5c3 6080 	rsb	r0, r3, #1024	; 0x400
 80114b8:	4282      	cmp	r2, r0
 80114ba:	d00a      	beq.n	80114d2 <dcd_edpt_close+0xe2>
 80114bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80114c0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80114c4:	07db      	lsls	r3, r3, #31
 80114c6:	d5a6      	bpl.n	8011416 <dcd_edpt_close+0x26>
 80114c8:	be00      	bkpt	0x0000
 80114ca:	e7a4      	b.n	8011416 <dcd_edpt_close+0x26>
 80114cc:	4b13      	ldr	r3, [pc, #76]	; (801151c <dcd_edpt_close+0x12c>)
 80114ce:	4604      	mov	r4, r0
 80114d0:	e7d2      	b.n	8011478 <dcd_edpt_close+0x88>
    _allocated_fifo_words_tx -= fifo_size;
 80114d2:	eba3 4314 	sub.w	r3, r3, r4, lsr #16
}
 80114d6:	bc30      	pop	{r4, r5}
    _allocated_fifo_words_tx -= fifo_size;
 80114d8:	800b      	strh	r3, [r1, #0]
}
 80114da:	4770      	bx	lr
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80114dc:	f85c 1002 	ldr.w	r1, [ip, r2]
 80114e0:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80114e4:	f84c 1002 	str.w	r1, [ip, r2]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 80114e8:	6899      	ldr	r1, [r3, #8]
 80114ea:	0649      	lsls	r1, r1, #25
 80114ec:	d5fc      	bpl.n	80114e8 <dcd_edpt_close+0xf8>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 80114ee:	f85c 1002 	ldr.w	r1, [ip, r2]
 80114f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80114f6:	f84c 1002 	str.w	r1, [ip, r2]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80114fa:	6899      	ldr	r1, [r3, #8]
 80114fc:	078a      	lsls	r2, r1, #30
 80114fe:	d5fc      	bpl.n	80114fa <dcd_edpt_close+0x10a>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 8011500:	2202      	movs	r2, #2
 8011502:	609a      	str	r2, [r3, #8]
 8011504:	e7bc      	b.n	8011480 <dcd_edpt_close+0x90>
 8011506:	bf00      	nop
 8011508:	40080b00 	.word	0x40080b00
 801150c:	2400d130 	.word	0x2400d130
 8011510:	2400d11e 	.word	0x2400d11e
 8011514:	40080800 	.word	0x40080800
 8011518:	40080000 	.word	0x40080000
 801151c:	40080900 	.word	0x40080900
 8011520:	2400d11c 	.word	0x2400d11c

08011524 <dcd_edpt_stall>:
  if(dir == TUSB_DIR_IN) {
 8011524:	09ca      	lsrs	r2, r1, #7
 8011526:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801152a:	d12b      	bne.n	8011584 <dcd_edpt_stall+0x60>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 801152c:	b92b      	cbnz	r3, 801153a <dcd_edpt_stall+0x16>
 801152e:	4b30      	ldr	r3, [pc, #192]	; (80115f0 <dcd_edpt_stall+0xcc>)
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 8011530:	681a      	ldr	r2, [r3, #0]
 8011532:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8011536:	601a      	str	r2, [r3, #0]
 8011538:	4770      	bx	lr
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 801153a:	482d      	ldr	r0, [pc, #180]	; (80115f0 <dcd_edpt_stall+0xcc>)
 801153c:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 8011540:	f85c 2000 	ldr.w	r2, [ip, r0]
 8011544:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8011548:	2a00      	cmp	r2, #0
 801154a:	daf1      	bge.n	8011530 <dcd_edpt_stall+0xc>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 801154c:	4929      	ldr	r1, [pc, #164]	; (80115f4 <dcd_edpt_stall+0xd0>)
 801154e:	684a      	ldr	r2, [r1, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8011550:	f5a1 6100 	sub.w	r1, r1, #2048	; 0x800
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8011554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011558:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 801155c:	694a      	ldr	r2, [r1, #20]
 801155e:	0612      	lsls	r2, r2, #24
 8011560:	d5fc      	bpl.n	801155c <dcd_edpt_stall+0x38>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8011562:	f85c 1000 	ldr.w	r1, [ip, r0]
 8011566:	4a24      	ldr	r2, [pc, #144]	; (80115f8 <dcd_edpt_stall+0xd4>)
 8011568:	430a      	orrs	r2, r1
 801156a:	f84c 2000 	str.w	r2, [ip, r0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 801156e:	689a      	ldr	r2, [r3, #8]
 8011570:	0792      	lsls	r2, r2, #30
 8011572:	d5fc      	bpl.n	801156e <dcd_edpt_stall+0x4a>
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8011574:	4a1f      	ldr	r2, [pc, #124]	; (80115f4 <dcd_edpt_stall+0xd0>)
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8011576:	2102      	movs	r1, #2
 8011578:	6099      	str	r1, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 801157a:	6853      	ldr	r3, [r2, #4]
 801157c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011580:	6053      	str	r3, [r2, #4]
 8011582:	4770      	bx	lr

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8011584:	b410      	push	{r4}
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8011586:	b1db      	cbz	r3, 80115c0 <dcd_edpt_stall+0x9c>
 8011588:	481c      	ldr	r0, [pc, #112]	; (80115fc <dcd_edpt_stall+0xd8>)
 801158a:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 801158e:	f85c 1000 	ldr.w	r1, [ip, r0]
 8011592:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8011596:	2900      	cmp	r1, #0
 8011598:	db14      	blt.n	80115c4 <dcd_edpt_stall+0xa0>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 801159a:	6811      	ldr	r1, [r2, #0]
 801159c:	f041 6102 	orr.w	r1, r1, #136314880	; 0x8200000
 80115a0:	6011      	str	r1, [r2, #0]
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 80115a2:	4a17      	ldr	r2, [pc, #92]	; (8011600 <dcd_edpt_stall+0xdc>)
 80115a4:	6911      	ldr	r1, [r2, #16]
 80115a6:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 80115aa:	6113      	str	r3, [r2, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 80115ac:	6913      	ldr	r3, [r2, #16]
 80115ae:	f043 0320 	orr.w	r3, r3, #32
 80115b2:	6113      	str	r3, [r2, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 80115b4:	6913      	ldr	r3, [r2, #16]
 80115b6:	0699      	lsls	r1, r3, #26
 80115b8:	d4fc      	bmi.n	80115b4 <dcd_edpt_stall+0x90>
  dcd_edpt_disable(rhport, ep_addr, true);
}
 80115ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115be:	4770      	bx	lr
 80115c0:	4a0e      	ldr	r2, [pc, #56]	; (80115fc <dcd_edpt_stall+0xd8>)
 80115c2:	e7ea      	b.n	801159a <dcd_edpt_stall+0x76>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80115c4:	f85c 1000 	ldr.w	r1, [ip, r0]
 80115c8:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80115cc:	f84c 1000 	str.w	r1, [ip, r0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 80115d0:	6891      	ldr	r1, [r2, #8]
 80115d2:	064c      	lsls	r4, r1, #25
 80115d4:	d5fc      	bpl.n	80115d0 <dcd_edpt_stall+0xac>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 80115d6:	f85c 4000 	ldr.w	r4, [ip, r0]
 80115da:	4907      	ldr	r1, [pc, #28]	; (80115f8 <dcd_edpt_stall+0xd4>)
 80115dc:	4321      	orrs	r1, r4
 80115de:	f84c 1000 	str.w	r1, [ip, r0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80115e2:	6891      	ldr	r1, [r2, #8]
 80115e4:	0788      	lsls	r0, r1, #30
 80115e6:	d5fc      	bpl.n	80115e2 <dcd_edpt_stall+0xbe>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80115e8:	2102      	movs	r1, #2
 80115ea:	6091      	str	r1, [r2, #8]
 80115ec:	e7d9      	b.n	80115a2 <dcd_edpt_stall+0x7e>
 80115ee:	bf00      	nop
 80115f0:	40080b00 	.word	0x40080b00
 80115f4:	40080800 	.word	0x40080800
 80115f8:	40200000 	.word	0x40200000
 80115fc:	40080900 	.word	0x40080900
 8011600:	40080000 	.word	0x40080000

08011604 <dcd_edpt_clear_stall>:

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 8011604:	09ca      	lsrs	r2, r1, #7
 8011606:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801160a:	bf18      	it	ne
 801160c:	4a06      	ldrne	r2, [pc, #24]	; (8011628 <dcd_edpt_clear_stall+0x24>)
 801160e:	ea4f 1343 	mov.w	r3, r3, lsl #5
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011612:	bf08      	it	eq
 8011614:	4a05      	ldreq	r2, [pc, #20]	; (801162c <dcd_edpt_clear_stall+0x28>)
 8011616:	5899      	ldr	r1, [r3, r2]
 8011618:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 801161c:	5099      	str	r1, [r3, r2]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801161e:	5899      	ldr	r1, [r3, r2]
 8011620:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8011624:	5099      	str	r1, [r3, r2]
  }
}
 8011626:	4770      	bx	lr
 8011628:	40080900 	.word	0x40080900
 801162c:	40080b00 	.word	0x40080b00

08011630 <dcd_int_handler>:
    }
  }
}

void dcd_int_handler(uint8_t rhport)
{
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8011634:	4c99      	ldr	r4, [pc, #612]	; (801189c <dcd_int_handler+0x26c>)
{
 8011636:	b089      	sub	sp, #36	; 0x24
  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8011638:	6965      	ldr	r5, [r4, #20]
 801163a:	69a3      	ldr	r3, [r4, #24]
{
 801163c:	9001      	str	r0, [sp, #4]
  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 801163e:	401d      	ands	r5, r3

  if(int_status & USB_OTG_GINTSTS_USBRST)
 8011640:	04e9      	lsls	r1, r5, #19
 8011642:	f100 813f 	bmi.w	80118c4 <dcd_int_handler+0x294>
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
    bus_reset(rhport);
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8011646:	04aa      	lsls	r2, r5, #18
 8011648:	d532      	bpl.n	80116b0 <dcd_int_handler+0x80>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 801164a:	4b94      	ldr	r3, [pc, #592]	; (801189c <dcd_int_handler+0x26c>)
 801164c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8011650:	4993      	ldr	r1, [pc, #588]	; (80118a0 <dcd_int_handler+0x270>)
    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8011652:	615a      	str	r2, [r3, #20]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8011654:	6889      	ldr	r1, [r1, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8011656:	f011 0f06 	tst.w	r1, #6
 801165a:	d011      	beq.n	8011680 <dcd_int_handler+0x50>
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801165c:	68d9      	ldr	r1, [r3, #12]
 801165e:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8011662:	60d9      	str	r1, [r3, #12]
    if ( SystemCoreClock >= 32000000U )
 8011664:	4b8f      	ldr	r3, [pc, #572]	; (80118a4 <dcd_int_handler+0x274>)
 8011666:	4990      	ldr	r1, [pc, #576]	; (80118a8 <dcd_int_handler+0x278>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	428b      	cmp	r3, r1
 801166c:	f0c0 82c5 	bcc.w	8011bfa <dcd_int_handler+0x5ca>
 8011670:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8011674:	4889      	ldr	r0, [pc, #548]	; (801189c <dcd_int_handler+0x26c>)
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8011676:	2100      	movs	r1, #0
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8011678:	68c3      	ldr	r3, [r0, #12]
 801167a:	431a      	orrs	r2, r3
 801167c:	60c2      	str	r2, [r0, #12]
 801167e:	e008      	b.n	8011692 <dcd_int_handler+0x62>
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011680:	68da      	ldr	r2, [r3, #12]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8011682:	2102      	movs	r1, #2
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011684:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8011688:	60da      	str	r2, [r3, #12]
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 801168a:	68da      	ldr	r2, [r3, #12]
 801168c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8011690:	60da      	str	r2, [r3, #12]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8011692:	2300      	movs	r3, #0
  event.bus_reset.speed = speed;
  dcd_event_handler(&event, in_isr);
 8011694:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8011696:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801169a:	9307      	str	r3, [sp, #28]
  event.bus_reset.speed = speed;
 801169c:	f88d 1018 	strb.w	r1, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 80116a0:	2101      	movs	r1, #1
 80116a2:	9b01      	ldr	r3, [sp, #4]
 80116a4:	f88d 1015 	strb.w	r1, [sp, #21]
 80116a8:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 80116ac:	f7ff f80e 	bl	80106cc <dcd_event_handler>

    set_turnaround(usb_otg, speed);
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 80116b0:	052b      	lsls	r3, r5, #20
 80116b2:	f100 80cb 	bmi.w	801184c <dcd_int_handler+0x21c>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 80116b6:	2d00      	cmp	r5, #0
 80116b8:	f2c0 80dd 	blt.w	8011876 <dcd_int_handler+0x246>
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 80116bc:	076f      	lsls	r7, r5, #29
 80116be:	d506      	bpl.n	80116ce <dcd_int_handler+0x9e>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 80116c0:	4b76      	ldr	r3, [pc, #472]	; (801189c <dcd_int_handler+0x26c>)
 80116c2:	685c      	ldr	r4, [r3, #4]

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 80116c4:	0766      	lsls	r6, r4, #29
 80116c6:	f100 82c2 	bmi.w	8011c4e <dcd_int_handler+0x61e>
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 80116ca:	4b74      	ldr	r3, [pc, #464]	; (801189c <dcd_int_handler+0x26c>)
 80116cc:	605c      	str	r4, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 80116ce:	072c      	lsls	r4, r5, #28
 80116d0:	f100 80a6 	bmi.w	8011820 <dcd_int_handler+0x1f0>

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 80116d4:	06e8      	lsls	r0, r5, #27
 80116d6:	d528      	bpl.n	801172a <dcd_int_handler+0xfa>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 80116d8:	4f70      	ldr	r7, [pc, #448]	; (801189c <dcd_int_handler+0x26c>)
      _setup_packet[0] = (* rx_fifo);
 80116da:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 80118c0 <dcd_int_handler+0x290>
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 80116de:	69bb      	ldr	r3, [r7, #24]
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 80116e0:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80118bc <dcd_int_handler+0x28c>
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 80116e4:	f023 0310 	bic.w	r3, r3, #16
 80116e8:	61bb      	str	r3, [r7, #24]
  uint32_t ctl_word = usb_otg->GRXSTSP;
 80116ea:	6a3c      	ldr	r4, [r7, #32]
  switch(pktsts) {
 80116ec:	f3c4 4343 	ubfx	r3, r4, #17, #4
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 80116f0:	f004 060f 	and.w	r6, r4, #15
  switch(pktsts) {
 80116f4:	3b01      	subs	r3, #1
 80116f6:	2b05      	cmp	r3, #5
 80116f8:	d857      	bhi.n	80117aa <dcd_int_handler+0x17a>
 80116fa:	e8df f003 	tbb	[pc, r3]
 80116fe:	2b09      	.short	0x2b09
 8011700:	1f560309 	.word	0x1f560309
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8011704:	eb0a 1646 	add.w	r6, sl, r6, lsl #5
 8011708:	6933      	ldr	r3, [r6, #16]
 801170a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801170e:	6133      	str	r3, [r6, #16]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	f013 0310 	ands.w	r3, r3, #16
 8011716:	d1e8      	bne.n	80116ea <dcd_int_handler+0xba>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8011718:	4964      	ldr	r1, [pc, #400]	; (80118ac <dcd_int_handler+0x27c>)
 801171a:	780a      	ldrb	r2, [r1, #0]
 801171c:	2a00      	cmp	r2, #0
 801171e:	d150      	bne.n	80117c2 <dcd_int_handler+0x192>

      // Disable flag
      _out_ep_closed = false;
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011720:	4a5e      	ldr	r2, [pc, #376]	; (801189c <dcd_int_handler+0x26c>)
 8011722:	6993      	ldr	r3, [r2, #24]
 8011724:	f043 0310 	orr.w	r3, r3, #16
 8011728:	6193      	str	r3, [r2, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 801172a:	0328      	lsls	r0, r5, #12
 801172c:	f100 81c1 	bmi.w	8011ab2 <dcd_int_handler+0x482>
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8011730:	0368      	lsls	r0, r5, #13
 8011732:	f100 8125 	bmi.w	8011980 <dcd_int_handler+0x350>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 8011736:	b009      	add	sp, #36	; 0x24
 8011738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _setup_packet[0] = (* rx_fifo);
 801173c:	f8db 2000 	ldr.w	r2, [fp]
 8011740:	4b5b      	ldr	r3, [pc, #364]	; (80118b0 <dcd_int_handler+0x280>)
 8011742:	601a      	str	r2, [r3, #0]
      _setup_packet[1] = (* rx_fifo);
 8011744:	f8db 2000 	ldr.w	r2, [fp]
 8011748:	605a      	str	r2, [r3, #4]
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	f013 0310 	ands.w	r3, r3, #16
 8011750:	d1cb      	bne.n	80116ea <dcd_int_handler+0xba>
 8011752:	e7e1      	b.n	8011718 <dcd_int_handler+0xe8>
      if (xfer->ff)
 8011754:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80118b8 <dcd_int_handler+0x288>
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8011758:	f3c4 140a 	ubfx	r4, r4, #4, #11
      if (xfer->ff)
 801175c:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8011760:	eb09 1346 	add.w	r3, r9, r6, lsl #5
 8011764:	6858      	ldr	r0, [r3, #4]
 8011766:	2800      	cmp	r0, #0
 8011768:	f000 8212 	beq.w	8011b90 <dcd_int_handler+0x560>
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 801176c:	4622      	mov	r2, r4
 801176e:	4659      	mov	r1, fp
 8011770:	f7fe f9ac 	bl	800facc <tu_fifo_write_n_const_addr_full_words>
      if(bcnt < xfer->max_size) {
 8011774:	44c8      	add	r8, r9
 8011776:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 801177a:	42a3      	cmp	r3, r4
 801177c:	d9c8      	bls.n	8011710 <dcd_int_handler+0xe0>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 801177e:	eb0a 1346 	add.w	r3, sl, r6, lsl #5
 8011782:	691a      	ldr	r2, [r3, #16]
 8011784:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8011788:	1a9b      	subs	r3, r3, r2
 801178a:	b29b      	uxth	r3, r3
 801178c:	f8a8 3008 	strh.w	r3, [r8, #8]
        if(epnum == 0) {
 8011790:	2e00      	cmp	r6, #0
 8011792:	d1bd      	bne.n	8011710 <dcd_int_handler+0xe0>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8011794:	4a47      	ldr	r2, [pc, #284]	; (80118b4 <dcd_int_handler+0x284>)
 8011796:	8811      	ldrh	r1, [r2, #0]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8011798:	8016      	strh	r6, [r2, #0]
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 801179a:	1a5b      	subs	r3, r3, r1
 801179c:	f8a9 3008 	strh.w	r3, [r9, #8]
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	f013 0310 	ands.w	r3, r3, #16
 80117a6:	d1a0      	bne.n	80116ea <dcd_int_handler+0xba>
 80117a8:	e7b6      	b.n	8011718 <dcd_int_handler+0xe8>
      TU_BREAKPOINT();
 80117aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80117ae:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80117b2:	07dc      	lsls	r4, r3, #31
 80117b4:	d5ac      	bpl.n	8011710 <dcd_int_handler+0xe0>
 80117b6:	be00      	bkpt	0x0000
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	f013 0310 	ands.w	r3, r3, #16
 80117be:	d194      	bne.n	80116ea <dcd_int_handler+0xba>
 80117c0:	e7aa      	b.n	8011718 <dcd_int_handler+0xe8>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 80117c2:	483d      	ldr	r0, [pc, #244]	; (80118b8 <dcd_int_handler+0x288>)
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 80117c4:	8942      	ldrh	r2, [r0, #10]
 80117c6:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80117c8:	42a2      	cmp	r2, r4
 80117ca:	bf38      	it	cc
 80117cc:	4622      	movcc	r2, r4
 80117ce:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 80117d2:	42a2      	cmp	r2, r4
 80117d4:	bf38      	it	cc
 80117d6:	4622      	movcc	r2, r4
 80117d8:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 80117dc:	42a2      	cmp	r2, r4
 80117de:	bf38      	it	cc
 80117e0:	4622      	movcc	r2, r4
 80117e2:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
 80117e6:	42a2      	cmp	r2, r4
 80117e8:	bf38      	it	cc
 80117ea:	4622      	movcc	r2, r4
 80117ec:	f8b0 40aa 	ldrh.w	r4, [r0, #170]	; 0xaa
 80117f0:	42a2      	cmp	r2, r4
 80117f2:	bf38      	it	cc
 80117f4:	4622      	movcc	r2, r4
 80117f6:	f8b0 40ca 	ldrh.w	r4, [r0, #202]	; 0xca
 80117fa:	42a2      	cmp	r2, r4
 80117fc:	bf38      	it	cc
 80117fe:	4622      	movcc	r2, r4
 8011800:	f8b0 40ea 	ldrh.w	r4, [r0, #234]	; 0xea
 8011804:	f8b0 010a 	ldrh.w	r0, [r0, #266]	; 0x10a
 8011808:	42a2      	cmp	r2, r4
 801180a:	bf38      	it	cc
 801180c:	4622      	movcc	r2, r4
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 801180e:	4282      	cmp	r2, r0
 8011810:	bf38      	it	cc
 8011812:	4602      	movcc	r2, r0
 8011814:	0892      	lsrs	r2, r2, #2
 8011816:	0052      	lsls	r2, r2, #1
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 8011818:	3221      	adds	r2, #33	; 0x21
 801181a:	627a      	str	r2, [r7, #36]	; 0x24
      _out_ep_closed = false;
 801181c:	700b      	strb	r3, [r1, #0]
 801181e:	e77f      	b.n	8011720 <dcd_int_handler+0xf0>
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 8011820:	4b1e      	ldr	r3, [pc, #120]	; (801189c <dcd_int_handler+0x26c>)
 8011822:	2208      	movs	r2, #8
  dcd_event_handler(&event, in_isr);
 8011824:	a805      	add	r0, sp, #20
 8011826:	2101      	movs	r1, #1
 8011828:	615a      	str	r2, [r3, #20]
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 801182a:	699a      	ldr	r2, [r3, #24]
 801182c:	f022 0208 	bic.w	r2, r2, #8
 8011830:	619a      	str	r2, [r3, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011832:	2300      	movs	r3, #0
 8011834:	2203      	movs	r2, #3
 8011836:	9307      	str	r3, [sp, #28]
 8011838:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801183c:	9b01      	ldr	r3, [sp, #4]
 801183e:	f88d 2015 	strb.w	r2, [sp, #21]
 8011842:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8011846:	f7fe ff41 	bl	80106cc <dcd_event_handler>
}
 801184a:	e743      	b.n	80116d4 <dcd_int_handler+0xa4>
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 801184c:	4b13      	ldr	r3, [pc, #76]	; (801189c <dcd_int_handler+0x26c>)
 801184e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  dcd_event_handler(&event, in_isr);
 8011852:	a805      	add	r0, sp, #20
 8011854:	2101      	movs	r1, #1
 8011856:	615a      	str	r2, [r3, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011858:	2300      	movs	r3, #0
 801185a:	2204      	movs	r2, #4
 801185c:	9307      	str	r3, [sp, #28]
 801185e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011862:	9b01      	ldr	r3, [sp, #4]
 8011864:	f88d 2015 	strb.w	r2, [sp, #21]
 8011868:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 801186c:	f7fe ff2e 	bl	80106cc <dcd_event_handler>
  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8011870:	2d00      	cmp	r5, #0
 8011872:	f6bf af23 	bge.w	80116bc <dcd_int_handler+0x8c>
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8011876:	4b09      	ldr	r3, [pc, #36]	; (801189c <dcd_int_handler+0x26c>)
 8011878:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801187c:	a805      	add	r0, sp, #20
 801187e:	2101      	movs	r1, #1
 8011880:	615a      	str	r2, [r3, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011882:	2300      	movs	r3, #0
 8011884:	2205      	movs	r2, #5
 8011886:	9307      	str	r3, [sp, #28]
 8011888:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801188c:	9b01      	ldr	r3, [sp, #4]
 801188e:	f88d 2015 	strb.w	r2, [sp, #21]
 8011892:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8011896:	f7fe ff19 	bl	80106cc <dcd_event_handler>
}
 801189a:	e70f      	b.n	80116bc <dcd_int_handler+0x8c>
 801189c:	40080000 	.word	0x40080000
 80118a0:	40080800 	.word	0x40080800
 80118a4:	24000314 	.word	0x24000314
 80118a8:	01e84800 	.word	0x01e84800
 80118ac:	2400d11e 	.word	0x2400d11e
 80118b0:	2400d120 	.word	0x2400d120
 80118b4:	2400d128 	.word	0x2400d128
 80118b8:	2400d130 	.word	0x2400d130
 80118bc:	40080b00 	.word	0x40080b00
 80118c0:	40081000 	.word	0x40081000
  tu_memclr(xfer_status, sizeof(xfer_status));
 80118c4:	4ea6      	ldr	r6, [pc, #664]	; (8011b60 <dcd_int_handler+0x530>)
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 80118c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  tu_memclr(xfer_status, sizeof(xfer_status));
 80118ca:	f44f 7290 	mov.w	r2, #288	; 0x120
 80118ce:	2100      	movs	r1, #0
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 80118d0:	6163      	str	r3, [r4, #20]
  tu_memclr(xfer_status, sizeof(xfer_status));
 80118d2:	4630      	mov	r0, r6
 80118d4:	f000 fb6a 	bl	8011fac <memset>
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 80118d8:	4aa2      	ldr	r2, [pc, #648]	; (8011b64 <dcd_int_handler+0x534>)
  _out_ep_closed = false;
 80118da:	4ba3      	ldr	r3, [pc, #652]	; (8011b68 <dcd_int_handler+0x538>)
 80118dc:	2100      	movs	r1, #0
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80118de:	4fa3      	ldr	r7, [pc, #652]	; (8011b6c <dcd_int_handler+0x53c>)
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 80118e0:	2009      	movs	r0, #9
  _out_ep_closed = false;
 80118e2:	7019      	strb	r1, [r3, #0]
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 80118e4:	6813      	ldr	r3, [r2, #0]
 80118e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80118ea:	6013      	str	r3, [r2, #0]
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80118ec:	4ba0      	ldr	r3, [pc, #640]	; (8011b70 <dcd_int_handler+0x540>)
 80118ee:	6819      	ldr	r1, [r3, #0]
 80118f0:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80118f4:	6019      	str	r1, [r3, #0]
 80118f6:	6a19      	ldr	r1, [r3, #32]
 80118f8:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80118fc:	6219      	str	r1, [r3, #32]
 80118fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8011900:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011904:	6419      	str	r1, [r3, #64]	; 0x40
 8011906:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8011908:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 801190c:	6619      	str	r1, [r3, #96]	; 0x60
 801190e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8011912:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011916:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
 801191a:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 801191e:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011922:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 8011926:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 801192a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 801192e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 8011932:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8011936:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 801193a:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 801193e:	6839      	ldr	r1, [r7, #0]
 8011940:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8011944:	6039      	str	r1, [r7, #0]
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8011946:	f04f 1701 	mov.w	r7, #65537	; 0x10001
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 801194a:	498a      	ldr	r1, [pc, #552]	; (8011b74 <dcd_int_handler+0x544>)
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 801194c:	61d7      	str	r7, [r2, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 801194e:	6150      	str	r0, [r2, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8011950:	6110      	str	r0, [r2, #16]
  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8011952:	2241      	movs	r2, #65	; 0x41
  _allocated_fifo_words_tx = 16;
 8011954:	2010      	movs	r0, #16
  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8011956:	6262      	str	r2, [r4, #36]	; 0x24
  _allocated_fifo_words_tx = 16;
 8011958:	4a87      	ldr	r2, [pc, #540]	; (8011b78 <dcd_int_handler+0x548>)
 801195a:	8010      	strh	r0, [r2, #0]
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 801195c:	4a87      	ldr	r2, [pc, #540]	; (8011b7c <dcd_int_handler+0x54c>)
 801195e:	62a2      	str	r2, [r4, #40]	; 0x28
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8011960:	680a      	ldr	r2, [r1, #0]
 8011962:	f022 0203 	bic.w	r2, r2, #3
 8011966:	600a      	str	r2, [r1, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8011968:	2140      	movs	r1, #64	; 0x40
  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 801196a:	691a      	ldr	r2, [r3, #16]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 801196c:	8371      	strh	r1, [r6, #26]
  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 801196e:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8011972:	8171      	strh	r1, [r6, #10]
  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8011974:	611a      	str	r2, [r3, #16]
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8011976:	69a3      	ldr	r3, [r4, #24]
 8011978:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 801197c:	61a3      	str	r3, [r4, #24]
}
 801197e:	e662      	b.n	8011646 <dcd_int_handler+0x16>
 8011980:	4b77      	ldr	r3, [pc, #476]	; (8011b60 <dcd_int_handler+0x530>)
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8011982:	f04f 0901 	mov.w	r9, #1
 8011986:	2400      	movs	r4, #0
    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8011988:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8011b64 <dcd_int_handler+0x534>
 801198c:	461d      	mov	r5, r3
 801198e:	9302      	str	r3, [sp, #8]
 8011990:	e009      	b.n	80119a6 <dcd_int_handler+0x376>
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8011992:	f1b9 0f09 	cmp.w	r9, #9
 8011996:	f43f aece 	beq.w	8011736 <dcd_int_handler+0x106>
 801199a:	f109 0901 	add.w	r9, r9, #1
 801199e:	3401      	adds	r4, #1
 80119a0:	3520      	adds	r5, #32
 80119a2:	fa5f f989 	uxtb.w	r9, r9
    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 80119a6:	2301      	movs	r3, #1
 80119a8:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80119ac:	b2e0      	uxtb	r0, r4
 80119ae:	fa03 f104 	lsl.w	r1, r3, r4
 80119b2:	4211      	tst	r1, r2
 80119b4:	d0ed      	beq.n	8011992 <dcd_int_handler+0x362>
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 80119b6:	4a6f      	ldr	r2, [pc, #444]	; (8011b74 <dcd_int_handler+0x544>)
 80119b8:	eb02 1644 	add.w	r6, r2, r4, lsl #5
 80119bc:	68b2      	ldr	r2, [r6, #8]
 80119be:	07d1      	lsls	r1, r2, #31
 80119c0:	d519      	bpl.n	80119f6 <dcd_int_handler+0x3c6>
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 80119c2:	60b3      	str	r3, [r6, #8]
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 80119c4:	b924      	cbnz	r4, 80119d0 <dcd_int_handler+0x3a0>
 80119c6:	4a6e      	ldr	r2, [pc, #440]	; (8011b80 <dcd_int_handler+0x550>)
 80119c8:	8853      	ldrh	r3, [r2, #2]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	f040 8187 	bne.w	8011cde <dcd_int_handler+0x6ae>
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80119d0:	2300      	movs	r3, #0
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 80119d2:	f060 007f 	orn	r0, r0, #127	; 0x7f

  event.xfer_complete.ep_addr = ep_addr;
  event.xfer_complete.len     = xferred_bytes;
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
 80119d6:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80119d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80119dc:	9b01      	ldr	r3, [sp, #4]
  event.xfer_complete.ep_addr = ep_addr;
 80119de:	f88d 0018 	strb.w	r0, [sp, #24]
  dcd_event_handler(&event, in_isr);
 80119e2:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80119e4:	f88d 3014 	strb.w	r3, [sp, #20]
 80119e8:	8b2b      	ldrh	r3, [r5, #24]
  event.xfer_complete.len     = xferred_bytes;
 80119ea:	9307      	str	r3, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80119ec:	2307      	movs	r3, #7
 80119ee:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 80119f2:	f7fe fe6b 	bl	80106cc <dcd_event_handler>
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 80119f6:	68b3      	ldr	r3, [r6, #8]
 80119f8:	061a      	lsls	r2, r3, #24
 80119fa:	d5ca      	bpl.n	8011992 <dcd_int_handler+0x362>
 80119fc:	2301      	movs	r3, #1
 80119fe:	40a3      	lsls	r3, r4
 8011a00:	461a      	mov	r2, r3
 8011a02:	9303      	str	r3, [sp, #12]
 8011a04:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8011a08:	421a      	tst	r2, r3
 8011a0a:	d0c2      	beq.n	8011992 <dcd_int_handler+0x362>
        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8011a0c:	6937      	ldr	r7, [r6, #16]
 8011a0e:	f3c7 47c9 	ubfx	r7, r7, #19, #10
        for(uint16_t i = 0; i < remaining_packets; i++)
 8011a12:	2f00      	cmp	r7, #0
 8011a14:	d03f      	beq.n	8011a96 <dcd_int_handler+0x466>
 8011a16:	4b5b      	ldr	r3, [pc, #364]	; (8011b84 <dcd_int_handler+0x554>)
 8011a18:	f04f 0a00 	mov.w	sl, #0
 8011a1c:	eb03 3b04 	add.w	fp, r3, r4, lsl #12
 8011a20:	e008      	b.n	8011a34 <dcd_int_handler+0x404>
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8011a22:	4659      	mov	r1, fp
 8011a24:	f7fd feb8 	bl	800f798 <tu_fifo_read_n_const_addr_full_words>
        for(uint16_t i = 0; i < remaining_packets; i++)
 8011a28:	f10a 0a01 	add.w	sl, sl, #1
 8011a2c:	fa1f f38a 	uxth.w	r3, sl
 8011a30:	429f      	cmp	r7, r3
 8011a32:	d930      	bls.n	8011a96 <dcd_int_handler+0x466>
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 8011a34:	6932      	ldr	r2, [r6, #16]
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8011a36:	4954      	ldr	r1, [pc, #336]	; (8011b88 <dcd_int_handler+0x558>)
 8011a38:	69b3      	ldr	r3, [r6, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8011a3a:	b292      	uxth	r2, r2
 8011a3c:	ea01 0383 	and.w	r3, r1, r3, lsl #2
 8011a40:	8b69      	ldrh	r1, [r5, #26]
 8011a42:	428a      	cmp	r2, r1
 8011a44:	bf28      	it	cs
 8011a46:	460a      	movcs	r2, r1
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d824      	bhi.n	8011a96 <dcd_int_handler+0x466>
          if (xfer->ff)
 8011a4c:	6968      	ldr	r0, [r5, #20]
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d1e7      	bne.n	8011a22 <dcd_int_handler+0x3f2>
  for(uint16_t i = 0; i < full_words; i++){
 8011a52:	0890      	lsrs	r0, r2, #2
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8011a54:	f8d5 c010 	ldr.w	ip, [r5, #16]
  for(uint16_t i = 0; i < full_words; i++){
 8011a58:	f000 8165 	beq.w	8011d26 <dcd_int_handler+0x6f6>
 8011a5c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8011a60:	4663      	mov	r3, ip
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8011a62:	f853 1b04 	ldr.w	r1, [r3], #4
  for(uint16_t i = 0; i < full_words; i++){
 8011a66:	4298      	cmp	r0, r3
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8011a68:	f8cb 1000 	str.w	r1, [fp]
  for(uint16_t i = 0; i < full_words; i++){
 8011a6c:	d1f9      	bne.n	8011a62 <dcd_int_handler+0x432>
  if(bytes_rem){
 8011a6e:	f012 0103 	ands.w	r1, r2, #3
  uint8_t bytes_rem = len & 0x03;
 8011a72:	fa5f fe82 	uxtb.w	lr, r2
  if(bytes_rem){
 8011a76:	d00b      	beq.n	8011a90 <dcd_int_handler+0x460>
    if(bytes_rem > 1){
 8011a78:	f01e 0f02 	tst.w	lr, #2
    tmp_word |= src[0];
 8011a7c:	7803      	ldrb	r3, [r0, #0]
      tmp_word |= src[1] << 8;
 8011a7e:	bf18      	it	ne
 8011a80:	8803      	ldrhne	r3, [r0, #0]
    if(bytes_rem > 2){
 8011a82:	2903      	cmp	r1, #3
 8011a84:	d102      	bne.n	8011a8c <dcd_int_handler+0x45c>
      tmp_word |= src[2] << 16;
 8011a86:	7881      	ldrb	r1, [r0, #2]
 8011a88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    *tx_fifo = tmp_word;
 8011a8c:	f8cb 3000 	str.w	r3, [fp]
            xfer->buffer += packet_size;
 8011a90:	4462      	add	r2, ip
 8011a92:	612a      	str	r2, [r5, #16]
 8011a94:	e7c8      	b.n	8011a28 <dcd_int_handler+0x3f8>
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 8011a96:	6933      	ldr	r3, [r6, #16]
 8011a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f47f af78 	bne.w	8011992 <dcd_int_handler+0x362>
          dev->DIEPEMPMSK &= ~(1 << n);
 8011aa2:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8011aa6:	9a03      	ldr	r2, [sp, #12]
 8011aa8:	ea23 0302 	bic.w	r3, r3, r2
 8011aac:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8011ab0:	e76f      	b.n	8011992 <dcd_int_handler+0x362>
 8011ab2:	4b2b      	ldr	r3, [pc, #172]	; (8011b60 <dcd_int_handler+0x530>)
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 8011ab4:	2601      	movs	r6, #1
 8011ab6:	2400      	movs	r4, #0
    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8011ab8:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8011b64 <dcd_int_handler+0x534>
 8011abc:	461f      	mov	r7, r3
 8011abe:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8011b70 <dcd_int_handler+0x540>
 8011ac2:	9302      	str	r3, [sp, #8]
 8011ac4:	e024      	b.n	8011b10 <dcd_int_handler+0x4e0>
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8011ac6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011aca:	07d3      	lsls	r3, r2, #31
 8011acc:	d519      	bpl.n	8011b02 <dcd_int_handler+0x4d2>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8011ace:	2201      	movs	r2, #1
 8011ad0:	f8c8 2008 	str.w	r2, [r8, #8]
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8011ad4:	b924      	cbnz	r4, 8011ae0 <dcd_int_handler+0x4b0>
 8011ad6:	4b2a      	ldr	r3, [pc, #168]	; (8011b80 <dcd_int_handler+0x550>)
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f040 80c8 	bne.w	8011c70 <dcd_int_handler+0x640>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011ae0:	2300      	movs	r3, #0
  dcd_event_handler(&event, in_isr);
 8011ae2:	a805      	add	r0, sp, #20
 8011ae4:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011ae6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011aea:	9b01      	ldr	r3, [sp, #4]
  event.xfer_complete.ep_addr = ep_addr;
 8011aec:	f88d 9018 	strb.w	r9, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011af0:	f88d 3014 	strb.w	r3, [sp, #20]
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8011af4:	893b      	ldrh	r3, [r7, #8]
  event.xfer_complete.len     = xferred_bytes;
 8011af6:	9307      	str	r3, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8011af8:	2307      	movs	r3, #7
 8011afa:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011afe:	f7fe fde5 	bl	80106cc <dcd_event_handler>
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8011b02:	2e09      	cmp	r6, #9
 8011b04:	f43f ae14 	beq.w	8011730 <dcd_int_handler+0x100>
 8011b08:	3601      	adds	r6, #1
 8011b0a:	3401      	adds	r4, #1
 8011b0c:	3720      	adds	r7, #32
 8011b0e:	b2f6      	uxtb	r6, r6
    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8011b10:	f104 0310 	add.w	r3, r4, #16
 8011b14:	2201      	movs	r2, #1
 8011b16:	f8db 1018 	ldr.w	r1, [fp, #24]
 8011b1a:	fa5f f984 	uxtb.w	r9, r4
 8011b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b22:	420b      	tst	r3, r1
 8011b24:	d0ed      	beq.n	8011b02 <dcd_int_handler+0x4d2>
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8011b26:	eb0a 1844 	add.w	r8, sl, r4, lsl #5
 8011b2a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011b2e:	0709      	lsls	r1, r1, #28
 8011b30:	d5c9      	bpl.n	8011ac6 <dcd_int_handler+0x496>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011b32:	9b01      	ldr	r3, [sp, #4]
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 8011b34:	2008      	movs	r0, #8
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011b36:	4915      	ldr	r1, [pc, #84]	; (8011b8c <dcd_int_handler+0x55c>)
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011b38:	f88d 3014 	strb.w	r3, [sp, #20]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8011b3c:	ab08      	add	r3, sp, #32
 8011b3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b42:	c903      	ldmia	r1, {r0, r1}
 8011b44:	e903 0003 	stmdb	r3, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8011b48:	4611      	mov	r1, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011b4a:	2200      	movs	r2, #0
  dcd_event_handler(&event, in_isr);
 8011b4c:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8011b4e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011b52:	2206      	movs	r2, #6
 8011b54:	f88d 2015 	strb.w	r2, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011b58:	f7fe fdb8 	bl	80106cc <dcd_event_handler>
}
 8011b5c:	e7b3      	b.n	8011ac6 <dcd_int_handler+0x496>
 8011b5e:	bf00      	nop
 8011b60:	2400d130 	.word	0x2400d130
 8011b64:	40080800 	.word	0x40080800
 8011b68:	2400d11e 	.word	0x2400d11e
 8011b6c:	40080c00 	.word	0x40080c00
 8011b70:	40080b00 	.word	0x40080b00
 8011b74:	40080900 	.word	0x40080900
 8011b78:	2400d11c 	.word	0x2400d11c
 8011b7c:	001003f0 	.word	0x001003f0
 8011b80:	2400d128 	.word	0x2400d128
 8011b84:	40081000 	.word	0x40081000
 8011b88:	0003fffc 	.word	0x0003fffc
 8011b8c:	2400d120 	.word	0x2400d120
  for(uint16_t i = 0; i < full_words; i++) {
 8011b90:	ea5f 0c94 	movs.w	ip, r4, lsr #2
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8011b94:	f859 0008 	ldr.w	r0, [r9, r8]
  for(uint16_t i = 0; i < full_words; i++) {
 8011b98:	d01b      	beq.n	8011bd2 <dcd_int_handler+0x5a2>
 8011b9a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8011b9e:	b28b      	uxth	r3, r1
 8011ba0:	f100 0108 	add.w	r1, r0, #8
 8011ba4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011ba8:	1d03      	adds	r3, r0, #4
    uint32_t tmp = *rx_fifo;
 8011baa:	f8db 2000 	ldr.w	r2, [fp]
  for(uint16_t i = 0; i < full_words; i++) {
 8011bae:	3304      	adds	r3, #4
    dst[1] = (tmp & 0x0000FF00) >> 8;
 8011bb0:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    dst[0] = tmp & 0x000000FF;
 8011bb4:	f803 2c08 	strb.w	r2, [r3, #-8]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 8011bb8:	f803 ec07 	strb.w	lr, [r3, #-7]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 8011bbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    dst[3] = (tmp & 0xFF000000) >> 24;
 8011bc0:	0e12      	lsrs	r2, r2, #24
    dst[2] = (tmp & 0x00FF0000) >> 16;
 8011bc2:	f803 ec06 	strb.w	lr, [r3, #-6]
    dst[3] = (tmp & 0xFF000000) >> 24;
 8011bc6:	f803 2c05 	strb.w	r2, [r3, #-5]
  for(uint16_t i = 0; i < full_words; i++) {
 8011bca:	428b      	cmp	r3, r1
 8011bcc:	d1ed      	bne.n	8011baa <dcd_int_handler+0x57a>
    dst += 4;
 8011bce:	eb00 008c 	add.w	r0, r0, ip, lsl #2
  if(bytes_rem != 0) {
 8011bd2:	f014 0203 	ands.w	r2, r4, #3
  uint8_t bytes_rem = len & 0x03;
 8011bd6:	b2e1      	uxtb	r1, r4
  if(bytes_rem != 0) {
 8011bd8:	d009      	beq.n	8011bee <dcd_int_handler+0x5be>
    uint32_t tmp = *rx_fifo;
 8011bda:	f8db 3000 	ldr.w	r3, [fp]
    if(bytes_rem > 1) {
 8011bde:	0789      	lsls	r1, r1, #30
    dst[0] = tmp & 0x000000FF;
 8011be0:	7003      	strb	r3, [r0, #0]
    if(bytes_rem > 1) {
 8011be2:	d501      	bpl.n	8011be8 <dcd_int_handler+0x5b8>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 8011be4:	0a19      	lsrs	r1, r3, #8
 8011be6:	7041      	strb	r1, [r0, #1]
    if(bytes_rem > 2) {
 8011be8:	2a03      	cmp	r2, #3
 8011bea:	f000 809e 	beq.w	8011d2a <dcd_int_handler+0x6fa>
        xfer->buffer += bcnt;
 8011bee:	f859 3008 	ldr.w	r3, [r9, r8]
 8011bf2:	4423      	add	r3, r4
 8011bf4:	f849 3008 	str.w	r3, [r9, r8]
 8011bf8:	e5bc      	b.n	8011774 <dcd_int_handler+0x144>
    else if ( SystemCoreClock >= 27500000U )
 8011bfa:	495e      	ldr	r1, [pc, #376]	; (8011d74 <dcd_int_handler+0x744>)
 8011bfc:	428b      	cmp	r3, r1
 8011bfe:	f200 808f 	bhi.w	8011d20 <dcd_int_handler+0x6f0>
    else if ( SystemCoreClock >= 24000000U )
 8011c02:	495d      	ldr	r1, [pc, #372]	; (8011d78 <dcd_int_handler+0x748>)
 8011c04:	428b      	cmp	r3, r1
 8011c06:	f4bf ad35 	bcs.w	8011674 <dcd_int_handler+0x44>
    else if ( SystemCoreClock >= 21800000U )
 8011c0a:	4a5c      	ldr	r2, [pc, #368]	; (8011d7c <dcd_int_handler+0x74c>)
 8011c0c:	4293      	cmp	r3, r2
 8011c0e:	f200 80a1 	bhi.w	8011d54 <dcd_int_handler+0x724>
    else if ( SystemCoreClock >= 20000000U )
 8011c12:	f5a2 12db 	sub.w	r2, r2, #1794048	; 0x1b6000
 8011c16:	f5a2 52ba 	sub.w	r2, r2, #5952	; 0x1740
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	f200 809d 	bhi.w	8011d5a <dcd_int_handler+0x72a>
    else if ( SystemCoreClock >= 18500000U )
 8011c20:	f5a2 12b7 	sub.w	r2, r2, #1499136	; 0x16e000
 8011c24:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8011c28:	4293      	cmp	r3, r2
 8011c2a:	f200 8099 	bhi.w	8011d60 <dcd_int_handler+0x730>
    else if ( SystemCoreClock >= 17200000U )
 8011c2e:	4a54      	ldr	r2, [pc, #336]	; (8011d80 <dcd_int_handler+0x750>)
 8011c30:	4293      	cmp	r3, r2
 8011c32:	f080 8098 	bcs.w	8011d66 <dcd_int_handler+0x736>
    else if ( SystemCoreClock >= 16000000U )
 8011c36:	4a53      	ldr	r2, [pc, #332]	; (8011d84 <dcd_int_handler+0x754>)
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	f080 8097 	bcs.w	8011d6c <dcd_int_handler+0x73c>
    else if ( SystemCoreClock >= 15000000U )
 8011c3e:	4a52      	ldr	r2, [pc, #328]	; (8011d88 <dcd_int_handler+0x758>)
 8011c40:	4293      	cmp	r3, r2
 8011c42:	bf2c      	ite	cs
 8011c44:	f44f 5260 	movcs.w	r2, #14336	; 0x3800
 8011c48:	f44f 5270 	movcc.w	r2, #15360	; 0x3c00
 8011c4c:	e512      	b.n	8011674 <dcd_int_handler+0x44>
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011c4e:	2300      	movs	r3, #0
 8011c50:	9a01      	ldr	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
 8011c52:	a805      	add	r0, sp, #20
 8011c54:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8011c56:	9307      	str	r3, [sp, #28]
 8011c58:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011c5c:	2302      	movs	r3, #2
 8011c5e:	f88d 2014 	strb.w	r2, [sp, #20]
 8011c62:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8011c66:	f7fe fd31 	bl	80106cc <dcd_event_handler>
    usb_otg->GOTGINT = otg_int;
 8011c6a:	4b48      	ldr	r3, [pc, #288]	; (8011d8c <dcd_int_handler+0x75c>)
 8011c6c:	605c      	str	r4, [r3, #4]
 8011c6e:	e52e      	b.n	80116ce <dcd_int_handler+0x9e>
 8011c70:	9a02      	ldr	r2, [sp, #8]
    ep0_pending[dir] -= total_bytes;
 8011c72:	4947      	ldr	r1, [pc, #284]	; (8011d90 <dcd_int_handler+0x760>)
 8011c74:	8952      	ldrh	r2, [r2, #10]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	bf28      	it	cs
 8011c7a:	461a      	movcs	r2, r3
 8011c7c:	1a9b      	subs	r3, r3, r2
 8011c7e:	800b      	strh	r3, [r1, #0]
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8011c80:	f8da 3010 	ldr.w	r3, [sl, #16]
 8011c84:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8011c88:	f8ca 3010 	str.w	r3, [sl, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8011c8c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8011c90:	431a      	orrs	r2, r3
 8011c92:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8011c96:	f8ca 2010 	str.w	r2, [sl, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8011c9a:	f8da 3000 	ldr.w	r3, [sl]
 8011c9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ca2:	f8ca 3000 	str.w	r3, [sl]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011ca6:	f8da 3000 	ldr.w	r3, [sl]
 8011caa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011cae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011cb2:	f47f af29 	bne.w	8011b08 <dcd_int_handler+0x4d8>
 8011cb6:	9b02      	ldr	r3, [sp, #8]
 8011cb8:	7b1b      	ldrb	r3, [r3, #12]
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	f47f af24 	bne.w	8011b08 <dcd_int_handler+0x4d8>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8011cc0:	f8db 3008 	ldr.w	r3, [fp, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8011cc4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011cc8:	f8da 3000 	ldr.w	r3, [sl]
 8011ccc:	bf14      	ite	ne
 8011cce:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8011cd2:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 8011cd6:	4313      	orrs	r3, r2
 8011cd8:	f8ca 3000 	str.w	r3, [sl]
 8011cdc:	e714      	b.n	8011b08 <dcd_int_handler+0x4d8>
 8011cde:	9902      	ldr	r1, [sp, #8]
 8011ce0:	8b49      	ldrh	r1, [r1, #26]
 8011ce2:	4299      	cmp	r1, r3
 8011ce4:	bf28      	it	cs
 8011ce6:	4619      	movcs	r1, r3
    ep0_pending[dir] -= total_bytes;
 8011ce8:	1a5b      	subs	r3, r3, r1
 8011cea:	8053      	strh	r3, [r2, #2]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8011cec:	f441 2300 	orr.w	r3, r1, #524288	; 0x80000
 8011cf0:	4a28      	ldr	r2, [pc, #160]	; (8011d94 <dcd_int_handler+0x764>)
 8011cf2:	6113      	str	r3, [r2, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8011cf4:	6813      	ldr	r3, [r2, #0]
 8011cf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011cfa:	6013      	str	r3, [r2, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011cfc:	6813      	ldr	r3, [r2, #0]
 8011cfe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8011d02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011d06:	d013      	beq.n	8011d30 <dcd_int_handler+0x700>
    if(total_bytes != 0) {
 8011d08:	b129      	cbz	r1, 8011d16 <dcd_int_handler+0x6e6>
      dev->DIEPEMPMSK |= (1 << epnum);
 8011d0a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8011d0e:	f043 0301 	orr.w	r3, r3, #1
 8011d12:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8011d16:	68b3      	ldr	r3, [r6, #8]
 8011d18:	061b      	lsls	r3, r3, #24
 8011d1a:	f53f ae6f 	bmi.w	80119fc <dcd_int_handler+0x3cc>
 8011d1e:	e63c      	b.n	801199a <dcd_int_handler+0x36a>
 8011d20:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8011d24:	e4a6      	b.n	8011674 <dcd_int_handler+0x44>
  for(uint16_t i = 0; i < full_words; i++){
 8011d26:	4660      	mov	r0, ip
 8011d28:	e6a1      	b.n	8011a6e <dcd_int_handler+0x43e>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8011d2a:	0c1b      	lsrs	r3, r3, #16
 8011d2c:	7083      	strb	r3, [r0, #2]
 8011d2e:	e75e      	b.n	8011bee <dcd_int_handler+0x5be>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8011d30:	9b02      	ldr	r3, [sp, #8]
 8011d32:	7f1b      	ldrb	r3, [r3, #28]
 8011d34:	2b01      	cmp	r3, #1
 8011d36:	d1e7      	bne.n	8011d08 <dcd_int_handler+0x6d8>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8011d38:	f8d8 3008 	ldr.w	r3, [r8, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8011d3c:	4610      	mov	r0, r2
 8011d3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011d42:	6813      	ldr	r3, [r2, #0]
 8011d44:	bf14      	ite	ne
 8011d46:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8011d4a:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	6003      	str	r3, [r0, #0]
 8011d52:	e7d9      	b.n	8011d08 <dcd_int_handler+0x6d8>
 8011d54:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8011d58:	e48c      	b.n	8011674 <dcd_int_handler+0x44>
 8011d5a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8011d5e:	e489      	b.n	8011674 <dcd_int_handler+0x44>
 8011d60:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8011d64:	e486      	b.n	8011674 <dcd_int_handler+0x44>
 8011d66:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8011d6a:	e483      	b.n	8011674 <dcd_int_handler+0x44>
 8011d6c:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 8011d70:	e480      	b.n	8011674 <dcd_int_handler+0x44>
 8011d72:	bf00      	nop
 8011d74:	01a39ddf 	.word	0x01a39ddf
 8011d78:	016e3600 	.word	0x016e3600
 8011d7c:	014ca43f 	.word	0x014ca43f
 8011d80:	01067380 	.word	0x01067380
 8011d84:	00f42400 	.word	0x00f42400
 8011d88:	00e4e1c0 	.word	0x00e4e1c0
 8011d8c:	40080000 	.word	0x40080000
 8011d90:	2400d128 	.word	0x2400d128
 8011d94:	40080900 	.word	0x40080900

08011d98 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 8011d98:	b508      	push	{r3, lr}
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8011d9a:	2000      	movs	r0, #0
 8011d9c:	f7fe f80c 	bl	800fdb8 <tud_init>
 8011da0:	b100      	cbz	r0, 8011da4 <tusb_init+0xc>
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
}
 8011da2:	bd08      	pop	{r3, pc}
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8011da4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011da8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8011dac:	07db      	lsls	r3, r3, #31
 8011dae:	d5f8      	bpl.n	8011da2 <tusb_init+0xa>
 8011db0:	be00      	bkpt	0x0000
}
 8011db2:	bd08      	pop	{r3, pc}

08011db4 <tu_edpt_claim>:
bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8011db4:	7803      	ldrb	r3, [r0, #0]
{
 8011db6:	4602      	mov	r2, r0
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8011db8:	f013 0001 	ands.w	r0, r3, #1
 8011dbc:	d10f      	bne.n	8011dde <tu_edpt_claim+0x2a>
 8011dbe:	7813      	ldrb	r3, [r2, #0]
 8011dc0:	0759      	lsls	r1, r3, #29
 8011dc2:	d40b      	bmi.n	8011ddc <tu_edpt_claim+0x28>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8011dc4:	7813      	ldrb	r3, [r2, #0]
 8011dc6:	f013 0001 	ands.w	r0, r3, #1
 8011dca:	d108      	bne.n	8011dde <tu_edpt_claim+0x2a>
 8011dcc:	7813      	ldrb	r3, [r2, #0]
 8011dce:	075b      	lsls	r3, r3, #29
 8011dd0:	d407      	bmi.n	8011de2 <tu_edpt_claim+0x2e>
  if (available)
  {
    ep_state->claimed = 1;
 8011dd2:	7813      	ldrb	r3, [r2, #0]
 8011dd4:	2001      	movs	r0, #1
 8011dd6:	f043 0304 	orr.w	r3, r3, #4
 8011dda:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
}
 8011ddc:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8011dde:	2000      	movs	r0, #0
 8011de0:	4770      	bx	lr
 8011de2:	4770      	bx	lr

08011de4 <tu_edpt_release>:
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011de4:	7803      	ldrb	r3, [r0, #0]
 8011de6:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8011dea:	075b      	lsls	r3, r3, #29
 8011dec:	d401      	bmi.n	8011df2 <tu_edpt_release+0xe>
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
}
 8011dee:	4610      	mov	r0, r2
 8011df0:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011df2:	7803      	ldrb	r3, [r0, #0]
 8011df4:	f013 0101 	ands.w	r1, r3, #1
 8011df8:	d105      	bne.n	8011e06 <tu_edpt_release+0x22>
    ep_state->claimed = 0;
 8011dfa:	7803      	ldrb	r3, [r0, #0]
 8011dfc:	f361 0382 	bfi	r3, r1, #2, #1
 8011e00:	7003      	strb	r3, [r0, #0]
}
 8011e02:	4610      	mov	r0, r2
 8011e04:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8011e06:	2200      	movs	r2, #0
}
 8011e08:	4610      	mov	r0, r2
 8011e0a:	4770      	bx	lr

08011e0c <tu_edpt_validate>:
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8011e0c:	78c3      	ldrb	r3, [r0, #3]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8011e0e:	8882      	ldrh	r2, [r0, #4]
 8011e10:	f003 0003 	and.w	r0, r3, #3
 8011e14:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8011e18:	2802      	cmp	r0, #2
 8011e1a:	d005      	beq.n	8011e28 <tu_edpt_validate+0x1c>
 8011e1c:	2803      	cmp	r0, #3
 8011e1e:	d01b      	beq.n	8011e58 <tu_edpt_validate+0x4c>
 8011e20:	2801      	cmp	r0, #1
 8011e22:	d007      	beq.n	8011e34 <tu_edpt_validate+0x28>
 8011e24:	2000      	movs	r0, #0
 8011e26:	4770      	bx	lr
      TU_ASSERT(max_packet_size <= spec_size);
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8011e28:	2902      	cmp	r1, #2
 8011e2a:	d01e      	beq.n	8011e6a <tu_edpt_validate+0x5e>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8011e2c:	2a40      	cmp	r2, #64	; 0x40
 8011e2e:	d809      	bhi.n	8011e44 <tu_edpt_validate+0x38>
    break;

    default: return false;
  }

  return true;
 8011e30:	2001      	movs	r0, #1
}
 8011e32:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8011e34:	2902      	cmp	r1, #2
 8011e36:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8011e3a:	bf08      	it	eq
 8011e3c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
      TU_ASSERT(max_packet_size <= spec_size);
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d2f6      	bcs.n	8011e32 <tu_edpt_validate+0x26>
      TU_ASSERT(max_packet_size <= spec_size);
 8011e44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011e48:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8011e4c:	f010 0001 	ands.w	r0, r0, #1
 8011e50:	d0ef      	beq.n	8011e32 <tu_edpt_validate+0x26>
 8011e52:	be00      	bkpt	0x0000
 8011e54:	2000      	movs	r0, #0
 8011e56:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8011e58:	2902      	cmp	r1, #2
 8011e5a:	bf0c      	ite	eq
 8011e5c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011e60:	2340      	movne	r3, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
 8011e62:	4293      	cmp	r3, r2
 8011e64:	d3ee      	bcc.n	8011e44 <tu_edpt_validate+0x38>
  return true;
 8011e66:	2001      	movs	r0, #1
 8011e68:	e7e3      	b.n	8011e32 <tu_edpt_validate+0x26>
        TU_ASSERT(max_packet_size == 512);
 8011e6a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8011e6e:	d0df      	beq.n	8011e30 <tu_edpt_validate+0x24>
 8011e70:	e7e8      	b.n	8011e44 <tu_edpt_validate+0x38>
 8011e72:	bf00      	nop

08011e74 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 8011e74:	440a      	add	r2, r1

  while( p_desc < desc_end )
 8011e76:	4291      	cmp	r1, r2
 8011e78:	d226      	bcs.n	8011ec8 <tu_edpt_bind_driver+0x54>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8011e7a:	f891 c001 	ldrb.w	ip, [r1, #1]
 8011e7e:	f1bc 0f05 	cmp.w	ip, #5
 8011e82:	d005      	beq.n	8011e90 <tu_edpt_bind_driver+0x1c>

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 8011e84:	f891 c000 	ldrb.w	ip, [r1]
 8011e88:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8011e8a:	428a      	cmp	r2, r1
 8011e8c:	d8f5      	bhi.n	8011e7a <tu_edpt_bind_driver+0x6>
 8011e8e:	4770      	bx	lr
{
 8011e90:	b500      	push	{lr}
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8011e92:	f891 c002 	ldrb.w	ip, [r1, #2]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8011e96:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
 8011e9a:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 8011e9e:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8011ea2:	f80e 300c 	strb.w	r3, [lr, ip]
 8011ea6:	f891 c000 	ldrb.w	ip, [r1]
 8011eaa:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8011eac:	428a      	cmp	r2, r1
 8011eae:	d909      	bls.n	8011ec4 <tu_edpt_bind_driver+0x50>
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8011eb0:	f891 c001 	ldrb.w	ip, [r1, #1]
 8011eb4:	f1bc 0f05 	cmp.w	ip, #5
 8011eb8:	d0eb      	beq.n	8011e92 <tu_edpt_bind_driver+0x1e>
 8011eba:	f891 c000 	ldrb.w	ip, [r1]
 8011ebe:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8011ec0:	428a      	cmp	r2, r1
 8011ec2:	d8f5      	bhi.n	8011eb0 <tu_edpt_bind_driver+0x3c>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
 8011ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop

08011ecc <abs>:
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	bfb8      	it	lt
 8011ed0:	4240      	neglt	r0, r0
 8011ed2:	4770      	bx	lr

08011ed4 <__assert_func>:
 8011ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ed6:	4614      	mov	r4, r2
 8011ed8:	461a      	mov	r2, r3
 8011eda:	4b09      	ldr	r3, [pc, #36]	; (8011f00 <__assert_func+0x2c>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	4605      	mov	r5, r0
 8011ee0:	68d8      	ldr	r0, [r3, #12]
 8011ee2:	b14c      	cbz	r4, 8011ef8 <__assert_func+0x24>
 8011ee4:	4b07      	ldr	r3, [pc, #28]	; (8011f04 <__assert_func+0x30>)
 8011ee6:	9100      	str	r1, [sp, #0]
 8011ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011eec:	4906      	ldr	r1, [pc, #24]	; (8011f08 <__assert_func+0x34>)
 8011eee:	462b      	mov	r3, r5
 8011ef0:	f000 f818 	bl	8011f24 <fiprintf>
 8011ef4:	f001 f81e 	bl	8012f34 <abort>
 8011ef8:	4b04      	ldr	r3, [pc, #16]	; (8011f0c <__assert_func+0x38>)
 8011efa:	461c      	mov	r4, r3
 8011efc:	e7f3      	b.n	8011ee6 <__assert_func+0x12>
 8011efe:	bf00      	nop
 8011f00:	24000354 	.word	0x24000354
 8011f04:	08019560 	.word	0x08019560
 8011f08:	0801956d 	.word	0x0801956d
 8011f0c:	0801959b 	.word	0x0801959b

08011f10 <atoi>:
 8011f10:	220a      	movs	r2, #10
 8011f12:	2100      	movs	r1, #0
 8011f14:	f000 bf44 	b.w	8012da0 <strtol>

08011f18 <__errno>:
 8011f18:	4b01      	ldr	r3, [pc, #4]	; (8011f20 <__errno+0x8>)
 8011f1a:	6818      	ldr	r0, [r3, #0]
 8011f1c:	4770      	bx	lr
 8011f1e:	bf00      	nop
 8011f20:	24000354 	.word	0x24000354

08011f24 <fiprintf>:
 8011f24:	b40e      	push	{r1, r2, r3}
 8011f26:	b503      	push	{r0, r1, lr}
 8011f28:	4601      	mov	r1, r0
 8011f2a:	ab03      	add	r3, sp, #12
 8011f2c:	4805      	ldr	r0, [pc, #20]	; (8011f44 <fiprintf+0x20>)
 8011f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f32:	6800      	ldr	r0, [r0, #0]
 8011f34:	9301      	str	r3, [sp, #4]
 8011f36:	f000 f86b 	bl	8012010 <_vfiprintf_r>
 8011f3a:	b002      	add	sp, #8
 8011f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f40:	b003      	add	sp, #12
 8011f42:	4770      	bx	lr
 8011f44:	24000354 	.word	0x24000354

08011f48 <__libc_init_array>:
 8011f48:	b570      	push	{r4, r5, r6, lr}
 8011f4a:	4d0d      	ldr	r5, [pc, #52]	; (8011f80 <__libc_init_array+0x38>)
 8011f4c:	4c0d      	ldr	r4, [pc, #52]	; (8011f84 <__libc_init_array+0x3c>)
 8011f4e:	1b64      	subs	r4, r4, r5
 8011f50:	10a4      	asrs	r4, r4, #2
 8011f52:	2600      	movs	r6, #0
 8011f54:	42a6      	cmp	r6, r4
 8011f56:	d109      	bne.n	8011f6c <__libc_init_array+0x24>
 8011f58:	4d0b      	ldr	r5, [pc, #44]	; (8011f88 <__libc_init_array+0x40>)
 8011f5a:	4c0c      	ldr	r4, [pc, #48]	; (8011f8c <__libc_init_array+0x44>)
 8011f5c:	f004 f892 	bl	8016084 <_init>
 8011f60:	1b64      	subs	r4, r4, r5
 8011f62:	10a4      	asrs	r4, r4, #2
 8011f64:	2600      	movs	r6, #0
 8011f66:	42a6      	cmp	r6, r4
 8011f68:	d105      	bne.n	8011f76 <__libc_init_array+0x2e>
 8011f6a:	bd70      	pop	{r4, r5, r6, pc}
 8011f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f70:	4798      	blx	r3
 8011f72:	3601      	adds	r6, #1
 8011f74:	e7ee      	b.n	8011f54 <__libc_init_array+0xc>
 8011f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f7a:	4798      	blx	r3
 8011f7c:	3601      	adds	r6, #1
 8011f7e:	e7f2      	b.n	8011f66 <__libc_init_array+0x1e>
 8011f80:	0801acd8 	.word	0x0801acd8
 8011f84:	0801acd8 	.word	0x0801acd8
 8011f88:	0801acd8 	.word	0x0801acd8
 8011f8c:	0801acdc 	.word	0x0801acdc

08011f90 <memcpy>:
 8011f90:	440a      	add	r2, r1
 8011f92:	4291      	cmp	r1, r2
 8011f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f98:	d100      	bne.n	8011f9c <memcpy+0xc>
 8011f9a:	4770      	bx	lr
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fa6:	4291      	cmp	r1, r2
 8011fa8:	d1f9      	bne.n	8011f9e <memcpy+0xe>
 8011faa:	bd10      	pop	{r4, pc}

08011fac <memset>:
 8011fac:	4402      	add	r2, r0
 8011fae:	4603      	mov	r3, r0
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d100      	bne.n	8011fb6 <memset+0xa>
 8011fb4:	4770      	bx	lr
 8011fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8011fba:	e7f9      	b.n	8011fb0 <memset+0x4>

08011fbc <__sfputc_r>:
 8011fbc:	6893      	ldr	r3, [r2, #8]
 8011fbe:	3b01      	subs	r3, #1
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	b410      	push	{r4}
 8011fc4:	6093      	str	r3, [r2, #8]
 8011fc6:	da08      	bge.n	8011fda <__sfputc_r+0x1e>
 8011fc8:	6994      	ldr	r4, [r2, #24]
 8011fca:	42a3      	cmp	r3, r4
 8011fcc:	db01      	blt.n	8011fd2 <__sfputc_r+0x16>
 8011fce:	290a      	cmp	r1, #10
 8011fd0:	d103      	bne.n	8011fda <__sfputc_r+0x1e>
 8011fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fd6:	f000 beed 	b.w	8012db4 <__swbuf_r>
 8011fda:	6813      	ldr	r3, [r2, #0]
 8011fdc:	1c58      	adds	r0, r3, #1
 8011fde:	6010      	str	r0, [r2, #0]
 8011fe0:	7019      	strb	r1, [r3, #0]
 8011fe2:	4608      	mov	r0, r1
 8011fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fe8:	4770      	bx	lr

08011fea <__sfputs_r>:
 8011fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fec:	4606      	mov	r6, r0
 8011fee:	460f      	mov	r7, r1
 8011ff0:	4614      	mov	r4, r2
 8011ff2:	18d5      	adds	r5, r2, r3
 8011ff4:	42ac      	cmp	r4, r5
 8011ff6:	d101      	bne.n	8011ffc <__sfputs_r+0x12>
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	e007      	b.n	801200c <__sfputs_r+0x22>
 8011ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012000:	463a      	mov	r2, r7
 8012002:	4630      	mov	r0, r6
 8012004:	f7ff ffda 	bl	8011fbc <__sfputc_r>
 8012008:	1c43      	adds	r3, r0, #1
 801200a:	d1f3      	bne.n	8011ff4 <__sfputs_r+0xa>
 801200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012010 <_vfiprintf_r>:
 8012010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012014:	460d      	mov	r5, r1
 8012016:	b09d      	sub	sp, #116	; 0x74
 8012018:	4614      	mov	r4, r2
 801201a:	4698      	mov	r8, r3
 801201c:	4606      	mov	r6, r0
 801201e:	b118      	cbz	r0, 8012028 <_vfiprintf_r+0x18>
 8012020:	6983      	ldr	r3, [r0, #24]
 8012022:	b90b      	cbnz	r3, 8012028 <_vfiprintf_r+0x18>
 8012024:	f001 fea0 	bl	8013d68 <__sinit>
 8012028:	4b89      	ldr	r3, [pc, #548]	; (8012250 <_vfiprintf_r+0x240>)
 801202a:	429d      	cmp	r5, r3
 801202c:	d11b      	bne.n	8012066 <_vfiprintf_r+0x56>
 801202e:	6875      	ldr	r5, [r6, #4]
 8012030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012032:	07d9      	lsls	r1, r3, #31
 8012034:	d405      	bmi.n	8012042 <_vfiprintf_r+0x32>
 8012036:	89ab      	ldrh	r3, [r5, #12]
 8012038:	059a      	lsls	r2, r3, #22
 801203a:	d402      	bmi.n	8012042 <_vfiprintf_r+0x32>
 801203c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801203e:	f001 ff36 	bl	8013eae <__retarget_lock_acquire_recursive>
 8012042:	89ab      	ldrh	r3, [r5, #12]
 8012044:	071b      	lsls	r3, r3, #28
 8012046:	d501      	bpl.n	801204c <_vfiprintf_r+0x3c>
 8012048:	692b      	ldr	r3, [r5, #16]
 801204a:	b9eb      	cbnz	r3, 8012088 <_vfiprintf_r+0x78>
 801204c:	4629      	mov	r1, r5
 801204e:	4630      	mov	r0, r6
 8012050:	f000 ff02 	bl	8012e58 <__swsetup_r>
 8012054:	b1c0      	cbz	r0, 8012088 <_vfiprintf_r+0x78>
 8012056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012058:	07dc      	lsls	r4, r3, #31
 801205a:	d50e      	bpl.n	801207a <_vfiprintf_r+0x6a>
 801205c:	f04f 30ff 	mov.w	r0, #4294967295
 8012060:	b01d      	add	sp, #116	; 0x74
 8012062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012066:	4b7b      	ldr	r3, [pc, #492]	; (8012254 <_vfiprintf_r+0x244>)
 8012068:	429d      	cmp	r5, r3
 801206a:	d101      	bne.n	8012070 <_vfiprintf_r+0x60>
 801206c:	68b5      	ldr	r5, [r6, #8]
 801206e:	e7df      	b.n	8012030 <_vfiprintf_r+0x20>
 8012070:	4b79      	ldr	r3, [pc, #484]	; (8012258 <_vfiprintf_r+0x248>)
 8012072:	429d      	cmp	r5, r3
 8012074:	bf08      	it	eq
 8012076:	68f5      	ldreq	r5, [r6, #12]
 8012078:	e7da      	b.n	8012030 <_vfiprintf_r+0x20>
 801207a:	89ab      	ldrh	r3, [r5, #12]
 801207c:	0598      	lsls	r0, r3, #22
 801207e:	d4ed      	bmi.n	801205c <_vfiprintf_r+0x4c>
 8012080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012082:	f001 ff15 	bl	8013eb0 <__retarget_lock_release_recursive>
 8012086:	e7e9      	b.n	801205c <_vfiprintf_r+0x4c>
 8012088:	2300      	movs	r3, #0
 801208a:	9309      	str	r3, [sp, #36]	; 0x24
 801208c:	2320      	movs	r3, #32
 801208e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012092:	f8cd 800c 	str.w	r8, [sp, #12]
 8012096:	2330      	movs	r3, #48	; 0x30
 8012098:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801225c <_vfiprintf_r+0x24c>
 801209c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120a0:	f04f 0901 	mov.w	r9, #1
 80120a4:	4623      	mov	r3, r4
 80120a6:	469a      	mov	sl, r3
 80120a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120ac:	b10a      	cbz	r2, 80120b2 <_vfiprintf_r+0xa2>
 80120ae:	2a25      	cmp	r2, #37	; 0x25
 80120b0:	d1f9      	bne.n	80120a6 <_vfiprintf_r+0x96>
 80120b2:	ebba 0b04 	subs.w	fp, sl, r4
 80120b6:	d00b      	beq.n	80120d0 <_vfiprintf_r+0xc0>
 80120b8:	465b      	mov	r3, fp
 80120ba:	4622      	mov	r2, r4
 80120bc:	4629      	mov	r1, r5
 80120be:	4630      	mov	r0, r6
 80120c0:	f7ff ff93 	bl	8011fea <__sfputs_r>
 80120c4:	3001      	adds	r0, #1
 80120c6:	f000 80aa 	beq.w	801221e <_vfiprintf_r+0x20e>
 80120ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120cc:	445a      	add	r2, fp
 80120ce:	9209      	str	r2, [sp, #36]	; 0x24
 80120d0:	f89a 3000 	ldrb.w	r3, [sl]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	f000 80a2 	beq.w	801221e <_vfiprintf_r+0x20e>
 80120da:	2300      	movs	r3, #0
 80120dc:	f04f 32ff 	mov.w	r2, #4294967295
 80120e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120e4:	f10a 0a01 	add.w	sl, sl, #1
 80120e8:	9304      	str	r3, [sp, #16]
 80120ea:	9307      	str	r3, [sp, #28]
 80120ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120f0:	931a      	str	r3, [sp, #104]	; 0x68
 80120f2:	4654      	mov	r4, sl
 80120f4:	2205      	movs	r2, #5
 80120f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120fa:	4858      	ldr	r0, [pc, #352]	; (801225c <_vfiprintf_r+0x24c>)
 80120fc:	f7ee f958 	bl	80003b0 <memchr>
 8012100:	9a04      	ldr	r2, [sp, #16]
 8012102:	b9d8      	cbnz	r0, 801213c <_vfiprintf_r+0x12c>
 8012104:	06d1      	lsls	r1, r2, #27
 8012106:	bf44      	itt	mi
 8012108:	2320      	movmi	r3, #32
 801210a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801210e:	0713      	lsls	r3, r2, #28
 8012110:	bf44      	itt	mi
 8012112:	232b      	movmi	r3, #43	; 0x2b
 8012114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012118:	f89a 3000 	ldrb.w	r3, [sl]
 801211c:	2b2a      	cmp	r3, #42	; 0x2a
 801211e:	d015      	beq.n	801214c <_vfiprintf_r+0x13c>
 8012120:	9a07      	ldr	r2, [sp, #28]
 8012122:	4654      	mov	r4, sl
 8012124:	2000      	movs	r0, #0
 8012126:	f04f 0c0a 	mov.w	ip, #10
 801212a:	4621      	mov	r1, r4
 801212c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012130:	3b30      	subs	r3, #48	; 0x30
 8012132:	2b09      	cmp	r3, #9
 8012134:	d94e      	bls.n	80121d4 <_vfiprintf_r+0x1c4>
 8012136:	b1b0      	cbz	r0, 8012166 <_vfiprintf_r+0x156>
 8012138:	9207      	str	r2, [sp, #28]
 801213a:	e014      	b.n	8012166 <_vfiprintf_r+0x156>
 801213c:	eba0 0308 	sub.w	r3, r0, r8
 8012140:	fa09 f303 	lsl.w	r3, r9, r3
 8012144:	4313      	orrs	r3, r2
 8012146:	9304      	str	r3, [sp, #16]
 8012148:	46a2      	mov	sl, r4
 801214a:	e7d2      	b.n	80120f2 <_vfiprintf_r+0xe2>
 801214c:	9b03      	ldr	r3, [sp, #12]
 801214e:	1d19      	adds	r1, r3, #4
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	9103      	str	r1, [sp, #12]
 8012154:	2b00      	cmp	r3, #0
 8012156:	bfbb      	ittet	lt
 8012158:	425b      	neglt	r3, r3
 801215a:	f042 0202 	orrlt.w	r2, r2, #2
 801215e:	9307      	strge	r3, [sp, #28]
 8012160:	9307      	strlt	r3, [sp, #28]
 8012162:	bfb8      	it	lt
 8012164:	9204      	strlt	r2, [sp, #16]
 8012166:	7823      	ldrb	r3, [r4, #0]
 8012168:	2b2e      	cmp	r3, #46	; 0x2e
 801216a:	d10c      	bne.n	8012186 <_vfiprintf_r+0x176>
 801216c:	7863      	ldrb	r3, [r4, #1]
 801216e:	2b2a      	cmp	r3, #42	; 0x2a
 8012170:	d135      	bne.n	80121de <_vfiprintf_r+0x1ce>
 8012172:	9b03      	ldr	r3, [sp, #12]
 8012174:	1d1a      	adds	r2, r3, #4
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	9203      	str	r2, [sp, #12]
 801217a:	2b00      	cmp	r3, #0
 801217c:	bfb8      	it	lt
 801217e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012182:	3402      	adds	r4, #2
 8012184:	9305      	str	r3, [sp, #20]
 8012186:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801226c <_vfiprintf_r+0x25c>
 801218a:	7821      	ldrb	r1, [r4, #0]
 801218c:	2203      	movs	r2, #3
 801218e:	4650      	mov	r0, sl
 8012190:	f7ee f90e 	bl	80003b0 <memchr>
 8012194:	b140      	cbz	r0, 80121a8 <_vfiprintf_r+0x198>
 8012196:	2340      	movs	r3, #64	; 0x40
 8012198:	eba0 000a 	sub.w	r0, r0, sl
 801219c:	fa03 f000 	lsl.w	r0, r3, r0
 80121a0:	9b04      	ldr	r3, [sp, #16]
 80121a2:	4303      	orrs	r3, r0
 80121a4:	3401      	adds	r4, #1
 80121a6:	9304      	str	r3, [sp, #16]
 80121a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121ac:	482c      	ldr	r0, [pc, #176]	; (8012260 <_vfiprintf_r+0x250>)
 80121ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121b2:	2206      	movs	r2, #6
 80121b4:	f7ee f8fc 	bl	80003b0 <memchr>
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d03f      	beq.n	801223c <_vfiprintf_r+0x22c>
 80121bc:	4b29      	ldr	r3, [pc, #164]	; (8012264 <_vfiprintf_r+0x254>)
 80121be:	bb1b      	cbnz	r3, 8012208 <_vfiprintf_r+0x1f8>
 80121c0:	9b03      	ldr	r3, [sp, #12]
 80121c2:	3307      	adds	r3, #7
 80121c4:	f023 0307 	bic.w	r3, r3, #7
 80121c8:	3308      	adds	r3, #8
 80121ca:	9303      	str	r3, [sp, #12]
 80121cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ce:	443b      	add	r3, r7
 80121d0:	9309      	str	r3, [sp, #36]	; 0x24
 80121d2:	e767      	b.n	80120a4 <_vfiprintf_r+0x94>
 80121d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80121d8:	460c      	mov	r4, r1
 80121da:	2001      	movs	r0, #1
 80121dc:	e7a5      	b.n	801212a <_vfiprintf_r+0x11a>
 80121de:	2300      	movs	r3, #0
 80121e0:	3401      	adds	r4, #1
 80121e2:	9305      	str	r3, [sp, #20]
 80121e4:	4619      	mov	r1, r3
 80121e6:	f04f 0c0a 	mov.w	ip, #10
 80121ea:	4620      	mov	r0, r4
 80121ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121f0:	3a30      	subs	r2, #48	; 0x30
 80121f2:	2a09      	cmp	r2, #9
 80121f4:	d903      	bls.n	80121fe <_vfiprintf_r+0x1ee>
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d0c5      	beq.n	8012186 <_vfiprintf_r+0x176>
 80121fa:	9105      	str	r1, [sp, #20]
 80121fc:	e7c3      	b.n	8012186 <_vfiprintf_r+0x176>
 80121fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012202:	4604      	mov	r4, r0
 8012204:	2301      	movs	r3, #1
 8012206:	e7f0      	b.n	80121ea <_vfiprintf_r+0x1da>
 8012208:	ab03      	add	r3, sp, #12
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	462a      	mov	r2, r5
 801220e:	4b16      	ldr	r3, [pc, #88]	; (8012268 <_vfiprintf_r+0x258>)
 8012210:	a904      	add	r1, sp, #16
 8012212:	4630      	mov	r0, r6
 8012214:	f000 f8bc 	bl	8012390 <_printf_float>
 8012218:	4607      	mov	r7, r0
 801221a:	1c78      	adds	r0, r7, #1
 801221c:	d1d6      	bne.n	80121cc <_vfiprintf_r+0x1bc>
 801221e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012220:	07d9      	lsls	r1, r3, #31
 8012222:	d405      	bmi.n	8012230 <_vfiprintf_r+0x220>
 8012224:	89ab      	ldrh	r3, [r5, #12]
 8012226:	059a      	lsls	r2, r3, #22
 8012228:	d402      	bmi.n	8012230 <_vfiprintf_r+0x220>
 801222a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801222c:	f001 fe40 	bl	8013eb0 <__retarget_lock_release_recursive>
 8012230:	89ab      	ldrh	r3, [r5, #12]
 8012232:	065b      	lsls	r3, r3, #25
 8012234:	f53f af12 	bmi.w	801205c <_vfiprintf_r+0x4c>
 8012238:	9809      	ldr	r0, [sp, #36]	; 0x24
 801223a:	e711      	b.n	8012060 <_vfiprintf_r+0x50>
 801223c:	ab03      	add	r3, sp, #12
 801223e:	9300      	str	r3, [sp, #0]
 8012240:	462a      	mov	r2, r5
 8012242:	4b09      	ldr	r3, [pc, #36]	; (8012268 <_vfiprintf_r+0x258>)
 8012244:	a904      	add	r1, sp, #16
 8012246:	4630      	mov	r0, r6
 8012248:	f000 fb2e 	bl	80128a8 <_printf_i>
 801224c:	e7e4      	b.n	8012218 <_vfiprintf_r+0x208>
 801224e:	bf00      	nop
 8012250:	08019854 	.word	0x08019854
 8012254:	08019874 	.word	0x08019874
 8012258:	08019834 	.word	0x08019834
 801225c:	080196a4 	.word	0x080196a4
 8012260:	080196ae 	.word	0x080196ae
 8012264:	08012391 	.word	0x08012391
 8012268:	08011feb 	.word	0x08011feb
 801226c:	080196aa 	.word	0x080196aa

08012270 <__cvt>:
 8012270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012272:	ed2d 8b02 	vpush	{d8}
 8012276:	eeb0 8b40 	vmov.f64	d8, d0
 801227a:	b085      	sub	sp, #20
 801227c:	4617      	mov	r7, r2
 801227e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012280:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012282:	ee18 2a90 	vmov	r2, s17
 8012286:	f025 0520 	bic.w	r5, r5, #32
 801228a:	2a00      	cmp	r2, #0
 801228c:	bfb6      	itet	lt
 801228e:	222d      	movlt	r2, #45	; 0x2d
 8012290:	2200      	movge	r2, #0
 8012292:	eeb1 8b40 	vneglt.f64	d8, d0
 8012296:	2d46      	cmp	r5, #70	; 0x46
 8012298:	460c      	mov	r4, r1
 801229a:	701a      	strb	r2, [r3, #0]
 801229c:	d004      	beq.n	80122a8 <__cvt+0x38>
 801229e:	2d45      	cmp	r5, #69	; 0x45
 80122a0:	d100      	bne.n	80122a4 <__cvt+0x34>
 80122a2:	3401      	adds	r4, #1
 80122a4:	2102      	movs	r1, #2
 80122a6:	e000      	b.n	80122aa <__cvt+0x3a>
 80122a8:	2103      	movs	r1, #3
 80122aa:	ab03      	add	r3, sp, #12
 80122ac:	9301      	str	r3, [sp, #4]
 80122ae:	ab02      	add	r3, sp, #8
 80122b0:	9300      	str	r3, [sp, #0]
 80122b2:	4622      	mov	r2, r4
 80122b4:	4633      	mov	r3, r6
 80122b6:	eeb0 0b48 	vmov.f64	d0, d8
 80122ba:	f000 fecd 	bl	8013058 <_dtoa_r>
 80122be:	2d47      	cmp	r5, #71	; 0x47
 80122c0:	d101      	bne.n	80122c6 <__cvt+0x56>
 80122c2:	07fb      	lsls	r3, r7, #31
 80122c4:	d51a      	bpl.n	80122fc <__cvt+0x8c>
 80122c6:	2d46      	cmp	r5, #70	; 0x46
 80122c8:	eb00 0204 	add.w	r2, r0, r4
 80122cc:	d10c      	bne.n	80122e8 <__cvt+0x78>
 80122ce:	7803      	ldrb	r3, [r0, #0]
 80122d0:	2b30      	cmp	r3, #48	; 0x30
 80122d2:	d107      	bne.n	80122e4 <__cvt+0x74>
 80122d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80122d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122dc:	bf1c      	itt	ne
 80122de:	f1c4 0401 	rsbne	r4, r4, #1
 80122e2:	6034      	strne	r4, [r6, #0]
 80122e4:	6833      	ldr	r3, [r6, #0]
 80122e6:	441a      	add	r2, r3
 80122e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80122ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f0:	bf08      	it	eq
 80122f2:	9203      	streq	r2, [sp, #12]
 80122f4:	2130      	movs	r1, #48	; 0x30
 80122f6:	9b03      	ldr	r3, [sp, #12]
 80122f8:	4293      	cmp	r3, r2
 80122fa:	d307      	bcc.n	801230c <__cvt+0x9c>
 80122fc:	9b03      	ldr	r3, [sp, #12]
 80122fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012300:	1a1b      	subs	r3, r3, r0
 8012302:	6013      	str	r3, [r2, #0]
 8012304:	b005      	add	sp, #20
 8012306:	ecbd 8b02 	vpop	{d8}
 801230a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801230c:	1c5c      	adds	r4, r3, #1
 801230e:	9403      	str	r4, [sp, #12]
 8012310:	7019      	strb	r1, [r3, #0]
 8012312:	e7f0      	b.n	80122f6 <__cvt+0x86>

08012314 <__exponent>:
 8012314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012316:	4603      	mov	r3, r0
 8012318:	2900      	cmp	r1, #0
 801231a:	bfb8      	it	lt
 801231c:	4249      	neglt	r1, r1
 801231e:	f803 2b02 	strb.w	r2, [r3], #2
 8012322:	bfb4      	ite	lt
 8012324:	222d      	movlt	r2, #45	; 0x2d
 8012326:	222b      	movge	r2, #43	; 0x2b
 8012328:	2909      	cmp	r1, #9
 801232a:	7042      	strb	r2, [r0, #1]
 801232c:	dd2a      	ble.n	8012384 <__exponent+0x70>
 801232e:	f10d 0407 	add.w	r4, sp, #7
 8012332:	46a4      	mov	ip, r4
 8012334:	270a      	movs	r7, #10
 8012336:	46a6      	mov	lr, r4
 8012338:	460a      	mov	r2, r1
 801233a:	fb91 f6f7 	sdiv	r6, r1, r7
 801233e:	fb07 1516 	mls	r5, r7, r6, r1
 8012342:	3530      	adds	r5, #48	; 0x30
 8012344:	2a63      	cmp	r2, #99	; 0x63
 8012346:	f104 34ff 	add.w	r4, r4, #4294967295
 801234a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801234e:	4631      	mov	r1, r6
 8012350:	dcf1      	bgt.n	8012336 <__exponent+0x22>
 8012352:	3130      	adds	r1, #48	; 0x30
 8012354:	f1ae 0502 	sub.w	r5, lr, #2
 8012358:	f804 1c01 	strb.w	r1, [r4, #-1]
 801235c:	1c44      	adds	r4, r0, #1
 801235e:	4629      	mov	r1, r5
 8012360:	4561      	cmp	r1, ip
 8012362:	d30a      	bcc.n	801237a <__exponent+0x66>
 8012364:	f10d 0209 	add.w	r2, sp, #9
 8012368:	eba2 020e 	sub.w	r2, r2, lr
 801236c:	4565      	cmp	r5, ip
 801236e:	bf88      	it	hi
 8012370:	2200      	movhi	r2, #0
 8012372:	4413      	add	r3, r2
 8012374:	1a18      	subs	r0, r3, r0
 8012376:	b003      	add	sp, #12
 8012378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801237a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801237e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012382:	e7ed      	b.n	8012360 <__exponent+0x4c>
 8012384:	2330      	movs	r3, #48	; 0x30
 8012386:	3130      	adds	r1, #48	; 0x30
 8012388:	7083      	strb	r3, [r0, #2]
 801238a:	70c1      	strb	r1, [r0, #3]
 801238c:	1d03      	adds	r3, r0, #4
 801238e:	e7f1      	b.n	8012374 <__exponent+0x60>

08012390 <_printf_float>:
 8012390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	b08b      	sub	sp, #44	; 0x2c
 8012396:	460c      	mov	r4, r1
 8012398:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801239c:	4616      	mov	r6, r2
 801239e:	461f      	mov	r7, r3
 80123a0:	4605      	mov	r5, r0
 80123a2:	f001 fd7f 	bl	8013ea4 <_localeconv_r>
 80123a6:	f8d0 b000 	ldr.w	fp, [r0]
 80123aa:	4658      	mov	r0, fp
 80123ac:	f7ed fff8 	bl	80003a0 <strlen>
 80123b0:	2300      	movs	r3, #0
 80123b2:	9308      	str	r3, [sp, #32]
 80123b4:	f8d8 3000 	ldr.w	r3, [r8]
 80123b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80123bc:	6822      	ldr	r2, [r4, #0]
 80123be:	3307      	adds	r3, #7
 80123c0:	f023 0307 	bic.w	r3, r3, #7
 80123c4:	f103 0108 	add.w	r1, r3, #8
 80123c8:	f8c8 1000 	str.w	r1, [r8]
 80123cc:	4682      	mov	sl, r0
 80123ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80123d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80123d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012638 <_printf_float+0x2a8>
 80123da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80123de:	eeb0 6bc0 	vabs.f64	d6, d0
 80123e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80123e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ea:	dd24      	ble.n	8012436 <_printf_float+0xa6>
 80123ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80123f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f4:	d502      	bpl.n	80123fc <_printf_float+0x6c>
 80123f6:	232d      	movs	r3, #45	; 0x2d
 80123f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123fc:	4b90      	ldr	r3, [pc, #576]	; (8012640 <_printf_float+0x2b0>)
 80123fe:	4891      	ldr	r0, [pc, #580]	; (8012644 <_printf_float+0x2b4>)
 8012400:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012404:	bf94      	ite	ls
 8012406:	4698      	movls	r8, r3
 8012408:	4680      	movhi	r8, r0
 801240a:	2303      	movs	r3, #3
 801240c:	6123      	str	r3, [r4, #16]
 801240e:	f022 0204 	bic.w	r2, r2, #4
 8012412:	2300      	movs	r3, #0
 8012414:	6022      	str	r2, [r4, #0]
 8012416:	9304      	str	r3, [sp, #16]
 8012418:	9700      	str	r7, [sp, #0]
 801241a:	4633      	mov	r3, r6
 801241c:	aa09      	add	r2, sp, #36	; 0x24
 801241e:	4621      	mov	r1, r4
 8012420:	4628      	mov	r0, r5
 8012422:	f000 f9d3 	bl	80127cc <_printf_common>
 8012426:	3001      	adds	r0, #1
 8012428:	f040 808a 	bne.w	8012540 <_printf_float+0x1b0>
 801242c:	f04f 30ff 	mov.w	r0, #4294967295
 8012430:	b00b      	add	sp, #44	; 0x2c
 8012432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012436:	eeb4 0b40 	vcmp.f64	d0, d0
 801243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243e:	d709      	bvc.n	8012454 <_printf_float+0xc4>
 8012440:	ee10 3a90 	vmov	r3, s1
 8012444:	2b00      	cmp	r3, #0
 8012446:	bfbc      	itt	lt
 8012448:	232d      	movlt	r3, #45	; 0x2d
 801244a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801244e:	487e      	ldr	r0, [pc, #504]	; (8012648 <_printf_float+0x2b8>)
 8012450:	4b7e      	ldr	r3, [pc, #504]	; (801264c <_printf_float+0x2bc>)
 8012452:	e7d5      	b.n	8012400 <_printf_float+0x70>
 8012454:	6863      	ldr	r3, [r4, #4]
 8012456:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801245a:	9104      	str	r1, [sp, #16]
 801245c:	1c59      	adds	r1, r3, #1
 801245e:	d13c      	bne.n	80124da <_printf_float+0x14a>
 8012460:	2306      	movs	r3, #6
 8012462:	6063      	str	r3, [r4, #4]
 8012464:	2300      	movs	r3, #0
 8012466:	9303      	str	r3, [sp, #12]
 8012468:	ab08      	add	r3, sp, #32
 801246a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801246e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012472:	ab07      	add	r3, sp, #28
 8012474:	6861      	ldr	r1, [r4, #4]
 8012476:	9300      	str	r3, [sp, #0]
 8012478:	6022      	str	r2, [r4, #0]
 801247a:	f10d 031b 	add.w	r3, sp, #27
 801247e:	4628      	mov	r0, r5
 8012480:	f7ff fef6 	bl	8012270 <__cvt>
 8012484:	9b04      	ldr	r3, [sp, #16]
 8012486:	9907      	ldr	r1, [sp, #28]
 8012488:	2b47      	cmp	r3, #71	; 0x47
 801248a:	4680      	mov	r8, r0
 801248c:	d108      	bne.n	80124a0 <_printf_float+0x110>
 801248e:	1cc8      	adds	r0, r1, #3
 8012490:	db02      	blt.n	8012498 <_printf_float+0x108>
 8012492:	6863      	ldr	r3, [r4, #4]
 8012494:	4299      	cmp	r1, r3
 8012496:	dd41      	ble.n	801251c <_printf_float+0x18c>
 8012498:	f1a9 0902 	sub.w	r9, r9, #2
 801249c:	fa5f f989 	uxtb.w	r9, r9
 80124a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80124a4:	d820      	bhi.n	80124e8 <_printf_float+0x158>
 80124a6:	3901      	subs	r1, #1
 80124a8:	464a      	mov	r2, r9
 80124aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80124ae:	9107      	str	r1, [sp, #28]
 80124b0:	f7ff ff30 	bl	8012314 <__exponent>
 80124b4:	9a08      	ldr	r2, [sp, #32]
 80124b6:	9004      	str	r0, [sp, #16]
 80124b8:	1813      	adds	r3, r2, r0
 80124ba:	2a01      	cmp	r2, #1
 80124bc:	6123      	str	r3, [r4, #16]
 80124be:	dc02      	bgt.n	80124c6 <_printf_float+0x136>
 80124c0:	6822      	ldr	r2, [r4, #0]
 80124c2:	07d2      	lsls	r2, r2, #31
 80124c4:	d501      	bpl.n	80124ca <_printf_float+0x13a>
 80124c6:	3301      	adds	r3, #1
 80124c8:	6123      	str	r3, [r4, #16]
 80124ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d0a2      	beq.n	8012418 <_printf_float+0x88>
 80124d2:	232d      	movs	r3, #45	; 0x2d
 80124d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124d8:	e79e      	b.n	8012418 <_printf_float+0x88>
 80124da:	9904      	ldr	r1, [sp, #16]
 80124dc:	2947      	cmp	r1, #71	; 0x47
 80124de:	d1c1      	bne.n	8012464 <_printf_float+0xd4>
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d1bf      	bne.n	8012464 <_printf_float+0xd4>
 80124e4:	2301      	movs	r3, #1
 80124e6:	e7bc      	b.n	8012462 <_printf_float+0xd2>
 80124e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80124ec:	d118      	bne.n	8012520 <_printf_float+0x190>
 80124ee:	2900      	cmp	r1, #0
 80124f0:	6863      	ldr	r3, [r4, #4]
 80124f2:	dd0b      	ble.n	801250c <_printf_float+0x17c>
 80124f4:	6121      	str	r1, [r4, #16]
 80124f6:	b913      	cbnz	r3, 80124fe <_printf_float+0x16e>
 80124f8:	6822      	ldr	r2, [r4, #0]
 80124fa:	07d0      	lsls	r0, r2, #31
 80124fc:	d502      	bpl.n	8012504 <_printf_float+0x174>
 80124fe:	3301      	adds	r3, #1
 8012500:	440b      	add	r3, r1
 8012502:	6123      	str	r3, [r4, #16]
 8012504:	2300      	movs	r3, #0
 8012506:	65a1      	str	r1, [r4, #88]	; 0x58
 8012508:	9304      	str	r3, [sp, #16]
 801250a:	e7de      	b.n	80124ca <_printf_float+0x13a>
 801250c:	b913      	cbnz	r3, 8012514 <_printf_float+0x184>
 801250e:	6822      	ldr	r2, [r4, #0]
 8012510:	07d2      	lsls	r2, r2, #31
 8012512:	d501      	bpl.n	8012518 <_printf_float+0x188>
 8012514:	3302      	adds	r3, #2
 8012516:	e7f4      	b.n	8012502 <_printf_float+0x172>
 8012518:	2301      	movs	r3, #1
 801251a:	e7f2      	b.n	8012502 <_printf_float+0x172>
 801251c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012520:	9b08      	ldr	r3, [sp, #32]
 8012522:	4299      	cmp	r1, r3
 8012524:	db05      	blt.n	8012532 <_printf_float+0x1a2>
 8012526:	6823      	ldr	r3, [r4, #0]
 8012528:	6121      	str	r1, [r4, #16]
 801252a:	07d8      	lsls	r0, r3, #31
 801252c:	d5ea      	bpl.n	8012504 <_printf_float+0x174>
 801252e:	1c4b      	adds	r3, r1, #1
 8012530:	e7e7      	b.n	8012502 <_printf_float+0x172>
 8012532:	2900      	cmp	r1, #0
 8012534:	bfd4      	ite	le
 8012536:	f1c1 0202 	rsble	r2, r1, #2
 801253a:	2201      	movgt	r2, #1
 801253c:	4413      	add	r3, r2
 801253e:	e7e0      	b.n	8012502 <_printf_float+0x172>
 8012540:	6823      	ldr	r3, [r4, #0]
 8012542:	055a      	lsls	r2, r3, #21
 8012544:	d407      	bmi.n	8012556 <_printf_float+0x1c6>
 8012546:	6923      	ldr	r3, [r4, #16]
 8012548:	4642      	mov	r2, r8
 801254a:	4631      	mov	r1, r6
 801254c:	4628      	mov	r0, r5
 801254e:	47b8      	blx	r7
 8012550:	3001      	adds	r0, #1
 8012552:	d12a      	bne.n	80125aa <_printf_float+0x21a>
 8012554:	e76a      	b.n	801242c <_printf_float+0x9c>
 8012556:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801255a:	f240 80e2 	bls.w	8012722 <_printf_float+0x392>
 801255e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256a:	d133      	bne.n	80125d4 <_printf_float+0x244>
 801256c:	4a38      	ldr	r2, [pc, #224]	; (8012650 <_printf_float+0x2c0>)
 801256e:	2301      	movs	r3, #1
 8012570:	4631      	mov	r1, r6
 8012572:	4628      	mov	r0, r5
 8012574:	47b8      	blx	r7
 8012576:	3001      	adds	r0, #1
 8012578:	f43f af58 	beq.w	801242c <_printf_float+0x9c>
 801257c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012580:	429a      	cmp	r2, r3
 8012582:	db02      	blt.n	801258a <_printf_float+0x1fa>
 8012584:	6823      	ldr	r3, [r4, #0]
 8012586:	07d8      	lsls	r0, r3, #31
 8012588:	d50f      	bpl.n	80125aa <_printf_float+0x21a>
 801258a:	4653      	mov	r3, sl
 801258c:	465a      	mov	r2, fp
 801258e:	4631      	mov	r1, r6
 8012590:	4628      	mov	r0, r5
 8012592:	47b8      	blx	r7
 8012594:	3001      	adds	r0, #1
 8012596:	f43f af49 	beq.w	801242c <_printf_float+0x9c>
 801259a:	f04f 0800 	mov.w	r8, #0
 801259e:	f104 091a 	add.w	r9, r4, #26
 80125a2:	9b08      	ldr	r3, [sp, #32]
 80125a4:	3b01      	subs	r3, #1
 80125a6:	4543      	cmp	r3, r8
 80125a8:	dc09      	bgt.n	80125be <_printf_float+0x22e>
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	079b      	lsls	r3, r3, #30
 80125ae:	f100 8108 	bmi.w	80127c2 <_printf_float+0x432>
 80125b2:	68e0      	ldr	r0, [r4, #12]
 80125b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b6:	4298      	cmp	r0, r3
 80125b8:	bfb8      	it	lt
 80125ba:	4618      	movlt	r0, r3
 80125bc:	e738      	b.n	8012430 <_printf_float+0xa0>
 80125be:	2301      	movs	r3, #1
 80125c0:	464a      	mov	r2, r9
 80125c2:	4631      	mov	r1, r6
 80125c4:	4628      	mov	r0, r5
 80125c6:	47b8      	blx	r7
 80125c8:	3001      	adds	r0, #1
 80125ca:	f43f af2f 	beq.w	801242c <_printf_float+0x9c>
 80125ce:	f108 0801 	add.w	r8, r8, #1
 80125d2:	e7e6      	b.n	80125a2 <_printf_float+0x212>
 80125d4:	9b07      	ldr	r3, [sp, #28]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	dc3c      	bgt.n	8012654 <_printf_float+0x2c4>
 80125da:	4a1d      	ldr	r2, [pc, #116]	; (8012650 <_printf_float+0x2c0>)
 80125dc:	2301      	movs	r3, #1
 80125de:	4631      	mov	r1, r6
 80125e0:	4628      	mov	r0, r5
 80125e2:	47b8      	blx	r7
 80125e4:	3001      	adds	r0, #1
 80125e6:	f43f af21 	beq.w	801242c <_printf_float+0x9c>
 80125ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80125ee:	4313      	orrs	r3, r2
 80125f0:	d102      	bne.n	80125f8 <_printf_float+0x268>
 80125f2:	6823      	ldr	r3, [r4, #0]
 80125f4:	07d9      	lsls	r1, r3, #31
 80125f6:	d5d8      	bpl.n	80125aa <_printf_float+0x21a>
 80125f8:	4653      	mov	r3, sl
 80125fa:	465a      	mov	r2, fp
 80125fc:	4631      	mov	r1, r6
 80125fe:	4628      	mov	r0, r5
 8012600:	47b8      	blx	r7
 8012602:	3001      	adds	r0, #1
 8012604:	f43f af12 	beq.w	801242c <_printf_float+0x9c>
 8012608:	f04f 0900 	mov.w	r9, #0
 801260c:	f104 0a1a 	add.w	sl, r4, #26
 8012610:	9b07      	ldr	r3, [sp, #28]
 8012612:	425b      	negs	r3, r3
 8012614:	454b      	cmp	r3, r9
 8012616:	dc01      	bgt.n	801261c <_printf_float+0x28c>
 8012618:	9b08      	ldr	r3, [sp, #32]
 801261a:	e795      	b.n	8012548 <_printf_float+0x1b8>
 801261c:	2301      	movs	r3, #1
 801261e:	4652      	mov	r2, sl
 8012620:	4631      	mov	r1, r6
 8012622:	4628      	mov	r0, r5
 8012624:	47b8      	blx	r7
 8012626:	3001      	adds	r0, #1
 8012628:	f43f af00 	beq.w	801242c <_printf_float+0x9c>
 801262c:	f109 0901 	add.w	r9, r9, #1
 8012630:	e7ee      	b.n	8012610 <_printf_float+0x280>
 8012632:	bf00      	nop
 8012634:	f3af 8000 	nop.w
 8012638:	ffffffff 	.word	0xffffffff
 801263c:	7fefffff 	.word	0x7fefffff
 8012640:	080196b5 	.word	0x080196b5
 8012644:	080196b9 	.word	0x080196b9
 8012648:	080196c1 	.word	0x080196c1
 801264c:	080196bd 	.word	0x080196bd
 8012650:	080196c5 	.word	0x080196c5
 8012654:	9a08      	ldr	r2, [sp, #32]
 8012656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012658:	429a      	cmp	r2, r3
 801265a:	bfa8      	it	ge
 801265c:	461a      	movge	r2, r3
 801265e:	2a00      	cmp	r2, #0
 8012660:	4691      	mov	r9, r2
 8012662:	dc38      	bgt.n	80126d6 <_printf_float+0x346>
 8012664:	2300      	movs	r3, #0
 8012666:	9305      	str	r3, [sp, #20]
 8012668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801266c:	f104 021a 	add.w	r2, r4, #26
 8012670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012672:	9905      	ldr	r1, [sp, #20]
 8012674:	9304      	str	r3, [sp, #16]
 8012676:	eba3 0309 	sub.w	r3, r3, r9
 801267a:	428b      	cmp	r3, r1
 801267c:	dc33      	bgt.n	80126e6 <_printf_float+0x356>
 801267e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012682:	429a      	cmp	r2, r3
 8012684:	db3c      	blt.n	8012700 <_printf_float+0x370>
 8012686:	6823      	ldr	r3, [r4, #0]
 8012688:	07da      	lsls	r2, r3, #31
 801268a:	d439      	bmi.n	8012700 <_printf_float+0x370>
 801268c:	9b08      	ldr	r3, [sp, #32]
 801268e:	9a04      	ldr	r2, [sp, #16]
 8012690:	9907      	ldr	r1, [sp, #28]
 8012692:	1a9a      	subs	r2, r3, r2
 8012694:	eba3 0901 	sub.w	r9, r3, r1
 8012698:	4591      	cmp	r9, r2
 801269a:	bfa8      	it	ge
 801269c:	4691      	movge	r9, r2
 801269e:	f1b9 0f00 	cmp.w	r9, #0
 80126a2:	dc35      	bgt.n	8012710 <_printf_float+0x380>
 80126a4:	f04f 0800 	mov.w	r8, #0
 80126a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126ac:	f104 0a1a 	add.w	sl, r4, #26
 80126b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80126b4:	1a9b      	subs	r3, r3, r2
 80126b6:	eba3 0309 	sub.w	r3, r3, r9
 80126ba:	4543      	cmp	r3, r8
 80126bc:	f77f af75 	ble.w	80125aa <_printf_float+0x21a>
 80126c0:	2301      	movs	r3, #1
 80126c2:	4652      	mov	r2, sl
 80126c4:	4631      	mov	r1, r6
 80126c6:	4628      	mov	r0, r5
 80126c8:	47b8      	blx	r7
 80126ca:	3001      	adds	r0, #1
 80126cc:	f43f aeae 	beq.w	801242c <_printf_float+0x9c>
 80126d0:	f108 0801 	add.w	r8, r8, #1
 80126d4:	e7ec      	b.n	80126b0 <_printf_float+0x320>
 80126d6:	4613      	mov	r3, r2
 80126d8:	4631      	mov	r1, r6
 80126da:	4642      	mov	r2, r8
 80126dc:	4628      	mov	r0, r5
 80126de:	47b8      	blx	r7
 80126e0:	3001      	adds	r0, #1
 80126e2:	d1bf      	bne.n	8012664 <_printf_float+0x2d4>
 80126e4:	e6a2      	b.n	801242c <_printf_float+0x9c>
 80126e6:	2301      	movs	r3, #1
 80126e8:	4631      	mov	r1, r6
 80126ea:	4628      	mov	r0, r5
 80126ec:	9204      	str	r2, [sp, #16]
 80126ee:	47b8      	blx	r7
 80126f0:	3001      	adds	r0, #1
 80126f2:	f43f ae9b 	beq.w	801242c <_printf_float+0x9c>
 80126f6:	9b05      	ldr	r3, [sp, #20]
 80126f8:	9a04      	ldr	r2, [sp, #16]
 80126fa:	3301      	adds	r3, #1
 80126fc:	9305      	str	r3, [sp, #20]
 80126fe:	e7b7      	b.n	8012670 <_printf_float+0x2e0>
 8012700:	4653      	mov	r3, sl
 8012702:	465a      	mov	r2, fp
 8012704:	4631      	mov	r1, r6
 8012706:	4628      	mov	r0, r5
 8012708:	47b8      	blx	r7
 801270a:	3001      	adds	r0, #1
 801270c:	d1be      	bne.n	801268c <_printf_float+0x2fc>
 801270e:	e68d      	b.n	801242c <_printf_float+0x9c>
 8012710:	9a04      	ldr	r2, [sp, #16]
 8012712:	464b      	mov	r3, r9
 8012714:	4442      	add	r2, r8
 8012716:	4631      	mov	r1, r6
 8012718:	4628      	mov	r0, r5
 801271a:	47b8      	blx	r7
 801271c:	3001      	adds	r0, #1
 801271e:	d1c1      	bne.n	80126a4 <_printf_float+0x314>
 8012720:	e684      	b.n	801242c <_printf_float+0x9c>
 8012722:	9a08      	ldr	r2, [sp, #32]
 8012724:	2a01      	cmp	r2, #1
 8012726:	dc01      	bgt.n	801272c <_printf_float+0x39c>
 8012728:	07db      	lsls	r3, r3, #31
 801272a:	d537      	bpl.n	801279c <_printf_float+0x40c>
 801272c:	2301      	movs	r3, #1
 801272e:	4642      	mov	r2, r8
 8012730:	4631      	mov	r1, r6
 8012732:	4628      	mov	r0, r5
 8012734:	47b8      	blx	r7
 8012736:	3001      	adds	r0, #1
 8012738:	f43f ae78 	beq.w	801242c <_printf_float+0x9c>
 801273c:	4653      	mov	r3, sl
 801273e:	465a      	mov	r2, fp
 8012740:	4631      	mov	r1, r6
 8012742:	4628      	mov	r0, r5
 8012744:	47b8      	blx	r7
 8012746:	3001      	adds	r0, #1
 8012748:	f43f ae70 	beq.w	801242c <_printf_float+0x9c>
 801274c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012750:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012758:	d01b      	beq.n	8012792 <_printf_float+0x402>
 801275a:	9b08      	ldr	r3, [sp, #32]
 801275c:	f108 0201 	add.w	r2, r8, #1
 8012760:	3b01      	subs	r3, #1
 8012762:	4631      	mov	r1, r6
 8012764:	4628      	mov	r0, r5
 8012766:	47b8      	blx	r7
 8012768:	3001      	adds	r0, #1
 801276a:	d10e      	bne.n	801278a <_printf_float+0x3fa>
 801276c:	e65e      	b.n	801242c <_printf_float+0x9c>
 801276e:	2301      	movs	r3, #1
 8012770:	464a      	mov	r2, r9
 8012772:	4631      	mov	r1, r6
 8012774:	4628      	mov	r0, r5
 8012776:	47b8      	blx	r7
 8012778:	3001      	adds	r0, #1
 801277a:	f43f ae57 	beq.w	801242c <_printf_float+0x9c>
 801277e:	f108 0801 	add.w	r8, r8, #1
 8012782:	9b08      	ldr	r3, [sp, #32]
 8012784:	3b01      	subs	r3, #1
 8012786:	4543      	cmp	r3, r8
 8012788:	dcf1      	bgt.n	801276e <_printf_float+0x3de>
 801278a:	9b04      	ldr	r3, [sp, #16]
 801278c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012790:	e6db      	b.n	801254a <_printf_float+0x1ba>
 8012792:	f04f 0800 	mov.w	r8, #0
 8012796:	f104 091a 	add.w	r9, r4, #26
 801279a:	e7f2      	b.n	8012782 <_printf_float+0x3f2>
 801279c:	2301      	movs	r3, #1
 801279e:	4642      	mov	r2, r8
 80127a0:	e7df      	b.n	8012762 <_printf_float+0x3d2>
 80127a2:	2301      	movs	r3, #1
 80127a4:	464a      	mov	r2, r9
 80127a6:	4631      	mov	r1, r6
 80127a8:	4628      	mov	r0, r5
 80127aa:	47b8      	blx	r7
 80127ac:	3001      	adds	r0, #1
 80127ae:	f43f ae3d 	beq.w	801242c <_printf_float+0x9c>
 80127b2:	f108 0801 	add.w	r8, r8, #1
 80127b6:	68e3      	ldr	r3, [r4, #12]
 80127b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127ba:	1a5b      	subs	r3, r3, r1
 80127bc:	4543      	cmp	r3, r8
 80127be:	dcf0      	bgt.n	80127a2 <_printf_float+0x412>
 80127c0:	e6f7      	b.n	80125b2 <_printf_float+0x222>
 80127c2:	f04f 0800 	mov.w	r8, #0
 80127c6:	f104 0919 	add.w	r9, r4, #25
 80127ca:	e7f4      	b.n	80127b6 <_printf_float+0x426>

080127cc <_printf_common>:
 80127cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127d0:	4616      	mov	r6, r2
 80127d2:	4699      	mov	r9, r3
 80127d4:	688a      	ldr	r2, [r1, #8]
 80127d6:	690b      	ldr	r3, [r1, #16]
 80127d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127dc:	4293      	cmp	r3, r2
 80127de:	bfb8      	it	lt
 80127e0:	4613      	movlt	r3, r2
 80127e2:	6033      	str	r3, [r6, #0]
 80127e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127e8:	4607      	mov	r7, r0
 80127ea:	460c      	mov	r4, r1
 80127ec:	b10a      	cbz	r2, 80127f2 <_printf_common+0x26>
 80127ee:	3301      	adds	r3, #1
 80127f0:	6033      	str	r3, [r6, #0]
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	0699      	lsls	r1, r3, #26
 80127f6:	bf42      	ittt	mi
 80127f8:	6833      	ldrmi	r3, [r6, #0]
 80127fa:	3302      	addmi	r3, #2
 80127fc:	6033      	strmi	r3, [r6, #0]
 80127fe:	6825      	ldr	r5, [r4, #0]
 8012800:	f015 0506 	ands.w	r5, r5, #6
 8012804:	d106      	bne.n	8012814 <_printf_common+0x48>
 8012806:	f104 0a19 	add.w	sl, r4, #25
 801280a:	68e3      	ldr	r3, [r4, #12]
 801280c:	6832      	ldr	r2, [r6, #0]
 801280e:	1a9b      	subs	r3, r3, r2
 8012810:	42ab      	cmp	r3, r5
 8012812:	dc26      	bgt.n	8012862 <_printf_common+0x96>
 8012814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012818:	1e13      	subs	r3, r2, #0
 801281a:	6822      	ldr	r2, [r4, #0]
 801281c:	bf18      	it	ne
 801281e:	2301      	movne	r3, #1
 8012820:	0692      	lsls	r2, r2, #26
 8012822:	d42b      	bmi.n	801287c <_printf_common+0xb0>
 8012824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012828:	4649      	mov	r1, r9
 801282a:	4638      	mov	r0, r7
 801282c:	47c0      	blx	r8
 801282e:	3001      	adds	r0, #1
 8012830:	d01e      	beq.n	8012870 <_printf_common+0xa4>
 8012832:	6823      	ldr	r3, [r4, #0]
 8012834:	68e5      	ldr	r5, [r4, #12]
 8012836:	6832      	ldr	r2, [r6, #0]
 8012838:	f003 0306 	and.w	r3, r3, #6
 801283c:	2b04      	cmp	r3, #4
 801283e:	bf08      	it	eq
 8012840:	1aad      	subeq	r5, r5, r2
 8012842:	68a3      	ldr	r3, [r4, #8]
 8012844:	6922      	ldr	r2, [r4, #16]
 8012846:	bf0c      	ite	eq
 8012848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801284c:	2500      	movne	r5, #0
 801284e:	4293      	cmp	r3, r2
 8012850:	bfc4      	itt	gt
 8012852:	1a9b      	subgt	r3, r3, r2
 8012854:	18ed      	addgt	r5, r5, r3
 8012856:	2600      	movs	r6, #0
 8012858:	341a      	adds	r4, #26
 801285a:	42b5      	cmp	r5, r6
 801285c:	d11a      	bne.n	8012894 <_printf_common+0xc8>
 801285e:	2000      	movs	r0, #0
 8012860:	e008      	b.n	8012874 <_printf_common+0xa8>
 8012862:	2301      	movs	r3, #1
 8012864:	4652      	mov	r2, sl
 8012866:	4649      	mov	r1, r9
 8012868:	4638      	mov	r0, r7
 801286a:	47c0      	blx	r8
 801286c:	3001      	adds	r0, #1
 801286e:	d103      	bne.n	8012878 <_printf_common+0xac>
 8012870:	f04f 30ff 	mov.w	r0, #4294967295
 8012874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012878:	3501      	adds	r5, #1
 801287a:	e7c6      	b.n	801280a <_printf_common+0x3e>
 801287c:	18e1      	adds	r1, r4, r3
 801287e:	1c5a      	adds	r2, r3, #1
 8012880:	2030      	movs	r0, #48	; 0x30
 8012882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012886:	4422      	add	r2, r4
 8012888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801288c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012890:	3302      	adds	r3, #2
 8012892:	e7c7      	b.n	8012824 <_printf_common+0x58>
 8012894:	2301      	movs	r3, #1
 8012896:	4622      	mov	r2, r4
 8012898:	4649      	mov	r1, r9
 801289a:	4638      	mov	r0, r7
 801289c:	47c0      	blx	r8
 801289e:	3001      	adds	r0, #1
 80128a0:	d0e6      	beq.n	8012870 <_printf_common+0xa4>
 80128a2:	3601      	adds	r6, #1
 80128a4:	e7d9      	b.n	801285a <_printf_common+0x8e>
	...

080128a8 <_printf_i>:
 80128a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128ac:	7e0f      	ldrb	r7, [r1, #24]
 80128ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128b0:	2f78      	cmp	r7, #120	; 0x78
 80128b2:	4691      	mov	r9, r2
 80128b4:	4680      	mov	r8, r0
 80128b6:	460c      	mov	r4, r1
 80128b8:	469a      	mov	sl, r3
 80128ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80128be:	d807      	bhi.n	80128d0 <_printf_i+0x28>
 80128c0:	2f62      	cmp	r7, #98	; 0x62
 80128c2:	d80a      	bhi.n	80128da <_printf_i+0x32>
 80128c4:	2f00      	cmp	r7, #0
 80128c6:	f000 80d8 	beq.w	8012a7a <_printf_i+0x1d2>
 80128ca:	2f58      	cmp	r7, #88	; 0x58
 80128cc:	f000 80a3 	beq.w	8012a16 <_printf_i+0x16e>
 80128d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80128d8:	e03a      	b.n	8012950 <_printf_i+0xa8>
 80128da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80128de:	2b15      	cmp	r3, #21
 80128e0:	d8f6      	bhi.n	80128d0 <_printf_i+0x28>
 80128e2:	a101      	add	r1, pc, #4	; (adr r1, 80128e8 <_printf_i+0x40>)
 80128e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80128e8:	08012941 	.word	0x08012941
 80128ec:	08012955 	.word	0x08012955
 80128f0:	080128d1 	.word	0x080128d1
 80128f4:	080128d1 	.word	0x080128d1
 80128f8:	080128d1 	.word	0x080128d1
 80128fc:	080128d1 	.word	0x080128d1
 8012900:	08012955 	.word	0x08012955
 8012904:	080128d1 	.word	0x080128d1
 8012908:	080128d1 	.word	0x080128d1
 801290c:	080128d1 	.word	0x080128d1
 8012910:	080128d1 	.word	0x080128d1
 8012914:	08012a61 	.word	0x08012a61
 8012918:	08012985 	.word	0x08012985
 801291c:	08012a43 	.word	0x08012a43
 8012920:	080128d1 	.word	0x080128d1
 8012924:	080128d1 	.word	0x080128d1
 8012928:	08012a83 	.word	0x08012a83
 801292c:	080128d1 	.word	0x080128d1
 8012930:	08012985 	.word	0x08012985
 8012934:	080128d1 	.word	0x080128d1
 8012938:	080128d1 	.word	0x080128d1
 801293c:	08012a4b 	.word	0x08012a4b
 8012940:	682b      	ldr	r3, [r5, #0]
 8012942:	1d1a      	adds	r2, r3, #4
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	602a      	str	r2, [r5, #0]
 8012948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801294c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012950:	2301      	movs	r3, #1
 8012952:	e0a3      	b.n	8012a9c <_printf_i+0x1f4>
 8012954:	6820      	ldr	r0, [r4, #0]
 8012956:	6829      	ldr	r1, [r5, #0]
 8012958:	0606      	lsls	r6, r0, #24
 801295a:	f101 0304 	add.w	r3, r1, #4
 801295e:	d50a      	bpl.n	8012976 <_printf_i+0xce>
 8012960:	680e      	ldr	r6, [r1, #0]
 8012962:	602b      	str	r3, [r5, #0]
 8012964:	2e00      	cmp	r6, #0
 8012966:	da03      	bge.n	8012970 <_printf_i+0xc8>
 8012968:	232d      	movs	r3, #45	; 0x2d
 801296a:	4276      	negs	r6, r6
 801296c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012970:	485e      	ldr	r0, [pc, #376]	; (8012aec <_printf_i+0x244>)
 8012972:	230a      	movs	r3, #10
 8012974:	e019      	b.n	80129aa <_printf_i+0x102>
 8012976:	680e      	ldr	r6, [r1, #0]
 8012978:	602b      	str	r3, [r5, #0]
 801297a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801297e:	bf18      	it	ne
 8012980:	b236      	sxthne	r6, r6
 8012982:	e7ef      	b.n	8012964 <_printf_i+0xbc>
 8012984:	682b      	ldr	r3, [r5, #0]
 8012986:	6820      	ldr	r0, [r4, #0]
 8012988:	1d19      	adds	r1, r3, #4
 801298a:	6029      	str	r1, [r5, #0]
 801298c:	0601      	lsls	r1, r0, #24
 801298e:	d501      	bpl.n	8012994 <_printf_i+0xec>
 8012990:	681e      	ldr	r6, [r3, #0]
 8012992:	e002      	b.n	801299a <_printf_i+0xf2>
 8012994:	0646      	lsls	r6, r0, #25
 8012996:	d5fb      	bpl.n	8012990 <_printf_i+0xe8>
 8012998:	881e      	ldrh	r6, [r3, #0]
 801299a:	4854      	ldr	r0, [pc, #336]	; (8012aec <_printf_i+0x244>)
 801299c:	2f6f      	cmp	r7, #111	; 0x6f
 801299e:	bf0c      	ite	eq
 80129a0:	2308      	moveq	r3, #8
 80129a2:	230a      	movne	r3, #10
 80129a4:	2100      	movs	r1, #0
 80129a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129aa:	6865      	ldr	r5, [r4, #4]
 80129ac:	60a5      	str	r5, [r4, #8]
 80129ae:	2d00      	cmp	r5, #0
 80129b0:	bfa2      	ittt	ge
 80129b2:	6821      	ldrge	r1, [r4, #0]
 80129b4:	f021 0104 	bicge.w	r1, r1, #4
 80129b8:	6021      	strge	r1, [r4, #0]
 80129ba:	b90e      	cbnz	r6, 80129c0 <_printf_i+0x118>
 80129bc:	2d00      	cmp	r5, #0
 80129be:	d04d      	beq.n	8012a5c <_printf_i+0x1b4>
 80129c0:	4615      	mov	r5, r2
 80129c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80129c6:	fb03 6711 	mls	r7, r3, r1, r6
 80129ca:	5dc7      	ldrb	r7, [r0, r7]
 80129cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80129d0:	4637      	mov	r7, r6
 80129d2:	42bb      	cmp	r3, r7
 80129d4:	460e      	mov	r6, r1
 80129d6:	d9f4      	bls.n	80129c2 <_printf_i+0x11a>
 80129d8:	2b08      	cmp	r3, #8
 80129da:	d10b      	bne.n	80129f4 <_printf_i+0x14c>
 80129dc:	6823      	ldr	r3, [r4, #0]
 80129de:	07de      	lsls	r6, r3, #31
 80129e0:	d508      	bpl.n	80129f4 <_printf_i+0x14c>
 80129e2:	6923      	ldr	r3, [r4, #16]
 80129e4:	6861      	ldr	r1, [r4, #4]
 80129e6:	4299      	cmp	r1, r3
 80129e8:	bfde      	ittt	le
 80129ea:	2330      	movle	r3, #48	; 0x30
 80129ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80129f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80129f4:	1b52      	subs	r2, r2, r5
 80129f6:	6122      	str	r2, [r4, #16]
 80129f8:	f8cd a000 	str.w	sl, [sp]
 80129fc:	464b      	mov	r3, r9
 80129fe:	aa03      	add	r2, sp, #12
 8012a00:	4621      	mov	r1, r4
 8012a02:	4640      	mov	r0, r8
 8012a04:	f7ff fee2 	bl	80127cc <_printf_common>
 8012a08:	3001      	adds	r0, #1
 8012a0a:	d14c      	bne.n	8012aa6 <_printf_i+0x1fe>
 8012a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a10:	b004      	add	sp, #16
 8012a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a16:	4835      	ldr	r0, [pc, #212]	; (8012aec <_printf_i+0x244>)
 8012a18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012a1c:	6829      	ldr	r1, [r5, #0]
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	f851 6b04 	ldr.w	r6, [r1], #4
 8012a24:	6029      	str	r1, [r5, #0]
 8012a26:	061d      	lsls	r5, r3, #24
 8012a28:	d514      	bpl.n	8012a54 <_printf_i+0x1ac>
 8012a2a:	07df      	lsls	r7, r3, #31
 8012a2c:	bf44      	itt	mi
 8012a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8012a32:	6023      	strmi	r3, [r4, #0]
 8012a34:	b91e      	cbnz	r6, 8012a3e <_printf_i+0x196>
 8012a36:	6823      	ldr	r3, [r4, #0]
 8012a38:	f023 0320 	bic.w	r3, r3, #32
 8012a3c:	6023      	str	r3, [r4, #0]
 8012a3e:	2310      	movs	r3, #16
 8012a40:	e7b0      	b.n	80129a4 <_printf_i+0xfc>
 8012a42:	6823      	ldr	r3, [r4, #0]
 8012a44:	f043 0320 	orr.w	r3, r3, #32
 8012a48:	6023      	str	r3, [r4, #0]
 8012a4a:	2378      	movs	r3, #120	; 0x78
 8012a4c:	4828      	ldr	r0, [pc, #160]	; (8012af0 <_printf_i+0x248>)
 8012a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a52:	e7e3      	b.n	8012a1c <_printf_i+0x174>
 8012a54:	0659      	lsls	r1, r3, #25
 8012a56:	bf48      	it	mi
 8012a58:	b2b6      	uxthmi	r6, r6
 8012a5a:	e7e6      	b.n	8012a2a <_printf_i+0x182>
 8012a5c:	4615      	mov	r5, r2
 8012a5e:	e7bb      	b.n	80129d8 <_printf_i+0x130>
 8012a60:	682b      	ldr	r3, [r5, #0]
 8012a62:	6826      	ldr	r6, [r4, #0]
 8012a64:	6961      	ldr	r1, [r4, #20]
 8012a66:	1d18      	adds	r0, r3, #4
 8012a68:	6028      	str	r0, [r5, #0]
 8012a6a:	0635      	lsls	r5, r6, #24
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	d501      	bpl.n	8012a74 <_printf_i+0x1cc>
 8012a70:	6019      	str	r1, [r3, #0]
 8012a72:	e002      	b.n	8012a7a <_printf_i+0x1d2>
 8012a74:	0670      	lsls	r0, r6, #25
 8012a76:	d5fb      	bpl.n	8012a70 <_printf_i+0x1c8>
 8012a78:	8019      	strh	r1, [r3, #0]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	6123      	str	r3, [r4, #16]
 8012a7e:	4615      	mov	r5, r2
 8012a80:	e7ba      	b.n	80129f8 <_printf_i+0x150>
 8012a82:	682b      	ldr	r3, [r5, #0]
 8012a84:	1d1a      	adds	r2, r3, #4
 8012a86:	602a      	str	r2, [r5, #0]
 8012a88:	681d      	ldr	r5, [r3, #0]
 8012a8a:	6862      	ldr	r2, [r4, #4]
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f7ed fc8e 	bl	80003b0 <memchr>
 8012a94:	b108      	cbz	r0, 8012a9a <_printf_i+0x1f2>
 8012a96:	1b40      	subs	r0, r0, r5
 8012a98:	6060      	str	r0, [r4, #4]
 8012a9a:	6863      	ldr	r3, [r4, #4]
 8012a9c:	6123      	str	r3, [r4, #16]
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012aa4:	e7a8      	b.n	80129f8 <_printf_i+0x150>
 8012aa6:	6923      	ldr	r3, [r4, #16]
 8012aa8:	462a      	mov	r2, r5
 8012aaa:	4649      	mov	r1, r9
 8012aac:	4640      	mov	r0, r8
 8012aae:	47d0      	blx	sl
 8012ab0:	3001      	adds	r0, #1
 8012ab2:	d0ab      	beq.n	8012a0c <_printf_i+0x164>
 8012ab4:	6823      	ldr	r3, [r4, #0]
 8012ab6:	079b      	lsls	r3, r3, #30
 8012ab8:	d413      	bmi.n	8012ae2 <_printf_i+0x23a>
 8012aba:	68e0      	ldr	r0, [r4, #12]
 8012abc:	9b03      	ldr	r3, [sp, #12]
 8012abe:	4298      	cmp	r0, r3
 8012ac0:	bfb8      	it	lt
 8012ac2:	4618      	movlt	r0, r3
 8012ac4:	e7a4      	b.n	8012a10 <_printf_i+0x168>
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	4632      	mov	r2, r6
 8012aca:	4649      	mov	r1, r9
 8012acc:	4640      	mov	r0, r8
 8012ace:	47d0      	blx	sl
 8012ad0:	3001      	adds	r0, #1
 8012ad2:	d09b      	beq.n	8012a0c <_printf_i+0x164>
 8012ad4:	3501      	adds	r5, #1
 8012ad6:	68e3      	ldr	r3, [r4, #12]
 8012ad8:	9903      	ldr	r1, [sp, #12]
 8012ada:	1a5b      	subs	r3, r3, r1
 8012adc:	42ab      	cmp	r3, r5
 8012ade:	dcf2      	bgt.n	8012ac6 <_printf_i+0x21e>
 8012ae0:	e7eb      	b.n	8012aba <_printf_i+0x212>
 8012ae2:	2500      	movs	r5, #0
 8012ae4:	f104 0619 	add.w	r6, r4, #25
 8012ae8:	e7f5      	b.n	8012ad6 <_printf_i+0x22e>
 8012aea:	bf00      	nop
 8012aec:	080196c7 	.word	0x080196c7
 8012af0:	080196d8 	.word	0x080196d8

08012af4 <rand>:
 8012af4:	4b16      	ldr	r3, [pc, #88]	; (8012b50 <rand+0x5c>)
 8012af6:	b510      	push	{r4, lr}
 8012af8:	681c      	ldr	r4, [r3, #0]
 8012afa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012afc:	b9b3      	cbnz	r3, 8012b2c <rand+0x38>
 8012afe:	2018      	movs	r0, #24
 8012b00:	f001 fa3c 	bl	8013f7c <malloc>
 8012b04:	63a0      	str	r0, [r4, #56]	; 0x38
 8012b06:	b928      	cbnz	r0, 8012b14 <rand+0x20>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	4b12      	ldr	r3, [pc, #72]	; (8012b54 <rand+0x60>)
 8012b0c:	4812      	ldr	r0, [pc, #72]	; (8012b58 <rand+0x64>)
 8012b0e:	214e      	movs	r1, #78	; 0x4e
 8012b10:	f7ff f9e0 	bl	8011ed4 <__assert_func>
 8012b14:	4a11      	ldr	r2, [pc, #68]	; (8012b5c <rand+0x68>)
 8012b16:	4b12      	ldr	r3, [pc, #72]	; (8012b60 <rand+0x6c>)
 8012b18:	e9c0 2300 	strd	r2, r3, [r0]
 8012b1c:	4b11      	ldr	r3, [pc, #68]	; (8012b64 <rand+0x70>)
 8012b1e:	6083      	str	r3, [r0, #8]
 8012b20:	230b      	movs	r3, #11
 8012b22:	8183      	strh	r3, [r0, #12]
 8012b24:	2201      	movs	r2, #1
 8012b26:	2300      	movs	r3, #0
 8012b28:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012b2c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012b2e:	4a0e      	ldr	r2, [pc, #56]	; (8012b68 <rand+0x74>)
 8012b30:	6920      	ldr	r0, [r4, #16]
 8012b32:	6963      	ldr	r3, [r4, #20]
 8012b34:	490d      	ldr	r1, [pc, #52]	; (8012b6c <rand+0x78>)
 8012b36:	4342      	muls	r2, r0
 8012b38:	fb01 2203 	mla	r2, r1, r3, r2
 8012b3c:	fba0 0101 	umull	r0, r1, r0, r1
 8012b40:	1c43      	adds	r3, r0, #1
 8012b42:	eb42 0001 	adc.w	r0, r2, r1
 8012b46:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012b4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012b4e:	bd10      	pop	{r4, pc}
 8012b50:	24000354 	.word	0x24000354
 8012b54:	080196e9 	.word	0x080196e9
 8012b58:	08019700 	.word	0x08019700
 8012b5c:	abcd330e 	.word	0xabcd330e
 8012b60:	e66d1234 	.word	0xe66d1234
 8012b64:	0005deec 	.word	0x0005deec
 8012b68:	5851f42d 	.word	0x5851f42d
 8012b6c:	4c957f2d 	.word	0x4c957f2d

08012b70 <siprintf>:
 8012b70:	b40e      	push	{r1, r2, r3}
 8012b72:	b500      	push	{lr}
 8012b74:	b09c      	sub	sp, #112	; 0x70
 8012b76:	ab1d      	add	r3, sp, #116	; 0x74
 8012b78:	9002      	str	r0, [sp, #8]
 8012b7a:	9006      	str	r0, [sp, #24]
 8012b7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b80:	4809      	ldr	r0, [pc, #36]	; (8012ba8 <siprintf+0x38>)
 8012b82:	9107      	str	r1, [sp, #28]
 8012b84:	9104      	str	r1, [sp, #16]
 8012b86:	4909      	ldr	r1, [pc, #36]	; (8012bac <siprintf+0x3c>)
 8012b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b8c:	9105      	str	r1, [sp, #20]
 8012b8e:	6800      	ldr	r0, [r0, #0]
 8012b90:	9301      	str	r3, [sp, #4]
 8012b92:	a902      	add	r1, sp, #8
 8012b94:	f001 ff18 	bl	80149c8 <_svfiprintf_r>
 8012b98:	9b02      	ldr	r3, [sp, #8]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	701a      	strb	r2, [r3, #0]
 8012b9e:	b01c      	add	sp, #112	; 0x70
 8012ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ba4:	b003      	add	sp, #12
 8012ba6:	4770      	bx	lr
 8012ba8:	24000354 	.word	0x24000354
 8012bac:	ffff0208 	.word	0xffff0208

08012bb0 <strcpy>:
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012bb6:	f803 2b01 	strb.w	r2, [r3], #1
 8012bba:	2a00      	cmp	r2, #0
 8012bbc:	d1f9      	bne.n	8012bb2 <strcpy+0x2>
 8012bbe:	4770      	bx	lr

08012bc0 <strcspn>:
 8012bc0:	b570      	push	{r4, r5, r6, lr}
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	461e      	mov	r6, r3
 8012bc6:	f813 4b01 	ldrb.w	r4, [r3], #1
 8012bca:	b144      	cbz	r4, 8012bde <strcspn+0x1e>
 8012bcc:	1e4a      	subs	r2, r1, #1
 8012bce:	e001      	b.n	8012bd4 <strcspn+0x14>
 8012bd0:	42a5      	cmp	r5, r4
 8012bd2:	d004      	beq.n	8012bde <strcspn+0x1e>
 8012bd4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012bd8:	2d00      	cmp	r5, #0
 8012bda:	d1f9      	bne.n	8012bd0 <strcspn+0x10>
 8012bdc:	e7f2      	b.n	8012bc4 <strcspn+0x4>
 8012bde:	1a30      	subs	r0, r6, r0
 8012be0:	bd70      	pop	{r4, r5, r6, pc}
	...

08012be4 <strtok>:
 8012be4:	4b16      	ldr	r3, [pc, #88]	; (8012c40 <strtok+0x5c>)
 8012be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012be8:	681e      	ldr	r6, [r3, #0]
 8012bea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012bec:	4605      	mov	r5, r0
 8012bee:	b9fc      	cbnz	r4, 8012c30 <strtok+0x4c>
 8012bf0:	2050      	movs	r0, #80	; 0x50
 8012bf2:	9101      	str	r1, [sp, #4]
 8012bf4:	f001 f9c2 	bl	8013f7c <malloc>
 8012bf8:	9901      	ldr	r1, [sp, #4]
 8012bfa:	65b0      	str	r0, [r6, #88]	; 0x58
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	b920      	cbnz	r0, 8012c0a <strtok+0x26>
 8012c00:	4b10      	ldr	r3, [pc, #64]	; (8012c44 <strtok+0x60>)
 8012c02:	4811      	ldr	r0, [pc, #68]	; (8012c48 <strtok+0x64>)
 8012c04:	2157      	movs	r1, #87	; 0x57
 8012c06:	f7ff f965 	bl	8011ed4 <__assert_func>
 8012c0a:	e9c0 4400 	strd	r4, r4, [r0]
 8012c0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012c12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012c16:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012c1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012c1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012c22:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012c26:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012c2a:	6184      	str	r4, [r0, #24]
 8012c2c:	7704      	strb	r4, [r0, #28]
 8012c2e:	6244      	str	r4, [r0, #36]	; 0x24
 8012c30:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8012c32:	2301      	movs	r3, #1
 8012c34:	4628      	mov	r0, r5
 8012c36:	b002      	add	sp, #8
 8012c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c3c:	f000 b806 	b.w	8012c4c <__strtok_r>
 8012c40:	24000354 	.word	0x24000354
 8012c44:	080196e9 	.word	0x080196e9
 8012c48:	0801975b 	.word	0x0801975b

08012c4c <__strtok_r>:
 8012c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c4e:	b908      	cbnz	r0, 8012c54 <__strtok_r+0x8>
 8012c50:	6810      	ldr	r0, [r2, #0]
 8012c52:	b188      	cbz	r0, 8012c78 <__strtok_r+0x2c>
 8012c54:	4604      	mov	r4, r0
 8012c56:	4620      	mov	r0, r4
 8012c58:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012c5c:	460f      	mov	r7, r1
 8012c5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012c62:	b91e      	cbnz	r6, 8012c6c <__strtok_r+0x20>
 8012c64:	b965      	cbnz	r5, 8012c80 <__strtok_r+0x34>
 8012c66:	6015      	str	r5, [r2, #0]
 8012c68:	4628      	mov	r0, r5
 8012c6a:	e005      	b.n	8012c78 <__strtok_r+0x2c>
 8012c6c:	42b5      	cmp	r5, r6
 8012c6e:	d1f6      	bne.n	8012c5e <__strtok_r+0x12>
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d1f0      	bne.n	8012c56 <__strtok_r+0xa>
 8012c74:	6014      	str	r4, [r2, #0]
 8012c76:	7003      	strb	r3, [r0, #0]
 8012c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c7a:	461c      	mov	r4, r3
 8012c7c:	e00c      	b.n	8012c98 <__strtok_r+0x4c>
 8012c7e:	b915      	cbnz	r5, 8012c86 <__strtok_r+0x3a>
 8012c80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012c84:	460e      	mov	r6, r1
 8012c86:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012c8a:	42ab      	cmp	r3, r5
 8012c8c:	d1f7      	bne.n	8012c7e <__strtok_r+0x32>
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d0f3      	beq.n	8012c7a <__strtok_r+0x2e>
 8012c92:	2300      	movs	r3, #0
 8012c94:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012c98:	6014      	str	r4, [r2, #0]
 8012c9a:	e7ed      	b.n	8012c78 <__strtok_r+0x2c>

08012c9c <_strtol_l.constprop.0>:
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ca2:	d001      	beq.n	8012ca8 <_strtol_l.constprop.0+0xc>
 8012ca4:	2b24      	cmp	r3, #36	; 0x24
 8012ca6:	d906      	bls.n	8012cb6 <_strtol_l.constprop.0+0x1a>
 8012ca8:	f7ff f936 	bl	8011f18 <__errno>
 8012cac:	2316      	movs	r3, #22
 8012cae:	6003      	str	r3, [r0, #0]
 8012cb0:	2000      	movs	r0, #0
 8012cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012d9c <_strtol_l.constprop.0+0x100>
 8012cba:	460d      	mov	r5, r1
 8012cbc:	462e      	mov	r6, r5
 8012cbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012cc2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012cc6:	f017 0708 	ands.w	r7, r7, #8
 8012cca:	d1f7      	bne.n	8012cbc <_strtol_l.constprop.0+0x20>
 8012ccc:	2c2d      	cmp	r4, #45	; 0x2d
 8012cce:	d132      	bne.n	8012d36 <_strtol_l.constprop.0+0x9a>
 8012cd0:	782c      	ldrb	r4, [r5, #0]
 8012cd2:	2701      	movs	r7, #1
 8012cd4:	1cb5      	adds	r5, r6, #2
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d05b      	beq.n	8012d92 <_strtol_l.constprop.0+0xf6>
 8012cda:	2b10      	cmp	r3, #16
 8012cdc:	d109      	bne.n	8012cf2 <_strtol_l.constprop.0+0x56>
 8012cde:	2c30      	cmp	r4, #48	; 0x30
 8012ce0:	d107      	bne.n	8012cf2 <_strtol_l.constprop.0+0x56>
 8012ce2:	782c      	ldrb	r4, [r5, #0]
 8012ce4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012ce8:	2c58      	cmp	r4, #88	; 0x58
 8012cea:	d14d      	bne.n	8012d88 <_strtol_l.constprop.0+0xec>
 8012cec:	786c      	ldrb	r4, [r5, #1]
 8012cee:	2310      	movs	r3, #16
 8012cf0:	3502      	adds	r5, #2
 8012cf2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012cf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8012cfa:	f04f 0c00 	mov.w	ip, #0
 8012cfe:	fbb8 f9f3 	udiv	r9, r8, r3
 8012d02:	4666      	mov	r6, ip
 8012d04:	fb03 8a19 	mls	sl, r3, r9, r8
 8012d08:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012d0c:	f1be 0f09 	cmp.w	lr, #9
 8012d10:	d816      	bhi.n	8012d40 <_strtol_l.constprop.0+0xa4>
 8012d12:	4674      	mov	r4, lr
 8012d14:	42a3      	cmp	r3, r4
 8012d16:	dd24      	ble.n	8012d62 <_strtol_l.constprop.0+0xc6>
 8012d18:	f1bc 0f00 	cmp.w	ip, #0
 8012d1c:	db1e      	blt.n	8012d5c <_strtol_l.constprop.0+0xc0>
 8012d1e:	45b1      	cmp	r9, r6
 8012d20:	d31c      	bcc.n	8012d5c <_strtol_l.constprop.0+0xc0>
 8012d22:	d101      	bne.n	8012d28 <_strtol_l.constprop.0+0x8c>
 8012d24:	45a2      	cmp	sl, r4
 8012d26:	db19      	blt.n	8012d5c <_strtol_l.constprop.0+0xc0>
 8012d28:	fb06 4603 	mla	r6, r6, r3, r4
 8012d2c:	f04f 0c01 	mov.w	ip, #1
 8012d30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012d34:	e7e8      	b.n	8012d08 <_strtol_l.constprop.0+0x6c>
 8012d36:	2c2b      	cmp	r4, #43	; 0x2b
 8012d38:	bf04      	itt	eq
 8012d3a:	782c      	ldrbeq	r4, [r5, #0]
 8012d3c:	1cb5      	addeq	r5, r6, #2
 8012d3e:	e7ca      	b.n	8012cd6 <_strtol_l.constprop.0+0x3a>
 8012d40:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012d44:	f1be 0f19 	cmp.w	lr, #25
 8012d48:	d801      	bhi.n	8012d4e <_strtol_l.constprop.0+0xb2>
 8012d4a:	3c37      	subs	r4, #55	; 0x37
 8012d4c:	e7e2      	b.n	8012d14 <_strtol_l.constprop.0+0x78>
 8012d4e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012d52:	f1be 0f19 	cmp.w	lr, #25
 8012d56:	d804      	bhi.n	8012d62 <_strtol_l.constprop.0+0xc6>
 8012d58:	3c57      	subs	r4, #87	; 0x57
 8012d5a:	e7db      	b.n	8012d14 <_strtol_l.constprop.0+0x78>
 8012d5c:	f04f 3cff 	mov.w	ip, #4294967295
 8012d60:	e7e6      	b.n	8012d30 <_strtol_l.constprop.0+0x94>
 8012d62:	f1bc 0f00 	cmp.w	ip, #0
 8012d66:	da05      	bge.n	8012d74 <_strtol_l.constprop.0+0xd8>
 8012d68:	2322      	movs	r3, #34	; 0x22
 8012d6a:	6003      	str	r3, [r0, #0]
 8012d6c:	4646      	mov	r6, r8
 8012d6e:	b942      	cbnz	r2, 8012d82 <_strtol_l.constprop.0+0xe6>
 8012d70:	4630      	mov	r0, r6
 8012d72:	e79e      	b.n	8012cb2 <_strtol_l.constprop.0+0x16>
 8012d74:	b107      	cbz	r7, 8012d78 <_strtol_l.constprop.0+0xdc>
 8012d76:	4276      	negs	r6, r6
 8012d78:	2a00      	cmp	r2, #0
 8012d7a:	d0f9      	beq.n	8012d70 <_strtol_l.constprop.0+0xd4>
 8012d7c:	f1bc 0f00 	cmp.w	ip, #0
 8012d80:	d000      	beq.n	8012d84 <_strtol_l.constprop.0+0xe8>
 8012d82:	1e69      	subs	r1, r5, #1
 8012d84:	6011      	str	r1, [r2, #0]
 8012d86:	e7f3      	b.n	8012d70 <_strtol_l.constprop.0+0xd4>
 8012d88:	2430      	movs	r4, #48	; 0x30
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d1b1      	bne.n	8012cf2 <_strtol_l.constprop.0+0x56>
 8012d8e:	2308      	movs	r3, #8
 8012d90:	e7af      	b.n	8012cf2 <_strtol_l.constprop.0+0x56>
 8012d92:	2c30      	cmp	r4, #48	; 0x30
 8012d94:	d0a5      	beq.n	8012ce2 <_strtol_l.constprop.0+0x46>
 8012d96:	230a      	movs	r3, #10
 8012d98:	e7ab      	b.n	8012cf2 <_strtol_l.constprop.0+0x56>
 8012d9a:	bf00      	nop
 8012d9c:	0801959d 	.word	0x0801959d

08012da0 <strtol>:
 8012da0:	4613      	mov	r3, r2
 8012da2:	460a      	mov	r2, r1
 8012da4:	4601      	mov	r1, r0
 8012da6:	4802      	ldr	r0, [pc, #8]	; (8012db0 <strtol+0x10>)
 8012da8:	6800      	ldr	r0, [r0, #0]
 8012daa:	f7ff bf77 	b.w	8012c9c <_strtol_l.constprop.0>
 8012dae:	bf00      	nop
 8012db0:	24000354 	.word	0x24000354

08012db4 <__swbuf_r>:
 8012db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012db6:	460e      	mov	r6, r1
 8012db8:	4614      	mov	r4, r2
 8012dba:	4605      	mov	r5, r0
 8012dbc:	b118      	cbz	r0, 8012dc6 <__swbuf_r+0x12>
 8012dbe:	6983      	ldr	r3, [r0, #24]
 8012dc0:	b90b      	cbnz	r3, 8012dc6 <__swbuf_r+0x12>
 8012dc2:	f000 ffd1 	bl	8013d68 <__sinit>
 8012dc6:	4b21      	ldr	r3, [pc, #132]	; (8012e4c <__swbuf_r+0x98>)
 8012dc8:	429c      	cmp	r4, r3
 8012dca:	d12b      	bne.n	8012e24 <__swbuf_r+0x70>
 8012dcc:	686c      	ldr	r4, [r5, #4]
 8012dce:	69a3      	ldr	r3, [r4, #24]
 8012dd0:	60a3      	str	r3, [r4, #8]
 8012dd2:	89a3      	ldrh	r3, [r4, #12]
 8012dd4:	071a      	lsls	r2, r3, #28
 8012dd6:	d52f      	bpl.n	8012e38 <__swbuf_r+0x84>
 8012dd8:	6923      	ldr	r3, [r4, #16]
 8012dda:	b36b      	cbz	r3, 8012e38 <__swbuf_r+0x84>
 8012ddc:	6923      	ldr	r3, [r4, #16]
 8012dde:	6820      	ldr	r0, [r4, #0]
 8012de0:	1ac0      	subs	r0, r0, r3
 8012de2:	6963      	ldr	r3, [r4, #20]
 8012de4:	b2f6      	uxtb	r6, r6
 8012de6:	4283      	cmp	r3, r0
 8012de8:	4637      	mov	r7, r6
 8012dea:	dc04      	bgt.n	8012df6 <__swbuf_r+0x42>
 8012dec:	4621      	mov	r1, r4
 8012dee:	4628      	mov	r0, r5
 8012df0:	f000 ff26 	bl	8013c40 <_fflush_r>
 8012df4:	bb30      	cbnz	r0, 8012e44 <__swbuf_r+0x90>
 8012df6:	68a3      	ldr	r3, [r4, #8]
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	60a3      	str	r3, [r4, #8]
 8012dfc:	6823      	ldr	r3, [r4, #0]
 8012dfe:	1c5a      	adds	r2, r3, #1
 8012e00:	6022      	str	r2, [r4, #0]
 8012e02:	701e      	strb	r6, [r3, #0]
 8012e04:	6963      	ldr	r3, [r4, #20]
 8012e06:	3001      	adds	r0, #1
 8012e08:	4283      	cmp	r3, r0
 8012e0a:	d004      	beq.n	8012e16 <__swbuf_r+0x62>
 8012e0c:	89a3      	ldrh	r3, [r4, #12]
 8012e0e:	07db      	lsls	r3, r3, #31
 8012e10:	d506      	bpl.n	8012e20 <__swbuf_r+0x6c>
 8012e12:	2e0a      	cmp	r6, #10
 8012e14:	d104      	bne.n	8012e20 <__swbuf_r+0x6c>
 8012e16:	4621      	mov	r1, r4
 8012e18:	4628      	mov	r0, r5
 8012e1a:	f000 ff11 	bl	8013c40 <_fflush_r>
 8012e1e:	b988      	cbnz	r0, 8012e44 <__swbuf_r+0x90>
 8012e20:	4638      	mov	r0, r7
 8012e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e24:	4b0a      	ldr	r3, [pc, #40]	; (8012e50 <__swbuf_r+0x9c>)
 8012e26:	429c      	cmp	r4, r3
 8012e28:	d101      	bne.n	8012e2e <__swbuf_r+0x7a>
 8012e2a:	68ac      	ldr	r4, [r5, #8]
 8012e2c:	e7cf      	b.n	8012dce <__swbuf_r+0x1a>
 8012e2e:	4b09      	ldr	r3, [pc, #36]	; (8012e54 <__swbuf_r+0xa0>)
 8012e30:	429c      	cmp	r4, r3
 8012e32:	bf08      	it	eq
 8012e34:	68ec      	ldreq	r4, [r5, #12]
 8012e36:	e7ca      	b.n	8012dce <__swbuf_r+0x1a>
 8012e38:	4621      	mov	r1, r4
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	f000 f80c 	bl	8012e58 <__swsetup_r>
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d0cb      	beq.n	8012ddc <__swbuf_r+0x28>
 8012e44:	f04f 37ff 	mov.w	r7, #4294967295
 8012e48:	e7ea      	b.n	8012e20 <__swbuf_r+0x6c>
 8012e4a:	bf00      	nop
 8012e4c:	08019854 	.word	0x08019854
 8012e50:	08019874 	.word	0x08019874
 8012e54:	08019834 	.word	0x08019834

08012e58 <__swsetup_r>:
 8012e58:	4b32      	ldr	r3, [pc, #200]	; (8012f24 <__swsetup_r+0xcc>)
 8012e5a:	b570      	push	{r4, r5, r6, lr}
 8012e5c:	681d      	ldr	r5, [r3, #0]
 8012e5e:	4606      	mov	r6, r0
 8012e60:	460c      	mov	r4, r1
 8012e62:	b125      	cbz	r5, 8012e6e <__swsetup_r+0x16>
 8012e64:	69ab      	ldr	r3, [r5, #24]
 8012e66:	b913      	cbnz	r3, 8012e6e <__swsetup_r+0x16>
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f000 ff7d 	bl	8013d68 <__sinit>
 8012e6e:	4b2e      	ldr	r3, [pc, #184]	; (8012f28 <__swsetup_r+0xd0>)
 8012e70:	429c      	cmp	r4, r3
 8012e72:	d10f      	bne.n	8012e94 <__swsetup_r+0x3c>
 8012e74:	686c      	ldr	r4, [r5, #4]
 8012e76:	89a3      	ldrh	r3, [r4, #12]
 8012e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e7c:	0719      	lsls	r1, r3, #28
 8012e7e:	d42c      	bmi.n	8012eda <__swsetup_r+0x82>
 8012e80:	06dd      	lsls	r5, r3, #27
 8012e82:	d411      	bmi.n	8012ea8 <__swsetup_r+0x50>
 8012e84:	2309      	movs	r3, #9
 8012e86:	6033      	str	r3, [r6, #0]
 8012e88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012e8c:	81a3      	strh	r3, [r4, #12]
 8012e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012e92:	e03e      	b.n	8012f12 <__swsetup_r+0xba>
 8012e94:	4b25      	ldr	r3, [pc, #148]	; (8012f2c <__swsetup_r+0xd4>)
 8012e96:	429c      	cmp	r4, r3
 8012e98:	d101      	bne.n	8012e9e <__swsetup_r+0x46>
 8012e9a:	68ac      	ldr	r4, [r5, #8]
 8012e9c:	e7eb      	b.n	8012e76 <__swsetup_r+0x1e>
 8012e9e:	4b24      	ldr	r3, [pc, #144]	; (8012f30 <__swsetup_r+0xd8>)
 8012ea0:	429c      	cmp	r4, r3
 8012ea2:	bf08      	it	eq
 8012ea4:	68ec      	ldreq	r4, [r5, #12]
 8012ea6:	e7e6      	b.n	8012e76 <__swsetup_r+0x1e>
 8012ea8:	0758      	lsls	r0, r3, #29
 8012eaa:	d512      	bpl.n	8012ed2 <__swsetup_r+0x7a>
 8012eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012eae:	b141      	cbz	r1, 8012ec2 <__swsetup_r+0x6a>
 8012eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eb4:	4299      	cmp	r1, r3
 8012eb6:	d002      	beq.n	8012ebe <__swsetup_r+0x66>
 8012eb8:	4630      	mov	r0, r6
 8012eba:	f001 fc1b 	bl	80146f4 <_free_r>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	6363      	str	r3, [r4, #52]	; 0x34
 8012ec2:	89a3      	ldrh	r3, [r4, #12]
 8012ec4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012ec8:	81a3      	strh	r3, [r4, #12]
 8012eca:	2300      	movs	r3, #0
 8012ecc:	6063      	str	r3, [r4, #4]
 8012ece:	6923      	ldr	r3, [r4, #16]
 8012ed0:	6023      	str	r3, [r4, #0]
 8012ed2:	89a3      	ldrh	r3, [r4, #12]
 8012ed4:	f043 0308 	orr.w	r3, r3, #8
 8012ed8:	81a3      	strh	r3, [r4, #12]
 8012eda:	6923      	ldr	r3, [r4, #16]
 8012edc:	b94b      	cbnz	r3, 8012ef2 <__swsetup_r+0x9a>
 8012ede:	89a3      	ldrh	r3, [r4, #12]
 8012ee0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ee8:	d003      	beq.n	8012ef2 <__swsetup_r+0x9a>
 8012eea:	4621      	mov	r1, r4
 8012eec:	4630      	mov	r0, r6
 8012eee:	f001 f805 	bl	8013efc <__smakebuf_r>
 8012ef2:	89a0      	ldrh	r0, [r4, #12]
 8012ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ef8:	f010 0301 	ands.w	r3, r0, #1
 8012efc:	d00a      	beq.n	8012f14 <__swsetup_r+0xbc>
 8012efe:	2300      	movs	r3, #0
 8012f00:	60a3      	str	r3, [r4, #8]
 8012f02:	6963      	ldr	r3, [r4, #20]
 8012f04:	425b      	negs	r3, r3
 8012f06:	61a3      	str	r3, [r4, #24]
 8012f08:	6923      	ldr	r3, [r4, #16]
 8012f0a:	b943      	cbnz	r3, 8012f1e <__swsetup_r+0xc6>
 8012f0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012f10:	d1ba      	bne.n	8012e88 <__swsetup_r+0x30>
 8012f12:	bd70      	pop	{r4, r5, r6, pc}
 8012f14:	0781      	lsls	r1, r0, #30
 8012f16:	bf58      	it	pl
 8012f18:	6963      	ldrpl	r3, [r4, #20]
 8012f1a:	60a3      	str	r3, [r4, #8]
 8012f1c:	e7f4      	b.n	8012f08 <__swsetup_r+0xb0>
 8012f1e:	2000      	movs	r0, #0
 8012f20:	e7f7      	b.n	8012f12 <__swsetup_r+0xba>
 8012f22:	bf00      	nop
 8012f24:	24000354 	.word	0x24000354
 8012f28:	08019854 	.word	0x08019854
 8012f2c:	08019874 	.word	0x08019874
 8012f30:	08019834 	.word	0x08019834

08012f34 <abort>:
 8012f34:	b508      	push	{r3, lr}
 8012f36:	2006      	movs	r0, #6
 8012f38:	f001 fe7e 	bl	8014c38 <raise>
 8012f3c:	2001      	movs	r0, #1
 8012f3e:	f7f3 ff99 	bl	8006e74 <_exit>

08012f42 <quorem>:
 8012f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f46:	6903      	ldr	r3, [r0, #16]
 8012f48:	690c      	ldr	r4, [r1, #16]
 8012f4a:	42a3      	cmp	r3, r4
 8012f4c:	4607      	mov	r7, r0
 8012f4e:	f2c0 8081 	blt.w	8013054 <quorem+0x112>
 8012f52:	3c01      	subs	r4, #1
 8012f54:	f101 0814 	add.w	r8, r1, #20
 8012f58:	f100 0514 	add.w	r5, r0, #20
 8012f5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012f60:	9301      	str	r3, [sp, #4]
 8012f62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012f6a:	3301      	adds	r3, #1
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012f72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012f76:	fbb2 f6f3 	udiv	r6, r2, r3
 8012f7a:	d331      	bcc.n	8012fe0 <quorem+0x9e>
 8012f7c:	f04f 0e00 	mov.w	lr, #0
 8012f80:	4640      	mov	r0, r8
 8012f82:	46ac      	mov	ip, r5
 8012f84:	46f2      	mov	sl, lr
 8012f86:	f850 2b04 	ldr.w	r2, [r0], #4
 8012f8a:	b293      	uxth	r3, r2
 8012f8c:	fb06 e303 	mla	r3, r6, r3, lr
 8012f90:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	ebaa 0303 	sub.w	r3, sl, r3
 8012f9a:	f8dc a000 	ldr.w	sl, [ip]
 8012f9e:	0c12      	lsrs	r2, r2, #16
 8012fa0:	fa13 f38a 	uxtah	r3, r3, sl
 8012fa4:	fb06 e202 	mla	r2, r6, r2, lr
 8012fa8:	9300      	str	r3, [sp, #0]
 8012faa:	9b00      	ldr	r3, [sp, #0]
 8012fac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012fb0:	b292      	uxth	r2, r2
 8012fb2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012fb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012fba:	f8bd 3000 	ldrh.w	r3, [sp]
 8012fbe:	4581      	cmp	r9, r0
 8012fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012fc4:	f84c 3b04 	str.w	r3, [ip], #4
 8012fc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012fcc:	d2db      	bcs.n	8012f86 <quorem+0x44>
 8012fce:	f855 300b 	ldr.w	r3, [r5, fp]
 8012fd2:	b92b      	cbnz	r3, 8012fe0 <quorem+0x9e>
 8012fd4:	9b01      	ldr	r3, [sp, #4]
 8012fd6:	3b04      	subs	r3, #4
 8012fd8:	429d      	cmp	r5, r3
 8012fda:	461a      	mov	r2, r3
 8012fdc:	d32e      	bcc.n	801303c <quorem+0xfa>
 8012fde:	613c      	str	r4, [r7, #16]
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	f001 fa6f 	bl	80144c4 <__mcmp>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	db24      	blt.n	8013034 <quorem+0xf2>
 8012fea:	3601      	adds	r6, #1
 8012fec:	4628      	mov	r0, r5
 8012fee:	f04f 0c00 	mov.w	ip, #0
 8012ff2:	f858 2b04 	ldr.w	r2, [r8], #4
 8012ff6:	f8d0 e000 	ldr.w	lr, [r0]
 8012ffa:	b293      	uxth	r3, r2
 8012ffc:	ebac 0303 	sub.w	r3, ip, r3
 8013000:	0c12      	lsrs	r2, r2, #16
 8013002:	fa13 f38e 	uxtah	r3, r3, lr
 8013006:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801300a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801300e:	b29b      	uxth	r3, r3
 8013010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013014:	45c1      	cmp	r9, r8
 8013016:	f840 3b04 	str.w	r3, [r0], #4
 801301a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801301e:	d2e8      	bcs.n	8012ff2 <quorem+0xb0>
 8013020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013024:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013028:	b922      	cbnz	r2, 8013034 <quorem+0xf2>
 801302a:	3b04      	subs	r3, #4
 801302c:	429d      	cmp	r5, r3
 801302e:	461a      	mov	r2, r3
 8013030:	d30a      	bcc.n	8013048 <quorem+0x106>
 8013032:	613c      	str	r4, [r7, #16]
 8013034:	4630      	mov	r0, r6
 8013036:	b003      	add	sp, #12
 8013038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801303c:	6812      	ldr	r2, [r2, #0]
 801303e:	3b04      	subs	r3, #4
 8013040:	2a00      	cmp	r2, #0
 8013042:	d1cc      	bne.n	8012fde <quorem+0x9c>
 8013044:	3c01      	subs	r4, #1
 8013046:	e7c7      	b.n	8012fd8 <quorem+0x96>
 8013048:	6812      	ldr	r2, [r2, #0]
 801304a:	3b04      	subs	r3, #4
 801304c:	2a00      	cmp	r2, #0
 801304e:	d1f0      	bne.n	8013032 <quorem+0xf0>
 8013050:	3c01      	subs	r4, #1
 8013052:	e7eb      	b.n	801302c <quorem+0xea>
 8013054:	2000      	movs	r0, #0
 8013056:	e7ee      	b.n	8013036 <quorem+0xf4>

08013058 <_dtoa_r>:
 8013058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801305c:	ed2d 8b02 	vpush	{d8}
 8013060:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013062:	b091      	sub	sp, #68	; 0x44
 8013064:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013068:	ec59 8b10 	vmov	r8, r9, d0
 801306c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801306e:	9106      	str	r1, [sp, #24]
 8013070:	4606      	mov	r6, r0
 8013072:	9208      	str	r2, [sp, #32]
 8013074:	930c      	str	r3, [sp, #48]	; 0x30
 8013076:	b975      	cbnz	r5, 8013096 <_dtoa_r+0x3e>
 8013078:	2010      	movs	r0, #16
 801307a:	f000 ff7f 	bl	8013f7c <malloc>
 801307e:	4602      	mov	r2, r0
 8013080:	6270      	str	r0, [r6, #36]	; 0x24
 8013082:	b920      	cbnz	r0, 801308e <_dtoa_r+0x36>
 8013084:	4baa      	ldr	r3, [pc, #680]	; (8013330 <_dtoa_r+0x2d8>)
 8013086:	21ea      	movs	r1, #234	; 0xea
 8013088:	48aa      	ldr	r0, [pc, #680]	; (8013334 <_dtoa_r+0x2dc>)
 801308a:	f7fe ff23 	bl	8011ed4 <__assert_func>
 801308e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013092:	6005      	str	r5, [r0, #0]
 8013094:	60c5      	str	r5, [r0, #12]
 8013096:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013098:	6819      	ldr	r1, [r3, #0]
 801309a:	b151      	cbz	r1, 80130b2 <_dtoa_r+0x5a>
 801309c:	685a      	ldr	r2, [r3, #4]
 801309e:	604a      	str	r2, [r1, #4]
 80130a0:	2301      	movs	r3, #1
 80130a2:	4093      	lsls	r3, r2
 80130a4:	608b      	str	r3, [r1, #8]
 80130a6:	4630      	mov	r0, r6
 80130a8:	f000 ffca 	bl	8014040 <_Bfree>
 80130ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80130ae:	2200      	movs	r2, #0
 80130b0:	601a      	str	r2, [r3, #0]
 80130b2:	f1b9 0300 	subs.w	r3, r9, #0
 80130b6:	bfbb      	ittet	lt
 80130b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80130bc:	9303      	strlt	r3, [sp, #12]
 80130be:	2300      	movge	r3, #0
 80130c0:	2201      	movlt	r2, #1
 80130c2:	bfac      	ite	ge
 80130c4:	6023      	strge	r3, [r4, #0]
 80130c6:	6022      	strlt	r2, [r4, #0]
 80130c8:	4b9b      	ldr	r3, [pc, #620]	; (8013338 <_dtoa_r+0x2e0>)
 80130ca:	9c03      	ldr	r4, [sp, #12]
 80130cc:	43a3      	bics	r3, r4
 80130ce:	d11c      	bne.n	801310a <_dtoa_r+0xb2>
 80130d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80130d6:	6013      	str	r3, [r2, #0]
 80130d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80130dc:	ea53 0308 	orrs.w	r3, r3, r8
 80130e0:	f000 84fd 	beq.w	8013ade <_dtoa_r+0xa86>
 80130e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80130e6:	b963      	cbnz	r3, 8013102 <_dtoa_r+0xaa>
 80130e8:	4b94      	ldr	r3, [pc, #592]	; (801333c <_dtoa_r+0x2e4>)
 80130ea:	e01f      	b.n	801312c <_dtoa_r+0xd4>
 80130ec:	4b94      	ldr	r3, [pc, #592]	; (8013340 <_dtoa_r+0x2e8>)
 80130ee:	9301      	str	r3, [sp, #4]
 80130f0:	3308      	adds	r3, #8
 80130f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80130f4:	6013      	str	r3, [r2, #0]
 80130f6:	9801      	ldr	r0, [sp, #4]
 80130f8:	b011      	add	sp, #68	; 0x44
 80130fa:	ecbd 8b02 	vpop	{d8}
 80130fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013102:	4b8e      	ldr	r3, [pc, #568]	; (801333c <_dtoa_r+0x2e4>)
 8013104:	9301      	str	r3, [sp, #4]
 8013106:	3303      	adds	r3, #3
 8013108:	e7f3      	b.n	80130f2 <_dtoa_r+0x9a>
 801310a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801310e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013116:	d10b      	bne.n	8013130 <_dtoa_r+0xd8>
 8013118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801311a:	2301      	movs	r3, #1
 801311c:	6013      	str	r3, [r2, #0]
 801311e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013120:	2b00      	cmp	r3, #0
 8013122:	f000 84d9 	beq.w	8013ad8 <_dtoa_r+0xa80>
 8013126:	4887      	ldr	r0, [pc, #540]	; (8013344 <_dtoa_r+0x2ec>)
 8013128:	6018      	str	r0, [r3, #0]
 801312a:	1e43      	subs	r3, r0, #1
 801312c:	9301      	str	r3, [sp, #4]
 801312e:	e7e2      	b.n	80130f6 <_dtoa_r+0x9e>
 8013130:	a90f      	add	r1, sp, #60	; 0x3c
 8013132:	aa0e      	add	r2, sp, #56	; 0x38
 8013134:	4630      	mov	r0, r6
 8013136:	eeb0 0b48 	vmov.f64	d0, d8
 801313a:	f001 fa69 	bl	8014610 <__d2b>
 801313e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8013142:	4605      	mov	r5, r0
 8013144:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013146:	2900      	cmp	r1, #0
 8013148:	d046      	beq.n	80131d8 <_dtoa_r+0x180>
 801314a:	ee18 4a90 	vmov	r4, s17
 801314e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013152:	ec53 2b18 	vmov	r2, r3, d8
 8013156:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801315a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801315e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013162:	2400      	movs	r4, #0
 8013164:	ec43 2b16 	vmov	d6, r2, r3
 8013168:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801316c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013318 <_dtoa_r+0x2c0>
 8013170:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013174:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013320 <_dtoa_r+0x2c8>
 8013178:	eea7 6b05 	vfma.f64	d6, d7, d5
 801317c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013328 <_dtoa_r+0x2d0>
 8013180:	ee07 1a90 	vmov	s15, r1
 8013184:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013188:	eeb0 7b46 	vmov.f64	d7, d6
 801318c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013190:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013194:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801319c:	ee16 ba90 	vmov	fp, s13
 80131a0:	940a      	str	r4, [sp, #40]	; 0x28
 80131a2:	d508      	bpl.n	80131b6 <_dtoa_r+0x15e>
 80131a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80131a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80131ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b0:	bf18      	it	ne
 80131b2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80131b6:	f1bb 0f16 	cmp.w	fp, #22
 80131ba:	d82f      	bhi.n	801321c <_dtoa_r+0x1c4>
 80131bc:	4b62      	ldr	r3, [pc, #392]	; (8013348 <_dtoa_r+0x2f0>)
 80131be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80131c2:	ed93 7b00 	vldr	d7, [r3]
 80131c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80131ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ce:	d501      	bpl.n	80131d4 <_dtoa_r+0x17c>
 80131d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80131d4:	2300      	movs	r3, #0
 80131d6:	e022      	b.n	801321e <_dtoa_r+0x1c6>
 80131d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80131da:	4401      	add	r1, r0
 80131dc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80131e0:	2b20      	cmp	r3, #32
 80131e2:	bfc1      	itttt	gt
 80131e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80131e8:	fa04 f303 	lslgt.w	r3, r4, r3
 80131ec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80131f0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80131f4:	bfd6      	itet	le
 80131f6:	f1c3 0320 	rsble	r3, r3, #32
 80131fa:	ea43 0808 	orrgt.w	r8, r3, r8
 80131fe:	fa08 f803 	lslle.w	r8, r8, r3
 8013202:	ee07 8a90 	vmov	s15, r8
 8013206:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801320a:	3901      	subs	r1, #1
 801320c:	ee17 4a90 	vmov	r4, s15
 8013210:	ec53 2b17 	vmov	r2, r3, d7
 8013214:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013218:	2401      	movs	r4, #1
 801321a:	e7a3      	b.n	8013164 <_dtoa_r+0x10c>
 801321c:	2301      	movs	r3, #1
 801321e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013220:	1a43      	subs	r3, r0, r1
 8013222:	1e5a      	subs	r2, r3, #1
 8013224:	bf45      	ittet	mi
 8013226:	f1c3 0301 	rsbmi	r3, r3, #1
 801322a:	9304      	strmi	r3, [sp, #16]
 801322c:	2300      	movpl	r3, #0
 801322e:	2300      	movmi	r3, #0
 8013230:	9205      	str	r2, [sp, #20]
 8013232:	bf54      	ite	pl
 8013234:	9304      	strpl	r3, [sp, #16]
 8013236:	9305      	strmi	r3, [sp, #20]
 8013238:	f1bb 0f00 	cmp.w	fp, #0
 801323c:	db18      	blt.n	8013270 <_dtoa_r+0x218>
 801323e:	9b05      	ldr	r3, [sp, #20]
 8013240:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013244:	445b      	add	r3, fp
 8013246:	9305      	str	r3, [sp, #20]
 8013248:	2300      	movs	r3, #0
 801324a:	9a06      	ldr	r2, [sp, #24]
 801324c:	2a09      	cmp	r2, #9
 801324e:	d849      	bhi.n	80132e4 <_dtoa_r+0x28c>
 8013250:	2a05      	cmp	r2, #5
 8013252:	bfc4      	itt	gt
 8013254:	3a04      	subgt	r2, #4
 8013256:	9206      	strgt	r2, [sp, #24]
 8013258:	9a06      	ldr	r2, [sp, #24]
 801325a:	f1a2 0202 	sub.w	r2, r2, #2
 801325e:	bfcc      	ite	gt
 8013260:	2400      	movgt	r4, #0
 8013262:	2401      	movle	r4, #1
 8013264:	2a03      	cmp	r2, #3
 8013266:	d848      	bhi.n	80132fa <_dtoa_r+0x2a2>
 8013268:	e8df f002 	tbb	[pc, r2]
 801326c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013270:	9b04      	ldr	r3, [sp, #16]
 8013272:	2200      	movs	r2, #0
 8013274:	eba3 030b 	sub.w	r3, r3, fp
 8013278:	9304      	str	r3, [sp, #16]
 801327a:	9209      	str	r2, [sp, #36]	; 0x24
 801327c:	f1cb 0300 	rsb	r3, fp, #0
 8013280:	e7e3      	b.n	801324a <_dtoa_r+0x1f2>
 8013282:	2200      	movs	r2, #0
 8013284:	9207      	str	r2, [sp, #28]
 8013286:	9a08      	ldr	r2, [sp, #32]
 8013288:	2a00      	cmp	r2, #0
 801328a:	dc39      	bgt.n	8013300 <_dtoa_r+0x2a8>
 801328c:	f04f 0a01 	mov.w	sl, #1
 8013290:	46d1      	mov	r9, sl
 8013292:	4652      	mov	r2, sl
 8013294:	f8cd a020 	str.w	sl, [sp, #32]
 8013298:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801329a:	2100      	movs	r1, #0
 801329c:	6079      	str	r1, [r7, #4]
 801329e:	2004      	movs	r0, #4
 80132a0:	f100 0c14 	add.w	ip, r0, #20
 80132a4:	4594      	cmp	ip, r2
 80132a6:	6879      	ldr	r1, [r7, #4]
 80132a8:	d92f      	bls.n	801330a <_dtoa_r+0x2b2>
 80132aa:	4630      	mov	r0, r6
 80132ac:	930d      	str	r3, [sp, #52]	; 0x34
 80132ae:	f000 fe87 	bl	8013fc0 <_Balloc>
 80132b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132b4:	9001      	str	r0, [sp, #4]
 80132b6:	4602      	mov	r2, r0
 80132b8:	2800      	cmp	r0, #0
 80132ba:	d149      	bne.n	8013350 <_dtoa_r+0x2f8>
 80132bc:	4b23      	ldr	r3, [pc, #140]	; (801334c <_dtoa_r+0x2f4>)
 80132be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80132c2:	e6e1      	b.n	8013088 <_dtoa_r+0x30>
 80132c4:	2201      	movs	r2, #1
 80132c6:	e7dd      	b.n	8013284 <_dtoa_r+0x22c>
 80132c8:	2200      	movs	r2, #0
 80132ca:	9207      	str	r2, [sp, #28]
 80132cc:	9a08      	ldr	r2, [sp, #32]
 80132ce:	eb0b 0a02 	add.w	sl, fp, r2
 80132d2:	f10a 0901 	add.w	r9, sl, #1
 80132d6:	464a      	mov	r2, r9
 80132d8:	2a01      	cmp	r2, #1
 80132da:	bfb8      	it	lt
 80132dc:	2201      	movlt	r2, #1
 80132de:	e7db      	b.n	8013298 <_dtoa_r+0x240>
 80132e0:	2201      	movs	r2, #1
 80132e2:	e7f2      	b.n	80132ca <_dtoa_r+0x272>
 80132e4:	2401      	movs	r4, #1
 80132e6:	2200      	movs	r2, #0
 80132e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80132ec:	f04f 3aff 	mov.w	sl, #4294967295
 80132f0:	2100      	movs	r1, #0
 80132f2:	46d1      	mov	r9, sl
 80132f4:	2212      	movs	r2, #18
 80132f6:	9108      	str	r1, [sp, #32]
 80132f8:	e7ce      	b.n	8013298 <_dtoa_r+0x240>
 80132fa:	2201      	movs	r2, #1
 80132fc:	9207      	str	r2, [sp, #28]
 80132fe:	e7f5      	b.n	80132ec <_dtoa_r+0x294>
 8013300:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013304:	46d1      	mov	r9, sl
 8013306:	4652      	mov	r2, sl
 8013308:	e7c6      	b.n	8013298 <_dtoa_r+0x240>
 801330a:	3101      	adds	r1, #1
 801330c:	6079      	str	r1, [r7, #4]
 801330e:	0040      	lsls	r0, r0, #1
 8013310:	e7c6      	b.n	80132a0 <_dtoa_r+0x248>
 8013312:	bf00      	nop
 8013314:	f3af 8000 	nop.w
 8013318:	636f4361 	.word	0x636f4361
 801331c:	3fd287a7 	.word	0x3fd287a7
 8013320:	8b60c8b3 	.word	0x8b60c8b3
 8013324:	3fc68a28 	.word	0x3fc68a28
 8013328:	509f79fb 	.word	0x509f79fb
 801332c:	3fd34413 	.word	0x3fd34413
 8013330:	080196e9 	.word	0x080196e9
 8013334:	080197c5 	.word	0x080197c5
 8013338:	7ff00000 	.word	0x7ff00000
 801333c:	080197c1 	.word	0x080197c1
 8013340:	080197b8 	.word	0x080197b8
 8013344:	080196c6 	.word	0x080196c6
 8013348:	08019918 	.word	0x08019918
 801334c:	08019820 	.word	0x08019820
 8013350:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013352:	9901      	ldr	r1, [sp, #4]
 8013354:	6011      	str	r1, [r2, #0]
 8013356:	f1b9 0f0e 	cmp.w	r9, #14
 801335a:	d86c      	bhi.n	8013436 <_dtoa_r+0x3de>
 801335c:	2c00      	cmp	r4, #0
 801335e:	d06a      	beq.n	8013436 <_dtoa_r+0x3de>
 8013360:	f1bb 0f00 	cmp.w	fp, #0
 8013364:	f340 80a0 	ble.w	80134a8 <_dtoa_r+0x450>
 8013368:	49c1      	ldr	r1, [pc, #772]	; (8013670 <_dtoa_r+0x618>)
 801336a:	f00b 020f 	and.w	r2, fp, #15
 801336e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013372:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013376:	ed92 7b00 	vldr	d7, [r2]
 801337a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801337e:	f000 8087 	beq.w	8013490 <_dtoa_r+0x438>
 8013382:	4abc      	ldr	r2, [pc, #752]	; (8013674 <_dtoa_r+0x61c>)
 8013384:	ed92 6b08 	vldr	d6, [r2, #32]
 8013388:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801338c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013390:	f001 010f 	and.w	r1, r1, #15
 8013394:	2203      	movs	r2, #3
 8013396:	48b7      	ldr	r0, [pc, #732]	; (8013674 <_dtoa_r+0x61c>)
 8013398:	2900      	cmp	r1, #0
 801339a:	d17b      	bne.n	8013494 <_dtoa_r+0x43c>
 801339c:	ed9d 6b02 	vldr	d6, [sp, #8]
 80133a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80133a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80133a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80133aa:	2900      	cmp	r1, #0
 80133ac:	f000 80a2 	beq.w	80134f4 <_dtoa_r+0x49c>
 80133b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80133b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80133b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80133bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c0:	f140 8098 	bpl.w	80134f4 <_dtoa_r+0x49c>
 80133c4:	f1b9 0f00 	cmp.w	r9, #0
 80133c8:	f000 8094 	beq.w	80134f4 <_dtoa_r+0x49c>
 80133cc:	f1ba 0f00 	cmp.w	sl, #0
 80133d0:	dd2f      	ble.n	8013432 <_dtoa_r+0x3da>
 80133d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80133d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80133da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80133de:	f10b 37ff 	add.w	r7, fp, #4294967295
 80133e2:	3201      	adds	r2, #1
 80133e4:	4650      	mov	r0, sl
 80133e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80133ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80133ee:	ee07 2a90 	vmov	s15, r2
 80133f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80133f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80133fa:	ee15 4a90 	vmov	r4, s11
 80133fe:	ec52 1b15 	vmov	r1, r2, d5
 8013402:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013406:	2800      	cmp	r0, #0
 8013408:	d177      	bne.n	80134fa <_dtoa_r+0x4a2>
 801340a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801340e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013412:	ec42 1b17 	vmov	d7, r1, r2
 8013416:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341e:	f300 8263 	bgt.w	80138e8 <_dtoa_r+0x890>
 8013422:	eeb1 7b47 	vneg.f64	d7, d7
 8013426:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801342e:	f100 8258 	bmi.w	80138e2 <_dtoa_r+0x88a>
 8013432:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013438:	2a00      	cmp	r2, #0
 801343a:	f2c0 811d 	blt.w	8013678 <_dtoa_r+0x620>
 801343e:	f1bb 0f0e 	cmp.w	fp, #14
 8013442:	f300 8119 	bgt.w	8013678 <_dtoa_r+0x620>
 8013446:	4b8a      	ldr	r3, [pc, #552]	; (8013670 <_dtoa_r+0x618>)
 8013448:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801344c:	ed93 6b00 	vldr	d6, [r3]
 8013450:	9b08      	ldr	r3, [sp, #32]
 8013452:	2b00      	cmp	r3, #0
 8013454:	f280 80b7 	bge.w	80135c6 <_dtoa_r+0x56e>
 8013458:	f1b9 0f00 	cmp.w	r9, #0
 801345c:	f300 80b3 	bgt.w	80135c6 <_dtoa_r+0x56e>
 8013460:	f040 823f 	bne.w	80138e2 <_dtoa_r+0x88a>
 8013464:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013468:	ee26 6b07 	vmul.f64	d6, d6, d7
 801346c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013470:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013478:	464c      	mov	r4, r9
 801347a:	464f      	mov	r7, r9
 801347c:	f280 8215 	bge.w	80138aa <_dtoa_r+0x852>
 8013480:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013484:	2331      	movs	r3, #49	; 0x31
 8013486:	f808 3b01 	strb.w	r3, [r8], #1
 801348a:	f10b 0b01 	add.w	fp, fp, #1
 801348e:	e211      	b.n	80138b4 <_dtoa_r+0x85c>
 8013490:	2202      	movs	r2, #2
 8013492:	e780      	b.n	8013396 <_dtoa_r+0x33e>
 8013494:	07cc      	lsls	r4, r1, #31
 8013496:	d504      	bpl.n	80134a2 <_dtoa_r+0x44a>
 8013498:	ed90 6b00 	vldr	d6, [r0]
 801349c:	3201      	adds	r2, #1
 801349e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80134a2:	1049      	asrs	r1, r1, #1
 80134a4:	3008      	adds	r0, #8
 80134a6:	e777      	b.n	8013398 <_dtoa_r+0x340>
 80134a8:	d022      	beq.n	80134f0 <_dtoa_r+0x498>
 80134aa:	f1cb 0100 	rsb	r1, fp, #0
 80134ae:	4a70      	ldr	r2, [pc, #448]	; (8013670 <_dtoa_r+0x618>)
 80134b0:	f001 000f 	and.w	r0, r1, #15
 80134b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80134b8:	ed92 7b00 	vldr	d7, [r2]
 80134bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80134c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80134c4:	486b      	ldr	r0, [pc, #428]	; (8013674 <_dtoa_r+0x61c>)
 80134c6:	1109      	asrs	r1, r1, #4
 80134c8:	2400      	movs	r4, #0
 80134ca:	2202      	movs	r2, #2
 80134cc:	b929      	cbnz	r1, 80134da <_dtoa_r+0x482>
 80134ce:	2c00      	cmp	r4, #0
 80134d0:	f43f af6a 	beq.w	80133a8 <_dtoa_r+0x350>
 80134d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80134d8:	e766      	b.n	80133a8 <_dtoa_r+0x350>
 80134da:	07cf      	lsls	r7, r1, #31
 80134dc:	d505      	bpl.n	80134ea <_dtoa_r+0x492>
 80134de:	ed90 6b00 	vldr	d6, [r0]
 80134e2:	3201      	adds	r2, #1
 80134e4:	2401      	movs	r4, #1
 80134e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80134ea:	1049      	asrs	r1, r1, #1
 80134ec:	3008      	adds	r0, #8
 80134ee:	e7ed      	b.n	80134cc <_dtoa_r+0x474>
 80134f0:	2202      	movs	r2, #2
 80134f2:	e759      	b.n	80133a8 <_dtoa_r+0x350>
 80134f4:	465f      	mov	r7, fp
 80134f6:	4648      	mov	r0, r9
 80134f8:	e775      	b.n	80133e6 <_dtoa_r+0x38e>
 80134fa:	ec42 1b17 	vmov	d7, r1, r2
 80134fe:	4a5c      	ldr	r2, [pc, #368]	; (8013670 <_dtoa_r+0x618>)
 8013500:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013504:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013508:	9a01      	ldr	r2, [sp, #4]
 801350a:	1814      	adds	r4, r2, r0
 801350c:	9a07      	ldr	r2, [sp, #28]
 801350e:	b352      	cbz	r2, 8013566 <_dtoa_r+0x50e>
 8013510:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013514:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013518:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801351c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013520:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013524:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013528:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801352c:	ee14 2a90 	vmov	r2, s9
 8013530:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013534:	3230      	adds	r2, #48	; 0x30
 8013536:	ee36 6b45 	vsub.f64	d6, d6, d5
 801353a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801353e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013542:	f808 2b01 	strb.w	r2, [r8], #1
 8013546:	d439      	bmi.n	80135bc <_dtoa_r+0x564>
 8013548:	ee32 5b46 	vsub.f64	d5, d2, d6
 801354c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013554:	d472      	bmi.n	801363c <_dtoa_r+0x5e4>
 8013556:	45a0      	cmp	r8, r4
 8013558:	f43f af6b 	beq.w	8013432 <_dtoa_r+0x3da>
 801355c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013560:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013564:	e7e0      	b.n	8013528 <_dtoa_r+0x4d0>
 8013566:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801356a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801356e:	4621      	mov	r1, r4
 8013570:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013574:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013578:	ee14 2a90 	vmov	r2, s9
 801357c:	3230      	adds	r2, #48	; 0x30
 801357e:	f808 2b01 	strb.w	r2, [r8], #1
 8013582:	45a0      	cmp	r8, r4
 8013584:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013588:	ee36 6b45 	vsub.f64	d6, d6, d5
 801358c:	d118      	bne.n	80135c0 <_dtoa_r+0x568>
 801358e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013592:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013596:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359e:	dc4d      	bgt.n	801363c <_dtoa_r+0x5e4>
 80135a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80135a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80135a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ac:	f57f af41 	bpl.w	8013432 <_dtoa_r+0x3da>
 80135b0:	4688      	mov	r8, r1
 80135b2:	3901      	subs	r1, #1
 80135b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80135b8:	2b30      	cmp	r3, #48	; 0x30
 80135ba:	d0f9      	beq.n	80135b0 <_dtoa_r+0x558>
 80135bc:	46bb      	mov	fp, r7
 80135be:	e02a      	b.n	8013616 <_dtoa_r+0x5be>
 80135c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80135c4:	e7d6      	b.n	8013574 <_dtoa_r+0x51c>
 80135c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80135ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80135ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80135d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80135d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80135da:	ee15 3a10 	vmov	r3, s10
 80135de:	3330      	adds	r3, #48	; 0x30
 80135e0:	f808 3b01 	strb.w	r3, [r8], #1
 80135e4:	9b01      	ldr	r3, [sp, #4]
 80135e6:	eba8 0303 	sub.w	r3, r8, r3
 80135ea:	4599      	cmp	r9, r3
 80135ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80135f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80135f4:	d133      	bne.n	801365e <_dtoa_r+0x606>
 80135f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80135fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80135fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013602:	dc1a      	bgt.n	801363a <_dtoa_r+0x5e2>
 8013604:	eeb4 7b46 	vcmp.f64	d7, d6
 8013608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801360c:	d103      	bne.n	8013616 <_dtoa_r+0x5be>
 801360e:	ee15 3a10 	vmov	r3, s10
 8013612:	07d9      	lsls	r1, r3, #31
 8013614:	d411      	bmi.n	801363a <_dtoa_r+0x5e2>
 8013616:	4629      	mov	r1, r5
 8013618:	4630      	mov	r0, r6
 801361a:	f000 fd11 	bl	8014040 <_Bfree>
 801361e:	2300      	movs	r3, #0
 8013620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013622:	f888 3000 	strb.w	r3, [r8]
 8013626:	f10b 0301 	add.w	r3, fp, #1
 801362a:	6013      	str	r3, [r2, #0]
 801362c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801362e:	2b00      	cmp	r3, #0
 8013630:	f43f ad61 	beq.w	80130f6 <_dtoa_r+0x9e>
 8013634:	f8c3 8000 	str.w	r8, [r3]
 8013638:	e55d      	b.n	80130f6 <_dtoa_r+0x9e>
 801363a:	465f      	mov	r7, fp
 801363c:	4643      	mov	r3, r8
 801363e:	4698      	mov	r8, r3
 8013640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013644:	2a39      	cmp	r2, #57	; 0x39
 8013646:	d106      	bne.n	8013656 <_dtoa_r+0x5fe>
 8013648:	9a01      	ldr	r2, [sp, #4]
 801364a:	429a      	cmp	r2, r3
 801364c:	d1f7      	bne.n	801363e <_dtoa_r+0x5e6>
 801364e:	9901      	ldr	r1, [sp, #4]
 8013650:	2230      	movs	r2, #48	; 0x30
 8013652:	3701      	adds	r7, #1
 8013654:	700a      	strb	r2, [r1, #0]
 8013656:	781a      	ldrb	r2, [r3, #0]
 8013658:	3201      	adds	r2, #1
 801365a:	701a      	strb	r2, [r3, #0]
 801365c:	e7ae      	b.n	80135bc <_dtoa_r+0x564>
 801365e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013662:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801366a:	d1b2      	bne.n	80135d2 <_dtoa_r+0x57a>
 801366c:	e7d3      	b.n	8013616 <_dtoa_r+0x5be>
 801366e:	bf00      	nop
 8013670:	08019918 	.word	0x08019918
 8013674:	080198f0 	.word	0x080198f0
 8013678:	9907      	ldr	r1, [sp, #28]
 801367a:	2900      	cmp	r1, #0
 801367c:	f000 80d0 	beq.w	8013820 <_dtoa_r+0x7c8>
 8013680:	9906      	ldr	r1, [sp, #24]
 8013682:	2901      	cmp	r1, #1
 8013684:	f300 80b4 	bgt.w	80137f0 <_dtoa_r+0x798>
 8013688:	990a      	ldr	r1, [sp, #40]	; 0x28
 801368a:	2900      	cmp	r1, #0
 801368c:	f000 80ac 	beq.w	80137e8 <_dtoa_r+0x790>
 8013690:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013694:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013698:	461c      	mov	r4, r3
 801369a:	930a      	str	r3, [sp, #40]	; 0x28
 801369c:	9b04      	ldr	r3, [sp, #16]
 801369e:	4413      	add	r3, r2
 80136a0:	9304      	str	r3, [sp, #16]
 80136a2:	9b05      	ldr	r3, [sp, #20]
 80136a4:	2101      	movs	r1, #1
 80136a6:	4413      	add	r3, r2
 80136a8:	4630      	mov	r0, r6
 80136aa:	9305      	str	r3, [sp, #20]
 80136ac:	f000 fd80 	bl	80141b0 <__i2b>
 80136b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136b2:	4607      	mov	r7, r0
 80136b4:	f1b8 0f00 	cmp.w	r8, #0
 80136b8:	dd0d      	ble.n	80136d6 <_dtoa_r+0x67e>
 80136ba:	9a05      	ldr	r2, [sp, #20]
 80136bc:	2a00      	cmp	r2, #0
 80136be:	dd0a      	ble.n	80136d6 <_dtoa_r+0x67e>
 80136c0:	4542      	cmp	r2, r8
 80136c2:	9904      	ldr	r1, [sp, #16]
 80136c4:	bfa8      	it	ge
 80136c6:	4642      	movge	r2, r8
 80136c8:	1a89      	subs	r1, r1, r2
 80136ca:	9104      	str	r1, [sp, #16]
 80136cc:	9905      	ldr	r1, [sp, #20]
 80136ce:	eba8 0802 	sub.w	r8, r8, r2
 80136d2:	1a8a      	subs	r2, r1, r2
 80136d4:	9205      	str	r2, [sp, #20]
 80136d6:	b303      	cbz	r3, 801371a <_dtoa_r+0x6c2>
 80136d8:	9a07      	ldr	r2, [sp, #28]
 80136da:	2a00      	cmp	r2, #0
 80136dc:	f000 80a5 	beq.w	801382a <_dtoa_r+0x7d2>
 80136e0:	2c00      	cmp	r4, #0
 80136e2:	dd13      	ble.n	801370c <_dtoa_r+0x6b4>
 80136e4:	4639      	mov	r1, r7
 80136e6:	4622      	mov	r2, r4
 80136e8:	4630      	mov	r0, r6
 80136ea:	930d      	str	r3, [sp, #52]	; 0x34
 80136ec:	f000 fe20 	bl	8014330 <__pow5mult>
 80136f0:	462a      	mov	r2, r5
 80136f2:	4601      	mov	r1, r0
 80136f4:	4607      	mov	r7, r0
 80136f6:	4630      	mov	r0, r6
 80136f8:	f000 fd70 	bl	80141dc <__multiply>
 80136fc:	4629      	mov	r1, r5
 80136fe:	900a      	str	r0, [sp, #40]	; 0x28
 8013700:	4630      	mov	r0, r6
 8013702:	f000 fc9d 	bl	8014040 <_Bfree>
 8013706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801370a:	4615      	mov	r5, r2
 801370c:	1b1a      	subs	r2, r3, r4
 801370e:	d004      	beq.n	801371a <_dtoa_r+0x6c2>
 8013710:	4629      	mov	r1, r5
 8013712:	4630      	mov	r0, r6
 8013714:	f000 fe0c 	bl	8014330 <__pow5mult>
 8013718:	4605      	mov	r5, r0
 801371a:	2101      	movs	r1, #1
 801371c:	4630      	mov	r0, r6
 801371e:	f000 fd47 	bl	80141b0 <__i2b>
 8013722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013724:	2b00      	cmp	r3, #0
 8013726:	4604      	mov	r4, r0
 8013728:	f340 8081 	ble.w	801382e <_dtoa_r+0x7d6>
 801372c:	461a      	mov	r2, r3
 801372e:	4601      	mov	r1, r0
 8013730:	4630      	mov	r0, r6
 8013732:	f000 fdfd 	bl	8014330 <__pow5mult>
 8013736:	9b06      	ldr	r3, [sp, #24]
 8013738:	2b01      	cmp	r3, #1
 801373a:	4604      	mov	r4, r0
 801373c:	dd7a      	ble.n	8013834 <_dtoa_r+0x7dc>
 801373e:	2300      	movs	r3, #0
 8013740:	930a      	str	r3, [sp, #40]	; 0x28
 8013742:	6922      	ldr	r2, [r4, #16]
 8013744:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013748:	6910      	ldr	r0, [r2, #16]
 801374a:	f000 fce1 	bl	8014110 <__hi0bits>
 801374e:	f1c0 0020 	rsb	r0, r0, #32
 8013752:	9b05      	ldr	r3, [sp, #20]
 8013754:	4418      	add	r0, r3
 8013756:	f010 001f 	ands.w	r0, r0, #31
 801375a:	f000 808c 	beq.w	8013876 <_dtoa_r+0x81e>
 801375e:	f1c0 0220 	rsb	r2, r0, #32
 8013762:	2a04      	cmp	r2, #4
 8013764:	f340 8085 	ble.w	8013872 <_dtoa_r+0x81a>
 8013768:	f1c0 001c 	rsb	r0, r0, #28
 801376c:	9b04      	ldr	r3, [sp, #16]
 801376e:	4403      	add	r3, r0
 8013770:	9304      	str	r3, [sp, #16]
 8013772:	9b05      	ldr	r3, [sp, #20]
 8013774:	4403      	add	r3, r0
 8013776:	4480      	add	r8, r0
 8013778:	9305      	str	r3, [sp, #20]
 801377a:	9b04      	ldr	r3, [sp, #16]
 801377c:	2b00      	cmp	r3, #0
 801377e:	dd05      	ble.n	801378c <_dtoa_r+0x734>
 8013780:	4629      	mov	r1, r5
 8013782:	461a      	mov	r2, r3
 8013784:	4630      	mov	r0, r6
 8013786:	f000 fe2d 	bl	80143e4 <__lshift>
 801378a:	4605      	mov	r5, r0
 801378c:	9b05      	ldr	r3, [sp, #20]
 801378e:	2b00      	cmp	r3, #0
 8013790:	dd05      	ble.n	801379e <_dtoa_r+0x746>
 8013792:	4621      	mov	r1, r4
 8013794:	461a      	mov	r2, r3
 8013796:	4630      	mov	r0, r6
 8013798:	f000 fe24 	bl	80143e4 <__lshift>
 801379c:	4604      	mov	r4, r0
 801379e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d06a      	beq.n	801387a <_dtoa_r+0x822>
 80137a4:	4621      	mov	r1, r4
 80137a6:	4628      	mov	r0, r5
 80137a8:	f000 fe8c 	bl	80144c4 <__mcmp>
 80137ac:	2800      	cmp	r0, #0
 80137ae:	da64      	bge.n	801387a <_dtoa_r+0x822>
 80137b0:	2300      	movs	r3, #0
 80137b2:	4629      	mov	r1, r5
 80137b4:	220a      	movs	r2, #10
 80137b6:	4630      	mov	r0, r6
 80137b8:	f000 fc64 	bl	8014084 <__multadd>
 80137bc:	9b07      	ldr	r3, [sp, #28]
 80137be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80137c2:	4605      	mov	r5, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	f000 8191 	beq.w	8013aec <_dtoa_r+0xa94>
 80137ca:	4639      	mov	r1, r7
 80137cc:	2300      	movs	r3, #0
 80137ce:	220a      	movs	r2, #10
 80137d0:	4630      	mov	r0, r6
 80137d2:	f000 fc57 	bl	8014084 <__multadd>
 80137d6:	f1ba 0f00 	cmp.w	sl, #0
 80137da:	4607      	mov	r7, r0
 80137dc:	f300 808d 	bgt.w	80138fa <_dtoa_r+0x8a2>
 80137e0:	9b06      	ldr	r3, [sp, #24]
 80137e2:	2b02      	cmp	r3, #2
 80137e4:	dc50      	bgt.n	8013888 <_dtoa_r+0x830>
 80137e6:	e088      	b.n	80138fa <_dtoa_r+0x8a2>
 80137e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80137ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80137ee:	e751      	b.n	8013694 <_dtoa_r+0x63c>
 80137f0:	f109 34ff 	add.w	r4, r9, #4294967295
 80137f4:	42a3      	cmp	r3, r4
 80137f6:	bfbf      	itttt	lt
 80137f8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80137fa:	1ae3      	sublt	r3, r4, r3
 80137fc:	18d2      	addlt	r2, r2, r3
 80137fe:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013800:	bfb6      	itet	lt
 8013802:	4623      	movlt	r3, r4
 8013804:	1b1c      	subge	r4, r3, r4
 8013806:	2400      	movlt	r4, #0
 8013808:	f1b9 0f00 	cmp.w	r9, #0
 801380c:	bfb5      	itete	lt
 801380e:	9a04      	ldrlt	r2, [sp, #16]
 8013810:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013814:	eba2 0809 	sublt.w	r8, r2, r9
 8013818:	464a      	movge	r2, r9
 801381a:	bfb8      	it	lt
 801381c:	2200      	movlt	r2, #0
 801381e:	e73c      	b.n	801369a <_dtoa_r+0x642>
 8013820:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013824:	9f07      	ldr	r7, [sp, #28]
 8013826:	461c      	mov	r4, r3
 8013828:	e744      	b.n	80136b4 <_dtoa_r+0x65c>
 801382a:	461a      	mov	r2, r3
 801382c:	e770      	b.n	8013710 <_dtoa_r+0x6b8>
 801382e:	9b06      	ldr	r3, [sp, #24]
 8013830:	2b01      	cmp	r3, #1
 8013832:	dc18      	bgt.n	8013866 <_dtoa_r+0x80e>
 8013834:	9b02      	ldr	r3, [sp, #8]
 8013836:	b9b3      	cbnz	r3, 8013866 <_dtoa_r+0x80e>
 8013838:	9b03      	ldr	r3, [sp, #12]
 801383a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801383e:	b9a2      	cbnz	r2, 801386a <_dtoa_r+0x812>
 8013840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013844:	0d12      	lsrs	r2, r2, #20
 8013846:	0512      	lsls	r2, r2, #20
 8013848:	b18a      	cbz	r2, 801386e <_dtoa_r+0x816>
 801384a:	9b04      	ldr	r3, [sp, #16]
 801384c:	3301      	adds	r3, #1
 801384e:	9304      	str	r3, [sp, #16]
 8013850:	9b05      	ldr	r3, [sp, #20]
 8013852:	3301      	adds	r3, #1
 8013854:	9305      	str	r3, [sp, #20]
 8013856:	2301      	movs	r3, #1
 8013858:	930a      	str	r3, [sp, #40]	; 0x28
 801385a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801385c:	2b00      	cmp	r3, #0
 801385e:	f47f af70 	bne.w	8013742 <_dtoa_r+0x6ea>
 8013862:	2001      	movs	r0, #1
 8013864:	e775      	b.n	8013752 <_dtoa_r+0x6fa>
 8013866:	2300      	movs	r3, #0
 8013868:	e7f6      	b.n	8013858 <_dtoa_r+0x800>
 801386a:	9b02      	ldr	r3, [sp, #8]
 801386c:	e7f4      	b.n	8013858 <_dtoa_r+0x800>
 801386e:	920a      	str	r2, [sp, #40]	; 0x28
 8013870:	e7f3      	b.n	801385a <_dtoa_r+0x802>
 8013872:	d082      	beq.n	801377a <_dtoa_r+0x722>
 8013874:	4610      	mov	r0, r2
 8013876:	301c      	adds	r0, #28
 8013878:	e778      	b.n	801376c <_dtoa_r+0x714>
 801387a:	f1b9 0f00 	cmp.w	r9, #0
 801387e:	dc37      	bgt.n	80138f0 <_dtoa_r+0x898>
 8013880:	9b06      	ldr	r3, [sp, #24]
 8013882:	2b02      	cmp	r3, #2
 8013884:	dd34      	ble.n	80138f0 <_dtoa_r+0x898>
 8013886:	46ca      	mov	sl, r9
 8013888:	f1ba 0f00 	cmp.w	sl, #0
 801388c:	d10d      	bne.n	80138aa <_dtoa_r+0x852>
 801388e:	4621      	mov	r1, r4
 8013890:	4653      	mov	r3, sl
 8013892:	2205      	movs	r2, #5
 8013894:	4630      	mov	r0, r6
 8013896:	f000 fbf5 	bl	8014084 <__multadd>
 801389a:	4601      	mov	r1, r0
 801389c:	4604      	mov	r4, r0
 801389e:	4628      	mov	r0, r5
 80138a0:	f000 fe10 	bl	80144c4 <__mcmp>
 80138a4:	2800      	cmp	r0, #0
 80138a6:	f73f adeb 	bgt.w	8013480 <_dtoa_r+0x428>
 80138aa:	9b08      	ldr	r3, [sp, #32]
 80138ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80138b0:	ea6f 0b03 	mvn.w	fp, r3
 80138b4:	f04f 0900 	mov.w	r9, #0
 80138b8:	4621      	mov	r1, r4
 80138ba:	4630      	mov	r0, r6
 80138bc:	f000 fbc0 	bl	8014040 <_Bfree>
 80138c0:	2f00      	cmp	r7, #0
 80138c2:	f43f aea8 	beq.w	8013616 <_dtoa_r+0x5be>
 80138c6:	f1b9 0f00 	cmp.w	r9, #0
 80138ca:	d005      	beq.n	80138d8 <_dtoa_r+0x880>
 80138cc:	45b9      	cmp	r9, r7
 80138ce:	d003      	beq.n	80138d8 <_dtoa_r+0x880>
 80138d0:	4649      	mov	r1, r9
 80138d2:	4630      	mov	r0, r6
 80138d4:	f000 fbb4 	bl	8014040 <_Bfree>
 80138d8:	4639      	mov	r1, r7
 80138da:	4630      	mov	r0, r6
 80138dc:	f000 fbb0 	bl	8014040 <_Bfree>
 80138e0:	e699      	b.n	8013616 <_dtoa_r+0x5be>
 80138e2:	2400      	movs	r4, #0
 80138e4:	4627      	mov	r7, r4
 80138e6:	e7e0      	b.n	80138aa <_dtoa_r+0x852>
 80138e8:	46bb      	mov	fp, r7
 80138ea:	4604      	mov	r4, r0
 80138ec:	4607      	mov	r7, r0
 80138ee:	e5c7      	b.n	8013480 <_dtoa_r+0x428>
 80138f0:	9b07      	ldr	r3, [sp, #28]
 80138f2:	46ca      	mov	sl, r9
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f000 8100 	beq.w	8013afa <_dtoa_r+0xaa2>
 80138fa:	f1b8 0f00 	cmp.w	r8, #0
 80138fe:	dd05      	ble.n	801390c <_dtoa_r+0x8b4>
 8013900:	4639      	mov	r1, r7
 8013902:	4642      	mov	r2, r8
 8013904:	4630      	mov	r0, r6
 8013906:	f000 fd6d 	bl	80143e4 <__lshift>
 801390a:	4607      	mov	r7, r0
 801390c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801390e:	2b00      	cmp	r3, #0
 8013910:	d05d      	beq.n	80139ce <_dtoa_r+0x976>
 8013912:	6879      	ldr	r1, [r7, #4]
 8013914:	4630      	mov	r0, r6
 8013916:	f000 fb53 	bl	8013fc0 <_Balloc>
 801391a:	4680      	mov	r8, r0
 801391c:	b928      	cbnz	r0, 801392a <_dtoa_r+0x8d2>
 801391e:	4b82      	ldr	r3, [pc, #520]	; (8013b28 <_dtoa_r+0xad0>)
 8013920:	4602      	mov	r2, r0
 8013922:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013926:	f7ff bbaf 	b.w	8013088 <_dtoa_r+0x30>
 801392a:	693a      	ldr	r2, [r7, #16]
 801392c:	3202      	adds	r2, #2
 801392e:	0092      	lsls	r2, r2, #2
 8013930:	f107 010c 	add.w	r1, r7, #12
 8013934:	300c      	adds	r0, #12
 8013936:	f7fe fb2b 	bl	8011f90 <memcpy>
 801393a:	2201      	movs	r2, #1
 801393c:	4641      	mov	r1, r8
 801393e:	4630      	mov	r0, r6
 8013940:	f000 fd50 	bl	80143e4 <__lshift>
 8013944:	9b01      	ldr	r3, [sp, #4]
 8013946:	3301      	adds	r3, #1
 8013948:	9304      	str	r3, [sp, #16]
 801394a:	9b01      	ldr	r3, [sp, #4]
 801394c:	4453      	add	r3, sl
 801394e:	9308      	str	r3, [sp, #32]
 8013950:	9b02      	ldr	r3, [sp, #8]
 8013952:	f003 0301 	and.w	r3, r3, #1
 8013956:	46b9      	mov	r9, r7
 8013958:	9307      	str	r3, [sp, #28]
 801395a:	4607      	mov	r7, r0
 801395c:	9b04      	ldr	r3, [sp, #16]
 801395e:	4621      	mov	r1, r4
 8013960:	3b01      	subs	r3, #1
 8013962:	4628      	mov	r0, r5
 8013964:	9302      	str	r3, [sp, #8]
 8013966:	f7ff faec 	bl	8012f42 <quorem>
 801396a:	4603      	mov	r3, r0
 801396c:	3330      	adds	r3, #48	; 0x30
 801396e:	9005      	str	r0, [sp, #20]
 8013970:	4649      	mov	r1, r9
 8013972:	4628      	mov	r0, r5
 8013974:	9309      	str	r3, [sp, #36]	; 0x24
 8013976:	f000 fda5 	bl	80144c4 <__mcmp>
 801397a:	463a      	mov	r2, r7
 801397c:	4682      	mov	sl, r0
 801397e:	4621      	mov	r1, r4
 8013980:	4630      	mov	r0, r6
 8013982:	f000 fdbb 	bl	80144fc <__mdiff>
 8013986:	68c2      	ldr	r2, [r0, #12]
 8013988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801398a:	4680      	mov	r8, r0
 801398c:	bb0a      	cbnz	r2, 80139d2 <_dtoa_r+0x97a>
 801398e:	4601      	mov	r1, r0
 8013990:	4628      	mov	r0, r5
 8013992:	f000 fd97 	bl	80144c4 <__mcmp>
 8013996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013998:	4602      	mov	r2, r0
 801399a:	4641      	mov	r1, r8
 801399c:	4630      	mov	r0, r6
 801399e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80139a2:	f000 fb4d 	bl	8014040 <_Bfree>
 80139a6:	9b06      	ldr	r3, [sp, #24]
 80139a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139aa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80139ae:	ea43 0102 	orr.w	r1, r3, r2
 80139b2:	9b07      	ldr	r3, [sp, #28]
 80139b4:	430b      	orrs	r3, r1
 80139b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139b8:	d10d      	bne.n	80139d6 <_dtoa_r+0x97e>
 80139ba:	2b39      	cmp	r3, #57	; 0x39
 80139bc:	d029      	beq.n	8013a12 <_dtoa_r+0x9ba>
 80139be:	f1ba 0f00 	cmp.w	sl, #0
 80139c2:	dd01      	ble.n	80139c8 <_dtoa_r+0x970>
 80139c4:	9b05      	ldr	r3, [sp, #20]
 80139c6:	3331      	adds	r3, #49	; 0x31
 80139c8:	9a02      	ldr	r2, [sp, #8]
 80139ca:	7013      	strb	r3, [r2, #0]
 80139cc:	e774      	b.n	80138b8 <_dtoa_r+0x860>
 80139ce:	4638      	mov	r0, r7
 80139d0:	e7b8      	b.n	8013944 <_dtoa_r+0x8ec>
 80139d2:	2201      	movs	r2, #1
 80139d4:	e7e1      	b.n	801399a <_dtoa_r+0x942>
 80139d6:	f1ba 0f00 	cmp.w	sl, #0
 80139da:	db06      	blt.n	80139ea <_dtoa_r+0x992>
 80139dc:	9906      	ldr	r1, [sp, #24]
 80139de:	ea41 0a0a 	orr.w	sl, r1, sl
 80139e2:	9907      	ldr	r1, [sp, #28]
 80139e4:	ea5a 0101 	orrs.w	r1, sl, r1
 80139e8:	d120      	bne.n	8013a2c <_dtoa_r+0x9d4>
 80139ea:	2a00      	cmp	r2, #0
 80139ec:	ddec      	ble.n	80139c8 <_dtoa_r+0x970>
 80139ee:	4629      	mov	r1, r5
 80139f0:	2201      	movs	r2, #1
 80139f2:	4630      	mov	r0, r6
 80139f4:	9304      	str	r3, [sp, #16]
 80139f6:	f000 fcf5 	bl	80143e4 <__lshift>
 80139fa:	4621      	mov	r1, r4
 80139fc:	4605      	mov	r5, r0
 80139fe:	f000 fd61 	bl	80144c4 <__mcmp>
 8013a02:	2800      	cmp	r0, #0
 8013a04:	9b04      	ldr	r3, [sp, #16]
 8013a06:	dc02      	bgt.n	8013a0e <_dtoa_r+0x9b6>
 8013a08:	d1de      	bne.n	80139c8 <_dtoa_r+0x970>
 8013a0a:	07da      	lsls	r2, r3, #31
 8013a0c:	d5dc      	bpl.n	80139c8 <_dtoa_r+0x970>
 8013a0e:	2b39      	cmp	r3, #57	; 0x39
 8013a10:	d1d8      	bne.n	80139c4 <_dtoa_r+0x96c>
 8013a12:	9a02      	ldr	r2, [sp, #8]
 8013a14:	2339      	movs	r3, #57	; 0x39
 8013a16:	7013      	strb	r3, [r2, #0]
 8013a18:	4643      	mov	r3, r8
 8013a1a:	4698      	mov	r8, r3
 8013a1c:	3b01      	subs	r3, #1
 8013a1e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013a22:	2a39      	cmp	r2, #57	; 0x39
 8013a24:	d051      	beq.n	8013aca <_dtoa_r+0xa72>
 8013a26:	3201      	adds	r2, #1
 8013a28:	701a      	strb	r2, [r3, #0]
 8013a2a:	e745      	b.n	80138b8 <_dtoa_r+0x860>
 8013a2c:	2a00      	cmp	r2, #0
 8013a2e:	dd03      	ble.n	8013a38 <_dtoa_r+0x9e0>
 8013a30:	2b39      	cmp	r3, #57	; 0x39
 8013a32:	d0ee      	beq.n	8013a12 <_dtoa_r+0x9ba>
 8013a34:	3301      	adds	r3, #1
 8013a36:	e7c7      	b.n	80139c8 <_dtoa_r+0x970>
 8013a38:	9a04      	ldr	r2, [sp, #16]
 8013a3a:	9908      	ldr	r1, [sp, #32]
 8013a3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013a40:	428a      	cmp	r2, r1
 8013a42:	d02b      	beq.n	8013a9c <_dtoa_r+0xa44>
 8013a44:	4629      	mov	r1, r5
 8013a46:	2300      	movs	r3, #0
 8013a48:	220a      	movs	r2, #10
 8013a4a:	4630      	mov	r0, r6
 8013a4c:	f000 fb1a 	bl	8014084 <__multadd>
 8013a50:	45b9      	cmp	r9, r7
 8013a52:	4605      	mov	r5, r0
 8013a54:	f04f 0300 	mov.w	r3, #0
 8013a58:	f04f 020a 	mov.w	r2, #10
 8013a5c:	4649      	mov	r1, r9
 8013a5e:	4630      	mov	r0, r6
 8013a60:	d107      	bne.n	8013a72 <_dtoa_r+0xa1a>
 8013a62:	f000 fb0f 	bl	8014084 <__multadd>
 8013a66:	4681      	mov	r9, r0
 8013a68:	4607      	mov	r7, r0
 8013a6a:	9b04      	ldr	r3, [sp, #16]
 8013a6c:	3301      	adds	r3, #1
 8013a6e:	9304      	str	r3, [sp, #16]
 8013a70:	e774      	b.n	801395c <_dtoa_r+0x904>
 8013a72:	f000 fb07 	bl	8014084 <__multadd>
 8013a76:	4639      	mov	r1, r7
 8013a78:	4681      	mov	r9, r0
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	220a      	movs	r2, #10
 8013a7e:	4630      	mov	r0, r6
 8013a80:	f000 fb00 	bl	8014084 <__multadd>
 8013a84:	4607      	mov	r7, r0
 8013a86:	e7f0      	b.n	8013a6a <_dtoa_r+0xa12>
 8013a88:	f1ba 0f00 	cmp.w	sl, #0
 8013a8c:	9a01      	ldr	r2, [sp, #4]
 8013a8e:	bfcc      	ite	gt
 8013a90:	46d0      	movgt	r8, sl
 8013a92:	f04f 0801 	movle.w	r8, #1
 8013a96:	4490      	add	r8, r2
 8013a98:	f04f 0900 	mov.w	r9, #0
 8013a9c:	4629      	mov	r1, r5
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	9302      	str	r3, [sp, #8]
 8013aa4:	f000 fc9e 	bl	80143e4 <__lshift>
 8013aa8:	4621      	mov	r1, r4
 8013aaa:	4605      	mov	r5, r0
 8013aac:	f000 fd0a 	bl	80144c4 <__mcmp>
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	dcb1      	bgt.n	8013a18 <_dtoa_r+0x9c0>
 8013ab4:	d102      	bne.n	8013abc <_dtoa_r+0xa64>
 8013ab6:	9b02      	ldr	r3, [sp, #8]
 8013ab8:	07db      	lsls	r3, r3, #31
 8013aba:	d4ad      	bmi.n	8013a18 <_dtoa_r+0x9c0>
 8013abc:	4643      	mov	r3, r8
 8013abe:	4698      	mov	r8, r3
 8013ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ac4:	2a30      	cmp	r2, #48	; 0x30
 8013ac6:	d0fa      	beq.n	8013abe <_dtoa_r+0xa66>
 8013ac8:	e6f6      	b.n	80138b8 <_dtoa_r+0x860>
 8013aca:	9a01      	ldr	r2, [sp, #4]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d1a4      	bne.n	8013a1a <_dtoa_r+0x9c2>
 8013ad0:	f10b 0b01 	add.w	fp, fp, #1
 8013ad4:	2331      	movs	r3, #49	; 0x31
 8013ad6:	e778      	b.n	80139ca <_dtoa_r+0x972>
 8013ad8:	4b14      	ldr	r3, [pc, #80]	; (8013b2c <_dtoa_r+0xad4>)
 8013ada:	f7ff bb27 	b.w	801312c <_dtoa_r+0xd4>
 8013ade:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	f47f ab03 	bne.w	80130ec <_dtoa_r+0x94>
 8013ae6:	4b12      	ldr	r3, [pc, #72]	; (8013b30 <_dtoa_r+0xad8>)
 8013ae8:	f7ff bb20 	b.w	801312c <_dtoa_r+0xd4>
 8013aec:	f1ba 0f00 	cmp.w	sl, #0
 8013af0:	dc03      	bgt.n	8013afa <_dtoa_r+0xaa2>
 8013af2:	9b06      	ldr	r3, [sp, #24]
 8013af4:	2b02      	cmp	r3, #2
 8013af6:	f73f aec7 	bgt.w	8013888 <_dtoa_r+0x830>
 8013afa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013afe:	4621      	mov	r1, r4
 8013b00:	4628      	mov	r0, r5
 8013b02:	f7ff fa1e 	bl	8012f42 <quorem>
 8013b06:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013b0a:	f808 3b01 	strb.w	r3, [r8], #1
 8013b0e:	9a01      	ldr	r2, [sp, #4]
 8013b10:	eba8 0202 	sub.w	r2, r8, r2
 8013b14:	4592      	cmp	sl, r2
 8013b16:	ddb7      	ble.n	8013a88 <_dtoa_r+0xa30>
 8013b18:	4629      	mov	r1, r5
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	220a      	movs	r2, #10
 8013b1e:	4630      	mov	r0, r6
 8013b20:	f000 fab0 	bl	8014084 <__multadd>
 8013b24:	4605      	mov	r5, r0
 8013b26:	e7ea      	b.n	8013afe <_dtoa_r+0xaa6>
 8013b28:	08019820 	.word	0x08019820
 8013b2c:	080196c5 	.word	0x080196c5
 8013b30:	080197b8 	.word	0x080197b8

08013b34 <__sflush_r>:
 8013b34:	898a      	ldrh	r2, [r1, #12]
 8013b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b3a:	4605      	mov	r5, r0
 8013b3c:	0710      	lsls	r0, r2, #28
 8013b3e:	460c      	mov	r4, r1
 8013b40:	d458      	bmi.n	8013bf4 <__sflush_r+0xc0>
 8013b42:	684b      	ldr	r3, [r1, #4]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	dc05      	bgt.n	8013b54 <__sflush_r+0x20>
 8013b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	dc02      	bgt.n	8013b54 <__sflush_r+0x20>
 8013b4e:	2000      	movs	r0, #0
 8013b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b56:	2e00      	cmp	r6, #0
 8013b58:	d0f9      	beq.n	8013b4e <__sflush_r+0x1a>
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013b60:	682f      	ldr	r7, [r5, #0]
 8013b62:	602b      	str	r3, [r5, #0]
 8013b64:	d032      	beq.n	8013bcc <__sflush_r+0x98>
 8013b66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b68:	89a3      	ldrh	r3, [r4, #12]
 8013b6a:	075a      	lsls	r2, r3, #29
 8013b6c:	d505      	bpl.n	8013b7a <__sflush_r+0x46>
 8013b6e:	6863      	ldr	r3, [r4, #4]
 8013b70:	1ac0      	subs	r0, r0, r3
 8013b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b74:	b10b      	cbz	r3, 8013b7a <__sflush_r+0x46>
 8013b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b78:	1ac0      	subs	r0, r0, r3
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	4602      	mov	r2, r0
 8013b7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b80:	6a21      	ldr	r1, [r4, #32]
 8013b82:	4628      	mov	r0, r5
 8013b84:	47b0      	blx	r6
 8013b86:	1c43      	adds	r3, r0, #1
 8013b88:	89a3      	ldrh	r3, [r4, #12]
 8013b8a:	d106      	bne.n	8013b9a <__sflush_r+0x66>
 8013b8c:	6829      	ldr	r1, [r5, #0]
 8013b8e:	291d      	cmp	r1, #29
 8013b90:	d82c      	bhi.n	8013bec <__sflush_r+0xb8>
 8013b92:	4a2a      	ldr	r2, [pc, #168]	; (8013c3c <__sflush_r+0x108>)
 8013b94:	40ca      	lsrs	r2, r1
 8013b96:	07d6      	lsls	r6, r2, #31
 8013b98:	d528      	bpl.n	8013bec <__sflush_r+0xb8>
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	6062      	str	r2, [r4, #4]
 8013b9e:	04d9      	lsls	r1, r3, #19
 8013ba0:	6922      	ldr	r2, [r4, #16]
 8013ba2:	6022      	str	r2, [r4, #0]
 8013ba4:	d504      	bpl.n	8013bb0 <__sflush_r+0x7c>
 8013ba6:	1c42      	adds	r2, r0, #1
 8013ba8:	d101      	bne.n	8013bae <__sflush_r+0x7a>
 8013baa:	682b      	ldr	r3, [r5, #0]
 8013bac:	b903      	cbnz	r3, 8013bb0 <__sflush_r+0x7c>
 8013bae:	6560      	str	r0, [r4, #84]	; 0x54
 8013bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bb2:	602f      	str	r7, [r5, #0]
 8013bb4:	2900      	cmp	r1, #0
 8013bb6:	d0ca      	beq.n	8013b4e <__sflush_r+0x1a>
 8013bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013bbc:	4299      	cmp	r1, r3
 8013bbe:	d002      	beq.n	8013bc6 <__sflush_r+0x92>
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	f000 fd97 	bl	80146f4 <_free_r>
 8013bc6:	2000      	movs	r0, #0
 8013bc8:	6360      	str	r0, [r4, #52]	; 0x34
 8013bca:	e7c1      	b.n	8013b50 <__sflush_r+0x1c>
 8013bcc:	6a21      	ldr	r1, [r4, #32]
 8013bce:	2301      	movs	r3, #1
 8013bd0:	4628      	mov	r0, r5
 8013bd2:	47b0      	blx	r6
 8013bd4:	1c41      	adds	r1, r0, #1
 8013bd6:	d1c7      	bne.n	8013b68 <__sflush_r+0x34>
 8013bd8:	682b      	ldr	r3, [r5, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d0c4      	beq.n	8013b68 <__sflush_r+0x34>
 8013bde:	2b1d      	cmp	r3, #29
 8013be0:	d001      	beq.n	8013be6 <__sflush_r+0xb2>
 8013be2:	2b16      	cmp	r3, #22
 8013be4:	d101      	bne.n	8013bea <__sflush_r+0xb6>
 8013be6:	602f      	str	r7, [r5, #0]
 8013be8:	e7b1      	b.n	8013b4e <__sflush_r+0x1a>
 8013bea:	89a3      	ldrh	r3, [r4, #12]
 8013bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bf0:	81a3      	strh	r3, [r4, #12]
 8013bf2:	e7ad      	b.n	8013b50 <__sflush_r+0x1c>
 8013bf4:	690f      	ldr	r7, [r1, #16]
 8013bf6:	2f00      	cmp	r7, #0
 8013bf8:	d0a9      	beq.n	8013b4e <__sflush_r+0x1a>
 8013bfa:	0793      	lsls	r3, r2, #30
 8013bfc:	680e      	ldr	r6, [r1, #0]
 8013bfe:	bf08      	it	eq
 8013c00:	694b      	ldreq	r3, [r1, #20]
 8013c02:	600f      	str	r7, [r1, #0]
 8013c04:	bf18      	it	ne
 8013c06:	2300      	movne	r3, #0
 8013c08:	eba6 0807 	sub.w	r8, r6, r7
 8013c0c:	608b      	str	r3, [r1, #8]
 8013c0e:	f1b8 0f00 	cmp.w	r8, #0
 8013c12:	dd9c      	ble.n	8013b4e <__sflush_r+0x1a>
 8013c14:	6a21      	ldr	r1, [r4, #32]
 8013c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013c18:	4643      	mov	r3, r8
 8013c1a:	463a      	mov	r2, r7
 8013c1c:	4628      	mov	r0, r5
 8013c1e:	47b0      	blx	r6
 8013c20:	2800      	cmp	r0, #0
 8013c22:	dc06      	bgt.n	8013c32 <__sflush_r+0xfe>
 8013c24:	89a3      	ldrh	r3, [r4, #12]
 8013c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c2a:	81a3      	strh	r3, [r4, #12]
 8013c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c30:	e78e      	b.n	8013b50 <__sflush_r+0x1c>
 8013c32:	4407      	add	r7, r0
 8013c34:	eba8 0800 	sub.w	r8, r8, r0
 8013c38:	e7e9      	b.n	8013c0e <__sflush_r+0xda>
 8013c3a:	bf00      	nop
 8013c3c:	20400001 	.word	0x20400001

08013c40 <_fflush_r>:
 8013c40:	b538      	push	{r3, r4, r5, lr}
 8013c42:	690b      	ldr	r3, [r1, #16]
 8013c44:	4605      	mov	r5, r0
 8013c46:	460c      	mov	r4, r1
 8013c48:	b913      	cbnz	r3, 8013c50 <_fflush_r+0x10>
 8013c4a:	2500      	movs	r5, #0
 8013c4c:	4628      	mov	r0, r5
 8013c4e:	bd38      	pop	{r3, r4, r5, pc}
 8013c50:	b118      	cbz	r0, 8013c5a <_fflush_r+0x1a>
 8013c52:	6983      	ldr	r3, [r0, #24]
 8013c54:	b90b      	cbnz	r3, 8013c5a <_fflush_r+0x1a>
 8013c56:	f000 f887 	bl	8013d68 <__sinit>
 8013c5a:	4b14      	ldr	r3, [pc, #80]	; (8013cac <_fflush_r+0x6c>)
 8013c5c:	429c      	cmp	r4, r3
 8013c5e:	d11b      	bne.n	8013c98 <_fflush_r+0x58>
 8013c60:	686c      	ldr	r4, [r5, #4]
 8013c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d0ef      	beq.n	8013c4a <_fflush_r+0xa>
 8013c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013c6c:	07d0      	lsls	r0, r2, #31
 8013c6e:	d404      	bmi.n	8013c7a <_fflush_r+0x3a>
 8013c70:	0599      	lsls	r1, r3, #22
 8013c72:	d402      	bmi.n	8013c7a <_fflush_r+0x3a>
 8013c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c76:	f000 f91a 	bl	8013eae <__retarget_lock_acquire_recursive>
 8013c7a:	4628      	mov	r0, r5
 8013c7c:	4621      	mov	r1, r4
 8013c7e:	f7ff ff59 	bl	8013b34 <__sflush_r>
 8013c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c84:	07da      	lsls	r2, r3, #31
 8013c86:	4605      	mov	r5, r0
 8013c88:	d4e0      	bmi.n	8013c4c <_fflush_r+0xc>
 8013c8a:	89a3      	ldrh	r3, [r4, #12]
 8013c8c:	059b      	lsls	r3, r3, #22
 8013c8e:	d4dd      	bmi.n	8013c4c <_fflush_r+0xc>
 8013c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c92:	f000 f90d 	bl	8013eb0 <__retarget_lock_release_recursive>
 8013c96:	e7d9      	b.n	8013c4c <_fflush_r+0xc>
 8013c98:	4b05      	ldr	r3, [pc, #20]	; (8013cb0 <_fflush_r+0x70>)
 8013c9a:	429c      	cmp	r4, r3
 8013c9c:	d101      	bne.n	8013ca2 <_fflush_r+0x62>
 8013c9e:	68ac      	ldr	r4, [r5, #8]
 8013ca0:	e7df      	b.n	8013c62 <_fflush_r+0x22>
 8013ca2:	4b04      	ldr	r3, [pc, #16]	; (8013cb4 <_fflush_r+0x74>)
 8013ca4:	429c      	cmp	r4, r3
 8013ca6:	bf08      	it	eq
 8013ca8:	68ec      	ldreq	r4, [r5, #12]
 8013caa:	e7da      	b.n	8013c62 <_fflush_r+0x22>
 8013cac:	08019854 	.word	0x08019854
 8013cb0:	08019874 	.word	0x08019874
 8013cb4:	08019834 	.word	0x08019834

08013cb8 <std>:
 8013cb8:	2300      	movs	r3, #0
 8013cba:	b510      	push	{r4, lr}
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8013cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013cc6:	6083      	str	r3, [r0, #8]
 8013cc8:	8181      	strh	r1, [r0, #12]
 8013cca:	6643      	str	r3, [r0, #100]	; 0x64
 8013ccc:	81c2      	strh	r2, [r0, #14]
 8013cce:	6183      	str	r3, [r0, #24]
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	2208      	movs	r2, #8
 8013cd4:	305c      	adds	r0, #92	; 0x5c
 8013cd6:	f7fe f969 	bl	8011fac <memset>
 8013cda:	4b05      	ldr	r3, [pc, #20]	; (8013cf0 <std+0x38>)
 8013cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8013cde:	4b05      	ldr	r3, [pc, #20]	; (8013cf4 <std+0x3c>)
 8013ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8013ce2:	4b05      	ldr	r3, [pc, #20]	; (8013cf8 <std+0x40>)
 8013ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013ce6:	4b05      	ldr	r3, [pc, #20]	; (8013cfc <std+0x44>)
 8013ce8:	6224      	str	r4, [r4, #32]
 8013cea:	6323      	str	r3, [r4, #48]	; 0x30
 8013cec:	bd10      	pop	{r4, pc}
 8013cee:	bf00      	nop
 8013cf0:	08014c71 	.word	0x08014c71
 8013cf4:	08014c93 	.word	0x08014c93
 8013cf8:	08014ccb 	.word	0x08014ccb
 8013cfc:	08014cef 	.word	0x08014cef

08013d00 <_cleanup_r>:
 8013d00:	4901      	ldr	r1, [pc, #4]	; (8013d08 <_cleanup_r+0x8>)
 8013d02:	f000 b8af 	b.w	8013e64 <_fwalk_reent>
 8013d06:	bf00      	nop
 8013d08:	08013c41 	.word	0x08013c41

08013d0c <__sfmoreglue>:
 8013d0c:	b570      	push	{r4, r5, r6, lr}
 8013d0e:	2268      	movs	r2, #104	; 0x68
 8013d10:	1e4d      	subs	r5, r1, #1
 8013d12:	4355      	muls	r5, r2
 8013d14:	460e      	mov	r6, r1
 8013d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d1a:	f000 fd57 	bl	80147cc <_malloc_r>
 8013d1e:	4604      	mov	r4, r0
 8013d20:	b140      	cbz	r0, 8013d34 <__sfmoreglue+0x28>
 8013d22:	2100      	movs	r1, #0
 8013d24:	e9c0 1600 	strd	r1, r6, [r0]
 8013d28:	300c      	adds	r0, #12
 8013d2a:	60a0      	str	r0, [r4, #8]
 8013d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013d30:	f7fe f93c 	bl	8011fac <memset>
 8013d34:	4620      	mov	r0, r4
 8013d36:	bd70      	pop	{r4, r5, r6, pc}

08013d38 <__sfp_lock_acquire>:
 8013d38:	4801      	ldr	r0, [pc, #4]	; (8013d40 <__sfp_lock_acquire+0x8>)
 8013d3a:	f000 b8b8 	b.w	8013eae <__retarget_lock_acquire_recursive>
 8013d3e:	bf00      	nop
 8013d40:	2400d251 	.word	0x2400d251

08013d44 <__sfp_lock_release>:
 8013d44:	4801      	ldr	r0, [pc, #4]	; (8013d4c <__sfp_lock_release+0x8>)
 8013d46:	f000 b8b3 	b.w	8013eb0 <__retarget_lock_release_recursive>
 8013d4a:	bf00      	nop
 8013d4c:	2400d251 	.word	0x2400d251

08013d50 <__sinit_lock_acquire>:
 8013d50:	4801      	ldr	r0, [pc, #4]	; (8013d58 <__sinit_lock_acquire+0x8>)
 8013d52:	f000 b8ac 	b.w	8013eae <__retarget_lock_acquire_recursive>
 8013d56:	bf00      	nop
 8013d58:	2400d252 	.word	0x2400d252

08013d5c <__sinit_lock_release>:
 8013d5c:	4801      	ldr	r0, [pc, #4]	; (8013d64 <__sinit_lock_release+0x8>)
 8013d5e:	f000 b8a7 	b.w	8013eb0 <__retarget_lock_release_recursive>
 8013d62:	bf00      	nop
 8013d64:	2400d252 	.word	0x2400d252

08013d68 <__sinit>:
 8013d68:	b510      	push	{r4, lr}
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	f7ff fff0 	bl	8013d50 <__sinit_lock_acquire>
 8013d70:	69a3      	ldr	r3, [r4, #24]
 8013d72:	b11b      	cbz	r3, 8013d7c <__sinit+0x14>
 8013d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d78:	f7ff bff0 	b.w	8013d5c <__sinit_lock_release>
 8013d7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d80:	6523      	str	r3, [r4, #80]	; 0x50
 8013d82:	4b13      	ldr	r3, [pc, #76]	; (8013dd0 <__sinit+0x68>)
 8013d84:	4a13      	ldr	r2, [pc, #76]	; (8013dd4 <__sinit+0x6c>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d8a:	42a3      	cmp	r3, r4
 8013d8c:	bf04      	itt	eq
 8013d8e:	2301      	moveq	r3, #1
 8013d90:	61a3      	streq	r3, [r4, #24]
 8013d92:	4620      	mov	r0, r4
 8013d94:	f000 f820 	bl	8013dd8 <__sfp>
 8013d98:	6060      	str	r0, [r4, #4]
 8013d9a:	4620      	mov	r0, r4
 8013d9c:	f000 f81c 	bl	8013dd8 <__sfp>
 8013da0:	60a0      	str	r0, [r4, #8]
 8013da2:	4620      	mov	r0, r4
 8013da4:	f000 f818 	bl	8013dd8 <__sfp>
 8013da8:	2200      	movs	r2, #0
 8013daa:	60e0      	str	r0, [r4, #12]
 8013dac:	2104      	movs	r1, #4
 8013dae:	6860      	ldr	r0, [r4, #4]
 8013db0:	f7ff ff82 	bl	8013cb8 <std>
 8013db4:	68a0      	ldr	r0, [r4, #8]
 8013db6:	2201      	movs	r2, #1
 8013db8:	2109      	movs	r1, #9
 8013dba:	f7ff ff7d 	bl	8013cb8 <std>
 8013dbe:	68e0      	ldr	r0, [r4, #12]
 8013dc0:	2202      	movs	r2, #2
 8013dc2:	2112      	movs	r1, #18
 8013dc4:	f7ff ff78 	bl	8013cb8 <std>
 8013dc8:	2301      	movs	r3, #1
 8013dca:	61a3      	str	r3, [r4, #24]
 8013dcc:	e7d2      	b.n	8013d74 <__sinit+0xc>
 8013dce:	bf00      	nop
 8013dd0:	080196a0 	.word	0x080196a0
 8013dd4:	08013d01 	.word	0x08013d01

08013dd8 <__sfp>:
 8013dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dda:	4607      	mov	r7, r0
 8013ddc:	f7ff ffac 	bl	8013d38 <__sfp_lock_acquire>
 8013de0:	4b1e      	ldr	r3, [pc, #120]	; (8013e5c <__sfp+0x84>)
 8013de2:	681e      	ldr	r6, [r3, #0]
 8013de4:	69b3      	ldr	r3, [r6, #24]
 8013de6:	b913      	cbnz	r3, 8013dee <__sfp+0x16>
 8013de8:	4630      	mov	r0, r6
 8013dea:	f7ff ffbd 	bl	8013d68 <__sinit>
 8013dee:	3648      	adds	r6, #72	; 0x48
 8013df0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013df4:	3b01      	subs	r3, #1
 8013df6:	d503      	bpl.n	8013e00 <__sfp+0x28>
 8013df8:	6833      	ldr	r3, [r6, #0]
 8013dfa:	b30b      	cbz	r3, 8013e40 <__sfp+0x68>
 8013dfc:	6836      	ldr	r6, [r6, #0]
 8013dfe:	e7f7      	b.n	8013df0 <__sfp+0x18>
 8013e00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e04:	b9d5      	cbnz	r5, 8013e3c <__sfp+0x64>
 8013e06:	4b16      	ldr	r3, [pc, #88]	; (8013e60 <__sfp+0x88>)
 8013e08:	60e3      	str	r3, [r4, #12]
 8013e0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013e0e:	6665      	str	r5, [r4, #100]	; 0x64
 8013e10:	f000 f84c 	bl	8013eac <__retarget_lock_init_recursive>
 8013e14:	f7ff ff96 	bl	8013d44 <__sfp_lock_release>
 8013e18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013e1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013e20:	6025      	str	r5, [r4, #0]
 8013e22:	61a5      	str	r5, [r4, #24]
 8013e24:	2208      	movs	r2, #8
 8013e26:	4629      	mov	r1, r5
 8013e28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e2c:	f7fe f8be 	bl	8011fac <memset>
 8013e30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e38:	4620      	mov	r0, r4
 8013e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e3c:	3468      	adds	r4, #104	; 0x68
 8013e3e:	e7d9      	b.n	8013df4 <__sfp+0x1c>
 8013e40:	2104      	movs	r1, #4
 8013e42:	4638      	mov	r0, r7
 8013e44:	f7ff ff62 	bl	8013d0c <__sfmoreglue>
 8013e48:	4604      	mov	r4, r0
 8013e4a:	6030      	str	r0, [r6, #0]
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	d1d5      	bne.n	8013dfc <__sfp+0x24>
 8013e50:	f7ff ff78 	bl	8013d44 <__sfp_lock_release>
 8013e54:	230c      	movs	r3, #12
 8013e56:	603b      	str	r3, [r7, #0]
 8013e58:	e7ee      	b.n	8013e38 <__sfp+0x60>
 8013e5a:	bf00      	nop
 8013e5c:	080196a0 	.word	0x080196a0
 8013e60:	ffff0001 	.word	0xffff0001

08013e64 <_fwalk_reent>:
 8013e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e68:	4606      	mov	r6, r0
 8013e6a:	4688      	mov	r8, r1
 8013e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e70:	2700      	movs	r7, #0
 8013e72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e76:	f1b9 0901 	subs.w	r9, r9, #1
 8013e7a:	d505      	bpl.n	8013e88 <_fwalk_reent+0x24>
 8013e7c:	6824      	ldr	r4, [r4, #0]
 8013e7e:	2c00      	cmp	r4, #0
 8013e80:	d1f7      	bne.n	8013e72 <_fwalk_reent+0xe>
 8013e82:	4638      	mov	r0, r7
 8013e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e88:	89ab      	ldrh	r3, [r5, #12]
 8013e8a:	2b01      	cmp	r3, #1
 8013e8c:	d907      	bls.n	8013e9e <_fwalk_reent+0x3a>
 8013e8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e92:	3301      	adds	r3, #1
 8013e94:	d003      	beq.n	8013e9e <_fwalk_reent+0x3a>
 8013e96:	4629      	mov	r1, r5
 8013e98:	4630      	mov	r0, r6
 8013e9a:	47c0      	blx	r8
 8013e9c:	4307      	orrs	r7, r0
 8013e9e:	3568      	adds	r5, #104	; 0x68
 8013ea0:	e7e9      	b.n	8013e76 <_fwalk_reent+0x12>
	...

08013ea4 <_localeconv_r>:
 8013ea4:	4800      	ldr	r0, [pc, #0]	; (8013ea8 <_localeconv_r+0x4>)
 8013ea6:	4770      	bx	lr
 8013ea8:	240004a8 	.word	0x240004a8

08013eac <__retarget_lock_init_recursive>:
 8013eac:	4770      	bx	lr

08013eae <__retarget_lock_acquire_recursive>:
 8013eae:	4770      	bx	lr

08013eb0 <__retarget_lock_release_recursive>:
 8013eb0:	4770      	bx	lr

08013eb2 <__swhatbuf_r>:
 8013eb2:	b570      	push	{r4, r5, r6, lr}
 8013eb4:	460e      	mov	r6, r1
 8013eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eba:	2900      	cmp	r1, #0
 8013ebc:	b096      	sub	sp, #88	; 0x58
 8013ebe:	4614      	mov	r4, r2
 8013ec0:	461d      	mov	r5, r3
 8013ec2:	da08      	bge.n	8013ed6 <__swhatbuf_r+0x24>
 8013ec4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013ec8:	2200      	movs	r2, #0
 8013eca:	602a      	str	r2, [r5, #0]
 8013ecc:	061a      	lsls	r2, r3, #24
 8013ece:	d410      	bmi.n	8013ef2 <__swhatbuf_r+0x40>
 8013ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ed4:	e00e      	b.n	8013ef4 <__swhatbuf_r+0x42>
 8013ed6:	466a      	mov	r2, sp
 8013ed8:	f000 ff30 	bl	8014d3c <_fstat_r>
 8013edc:	2800      	cmp	r0, #0
 8013ede:	dbf1      	blt.n	8013ec4 <__swhatbuf_r+0x12>
 8013ee0:	9a01      	ldr	r2, [sp, #4]
 8013ee2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ee6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013eea:	425a      	negs	r2, r3
 8013eec:	415a      	adcs	r2, r3
 8013eee:	602a      	str	r2, [r5, #0]
 8013ef0:	e7ee      	b.n	8013ed0 <__swhatbuf_r+0x1e>
 8013ef2:	2340      	movs	r3, #64	; 0x40
 8013ef4:	2000      	movs	r0, #0
 8013ef6:	6023      	str	r3, [r4, #0]
 8013ef8:	b016      	add	sp, #88	; 0x58
 8013efa:	bd70      	pop	{r4, r5, r6, pc}

08013efc <__smakebuf_r>:
 8013efc:	898b      	ldrh	r3, [r1, #12]
 8013efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f00:	079d      	lsls	r5, r3, #30
 8013f02:	4606      	mov	r6, r0
 8013f04:	460c      	mov	r4, r1
 8013f06:	d507      	bpl.n	8013f18 <__smakebuf_r+0x1c>
 8013f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f0c:	6023      	str	r3, [r4, #0]
 8013f0e:	6123      	str	r3, [r4, #16]
 8013f10:	2301      	movs	r3, #1
 8013f12:	6163      	str	r3, [r4, #20]
 8013f14:	b002      	add	sp, #8
 8013f16:	bd70      	pop	{r4, r5, r6, pc}
 8013f18:	ab01      	add	r3, sp, #4
 8013f1a:	466a      	mov	r2, sp
 8013f1c:	f7ff ffc9 	bl	8013eb2 <__swhatbuf_r>
 8013f20:	9900      	ldr	r1, [sp, #0]
 8013f22:	4605      	mov	r5, r0
 8013f24:	4630      	mov	r0, r6
 8013f26:	f000 fc51 	bl	80147cc <_malloc_r>
 8013f2a:	b948      	cbnz	r0, 8013f40 <__smakebuf_r+0x44>
 8013f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f30:	059a      	lsls	r2, r3, #22
 8013f32:	d4ef      	bmi.n	8013f14 <__smakebuf_r+0x18>
 8013f34:	f023 0303 	bic.w	r3, r3, #3
 8013f38:	f043 0302 	orr.w	r3, r3, #2
 8013f3c:	81a3      	strh	r3, [r4, #12]
 8013f3e:	e7e3      	b.n	8013f08 <__smakebuf_r+0xc>
 8013f40:	4b0d      	ldr	r3, [pc, #52]	; (8013f78 <__smakebuf_r+0x7c>)
 8013f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f44:	89a3      	ldrh	r3, [r4, #12]
 8013f46:	6020      	str	r0, [r4, #0]
 8013f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f4c:	81a3      	strh	r3, [r4, #12]
 8013f4e:	9b00      	ldr	r3, [sp, #0]
 8013f50:	6163      	str	r3, [r4, #20]
 8013f52:	9b01      	ldr	r3, [sp, #4]
 8013f54:	6120      	str	r0, [r4, #16]
 8013f56:	b15b      	cbz	r3, 8013f70 <__smakebuf_r+0x74>
 8013f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f5c:	4630      	mov	r0, r6
 8013f5e:	f000 feff 	bl	8014d60 <_isatty_r>
 8013f62:	b128      	cbz	r0, 8013f70 <__smakebuf_r+0x74>
 8013f64:	89a3      	ldrh	r3, [r4, #12]
 8013f66:	f023 0303 	bic.w	r3, r3, #3
 8013f6a:	f043 0301 	orr.w	r3, r3, #1
 8013f6e:	81a3      	strh	r3, [r4, #12]
 8013f70:	89a0      	ldrh	r0, [r4, #12]
 8013f72:	4305      	orrs	r5, r0
 8013f74:	81a5      	strh	r5, [r4, #12]
 8013f76:	e7cd      	b.n	8013f14 <__smakebuf_r+0x18>
 8013f78:	08013d01 	.word	0x08013d01

08013f7c <malloc>:
 8013f7c:	4b02      	ldr	r3, [pc, #8]	; (8013f88 <malloc+0xc>)
 8013f7e:	4601      	mov	r1, r0
 8013f80:	6818      	ldr	r0, [r3, #0]
 8013f82:	f000 bc23 	b.w	80147cc <_malloc_r>
 8013f86:	bf00      	nop
 8013f88:	24000354 	.word	0x24000354

08013f8c <memmove>:
 8013f8c:	4288      	cmp	r0, r1
 8013f8e:	b510      	push	{r4, lr}
 8013f90:	eb01 0402 	add.w	r4, r1, r2
 8013f94:	d902      	bls.n	8013f9c <memmove+0x10>
 8013f96:	4284      	cmp	r4, r0
 8013f98:	4623      	mov	r3, r4
 8013f9a:	d807      	bhi.n	8013fac <memmove+0x20>
 8013f9c:	1e43      	subs	r3, r0, #1
 8013f9e:	42a1      	cmp	r1, r4
 8013fa0:	d008      	beq.n	8013fb4 <memmove+0x28>
 8013fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013faa:	e7f8      	b.n	8013f9e <memmove+0x12>
 8013fac:	4402      	add	r2, r0
 8013fae:	4601      	mov	r1, r0
 8013fb0:	428a      	cmp	r2, r1
 8013fb2:	d100      	bne.n	8013fb6 <memmove+0x2a>
 8013fb4:	bd10      	pop	{r4, pc}
 8013fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013fbe:	e7f7      	b.n	8013fb0 <memmove+0x24>

08013fc0 <_Balloc>:
 8013fc0:	b570      	push	{r4, r5, r6, lr}
 8013fc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	460d      	mov	r5, r1
 8013fc8:	b976      	cbnz	r6, 8013fe8 <_Balloc+0x28>
 8013fca:	2010      	movs	r0, #16
 8013fcc:	f7ff ffd6 	bl	8013f7c <malloc>
 8013fd0:	4602      	mov	r2, r0
 8013fd2:	6260      	str	r0, [r4, #36]	; 0x24
 8013fd4:	b920      	cbnz	r0, 8013fe0 <_Balloc+0x20>
 8013fd6:	4b18      	ldr	r3, [pc, #96]	; (8014038 <_Balloc+0x78>)
 8013fd8:	4818      	ldr	r0, [pc, #96]	; (801403c <_Balloc+0x7c>)
 8013fda:	2166      	movs	r1, #102	; 0x66
 8013fdc:	f7fd ff7a 	bl	8011ed4 <__assert_func>
 8013fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013fe4:	6006      	str	r6, [r0, #0]
 8013fe6:	60c6      	str	r6, [r0, #12]
 8013fe8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013fea:	68f3      	ldr	r3, [r6, #12]
 8013fec:	b183      	cbz	r3, 8014010 <_Balloc+0x50>
 8013fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ff0:	68db      	ldr	r3, [r3, #12]
 8013ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013ff6:	b9b8      	cbnz	r0, 8014028 <_Balloc+0x68>
 8013ff8:	2101      	movs	r1, #1
 8013ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8013ffe:	1d72      	adds	r2, r6, #5
 8014000:	0092      	lsls	r2, r2, #2
 8014002:	4620      	mov	r0, r4
 8014004:	f000 fb60 	bl	80146c8 <_calloc_r>
 8014008:	b160      	cbz	r0, 8014024 <_Balloc+0x64>
 801400a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801400e:	e00e      	b.n	801402e <_Balloc+0x6e>
 8014010:	2221      	movs	r2, #33	; 0x21
 8014012:	2104      	movs	r1, #4
 8014014:	4620      	mov	r0, r4
 8014016:	f000 fb57 	bl	80146c8 <_calloc_r>
 801401a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801401c:	60f0      	str	r0, [r6, #12]
 801401e:	68db      	ldr	r3, [r3, #12]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d1e4      	bne.n	8013fee <_Balloc+0x2e>
 8014024:	2000      	movs	r0, #0
 8014026:	bd70      	pop	{r4, r5, r6, pc}
 8014028:	6802      	ldr	r2, [r0, #0]
 801402a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801402e:	2300      	movs	r3, #0
 8014030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014034:	e7f7      	b.n	8014026 <_Balloc+0x66>
 8014036:	bf00      	nop
 8014038:	080196e9 	.word	0x080196e9
 801403c:	08019894 	.word	0x08019894

08014040 <_Bfree>:
 8014040:	b570      	push	{r4, r5, r6, lr}
 8014042:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014044:	4605      	mov	r5, r0
 8014046:	460c      	mov	r4, r1
 8014048:	b976      	cbnz	r6, 8014068 <_Bfree+0x28>
 801404a:	2010      	movs	r0, #16
 801404c:	f7ff ff96 	bl	8013f7c <malloc>
 8014050:	4602      	mov	r2, r0
 8014052:	6268      	str	r0, [r5, #36]	; 0x24
 8014054:	b920      	cbnz	r0, 8014060 <_Bfree+0x20>
 8014056:	4b09      	ldr	r3, [pc, #36]	; (801407c <_Bfree+0x3c>)
 8014058:	4809      	ldr	r0, [pc, #36]	; (8014080 <_Bfree+0x40>)
 801405a:	218a      	movs	r1, #138	; 0x8a
 801405c:	f7fd ff3a 	bl	8011ed4 <__assert_func>
 8014060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014064:	6006      	str	r6, [r0, #0]
 8014066:	60c6      	str	r6, [r0, #12]
 8014068:	b13c      	cbz	r4, 801407a <_Bfree+0x3a>
 801406a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801406c:	6862      	ldr	r2, [r4, #4]
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014074:	6021      	str	r1, [r4, #0]
 8014076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801407a:	bd70      	pop	{r4, r5, r6, pc}
 801407c:	080196e9 	.word	0x080196e9
 8014080:	08019894 	.word	0x08019894

08014084 <__multadd>:
 8014084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014088:	690d      	ldr	r5, [r1, #16]
 801408a:	4607      	mov	r7, r0
 801408c:	460c      	mov	r4, r1
 801408e:	461e      	mov	r6, r3
 8014090:	f101 0c14 	add.w	ip, r1, #20
 8014094:	2000      	movs	r0, #0
 8014096:	f8dc 3000 	ldr.w	r3, [ip]
 801409a:	b299      	uxth	r1, r3
 801409c:	fb02 6101 	mla	r1, r2, r1, r6
 80140a0:	0c1e      	lsrs	r6, r3, #16
 80140a2:	0c0b      	lsrs	r3, r1, #16
 80140a4:	fb02 3306 	mla	r3, r2, r6, r3
 80140a8:	b289      	uxth	r1, r1
 80140aa:	3001      	adds	r0, #1
 80140ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80140b0:	4285      	cmp	r5, r0
 80140b2:	f84c 1b04 	str.w	r1, [ip], #4
 80140b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80140ba:	dcec      	bgt.n	8014096 <__multadd+0x12>
 80140bc:	b30e      	cbz	r6, 8014102 <__multadd+0x7e>
 80140be:	68a3      	ldr	r3, [r4, #8]
 80140c0:	42ab      	cmp	r3, r5
 80140c2:	dc19      	bgt.n	80140f8 <__multadd+0x74>
 80140c4:	6861      	ldr	r1, [r4, #4]
 80140c6:	4638      	mov	r0, r7
 80140c8:	3101      	adds	r1, #1
 80140ca:	f7ff ff79 	bl	8013fc0 <_Balloc>
 80140ce:	4680      	mov	r8, r0
 80140d0:	b928      	cbnz	r0, 80140de <__multadd+0x5a>
 80140d2:	4602      	mov	r2, r0
 80140d4:	4b0c      	ldr	r3, [pc, #48]	; (8014108 <__multadd+0x84>)
 80140d6:	480d      	ldr	r0, [pc, #52]	; (801410c <__multadd+0x88>)
 80140d8:	21b5      	movs	r1, #181	; 0xb5
 80140da:	f7fd fefb 	bl	8011ed4 <__assert_func>
 80140de:	6922      	ldr	r2, [r4, #16]
 80140e0:	3202      	adds	r2, #2
 80140e2:	f104 010c 	add.w	r1, r4, #12
 80140e6:	0092      	lsls	r2, r2, #2
 80140e8:	300c      	adds	r0, #12
 80140ea:	f7fd ff51 	bl	8011f90 <memcpy>
 80140ee:	4621      	mov	r1, r4
 80140f0:	4638      	mov	r0, r7
 80140f2:	f7ff ffa5 	bl	8014040 <_Bfree>
 80140f6:	4644      	mov	r4, r8
 80140f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80140fc:	3501      	adds	r5, #1
 80140fe:	615e      	str	r6, [r3, #20]
 8014100:	6125      	str	r5, [r4, #16]
 8014102:	4620      	mov	r0, r4
 8014104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014108:	08019820 	.word	0x08019820
 801410c:	08019894 	.word	0x08019894

08014110 <__hi0bits>:
 8014110:	0c03      	lsrs	r3, r0, #16
 8014112:	041b      	lsls	r3, r3, #16
 8014114:	b9d3      	cbnz	r3, 801414c <__hi0bits+0x3c>
 8014116:	0400      	lsls	r0, r0, #16
 8014118:	2310      	movs	r3, #16
 801411a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801411e:	bf04      	itt	eq
 8014120:	0200      	lsleq	r0, r0, #8
 8014122:	3308      	addeq	r3, #8
 8014124:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014128:	bf04      	itt	eq
 801412a:	0100      	lsleq	r0, r0, #4
 801412c:	3304      	addeq	r3, #4
 801412e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014132:	bf04      	itt	eq
 8014134:	0080      	lsleq	r0, r0, #2
 8014136:	3302      	addeq	r3, #2
 8014138:	2800      	cmp	r0, #0
 801413a:	db05      	blt.n	8014148 <__hi0bits+0x38>
 801413c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014140:	f103 0301 	add.w	r3, r3, #1
 8014144:	bf08      	it	eq
 8014146:	2320      	moveq	r3, #32
 8014148:	4618      	mov	r0, r3
 801414a:	4770      	bx	lr
 801414c:	2300      	movs	r3, #0
 801414e:	e7e4      	b.n	801411a <__hi0bits+0xa>

08014150 <__lo0bits>:
 8014150:	6803      	ldr	r3, [r0, #0]
 8014152:	f013 0207 	ands.w	r2, r3, #7
 8014156:	4601      	mov	r1, r0
 8014158:	d00b      	beq.n	8014172 <__lo0bits+0x22>
 801415a:	07da      	lsls	r2, r3, #31
 801415c:	d423      	bmi.n	80141a6 <__lo0bits+0x56>
 801415e:	0798      	lsls	r0, r3, #30
 8014160:	bf49      	itett	mi
 8014162:	085b      	lsrmi	r3, r3, #1
 8014164:	089b      	lsrpl	r3, r3, #2
 8014166:	2001      	movmi	r0, #1
 8014168:	600b      	strmi	r3, [r1, #0]
 801416a:	bf5c      	itt	pl
 801416c:	600b      	strpl	r3, [r1, #0]
 801416e:	2002      	movpl	r0, #2
 8014170:	4770      	bx	lr
 8014172:	b298      	uxth	r0, r3
 8014174:	b9a8      	cbnz	r0, 80141a2 <__lo0bits+0x52>
 8014176:	0c1b      	lsrs	r3, r3, #16
 8014178:	2010      	movs	r0, #16
 801417a:	b2da      	uxtb	r2, r3
 801417c:	b90a      	cbnz	r2, 8014182 <__lo0bits+0x32>
 801417e:	3008      	adds	r0, #8
 8014180:	0a1b      	lsrs	r3, r3, #8
 8014182:	071a      	lsls	r2, r3, #28
 8014184:	bf04      	itt	eq
 8014186:	091b      	lsreq	r3, r3, #4
 8014188:	3004      	addeq	r0, #4
 801418a:	079a      	lsls	r2, r3, #30
 801418c:	bf04      	itt	eq
 801418e:	089b      	lsreq	r3, r3, #2
 8014190:	3002      	addeq	r0, #2
 8014192:	07da      	lsls	r2, r3, #31
 8014194:	d403      	bmi.n	801419e <__lo0bits+0x4e>
 8014196:	085b      	lsrs	r3, r3, #1
 8014198:	f100 0001 	add.w	r0, r0, #1
 801419c:	d005      	beq.n	80141aa <__lo0bits+0x5a>
 801419e:	600b      	str	r3, [r1, #0]
 80141a0:	4770      	bx	lr
 80141a2:	4610      	mov	r0, r2
 80141a4:	e7e9      	b.n	801417a <__lo0bits+0x2a>
 80141a6:	2000      	movs	r0, #0
 80141a8:	4770      	bx	lr
 80141aa:	2020      	movs	r0, #32
 80141ac:	4770      	bx	lr
	...

080141b0 <__i2b>:
 80141b0:	b510      	push	{r4, lr}
 80141b2:	460c      	mov	r4, r1
 80141b4:	2101      	movs	r1, #1
 80141b6:	f7ff ff03 	bl	8013fc0 <_Balloc>
 80141ba:	4602      	mov	r2, r0
 80141bc:	b928      	cbnz	r0, 80141ca <__i2b+0x1a>
 80141be:	4b05      	ldr	r3, [pc, #20]	; (80141d4 <__i2b+0x24>)
 80141c0:	4805      	ldr	r0, [pc, #20]	; (80141d8 <__i2b+0x28>)
 80141c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80141c6:	f7fd fe85 	bl	8011ed4 <__assert_func>
 80141ca:	2301      	movs	r3, #1
 80141cc:	6144      	str	r4, [r0, #20]
 80141ce:	6103      	str	r3, [r0, #16]
 80141d0:	bd10      	pop	{r4, pc}
 80141d2:	bf00      	nop
 80141d4:	08019820 	.word	0x08019820
 80141d8:	08019894 	.word	0x08019894

080141dc <__multiply>:
 80141dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e0:	4691      	mov	r9, r2
 80141e2:	690a      	ldr	r2, [r1, #16]
 80141e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	bfb8      	it	lt
 80141ec:	460b      	movlt	r3, r1
 80141ee:	460c      	mov	r4, r1
 80141f0:	bfbc      	itt	lt
 80141f2:	464c      	movlt	r4, r9
 80141f4:	4699      	movlt	r9, r3
 80141f6:	6927      	ldr	r7, [r4, #16]
 80141f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80141fc:	68a3      	ldr	r3, [r4, #8]
 80141fe:	6861      	ldr	r1, [r4, #4]
 8014200:	eb07 060a 	add.w	r6, r7, sl
 8014204:	42b3      	cmp	r3, r6
 8014206:	b085      	sub	sp, #20
 8014208:	bfb8      	it	lt
 801420a:	3101      	addlt	r1, #1
 801420c:	f7ff fed8 	bl	8013fc0 <_Balloc>
 8014210:	b930      	cbnz	r0, 8014220 <__multiply+0x44>
 8014212:	4602      	mov	r2, r0
 8014214:	4b44      	ldr	r3, [pc, #272]	; (8014328 <__multiply+0x14c>)
 8014216:	4845      	ldr	r0, [pc, #276]	; (801432c <__multiply+0x150>)
 8014218:	f240 115d 	movw	r1, #349	; 0x15d
 801421c:	f7fd fe5a 	bl	8011ed4 <__assert_func>
 8014220:	f100 0514 	add.w	r5, r0, #20
 8014224:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014228:	462b      	mov	r3, r5
 801422a:	2200      	movs	r2, #0
 801422c:	4543      	cmp	r3, r8
 801422e:	d321      	bcc.n	8014274 <__multiply+0x98>
 8014230:	f104 0314 	add.w	r3, r4, #20
 8014234:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014238:	f109 0314 	add.w	r3, r9, #20
 801423c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014240:	9202      	str	r2, [sp, #8]
 8014242:	1b3a      	subs	r2, r7, r4
 8014244:	3a15      	subs	r2, #21
 8014246:	f022 0203 	bic.w	r2, r2, #3
 801424a:	3204      	adds	r2, #4
 801424c:	f104 0115 	add.w	r1, r4, #21
 8014250:	428f      	cmp	r7, r1
 8014252:	bf38      	it	cc
 8014254:	2204      	movcc	r2, #4
 8014256:	9201      	str	r2, [sp, #4]
 8014258:	9a02      	ldr	r2, [sp, #8]
 801425a:	9303      	str	r3, [sp, #12]
 801425c:	429a      	cmp	r2, r3
 801425e:	d80c      	bhi.n	801427a <__multiply+0x9e>
 8014260:	2e00      	cmp	r6, #0
 8014262:	dd03      	ble.n	801426c <__multiply+0x90>
 8014264:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014268:	2b00      	cmp	r3, #0
 801426a:	d05a      	beq.n	8014322 <__multiply+0x146>
 801426c:	6106      	str	r6, [r0, #16]
 801426e:	b005      	add	sp, #20
 8014270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014274:	f843 2b04 	str.w	r2, [r3], #4
 8014278:	e7d8      	b.n	801422c <__multiply+0x50>
 801427a:	f8b3 a000 	ldrh.w	sl, [r3]
 801427e:	f1ba 0f00 	cmp.w	sl, #0
 8014282:	d024      	beq.n	80142ce <__multiply+0xf2>
 8014284:	f104 0e14 	add.w	lr, r4, #20
 8014288:	46a9      	mov	r9, r5
 801428a:	f04f 0c00 	mov.w	ip, #0
 801428e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014292:	f8d9 1000 	ldr.w	r1, [r9]
 8014296:	fa1f fb82 	uxth.w	fp, r2
 801429a:	b289      	uxth	r1, r1
 801429c:	fb0a 110b 	mla	r1, sl, fp, r1
 80142a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80142a4:	f8d9 2000 	ldr.w	r2, [r9]
 80142a8:	4461      	add	r1, ip
 80142aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80142ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80142b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80142b6:	b289      	uxth	r1, r1
 80142b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80142bc:	4577      	cmp	r7, lr
 80142be:	f849 1b04 	str.w	r1, [r9], #4
 80142c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80142c6:	d8e2      	bhi.n	801428e <__multiply+0xb2>
 80142c8:	9a01      	ldr	r2, [sp, #4]
 80142ca:	f845 c002 	str.w	ip, [r5, r2]
 80142ce:	9a03      	ldr	r2, [sp, #12]
 80142d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80142d4:	3304      	adds	r3, #4
 80142d6:	f1b9 0f00 	cmp.w	r9, #0
 80142da:	d020      	beq.n	801431e <__multiply+0x142>
 80142dc:	6829      	ldr	r1, [r5, #0]
 80142de:	f104 0c14 	add.w	ip, r4, #20
 80142e2:	46ae      	mov	lr, r5
 80142e4:	f04f 0a00 	mov.w	sl, #0
 80142e8:	f8bc b000 	ldrh.w	fp, [ip]
 80142ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80142f0:	fb09 220b 	mla	r2, r9, fp, r2
 80142f4:	4492      	add	sl, r2
 80142f6:	b289      	uxth	r1, r1
 80142f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80142fc:	f84e 1b04 	str.w	r1, [lr], #4
 8014300:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014304:	f8be 1000 	ldrh.w	r1, [lr]
 8014308:	0c12      	lsrs	r2, r2, #16
 801430a:	fb09 1102 	mla	r1, r9, r2, r1
 801430e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014312:	4567      	cmp	r7, ip
 8014314:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014318:	d8e6      	bhi.n	80142e8 <__multiply+0x10c>
 801431a:	9a01      	ldr	r2, [sp, #4]
 801431c:	50a9      	str	r1, [r5, r2]
 801431e:	3504      	adds	r5, #4
 8014320:	e79a      	b.n	8014258 <__multiply+0x7c>
 8014322:	3e01      	subs	r6, #1
 8014324:	e79c      	b.n	8014260 <__multiply+0x84>
 8014326:	bf00      	nop
 8014328:	08019820 	.word	0x08019820
 801432c:	08019894 	.word	0x08019894

08014330 <__pow5mult>:
 8014330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014334:	4615      	mov	r5, r2
 8014336:	f012 0203 	ands.w	r2, r2, #3
 801433a:	4606      	mov	r6, r0
 801433c:	460f      	mov	r7, r1
 801433e:	d007      	beq.n	8014350 <__pow5mult+0x20>
 8014340:	4c25      	ldr	r4, [pc, #148]	; (80143d8 <__pow5mult+0xa8>)
 8014342:	3a01      	subs	r2, #1
 8014344:	2300      	movs	r3, #0
 8014346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801434a:	f7ff fe9b 	bl	8014084 <__multadd>
 801434e:	4607      	mov	r7, r0
 8014350:	10ad      	asrs	r5, r5, #2
 8014352:	d03d      	beq.n	80143d0 <__pow5mult+0xa0>
 8014354:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014356:	b97c      	cbnz	r4, 8014378 <__pow5mult+0x48>
 8014358:	2010      	movs	r0, #16
 801435a:	f7ff fe0f 	bl	8013f7c <malloc>
 801435e:	4602      	mov	r2, r0
 8014360:	6270      	str	r0, [r6, #36]	; 0x24
 8014362:	b928      	cbnz	r0, 8014370 <__pow5mult+0x40>
 8014364:	4b1d      	ldr	r3, [pc, #116]	; (80143dc <__pow5mult+0xac>)
 8014366:	481e      	ldr	r0, [pc, #120]	; (80143e0 <__pow5mult+0xb0>)
 8014368:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801436c:	f7fd fdb2 	bl	8011ed4 <__assert_func>
 8014370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014374:	6004      	str	r4, [r0, #0]
 8014376:	60c4      	str	r4, [r0, #12]
 8014378:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801437c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014380:	b94c      	cbnz	r4, 8014396 <__pow5mult+0x66>
 8014382:	f240 2171 	movw	r1, #625	; 0x271
 8014386:	4630      	mov	r0, r6
 8014388:	f7ff ff12 	bl	80141b0 <__i2b>
 801438c:	2300      	movs	r3, #0
 801438e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014392:	4604      	mov	r4, r0
 8014394:	6003      	str	r3, [r0, #0]
 8014396:	f04f 0900 	mov.w	r9, #0
 801439a:	07eb      	lsls	r3, r5, #31
 801439c:	d50a      	bpl.n	80143b4 <__pow5mult+0x84>
 801439e:	4639      	mov	r1, r7
 80143a0:	4622      	mov	r2, r4
 80143a2:	4630      	mov	r0, r6
 80143a4:	f7ff ff1a 	bl	80141dc <__multiply>
 80143a8:	4639      	mov	r1, r7
 80143aa:	4680      	mov	r8, r0
 80143ac:	4630      	mov	r0, r6
 80143ae:	f7ff fe47 	bl	8014040 <_Bfree>
 80143b2:	4647      	mov	r7, r8
 80143b4:	106d      	asrs	r5, r5, #1
 80143b6:	d00b      	beq.n	80143d0 <__pow5mult+0xa0>
 80143b8:	6820      	ldr	r0, [r4, #0]
 80143ba:	b938      	cbnz	r0, 80143cc <__pow5mult+0x9c>
 80143bc:	4622      	mov	r2, r4
 80143be:	4621      	mov	r1, r4
 80143c0:	4630      	mov	r0, r6
 80143c2:	f7ff ff0b 	bl	80141dc <__multiply>
 80143c6:	6020      	str	r0, [r4, #0]
 80143c8:	f8c0 9000 	str.w	r9, [r0]
 80143cc:	4604      	mov	r4, r0
 80143ce:	e7e4      	b.n	801439a <__pow5mult+0x6a>
 80143d0:	4638      	mov	r0, r7
 80143d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143d6:	bf00      	nop
 80143d8:	080199e0 	.word	0x080199e0
 80143dc:	080196e9 	.word	0x080196e9
 80143e0:	08019894 	.word	0x08019894

080143e4 <__lshift>:
 80143e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143e8:	460c      	mov	r4, r1
 80143ea:	6849      	ldr	r1, [r1, #4]
 80143ec:	6923      	ldr	r3, [r4, #16]
 80143ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80143f2:	68a3      	ldr	r3, [r4, #8]
 80143f4:	4607      	mov	r7, r0
 80143f6:	4691      	mov	r9, r2
 80143f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80143fc:	f108 0601 	add.w	r6, r8, #1
 8014400:	42b3      	cmp	r3, r6
 8014402:	db0b      	blt.n	801441c <__lshift+0x38>
 8014404:	4638      	mov	r0, r7
 8014406:	f7ff fddb 	bl	8013fc0 <_Balloc>
 801440a:	4605      	mov	r5, r0
 801440c:	b948      	cbnz	r0, 8014422 <__lshift+0x3e>
 801440e:	4602      	mov	r2, r0
 8014410:	4b2a      	ldr	r3, [pc, #168]	; (80144bc <__lshift+0xd8>)
 8014412:	482b      	ldr	r0, [pc, #172]	; (80144c0 <__lshift+0xdc>)
 8014414:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014418:	f7fd fd5c 	bl	8011ed4 <__assert_func>
 801441c:	3101      	adds	r1, #1
 801441e:	005b      	lsls	r3, r3, #1
 8014420:	e7ee      	b.n	8014400 <__lshift+0x1c>
 8014422:	2300      	movs	r3, #0
 8014424:	f100 0114 	add.w	r1, r0, #20
 8014428:	f100 0210 	add.w	r2, r0, #16
 801442c:	4618      	mov	r0, r3
 801442e:	4553      	cmp	r3, sl
 8014430:	db37      	blt.n	80144a2 <__lshift+0xbe>
 8014432:	6920      	ldr	r0, [r4, #16]
 8014434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014438:	f104 0314 	add.w	r3, r4, #20
 801443c:	f019 091f 	ands.w	r9, r9, #31
 8014440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014448:	d02f      	beq.n	80144aa <__lshift+0xc6>
 801444a:	f1c9 0e20 	rsb	lr, r9, #32
 801444e:	468a      	mov	sl, r1
 8014450:	f04f 0c00 	mov.w	ip, #0
 8014454:	681a      	ldr	r2, [r3, #0]
 8014456:	fa02 f209 	lsl.w	r2, r2, r9
 801445a:	ea42 020c 	orr.w	r2, r2, ip
 801445e:	f84a 2b04 	str.w	r2, [sl], #4
 8014462:	f853 2b04 	ldr.w	r2, [r3], #4
 8014466:	4298      	cmp	r0, r3
 8014468:	fa22 fc0e 	lsr.w	ip, r2, lr
 801446c:	d8f2      	bhi.n	8014454 <__lshift+0x70>
 801446e:	1b03      	subs	r3, r0, r4
 8014470:	3b15      	subs	r3, #21
 8014472:	f023 0303 	bic.w	r3, r3, #3
 8014476:	3304      	adds	r3, #4
 8014478:	f104 0215 	add.w	r2, r4, #21
 801447c:	4290      	cmp	r0, r2
 801447e:	bf38      	it	cc
 8014480:	2304      	movcc	r3, #4
 8014482:	f841 c003 	str.w	ip, [r1, r3]
 8014486:	f1bc 0f00 	cmp.w	ip, #0
 801448a:	d001      	beq.n	8014490 <__lshift+0xac>
 801448c:	f108 0602 	add.w	r6, r8, #2
 8014490:	3e01      	subs	r6, #1
 8014492:	4638      	mov	r0, r7
 8014494:	612e      	str	r6, [r5, #16]
 8014496:	4621      	mov	r1, r4
 8014498:	f7ff fdd2 	bl	8014040 <_Bfree>
 801449c:	4628      	mov	r0, r5
 801449e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80144a6:	3301      	adds	r3, #1
 80144a8:	e7c1      	b.n	801442e <__lshift+0x4a>
 80144aa:	3904      	subs	r1, #4
 80144ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80144b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80144b4:	4298      	cmp	r0, r3
 80144b6:	d8f9      	bhi.n	80144ac <__lshift+0xc8>
 80144b8:	e7ea      	b.n	8014490 <__lshift+0xac>
 80144ba:	bf00      	nop
 80144bc:	08019820 	.word	0x08019820
 80144c0:	08019894 	.word	0x08019894

080144c4 <__mcmp>:
 80144c4:	b530      	push	{r4, r5, lr}
 80144c6:	6902      	ldr	r2, [r0, #16]
 80144c8:	690c      	ldr	r4, [r1, #16]
 80144ca:	1b12      	subs	r2, r2, r4
 80144cc:	d10e      	bne.n	80144ec <__mcmp+0x28>
 80144ce:	f100 0314 	add.w	r3, r0, #20
 80144d2:	3114      	adds	r1, #20
 80144d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80144d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80144dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80144e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80144e4:	42a5      	cmp	r5, r4
 80144e6:	d003      	beq.n	80144f0 <__mcmp+0x2c>
 80144e8:	d305      	bcc.n	80144f6 <__mcmp+0x32>
 80144ea:	2201      	movs	r2, #1
 80144ec:	4610      	mov	r0, r2
 80144ee:	bd30      	pop	{r4, r5, pc}
 80144f0:	4283      	cmp	r3, r0
 80144f2:	d3f3      	bcc.n	80144dc <__mcmp+0x18>
 80144f4:	e7fa      	b.n	80144ec <__mcmp+0x28>
 80144f6:	f04f 32ff 	mov.w	r2, #4294967295
 80144fa:	e7f7      	b.n	80144ec <__mcmp+0x28>

080144fc <__mdiff>:
 80144fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014500:	460c      	mov	r4, r1
 8014502:	4606      	mov	r6, r0
 8014504:	4611      	mov	r1, r2
 8014506:	4620      	mov	r0, r4
 8014508:	4690      	mov	r8, r2
 801450a:	f7ff ffdb 	bl	80144c4 <__mcmp>
 801450e:	1e05      	subs	r5, r0, #0
 8014510:	d110      	bne.n	8014534 <__mdiff+0x38>
 8014512:	4629      	mov	r1, r5
 8014514:	4630      	mov	r0, r6
 8014516:	f7ff fd53 	bl	8013fc0 <_Balloc>
 801451a:	b930      	cbnz	r0, 801452a <__mdiff+0x2e>
 801451c:	4b3a      	ldr	r3, [pc, #232]	; (8014608 <__mdiff+0x10c>)
 801451e:	4602      	mov	r2, r0
 8014520:	f240 2132 	movw	r1, #562	; 0x232
 8014524:	4839      	ldr	r0, [pc, #228]	; (801460c <__mdiff+0x110>)
 8014526:	f7fd fcd5 	bl	8011ed4 <__assert_func>
 801452a:	2301      	movs	r3, #1
 801452c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014534:	bfa4      	itt	ge
 8014536:	4643      	movge	r3, r8
 8014538:	46a0      	movge	r8, r4
 801453a:	4630      	mov	r0, r6
 801453c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014540:	bfa6      	itte	ge
 8014542:	461c      	movge	r4, r3
 8014544:	2500      	movge	r5, #0
 8014546:	2501      	movlt	r5, #1
 8014548:	f7ff fd3a 	bl	8013fc0 <_Balloc>
 801454c:	b920      	cbnz	r0, 8014558 <__mdiff+0x5c>
 801454e:	4b2e      	ldr	r3, [pc, #184]	; (8014608 <__mdiff+0x10c>)
 8014550:	4602      	mov	r2, r0
 8014552:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014556:	e7e5      	b.n	8014524 <__mdiff+0x28>
 8014558:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801455c:	6926      	ldr	r6, [r4, #16]
 801455e:	60c5      	str	r5, [r0, #12]
 8014560:	f104 0914 	add.w	r9, r4, #20
 8014564:	f108 0514 	add.w	r5, r8, #20
 8014568:	f100 0e14 	add.w	lr, r0, #20
 801456c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014570:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014574:	f108 0210 	add.w	r2, r8, #16
 8014578:	46f2      	mov	sl, lr
 801457a:	2100      	movs	r1, #0
 801457c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014580:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014584:	fa1f f883 	uxth.w	r8, r3
 8014588:	fa11 f18b 	uxtah	r1, r1, fp
 801458c:	0c1b      	lsrs	r3, r3, #16
 801458e:	eba1 0808 	sub.w	r8, r1, r8
 8014592:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014596:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801459a:	fa1f f888 	uxth.w	r8, r8
 801459e:	1419      	asrs	r1, r3, #16
 80145a0:	454e      	cmp	r6, r9
 80145a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80145a6:	f84a 3b04 	str.w	r3, [sl], #4
 80145aa:	d8e7      	bhi.n	801457c <__mdiff+0x80>
 80145ac:	1b33      	subs	r3, r6, r4
 80145ae:	3b15      	subs	r3, #21
 80145b0:	f023 0303 	bic.w	r3, r3, #3
 80145b4:	3304      	adds	r3, #4
 80145b6:	3415      	adds	r4, #21
 80145b8:	42a6      	cmp	r6, r4
 80145ba:	bf38      	it	cc
 80145bc:	2304      	movcc	r3, #4
 80145be:	441d      	add	r5, r3
 80145c0:	4473      	add	r3, lr
 80145c2:	469e      	mov	lr, r3
 80145c4:	462e      	mov	r6, r5
 80145c6:	4566      	cmp	r6, ip
 80145c8:	d30e      	bcc.n	80145e8 <__mdiff+0xec>
 80145ca:	f10c 0203 	add.w	r2, ip, #3
 80145ce:	1b52      	subs	r2, r2, r5
 80145d0:	f022 0203 	bic.w	r2, r2, #3
 80145d4:	3d03      	subs	r5, #3
 80145d6:	45ac      	cmp	ip, r5
 80145d8:	bf38      	it	cc
 80145da:	2200      	movcc	r2, #0
 80145dc:	441a      	add	r2, r3
 80145de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80145e2:	b17b      	cbz	r3, 8014604 <__mdiff+0x108>
 80145e4:	6107      	str	r7, [r0, #16]
 80145e6:	e7a3      	b.n	8014530 <__mdiff+0x34>
 80145e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80145ec:	fa11 f288 	uxtah	r2, r1, r8
 80145f0:	1414      	asrs	r4, r2, #16
 80145f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80145f6:	b292      	uxth	r2, r2
 80145f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80145fc:	f84e 2b04 	str.w	r2, [lr], #4
 8014600:	1421      	asrs	r1, r4, #16
 8014602:	e7e0      	b.n	80145c6 <__mdiff+0xca>
 8014604:	3f01      	subs	r7, #1
 8014606:	e7ea      	b.n	80145de <__mdiff+0xe2>
 8014608:	08019820 	.word	0x08019820
 801460c:	08019894 	.word	0x08019894

08014610 <__d2b>:
 8014610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014614:	4689      	mov	r9, r1
 8014616:	2101      	movs	r1, #1
 8014618:	ec57 6b10 	vmov	r6, r7, d0
 801461c:	4690      	mov	r8, r2
 801461e:	f7ff fccf 	bl	8013fc0 <_Balloc>
 8014622:	4604      	mov	r4, r0
 8014624:	b930      	cbnz	r0, 8014634 <__d2b+0x24>
 8014626:	4602      	mov	r2, r0
 8014628:	4b25      	ldr	r3, [pc, #148]	; (80146c0 <__d2b+0xb0>)
 801462a:	4826      	ldr	r0, [pc, #152]	; (80146c4 <__d2b+0xb4>)
 801462c:	f240 310a 	movw	r1, #778	; 0x30a
 8014630:	f7fd fc50 	bl	8011ed4 <__assert_func>
 8014634:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801463c:	bb35      	cbnz	r5, 801468c <__d2b+0x7c>
 801463e:	2e00      	cmp	r6, #0
 8014640:	9301      	str	r3, [sp, #4]
 8014642:	d028      	beq.n	8014696 <__d2b+0x86>
 8014644:	4668      	mov	r0, sp
 8014646:	9600      	str	r6, [sp, #0]
 8014648:	f7ff fd82 	bl	8014150 <__lo0bits>
 801464c:	9900      	ldr	r1, [sp, #0]
 801464e:	b300      	cbz	r0, 8014692 <__d2b+0x82>
 8014650:	9a01      	ldr	r2, [sp, #4]
 8014652:	f1c0 0320 	rsb	r3, r0, #32
 8014656:	fa02 f303 	lsl.w	r3, r2, r3
 801465a:	430b      	orrs	r3, r1
 801465c:	40c2      	lsrs	r2, r0
 801465e:	6163      	str	r3, [r4, #20]
 8014660:	9201      	str	r2, [sp, #4]
 8014662:	9b01      	ldr	r3, [sp, #4]
 8014664:	61a3      	str	r3, [r4, #24]
 8014666:	2b00      	cmp	r3, #0
 8014668:	bf14      	ite	ne
 801466a:	2202      	movne	r2, #2
 801466c:	2201      	moveq	r2, #1
 801466e:	6122      	str	r2, [r4, #16]
 8014670:	b1d5      	cbz	r5, 80146a8 <__d2b+0x98>
 8014672:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014676:	4405      	add	r5, r0
 8014678:	f8c9 5000 	str.w	r5, [r9]
 801467c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014680:	f8c8 0000 	str.w	r0, [r8]
 8014684:	4620      	mov	r0, r4
 8014686:	b003      	add	sp, #12
 8014688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801468c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014690:	e7d5      	b.n	801463e <__d2b+0x2e>
 8014692:	6161      	str	r1, [r4, #20]
 8014694:	e7e5      	b.n	8014662 <__d2b+0x52>
 8014696:	a801      	add	r0, sp, #4
 8014698:	f7ff fd5a 	bl	8014150 <__lo0bits>
 801469c:	9b01      	ldr	r3, [sp, #4]
 801469e:	6163      	str	r3, [r4, #20]
 80146a0:	2201      	movs	r2, #1
 80146a2:	6122      	str	r2, [r4, #16]
 80146a4:	3020      	adds	r0, #32
 80146a6:	e7e3      	b.n	8014670 <__d2b+0x60>
 80146a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80146ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80146b0:	f8c9 0000 	str.w	r0, [r9]
 80146b4:	6918      	ldr	r0, [r3, #16]
 80146b6:	f7ff fd2b 	bl	8014110 <__hi0bits>
 80146ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80146be:	e7df      	b.n	8014680 <__d2b+0x70>
 80146c0:	08019820 	.word	0x08019820
 80146c4:	08019894 	.word	0x08019894

080146c8 <_calloc_r>:
 80146c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80146ca:	fba1 2402 	umull	r2, r4, r1, r2
 80146ce:	b94c      	cbnz	r4, 80146e4 <_calloc_r+0x1c>
 80146d0:	4611      	mov	r1, r2
 80146d2:	9201      	str	r2, [sp, #4]
 80146d4:	f000 f87a 	bl	80147cc <_malloc_r>
 80146d8:	9a01      	ldr	r2, [sp, #4]
 80146da:	4605      	mov	r5, r0
 80146dc:	b930      	cbnz	r0, 80146ec <_calloc_r+0x24>
 80146de:	4628      	mov	r0, r5
 80146e0:	b003      	add	sp, #12
 80146e2:	bd30      	pop	{r4, r5, pc}
 80146e4:	220c      	movs	r2, #12
 80146e6:	6002      	str	r2, [r0, #0]
 80146e8:	2500      	movs	r5, #0
 80146ea:	e7f8      	b.n	80146de <_calloc_r+0x16>
 80146ec:	4621      	mov	r1, r4
 80146ee:	f7fd fc5d 	bl	8011fac <memset>
 80146f2:	e7f4      	b.n	80146de <_calloc_r+0x16>

080146f4 <_free_r>:
 80146f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80146f6:	2900      	cmp	r1, #0
 80146f8:	d044      	beq.n	8014784 <_free_r+0x90>
 80146fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146fe:	9001      	str	r0, [sp, #4]
 8014700:	2b00      	cmp	r3, #0
 8014702:	f1a1 0404 	sub.w	r4, r1, #4
 8014706:	bfb8      	it	lt
 8014708:	18e4      	addlt	r4, r4, r3
 801470a:	f000 fb5d 	bl	8014dc8 <__malloc_lock>
 801470e:	4a1e      	ldr	r2, [pc, #120]	; (8014788 <_free_r+0x94>)
 8014710:	9801      	ldr	r0, [sp, #4]
 8014712:	6813      	ldr	r3, [r2, #0]
 8014714:	b933      	cbnz	r3, 8014724 <_free_r+0x30>
 8014716:	6063      	str	r3, [r4, #4]
 8014718:	6014      	str	r4, [r2, #0]
 801471a:	b003      	add	sp, #12
 801471c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014720:	f000 bb58 	b.w	8014dd4 <__malloc_unlock>
 8014724:	42a3      	cmp	r3, r4
 8014726:	d908      	bls.n	801473a <_free_r+0x46>
 8014728:	6825      	ldr	r5, [r4, #0]
 801472a:	1961      	adds	r1, r4, r5
 801472c:	428b      	cmp	r3, r1
 801472e:	bf01      	itttt	eq
 8014730:	6819      	ldreq	r1, [r3, #0]
 8014732:	685b      	ldreq	r3, [r3, #4]
 8014734:	1949      	addeq	r1, r1, r5
 8014736:	6021      	streq	r1, [r4, #0]
 8014738:	e7ed      	b.n	8014716 <_free_r+0x22>
 801473a:	461a      	mov	r2, r3
 801473c:	685b      	ldr	r3, [r3, #4]
 801473e:	b10b      	cbz	r3, 8014744 <_free_r+0x50>
 8014740:	42a3      	cmp	r3, r4
 8014742:	d9fa      	bls.n	801473a <_free_r+0x46>
 8014744:	6811      	ldr	r1, [r2, #0]
 8014746:	1855      	adds	r5, r2, r1
 8014748:	42a5      	cmp	r5, r4
 801474a:	d10b      	bne.n	8014764 <_free_r+0x70>
 801474c:	6824      	ldr	r4, [r4, #0]
 801474e:	4421      	add	r1, r4
 8014750:	1854      	adds	r4, r2, r1
 8014752:	42a3      	cmp	r3, r4
 8014754:	6011      	str	r1, [r2, #0]
 8014756:	d1e0      	bne.n	801471a <_free_r+0x26>
 8014758:	681c      	ldr	r4, [r3, #0]
 801475a:	685b      	ldr	r3, [r3, #4]
 801475c:	6053      	str	r3, [r2, #4]
 801475e:	4421      	add	r1, r4
 8014760:	6011      	str	r1, [r2, #0]
 8014762:	e7da      	b.n	801471a <_free_r+0x26>
 8014764:	d902      	bls.n	801476c <_free_r+0x78>
 8014766:	230c      	movs	r3, #12
 8014768:	6003      	str	r3, [r0, #0]
 801476a:	e7d6      	b.n	801471a <_free_r+0x26>
 801476c:	6825      	ldr	r5, [r4, #0]
 801476e:	1961      	adds	r1, r4, r5
 8014770:	428b      	cmp	r3, r1
 8014772:	bf04      	itt	eq
 8014774:	6819      	ldreq	r1, [r3, #0]
 8014776:	685b      	ldreq	r3, [r3, #4]
 8014778:	6063      	str	r3, [r4, #4]
 801477a:	bf04      	itt	eq
 801477c:	1949      	addeq	r1, r1, r5
 801477e:	6021      	streq	r1, [r4, #0]
 8014780:	6054      	str	r4, [r2, #4]
 8014782:	e7ca      	b.n	801471a <_free_r+0x26>
 8014784:	b003      	add	sp, #12
 8014786:	bd30      	pop	{r4, r5, pc}
 8014788:	2400d254 	.word	0x2400d254

0801478c <sbrk_aligned>:
 801478c:	b570      	push	{r4, r5, r6, lr}
 801478e:	4e0e      	ldr	r6, [pc, #56]	; (80147c8 <sbrk_aligned+0x3c>)
 8014790:	460c      	mov	r4, r1
 8014792:	6831      	ldr	r1, [r6, #0]
 8014794:	4605      	mov	r5, r0
 8014796:	b911      	cbnz	r1, 801479e <sbrk_aligned+0x12>
 8014798:	f000 fa16 	bl	8014bc8 <_sbrk_r>
 801479c:	6030      	str	r0, [r6, #0]
 801479e:	4621      	mov	r1, r4
 80147a0:	4628      	mov	r0, r5
 80147a2:	f000 fa11 	bl	8014bc8 <_sbrk_r>
 80147a6:	1c43      	adds	r3, r0, #1
 80147a8:	d00a      	beq.n	80147c0 <sbrk_aligned+0x34>
 80147aa:	1cc4      	adds	r4, r0, #3
 80147ac:	f024 0403 	bic.w	r4, r4, #3
 80147b0:	42a0      	cmp	r0, r4
 80147b2:	d007      	beq.n	80147c4 <sbrk_aligned+0x38>
 80147b4:	1a21      	subs	r1, r4, r0
 80147b6:	4628      	mov	r0, r5
 80147b8:	f000 fa06 	bl	8014bc8 <_sbrk_r>
 80147bc:	3001      	adds	r0, #1
 80147be:	d101      	bne.n	80147c4 <sbrk_aligned+0x38>
 80147c0:	f04f 34ff 	mov.w	r4, #4294967295
 80147c4:	4620      	mov	r0, r4
 80147c6:	bd70      	pop	{r4, r5, r6, pc}
 80147c8:	2400d258 	.word	0x2400d258

080147cc <_malloc_r>:
 80147cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147d0:	1ccd      	adds	r5, r1, #3
 80147d2:	f025 0503 	bic.w	r5, r5, #3
 80147d6:	3508      	adds	r5, #8
 80147d8:	2d0c      	cmp	r5, #12
 80147da:	bf38      	it	cc
 80147dc:	250c      	movcc	r5, #12
 80147de:	2d00      	cmp	r5, #0
 80147e0:	4607      	mov	r7, r0
 80147e2:	db01      	blt.n	80147e8 <_malloc_r+0x1c>
 80147e4:	42a9      	cmp	r1, r5
 80147e6:	d905      	bls.n	80147f4 <_malloc_r+0x28>
 80147e8:	230c      	movs	r3, #12
 80147ea:	603b      	str	r3, [r7, #0]
 80147ec:	2600      	movs	r6, #0
 80147ee:	4630      	mov	r0, r6
 80147f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147f4:	4e2e      	ldr	r6, [pc, #184]	; (80148b0 <_malloc_r+0xe4>)
 80147f6:	f000 fae7 	bl	8014dc8 <__malloc_lock>
 80147fa:	6833      	ldr	r3, [r6, #0]
 80147fc:	461c      	mov	r4, r3
 80147fe:	bb34      	cbnz	r4, 801484e <_malloc_r+0x82>
 8014800:	4629      	mov	r1, r5
 8014802:	4638      	mov	r0, r7
 8014804:	f7ff ffc2 	bl	801478c <sbrk_aligned>
 8014808:	1c43      	adds	r3, r0, #1
 801480a:	4604      	mov	r4, r0
 801480c:	d14d      	bne.n	80148aa <_malloc_r+0xde>
 801480e:	6834      	ldr	r4, [r6, #0]
 8014810:	4626      	mov	r6, r4
 8014812:	2e00      	cmp	r6, #0
 8014814:	d140      	bne.n	8014898 <_malloc_r+0xcc>
 8014816:	6823      	ldr	r3, [r4, #0]
 8014818:	4631      	mov	r1, r6
 801481a:	4638      	mov	r0, r7
 801481c:	eb04 0803 	add.w	r8, r4, r3
 8014820:	f000 f9d2 	bl	8014bc8 <_sbrk_r>
 8014824:	4580      	cmp	r8, r0
 8014826:	d13a      	bne.n	801489e <_malloc_r+0xd2>
 8014828:	6821      	ldr	r1, [r4, #0]
 801482a:	3503      	adds	r5, #3
 801482c:	1a6d      	subs	r5, r5, r1
 801482e:	f025 0503 	bic.w	r5, r5, #3
 8014832:	3508      	adds	r5, #8
 8014834:	2d0c      	cmp	r5, #12
 8014836:	bf38      	it	cc
 8014838:	250c      	movcc	r5, #12
 801483a:	4629      	mov	r1, r5
 801483c:	4638      	mov	r0, r7
 801483e:	f7ff ffa5 	bl	801478c <sbrk_aligned>
 8014842:	3001      	adds	r0, #1
 8014844:	d02b      	beq.n	801489e <_malloc_r+0xd2>
 8014846:	6823      	ldr	r3, [r4, #0]
 8014848:	442b      	add	r3, r5
 801484a:	6023      	str	r3, [r4, #0]
 801484c:	e00e      	b.n	801486c <_malloc_r+0xa0>
 801484e:	6822      	ldr	r2, [r4, #0]
 8014850:	1b52      	subs	r2, r2, r5
 8014852:	d41e      	bmi.n	8014892 <_malloc_r+0xc6>
 8014854:	2a0b      	cmp	r2, #11
 8014856:	d916      	bls.n	8014886 <_malloc_r+0xba>
 8014858:	1961      	adds	r1, r4, r5
 801485a:	42a3      	cmp	r3, r4
 801485c:	6025      	str	r5, [r4, #0]
 801485e:	bf18      	it	ne
 8014860:	6059      	strne	r1, [r3, #4]
 8014862:	6863      	ldr	r3, [r4, #4]
 8014864:	bf08      	it	eq
 8014866:	6031      	streq	r1, [r6, #0]
 8014868:	5162      	str	r2, [r4, r5]
 801486a:	604b      	str	r3, [r1, #4]
 801486c:	4638      	mov	r0, r7
 801486e:	f104 060b 	add.w	r6, r4, #11
 8014872:	f000 faaf 	bl	8014dd4 <__malloc_unlock>
 8014876:	f026 0607 	bic.w	r6, r6, #7
 801487a:	1d23      	adds	r3, r4, #4
 801487c:	1af2      	subs	r2, r6, r3
 801487e:	d0b6      	beq.n	80147ee <_malloc_r+0x22>
 8014880:	1b9b      	subs	r3, r3, r6
 8014882:	50a3      	str	r3, [r4, r2]
 8014884:	e7b3      	b.n	80147ee <_malloc_r+0x22>
 8014886:	6862      	ldr	r2, [r4, #4]
 8014888:	42a3      	cmp	r3, r4
 801488a:	bf0c      	ite	eq
 801488c:	6032      	streq	r2, [r6, #0]
 801488e:	605a      	strne	r2, [r3, #4]
 8014890:	e7ec      	b.n	801486c <_malloc_r+0xa0>
 8014892:	4623      	mov	r3, r4
 8014894:	6864      	ldr	r4, [r4, #4]
 8014896:	e7b2      	b.n	80147fe <_malloc_r+0x32>
 8014898:	4634      	mov	r4, r6
 801489a:	6876      	ldr	r6, [r6, #4]
 801489c:	e7b9      	b.n	8014812 <_malloc_r+0x46>
 801489e:	230c      	movs	r3, #12
 80148a0:	603b      	str	r3, [r7, #0]
 80148a2:	4638      	mov	r0, r7
 80148a4:	f000 fa96 	bl	8014dd4 <__malloc_unlock>
 80148a8:	e7a1      	b.n	80147ee <_malloc_r+0x22>
 80148aa:	6025      	str	r5, [r4, #0]
 80148ac:	e7de      	b.n	801486c <_malloc_r+0xa0>
 80148ae:	bf00      	nop
 80148b0:	2400d254 	.word	0x2400d254

080148b4 <_realloc_r>:
 80148b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148b8:	4680      	mov	r8, r0
 80148ba:	4614      	mov	r4, r2
 80148bc:	460e      	mov	r6, r1
 80148be:	b921      	cbnz	r1, 80148ca <_realloc_r+0x16>
 80148c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148c4:	4611      	mov	r1, r2
 80148c6:	f7ff bf81 	b.w	80147cc <_malloc_r>
 80148ca:	b92a      	cbnz	r2, 80148d8 <_realloc_r+0x24>
 80148cc:	f7ff ff12 	bl	80146f4 <_free_r>
 80148d0:	4625      	mov	r5, r4
 80148d2:	4628      	mov	r0, r5
 80148d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148d8:	f000 fa82 	bl	8014de0 <_malloc_usable_size_r>
 80148dc:	4284      	cmp	r4, r0
 80148de:	4607      	mov	r7, r0
 80148e0:	d802      	bhi.n	80148e8 <_realloc_r+0x34>
 80148e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80148e6:	d812      	bhi.n	801490e <_realloc_r+0x5a>
 80148e8:	4621      	mov	r1, r4
 80148ea:	4640      	mov	r0, r8
 80148ec:	f7ff ff6e 	bl	80147cc <_malloc_r>
 80148f0:	4605      	mov	r5, r0
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d0ed      	beq.n	80148d2 <_realloc_r+0x1e>
 80148f6:	42bc      	cmp	r4, r7
 80148f8:	4622      	mov	r2, r4
 80148fa:	4631      	mov	r1, r6
 80148fc:	bf28      	it	cs
 80148fe:	463a      	movcs	r2, r7
 8014900:	f7fd fb46 	bl	8011f90 <memcpy>
 8014904:	4631      	mov	r1, r6
 8014906:	4640      	mov	r0, r8
 8014908:	f7ff fef4 	bl	80146f4 <_free_r>
 801490c:	e7e1      	b.n	80148d2 <_realloc_r+0x1e>
 801490e:	4635      	mov	r5, r6
 8014910:	e7df      	b.n	80148d2 <_realloc_r+0x1e>

08014912 <__ssputs_r>:
 8014912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014916:	688e      	ldr	r6, [r1, #8]
 8014918:	429e      	cmp	r6, r3
 801491a:	4682      	mov	sl, r0
 801491c:	460c      	mov	r4, r1
 801491e:	4690      	mov	r8, r2
 8014920:	461f      	mov	r7, r3
 8014922:	d838      	bhi.n	8014996 <__ssputs_r+0x84>
 8014924:	898a      	ldrh	r2, [r1, #12]
 8014926:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801492a:	d032      	beq.n	8014992 <__ssputs_r+0x80>
 801492c:	6825      	ldr	r5, [r4, #0]
 801492e:	6909      	ldr	r1, [r1, #16]
 8014930:	eba5 0901 	sub.w	r9, r5, r1
 8014934:	6965      	ldr	r5, [r4, #20]
 8014936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801493a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801493e:	3301      	adds	r3, #1
 8014940:	444b      	add	r3, r9
 8014942:	106d      	asrs	r5, r5, #1
 8014944:	429d      	cmp	r5, r3
 8014946:	bf38      	it	cc
 8014948:	461d      	movcc	r5, r3
 801494a:	0553      	lsls	r3, r2, #21
 801494c:	d531      	bpl.n	80149b2 <__ssputs_r+0xa0>
 801494e:	4629      	mov	r1, r5
 8014950:	f7ff ff3c 	bl	80147cc <_malloc_r>
 8014954:	4606      	mov	r6, r0
 8014956:	b950      	cbnz	r0, 801496e <__ssputs_r+0x5c>
 8014958:	230c      	movs	r3, #12
 801495a:	f8ca 3000 	str.w	r3, [sl]
 801495e:	89a3      	ldrh	r3, [r4, #12]
 8014960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014964:	81a3      	strh	r3, [r4, #12]
 8014966:	f04f 30ff 	mov.w	r0, #4294967295
 801496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801496e:	6921      	ldr	r1, [r4, #16]
 8014970:	464a      	mov	r2, r9
 8014972:	f7fd fb0d 	bl	8011f90 <memcpy>
 8014976:	89a3      	ldrh	r3, [r4, #12]
 8014978:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801497c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014980:	81a3      	strh	r3, [r4, #12]
 8014982:	6126      	str	r6, [r4, #16]
 8014984:	6165      	str	r5, [r4, #20]
 8014986:	444e      	add	r6, r9
 8014988:	eba5 0509 	sub.w	r5, r5, r9
 801498c:	6026      	str	r6, [r4, #0]
 801498e:	60a5      	str	r5, [r4, #8]
 8014990:	463e      	mov	r6, r7
 8014992:	42be      	cmp	r6, r7
 8014994:	d900      	bls.n	8014998 <__ssputs_r+0x86>
 8014996:	463e      	mov	r6, r7
 8014998:	6820      	ldr	r0, [r4, #0]
 801499a:	4632      	mov	r2, r6
 801499c:	4641      	mov	r1, r8
 801499e:	f7ff faf5 	bl	8013f8c <memmove>
 80149a2:	68a3      	ldr	r3, [r4, #8]
 80149a4:	1b9b      	subs	r3, r3, r6
 80149a6:	60a3      	str	r3, [r4, #8]
 80149a8:	6823      	ldr	r3, [r4, #0]
 80149aa:	4433      	add	r3, r6
 80149ac:	6023      	str	r3, [r4, #0]
 80149ae:	2000      	movs	r0, #0
 80149b0:	e7db      	b.n	801496a <__ssputs_r+0x58>
 80149b2:	462a      	mov	r2, r5
 80149b4:	f7ff ff7e 	bl	80148b4 <_realloc_r>
 80149b8:	4606      	mov	r6, r0
 80149ba:	2800      	cmp	r0, #0
 80149bc:	d1e1      	bne.n	8014982 <__ssputs_r+0x70>
 80149be:	6921      	ldr	r1, [r4, #16]
 80149c0:	4650      	mov	r0, sl
 80149c2:	f7ff fe97 	bl	80146f4 <_free_r>
 80149c6:	e7c7      	b.n	8014958 <__ssputs_r+0x46>

080149c8 <_svfiprintf_r>:
 80149c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149cc:	4698      	mov	r8, r3
 80149ce:	898b      	ldrh	r3, [r1, #12]
 80149d0:	061b      	lsls	r3, r3, #24
 80149d2:	b09d      	sub	sp, #116	; 0x74
 80149d4:	4607      	mov	r7, r0
 80149d6:	460d      	mov	r5, r1
 80149d8:	4614      	mov	r4, r2
 80149da:	d50e      	bpl.n	80149fa <_svfiprintf_r+0x32>
 80149dc:	690b      	ldr	r3, [r1, #16]
 80149de:	b963      	cbnz	r3, 80149fa <_svfiprintf_r+0x32>
 80149e0:	2140      	movs	r1, #64	; 0x40
 80149e2:	f7ff fef3 	bl	80147cc <_malloc_r>
 80149e6:	6028      	str	r0, [r5, #0]
 80149e8:	6128      	str	r0, [r5, #16]
 80149ea:	b920      	cbnz	r0, 80149f6 <_svfiprintf_r+0x2e>
 80149ec:	230c      	movs	r3, #12
 80149ee:	603b      	str	r3, [r7, #0]
 80149f0:	f04f 30ff 	mov.w	r0, #4294967295
 80149f4:	e0d1      	b.n	8014b9a <_svfiprintf_r+0x1d2>
 80149f6:	2340      	movs	r3, #64	; 0x40
 80149f8:	616b      	str	r3, [r5, #20]
 80149fa:	2300      	movs	r3, #0
 80149fc:	9309      	str	r3, [sp, #36]	; 0x24
 80149fe:	2320      	movs	r3, #32
 8014a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a08:	2330      	movs	r3, #48	; 0x30
 8014a0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014bb4 <_svfiprintf_r+0x1ec>
 8014a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a12:	f04f 0901 	mov.w	r9, #1
 8014a16:	4623      	mov	r3, r4
 8014a18:	469a      	mov	sl, r3
 8014a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a1e:	b10a      	cbz	r2, 8014a24 <_svfiprintf_r+0x5c>
 8014a20:	2a25      	cmp	r2, #37	; 0x25
 8014a22:	d1f9      	bne.n	8014a18 <_svfiprintf_r+0x50>
 8014a24:	ebba 0b04 	subs.w	fp, sl, r4
 8014a28:	d00b      	beq.n	8014a42 <_svfiprintf_r+0x7a>
 8014a2a:	465b      	mov	r3, fp
 8014a2c:	4622      	mov	r2, r4
 8014a2e:	4629      	mov	r1, r5
 8014a30:	4638      	mov	r0, r7
 8014a32:	f7ff ff6e 	bl	8014912 <__ssputs_r>
 8014a36:	3001      	adds	r0, #1
 8014a38:	f000 80aa 	beq.w	8014b90 <_svfiprintf_r+0x1c8>
 8014a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a3e:	445a      	add	r2, fp
 8014a40:	9209      	str	r2, [sp, #36]	; 0x24
 8014a42:	f89a 3000 	ldrb.w	r3, [sl]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	f000 80a2 	beq.w	8014b90 <_svfiprintf_r+0x1c8>
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8014a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a56:	f10a 0a01 	add.w	sl, sl, #1
 8014a5a:	9304      	str	r3, [sp, #16]
 8014a5c:	9307      	str	r3, [sp, #28]
 8014a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a62:	931a      	str	r3, [sp, #104]	; 0x68
 8014a64:	4654      	mov	r4, sl
 8014a66:	2205      	movs	r2, #5
 8014a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a6c:	4851      	ldr	r0, [pc, #324]	; (8014bb4 <_svfiprintf_r+0x1ec>)
 8014a6e:	f7eb fc9f 	bl	80003b0 <memchr>
 8014a72:	9a04      	ldr	r2, [sp, #16]
 8014a74:	b9d8      	cbnz	r0, 8014aae <_svfiprintf_r+0xe6>
 8014a76:	06d0      	lsls	r0, r2, #27
 8014a78:	bf44      	itt	mi
 8014a7a:	2320      	movmi	r3, #32
 8014a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a80:	0711      	lsls	r1, r2, #28
 8014a82:	bf44      	itt	mi
 8014a84:	232b      	movmi	r3, #43	; 0x2b
 8014a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8014a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8014a90:	d015      	beq.n	8014abe <_svfiprintf_r+0xf6>
 8014a92:	9a07      	ldr	r2, [sp, #28]
 8014a94:	4654      	mov	r4, sl
 8014a96:	2000      	movs	r0, #0
 8014a98:	f04f 0c0a 	mov.w	ip, #10
 8014a9c:	4621      	mov	r1, r4
 8014a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014aa2:	3b30      	subs	r3, #48	; 0x30
 8014aa4:	2b09      	cmp	r3, #9
 8014aa6:	d94e      	bls.n	8014b46 <_svfiprintf_r+0x17e>
 8014aa8:	b1b0      	cbz	r0, 8014ad8 <_svfiprintf_r+0x110>
 8014aaa:	9207      	str	r2, [sp, #28]
 8014aac:	e014      	b.n	8014ad8 <_svfiprintf_r+0x110>
 8014aae:	eba0 0308 	sub.w	r3, r0, r8
 8014ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8014ab6:	4313      	orrs	r3, r2
 8014ab8:	9304      	str	r3, [sp, #16]
 8014aba:	46a2      	mov	sl, r4
 8014abc:	e7d2      	b.n	8014a64 <_svfiprintf_r+0x9c>
 8014abe:	9b03      	ldr	r3, [sp, #12]
 8014ac0:	1d19      	adds	r1, r3, #4
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	9103      	str	r1, [sp, #12]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	bfbb      	ittet	lt
 8014aca:	425b      	neglt	r3, r3
 8014acc:	f042 0202 	orrlt.w	r2, r2, #2
 8014ad0:	9307      	strge	r3, [sp, #28]
 8014ad2:	9307      	strlt	r3, [sp, #28]
 8014ad4:	bfb8      	it	lt
 8014ad6:	9204      	strlt	r2, [sp, #16]
 8014ad8:	7823      	ldrb	r3, [r4, #0]
 8014ada:	2b2e      	cmp	r3, #46	; 0x2e
 8014adc:	d10c      	bne.n	8014af8 <_svfiprintf_r+0x130>
 8014ade:	7863      	ldrb	r3, [r4, #1]
 8014ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8014ae2:	d135      	bne.n	8014b50 <_svfiprintf_r+0x188>
 8014ae4:	9b03      	ldr	r3, [sp, #12]
 8014ae6:	1d1a      	adds	r2, r3, #4
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	9203      	str	r2, [sp, #12]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	bfb8      	it	lt
 8014af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8014af4:	3402      	adds	r4, #2
 8014af6:	9305      	str	r3, [sp, #20]
 8014af8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014bc4 <_svfiprintf_r+0x1fc>
 8014afc:	7821      	ldrb	r1, [r4, #0]
 8014afe:	2203      	movs	r2, #3
 8014b00:	4650      	mov	r0, sl
 8014b02:	f7eb fc55 	bl	80003b0 <memchr>
 8014b06:	b140      	cbz	r0, 8014b1a <_svfiprintf_r+0x152>
 8014b08:	2340      	movs	r3, #64	; 0x40
 8014b0a:	eba0 000a 	sub.w	r0, r0, sl
 8014b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8014b12:	9b04      	ldr	r3, [sp, #16]
 8014b14:	4303      	orrs	r3, r0
 8014b16:	3401      	adds	r4, #1
 8014b18:	9304      	str	r3, [sp, #16]
 8014b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b1e:	4826      	ldr	r0, [pc, #152]	; (8014bb8 <_svfiprintf_r+0x1f0>)
 8014b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b24:	2206      	movs	r2, #6
 8014b26:	f7eb fc43 	bl	80003b0 <memchr>
 8014b2a:	2800      	cmp	r0, #0
 8014b2c:	d038      	beq.n	8014ba0 <_svfiprintf_r+0x1d8>
 8014b2e:	4b23      	ldr	r3, [pc, #140]	; (8014bbc <_svfiprintf_r+0x1f4>)
 8014b30:	bb1b      	cbnz	r3, 8014b7a <_svfiprintf_r+0x1b2>
 8014b32:	9b03      	ldr	r3, [sp, #12]
 8014b34:	3307      	adds	r3, #7
 8014b36:	f023 0307 	bic.w	r3, r3, #7
 8014b3a:	3308      	adds	r3, #8
 8014b3c:	9303      	str	r3, [sp, #12]
 8014b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b40:	4433      	add	r3, r6
 8014b42:	9309      	str	r3, [sp, #36]	; 0x24
 8014b44:	e767      	b.n	8014a16 <_svfiprintf_r+0x4e>
 8014b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b4a:	460c      	mov	r4, r1
 8014b4c:	2001      	movs	r0, #1
 8014b4e:	e7a5      	b.n	8014a9c <_svfiprintf_r+0xd4>
 8014b50:	2300      	movs	r3, #0
 8014b52:	3401      	adds	r4, #1
 8014b54:	9305      	str	r3, [sp, #20]
 8014b56:	4619      	mov	r1, r3
 8014b58:	f04f 0c0a 	mov.w	ip, #10
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b62:	3a30      	subs	r2, #48	; 0x30
 8014b64:	2a09      	cmp	r2, #9
 8014b66:	d903      	bls.n	8014b70 <_svfiprintf_r+0x1a8>
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d0c5      	beq.n	8014af8 <_svfiprintf_r+0x130>
 8014b6c:	9105      	str	r1, [sp, #20]
 8014b6e:	e7c3      	b.n	8014af8 <_svfiprintf_r+0x130>
 8014b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b74:	4604      	mov	r4, r0
 8014b76:	2301      	movs	r3, #1
 8014b78:	e7f0      	b.n	8014b5c <_svfiprintf_r+0x194>
 8014b7a:	ab03      	add	r3, sp, #12
 8014b7c:	9300      	str	r3, [sp, #0]
 8014b7e:	462a      	mov	r2, r5
 8014b80:	4b0f      	ldr	r3, [pc, #60]	; (8014bc0 <_svfiprintf_r+0x1f8>)
 8014b82:	a904      	add	r1, sp, #16
 8014b84:	4638      	mov	r0, r7
 8014b86:	f7fd fc03 	bl	8012390 <_printf_float>
 8014b8a:	1c42      	adds	r2, r0, #1
 8014b8c:	4606      	mov	r6, r0
 8014b8e:	d1d6      	bne.n	8014b3e <_svfiprintf_r+0x176>
 8014b90:	89ab      	ldrh	r3, [r5, #12]
 8014b92:	065b      	lsls	r3, r3, #25
 8014b94:	f53f af2c 	bmi.w	80149f0 <_svfiprintf_r+0x28>
 8014b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b9a:	b01d      	add	sp, #116	; 0x74
 8014b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba0:	ab03      	add	r3, sp, #12
 8014ba2:	9300      	str	r3, [sp, #0]
 8014ba4:	462a      	mov	r2, r5
 8014ba6:	4b06      	ldr	r3, [pc, #24]	; (8014bc0 <_svfiprintf_r+0x1f8>)
 8014ba8:	a904      	add	r1, sp, #16
 8014baa:	4638      	mov	r0, r7
 8014bac:	f7fd fe7c 	bl	80128a8 <_printf_i>
 8014bb0:	e7eb      	b.n	8014b8a <_svfiprintf_r+0x1c2>
 8014bb2:	bf00      	nop
 8014bb4:	080196a4 	.word	0x080196a4
 8014bb8:	080196ae 	.word	0x080196ae
 8014bbc:	08012391 	.word	0x08012391
 8014bc0:	08014913 	.word	0x08014913
 8014bc4:	080196aa 	.word	0x080196aa

08014bc8 <_sbrk_r>:
 8014bc8:	b538      	push	{r3, r4, r5, lr}
 8014bca:	4d06      	ldr	r5, [pc, #24]	; (8014be4 <_sbrk_r+0x1c>)
 8014bcc:	2300      	movs	r3, #0
 8014bce:	4604      	mov	r4, r0
 8014bd0:	4608      	mov	r0, r1
 8014bd2:	602b      	str	r3, [r5, #0]
 8014bd4:	f7f2 f97e 	bl	8006ed4 <_sbrk>
 8014bd8:	1c43      	adds	r3, r0, #1
 8014bda:	d102      	bne.n	8014be2 <_sbrk_r+0x1a>
 8014bdc:	682b      	ldr	r3, [r5, #0]
 8014bde:	b103      	cbz	r3, 8014be2 <_sbrk_r+0x1a>
 8014be0:	6023      	str	r3, [r4, #0]
 8014be2:	bd38      	pop	{r3, r4, r5, pc}
 8014be4:	2400d25c 	.word	0x2400d25c

08014be8 <_raise_r>:
 8014be8:	291f      	cmp	r1, #31
 8014bea:	b538      	push	{r3, r4, r5, lr}
 8014bec:	4604      	mov	r4, r0
 8014bee:	460d      	mov	r5, r1
 8014bf0:	d904      	bls.n	8014bfc <_raise_r+0x14>
 8014bf2:	2316      	movs	r3, #22
 8014bf4:	6003      	str	r3, [r0, #0]
 8014bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8014bfa:	bd38      	pop	{r3, r4, r5, pc}
 8014bfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014bfe:	b112      	cbz	r2, 8014c06 <_raise_r+0x1e>
 8014c00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c04:	b94b      	cbnz	r3, 8014c1a <_raise_r+0x32>
 8014c06:	4620      	mov	r0, r4
 8014c08:	f000 f830 	bl	8014c6c <_getpid_r>
 8014c0c:	462a      	mov	r2, r5
 8014c0e:	4601      	mov	r1, r0
 8014c10:	4620      	mov	r0, r4
 8014c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c16:	f000 b817 	b.w	8014c48 <_kill_r>
 8014c1a:	2b01      	cmp	r3, #1
 8014c1c:	d00a      	beq.n	8014c34 <_raise_r+0x4c>
 8014c1e:	1c59      	adds	r1, r3, #1
 8014c20:	d103      	bne.n	8014c2a <_raise_r+0x42>
 8014c22:	2316      	movs	r3, #22
 8014c24:	6003      	str	r3, [r0, #0]
 8014c26:	2001      	movs	r0, #1
 8014c28:	e7e7      	b.n	8014bfa <_raise_r+0x12>
 8014c2a:	2400      	movs	r4, #0
 8014c2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c30:	4628      	mov	r0, r5
 8014c32:	4798      	blx	r3
 8014c34:	2000      	movs	r0, #0
 8014c36:	e7e0      	b.n	8014bfa <_raise_r+0x12>

08014c38 <raise>:
 8014c38:	4b02      	ldr	r3, [pc, #8]	; (8014c44 <raise+0xc>)
 8014c3a:	4601      	mov	r1, r0
 8014c3c:	6818      	ldr	r0, [r3, #0]
 8014c3e:	f7ff bfd3 	b.w	8014be8 <_raise_r>
 8014c42:	bf00      	nop
 8014c44:	24000354 	.word	0x24000354

08014c48 <_kill_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	4d07      	ldr	r5, [pc, #28]	; (8014c68 <_kill_r+0x20>)
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	4604      	mov	r4, r0
 8014c50:	4608      	mov	r0, r1
 8014c52:	4611      	mov	r1, r2
 8014c54:	602b      	str	r3, [r5, #0]
 8014c56:	f7f2 f903 	bl	8006e60 <_kill>
 8014c5a:	1c43      	adds	r3, r0, #1
 8014c5c:	d102      	bne.n	8014c64 <_kill_r+0x1c>
 8014c5e:	682b      	ldr	r3, [r5, #0]
 8014c60:	b103      	cbz	r3, 8014c64 <_kill_r+0x1c>
 8014c62:	6023      	str	r3, [r4, #0]
 8014c64:	bd38      	pop	{r3, r4, r5, pc}
 8014c66:	bf00      	nop
 8014c68:	2400d25c 	.word	0x2400d25c

08014c6c <_getpid_r>:
 8014c6c:	f7f2 b8f6 	b.w	8006e5c <_getpid>

08014c70 <__sread>:
 8014c70:	b510      	push	{r4, lr}
 8014c72:	460c      	mov	r4, r1
 8014c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c78:	f000 f8ba 	bl	8014df0 <_read_r>
 8014c7c:	2800      	cmp	r0, #0
 8014c7e:	bfab      	itete	ge
 8014c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c82:	89a3      	ldrhlt	r3, [r4, #12]
 8014c84:	181b      	addge	r3, r3, r0
 8014c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c8a:	bfac      	ite	ge
 8014c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c8e:	81a3      	strhlt	r3, [r4, #12]
 8014c90:	bd10      	pop	{r4, pc}

08014c92 <__swrite>:
 8014c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c96:	461f      	mov	r7, r3
 8014c98:	898b      	ldrh	r3, [r1, #12]
 8014c9a:	05db      	lsls	r3, r3, #23
 8014c9c:	4605      	mov	r5, r0
 8014c9e:	460c      	mov	r4, r1
 8014ca0:	4616      	mov	r6, r2
 8014ca2:	d505      	bpl.n	8014cb0 <__swrite+0x1e>
 8014ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ca8:	2302      	movs	r3, #2
 8014caa:	2200      	movs	r2, #0
 8014cac:	f000 f868 	bl	8014d80 <_lseek_r>
 8014cb0:	89a3      	ldrh	r3, [r4, #12]
 8014cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014cba:	81a3      	strh	r3, [r4, #12]
 8014cbc:	4632      	mov	r2, r6
 8014cbe:	463b      	mov	r3, r7
 8014cc0:	4628      	mov	r0, r5
 8014cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cc6:	f000 b817 	b.w	8014cf8 <_write_r>

08014cca <__sseek>:
 8014cca:	b510      	push	{r4, lr}
 8014ccc:	460c      	mov	r4, r1
 8014cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cd2:	f000 f855 	bl	8014d80 <_lseek_r>
 8014cd6:	1c43      	adds	r3, r0, #1
 8014cd8:	89a3      	ldrh	r3, [r4, #12]
 8014cda:	bf15      	itete	ne
 8014cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8014cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014ce6:	81a3      	strheq	r3, [r4, #12]
 8014ce8:	bf18      	it	ne
 8014cea:	81a3      	strhne	r3, [r4, #12]
 8014cec:	bd10      	pop	{r4, pc}

08014cee <__sclose>:
 8014cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cf2:	f000 b813 	b.w	8014d1c <_close_r>
	...

08014cf8 <_write_r>:
 8014cf8:	b538      	push	{r3, r4, r5, lr}
 8014cfa:	4d07      	ldr	r5, [pc, #28]	; (8014d18 <_write_r+0x20>)
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	4608      	mov	r0, r1
 8014d00:	4611      	mov	r1, r2
 8014d02:	2200      	movs	r2, #0
 8014d04:	602a      	str	r2, [r5, #0]
 8014d06:	461a      	mov	r2, r3
 8014d08:	f7f2 f8c8 	bl	8006e9c <_write>
 8014d0c:	1c43      	adds	r3, r0, #1
 8014d0e:	d102      	bne.n	8014d16 <_write_r+0x1e>
 8014d10:	682b      	ldr	r3, [r5, #0]
 8014d12:	b103      	cbz	r3, 8014d16 <_write_r+0x1e>
 8014d14:	6023      	str	r3, [r4, #0]
 8014d16:	bd38      	pop	{r3, r4, r5, pc}
 8014d18:	2400d25c 	.word	0x2400d25c

08014d1c <_close_r>:
 8014d1c:	b538      	push	{r3, r4, r5, lr}
 8014d1e:	4d06      	ldr	r5, [pc, #24]	; (8014d38 <_close_r+0x1c>)
 8014d20:	2300      	movs	r3, #0
 8014d22:	4604      	mov	r4, r0
 8014d24:	4608      	mov	r0, r1
 8014d26:	602b      	str	r3, [r5, #0]
 8014d28:	f7f2 f8c6 	bl	8006eb8 <_close>
 8014d2c:	1c43      	adds	r3, r0, #1
 8014d2e:	d102      	bne.n	8014d36 <_close_r+0x1a>
 8014d30:	682b      	ldr	r3, [r5, #0]
 8014d32:	b103      	cbz	r3, 8014d36 <_close_r+0x1a>
 8014d34:	6023      	str	r3, [r4, #0]
 8014d36:	bd38      	pop	{r3, r4, r5, pc}
 8014d38:	2400d25c 	.word	0x2400d25c

08014d3c <_fstat_r>:
 8014d3c:	b538      	push	{r3, r4, r5, lr}
 8014d3e:	4d07      	ldr	r5, [pc, #28]	; (8014d5c <_fstat_r+0x20>)
 8014d40:	2300      	movs	r3, #0
 8014d42:	4604      	mov	r4, r0
 8014d44:	4608      	mov	r0, r1
 8014d46:	4611      	mov	r1, r2
 8014d48:	602b      	str	r3, [r5, #0]
 8014d4a:	f7f2 f8b9 	bl	8006ec0 <_fstat>
 8014d4e:	1c43      	adds	r3, r0, #1
 8014d50:	d102      	bne.n	8014d58 <_fstat_r+0x1c>
 8014d52:	682b      	ldr	r3, [r5, #0]
 8014d54:	b103      	cbz	r3, 8014d58 <_fstat_r+0x1c>
 8014d56:	6023      	str	r3, [r4, #0]
 8014d58:	bd38      	pop	{r3, r4, r5, pc}
 8014d5a:	bf00      	nop
 8014d5c:	2400d25c 	.word	0x2400d25c

08014d60 <_isatty_r>:
 8014d60:	b538      	push	{r3, r4, r5, lr}
 8014d62:	4d06      	ldr	r5, [pc, #24]	; (8014d7c <_isatty_r+0x1c>)
 8014d64:	2300      	movs	r3, #0
 8014d66:	4604      	mov	r4, r0
 8014d68:	4608      	mov	r0, r1
 8014d6a:	602b      	str	r3, [r5, #0]
 8014d6c:	f7f2 f8ae 	bl	8006ecc <_isatty>
 8014d70:	1c43      	adds	r3, r0, #1
 8014d72:	d102      	bne.n	8014d7a <_isatty_r+0x1a>
 8014d74:	682b      	ldr	r3, [r5, #0]
 8014d76:	b103      	cbz	r3, 8014d7a <_isatty_r+0x1a>
 8014d78:	6023      	str	r3, [r4, #0]
 8014d7a:	bd38      	pop	{r3, r4, r5, pc}
 8014d7c:	2400d25c 	.word	0x2400d25c

08014d80 <_lseek_r>:
 8014d80:	b538      	push	{r3, r4, r5, lr}
 8014d82:	4d07      	ldr	r5, [pc, #28]	; (8014da0 <_lseek_r+0x20>)
 8014d84:	4604      	mov	r4, r0
 8014d86:	4608      	mov	r0, r1
 8014d88:	4611      	mov	r1, r2
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	602a      	str	r2, [r5, #0]
 8014d8e:	461a      	mov	r2, r3
 8014d90:	f7f2 f89e 	bl	8006ed0 <_lseek>
 8014d94:	1c43      	adds	r3, r0, #1
 8014d96:	d102      	bne.n	8014d9e <_lseek_r+0x1e>
 8014d98:	682b      	ldr	r3, [r5, #0]
 8014d9a:	b103      	cbz	r3, 8014d9e <_lseek_r+0x1e>
 8014d9c:	6023      	str	r3, [r4, #0]
 8014d9e:	bd38      	pop	{r3, r4, r5, pc}
 8014da0:	2400d25c 	.word	0x2400d25c

08014da4 <__ascii_mbtowc>:
 8014da4:	b082      	sub	sp, #8
 8014da6:	b901      	cbnz	r1, 8014daa <__ascii_mbtowc+0x6>
 8014da8:	a901      	add	r1, sp, #4
 8014daa:	b142      	cbz	r2, 8014dbe <__ascii_mbtowc+0x1a>
 8014dac:	b14b      	cbz	r3, 8014dc2 <__ascii_mbtowc+0x1e>
 8014dae:	7813      	ldrb	r3, [r2, #0]
 8014db0:	600b      	str	r3, [r1, #0]
 8014db2:	7812      	ldrb	r2, [r2, #0]
 8014db4:	1e10      	subs	r0, r2, #0
 8014db6:	bf18      	it	ne
 8014db8:	2001      	movne	r0, #1
 8014dba:	b002      	add	sp, #8
 8014dbc:	4770      	bx	lr
 8014dbe:	4610      	mov	r0, r2
 8014dc0:	e7fb      	b.n	8014dba <__ascii_mbtowc+0x16>
 8014dc2:	f06f 0001 	mvn.w	r0, #1
 8014dc6:	e7f8      	b.n	8014dba <__ascii_mbtowc+0x16>

08014dc8 <__malloc_lock>:
 8014dc8:	4801      	ldr	r0, [pc, #4]	; (8014dd0 <__malloc_lock+0x8>)
 8014dca:	f7ff b870 	b.w	8013eae <__retarget_lock_acquire_recursive>
 8014dce:	bf00      	nop
 8014dd0:	2400d250 	.word	0x2400d250

08014dd4 <__malloc_unlock>:
 8014dd4:	4801      	ldr	r0, [pc, #4]	; (8014ddc <__malloc_unlock+0x8>)
 8014dd6:	f7ff b86b 	b.w	8013eb0 <__retarget_lock_release_recursive>
 8014dda:	bf00      	nop
 8014ddc:	2400d250 	.word	0x2400d250

08014de0 <_malloc_usable_size_r>:
 8014de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014de4:	1f18      	subs	r0, r3, #4
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	bfbc      	itt	lt
 8014dea:	580b      	ldrlt	r3, [r1, r0]
 8014dec:	18c0      	addlt	r0, r0, r3
 8014dee:	4770      	bx	lr

08014df0 <_read_r>:
 8014df0:	b538      	push	{r3, r4, r5, lr}
 8014df2:	4d07      	ldr	r5, [pc, #28]	; (8014e10 <_read_r+0x20>)
 8014df4:	4604      	mov	r4, r0
 8014df6:	4608      	mov	r0, r1
 8014df8:	4611      	mov	r1, r2
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	602a      	str	r2, [r5, #0]
 8014dfe:	461a      	mov	r2, r3
 8014e00:	f7f2 f83e 	bl	8006e80 <_read>
 8014e04:	1c43      	adds	r3, r0, #1
 8014e06:	d102      	bne.n	8014e0e <_read_r+0x1e>
 8014e08:	682b      	ldr	r3, [r5, #0]
 8014e0a:	b103      	cbz	r3, 8014e0e <_read_r+0x1e>
 8014e0c:	6023      	str	r3, [r4, #0]
 8014e0e:	bd38      	pop	{r3, r4, r5, pc}
 8014e10:	2400d25c 	.word	0x2400d25c

08014e14 <__ascii_wctomb>:
 8014e14:	b149      	cbz	r1, 8014e2a <__ascii_wctomb+0x16>
 8014e16:	2aff      	cmp	r2, #255	; 0xff
 8014e18:	bf85      	ittet	hi
 8014e1a:	238a      	movhi	r3, #138	; 0x8a
 8014e1c:	6003      	strhi	r3, [r0, #0]
 8014e1e:	700a      	strbls	r2, [r1, #0]
 8014e20:	f04f 30ff 	movhi.w	r0, #4294967295
 8014e24:	bf98      	it	ls
 8014e26:	2001      	movls	r0, #1
 8014e28:	4770      	bx	lr
 8014e2a:	4608      	mov	r0, r1
 8014e2c:	4770      	bx	lr
	...

08014e30 <exp>:
 8014e30:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8014e32:	ee10 3a90 	vmov	r3, s1
 8014e36:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8014e3a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8014e3e:	18a2      	adds	r2, r4, r2
 8014e40:	2a3e      	cmp	r2, #62	; 0x3e
 8014e42:	ee10 1a10 	vmov	r1, s0
 8014e46:	d922      	bls.n	8014e8e <exp+0x5e>
 8014e48:	2a00      	cmp	r2, #0
 8014e4a:	da06      	bge.n	8014e5a <exp+0x2a>
 8014e4c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014e50:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014e54:	b004      	add	sp, #16
 8014e56:	bcf0      	pop	{r4, r5, r6, r7}
 8014e58:	4770      	bx	lr
 8014e5a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8014e5e:	f04f 0000 	mov.w	r0, #0
 8014e62:	d913      	bls.n	8014e8c <exp+0x5c>
 8014e64:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8014e68:	bf08      	it	eq
 8014e6a:	4281      	cmpeq	r1, r0
 8014e6c:	f000 80a0 	beq.w	8014fb0 <exp+0x180>
 8014e70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014e74:	4294      	cmp	r4, r2
 8014e76:	d0e9      	beq.n	8014e4c <exp+0x1c>
 8014e78:	4283      	cmp	r3, r0
 8014e7a:	da03      	bge.n	8014e84 <exp+0x54>
 8014e7c:	b004      	add	sp, #16
 8014e7e:	bcf0      	pop	{r4, r5, r6, r7}
 8014e80:	f000 b8c6 	b.w	8015010 <__math_uflow>
 8014e84:	b004      	add	sp, #16
 8014e86:	bcf0      	pop	{r4, r5, r6, r7}
 8014e88:	f000 b8ca 	b.w	8015020 <__math_oflow>
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	4950      	ldr	r1, [pc, #320]	; (8014fd0 <exp+0x1a0>)
 8014e90:	ed91 6b02 	vldr	d6, [r1, #8]
 8014e94:	ed91 5b00 	vldr	d5, [r1]
 8014e98:	eeb0 7b46 	vmov.f64	d7, d6
 8014e9c:	eea5 7b00 	vfma.f64	d7, d5, d0
 8014ea0:	ee17 5a10 	vmov	r5, s14
 8014ea4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014ea8:	ed91 6b04 	vldr	d6, [r1, #16]
 8014eac:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8014eb0:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014eb4:	ed91 6b06 	vldr	d6, [r1, #24]
 8014eb8:	18d8      	adds	r0, r3, r3
 8014eba:	f100 030f 	add.w	r3, r0, #15
 8014ebe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8014ec2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014ec6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8014eca:	ee20 7b00 	vmul.f64	d7, d0, d0
 8014ece:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8014ed2:	ed91 5b08 	vldr	d5, [r1, #32]
 8014ed6:	ee30 6b06 	vadd.f64	d6, d0, d6
 8014eda:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8014ede:	eea4 5b00 	vfma.f64	d5, d4, d0
 8014ee2:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8014ee6:	eea5 6b07 	vfma.f64	d6, d5, d7
 8014eea:	ee27 7b07 	vmul.f64	d7, d7, d7
 8014eee:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8014ef2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8014ef6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8014efa:	eea4 5b00 	vfma.f64	d5, d4, d0
 8014efe:	2600      	movs	r6, #0
 8014f00:	19f2      	adds	r2, r6, r7
 8014f02:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8014f06:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014f0a:	2c00      	cmp	r4, #0
 8014f0c:	d14b      	bne.n	8014fa6 <exp+0x176>
 8014f0e:	42b5      	cmp	r5, r6
 8014f10:	db10      	blt.n	8014f34 <exp+0x104>
 8014f12:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8014f16:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8014fb8 <exp+0x188>
 8014f1a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8014f1e:	4610      	mov	r0, r2
 8014f20:	ec41 0b10 	vmov	d0, r0, r1
 8014f24:	eea6 0b00 	vfma.f64	d0, d6, d0
 8014f28:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014f2c:	b004      	add	sp, #16
 8014f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8014f30:	f000 b8ae 	b.w	8015090 <__math_check_oflow>
 8014f34:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8014f38:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8014f3c:	4610      	mov	r0, r2
 8014f3e:	ec41 0b17 	vmov	d7, r0, r1
 8014f42:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014f46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014f4a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8014f4e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8014f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f56:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014fc0 <exp+0x190>
 8014f5a:	d51e      	bpl.n	8014f9a <exp+0x16a>
 8014f5c:	ee35 3b04 	vadd.f64	d3, d5, d4
 8014f60:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014f64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014f68:	ee34 6b43 	vsub.f64	d6, d4, d3
 8014f6c:	ee36 5b05 	vadd.f64	d5, d6, d5
 8014f70:	ee35 5b07 	vadd.f64	d5, d5, d7
 8014f74:	ee35 5b03 	vadd.f64	d5, d5, d3
 8014f78:	ee35 5b44 	vsub.f64	d5, d5, d4
 8014f7c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8014f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f84:	d101      	bne.n	8014f8a <exp+0x15a>
 8014f86:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8014fc8 <exp+0x198>
 8014f8a:	ed8d 0b00 	vstr	d0, [sp]
 8014f8e:	ed9d 7b00 	vldr	d7, [sp]
 8014f92:	ee27 7b00 	vmul.f64	d7, d7, d0
 8014f96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014f9a:	ee25 0b00 	vmul.f64	d0, d5, d0
 8014f9e:	b004      	add	sp, #16
 8014fa0:	bcf0      	pop	{r4, r5, r6, r7}
 8014fa2:	f000 b86c 	b.w	801507e <__math_check_uflow>
 8014fa6:	ec43 2b10 	vmov	d0, r2, r3
 8014faa:	eea6 0b00 	vfma.f64	d0, d6, d0
 8014fae:	e751      	b.n	8014e54 <exp+0x24>
 8014fb0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8014fc8 <exp+0x198>
 8014fb4:	e74e      	b.n	8014e54 <exp+0x24>
 8014fb6:	bf00      	nop
 8014fb8:	00000000 	.word	0x00000000
 8014fbc:	7f000000 	.word	0x7f000000
 8014fc0:	00000000 	.word	0x00000000
 8014fc4:	00100000 	.word	0x00100000
	...
 8014fd0:	080199f8 	.word	0x080199f8

08014fd4 <with_errno>:
 8014fd4:	b513      	push	{r0, r1, r4, lr}
 8014fd6:	4604      	mov	r4, r0
 8014fd8:	ed8d 0b00 	vstr	d0, [sp]
 8014fdc:	f7fc ff9c 	bl	8011f18 <__errno>
 8014fe0:	ed9d 0b00 	vldr	d0, [sp]
 8014fe4:	6004      	str	r4, [r0, #0]
 8014fe6:	b002      	add	sp, #8
 8014fe8:	bd10      	pop	{r4, pc}

08014fea <xflow>:
 8014fea:	b082      	sub	sp, #8
 8014fec:	b158      	cbz	r0, 8015006 <xflow+0x1c>
 8014fee:	eeb1 7b40 	vneg.f64	d7, d0
 8014ff2:	ed8d 7b00 	vstr	d7, [sp]
 8014ff6:	ed9d 7b00 	vldr	d7, [sp]
 8014ffa:	2022      	movs	r0, #34	; 0x22
 8014ffc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015000:	b002      	add	sp, #8
 8015002:	f7ff bfe7 	b.w	8014fd4 <with_errno>
 8015006:	eeb0 7b40 	vmov.f64	d7, d0
 801500a:	e7f2      	b.n	8014ff2 <xflow+0x8>
 801500c:	0000      	movs	r0, r0
	...

08015010 <__math_uflow>:
 8015010:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015018 <__math_uflow+0x8>
 8015014:	f7ff bfe9 	b.w	8014fea <xflow>
 8015018:	00000000 	.word	0x00000000
 801501c:	10000000 	.word	0x10000000

08015020 <__math_oflow>:
 8015020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015028 <__math_oflow+0x8>
 8015024:	f7ff bfe1 	b.w	8014fea <xflow>
 8015028:	00000000 	.word	0x00000000
 801502c:	70000000 	.word	0x70000000

08015030 <__math_divzero>:
 8015030:	b082      	sub	sp, #8
 8015032:	2800      	cmp	r0, #0
 8015034:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015038:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801503c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8015040:	ed8d 7b00 	vstr	d7, [sp]
 8015044:	ed9d 0b00 	vldr	d0, [sp]
 8015048:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8015058 <__math_divzero+0x28>
 801504c:	2022      	movs	r0, #34	; 0x22
 801504e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015052:	b002      	add	sp, #8
 8015054:	f7ff bfbe 	b.w	8014fd4 <with_errno>
	...

08015060 <__math_invalid>:
 8015060:	eeb0 7b40 	vmov.f64	d7, d0
 8015064:	eeb4 7b47 	vcmp.f64	d7, d7
 8015068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801506c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8015070:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8015074:	d602      	bvs.n	801507c <__math_invalid+0x1c>
 8015076:	2021      	movs	r0, #33	; 0x21
 8015078:	f7ff bfac 	b.w	8014fd4 <with_errno>
 801507c:	4770      	bx	lr

0801507e <__math_check_uflow>:
 801507e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015086:	d102      	bne.n	801508e <__math_check_uflow+0x10>
 8015088:	2022      	movs	r0, #34	; 0x22
 801508a:	f7ff bfa3 	b.w	8014fd4 <with_errno>
 801508e:	4770      	bx	lr

08015090 <__math_check_oflow>:
 8015090:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80150b0 <__math_check_oflow+0x20>
 8015094:	eeb0 7bc0 	vabs.f64	d7, d0
 8015098:	eeb4 7b46 	vcmp.f64	d7, d6
 801509c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150a0:	dd02      	ble.n	80150a8 <__math_check_oflow+0x18>
 80150a2:	2022      	movs	r0, #34	; 0x22
 80150a4:	f7ff bf96 	b.w	8014fd4 <with_errno>
 80150a8:	4770      	bx	lr
 80150aa:	bf00      	nop
 80150ac:	f3af 8000 	nop.w
 80150b0:	ffffffff 	.word	0xffffffff
 80150b4:	7fefffff 	.word	0x7fefffff

080150b8 <cos>:
 80150b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150ba:	eeb0 7b40 	vmov.f64	d7, d0
 80150be:	ee17 3a90 	vmov	r3, s15
 80150c2:	4a21      	ldr	r2, [pc, #132]	; (8015148 <cos+0x90>)
 80150c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80150c8:	4293      	cmp	r3, r2
 80150ca:	dc06      	bgt.n	80150da <cos+0x22>
 80150cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8015140 <cos+0x88>
 80150d0:	b005      	add	sp, #20
 80150d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80150d6:	f000 ba6f 	b.w	80155b8 <__kernel_cos>
 80150da:	4a1c      	ldr	r2, [pc, #112]	; (801514c <cos+0x94>)
 80150dc:	4293      	cmp	r3, r2
 80150de:	dd04      	ble.n	80150ea <cos+0x32>
 80150e0:	ee30 0b40 	vsub.f64	d0, d0, d0
 80150e4:	b005      	add	sp, #20
 80150e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80150ea:	4668      	mov	r0, sp
 80150ec:	f000 f920 	bl	8015330 <__ieee754_rem_pio2>
 80150f0:	f000 0003 	and.w	r0, r0, #3
 80150f4:	2801      	cmp	r0, #1
 80150f6:	d009      	beq.n	801510c <cos+0x54>
 80150f8:	2802      	cmp	r0, #2
 80150fa:	d010      	beq.n	801511e <cos+0x66>
 80150fc:	b9b0      	cbnz	r0, 801512c <cos+0x74>
 80150fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015102:	ed9d 0b00 	vldr	d0, [sp]
 8015106:	f000 fa57 	bl	80155b8 <__kernel_cos>
 801510a:	e7eb      	b.n	80150e4 <cos+0x2c>
 801510c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015110:	ed9d 0b00 	vldr	d0, [sp]
 8015114:	f000 fd54 	bl	8015bc0 <__kernel_sin>
 8015118:	eeb1 0b40 	vneg.f64	d0, d0
 801511c:	e7e2      	b.n	80150e4 <cos+0x2c>
 801511e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015122:	ed9d 0b00 	vldr	d0, [sp]
 8015126:	f000 fa47 	bl	80155b8 <__kernel_cos>
 801512a:	e7f5      	b.n	8015118 <cos+0x60>
 801512c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015130:	ed9d 0b00 	vldr	d0, [sp]
 8015134:	2001      	movs	r0, #1
 8015136:	f000 fd43 	bl	8015bc0 <__kernel_sin>
 801513a:	e7d3      	b.n	80150e4 <cos+0x2c>
 801513c:	f3af 8000 	nop.w
	...
 8015148:	3fe921fb 	.word	0x3fe921fb
 801514c:	7fefffff 	.word	0x7fefffff

08015150 <sin>:
 8015150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015152:	eeb0 7b40 	vmov.f64	d7, d0
 8015156:	ee17 3a90 	vmov	r3, s15
 801515a:	4a21      	ldr	r2, [pc, #132]	; (80151e0 <sin+0x90>)
 801515c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015160:	4293      	cmp	r3, r2
 8015162:	dc07      	bgt.n	8015174 <sin+0x24>
 8015164:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80151d8 <sin+0x88>
 8015168:	2000      	movs	r0, #0
 801516a:	b005      	add	sp, #20
 801516c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015170:	f000 bd26 	b.w	8015bc0 <__kernel_sin>
 8015174:	4a1b      	ldr	r2, [pc, #108]	; (80151e4 <sin+0x94>)
 8015176:	4293      	cmp	r3, r2
 8015178:	dd04      	ble.n	8015184 <sin+0x34>
 801517a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801517e:	b005      	add	sp, #20
 8015180:	f85d fb04 	ldr.w	pc, [sp], #4
 8015184:	4668      	mov	r0, sp
 8015186:	f000 f8d3 	bl	8015330 <__ieee754_rem_pio2>
 801518a:	f000 0003 	and.w	r0, r0, #3
 801518e:	2801      	cmp	r0, #1
 8015190:	d00a      	beq.n	80151a8 <sin+0x58>
 8015192:	2802      	cmp	r0, #2
 8015194:	d00f      	beq.n	80151b6 <sin+0x66>
 8015196:	b9c0      	cbnz	r0, 80151ca <sin+0x7a>
 8015198:	ed9d 1b02 	vldr	d1, [sp, #8]
 801519c:	ed9d 0b00 	vldr	d0, [sp]
 80151a0:	2001      	movs	r0, #1
 80151a2:	f000 fd0d 	bl	8015bc0 <__kernel_sin>
 80151a6:	e7ea      	b.n	801517e <sin+0x2e>
 80151a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80151ac:	ed9d 0b00 	vldr	d0, [sp]
 80151b0:	f000 fa02 	bl	80155b8 <__kernel_cos>
 80151b4:	e7e3      	b.n	801517e <sin+0x2e>
 80151b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80151ba:	ed9d 0b00 	vldr	d0, [sp]
 80151be:	2001      	movs	r0, #1
 80151c0:	f000 fcfe 	bl	8015bc0 <__kernel_sin>
 80151c4:	eeb1 0b40 	vneg.f64	d0, d0
 80151c8:	e7d9      	b.n	801517e <sin+0x2e>
 80151ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80151ce:	ed9d 0b00 	vldr	d0, [sp]
 80151d2:	f000 f9f1 	bl	80155b8 <__kernel_cos>
 80151d6:	e7f5      	b.n	80151c4 <sin+0x74>
	...
 80151e0:	3fe921fb 	.word	0x3fe921fb
 80151e4:	7fefffff 	.word	0x7fefffff

080151e8 <log10>:
 80151e8:	b508      	push	{r3, lr}
 80151ea:	ed2d 8b02 	vpush	{d8}
 80151ee:	eeb0 8b40 	vmov.f64	d8, d0
 80151f2:	f000 f82d 	bl	8015250 <__ieee754_log10>
 80151f6:	eeb4 8b48 	vcmp.f64	d8, d8
 80151fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151fe:	d60f      	bvs.n	8015220 <log10+0x38>
 8015200:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8015204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015208:	d80a      	bhi.n	8015220 <log10+0x38>
 801520a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015212:	d108      	bne.n	8015226 <log10+0x3e>
 8015214:	f7fc fe80 	bl	8011f18 <__errno>
 8015218:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015240 <log10+0x58>
 801521c:	2322      	movs	r3, #34	; 0x22
 801521e:	6003      	str	r3, [r0, #0]
 8015220:	ecbd 8b02 	vpop	{d8}
 8015224:	bd08      	pop	{r3, pc}
 8015226:	f7fc fe77 	bl	8011f18 <__errno>
 801522a:	ecbd 8b02 	vpop	{d8}
 801522e:	2321      	movs	r3, #33	; 0x21
 8015230:	6003      	str	r3, [r0, #0]
 8015232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015236:	4804      	ldr	r0, [pc, #16]	; (8015248 <log10+0x60>)
 8015238:	f000 be92 	b.w	8015f60 <nan>
 801523c:	f3af 8000 	nop.w
 8015240:	00000000 	.word	0x00000000
 8015244:	fff00000 	.word	0xfff00000
 8015248:	0801959b 	.word	0x0801959b
 801524c:	00000000 	.word	0x00000000

08015250 <__ieee754_log10>:
 8015250:	b510      	push	{r4, lr}
 8015252:	ee10 3a90 	vmov	r3, s1
 8015256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801525a:	ed2d 8b02 	vpush	{d8}
 801525e:	da21      	bge.n	80152a4 <__ieee754_log10+0x54>
 8015260:	ee10 1a10 	vmov	r1, s0
 8015264:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015268:	430a      	orrs	r2, r1
 801526a:	d108      	bne.n	801527e <__ieee754_log10+0x2e>
 801526c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80152f8 <__ieee754_log10+0xa8>
 8015270:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8015300 <__ieee754_log10+0xb0>
 8015274:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8015278:	ecbd 8b02 	vpop	{d8}
 801527c:	bd10      	pop	{r4, pc}
 801527e:	2b00      	cmp	r3, #0
 8015280:	da02      	bge.n	8015288 <__ieee754_log10+0x38>
 8015282:	ee30 6b40 	vsub.f64	d6, d0, d0
 8015286:	e7f3      	b.n	8015270 <__ieee754_log10+0x20>
 8015288:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8015308 <__ieee754_log10+0xb8>
 801528c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015290:	ee10 3a90 	vmov	r3, s1
 8015294:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8015298:	4923      	ldr	r1, [pc, #140]	; (8015328 <__ieee754_log10+0xd8>)
 801529a:	428b      	cmp	r3, r1
 801529c:	dd04      	ble.n	80152a8 <__ieee754_log10+0x58>
 801529e:	ee30 0b00 	vadd.f64	d0, d0, d0
 80152a2:	e7e9      	b.n	8015278 <__ieee754_log10+0x28>
 80152a4:	2200      	movs	r2, #0
 80152a6:	e7f7      	b.n	8015298 <__ieee754_log10+0x48>
 80152a8:	1518      	asrs	r0, r3, #20
 80152aa:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80152ae:	4410      	add	r0, r2
 80152b0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80152b4:	f240 34ff 	movw	r4, #1023	; 0x3ff
 80152b8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80152bc:	ee08 3a10 	vmov	s16, r3
 80152c0:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 80152c4:	ec53 2b10 	vmov	r2, r3, d0
 80152c8:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80152cc:	ec43 2b10 	vmov	d0, r2, r3
 80152d0:	f000 fcce 	bl	8015c70 <log>
 80152d4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8015310 <__ieee754_log10+0xc0>
 80152d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80152dc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8015318 <__ieee754_log10+0xc8>
 80152e0:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 80152e4:	eea8 0b07 	vfma.f64	d0, d8, d7
 80152e8:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8015320 <__ieee754_log10+0xd0>
 80152ec:	eea8 0b07 	vfma.f64	d0, d8, d7
 80152f0:	e7c2      	b.n	8015278 <__ieee754_log10+0x28>
 80152f2:	bf00      	nop
 80152f4:	f3af 8000 	nop.w
 80152f8:	00000000 	.word	0x00000000
 80152fc:	c3500000 	.word	0xc3500000
	...
 801530c:	43500000 	.word	0x43500000
 8015310:	1526e50e 	.word	0x1526e50e
 8015314:	3fdbcb7b 	.word	0x3fdbcb7b
 8015318:	11f12b36 	.word	0x11f12b36
 801531c:	3d59fef3 	.word	0x3d59fef3
 8015320:	509f6000 	.word	0x509f6000
 8015324:	3fd34413 	.word	0x3fd34413
 8015328:	7fefffff 	.word	0x7fefffff
 801532c:	00000000 	.word	0x00000000

08015330 <__ieee754_rem_pio2>:
 8015330:	b570      	push	{r4, r5, r6, lr}
 8015332:	eeb0 7b40 	vmov.f64	d7, d0
 8015336:	ee17 5a90 	vmov	r5, s15
 801533a:	4b99      	ldr	r3, [pc, #612]	; (80155a0 <__ieee754_rem_pio2+0x270>)
 801533c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015340:	429e      	cmp	r6, r3
 8015342:	b088      	sub	sp, #32
 8015344:	4604      	mov	r4, r0
 8015346:	dc07      	bgt.n	8015358 <__ieee754_rem_pio2+0x28>
 8015348:	2200      	movs	r2, #0
 801534a:	2300      	movs	r3, #0
 801534c:	ed84 0b00 	vstr	d0, [r4]
 8015350:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015354:	2000      	movs	r0, #0
 8015356:	e01b      	b.n	8015390 <__ieee754_rem_pio2+0x60>
 8015358:	4b92      	ldr	r3, [pc, #584]	; (80155a4 <__ieee754_rem_pio2+0x274>)
 801535a:	429e      	cmp	r6, r3
 801535c:	dc3b      	bgt.n	80153d6 <__ieee754_rem_pio2+0xa6>
 801535e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8015362:	2d00      	cmp	r5, #0
 8015364:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8015560 <__ieee754_rem_pio2+0x230>
 8015368:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801536c:	dd19      	ble.n	80153a2 <__ieee754_rem_pio2+0x72>
 801536e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015372:	429e      	cmp	r6, r3
 8015374:	d00e      	beq.n	8015394 <__ieee754_rem_pio2+0x64>
 8015376:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8015568 <__ieee754_rem_pio2+0x238>
 801537a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801537e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015382:	ed84 5b00 	vstr	d5, [r4]
 8015386:	ee37 7b46 	vsub.f64	d7, d7, d6
 801538a:	ed84 7b02 	vstr	d7, [r4, #8]
 801538e:	2001      	movs	r0, #1
 8015390:	b008      	add	sp, #32
 8015392:	bd70      	pop	{r4, r5, r6, pc}
 8015394:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015570 <__ieee754_rem_pio2+0x240>
 8015398:	ee37 7b46 	vsub.f64	d7, d7, d6
 801539c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015578 <__ieee754_rem_pio2+0x248>
 80153a0:	e7eb      	b.n	801537a <__ieee754_rem_pio2+0x4a>
 80153a2:	429e      	cmp	r6, r3
 80153a4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80153a8:	d00e      	beq.n	80153c8 <__ieee754_rem_pio2+0x98>
 80153aa:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8015568 <__ieee754_rem_pio2+0x238>
 80153ae:	ee37 5b06 	vadd.f64	d5, d7, d6
 80153b2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80153b6:	ed84 5b00 	vstr	d5, [r4]
 80153ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80153be:	f04f 30ff 	mov.w	r0, #4294967295
 80153c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80153c6:	e7e3      	b.n	8015390 <__ieee754_rem_pio2+0x60>
 80153c8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015570 <__ieee754_rem_pio2+0x240>
 80153cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80153d0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015578 <__ieee754_rem_pio2+0x248>
 80153d4:	e7eb      	b.n	80153ae <__ieee754_rem_pio2+0x7e>
 80153d6:	4b74      	ldr	r3, [pc, #464]	; (80155a8 <__ieee754_rem_pio2+0x278>)
 80153d8:	429e      	cmp	r6, r3
 80153da:	dc70      	bgt.n	80154be <__ieee754_rem_pio2+0x18e>
 80153dc:	f000 fd40 	bl	8015e60 <fabs>
 80153e0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80153e4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015580 <__ieee754_rem_pio2+0x250>
 80153e8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80153ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80153f0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80153f4:	ee17 0a90 	vmov	r0, s15
 80153f8:	eeb1 4b45 	vneg.f64	d4, d5
 80153fc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015560 <__ieee754_rem_pio2+0x230>
 8015400:	eea5 0b47 	vfms.f64	d0, d5, d7
 8015404:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015568 <__ieee754_rem_pio2+0x238>
 8015408:	281f      	cmp	r0, #31
 801540a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801540e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015412:	dc08      	bgt.n	8015426 <__ieee754_rem_pio2+0xf6>
 8015414:	4b65      	ldr	r3, [pc, #404]	; (80155ac <__ieee754_rem_pio2+0x27c>)
 8015416:	1e42      	subs	r2, r0, #1
 8015418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801541c:	42b3      	cmp	r3, r6
 801541e:	d002      	beq.n	8015426 <__ieee754_rem_pio2+0xf6>
 8015420:	ed84 6b00 	vstr	d6, [r4]
 8015424:	e026      	b.n	8015474 <__ieee754_rem_pio2+0x144>
 8015426:	ee16 3a90 	vmov	r3, s13
 801542a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801542e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015432:	2b10      	cmp	r3, #16
 8015434:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015438:	ddf2      	ble.n	8015420 <__ieee754_rem_pio2+0xf0>
 801543a:	eeb0 6b40 	vmov.f64	d6, d0
 801543e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8015570 <__ieee754_rem_pio2+0x240>
 8015442:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8015578 <__ieee754_rem_pio2+0x248>
 8015446:	eea4 6b07 	vfma.f64	d6, d4, d7
 801544a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801544e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015452:	eeb0 7b40 	vmov.f64	d7, d0
 8015456:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801545a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801545e:	ee13 3a90 	vmov	r3, s7
 8015462:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015466:	1ad3      	subs	r3, r2, r3
 8015468:	2b31      	cmp	r3, #49	; 0x31
 801546a:	dc17      	bgt.n	801549c <__ieee754_rem_pio2+0x16c>
 801546c:	eeb0 0b46 	vmov.f64	d0, d6
 8015470:	ed84 3b00 	vstr	d3, [r4]
 8015474:	ed94 6b00 	vldr	d6, [r4]
 8015478:	2d00      	cmp	r5, #0
 801547a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801547e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015482:	ed84 0b02 	vstr	d0, [r4, #8]
 8015486:	da83      	bge.n	8015390 <__ieee754_rem_pio2+0x60>
 8015488:	eeb1 6b46 	vneg.f64	d6, d6
 801548c:	eeb1 0b40 	vneg.f64	d0, d0
 8015490:	ed84 6b00 	vstr	d6, [r4]
 8015494:	ed84 0b02 	vstr	d0, [r4, #8]
 8015498:	4240      	negs	r0, r0
 801549a:	e779      	b.n	8015390 <__ieee754_rem_pio2+0x60>
 801549c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8015588 <__ieee754_rem_pio2+0x258>
 80154a0:	eeb0 0b46 	vmov.f64	d0, d6
 80154a4:	eea4 0b03 	vfma.f64	d0, d4, d3
 80154a8:	ee36 7b40 	vsub.f64	d7, d6, d0
 80154ac:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8015590 <__ieee754_rem_pio2+0x260>
 80154b0:	eea4 7b03 	vfma.f64	d7, d4, d3
 80154b4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80154b8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80154bc:	e7b0      	b.n	8015420 <__ieee754_rem_pio2+0xf0>
 80154be:	4b3c      	ldr	r3, [pc, #240]	; (80155b0 <__ieee754_rem_pio2+0x280>)
 80154c0:	429e      	cmp	r6, r3
 80154c2:	dd06      	ble.n	80154d2 <__ieee754_rem_pio2+0x1a2>
 80154c4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80154c8:	ed80 7b02 	vstr	d7, [r0, #8]
 80154cc:	ed80 7b00 	vstr	d7, [r0]
 80154d0:	e740      	b.n	8015354 <__ieee754_rem_pio2+0x24>
 80154d2:	1532      	asrs	r2, r6, #20
 80154d4:	ee10 0a10 	vmov	r0, s0
 80154d8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80154dc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80154e0:	ec41 0b17 	vmov	d7, r0, r1
 80154e4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80154e8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8015598 <__ieee754_rem_pio2+0x268>
 80154ec:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80154f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80154f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80154f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80154fc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015500:	a902      	add	r1, sp, #8
 8015502:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015506:	ee37 7b46 	vsub.f64	d7, d7, d6
 801550a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801550e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015512:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015516:	2603      	movs	r6, #3
 8015518:	4608      	mov	r0, r1
 801551a:	ed91 7b04 	vldr	d7, [r1, #16]
 801551e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015526:	4633      	mov	r3, r6
 8015528:	f1a1 0108 	sub.w	r1, r1, #8
 801552c:	f106 36ff 	add.w	r6, r6, #4294967295
 8015530:	d0f3      	beq.n	801551a <__ieee754_rem_pio2+0x1ea>
 8015532:	4920      	ldr	r1, [pc, #128]	; (80155b4 <__ieee754_rem_pio2+0x284>)
 8015534:	9101      	str	r1, [sp, #4]
 8015536:	2102      	movs	r1, #2
 8015538:	9100      	str	r1, [sp, #0]
 801553a:	4621      	mov	r1, r4
 801553c:	f000 f8a8 	bl	8015690 <__kernel_rem_pio2>
 8015540:	2d00      	cmp	r5, #0
 8015542:	f6bf af25 	bge.w	8015390 <__ieee754_rem_pio2+0x60>
 8015546:	ed94 7b00 	vldr	d7, [r4]
 801554a:	eeb1 7b47 	vneg.f64	d7, d7
 801554e:	ed84 7b00 	vstr	d7, [r4]
 8015552:	ed94 7b02 	vldr	d7, [r4, #8]
 8015556:	eeb1 7b47 	vneg.f64	d7, d7
 801555a:	ed84 7b02 	vstr	d7, [r4, #8]
 801555e:	e79b      	b.n	8015498 <__ieee754_rem_pio2+0x168>
 8015560:	54400000 	.word	0x54400000
 8015564:	3ff921fb 	.word	0x3ff921fb
 8015568:	1a626331 	.word	0x1a626331
 801556c:	3dd0b461 	.word	0x3dd0b461
 8015570:	1a600000 	.word	0x1a600000
 8015574:	3dd0b461 	.word	0x3dd0b461
 8015578:	2e037073 	.word	0x2e037073
 801557c:	3ba3198a 	.word	0x3ba3198a
 8015580:	6dc9c883 	.word	0x6dc9c883
 8015584:	3fe45f30 	.word	0x3fe45f30
 8015588:	2e000000 	.word	0x2e000000
 801558c:	3ba3198a 	.word	0x3ba3198a
 8015590:	252049c1 	.word	0x252049c1
 8015594:	397b839a 	.word	0x397b839a
 8015598:	00000000 	.word	0x00000000
 801559c:	41700000 	.word	0x41700000
 80155a0:	3fe921fb 	.word	0x3fe921fb
 80155a4:	4002d97b 	.word	0x4002d97b
 80155a8:	413921fb 	.word	0x413921fb
 80155ac:	0801a268 	.word	0x0801a268
 80155b0:	7fefffff 	.word	0x7fefffff
 80155b4:	0801a2e8 	.word	0x0801a2e8

080155b8 <__kernel_cos>:
 80155b8:	ee10 1a90 	vmov	r1, s1
 80155bc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80155c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80155c4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80155c8:	da05      	bge.n	80155d6 <__kernel_cos+0x1e>
 80155ca:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80155ce:	ee17 3a90 	vmov	r3, s15
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d03d      	beq.n	8015652 <__kernel_cos+0x9a>
 80155d6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80155da:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8015658 <__kernel_cos+0xa0>
 80155de:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8015660 <__kernel_cos+0xa8>
 80155e2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80155e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015668 <__kernel_cos+0xb0>
 80155ea:	eea6 7b03 	vfma.f64	d7, d6, d3
 80155ee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8015670 <__kernel_cos+0xb8>
 80155f2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80155f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015678 <__kernel_cos+0xc0>
 80155fa:	4b23      	ldr	r3, [pc, #140]	; (8015688 <__kernel_cos+0xd0>)
 80155fc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8015600:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8015680 <__kernel_cos+0xc8>
 8015604:	4299      	cmp	r1, r3
 8015606:	eea7 6b03 	vfma.f64	d6, d7, d3
 801560a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801560e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8015612:	ee23 7b07 	vmul.f64	d7, d3, d7
 8015616:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801561a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801561e:	dc04      	bgt.n	801562a <__kernel_cos+0x72>
 8015620:	ee37 6b46 	vsub.f64	d6, d7, d6
 8015624:	ee34 0b46 	vsub.f64	d0, d4, d6
 8015628:	4770      	bx	lr
 801562a:	4b18      	ldr	r3, [pc, #96]	; (801568c <__kernel_cos+0xd4>)
 801562c:	4299      	cmp	r1, r3
 801562e:	dc0d      	bgt.n	801564c <__kernel_cos+0x94>
 8015630:	2200      	movs	r2, #0
 8015632:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8015636:	ec43 2b15 	vmov	d5, r2, r3
 801563a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801563e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015642:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015646:	ee30 0b47 	vsub.f64	d0, d0, d7
 801564a:	4770      	bx	lr
 801564c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8015650:	e7f3      	b.n	801563a <__kernel_cos+0x82>
 8015652:	eeb0 0b44 	vmov.f64	d0, d4
 8015656:	4770      	bx	lr
 8015658:	be8838d4 	.word	0xbe8838d4
 801565c:	bda8fae9 	.word	0xbda8fae9
 8015660:	bdb4b1c4 	.word	0xbdb4b1c4
 8015664:	3e21ee9e 	.word	0x3e21ee9e
 8015668:	809c52ad 	.word	0x809c52ad
 801566c:	be927e4f 	.word	0xbe927e4f
 8015670:	19cb1590 	.word	0x19cb1590
 8015674:	3efa01a0 	.word	0x3efa01a0
 8015678:	16c15177 	.word	0x16c15177
 801567c:	bf56c16c 	.word	0xbf56c16c
 8015680:	5555554c 	.word	0x5555554c
 8015684:	3fa55555 	.word	0x3fa55555
 8015688:	3fd33332 	.word	0x3fd33332
 801568c:	3fe90000 	.word	0x3fe90000

08015690 <__kernel_rem_pio2>:
 8015690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015694:	ed2d 8b06 	vpush	{d8-d10}
 8015698:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801569c:	460f      	mov	r7, r1
 801569e:	9002      	str	r0, [sp, #8]
 80156a0:	49c5      	ldr	r1, [pc, #788]	; (80159b8 <__kernel_rem_pio2+0x328>)
 80156a2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80156a4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80156a8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80156ac:	9301      	str	r3, [sp, #4]
 80156ae:	f112 0f14 	cmn.w	r2, #20
 80156b2:	bfa8      	it	ge
 80156b4:	2018      	movge	r0, #24
 80156b6:	f103 31ff 	add.w	r1, r3, #4294967295
 80156ba:	bfb8      	it	lt
 80156bc:	2000      	movlt	r0, #0
 80156be:	f06f 0417 	mvn.w	r4, #23
 80156c2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80159a0 <__kernel_rem_pio2+0x310>
 80156c6:	bfa4      	itt	ge
 80156c8:	f1a2 0a03 	subge.w	sl, r2, #3
 80156cc:	fb9a f0f0 	sdivge	r0, sl, r0
 80156d0:	fb00 4404 	mla	r4, r0, r4, r4
 80156d4:	1a46      	subs	r6, r0, r1
 80156d6:	4414      	add	r4, r2
 80156d8:	eb09 0c01 	add.w	ip, r9, r1
 80156dc:	ad1a      	add	r5, sp, #104	; 0x68
 80156de:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80156e2:	2200      	movs	r2, #0
 80156e4:	4562      	cmp	r2, ip
 80156e6:	dd10      	ble.n	801570a <__kernel_rem_pio2+0x7a>
 80156e8:	9a01      	ldr	r2, [sp, #4]
 80156ea:	ab1a      	add	r3, sp, #104	; 0x68
 80156ec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80156f0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80156f4:	f04f 0c00 	mov.w	ip, #0
 80156f8:	45cc      	cmp	ip, r9
 80156fa:	dc26      	bgt.n	801574a <__kernel_rem_pio2+0xba>
 80156fc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80159a0 <__kernel_rem_pio2+0x310>
 8015700:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015704:	4616      	mov	r6, r2
 8015706:	2500      	movs	r5, #0
 8015708:	e015      	b.n	8015736 <__kernel_rem_pio2+0xa6>
 801570a:	42d6      	cmn	r6, r2
 801570c:	d409      	bmi.n	8015722 <__kernel_rem_pio2+0x92>
 801570e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8015712:	ee07 3a90 	vmov	s15, r3
 8015716:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801571a:	eca5 7b02 	vstmia	r5!, {d7}
 801571e:	3201      	adds	r2, #1
 8015720:	e7e0      	b.n	80156e4 <__kernel_rem_pio2+0x54>
 8015722:	eeb0 7b46 	vmov.f64	d7, d6
 8015726:	e7f8      	b.n	801571a <__kernel_rem_pio2+0x8a>
 8015728:	ecb8 5b02 	vldmia	r8!, {d5}
 801572c:	ed96 6b00 	vldr	d6, [r6]
 8015730:	3501      	adds	r5, #1
 8015732:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015736:	428d      	cmp	r5, r1
 8015738:	f1a6 0608 	sub.w	r6, r6, #8
 801573c:	ddf4      	ble.n	8015728 <__kernel_rem_pio2+0x98>
 801573e:	ecaa 7b02 	vstmia	sl!, {d7}
 8015742:	f10c 0c01 	add.w	ip, ip, #1
 8015746:	3208      	adds	r2, #8
 8015748:	e7d6      	b.n	80156f8 <__kernel_rem_pio2+0x68>
 801574a:	ab06      	add	r3, sp, #24
 801574c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80159a8 <__kernel_rem_pio2+0x318>
 8015750:	ed9f ab97 	vldr	d10, [pc, #604]	; 80159b0 <__kernel_rem_pio2+0x320>
 8015754:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8015758:	9303      	str	r3, [sp, #12]
 801575a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801575e:	464d      	mov	r5, r9
 8015760:	00eb      	lsls	r3, r5, #3
 8015762:	9304      	str	r3, [sp, #16]
 8015764:	ab92      	add	r3, sp, #584	; 0x248
 8015766:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801576a:	f10d 0b18 	add.w	fp, sp, #24
 801576e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8015770:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8015774:	465e      	mov	r6, fp
 8015776:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801577a:	4628      	mov	r0, r5
 801577c:	2800      	cmp	r0, #0
 801577e:	f1a2 0208 	sub.w	r2, r2, #8
 8015782:	dc4c      	bgt.n	801581e <__kernel_rem_pio2+0x18e>
 8015784:	4620      	mov	r0, r4
 8015786:	9105      	str	r1, [sp, #20]
 8015788:	f000 fbf2 	bl	8015f70 <scalbn>
 801578c:	eeb0 8b40 	vmov.f64	d8, d0
 8015790:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8015794:	ee28 0b00 	vmul.f64	d0, d8, d0
 8015798:	f000 fb6e 	bl	8015e78 <floor>
 801579c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80157a0:	eea0 8b47 	vfms.f64	d8, d0, d7
 80157a4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80157a8:	2c00      	cmp	r4, #0
 80157aa:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80157ae:	ee17 8a90 	vmov	r8, s15
 80157b2:	ee38 8b40 	vsub.f64	d8, d8, d0
 80157b6:	9905      	ldr	r1, [sp, #20]
 80157b8:	dd43      	ble.n	8015842 <__kernel_rem_pio2+0x1b2>
 80157ba:	1e68      	subs	r0, r5, #1
 80157bc:	ab06      	add	r3, sp, #24
 80157be:	f1c4 0c18 	rsb	ip, r4, #24
 80157c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80157c6:	fa46 f20c 	asr.w	r2, r6, ip
 80157ca:	4490      	add	r8, r2
 80157cc:	fa02 f20c 	lsl.w	r2, r2, ip
 80157d0:	1ab6      	subs	r6, r6, r2
 80157d2:	f1c4 0217 	rsb	r2, r4, #23
 80157d6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80157da:	4116      	asrs	r6, r2
 80157dc:	2e00      	cmp	r6, #0
 80157de:	dd3f      	ble.n	8015860 <__kernel_rem_pio2+0x1d0>
 80157e0:	f04f 0c00 	mov.w	ip, #0
 80157e4:	f108 0801 	add.w	r8, r8, #1
 80157e8:	4660      	mov	r0, ip
 80157ea:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80157ee:	4565      	cmp	r5, ip
 80157f0:	dc6e      	bgt.n	80158d0 <__kernel_rem_pio2+0x240>
 80157f2:	2c00      	cmp	r4, #0
 80157f4:	dd04      	ble.n	8015800 <__kernel_rem_pio2+0x170>
 80157f6:	2c01      	cmp	r4, #1
 80157f8:	d07f      	beq.n	80158fa <__kernel_rem_pio2+0x26a>
 80157fa:	2c02      	cmp	r4, #2
 80157fc:	f000 8087 	beq.w	801590e <__kernel_rem_pio2+0x27e>
 8015800:	2e02      	cmp	r6, #2
 8015802:	d12d      	bne.n	8015860 <__kernel_rem_pio2+0x1d0>
 8015804:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015808:	ee30 8b48 	vsub.f64	d8, d0, d8
 801580c:	b340      	cbz	r0, 8015860 <__kernel_rem_pio2+0x1d0>
 801580e:	4620      	mov	r0, r4
 8015810:	9105      	str	r1, [sp, #20]
 8015812:	f000 fbad 	bl	8015f70 <scalbn>
 8015816:	9905      	ldr	r1, [sp, #20]
 8015818:	ee38 8b40 	vsub.f64	d8, d8, d0
 801581c:	e020      	b.n	8015860 <__kernel_rem_pio2+0x1d0>
 801581e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8015822:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8015826:	3801      	subs	r0, #1
 8015828:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801582c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8015830:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015834:	eca6 0a01 	vstmia	r6!, {s0}
 8015838:	ed92 0b00 	vldr	d0, [r2]
 801583c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8015840:	e79c      	b.n	801577c <__kernel_rem_pio2+0xec>
 8015842:	d105      	bne.n	8015850 <__kernel_rem_pio2+0x1c0>
 8015844:	1e6a      	subs	r2, r5, #1
 8015846:	ab06      	add	r3, sp, #24
 8015848:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801584c:	15f6      	asrs	r6, r6, #23
 801584e:	e7c5      	b.n	80157dc <__kernel_rem_pio2+0x14c>
 8015850:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8015854:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801585c:	da36      	bge.n	80158cc <__kernel_rem_pio2+0x23c>
 801585e:	2600      	movs	r6, #0
 8015860:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015868:	f040 80aa 	bne.w	80159c0 <__kernel_rem_pio2+0x330>
 801586c:	f105 3bff 	add.w	fp, r5, #4294967295
 8015870:	4658      	mov	r0, fp
 8015872:	2200      	movs	r2, #0
 8015874:	4548      	cmp	r0, r9
 8015876:	da52      	bge.n	801591e <__kernel_rem_pio2+0x28e>
 8015878:	2a00      	cmp	r2, #0
 801587a:	f000 8081 	beq.w	8015980 <__kernel_rem_pio2+0x2f0>
 801587e:	ab06      	add	r3, sp, #24
 8015880:	3c18      	subs	r4, #24
 8015882:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8015886:	2b00      	cmp	r3, #0
 8015888:	f000 8087 	beq.w	801599a <__kernel_rem_pio2+0x30a>
 801588c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015890:	4620      	mov	r0, r4
 8015892:	f000 fb6d 	bl	8015f70 <scalbn>
 8015896:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801589a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80159a8 <__kernel_rem_pio2+0x318>
 801589e:	a96a      	add	r1, sp, #424	; 0x1a8
 80158a0:	f103 0208 	add.w	r2, r3, #8
 80158a4:	1888      	adds	r0, r1, r2
 80158a6:	4659      	mov	r1, fp
 80158a8:	2900      	cmp	r1, #0
 80158aa:	f280 80b7 	bge.w	8015a1c <__kernel_rem_pio2+0x38c>
 80158ae:	4659      	mov	r1, fp
 80158b0:	2900      	cmp	r1, #0
 80158b2:	f2c0 80d5 	blt.w	8015a60 <__kernel_rem_pio2+0x3d0>
 80158b6:	a86a      	add	r0, sp, #424	; 0x1a8
 80158b8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80158bc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80159a0 <__kernel_rem_pio2+0x310>
 80158c0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80159bc <__kernel_rem_pio2+0x32c>
 80158c4:	2400      	movs	r4, #0
 80158c6:	ebab 0001 	sub.w	r0, fp, r1
 80158ca:	e0be      	b.n	8015a4a <__kernel_rem_pio2+0x3ba>
 80158cc:	2602      	movs	r6, #2
 80158ce:	e787      	b.n	80157e0 <__kernel_rem_pio2+0x150>
 80158d0:	f8db 2000 	ldr.w	r2, [fp]
 80158d4:	b958      	cbnz	r0, 80158ee <__kernel_rem_pio2+0x25e>
 80158d6:	b122      	cbz	r2, 80158e2 <__kernel_rem_pio2+0x252>
 80158d8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80158dc:	f8cb 2000 	str.w	r2, [fp]
 80158e0:	2201      	movs	r2, #1
 80158e2:	f10c 0c01 	add.w	ip, ip, #1
 80158e6:	f10b 0b04 	add.w	fp, fp, #4
 80158ea:	4610      	mov	r0, r2
 80158ec:	e77f      	b.n	80157ee <__kernel_rem_pio2+0x15e>
 80158ee:	ebae 0202 	sub.w	r2, lr, r2
 80158f2:	f8cb 2000 	str.w	r2, [fp]
 80158f6:	4602      	mov	r2, r0
 80158f8:	e7f3      	b.n	80158e2 <__kernel_rem_pio2+0x252>
 80158fa:	f105 3cff 	add.w	ip, r5, #4294967295
 80158fe:	ab06      	add	r3, sp, #24
 8015900:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8015904:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015908:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801590c:	e778      	b.n	8015800 <__kernel_rem_pio2+0x170>
 801590e:	f105 3cff 	add.w	ip, r5, #4294967295
 8015912:	ab06      	add	r3, sp, #24
 8015914:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8015918:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801591c:	e7f4      	b.n	8015908 <__kernel_rem_pio2+0x278>
 801591e:	ab06      	add	r3, sp, #24
 8015920:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015924:	3801      	subs	r0, #1
 8015926:	431a      	orrs	r2, r3
 8015928:	e7a4      	b.n	8015874 <__kernel_rem_pio2+0x1e4>
 801592a:	f10c 0c01 	add.w	ip, ip, #1
 801592e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8015932:	2800      	cmp	r0, #0
 8015934:	d0f9      	beq.n	801592a <__kernel_rem_pio2+0x29a>
 8015936:	9b04      	ldr	r3, [sp, #16]
 8015938:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801593c:	eb0d 0203 	add.w	r2, sp, r3
 8015940:	9b01      	ldr	r3, [sp, #4]
 8015942:	18e8      	adds	r0, r5, r3
 8015944:	ab1a      	add	r3, sp, #104	; 0x68
 8015946:	1c6e      	adds	r6, r5, #1
 8015948:	3a98      	subs	r2, #152	; 0x98
 801594a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801594e:	4465      	add	r5, ip
 8015950:	42b5      	cmp	r5, r6
 8015952:	f6ff af05 	blt.w	8015760 <__kernel_rem_pio2+0xd0>
 8015956:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801595a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801595e:	ee07 3a90 	vmov	s15, r3
 8015962:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015966:	f04f 0c00 	mov.w	ip, #0
 801596a:	eca0 7b02 	vstmia	r0!, {d7}
 801596e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80159a0 <__kernel_rem_pio2+0x310>
 8015972:	4680      	mov	r8, r0
 8015974:	458c      	cmp	ip, r1
 8015976:	dd07      	ble.n	8015988 <__kernel_rem_pio2+0x2f8>
 8015978:	eca2 7b02 	vstmia	r2!, {d7}
 801597c:	3601      	adds	r6, #1
 801597e:	e7e7      	b.n	8015950 <__kernel_rem_pio2+0x2c0>
 8015980:	9a03      	ldr	r2, [sp, #12]
 8015982:	f04f 0c01 	mov.w	ip, #1
 8015986:	e7d2      	b.n	801592e <__kernel_rem_pio2+0x29e>
 8015988:	ecbe 5b02 	vldmia	lr!, {d5}
 801598c:	ed38 6b02 	vldmdb	r8!, {d6}
 8015990:	f10c 0c01 	add.w	ip, ip, #1
 8015994:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015998:	e7ec      	b.n	8015974 <__kernel_rem_pio2+0x2e4>
 801599a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801599e:	e76e      	b.n	801587e <__kernel_rem_pio2+0x1ee>
	...
 80159ac:	3e700000 	.word	0x3e700000
 80159b0:	00000000 	.word	0x00000000
 80159b4:	41700000 	.word	0x41700000
 80159b8:	0801a430 	.word	0x0801a430
 80159bc:	0801a3f0 	.word	0x0801a3f0
 80159c0:	4260      	negs	r0, r4
 80159c2:	eeb0 0b48 	vmov.f64	d0, d8
 80159c6:	f000 fad3 	bl	8015f70 <scalbn>
 80159ca:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8015ba8 <__kernel_rem_pio2+0x518>
 80159ce:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80159d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159d6:	db18      	blt.n	8015a0a <__kernel_rem_pio2+0x37a>
 80159d8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8015bb0 <__kernel_rem_pio2+0x520>
 80159dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80159e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80159e4:	aa06      	add	r2, sp, #24
 80159e6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80159ea:	eea5 0b46 	vfms.f64	d0, d5, d6
 80159ee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80159f2:	f105 0b01 	add.w	fp, r5, #1
 80159f6:	ee10 3a10 	vmov	r3, s0
 80159fa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80159fe:	ee17 3a10 	vmov	r3, s14
 8015a02:	3418      	adds	r4, #24
 8015a04:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8015a08:	e740      	b.n	801588c <__kernel_rem_pio2+0x1fc>
 8015a0a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015a0e:	aa06      	add	r2, sp, #24
 8015a10:	ee10 3a10 	vmov	r3, s0
 8015a14:	46ab      	mov	fp, r5
 8015a16:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015a1a:	e737      	b.n	801588c <__kernel_rem_pio2+0x1fc>
 8015a1c:	ac06      	add	r4, sp, #24
 8015a1e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8015a22:	9401      	str	r4, [sp, #4]
 8015a24:	ee07 4a90 	vmov	s15, r4
 8015a28:	3901      	subs	r1, #1
 8015a2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a2e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8015a32:	ee20 0b06 	vmul.f64	d0, d0, d6
 8015a36:	ed20 7b02 	vstmdb	r0!, {d7}
 8015a3a:	e735      	b.n	80158a8 <__kernel_rem_pio2+0x218>
 8015a3c:	ecbc 5b02 	vldmia	ip!, {d5}
 8015a40:	ecb5 6b02 	vldmia	r5!, {d6}
 8015a44:	3401      	adds	r4, #1
 8015a46:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015a4a:	454c      	cmp	r4, r9
 8015a4c:	dc01      	bgt.n	8015a52 <__kernel_rem_pio2+0x3c2>
 8015a4e:	4284      	cmp	r4, r0
 8015a50:	ddf4      	ble.n	8015a3c <__kernel_rem_pio2+0x3ac>
 8015a52:	ac42      	add	r4, sp, #264	; 0x108
 8015a54:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8015a58:	ed80 7b00 	vstr	d7, [r0]
 8015a5c:	3901      	subs	r1, #1
 8015a5e:	e727      	b.n	80158b0 <__kernel_rem_pio2+0x220>
 8015a60:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8015a62:	2902      	cmp	r1, #2
 8015a64:	dc0a      	bgt.n	8015a7c <__kernel_rem_pio2+0x3ec>
 8015a66:	2900      	cmp	r1, #0
 8015a68:	dc2c      	bgt.n	8015ac4 <__kernel_rem_pio2+0x434>
 8015a6a:	d045      	beq.n	8015af8 <__kernel_rem_pio2+0x468>
 8015a6c:	f008 0007 	and.w	r0, r8, #7
 8015a70:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8015a74:	ecbd 8b06 	vpop	{d8-d10}
 8015a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a7c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8015a7e:	2a03      	cmp	r2, #3
 8015a80:	d1f4      	bne.n	8015a6c <__kernel_rem_pio2+0x3dc>
 8015a82:	aa42      	add	r2, sp, #264	; 0x108
 8015a84:	4413      	add	r3, r2
 8015a86:	461a      	mov	r2, r3
 8015a88:	4619      	mov	r1, r3
 8015a8a:	4658      	mov	r0, fp
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	f1a1 0108 	sub.w	r1, r1, #8
 8015a92:	dc54      	bgt.n	8015b3e <__kernel_rem_pio2+0x4ae>
 8015a94:	4659      	mov	r1, fp
 8015a96:	2901      	cmp	r1, #1
 8015a98:	f1a2 0208 	sub.w	r2, r2, #8
 8015a9c:	dc5f      	bgt.n	8015b5e <__kernel_rem_pio2+0x4ce>
 8015a9e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8015bb8 <__kernel_rem_pio2+0x528>
 8015aa2:	3308      	adds	r3, #8
 8015aa4:	f1bb 0f01 	cmp.w	fp, #1
 8015aa8:	dc69      	bgt.n	8015b7e <__kernel_rem_pio2+0x4ee>
 8015aaa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8015aae:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8015ab2:	2e00      	cmp	r6, #0
 8015ab4:	d16a      	bne.n	8015b8c <__kernel_rem_pio2+0x4fc>
 8015ab6:	ed87 5b00 	vstr	d5, [r7]
 8015aba:	ed87 6b02 	vstr	d6, [r7, #8]
 8015abe:	ed87 7b04 	vstr	d7, [r7, #16]
 8015ac2:	e7d3      	b.n	8015a6c <__kernel_rem_pio2+0x3dc>
 8015ac4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8015bb8 <__kernel_rem_pio2+0x528>
 8015ac8:	ab42      	add	r3, sp, #264	; 0x108
 8015aca:	441a      	add	r2, r3
 8015acc:	465b      	mov	r3, fp
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	da26      	bge.n	8015b20 <__kernel_rem_pio2+0x490>
 8015ad2:	b35e      	cbz	r6, 8015b2c <__kernel_rem_pio2+0x49c>
 8015ad4:	eeb1 7b46 	vneg.f64	d7, d6
 8015ad8:	ed87 7b00 	vstr	d7, [r7]
 8015adc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8015ae0:	aa44      	add	r2, sp, #272	; 0x110
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015ae8:	459b      	cmp	fp, r3
 8015aea:	da22      	bge.n	8015b32 <__kernel_rem_pio2+0x4a2>
 8015aec:	b10e      	cbz	r6, 8015af2 <__kernel_rem_pio2+0x462>
 8015aee:	eeb1 7b47 	vneg.f64	d7, d7
 8015af2:	ed87 7b02 	vstr	d7, [r7, #8]
 8015af6:	e7b9      	b.n	8015a6c <__kernel_rem_pio2+0x3dc>
 8015af8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015bb8 <__kernel_rem_pio2+0x528>
 8015afc:	ab42      	add	r3, sp, #264	; 0x108
 8015afe:	441a      	add	r2, r3
 8015b00:	f1bb 0f00 	cmp.w	fp, #0
 8015b04:	da05      	bge.n	8015b12 <__kernel_rem_pio2+0x482>
 8015b06:	b10e      	cbz	r6, 8015b0c <__kernel_rem_pio2+0x47c>
 8015b08:	eeb1 7b47 	vneg.f64	d7, d7
 8015b0c:	ed87 7b00 	vstr	d7, [r7]
 8015b10:	e7ac      	b.n	8015a6c <__kernel_rem_pio2+0x3dc>
 8015b12:	ed32 6b02 	vldmdb	r2!, {d6}
 8015b16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015b1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015b1e:	e7ef      	b.n	8015b00 <__kernel_rem_pio2+0x470>
 8015b20:	ed32 7b02 	vldmdb	r2!, {d7}
 8015b24:	3b01      	subs	r3, #1
 8015b26:	ee36 6b07 	vadd.f64	d6, d6, d7
 8015b2a:	e7d0      	b.n	8015ace <__kernel_rem_pio2+0x43e>
 8015b2c:	eeb0 7b46 	vmov.f64	d7, d6
 8015b30:	e7d2      	b.n	8015ad8 <__kernel_rem_pio2+0x448>
 8015b32:	ecb2 6b02 	vldmia	r2!, {d6}
 8015b36:	3301      	adds	r3, #1
 8015b38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015b3c:	e7d4      	b.n	8015ae8 <__kernel_rem_pio2+0x458>
 8015b3e:	ed91 7b00 	vldr	d7, [r1]
 8015b42:	ed91 5b02 	vldr	d5, [r1, #8]
 8015b46:	3801      	subs	r0, #1
 8015b48:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015b4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015b50:	ed81 6b00 	vstr	d6, [r1]
 8015b54:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015b58:	ed81 7b02 	vstr	d7, [r1, #8]
 8015b5c:	e796      	b.n	8015a8c <__kernel_rem_pio2+0x3fc>
 8015b5e:	ed92 7b00 	vldr	d7, [r2]
 8015b62:	ed92 5b02 	vldr	d5, [r2, #8]
 8015b66:	3901      	subs	r1, #1
 8015b68:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015b6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015b70:	ed82 6b00 	vstr	d6, [r2]
 8015b74:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015b78:	ed82 7b02 	vstr	d7, [r2, #8]
 8015b7c:	e78b      	b.n	8015a96 <__kernel_rem_pio2+0x406>
 8015b7e:	ed33 6b02 	vldmdb	r3!, {d6}
 8015b82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015b86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015b8a:	e78b      	b.n	8015aa4 <__kernel_rem_pio2+0x414>
 8015b8c:	eeb1 5b45 	vneg.f64	d5, d5
 8015b90:	eeb1 6b46 	vneg.f64	d6, d6
 8015b94:	ed87 5b00 	vstr	d5, [r7]
 8015b98:	eeb1 7b47 	vneg.f64	d7, d7
 8015b9c:	ed87 6b02 	vstr	d6, [r7, #8]
 8015ba0:	e78d      	b.n	8015abe <__kernel_rem_pio2+0x42e>
 8015ba2:	bf00      	nop
 8015ba4:	f3af 8000 	nop.w
 8015ba8:	00000000 	.word	0x00000000
 8015bac:	41700000 	.word	0x41700000
 8015bb0:	00000000 	.word	0x00000000
 8015bb4:	3e700000 	.word	0x3e700000
	...

08015bc0 <__kernel_sin>:
 8015bc0:	ee10 3a90 	vmov	r3, s1
 8015bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015bc8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015bcc:	da04      	bge.n	8015bd8 <__kernel_sin+0x18>
 8015bce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8015bd2:	ee17 3a90 	vmov	r3, s15
 8015bd6:	b35b      	cbz	r3, 8015c30 <__kernel_sin+0x70>
 8015bd8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8015bdc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8015be0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8015c38 <__kernel_sin+0x78>
 8015be4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015c40 <__kernel_sin+0x80>
 8015be8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015bec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8015c48 <__kernel_sin+0x88>
 8015bf0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015bf4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015c50 <__kernel_sin+0x90>
 8015bf8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015bfc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8015c58 <__kernel_sin+0x98>
 8015c00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015c04:	b930      	cbnz	r0, 8015c14 <__kernel_sin+0x54>
 8015c06:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015c60 <__kernel_sin+0xa0>
 8015c0a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015c0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8015c12:	4770      	bx	lr
 8015c14:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8015c18:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8015c1c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8015c20:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8015c24:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8015c68 <__kernel_sin+0xa8>
 8015c28:	eea5 1b07 	vfma.f64	d1, d5, d7
 8015c2c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015c30:	4770      	bx	lr
 8015c32:	bf00      	nop
 8015c34:	f3af 8000 	nop.w
 8015c38:	5acfd57c 	.word	0x5acfd57c
 8015c3c:	3de5d93a 	.word	0x3de5d93a
 8015c40:	8a2b9ceb 	.word	0x8a2b9ceb
 8015c44:	be5ae5e6 	.word	0xbe5ae5e6
 8015c48:	57b1fe7d 	.word	0x57b1fe7d
 8015c4c:	3ec71de3 	.word	0x3ec71de3
 8015c50:	19c161d5 	.word	0x19c161d5
 8015c54:	bf2a01a0 	.word	0xbf2a01a0
 8015c58:	1110f8a6 	.word	0x1110f8a6
 8015c5c:	3f811111 	.word	0x3f811111
 8015c60:	55555549 	.word	0x55555549
 8015c64:	bfc55555 	.word	0xbfc55555
 8015c68:	55555549 	.word	0x55555549
 8015c6c:	3fc55555 	.word	0x3fc55555

08015c70 <log>:
 8015c70:	b470      	push	{r4, r5, r6}
 8015c72:	ee10 1a90 	vmov	r1, s1
 8015c76:	ee10 2a10 	vmov	r2, s0
 8015c7a:	f04f 34ff 	mov.w	r4, #4294967295
 8015c7e:	4294      	cmp	r4, r2
 8015c80:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8015c84:	4c72      	ldr	r4, [pc, #456]	; (8015e50 <log+0x1e0>)
 8015c86:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8015c8a:	eb74 0000 	sbcs.w	r0, r4, r0
 8015c8e:	ed2d 8b02 	vpush	{d8}
 8015c92:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8015c96:	d35c      	bcc.n	8015d52 <log+0xe2>
 8015c98:	4b6e      	ldr	r3, [pc, #440]	; (8015e54 <log+0x1e4>)
 8015c9a:	4299      	cmp	r1, r3
 8015c9c:	bf08      	it	eq
 8015c9e:	2a00      	cmpeq	r2, #0
 8015ca0:	f000 80c6 	beq.w	8015e30 <log+0x1c0>
 8015ca4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8015ca8:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015cac:	4b6a      	ldr	r3, [pc, #424]	; (8015e58 <log+0x1e8>)
 8015cae:	ee20 2b00 	vmul.f64	d2, d0, d0
 8015cb2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8015cb6:	ee20 4b02 	vmul.f64	d4, d0, d2
 8015cba:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8015cbe:	eea6 7b00 	vfma.f64	d7, d6, d0
 8015cc2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8015cc6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8015cca:	eea6 7b02 	vfma.f64	d7, d6, d2
 8015cce:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8015cd2:	eea5 6b00 	vfma.f64	d6, d5, d0
 8015cd6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8015cda:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8015cde:	eea5 6b02 	vfma.f64	d6, d5, d2
 8015ce2:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8015ce6:	eea3 5b00 	vfma.f64	d5, d3, d0
 8015cea:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8015cee:	eea3 5b02 	vfma.f64	d5, d3, d2
 8015cf2:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8015cf6:	eeb0 2b40 	vmov.f64	d2, d0
 8015cfa:	eea3 5b04 	vfma.f64	d5, d3, d4
 8015cfe:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8015d02:	eea5 6b04 	vfma.f64	d6, d5, d4
 8015d06:	eea6 7b04 	vfma.f64	d7, d6, d4
 8015d0a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8015e38 <log+0x1c8>
 8015d0e:	eeb0 1b47 	vmov.f64	d1, d7
 8015d12:	eeb0 5b40 	vmov.f64	d5, d0
 8015d16:	eea0 5b06 	vfma.f64	d5, d0, d6
 8015d1a:	eea0 5b46 	vfms.f64	d5, d0, d6
 8015d1e:	ee30 8b45 	vsub.f64	d8, d0, d5
 8015d22:	ee25 7b05 	vmul.f64	d7, d5, d5
 8015d26:	ee30 5b05 	vadd.f64	d5, d0, d5
 8015d2a:	eea7 2b03 	vfma.f64	d2, d7, d3
 8015d2e:	ee30 6b42 	vsub.f64	d6, d0, d2
 8015d32:	eea7 6b03 	vfma.f64	d6, d7, d3
 8015d36:	ee23 3b08 	vmul.f64	d3, d3, d8
 8015d3a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8015d3e:	eeb0 0b46 	vmov.f64	d0, d6
 8015d42:	eea1 0b04 	vfma.f64	d0, d1, d4
 8015d46:	ee32 0b00 	vadd.f64	d0, d2, d0
 8015d4a:	ecbd 8b02 	vpop	{d8}
 8015d4e:	bc70      	pop	{r4, r5, r6}
 8015d50:	4770      	bx	lr
 8015d52:	f1a3 0410 	sub.w	r4, r3, #16
 8015d56:	f647 70df 	movw	r0, #32735	; 0x7fdf
 8015d5a:	4284      	cmp	r4, r0
 8015d5c:	d923      	bls.n	8015da6 <log+0x136>
 8015d5e:	1894      	adds	r4, r2, r2
 8015d60:	eb41 0001 	adc.w	r0, r1, r1
 8015d64:	4320      	orrs	r0, r4
 8015d66:	d105      	bne.n	8015d74 <log+0x104>
 8015d68:	ecbd 8b02 	vpop	{d8}
 8015d6c:	2001      	movs	r0, #1
 8015d6e:	bc70      	pop	{r4, r5, r6}
 8015d70:	f7ff b95e 	b.w	8015030 <__math_divzero>
 8015d74:	4839      	ldr	r0, [pc, #228]	; (8015e5c <log+0x1ec>)
 8015d76:	4281      	cmp	r1, r0
 8015d78:	bf08      	it	eq
 8015d7a:	2a00      	cmpeq	r2, #0
 8015d7c:	d0e5      	beq.n	8015d4a <log+0xda>
 8015d7e:	041a      	lsls	r2, r3, #16
 8015d80:	d404      	bmi.n	8015d8c <log+0x11c>
 8015d82:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8015d86:	ea32 0303 	bics.w	r3, r2, r3
 8015d8a:	d104      	bne.n	8015d96 <log+0x126>
 8015d8c:	ecbd 8b02 	vpop	{d8}
 8015d90:	bc70      	pop	{r4, r5, r6}
 8015d92:	f7ff b965 	b.w	8015060 <__math_invalid>
 8015d96:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8015e40 <log+0x1d0>
 8015d9a:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015d9e:	ec53 2b17 	vmov	r2, r3, d7
 8015da2:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8015da6:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8015daa:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 8015dae:	0d1e      	lsrs	r6, r3, #20
 8015db0:	1e14      	subs	r4, r2, #0
 8015db2:	4a29      	ldr	r2, [pc, #164]	; (8015e58 <log+0x1e8>)
 8015db4:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8015db8:	f3c3 3046 	ubfx	r0, r3, #13, #7
 8015dbc:	0536      	lsls	r6, r6, #20
 8015dbe:	1b8d      	subs	r5, r1, r6
 8015dc0:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 8015dc4:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8015dc8:	ec45 4b16 	vmov	d6, r4, r5
 8015dcc:	151b      	asrs	r3, r3, #20
 8015dce:	eea6 5b07 	vfma.f64	d5, d6, d7
 8015dd2:	ee07 3a90 	vmov	s15, r3
 8015dd6:	ee25 2b05 	vmul.f64	d2, d5, d5
 8015dda:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8015dde:	ed92 4b00 	vldr	d4, [r2]
 8015de2:	ee25 1b02 	vmul.f64	d1, d5, d2
 8015de6:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8015dea:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015dee:	ee35 4b07 	vadd.f64	d4, d5, d7
 8015df2:	ee37 0b44 	vsub.f64	d0, d7, d4
 8015df6:	ed92 7b02 	vldr	d7, [r2, #8]
 8015dfa:	ee30 0b05 	vadd.f64	d0, d0, d5
 8015dfe:	eea7 0b06 	vfma.f64	d0, d7, d6
 8015e02:	ed92 7b04 	vldr	d7, [r2, #16]
 8015e06:	ed92 6b08 	vldr	d6, [r2, #32]
 8015e0a:	eea7 0b02 	vfma.f64	d0, d7, d2
 8015e0e:	ed92 7b06 	vldr	d7, [r2, #24]
 8015e12:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 8015e16:	eea6 7b05 	vfma.f64	d7, d6, d5
 8015e1a:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 8015e1e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8015e22:	eea6 7b02 	vfma.f64	d7, d6, d2
 8015e26:	eea1 0b07 	vfma.f64	d0, d1, d7
 8015e2a:	ee30 0b04 	vadd.f64	d0, d0, d4
 8015e2e:	e78c      	b.n	8015d4a <log+0xda>
 8015e30:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8015e48 <log+0x1d8>
 8015e34:	e789      	b.n	8015d4a <log+0xda>
 8015e36:	bf00      	nop
 8015e38:	00000000 	.word	0x00000000
 8015e3c:	41a00000 	.word	0x41a00000
 8015e40:	00000000 	.word	0x00000000
 8015e44:	43300000 	.word	0x43300000
	...
 8015e50:	000308ff 	.word	0x000308ff
 8015e54:	3ff00000 	.word	0x3ff00000
 8015e58:	0801a440 	.word	0x0801a440
 8015e5c:	7ff00000 	.word	0x7ff00000

08015e60 <fabs>:
 8015e60:	ec51 0b10 	vmov	r0, r1, d0
 8015e64:	ee10 2a10 	vmov	r2, s0
 8015e68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015e6c:	ec43 2b10 	vmov	d0, r2, r3
 8015e70:	4770      	bx	lr
 8015e72:	0000      	movs	r0, r0
 8015e74:	0000      	movs	r0, r0
	...

08015e78 <floor>:
 8015e78:	ee10 1a90 	vmov	r1, s1
 8015e7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015e80:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8015e84:	2b13      	cmp	r3, #19
 8015e86:	b530      	push	{r4, r5, lr}
 8015e88:	ee10 0a10 	vmov	r0, s0
 8015e8c:	ee10 5a10 	vmov	r5, s0
 8015e90:	dc31      	bgt.n	8015ef6 <floor+0x7e>
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	da15      	bge.n	8015ec2 <floor+0x4a>
 8015e96:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015f50 <floor+0xd8>
 8015e9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015e9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea6:	dd07      	ble.n	8015eb8 <floor+0x40>
 8015ea8:	2900      	cmp	r1, #0
 8015eaa:	da4e      	bge.n	8015f4a <floor+0xd2>
 8015eac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015eb0:	4318      	orrs	r0, r3
 8015eb2:	d001      	beq.n	8015eb8 <floor+0x40>
 8015eb4:	4928      	ldr	r1, [pc, #160]	; (8015f58 <floor+0xe0>)
 8015eb6:	2000      	movs	r0, #0
 8015eb8:	460b      	mov	r3, r1
 8015eba:	4602      	mov	r2, r0
 8015ebc:	ec43 2b10 	vmov	d0, r2, r3
 8015ec0:	e020      	b.n	8015f04 <floor+0x8c>
 8015ec2:	4a26      	ldr	r2, [pc, #152]	; (8015f5c <floor+0xe4>)
 8015ec4:	411a      	asrs	r2, r3
 8015ec6:	ea01 0402 	and.w	r4, r1, r2
 8015eca:	4304      	orrs	r4, r0
 8015ecc:	d01a      	beq.n	8015f04 <floor+0x8c>
 8015ece:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015f50 <floor+0xd8>
 8015ed2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015ed6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ede:	ddeb      	ble.n	8015eb8 <floor+0x40>
 8015ee0:	2900      	cmp	r1, #0
 8015ee2:	bfbe      	ittt	lt
 8015ee4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8015ee8:	fa40 f303 	asrlt.w	r3, r0, r3
 8015eec:	18c9      	addlt	r1, r1, r3
 8015eee:	ea21 0102 	bic.w	r1, r1, r2
 8015ef2:	2000      	movs	r0, #0
 8015ef4:	e7e0      	b.n	8015eb8 <floor+0x40>
 8015ef6:	2b33      	cmp	r3, #51	; 0x33
 8015ef8:	dd05      	ble.n	8015f06 <floor+0x8e>
 8015efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015efe:	d101      	bne.n	8015f04 <floor+0x8c>
 8015f00:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015f04:	bd30      	pop	{r4, r5, pc}
 8015f06:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8015f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8015f0e:	40e2      	lsrs	r2, r4
 8015f10:	4202      	tst	r2, r0
 8015f12:	d0f7      	beq.n	8015f04 <floor+0x8c>
 8015f14:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8015f50 <floor+0xd8>
 8015f18:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015f1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f24:	ddc8      	ble.n	8015eb8 <floor+0x40>
 8015f26:	2900      	cmp	r1, #0
 8015f28:	da02      	bge.n	8015f30 <floor+0xb8>
 8015f2a:	2b14      	cmp	r3, #20
 8015f2c:	d103      	bne.n	8015f36 <floor+0xbe>
 8015f2e:	3101      	adds	r1, #1
 8015f30:	ea20 0002 	bic.w	r0, r0, r2
 8015f34:	e7c0      	b.n	8015eb8 <floor+0x40>
 8015f36:	2401      	movs	r4, #1
 8015f38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015f3c:	fa04 f303 	lsl.w	r3, r4, r3
 8015f40:	4418      	add	r0, r3
 8015f42:	42a8      	cmp	r0, r5
 8015f44:	bf38      	it	cc
 8015f46:	1909      	addcc	r1, r1, r4
 8015f48:	e7f2      	b.n	8015f30 <floor+0xb8>
 8015f4a:	2000      	movs	r0, #0
 8015f4c:	4601      	mov	r1, r0
 8015f4e:	e7b3      	b.n	8015eb8 <floor+0x40>
 8015f50:	8800759c 	.word	0x8800759c
 8015f54:	7e37e43c 	.word	0x7e37e43c
 8015f58:	bff00000 	.word	0xbff00000
 8015f5c:	000fffff 	.word	0x000fffff

08015f60 <nan>:
 8015f60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015f68 <nan+0x8>
 8015f64:	4770      	bx	lr
 8015f66:	bf00      	nop
 8015f68:	00000000 	.word	0x00000000
 8015f6c:	7ff80000 	.word	0x7ff80000

08015f70 <scalbn>:
 8015f70:	ee10 1a90 	vmov	r1, s1
 8015f74:	b510      	push	{r4, lr}
 8015f76:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8015f7a:	b98c      	cbnz	r4, 8015fa0 <scalbn+0x30>
 8015f7c:	ee10 3a10 	vmov	r3, s0
 8015f80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015f84:	430b      	orrs	r3, r1
 8015f86:	d011      	beq.n	8015fac <scalbn+0x3c>
 8015f88:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8016050 <scalbn+0xe0>
 8015f8c:	4b3c      	ldr	r3, [pc, #240]	; (8016080 <scalbn+0x110>)
 8015f8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015f92:	4298      	cmp	r0, r3
 8015f94:	da0b      	bge.n	8015fae <scalbn+0x3e>
 8015f96:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8016058 <scalbn+0xe8>
 8015f9a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015f9e:	e005      	b.n	8015fac <scalbn+0x3c>
 8015fa0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8015fa4:	429c      	cmp	r4, r3
 8015fa6:	d107      	bne.n	8015fb8 <scalbn+0x48>
 8015fa8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015fac:	bd10      	pop	{r4, pc}
 8015fae:	ee10 1a90 	vmov	r1, s1
 8015fb2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8015fb6:	3c36      	subs	r4, #54	; 0x36
 8015fb8:	4404      	add	r4, r0
 8015fba:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8015fbe:	429c      	cmp	r4, r3
 8015fc0:	dd0d      	ble.n	8015fde <scalbn+0x6e>
 8015fc2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8016060 <scalbn+0xf0>
 8015fc6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8016068 <scalbn+0xf8>
 8015fca:	eeb0 6b47 	vmov.f64	d6, d7
 8015fce:	ee10 3a90 	vmov	r3, s1
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	fe27 7b05 	vselge.f64	d7, d7, d5
 8015fd8:	ee27 0b06 	vmul.f64	d0, d7, d6
 8015fdc:	e7e6      	b.n	8015fac <scalbn+0x3c>
 8015fde:	2c00      	cmp	r4, #0
 8015fe0:	dd0a      	ble.n	8015ff8 <scalbn+0x88>
 8015fe2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8015fe6:	ec53 2b10 	vmov	r2, r3, d0
 8015fea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8015fee:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8015ff2:	ec43 2b10 	vmov	d0, r2, r3
 8015ff6:	e7d9      	b.n	8015fac <scalbn+0x3c>
 8015ff8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8015ffc:	da19      	bge.n	8016032 <scalbn+0xc2>
 8015ffe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016002:	4298      	cmp	r0, r3
 8016004:	ee10 3a90 	vmov	r3, s1
 8016008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801600c:	dd09      	ble.n	8016022 <scalbn+0xb2>
 801600e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8016060 <scalbn+0xf0>
 8016012:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8016068 <scalbn+0xf8>
 8016016:	eeb0 7b40 	vmov.f64	d7, d0
 801601a:	2b00      	cmp	r3, #0
 801601c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8016020:	e7bb      	b.n	8015f9a <scalbn+0x2a>
 8016022:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8016058 <scalbn+0xe8>
 8016026:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8016070 <scalbn+0x100>
 801602a:	eeb0 7b40 	vmov.f64	d7, d0
 801602e:	2b00      	cmp	r3, #0
 8016030:	e7f4      	b.n	801601c <scalbn+0xac>
 8016032:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016036:	ec53 2b10 	vmov	r2, r3, d0
 801603a:	3436      	adds	r4, #54	; 0x36
 801603c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016040:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016044:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8016078 <scalbn+0x108>
 8016048:	ec43 2b10 	vmov	d0, r2, r3
 801604c:	e7a5      	b.n	8015f9a <scalbn+0x2a>
 801604e:	bf00      	nop
 8016050:	00000000 	.word	0x00000000
 8016054:	43500000 	.word	0x43500000
 8016058:	c2f8f359 	.word	0xc2f8f359
 801605c:	01a56e1f 	.word	0x01a56e1f
 8016060:	8800759c 	.word	0x8800759c
 8016064:	7e37e43c 	.word	0x7e37e43c
 8016068:	8800759c 	.word	0x8800759c
 801606c:	fe37e43c 	.word	0xfe37e43c
 8016070:	c2f8f359 	.word	0xc2f8f359
 8016074:	81a56e1f 	.word	0x81a56e1f
 8016078:	00000000 	.word	0x00000000
 801607c:	3c900000 	.word	0x3c900000
 8016080:	ffff3cb0 	.word	0xffff3cb0

08016084 <_init>:
 8016084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016086:	bf00      	nop
 8016088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801608a:	bc08      	pop	{r3}
 801608c:	469e      	mov	lr, r3
 801608e:	4770      	bx	lr

08016090 <_fini>:
 8016090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016092:	bf00      	nop
 8016094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016096:	bc08      	pop	{r3}
 8016098:	469e      	mov	lr, r3
 801609a:	4770      	bx	lr
