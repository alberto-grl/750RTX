
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012394  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a720  08012638  08012638  00022638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cd58  0801cd58  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801cd58  0801cd58  0002cd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cd60  0801cd60  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cd60  0801cd60  0002cd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cd64  0801cd64  0002cd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000548  24000000  0801cd68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eda8  24000560  0801d2b0  00030560  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400f308  0801d2b0  0003f308  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004822f  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000080c9  00000000  00000000  0009725d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0002d4fd  00000000  00000000  0009f326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b28  00000000  00000000  000cc828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004b48  00000000  00000000  000ce350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008af2  00000000  00000000  000d2e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040b9b  00000000  00000000  000db98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018640d  00000000  00000000  0011c525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c5  00000000  00000000  002a2932  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e3c  00000000  00000000  002a29f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000560 	.word	0x24000560
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801261c 	.word	0x0801261c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000564 	.word	0x24000564
 80002dc:	0801261c 	.word	0x0801261c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 8000694:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 8000696:	4c05      	ldr	r4, [pc, #20]	; (80006ac <loadWPM+0x18>)
{
 8000698:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 800069a:	17c3      	asrs	r3, r0, #31
 800069c:	2100      	movs	r1, #0
 800069e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80006a2:	f7ff fe75 	bl	8000390 <__aeabi_uldivmod>
 80006a6:	6020      	str	r0, [r4, #0]

}
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	24009a58 	.word	0x24009a58

080006b0 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

void DoKeyer(void)
{

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 80006b2:	4c9e      	ldr	r4, [pc, #632]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d12e      	bne.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 80006ba:	4a9d      	ldr	r2, [pc, #628]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	2a02      	cmp	r2, #2
 80006c0:	d029      	beq.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x66>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 80006c2:	4d9c      	ldr	r5, [pc, #624]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006c4:	782a      	ldrb	r2, [r5, #0]
 80006c6:	2a05      	cmp	r2, #5
 80006c8:	d825      	bhi.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x66>
 80006ca:	e8df f012 	tbh	[pc, r2, lsl #1]
 80006ce:	006f      	.short	0x006f
 80006d0:	00d6009e 	.word	0x00d6009e
 80006d4:	00ac0006 	.word	0x00ac0006
 80006d8:	003f      	.short	0x003f
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 80006da:	4a97      	ldr	r2, [pc, #604]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80006dc:	2001      	movs	r0, #1
 80006de:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	f000 80df 	beq.w	80008a4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 80006e6:	4f95      	ldr	r7, [pc, #596]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
	tx = tx_enable;
 80006e8:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 80006ea:	2300      	movs	r3, #0
			CarrierEnable(1);
 80006ec:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 80006ee:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80006f0:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 80006f2:	f002 fbcd 	bl	8002e90 <CarrierEnable>
		TXSwitch(1);
 80006f6:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 80006f8:	2404      	movs	r4, #4
		TXSwitch(1);
 80006fa:	f002 fb65 	bl	8002dc8 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 80006fe:	f003 fe25 	bl	800434c <HAL_GetTick>
 8000702:	498f      	ldr	r1, [pc, #572]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000704:	4a8f      	ldr	r2, [pc, #572]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000706:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 8000708:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800070a:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800070c:	7813      	ldrb	r3, [r2, #0]
 800070e:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000712:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000714:	7013      	strb	r3, [r2, #0]
}
 8000716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 8000718:	f003 fe18 	bl	800434c <HAL_GetTick>
 800071c:	6823      	ldr	r3, [r4, #0]
 800071e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8000722:	4290      	cmp	r0, r2
 8000724:	f200 80b7 	bhi.w	8000896 <HAL_TIM_PeriodElapsedCallback+0x1e6>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0c6      	beq.n	80006ba <HAL_TIM_PeriodElapsedCallback+0xa>
 800072c:	f003 fe0e 	bl	800434c <HAL_GetTick>
 8000730:	6823      	ldr	r3, [r4, #0]
 8000732:	4298      	cmp	r0, r3
 8000734:	d9c1      	bls.n	80006ba <HAL_TIM_PeriodElapsedCallback+0xa>
			TXSwitch(0);
 8000736:	2000      	movs	r0, #0
 8000738:	f002 fb46 	bl	8002dc8 <TXSwitch>
			semi_qsk_timeout = 0;
 800073c:	2200      	movs	r2, #0
						pk = Saved_pk;
 800073e:	4882      	ldr	r0, [pc, #520]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000740:	4982      	ldr	r1, [pc, #520]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000742:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 8000744:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 8000746:	6802      	ldr	r2, [r0, #0]
 8000748:	600a      	str	r2, [r1, #0]
 800074a:	e7b6      	b.n	80006ba <HAL_TIM_PeriodElapsedCallback+0xa>
	if(KEYER_DASH) {
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	4880      	ldr	r0, [pc, #512]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000750:	f006 fd86 	bl	8007260 <HAL_GPIO_ReadPin>
 8000754:	b948      	cbnz	r0, 800076a <HAL_TIM_PeriodElapsedCallback+0xba>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 8000756:	4b7f      	ldr	r3, [pc, #508]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000758:	4a7a      	ldr	r2, [pc, #488]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	7811      	ldrb	r1, [r2, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2302      	movne	r3, #2
 8000764:	2301      	moveq	r3, #1
 8000766:	430b      	orrs	r3, r1
 8000768:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	4878      	ldr	r0, [pc, #480]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800076e:	f006 fd77 	bl	8007260 <HAL_GPIO_ReadPin>
 8000772:	b948      	cbnz	r0, 8000788 <HAL_TIM_PeriodElapsedCallback+0xd8>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 8000774:	4b77      	ldr	r3, [pc, #476]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000776:	4a73      	ldr	r2, [pc, #460]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	7811      	ldrb	r1, [r2, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf14      	ite	ne
 8000780:	2301      	movne	r3, #1
 8000782:	2302      	moveq	r3, #2
 8000784:	430b      	orrs	r3, r1
 8000786:	7013      	strb	r3, [r2, #0]
			}
			break;
		case INTER_ELEMENT:
			// Insert time between dits/dahs
			update_PaddleLatch();               // latch paddle state
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 8000788:	f003 fde0 	bl	800434c <HAL_GetTick>
 800078c:	4b6c      	ldr	r3, [pc, #432]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4298      	cmp	r0, r3
 8000792:	d9c0      	bls.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x66>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 8000794:	4a6b      	ldr	r2, [pc, #428]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000796:	7813      	ldrb	r3, [r2, #0]
 8000798:	f013 0104 	ands.w	r1, r3, #4
 800079c:	f000 80b2 	beq.w	8000904 <HAL_TIM_PeriodElapsedCallback+0x254>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007a0:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007a4:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007a6:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007a8:	7029      	strb	r1, [r5, #0]
}
 80007aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if((KEYER_DASH) ||
 80007ac:	2140      	movs	r1, #64	; 0x40
 80007ae:	4868      	ldr	r0, [pc, #416]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80007b0:	f006 fd56 	bl	8007260 <HAL_GPIO_ReadPin>
 80007b4:	b140      	cbz	r0, 80007c8 <HAL_TIM_PeriodElapsedCallback+0x118>
					(KEYER_DOT) ||
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	4865      	ldr	r0, [pc, #404]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80007ba:	f006 fd51 	bl	8007260 <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 80007be:	b118      	cbz	r0, 80007c8 <HAL_TIM_PeriodElapsedCallback+0x118>
					(keyerControl & 0x03))
 80007c0:	4b60      	ldr	r3, [pc, #384]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
					(KEYER_DOT) ||
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	0798      	lsls	r0, r3, #30
 80007c6:	d0a6      	beq.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x66>
	if(KEYER_DASH) {
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4861      	ldr	r0, [pc, #388]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80007cc:	f006 fd48 	bl	8007260 <HAL_GPIO_ReadPin>
 80007d0:	b948      	cbnz	r0, 80007e6 <HAL_TIM_PeriodElapsedCallback+0x136>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80007d2:	4b60      	ldr	r3, [pc, #384]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80007d4:	4a5b      	ldr	r2, [pc, #364]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	7811      	ldrb	r1, [r2, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf14      	ite	ne
 80007de:	2302      	movne	r3, #2
 80007e0:	2301      	moveq	r3, #1
 80007e2:	430b      	orrs	r3, r1
 80007e4:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	4859      	ldr	r0, [pc, #356]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80007ea:	f006 fd39 	bl	8007260 <HAL_GPIO_ReadPin>
 80007ee:	b948      	cbnz	r0, 8000804 <HAL_TIM_PeriodElapsedCallback+0x154>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80007f0:	4b58      	ldr	r3, [pc, #352]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80007f2:	4a54      	ldr	r2, [pc, #336]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	7811      	ldrb	r1, [r2, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2302      	moveq	r3, #2
 8000800:	430b      	orrs	r3, r1
 8000802:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8000804:	2301      	movs	r3, #1
 8000806:	702b      	strb	r3, [r5, #0]
}
 8000808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(keyerControl & DIT_L) {
 800080a:	4a4e      	ldr	r2, [pc, #312]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800080c:	7813      	ldrb	r3, [r2, #0]
 800080e:	07d9      	lsls	r1, r3, #31
 8000810:	d55c      	bpl.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x21c>
				keyerControl |= DIT_PROC;
 8000812:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 8000816:	4850      	ldr	r0, [pc, #320]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000818:	4949      	ldr	r1, [pc, #292]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800081a:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 800081c:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800081e:	2303      	movs	r3, #3
				ktimer = ditTime;
 8000820:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 8000822:	702b      	strb	r3, [r5, #0]
}
 8000824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 8000826:	4e46      	ldr	r6, [pc, #280]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000828:	f003 fd90 	bl	800434c <HAL_GetTick>
 800082c:	6833      	ldr	r3, [r6, #0]
 800082e:	4298      	cmp	r0, r3
 8000830:	d84f      	bhi.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x222>
			} else if(keyerControl & IAMBICB) {
 8000832:	4c44      	ldr	r4, [pc, #272]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000834:	7823      	ldrb	r3, [r4, #0]
 8000836:	06db      	lsls	r3, r3, #27
 8000838:	f57f af6d 	bpl.w	8000716 <HAL_TIM_PeriodElapsedCallback+0x66>
	if(KEYER_DASH) {
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	4844      	ldr	r0, [pc, #272]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000840:	f006 fd0e 	bl	8007260 <HAL_GPIO_ReadPin>
 8000844:	b940      	cbnz	r0, 8000858 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 8000846:	4b43      	ldr	r3, [pc, #268]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000848:	7822      	ldrb	r2, [r4, #0]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	bf14      	ite	ne
 8000850:	2302      	movne	r3, #2
 8000852:	2301      	moveq	r3, #1
 8000854:	4313      	orrs	r3, r2
 8000856:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	483d      	ldr	r0, [pc, #244]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800085c:	f006 fd00 	bl	8007260 <HAL_GPIO_ReadPin>
 8000860:	2800      	cmp	r0, #0
 8000862:	f47f af58 	bne.w	8000716 <HAL_TIM_PeriodElapsedCallback+0x66>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000868:	7822      	ldrb	r2, [r4, #0]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	bf14      	ite	ne
 8000870:	2301      	movne	r3, #1
 8000872:	2302      	moveq	r3, #2
 8000874:	4313      	orrs	r3, r2
 8000876:	7023      	strb	r3, [r4, #0]
}
 8000878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(keyerControl & DAH_L) {
 800087a:	4b32      	ldr	r3, [pc, #200]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	f013 0302 	ands.w	r3, r3, #2
 8000882:	d00d      	beq.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
				ktimer = ditTime*3;
 8000884:	4b34      	ldr	r3, [pc, #208]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
				keyerState = KEYED_PREP;
 8000886:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 8000888:	4a2d      	ldr	r2, [pc, #180]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800088a:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 800088c:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 800088e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TXSwitch(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f002 fa96 	bl	8002dc8 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	e743      	b.n	8000728 <HAL_TIM_PeriodElapsedCallback+0x78>
				keyerState = IDLE;
 80008a0:	702b      	strb	r3, [r5, #0]
}
 80008a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80008a4:	4e2d      	ldr	r6, [pc, #180]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80008a6:	4f25      	ldr	r7, [pc, #148]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80008a8:	7833      	ldrb	r3, [r6, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f43f af1c 	beq.w	80006e8 <HAL_TIM_PeriodElapsedCallback+0x38>
 80008b0:	783b      	ldrb	r3, [r7, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f47f af18 	bne.w	80006e8 <HAL_TIM_PeriodElapsedCallback+0x38>
					Saved_pk = pk;
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80008be:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 80008c0:	f002 fa82 	bl	8002dc8 <TXSwitch>
			HAL_Delay(txdelay);
 80008c4:	7830      	ldrb	r0, [r6, #0]
 80008c6:	f003 fd47 	bl	8004358 <HAL_Delay>
 80008ca:	e70d      	b.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x38>
				keyerState = CHK_DAH;
 80008cc:	2302      	movs	r3, #2
 80008ce:	702b      	strb	r3, [r5, #0]
}
 80008d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Key_state = LOW;
 80008d2:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80008d4:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 80008d6:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 80008d8:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 80008da:	b9c0      	cbnz	r0, 800090e <HAL_TIM_PeriodElapsedCallback+0x25e>
	tx = tx_enable;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008de:	4f1e      	ldr	r7, [pc, #120]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
	tx = tx_enable;
 80008e0:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 80008e2:	f002 fad5 	bl	8002e90 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008e6:	f003 fd31 	bl	800434c <HAL_GetTick>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80008f0:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 80008f2:	b1a0      	cbz	r0, 800091e <HAL_TIM_PeriodElapsedCallback+0x26e>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 80008f4:	f003 fd2a 	bl	800434c <HAL_GetTick>
 80008f8:	683b      	ldr	r3, [r7, #0]
				keyerState = INTER_ELEMENT;     // next state
 80008fa:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 80008fc:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 80008fe:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000900:	6030      	str	r0, [r6, #0]
}
 8000902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				} else {
					keyerControl &= ~(DAH_L);              // clear dah latch
 8000904:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 8000908:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 800090a:	7013      	strb	r3, [r2, #0]
}
 800090c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	tx = tx_enable;
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
			semi_qsk_timeout = 0;
 8000910:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 8000912:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 8000914:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	4f0f      	ldr	r7, [pc, #60]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800091c:	601a      	str	r2, [r3, #0]
			TXSwitch(0);
 800091e:	2000      	movs	r0, #0
 8000920:	f002 fa52 	bl	8002dc8 <TXSwitch>
			semi_qsk_timeout = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	6023      	str	r3, [r4, #0]
 8000928:	e7e4      	b.n	80008f4 <HAL_TIM_PeriodElapsedCallback+0x244>
 800092a:	bf00      	nop
 800092c:	2400c7b4 	.word	0x2400c7b4
 8000930:	2400c62a 	.word	0x2400c62a
 8000934:	2400c629 	.word	0x2400c629
 8000938:	2400608c 	.word	0x2400608c
 800093c:	2400d7e8 	.word	0x2400d7e8
 8000940:	2400c634 	.word	0x2400c634
 8000944:	2400c628 	.word	0x2400c628
 8000948:	240070b0 	.word	0x240070b0
 800094c:	2400c660 	.word	0x2400c660
 8000950:	58020000 	.word	0x58020000
 8000954:	2400c630 	.word	0x2400c630
 8000958:	24009a58 	.word	0x24009a58
 800095c:	2400d7e9 	.word	0x2400d7e9

08000960 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <Load_Presets+0x40>)
{
 8000962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000966:	4c0f      	ldr	r4, [pc, #60]	; (80009a4 <Load_Presets+0x44>)
 8000968:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 800096c:	4f0e      	ldr	r7, [pc, #56]	; (80009a8 <Load_Presets+0x48>)
 800096e:	4e0f      	ldr	r6, [pc, #60]	; (80009ac <Load_Presets+0x4c>)
 8000970:	4d0f      	ldr	r5, [pc, #60]	; (80009b0 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8000972:	4621      	mov	r1, r4
 8000974:	4618      	mov	r0, r3
 8000976:	f00e fb51 	bl	800f01c <strcpy>
 800097a:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 800097c:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8000980:	3410      	adds	r4, #16
 8000982:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8000984:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8000988:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 800098c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8000990:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8000992:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8000996:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 800099a:	d1ea      	bne.n	8000972 <Load_Presets+0x12>
	}
}
 800099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009a0:	2400c664 	.word	0x2400c664
 80009a4:	24000000 	.word	0x24000000
 80009a8:	08018648 	.word	0x08018648
 80009ac:	0801867f 	.word	0x0801867f
 80009b0:	08018637 	.word	0x08018637

080009b4 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <SetBW+0x8c>)
	CurrentBW = newbw;
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <SetBW+0x90>)
{
 80009b8:	b410      	push	{r4}
	switch(CurrentMode)
 80009ba:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 80009bc:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d83a      	bhi.n	8000a38 <SetBW+0x84>
 80009c2:	e8df f003 	tbb	[pc, r3]
 80009c6:	232b      	.short	0x232b
 80009c8:	0210      	.short	0x0210

		break;

	case CW  :

		bw[CW] = newbw;
 80009ca:	4c1f      	ldr	r4, [pc, #124]	; (8000a48 <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 80009cc:	2100      	movs	r1, #0
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80009d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 80009d4:	70e0      	strb	r0, [r4, #3]
		CWindex = 0; // TODO toglimi
 80009d6:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80009d8:	481d      	ldr	r0, [pc, #116]	; (8000a50 <SetBW+0x9c>)
 80009da:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <SetBW+0xa0>)
 80009dc:	491e      	ldr	r1, [pc, #120]	; (8000a58 <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 80009de:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80009e2:	f001 b88f 	b.w	8001b04 <SDR_2R_toC_f32>
		USBindex = (newbw == Narrow) ? 0 : 1;
 80009e6:	1e02      	subs	r2, r0, #0
		bw[USB] = newbw;
 80009e8:	4917      	ldr	r1, [pc, #92]	; (8000a48 <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <SetBW+0xa8>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 80009ec:	bf18      	it	ne
 80009ee:	2201      	movne	r2, #1
		USBindex = 0; // TODO toglimi
 80009f0:	4c1b      	ldr	r4, [pc, #108]	; (8000a60 <SetBW+0xac>)
		bw[USB] = newbw;
 80009f2:	7088      	strb	r0, [r1, #2]
		USBindex = 0; // TODO toglimi
 80009f4:	2000      	movs	r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 80009f6:	801a      	strh	r2, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80009f8:	491a      	ldr	r1, [pc, #104]	; (8000a64 <SetBW+0xb0>)
 80009fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 80009fe:	8020      	strh	r0, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <SetBW+0xa0>)
 8000a02:	4819      	ldr	r0, [pc, #100]	; (8000a68 <SetBW+0xb4>)
}	
 8000a04:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000a08:	f001 b87c 	b.w	8001b04 <SDR_2R_toC_f32>
		bw[LSB] = newbw;
 8000a0c:	490e      	ldr	r1, [pc, #56]	; (8000a48 <SetBW+0x94>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000a0e:	1e02      	subs	r2, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <SetBW+0xa8>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000a12:	bf18      	it	ne
 8000a14:	2201      	movne	r2, #1
		LSBindex = 0; // TODO toglimi
 8000a16:	4c15      	ldr	r4, [pc, #84]	; (8000a6c <SetBW+0xb8>)
		bw[LSB] = newbw;
 8000a18:	7048      	strb	r0, [r1, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000a1a:	e7eb      	b.n	80009f4 <SetBW+0x40>
		bw[AM] = newbw;
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000a26:	7020      	strb	r0, [r4, #0]
		AMindex = 0; // TODO toglimi
 8000a28:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <SetBW+0xbc>)
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <SetBW+0xa0>)
 8000a2e:	4911      	ldr	r1, [pc, #68]	; (8000a74 <SetBW+0xc0>)
}	
 8000a30:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000a34:	f001 b866 	b.w	8001b04 <SDR_2R_toC_f32>
}	
 8000a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	24001e6c 	.word	0x24001e6c
 8000a44:	24001e6b 	.word	0x24001e6b
 8000a48:	24009a50 	.word	0x24009a50
 8000a4c:	24001e68 	.word	0x24001e68
 8000a50:	08015638 	.word	0x08015638
 8000a54:	20004000 	.word	0x20004000
 8000a58:	08014638 	.word	0x08014638
 8000a5c:	24001648 	.word	0x24001648
 8000a60:	24007110 	.word	0x24007110
 8000a64:	08016638 	.word	0x08016638
 8000a68:	08017638 	.word	0x08017638
 8000a6c:	24007094 	.word	0x24007094
 8000a70:	08013638 	.word	0x08013638
 8000a74:	08012638 	.word	0x08012638

08000a78 <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <SetAGC+0x9c>)
{
 8000a7c:	b410      	push	{r4}
	switch(CurrentMode)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000a80:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d811      	bhi.n	8000aaa <SetAGC+0x32>
 8000a86:	e8df f003 	tbb	[pc, r3]
 8000a8a:	2333      	.short	0x2333
 8000a8c:	0213      	.short	0x0213
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <SetAGC+0xa0>)
	case CW :       agc[CW] = newAGC;
 8000a90:	4922      	ldr	r1, [pc, #136]	; (8000b1c <SetAGC+0xa4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a92:	4c23      	ldr	r4, [pc, #140]	; (8000b20 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a94:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000a98:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a9a:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000a9e:	681b      	ldr	r3, [r3, #0]
	case CW :       agc[CW] = newAGC;
 8000aa0:	70c8      	strb	r0, [r1, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000aa2:	4921      	ldr	r1, [pc, #132]	; (8000b28 <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000aa4:	60d3      	str	r3, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000aa6:	f8a1 c006 	strh.w	ip, [r1, #6]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8000aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000aae:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8000ab2:	491a      	ldr	r1, [pc, #104]	; (8000b1c <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ab4:	4c1a      	ldr	r4, [pc, #104]	; (8000b20 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000ab6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case USB :      agc[USB] = newAGC;
 8000aba:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000abc:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ac2:	4919      	ldr	r1, [pc, #100]	; (8000b28 <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000ac4:	681b      	ldr	r3, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ac6:	808c      	strh	r4, [r1, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8000ac8:	6093      	str	r3, [r2, #8]
}	
 8000aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ace:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8000ad2:	4912      	ldr	r1, [pc, #72]	; (8000b1c <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ad4:	4c12      	ldr	r4, [pc, #72]	; (8000b20 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ad6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000ada:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000adc:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000ae0:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ae2:	4911      	ldr	r1, [pc, #68]	; (8000b28 <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ae4:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ae6:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8000ae8:	6053      	str	r3, [r2, #4]
}	
 8000aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000aee:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8000af2:	490a      	ldr	r1, [pc, #40]	; (8000b1c <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000af6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8000afa:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000afc:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b02:	4909      	ldr	r1, [pc, #36]	; (8000b28 <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b04:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b06:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000b08:	6013      	str	r3, [r2, #0]
}	
 8000b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	24001e6c 	.word	0x24001e6c
 8000b14:	24001e6a 	.word	0x24001e6a
 8000b18:	24001640 	.word	0x24001640
 8000b1c:	24009a40 	.word	0x24009a40
 8000b20:	24006080 	.word	0x24006080
 8000b24:	24001e70 	.word	0x24001e70
 8000b28:	24006084 	.word	0x24006084

08000b2c <Tune_Preset>:
{
 8000b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8000b30:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000b34:	4e47      	ldr	r6, [pc, #284]	; (8000c54 <Tune_Preset+0x128>)
 8000b36:	4a48      	ldr	r2, [pc, #288]	; (8000c58 <Tune_Preset+0x12c>)
{
 8000b38:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8000b3a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000b3e:	4f47      	ldr	r7, [pc, #284]	; (8000c5c <Tune_Preset+0x130>)
	LOfreq = psets[Idx].freq;
 8000b40:	0045      	lsls	r5, r0, #1
 8000b42:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8000b44:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8000b46:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000b48:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d87b      	bhi.n	8000c46 <Tune_Preset+0x11a>
 8000b4e:	e8df f003 	tbb	[pc, r3]
 8000b52:	626e      	.short	0x626e
 8000b54:	0256      	.short	0x0256
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000b56:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8000c98 <Tune_Preset+0x16c>
 8000b5a:	f898 0003 	ldrb.w	r0, [r8, #3]
 8000b5e:	f7ff ff29 	bl	80009b4 <SetBW>
 8000b62:	4b3f      	ldr	r3, [pc, #252]	; (8000c60 <Tune_Preset+0x134>)
 8000b64:	78d8      	ldrb	r0, [r3, #3]
 8000b66:	f7ff ff87 	bl	8000a78 <SetAGC>
	switch(CurrentMode)
 8000b6a:	783a      	ldrb	r2, [r7, #0]
	SetBW( psets[Idx].bw);
 8000b6c:	4425      	add	r5, r4
	CurrentBW = newbw;
 8000b6e:	493d      	ldr	r1, [pc, #244]	; (8000c64 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8000b70:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8000b74:	7d6b      	ldrb	r3, [r5, #21]
	CurrentBW = newbw;
 8000b76:	700b      	strb	r3, [r1, #0]
	switch(CurrentMode)
 8000b78:	2a03      	cmp	r2, #3
 8000b7a:	d80f      	bhi.n	8000b9c <Tune_Preset+0x70>
 8000b7c:	e8df f002 	tbb	[pc, r2]
 8000b80:	02173629 	.word	0x02173629
		CWindex = 0; // TODO toglimi
 8000b84:	4a38      	ldr	r2, [pc, #224]	; (8000c68 <Tune_Preset+0x13c>)
 8000b86:	2100      	movs	r1, #0
		bw[CW] = newbw;
 8000b88:	f888 3003 	strb.w	r3, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8000b90:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000b92:	4836      	ldr	r0, [pc, #216]	; (8000c6c <Tune_Preset+0x140>)
 8000b94:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <Tune_Preset+0x144>)
 8000b96:	4937      	ldr	r1, [pc, #220]	; (8000c74 <Tune_Preset+0x148>)
 8000b98:	f000 ffb4 	bl	8001b04 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000b9c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000ba0:	4835      	ldr	r0, [pc, #212]	; (8000c78 <Tune_Preset+0x14c>)
 8000ba2:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000baa:	f00e ba37 	b.w	800f01c <strcpy>
		bw[USB] = newbw;
 8000bae:	f888 3002 	strb.w	r3, [r8, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000bb2:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000bb4:	4a31      	ldr	r2, [pc, #196]	; (8000c7c <Tune_Preset+0x150>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000bb6:	bf18      	it	ne
 8000bb8:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000bba:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 8000bbc:	4a30      	ldr	r2, [pc, #192]	; (8000c80 <Tune_Preset+0x154>)
 8000bbe:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc4:	482f      	ldr	r0, [pc, #188]	; (8000c84 <Tune_Preset+0x158>)
		USBindex = 0; // TODO toglimi
 8000bc6:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000bc8:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <Tune_Preset+0x144>)
 8000bca:	492f      	ldr	r1, [pc, #188]	; (8000c88 <Tune_Preset+0x15c>)
 8000bcc:	f000 ff9a 	bl	8001b04 <SDR_2R_toC_f32>
		break;
 8000bd0:	e7e4      	b.n	8000b9c <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 8000bd2:	4a2a      	ldr	r2, [pc, #168]	; (8000c7c <Tune_Preset+0x150>)
 8000bd4:	2100      	movs	r1, #0
		bw[AM] = newbw;
 8000bd6:	f888 3000 	strb.w	r3, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000bde:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000be0:	482a      	ldr	r0, [pc, #168]	; (8000c8c <Tune_Preset+0x160>)
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <Tune_Preset+0x144>)
 8000be4:	492a      	ldr	r1, [pc, #168]	; (8000c90 <Tune_Preset+0x164>)
 8000be6:	f000 ff8d 	bl	8001b04 <SDR_2R_toC_f32>
		break;
 8000bea:	e7d7      	b.n	8000b9c <Tune_Preset+0x70>
		bw[LSB] = newbw;
 8000bec:	f888 3001 	strb.w	r3, [r8, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000bf0:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <Tune_Preset+0x150>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000bf4:	bf18      	it	ne
 8000bf6:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000bf8:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 8000bfa:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <Tune_Preset+0x168>)
 8000bfc:	e7df      	b.n	8000bbe <Tune_Preset+0x92>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000bfe:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000c98 <Tune_Preset+0x16c>
 8000c02:	f898 0002 	ldrb.w	r0, [r8, #2]
 8000c06:	f7ff fed5 	bl	80009b4 <SetBW>
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <Tune_Preset+0x134>)
 8000c0c:	7898      	ldrb	r0, [r3, #2]
 8000c0e:	f7ff ff33 	bl	8000a78 <SetAGC>
	switch(CurrentMode)
 8000c12:	783a      	ldrb	r2, [r7, #0]
		break;
 8000c14:	e7aa      	b.n	8000b6c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c16:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000c98 <Tune_Preset+0x16c>
 8000c1a:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000c1e:	f7ff fec9 	bl	80009b4 <SetBW>
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <Tune_Preset+0x134>)
 8000c24:	7858      	ldrb	r0, [r3, #1]
 8000c26:	f7ff ff27 	bl	8000a78 <SetAGC>
	switch(CurrentMode)
 8000c2a:	783a      	ldrb	r2, [r7, #0]
		break;
 8000c2c:	e79e      	b.n	8000b6c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c2e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000c98 <Tune_Preset+0x16c>
 8000c32:	f898 0000 	ldrb.w	r0, [r8]
 8000c36:	f7ff febd 	bl	80009b4 <SetBW>
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <Tune_Preset+0x134>)
 8000c3c:	7818      	ldrb	r0, [r3, #0]
 8000c3e:	f7ff ff1b 	bl	8000a78 <SetAGC>
	switch(CurrentMode)
 8000c42:	783a      	ldrb	r2, [r7, #0]
		break;

	default :
		break;
	}
}	
 8000c44:	e792      	b.n	8000b6c <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8000c46:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8000c4a:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 8000c4e:	7d5b      	ldrb	r3, [r3, #21]
 8000c50:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8000c52:	e7a3      	b.n	8000b9c <Tune_Preset+0x70>
 8000c54:	2400c664 	.word	0x2400c664
 8000c58:	24007090 	.word	0x24007090
 8000c5c:	24001e6c 	.word	0x24001e6c
 8000c60:	24009a40 	.word	0x24009a40
 8000c64:	24001e6b 	.word	0x24001e6b
 8000c68:	24001e68 	.word	0x24001e68
 8000c6c:	08015638 	.word	0x08015638
 8000c70:	20004000 	.word	0x20004000
 8000c74:	08014638 	.word	0x08014638
 8000c78:	2400c63c 	.word	0x2400c63c
 8000c7c:	24001648 	.word	0x24001648
 8000c80:	24007110 	.word	0x24007110
 8000c84:	08017638 	.word	0x08017638
 8000c88:	08016638 	.word	0x08016638
 8000c8c:	08013638 	.word	0x08013638
 8000c90:	08012638 	.word	0x08012638
 8000c94:	24007094 	.word	0x24007094
 8000c98:	24009a50 	.word	0x24009a50

08000c9c <SetMode>:
{
 8000c9c:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <SetMode+0x64>)
 8000ca0:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8000ca2:	2803      	cmp	r0, #3
 8000ca4:	d82b      	bhi.n	8000cfe <SetMode+0x62>
 8000ca6:	e8df f000 	tbb	[pc, r0]
 8000caa:	1620      	.short	0x1620
 8000cac:	020c      	.short	0x020c
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <SetMode+0x68>)
 8000cb0:	78d8      	ldrb	r0, [r3, #3]
 8000cb2:	f7ff fe7f 	bl	80009b4 <SetBW>
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <SetMode+0x6c>)
 8000cb8:	78d8      	ldrb	r0, [r3, #3]
}	
 8000cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000cbe:	f7ff bedb 	b.w	8000a78 <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <SetMode+0x68>)
 8000cc4:	7898      	ldrb	r0, [r3, #2]
 8000cc6:	f7ff fe75 	bl	80009b4 <SetBW>
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <SetMode+0x6c>)
 8000ccc:	7898      	ldrb	r0, [r3, #2]
}	
 8000cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000cd2:	f7ff bed1 	b.w	8000a78 <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <SetMode+0x68>)
 8000cd8:	7858      	ldrb	r0, [r3, #1]
 8000cda:	f7ff fe6b 	bl	80009b4 <SetBW>
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <SetMode+0x6c>)
 8000ce0:	7858      	ldrb	r0, [r3, #1]
}	
 8000ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000ce6:	f7ff bec7 	b.w	8000a78 <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SetMode+0x68>)
 8000cec:	7818      	ldrb	r0, [r3, #0]
 8000cee:	f7ff fe61 	bl	80009b4 <SetBW>
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SetMode+0x6c>)
 8000cf4:	7818      	ldrb	r0, [r3, #0]
}	
 8000cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000cfa:	f7ff bebd 	b.w	8000a78 <SetAGC>
}	
 8000cfe:	bd08      	pop	{r3, pc}
 8000d00:	24001e6c 	.word	0x24001e6c
 8000d04:	24009a50 	.word	0x24009a50
 8000d08:	24009a40 	.word	0x24009a40
 8000d0c:	00000000 	.word	0x00000000

08000d10 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8000d10:	2809      	cmp	r0, #9
{
 8000d12:	b508      	push	{r3, lr}
	if (idx == 9)
 8000d14:	d012      	beq.n	8000d3c <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8000d16:	f1c0 0005 	rsb	r0, r0, #5
 8000d1a:	ee07 0a90 	vmov	s15, r0
 8000d1e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000d48 <SetFstep+0x38>
 8000d22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d26:	ee27 0b00 	vmul.f64	d0, d7, d0
 8000d2a:	f010 fb4d 	bl	80113c8 <exp>
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <SetFstep+0x40>)
 8000d30:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8000d34:	ee17 3a90 	vmov	r3, s15
 8000d38:	6013      	str	r3, [r2, #0]
}	
 8000d3a:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8000d3c:	f242 3328 	movw	r3, #9000	; 0x2328
 8000d40:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <SetFstep+0x40>)
 8000d42:	6013      	str	r3, [r2, #0]
}	
 8000d44:	bd08      	pop	{r3, pc}
 8000d46:	bf00      	nop
 8000d48:	bbb55516 	.word	0xbbb55516
 8000d4c:	40026bb1 	.word	0x40026bb1
 8000d50:	2400607c 	.word	0x2400607c

08000d54 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000d54:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <FplusClicked+0xb4>)
 8000d56:	ee07 0a90 	vmov	s15, r0
 8000d5a:	4a2c      	ldr	r2, [pc, #176]	; (8000e0c <FplusClicked+0xb8>)
 8000d5c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000d60:	ed93 6a00 	vldr	s12, [r3]
 8000d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d68:	ed92 7a00 	vldr	s14, [r2]
 8000d6c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <FplusClicked+0xbc>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000d72:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8000d76:	4927      	ldr	r1, [pc, #156]	; (8000e14 <FplusClicked+0xc0>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000d78:	eddf 5a27 	vldr	s11, [pc, #156]	; 8000e18 <FplusClicked+0xc4>
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000d7c:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8000d80:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000d82:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4c24      	ldr	r4, [pc, #144]	; (8000e1c <FplusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 8000d8a:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000d8c:	eea6 7b04 	vfma.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000d90:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8000d92:	7560      	strb	r0, [r4, #21]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000d94:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8000d98:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8000d9c:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000da0:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d80b      	bhi.n	8000dc0 <FplusClicked+0x6c>
 8000da8:	e8df f003 	tbb	[pc, r3]
 8000dac:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000db0:	78c8      	ldrb	r0, [r1, #3]
 8000db2:	f7ff fdff 	bl	80009b4 <SetBW>
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <FplusClicked+0xcc>)
 8000db8:	78d8      	ldrb	r0, [r3, #3]
 8000dba:	f7ff fe5d 	bl	8000a78 <SetAGC>
	SetBW( psets[Idx].bw);
 8000dbe:	7d60      	ldrb	r0, [r4, #21]
 8000dc0:	f7ff fdf8 	bl	80009b4 <SetBW>
	strcpy(msg, psets[Idx].name);
 8000dc4:	4915      	ldr	r1, [pc, #84]	; (8000e1c <FplusClicked+0xc8>)
 8000dc6:	4817      	ldr	r0, [pc, #92]	; (8000e24 <FplusClicked+0xd0>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8000dcc:	f00e b926 	b.w	800f01c <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000dd0:	7888      	ldrb	r0, [r1, #2]
 8000dd2:	f7ff fdef 	bl	80009b4 <SetBW>
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <FplusClicked+0xcc>)
 8000dd8:	7898      	ldrb	r0, [r3, #2]
 8000dda:	f7ff fe4d 	bl	8000a78 <SetAGC>
	SetBW( psets[Idx].bw);
 8000dde:	7d60      	ldrb	r0, [r4, #21]
		break;
 8000de0:	e7ee      	b.n	8000dc0 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000de2:	7848      	ldrb	r0, [r1, #1]
 8000de4:	f7ff fde6 	bl	80009b4 <SetBW>
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <FplusClicked+0xcc>)
 8000dea:	7858      	ldrb	r0, [r3, #1]
 8000dec:	f7ff fe44 	bl	8000a78 <SetAGC>
	SetBW( psets[Idx].bw);
 8000df0:	7d60      	ldrb	r0, [r4, #21]
		break;
 8000df2:	e7e5      	b.n	8000dc0 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000df4:	7808      	ldrb	r0, [r1, #0]
 8000df6:	f7ff fddd 	bl	80009b4 <SetBW>
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <FplusClicked+0xcc>)
 8000dfc:	7818      	ldrb	r0, [r3, #0]
 8000dfe:	f7ff fe3b 	bl	8000a78 <SetAGC>
	SetBW( psets[Idx].bw);
 8000e02:	7d60      	ldrb	r0, [r4, #21]
}	
 8000e04:	e7dc      	b.n	8000dc0 <FplusClicked+0x6c>
 8000e06:	bf00      	nop
 8000e08:	2400607c 	.word	0x2400607c
 8000e0c:	24007090 	.word	0x24007090
 8000e10:	24001e6c 	.word	0x24001e6c
 8000e14:	24009a50 	.word	0x24009a50
 8000e18:	4c3ebc20 	.word	0x4c3ebc20
 8000e1c:	2400c664 	.word	0x2400c664
 8000e20:	24009a40 	.word	0x24009a40
 8000e24:	2400c63c 	.word	0x2400c63c

08000e28 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000e28:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <FminusClicked+0xb4>)
 8000e2a:	ee07 0a90 	vmov	s15, r0
 8000e2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ee0 <FminusClicked+0xb8>)
 8000e30:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000e34:	ed93 6a00 	vldr	s12, [r3]
 8000e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e3c:	ed92 7a00 	vldr	s14, [r2]
 8000e40:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e44:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <FminusClicked+0xbc>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000e46:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8000e4a:	4927      	ldr	r1, [pc, #156]	; (8000ee8 <FminusClicked+0xc0>)
	LOfreq  = max(LOfreq, 8000.f);
 8000e4c:	eddf 5a27 	vldr	s11, [pc, #156]	; 8000eec <FminusClicked+0xc4>
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000e50:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8000e54:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000e56:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4c24      	ldr	r4, [pc, #144]	; (8000ef0 <FminusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 8000e5e:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000e60:	eea6 7b44 	vfms.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e64:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8000e66:	7560      	strb	r0, [r4, #21]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000e68:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 8000e6c:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 8000e70:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e74:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d80b      	bhi.n	8000e94 <FminusClicked+0x6c>
 8000e7c:	e8df f003 	tbb	[pc, r3]
 8000e80:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000e84:	78c8      	ldrb	r0, [r1, #3]
 8000e86:	f7ff fd95 	bl	80009b4 <SetBW>
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <FminusClicked+0xcc>)
 8000e8c:	78d8      	ldrb	r0, [r3, #3]
 8000e8e:	f7ff fdf3 	bl	8000a78 <SetAGC>
	SetBW( psets[Idx].bw);
 8000e92:	7d60      	ldrb	r0, [r4, #21]
 8000e94:	f7ff fd8e 	bl	80009b4 <SetBW>
	strcpy(msg, psets[Idx].name);
 8000e98:	4915      	ldr	r1, [pc, #84]	; (8000ef0 <FminusClicked+0xc8>)
 8000e9a:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <FminusClicked+0xd0>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8000e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8000ea0:	f00e b8bc 	b.w	800f01c <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000ea4:	7888      	ldrb	r0, [r1, #2]
 8000ea6:	f7ff fd85 	bl	80009b4 <SetBW>
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <FminusClicked+0xcc>)
 8000eac:	7898      	ldrb	r0, [r3, #2]
 8000eae:	f7ff fde3 	bl	8000a78 <SetAGC>
	SetBW( psets[Idx].bw);
 8000eb2:	7d60      	ldrb	r0, [r4, #21]
		break;
 8000eb4:	e7ee      	b.n	8000e94 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000eb6:	7848      	ldrb	r0, [r1, #1]
 8000eb8:	f7ff fd7c 	bl	80009b4 <SetBW>
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <FminusClicked+0xcc>)
 8000ebe:	7858      	ldrb	r0, [r3, #1]
 8000ec0:	f7ff fdda 	bl	8000a78 <SetAGC>
	SetBW( psets[Idx].bw);
 8000ec4:	7d60      	ldrb	r0, [r4, #21]
		break;
 8000ec6:	e7e5      	b.n	8000e94 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000ec8:	7808      	ldrb	r0, [r1, #0]
 8000eca:	f7ff fd73 	bl	80009b4 <SetBW>
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <FminusClicked+0xcc>)
 8000ed0:	7818      	ldrb	r0, [r3, #0]
 8000ed2:	f7ff fdd1 	bl	8000a78 <SetAGC>
	SetBW( psets[Idx].bw);
 8000ed6:	7d60      	ldrb	r0, [r4, #21]
}	
 8000ed8:	e7dc      	b.n	8000e94 <FminusClicked+0x6c>
 8000eda:	bf00      	nop
 8000edc:	2400607c 	.word	0x2400607c
 8000ee0:	24007090 	.word	0x24007090
 8000ee4:	24001e6c 	.word	0x24001e6c
 8000ee8:	24009a50 	.word	0x24009a50
 8000eec:	45fa0000 	.word	0x45fa0000
 8000ef0:	2400c664 	.word	0x2400c664
 8000ef4:	24009a40 	.word	0x24009a40
 8000ef8:	2400c63c 	.word	0x2400c63c

08000efc <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000f00:	b570      	push	{r4, r5, r6, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8000f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
 8000f06:	b082      	sub	sp, #8
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8000f08:	497d      	ldr	r1, [pc, #500]	; (8001100 <HAL_GPIO_EXTI_Callback+0x200>)
 8000f0a:	487e      	ldr	r0, [pc, #504]	; (8001104 <HAL_GPIO_EXTI_Callback+0x204>)
 8000f0c:	f000 ff0e 	bl	8001d2c <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8000f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f14:	497c      	ldr	r1, [pc, #496]	; (8001108 <HAL_GPIO_EXTI_Callback+0x208>)
 8000f16:	487d      	ldr	r0, [pc, #500]	; (800110c <HAL_GPIO_EXTI_Callback+0x20c>)
 8000f18:	f000 ff08 	bl	8001d2c <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8000f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f20:	4a7b      	ldr	r2, [pc, #492]	; (8001110 <HAL_GPIO_EXTI_Callback+0x210>)
 8000f22:	4978      	ldr	r1, [pc, #480]	; (8001104 <HAL_GPIO_EXTI_Callback+0x204>)
 8000f24:	487b      	ldr	r0, [pc, #492]	; (8001114 <HAL_GPIO_EXTI_Callback+0x214>)
 8000f26:	f00c fe7b 	bl	800dc20 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8000f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f2e:	4a7a      	ldr	r2, [pc, #488]	; (8001118 <HAL_GPIO_EXTI_Callback+0x218>)
 8000f30:	4976      	ldr	r1, [pc, #472]	; (800110c <HAL_GPIO_EXTI_Callback+0x20c>)
 8000f32:	487a      	ldr	r0, [pc, #488]	; (800111c <HAL_GPIO_EXTI_Callback+0x21c>)
 8000f34:	f00c fe74 	bl	800dc20 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000f38:	4979      	ldr	r1, [pc, #484]	; (8001120 <HAL_GPIO_EXTI_Callback+0x220>)
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);



	// copy into the (in place...) FFT buffer
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8000f3a:	4c7a      	ldr	r4, [pc, #488]	; (8001124 <HAL_GPIO_EXTI_Callback+0x224>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f40:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
*/

// TODO: check why with the original code above LSB and USB are swapped

 //if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000f44:	4d78      	ldr	r5, [pc, #480]	; (8001128 <HAL_GPIO_EXTI_Callback+0x228>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000f46:	f000 fef1 	bl	8001d2c <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 8000f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4e:	4a74      	ldr	r2, [pc, #464]	; (8001120 <HAL_GPIO_EXTI_Callback+0x220>)
 8000f50:	4971      	ldr	r1, [pc, #452]	; (8001118 <HAL_GPIO_EXTI_Callback+0x218>)
 8000f52:	486f      	ldr	r0, [pc, #444]	; (8001110 <HAL_GPIO_EXTI_Callback+0x210>)
 8000f54:	f000 fdd6 	bl	8001b04 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8000f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f5c:	4973      	ldr	r1, [pc, #460]	; (800112c <HAL_GPIO_EXTI_Callback+0x22c>)
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f000 fee4 	bl	8001d2c <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8000f64:	2301      	movs	r3, #1
 8000f66:	2200      	movs	r2, #0
 8000f68:	4621      	mov	r1, r4
 8000f6a:	4871      	ldr	r0, [pc, #452]	; (8001130 <HAL_GPIO_EXTI_Callback+0x230>)
 8000f6c:	f00c fd9a 	bl	800daa4 <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000f70:	782b      	ldrb	r3, [r5, #0]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	f000 80ab 	beq.w	80010ce <HAL_GPIO_EXTI_Callback+0x1ce>

#ifdef TEST_WF
	if (ShowWF) {
 8000f78:	4b6e      	ldr	r3, [pc, #440]	; (8001134 <HAL_GPIO_EXTI_Callback+0x234>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d04a      	beq.n	8001016 <HAL_GPIO_EXTI_Callback+0x116>
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8ad 3002 	strh.w	r3, [sp, #2]
 8000f86:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f90:	d241      	bcs.n	8001016 <HAL_GPIO_EXTI_Callback+0x116>
 8000f92:	4e69      	ldr	r6, [pc, #420]	; (8001138 <HAL_GPIO_EXTI_Callback+0x238>)
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000f94:	f04f 0e00 	mov.w	lr, #0
		{
			tmp = FFTbuf[WFSample] * FFTbuf[WFSample] + FFTbuf[WFSample+1] * FFTbuf[WFSample+1];
 8000f98:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8000f9c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8000fa0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8000fa4:	b280      	uxth	r0, r0
 8000fa6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000faa:	b289      	uxth	r1, r1
 8000fac:	b292      	uxth	r2, r2
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000fb8:	edd2 7a01 	vldr	s15, [r2, #4]
 8000fbc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000fc0:	ed93 6a01 	vldr	s12, [r3, #4]
 8000fc4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000fc8:	edd0 6a00 	vldr	s13, [r0]
 8000fcc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000fd0:	ed91 7a00 	vldr	s14, [r1]
 8000fd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000fd8:	edcd 7a01 	vstr	s15, [sp, #4]
			arm_sqrt_f32(tmp, &WFBuffer[WFSample >> 1]);
 8000fdc:	eddd 7a01 	vldr	s15, [sp, #4]
 8000fe0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8000fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff0:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8000ff4:	db71      	blt.n	80010da <HAL_GPIO_EXTI_Callback+0x1da>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8000ff6:	eeb1 7ae7 	vsqrt.f32	s14, s15
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 8000ffa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000ffe:	3302      	adds	r3, #2
 8001000:	b29b      	uxth	r3, r3
 8001002:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001006:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800100a:	b29b      	uxth	r3, r3
 800100c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001010:	ed82 7a00 	vstr	s14, [r2]
 8001014:	d3c0      	bcc.n	8000f98 <HAL_GPIO_EXTI_Callback+0x98>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8001016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101a:	4a48      	ldr	r2, [pc, #288]	; (800113c <HAL_GPIO_EXTI_Callback+0x23c>)
 800101c:	4948      	ldr	r1, [pc, #288]	; (8001140 <HAL_GPIO_EXTI_Callback+0x240>)
 800101e:	4841      	ldr	r0, [pc, #260]	; (8001124 <HAL_GPIO_EXTI_Callback+0x224>)
 8001020:	f00c ffb6 	bl	800df90 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8001024:	2301      	movs	r3, #1
 8001026:	4945      	ldr	r1, [pc, #276]	; (800113c <HAL_GPIO_EXTI_Callback+0x23c>)
 8001028:	461a      	mov	r2, r3
 800102a:	4841      	ldr	r0, [pc, #260]	; (8001130 <HAL_GPIO_EXTI_Callback+0x230>)
 800102c:	f00c fd3a 	bl	800daa4 <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 8001030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001034:	4943      	ldr	r1, [pc, #268]	; (8001144 <HAL_GPIO_EXTI_Callback+0x244>)
 8001036:	4844      	ldr	r0, [pc, #272]	; (8001148 <HAL_GPIO_EXTI_Callback+0x248>)
 8001038:	f000 fe78 	bl	8001d2c <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 800103c:	782b      	ldrb	r3, [r5, #0]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d826      	bhi.n	8001090 <HAL_GPIO_EXTI_Callback+0x190>
 8001042:	2b00      	cmp	r3, #0
 8001044:	d13e      	bne.n	80010c4 <HAL_GPIO_EXTI_Callback+0x1c4>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 8001046:	4941      	ldr	r1, [pc, #260]	; (800114c <HAL_GPIO_EXTI_Callback+0x24c>)
 8001048:	483f      	ldr	r0, [pc, #252]	; (8001148 <HAL_GPIO_EXTI_Callback+0x248>)
 800104a:	f000 ffbf 	bl	8001fcc <SDR_demodAM_AGC>
#endif


	// CW tone while keying
	//TODO: make it sine and with attack/decay
	if (TXCarrierEnabled)
 800104e:	4b40      	ldr	r3, [pc, #256]	; (8001150 <HAL_GPIO_EXTI_Callback+0x250>)
 8001050:	7819      	ldrb	r1, [r3, #0]
 8001052:	b369      	cbz	r1, 80010b0 <HAL_GPIO_EXTI_Callback+0x1b0>
		for (i=0; i<BSIZE; i++)
		{
			if (i % 64 > 31)
				fAudio[i] = volume; //Volume
			else
				fAudio[i] = -volume;
 8001054:	493f      	ldr	r1, [pc, #252]	; (8001154 <HAL_GPIO_EXTI_Callback+0x254>)
 8001056:	2300      	movs	r3, #0
 8001058:	4a3c      	ldr	r2, [pc, #240]	; (800114c <HAL_GPIO_EXTI_Callback+0x24c>)
 800105a:	edd1 7a00 	vldr	s15, [r1]
 800105e:	eeb1 7a67 	vneg.f32	s14, s15
			if (i % 64 > 31)
 8001062:	0699      	lsls	r1, r3, #26
		for (i=0; i<BSIZE; i++)
 8001064:	f103 0301 	add.w	r3, r3, #1
 8001068:	f102 0204 	add.w	r2, r2, #4
				fAudio[i] = volume; //Volume
 800106c:	bf4c      	ite	mi
 800106e:	ed42 7a01 	vstrmi	s15, [r2, #-4]
				fAudio[i] = -volume;
 8001072:	ed02 7a01 	vstrpl	s14, [r2, #-4]
		for (i=0; i<BSIZE; i++)
 8001076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800107a:	d1f2      	bne.n	8001062 <HAL_GPIO_EXTI_Callback+0x162>
	}

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <HAL_GPIO_EXTI_Callback+0x258>)
 800107e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001082:	4832      	ldr	r0, [pc, #200]	; (800114c <HAL_GPIO_EXTI_Callback+0x24c>)
 8001084:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8001086:	b002      	add	sp, #8
 8001088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 800108c:	f000 bdd8 	b.w	8001c40 <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 8001090:	2b03      	cmp	r3, #3
 8001092:	d1dc      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x14e>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8001094:	492d      	ldr	r1, [pc, #180]	; (800114c <HAL_GPIO_EXTI_Callback+0x24c>)
 8001096:	482c      	ldr	r0, [pc, #176]	; (8001148 <HAL_GPIO_EXTI_Callback+0x248>)
 8001098:	f001 f828 	bl	80020ec <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HAL_GPIO_EXTI_Callback+0x25c>)
 800109e:	78db      	ldrb	r3, [r3, #3]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1d4      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x14e>
			SDR_CWPeak(fAudio, BSIZE);
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	4828      	ldr	r0, [pc, #160]	; (800114c <HAL_GPIO_EXTI_Callback+0x24c>)
 80010aa:	f000 ff05 	bl	8001eb8 <SDR_CWPeak>
 80010ae:	e7ce      	b.n	800104e <HAL_GPIO_EXTI_Callback+0x14e>
		if (TransmissionEnabled)
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_GPIO_EXTI_Callback+0x260>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0e1      	beq.n	800107c <HAL_GPIO_EXTI_Callback+0x17c>
							fAudio[i] = 0.;
 80010b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010bc:	4823      	ldr	r0, [pc, #140]	; (800114c <HAL_GPIO_EXTI_Callback+0x24c>)
 80010be:	f00d fb2b 	bl	800e718 <memset>
 80010c2:	e7db      	b.n	800107c <HAL_GPIO_EXTI_Callback+0x17c>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 80010c4:	4921      	ldr	r1, [pc, #132]	; (800114c <HAL_GPIO_EXTI_Callback+0x24c>)
 80010c6:	4820      	ldr	r0, [pc, #128]	; (8001148 <HAL_GPIO_EXTI_Callback+0x248>)
 80010c8:	f001 f810 	bl	80020ec <SDR_demodSSB_CW_AGC>
 80010cc:	e7bf      	b.n	800104e <HAL_GPIO_EXTI_Callback+0x14e>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80010ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d2:	4620      	mov	r0, r4
 80010d4:	f000 fe44 	bl	8001d60 <SDR_mirror_LSB>
 80010d8:	e74e      	b.n	8000f78 <HAL_GPIO_EXTI_Callback+0x78>
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 80010da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80010de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80010e2:	3202      	adds	r2, #2
 80010e4:	f8c3 e000 	str.w	lr, [r3]
 80010e8:	b293      	uxth	r3, r2
 80010ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80010ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010f8:	f4ff af4e 	bcc.w	8000f98 <HAL_GPIO_EXTI_Callback+0x98>
 80010fc:	e78b      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0x116>
 80010fe:	bf00      	nop
 8001100:	2000d000 	.word	0x2000d000
 8001104:	20009000 	.word	0x20009000
 8001108:	2000b000 	.word	0x2000b000
 800110c:	20007000 	.word	0x20007000
 8001110:	20006800 	.word	0x20006800
 8001114:	240070c0 	.word	0x240070c0
 8001118:	20006000 	.word	0x20006000
 800111c:	240070b4 	.word	0x240070b4
 8001120:	2400b25c 	.word	0x2400b25c
 8001124:	20002000 	.word	0x20002000
 8001128:	24001e6c 	.word	0x24001e6c
 800112c:	2400a25c 	.word	0x2400a25c
 8001130:	08018884 	.word	0x08018884
 8001134:	240070cc 	.word	0x240070cc
 8001138:	24008218 	.word	0x24008218
 800113c:	20000000 	.word	0x20000000
 8001140:	20004000 	.word	0x20004000
 8001144:	20001000 	.word	0x20001000
 8001148:	2400c7b8 	.word	0x2400c7b8
 800114c:	24009a5c 	.word	0x24009a5c
 8001150:	240070f8 	.word	0x240070f8
 8001154:	2400d7ec 	.word	0x2400d7ec
 8001158:	24008214 	.word	0x24008214
 800115c:	24009a50 	.word	0x24009a50
 8001160:	24007104 	.word	0x24007104

08001164 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8001164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8001168:	4b78      	ldr	r3, [pc, #480]	; (800134c <ADC_Stream0_Handler+0x1e8>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800116a:	4f79      	ldr	r7, [pc, #484]	; (8001350 <ADC_Stream0_Handler+0x1ec>)
{
 800116c:	ed2d 8b10 	vpush	{d8-d15}
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001170:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 8001174:	781b      	ldrb	r3, [r3, #0]
{
 8001176:	b095      	sub	sp, #84	; 0x54
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001178:	2800      	cmp	r0, #0
 800117a:	bf08      	it	eq
 800117c:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 800117e:	2b03      	cmp	r3, #3
 8001180:	f000 83f3 	beq.w	800196a <ADC_Stream0_Handler+0x806>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 8001184:	4b73      	ldr	r3, [pc, #460]	; (8001354 <ADC_Stream0_Handler+0x1f0>)
 8001186:	ed93 0a00 	vldr	s0, [r3]
 800118a:	f000 fbfd 	bl	8001988 <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 800118e:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 8001192:	1ebe      	subs	r6, r7, #2
	sum = 0; k = BSIZE;
 8001194:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8001358 <ADC_Stream0_Handler+0x1f4>
	{
		sum += pR[k-1];
 8001198:	8810      	ldrh	r0, [r2, #0]
	while(k)
 800119a:	3a08      	subs	r2, #8
		sum += pR[k-2];
 800119c:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 800119e:	b280      	uxth	r0, r0
		sum += pR[k-3];
 80011a0:	8894      	ldrh	r4, [r2, #4]
		sum += pR[k-2];
 80011a2:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 80011a4:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 80011a6:	ee07 0a90 	vmov	s15, r0
		sum += pR[k-3];
 80011aa:	b2a4      	uxth	r4, r4
		sum += pR[k-2];
 80011ac:	ee07 3a10 	vmov	s14, r3
		sum += pR[k-4];
 80011b0:	b289      	uxth	r1, r1
		sum += pR[k-1];
 80011b2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-3];
 80011b6:	ee07 4a90 	vmov	s15, r4
		sum += pR[k-2];
 80011ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 80011be:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 80011c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 80011c6:	4296      	cmp	r6, r2
		sum += pR[k-4];
 80011c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80011cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80011d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011d8:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80011dc:	d1dc      	bne.n	8001198 <ADC_Stream0_Handler+0x34>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80011de:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 80011e2:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80011e4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800135c <ADC_Stream0_Handler+0x1f8>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80011e8:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4c5c      	ldr	r4, [pc, #368]	; (8001360 <ADC_Stream0_Handler+0x1fc>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80011ee:	ee20 0a27 	vmul.f32	s0, s0, s15
	TestSampledValue=pR[BSIZE/2];
 80011f2:	4d5c      	ldr	r5, [pc, #368]	; (8001364 <ADC_Stream0_Handler+0x200>)
 80011f4:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80011f8:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <ADC_Stream0_Handler+0x204>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80011fa:	495c      	ldr	r1, [pc, #368]	; (800136c <ADC_Stream0_Handler+0x208>)
	TestSampledValue=pR[BSIZE/2];
 80011fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001200:	8022      	strh	r2, [r4, #0]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001202:	4a5b      	ldr	r2, [pc, #364]	; (8001370 <ADC_Stream0_Handler+0x20c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001204:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 8001208:	edc5 7a00 	vstr	s15, [r5]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800120c:	f000 fca6 	bl	8001b5c <SDR_downconvert_f32>
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 8001210:	4a58      	ldr	r2, [pc, #352]	; (8001374 <ADC_Stream0_Handler+0x210>)
 8001212:	23ff      	movs	r3, #255	; 0xff
 8001214:	4958      	ldr	r1, [pc, #352]	; (8001378 <ADC_Stream0_Handler+0x214>)
 8001216:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800121a:	ed92 2a00 	vldr	s4, [r2]
 800121e:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8001222:	4a56      	ldr	r2, [pc, #344]	; (800137c <ADC_Stream0_Handler+0x218>)
 8001224:	edd1 3a00 	vldr	s7, [r1]
 8001228:	edd2 1a00 	vldr	s3, [r2]
 800122c:	4a54      	ldr	r2, [pc, #336]	; (8001380 <ADC_Stream0_Handler+0x21c>)
 800122e:	4955      	ldr	r1, [pc, #340]	; (8001384 <ADC_Stream0_Handler+0x220>)
 8001230:	ed92 7a00 	vldr	s14, [r2]
 8001234:	4a54      	ldr	r2, [pc, #336]	; (8001388 <ADC_Stream0_Handler+0x224>)
 8001236:	ed91 9a00 	vldr	s18, [r1]
 800123a:	eeb0 6a47 	vmov.f32	s12, s14
 800123e:	edd2 2a00 	vldr	s5, [r2]
 8001242:	4952      	ldr	r1, [pc, #328]	; (800138c <ADC_Stream0_Handler+0x228>)
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <ADC_Stream0_Handler+0x22c>)
 8001246:	edd1 ea00 	vldr	s29, [r1]
 800124a:	edd2 8a00 	vldr	s17, [r2]
 800124e:	4951      	ldr	r1, [pc, #324]	; (8001394 <ADC_Stream0_Handler+0x230>)
 8001250:	4a51      	ldr	r2, [pc, #324]	; (8001398 <ADC_Stream0_Handler+0x234>)
 8001252:	edd1 6a00 	vldr	s13, [r1]
 8001256:	ed92 5a00 	vldr	s10, [r2]
 800125a:	4950      	ldr	r1, [pc, #320]	; (800139c <ADC_Stream0_Handler+0x238>)
 800125c:	4a50      	ldr	r2, [pc, #320]	; (80013a0 <ADC_Stream0_Handler+0x23c>)
 800125e:	edd1 ca00 	vldr	s25, [r1]
 8001262:	edd2 fa00 	vldr	s31, [r2]
 8001266:	494f      	ldr	r1, [pc, #316]	; (80013a4 <ADC_Stream0_Handler+0x240>)
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <ADC_Stream0_Handler+0x244>)
 800126a:	ed91 da00 	vldr	s26, [r1]
 800126e:	ed92 8a00 	vldr	s16, [r2]
 8001272:	494e      	ldr	r1, [pc, #312]	; (80013ac <ADC_Stream0_Handler+0x248>)
 8001274:	4a4e      	ldr	r2, [pc, #312]	; (80013b0 <ADC_Stream0_Handler+0x24c>)
 8001276:	edcd 6a02 	vstr	s13, [sp, #8]
 800127a:	edd2 5a00 	vldr	s11, [r2]
 800127e:	edd1 6a00 	vldr	s13, [r1]
 8001282:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <ADC_Stream0_Handler+0x250>)
 8001284:	494c      	ldr	r1, [pc, #304]	; (80013b8 <ADC_Stream0_Handler+0x254>)
 8001286:	ed92 fa00 	vldr	s30, [r2]
 800128a:	ed91 ca00 	vldr	s24, [r1]
 800128e:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <ADC_Stream0_Handler+0x258>)
 8001290:	494b      	ldr	r1, [pc, #300]	; (80013c0 <ADC_Stream0_Handler+0x25c>)
 8001292:	edd2 ba00 	vldr	s23, [r2]
 8001296:	edcd 6a01 	vstr	s13, [sp, #4]
 800129a:	4a4a      	ldr	r2, [pc, #296]	; (80013c4 <ADC_Stream0_Handler+0x260>)
 800129c:	edd1 6a00 	vldr	s13, [r1]
 80012a0:	4949      	ldr	r1, [pc, #292]	; (80013c8 <ADC_Stream0_Handler+0x264>)
 80012a2:	ed92 3a00 	vldr	s6, [r2]
 80012a6:	edcd 6a03 	vstr	s13, [sp, #12]
 80012aa:	4a48      	ldr	r2, [pc, #288]	; (80013cc <ADC_Stream0_Handler+0x268>)
 80012ac:	edd1 6a00 	vldr	s13, [r1]
 80012b0:	4947      	ldr	r1, [pc, #284]	; (80013d0 <ADC_Stream0_Handler+0x26c>)
 80012b2:	edd2 9a00 	vldr	s19, [r2]
 80012b6:	edcd 6a08 	vstr	s13, [sp, #32]
 80012ba:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <ADC_Stream0_Handler+0x270>)
 80012bc:	edd1 6a00 	vldr	s13, [r1]
 80012c0:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8001400 <ADC_Stream0_Handler+0x29c>
 80012c4:	4944      	ldr	r1, [pc, #272]	; (80013d8 <ADC_Stream0_Handler+0x274>)
 80012c6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8001404 <ADC_Stream0_Handler+0x2a0>
 80012ca:	ed92 ba00 	vldr	s22, [r2]
 80012ce:	ed9a 1a00 	vldr	s2, [sl]
 80012d2:	edd9 7a00 	vldr	s15, [r9]
 80012d6:	8023      	strh	r3, [r4, #0]
 80012d8:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 80012dc:	edd1 6a00 	vldr	s13, [r1]
 80012e0:	493e      	ldr	r1, [pc, #248]	; (80013dc <ADC_Stream0_Handler+0x278>)
 80012e2:	edcd 6a00 	vstr	s13, [sp]
 80012e6:	edd1 6a00 	vldr	s13, [r1]
 80012ea:	493d      	ldr	r1, [pc, #244]	; (80013e0 <ADC_Stream0_Handler+0x27c>)
 80012ec:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 80012f0:	edd1 6a00 	vldr	s13, [r1]
 80012f4:	493b      	ldr	r1, [pc, #236]	; (80013e4 <ADC_Stream0_Handler+0x280>)
 80012f6:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001408 <ADC_Stream0_Handler+0x2a4>
 80012fa:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 80012fe:	edd1 6a00 	vldr	s13, [r1]
 8001302:	4f39      	ldr	r7, [pc, #228]	; (80013e8 <ADC_Stream0_Handler+0x284>)
 8001304:	edcd 6a06 	vstr	s13, [sp, #24]
 8001308:	edd8 6a00 	vldr	s13, [r8]
 800130c:	4e37      	ldr	r6, [pc, #220]	; (80013ec <ADC_Stream0_Handler+0x288>)
 800130e:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8001312:	edd7 6a00 	vldr	s13, [r7]
 8001316:	4936      	ldr	r1, [pc, #216]	; (80013f0 <ADC_Stream0_Handler+0x28c>)
 8001318:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 800131c:	edd6 6a00 	vldr	s13, [r6]
 8001320:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 800140c <ADC_Stream0_Handler+0x2a8>
 8001324:	edcd 6a07 	vstr	s13, [sp, #28]
 8001328:	edd1 6a00 	vldr	s13, [r1]
 800132c:	4931      	ldr	r1, [pc, #196]	; (80013f4 <ADC_Stream0_Handler+0x290>)
 800132e:	4a32      	ldr	r2, [pc, #200]	; (80013f8 <ADC_Stream0_Handler+0x294>)
 8001330:	f9bb 0000 	ldrsh.w	r0, [fp]
 8001334:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001338:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 800133c:	edd1 6a00 	vldr	s13, [r1]
 8001340:	4686      	mov	lr, r0
 8001342:	492e      	ldr	r1, [pc, #184]	; (80013fc <ADC_Stream0_Handler+0x298>)
 8001344:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8001348:	e165      	b.n	8001616 <ADC_Stream0_Handler+0x4b2>
 800134a:	bf00      	nop
 800134c:	24001e6c 	.word	0x24001e6c
 8001350:	24009640 	.word	0x24009640
 8001354:	24007090 	.word	0x24007090
 8001358:	00000000 	.word	0x00000000
 800135c:	3b000000 	.word	0x3b000000
 8001360:	24000610 	.word	0x24000610
 8001364:	24007100 	.word	0x24007100
 8001368:	2400c638 	.word	0x2400c638
 800136c:	24000e40 	.word	0x24000e40
 8001370:	24000640 	.word	0x24000640
 8001374:	24000584 	.word	0x24000584
 8001378:	240005d4 	.word	0x240005d4
 800137c:	240005b0 	.word	0x240005b0
 8001380:	240005b4 	.word	0x240005b4
 8001384:	24000590 	.word	0x24000590
 8001388:	24000580 	.word	0x24000580
 800138c:	240005e8 	.word	0x240005e8
 8001390:	240005c8 	.word	0x240005c8
 8001394:	240005ec 	.word	0x240005ec
 8001398:	240005cc 	.word	0x240005cc
 800139c:	2400059c 	.word	0x2400059c
 80013a0:	2400058c 	.word	0x2400058c
 80013a4:	240005e0 	.word	0x240005e0
 80013a8:	240005c0 	.word	0x240005c0
 80013ac:	240005e4 	.word	0x240005e4
 80013b0:	240005c4 	.word	0x240005c4
 80013b4:	24000588 	.word	0x24000588
 80013b8:	24000598 	.word	0x24000598
 80013bc:	240005d8 	.word	0x240005d8
 80013c0:	240005f8 	.word	0x240005f8
 80013c4:	240005dc 	.word	0x240005dc
 80013c8:	240005fc 	.word	0x240005fc
 80013cc:	24000594 	.word	0x24000594
 80013d0:	240005a4 	.word	0x240005a4
 80013d4:	240005d0 	.word	0x240005d0
 80013d8:	240005f0 	.word	0x240005f0
 80013dc:	240005f4 	.word	0x240005f4
 80013e0:	240005a0 	.word	0x240005a0
 80013e4:	24000608 	.word	0x24000608
 80013e8:	240005ac 	.word	0x240005ac
 80013ec:	24000600 	.word	0x24000600
 80013f0:	24000604 	.word	0x24000604
 80013f4:	240005a8 	.word	0x240005a8
 80013f8:	24000e48 	.word	0x24000e48
 80013fc:	24000648 	.word	0x24000648
 8001400:	240005b8 	.word	0x240005b8
 8001404:	240005bc 	.word	0x240005bc
 8001408:	2400060c 	.word	0x2400060c
 800140c:	2400057c 	.word	0x2400057c
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001410:	eea8 5a84 	vfma.f32	s10, s17, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001414:	0798      	lsls	r0, r3, #30
 8001416:	eee8 5a04 	vfma.f32	s11, s16, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800141a:	ee7f faaa 	vadd.f32	s31, s31, s21
 800141e:	ee3f fa0a 	vadd.f32	s30, s30, s20
 8001422:	eeaf 5aa4 	vfma.f32	s10, s31, s9
 8001426:	eeef 5a24 	vfma.f32	s11, s30, s9
 800142a:	ee75 6a27 	vadd.f32	s13, s10, s15
 800142e:	ee35 6a87 	vadd.f32	s12, s11, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001432:	f100 8118 	bmi.w	8001666 <ADC_Stream0_Handler+0x502>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001436:	eeab 3a84 	vfma.f32	s6, s23, s8

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 800143a:	075d      	lsls	r5, r3, #29
 800143c:	eeeb 3a04 	vfma.f32	s7, s22, s8
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001440:	ee79 9a8e 	vadd.f32	s19, s19, s28
 8001444:	ee39 9a2d 	vadd.f32	s18, s18, s27
 8001448:	eea9 3aa4 	vfma.f32	s6, s19, s9
 800144c:	eee9 3a24 	vfma.f32	s7, s18, s9
 8001450:	ee33 9a26 	vadd.f32	s18, s6, s13
 8001454:	ee73 9a86 	vadd.f32	s19, s7, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001458:	f100 8116 	bmi.w	8001688 <ADC_Stream0_Handler+0x524>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800145c:	eddd 5a02 	vldr	s11, [sp, #8]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001460:	0718      	lsls	r0, r3, #28
 8001462:	ed9d 5a01 	vldr	s10, [sp, #4]
 8001466:	eeee 5a84 	vfma.f32	s11, s29, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800146a:	eddd 3a05 	vldr	s7, [sp, #20]
 800146e:	eead 5a04 	vfma.f32	s10, s26, s8
 8001472:	ed9d 3a04 	vldr	s6, [sp, #16]
 8001476:	ee7c caa3 	vadd.f32	s25, s25, s7
 800147a:	ee3c ca03 	vadd.f32	s24, s24, s6
 800147e:	eeec 5aa4 	vfma.f32	s11, s25, s9
 8001482:	eeac 5a24 	vfma.f32	s10, s24, s9
 8001486:	ee39 ca25 	vadd.f32	s24, s18, s11
 800148a:	ee75 ca29 	vadd.f32	s25, s10, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 800148e:	f100 81a5 	bmi.w	80017dc <ADC_Stream0_Handler+0x678>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001492:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001496:	f013 0010 	ands.w	r0, r3, #16
 800149a:	ed9d 3a03 	vldr	s6, [sp, #12]
 800149e:	eddd 5a00 	vldr	s11, [sp]
 80014a2:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 80014a6:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80014aa:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
 80014ae:	eee5 fa84 	vfma.f32	s31, s11, s8
 80014b2:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 80014b6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80014ba:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 80014be:	eea5 faa4 	vfma.f32	s30, s11, s9
 80014c2:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80014c6:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80014c8:	ee75 5a25 	vadd.f32	s11, s10, s11
 80014cc:	eee5 faa4 	vfma.f32	s31, s11, s9
 80014d0:	ee3c fa0f 	vadd.f32	s30, s24, s30
 80014d4:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 80014d8:	ee7c faaf 	vadd.f32	s31, s25, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80014dc:	f040 819b 	bne.w	8001816 <ADC_Stream0_Handler+0x6b2>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80014e0:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80014e4:	ea4f 008e 	mov.w	r0, lr, lsl #2
 80014e8:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 80014ec:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 80014f0:	eee3 5a84 	vfma.f32	s11, s7, s8
 80014f4:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80014f8:	ed9d fa0d 	vldr	s30, [sp, #52]	; 0x34
 80014fc:	eea3 5a84 	vfma.f32	s10, s7, s8
 8001500:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001504:	4ddb      	ldr	r5, [pc, #876]	; (8001874 <ADC_Stream0_Handler+0x710>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001506:	ee73 3a8f 	vadd.f32	s7, s7, s30
 800150a:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800150e:	4428      	add	r0, r5
 8001510:	4dd9      	ldr	r5, [pc, #868]	; (8001878 <ADC_Stream0_Handler+0x714>)
 8001512:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001516:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 800151a:	ee73 3a8f 	vadd.f32	s7, s7, s30
 800151e:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 8001522:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001526:	eddf 3ad5 	vldr	s7, [pc, #852]	; 800187c <ADC_Stream0_Handler+0x718>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800152a:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800152e:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001532:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001536:	ee25 5a23 	vmul.f32	s10, s10, s7
 800153a:	ed80 5a00 	vstr	s10, [r0]
 800153e:	f10e 0001 	add.w	r0, lr, #1
 8001542:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8001546:	edce 5a00 	vstr	s11, [lr]
 800154a:	fa0f fe80 	sxth.w	lr, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800154e:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 8001552:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001556:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		if(idx < BSIZE*4)
 800155a:	f2c0 81cf 	blt.w	80018fc <ADC_Stream0_Handler+0x798>

#endif

			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 800155e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001562:	eddd 3a06 	vldr	s7, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001566:	eddd 5a00 	vldr	s11, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800156a:	eeb0 5a68 	vmov.f32	s10, s17
			EXTI->SWIER1 |= GPIO_PIN_14;
 800156e:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001570:	eef0 8a67 	vmov.f32	s17, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001574:	ed8d da01 	vstr	s26, [sp, #4]
 8001578:	eeb0 da69 	vmov.f32	s26, s19
 800157c:	edcd ea02 	vstr	s29, [sp, #8]
 8001580:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001584:	edcd 3a0c 	vstr	s7, [sp, #48]	; 0x30
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001588:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800158c:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001590:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001594:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001598:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800159c:	eeb0 3a6b 	vmov.f32	s6, s23
		idx = 0;
 80015a0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80015a4:	eeb0 ba46 	vmov.f32	s22, s12
		inE6Rold = inER;                           inE6Iold = inEI;
 80015a8:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80015ac:	eef0 ba66 	vmov.f32	s23, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 80015b0:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80015b4:	eeb0 8a47 	vmov.f32	s16, s14
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80015b8:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80015bc:	edcd fa07 	vstr	s31, [sp, #28]
 80015c0:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80015c4:	edcd ca00 	vstr	s25, [sp]
 80015c8:	ed8d ca03 	vstr	s24, [sp, #12]
			EXTI->SWIER1 |= GPIO_PIN_14;
 80015cc:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 80015ce:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80015d2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80015d6:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 80015da:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80015de:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80015e2:	eeb0 9a6d 	vmov.f32	s18, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 80015e6:	ed9d ca04 	vldr	s24, [sp, #16]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80015ea:	eef0 9a4e 	vmov.f32	s19, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 80015ee:	eddd ca05 	vldr	s25, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 80015f2:	eeb0 fa4a 	vmov.f32	s30, s20
 80015f6:	eef0 fa6a 	vmov.f32	s31, s21
	while(k--)
 80015fa:	3208      	adds	r2, #8
 80015fc:	3b01      	subs	r3, #1
 80015fe:	eef0 7a41 	vmov.f32	s15, s2
 8001602:	3108      	adds	r1, #8
 8001604:	4594      	cmp	ip, r2
 8001606:	eeb0 6a61 	vmov.f32	s12, s3
 800160a:	b29b      	uxth	r3, r3
 800160c:	d059      	beq.n	80016c2 <ADC_Stream0_Handler+0x55e>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800160e:	eef0 1a60 	vmov.f32	s3, s1
 8001612:	eeb0 1a40 	vmov.f32	s2, s0
 8001616:	eeb0 7a42 	vmov.f32	s14, s4
 800161a:	ed12 0a01 	vldr	s0, [r2, #-4]
 800161e:	ed12 2a02 	vldr	s4, [r2, #-8]
 8001622:	eef0 6a62 	vmov.f32	s13, s5
 8001626:	ed51 0a01 	vldr	s1, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 800162a:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 800162c:	ee72 2a07 	vadd.f32	s5, s4, s14
 8001630:	eeb0 7a40 	vmov.f32	s14, s0
 8001634:	eea1 7a04 	vfma.f32	s14, s2, s8
 8001638:	eea2 7aa4 	vfma.f32	s14, s5, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800163c:	ed51 2a02 	vldr	s5, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001640:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8001644:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001648:	eeb0 7a60 	vmov.f32	s14, s1
 800164c:	eea1 7a84 	vfma.f32	s14, s3, s8
 8001650:	eea6 7aa4 	vfma.f32	s14, s13, s9
 8001654:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001658:	f57f aeda 	bpl.w	8001410 <ADC_Stream0_Handler+0x2ac>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 800165c:	eeb0 aa47 	vmov.f32	s20, s14
 8001660:	eef0 aa67 	vmov.f32	s21, s15
 8001664:	e7c9      	b.n	80015fa <ADC_Stream0_Handler+0x496>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001666:	eef0 5a48 	vmov.f32	s11, s16
 800166a:	eeb0 5a68 	vmov.f32	s10, s17
 800166e:	eeb0 8a47 	vmov.f32	s16, s14
 8001672:	eef0 8a67 	vmov.f32	s17, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001676:	eef0 da46 	vmov.f32	s27, s12
 800167a:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 800167e:	eeb0 fa4a 	vmov.f32	s30, s20
 8001682:	eef0 fa6a 	vmov.f32	s31, s21
 8001686:	e7b8      	b.n	80015fa <ADC_Stream0_Handler+0x496>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001688:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 800168c:	edcd 9a04 	vstr	s19, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001690:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001694:	ed8d 9a05 	vstr	s18, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001698:	eef0 5a48 	vmov.f32	s11, s16
 800169c:	eeb0 5a68 	vmov.f32	s10, s17
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80016a0:	eeb0 ba46 	vmov.f32	s22, s12
 80016a4:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80016a8:	eeb0 8a47 	vmov.f32	s16, s14
 80016ac:	eef0 8a67 	vmov.f32	s17, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80016b0:	eeb0 9a6d 	vmov.f32	s18, s27
 80016b4:	eef0 9a4e 	vmov.f32	s19, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 80016b8:	eeb0 fa4a 	vmov.f32	s30, s20
 80016bc:	eef0 fa6a 	vmov.f32	s31, s21
 80016c0:	e79b      	b.n	80015fa <ADC_Stream0_Handler+0x496>
 80016c2:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <ADC_Stream0_Handler+0x71c>)
 80016c4:	eddd 7a02 	vldr	s15, [sp, #8]
 80016c8:	ed83 2a00 	vstr	s4, [r3]
 80016cc:	4b6d      	ldr	r3, [pc, #436]	; (8001884 <ADC_Stream0_Handler+0x720>)
 80016ce:	ed8a 0a00 	vstr	s0, [sl]
 80016d2:	edc3 0a00 	vstr	s1, [r3]
 80016d6:	4b6c      	ldr	r3, [pc, #432]	; (8001888 <ADC_Stream0_Handler+0x724>)
 80016d8:	ed89 1a00 	vstr	s2, [r9]
 80016dc:	edc3 1a00 	vstr	s3, [r3]
 80016e0:	4b6a      	ldr	r3, [pc, #424]	; (800188c <ADC_Stream0_Handler+0x728>)
 80016e2:	4a6b      	ldr	r2, [pc, #428]	; (8001890 <ADC_Stream0_Handler+0x72c>)
 80016e4:	edc3 2a00 	vstr	s5, [r3]
 80016e8:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <ADC_Stream0_Handler+0x730>)
 80016ea:	edc3 8a00 	vstr	s17, [r3]
 80016ee:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <ADC_Stream0_Handler+0x734>)
 80016f0:	ed83 5a00 	vstr	s10, [r3]
 80016f4:	4b69      	ldr	r3, [pc, #420]	; (800189c <ADC_Stream0_Handler+0x738>)
 80016f6:	edc3 fa00 	vstr	s31, [r3]
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <ADC_Stream0_Handler+0x73c>)
 80016fc:	ed83 8a00 	vstr	s16, [r3]
 8001700:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <ADC_Stream0_Handler+0x740>)
 8001702:	edc3 5a00 	vstr	s11, [r3]
 8001706:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <ADC_Stream0_Handler+0x744>)
 8001708:	ed83 fa00 	vstr	s30, [r3]
 800170c:	4b67      	ldr	r3, [pc, #412]	; (80018ac <ADC_Stream0_Handler+0x748>)
 800170e:	edc3 ba00 	vstr	s23, [r3]
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <ADC_Stream0_Handler+0x74c>)
 8001714:	ed83 3a00 	vstr	s6, [r3]
 8001718:	4b66      	ldr	r3, [pc, #408]	; (80018b4 <ADC_Stream0_Handler+0x750>)
 800171a:	edc3 9a00 	vstr	s19, [r3]
 800171e:	4b66      	ldr	r3, [pc, #408]	; (80018b8 <ADC_Stream0_Handler+0x754>)
 8001720:	ed83 ba00 	vstr	s22, [r3]
 8001724:	4b65      	ldr	r3, [pc, #404]	; (80018bc <ADC_Stream0_Handler+0x758>)
 8001726:	edc3 3a00 	vstr	s7, [r3]
 800172a:	4b65      	ldr	r3, [pc, #404]	; (80018c0 <ADC_Stream0_Handler+0x75c>)
 800172c:	ed83 9a00 	vstr	s18, [r3]
 8001730:	4b64      	ldr	r3, [pc, #400]	; (80018c4 <ADC_Stream0_Handler+0x760>)
 8001732:	edc3 ea00 	vstr	s29, [r3]
 8001736:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <ADC_Stream0_Handler+0x764>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
 800173c:	4b63      	ldr	r3, [pc, #396]	; (80018cc <ADC_Stream0_Handler+0x768>)
 800173e:	eddd 7a01 	vldr	s15, [sp, #4]
 8001742:	edc3 ca00 	vstr	s25, [r3]
 8001746:	4b62      	ldr	r3, [pc, #392]	; (80018d0 <ADC_Stream0_Handler+0x76c>)
 8001748:	ed83 da00 	vstr	s26, [r3]
 800174c:	4b61      	ldr	r3, [pc, #388]	; (80018d4 <ADC_Stream0_Handler+0x770>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
 8001752:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <ADC_Stream0_Handler+0x774>)
 8001754:	eddd 7a03 	vldr	s15, [sp, #12]
 8001758:	ed83 ca00 	vstr	s24, [r3]
 800175c:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <ADC_Stream0_Handler+0x778>)
 800175e:	edc3 7a00 	vstr	s15, [r3]
 8001762:	eddd 7a08 	vldr	s15, [sp, #32]
 8001766:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <ADC_Stream0_Handler+0x77c>)
 8001768:	edc3 7a00 	vstr	s15, [r3]
 800176c:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001770:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <ADC_Stream0_Handler+0x780>)
 8001772:	edc3 7a00 	vstr	s15, [r3]
 8001776:	eddd 7a00 	vldr	s15, [sp]
 800177a:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <ADC_Stream0_Handler+0x784>)
 800177c:	f8ab e000 	strh.w	lr, [fp]
 8001780:	edc3 7a00 	vstr	s15, [r3]
 8001784:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <ADC_Stream0_Handler+0x788>)
 800178a:	edc3 7a00 	vstr	s15, [r3]
 800178e:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8001792:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <ADC_Stream0_Handler+0x78c>)
 8001794:	edc3 7a00 	vstr	s15, [r3]
 8001798:	eddd 7a06 	vldr	s15, [sp, #24]
 800179c:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <ADC_Stream0_Handler+0x790>)
 800179e:	edc3 7a00 	vstr	s15, [r3]
 80017a2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <ADC_Stream0_Handler+0x794>)
 80017a8:	edc8 7a00 	vstr	s15, [r8]
 80017ac:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80017b0:	edc7 7a00 	vstr	s15, [r7]
 80017b4:	eddd 7a07 	vldr	s15, [sp, #28]
 80017b8:	edc6 7a00 	vstr	s15, [r6]
 80017bc:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80017c0:	edc3 7a00 	vstr	s15, [r3]
 80017c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c8:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80017cc:	8023      	strh	r3, [r4, #0]
 80017ce:	edc2 7a00 	vstr	s15, [r2]
		}

		// LED_YELLOW_OFF;

	}
 80017d2:	b015      	add	sp, #84	; 0x54
 80017d4:	ecbd 8b10 	vpop	{d8-d15}
 80017d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017dc:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80017e0:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017e4:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80017e8:	edcd ea02 	vstr	s29, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80017ec:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80017f0:	edcd ca10 	vstr	s25, [sp, #64]	; 0x40
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80017f4:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80017f8:	ed8d ca11 	vstr	s24, [sp, #68]	; 0x44
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80017fc:	eeb0 da69 	vmov.f32	s26, s19
 8001800:	eef0 ea49 	vmov.f32	s29, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001804:	eeb0 ba46 	vmov.f32	s22, s12
 8001808:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800180c:	eeb0 8a47 	vmov.f32	s16, s14
 8001810:	eef0 8a67 	vmov.f32	s17, s15
 8001814:	e6e5      	b.n	80015e2 <ADC_Stream0_Handler+0x47e>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001816:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800181a:	eef0 3a4b 	vmov.f32	s7, s22
 800181e:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001822:	ed8d da01 	vstr	s26, [sp, #4]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001826:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800182a:	eeb0 da69 	vmov.f32	s26, s19
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800182e:	eddd 5a03 	vldr	s11, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001832:	eeb0 ba46 	vmov.f32	s22, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001836:	edcd ea02 	vstr	s29, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800183a:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800183e:	edcd 5a08 	vstr	s11, [sp, #32]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001842:	eef0 ea49 	vmov.f32	s29, s18
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001846:	eef0 5a48 	vmov.f32	s11, s16
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800184a:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800184e:	eeb0 8a47 	vmov.f32	s16, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001852:	ed8d ca03 	vstr	s24, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001856:	eeb0 5a68 	vmov.f32	s10, s17
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 800185a:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800185e:	eef0 8a67 	vmov.f32	s17, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001862:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001866:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 800186a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800186e:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8001872:	e6b2      	b.n	80015da <ADC_Stream0_Handler+0x476>
 8001874:	2000b000 	.word	0x2000b000
 8001878:	2000d000 	.word	0x2000d000
 800187c:	34000000 	.word	0x34000000
 8001880:	24000584 	.word	0x24000584
 8001884:	240005b0 	.word	0x240005b0
 8001888:	240005b4 	.word	0x240005b4
 800188c:	24000580 	.word	0x24000580
 8001890:	240005a8 	.word	0x240005a8
 8001894:	240005c8 	.word	0x240005c8
 8001898:	240005cc 	.word	0x240005cc
 800189c:	2400058c 	.word	0x2400058c
 80018a0:	240005c0 	.word	0x240005c0
 80018a4:	240005c4 	.word	0x240005c4
 80018a8:	24000588 	.word	0x24000588
 80018ac:	240005d8 	.word	0x240005d8
 80018b0:	240005dc 	.word	0x240005dc
 80018b4:	24000594 	.word	0x24000594
 80018b8:	240005d0 	.word	0x240005d0
 80018bc:	240005d4 	.word	0x240005d4
 80018c0:	24000590 	.word	0x24000590
 80018c4:	240005e8 	.word	0x240005e8
 80018c8:	240005ec 	.word	0x240005ec
 80018cc:	2400059c 	.word	0x2400059c
 80018d0:	240005e0 	.word	0x240005e0
 80018d4:	240005e4 	.word	0x240005e4
 80018d8:	24000598 	.word	0x24000598
 80018dc:	240005f8 	.word	0x240005f8
 80018e0:	240005fc 	.word	0x240005fc
 80018e4:	240005a4 	.word	0x240005a4
 80018e8:	240005f0 	.word	0x240005f0
 80018ec:	240005f4 	.word	0x240005f4
 80018f0:	240005a0 	.word	0x240005a0
 80018f4:	24000608 	.word	0x24000608
 80018f8:	24000604 	.word	0x24000604
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80018fc:	eddd 5a06 	vldr	s11, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001900:	eeb0 5a68 	vmov.f32	s10, s17
 8001904:	eef0 8a67 	vmov.f32	s17, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001908:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800190c:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001910:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001914:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001918:	eeb0 3a6b 	vmov.f32	s6, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 800191c:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001920:	eeb0 ba46 	vmov.f32	s22, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001924:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001928:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800192c:	eddd 5a03 	vldr	s11, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001930:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001934:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001938:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800193c:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001940:	ed8d da01 	vstr	s26, [sp, #4]
 8001944:	eeb0 da69 	vmov.f32	s26, s19
 8001948:	edcd ea02 	vstr	s29, [sp, #8]
 800194c:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001950:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001954:	eeb0 8a47 	vmov.f32	s16, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001958:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800195c:	edcd ca00 	vstr	s25, [sp]
 8001960:	ed8d ca03 	vstr	s24, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001964:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001968:	e77f      	b.n	800186a <ADC_Stream0_Handler+0x706>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <ADC_Stream0_Handler+0x81c>)
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <ADC_Stream0_Handler+0x820>)
 800196e:	ed92 0a00 	vldr	s0, [r2]
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ee30 0a27 	vadd.f32	s0, s0, s15
 800197a:	f000 f805 	bl	8001988 <SDR_ComputeLO>
 800197e:	e406      	b.n	800118e <ADC_Stream0_Handler+0x2a>
 8001980:	24007090 	.word	0x24007090
 8001984:	24009a54 	.word	0x24009a54

08001988 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001988:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 800198a:	4b50      	ldr	r3, [pc, #320]	; (8001acc <SDR_ComputeLO+0x144>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001994:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d173      	bne.n	8001a86 <SDR_ComputeLO+0xfe>
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800199e:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <SDR_ComputeLO+0x148>)
 80019a0:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <SDR_ComputeLO+0x14c>)
 80019a2:	ed92 8a00 	vldr	s16, [r2]
 80019a6:	ed93 7a00 	vldr	s14, [r3]
 80019aa:	4d4b      	ldr	r5, [pc, #300]	; (8001ad8 <SDR_ComputeLO+0x150>)
 80019ac:	4c4b      	ldr	r4, [pc, #300]	; (8001adc <SDR_ComputeLO+0x154>)
 80019ae:	484c      	ldr	r0, [pc, #304]	; (8001ae0 <SDR_ComputeLO+0x158>)
 80019b0:	4b4c      	ldr	r3, [pc, #304]	; (8001ae4 <SDR_ComputeLO+0x15c>)
 80019b2:	edd5 5a00 	vldr	s11, [r5]
 80019b6:	edd4 7a00 	vldr	s15, [r4]
 80019ba:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 80019be:	edd0 6a00 	vldr	s13, [r0]
 80019c2:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <SDR_ComputeLO+0x160>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019c4:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 80019c8:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019ca:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 80019ce:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019d0:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 80019d4:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019d6:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019da:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019de:	ee67 7aa6 	vmul.f32	s15, s15, s13
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019e2:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019e6:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019ea:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019ee:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019f2:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019f6:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019fa:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019fe:	ee66 5aa5 	vmul.f32	s11, s13, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a02:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a06:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001a0a:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001a0e:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a12:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001a16:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a1a:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a22:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a26:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001a2a:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001a2e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a32:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001a36:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a3a:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001a3e:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a42:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001a46:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001a4a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001a4e:	d1b9      	bne.n	80019c4 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001a50:	ee66 6a06 	vmul.f32	s13, s12, s12
 8001a54:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001aec <SDR_ComputeLO+0x164>
 8001a58:	edc4 7a00 	vstr	s15, [r4]
 8001a5c:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001af0 <SDR_ComputeLO+0x168>
 8001a60:	eee5 6a05 	vfma.f32	s13, s10, s10
 8001a64:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <SDR_ComputeLO+0x16c>)
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <SDR_ComputeLO+0x170>)
 8001a68:	edc5 5a00 	vstr	s11, [r5]
 8001a6c:	ed82 5a00 	vstr	s10, [r2]
 8001a70:	ed83 6a00 	vstr	s12, [r3]
 8001a74:	ee77 7a66 	vsub.f32	s15, s14, s13
}	
 8001a78:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001a7c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001a80:	edc0 7a00 	vstr	s15, [r0]
}	
 8001a84:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001a86:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001afc <SDR_ComputeLO+0x174>
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <SDR_ComputeLO+0x178>)
 8001a8c:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001a90:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001a94:	ed92 7a00 	vldr	s14, [r2]
 8001a98:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001a9c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001aa0:	eeb0 0b49 	vmov.f64	d0, d9
 8001aa4:	f00f fecc 	bl	8011840 <cos>
 8001aa8:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <SDR_ComputeLO+0x148>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001aae:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001ab2:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001ab6:	f00f ff0f 	bl	80118d8 <sin>
 8001aba:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SDR_ComputeLO+0x14c>)
 8001ac0:	eeb1 7a47 	vneg.f32	s14, s14
 8001ac4:	ed83 7a00 	vstr	s14, [r3]
 8001ac8:	e76f      	b.n	80019aa <SDR_ComputeLO+0x22>
 8001aca:	bf00      	nop
 8001acc:	240000e4 	.word	0x240000e4
 8001ad0:	24000614 	.word	0x24000614
 8001ad4:	2400061c 	.word	0x2400061c
 8001ad8:	240000e8 	.word	0x240000e8
 8001adc:	24000634 	.word	0x24000634
 8001ae0:	240000e0 	.word	0x240000e0
 8001ae4:	240068a0 	.word	0x240068a0
 8001ae8:	240060a0 	.word	0x240060a0
 8001aec:	46000200 	.word	0x46000200
 8001af0:	39000000 	.word	0x39000000
 8001af4:	24000638 	.word	0x24000638
 8001af8:	2400063c 	.word	0x2400063c
 8001afc:	40c90fdb 	.word	0x40c90fdb
 8001b00:	240070ac 	.word	0x240070ac

08001b04 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	d028      	beq.n	8001b5a <SDR_2R_toC_f32+0x56>
 8001b08:	3010      	adds	r0, #16
 8001b0a:	3110      	adds	r1, #16
 8001b0c:	3220      	adds	r2, #32
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001b0e:	f850 cc10 	ldr.w	ip, [r0, #-16]
  while(blkCnt)
 8001b12:	3110      	adds	r1, #16
 8001b14:	3010      	adds	r0, #16
 8001b16:	3b01      	subs	r3, #1
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001b18:	f842 cc20 	str.w	ip, [r2, #-32]
  while(blkCnt)
 8001b1c:	f102 0220 	add.w	r2, r2, #32
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001b20:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8001b24:	f842 cc3c 	str.w	ip, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001b28:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8001b2c:	f842 cc38 	str.w	ip, [r2, #-56]
 8001b30:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8001b34:	f842 cc34 	str.w	ip, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001b38:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8001b3c:	f842 cc30 	str.w	ip, [r2, #-48]
 8001b40:	f851 cc18 	ldr.w	ip, [r1, #-24]
 8001b44:	f842 cc2c 	str.w	ip, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001b48:	f850 cc14 	ldr.w	ip, [r0, #-20]
 8001b4c:	f842 cc28 	str.w	ip, [r2, #-40]
 8001b50:	f851 cc14 	ldr.w	ip, [r1, #-20]
 8001b54:	f842 cc24 	str.w	ip, [r2, #-36]
  while(blkCnt)
 8001b58:	d1d9      	bne.n	8001b0e <SDR_2R_toC_f32+0xa>
    
    blkCnt--;
  }
}
 8001b5a:	4770      	bx	lr

08001b5c <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <SDR_downconvert_f32+0xd8>)
  float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;
	
// loop Unrolling
  blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
  while(blkCnt)
 8001b5e:	3110      	adds	r1, #16
 8001b60:	3210      	adds	r2, #16
 8001b62:	3008      	adds	r0, #8
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b64:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001c38 <SDR_downconvert_f32+0xdc>
 8001b68:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	4c33      	ldr	r4, [pc, #204]	; (8001c3c <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001b70:	f830 ec08 	ldrh.w	lr, [r0, #-8]
  while(blkCnt)
 8001b74:	3110      	adds	r1, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001b76:	ed13 5a04 	vldr	s10, [r3, #-16]
  while(blkCnt)
 8001b7a:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001b7c:	ee06 ea10 	vmov	s12, lr
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b80:	f830 ec06 	ldrh.w	lr, [r0, #-6]
  while(blkCnt)
 8001b84:	3310      	adds	r3, #16
 8001b86:	3210      	adds	r2, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001b88:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b8c:	ee06 ea90 	vmov	s13, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001b90:	f830 ec02 	ldrh.w	lr, [r0, #-2]
  while(blkCnt)
 8001b94:	4563      	cmp	r3, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b96:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  while(blkCnt)
 8001b9a:	f100 0008 	add.w	r0, r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001b9e:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001ba2:	ee07 ea90 	vmov	s15, lr
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001ba6:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001baa:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001bae:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001bb2:	ee07 ea10 	vmov	s14, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001bba:	ee66 6aa5 	vmul.f32	s13, s13, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001bbe:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001bc6:	ee77 7ac0 	vsub.f32	s15, s15, s0
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001bca:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001bce:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001bd2:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001bd6:	ee67 7aa5 	vmul.f32	s15, s15, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001bda:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001bde:	ee27 7a25 	vmul.f32	s14, s14, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001be2:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001be6:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001bea:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001bee:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001bf2:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001bf6:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001bfa:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001bfe:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001c02:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001c06:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001c0a:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001c0e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001c12:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001c16:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001c22:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001c2e:	d19f      	bne.n	8001b70 <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	bf00      	nop
 8001c34:	240060a0 	.word	0x240060a0
 8001c38:	3a000000 	.word	0x3a000000
 8001c3c:	240068a0 	.word	0x240068a0

08001c40 <SDR_float_to_DAC_audio>:
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001c40:	0893      	lsrs	r3, r2, #2
  while(blkCnt--)
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d058      	beq.n	8001cf8 <SDR_float_to_DAC_audio+0xb8>
 8001c46:	f103 3cff 	add.w	ip, r3, #4294967295
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c4a:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <SDR_float_to_DAC_audio+0xe4>)
 8001c4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c50:	fa1f fc8c 	uxth.w	ip, ip
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	f100 0310 	add.w	r3, r0, #16
 8001c5c:	3020      	adds	r0, #32
 8001c5e:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 8001c62:	f101 0008 	add.w	r0, r1, #8
{
 8001c66:	b500      	push	{lr}
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c68:	eeb0 5a47 	vmov.f32	s10, s14
 8001c6c:	ed53 5a04 	vldr	s11, [r3, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c70:	ed13 6a03 	vldr	s12, [r3, #-12]
  while(blkCnt--)
 8001c74:	3008      	adds	r0, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c76:	ed53 6a02 	vldr	s13, [r3, #-8]
  while(blkCnt--)
 8001c7a:	3310      	adds	r3, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c7c:	eea5 5aa7 	vfma.f32	s10, s11, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c80:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c84:	eef0 5a47 	vmov.f32	s11, s14
  while(blkCnt--)
 8001c88:	459c      	cmp	ip, r3
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c8a:	eee7 5a86 	vfma.f32	s11, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c8e:	eeb0 6a47 	vmov.f32	s12, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c92:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c96:	eea7 6aa6 	vfma.f32	s12, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c9a:	eef0 6a47 	vmov.f32	s13, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c9e:	ee15 ea10 	vmov	lr, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ca2:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ca6:	f820 ec10 	strh.w	lr, [r0, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001caa:	eee7 6aa4 	vfma.f32	s13, s15, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001cae:	ee15 ea90 	vmov	lr, s11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001cb2:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001cb6:	f820 ec0e 	strh.w	lr, [r0, #-14]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001cba:	ee16 ea10 	vmov	lr, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001cbe:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001cc2:	f820 ec0c 	strh.w	lr, [r0, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001cc6:	ee16 ea90 	vmov	lr, s13
 8001cca:	f820 ec0a 	strh.w	lr, [r0, #-10]
  while(blkCnt--)
 8001cce:	d1cb      	bne.n	8001c68 <SDR_float_to_DAC_audio+0x28>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001cd0:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cd2:	f001 021f 	and.w	r2, r1, #31
 8001cd6:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001cdc:	4812      	ldr	r0, [pc, #72]	; (8001d28 <SDR_float_to_DAC_audio+0xe8>)
 8001cde:	440a      	add	r2, r1
 8001ce0:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001ce4:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001ce6:	1a53      	subs	r3, r2, r1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dcf9      	bgt.n	8001ce0 <SDR_float_to_DAC_audio+0xa0>
 8001cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cf0:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001cf4:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( dsize > 0 ) { 
 8001cf8:	0093      	lsls	r3, r2, #2
 8001cfa:	b902      	cbnz	r2, 8001cfe <SDR_float_to_DAC_audio+0xbe>
 8001cfc:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cfe:	f001 021f 	and.w	r2, r1, #31
 8001d02:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d08:	4807      	ldr	r0, [pc, #28]	; (8001d28 <SDR_float_to_DAC_audio+0xe8>)
 8001d0a:	440a      	add	r2, r1
 8001d0c:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d10:	3120      	adds	r1, #32
      } while ( op_size > 0 );
 8001d12:	1a53      	subs	r3, r2, r1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	dcf9      	bgt.n	8001d0c <SDR_float_to_DAC_audio+0xcc>
 8001d18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d1c:	f3bf 8f6f 	isb	sy
return;
 8001d20:	e7ec      	b.n	8001cfc <SDR_float_to_DAC_audio+0xbc>
 8001d22:	bf00      	nop
 8001d24:	2400d7ec 	.word	0x2400d7ec
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001d2c:	0892      	lsrs	r2, r2, #2
 8001d2e:	d016      	beq.n	8001d5e <SDR_memcpy_f32+0x32>
 8001d30:	3110      	adds	r1, #16
 8001d32:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001d34:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001d38:	3110      	adds	r1, #16
 8001d3a:	3a01      	subs	r2, #1
 8001d3c:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001d40:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8001d44:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8001d48:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8001d4c:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8001d50:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8001d54:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8001d58:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8001d5c:	d1ea      	bne.n	8001d34 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8001d5e:	4770      	bx	lr

08001d60 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8001d60:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001d62:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8001d66:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001d68:	440b      	add	r3, r1
	while(blkCnt--)
 8001d6a:	f1a2 0102 	sub.w	r1, r2, #2
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001d6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 8001d72:	d036      	beq.n	8001de2 <SDR_mirror_LSB+0x82>
 8001d74:	f1a3 0220 	sub.w	r2, r3, #32
 8001d78:	f1a3 0c1c 	sub.w	ip, r3, #28
 8001d7c:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001d80:	4402      	add	r2, r0
 8001d82:	4460      	add	r0, ip
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d84:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	3820      	subs	r0, #32
 8001d8c:	3901      	subs	r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d8e:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 8001d92:	3320      	adds	r3, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d94:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 8001d98:	f1b1 3fff 	cmp.w	r1, #4294967295
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d9c:	eef1 7a67 	vneg.f32	s15, s15
 8001da0:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001da4:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 8001da8:	f843 cc38 	str.w	ip, [r3, #-56]
 8001dac:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8001db0:	eef1 7a67 	vneg.f32	s15, s15
 8001db4:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001db8:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8001dbc:	f843 cc30 	str.w	ip, [r3, #-48]
 8001dc0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8001dc4:	eef1 7a67 	vneg.f32	s15, s15
 8001dc8:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001dcc:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 8001dd0:	f843 cc28 	str.w	ip, [r3, #-40]
 8001dd4:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001dd8:	eef1 7a67 	vneg.f32	s15, s15
 8001ddc:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8001de0:	d1d0      	bne.n	8001d84 <SDR_mirror_LSB+0x24>
	}
}
 8001de2:	4770      	bx	lr

08001de4 <SDR_compute_IIR_parms>:
#endif
   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 8001de4:	492b      	ldr	r1, [pc, #172]	; (8001e94 <SDR_compute_IIR_parms+0xb0>)
 8001de6:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001e98 <SDR_compute_IIR_parms+0xb4>
 8001dea:	edd1 7a00 	vldr	s15, [r1]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001dee:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <SDR_compute_IIR_parms+0xb8>)
   wr = 2.f * cwpitch / rate * myPI;
 8001df0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001df4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8001ea0 <SDR_compute_IIR_parms+0xbc>
 8001df8:	ed92 7a00 	vldr	s14, [r2]
{
 8001dfc:	b508      	push	{r3, lr}
 8001dfe:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 8001e02:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 8001e06:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <SDR_compute_IIR_parms+0xc0>)
 8001e08:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001e0c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8001e10:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001e14:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8001e18:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001e1c:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8001e20:	ee68 8a80 	vmul.f32	s17, s17, s0
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001e24:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8001e28:	f00f fd0a 	bl	8011840 <cos>
 8001e2c:	ee8a 5a09 	vdiv.f32	s10, s20, s18
   a1 = -2.f * r * cosw0;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <SDR_compute_IIR_parms+0xc8>)
 8001e34:	edc2 aa00 	vstr	s21, [r2]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001e38:	eeb0 6b40 	vmov.f64	d6, d0
   a1 = -2.f * r * cosw0;
 8001e3c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001e40:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8001e44:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8001e48:	ee69 7aa7 	vmul.f32	s15, s19, s15
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001e4c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001e50:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8001e54:	ee25 6b06 	vmul.f64	d6, d5, d6
 8001e58:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8001e5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e60:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001e64:	f00f fcec 	bl	8011840 <cos>
 8001e68:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8001e6c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001eb0 <SDR_compute_IIR_parms+0xcc>
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <SDR_compute_IIR_parms+0xd0>)
 8001e72:	ee28 7a07 	vmul.f32	s14, s16, s14
 8001e76:	eeaa 6b40 	vfms.f64	d6, d10, d0
 8001e7a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8001e7e:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001e82:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8001e86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001e8a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001e8e:	ed83 7a00 	vstr	s14, [r3]
}
 8001e92:	bd08      	pop	{r3, pc}
 8001e94:	24009a54 	.word	0x24009a54
 8001e98:	44000000 	.word	0x44000000
 8001e9c:	240070ac 	.word	0x240070ac
 8001ea0:	40490fdb 	.word	0x40490fdb
 8001ea4:	240070a4 	.word	0x240070a4
 8001ea8:	2400921c 	.word	0x2400921c
 8001eac:	24009220 	.word	0x24009220
 8001eb0:	3f99999a 	.word	0x3f99999a
 8001eb4:	24009a4c 	.word	0x24009a4c

08001eb8 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8001eb8:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 8001eba:	2900      	cmp	r1, #0
 8001ebc:	d077      	beq.n	8001fae <SDR_CWPeak+0xf6>
 8001ebe:	1e4b      	subs	r3, r1, #1
 8001ec0:	f8df c104 	ldr.w	ip, [pc, #260]	; 8001fc8 <SDR_CWPeak+0x110>
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001ec4:	493a      	ldr	r1, [pc, #232]	; (8001fb0 <SDR_CWPeak+0xf8>)
 8001ec6:	3010      	adds	r0, #16
 8001ec8:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <SDR_CWPeak+0xfc>)
 8001eca:	eddc 2a00 	vldr	s5, [ip]
 8001ece:	ed91 6a00 	vldr	s12, [r1]
 8001ed2:	ed92 5a00 	vldr	s10, [r2]
{
 8001ed6:	b4f0      	push	{r4, r5, r6, r7}
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001ed8:	4c37      	ldr	r4, [pc, #220]	; (8001fb8 <SDR_CWPeak+0x100>)
 8001eda:	4f38      	ldr	r7, [pc, #224]	; (8001fbc <SDR_CWPeak+0x104>)
 8001edc:	edd4 4a00 	vldr	s9, [r4]
 8001ee0:	4e37      	ldr	r6, [pc, #220]	; (8001fc0 <SDR_CWPeak+0x108>)
 8001ee2:	4d38      	ldr	r5, [pc, #224]	; (8001fc4 <SDR_CWPeak+0x10c>)
 8001ee4:	eeb1 2a64 	vneg.f32	s4, s9
 8001ee8:	ed97 7a00 	vldr	s14, [r7]
 8001eec:	edd6 5a00 	vldr	s11, [r6]
 8001ef0:	edd5 6a00 	vldr	s13, [r5]
 8001ef4:	ee66 3a47 	vnmul.f32	s7, s12, s14
 8001ef8:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001efc:	ee26 4a66 	vnmul.f32	s8, s12, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f00:	ed50 7a03 	vldr	s15, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f04:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 8001f08:	3010      	adds	r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f0a:	eee2 3a22 	vfma.f32	s7, s4, s5
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f0e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001f12:	eea2 4a25 	vfma.f32	s8, s4, s11
	 while(blkCnt--)
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f1c:	eee7 3a05 	vfma.f32	s7, s14, s10
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001f20:	eea3 4a85 	vfma.f32	s8, s7, s10
	   *buf++ = y0;
 8001f24:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f28:	ed92 5a00 	vldr	s10, [r2]
 8001f2c:	ed91 6a00 	vldr	s12, [r1]
 8001f30:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001f34:	edd4 4a00 	vldr	s9, [r4]
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f38:	ee25 7a26 	vmul.f32	s14, s10, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f3c:	ee65 6a03 	vmul.f32	s13, s10, s6
 8001f40:	eee6 7a62 	vfms.f32	s15, s12, s5
 8001f44:	eea6 7a63 	vfms.f32	s14, s12, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f48:	eeb1 2a64 	vneg.f32	s4, s9
 8001f4c:	eee4 7ae3 	vfms.f32	s15, s9, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f50:	eea4 7ae7 	vfms.f32	s14, s9, s15
 8001f54:	eee6 6a67 	vfms.f32	s13, s12, s15
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001f58:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001f5c:	eee4 7ac4 	vfms.f32	s15, s9, s8
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001f60:	eee4 6ac7 	vfms.f32	s13, s9, s14
 8001f64:	eef0 2a66 	vmov.f32	s5, s13
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001f68:	ee65 6a07 	vmul.f32	s13, s10, s14
 8001f6c:	eee6 6a44 	vfms.f32	s13, s12, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001f70:	eeb0 4a67 	vmov.f32	s8, s15
 8001f74:	eed6 7a25 	vfnms.f32	s15, s12, s11
 8001f78:	eea6 4a65 	vfms.f32	s8, s12, s11
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001f7c:	ee65 5a22 	vmul.f32	s11, s10, s5
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001f80:	eee4 6aa7 	vfma.f32	s13, s9, s15
 8001f84:	eee6 5a44 	vfms.f32	s11, s12, s8
	   *buf++ = y0;
 8001f88:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
	   *buf++ = y0;
 8001f8c:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001f90:	eee4 5ae6 	vfms.f32	s11, s9, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 8001f94:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8001f98:	d1ac      	bne.n	8001ef4 <SDR_CWPeak+0x3c>
 8001f9a:	ed87 7a00 	vstr	s14, [r7]
 8001f9e:	edc6 5a00 	vstr	s11, [r6]
 8001fa2:	edc5 6a00 	vstr	s13, [r5]
 8001fa6:	edcc 2a00 	vstr	s5, [ip]
   }
}
 8001faa:	bcf0      	pop	{r4, r5, r6, r7}
 8001fac:	4770      	bx	lr
 8001fae:	4770      	bx	lr
 8001fb0:	24009220 	.word	0x24009220
 8001fb4:	24009a4c 	.word	0x24009a4c
 8001fb8:	2400921c 	.word	0x2400921c
 8001fbc:	2400062c 	.word	0x2400062c
 8001fc0:	24000628 	.word	0x24000628
 8001fc4:	24000630 	.word	0x24000630
 8001fc8:	24000624 	.word	0x24000624

08001fcc <SDR_demodAM_AGC>:
// ------------------------------------------------------

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8001fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <SDR_demodAM_AGC+0xf8>)
{
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	4f3c      	ldr	r7, [pc, #240]	; (80020c8 <SDR_demodAM_AGC+0xfc>)
 8001fd6:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 8001fda:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80020e8 <SDR_demodAM_AGC+0x11c>
		  hangcnt = Hcount[AM]; 
 8001fde:	f8b3 e000 	ldrh.w	lr, [r3]
 8001fe2:	683a      	ldr	r2, [r7, #0]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001fe4:	eddf 4a39 	vldr	s9, [pc, #228]	; 80020cc <SDR_demodAM_AGC+0x100>
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001fe8:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80020d0 <SDR_demodAM_AGC+0x104>
 8001fec:	ed98 7a00 	vldr	s14, [r8]
 8001ff0:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <SDR_demodAM_AGC+0x108>)
 8001ff2:	4d39      	ldr	r5, [pc, #228]	; (80020d8 <SDR_demodAM_AGC+0x10c>)
 8001ff4:	4c39      	ldr	r4, [pc, #228]	; (80020dc <SDR_demodAM_AGC+0x110>)
		  pk  *= Decay[AM];
 8001ff6:	4e3a      	ldr	r6, [pc, #232]	; (80020e0 <SDR_demodAM_AGC+0x114>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8001ff8:	edd0 7a01 	vldr	s15, [r0, #4]
 8001ffc:	edd0 6a00 	vldr	s13, [r0]
 8002000:	ee67 7aa7 	vmul.f32	s15, s15, s15
    audiotmp /= max(pk, AgcThreshold);  
 8002004:	ed95 6a00 	vldr	s12, [r5]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002008:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800200c:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8002010:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8002014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 800201c:	bfa8      	it	ge
 800201e:	eef1 5ae7 	vsqrtge.f32	s11, s15
	  if(pk < audiotmp)
 8002022:	edd3 7a00 	vldr	s15, [r3]
      *pOut = 0.0f;
 8002026:	bfb8      	it	lt
 8002028:	eef0 5a64 	vmovlt.f32	s11, s9
 800202c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002034:	d504      	bpl.n	8002040 <SDR_demodAM_AGC+0x74>
			pk = audiotmp;
 8002036:	eef0 7a65 	vmov.f32	s15, s11
		  hangcnt = Hcount[AM]; 
 800203a:	4672      	mov	r2, lr
			pk = audiotmp;
 800203c:	edc3 5a00 	vstr	s11, [r3]
    audiotmp /= max(pk, AgcThreshold);  
 8002040:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 8002044:	eec5 6a86 	vdiv.f32	s13, s11, s12
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002048:	eef0 5a66 	vmov.f32	s11, s13
    audiotmp /= max(pk, AgcThreshold);  
 800204c:	edc4 6a00 	vstr	s13, [r4]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002050:	eee7 5a05 	vfma.f32	s11, s14, s10
	  if(hangcnt == 0)
 8002054:	b9da      	cbnz	r2, 800208e <SDR_demodAM_AGC+0xc2>
		  pk  *= Decay[AM];
 8002056:	edd6 6a00 	vldr	s13, [r6]
	for(k=j=0; k<BSIZE*2; k+=2)
 800205a:	3008      	adds	r0, #8
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800205c:	edcd 5a00 	vstr	s11, [sp]
		  pk  *= Decay[AM];
 8002060:	ee66 6aa7 	vmul.f32	s13, s13, s15
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002064:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002068:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800206a:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 800206e:	ed9d 7a00 	vldr	s14, [sp]
		  pk  *= Decay[AM];
 8002072:	edc3 6a00 	vstr	s13, [r3]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002076:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 800207a:	d1bd      	bne.n	8001ff8 <SDR_demodAM_AGC+0x2c>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 800207c:	4919      	ldr	r1, [pc, #100]	; (80020e4 <SDR_demodAM_AGC+0x118>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	603a      	str	r2, [r7, #0]
 8002082:	ed88 7a00 	vstr	s14, [r8]
 8002086:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
}
 8002088:	b002      	add	sp, #8
 800208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800208e:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002092:	3008      	adds	r0, #8
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002094:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002098:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800209a:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 800209e:	ed9d 7a00 	vldr	s14, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80020a2:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80020a6:	d1a7      	bne.n	8001ff8 <SDR_demodAM_AGC+0x2c>
    PeakAudioValue=pk;
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <SDR_demodAM_AGC+0x118>)
	if(hangcnt > 0)  hangcnt--;
 80020aa:	2a00      	cmp	r2, #0
    PeakAudioValue=pk;
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	603a      	str	r2, [r7, #0]
 80020b0:	ed88 7a00 	vstr	s14, [r8]
 80020b4:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 80020b6:	dd01      	ble.n	80020bc <SDR_demodAM_AGC+0xf0>
 80020b8:	3a01      	subs	r2, #1
 80020ba:	603a      	str	r2, [r7, #0]
}
 80020bc:	b002      	add	sp, #8
 80020be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c2:	bf00      	nop
 80020c4:	24006084 	.word	0x24006084
 80020c8:	2400c324 	.word	0x2400c324
 80020cc:	00000000 	.word	0x00000000
 80020d0:	3f75c28f 	.word	0x3f75c28f
 80020d4:	2400c660 	.word	0x2400c660
 80020d8:	2400164c 	.word	0x2400164c
 80020dc:	24009a48 	.word	0x24009a48
 80020e0:	24001e70 	.word	0x24001e70
 80020e4:	240070a0 	.word	0x240070a0
 80020e8:	24000620 	.word	0x24000620

080020ec <SDR_demodSSB_CW_AGC>:
//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80020ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80020f0:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <SDR_demodSSB_CW_AGC+0xf0>)
 80020f2:	f241 0e04 	movw	lr, #4100	; 0x1004
 80020f6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80021f4 <SDR_demodSSB_CW_AGC+0x108>
	  if(pk < sav)
 80020fa:	4a39      	ldr	r2, [pc, #228]	; (80021e0 <SDR_demodSSB_CW_AGC+0xf4>)
 80020fc:	4486      	add	lr, r0
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80020fe:	889f      	ldrh	r7, [r3, #4]
 8002100:	885e      	ldrh	r6, [r3, #2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002102:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8002106:	1d03      	adds	r3, r0, #4
	  if(pk < sav)
 8002108:	edd2 7a00 	vldr	s15, [r2]
 800210c:	f8d8 0000 	ldr.w	r0, [r8]
 8002110:	4d34      	ldr	r5, [pc, #208]	; (80021e4 <SDR_demodSSB_CW_AGC+0xf8>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002112:	4c35      	ldr	r4, [pc, #212]	; (80021e8 <SDR_demodSSB_CW_AGC+0xfc>)
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002114:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80021f8 <SDR_demodSSB_CW_AGC+0x10c>
 8002118:	e014      	b.n	8002144 <SDR_demodSSB_CW_AGC+0x58>
      if(CurrentMode == CW) pk  *= Decay[CW];
 800211a:	f894 c000 	ldrb.w	ip, [r4]
 800211e:	f1bc 0f03 	cmp.w	ip, #3
 8002122:	d052      	beq.n	80021ca <SDR_demodSSB_CW_AGC+0xde>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002124:	f1bc 0f01 	cmp.w	ip, #1
 8002128:	ed92 7a00 	vldr	s14, [r2]
 800212c:	bf0c      	ite	eq
 800212e:	edda 7a01 	vldreq	s15, [sl, #4]
 8002132:	edda 7a02 	vldrne	s15, [sl, #8]
 8002136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213a:	edc2 7a00 	vstr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 800213e:	3308      	adds	r3, #8
 8002140:	459e      	cmp	lr, r3
 8002142:	d02d      	beq.n	80021a0 <SDR_demodSSB_CW_AGC+0xb4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002144:	ed93 7a00 	vldr	s14, [r3]
 8002148:	ed53 6a01 	vldr	s13, [r3, #-4]
 800214c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8002150:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 8002154:	eeb1 6ac7 	vsqrt.f32	s12, s14
	  if(pk < sav)
 8002158:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002160:	dd0f      	ble.n	8002182 <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002162:	f894 c000 	ldrb.w	ip, [r4]
			pk = sav;
 8002166:	ed82 6a00 	vstr	s12, [r2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800216a:	f1bc 0f03 	cmp.w	ip, #3
 800216e:	d026      	beq.n	80021be <SDR_demodSSB_CW_AGC+0xd2>
 8002170:	eef0 7a46 	vmov.f32	s15, s12
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002174:	f1bc 0f01 	cmp.w	ip, #1
 8002178:	bf0c      	ite	eq
 800217a:	4630      	moveq	r0, r6
 800217c:	4638      	movne	r0, r7
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800217e:	ed53 6a01 	vldr	s13, [r3, #-4]
 8002182:	ed95 7a00 	vldr	s14, [r5]
 8002186:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800218a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218e:	eca1 7a01 	vstmia	r1!, {s14}
	  if(hangcnt == 0)
 8002192:	2800      	cmp	r0, #0
 8002194:	d0c1      	beq.n	800211a <SDR_demodSSB_CW_AGC+0x2e>
	for(k=j=0; k<BSIZE*2; k+=2)
 8002196:	3308      	adds	r3, #8
    }  
	}
	PeakAudioValue=pk;
 8002198:	edd2 7a00 	vldr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 800219c:	459e      	cmp	lr, r3
 800219e:	d1d1      	bne.n	8002144 <SDR_demodSSB_CW_AGC+0x58>
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <SDR_demodSSB_CW_AGC+0x100>)
	if(hangcnt > 0)  hangcnt--;
 80021a2:	2800      	cmp	r0, #0
	PeakAudioValue=pk;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <SDR_demodSSB_CW_AGC+0x104>)
 80021a6:	f8c8 0000 	str.w	r0, [r8]
 80021aa:	ed82 6a00 	vstr	s12, [r2]
 80021ae:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 80021b2:	dd02      	ble.n	80021ba <SDR_demodSSB_CW_AGC+0xce>
 80021b4:	3801      	subs	r0, #1
 80021b6:	f8c8 0000 	str.w	r0, [r8]
}
 80021ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021be:	eef0 7a46 	vmov.f32	s15, s12
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80021c2:	ed53 6a01 	vldr	s13, [r3, #-4]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80021c6:	4648      	mov	r0, r9
 80021c8:	e7db      	b.n	8002182 <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) pk  *= Decay[CW];
 80021ca:	ed92 7a00 	vldr	s14, [r2]
 80021ce:	edda 7a03 	vldr	s15, [sl, #12]
 80021d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d6:	edc2 7a00 	vstr	s15, [r2]
 80021da:	e7b0      	b.n	800213e <SDR_demodSSB_CW_AGC+0x52>
 80021dc:	24006084 	.word	0x24006084
 80021e0:	2400c660 	.word	0x2400c660
 80021e4:	2400164c 	.word	0x2400164c
 80021e8:	24001e6c 	.word	0x24001e6c
 80021ec:	24000618 	.word	0x24000618
 80021f0:	240070a0 	.word	0x240070a0
 80021f4:	2400c324 	.word	0x2400c324
 80021f8:	24001e70 	.word	0x24001e70

080021fc <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 80021fc:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002200:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002204:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_ADC_ConvCpltCallback+0x34>)
 8002206:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800220a:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800220e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8002210:	4293      	cmp	r3, r2
 8002212:	d1fa      	bne.n	800220a <HAL_ADC_ConvCpltCallback+0xe>
 8002214:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002218:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 2*BSIZE);
#endif
	ADC_Stream0_Handler(1);
 800221c:	2001      	movs	r0, #1
 800221e:	f7fe ffa1 	bl	8001164 <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_ADC_ConvCpltCallback+0x38>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
}
 8002228:	bd08      	pop	{r3, pc}
 800222a:	bf00      	nop
 800222c:	24009640 	.word	0x24009640
 8002230:	e000ed00 	.word	0xe000ed00
 8002234:	2400d7ea 	.word	0x2400d7ea

08002238 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002238:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 800223c:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002240:	490a      	ldr	r1, [pc, #40]	; (800226c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002242:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8002246:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800224a:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 800224c:	4293      	cmp	r3, r2
 800224e:	d1fa      	bne.n	8002246 <HAL_ADC_ConvHalfCpltCallback+0xe>
 8002250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002254:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 2*BSIZE);
#endif
	ADC_Stream0_Handler(0);
 8002258:	2000      	movs	r0, #0
 800225a:	f7fe ff83 	bl	8001164 <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
}
 8002264:	bd08      	pop	{r3, pc}
 8002266:	bf00      	nop
 8002268:	24009240 	.word	0x24009240
 800226c:	e000ed00 	.word	0xe000ed00
 8002270:	2400d7ea 	.word	0x2400d7ea

08002274 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002274:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 8002278:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 800227a:	4c05      	ldr	r4, [pc, #20]	; (8002290 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 800227c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002280:	4804      	ldr	r0, [pc, #16]	; (8002294 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 8002282:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 8002284:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 8002288:	f004 bff0 	b.w	800726c <HAL_GPIO_WritePin>
 800228c:	24008214 	.word	0x24008214
 8002290:	24001a60 	.word	0x24001a60
 8002294:	58020400 	.word	0x58020400

08002298 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002298:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 800229c:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 800229e:	4c05      	ldr	r4, [pc, #20]	; (80022b4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 80022a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a4:	4804      	ldr	r0, [pc, #16]	; (80022b8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 80022a6:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 80022a8:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 80022ac:	f004 bfde 	b.w	800726c <HAL_GPIO_WritePin>
 80022b0:	24008214 	.word	0x24008214
 80022b4:	24001660 	.word	0x24001660
 80022b8:	58020400 	.word	0x58020400

080022bc <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
	OVFDetected = OVF_TIMEOUT;
	/* Reset register IER */
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 80022be:	2002      	movs	r0, #2
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80022c2:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80022c4:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 80022c6:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80022c8:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80022ca:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80022cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022d0:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80022d2:	6853      	ldr	r3, [r2, #4]
 80022d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022d8:	6053      	str	r3, [r2, #4]
}
 80022da:	4770      	bx	lr
 80022dc:	2400c25c 	.word	0x2400c25c
 80022e0:	2400709e 	.word	0x2400709e
 80022e4:	2400c2c0 	.word	0x2400c2c0

080022e8 <DisplayStatus>:
	static char StringAGC[8];
	static char StringStep[8];
	static char StringTxPower[8];


	switch(Fstep)
 80022e8:	4b74      	ldr	r3, [pc, #464]	; (80024bc <DisplayStatus+0x1d4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
	switch(Fstep)
 80022f4:	f000 80d8 	beq.w	80024a8 <DisplayStatus+0x1c0>
 80022f8:	d81f      	bhi.n	800233a <DisplayStatus+0x52>
 80022fa:	2b0a      	cmp	r3, #10
 80022fc:	f000 80c6 	beq.w	800248c <DisplayStatus+0x1a4>
 8002300:	2b64      	cmp	r3, #100	; 0x64
 8002302:	d110      	bne.n	8002326 <DisplayStatus+0x3e>
	{
	case 1:			strcpy(StringStep,"   1 "); break;
	case 10: 		strcpy(StringStep,"  10 "); break;
	case 100: 		strcpy(StringStep," 100 "); break;
 8002304:	4b6e      	ldr	r3, [pc, #440]	; (80024c0 <DisplayStatus+0x1d8>)
 8002306:	4a6f      	ldr	r2, [pc, #444]	; (80024c4 <DisplayStatus+0x1dc>)
 8002308:	e893 0003 	ldmia.w	r3, {r0, r1}
 800230c:	6010      	str	r0, [r2, #0]
 800230e:	8091      	strh	r1, [r2, #4]
	case 9000: 		strcpy(StringStep,"   9K"); break;
	case 10000:		strcpy(StringStep,"  10K"); break;
	case 100000: 	strcpy(StringStep," 100K"); break;
	}

	switch(CurrentMode)
 8002310:	4b6d      	ldr	r3, [pc, #436]	; (80024c8 <DisplayStatus+0x1e0>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b03      	cmp	r3, #3
 8002316:	f200 80ce 	bhi.w	80024b6 <DisplayStatus+0x1ce>
 800231a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800231e:	00ab      	.short	0x00ab
 8002320:	008500a7 	.word	0x008500a7
 8002324:	0029      	.short	0x0029
	switch(Fstep)
 8002326:	2b01      	cmp	r3, #1
 8002328:	f040 80aa 	bne.w	8002480 <DisplayStatus+0x198>
	case 1:			strcpy(StringStep,"   1 "); break;
 800232c:	4b67      	ldr	r3, [pc, #412]	; (80024cc <DisplayStatus+0x1e4>)
 800232e:	4a65      	ldr	r2, [pc, #404]	; (80024c4 <DisplayStatus+0x1dc>)
 8002330:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002334:	6010      	str	r0, [r2, #0]
 8002336:	8091      	strh	r1, [r2, #4]
 8002338:	e7ea      	b.n	8002310 <DisplayStatus+0x28>
	switch(Fstep)
 800233a:	f242 7210 	movw	r2, #10000	; 0x2710
 800233e:	4293      	cmp	r3, r2
 8002340:	f000 80ab 	beq.w	800249a <DisplayStatus+0x1b2>
 8002344:	4a62      	ldr	r2, [pc, #392]	; (80024d0 <DisplayStatus+0x1e8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d106      	bne.n	8002358 <DisplayStatus+0x70>
	case 100000: 	strcpy(StringStep," 100K"); break;
 800234a:	4b62      	ldr	r3, [pc, #392]	; (80024d4 <DisplayStatus+0x1ec>)
 800234c:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <DisplayStatus+0x1dc>)
 800234e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002352:	6010      	str	r0, [r2, #0]
 8002354:	8091      	strh	r1, [r2, #4]
 8002356:	e7db      	b.n	8002310 <DisplayStatus+0x28>
	switch(Fstep)
 8002358:	f242 3228 	movw	r2, #9000	; 0x2328
 800235c:	4293      	cmp	r3, r2
 800235e:	f040 808f 	bne.w	8002480 <DisplayStatus+0x198>
	case 9000: 		strcpy(StringStep,"   9K"); break;
 8002362:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <DisplayStatus+0x1f0>)
 8002364:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <DisplayStatus+0x1dc>)
 8002366:	e893 0003 	ldmia.w	r3, {r0, r1}
 800236a:	6010      	str	r0, [r2, #0]
 800236c:	8091      	strh	r1, [r2, #4]
 800236e:	e7cf      	b.n	8002310 <DisplayStatus+0x28>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 8002370:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <DisplayStatus+0x1f4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4e5a      	ldr	r6, [pc, #360]	; (80024e0 <DisplayStatus+0x1f8>)
 8002376:	0c19      	lsrs	r1, r3, #16
 8002378:	8033      	strh	r3, [r6, #0]
 800237a:	70b1      	strb	r1, [r6, #2]
	}
	switch (CurrentAGC)
 800237c:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <DisplayStatus+0x1fc>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d058      	beq.n	8002436 <DisplayStatus+0x14e>
 8002384:	2b01      	cmp	r3, #1
 8002386:	d179      	bne.n	800247c <DisplayStatus+0x194>
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
 8002388:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <DisplayStatus+0x200>)
 800238a:	4d58      	ldr	r5, [pc, #352]	; (80024ec <DisplayStatus+0x204>)
 800238c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002390:	6028      	str	r0, [r5, #0]
 8002392:	7129      	strb	r1, [r5, #4]
	}
	switch (CurrentBW)
 8002394:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <DisplayStatus+0x208>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d056      	beq.n	800244a <DisplayStatus+0x162>
 800239c:	2b01      	cmp	r3, #1
 800239e:	d16b      	bne.n	8002478 <DisplayStatus+0x190>
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
 80023a0:	4b54      	ldr	r3, [pc, #336]	; (80024f4 <DisplayStatus+0x20c>)
 80023a2:	4c55      	ldr	r4, [pc, #340]	; (80024f8 <DisplayStatus+0x210>)
 80023a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023a8:	6020      	str	r0, [r4, #0]
 80023aa:	7121      	strb	r1, [r4, #4]
	}
	switch (TxPowerOut)
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <DisplayStatus+0x214>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b4:	d056      	beq.n	8002464 <DisplayStatus+0x17c>
 80023b6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80023ba:	428b      	cmp	r3, r1
 80023bc:	d062      	beq.n	8002484 <DisplayStatus+0x19c>
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c2:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <DisplayStatus+0x218>)
		{
		case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 80023c4:	bf04      	itt	eq
 80023c6:	494f      	ldreq	r1, [pc, #316]	; (8002504 <DisplayStatus+0x21c>)
 80023c8:	6019      	streq	r1, [r3, #0]
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
		}
	sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, volume);
 80023ca:	9306      	str	r3, [sp, #24]
 80023cc:	4b4e      	ldr	r3, [pc, #312]	; (8002508 <DisplayStatus+0x220>)
 80023ce:	9503      	str	r5, [sp, #12]
 80023d0:	9402      	str	r4, [sp, #8]
 80023d2:	ed93 7a00 	vldr	s14, [r3]
 80023d6:	4b4d      	ldr	r3, [pc, #308]	; (800250c <DisplayStatus+0x224>)
 80023d8:	9601      	str	r6, [sp, #4]
 80023da:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	484b      	ldr	r0, [pc, #300]	; (8002510 <DisplayStatus+0x228>)
 80023e2:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8002514 <DisplayStatus+0x22c>
 80023e6:	6804      	ldr	r4, [r0, #0]
 80023e8:	9304      	str	r3, [sp, #16]
 80023ea:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <DisplayStatus+0x230>)
 80023ec:	9200      	str	r2, [sp, #0]
 80023ee:	9405      	str	r4, [sp, #20]
 80023f0:	494a      	ldr	r1, [pc, #296]	; (800251c <DisplayStatus+0x234>)
 80023f2:	484b      	ldr	r0, [pc, #300]	; (8002520 <DisplayStatus+0x238>)
 80023f4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002400:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002404:	ec53 2b17 	vmov	r2, r3, d7
 8002408:	f00c fdd0 	bl	800efac <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 800240c:	4844      	ldr	r0, [pc, #272]	; (8002520 <DisplayStatus+0x238>)
 800240e:	f7fd ff67 	bl	80002e0 <strlen>
 8002412:	4601      	mov	r1, r0
 8002414:	4842      	ldr	r0, [pc, #264]	; (8002520 <DisplayStatus+0x238>)
 8002416:	b289      	uxth	r1, r1
 8002418:	f00a fd9e 	bl	800cf58 <CDC_Transmit_FS>
	HAL_Delay(1);
 800241c:	2001      	movs	r0, #1
	PrintUI(UartTXString);
}
 800241e:	b00a      	add	sp, #40	; 0x28
 8002420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8002424:	f001 bf98 	b.w	8004358 <HAL_Delay>
	case USB: strcpy(StringMode,"USB"); break;
 8002428:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <DisplayStatus+0x23c>)
 800242a:	4e2d      	ldr	r6, [pc, #180]	; (80024e0 <DisplayStatus+0x1f8>)
 800242c:	6033      	str	r3, [r6, #0]
	switch (CurrentAGC)
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <DisplayStatus+0x1fc>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1a6      	bne.n	8002384 <DisplayStatus+0x9c>
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002436:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <DisplayStatus+0x240>)
 8002438:	4d2c      	ldr	r5, [pc, #176]	; (80024ec <DisplayStatus+0x204>)
 800243a:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 800243e:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <DisplayStatus+0x208>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002440:	6028      	str	r0, [r5, #0]
	switch (CurrentBW)
 8002442:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002444:	7129      	strb	r1, [r5, #4]
	switch (CurrentBW)
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1a8      	bne.n	800239c <DisplayStatus+0xb4>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <DisplayStatus+0x244>)
 800244c:	4c2a      	ldr	r4, [pc, #168]	; (80024f8 <DisplayStatus+0x210>)
 800244e:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (TxPowerOut)
 8002452:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <DisplayStatus+0x214>)
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8002454:	80a1      	strh	r1, [r4, #4]
 8002456:	0c09      	lsrs	r1, r1, #16
	switch (TxPowerOut)
 8002458:	681b      	ldr	r3, [r3, #0]
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800245a:	6020      	str	r0, [r4, #0]
	switch (TxPowerOut)
 800245c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8002460:	71a1      	strb	r1, [r4, #6]
	switch (TxPowerOut)
 8002462:	d1a8      	bne.n	80023b6 <DisplayStatus+0xce>
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 8002464:	4b26      	ldr	r3, [pc, #152]	; (8002500 <DisplayStatus+0x218>)
 8002466:	4932      	ldr	r1, [pc, #200]	; (8002530 <DisplayStatus+0x248>)
 8002468:	6019      	str	r1, [r3, #0]
 800246a:	e7ae      	b.n	80023ca <DisplayStatus+0xe2>
	case LSB: strcpy(StringMode,"LSB"); break;
 800246c:	4e1c      	ldr	r6, [pc, #112]	; (80024e0 <DisplayStatus+0x1f8>)
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <DisplayStatus+0x24c>)
 8002470:	6033      	str	r3, [r6, #0]
 8002472:	e783      	b.n	800237c <DisplayStatus+0x94>
	case AM: strcpy(StringMode,"AM"); break;
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <DisplayStatus+0x250>)
 8002476:	e77c      	b.n	8002372 <DisplayStatus+0x8a>
 8002478:	4c1f      	ldr	r4, [pc, #124]	; (80024f8 <DisplayStatus+0x210>)
 800247a:	e797      	b.n	80023ac <DisplayStatus+0xc4>
 800247c:	4d1b      	ldr	r5, [pc, #108]	; (80024ec <DisplayStatus+0x204>)
 800247e:	e789      	b.n	8002394 <DisplayStatus+0xac>
 8002480:	4a10      	ldr	r2, [pc, #64]	; (80024c4 <DisplayStatus+0x1dc>)
 8002482:	e745      	b.n	8002310 <DisplayStatus+0x28>
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <DisplayStatus+0x218>)
 8002486:	492d      	ldr	r1, [pc, #180]	; (800253c <DisplayStatus+0x254>)
 8002488:	6019      	str	r1, [r3, #0]
 800248a:	e79e      	b.n	80023ca <DisplayStatus+0xe2>
	case 10: 		strcpy(StringStep,"  10 "); break;
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <DisplayStatus+0x258>)
 800248e:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <DisplayStatus+0x1dc>)
 8002490:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002494:	6010      	str	r0, [r2, #0]
 8002496:	8091      	strh	r1, [r2, #4]
 8002498:	e73a      	b.n	8002310 <DisplayStatus+0x28>
	case 10000:		strcpy(StringStep,"  10K"); break;
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <DisplayStatus+0x25c>)
 800249c:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <DisplayStatus+0x1dc>)
 800249e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024a2:	6010      	str	r0, [r2, #0]
 80024a4:	8091      	strh	r1, [r2, #4]
 80024a6:	e733      	b.n	8002310 <DisplayStatus+0x28>
	case 1000: 		strcpy(StringStep,"   1K"); break;
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <DisplayStatus+0x260>)
 80024aa:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <DisplayStatus+0x1dc>)
 80024ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024b0:	6010      	str	r0, [r2, #0]
 80024b2:	8091      	strh	r1, [r2, #4]
 80024b4:	e72c      	b.n	8002310 <DisplayStatus+0x28>
 80024b6:	4e0a      	ldr	r6, [pc, #40]	; (80024e0 <DisplayStatus+0x1f8>)
 80024b8:	e760      	b.n	800237c <DisplayStatus+0x94>
 80024ba:	bf00      	nop
 80024bc:	2400607c 	.word	0x2400607c
 80024c0:	080186a0 	.word	0x080186a0
 80024c4:	240070e0 	.word	0x240070e0
 80024c8:	24001e6c 	.word	0x24001e6c
 80024cc:	08018690 	.word	0x08018690
 80024d0:	000186a0 	.word	0x000186a0
 80024d4:	080186c0 	.word	0x080186c0
 80024d8:	080186b0 	.word	0x080186b0
 80024dc:	080186cc 	.word	0x080186cc
 80024e0:	240070d8 	.word	0x240070d8
 80024e4:	24001e6a 	.word	0x24001e6a
 80024e8:	080186d8 	.word	0x080186d8
 80024ec:	240070d0 	.word	0x240070d0
 80024f0:	24001e6b 	.word	0x24001e6b
 80024f4:	080186e8 	.word	0x080186e8
 80024f8:	240070f0 	.word	0x240070f0
 80024fc:	24007108 	.word	0x24007108
 8002500:	240070e8 	.word	0x240070e8
 8002504:	00776f4c 	.word	0x00776f4c
 8002508:	2400d7ec 	.word	0x2400d7ec
 800250c:	240070fc 	.word	0x240070fc
 8002510:	2400c62c 	.word	0x2400c62c
 8002514:	3a83126f 	.word	0x3a83126f
 8002518:	24007090 	.word	0x24007090
 800251c:	080186f0 	.word	0x080186f0
 8002520:	24007214 	.word	0x24007214
 8002524:	00425355 	.word	0x00425355
 8002528:	080186d0 	.word	0x080186d0
 800252c:	080186e0 	.word	0x080186e0
 8002530:	0064694d 	.word	0x0064694d
 8002534:	0042534c 	.word	0x0042534c
 8002538:	080186c8 	.word	0x080186c8
 800253c:	0078614d 	.word	0x0078614d
 8002540:	08018698 	.word	0x08018698
 8002544:	080186b8 	.word	0x080186b8
 8002548:	080186a8 	.word	0x080186a8

0800254c <SetFracPLL>:
}

void SetFracPLL(uint32_t Coeff)
{

	__HAL_RCC_PLL2FRACN_DISABLE();
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <SetFracPLL+0xac>)
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to issue the value several times
 800254e:	4a2b      	ldr	r2, [pc, #172]	; (80025fc <SetFracPLL+0xb0>)
	__HAL_RCC_PLL2FRACN_DISABLE();
 8002550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002552:	f021 0110 	bic.w	r1, r1, #16
 8002556:	62d9      	str	r1, [r3, #44]	; 0x2c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to issue the value several times
 8002558:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800255a:	4011      	ands	r1, r2
 800255c:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 8002560:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 8002562:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002564:	4011      	ands	r1, r2
 8002566:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 800256a:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 800256c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800256e:	4011      	ands	r1, r2
 8002570:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 8002574:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 8002576:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002578:	4011      	ands	r1, r2
 800257a:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 800257e:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 8002580:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002582:	4011      	ands	r1, r2
 8002584:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 8002588:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 800258a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800258c:	4011      	ands	r1, r2
 800258e:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 8002592:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 8002594:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002596:	4011      	ands	r1, r2
 8002598:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 800259c:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 800259e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025a0:	4011      	ands	r1, r2
 80025a2:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 80025a6:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 80025a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025aa:	4011      	ands	r1, r2
 80025ac:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 80025b0:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 80025b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025b4:	4011      	ands	r1, r2
 80025b6:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 80025ba:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 80025bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025be:	4011      	ands	r1, r2
 80025c0:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 80025c4:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 80025c6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025c8:	4011      	ands	r1, r2
 80025ca:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 80025ce:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 80025d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025d2:	4011      	ands	r1, r2
 80025d4:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 80025d8:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 80025da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025dc:	4011      	ands	r1, r2
 80025de:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 80025e2:	63d9      	str	r1, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time
 80025e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025e6:	400a      	ands	r2, r1
 80025e8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80025ec:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 80025ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f0:	f042 0210 	orr.w	r2, r2, #16
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80025f6:	4770      	bx	lr
 80025f8:	58024400 	.word	0x58024400
 80025fc:	ffff0007 	.word	0xffff0007

08002600 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8002600:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <SetTXPLL+0xf0>)
 8002602:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	MinDiff = 999999999;
 8002606:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80026f4 <SetTXPLL+0xf4>
				OutF = XTalFreq * n / m / p / od;
 800260a:	edd3 4a00 	vldr	s9, [r3]
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 800260e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80026f8 <SetTXPLL+0xf8>
 8002612:	eddf 3a3a 	vldr	s7, [pc, #232]	; 80026fc <SetTXPLL+0xfc>
{
 8002616:	b530      	push	{r4, r5, lr}
	for (m = 2; m <= 25; m++) //was 64
 8002618:	f04f 0e02 	mov.w	lr, #2
		for (n = 2; n <= 512; n++) //was 1
 800261c:	f240 2401 	movw	r4, #513	; 0x201
				OutF = XTalFreq * n / m / p / od;
 8002620:	ee07 ea90 	vmov	s15, lr
		for (n = 2; n <= 512; n++) //was 1
 8002624:	2202      	movs	r2, #2
				OutF = XTalFreq * n / m / p / od;
 8002626:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800262a:	ee83 4a25 	vdiv.f32	s8, s6, s11
 800262e:	e002      	b.n	8002636 <SetTXPLL+0x36>
		for (n = 2; n <= 512; n++) //was 1
 8002630:	3201      	adds	r2, #1
 8002632:	42a2      	cmp	r2, r4
 8002634:	d037      	beq.n	80026a6 <SetTXPLL+0xa6>
				OutF = XTalFreq * n / m / p / od;
 8002636:	ee07 2a90 	vmov	s15, r2
 800263a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800263e:	ee26 6a24 	vmul.f32	s12, s12, s9
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8002642:	ee66 7a04 	vmul.f32	s15, s12, s8
 8002646:	eef4 7a45 	vcmp.f32	s15, s10
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	ddef      	ble.n	8002630 <SetTXPLL+0x30>
 8002650:	eef4 7ae3 	vcmpe.f32	s15, s7
 8002654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002658:	d5ea      	bpl.n	8002630 <SetTXPLL+0x30>
			for (p = 2; p <= 128; p+=2)
 800265a:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002664:	ee27 7a25 	vmul.f32	s14, s14, s11
 8002668:	eec6 7a07 	vdiv.f32	s15, s12, s14
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 800266c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002674:	ee17 5a90 	vmov	r5, s15
 8002678:	2d00      	cmp	r5, #0
 800267a:	bfb8      	it	lt
 800267c:	426d      	neglt	r5, r5
 800267e:	ee07 5a90 	vmov	s15, r5
 8002682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002686:	eef4 7ae6 	vcmpe.f32	s15, s13
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	d504      	bpl.n	800269a <SetTXPLL+0x9a>
 8002690:	eef0 6a67 	vmov.f32	s13, s15
 8002694:	4619      	mov	r1, r3
 8002696:	4610      	mov	r0, r2
 8002698:	46f4      	mov	ip, lr
			for (p = 2; p <= 128; p+=2)
 800269a:	3302      	adds	r3, #2
 800269c:	2b82      	cmp	r3, #130	; 0x82
 800269e:	d1dd      	bne.n	800265c <SetTXPLL+0x5c>
		for (n = 2; n <= 512; n++) //was 1
 80026a0:	3201      	adds	r2, #1
 80026a2:	42a2      	cmp	r2, r4
 80026a4:	d1c7      	bne.n	8002636 <SetTXPLL+0x36>
	for (m = 2; m <= 25; m++) //was 64
 80026a6:	f10e 0e01 	add.w	lr, lr, #1
 80026aa:	f1be 0f1a 	cmp.w	lr, #26
 80026ae:	d1b7      	bne.n	8002620 <SetTXPLL+0x20>
					fod = od;
				}
			}
		}
	}
	TXFreqError = MinDiff;
 80026b0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	__HAL_RCC_PLL2_DISABLE();
 80026b4:	4c12      	ldr	r4, [pc, #72]	; (8002700 <SetTXPLL+0x100>)
	TXFreqError = MinDiff;
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <SetTXPLL+0x104>)
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80026b8:	1e42      	subs	r2, r0, #1
	TXFreqError = MinDiff;
 80026ba:	edc3 6a00 	vstr	s13, [r3]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80026be:	1e4b      	subs	r3, r1, #1
	__HAL_RCC_PLL2_DISABLE();
 80026c0:	6821      	ldr	r1, [r4, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80026c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c6:	025b      	lsls	r3, r3, #9
	__HAL_RCC_PLL2_DISABLE();
 80026c8:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80026cc:	b29b      	uxth	r3, r3
	__HAL_RCC_PLL2_DISABLE();
 80026ce:	6021      	str	r1, [r4, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80026d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 80026e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80026e2:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ea:	6023      	str	r3, [r4, #0]
#endif

}
 80026ec:	bd30      	pop	{r4, r5, pc}
 80026ee:	bf00      	nop
 80026f0:	24009218 	.word	0x24009218
 80026f4:	4e6e6b28 	.word	0x4e6e6b28
 80026f8:	4d0f0d18 	.word	0x4d0f0d18
 80026fc:	4e64e1c0 	.word	0x4e64e1c0
 8002700:	58024400 	.word	0x58024400
 8002704:	240070fc 	.word	0x240070fc

08002708 <UserInput>:
	if (USBRXLength)
 8002708:	4b7d      	ldr	r3, [pc, #500]	; (8002900 <UserInput+0x1f8>)
 800270a:	681a      	ldr	r2, [r3, #0]
{
 800270c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002710:	ed2d 8b06 	vpush	{d8-d10}
 8002714:	b08b      	sub	sp, #44	; 0x2c
	if (USBRXLength)
 8002716:	2a00      	cmp	r2, #0
 8002718:	f000 80e5 	beq.w	80028e6 <UserInput+0x1de>
		result = HAL_OK;
 800271c:	2200      	movs	r2, #0
 800271e:	f88d 200f 	strb.w	r2, [sp, #15]
		USBRXLength = 0;
 8002722:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 8002724:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002728:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800272c:	2b00      	cmp	r3, #0
 800272e:	d162      	bne.n	80027f6 <UserInput+0xee>
		switch (UartRXString[0])
 8002730:	4b74      	ldr	r3, [pc, #464]	; (8002904 <UserInput+0x1fc>)
		UartRXDataReady = RESET;
 8002732:	4975      	ldr	r1, [pc, #468]	; (8002908 <UserInput+0x200>)
		switch (UartRXString[0])
 8002734:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 8002736:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 8002738:	3b2b      	subs	r3, #43	; 0x2b
 800273a:	2b4c      	cmp	r3, #76	; 0x4c
 800273c:	d859      	bhi.n	80027f2 <UserInput+0xea>
 800273e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002742:	01c3      	.short	0x01c3
 8002744:	01e10058 	.word	0x01e10058
 8002748:	00580058 	.word	0x00580058
 800274c:	01dd0058 	.word	0x01dd0058
 8002750:	01d501d9 	.word	0x01d501d9
 8002754:	02100214 	.word	0x02100214
 8002758:	0208020c 	.word	0x0208020c
 800275c:	02000204 	.word	0x02000204
 8002760:	00580058 	.word	0x00580058
 8002764:	00580058 	.word	0x00580058
 8002768:	00580058 	.word	0x00580058
 800276c:	00580058 	.word	0x00580058
 8002770:	00580058 	.word	0x00580058
 8002774:	00580058 	.word	0x00580058
 8002778:	00580058 	.word	0x00580058
 800277c:	00580058 	.word	0x00580058
 8002780:	01f601fb 	.word	0x01f601fb
 8002784:	00580318 	.word	0x00580318
 8002788:	00580058 	.word	0x00580058
 800278c:	00580058 	.word	0x00580058
 8002790:	00580058 	.word	0x00580058
 8002794:	00580058 	.word	0x00580058
 8002798:	03120058 	.word	0x03120058
 800279c:	00580058 	.word	0x00580058
 80027a0:	00580058 	.word	0x00580058
 80027a4:	00580058 	.word	0x00580058
 80027a8:	00580058 	.word	0x00580058
 80027ac:	030e0058 	.word	0x030e0058
 80027b0:	03210305 	.word	0x03210305
 80027b4:	00580058 	.word	0x00580058
 80027b8:	02fc031d 	.word	0x02fc031d
 80027bc:	0058004d 	.word	0x0058004d
 80027c0:	00580058 	.word	0x00580058
 80027c4:	00580283 	.word	0x00580283
 80027c8:	0058027f 	.word	0x0058027f
 80027cc:	00580058 	.word	0x00580058
 80027d0:	027b02bb 	.word	0x027b02bb
 80027d4:	02200224 	.word	0x02200224
 80027d8:	0218021c 	.word	0x0218021c
			keyer_speed += 1;
 80027dc:	4b4b      	ldr	r3, [pc, #300]	; (800290c <UserInput+0x204>)
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 80027e2:	2832      	cmp	r0, #50	; 0x32
 80027e4:	f340 82d2 	ble.w	8002d8c <UserInput+0x684>
				keyer_speed = 50;
 80027e8:	2232      	movs	r2, #50	; 0x32
 80027ea:	4610      	mov	r0, r2
 80027ec:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 80027ee:	f7fd ff51 	bl	8000694 <loadWPM>
		DisplayStatus();
 80027f2:	f7ff fd79 	bl	80022e8 <DisplayStatus>
	EncVal = TIM4->CNT;
 80027f6:	4b46      	ldr	r3, [pc, #280]	; (8002910 <UserInput+0x208>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80027f8:	4c46      	ldr	r4, [pc, #280]	; (8002914 <UserInput+0x20c>)
	EncVal = TIM4->CNT;
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80027fc:	8821      	ldrh	r1, [r4, #0]
	EncVal = TIM4->CNT;
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4d45      	ldr	r5, [pc, #276]	; (8002918 <UserInput+0x210>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002802:	1a5a      	subs	r2, r3, r1
	EncVal = TIM4->CNT;
 8002804:	802b      	strh	r3, [r5, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002806:	b216      	sxth	r6, r2
 8002808:	b290      	uxth	r0, r2
	if (DiffEncVal < 0)
 800280a:	2e00      	cmp	r6, #0
 800280c:	f2c0 8153 	blt.w	8002ab6 <UserInput+0x3ae>
	if (DiffEncVal > 0)
 8002810:	d005      	beq.n	800281e <UserInput+0x116>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8002812:	f7fe fb09 	bl	8000e28 <FminusClicked>
		DisplayStatus();
 8002816:	f7ff fd67 	bl	80022e8 <DisplayStatus>
		LastEncVal = EncVal;
 800281a:	882b      	ldrh	r3, [r5, #0]
 800281c:	8023      	strh	r3, [r4, #0]
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800281e:	4b3f      	ldr	r3, [pc, #252]	; (800291c <UserInput+0x214>)
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002820:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8002934 <UserInput+0x22c>
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002824:	ed93 7a00 	vldr	s14, [r3]
 8002828:	ed9f 0b31 	vldr	d0, [pc, #196]	; 80028f0 <UserInput+0x1e8>
 800282c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002830:	ee27 0b00 	vmul.f64	d0, d7, d0
 8002834:	f00f f89c 	bl	8011970 <log10>
 8002838:	4b39      	ldr	r3, [pc, #228]	; (8002920 <UserInput+0x218>)
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 800283a:	493a      	ldr	r1, [pc, #232]	; (8002924 <UserInput+0x21c>)
 800283c:	4648      	mov	r0, r9
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800283e:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
 8002842:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80028f8 <UserInput+0x1f0>
 8002846:	eea0 7b06 	vfma.f64	d7, d0, d6
 800284a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800284e:	ed83 7a00 	vstr	s14, [r3]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002852:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002856:	ec53 2b17 	vmov	r2, r3, d7
 800285a:	f00c fba7 	bl	800efac <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 800285e:	4648      	mov	r0, r9
 8002860:	f7fd fd3e 	bl	80002e0 <strlen>
 8002864:	4601      	mov	r1, r0
 8002866:	4648      	mov	r0, r9
 8002868:	b289      	uxth	r1, r1
 800286a:	f00a fb75 	bl	800cf58 <CDC_Transmit_FS>
	HAL_Delay(1);
 800286e:	2001      	movs	r0, #1
 8002870:	f001 fd72 	bl	8004358 <HAL_Delay>
	if (ShowWF) {
 8002874:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <UserInput+0x220>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d163      	bne.n	8002944 <UserInput+0x23c>
	if (OVFDetected)
 800287c:	4a2b      	ldr	r2, [pc, #172]	; (800292c <UserInput+0x224>)
 800287e:	8813      	ldrh	r3, [r2, #0]
 8002880:	b343      	cbz	r3, 80028d4 <UserInput+0x1cc>
		OVFDetected--;
 8002882:	3b01      	subs	r3, #1
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002884:	492a      	ldr	r1, [pc, #168]	; (8002930 <UserInput+0x228>)
 8002886:	4c2b      	ldr	r4, [pc, #172]	; (8002934 <UserInput+0x22c>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002888:	2580      	movs	r5, #128	; 0x80
		OVFDetected--;
 800288a:	b29b      	uxth	r3, r3
 800288c:	8013      	strh	r3, [r2, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 800288e:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <UserInput+0x230>)
 8002890:	6816      	ldr	r6, [r2, #0]
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002892:	c907      	ldmia	r1, {r0, r1, r2}
 8002894:	c403      	stmia	r4!, {r0, r1}
 8002896:	f824 2b02 	strh.w	r2, [r4], #2
 800289a:	0c12      	lsrs	r2, r2, #16
 800289c:	7022      	strb	r2, [r4, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 800289e:	4a27      	ldr	r2, [pc, #156]	; (800293c <UserInput+0x234>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 80028a0:	6035      	str	r5, [r6, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	6015      	str	r5, [r2, #0]
		if (!OVFDetected)
 80028a6:	b92b      	cbnz	r3, 80028b4 <UserInput+0x1ac>
			__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 80028a8:	6873      	ldr	r3, [r6, #4]
 80028aa:	432b      	orrs	r3, r5
 80028ac:	6073      	str	r3, [r6, #4]
			__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 80028ae:	6853      	ldr	r3, [r2, #4]
 80028b0:	432b      	orrs	r3, r5
 80028b2:	6053      	str	r3, [r2, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 80028b4:	481f      	ldr	r0, [pc, #124]	; (8002934 <UserInput+0x22c>)
 80028b6:	f7fd fd13 	bl	80002e0 <strlen>
 80028ba:	4601      	mov	r1, r0
 80028bc:	481d      	ldr	r0, [pc, #116]	; (8002934 <UserInput+0x22c>)
 80028be:	b289      	uxth	r1, r1
 80028c0:	f00a fb4a 	bl	800cf58 <CDC_Transmit_FS>
	HAL_Delay(1);
 80028c4:	2001      	movs	r0, #1
 80028c6:	f001 fd47 	bl	8004358 <HAL_Delay>
}
 80028ca:	b00b      	add	sp, #44	; 0x2c
 80028cc:	ecbd 8b06 	vpop	{d8-d10}
 80028d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sprintf((char*)UartTXString, "\e[4;1H   \r");
 80028d4:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <UserInput+0x238>)
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <UserInput+0x22c>)
 80028d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028da:	0c14      	lsrs	r4, r2, #16
 80028dc:	c303      	stmia	r3!, {r0, r1}
 80028de:	f823 2b02 	strh.w	r2, [r3], #2
 80028e2:	701c      	strb	r4, [r3, #0]
 80028e4:	e7e6      	b.n	80028b4 <UserInput+0x1ac>
		result = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f88d 300f 	strb.w	r3, [sp, #15]
 80028ec:	e71a      	b.n	8002724 <UserInput+0x1c>
 80028ee:	bf00      	nop
 80028f0:	00000000 	.word	0x00000000
 80028f4:	409f4000 	.word	0x409f4000
 80028f8:	9916f6a6 	.word	0x9916f6a6
 80028fc:	400a93fc 	.word	0x400a93fc
 8002900:	2400710c 	.word	0x2400710c
 8002904:	24007114 	.word	0x24007114
 8002908:	24007112 	.word	0x24007112
 800290c:	2400c62c 	.word	0x2400c62c
 8002910:	40000800 	.word	0x40000800
 8002914:	24007096 	.word	0x24007096
 8002918:	24001e80 	.word	0x24001e80
 800291c:	240070a0 	.word	0x240070a0
 8002920:	240070a8 	.word	0x240070a8
 8002924:	0801874c 	.word	0x0801874c
 8002928:	240070cc 	.word	0x240070cc
 800292c:	2400709e 	.word	0x2400709e
 8002930:	08018784 	.word	0x08018784
 8002934:	24007214 	.word	0x24007214
 8002938:	2400c25c 	.word	0x2400c25c
 800293c:	2400c2c0 	.word	0x2400c2c0
 8002940:	08018790 	.word	0x08018790
		sprintf((char*)UartTXString, "\e[11;1H");
 8002944:	4bca      	ldr	r3, [pc, #808]	; (8002c70 <UserInput+0x568>)
 8002946:	ad04      	add	r5, sp, #16
 8002948:	4cca      	ldr	r4, [pc, #808]	; (8002c74 <UserInput+0x56c>)
 800294a:	ed9f aacb 	vldr	s20, [pc, #812]	; 8002c78 <UserInput+0x570>
 800294e:	f5a4 6780 	sub.w	r7, r4, #1024	; 0x400
 8002952:	f8df 8360 	ldr.w	r8, [pc, #864]	; 8002cb4 <UserInput+0x5ac>
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002956:	ed9f 9bbe 	vldr	d9, [pc, #760]	; 8002c50 <UserInput+0x548>
 800295a:	ed9f 8bbf 	vldr	d8, [pc, #764]	; 8002c58 <UserInput+0x550>
		sprintf((char*)UartTXString, "\e[11;1H");
 800295e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002962:	e889 0003 	stmia.w	r9, {r0, r1}
				if (StrongestSignal < WFBuffer[i + j])
 8002966:	edd4 4a01 	vldr	s9, [r4, #4]
 800296a:	ed94 5a02 	vldr	s10, [r4, #8]
 800296e:	edd4 5a04 	vldr	s11, [r4, #16]
 8002972:	ed94 6a05 	vldr	s12, [r4, #20]
 8002976:	edd4 6a06 	vldr	s13, [r4, #24]
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 800297a:	ed94 7a07 	vldr	s14, [r4, #28]
 800297e:	edd4 7a00 	vldr	s15, [r4]
 8002982:	ed94 0a03 	vldr	s0, [r4, #12]
 8002986:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 800298a:	fec7 7a8a 	vmaxnm.f32	s15, s15, s20
 800298e:	fec7 7a85 	vmaxnm.f32	s15, s15, s10
 8002992:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
 8002996:	fe80 0a25 	vmaxnm.f32	s0, s0, s11
 800299a:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
 800299e:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
 80029a2:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 80029a6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80029aa:	ee30 0b09 	vadd.f64	d0, d0, d9
 80029ae:	f00e fddf 	bl	8011570 <log>
 80029b2:	ee20 0b08 	vmul.f64	d0, d0, d8
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 80029b6:	49b1      	ldr	r1, [pc, #708]	; (8002c7c <UserInput+0x574>)
 80029b8:	4628      	mov	r0, r5
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 80029ba:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 80029be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 80029c2:	fe80 0a67 	vminnm.f32	s0, s0, s15
 80029c6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80029ca:	edcd 7a01 	vstr	s15, [sp, #4]
 80029ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 80029d2:	f818 2003 	ldrb.w	r2, [r8, r3]
 80029d6:	f00c fae9 	bl	800efac <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 80029da:	4629      	mov	r1, r5
 80029dc:	48a8      	ldr	r0, [pc, #672]	; (8002c80 <UserInput+0x578>)
 80029de:	f00c fb0e 	bl	800effe <strcat>
		for (i = 256; i >= 0; i -= 8)
 80029e2:	42a7      	cmp	r7, r4
 80029e4:	f1a4 0420 	sub.w	r4, r4, #32
 80029e8:	d1bd      	bne.n	8002966 <UserInput+0x25e>
			BigBucketValue = 100 * log(StrongestSignal + 1);
 80029ea:	ed9f 8b9d 	vldr	d8, [pc, #628]	; 8002c60 <UserInput+0x558>
 80029ee:	4ca5      	ldr	r4, [pc, #660]	; (8002c84 <UserInput+0x57c>)
 80029f0:	f507 673e 	add.w	r7, r7, #3040	; 0xbe0
 80029f4:	ed9f 9aa0 	vldr	s18, [pc, #640]	; 8002c78 <UserInput+0x570>
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 80029f8:	4ea0      	ldr	r6, [pc, #640]	; (8002c7c <UserInput+0x574>)
			BigBucketValue = 100 * log(StrongestSignal + 1);
 80029fa:	4623      	mov	r3, r4
 80029fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a00:	ed94 4a07 	vldr	s8, [r4, #28]
 8002a04:	3c20      	subs	r4, #32
 8002a06:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8002a0a:	ed94 5a0b 	vldr	s10, [r4, #44]	; 0x2c
 8002a0e:	edd4 5a0a 	vldr	s11, [r4, #40]	; 0x28
 8002a12:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8002a16:	edd3 6a00 	vldr	s13, [r3]
 8002a1a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8002a1e:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8002a22:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8002a26:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
				if (StrongestSignal < WFBuffer[i - j])
 8002a2a:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 8002a2e:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
 8002a32:	fe80 0a05 	vmaxnm.f32	s0, s0, s10
 8002a36:	fe80 0a25 	vmaxnm.f32	s0, s0, s11
 8002a3a:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002a3e:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
 8002a42:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002a46:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002a4a:	f00e fd91 	bl	8011570 <log>
 8002a4e:	ee20 0b08 	vmul.f64	d0, d0, d8
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002a52:	4631      	mov	r1, r6
 8002a54:	4628      	mov	r0, r5
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002a56:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002a5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002a5e:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8002a62:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002a66:	edcd 7a01 	vstr	s15, [sp, #4]
 8002a6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002a6e:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002a72:	f00c fa9b 	bl	800efac <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 8002a76:	4629      	mov	r1, r5
 8002a78:	4881      	ldr	r0, [pc, #516]	; (8002c80 <UserInput+0x578>)
 8002a7a:	f00c fac0 	bl	800effe <strcat>
		for (i=FFTLEN-1; i>(FFTLEN-256); i -= 8)
 8002a7e:	42bc      	cmp	r4, r7
 8002a80:	d1bb      	bne.n	80029fa <UserInput+0x2f2>
		sprintf((char*)WFString, "\e[48;5;16m"); // set black background
 8002a82:	4a81      	ldr	r2, [pc, #516]	; (8002c88 <UserInput+0x580>)
 8002a84:	462b      	mov	r3, r5
 8002a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a88:	c303      	stmia	r3!, {r0, r1}
 8002a8a:	0c11      	lsrs	r1, r2, #16
 8002a8c:	f823 2b02 	strh.w	r2, [r3], #2
 8002a90:	487b      	ldr	r0, [pc, #492]	; (8002c80 <UserInput+0x578>)
 8002a92:	7019      	strb	r1, [r3, #0]
		strcat(UartTXString, (int8_t *)WFString);
 8002a94:	f7fd fc24 	bl	80002e0 <strlen>
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4448      	add	r0, r9
 8002a9c:	f00c faa6 	bl	800efec <stpcpy>
 8002aa0:	4601      	mov	r1, r0
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002aa2:	4877      	ldr	r0, [pc, #476]	; (8002c80 <UserInput+0x578>)
 8002aa4:	eba1 0109 	sub.w	r1, r1, r9
 8002aa8:	b289      	uxth	r1, r1
 8002aaa:	f00a fa55 	bl	800cf58 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f001 fc52 	bl	8004358 <HAL_Delay>
}
 8002ab4:	e6e2      	b.n	800287c <UserInput+0x174>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 8002ab6:	1acb      	subs	r3, r1, r3
 8002ab8:	b298      	uxth	r0, r3
 8002aba:	f7fe f94b 	bl	8000d54 <FplusClicked>
		DisplayStatus();
 8002abe:	f7ff fc13 	bl	80022e8 <DisplayStatus>
		LastEncVal = EncVal;
 8002ac2:	882b      	ldrh	r3, [r5, #0]
 8002ac4:	8023      	strh	r3, [r4, #0]
	if (DiffEncVal > 0)
 8002ac6:	e6aa      	b.n	800281e <UserInput+0x116>
			volume += 0.1;
 8002ac8:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <UserInput+0x584>)
			if (volume > 1.0)
 8002aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8002ace:	ed93 7a00 	vldr	s14, [r3]
 8002ad2:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8002c68 <UserInput+0x560>
 8002ad6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002ada:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002ade:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ae2:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
 8002aea:	e682      	b.n	80027f2 <UserInput+0xea>
			SetFstep(5);  break;
 8002aec:	2005      	movs	r0, #5
 8002aee:	f7fe f90f 	bl	8000d10 <SetFstep>
 8002af2:	e67e      	b.n	80027f2 <UserInput+0xea>
			FplusClicked(2); break;
 8002af4:	2002      	movs	r0, #2
 8002af6:	f7fe f92d 	bl	8000d54 <FplusClicked>
 8002afa:	e67a      	b.n	80027f2 <UserInput+0xea>
			FminusClicked(2); break;
 8002afc:	2002      	movs	r0, #2
 8002afe:	f7fe f993 	bl	8000e28 <FminusClicked>
 8002b02:	e676      	b.n	80027f2 <UserInput+0xea>
			volume -= 0.1;
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <UserInput+0x584>)
			if (volume < 0)
 8002b06:	2200      	movs	r2, #0
			volume -= 0.1;
 8002b08:	ed93 7a00 	vldr	s14, [r3]
 8002b0c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002c68 <UserInput+0x560>
 8002b10:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002b14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b18:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8002b1c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8002b24:	bf54      	ite	pl
 8002b26:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 8002b2a:	601a      	strmi	r2, [r3, #0]
 8002b2c:	e661      	b.n	80027f2 <UserInput+0xea>
					TxPowerOut = MID_POWER_OUT;
 8002b2e:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <UserInput+0x588>)
 8002b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b34:	601a      	str	r2, [r3, #0]
					break;
 8002b36:	e65c      	b.n	80027f2 <UserInput+0xea>
					TxPowerOut = LOW_POWER_OUT;
 8002b38:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <UserInput+0x588>)
 8002b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3e:	601a      	str	r2, [r3, #0]
					break;
 8002b40:	e657      	b.n	80027f2 <UserInput+0xea>
			SetFstep(9); break;
 8002b42:	2009      	movs	r0, #9
 8002b44:	f7fe f8e4 	bl	8000d10 <SetFstep>
 8002b48:	e653      	b.n	80027f2 <UserInput+0xea>
			SetFstep(0); break;
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fe f8e0 	bl	8000d10 <SetFstep>
 8002b50:	e64f      	b.n	80027f2 <UserInput+0xea>
			SetFstep(1); break;
 8002b52:	2001      	movs	r0, #1
 8002b54:	f7fe f8dc 	bl	8000d10 <SetFstep>
 8002b58:	e64b      	b.n	80027f2 <UserInput+0xea>
			SetFstep(2);  break;
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7fe f8d8 	bl	8000d10 <SetFstep>
 8002b60:	e647      	b.n	80027f2 <UserInput+0xea>
			SetFstep(3);  break;
 8002b62:	2003      	movs	r0, #3
 8002b64:	f7fe f8d4 	bl	8000d10 <SetFstep>
 8002b68:	e643      	b.n	80027f2 <UserInput+0xea>
			SetFstep(4);  break;
 8002b6a:	2004      	movs	r0, #4
 8002b6c:	f7fe f8d0 	bl	8000d10 <SetFstep>
 8002b70:	e63f      	b.n	80027f2 <UserInput+0xea>
			SetBW((Bwidth)Wide);  break;
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7fd ff1e 	bl	80009b4 <SetBW>
 8002b78:	e63b      	b.n	80027f2 <UserInput+0xea>
			SetFracPLL(20);  break;
 8002b7a:	2014      	movs	r0, #20
 8002b7c:	f7ff fce6 	bl	800254c <SetFracPLL>
 8002b80:	e637      	b.n	80027f2 <UserInput+0xea>
			SetMode((Mode)USB); break;
 8002b82:	2002      	movs	r0, #2
 8002b84:	f7fe f88a 	bl	8000c9c <SetMode>
 8002b88:	e633      	b.n	80027f2 <UserInput+0xea>
	if (Status)
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 8002b8a:	4e42      	ldr	r6, [pc, #264]	; (8002c94 <UserInput+0x58c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 8002b8e:	4c42      	ldr	r4, [pc, #264]	; (8002c98 <UserInput+0x590>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	ad04      	add	r5, sp, #16
		if (LastTXFreq != LOfreq)
 8002b92:	ed96 0a00 	vldr	s0, [r6]
 8002b96:	edd4 7a00 	vldr	s15, [r4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9a:	9304      	str	r3, [sp, #16]
		if (LastTXFreq != LOfreq)
 8002b9c:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 8002ba0:	4a3e      	ldr	r2, [pc, #248]	; (8002c9c <UserInput+0x594>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba2:	e9c5 3301 	strd	r3, r3, [r5, #4]
		if (LastTXFreq != LOfreq)
 8002ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002baa:	e9c5 3303 	strd	r3, r3, [r5, #12]
		TransmissionEnabled = 1;
 8002bae:	f04f 0301 	mov.w	r3, #1
 8002bb2:	7013      	strb	r3, [r2, #0]
		if (LastTXFreq != LOfreq)
 8002bb4:	f040 80ef 	bne.w	8002d96 <UserInput+0x68e>
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002bb8:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bba:	f44f 7800 	mov.w	r8, #512	; 0x200
 8002bbe:	f04f 0902 	mov.w	r9, #2
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	2703      	movs	r7, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	4835      	ldr	r0, [pc, #212]	; (8002ca0 <UserInput+0x598>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002bca:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bcc:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002bd0:	e9cd 6706 	strd	r6, r7, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd4:	f004 fa0a 	bl	8006fec <HAL_GPIO_Init>

		RELAY_TX_ON;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bde:	4831      	ldr	r0, [pc, #196]	; (8002ca4 <UserInput+0x59c>)
 8002be0:	f004 fb44 	bl	800726c <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8002be4:	2201      	movs	r2, #1
 8002be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bea:	482f      	ldr	r0, [pc, #188]	; (8002ca8 <UserInput+0x5a0>)
 8002bec:	f004 fb3e 	bl	800726c <HAL_GPIO_WritePin>
}


void CarrierEnable(uint8_t Status)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	9404      	str	r4, [sp, #16]
	if (Status)
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bf8:	482a      	ldr	r0, [pc, #168]	; (8002ca4 <UserInput+0x59c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfa:	e9c5 4401 	strd	r4, r4, [r5, #4]
 8002bfe:	e9c5 4403 	strd	r4, r4, [r5, #12]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002c02:	f004 fb33 	bl	800726c <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <UserInput+0x588>)
 8002c08:	4622      	mov	r2, r4
 8002c0a:	2110      	movs	r1, #16
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4827      	ldr	r0, [pc, #156]	; (8002cac <UserInput+0x5a4>)
 8002c10:	f002 fe40 	bl	8005894 <HAL_DAC_SetValue>
			GPIO_InitStruct.Pin = GPIO_PIN_9;
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			GPIO_InitStruct.Pull = GPIO_NOPULL;
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
			GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c14:	4629      	mov	r1, r5
 8002c16:	4822      	ldr	r0, [pc, #136]	; (8002ca0 <UserInput+0x598>)
			GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c18:	9408      	str	r4, [sp, #32]
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c1a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002c1e:	e9cd 6706 	strd	r6, r7, [sp, #24]
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c22:	f004 f9e3 	bl	8006fec <HAL_GPIO_Init>

		TXCarrierEnabled = 1;
 8002c26:	2201      	movs	r2, #1
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <UserInput+0x5a8>)
		LED_GREEN_ON;
 8002c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c2e:	481e      	ldr	r0, [pc, #120]	; (8002ca8 <UserInput+0x5a0>)
		TXCarrierEnabled = 1;
 8002c30:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8002c32:	f004 fb1b 	bl	800726c <HAL_GPIO_WritePin>
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		LED_GREEN_OFF;
	}
}
 8002c36:	e5dc      	b.n	80027f2 <UserInput+0xea>
			SetAGC((Agctype)Slow);  break;
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7fd ff1d 	bl	8000a78 <SetAGC>
 8002c3e:	e5d8      	b.n	80027f2 <UserInput+0xea>
			SetBW((Bwidth)Narrow);  break;
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd feb7 	bl	80009b4 <SetBW>
 8002c46:	e5d4      	b.n	80027f2 <UserInput+0xea>
			SetMode((Mode)LSB); break;
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f7fe f827 	bl	8000c9c <SetMode>
 8002c4e:	e5d0      	b.n	80027f2 <UserInput+0xea>
 8002c50:	c28f5c29 	.word	0xc28f5c29
 8002c54:	3ff028f5 	.word	0x3ff028f5
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	40490000 	.word	0x40490000
 8002c60:	00000000 	.word	0x00000000
 8002c64:	40590000 	.word	0x40590000
 8002c68:	9999999a 	.word	0x9999999a
 8002c6c:	3fb99999 	.word	0x3fb99999
 8002c70:	08018764 	.word	0x08018764
 8002c74:	24008618 	.word	0x24008618
 8002c78:	00000000 	.word	0x00000000
 8002c7c:	0801876c 	.word	0x0801876c
 8002c80:	24007214 	.word	0x24007214
 8002c84:	240091f8 	.word	0x240091f8
 8002c88:	08018778 	.word	0x08018778
 8002c8c:	2400d7ec 	.word	0x2400d7ec
 8002c90:	24007108 	.word	0x24007108
 8002c94:	24007090 	.word	0x24007090
 8002c98:	24007098 	.word	0x24007098
 8002c9c:	24007104 	.word	0x24007104
 8002ca0:	58020800 	.word	0x58020800
 8002ca4:	58020c00 	.word	0x58020c00
 8002ca8:	58020400 	.word	0x58020400
 8002cac:	2400c328 	.word	0x2400c328
 8002cb0:	240070f8 	.word	0x240070f8
 8002cb4:	0801879c 	.word	0x0801879c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb8:	ad04      	add	r5, sp, #16
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cba:	2400      	movs	r4, #0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cbc:	2302      	movs	r3, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cbe:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002cc2:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	4836      	ldr	r0, [pc, #216]	; (8002da0 <UserInput+0x698>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cc8:	9306      	str	r3, [sp, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cca:	e9cd 4407 	strd	r4, r4, [sp, #28]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cce:	e9cd 6704 	strd	r6, r7, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd2:	f004 f98b 	bl	8006fec <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cdc:	4831      	ldr	r0, [pc, #196]	; (8002da4 <UserInput+0x69c>)
 8002cde:	f004 fac5 	bl	800726c <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8002ce2:	4622      	mov	r2, r4
 8002ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ce8:	482f      	ldr	r0, [pc, #188]	; (8002da8 <UserInput+0x6a0>)
 8002cea:	f004 fabf 	bl	800726c <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <UserInput+0x6a4>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002cf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cf4:	482b      	ldr	r0, [pc, #172]	; (8002da4 <UserInput+0x69c>)
 8002cf6:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8002cf8:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfa:	9408      	str	r4, [sp, #32]
 8002cfc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002d00:	e9cd 4406 	strd	r4, r4, [sp, #24]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002d04:	f004 fab2 	bl	800726c <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8002d08:	4623      	mov	r3, r4
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	2110      	movs	r1, #16
 8002d0e:	4828      	ldr	r0, [pc, #160]	; (8002db0 <UserInput+0x6a8>)
 8002d10:	f002 fdc0 	bl	8005894 <HAL_DAC_SetValue>
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d14:	2202      	movs	r2, #2
 8002d16:	2300      	movs	r3, #0
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d18:	4629      	mov	r1, r5
 8002d1a:	4821      	ldr	r0, [pc, #132]	; (8002da0 <UserInput+0x698>)
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
		TXCarrierEnabled = 0;
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <UserInput+0x6ac>)
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d22:	e9cd 6704 	strd	r6, r7, [sp, #16]
		TXCarrierEnabled = 0;
 8002d26:	701c      	strb	r4, [r3, #0]
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d28:	f004 f960 	bl	8006fec <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d32:	481d      	ldr	r0, [pc, #116]	; (8002da8 <UserInput+0x6a0>)
 8002d34:	f004 fa9a 	bl	800726c <HAL_GPIO_WritePin>
}
 8002d38:	e55b      	b.n	80027f2 <UserInput+0xea>
			keyer_speed -= 1;
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <UserInput+0x6b0>)
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 8002d40:	2802      	cmp	r0, #2
 8002d42:	dc23      	bgt.n	8002d8c <UserInput+0x684>
				keyer_speed = 3;
 8002d44:	2203      	movs	r2, #3
 8002d46:	4610      	mov	r0, r2
 8002d48:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8002d4a:	e550      	b.n	80027ee <UserInput+0xe6>
			SetFracPLL(0);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7ff fbfd 	bl	800254c <SetFracPLL>
			__HAL_RCC_PLL2FRACN_DISABLE();  break;
 8002d52:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <UserInput+0x6b4>)
 8002d54:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d56:	f023 0310 	bic.w	r3, r3, #16
 8002d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002d5c:	e549      	b.n	80027f2 <UserInput+0xea>
			SetMode((Mode)AM); break;
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fd ff9c 	bl	8000c9c <SetMode>
 8002d64:	e545      	b.n	80027f2 <UserInput+0xea>
			if (ShowWF)
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <UserInput+0x6b8>)
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	b18a      	cbz	r2, 8002d90 <UserInput+0x688>
				ShowWF=0;
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e53f      	b.n	80027f2 <UserInput+0xea>
					TxPowerOut = MAX_POWER_OUT;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <UserInput+0x6bc>)
 8002d74:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002d78:	601a      	str	r2, [r3, #0]
					break;
 8002d7a:	e53a      	b.n	80027f2 <UserInput+0xea>
			SetAGC((Agctype)Fast);  break;
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fd fe7b 	bl	8000a78 <SetAGC>
 8002d82:	e536      	b.n	80027f2 <UserInput+0xea>
			SetMode((Mode)CW); break;
 8002d84:	2003      	movs	r0, #3
 8002d86:	f7fd ff89 	bl	8000c9c <SetMode>
 8002d8a:	e532      	b.n	80027f2 <UserInput+0xea>
			keyer_speed += 1;
 8002d8c:	6018      	str	r0, [r3, #0]
 8002d8e:	e52e      	b.n	80027ee <UserInput+0xe6>
				ShowWF=1;
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e52d      	b.n	80027f2 <UserInput+0xea>
			SetTXPLL(LOfreq);
 8002d96:	f7ff fc33 	bl	8002600 <SetTXPLL>
			LastTXFreq = LOfreq;
 8002d9a:	6833      	ldr	r3, [r6, #0]
 8002d9c:	6023      	str	r3, [r4, #0]
 8002d9e:	e70b      	b.n	8002bb8 <UserInput+0x4b0>
 8002da0:	58020800 	.word	0x58020800
 8002da4:	58020c00 	.word	0x58020c00
 8002da8:	58020400 	.word	0x58020400
 8002dac:	24007104 	.word	0x24007104
 8002db0:	2400c328 	.word	0x2400c328
 8002db4:	240070f8 	.word	0x240070f8
 8002db8:	2400c62c 	.word	0x2400c62c
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	240070cc 	.word	0x240070cc
 8002dc4:	24007108 	.word	0x24007108

08002dc8 <TXSwitch>:
{
 8002dc8:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dca:	2300      	movs	r3, #0
{
 8002dcc:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dce:	e9cd 3300 	strd	r3, r3, [sp]
 8002dd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002dd6:	9304      	str	r3, [sp, #16]
	if (Status)
 8002dd8:	b378      	cbz	r0, 8002e3a <TXSwitch+0x72>
		if (LastTXFreq != LOfreq)
 8002dda:	4d27      	ldr	r5, [pc, #156]	; (8002e78 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 8002ddc:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 8002dde:	4c27      	ldr	r4, [pc, #156]	; (8002e7c <TXSwitch+0xb4>)
 8002de0:	ed95 0a00 	vldr	s0, [r5]
 8002de4:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 8002dea:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 8002dee:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	d11c      	bne.n	8002e30 <TXSwitch+0x68>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002df6:	2200      	movs	r2, #0
 8002df8:	2303      	movs	r3, #3
 8002dfa:	f44f 7400 	mov.w	r4, #512	; 0x200
 8002dfe:	2502      	movs	r5, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e00:	4669      	mov	r1, sp
 8002e02:	4820      	ldr	r0, [pc, #128]	; (8002e84 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e08:	2300      	movs	r3, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e0a:	e9cd 4500 	strd	r4, r5, [sp]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e0e:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e10:	f004 f8ec 	bl	8006fec <HAL_GPIO_Init>
		RELAY_TX_ON;
 8002e14:	2201      	movs	r2, #1
 8002e16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e1a:	481b      	ldr	r0, [pc, #108]	; (8002e88 <TXSwitch+0xc0>)
 8002e1c:	f004 fa26 	bl	800726c <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8002e20:	2201      	movs	r2, #1
 8002e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e26:	4819      	ldr	r0, [pc, #100]	; (8002e8c <TXSwitch+0xc4>)
 8002e28:	f004 fa20 	bl	800726c <HAL_GPIO_WritePin>
}
 8002e2c:	b007      	add	sp, #28
 8002e2e:	bd30      	pop	{r4, r5, pc}
			SetTXPLL(LOfreq);
 8002e30:	f7ff fbe6 	bl	8002600 <SetTXPLL>
			LastTXFreq = LOfreq;
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	6023      	str	r3, [r4, #0]
 8002e38:	e7dd      	b.n	8002df6 <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e3a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8002e70 <TXSwitch+0xa8>
 8002e3e:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e40:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e42:	4669      	mov	r1, sp
 8002e44:	480f      	ldr	r0, [pc, #60]	; (8002e84 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e46:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e48:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4c:	f004 f8ce 	bl	8006fec <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8002e50:	4622      	mov	r2, r4
 8002e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e56:	480c      	ldr	r0, [pc, #48]	; (8002e88 <TXSwitch+0xc0>)
 8002e58:	f004 fa08 	bl	800726c <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8002e5c:	4622      	mov	r2, r4
 8002e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e62:	480a      	ldr	r0, [pc, #40]	; (8002e8c <TXSwitch+0xc4>)
 8002e64:	f004 fa02 	bl	800726c <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <TXSwitch+0xb8>)
 8002e6a:	701c      	strb	r4, [r3, #0]
}
 8002e6c:	b007      	add	sp, #28
 8002e6e:	bd30      	pop	{r4, r5, pc}
 8002e70:	00000200 	.word	0x00000200
 8002e74:	00000001 	.word	0x00000001
 8002e78:	24007090 	.word	0x24007090
 8002e7c:	24007098 	.word	0x24007098
 8002e80:	24007104 	.word	0x24007104
 8002e84:	58020800 	.word	0x58020800
 8002e88:	58020c00 	.word	0x58020c00
 8002e8c:	58020400 	.word	0x58020400

08002e90 <CarrierEnable>:
{
 8002e90:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e92:	2400      	movs	r4, #0
{
 8002e94:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e96:	e9cd 4400 	strd	r4, r4, [sp]
 8002e9a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002e9e:	9404      	str	r4, [sp, #16]
	if (Status)
 8002ea0:	b320      	cbz	r0, 8002eec <CarrierEnable+0x5c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ea8:	4822      	ldr	r0, [pc, #136]	; (8002f34 <CarrierEnable+0xa4>)
 8002eaa:	f004 f9df 	bl	800726c <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <CarrierEnable+0xa8>)
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	2110      	movs	r1, #16
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4821      	ldr	r0, [pc, #132]	; (8002f3c <CarrierEnable+0xac>)
 8002eb8:	f002 fcec 	bl	8005894 <HAL_DAC_SetValue>
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec0:	2302      	movs	r3, #2
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec2:	4669      	mov	r1, sp
 8002ec4:	481e      	ldr	r0, [pc, #120]	; (8002f40 <CarrierEnable+0xb0>)
			GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ec6:	9404      	str	r4, [sp, #16]
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ec8:	e9cd 2300 	strd	r2, r3, [sp]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e9cd 2302 	strd	r2, r3, [sp, #8]
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed4:	f004 f88a 	bl	8006fec <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 8002edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ee0:	4819      	ldr	r0, [pc, #100]	; (8002f48 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 8002ee2:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8002ee4:	f004 f9c2 	bl	800726c <HAL_GPIO_WritePin>
}
 8002ee8:	b007      	add	sp, #28
 8002eea:	bd30      	pop	{r4, r5, pc}
 8002eec:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ef2:	4810      	ldr	r0, [pc, #64]	; (8002f34 <CarrierEnable+0xa4>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f004 f9b9 	bl	800726c <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8002efa:	462b      	mov	r3, r5
 8002efc:	462a      	mov	r2, r5
 8002efe:	2110      	movs	r1, #16
 8002f00:	480e      	ldr	r0, [pc, #56]	; (8002f3c <CarrierEnable+0xac>)
 8002f02:	f002 fcc7 	bl	8005894 <HAL_DAC_SetValue>
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0a:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 8002f0c:	480d      	ldr	r0, [pc, #52]	; (8002f44 <CarrierEnable+0xb4>)
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f0e:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 8002f10:	7005      	strb	r5, [r0, #0]
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f12:	480b      	ldr	r0, [pc, #44]	; (8002f40 <CarrierEnable+0xb0>)
			GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f14:	e9cd 2300 	strd	r2, r3, [sp]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f20:	f004 f864 	bl	8006fec <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8002f24:	462a      	mov	r2, r5
 8002f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f2a:	4807      	ldr	r0, [pc, #28]	; (8002f48 <CarrierEnable+0xb8>)
 8002f2c:	f004 f99e 	bl	800726c <HAL_GPIO_WritePin>
}
 8002f30:	b007      	add	sp, #28
 8002f32:	bd30      	pop	{r4, r5, pc}
 8002f34:	58020c00 	.word	0x58020c00
 8002f38:	24007108 	.word	0x24007108
 8002f3c:	2400c328 	.word	0x2400c328
 8002f40:	58020800 	.word	0x58020800
 8002f44:	240070f8 	.word	0x240070f8
 8002f48:	58020400 	.word	0x58020400

08002f4c <Error_Handler>:
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8002f4c:	4e09      	ldr	r6, [pc, #36]	; (8002f74 <Error_Handler+0x28>)
{
 8002f4e:	4d0a      	ldr	r5, [pc, #40]	; (8002f78 <Error_Handler+0x2c>)
 8002f50:	4c0a      	ldr	r4, [pc, #40]	; (8002f7c <Error_Handler+0x30>)
 8002f52:	b508      	push	{r3, lr}
 8002f54:	6833      	ldr	r3, [r6, #0]
 8002f56:	fb05 f303 	mul.w	r3, r5, r3
 8002f5a:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8002f5e:	d200      	bcs.n	8002f62 <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8002f60:	e7fe      	b.n	8002f60 <Error_Handler+0x14>
			LED_switch();
 8002f62:	f7fd ffcb 	bl	8000efc <LED_switch>
 8002f66:	6833      	ldr	r3, [r6, #0]
 8002f68:	fb05 f303 	mul.w	r3, r5, r3
 8002f6c:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8002f70:	d2f7      	bcs.n	8002f62 <Error_Handler+0x16>
 8002f72:	e7f5      	b.n	8002f60 <Error_Handler+0x14>
 8002f74:	2400c65c 	.word	0x2400c65c
 8002f78:	c28f5c29 	.word	0xc28f5c29
 8002f7c:	051eb851 	.word	0x051eb851

08002f80 <SystemClock_Config_For_OC>:
{
 8002f80:	b530      	push	{r4, r5, lr}
 8002f82:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f84:	224c      	movs	r2, #76	; 0x4c
 8002f86:	2100      	movs	r1, #0
 8002f88:	a80a      	add	r0, sp, #40	; 0x28
 8002f8a:	f00b fbc5 	bl	800e718 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f8e:	2220      	movs	r2, #32
 8002f90:	2100      	movs	r1, #0
 8002f92:	a802      	add	r0, sp, #8
 8002f94:	f00b fbc0 	bl	800e718 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f98:	22bc      	movs	r2, #188	; 0xbc
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	a81e      	add	r0, sp, #120	; 0x78
 8002f9e:	f00b fbbb 	bl	800e718 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f004 ff74 	bl	8007e90 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002fa8:	4a49      	ldr	r2, [pc, #292]	; (80030d0 <SystemClock_Config_For_OC+0x150>)
 8002faa:	2300      	movs	r3, #0
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	6991      	ldr	r1, [r2, #24]
 8002fb0:	4b48      	ldr	r3, [pc, #288]	; (80030d4 <SystemClock_Config_For_OC+0x154>)
 8002fb2:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002fb6:	6191      	str	r1, [r2, #24]
 8002fb8:	6991      	ldr	r1, [r2, #24]
 8002fba:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8002fbe:	9101      	str	r1, [sp, #4]
 8002fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fc2:	f041 0101 	orr.w	r1, r1, #1
 8002fc6:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002fd2:	6993      	ldr	r3, [r2, #24]
 8002fd4:	0499      	lsls	r1, r3, #18
 8002fd6:	d5fc      	bpl.n	8002fd2 <SystemClock_Config_For_OC+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002fd8:	4a3f      	ldr	r2, [pc, #252]	; (80030d8 <SystemClock_Config_For_OC+0x158>)
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002fda:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002fdc:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fde:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002fe0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fec:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = 10;
 8002fee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002ff2:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002ff4:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002ff6:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002ff8:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ffa:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ffc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003000:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003002:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8003006:	230a      	movs	r3, #10
 8003008:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <SystemClock_Config_For_OC+0x15c>)
 800300e:	4a34      	ldr	r2, [pc, #208]	; (80030e0 <SystemClock_Config_For_OC+0x160>)
 8003010:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003012:	2221      	movs	r2, #33	; 0x21
 8003014:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003018:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800301c:	f004 ffe8 	bl	8007ff0 <HAL_RCC_OscConfig>
 8003020:	2800      	cmp	r0, #0
 8003022:	d152      	bne.n	80030ca <SystemClock_Config_For_OC+0x14a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003024:	223f      	movs	r2, #63	; 0x3f
 8003026:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003028:	4621      	mov	r1, r4
 800302a:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800302c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	2308      	movs	r3, #8
 8003034:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003038:	2240      	movs	r2, #64	; 0x40
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003040:	2340      	movs	r3, #64	; 0x40
 8003042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003046:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800304a:	f005 fb97 	bl	800877c <HAL_RCC_ClockConfig>
 800304e:	4603      	mov	r3, r0
 8003050:	2800      	cmp	r0, #0
 8003052:	d13a      	bne.n	80030ca <SystemClock_Config_For_OC+0x14a>
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8003054:	f44f 6280 	mov.w	r2, #1024	; 0x400
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003058:	932e      	str	r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800305a:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800305c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8003060:	9244      	str	r2, [sp, #272]	; 0x110
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003062:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <SystemClock_Config_For_OC+0x164>)
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003068:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800306a:	9346      	str	r3, [sp, #280]	; 0x118
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 800306c:	2304      	movs	r3, #4
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800306e:	913f      	str	r1, [sp, #252]	; 0xfc
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8003070:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8003074:	2226      	movs	r2, #38	; 0x26
 8003076:	2318      	movs	r3, #24
 8003078:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 800307c:	2202      	movs	r2, #2
 800307e:	2302      	movs	r3, #2
 8003080:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	2300      	movs	r3, #0
 8003088:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800308c:	2200      	movs	r2, #0
 800308e:	2305      	movs	r3, #5
 8003090:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8003094:	2280      	movs	r2, #128	; 0x80
 8003096:	2302      	movs	r3, #2
 8003098:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 800309c:	2208      	movs	r2, #8
 800309e:	2305      	movs	r3, #5
 80030a0:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 80030a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a8:	2300      	movs	r3, #0
 80030aa:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ae:	f005 fe51 	bl	8008d54 <HAL_RCCEx_PeriphCLKConfig>
 80030b2:	b950      	cbnz	r0, 80030ca <SystemClock_Config_For_OC+0x14a>
	HAL_PWREx_EnableUSBVoltageDetector();
 80030b4:	f004 ff10 	bl	8007ed8 <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 80030b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80030bc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80030c0:	4628      	mov	r0, r5
 80030c2:	f005 fa69 	bl	8008598 <HAL_RCC_MCOConfig>
}
 80030c6:	b04f      	add	sp, #316	; 0x13c
 80030c8:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80030ca:	f7ff ff3f 	bl	8002f4c <Error_Handler>
 80030ce:	bf00      	nop
 80030d0:	58024800 	.word	0x58024800
 80030d4:	58000400 	.word	0x58000400
 80030d8:	58024400 	.word	0x58024400
 80030dc:	24009218 	.word	0x24009218
 80030e0:	4bbebbc7 	.word	0x4bbebbc7
 80030e4:	000c0042 	.word	0x000c0042

080030e8 <MX_TIM6_Init_Custom_Rate>:
{
 80030e8:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ea:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 80030ec:	4c0f      	ldr	r4, [pc, #60]	; (800312c <MX_TIM6_Init_Custom_Rate+0x44>)
 80030ee:	4810      	ldr	r0, [pc, #64]	; (8003130 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 80030f0:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 80030f2:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030f6:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f8:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030fa:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 80030fc:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003100:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 8003102:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003106:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800310a:	f006 feff 	bl	8009f0c <HAL_TIM_Base_Init>
 800310e:	b950      	cbnz	r0, 8003126 <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003110:	4603      	mov	r3, r0
 8003112:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003114:	a901      	add	r1, sp, #4
 8003116:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003118:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800311a:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800311c:	f007 fb30 	bl	800a780 <HAL_TIMEx_MasterConfigSynchronization>
 8003120:	b908      	cbnz	r0, 8003126 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8003122:	b004      	add	sp, #16
 8003124:	bd10      	pop	{r4, pc}
		Error_Handler();
 8003126:	f7ff ff11 	bl	8002f4c <Error_Handler>
 800312a:	bf00      	nop
 800312c:	2400c500 	.word	0x2400c500
 8003130:	40001000 	.word	0x40001000
 8003134:	00000000 	.word	0x00000000

08003138 <main>:
{
 8003138:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800313c:	b0cf      	sub	sp, #316	; 0x13c
  HAL_Init();
 800313e:	f001 f8c9 	bl	80042d4 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003142:	4add      	ldr	r2, [pc, #884]	; (80034b8 <main+0x380>)
 8003144:	6953      	ldr	r3, [r2, #20]
 8003146:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800314a:	d111      	bne.n	8003170 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 800314c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003150:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003154:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003158:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800315c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003160:	6953      	ldr	r3, [r2, #20]
 8003162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003166:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003168:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800316c:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003172:	f8df 8364 	ldr.w	r8, [pc, #868]	; 80034d8 <main+0x3a0>
	SystemClock_Config_For_OC();
 8003176:	f7ff ff03 	bl	8002f80 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB somentimes (and almost always on an Android phone) does not initialize
 800317a:	2014      	movs	r0, #20
 800317c:	f001 f8ec 	bl	8004358 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	9448      	str	r4, [sp, #288]	; 0x120
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8003182:	48ce      	ldr	r0, [pc, #824]	; (80034bc <main+0x384>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003184:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 8003186:	f8df b354 	ldr.w	fp, [pc, #852]	; 80034dc <main+0x3a4>
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800318a:	f44f 7680 	mov.w	r6, #256	; 0x100
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800318e:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003192:	f04f 0908 	mov.w	r9, #8
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003196:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319a:	e9cd 4444 	strd	r4, r4, [sp, #272]	; 0x110
 800319e:	e9cd 4446 	strd	r4, r4, [sp, #280]	; 0x118
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a2:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80031a6:	f042 0204 	orr.w	r2, r2, #4
 80031aa:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 80031ae:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80031b2:	f002 0204 	and.w	r2, r2, #4
 80031b6:	9205      	str	r2, [sp, #20]
 80031b8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ba:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80031be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031c2:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 80031c6:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80031ca:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80031ce:	9206      	str	r2, [sp, #24]
 80031d0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d2:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 80031de:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80031e2:	f002 0201 	and.w	r2, r2, #1
 80031e6:	9207      	str	r2, [sp, #28]
 80031e8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ea:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80031ee:	f042 0202 	orr.w	r2, r2, #2
 80031f2:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 80031f6:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80031fa:	f002 0202 	and.w	r2, r2, #2
 80031fe:	9208      	str	r2, [sp, #32]
 8003200:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003202:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800320e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8003212:	f002 0208 	and.w	r2, r2, #8
 8003216:	9209      	str	r2, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8003218:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800321a:	9909      	ldr	r1, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 800321c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003220:	f004 f824 	bl	800726c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 8003224:	4622      	mov	r2, r4
 8003226:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800322a:	48a5      	ldr	r0, [pc, #660]	; (80034c0 <main+0x388>)
 800322c:	f004 f81e 	bl	800726c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003230:	4622      	mov	r2, r4
 8003232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003236:	48a3      	ldr	r0, [pc, #652]	; (80034c4 <main+0x38c>)
 8003238:	f004 f818 	bl	800726c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 800323c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003240:	2100      	movs	r1, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003242:	9546      	str	r5, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 8003244:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8003248:	a944      	add	r1, sp, #272	; 0x110
 800324a:	489f      	ldr	r0, [pc, #636]	; (80034c8 <main+0x390>)
 800324c:	f003 fece 	bl	8006fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8003250:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003254:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003258:	9546      	str	r5, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = SwInt1_Pin;
 800325a:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 800325e:	a944      	add	r1, sp, #272	; 0x110
 8003260:	4899      	ldr	r0, [pc, #612]	; (80034c8 <main+0x390>)
 8003262:	f003 fec3 	bl	8006fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8003266:	20c0      	movs	r0, #192	; 0xc0
 8003268:	2100      	movs	r1, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800326a:	9546      	str	r5, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 800326c:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003270:	a944      	add	r1, sp, #272	; 0x110
 8003272:	4894      	ldr	r0, [pc, #592]	; (80034c4 <main+0x38c>)
 8003274:	f003 feba 	bl	8006fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8003278:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 800327c:	2101      	movs	r1, #1
 800327e:	ed9f 8b78 	vldr	d8, [pc, #480]	; 8003460 <main+0x328>
 8003282:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003286:	a944      	add	r1, sp, #272	; 0x110
 8003288:	488c      	ldr	r0, [pc, #560]	; (80034bc <main+0x384>)
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 800328a:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328e:	f003 fead 	bl	8006fec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003292:	a944      	add	r1, sp, #272	; 0x110
 8003294:	488a      	ldr	r0, [pc, #552]	; (80034c0 <main+0x388>)
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8003296:	ed9f 7b74 	vldr	d7, [pc, #464]	; 8003468 <main+0x330>
 800329a:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 800329e:	ed9f 7b74 	vldr	d7, [pc, #464]	; 8003470 <main+0x338>
 80032a2:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a6:	f003 fea1 	bl	8006fec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032aa:	a944      	add	r1, sp, #272	; 0x110
 80032ac:	4886      	ldr	r0, [pc, #536]	; (80034c8 <main+0x390>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80032ae:	9448      	str	r4, [sp, #288]	; 0x120
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032b0:	ed9f 7b71 	vldr	d7, [pc, #452]	; 8003478 <main+0x340>
 80032b4:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 80032b8:	ed9f 7b71 	vldr	d7, [pc, #452]	; 8003480 <main+0x348>
 80032bc:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c0:	f003 fe94 	bl	8006fec <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80032c4:	a944      	add	r1, sp, #272	; 0x110
 80032c6:	487f      	ldr	r0, [pc, #508]	; (80034c4 <main+0x38c>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80032c8:	ed9f 7b6f 	vldr	d7, [pc, #444]	; 8003488 <main+0x350>
 80032cc:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
 80032d0:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80032d4:	f003 fe8a 	bl	8006fec <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80032d8:	4622      	mov	r2, r4
 80032da:	2104      	movs	r1, #4
 80032dc:	2028      	movs	r0, #40	; 0x28
 80032de:	f002 f9a1 	bl	8005624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032e2:	2028      	movs	r0, #40	; 0x28
 80032e4:	f002 f9dc 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032e8:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80032ec:	4621      	mov	r1, r4
 80032ee:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032f0:	432a      	orrs	r2, r5
 80032f2:	f8c8 20d8 	str.w	r2, [r8, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80032f6:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032f8:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
 80032fc:	402b      	ands	r3, r5
 80032fe:	9304      	str	r3, [sp, #16]
 8003300:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003302:	f002 f98f 	bl	8005624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003306:	200b      	movs	r0, #11
 8003308:	f002 f9ca 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800330c:	4622      	mov	r2, r4
 800330e:	2102      	movs	r1, #2
 8003310:	200c      	movs	r0, #12
 8003312:	f002 f987 	bl	8005624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003316:	200c      	movs	r0, #12
 8003318:	f002 f9c2 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800331c:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800331e:	4658      	mov	r0, fp
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003320:	f8ab 6014 	strh.w	r6, [fp, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003324:	f8cb 3010 	str.w	r3, [fp, #16]
  hadc1.Instance = ADC1;
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <main+0x394>)
  ADC_MultiModeTypeDef multimode = {0};
 800332a:	940c      	str	r4, [sp, #48]	; 0x30
  hadc1.Instance = ADC1;
 800332c:	f8cb 3000 	str.w	r3, [fp]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003330:	2303      	movs	r3, #3
  ADC_ChannelConfTypeDef sConfig = {0};
 8003332:	9438      	str	r4, [sp, #224]	; 0xe0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003334:	f8cb 400c 	str.w	r4, [fp, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003338:	f8cb 5018 	str.w	r5, [fp, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800333c:	f88b 401c 	strb.w	r4, [fp, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8003340:	f88b 4038 	strb.w	r4, [fp, #56]	; 0x38
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003344:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8003348:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800334c:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
 8003350:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
 8003354:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003358:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 800335c:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
 8003360:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003364:	e9cb a901 	strd	sl, r9, [fp, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003368:	e9cb 4409 	strd	r4, r4, [fp, #36]	; 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800336c:	e9cb 740c 	strd	r7, r4, [fp, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003370:	f001 fef8 	bl	8005164 <HAL_ADC_Init>
 8003374:	2800      	cmp	r0, #0
 8003376:	f040 8320 	bne.w	80039ba <main+0x882>
  multimode.Mode = ADC_DUALMODE_INTERL;
 800337a:	2207      	movs	r2, #7
 800337c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003380:	a90a      	add	r1, sp, #40	; 0x28
 8003382:	4658      	mov	r0, fp
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8003384:	960c      	str	r6, [sp, #48]	; 0x30
  multimode.Mode = ADC_DUALMODE_INTERL;
 8003386:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800338a:	f002 f8d1 	bl	8005530 <HAL_ADCEx_MultiModeConfigChannel>
 800338e:	2800      	cmp	r0, #0
 8003390:	f040 8313 	bne.w	80039ba <main+0x882>
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8003394:	4c4e      	ldr	r4, [pc, #312]	; (80034d0 <main+0x398>)
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8003396:	a924      	add	r1, sp, #144	; 0x90
 8003398:	4658      	mov	r0, fp
  AnalogWDGConfig.ITMode = ENABLE;
 800339a:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 800339e:	9426      	str	r4, [sp, #152]	; 0x98
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80033a0:	ed9f cb3b 	vldr	d12, [pc, #236]	; 8003490 <main+0x358>
  AnalogWDGConfig.HighThreshold = 4094;
 80033a4:	ed9f bb3c 	vldr	d11, [pc, #240]	; 8003498 <main+0x360>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80033a8:	ed8d cb24 	vstr	d12, [sp, #144]	; 0x90
  AnalogWDGConfig.HighThreshold = 4094;
 80033ac:	ed8d bb28 	vstr	d11, [sp, #160]	; 0xa0
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80033b0:	f001 fbd2 	bl	8004b58 <HAL_ADC_AnalogWDGConfig>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	f040 8300 	bne.w	80039ba <main+0x882>
  sConfig.OffsetSignedSaturation = DISABLE;
 80033ba:	f88d 00e1 	strb.w	r0, [sp, #225]	; 0xe1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033be:	a932      	add	r1, sp, #200	; 0xc8
 80033c0:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_5;
 80033c2:	ed9f ab37 	vldr	d10, [pc, #220]	; 80034a0 <main+0x368>
 80033c6:	ed9f 9b38 	vldr	d9, [pc, #224]	; 80034a8 <main+0x370>
 80033ca:	ed9f 8b39 	vldr	d8, [pc, #228]	; 80034b0 <main+0x378>
 80033ce:	ed8d ab32 	vstr	d10, [sp, #200]	; 0xc8
 80033d2:	ed8d 9b34 	vstr	d9, [sp, #208]	; 0xd0
 80033d6:	ed8d 8b36 	vstr	d8, [sp, #216]	; 0xd8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033da:	f001 f98d 	bl	80046f8 <HAL_ADC_ConfigChannel>
 80033de:	2800      	cmp	r0, #0
 80033e0:	f040 82eb 	bne.w	80039ba <main+0x882>
  hadc2.Instance = ADC2;
 80033e4:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 80034e0 <main+0x3a8>
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033e8:	2304      	movs	r3, #4
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80033ea:	901e      	str	r0, [sp, #120]	; 0x78
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033ec:	f8cb 3010 	str.w	r3, [fp, #16]
  hadc2.Instance = ADC2;
 80033f0:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <main+0x39c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80033f2:	902a      	str	r0, [sp, #168]	; 0xa8
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80033f4:	9023      	str	r0, [sp, #140]	; 0x8c
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033f6:	f8cb 000c 	str.w	r0, [fp, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80033fa:	f88b 001c 	strb.w	r0, [fp, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80033fe:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003402:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8003406:	f88b 0038 	strb.w	r0, [fp, #56]	; 0x38
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800340a:	f8ab 6014 	strh.w	r6, [fp, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800340e:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
  hadc2.Init.NbrOfConversion = 1;
 8003412:	f8cb 5018 	str.w	r5, [fp, #24]
  hadc2.Instance = ADC2;
 8003416:	f8cb 3000 	str.w	r3, [fp]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800341a:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 800341e:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
  ADC_ChannelConfTypeDef sConfig = {0};
 8003422:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 8003426:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
 800342a:	e9cd 002f 	strd	r0, r0, [sp, #188]	; 0xbc
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800342e:	4658      	mov	r0, fp
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003430:	e9cb a901 	strd	sl, r9, [fp, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003434:	f001 fe96 	bl	8005164 <HAL_ADC_Init>
 8003438:	2800      	cmp	r0, #0
 800343a:	f040 82be 	bne.w	80039ba <main+0x882>
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 800343e:	a91e      	add	r1, sp, #120	; 0x78
 8003440:	4658      	mov	r0, fp
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8003442:	9420      	str	r4, [sp, #128]	; 0x80
  AnalogWDGConfig.ITMode = ENABLE;
 8003444:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003448:	ed8d cb1e 	vstr	d12, [sp, #120]	; 0x78
  AnalogWDGConfig.HighThreshold = 4094;
 800344c:	ed8d bb22 	vstr	d11, [sp, #136]	; 0x88
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8003450:	f001 fb82 	bl	8004b58 <HAL_ADC_AnalogWDGConfig>
 8003454:	4603      	mov	r3, r0
 8003456:	2800      	cmp	r0, #0
 8003458:	f040 82af 	bne.w	80039ba <main+0x882>
 800345c:	e042      	b.n	80034e4 <main+0x3ac>
 800345e:	bf00      	nop
	...
 8003468:	00000c00 	.word	0x00000c00
 800346c:	00000001 	.word	0x00000001
 8003470:	00000002 	.word	0x00000002
 8003474:	00000000 	.word	0x00000000
 8003478:	00000200 	.word	0x00000200
 800347c:	00000002 	.word	0x00000002
 8003480:	00000000 	.word	0x00000000
 8003484:	00000003 	.word	0x00000003
 8003488:	00000100 	.word	0x00000100
 800348c:	00000001 	.word	0x00000001
 8003490:	7dc00000 	.word	0x7dc00000
 8003494:	00c00000 	.word	0x00c00000
 8003498:	00000ffe 	.word	0x00000ffe
 800349c:	00000001 	.word	0x00000001
 80034a0:	14f00020 	.word	0x14f00020
 80034a4:	00000006 	.word	0x00000006
 80034a8:	00000000 	.word	0x00000000
 80034ac:	000007ff 	.word	0x000007ff
 80034b0:	00000004 	.word	0x00000004
 80034b4:	00000000 	.word	0x00000000
 80034b8:	e000ed00 	.word	0xe000ed00
 80034bc:	58020400 	.word	0x58020400
 80034c0:	58020c00 	.word	0x58020c00
 80034c4:	58020000 	.word	0x58020000
 80034c8:	58020800 	.word	0x58020800
 80034cc:	40022000 	.word	0x40022000
 80034d0:	14f00020 	.word	0x14f00020
 80034d4:	40022100 	.word	0x40022100
 80034d8:	58024400 	.word	0x58024400
 80034dc:	2400c25c 	.word	0x2400c25c
 80034e0:	2400c2c0 	.word	0x2400c2c0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034e4:	a92a      	add	r1, sp, #168	; 0xa8
 80034e6:	4658      	mov	r0, fp
  sConfig.OffsetSignedSaturation = DISABLE;
 80034e8:	f88d 30c1 	strb.w	r3, [sp, #193]	; 0xc1
  sConfig.Channel = ADC_CHANNEL_5;
 80034ec:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
 80034f0:	ed8d 9b2c 	vstr	d9, [sp, #176]	; 0xb0
 80034f4:	ed8d 8b2e 	vstr	d8, [sp, #184]	; 0xb8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034f8:	f001 f8fe 	bl	80046f8 <HAL_ADC_ConfigChannel>
 80034fc:	4601      	mov	r1, r0
 80034fe:	2800      	cmp	r0, #0
 8003500:	f040 825b 	bne.w	80039ba <main+0x882>
  DAC_ChannelConfTypeDef sConfig = {0};
 8003504:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8003506:	4cc4      	ldr	r4, [pc, #784]	; (8003818 <main+0x6e0>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8003508:	a844      	add	r0, sp, #272	; 0x110
 800350a:	f00b f905 	bl	800e718 <memset>
  hdac1.Instance = DAC1;
 800350e:	4bc3      	ldr	r3, [pc, #780]	; (800381c <main+0x6e4>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003510:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8003512:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003514:	f002 f8e8 	bl	80056e8 <HAL_DAC_Init>
 8003518:	4602      	mov	r2, r0
 800351a:	2800      	cmp	r0, #0
 800351c:	f040 824d 	bne.w	80039ba <main+0x882>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003520:	2101      	movs	r1, #1
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003522:	9048      	str	r0, [sp, #288]	; 0x120
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003524:	2000      	movs	r0, #0
 8003526:	2600      	movs	r6, #0
 8003528:	2716      	movs	r7, #22
 800352a:	e9cd 0146 	strd	r0, r1, [sp, #280]	; 0x118
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800352e:	a944      	add	r1, sp, #272	; 0x110
 8003530:	4620      	mov	r0, r4
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003532:	e9cd 6744 	strd	r6, r7, [sp, #272]	; 0x110
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003536:	f002 fa17 	bl	8005968 <HAL_DAC_ConfigChannel>
 800353a:	4603      	mov	r3, r0
 800353c:	2800      	cmp	r0, #0
 800353e:	f040 823c 	bne.w	80039ba <main+0x882>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003542:	2210      	movs	r2, #16
 8003544:	a944      	add	r1, sp, #272	; 0x110
 8003546:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003548:	9345      	str	r3, [sp, #276]	; 0x114
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800354a:	f002 fa0d 	bl	8005968 <HAL_DAC_ConfigChannel>
 800354e:	2800      	cmp	r0, #0
 8003550:	f040 8233 	bne.w	80039ba <main+0x882>
  hlptim2.Instance = LPTIM2;
 8003554:	48b2      	ldr	r0, [pc, #712]	; (8003820 <main+0x6e8>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003556:	2300      	movs	r3, #0
  hlptim2.Instance = LPTIM2;
 8003558:	4ab2      	ldr	r2, [pc, #712]	; (8003824 <main+0x6ec>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800355a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800355e:	6303      	str	r3, [r0, #48]	; 0x30
  hlptim2.Instance = LPTIM2;
 8003560:	6002      	str	r2, [r0, #0]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003562:	2200      	movs	r2, #0
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003564:	6146      	str	r6, [r0, #20]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003566:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 800356a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800356e:	2300      	movs	r3, #0
 8003570:	e9c0 2308 	strd	r2, r3, [r0, #32]
 8003574:	2300      	movs	r3, #0
 8003576:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800357a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800357e:	f003 fe87 	bl	8007290 <HAL_LPTIM_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2800      	cmp	r0, #0
 8003586:	f040 8218 	bne.w	80039ba <main+0x882>
  htim6.Instance = TIM6;
 800358a:	4ca7      	ldr	r4, [pc, #668]	; (8003828 <main+0x6f0>)
  htim6.Init.Period = 8191;
 800358c:	f641 72ff 	movw	r2, #8191	; 0x1fff
  htim6.Instance = TIM6;
 8003590:	49a6      	ldr	r1, [pc, #664]	; (800382c <main+0x6f4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003592:	9017      	str	r0, [sp, #92]	; 0x5c
  htim6.Init.Period = 8191;
 8003594:	e9c4 0202 	strd	r0, r2, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003598:	2280      	movs	r2, #128	; 0x80
  htim6.Init.Prescaler = 0;
 800359a:	e9c4 1000 	strd	r1, r0, [r4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800359e:	4620      	mov	r0, r4
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035a0:	61a2      	str	r2, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a2:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80035a6:	f006 fcb1 	bl	8009f0c <HAL_TIM_Base_Init>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2800      	cmp	r0, #0
 80035ae:	f040 8204 	bne.w	80039ba <main+0x882>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80035b2:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80035b4:	a917      	add	r1, sp, #92	; 0x5c
 80035b6:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b8:	9319      	str	r3, [sp, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80035ba:	9217      	str	r2, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80035bc:	f007 f8e0 	bl	800a780 <HAL_TIMEx_MasterConfigSynchronization>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2800      	cmp	r0, #0
 80035c4:	f040 81f9 	bne.w	80039ba <main+0x882>
  huart3.Instance = USART3;
 80035c8:	4c99      	ldr	r4, [pc, #612]	; (8003830 <main+0x6f8>)
  huart3.Init.BaudRate = 115200;
 80035ca:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Instance = USART3;
 80035ce:	4999      	ldr	r1, [pc, #612]	; (8003834 <main+0x6fc>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035d0:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 115200;
 80035d2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035d6:	220c      	movs	r2, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 80035d8:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035dc:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035e0:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035e4:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035e8:	f007 fe5c 	bl	800b2a4 <HAL_UART_Init>
 80035ec:	4601      	mov	r1, r0
 80035ee:	2800      	cmp	r0, #0
 80035f0:	f040 81e3 	bne.w	80039ba <main+0x882>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035f4:	4620      	mov	r0, r4
 80035f6:	f007 fee5 	bl	800b3c4 <HAL_UARTEx_SetTxFifoThreshold>
 80035fa:	4601      	mov	r1, r0
 80035fc:	2800      	cmp	r0, #0
 80035fe:	f040 81dc 	bne.w	80039ba <main+0x882>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003602:	4620      	mov	r0, r4
 8003604:	f007 ff20 	bl	800b448 <HAL_UARTEx_SetRxFifoThreshold>
 8003608:	2800      	cmp	r0, #0
 800360a:	f040 81d6 	bne.w	80039ba <main+0x882>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800360e:	4620      	mov	r0, r4
 8003610:	f007 feba 	bl	800b388 <HAL_UARTEx_DisableFifoMode>
 8003614:	4604      	mov	r4, r0
 8003616:	2800      	cmp	r0, #0
 8003618:	f040 81cf 	bne.w	80039ba <main+0x882>
  MX_USB_DEVICE_Init();
 800361c:	f009 fc12 	bl	800ce44 <MX_USB_DEVICE_Init>
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003620:	2001      	movs	r0, #1
 8003622:	2102      	movs	r1, #2
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003624:	2301      	movs	r3, #1
  htim4.Instance = TIM4;
 8003626:	4d84      	ldr	r5, [pc, #528]	; (8003838 <main+0x700>)
 8003628:	4a84      	ldr	r2, [pc, #528]	; (800383c <main+0x704>)
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800362a:	933c      	str	r3, [sp, #240]	; 0xf0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800362c:	9340      	str	r3, [sp, #256]	; 0x100
  sConfig.IC2Filter = 8;
 800362e:	2308      	movs	r3, #8
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003630:	943d      	str	r4, [sp, #244]	; 0xf4
  sConfig.IC2Filter = 8;
 8003632:	9342      	str	r3, [sp, #264]	; 0x108
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003634:	9441      	str	r4, [sp, #260]	; 0x104
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003636:	9414      	str	r4, [sp, #80]	; 0x50
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003638:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800363a:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800363c:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
  sConfig.IC1Filter = 8;
 8003640:	2008      	movs	r0, #8
 8003642:	2102      	movs	r1, #2
 8003644:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003648:	a93a      	add	r1, sp, #232	; 0xe8
 800364a:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 0;
 800364c:	e9c5 2400 	strd	r2, r4, [r5]
  htim4.Init.Period = 65535;
 8003650:	e9c5 4602 	strd	r4, r6, [r5, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003654:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003658:	f006 fdc2 	bl	800a1e0 <HAL_TIM_Encoder_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2800      	cmp	r0, #0
 8003660:	f040 81ab 	bne.w	80039ba <main+0x882>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003664:	a914      	add	r1, sp, #80	; 0x50
 8003666:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003668:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366a:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800366c:	f007 f888 	bl	800a780 <HAL_TIMEx_MasterConfigSynchronization>
 8003670:	4603      	mov	r3, r0
 8003672:	2800      	cmp	r0, #0
 8003674:	f040 81a1 	bne.w	80039ba <main+0x882>
  htim7.Instance = TIM7;
 8003678:	4c71      	ldr	r4, [pc, #452]	; (8003840 <main+0x708>)
  htim7.Init.Period = 8192;
 800367a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  htim7.Instance = TIM7;
 800367e:	4971      	ldr	r1, [pc, #452]	; (8003844 <main+0x70c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003680:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003682:	4620      	mov	r0, r4
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003684:	61a3      	str	r3, [r4, #24]
  htim7.Init.Prescaler = 0;
 8003686:	e9c4 1300 	strd	r1, r3, [r4]
  htim7.Init.Period = 8192;
 800368a:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800368e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003692:	f006 fc3b 	bl	8009f0c <HAL_TIM_Base_Init>
 8003696:	2800      	cmp	r0, #0
 8003698:	f040 818f 	bne.w	80039ba <main+0x882>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800369c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800369e:	a911      	add	r1, sp, #68	; 0x44
 80036a0:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a2:	9311      	str	r3, [sp, #68]	; 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80036a6:	f007 f86b 	bl	800a780 <HAL_TIMEx_MasterConfigSynchronization>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2800      	cmp	r0, #0
 80036ae:	f040 8184 	bne.w	80039ba <main+0x882>
  htim7.Instance = TIM7;
 80036b2:	4964      	ldr	r1, [pc, #400]	; (8003844 <main+0x70c>)
   htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 80036b4:	f247 5230 	movw	r2, #30000	; 0x7530
   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b8:	61a3      	str	r3, [r4, #24]
  htim7.Instance = TIM7;
 80036ba:	6021      	str	r1, [r4, #0]
   htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 80036bc:	60e2      	str	r2, [r4, #12]
   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036be:	e9c4 0001 	strd	r0, r0, [r4, #4]
   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80036c2:	4620      	mov	r0, r4
 80036c4:	f006 fc22 	bl	8009f0c <HAL_TIM_Base_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2800      	cmp	r0, #0
 80036cc:	f040 8175 	bne.w	80039ba <main+0x882>
   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80036d0:	a911      	add	r1, sp, #68	; 0x44
 80036d2:	4620      	mov	r0, r4
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d4:	9311      	str	r3, [sp, #68]	; 0x44
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d6:	9313      	str	r3, [sp, #76]	; 0x4c
   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80036d8:	f007 f852 	bl	800a780 <HAL_TIMEx_MasterConfigSynchronization>
 80036dc:	4603      	mov	r3, r0
 80036de:	2800      	cmp	r0, #0
 80036e0:	f040 816b 	bne.w	80039ba <main+0x882>
  htim2.Instance = TIM2;
 80036e4:	4c58      	ldr	r4, [pc, #352]	; (8003848 <main+0x710>)
 80036e6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  htim2.Init.Period = 10000;
 80036ea:	f242 7210 	movw	r2, #10000	; 0x2710
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ee:	901a      	str	r0, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f0:	900e      	str	r0, [sp, #56]	; 0x38
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f2:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f4:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036f6:	931d      	str	r3, [sp, #116]	; 0x74
  htim2.Init.Prescaler = 0;
 80036f8:	e9c4 6000 	strd	r6, r0, [r4]
  htim2.Init.Period = 10000;
 80036fc:	e9c4 0202 	strd	r0, r2, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003700:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003702:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003706:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800370a:	f006 fbff 	bl	8009f0c <HAL_TIM_Base_Init>
 800370e:	2800      	cmp	r0, #0
 8003710:	f040 8153 	bne.w	80039ba <main+0x882>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003714:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003718:	a91a      	add	r1, sp, #104	; 0x68
 800371a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800371c:	951a      	str	r5, [sp, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800371e:	f006 fea3 	bl	800a468 <HAL_TIM_ConfigClockSource>
 8003722:	2800      	cmp	r0, #0
 8003724:	f040 8149 	bne.w	80039ba <main+0x882>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003728:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800372a:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372c:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800372e:	4620      	mov	r0, r4
 8003730:	f007 f826 	bl	800a780 <HAL_TIMEx_MasterConfigSynchronization>
 8003734:	2800      	cmp	r0, #0
 8003736:	f040 8140 	bne.w	80039ba <main+0x882>
    htim2.Init.Period = 15000;
 800373a:	f643 2398 	movw	r3, #15000	; 0x3a98
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800373e:	60a0      	str	r0, [r4, #8]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003740:	6120      	str	r0, [r4, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003742:	61a0      	str	r0, [r4, #24]
    htim2.Init.Period = 15000;
 8003744:	60e3      	str	r3, [r4, #12]
    htim2.Init.Prescaler = 0;
 8003746:	e9c4 6000 	strd	r6, r0, [r4]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800374a:	4620      	mov	r0, r4
 800374c:	f006 fbde 	bl	8009f0c <HAL_TIM_Base_Init>
 8003750:	2800      	cmp	r0, #0
 8003752:	f040 8132 	bne.w	80039ba <main+0x882>
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003756:	a91a      	add	r1, sp, #104	; 0x68
 8003758:	4620      	mov	r0, r4
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800375a:	951a      	str	r5, [sp, #104]	; 0x68
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800375c:	f006 fe84 	bl	800a468 <HAL_TIM_ConfigClockSource>
 8003760:	4603      	mov	r3, r0
 8003762:	2800      	cmp	r0, #0
 8003764:	f040 8129 	bne.w	80039ba <main+0x882>
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003768:	a90e      	add	r1, sp, #56	; 0x38
 800376a:	4620      	mov	r0, r4
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800376c:	930e      	str	r3, [sp, #56]	; 0x38
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376e:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003770:	f007 f806 	bl	800a780 <HAL_TIMEx_MasterConfigSynchronization>
 8003774:	2800      	cmp	r0, #0
 8003776:	f040 8120 	bne.w	80039ba <main+0x882>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800377a:	4b34      	ldr	r3, [pc, #208]	; (800384c <main+0x714>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	03d9      	lsls	r1, r3, #15
 8003780:	d426      	bmi.n	80037d0 <main+0x698>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003782:	4832      	ldr	r0, [pc, #200]	; (800384c <main+0x714>)
 8003784:	2300      	movs	r3, #0
 8003786:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800378a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800378e:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003792:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003796:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800379a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800379e:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80037a0:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80037a4:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80037a6:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 80037aa:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80037ac:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	d1f8      	bne.n	80037a6 <main+0x66e>
    } while(sets-- != 0U);
 80037b4:	3c20      	subs	r4, #32
 80037b6:	f114 0f20 	cmn.w	r4, #32
 80037ba:	d1f1      	bne.n	80037a0 <main+0x668>
 80037bc:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80037c0:	6943      	ldr	r3, [r0, #20]
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c6:	6143      	str	r3, [r0, #20]
 80037c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037cc:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 80037d0:	f7ff fc8a 	bl	80030e8 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80037d4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037dc:	481c      	ldr	r0, [pc, #112]	; (8003850 <main+0x718>)
 80037de:	f001 fdcf 	bl	8005380 <HAL_ADCEx_Calibration_Start>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	f040 80e9 	bne.w	80039ba <main+0x882>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80037e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037f0:	4818      	ldr	r0, [pc, #96]	; (8003854 <main+0x71c>)
 80037f2:	f001 fdc5 	bl	8005380 <HAL_ADCEx_Calibration_Start>
 80037f6:	4604      	mov	r4, r0
 80037f8:	2800      	cmp	r0, #0
 80037fa:	f040 80de 	bne.w	80039ba <main+0x882>
	HAL_Delay(1);
 80037fe:	2001      	movs	r0, #1
	volume= 0.1;
 8003800:	4e15      	ldr	r6, [pc, #84]	; (8003858 <main+0x720>)
	HAL_Delay(1);
 8003802:	f000 fda9 	bl	8004358 <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8003806:	4621      	mov	r1, r4
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <main+0x700>)
	AMindex  = LSBindex = 1;
 800380a:	2501      	movs	r5, #1
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800380c:	f006 fdcc 	bl	800a3a8 <HAL_TIM_Encoder_Start>
	volume= 0.1;
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <main+0x724>)
	LED_GREEN_ON;
 8003812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003816:	e023      	b.n	8003860 <main+0x728>
 8003818:	2400c328 	.word	0x2400c328
 800381c:	40007400 	.word	0x40007400
 8003820:	2400c430 	.word	0x2400c430
 8003824:	58002400 	.word	0x58002400
 8003828:	2400c500 	.word	0x2400c500
 800382c:	40001000 	.word	0x40001000
 8003830:	2400c598 	.word	0x2400c598
 8003834:	40004800 	.word	0x40004800
 8003838:	2400c4b4 	.word	0x2400c4b4
 800383c:	40000800 	.word	0x40000800
 8003840:	2400c54c 	.word	0x2400c54c
 8003844:	40001400 	.word	0x40001400
 8003848:	2400c468 	.word	0x2400c468
 800384c:	e000ed00 	.word	0xe000ed00
 8003850:	2400c25c 	.word	0x2400c25c
 8003854:	2400c2c0 	.word	0x2400c2c0
 8003858:	3dcccccd 	.word	0x3dcccccd
 800385c:	2400d7ec 	.word	0x2400d7ec
 8003860:	486f      	ldr	r0, [pc, #444]	; (8003a20 <main+0x8e8>)
 8003862:	2201      	movs	r2, #1
	volume= 0.1;
 8003864:	601e      	str	r6, [r3, #0]
	LED_GREEN_ON;
 8003866:	f003 fd01 	bl	800726c <HAL_GPIO_WritePin>
	LED_GREEN_OFF;
 800386a:	4622      	mov	r2, r4
 800386c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003870:	486b      	ldr	r0, [pc, #428]	; (8003a20 <main+0x8e8>)
 8003872:	f003 fcfb 	bl	800726c <HAL_GPIO_WritePin>
	SetFstep(2);
 8003876:	2002      	movs	r0, #2
 8003878:	f7fd fa4a 	bl	8000d10 <SetFstep>
	cwpitch = CWPITCH;
 800387c:	4b69      	ldr	r3, [pc, #420]	; (8003a24 <main+0x8ec>)
 800387e:	4a6a      	ldr	r2, [pc, #424]	; (8003a28 <main+0x8f0>)
	meanavg = 0.f;
 8003880:	2100      	movs	r1, #0
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8003882:	4f6a      	ldr	r7, [pc, #424]	; (8003a2c <main+0x8f4>)
	CarrierEnable(0);
 8003884:	4620      	mov	r0, r4
	cwpitch = CWPITCH;
 8003886:	601a      	str	r2, [r3, #0]
	meanavg = 0.f;
 8003888:	4a69      	ldr	r2, [pc, #420]	; (8003a30 <main+0x8f8>)
	os_time = 0;
 800388a:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <main+0x8fc>)
	meanavg = 0.f;
 800388c:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 800388e:	4a6a      	ldr	r2, [pc, #424]	; (8003a38 <main+0x900>)
 8003890:	496a      	ldr	r1, [pc, #424]	; (8003a3c <main+0x904>)
	os_time = 0;
 8003892:	601c      	str	r4, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8003894:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8003896:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 800389a:	4a69      	ldr	r2, [pc, #420]	; (8003a40 <main+0x908>)
	AGC_decay[Fast] = 0.9995f;
 800389c:	4b69      	ldr	r3, [pc, #420]	; (8003a44 <main+0x90c>)
	Muted   = false;
 800389e:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 80038a0:	4a69      	ldr	r2, [pc, #420]	; (8003a48 <main+0x910>)
 80038a2:	8015      	strh	r5, [r2, #0]
 80038a4:	4a69      	ldr	r2, [pc, #420]	; (8003a4c <main+0x914>)
 80038a6:	8015      	strh	r5, [r2, #0]
	USBindex = CWindex  = 1;
 80038a8:	4a69      	ldr	r2, [pc, #420]	; (8003a50 <main+0x918>)
 80038aa:	8015      	strh	r5, [r2, #0]
 80038ac:	4a69      	ldr	r2, [pc, #420]	; (8003a54 <main+0x91c>)
 80038ae:	8015      	strh	r5, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 80038b0:	4a69      	ldr	r2, [pc, #420]	; (8003a58 <main+0x920>)
 80038b2:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 80038b4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 80038b8:	4a68      	ldr	r2, [pc, #416]	; (8003a5c <main+0x924>)
 80038ba:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 80038bc:	4a68      	ldr	r2, [pc, #416]	; (8003a60 <main+0x928>)
 80038be:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 80038c0:	4a68      	ldr	r2, [pc, #416]	; (8003a64 <main+0x92c>)
 80038c2:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 80038c4:	4b68      	ldr	r3, [pc, #416]	; (8003a68 <main+0x930>)
 80038c6:	4a69      	ldr	r2, [pc, #420]	; (8003a6c <main+0x934>)
 80038c8:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 80038ca:	4b69      	ldr	r3, [pc, #420]	; (8003a70 <main+0x938>)
 80038cc:	4a69      	ldr	r2, [pc, #420]	; (8003a74 <main+0x93c>)
 80038ce:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 80038d0:	4a69      	ldr	r2, [pc, #420]	; (8003a78 <main+0x940>)
 80038d2:	4b6a      	ldr	r3, [pc, #424]	; (8003a7c <main+0x944>)
 80038d4:	601a      	str	r2, [r3, #0]
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <main+0x948>)
 80038d8:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 80038da:	f7ff fad9 	bl	8002e90 <CarrierEnable>
	TXSwitch(0);
 80038de:	4620      	mov	r0, r4
 80038e0:	f7ff fa72 	bl	8002dc8 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 80038e4:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <main+0x94c>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 80038e6:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 80038e8:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80038ec:	4966      	ldr	r1, [pc, #408]	; (8003a88 <main+0x950>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 80038ee:	9303      	str	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 80038f0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 80038f4:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 80038f6:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003a8c <main+0x954>
	__HAL_RCC_PLL2_DISABLE();
 80038fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.1;
 80038fe:	4864      	ldr	r0, [pc, #400]	; (8003a90 <main+0x958>)
	__HAL_RCC_PLL2_DISABLE();
 8003900:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003902:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003904:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800390c:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8003a18 <main+0x8e0>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003910:	6293      	str	r3, [r2, #40]	; 0x28
 8003912:	9b03      	ldr	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003914:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003918:	3b01      	subs	r3, #1
 800391a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391e:	4319      	orrs	r1, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003920:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003924:	6391      	str	r1, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8003926:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003928:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 800392c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003930:	6013      	str	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003932:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <main+0x95c>)
	CWThreshold = 0.1;
 8003934:	6006      	str	r6, [r0, #0]
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003936:	f44f 6600 	mov.w	r6, #2048	; 0x800
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800393a:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800393e:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8003942:	f7fe fa4f 	bl	8001de4 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003946:	4954      	ldr	r1, [pc, #336]	; (8003a98 <main+0x960>)
 8003948:	2204      	movs	r2, #4
 800394a:	4f54      	ldr	r7, [pc, #336]	; (8003a9c <main+0x964>)
 800394c:	4b54      	ldr	r3, [pc, #336]	; (8003aa0 <main+0x968>)
 800394e:	4855      	ldr	r0, [pc, #340]	; (8003aa4 <main+0x96c>)
 8003950:	e9cd 1600 	strd	r1, r6, [sp]
 8003954:	2140      	movs	r1, #64	; 0x40
 8003956:	f00a f943 	bl	800dbe0 <arm_fir_decimate_init_f32>
 800395a:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 800395c:	b100      	cbz	r0, 8003960 <main+0x828>
 800395e:	e7fe      	b.n	800395e <main+0x826>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8003960:	4a51      	ldr	r2, [pc, #324]	; (8003aa8 <main+0x970>)
 8003962:	2140      	movs	r1, #64	; 0x40
 8003964:	4b4e      	ldr	r3, [pc, #312]	; (8003aa0 <main+0x968>)
 8003966:	4851      	ldr	r0, [pc, #324]	; (8003aac <main+0x974>)
 8003968:	e9cd 2600 	strd	r2, r6, [sp]
 800396c:	2204      	movs	r2, #4
 800396e:	f00a f937 	bl	800dbe0 <arm_fir_decimate_init_f32>
 8003972:	4604      	mov	r4, r0
 8003974:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8003976:	bb10      	cbnz	r0, 80039be <main+0x886>
	Load_Presets();
 8003978:	f7fc fff2 	bl	8000960 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 800397c:	4628      	mov	r0, r5
 800397e:	f7fd f8d5 	bl	8000b2c <Tune_Preset>
	keyerState = IDLE;
 8003982:	4b4b      	ldr	r3, [pc, #300]	; (8003ab0 <main+0x978>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8003984:	2710      	movs	r7, #16
	keyer_speed = 15;
 8003986:	200f      	movs	r0, #15
	keyerState = IDLE;
 8003988:	701c      	strb	r4, [r3, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 800398a:	4b4a      	ldr	r3, [pc, #296]	; (8003ab4 <main+0x97c>)
 800398c:	701f      	strb	r7, [r3, #0]
	keyer_speed = 15;
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <main+0x980>)
 8003990:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 8003992:	f7fc fe7f 	bl	8000694 <loadWPM>
	keyer_mode = 1; //->  iambic
 8003996:	4b49      	ldr	r3, [pc, #292]	; (8003abc <main+0x984>)
	txdelay = 10;
 8003998:	210a      	movs	r1, #10
 800399a:	4a49      	ldr	r2, [pc, #292]	; (8003ac0 <main+0x988>)
	keyer_mode = 1; //->  iambic
 800399c:	701d      	strb	r5, [r3, #0]
	keyer_swap = 0; //->  DI/DAH
 800399e:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <main+0x98c>)
	txdelay = 10;
 80039a0:	7011      	strb	r1, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 80039a2:	701c      	strb	r4, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 80039a4:	4b48      	ldr	r3, [pc, #288]	; (8003ac8 <main+0x990>)
 80039a6:	601e      	str	r6, [r3, #0]
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 80039a8:	f7fe fc9e 	bl	80022e8 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 80039ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b0:	4946      	ldr	r1, [pc, #280]	; (8003acc <main+0x994>)
 80039b2:	4847      	ldr	r0, [pc, #284]	; (8003ad0 <main+0x998>)
 80039b4:	f001 fd36 	bl	8005424 <HAL_ADCEx_MultiModeStart_DMA>
 80039b8:	b110      	cbz	r0, 80039c0 <main+0x888>
    Error_Handler();
 80039ba:	f7ff fac7 	bl	8002f4c <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 80039be:	e7fe      	b.n	80039be <main+0x886>
	 if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80039c0:	4844      	ldr	r0, [pc, #272]	; (8003ad4 <main+0x99c>)
 80039c2:	f006 fbb1 	bl	800a128 <HAL_TIM_Base_Start_IT>
 80039c6:	4604      	mov	r4, r0
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d1f6      	bne.n	80039ba <main+0x882>
	HAL_TIM_Base_Start(&htim6);
 80039cc:	4842      	ldr	r0, [pc, #264]	; (8003ad8 <main+0x9a0>)
 80039ce:	f006 fb53 	bl	800a078 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 80039d2:	4842      	ldr	r0, [pc, #264]	; (8003adc <main+0x9a4>)
 80039d4:	f006 fb50 	bl	800a078 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80039d8:	4621      	mov	r1, r4
 80039da:	4841      	ldr	r0, [pc, #260]	; (8003ae0 <main+0x9a8>)
 80039dc:	f001 fe9a 	bl	8005714 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 80039e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e4:	4a3f      	ldr	r2, [pc, #252]	; (8003ae4 <main+0x9ac>)
 80039e6:	4621      	mov	r1, r4
 80039e8:	483d      	ldr	r0, [pc, #244]	; (8003ae0 <main+0x9a8>)
 80039ea:	9400      	str	r4, [sp, #0]
 80039ec:	f001 fec6 	bl	800577c <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 fcc9 	bl	8004388 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80039f6:	4639      	mov	r1, r7
 80039f8:	4839      	ldr	r0, [pc, #228]	; (8003ae0 <main+0x9a8>)
 80039fa:	f001 fe8b 	bl	8005714 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 80039fe:	4623      	mov	r3, r4
 8003a00:	4622      	mov	r2, r4
 8003a02:	4639      	mov	r1, r7
 8003a04:	4836      	ldr	r0, [pc, #216]	; (8003ae0 <main+0x9a8>)
 8003a06:	f001 ff45 	bl	8005894 <HAL_DAC_SetValue>
		UserInput();
 8003a0a:	f7fe fe7d 	bl	8002708 <UserInput>
		HAL_Delay(100);
 8003a0e:	2064      	movs	r0, #100	; 0x64
 8003a10:	f000 fca2 	bl	8004358 <HAL_Delay>
		if (ubADCDualConversionComplete == RESET)
 8003a14:	e7f9      	b.n	8003a0a <main+0x8d2>
 8003a16:	bf00      	nop
 8003a18:	829e1bf8 	.word	0x829e1bf8
 8003a1c:	3feffff8 	.word	0x3feffff8
 8003a20:	58020400 	.word	0x58020400
 8003a24:	24009a54 	.word	0x24009a54
 8003a28:	44228000 	.word	0x44228000
 8003a2c:	240070ac 	.word	0x240070ac
 8003a30:	2400c638 	.word	0x2400c638
 8003a34:	2400c65c 	.word	0x2400c65c
 8003a38:	240070a4 	.word	0x240070a4
 8003a3c:	3f7cac08 	.word	0x3f7cac08
 8003a40:	2400709c 	.word	0x2400709c
 8003a44:	24001640 	.word	0x24001640
 8003a48:	24007094 	.word	0x24007094
 8003a4c:	24001648 	.word	0x24001648
 8003a50:	24001e68 	.word	0x24001e68
 8003a54:	24007110 	.word	0x24007110
 8003a58:	24009a50 	.word	0x24009a50
 8003a5c:	24009a40 	.word	0x24009a40
 8003a60:	3f7fdf3b 	.word	0x3f7fdf3b
 8003a64:	3f7ffcb9 	.word	0x3f7ffcb9
 8003a68:	24006080 	.word	0x24006080
 8003a6c:	001e0002 	.word	0x001e0002
 8003a70:	2400164c 	.word	0x2400164c
 8003a74:	3949539c 	.word	0x3949539c
 8003a78:	3ca3d70a 	.word	0x3ca3d70a
 8003a7c:	2400c660 	.word	0x2400c660
 8003a80:	4af42400 	.word	0x4af42400
 8003a84:	58024400 	.word	0x58024400
 8003a88:	01012e00 	.word	0x01012e00
 8003a8c:	3b800000 	.word	0x3b800000
 8003a90:	24001e64 	.word	0x24001e64
 8003a94:	24001e60 	.word	0x24001e60
 8003a98:	24003f80 	.word	0x24003f80
 8003a9c:	24009a44 	.word	0x24009a44
 8003aa0:	240000ec 	.word	0x240000ec
 8003aa4:	240070c0 	.word	0x240070c0
 8003aa8:	24001e84 	.word	0x24001e84
 8003aac:	240070b4 	.word	0x240070b4
 8003ab0:	2400c629 	.word	0x2400c629
 8003ab4:	2400c628 	.word	0x2400c628
 8003ab8:	2400c62c 	.word	0x2400c62c
 8003abc:	2400c62a 	.word	0x2400c62a
 8003ac0:	2400d7e9 	.word	0x2400d7e9
 8003ac4:	2400c630 	.word	0x2400c630
 8003ac8:	24007108 	.word	0x24007108
 8003acc:	24009240 	.word	0x24009240
 8003ad0:	2400c25c 	.word	0x2400c25c
 8003ad4:	2400c54c 	.word	0x2400c54c
 8003ad8:	2400c500 	.word	0x2400c500
 8003adc:	2400c468 	.word	0x2400c468
 8003ae0:	2400c328 	.word	0x2400c328
 8003ae4:	24001660 	.word	0x24001660

08003ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	4c14      	ldr	r4, [pc, #80]	; (8003b3c <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003aec:	2102      	movs	r1, #2
{
 8003aee:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003af0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003af6:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afa:	430b      	orrs	r3, r1
 8003afc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003b00:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003b04:	400b      	ands	r3, r1
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003b0a:	f001 fd8b 	bl	8005624 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8003b0e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8003b12:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8003b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b18:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003b1c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8003b28:	f000 fc2e 	bl	8004388 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8003b2c:	f000 fc40 	bl	80043b0 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8003b30:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b32:	b002      	add	sp, #8
 8003b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8003b38:	f000 bc30 	b.w	800439c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8003b3c:	58024400 	.word	0x58024400

08003b40 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003b40:	494c      	ldr	r1, [pc, #304]	; (8003c74 <HAL_ADC_MspInit+0x134>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b42:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003b44:	6802      	ldr	r2, [r0, #0]
{
 8003b46:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8003b48:	428a      	cmp	r2, r1
{
 8003b4a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003b50:	9306      	str	r3, [sp, #24]
 8003b52:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8003b56:	d029      	beq.n	8003bac <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003b58:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_ADC_MspInit+0x138>)
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d001      	beq.n	8003b62 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003b5e:	b00a      	add	sp, #40	; 0x28
 8003b60:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003b62:	4a46      	ldr	r2, [pc, #280]	; (8003c7c <HAL_ADC_MspInit+0x13c>)
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003b68:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003b6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003b6c:	d070      	beq.n	8003c50 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b6e:	4b44      	ldr	r3, [pc, #272]	; (8003c80 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b70:	2402      	movs	r4, #2
 8003b72:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b74:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	4842      	ldr	r0, [pc, #264]	; (8003c84 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7c:	f042 0202 	orr.w	r2, r2, #2
 8003b80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	9303      	str	r3, [sp, #12]
 8003b8e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b90:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b94:	f003 fa2a 	bl	8006fec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2012      	movs	r0, #18
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	f001 fd41 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003ba2:	2012      	movs	r0, #18
 8003ba4:	f001 fd7c 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 8003ba8:	b00a      	add	sp, #40	; 0x28
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003bac:	4a33      	ldr	r2, [pc, #204]	; (8003c7c <HAL_ADC_MspInit+0x13c>)
 8003bae:	4604      	mov	r4, r0
 8003bb0:	6813      	ldr	r3, [r2, #0]
 8003bb2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003bb4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003bb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003bb8:	d03c      	beq.n	8003c34 <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bba:	4b31      	ldr	r3, [pc, #196]	; (8003c80 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbc:	a904      	add	r1, sp, #16
 8003bbe:	4831      	ldr	r0, [pc, #196]	; (8003c84 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 8003bc4:	4d30      	ldr	r5, [pc, #192]	; (8003c88 <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc6:	f042 0202 	orr.w	r2, r2, #2
 8003bca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bce:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bda:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bdc:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bde:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be2:	f003 fa03 	bl	8006fec <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8003be6:	4929      	ldr	r1, [pc, #164]	; (8003c8c <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003be8:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bea:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003bec:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bee:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003bf0:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bfc:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c00:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c0c:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c14:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c16:	f002 f851 	bl	8005cbc <HAL_DMA_Init>
 8003c1a:	bb38      	cbnz	r0, 8003c6c <HAL_ADC_MspInit+0x12c>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c20:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003c22:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c24:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003c26:	f001 fcfd 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003c2a:	2012      	movs	r0, #18
 8003c2c:	f001 fd38 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 8003c30:	b00a      	add	sp, #40	; 0x28
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003c34:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_ADC_MspInit+0x140>)
 8003c36:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c3a:	f042 0220 	orr.w	r2, r2, #32
 8003c3e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	9b00      	ldr	r3, [sp, #0]
 8003c4e:	e7b4      	b.n	8003bba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_ADC_MspInit+0x140>)
 8003c52:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c56:	f042 0220 	orr.w	r2, r2, #32
 8003c5a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003c5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	9302      	str	r3, [sp, #8]
 8003c68:	9b02      	ldr	r3, [sp, #8]
 8003c6a:	e780      	b.n	8003b6e <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 8003c6c:	f7ff f96e 	bl	8002f4c <Error_Handler>
 8003c70:	e7d4      	b.n	8003c1c <HAL_ADC_MspInit+0xdc>
 8003c72:	bf00      	nop
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40022100 	.word	0x40022100
 8003c7c:	2400d7f0 	.word	0x2400d7f0
 8003c80:	58024400 	.word	0x58024400
 8003c84:	58020400 	.word	0x58020400
 8003c88:	2400c33c 	.word	0x2400c33c
 8003c8c:	40020010 	.word	0x40020010

08003c90 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003c90:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <HAL_DAC_MspInit+0xb4>)
 8003c92:	6802      	ldr	r2, [r0, #0]
{
 8003c94:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8003c96:	429a      	cmp	r2, r3
{
 8003c98:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9a:	f04f 0400 	mov.w	r4, #0
 8003c9e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003ca2:	9404      	str	r4, [sp, #16]
 8003ca4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8003ca8:	d001      	beq.n	8003cae <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003caa:	b008      	add	sp, #32
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003cae:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_DAC_MspInit+0xb8>)
 8003cb0:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb2:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003cb4:	4e25      	ldr	r6, [pc, #148]	; (8003d4c <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003cb6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003cba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003cbe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003cc2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003cc6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003cca:	9200      	str	r2, [sp, #0]
 8003ccc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003cda:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ce6:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce8:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cea:	4819      	ldr	r0, [pc, #100]	; (8003d50 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003cec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf0:	f003 f97c 	bl	8006fec <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003cf6:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003cf8:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003cfa:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cfc:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003cfe:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d04:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d0a:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d10:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003d12:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d14:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d16:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d1e:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003d20:	f001 ffcc 	bl	8005cbc <HAL_DMA_Init>
 8003d24:	b958      	cbnz	r0, 8003d3e <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003d26:	2200      	movs	r2, #0
 8003d28:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003d2a:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003d2c:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003d2e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003d30:	f001 fc78 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d34:	2036      	movs	r0, #54	; 0x36
 8003d36:	f001 fcb3 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 8003d3a:	b008      	add	sp, #32
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003d3e:	f7ff f905 	bl	8002f4c <Error_Handler>
 8003d42:	e7f0      	b.n	8003d26 <HAL_DAC_MspInit+0x96>
 8003d44:	40007400 	.word	0x40007400
 8003d48:	58024400 	.word	0x58024400
 8003d4c:	2400c3b4 	.word	0x2400c3b4
 8003d50:	58020000 	.word	0x58020000
 8003d54:	40020028 	.word	0x40020028

08003d58 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8003d58:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5a:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8003d5c:	6801      	ldr	r1, [r0, #0]
{
 8003d5e:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 8003d60:	4291      	cmp	r1, r2
{
 8003d62:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003d68:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003d6c:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8003d6e:	d001      	beq.n	8003d74 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8003d70:	b008      	add	sp, #32
 8003d72:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003d74:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003d76:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d78:	a902      	add	r1, sp, #8
 8003d7a:	4815      	ldr	r0, [pc, #84]	; (8003dd0 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003d7c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d84:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003d88:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003d8c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003d90:	9200      	str	r2, [sp, #0]
 8003d92:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d98:	f042 0202 	orr.w	r2, r2, #2
 8003d9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003da4:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da6:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003daa:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8003dc0 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003db2:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db6:	f003 f919 	bl	8006fec <HAL_GPIO_Init>
}
 8003dba:	b008      	add	sp, #32
 8003dbc:	bd10      	pop	{r4, pc}
 8003dbe:	bf00      	nop
 8003dc0:	00000400 	.word	0x00000400
 8003dc4:	00000002 	.word	0x00000002
 8003dc8:	58002400 	.word	0x58002400
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	58020400 	.word	0x58020400

08003dd4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8003dd4:	6803      	ldr	r3, [r0, #0]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8003dda:	b510      	push	{r4, lr}
 8003ddc:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 8003dde:	d007      	beq.n	8003df0 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8003de0:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <HAL_TIM_Base_MspInit+0xac>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01c      	beq.n	8003e20 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8003de6:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <HAL_TIM_Base_MspInit+0xb0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d031      	beq.n	8003e50 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003dec:	b004      	add	sp, #16
 8003dee:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8003df2:	201c      	movs	r0, #28
 8003df4:	2200      	movs	r2, #0
 8003df6:	2104      	movs	r1, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003df8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8003dfc:	f044 0401 	orr.w	r4, r4, #1
 8003e00:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8003e10:	f001 fc08 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e14:	201c      	movs	r0, #28
}
 8003e16:	b004      	add	sp, #16
 8003e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e1c:	f001 bc40 	b.w	80056a0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e20:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003e22:	2036      	movs	r0, #54	; 0x36
 8003e24:	2200      	movs	r2, #0
 8003e26:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e28:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8003e2c:	f044 0410 	orr.w	r4, r4, #16
 8003e30:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	9302      	str	r3, [sp, #8]
 8003e3e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003e40:	f001 fbf0 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e44:	2036      	movs	r0, #54	; 0x36
}
 8003e46:	b004      	add	sp, #16
 8003e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e4c:	f001 bc28 	b.w	80056a0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e50:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8003e52:	2037      	movs	r0, #55	; 0x37
 8003e54:	2200      	movs	r2, #0
 8003e56:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e58:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8003e5c:	f044 0420 	orr.w	r4, r4, #32
 8003e60:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	9303      	str	r3, [sp, #12]
 8003e6e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8003e70:	f001 fbd8 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e74:	2037      	movs	r0, #55	; 0x37
}
 8003e76:	b004      	add	sp, #16
 8003e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e7c:	f001 bc10 	b.w	80056a0 <HAL_NVIC_EnableIRQ>
 8003e80:	40001000 	.word	0x40001000
 8003e84:	40001400 	.word	0x40001400
 8003e88:	58024400 	.word	0x58024400
 8003e8c:	00000000 	.word	0x00000000

08003e90 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8003e90:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e92:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8003e94:	6801      	ldr	r1, [r0, #0]
{
 8003e96:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 8003e98:	4291      	cmp	r1, r2
{
 8003e9a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003ea0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ea4:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8003ea6:	d002      	beq.n	8003eae <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ea8:	b009      	add	sp, #36	; 0x24
 8003eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eb0:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eb2:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eb4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003eb8:	f042 0204 	orr.w	r2, r2, #4
 8003ebc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003ec0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003ec4:	f002 0204 	and.w	r2, r2, #4
 8003ec8:	9200      	str	r2, [sp, #0]
 8003eca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ed0:	f042 0208 	orr.w	r2, r2, #8
 8003ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ed8:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ede:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ee0:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ee4:	480a      	ldr	r0, [pc, #40]	; (8003f10 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ee6:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003eec:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8003f00 <HAL_TIM_Encoder_MspInit+0x70>
 8003ef0:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ef4:	f003 f87a 	bl	8006fec <HAL_GPIO_Init>
}
 8003ef8:	b009      	add	sp, #36	; 0x24
 8003efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8003efe:	bf00      	nop
 8003f00:	00003000 	.word	0x00003000
 8003f04:	00000002 	.word	0x00000002
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	58020c00 	.word	0x58020c00

08003f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f14:	b5d0      	push	{r4, r6, r7, lr}
 8003f16:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f18:	2100      	movs	r1, #0
{
 8003f1a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f1c:	22bc      	movs	r2, #188	; 0xbc
 8003f1e:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	9108      	str	r1, [sp, #32]
 8003f22:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003f26:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f2a:	f00a fbf5 	bl	800e718 <memset>
  if(huart->Instance==USART3)
 8003f2e:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_UART_MspInit+0xd0>)
 8003f30:	6822      	ldr	r2, [r4, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f36:	b038      	add	sp, #224	; 0xe0
 8003f38:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f3a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f3c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f3e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f40:	f004 ff08 	bl	8008d54 <HAL_RCCEx_PeriphCLKConfig>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d149      	bne.n	8003fdc <HAL_UART_MspInit+0xc8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f4a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f4e:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f50:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f56:	2600      	movs	r6, #0
 8003f58:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f5e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003f62:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003f66:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003f6a:	9201      	str	r2, [sp, #4]
 8003f6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f72:	f042 0202 	orr.w	r2, r2, #2
 8003f76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f7e:	f002 0202 	and.w	r2, r2, #2
 8003f82:	9202      	str	r2, [sp, #8]
 8003f84:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f96:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f98:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa2:	a904      	add	r1, sp, #16
 8003fa4:	4811      	ldr	r0, [pc, #68]	; (8003fec <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003fa8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fac:	f003 f81e 	bl	8006fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fb6:	a904      	add	r1, sp, #16
 8003fb8:	480d      	ldr	r0, [pc, #52]	; (8003ff0 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fba:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fc0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fc4:	f003 f812 	bl	8006fec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2101      	movs	r1, #1
 8003fcc:	2027      	movs	r0, #39	; 0x27
 8003fce:	f001 fb29 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fd2:	2027      	movs	r0, #39	; 0x27
 8003fd4:	f001 fb64 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 8003fd8:	b038      	add	sp, #224	; 0xe0
 8003fda:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003fdc:	f7fe ffb6 	bl	8002f4c <Error_Handler>
 8003fe0:	e7b2      	b.n	8003f48 <HAL_UART_MspInit+0x34>
 8003fe2:	bf00      	nop
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	58020400 	.word	0x58020400
 8003ff0:	58020c00 	.word	0x58020c00

08003ff4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop

08003ff8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ff8:	e7fe      	b.n	8003ff8 <HardFault_Handler>
 8003ffa:	bf00      	nop

08003ffc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ffc:	e7fe      	b.n	8003ffc <MemManage_Handler>
 8003ffe:	bf00      	nop

08004000 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004000:	e7fe      	b.n	8004000 <BusFault_Handler>
 8004002:	bf00      	nop

08004004 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004004:	e7fe      	b.n	8004004 <UsageFault_Handler>
 8004006:	bf00      	nop

08004008 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8004008:	f000 b93c 	b.w	8004284 <ADC3_IRQHandler>

0800400c <DebugMon_Handler>:
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop

08004010 <PendSV_Handler>:
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop

08004014 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004014:	f000 b98e 	b.w	8004334 <HAL_IncTick>

08004018 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004018:	4801      	ldr	r0, [pc, #4]	; (8004020 <DMA1_Stream0_IRQHandler+0x8>)
 800401a:	f002 bc97 	b.w	800694c <HAL_DMA_IRQHandler>
 800401e:	bf00      	nop
 8004020:	2400c33c 	.word	0x2400c33c

08004024 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004024:	4801      	ldr	r0, [pc, #4]	; (800402c <DMA1_Stream1_IRQHandler+0x8>)
 8004026:	f002 bc91 	b.w	800694c <HAL_DMA_IRQHandler>
 800402a:	bf00      	nop
 800402c:	2400c3b4 	.word	0x2400c3b4

08004030 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004030:	4804      	ldr	r0, [pc, #16]	; (8004044 <ADC_IRQHandler+0x14>)
{
 8004032:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 8004034:	f000 f9dc 	bl	80043f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004038:	4803      	ldr	r0, [pc, #12]	; (8004048 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800403a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 800403e:	f000 b9d7 	b.w	80043f0 <HAL_ADC_IRQHandler>
 8004042:	bf00      	nop
 8004044:	2400c25c 	.word	0x2400c25c
 8004048:	2400c2c0 	.word	0x2400c2c0

0800404c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800404c:	4801      	ldr	r0, [pc, #4]	; (8004054 <TIM2_IRQHandler+0x8>)
 800404e:	f006 badf 	b.w	800a610 <HAL_TIM_IRQHandler>
 8004052:	bf00      	nop
 8004054:	2400c468 	.word	0x2400c468

08004058 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <USART3_IRQHandler+0x8>)
 800405a:	f006 bc01 	b.w	800a860 <HAL_UART_IRQHandler>
 800405e:	bf00      	nop
 8004060:	2400c598 	.word	0x2400c598

08004064 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 8004064:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004068:	f003 b904 	b.w	8007274 <HAL_GPIO_EXTI_IRQHandler>

0800406c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800406c:	4804      	ldr	r0, [pc, #16]	; (8004080 <TIM6_DAC_IRQHandler+0x14>)
{
 800406e:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8004070:	f001 fc46 	bl	8005900 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004074:	4803      	ldr	r0, [pc, #12]	; (8004084 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800407a:	f006 bac9 	b.w	800a610 <HAL_TIM_IRQHandler>
 800407e:	bf00      	nop
 8004080:	2400c328 	.word	0x2400c328
 8004084:	2400c500 	.word	0x2400c500

08004088 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004088:	4801      	ldr	r0, [pc, #4]	; (8004090 <TIM7_IRQHandler+0x8>)
 800408a:	f006 bac1 	b.w	800a610 <HAL_TIM_IRQHandler>
 800408e:	bf00      	nop
 8004090:	2400c54c 	.word	0x2400c54c

08004094 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004094:	4801      	ldr	r0, [pc, #4]	; (800409c <OTG_FS_IRQHandler+0x8>)
 8004096:	f003 ba25 	b.w	80074e4 <HAL_PCD_IRQHandler>
 800409a:	bf00      	nop
 800409c:	2400ecd0 	.word	0x2400ecd0

080040a0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80040a0:	2001      	movs	r0, #1
 80040a2:	4770      	bx	lr

080040a4 <_kill>:

int _kill(int pid, int sig)
{
 80040a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040a6:	f00a faff 	bl	800e6a8 <__errno>
 80040aa:	2216      	movs	r2, #22
 80040ac:	4603      	mov	r3, r0
	return -1;
}
 80040ae:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	bd08      	pop	{r3, pc}
 80040b6:	bf00      	nop

080040b8 <_exit>:

void _exit (int status)
{
 80040b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040ba:	f00a faf5 	bl	800e6a8 <__errno>
 80040be:	2316      	movs	r3, #22
 80040c0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80040c2:	e7fe      	b.n	80040c2 <_exit+0xa>

080040c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040c4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c6:	1e16      	subs	r6, r2, #0
 80040c8:	dd07      	ble.n	80040da <_read+0x16>
 80040ca:	460c      	mov	r4, r1
 80040cc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80040ce:	f3af 8000 	nop.w
 80040d2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d6:	42a5      	cmp	r5, r4
 80040d8:	d1f9      	bne.n	80040ce <_read+0xa>
	}

return len;
}
 80040da:	4630      	mov	r0, r6
 80040dc:	bd70      	pop	{r4, r5, r6, pc}
 80040de:	bf00      	nop

080040e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e2:	1e16      	subs	r6, r2, #0
 80040e4:	dd07      	ble.n	80040f6 <_write+0x16>
 80040e6:	460c      	mov	r4, r1
 80040e8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80040ea:	f814 0b01 	ldrb.w	r0, [r4], #1
 80040ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f2:	42ac      	cmp	r4, r5
 80040f4:	d1f9      	bne.n	80040ea <_write+0xa>
	}
	return len;
}
 80040f6:	4630      	mov	r0, r6
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	bf00      	nop

080040fc <_close>:

int _close(int file)
{
	return -1;
}
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop

08004104 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004108:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800410a:	604b      	str	r3, [r1, #4]
}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop

08004110 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004110:	2001      	movs	r0, #1
 8004112:	4770      	bx	lr

08004114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004114:	2000      	movs	r0, #0
 8004116:	4770      	bx	lr

08004118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004118:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800411a:	4c0d      	ldr	r4, [pc, #52]	; (8004150 <_sbrk+0x38>)
{
 800411c:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800411e:	490d      	ldr	r1, [pc, #52]	; (8004154 <_sbrk+0x3c>)
 8004120:	4d0d      	ldr	r5, [pc, #52]	; (8004158 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8004122:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004124:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8004126:	b12a      	cbz	r2, 8004134 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004128:	4413      	add	r3, r2
 800412a:	428b      	cmp	r3, r1
 800412c:	d808      	bhi.n	8004140 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800412e:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8004130:	6023      	str	r3, [r4, #0]
}
 8004132:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8004134:	4809      	ldr	r0, [pc, #36]	; (800415c <_sbrk+0x44>)
 8004136:	4602      	mov	r2, r0
 8004138:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800413a:	4413      	add	r3, r2
 800413c:	428b      	cmp	r3, r1
 800413e:	d9f6      	bls.n	800412e <_sbrk+0x16>
    errno = ENOMEM;
 8004140:	f00a fab2 	bl	800e6a8 <__errno>
 8004144:	230c      	movs	r3, #12
    return (void *)-1;
 8004146:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800414a:	6003      	str	r3, [r0, #0]
}
 800414c:	4610      	mov	r0, r2
 800414e:	bd38      	pop	{r3, r4, r5, pc}
 8004150:	2400d7f4 	.word	0x2400d7f4
 8004154:	24080000 	.word	0x24080000
 8004158:	00000400 	.word	0x00000400
 800415c:	2400f308 	.word	0x2400f308

08004160 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004160:	4929      	ldr	r1, [pc, #164]	; (8004208 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004162:	4a2a      	ldr	r2, [pc, #168]	; (800420c <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004164:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 800416c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	2b06      	cmp	r3, #6
 800417a:	d805      	bhi.n	8004188 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800417c:	6813      	ldr	r3, [r2, #0]
 800417e:	f023 030f 	bic.w	r3, r3, #15
 8004182:	f043 0307 	orr.w	r3, r3, #7
 8004186:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004188:	4b21      	ldr	r3, [pc, #132]	; (8004210 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800418a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800418c:	4a21      	ldr	r2, [pc, #132]	; (8004214 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 800418e:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004190:	481e      	ldr	r0, [pc, #120]	; (800420c <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8004192:	f041 0101 	orr.w	r1, r1, #1
 8004196:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004198:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800419a:	6819      	ldr	r1, [r3, #0]
 800419c:	400a      	ands	r2, r1
 800419e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80041a0:	6803      	ldr	r3, [r0, #0]
 80041a2:	071b      	lsls	r3, r3, #28
 80041a4:	d505      	bpl.n	80041b2 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80041a6:	6803      	ldr	r3, [r0, #0]
 80041a8:	f023 030f 	bic.w	r3, r3, #15
 80041ac:	f043 0307 	orr.w	r3, r3, #7
 80041b0:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <SystemInit+0xb0>)
 80041b4:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80041b6:	4918      	ldr	r1, [pc, #96]	; (8004218 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 80041b8:	4c18      	ldr	r4, [pc, #96]	; (800421c <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 80041ba:	4819      	ldr	r0, [pc, #100]	; (8004220 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 80041bc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80041be:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80041c0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80041c2:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80041c4:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80041c6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80041c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80041ca:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80041cc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80041ce:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80041d2:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80041d4:	4c13      	ldr	r4, [pc, #76]	; (8004224 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 80041d6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80041da:	4913      	ldr	r1, [pc, #76]	; (8004228 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 80041dc:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80041de:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	4019      	ands	r1, r3
 80041e4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80041e8:	d203      	bcs.n	80041f2 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <SystemInit+0xcc>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80041f2:	490f      	ldr	r1, [pc, #60]	; (8004230 <SystemInit+0xd0>)
 80041f4:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <SystemInit+0xa8>)
 80041fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80041fe:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004200:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004204:	609a      	str	r2, [r3, #8]
}
 8004206:	4770      	bx	lr
 8004208:	e000ed00 	.word	0xe000ed00
 800420c:	52002000 	.word	0x52002000
 8004210:	58024400 	.word	0x58024400
 8004214:	eaf6ed7f 	.word	0xeaf6ed7f
 8004218:	01010280 	.word	0x01010280
 800421c:	02020200 	.word	0x02020200
 8004220:	01ff0000 	.word	0x01ff0000
 8004224:	5c001000 	.word	0x5c001000
 8004228:	ffff0000 	.word	0xffff0000
 800422c:	51008000 	.word	0x51008000
 8004230:	52004000 	.word	0x52004000

08004234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800426c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004238:	f7ff ff92 	bl	8004160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800423c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800423e:	e003      	b.n	8004248 <LoopCopyDataInit>

08004240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004246:	3104      	adds	r1, #4

08004248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004248:	480a      	ldr	r0, [pc, #40]	; (8004274 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800424c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800424e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004250:	d3f6      	bcc.n	8004240 <CopyDataInit>
  ldr  r2, =_sbss
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004254:	e002      	b.n	800425c <LoopFillZerobss>

08004256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004258:	f842 3b04 	str.w	r3, [r2], #4

0800425c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800425c:	4b08      	ldr	r3, [pc, #32]	; (8004280 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800425e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004260:	d3f9      	bcc.n	8004256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004262:	f00a fa27 	bl	800e6b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004266:	f7fe ff67 	bl	8003138 <main>
  bx  lr    
 800426a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800426c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004270:	0801cd68 	.word	0x0801cd68
  ldr  r0, =_sdata
 8004274:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004278:	24000548 	.word	0x24000548
  ldr  r2, =_sbss
 800427c:	24000560 	.word	0x24000560
  ldr  r3, = _ebss
 8004280:	2400f308 	.word	0x2400f308

08004284 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004284:	e7fe      	b.n	8004284 <ADC3_IRQHandler>
	...

08004288 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <HAL_InitTick+0x40>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b90b      	cbnz	r3, 8004292 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800428e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004290:	4770      	bx	lr
{
 8004292:	b510      	push	{r4, lr}
 8004294:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800429a:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <HAL_InitTick+0x44>)
 800429c:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a0:	6810      	ldr	r0, [r2, #0]
 80042a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80042a6:	f001 fa09 	bl	80056bc <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042aa:	2c0f      	cmp	r4, #15
 80042ac:	d800      	bhi.n	80042b0 <HAL_InitTick+0x28>
 80042ae:	b108      	cbz	r0, 80042b4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80042b0:	2001      	movs	r0, #1
}
 80042b2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042b4:	2200      	movs	r2, #0
 80042b6:	4621      	mov	r1, r4
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	f001 f9b2 	bl	8005624 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <HAL_InitTick+0x48>)
 80042c2:	2000      	movs	r0, #0
 80042c4:	601c      	str	r4, [r3, #0]
}
 80042c6:	bd10      	pop	{r4, pc}
 80042c8:	240001f4 	.word	0x240001f4
 80042cc:	240001ec 	.word	0x240001ec
 80042d0:	240001f8 	.word	0x240001f8

080042d4 <HAL_Init>:
{
 80042d4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042d6:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042d8:	4c12      	ldr	r4, [pc, #72]	; (8004324 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042da:	f001 f991 	bl	8005600 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042de:	f004 f9ad 	bl	800863c <HAL_RCC_GetSysClockFreq>
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_Init+0x54>)
 80042e4:	4911      	ldr	r1, [pc, #68]	; (800432c <HAL_Init+0x58>)
 80042e6:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042e8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042ea:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042ee:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042f2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042f4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042f6:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80042fa:	490d      	ldr	r1, [pc, #52]	; (8004330 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042fc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004300:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004302:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8004306:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004308:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800430a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800430c:	f7ff ffbc 	bl	8004288 <HAL_InitTick>
 8004310:	b110      	cbz	r0, 8004318 <HAL_Init+0x44>
    return HAL_ERROR;
 8004312:	2401      	movs	r4, #1
}
 8004314:	4620      	mov	r0, r4
 8004316:	bd10      	pop	{r4, pc}
 8004318:	4604      	mov	r4, r0
  HAL_MspInit();
 800431a:	f7ff fbe5 	bl	8003ae8 <HAL_MspInit>
}
 800431e:	4620      	mov	r0, r4
 8004320:	bd10      	pop	{r4, pc}
 8004322:	bf00      	nop
 8004324:	240001f0 	.word	0x240001f0
 8004328:	58024400 	.word	0x58024400
 800432c:	080187bc 	.word	0x080187bc
 8004330:	240001ec 	.word	0x240001ec

08004334 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004334:	4a03      	ldr	r2, [pc, #12]	; (8004344 <HAL_IncTick+0x10>)
 8004336:	4b04      	ldr	r3, [pc, #16]	; (8004348 <HAL_IncTick+0x14>)
 8004338:	6811      	ldr	r1, [r2, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	440b      	add	r3, r1
 800433e:	6013      	str	r3, [r2, #0]
}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	2400d7f8 	.word	0x2400d7f8
 8004348:	240001f4 	.word	0x240001f4

0800434c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800434c:	4b01      	ldr	r3, [pc, #4]	; (8004354 <HAL_GetTick+0x8>)
 800434e:	6818      	ldr	r0, [r3, #0]
}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	2400d7f8 	.word	0x2400d7f8

08004358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800435c:	f7ff fff6 	bl	800434c <HAL_GetTick>
 8004360:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004362:	1c63      	adds	r3, r4, #1
 8004364:	d002      	beq.n	800436c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <HAL_Delay+0x20>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800436c:	f7ff ffee 	bl	800434c <HAL_GetTick>
 8004370:	1b43      	subs	r3, r0, r5
 8004372:	42a3      	cmp	r3, r4
 8004374:	d3fa      	bcc.n	800436c <HAL_Delay+0x14>
  {
  }
}
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	240001f4 	.word	0x240001f4

0800437c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <HAL_GetREVID+0x8>)
 800437e:	6818      	ldr	r0, [r3, #0]
}
 8004380:	0c00      	lsrs	r0, r0, #16
 8004382:	4770      	bx	lr
 8004384:	5c001000 	.word	0x5c001000

08004388 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8004388:	4a03      	ldr	r2, [pc, #12]	; (8004398 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004390:	4318      	orrs	r0, r3
 8004392:	6010      	str	r0, [r2, #0]
}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	58003c00 	.word	0x58003c00

0800439c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800439c:	4a03      	ldr	r2, [pc, #12]	; (80043ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	f023 0302 	bic.w	r3, r3, #2
 80043a4:	4318      	orrs	r0, r3
 80043a6:	6010      	str	r0, [r2, #0]
}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	58003c00 	.word	0x58003c00

080043b0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80043b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80043b2:	4c0a      	ldr	r4, [pc, #40]	; (80043dc <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043bc:	f7ff ffc6 	bl	800434c <HAL_GetTick>
 80043c0:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80043c2:	e004      	b.n	80043ce <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80043c4:	f7ff ffc2 	bl	800434c <HAL_GetTick>
 80043c8:	1b40      	subs	r0, r0, r5
 80043ca:	280a      	cmp	r0, #10
 80043cc:	d804      	bhi.n	80043d8 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	071b      	lsls	r3, r3, #28
 80043d2:	d5f7      	bpl.n	80043c4 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80043d4:	2000      	movs	r0, #0
}
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80043d8:	2003      	movs	r0, #3
}
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	58003c00 	.word	0x58003c00

080043e0 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80043e2:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043e4:	f7fd ff28 	bl	8002238 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043e8:	bd08      	pop	{r3, pc}
 80043ea:	bf00      	nop

080043ec <HAL_ADC_ErrorCallback>:
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop

080043f0 <HAL_ADC_IRQHandler>:
{
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043f2:	4a90      	ldr	r2, [pc, #576]	; (8004634 <HAL_ADC_IRQHandler+0x244>)
{
 80043f4:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80043f6:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043f8:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80043fa:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80043fc:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043fe:	f000 8095 	beq.w	800452c <HAL_ADC_IRQHandler+0x13c>
 8004402:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004406:	4293      	cmp	r3, r2
 8004408:	f000 8090 	beq.w	800452c <HAL_ADC_IRQHandler+0x13c>
 800440c:	4a8a      	ldr	r2, [pc, #552]	; (8004638 <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800440e:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004410:	07a9      	lsls	r1, r5, #30
 8004412:	f007 071f 	and.w	r7, r7, #31
 8004416:	d502      	bpl.n	800441e <HAL_ADC_IRQHandler+0x2e>
 8004418:	07b2      	lsls	r2, r6, #30
 800441a:	f100 80aa 	bmi.w	8004572 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800441e:	0769      	lsls	r1, r5, #29
 8004420:	d579      	bpl.n	8004516 <HAL_ADC_IRQHandler+0x126>
 8004422:	0772      	lsls	r2, r6, #29
 8004424:	d577      	bpl.n	8004516 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004426:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004428:	06d2      	lsls	r2, r2, #27
 800442a:	d403      	bmi.n	8004434 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800442c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800442e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004432:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800443a:	d11c      	bne.n	8004476 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800443c:	4a7f      	ldr	r2, [pc, #508]	; (800463c <HAL_ADC_IRQHandler+0x24c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f000 80e8 	beq.w	8004614 <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004444:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004446:	0490      	lsls	r0, r2, #18
 8004448:	d415      	bmi.n	8004476 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	0711      	lsls	r1, r2, #28
 800444e:	d512      	bpl.n	8004476 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	0752      	lsls	r2, r2, #29
 8004454:	f100 80f6 	bmi.w	8004644 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	f022 020c 	bic.w	r2, r2, #12
 800445e:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004460:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004466:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004468:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800446a:	04db      	lsls	r3, r3, #19
 800446c:	d403      	bmi.n	8004476 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800446e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8004476:	4620      	mov	r0, r4
 8004478:	f7fd fec0 	bl	80021fc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	220c      	movs	r2, #12
 8004480:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004482:	06a8      	lsls	r0, r5, #26
 8004484:	d54d      	bpl.n	8004522 <HAL_ADC_IRQHandler+0x132>
 8004486:	06b1      	lsls	r1, r6, #26
 8004488:	d54b      	bpl.n	8004522 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800448a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800448c:	06d1      	lsls	r1, r2, #27
 800448e:	d403      	bmi.n	8004498 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004490:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004496:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004498:	4968      	ldr	r1, [pc, #416]	; (800463c <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800449a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800449c:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800449e:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80044a0:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80044a4:	d073      	beq.n	800458e <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80044a6:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80044a8:	b9d2      	cbnz	r2, 80044e0 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80044aa:	018a      	lsls	r2, r1, #6
 80044ac:	f100 80aa 	bmi.w	8004604 <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	0650      	lsls	r0, r2, #25
 80044b4:	d514      	bpl.n	80044e0 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80044b6:	0289      	lsls	r1, r1, #10
 80044b8:	d412      	bmi.n	80044e0 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	0712      	lsls	r2, r2, #28
 80044be:	f100 80cc 	bmi.w	800465a <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044c8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80044ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044d0:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80044d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044d4:	05d8      	lsls	r0, r3, #23
 80044d6:	d403      	bmi.n	80044e0 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80044e0:	4620      	mov	r0, r4
 80044e2:	f001 f81b 	bl	800551c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	2260      	movs	r2, #96	; 0x60
 80044ea:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80044ec:	0629      	lsls	r1, r5, #24
 80044ee:	d501      	bpl.n	80044f4 <HAL_ADC_IRQHandler+0x104>
 80044f0:	0632      	lsls	r2, r6, #24
 80044f2:	d460      	bmi.n	80045b6 <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80044f4:	05e8      	lsls	r0, r5, #23
 80044f6:	d501      	bpl.n	80044fc <HAL_ADC_IRQHandler+0x10c>
 80044f8:	05f1      	lsls	r1, r6, #23
 80044fa:	d467      	bmi.n	80045cc <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80044fc:	05aa      	lsls	r2, r5, #22
 80044fe:	d501      	bpl.n	8004504 <HAL_ADC_IRQHandler+0x114>
 8004500:	05b0      	lsls	r0, r6, #22
 8004502:	d44c      	bmi.n	800459e <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004504:	06e9      	lsls	r1, r5, #27
 8004506:	d501      	bpl.n	800450c <HAL_ADC_IRQHandler+0x11c>
 8004508:	06f2      	lsls	r2, r6, #27
 800450a:	d411      	bmi.n	8004530 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800450c:	0568      	lsls	r0, r5, #21
 800450e:	d501      	bpl.n	8004514 <HAL_ADC_IRQHandler+0x124>
 8004510:	0571      	lsls	r1, r6, #21
 8004512:	d467      	bmi.n	80045e4 <HAL_ADC_IRQHandler+0x1f4>
}
 8004514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004516:	0728      	lsls	r0, r5, #28
 8004518:	d5b3      	bpl.n	8004482 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800451a:	0731      	lsls	r1, r6, #28
 800451c:	d483      	bmi.n	8004426 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800451e:	06a8      	lsls	r0, r5, #26
 8004520:	d4b1      	bmi.n	8004486 <HAL_ADC_IRQHandler+0x96>
 8004522:	066a      	lsls	r2, r5, #25
 8004524:	d5e2      	bpl.n	80044ec <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004526:	0670      	lsls	r0, r6, #25
 8004528:	d5e0      	bpl.n	80044ec <HAL_ADC_IRQHandler+0xfc>
 800452a:	e7ae      	b.n	800448a <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800452c:	4a44      	ldr	r2, [pc, #272]	; (8004640 <HAL_ADC_IRQHandler+0x250>)
 800452e:	e76e      	b.n	800440e <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004530:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004532:	b17a      	cbz	r2, 8004554 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004534:	2f00      	cmp	r7, #0
 8004536:	d072      	beq.n	800461e <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004538:	4a3e      	ldr	r2, [pc, #248]	; (8004634 <HAL_ADC_IRQHandler+0x244>)
 800453a:	4293      	cmp	r3, r2
 800453c:	f000 808b 	beq.w	8004656 <HAL_ADC_IRQHandler+0x266>
 8004540:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004544:	4293      	cmp	r3, r2
 8004546:	f000 8086 	beq.w	8004656 <HAL_ADC_IRQHandler+0x266>
 800454a:	4a3b      	ldr	r2, [pc, #236]	; (8004638 <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800454c:	6892      	ldr	r2, [r2, #8]
 800454e:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8004552:	d00b      	beq.n	800456c <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004554:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 8004556:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800455c:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800455e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8004566:	f7ff ff41 	bl	80043ec <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	2210      	movs	r2, #16
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e7cc      	b.n	800450c <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004572:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004574:	06d8      	lsls	r0, r3, #27
 8004576:	d403      	bmi.n	8004580 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004578:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800457a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800457e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004580:	4620      	mov	r0, r4
 8004582:	f000 ffd3 	bl	800552c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	2202      	movs	r2, #2
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e747      	b.n	800441e <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800458e:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004590:	2901      	cmp	r1, #1
 8004592:	d988      	bls.n	80044a6 <HAL_ADC_IRQHandler+0xb6>
 8004594:	2f00      	cmp	r7, #0
 8004596:	d086      	beq.n	80044a6 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004598:	4926      	ldr	r1, [pc, #152]	; (8004634 <HAL_ADC_IRQHandler+0x244>)
 800459a:	68c9      	ldr	r1, [r1, #12]
 800459c:	e784      	b.n	80044a8 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800459e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80045a0:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80045a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a6:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80045a8:	f000 ffbe 	bl	8005528 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e7a6      	b.n	8004504 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80045b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80045b8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80045ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045be:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80045c0:	f7fd fe7c 	bl	80022bc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	2280      	movs	r2, #128	; 0x80
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e793      	b.n	80044f4 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80045cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80045ce:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80045d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d4:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80045d6:	f000 ffa5 	bl	8005524 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e78b      	b.n	80044fc <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80045e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80045e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80045ea:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80045ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f0:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80045f2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80045f4:	f042 0208 	orr.w	r2, r2, #8
 80045f8:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80045fa:	6019      	str	r1, [r3, #0]
}
 80045fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004600:	f000 bf8e 	b.w	8005520 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004604:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004608:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800460c:	4302      	orrs	r2, r0
 800460e:	f47f af67 	bne.w	80044e0 <HAL_ADC_IRQHandler+0xf0>
 8004612:	e74d      	b.n	80044b0 <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004614:	2f09      	cmp	r7, #9
 8004616:	d906      	bls.n	8004626 <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004618:	4a06      	ldr	r2, [pc, #24]	; (8004634 <HAL_ADC_IRQHandler+0x244>)
 800461a:	68d2      	ldr	r2, [r2, #12]
 800461c:	e713      	b.n	8004446 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	0797      	lsls	r7, r2, #30
 8004622:	d0a3      	beq.n	800456c <HAL_ADC_IRQHandler+0x17c>
 8004624:	e796      	b.n	8004554 <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004626:	f240 2221 	movw	r2, #545	; 0x221
 800462a:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800462c:	07d2      	lsls	r2, r2, #31
 800462e:	f53f af09 	bmi.w	8004444 <HAL_ADC_IRQHandler+0x54>
 8004632:	e7f1      	b.n	8004618 <HAL_ADC_IRQHandler+0x228>
 8004634:	40022000 	.word	0x40022000
 8004638:	58026300 	.word	0x58026300
 800463c:	40022100 	.word	0x40022100
 8004640:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004644:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004646:	f043 0310 	orr.w	r3, r3, #16
 800464a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	65a3      	str	r3, [r4, #88]	; 0x58
 8004654:	e70f      	b.n	8004476 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004656:	4a05      	ldr	r2, [pc, #20]	; (800466c <HAL_ADC_IRQHandler+0x27c>)
 8004658:	e778      	b.n	800454c <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800465c:	f043 0310 	orr.w	r3, r3, #16
 8004660:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	65a3      	str	r3, [r4, #88]	; 0x58
 800466a:	e739      	b.n	80044e0 <HAL_ADC_IRQHandler+0xf0>
 800466c:	40022300 	.word	0x40022300

08004670 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004670:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004672:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004674:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 800467a:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800467c:	d11d      	bne.n	80046ba <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800467e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004686:	680a      	ldr	r2, [r1, #0]
 8004688:	f012 0f08 	tst.w	r2, #8
 800468c:	68ca      	ldr	r2, [r1, #12]
 800468e:	d01b      	beq.n	80046c8 <ADC_DMAConvCplt+0x58>
 8004690:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004694:	d10d      	bne.n	80046b2 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004696:	68ca      	ldr	r2, [r1, #12]
 8004698:	0494      	lsls	r4, r2, #18
 800469a:	d40a      	bmi.n	80046b2 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800469c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800469e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a6:	04d1      	lsls	r1, r2, #19
 80046a8:	d403      	bmi.n	80046b2 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fd fda2 	bl	80021fc <HAL_ADC_ConvCpltCallback>
}
 80046b8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046ba:	06d2      	lsls	r2, r2, #27
 80046bc:	d40a      	bmi.n	80046d4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80046c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80046c8:	0790      	lsls	r0, r2, #30
 80046ca:	d0e7      	beq.n	800469c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fd fd95 	bl	80021fc <HAL_ADC_ConvCpltCallback>
 80046d2:	e7f1      	b.n	80046b8 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fe89 	bl	80043ec <HAL_ADC_ErrorCallback>
}
 80046da:	bd10      	pop	{r4, pc}

080046dc <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80046de:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80046e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046e8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80046ea:	f043 0304 	orr.w	r3, r3, #4
 80046ee:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046f0:	f7ff fe7c 	bl	80043ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046f4:	bd08      	pop	{r3, pc}
 80046f6:	bf00      	nop

080046f8 <HAL_ADC_ConfigChannel>:
{
 80046f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80046fa:	2200      	movs	r2, #0
{
 80046fc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80046fe:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004700:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8004704:	2a01      	cmp	r2, #1
 8004706:	f000 813b 	beq.w	8004980 <HAL_ADC_ConfigChannel+0x288>
 800470a:	4603      	mov	r3, r0
 800470c:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800470e:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004710:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004714:	6894      	ldr	r4, [r2, #8]
 8004716:	0764      	lsls	r4, r4, #29
 8004718:	f100 8099 	bmi.w	800484e <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800471c:	680c      	ldr	r4, [r1, #0]
 800471e:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8004722:	2d00      	cmp	r5, #0
 8004724:	f040 809e 	bne.w	8004864 <HAL_ADC_ConfigChannel+0x16c>
 8004728:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800472c:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800472e:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 8004730:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004734:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004736:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 800473a:	4330      	orrs	r0, r6
 800473c:	f00c 0c0c 	and.w	ip, ip, #12
 8004740:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 8004742:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004746:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 800474a:	4084      	lsls	r4, r0
 800474c:	fa0e fe00 	lsl.w	lr, lr, r0
 8004750:	f85c 0005 	ldr.w	r0, [ip, r5]
 8004754:	ea20 000e 	bic.w	r0, r0, lr
 8004758:	4304      	orrs	r4, r0
 800475a:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800475e:	6890      	ldr	r0, [r2, #8]
 8004760:	0740      	lsls	r0, r0, #29
 8004762:	d47d      	bmi.n	8004860 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004764:	6895      	ldr	r5, [r2, #8]
 8004766:	f015 0508 	ands.w	r5, r5, #8
 800476a:	d156      	bne.n	800481a <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800476c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 800476e:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004770:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004774:	4fb7      	ldr	r7, [pc, #732]	; (8004a54 <HAL_ADC_ConfigChannel+0x35c>)
 8004776:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 800477a:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800477e:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8004782:	fa00 fe04 	lsl.w	lr, r0, r4
 8004786:	6888      	ldr	r0, [r1, #8]
 8004788:	fa00 f404 	lsl.w	r4, r0, r4
 800478c:	f85c 0006 	ldr.w	r0, [ip, r6]
 8004790:	ea20 000e 	bic.w	r0, r0, lr
 8004794:	4320      	orrs	r0, r4
 8004796:	f84c 0006 	str.w	r0, [ip, r6]
 800479a:	6838      	ldr	r0, [r7, #0]
 800479c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80047a0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80047a4:	f000 8095 	beq.w	80048d2 <HAL_ADC_ConfigChannel+0x1da>
 80047a8:	68d0      	ldr	r0, [r2, #12]
 80047aa:	68d6      	ldr	r6, [r2, #12]
 80047ac:	06c7      	lsls	r7, r0, #27
 80047ae:	f100 8107 	bmi.w	80049c0 <HAL_ADC_ConfigChannel+0x2c8>
 80047b2:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80047b6:	6948      	ldr	r0, [r1, #20]
 80047b8:	0076      	lsls	r6, r6, #1
 80047ba:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047be:	690f      	ldr	r7, [r1, #16]
 80047c0:	2f04      	cmp	r7, #4
 80047c2:	f000 80e0 	beq.w	8004986 <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047c6:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 80047ca:	6808      	ldr	r0, [r1, #0]
 80047cc:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 80047d0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80047d4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80047d8:	ea40 000c 	orr.w	r0, r0, ip
 80047dc:	4330      	orrs	r0, r6
 80047de:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80047e2:	7e48      	ldrb	r0, [r1, #25]
 80047e4:	690e      	ldr	r6, [r1, #16]
 80047e6:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80047e8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80047ec:	bf0c      	ite	eq
 80047ee:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80047f2:	2700      	movne	r7, #0
 80047f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80047f8:	4338      	orrs	r0, r7
 80047fa:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80047fe:	7e0c      	ldrb	r4, [r1, #24]
 8004800:	6908      	ldr	r0, [r1, #16]
 8004802:	2c01      	cmp	r4, #1
 8004804:	d104      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004806:	f000 001f 	and.w	r0, r0, #31
 800480a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800480e:	4085      	lsls	r5, r0
 8004810:	6910      	ldr	r0, [r2, #16]
 8004812:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8004816:	4305      	orrs	r5, r0
 8004818:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800481a:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800481c:	07c4      	lsls	r4, r0, #31
 800481e:	d414      	bmi.n	800484a <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004820:	68ce      	ldr	r6, [r1, #12]
 8004822:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8004824:	f006 0718 	and.w	r7, r6, #24
 8004828:	488b      	ldr	r0, [pc, #556]	; (8004a58 <HAL_ADC_ConfigChannel+0x360>)
 800482a:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 800482e:	40f8      	lsrs	r0, r7
 8004830:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8004834:	4020      	ands	r0, r4
 8004836:	ea25 0507 	bic.w	r5, r5, r7
 800483a:	4328      	orrs	r0, r5
 800483c:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004840:	4886      	ldr	r0, [pc, #536]	; (8004a5c <HAL_ADC_ConfigChannel+0x364>)
 8004842:	4286      	cmp	r6, r0
 8004844:	d04d      	beq.n	80048e2 <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004846:	2c00      	cmp	r4, #0
 8004848:	db15      	blt.n	8004876 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800484a:	2000      	movs	r0, #0
 800484c:	e003      	b.n	8004856 <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800484e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004850:	f042 0220 	orr.w	r2, r2, #32
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800485c:	b003      	add	sp, #12
 800485e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004860:	6890      	ldr	r0, [r2, #8]
 8004862:	e7da      	b.n	800481a <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004868:	b115      	cbz	r5, 8004870 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800486a:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800486e:	40a8      	lsls	r0, r5
 8004870:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8004874:	e75b      	b.n	800472e <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004876:	497a      	ldr	r1, [pc, #488]	; (8004a60 <HAL_ADC_ConfigChannel+0x368>)
 8004878:	428a      	cmp	r2, r1
 800487a:	f000 80c7 	beq.w	8004a0c <HAL_ADC_ConfigChannel+0x314>
 800487e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8004882:	428a      	cmp	r2, r1
 8004884:	f000 80c2 	beq.w	8004a0c <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004888:	4d76      	ldr	r5, [pc, #472]	; (8004a64 <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800488a:	4877      	ldr	r0, [pc, #476]	; (8004a68 <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800488c:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800488e:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004890:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004894:	43c0      	mvns	r0, r0
 8004896:	f000 0001 	and.w	r0, r0, #1
 800489a:	2800      	cmp	r0, #0
 800489c:	f000 80c5 	beq.w	8004a2a <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048a0:	4872      	ldr	r0, [pc, #456]	; (8004a6c <HAL_ADC_ConfigChannel+0x374>)
 80048a2:	4284      	cmp	r4, r0
 80048a4:	f000 810e 	beq.w	8004ac4 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048a8:	4871      	ldr	r0, [pc, #452]	; (8004a70 <HAL_ADC_ConfigChannel+0x378>)
 80048aa:	4284      	cmp	r4, r0
 80048ac:	f000 812d 	beq.w	8004b0a <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048b0:	4870      	ldr	r0, [pc, #448]	; (8004a74 <HAL_ADC_ConfigChannel+0x37c>)
 80048b2:	4284      	cmp	r4, r0
 80048b4:	d1c9      	bne.n	800484a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 80048b6:	0249      	lsls	r1, r1, #9
 80048b8:	d4c7      	bmi.n	800484a <HAL_ADC_ConfigChannel+0x152>
 80048ba:	496b      	ldr	r1, [pc, #428]	; (8004a68 <HAL_ADC_ConfigChannel+0x370>)
 80048bc:	428a      	cmp	r2, r1
 80048be:	d1c4      	bne.n	800484a <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80048c0:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048c2:	2000      	movs	r0, #0
 80048c4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80048c8:	4332      	orrs	r2, r6
 80048ca:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80048ce:	60aa      	str	r2, [r5, #8]
}
 80048d0:	e7c1      	b.n	8004856 <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048d2:	68d6      	ldr	r6, [r2, #12]
 80048d4:	6948      	ldr	r0, [r1, #20]
 80048d6:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80048da:	0076      	lsls	r6, r6, #1
 80048dc:	fa00 f606 	lsl.w	r6, r0, r6
 80048e0:	e76d      	b.n	80047be <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048e2:	2f00      	cmp	r7, #0
 80048e4:	d073      	beq.n	80049ce <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80048ea:	2800      	cmp	r0, #0
 80048ec:	f000 80c6 	beq.w	8004a7c <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 80048f0:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f4:	3001      	adds	r0, #1
 80048f6:	f000 001f 	and.w	r0, r0, #31
 80048fa:	2809      	cmp	r0, #9
 80048fc:	f240 80be 	bls.w	8004a7c <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004900:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8004904:	2800      	cmp	r0, #0
 8004906:	f000 8114 	beq.w	8004b32 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800490a:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800490e:	3001      	adds	r0, #1
 8004910:	0680      	lsls	r0, r0, #26
 8004912:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800491a:	2d00      	cmp	r5, #0
 800491c:	f000 8107 	beq.w	8004b2e <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8004920:	fab5 f585 	clz	r5, r5
 8004924:	2601      	movs	r6, #1
 8004926:	3501      	adds	r5, #1
 8004928:	f005 051f 	and.w	r5, r5, #31
 800492c:	fa06 f505 	lsl.w	r5, r6, r5
 8004930:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004932:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004936:	2c00      	cmp	r4, #0
 8004938:	f000 80f7 	beq.w	8004b2a <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 800493c:	fab4 f484 	clz	r4, r4
 8004940:	f06f 061d 	mvn.w	r6, #29
 8004944:	1c60      	adds	r0, r4, #1
 8004946:	f000 041f 	and.w	r4, r0, #31
 800494a:	2003      	movs	r0, #3
 800494c:	fb10 6004 	smlabb	r0, r0, r4, r6
 8004950:	0500      	lsls	r0, r0, #20
 8004952:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004956:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8004958:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800495a:	f102 0514 	add.w	r5, r2, #20
 800495e:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8004960:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004964:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8004968:	fa04 f700 	lsl.w	r7, r4, r0
 800496c:	5974      	ldr	r4, [r6, r5]
 800496e:	ea24 0407 	bic.w	r4, r4, r7
 8004972:	688f      	ldr	r7, [r1, #8]
 8004974:	fa07 f000 	lsl.w	r0, r7, r0
 8004978:	4320      	orrs	r0, r4
 800497a:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800497c:	680c      	ldr	r4, [r1, #0]
}
 800497e:	e762      	b.n	8004846 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8004980:	2002      	movs	r0, #2
}
 8004982:	b003      	add	sp, #12
 8004984:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004986:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004988:	680c      	ldr	r4, [r1, #0]
 800498a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800498e:	06a5      	lsls	r5, r4, #26
 8004990:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8004994:	d030      	beq.n	80049f8 <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004996:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004998:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800499c:	4285      	cmp	r5, r0
 800499e:	d026      	beq.n	80049ee <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049a0:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80049a2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80049a6:	4285      	cmp	r5, r0
 80049a8:	d02b      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049aa:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80049ac:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80049b0:	4285      	cmp	r5, r0
 80049b2:	f47f af32 	bne.w	800481a <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80049b6:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80049b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80049bc:	66d0      	str	r0, [r2, #108]	; 0x6c
 80049be:	e72c      	b.n	800481a <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049c0:	0876      	lsrs	r6, r6, #1
 80049c2:	6948      	ldr	r0, [r1, #20]
 80049c4:	f006 0608 	and.w	r6, r6, #8
 80049c8:	fa00 f606 	lsl.w	r6, r0, r6
 80049cc:	e6f7      	b.n	80047be <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049ce:	0ea4      	lsrs	r4, r4, #26
 80049d0:	3401      	adds	r4, #1
 80049d2:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049d6:	2e09      	cmp	r6, #9
 80049d8:	d82d      	bhi.n	8004a36 <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049da:	06a5      	lsls	r5, r4, #26
 80049dc:	2001      	movs	r0, #1
 80049de:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80049e2:	40b0      	lsls	r0, r6
 80049e4:	4305      	orrs	r5, r0
 80049e6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80049ea:	0500      	lsls	r0, r0, #20
 80049ec:	e7b3      	b.n	8004956 <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80049ee:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80049f0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80049f4:	6650      	str	r0, [r2, #100]	; 0x64
 80049f6:	e7d3      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80049f8:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80049fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80049fe:	6610      	str	r0, [r2, #96]	; 0x60
 8004a00:	e7c9      	b.n	8004996 <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004a02:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004a04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a08:	6690      	str	r0, [r2, #104]	; 0x68
 8004a0a:	e7ce      	b.n	80049aa <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a0c:	4814      	ldr	r0, [pc, #80]	; (8004a60 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004a0e:	4d1a      	ldr	r5, [pc, #104]	; (8004a78 <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a10:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004a14:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a16:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8004a1a:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a1c:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004a1e:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8004a22:	43c0      	mvns	r0, r0
 8004a24:	f000 0001 	and.w	r0, r0, #1
 8004a28:	e737      	b.n	800489a <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8004a2c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a2e:	f042 0220 	orr.w	r2, r2, #32
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8004a34:	e70f      	b.n	8004856 <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a36:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004a3a:	06a5      	lsls	r5, r4, #26
 8004a3c:	2401      	movs	r4, #1
 8004a3e:	381e      	subs	r0, #30
 8004a40:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004a44:	fa04 f606 	lsl.w	r6, r4, r6
 8004a48:	0500      	lsls	r0, r0, #20
 8004a4a:	4335      	orrs	r5, r6
 8004a4c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8004a50:	e781      	b.n	8004956 <HAL_ADC_ConfigChannel+0x25e>
 8004a52:	bf00      	nop
 8004a54:	5c001000 	.word	0x5c001000
 8004a58:	000fffff 	.word	0x000fffff
 8004a5c:	47ff0000 	.word	0x47ff0000
 8004a60:	40022000 	.word	0x40022000
 8004a64:	58026300 	.word	0x58026300
 8004a68:	58026000 	.word	0x58026000
 8004a6c:	cb840000 	.word	0xcb840000
 8004a70:	c7520000 	.word	0xc7520000
 8004a74:	cfb80000 	.word	0xcfb80000
 8004a78:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d05e      	beq.n	8004b42 <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8004a84:	fab0 f080 	clz	r0, r0
 8004a88:	3001      	adds	r0, #1
 8004a8a:	0680      	lsls	r0, r0, #26
 8004a8c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	d052      	beq.n	8004b3e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004a98:	fab5 f585 	clz	r5, r5
 8004a9c:	2601      	movs	r6, #1
 8004a9e:	3501      	adds	r5, #1
 8004aa0:	f005 051f 	and.w	r5, r5, #31
 8004aa4:	fa06 f505 	lsl.w	r5, r6, r5
 8004aa8:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004aae:	2c00      	cmp	r4, #0
 8004ab0:	d042      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8004ab2:	fab4 f484 	clz	r4, r4
 8004ab6:	3401      	adds	r4, #1
 8004ab8:	f004 041f 	and.w	r4, r4, #31
 8004abc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004ac0:	0520      	lsls	r0, r4, #20
 8004ac2:	e748      	b.n	8004956 <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ac4:	0208      	lsls	r0, r1, #8
 8004ac6:	f53f aec0 	bmi.w	800484a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aca:	491f      	ldr	r1, [pc, #124]	; (8004b48 <HAL_ADC_ConfigChannel+0x450>)
 8004acc:	428a      	cmp	r2, r1
 8004ace:	f47f aebc 	bne.w	800484a <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ad2:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <HAL_ADC_ConfigChannel+0x454>)
 8004ad4:	481e      	ldr	r0, [pc, #120]	; (8004b50 <HAL_ADC_ConfigChannel+0x458>)
 8004ad6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ad8:	68a9      	ldr	r1, [r5, #8]
 8004ada:	0992      	lsrs	r2, r2, #6
 8004adc:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004ae0:	fba0 0202 	umull	r0, r2, r0, r2
 8004ae4:	4331      	orrs	r1, r6
 8004ae6:	0992      	lsrs	r2, r2, #6
 8004ae8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004aec:	3201      	adds	r2, #1
 8004aee:	60a9      	str	r1, [r5, #8]
 8004af0:	0052      	lsls	r2, r2, #1
 8004af2:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8004af4:	9a01      	ldr	r2, [sp, #4]
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	f43f aea7 	beq.w	800484a <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8004afc:	9a01      	ldr	r2, [sp, #4]
 8004afe:	3a01      	subs	r2, #1
 8004b00:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8004b02:	9a01      	ldr	r2, [sp, #4]
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d1f9      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x404>
 8004b08:	e69f      	b.n	800484a <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b0a:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8004b0e:	f47f ae9c 	bne.w	800484a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b12:	490d      	ldr	r1, [pc, #52]	; (8004b48 <HAL_ADC_ConfigChannel+0x450>)
 8004b14:	428a      	cmp	r2, r1
 8004b16:	f47f ae98 	bne.w	800484a <HAL_ADC_ConfigChannel+0x152>
 8004b1a:	68aa      	ldr	r2, [r5, #8]
 8004b1c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004b20:	4332      	orrs	r2, r6
 8004b22:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004b26:	60aa      	str	r2, [r5, #8]
}
 8004b28:	e695      	b.n	8004856 <HAL_ADC_ConfigChannel+0x15e>
 8004b2a:	480a      	ldr	r0, [pc, #40]	; (8004b54 <HAL_ADC_ConfigChannel+0x45c>)
 8004b2c:	e713      	b.n	8004956 <HAL_ADC_ConfigChannel+0x25e>
 8004b2e:	2502      	movs	r5, #2
 8004b30:	e6fe      	b.n	8004930 <HAL_ADC_ConfigChannel+0x238>
 8004b32:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004b36:	e6ee      	b.n	8004916 <HAL_ADC_ConfigChannel+0x21e>
 8004b38:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004b3c:	e70b      	b.n	8004956 <HAL_ADC_ConfigChannel+0x25e>
 8004b3e:	2502      	movs	r5, #2
 8004b40:	e7b2      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x3b0>
 8004b42:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004b46:	e7a3      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x398>
 8004b48:	58026000 	.word	0x58026000
 8004b4c:	240001ec 	.word	0x240001ec
 8004b50:	053e2d63 	.word	0x053e2d63
 8004b54:	fe500000 	.word	0xfe500000

08004b58 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8004b58:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8004b5c:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004b5e:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8004b60:	2a01      	cmp	r2, #1
 8004b62:	f000 80f3 	beq.w	8004d4c <HAL_ADC_AnalogWDGConfig+0x1f4>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b66:	681a      	ldr	r2, [r3, #0]
{
 8004b68:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8004b6a:	2401      	movs	r4, #1
 8004b6c:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b70:	6894      	ldr	r4, [r2, #8]
 8004b72:	0765      	lsls	r5, r4, #29
 8004b74:	d428      	bmi.n	8004bc8 <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b76:	6894      	ldr	r4, [r2, #8]
 8004b78:	0724      	lsls	r4, r4, #28
 8004b7a:	d426      	bmi.n	8004bca <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004b7c:	680c      	ldr	r4, [r1, #0]
 8004b7e:	4db8      	ldr	r5, [pc, #736]	; (8004e60 <HAL_ADC_AnalogWDGConfig+0x308>)
 8004b80:	42ac      	cmp	r4, r5
 8004b82:	f000 80a0 	beq.w	8004cc6 <HAL_ADC_AnalogWDGConfig+0x16e>
      switch (AnalogWDGConfig->WatchdogMode)
 8004b86:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8004b8a:	d02e      	beq.n	8004bea <HAL_ADC_AnalogWDGConfig+0x92>
 8004b8c:	d827      	bhi.n	8004bde <HAL_ADC_AnalogWDGConfig+0x86>
 8004b8e:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8004b92:	d02a      	beq.n	8004bea <HAL_ADC_AnalogWDGConfig+0x92>
 8004b94:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004b98:	d027      	beq.n	8004bea <HAL_ADC_AnalogWDGConfig+0x92>
 8004b9a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004b9e:	d024      	beq.n	8004bea <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004ba0:	f004 0001 	and.w	r0, r4, #1
 8004ba4:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 8004ba8:	4eae      	ldr	r6, [pc, #696]	; (8004e64 <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004baa:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8004bae:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004bb0:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8004bb4:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 8004bb8:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8004bbc:	ea24 0406 	bic.w	r4, r4, r6
 8004bc0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004bc4:	680c      	ldr	r4, [r1, #0]
}
 8004bc6:	e023      	b.n	8004c10 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bc8:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004bcc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bce:	f042 0220 	orr.w	r2, r2, #32
 8004bd2:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004bda:	bc70      	pop	{r4, r5, r6}
 8004bdc:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8004bde:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004be2:	d002      	beq.n	8004bea <HAL_ADC_AnalogWDGConfig+0x92>
 8004be4:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004be8:	d1da      	bne.n	8004ba0 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004bea:	489f      	ldr	r0, [pc, #636]	; (8004e68 <HAL_ADC_AnalogWDGConfig+0x310>)
 8004bec:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004bee:	6888      	ldr	r0, [r1, #8]
 8004bf0:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004bf4:	f000 80cb 	beq.w	8004d8e <HAL_ADC_AnalogWDGConfig+0x236>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	f040 80df 	bne.w	8004dbc <HAL_ADC_AnalogWDGConfig+0x264>
 8004bfe:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004c02:	2501      	movs	r5, #1
 8004c04:	4085      	lsls	r5, r0
 8004c06:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8004c0a:	4328      	orrs	r0, r5
 8004c0c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004c10:	4896      	ldr	r0, [pc, #600]	; (8004e6c <HAL_ADC_AnalogWDGConfig+0x314>)
 8004c12:	6800      	ldr	r0, [r0, #0]
 8004c14:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004c18:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004c1c:	68d0      	ldr	r0, [r2, #12]
 8004c1e:	d04b      	beq.n	8004cb8 <HAL_ADC_AnalogWDGConfig+0x160>
 8004c20:	f010 0f10 	tst.w	r0, #16
 8004c24:	68d0      	ldr	r0, [r2, #12]
 8004c26:	d047      	beq.n	8004cb8 <HAL_ADC_AnalogWDGConfig+0x160>
 8004c28:	0840      	lsrs	r0, r0, #1
 8004c2a:	690d      	ldr	r5, [r1, #16]
 8004c2c:	f000 0008 	and.w	r0, r0, #8
 8004c30:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004c34:	4d8d      	ldr	r5, [pc, #564]	; (8004e6c <HAL_ADC_AnalogWDGConfig+0x314>)
 8004c36:	682d      	ldr	r5, [r5, #0]
 8004c38:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 8004c3c:	68d5      	ldr	r5, [r2, #12]
 8004c3e:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8004c42:	d031      	beq.n	8004ca8 <HAL_ADC_AnalogWDGConfig+0x150>
 8004c44:	f015 0f10 	tst.w	r5, #16
 8004c48:	68d5      	ldr	r5, [r2, #12]
 8004c4a:	d02d      	beq.n	8004ca8 <HAL_ADC_AnalogWDGConfig+0x150>
 8004c4c:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8004c50:	694d      	ldr	r5, [r1, #20]
 8004c52:	f00c 0c08 	and.w	ip, ip, #8
 8004c56:	fa05 fc0c 	lsl.w	ip, r5, ip
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004c5a:	4d83      	ldr	r5, [pc, #524]	; (8004e68 <HAL_ADC_AnalogWDGConfig+0x310>)
 8004c5c:	42ac      	cmp	r4, r5
 8004c5e:	d077      	beq.n	8004d50 <HAL_ADC_AnalogWDGConfig+0x1f8>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004c60:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 8004c64:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004c68:	ea44 040c 	orr.w	r4, r4, ip
 8004c6c:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004c70:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8004c74:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004c78:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004c7a:	f44f 7400 	mov.w	r4, #512	; 0x200
 8004c7e:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c82:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004c84:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004c88:	6558      	str	r0, [r3, #84]	; 0x54
 8004c8a:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004c8c:	7b09      	ldrb	r1, [r1, #12]
 8004c8e:	2901      	cmp	r1, #1
 8004c90:	f000 808e 	beq.w	8004db0 <HAL_ADC_AnalogWDGConfig+0x258>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004c94:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c96:	2000      	movs	r0, #0
 8004c98:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004c9c:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004ca4:	bc70      	pop	{r4, r5, r6}
 8004ca6:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004ca8:	f3c5 0c82 	ubfx	ip, r5, #2, #3
 8004cac:	694d      	ldr	r5, [r1, #20]
 8004cae:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004cb2:	fa05 fc0c 	lsl.w	ip, r5, ip
 8004cb6:	e7d0      	b.n	8004c5a <HAL_ADC_AnalogWDGConfig+0x102>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004cb8:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004cbc:	690d      	ldr	r5, [r1, #16]
 8004cbe:	0040      	lsls	r0, r0, #1
 8004cc0:	fa05 f000 	lsl.w	r0, r5, r0
 8004cc4:	e7b6      	b.n	8004c34 <HAL_ADC_AnalogWDGConfig+0xdc>
      switch (AnalogWDGConfig->WatchdogMode)
 8004cc6:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8004cca:	f000 80f0 	beq.w	8004eae <HAL_ADC_AnalogWDGConfig+0x356>
 8004cce:	d82a      	bhi.n	8004d26 <HAL_ADC_AnalogWDGConfig+0x1ce>
 8004cd0:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8004cd4:	f000 80e0 	beq.w	8004e98 <HAL_ADC_AnalogWDGConfig+0x340>
 8004cd8:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004cdc:	d118      	bne.n	8004d10 <HAL_ADC_AnalogWDGConfig+0x1b8>
  MODIFY_REG(*preg,
 8004cde:	68d4      	ldr	r4, [r2, #12]
 8004ce0:	4863      	ldr	r0, [pc, #396]	; (8004e70 <HAL_ADC_AnalogWDGConfig+0x318>)
 8004ce2:	4020      	ands	r0, r4
 8004ce4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8004ce8:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004cea:	4860      	ldr	r0, [pc, #384]	; (8004e6c <HAL_ADC_AnalogWDGConfig+0x314>)
 8004cec:	6800      	ldr	r0, [r0, #0]
 8004cee:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004cf2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004cf6:	68d0      	ldr	r0, [r2, #12]
 8004cf8:	d069      	beq.n	8004dce <HAL_ADC_AnalogWDGConfig+0x276>
 8004cfa:	f010 0f10 	tst.w	r0, #16
 8004cfe:	690d      	ldr	r5, [r1, #16]
 8004d00:	68d0      	ldr	r0, [r2, #12]
 8004d02:	f040 8099 	bne.w	8004e38 <HAL_ADC_AnalogWDGConfig+0x2e0>
 8004d06:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004d0a:	0040      	lsls	r0, r0, #1
 8004d0c:	4085      	lsls	r5, r0
 8004d0e:	e063      	b.n	8004dd8 <HAL_ADC_AnalogWDGConfig+0x280>
      switch (AnalogWDGConfig->WatchdogMode)
 8004d10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004d14:	f040 80b4 	bne.w	8004e80 <HAL_ADC_AnalogWDGConfig+0x328>
 8004d18:	68d4      	ldr	r4, [r2, #12]
 8004d1a:	4855      	ldr	r0, [pc, #340]	; (8004e70 <HAL_ADC_AnalogWDGConfig+0x318>)
 8004d1c:	4020      	ands	r0, r4
 8004d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004d22:	60d0      	str	r0, [r2, #12]
}
 8004d24:	e7e1      	b.n	8004cea <HAL_ADC_AnalogWDGConfig+0x192>
 8004d26:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004d2a:	f000 80ae 	beq.w	8004e8a <HAL_ADC_AnalogWDGConfig+0x332>
 8004d2e:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004d32:	f040 80a5 	bne.w	8004e80 <HAL_ADC_AnalogWDGConfig+0x328>
  MODIFY_REG(*preg,
 8004d36:	68d5      	ldr	r5, [r2, #12]
 8004d38:	6888      	ldr	r0, [r1, #8]
 8004d3a:	4c4d      	ldr	r4, [pc, #308]	; (8004e70 <HAL_ADC_AnalogWDGConfig+0x318>)
 8004d3c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004d40:	402c      	ands	r4, r5
 8004d42:	4320      	orrs	r0, r4
 8004d44:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8004d48:	60d0      	str	r0, [r2, #12]
}
 8004d4a:	e7ce      	b.n	8004cea <HAL_ADC_AnalogWDGConfig+0x192>
  __HAL_LOCK(hadc);
 8004d4c:	2002      	movs	r0, #2
}
 8004d4e:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004d50:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8004d54:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004d58:	ea44 040c 	orr.w	r4, r4, ip
 8004d5c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004d60:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8004d64:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004d68:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004d6a:	f44f 7480 	mov.w	r4, #256	; 0x100
 8004d6e:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004d72:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004d74:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8004d78:	6558      	str	r0, [r3, #84]	; 0x54
 8004d7a:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004d7c:	7b09      	ldrb	r1, [r1, #12]
 8004d7e:	2901      	cmp	r1, #1
 8004d80:	d078      	beq.n	8004e74 <HAL_ADC_AnalogWDGConfig+0x31c>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004d82:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d84:	2000      	movs	r0, #0
 8004d86:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004d8a:	6051      	str	r1, [r2, #4]
}
 8004d8c:	e722      	b.n	8004bd4 <HAL_ADC_AnalogWDGConfig+0x7c>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004d8e:	2d00      	cmp	r5, #0
 8004d90:	d05e      	beq.n	8004e50 <HAL_ADC_AnalogWDGConfig+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d92:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f000 8094 	beq.w	8004ec4 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8004d9c:	fab0 f080 	clz	r0, r0
 8004da0:	2501      	movs	r5, #1
 8004da2:	4085      	lsls	r5, r0
 8004da4:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8004da8:	4328      	orrs	r0, r5
 8004daa:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 8004dae:	e72f      	b.n	8004c10 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004db0:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004db2:	2000      	movs	r0, #0
 8004db4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004db8:	6051      	str	r1, [r2, #4]
}
 8004dba:	e70b      	b.n	8004bd4 <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbc:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d04a      	beq.n	8004e5a <HAL_ADC_AnalogWDGConfig+0x302>
  return __builtin_clz(value);
 8004dc4:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004dc8:	2501      	movs	r5, #1
 8004dca:	4085      	lsls	r5, r0
 8004dcc:	e71b      	b.n	8004c06 <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004dce:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004dd2:	690d      	ldr	r5, [r1, #16]
 8004dd4:	0040      	lsls	r0, r0, #1
 8004dd6:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004dd8:	4824      	ldr	r0, [pc, #144]	; (8004e6c <HAL_ADC_AnalogWDGConfig+0x314>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004de0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004de4:	68d0      	ldr	r0, [r2, #12]
 8004de6:	d003      	beq.n	8004df0 <HAL_ADC_AnalogWDGConfig+0x298>
 8004de8:	f010 0f10 	tst.w	r0, #16
 8004dec:	68d0      	ldr	r0, [r2, #12]
 8004dee:	d128      	bne.n	8004e42 <HAL_ADC_AnalogWDGConfig+0x2ea>
 8004df0:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004df4:	694c      	ldr	r4, [r1, #20]
 8004df6:	0040      	lsls	r0, r0, #1
 8004df8:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004dfc:	6a14      	ldr	r4, [r2, #32]
 8004dfe:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004e02:	4304      	orrs	r4, r0
 8004e04:	6214      	str	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004e06:	2480      	movs	r4, #128	; 0x80
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004e08:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004e0a:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8004e0e:	4328      	orrs	r0, r5
 8004e10:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e12:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004e14:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004e18:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 8004e1e:	7b09      	ldrb	r1, [r1, #12]
 8004e20:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004e22:	6851      	ldr	r1, [r2, #4]
 8004e24:	bf0c      	ite	eq
 8004e26:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004e28:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 8004e2c:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004e34:	bc70      	pop	{r4, r5, r6}
 8004e36:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004e38:	0840      	lsrs	r0, r0, #1
 8004e3a:	f000 0008 	and.w	r0, r0, #8
 8004e3e:	4085      	lsls	r5, r0
 8004e40:	e7ca      	b.n	8004dd8 <HAL_ADC_AnalogWDGConfig+0x280>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004e42:	0840      	lsrs	r0, r0, #1
 8004e44:	694c      	ldr	r4, [r1, #20]
 8004e46:	f000 0008 	and.w	r0, r0, #8
 8004e4a:	fa04 f000 	lsl.w	r0, r4, r0
 8004e4e:	e7d5      	b.n	8004dfc <HAL_ADC_AnalogWDGConfig+0x2a4>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004e50:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004e54:	2501      	movs	r5, #1
 8004e56:	4085      	lsls	r5, r0
 8004e58:	e7a4      	b.n	8004da4 <HAL_ADC_AnalogWDGConfig+0x24c>
 8004e5a:	2501      	movs	r5, #1
 8004e5c:	e6d3      	b.n	8004c06 <HAL_ADC_AnalogWDGConfig+0xae>
 8004e5e:	bf00      	nop
 8004e60:	7dc00000 	.word	0x7dc00000
 8004e64:	7dcfffff 	.word	0x7dcfffff
 8004e68:	001fffff 	.word	0x001fffff
 8004e6c:	5c001000 	.word	0x5c001000
 8004e70:	823fffff 	.word	0x823fffff
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004e74:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e76:	2000      	movs	r0, #0
 8004e78:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004e7c:	6051      	str	r1, [r2, #4]
}
 8004e7e:	e6a9      	b.n	8004bd4 <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 8004e80:	68d4      	ldr	r4, [r2, #12]
 8004e82:	4811      	ldr	r0, [pc, #68]	; (8004ec8 <HAL_ADC_AnalogWDGConfig+0x370>)
 8004e84:	4020      	ands	r0, r4
 8004e86:	60d0      	str	r0, [r2, #12]
}
 8004e88:	e72f      	b.n	8004cea <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8004e8a:	68d4      	ldr	r4, [r2, #12]
 8004e8c:	480e      	ldr	r0, [pc, #56]	; (8004ec8 <HAL_ADC_AnalogWDGConfig+0x370>)
 8004e8e:	4020      	ands	r0, r4
 8004e90:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8004e94:	60d0      	str	r0, [r2, #12]
}
 8004e96:	e728      	b.n	8004cea <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8004e98:	68d5      	ldr	r5, [r2, #12]
 8004e9a:	6888      	ldr	r0, [r1, #8]
 8004e9c:	4c0a      	ldr	r4, [pc, #40]	; (8004ec8 <HAL_ADC_AnalogWDGConfig+0x370>)
 8004e9e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004ea2:	402c      	ands	r4, r5
 8004ea4:	4320      	orrs	r0, r4
 8004ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8004eaa:	60d0      	str	r0, [r2, #12]
}
 8004eac:	e71d      	b.n	8004cea <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8004eae:	68d5      	ldr	r5, [r2, #12]
 8004eb0:	6888      	ldr	r0, [r1, #8]
 8004eb2:	4c05      	ldr	r4, [pc, #20]	; (8004ec8 <HAL_ADC_AnalogWDGConfig+0x370>)
 8004eb4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004eb8:	402c      	ands	r4, r5
 8004eba:	4320      	orrs	r0, r4
 8004ebc:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8004ec0:	60d0      	str	r0, [r2, #12]
}
 8004ec2:	e712      	b.n	8004cea <HAL_ADC_AnalogWDGConfig+0x192>
 8004ec4:	2501      	movs	r5, #1
 8004ec6:	e76d      	b.n	8004da4 <HAL_ADC_AnalogWDGConfig+0x24c>
 8004ec8:	823fffff 	.word	0x823fffff

08004ecc <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ecc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	07d1      	lsls	r1, r2, #31
 8004ed2:	d501      	bpl.n	8004ed8 <ADC_Enable+0xc>
  return HAL_OK;
 8004ed4:	2000      	movs	r0, #0
}
 8004ed6:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ed8:	6899      	ldr	r1, [r3, #8]
 8004eda:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <ADC_Enable+0x94>)
 8004edc:	4211      	tst	r1, r2
{
 8004ede:	b570      	push	{r4, r5, r6, lr}
 8004ee0:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ee2:	d12c      	bne.n	8004f3e <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8004ee4:	6899      	ldr	r1, [r3, #8]
 8004ee6:	4a1f      	ldr	r2, [pc, #124]	; (8004f64 <ADC_Enable+0x98>)
 8004ee8:	400a      	ands	r2, r1
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004ef0:	f7ff fa2c 	bl	800434c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8004ef8:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d028      	beq.n	8004f50 <ADC_Enable+0x84>
 8004efe:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d024      	beq.n	8004f50 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004f06:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <ADC_Enable+0xa0>)
 8004f08:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	07d6      	lsls	r6, r2, #31
 8004f0e:	d414      	bmi.n	8004f3a <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8004f10:	4e14      	ldr	r6, [pc, #80]	; (8004f64 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f12:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f14:	07d0      	lsls	r0, r2, #31
 8004f16:	d404      	bmi.n	8004f22 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	4032      	ands	r2, r6
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f22:	f7ff fa13 	bl	800434c <HAL_GetTick>
 8004f26:	1b43      	subs	r3, r0, r5
 8004f28:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f2a:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f2c:	d902      	bls.n	8004f34 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	07d1      	lsls	r1, r2, #31
 8004f32:	d504      	bpl.n	8004f3e <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	07d2      	lsls	r2, r2, #31
 8004f38:	d5eb      	bpl.n	8004f12 <ADC_Enable+0x46>
  return HAL_OK;
 8004f3a:	2000      	movs	r0, #0
}
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8004f40:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f42:	f043 0310 	orr.w	r3, r3, #16
 8004f46:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f4a:	4303      	orrs	r3, r0
 8004f4c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004f50:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <ADC_Enable+0xa4>)
 8004f52:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f54:	06d2      	lsls	r2, r2, #27
 8004f56:	d0d8      	beq.n	8004f0a <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f58:	4a06      	ldr	r2, [pc, #24]	; (8004f74 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d1d5      	bne.n	8004f0a <ADC_Enable+0x3e>
 8004f5e:	e7ec      	b.n	8004f3a <ADC_Enable+0x6e>
 8004f60:	8000003f 	.word	0x8000003f
 8004f64:	7fffffc0 	.word	0x7fffffc0
 8004f68:	40022000 	.word	0x40022000
 8004f6c:	58026300 	.word	0x58026300
 8004f70:	40022300 	.word	0x40022300
 8004f74:	40022100 	.word	0x40022100

08004f78 <ADC_Disable>:
{
 8004f78:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f7a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	0795      	lsls	r5, r2, #30
 8004f80:	d502      	bpl.n	8004f88 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f82:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8004f84:	2000      	movs	r0, #0
}
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f8a:	07d4      	lsls	r4, r2, #31
 8004f8c:	d529      	bpl.n	8004fe2 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	4604      	mov	r4, r0
 8004f92:	f002 020d 	and.w	r2, r2, #13
 8004f96:	2a01      	cmp	r2, #1
 8004f98:	d008      	beq.n	8004fac <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8004f9c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f9e:	f043 0310 	orr.w	r3, r3, #16
 8004fa2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fa6:	4303      	orrs	r3, r0
 8004fa8:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8004fac:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004fae:	2103      	movs	r1, #3
 8004fb0:	4a0d      	ldr	r2, [pc, #52]	; (8004fe8 <ADC_Disable+0x70>)
 8004fb2:	4002      	ands	r2, r0
 8004fb4:	f042 0202 	orr.w	r2, r2, #2
 8004fb8:	609a      	str	r2, [r3, #8]
 8004fba:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8004fbc:	f7ff f9c6 	bl	800434c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fc0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004fc2:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	07d9      	lsls	r1, r3, #31
 8004fc8:	d50b      	bpl.n	8004fe2 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fca:	f7ff f9bf 	bl	800434c <HAL_GetTick>
 8004fce:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fd0:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fd2:	2802      	cmp	r0, #2
 8004fd4:	d902      	bls.n	8004fdc <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	07d2      	lsls	r2, r2, #31
 8004fda:	d4de      	bmi.n	8004f9a <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	07db      	lsls	r3, r3, #31
 8004fe0:	d4f3      	bmi.n	8004fca <ADC_Disable+0x52>
  return HAL_OK;
 8004fe2:	2000      	movs	r0, #0
}
 8004fe4:	bd38      	pop	{r3, r4, r5, pc}
 8004fe6:	bf00      	nop
 8004fe8:	7fffffc0 	.word	0x7fffffc0

08004fec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004fec:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004fee:	4a56      	ldr	r2, [pc, #344]	; (8005148 <ADC_ConfigureBoostMode+0x15c>)
{
 8004ff0:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004ff2:	6803      	ldr	r3, [r0, #0]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d025      	beq.n	8005044 <ADC_ConfigureBoostMode+0x58>
 8004ff8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d021      	beq.n	8005044 <ADC_ConfigureBoostMode+0x58>
 8005000:	4b52      	ldr	r3, [pc, #328]	; (800514c <ADC_ConfigureBoostMode+0x160>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005008:	d021      	beq.n	800504e <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800500a:	f003 fcdf 	bl	80089cc <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800500e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8005010:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8005012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005016:	f000 8086 	beq.w	8005126 <ADC_ConfigureBoostMode+0x13a>
 800501a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800501e:	d06a      	beq.n	80050f6 <ADC_ConfigureBoostMode+0x10a>
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d07f      	beq.n	8005126 <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005026:	f7ff f9a9 	bl	800437c <HAL_GetREVID>
 800502a:	f241 0303 	movw	r3, #4099	; 0x1003
 800502e:	4298      	cmp	r0, r3
 8005030:	d84a      	bhi.n	80050c8 <ADC_ConfigureBoostMode+0xdc>
  {
    if (freq > 20000000UL)
 8005032:	4b47      	ldr	r3, [pc, #284]	; (8005150 <ADC_ConfigureBoostMode+0x164>)
 8005034:	429d      	cmp	r5, r3
 8005036:	d929      	bls.n	800508c <ADC_ConfigureBoostMode+0xa0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	6893      	ldr	r3, [r2, #8]
 800503c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005040:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005042:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005044:	4b43      	ldr	r3, [pc, #268]	; (8005154 <ADC_ConfigureBoostMode+0x168>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800504c:	d1dd      	bne.n	800500a <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800504e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005052:	f004 fddd 	bl	8009c10 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005056:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005058:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800505a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800505e:	d06c      	beq.n	800513a <ADC_ConfigureBoostMode+0x14e>
 8005060:	d808      	bhi.n	8005074 <ADC_ConfigureBoostMode+0x88>
 8005062:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005066:	d050      	beq.n	800510a <ADC_ConfigureBoostMode+0x11e>
 8005068:	d916      	bls.n	8005098 <ADC_ConfigureBoostMode+0xac>
 800506a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800506e:	d1da      	bne.n	8005026 <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 8005070:	0945      	lsrs	r5, r0, #5
        break;
 8005072:	e7d8      	b.n	8005026 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8005074:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005078:	d045      	beq.n	8005106 <ADC_ConfigureBoostMode+0x11a>
 800507a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800507e:	d1d2      	bne.n	8005026 <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005080:	f7ff f97c 	bl	800437c <HAL_GetREVID>
 8005084:	f241 0303 	movw	r3, #4099	; 0x1003
 8005088:	4298      	cmp	r0, r3
 800508a:	d840      	bhi.n	800510e <ADC_ConfigureBoostMode+0x122>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	6893      	ldr	r3, [r2, #8]
 8005090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005094:	6093      	str	r3, [r2, #8]
}
 8005096:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8005098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800509c:	d006      	beq.n	80050ac <ADC_ConfigureBoostMode+0xc0>
 800509e:	d90a      	bls.n	80050b6 <ADC_ConfigureBoostMode+0xca>
 80050a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80050a4:	d002      	beq.n	80050ac <ADC_ConfigureBoostMode+0xc0>
 80050a6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80050aa:	d1bc      	bne.n	8005026 <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80050ac:	0c9b      	lsrs	r3, r3, #18
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80050b4:	e7b7      	b.n	8005026 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 80050b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050ba:	d0f7      	beq.n	80050ac <ADC_ConfigureBoostMode+0xc0>
 80050bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050c0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80050c4:	d0f2      	beq.n	80050ac <ADC_ConfigureBoostMode+0xc0>
 80050c6:	e7ae      	b.n	8005026 <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 80050c8:	4b23      	ldr	r3, [pc, #140]	; (8005158 <ADC_ConfigureBoostMode+0x16c>)
 80050ca:	429d      	cmp	r5, r3
 80050cc:	d805      	bhi.n	80050da <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	6893      	ldr	r3, [r2, #8]
 80050d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d6:	6093      	str	r3, [r2, #8]
}
 80050d8:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 80050da:	4b20      	ldr	r3, [pc, #128]	; (800515c <ADC_ConfigureBoostMode+0x170>)
 80050dc:	429d      	cmp	r5, r3
 80050de:	d91a      	bls.n	8005116 <ADC_ConfigureBoostMode+0x12a>
    else if (freq <= 25000000UL)
 80050e0:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <ADC_ConfigureBoostMode+0x174>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80050e2:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 80050e4:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80050e6:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 80050e8:	d829      	bhi.n	800513e <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80050ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050f2:	6093      	str	r3, [r2, #8]
}
 80050f4:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 80050f6:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80050f8:	f7ff f940 	bl	800437c <HAL_GetREVID>
 80050fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8005100:	4298      	cmp	r0, r3
 8005102:	d8e1      	bhi.n	80050c8 <ADC_ConfigureBoostMode+0xdc>
 8005104:	e795      	b.n	8005032 <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 8005106:	09c5      	lsrs	r5, r0, #7
        break;
 8005108:	e78d      	b.n	8005026 <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 800510a:	0905      	lsrs	r5, r0, #4
        break;
 800510c:	e78b      	b.n	8005026 <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <ADC_ConfigureBoostMode+0x16c>)
 8005110:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8005114:	d2db      	bcs.n	80050ce <ADC_ConfigureBoostMode+0xe2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	6893      	ldr	r3, [r2, #8]
 800511a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005122:	6093      	str	r3, [r2, #8]
}
 8005124:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005126:	0c1b      	lsrs	r3, r3, #16
 8005128:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800512c:	f7ff f926 	bl	800437c <HAL_GetREVID>
 8005130:	f241 0303 	movw	r3, #4099	; 0x1003
 8005134:	4298      	cmp	r0, r3
 8005136:	d8c7      	bhi.n	80050c8 <ADC_ConfigureBoostMode+0xdc>
 8005138:	e77b      	b.n	8005032 <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 800513a:	0985      	lsrs	r5, r0, #6
        break;
 800513c:	e773      	b.n	8005026 <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800513e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005142:	6093      	str	r3, [r2, #8]
}
 8005144:	bd38      	pop	{r3, r4, r5, pc}
 8005146:	bf00      	nop
 8005148:	40022000 	.word	0x40022000
 800514c:	58026300 	.word	0x58026300
 8005150:	01312d00 	.word	0x01312d00
 8005154:	40022300 	.word	0x40022300
 8005158:	00bebc21 	.word	0x00bebc21
 800515c:	017d7841 	.word	0x017d7841
 8005160:	02faf081 	.word	0x02faf081

08005164 <HAL_ADC_Init>:
{
 8005164:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8005166:	2300      	movs	r3, #0
{
 8005168:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800516a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800516c:	2800      	cmp	r0, #0
 800516e:	f000 80d1 	beq.w	8005314 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005172:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8005174:	4604      	mov	r4, r0
 8005176:	2d00      	cmp	r5, #0
 8005178:	f000 80bb 	beq.w	80052f2 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800517c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800517e:	6893      	ldr	r3, [r2, #8]
 8005180:	009d      	lsls	r5, r3, #2
 8005182:	d503      	bpl.n	800518c <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005184:	6891      	ldr	r1, [r2, #8]
 8005186:	4b72      	ldr	r3, [pc, #456]	; (8005350 <HAL_ADC_Init+0x1ec>)
 8005188:	400b      	ands	r3, r1
 800518a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800518c:	6893      	ldr	r3, [r2, #8]
 800518e:	00d8      	lsls	r0, r3, #3
 8005190:	d416      	bmi.n	80051c0 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005192:	4b70      	ldr	r3, [pc, #448]	; (8005354 <HAL_ADC_Init+0x1f0>)
 8005194:	4970      	ldr	r1, [pc, #448]	; (8005358 <HAL_ADC_Init+0x1f4>)
 8005196:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005198:	6890      	ldr	r0, [r2, #8]
 800519a:	099b      	lsrs	r3, r3, #6
 800519c:	fba1 1303 	umull	r1, r3, r1, r3
 80051a0:	496e      	ldr	r1, [pc, #440]	; (800535c <HAL_ADC_Init+0x1f8>)
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	4001      	ands	r1, r0
 80051a6:	3301      	adds	r3, #1
 80051a8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80051ac:	6091      	str	r1, [r2, #8]
 80051ae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80051b0:	9b01      	ldr	r3, [sp, #4]
 80051b2:	b12b      	cbz	r3, 80051c0 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80051b4:	9b01      	ldr	r3, [sp, #4]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80051ba:	9b01      	ldr	r3, [sp, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f9      	bne.n	80051b4 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80051c0:	6893      	ldr	r3, [r2, #8]
 80051c2:	00d9      	lsls	r1, r3, #3
 80051c4:	d424      	bmi.n	8005210 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80051c8:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ca:	f043 0310 	orr.w	r3, r3, #16
 80051ce:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051d2:	432b      	orrs	r3, r5
 80051d4:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051d6:	6893      	ldr	r3, [r2, #8]
 80051d8:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051de:	d11d      	bne.n	800521c <HAL_ADC_Init+0xb8>
 80051e0:	06db      	lsls	r3, r3, #27
 80051e2:	d41b      	bmi.n	800521c <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 80051e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80051ea:	f043 0302 	orr.w	r3, r3, #2
 80051ee:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051f0:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051f2:	07de      	lsls	r6, r3, #31
 80051f4:	d428      	bmi.n	8005248 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051f6:	4b5a      	ldr	r3, [pc, #360]	; (8005360 <HAL_ADC_Init+0x1fc>)
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d017      	beq.n	800522c <HAL_ADC_Init+0xc8>
 80051fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005200:	429a      	cmp	r2, r3
 8005202:	d013      	beq.n	800522c <HAL_ADC_Init+0xc8>
 8005204:	4b57      	ldr	r3, [pc, #348]	; (8005364 <HAL_ADC_Init+0x200>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	07d9      	lsls	r1, r3, #31
 800520a:	d41d      	bmi.n	8005248 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800520c:	4a56      	ldr	r2, [pc, #344]	; (8005368 <HAL_ADC_Init+0x204>)
 800520e:	e015      	b.n	800523c <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005210:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005212:	2500      	movs	r5, #0
 8005214:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005218:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800521a:	d0e1      	beq.n	80051e0 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800521c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800521e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005220:	f043 0310 	orr.w	r3, r3, #16
}
 8005224:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005226:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005228:	b002      	add	sp, #8
 800522a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800522c:	4a4c      	ldr	r2, [pc, #304]	; (8005360 <HAL_ADC_Init+0x1fc>)
 800522e:	4b4f      	ldr	r3, [pc, #316]	; (800536c <HAL_ADC_Init+0x208>)
 8005230:	6892      	ldr	r2, [r2, #8]
 8005232:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005234:	4313      	orrs	r3, r2
 8005236:	07d8      	lsls	r0, r3, #31
 8005238:	d406      	bmi.n	8005248 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800523a:	4a4d      	ldr	r2, [pc, #308]	; (8005370 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800523c:	6893      	ldr	r3, [r2, #8]
 800523e:	6861      	ldr	r1, [r4, #4]
 8005240:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005244:	430b      	orrs	r3, r1
 8005246:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005248:	f7ff f898 	bl	800437c <HAL_GetREVID>
 800524c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005250:	68a1      	ldr	r1, [r4, #8]
 8005252:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005254:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005256:	d852      	bhi.n	80052fe <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005258:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800525c:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800525e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005260:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8005264:	4302      	orrs	r2, r0
 8005266:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005268:	2b01      	cmp	r3, #1
 800526a:	d103      	bne.n	8005274 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800526c:	6a23      	ldr	r3, [r4, #32]
 800526e:	3b01      	subs	r3, #1
 8005270:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005276:	b123      	cbz	r3, 8005282 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005278:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800527c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800527e:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005280:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	493b      	ldr	r1, [pc, #236]	; (8005374 <HAL_ADC_Init+0x210>)
 8005286:	68d8      	ldr	r0, [r3, #12]
 8005288:	4001      	ands	r1, r0
 800528a:	430a      	orrs	r2, r1
 800528c:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005294:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005296:	d11c      	bne.n	80052d2 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005298:	0712      	lsls	r2, r2, #28
 800529a:	d41a      	bmi.n	80052d2 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800529c:	68d8      	ldr	r0, [r3, #12]
 800529e:	4a36      	ldr	r2, [pc, #216]	; (8005378 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052a0:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80052a2:	4002      	ands	r2, r0
 80052a4:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80052a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80052aa:	430a      	orrs	r2, r1
 80052ac:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80052ae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80052b2:	2a01      	cmp	r2, #1
 80052b4:	d03a      	beq.n	800532c <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80052be:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80052c0:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80052c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052c4:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80052c8:	430a      	orrs	r2, r1
 80052ca:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80052cc:	f7ff fe8e 	bl	8004fec <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80052d0:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80052d2:	68e2      	ldr	r2, [r4, #12]
 80052d4:	2a01      	cmp	r2, #1
 80052d6:	d021      	beq.n	800531c <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80052d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052da:	f022 020f 	bic.w	r2, r2, #15
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80052e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 80052e2:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80052e4:	f023 0303 	bic.w	r3, r3, #3
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	6563      	str	r3, [r4, #84]	; 0x54
}
 80052ee:	b002      	add	sp, #8
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80052f2:	f7fe fc25 	bl	8003b40 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80052f6:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80052f8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80052fc:	e73e      	b.n	800517c <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80052fe:	2910      	cmp	r1, #16
 8005300:	d1aa      	bne.n	8005258 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005302:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005304:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005306:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800530a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800530c:	430a      	orrs	r2, r1
 800530e:	f042 021c 	orr.w	r2, r2, #28
 8005312:	e7a9      	b.n	8005268 <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 8005314:	2501      	movs	r5, #1
}
 8005316:	4628      	mov	r0, r5
 8005318:	b002      	add	sp, #8
 800531a:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800531c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800531e:	69a2      	ldr	r2, [r4, #24]
 8005320:	f021 010f 	bic.w	r1, r1, #15
 8005324:	3a01      	subs	r2, #1
 8005326:	430a      	orrs	r2, r1
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
 800532a:	e7d9      	b.n	80052e0 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800532c:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8005330:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8005332:	3901      	subs	r1, #1
 8005334:	6918      	ldr	r0, [r3, #16]
 8005336:	4332      	orrs	r2, r6
 8005338:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800533c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800533e:	430a      	orrs	r2, r1
 8005340:	490e      	ldr	r1, [pc, #56]	; (800537c <HAL_ADC_Init+0x218>)
 8005342:	4001      	ands	r1, r0
 8005344:	430a      	orrs	r2, r1
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	611a      	str	r2, [r3, #16]
 800534c:	e7b7      	b.n	80052be <HAL_ADC_Init+0x15a>
 800534e:	bf00      	nop
 8005350:	5fffffc0 	.word	0x5fffffc0
 8005354:	240001ec 	.word	0x240001ec
 8005358:	053e2d63 	.word	0x053e2d63
 800535c:	6fffffc0 	.word	0x6fffffc0
 8005360:	40022000 	.word	0x40022000
 8005364:	58026000 	.word	0x58026000
 8005368:	58026300 	.word	0x58026300
 800536c:	40022100 	.word	0x40022100
 8005370:	40022300 	.word	0x40022300
 8005374:	fff0c003 	.word	0xfff0c003
 8005378:	ffffbffc 	.word	0xffffbffc
 800537c:	fc00f81e 	.word	0xfc00f81e

08005380 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005380:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005382:	2300      	movs	r3, #0
{
 8005384:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8005386:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005388:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800538c:	2b01      	cmp	r3, #1
 800538e:	d040      	beq.n	8005412 <HAL_ADCEx_Calibration_Start+0x92>
 8005390:	2301      	movs	r3, #1
 8005392:	4604      	mov	r4, r0
 8005394:	460e      	mov	r6, r1
 8005396:	4615      	mov	r5, r2
 8005398:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800539c:	f7ff fdec 	bl	8004f78 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80053a0:	b9e8      	cbnz	r0, 80053de <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053a2:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80053a4:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 80053a8:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <HAL_ADCEx_Calibration_Start+0x98>)
 80053aa:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
 80053ae:	4d1b      	ldr	r5, [pc, #108]	; (800541c <HAL_ADCEx_Calibration_Start+0x9c>)
 80053b0:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80053b2:	4f1b      	ldr	r7, [pc, #108]	; (8005420 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 80053b4:	f043 0302 	orr.w	r3, r3, #2
 80053b8:	6563      	str	r3, [r4, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	689e      	ldr	r6, [r3, #8]
 80053be:	4035      	ands	r5, r6
 80053c0:	4315      	orrs	r5, r2
 80053c2:	430d      	orrs	r5, r1
 80053c4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80053c8:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	2a00      	cmp	r2, #0
 80053ce:	db0f      	blt.n	80053f0 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	6563      	str	r3, [r4, #84]	; 0x54
 80053dc:	e003      	b.n	80053e6 <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053e0:	f043 0310 	orr.w	r3, r3, #16
 80053e4:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053e6:	2300      	movs	r3, #0
 80053e8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80053ec:	b003      	add	sp, #12
 80053ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 80053f0:	9a01      	ldr	r2, [sp, #4]
 80053f2:	3201      	adds	r2, #1
 80053f4:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80053f6:	9a01      	ldr	r2, [sp, #4]
 80053f8:	42ba      	cmp	r2, r7
 80053fa:	d3e6      	bcc.n	80053ca <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 80053fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80053fe:	2200      	movs	r2, #0
        return HAL_ERROR;
 8005400:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8005402:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8005406:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 800540a:	f043 0310 	orr.w	r3, r3, #16
 800540e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8005410:	e7ec      	b.n	80053ec <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8005412:	2002      	movs	r0, #2
}
 8005414:	b003      	add	sp, #12
 8005416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005418:	ffffeefd 	.word	0xffffeefd
 800541c:	3ffeffc0 	.word	0x3ffeffc0
 8005420:	25c3f800 	.word	0x25c3f800

08005424 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005428:	f8d0 8000 	ldr.w	r8, [r0]
{
 800542c:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800542e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8005432:	f015 0504 	ands.w	r5, r5, #4
 8005436:	d117      	bne.n	8005468 <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005438:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800543c:	4604      	mov	r4, r0
 800543e:	2b01      	cmp	r3, #1
 8005440:	d012      	beq.n	8005468 <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005442:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 8005444:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005448:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800544a:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800544c:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 800544e:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005452:	d00d      	beq.n	8005470 <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005454:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8005456:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 8005458:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800545c:	f043 0320 	orr.w	r3, r3, #32
 8005460:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8005462:	b01a      	add	sp, #104	; 0x68
 8005464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005468:	2002      	movs	r0, #2
}
 800546a:	b01a      	add	sp, #104	; 0x68
 800546c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005470:	4d22      	ldr	r5, [pc, #136]	; (80054fc <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 8005472:	460e      	mov	r6, r1
 8005474:	4617      	mov	r7, r2
 8005476:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8005478:	f7ff fd28 	bl	8004ecc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800547c:	b128      	cbz	r0, 800548a <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 800547e:	2300      	movs	r3, #0
 8005480:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005484:	b01a      	add	sp, #104	; 0x68
 8005486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800548a:	a801      	add	r0, sp, #4
 800548c:	f7ff fd1e 	bl	8004ecc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005490:	2800      	cmp	r0, #0
 8005492:	d1f4      	bne.n	800547e <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8005494:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005496:	4a1a      	ldr	r2, [pc, #104]	; (8005500 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005498:	4b1a      	ldr	r3, [pc, #104]	; (8005504 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 800549a:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800549c:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 80054a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054a4:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 80054a6:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80054a8:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80054aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80054ac:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 80054b0:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 80054b4:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054b6:	d01d      	beq.n	80054f4 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80054b8:	45ac      	cmp	ip, r5
 80054ba:	d01b      	beq.n	80054f4 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80054bc:	4914      	ldr	r1, [pc, #80]	; (8005510 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054be:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80054c0:	463b      	mov	r3, r7
 80054c2:	4632      	mov	r2, r6
 80054c4:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054c6:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 80054ca:	2500      	movs	r5, #0
 80054cc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80054d0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80054d4:	f045 0510 	orr.w	r5, r5, #16
 80054d8:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80054dc:	f000 fe5c 	bl	8006198 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80054e0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80054e2:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 80054e4:	6891      	ldr	r1, [r2, #8]
 80054e6:	400b      	ands	r3, r1
 80054e8:	f043 0304 	orr.w	r3, r3, #4
 80054ec:	6093      	str	r3, [r2, #8]
}
 80054ee:	b01a      	add	sp, #104	; 0x68
 80054f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054f4:	4908      	ldr	r1, [pc, #32]	; (8005518 <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 80054f6:	e7e2      	b.n	80054be <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 80054f8:	40022000 	.word	0x40022000
 80054fc:	40022100 	.word	0x40022100
 8005500:	fffff0fe 	.word	0xfffff0fe
 8005504:	08004671 	.word	0x08004671
 8005508:	080043e1 	.word	0x080043e1
 800550c:	080046dd 	.word	0x080046dd
 8005510:	58026300 	.word	0x58026300
 8005514:	7fffffc0 	.word	0x7fffffc0
 8005518:	40022300 	.word	0x40022300

0800551c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop

08005520 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop

08005524 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop

08005528 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop

0800552c <HAL_ADCEx_EndOfSamplingCallback>:
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop

08005530 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005530:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005532:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8005536:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005538:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800553a:	2a01      	cmp	r2, #1
 800553c:	d04d      	beq.n	80055da <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800553e:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005540:	4c2b      	ldr	r4, [pc, #172]	; (80055f0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005542:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005544:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005546:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005548:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800554a:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 800554c:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005550:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005552:	d008      	beq.n	8005566 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005554:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800555a:	f041 0120 	orr.w	r1, r1, #32
 800555e:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005560:	b01a      	add	sp, #104	; 0x68
 8005562:	bcf0      	pop	{r4, r5, r6, r7}
 8005564:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005566:	4c23      	ldr	r4, [pc, #140]	; (80055f4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005568:	68a2      	ldr	r2, [r4, #8]
 800556a:	0752      	lsls	r2, r2, #29
 800556c:	d50b      	bpl.n	8005586 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800556e:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005572:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005574:	f042 0220 	orr.w	r2, r2, #32
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8005580:	b01a      	add	sp, #104	; 0x68
 8005582:	bcf0      	pop	{r4, r5, r6, r7}
 8005584:	4770      	bx	lr
 8005586:	68a8      	ldr	r0, [r5, #8]
 8005588:	f010 0004 	ands.w	r0, r0, #4
 800558c:	d1f0      	bne.n	8005570 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800558e:	b1c6      	cbz	r6, 80055c2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005590:	f8df c068 	ldr.w	ip, [pc, #104]	; 80055fc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8005594:	684f      	ldr	r7, [r1, #4]
 8005596:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800559a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800559e:	433a      	orrs	r2, r7
 80055a0:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055a4:	68ad      	ldr	r5, [r5, #8]
 80055a6:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055a8:	432a      	orrs	r2, r5
 80055aa:	07d4      	lsls	r4, r2, #31
 80055ac:	d413      	bmi.n	80055d6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 80055ae:	688a      	ldr	r2, [r1, #8]
 80055b0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80055b4:	4316      	orrs	r6, r2
 80055b6:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80055b8:	400a      	ands	r2, r1
 80055ba:	4316      	orrs	r6, r2
 80055bc:	f8cc 6008 	str.w	r6, [ip, #8]
 80055c0:	e7db      	b.n	800557a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80055c2:	490e      	ldr	r1, [pc, #56]	; (80055fc <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80055c4:	688a      	ldr	r2, [r1, #8]
 80055c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80055ca:	608a      	str	r2, [r1, #8]
 80055cc:	68a8      	ldr	r0, [r5, #8]
 80055ce:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055d0:	4302      	orrs	r2, r0
 80055d2:	07d0      	lsls	r0, r2, #31
 80055d4:	d505      	bpl.n	80055e2 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055d6:	2000      	movs	r0, #0
 80055d8:	e7cf      	b.n	800557a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80055da:	2002      	movs	r0, #2
}
 80055dc:	b01a      	add	sp, #104	; 0x68
 80055de:	bcf0      	pop	{r4, r5, r6, r7}
 80055e0:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055e2:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055e4:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055e6:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80055e8:	4022      	ands	r2, r4
 80055ea:	608a      	str	r2, [r1, #8]
 80055ec:	e7c5      	b.n	800557a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80055ee:	bf00      	nop
 80055f0:	40022000 	.word	0x40022000
 80055f4:	40022100 	.word	0x40022100
 80055f8:	fffff0e0 	.word	0xfffff0e0
 80055fc:	40022300 	.word	0x40022300

08005600 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005600:	4906      	ldr	r1, [pc, #24]	; (800561c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005602:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005606:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800560a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800560c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005610:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005614:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8005616:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005618:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800561a:	4770      	bx	lr
 800561c:	e000ed00 	.word	0xe000ed00
 8005620:	05fa0000 	.word	0x05fa0000

08005624 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005624:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <HAL_NVIC_SetPriority+0x70>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800562c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800562e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005632:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005636:	f1be 0f04 	cmp.w	lr, #4
 800563a:	bf28      	it	cs
 800563c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005640:	f1bc 0f06 	cmp.w	ip, #6
 8005644:	d91a      	bls.n	800567c <HAL_NVIC_SetPriority+0x58>
 8005646:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005648:	f04f 3cff 	mov.w	ip, #4294967295
 800564c:	fa0c fc03 	lsl.w	ip, ip, r3
 8005650:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005654:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8005658:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800565a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800565e:	ea21 010c 	bic.w	r1, r1, ip
 8005662:	fa01 f103 	lsl.w	r1, r1, r3
 8005666:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800566a:	db0a      	blt.n	8005682 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566c:	0109      	lsls	r1, r1, #4
 800566e:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <HAL_NVIC_SetPriority+0x74>)
 8005670:	b2c9      	uxtb	r1, r1
 8005672:	4403      	add	r3, r0
 8005674:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005678:	f85d fb04 	ldr.w	pc, [sp], #4
 800567c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800567e:	4613      	mov	r3, r2
 8005680:	e7e8      	b.n	8005654 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005682:	f000 000f 	and.w	r0, r0, #15
 8005686:	0109      	lsls	r1, r1, #4
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <HAL_NVIC_SetPriority+0x78>)
 800568a:	b2c9      	uxtb	r1, r1
 800568c:	4403      	add	r3, r0
 800568e:	7619      	strb	r1, [r3, #24]
 8005690:	f85d fb04 	ldr.w	pc, [sp], #4
 8005694:	e000ed00 	.word	0xe000ed00
 8005698:	e000e100 	.word	0xe000e100
 800569c:	e000ecfc 	.word	0xe000ecfc

080056a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80056a0:	2800      	cmp	r0, #0
 80056a2:	db07      	blt.n	80056b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056a4:	2301      	movs	r3, #1
 80056a6:	f000 011f 	and.w	r1, r0, #31
 80056aa:	4a03      	ldr	r2, [pc, #12]	; (80056b8 <HAL_NVIC_EnableIRQ+0x18>)
 80056ac:	0940      	lsrs	r0, r0, #5
 80056ae:	408b      	lsls	r3, r1
 80056b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	e000e100 	.word	0xe000e100

080056bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056bc:	1e43      	subs	r3, r0, #1
 80056be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056c2:	d20c      	bcs.n	80056de <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056c4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056c8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ca:	4906      	ldr	r1, [pc, #24]	; (80056e4 <HAL_SYSTICK_Config+0x28>)
 80056cc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056d0:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056d2:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d4:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056d8:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056da:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80056de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80056e8:	b188      	cbz	r0, 800570e <HAL_DAC_Init+0x26>
{
 80056ea:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80056ec:	7903      	ldrb	r3, [r0, #4]
 80056ee:	4604      	mov	r4, r0
 80056f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056f4:	b13b      	cbz	r3, 8005706 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056f6:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80056f8:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80056fa:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80056fc:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80056fe:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005700:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005702:	7122      	strb	r2, [r4, #4]
}
 8005704:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005706:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005708:	f7fe fac2 	bl	8003c90 <HAL_DAC_MspInit>
 800570c:	e7f3      	b.n	80056f6 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800570e:	2001      	movs	r0, #1
}
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop

08005714 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005714:	7942      	ldrb	r2, [r0, #5]
 8005716:	2a01      	cmp	r2, #1
 8005718:	d02e      	beq.n	8005778 <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800571a:	4603      	mov	r3, r0
 800571c:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005720:	6800      	ldr	r0, [r0, #0]
 8005722:	2201      	movs	r2, #1
{
 8005724:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 8005726:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 800572a:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800572e:	6804      	ldr	r4, [r0, #0]
 8005730:	fa02 f20e 	lsl.w	r2, r2, lr
 8005734:	4322      	orrs	r2, r4
 8005736:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005738:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 800573a:	b969      	cbnz	r1, 8005758 <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800573c:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8005740:	4562      	cmp	r2, ip
 8005742:	d103      	bne.n	800574c <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005744:	6842      	ldr	r2, [r0, #4]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800574c:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 800574e:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8005750:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8005752:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8005754:	715a      	strb	r2, [r3, #5]
}
 8005756:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005758:	fa0c fc0e 	lsl.w	ip, ip, lr
 800575c:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8005760:	4562      	cmp	r2, ip
 8005762:	d1f3      	bne.n	800574c <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005764:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8005766:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005768:	f042 0202 	orr.w	r2, r2, #2
 800576c:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 800576e:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005770:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 8005772:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8005774:	715a      	strb	r2, [r3, #5]
}
 8005776:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8005778:	2002      	movs	r0, #2
}
 800577a:	4770      	bx	lr

0800577c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005780:	7940      	ldrb	r0, [r0, #5]
{
 8005782:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8005784:	2801      	cmp	r0, #1
 8005786:	d053      	beq.n	8005830 <HAL_DAC_Start_DMA+0xb4>
 8005788:	460d      	mov	r5, r1
 800578a:	4611      	mov	r1, r2
 800578c:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800578e:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8005790:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005792:	2202      	movs	r2, #2
 8005794:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8005796:	bb3d      	cbnz	r5, 80057e8 <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005798:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 800579a:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800579c:	4a37      	ldr	r2, [pc, #220]	; (800587c <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800579e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005884 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80057a2:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80057a4:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80057a6:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80057aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80057ae:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8005888 <HAL_DAC_Start_DMA+0x10c>
 80057b2:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80057b6:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 80057b8:	d042      	beq.n	8005840 <HAL_DAC_Start_DMA+0xc4>
 80057ba:	2f08      	cmp	r7, #8
 80057bc:	d03d      	beq.n	800583a <HAL_DAC_Start_DMA+0xbe>
 80057be:	2f00      	cmp	r7, #0
 80057c0:	d038      	beq.n	8005834 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80057c2:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80057c4:	6837      	ldr	r7, [r6, #0]
 80057c6:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 80057ca:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80057cc:	f000 fce4 	bl	8006198 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80057d0:	2300      	movs	r3, #0
 80057d2:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80057d4:	bb38      	cbnz	r0, 8005826 <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	f005 0110 	and.w	r1, r5, #16
 80057dc:	2501      	movs	r5, #1
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	408d      	lsls	r5, r1
 80057e2:	4315      	orrs	r5, r2
 80057e4:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80057e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80057e8:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 80057ea:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80057ec:	4a24      	ldr	r2, [pc, #144]	; (8005880 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80057ee:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800588c <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80057f2:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80057f4:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80057f6:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80057fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80057fe:	f8df c090 	ldr.w	ip, [pc, #144]	; 8005890 <HAL_DAC_Start_DMA+0x114>
 8005802:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005806:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8005808:	d02f      	beq.n	800586a <HAL_DAC_Start_DMA+0xee>
 800580a:	2f08      	cmp	r7, #8
 800580c:	d024      	beq.n	8005858 <HAL_DAC_Start_DMA+0xdc>
 800580e:	b1d7      	cbz	r7, 8005846 <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005810:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005812:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005814:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005818:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800581a:	f000 fcbd 	bl	8006198 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 800581e:	2300      	movs	r3, #0
 8005820:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8005822:	2800      	cmp	r0, #0
 8005824:	d0d7      	beq.n	80057d6 <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	f043 0304 	orr.w	r3, r3, #4
 800582c:	6123      	str	r3, [r4, #16]
}
 800582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8005830:	2002      	movs	r0, #2
}
 8005832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005834:	f106 0208 	add.w	r2, r6, #8
        break;
 8005838:	e7c4      	b.n	80057c4 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800583a:	f106 0210 	add.w	r2, r6, #16
        break;
 800583e:	e7c1      	b.n	80057c4 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005840:	f106 020c 	add.w	r2, r6, #12
        break;
 8005844:	e7be      	b.n	80057c4 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005846:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005848:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800584c:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005850:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005852:	f000 fca1 	bl	8006198 <HAL_DMA_Start_IT>
 8005856:	e7e2      	b.n	800581e <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005858:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800585a:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800585e:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005862:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005864:	f000 fc98 	bl	8006198 <HAL_DMA_Start_IT>
 8005868:	e7d9      	b.n	800581e <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800586a:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800586c:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005870:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005874:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005876:	f000 fc8f 	bl	8006198 <HAL_DMA_Start_IT>
 800587a:	e7d0      	b.n	800581e <HAL_DAC_Start_DMA+0xa2>
 800587c:	080058c5 	.word	0x080058c5
 8005880:	08005ab1 	.word	0x08005ab1
 8005884:	080058d5 	.word	0x080058d5
 8005888:	080058e5 	.word	0x080058e5
 800588c:	08005ac5 	.word	0x08005ac5
 8005890:	08005ad5 	.word	0x08005ad5

08005894 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005894:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005896:	6800      	ldr	r0, [r0, #0]
{
 8005898:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 800589a:	2400      	movs	r4, #0
 800589c:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 800589e:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80058a0:	b951      	cbnz	r1, 80058b8 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80058a2:	9901      	ldr	r1, [sp, #4]
 80058a4:	3108      	adds	r1, #8
 80058a6:	440a      	add	r2, r1
 80058a8:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80058aa:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 80058ac:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80058ae:	6013      	str	r3, [r2, #0]
}
 80058b0:	b003      	add	sp, #12
 80058b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b6:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80058b8:	9901      	ldr	r1, [sp, #4]
 80058ba:	3114      	adds	r1, #20
 80058bc:	440a      	add	r2, r1
 80058be:	9201      	str	r2, [sp, #4]
 80058c0:	e7f3      	b.n	80058aa <HAL_DAC_SetValue+0x16>
 80058c2:	bf00      	nop

080058c4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80058c4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058c6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80058c8:	4620      	mov	r0, r4
 80058ca:	f7fc fcd3 	bl	8002274 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058ce:	2301      	movs	r3, #1
 80058d0:	7123      	strb	r3, [r4, #4]
}
 80058d2:	bd10      	pop	{r4, pc}

080058d4 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80058d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80058d6:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80058d8:	f7fc fcde 	bl	8002298 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80058dc:	bd08      	pop	{r3, pc}
 80058de:	bf00      	nop

080058e0 <HAL_DAC_ErrorCallbackCh1>:
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop

080058e4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80058e4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80058e8:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80058ea:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80058ec:	f043 0304 	orr.w	r3, r3, #4
 80058f0:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80058f2:	f7ff fff5 	bl	80058e0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058f6:	2301      	movs	r3, #1
 80058f8:	7123      	strb	r3, [r4, #4]
}
 80058fa:	bd10      	pop	{r4, pc}

080058fc <HAL_DAC_DMAUnderrunCallbackCh1>:
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop

08005900 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005900:	6803      	ldr	r3, [r0, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	0491      	lsls	r1, r2, #18
{
 8005906:	b510      	push	{r4, lr}
 8005908:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800590a:	d502      	bpl.n	8005912 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800590c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800590e:	0492      	lsls	r2, r2, #18
 8005910:	d418      	bmi.n	8005944 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	0091      	lsls	r1, r2, #2
 8005916:	d502      	bpl.n	800591e <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800591a:	0092      	lsls	r2, r2, #2
 800591c:	d400      	bmi.n	8005920 <HAL_DAC_IRQHandler+0x20>
}
 800591e:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8005920:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005922:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005926:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8005928:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800592a:	6922      	ldr	r2, [r4, #16]
 800592c:	f042 0202 	orr.w	r2, r2, #2
 8005930:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005932:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800593a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800593e:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005940:	f000 b8d4 	b.w	8005aec <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8005944:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800594a:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800594c:	6902      	ldr	r2, [r0, #16]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005954:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800595c:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800595e:	f7ff ffcd 	bl	80058fc <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	e7d5      	b.n	8005912 <HAL_DAC_IRQHandler+0x12>
 8005966:	bf00      	nop

08005968 <HAL_DAC_ConfigChannel>:
{
 8005968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 800596c:	7943      	ldrb	r3, [r0, #5]
{
 800596e:	460d      	mov	r5, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005970:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8005972:	2b01      	cmp	r3, #1
 8005974:	f000 808d 	beq.w	8005a92 <HAL_DAC_ConfigChannel+0x12a>
 8005978:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800597a:	2904      	cmp	r1, #4
 800597c:	4604      	mov	r4, r0
 800597e:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8005980:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005982:	f04f 0302 	mov.w	r3, #2
 8005986:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005988:	d045      	beq.n	8005a16 <HAL_DAC_ConfigChannel+0xae>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800598a:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 800598e:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005990:	692b      	ldr	r3, [r5, #16]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d108      	bne.n	80059a8 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005996:	261f      	movs	r6, #31
    tmpreg1 = hdac->Instance->CCR;
 8005998:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800599a:	4096      	lsls	r6, r2
 800599c:	ea23 0606 	bic.w	r6, r3, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059a0:	696b      	ldr	r3, [r5, #20]
 80059a2:	4093      	lsls	r3, r2
 80059a4:	4333      	orrs	r3, r6
    hdac->Instance->CCR = tmpreg1;
 80059a6:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80059a8:	2607      	movs	r6, #7
 80059aa:	fa06 f302 	lsl.w	r3, r6, r2
  tmpreg1 = hdac->Instance->MCR;
 80059ae:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80059b0:	ea26 0603 	bic.w	r6, r6, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80059b4:	e9d5 7302 	ldrd	r7, r3, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d028      	beq.n	8005a0e <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d028      	beq.n	8005a12 <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80059c0:	fab7 f387 	clz	r3, r7
 80059c4:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80059c6:	433b      	orrs	r3, r7
 80059c8:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059ca:	6869      	ldr	r1, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80059cc:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059d0:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059d2:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80059d4:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059d6:	4333      	orrs	r3, r6
  hdac->Instance->MCR = tmpreg1;
 80059d8:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80059da:	6803      	ldr	r3, [r0, #0]
 80059dc:	ea23 0305 	bic.w	r3, r3, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80059e0:	f640 75fe 	movw	r5, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80059e4:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80059e6:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 80059e8:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80059ea:	ea23 0305 	bic.w	r3, r3, r5
  hdac->State = HAL_DAC_STATE_READY;
 80059ee:	2501      	movs	r5, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059f0:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80059f2:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 80059f4:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80059f6:	fa01 f302 	lsl.w	r3, r1, r2
 80059fa:	6802      	ldr	r2, [r0, #0]
  __HAL_UNLOCK(hdac);
 80059fc:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80059fe:	ea22 0203 	bic.w	r2, r2, r3
 8005a02:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 8005a04:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8005a06:	7125      	strb	r5, [r4, #4]
  __HAL_UNLOCK(hdac);
 8005a08:	7161      	strb	r1, [r4, #5]
}
 8005a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e7d9      	b.n	80059c6 <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e7d7      	b.n	80059c6 <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 8005a16:	f7fe fc99 	bl	800434c <HAL_GetTick>
 8005a1a:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8005a1c:	b9c6      	cbnz	r6, 8005a50 <HAL_DAC_ConfigChannel+0xe8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a1e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8005aa8 <HAL_DAC_ConfigChannel+0x140>
 8005a22:	e004      	b.n	8005a2e <HAL_DAC_ConfigChannel+0xc6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a24:	f7fe fc92 	bl	800434c <HAL_GetTick>
 8005a28:	1bc3      	subs	r3, r0, r7
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d834      	bhi.n	8005a98 <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	ea13 0f08 	tst.w	r3, r8
 8005a36:	d1f5      	bne.n	8005a24 <HAL_DAC_ConfigChannel+0xbc>
      HAL_Delay(1);
 8005a38:	2001      	movs	r0, #1
 8005a3a:	f7fe fc8d 	bl	8004358 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	69ab      	ldr	r3, [r5, #24]
 8005a42:	6403      	str	r3, [r0, #64]	; 0x40
 8005a44:	e00e      	b.n	8005a64 <HAL_DAC_ConfigChannel+0xfc>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a46:	f7fe fc81 	bl	800434c <HAL_GetTick>
 8005a4a:	1bc3      	subs	r3, r0, r7
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d823      	bhi.n	8005a98 <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dbf6      	blt.n	8005a46 <HAL_DAC_ConfigChannel+0xde>
      HAL_Delay(1U);
 8005a58:	2001      	movs	r0, #1
 8005a5a:	f7fe fc7d 	bl	8004358 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a5e:	6820      	ldr	r0, [r4, #0]
 8005a60:	69ab      	ldr	r3, [r5, #24]
 8005a62:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005a64:	f006 0210 	and.w	r2, r6, #16
 8005a68:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a6c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005a6e:	4091      	lsls	r1, r2
 8005a70:	ea23 0301 	bic.w	r3, r3, r1
 8005a74:	69e9      	ldr	r1, [r5, #28]
 8005a76:	4091      	lsls	r1, r2
 8005a78:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a7a:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005a7c:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a7e:	4091      	lsls	r1, r2
 8005a80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005a82:	ea23 0301 	bic.w	r3, r3, r1
 8005a86:	6a29      	ldr	r1, [r5, #32]
 8005a88:	4091      	lsls	r1, r2
 8005a8a:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005a8c:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a8e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005a90:	e77e      	b.n	8005990 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 8005a92:	2002      	movs	r0, #2
}
 8005a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a98:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a9a:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a9c:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8005aa0:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005aa2:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005aa4:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8005aa6:	e7b0      	b.n	8005a0a <HAL_DAC_ConfigChannel+0xa2>
 8005aa8:	20008000 	.word	0x20008000

08005aac <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop

08005ab0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005ab0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f7ff fff9 	bl	8005aac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005aba:	2301      	movs	r3, #1
 8005abc:	7123      	strb	r3, [r4, #4]
}
 8005abe:	bd10      	pop	{r4, pc}

08005ac0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop

08005ac4 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005ac4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005ac6:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005ac8:	f7ff fffa 	bl	8005ac0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005acc:	bd08      	pop	{r3, pc}
 8005ace:	bf00      	nop

08005ad0 <HAL_DACEx_ErrorCallbackCh2>:
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop

08005ad4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ad8:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005ada:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005adc:	f043 0304 	orr.w	r3, r3, #4
 8005ae0:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005ae2:	f7ff fff5 	bl	8005ad0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	7123      	strb	r3, [r4, #4]
}
 8005aea:	bd10      	pop	{r4, pc}

08005aec <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop

08005af0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005af0:	6802      	ldr	r2, [r0, #0]
 8005af2:	4b34      	ldr	r3, [pc, #208]	; (8005bc4 <DMA_CalcBaseAndBitshift+0xd4>)
 8005af4:	4934      	ldr	r1, [pc, #208]	; (8005bc8 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8005af6:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005af8:	4d34      	ldr	r5, [pc, #208]	; (8005bcc <DMA_CalcBaseAndBitshift+0xdc>)
 8005afa:	4c35      	ldr	r4, [pc, #212]	; (8005bd0 <DMA_CalcBaseAndBitshift+0xe0>)
 8005afc:	42aa      	cmp	r2, r5
 8005afe:	bf18      	it	ne
 8005b00:	429a      	cmpne	r2, r3
 8005b02:	bf0c      	ite	eq
 8005b04:	2301      	moveq	r3, #1
 8005b06:	2300      	movne	r3, #0
 8005b08:	428a      	cmp	r2, r1
 8005b0a:	bf08      	it	eq
 8005b0c:	f043 0301 	orreq.w	r3, r3, #1
 8005b10:	3130      	adds	r1, #48	; 0x30
 8005b12:	42a2      	cmp	r2, r4
 8005b14:	bf08      	it	eq
 8005b16:	f043 0301 	orreq.w	r3, r3, #1
 8005b1a:	3430      	adds	r4, #48	; 0x30
 8005b1c:	428a      	cmp	r2, r1
 8005b1e:	bf08      	it	eq
 8005b20:	f043 0301 	orreq.w	r3, r3, #1
 8005b24:	3130      	adds	r1, #48	; 0x30
 8005b26:	42a2      	cmp	r2, r4
 8005b28:	bf08      	it	eq
 8005b2a:	f043 0301 	orreq.w	r3, r3, #1
 8005b2e:	3430      	adds	r4, #48	; 0x30
 8005b30:	428a      	cmp	r2, r1
 8005b32:	bf08      	it	eq
 8005b34:	f043 0301 	orreq.w	r3, r3, #1
 8005b38:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005b3c:	42a2      	cmp	r2, r4
 8005b3e:	bf08      	it	eq
 8005b40:	f043 0301 	orreq.w	r3, r3, #1
 8005b44:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8005b48:	428a      	cmp	r2, r1
 8005b4a:	bf08      	it	eq
 8005b4c:	f043 0301 	orreq.w	r3, r3, #1
 8005b50:	3130      	adds	r1, #48	; 0x30
 8005b52:	42a2      	cmp	r2, r4
 8005b54:	bf08      	it	eq
 8005b56:	f043 0301 	orreq.w	r3, r3, #1
 8005b5a:	3430      	adds	r4, #48	; 0x30
 8005b5c:	428a      	cmp	r2, r1
 8005b5e:	bf08      	it	eq
 8005b60:	f043 0301 	orreq.w	r3, r3, #1
 8005b64:	3130      	adds	r1, #48	; 0x30
 8005b66:	42a2      	cmp	r2, r4
 8005b68:	bf08      	it	eq
 8005b6a:	f043 0301 	orreq.w	r3, r3, #1
 8005b6e:	3430      	adds	r4, #48	; 0x30
 8005b70:	428a      	cmp	r2, r1
 8005b72:	bf08      	it	eq
 8005b74:	f043 0301 	orreq.w	r3, r3, #1
 8005b78:	3130      	adds	r1, #48	; 0x30
 8005b7a:	42a2      	cmp	r2, r4
 8005b7c:	bf08      	it	eq
 8005b7e:	f043 0301 	orreq.w	r3, r3, #1
 8005b82:	428a      	cmp	r2, r1
 8005b84:	bf08      	it	eq
 8005b86:	f043 0301 	orreq.w	r3, r3, #1
 8005b8a:	b913      	cbnz	r3, 8005b92 <DMA_CalcBaseAndBitshift+0xa2>
 8005b8c:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <DMA_CalcBaseAndBitshift+0xe4>)
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d113      	bne.n	8005bba <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b92:	b2d3      	uxtb	r3, r2
 8005b94:	4910      	ldr	r1, [pc, #64]	; (8005bd8 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005b96:	4c11      	ldr	r4, [pc, #68]	; (8005bdc <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b98:	3b10      	subs	r3, #16
 8005b9a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8005b9e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ba2:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ba6:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005baa:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005bac:	bf88      	it	hi
 8005bae:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005bb0:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005bb2:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	bc30      	pop	{r4, r5}
 8005bb8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005bba:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8005bbe:	6583      	str	r3, [r0, #88]	; 0x58
 8005bc0:	e7f8      	b.n	8005bb4 <DMA_CalcBaseAndBitshift+0xc4>
 8005bc2:	bf00      	nop
 8005bc4:	40020010 	.word	0x40020010
 8005bc8:	40020040 	.word	0x40020040
 8005bcc:	40020028 	.word	0x40020028
 8005bd0:	40020058 	.word	0x40020058
 8005bd4:	400204b8 	.word	0x400204b8
 8005bd8:	aaaaaaab 	.word	0xaaaaaaab
 8005bdc:	080187cc 	.word	0x080187cc
 8005be0:	fffffc00 	.word	0xfffffc00

08005be4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005be4:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005be6:	4a29      	ldr	r2, [pc, #164]	; (8005c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8005be8:	4929      	ldr	r1, [pc, #164]	; (8005c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8005bea:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bec:	4d29      	ldr	r5, [pc, #164]	; (8005c94 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8005bee:	4c2a      	ldr	r4, [pc, #168]	; (8005c98 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8005bf0:	42ab      	cmp	r3, r5
 8005bf2:	bf18      	it	ne
 8005bf4:	4293      	cmpne	r3, r2
 8005bf6:	bf0c      	ite	eq
 8005bf8:	2201      	moveq	r2, #1
 8005bfa:	2200      	movne	r2, #0
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	bf08      	it	eq
 8005c00:	f042 0201 	orreq.w	r2, r2, #1
 8005c04:	3128      	adds	r1, #40	; 0x28
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	bf08      	it	eq
 8005c0a:	f042 0201 	orreq.w	r2, r2, #1
 8005c0e:	3428      	adds	r4, #40	; 0x28
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf08      	it	eq
 8005c14:	f042 0201 	orreq.w	r2, r2, #1
 8005c18:	3128      	adds	r1, #40	; 0x28
 8005c1a:	42a3      	cmp	r3, r4
 8005c1c:	bf08      	it	eq
 8005c1e:	f042 0201 	orreq.w	r2, r2, #1
 8005c22:	428b      	cmp	r3, r1
 8005c24:	bf08      	it	eq
 8005c26:	f042 0201 	orreq.w	r2, r2, #1
 8005c2a:	b912      	cbnz	r2, 8005c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d113      	bne.n	8005c5a <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	4c1a      	ldr	r4, [pc, #104]	; (8005ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c36:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c38:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c3a:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c3c:	4d1a      	ldr	r5, [pc, #104]	; (8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c3e:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c42:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c44:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c48:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c4c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c4e:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c52:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c54:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c56:	bc30      	pop	{r4, r5}
 8005c58:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c5a:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c5c:	4913      	ldr	r1, [pc, #76]	; (8005cac <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c5e:	4c14      	ldr	r4, [pc, #80]	; (8005cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c60:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c62:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c64:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c66:	fba4 2302 	umull	r2, r3, r4, r2
 8005c6a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c6e:	d800      	bhi.n	8005c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8005c70:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c72:	4a10      	ldr	r2, [pc, #64]	; (8005cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c74:	f003 051f 	and.w	r5, r3, #31
 8005c78:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c7a:	4c0f      	ldr	r4, [pc, #60]	; (8005cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c7c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c7e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c80:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c82:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c84:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c86:	6602      	str	r2, [r0, #96]	; 0x60
}
 8005c88:	e7e5      	b.n	8005c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8005c8a:	bf00      	nop
 8005c8c:	58025408 	.word	0x58025408
 8005c90:	58025430 	.word	0x58025430
 8005c94:	5802541c 	.word	0x5802541c
 8005c98:	58025444 	.word	0x58025444
 8005c9c:	58025494 	.word	0x58025494
 8005ca0:	cccccccd 	.word	0xcccccccd
 8005ca4:	16009600 	.word	0x16009600
 8005ca8:	58025880 	.word	0x58025880
 8005cac:	bffdfbf0 	.word	0xbffdfbf0
 8005cb0:	aaaaaaab 	.word	0xaaaaaaab
 8005cb4:	10008200 	.word	0x10008200
 8005cb8:	40020880 	.word	0x40020880

08005cbc <HAL_DMA_Init>:
{
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005cc0:	f7fe fb44 	bl	800434c <HAL_GetTick>
  if(hdma == NULL)
 8005cc4:	2c00      	cmp	r4, #0
 8005cc6:	f000 8177 	beq.w	8005fb8 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	4605      	mov	r5, r0
 8005cce:	4a92      	ldr	r2, [pc, #584]	; (8005f18 <HAL_DMA_Init+0x25c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d048      	beq.n	8005d66 <HAL_DMA_Init+0xaa>
 8005cd4:	3218      	adds	r2, #24
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d045      	beq.n	8005d66 <HAL_DMA_Init+0xaa>
 8005cda:	3230      	adds	r2, #48	; 0x30
 8005cdc:	498f      	ldr	r1, [pc, #572]	; (8005f1c <HAL_DMA_Init+0x260>)
 8005cde:	428b      	cmp	r3, r1
 8005ce0:	bf18      	it	ne
 8005ce2:	4293      	cmpne	r3, r2
 8005ce4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005ce8:	bf0c      	ite	eq
 8005cea:	2201      	moveq	r2, #1
 8005cec:	2200      	movne	r2, #0
 8005cee:	428b      	cmp	r3, r1
 8005cf0:	bf08      	it	eq
 8005cf2:	f042 0201 	orreq.w	r2, r2, #1
 8005cf6:	3118      	adds	r1, #24
 8005cf8:	428b      	cmp	r3, r1
 8005cfa:	bf08      	it	eq
 8005cfc:	f042 0201 	orreq.w	r2, r2, #1
 8005d00:	3118      	adds	r1, #24
 8005d02:	428b      	cmp	r3, r1
 8005d04:	bf08      	it	eq
 8005d06:	f042 0201 	orreq.w	r2, r2, #1
 8005d0a:	3118      	adds	r1, #24
 8005d0c:	428b      	cmp	r3, r1
 8005d0e:	bf08      	it	eq
 8005d10:	f042 0201 	orreq.w	r2, r2, #1
 8005d14:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	bf08      	it	eq
 8005d1c:	f042 0201 	orreq.w	r2, r2, #1
 8005d20:	3118      	adds	r1, #24
 8005d22:	428b      	cmp	r3, r1
 8005d24:	bf08      	it	eq
 8005d26:	f042 0201 	orreq.w	r2, r2, #1
 8005d2a:	3118      	adds	r1, #24
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	bf08      	it	eq
 8005d30:	f042 0201 	orreq.w	r2, r2, #1
 8005d34:	3118      	adds	r1, #24
 8005d36:	428b      	cmp	r3, r1
 8005d38:	bf08      	it	eq
 8005d3a:	f042 0201 	orreq.w	r2, r2, #1
 8005d3e:	3118      	adds	r1, #24
 8005d40:	428b      	cmp	r3, r1
 8005d42:	bf08      	it	eq
 8005d44:	f042 0201 	orreq.w	r2, r2, #1
 8005d48:	3118      	adds	r1, #24
 8005d4a:	428b      	cmp	r3, r1
 8005d4c:	bf08      	it	eq
 8005d4e:	f042 0201 	orreq.w	r2, r2, #1
 8005d52:	3118      	adds	r1, #24
 8005d54:	428b      	cmp	r3, r1
 8005d56:	bf08      	it	eq
 8005d58:	f042 0201 	orreq.w	r2, r2, #1
 8005d5c:	b91a      	cbnz	r2, 8005d66 <HAL_DMA_Init+0xaa>
 8005d5e:	4a70      	ldr	r2, [pc, #448]	; (8005f20 <HAL_DMA_Init+0x264>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	f040 8198 	bne.w	8006096 <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 8005d66:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d68:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8005d6a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d6e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e006      	b.n	8005d8a <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d7c:	f7fe fae6 	bl	800434c <HAL_GetTick>
 8005d80:	1b43      	subs	r3, r0, r5
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	f200 80ff 	bhi.w	8005f86 <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	07d6      	lsls	r6, r2, #31
 8005d8e:	d4f5      	bmi.n	8005d7c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8005d90:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d94:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8005d96:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d98:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005d9a:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d9c:	4302      	orrs	r2, r0
 8005d9e:	6960      	ldr	r0, [r4, #20]
 8005da0:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005da2:	69e0      	ldr	r0, [r4, #28]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005da8:	485e      	ldr	r0, [pc, #376]	; (8005f24 <HAL_DMA_Init+0x268>)
 8005daa:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8005dac:	6a25      	ldr	r5, [r4, #32]
 8005dae:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005db0:	4d5d      	ldr	r5, [pc, #372]	; (8005f28 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 8005db2:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005db4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005db6:	2804      	cmp	r0, #4
 8005db8:	f000 8100 	beq.w	8005fbc <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005dbc:	682e      	ldr	r6, [r5, #0]
 8005dbe:	4d5b      	ldr	r5, [pc, #364]	; (8005f2c <HAL_DMA_Init+0x270>)
 8005dc0:	4035      	ands	r5, r6
 8005dc2:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8005dc6:	f080 80bb 	bcs.w	8005f40 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005dca:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005dcc:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005dce:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8005dd2:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005dd4:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f7ff fe8a 	bl	8005af0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ddc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005dde:	233f      	movs	r3, #63	; 0x3f
 8005de0:	f002 021f 	and.w	r2, r2, #31
 8005de4:	4093      	lsls	r3, r2
 8005de6:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	4b4b      	ldr	r3, [pc, #300]	; (8005f18 <HAL_DMA_Init+0x25c>)
 8005dec:	4850      	ldr	r0, [pc, #320]	; (8005f30 <HAL_DMA_Init+0x274>)
 8005dee:	494b      	ldr	r1, [pc, #300]	; (8005f1c <HAL_DMA_Init+0x260>)
 8005df0:	4282      	cmp	r2, r0
 8005df2:	bf18      	it	ne
 8005df4:	429a      	cmpne	r2, r3
 8005df6:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	428a      	cmp	r2, r1
 8005e02:	bf08      	it	eq
 8005e04:	f043 0301 	orreq.w	r3, r3, #1
 8005e08:	3130      	adds	r1, #48	; 0x30
 8005e0a:	4282      	cmp	r2, r0
 8005e0c:	bf08      	it	eq
 8005e0e:	f043 0301 	orreq.w	r3, r3, #1
 8005e12:	3030      	adds	r0, #48	; 0x30
 8005e14:	428a      	cmp	r2, r1
 8005e16:	bf08      	it	eq
 8005e18:	f043 0301 	orreq.w	r3, r3, #1
 8005e1c:	3130      	adds	r1, #48	; 0x30
 8005e1e:	4282      	cmp	r2, r0
 8005e20:	bf08      	it	eq
 8005e22:	f043 0301 	orreq.w	r3, r3, #1
 8005e26:	3030      	adds	r0, #48	; 0x30
 8005e28:	428a      	cmp	r2, r1
 8005e2a:	bf08      	it	eq
 8005e2c:	f043 0301 	orreq.w	r3, r3, #1
 8005e30:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005e34:	4282      	cmp	r2, r0
 8005e36:	bf08      	it	eq
 8005e38:	f043 0301 	orreq.w	r3, r3, #1
 8005e3c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005e40:	428a      	cmp	r2, r1
 8005e42:	bf08      	it	eq
 8005e44:	f043 0301 	orreq.w	r3, r3, #1
 8005e48:	3130      	adds	r1, #48	; 0x30
 8005e4a:	4282      	cmp	r2, r0
 8005e4c:	bf08      	it	eq
 8005e4e:	f043 0301 	orreq.w	r3, r3, #1
 8005e52:	3030      	adds	r0, #48	; 0x30
 8005e54:	428a      	cmp	r2, r1
 8005e56:	bf08      	it	eq
 8005e58:	f043 0301 	orreq.w	r3, r3, #1
 8005e5c:	3130      	adds	r1, #48	; 0x30
 8005e5e:	4282      	cmp	r2, r0
 8005e60:	bf08      	it	eq
 8005e62:	f043 0301 	orreq.w	r3, r3, #1
 8005e66:	3030      	adds	r0, #48	; 0x30
 8005e68:	428a      	cmp	r2, r1
 8005e6a:	bf08      	it	eq
 8005e6c:	f043 0301 	orreq.w	r3, r3, #1
 8005e70:	3130      	adds	r1, #48	; 0x30
 8005e72:	4282      	cmp	r2, r0
 8005e74:	bf08      	it	eq
 8005e76:	f043 0301 	orreq.w	r3, r3, #1
 8005e7a:	3030      	adds	r0, #48	; 0x30
 8005e7c:	428a      	cmp	r2, r1
 8005e7e:	bf08      	it	eq
 8005e80:	f043 0301 	orreq.w	r3, r3, #1
 8005e84:	492b      	ldr	r1, [pc, #172]	; (8005f34 <HAL_DMA_Init+0x278>)
 8005e86:	4282      	cmp	r2, r0
 8005e88:	bf08      	it	eq
 8005e8a:	f043 0301 	orreq.w	r3, r3, #1
 8005e8e:	482a      	ldr	r0, [pc, #168]	; (8005f38 <HAL_DMA_Init+0x27c>)
 8005e90:	428a      	cmp	r2, r1
 8005e92:	bf08      	it	eq
 8005e94:	f043 0301 	orreq.w	r3, r3, #1
 8005e98:	3128      	adds	r1, #40	; 0x28
 8005e9a:	4282      	cmp	r2, r0
 8005e9c:	bf08      	it	eq
 8005e9e:	f043 0301 	orreq.w	r3, r3, #1
 8005ea2:	3028      	adds	r0, #40	; 0x28
 8005ea4:	428a      	cmp	r2, r1
 8005ea6:	bf08      	it	eq
 8005ea8:	f043 0301 	orreq.w	r3, r3, #1
 8005eac:	3128      	adds	r1, #40	; 0x28
 8005eae:	4282      	cmp	r2, r0
 8005eb0:	bf08      	it	eq
 8005eb2:	f043 0301 	orreq.w	r3, r3, #1
 8005eb6:	3028      	adds	r0, #40	; 0x28
 8005eb8:	428a      	cmp	r2, r1
 8005eba:	bf08      	it	eq
 8005ebc:	f043 0301 	orreq.w	r3, r3, #1
 8005ec0:	3128      	adds	r1, #40	; 0x28
 8005ec2:	4282      	cmp	r2, r0
 8005ec4:	bf08      	it	eq
 8005ec6:	f043 0301 	orreq.w	r3, r3, #1
 8005eca:	428a      	cmp	r2, r1
 8005ecc:	bf08      	it	eq
 8005ece:	f043 0301 	orreq.w	r3, r3, #1
 8005ed2:	b913      	cbnz	r3, 8005eda <HAL_DMA_Init+0x21e>
 8005ed4:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <HAL_DMA_Init+0x280>)
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d118      	bne.n	8005f0c <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7ff fe82 	bl	8005be4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d05c      	beq.n	8005fa0 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ee6:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ee8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005eea:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005eec:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eee:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ef2:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ef4:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ef6:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ef8:	d859      	bhi.n	8005fae <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005efa:	1e50      	subs	r0, r2, #1
 8005efc:	2807      	cmp	r0, #7
 8005efe:	d96e      	bls.n	8005fde <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f00:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005f02:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f06:	2000      	movs	r0, #0
 8005f08:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f0a:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f0c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005f0e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f10:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005f12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f18:	40020010 	.word	0x40020010
 8005f1c:	40020040 	.word	0x40020040
 8005f20:	400204b8 	.word	0x400204b8
 8005f24:	fe10803f 	.word	0xfe10803f
 8005f28:	5c001000 	.word	0x5c001000
 8005f2c:	ffff0000 	.word	0xffff0000
 8005f30:	40020028 	.word	0x40020028
 8005f34:	58025408 	.word	0x58025408
 8005f38:	5802541c 	.word	0x5802541c
 8005f3c:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f40:	6865      	ldr	r5, [r4, #4]
 8005f42:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 8005f46:	2e1f      	cmp	r6, #31
 8005f48:	d924      	bls.n	8005f94 <HAL_DMA_Init+0x2d8>
 8005f4a:	3d4f      	subs	r5, #79	; 0x4f
 8005f4c:	2d03      	cmp	r5, #3
 8005f4e:	d801      	bhi.n	8005f54 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 8005f50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f54:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f56:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f58:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f5a:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8005f5e:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f62:	f47f af37 	bne.w	8005dd4 <HAL_DMA_Init+0x118>
 8005f66:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8005f68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005f6a:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f6c:	2d00      	cmp	r5, #0
 8005f6e:	f43f af31 	beq.w	8005dd4 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f72:	2900      	cmp	r1, #0
 8005f74:	d169      	bne.n	800604a <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 8005f76:	2801      	cmp	r0, #1
 8005f78:	f000 8088 	beq.w	800608c <HAL_DMA_Init+0x3d0>
 8005f7c:	f030 0102 	bics.w	r1, r0, #2
 8005f80:	f47f af28 	bne.w	8005dd4 <HAL_DMA_Init+0x118>
 8005f84:	e069      	b.n	800605a <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f86:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f88:	2303      	movs	r3, #3
        return HAL_ERROR;
 8005f8a:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f8c:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f94:	4d73      	ldr	r5, [pc, #460]	; (8006164 <HAL_DMA_Init+0x4a8>)
 8005f96:	fa25 f606 	lsr.w	r6, r5, r6
 8005f9a:	07f5      	lsls	r5, r6, #31
 8005f9c:	d5da      	bpl.n	8005f54 <HAL_DMA_Init+0x298>
 8005f9e:	e7d7      	b.n	8005f50 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005fa0:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fa2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005fa4:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005fa8:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005faa:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fac:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8005fae:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8005fb0:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005fb4:	6763      	str	r3, [r4, #116]	; 0x74
 8005fb6:	e7a9      	b.n	8005f0c <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 8005fb8:	2001      	movs	r0, #1
}
 8005fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005fbc:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005fbe:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8005fc2:	432e      	orrs	r6, r5
 8005fc4:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005fc6:	4e68      	ldr	r6, [pc, #416]	; (8006168 <HAL_DMA_Init+0x4ac>)
 8005fc8:	403e      	ands	r6, r7
 8005fca:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8005fce:	d2b7      	bcs.n	8005f40 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fd0:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fd2:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fd4:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8005fd8:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fdc:	e7c4      	b.n	8005f68 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fde:	6821      	ldr	r1, [r4, #0]
 8005fe0:	4b62      	ldr	r3, [pc, #392]	; (800616c <HAL_DMA_Init+0x4b0>)
 8005fe2:	4d63      	ldr	r5, [pc, #396]	; (8006170 <HAL_DMA_Init+0x4b4>)
 8005fe4:	42a9      	cmp	r1, r5
 8005fe6:	bf18      	it	ne
 8005fe8:	4299      	cmpne	r1, r3
 8005fea:	f105 0514 	add.w	r5, r5, #20
 8005fee:	bf0c      	ite	eq
 8005ff0:	2301      	moveq	r3, #1
 8005ff2:	2300      	movne	r3, #0
 8005ff4:	42a9      	cmp	r1, r5
 8005ff6:	bf08      	it	eq
 8005ff8:	f043 0301 	orreq.w	r3, r3, #1
 8005ffc:	3514      	adds	r5, #20
 8005ffe:	42a9      	cmp	r1, r5
 8006000:	bf08      	it	eq
 8006002:	f043 0301 	orreq.w	r3, r3, #1
 8006006:	3514      	adds	r5, #20
 8006008:	42a9      	cmp	r1, r5
 800600a:	bf08      	it	eq
 800600c:	f043 0301 	orreq.w	r3, r3, #1
 8006010:	3514      	adds	r5, #20
 8006012:	42a9      	cmp	r1, r5
 8006014:	bf08      	it	eq
 8006016:	f043 0301 	orreq.w	r3, r3, #1
 800601a:	3514      	adds	r5, #20
 800601c:	42a9      	cmp	r1, r5
 800601e:	bf08      	it	eq
 8006020:	f043 0301 	orreq.w	r3, r3, #1
 8006024:	b93b      	cbnz	r3, 8006036 <HAL_DMA_Init+0x37a>
 8006026:	4b53      	ldr	r3, [pc, #332]	; (8006174 <HAL_DMA_Init+0x4b8>)
 8006028:	4299      	cmp	r1, r3
 800602a:	d004      	beq.n	8006036 <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800602c:	4b52      	ldr	r3, [pc, #328]	; (8006178 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800602e:	4953      	ldr	r1, [pc, #332]	; (800617c <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006034:	e003      	b.n	800603e <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006036:	4b52      	ldr	r3, [pc, #328]	; (8006180 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006038:	4952      	ldr	r1, [pc, #328]	; (8006184 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800603e:	2201      	movs	r2, #1
 8006040:	4082      	lsls	r2, r0
 8006042:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8006046:	6762      	str	r2, [r4, #116]	; 0x74
 8006048:	e75d      	b.n	8005f06 <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800604a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800604e:	d00e      	beq.n	800606e <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 8006050:	2802      	cmp	r0, #2
 8006052:	d905      	bls.n	8006060 <HAL_DMA_Init+0x3a4>
 8006054:	2803      	cmp	r0, #3
 8006056:	f47f aebd 	bne.w	8005dd4 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800605a:	01e9      	lsls	r1, r5, #7
 800605c:	f57f aeba 	bpl.w	8005dd4 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 8006060:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006062:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8006064:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006066:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8006068:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 800606e:	2803      	cmp	r0, #3
 8006070:	f63f aeb0 	bhi.w	8005dd4 <HAL_DMA_Init+0x118>
 8006074:	a101      	add	r1, pc, #4	; (adr r1, 800607c <HAL_DMA_Init+0x3c0>)
 8006076:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800607a:	bf00      	nop
 800607c:	08006061 	.word	0x08006061
 8006080:	0800605b 	.word	0x0800605b
 8006084:	08006061 	.word	0x08006061
 8006088:	0800608d 	.word	0x0800608d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800608c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8006090:	f47f aea0 	bne.w	8005dd4 <HAL_DMA_Init+0x118>
 8006094:	e7e4      	b.n	8006060 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006096:	4a35      	ldr	r2, [pc, #212]	; (800616c <HAL_DMA_Init+0x4b0>)
 8006098:	4835      	ldr	r0, [pc, #212]	; (8006170 <HAL_DMA_Init+0x4b4>)
 800609a:	493b      	ldr	r1, [pc, #236]	; (8006188 <HAL_DMA_Init+0x4cc>)
 800609c:	4283      	cmp	r3, r0
 800609e:	bf18      	it	ne
 80060a0:	4293      	cmpne	r3, r2
 80060a2:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80060a6:	bf0c      	ite	eq
 80060a8:	2201      	moveq	r2, #1
 80060aa:	2200      	movne	r2, #0
 80060ac:	428b      	cmp	r3, r1
 80060ae:	bf08      	it	eq
 80060b0:	f042 0201 	orreq.w	r2, r2, #1
 80060b4:	3128      	adds	r1, #40	; 0x28
 80060b6:	4283      	cmp	r3, r0
 80060b8:	bf08      	it	eq
 80060ba:	f042 0201 	orreq.w	r2, r2, #1
 80060be:	3028      	adds	r0, #40	; 0x28
 80060c0:	428b      	cmp	r3, r1
 80060c2:	bf08      	it	eq
 80060c4:	f042 0201 	orreq.w	r2, r2, #1
 80060c8:	3128      	adds	r1, #40	; 0x28
 80060ca:	4283      	cmp	r3, r0
 80060cc:	bf08      	it	eq
 80060ce:	f042 0201 	orreq.w	r2, r2, #1
 80060d2:	428b      	cmp	r3, r1
 80060d4:	bf08      	it	eq
 80060d6:	f042 0201 	orreq.w	r2, r2, #1
 80060da:	b912      	cbnz	r2, 80060e2 <HAL_DMA_Init+0x426>
 80060dc:	4a25      	ldr	r2, [pc, #148]	; (8006174 <HAL_DMA_Init+0x4b8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d138      	bne.n	8006154 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 80060e2:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80060e4:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80060e6:	4d29      	ldr	r5, [pc, #164]	; (800618c <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80060e8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80060ec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80060f0:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80060f2:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060f4:	68a2      	ldr	r2, [r4, #8]
 80060f6:	2a40      	cmp	r2, #64	; 0x40
 80060f8:	d02a      	beq.n	8006150 <HAL_DMA_Init+0x494>
 80060fa:	2a80      	cmp	r2, #128	; 0x80
 80060fc:	bf0c      	ite	eq
 80060fe:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8006102:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006104:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006106:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800610a:	08d2      	lsrs	r2, r2, #3
 800610c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006110:	6961      	ldr	r1, [r4, #20]
 8006112:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006116:	69a1      	ldr	r1, [r4, #24]
 8006118:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800611c:	69e1      	ldr	r1, [r4, #28]
 800611e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006122:	491b      	ldr	r1, [pc, #108]	; (8006190 <HAL_DMA_Init+0x4d4>)
 8006124:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8006128:	4419      	add	r1, r3
 800612a:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800612c:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800612e:	4819      	ldr	r0, [pc, #100]	; (8006194 <HAL_DMA_Init+0x4d8>)
 8006130:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006134:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006136:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006138:	090b      	lsrs	r3, r1, #4
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800613e:	f7ff fcd7 	bl	8005af0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006142:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006144:	2301      	movs	r3, #1
 8006146:	f002 021f 	and.w	r2, r2, #31
 800614a:	4093      	lsls	r3, r2
 800614c:	6043      	str	r3, [r0, #4]
 800614e:	e64b      	b.n	8005de8 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006150:	2010      	movs	r0, #16
 8006152:	e7d7      	b.n	8006104 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006154:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006156:	2303      	movs	r3, #3
    return HAL_ERROR;
 8006158:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800615a:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800615c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8006160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006162:	bf00      	nop
 8006164:	c3c0003f 	.word	0xc3c0003f
 8006168:	ffff0000 	.word	0xffff0000
 800616c:	58025408 	.word	0x58025408
 8006170:	5802541c 	.word	0x5802541c
 8006174:	58025494 	.word	0x58025494
 8006178:	1000823f 	.word	0x1000823f
 800617c:	40020940 	.word	0x40020940
 8006180:	1600963f 	.word	0x1600963f
 8006184:	58025940 	.word	0x58025940
 8006188:	58025430 	.word	0x58025430
 800618c:	fffe000f 	.word	0xfffe000f
 8006190:	a7fdabf8 	.word	0xa7fdabf8
 8006194:	cccccccd 	.word	0xcccccccd

08006198 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8006198:	2800      	cmp	r0, #0
 800619a:	f000 8177 	beq.w	800648c <HAL_DMA_Start_IT+0x2f4>
 800619e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 80061a0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80061a4:	2801      	cmp	r0, #1
 80061a6:	f000 8173 	beq.w	8006490 <HAL_DMA_Start_IT+0x2f8>
 80061aa:	2001      	movs	r0, #1
{
 80061ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 80061b0:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 80061b4:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80061b8:	4284      	cmp	r4, r0
 80061ba:	d008      	beq.n	80061ce <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80061bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80061c0:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80061c2:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80061c6:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 80061ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80061ce:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 80061d0:	f8dc 4000 	ldr.w	r4, [ip]
 80061d4:	4d53      	ldr	r5, [pc, #332]	; (8006324 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80061d6:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061da:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80061dc:	4e52      	ldr	r6, [pc, #328]	; (8006328 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061de:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80061e2:	4852      	ldr	r0, [pc, #328]	; (800632c <HAL_DMA_Start_IT+0x194>)
 80061e4:	42ac      	cmp	r4, r5
 80061e6:	bf18      	it	ne
 80061e8:	4284      	cmpne	r4, r0
 80061ea:	f105 0518 	add.w	r5, r5, #24
 80061ee:	bf0c      	ite	eq
 80061f0:	2001      	moveq	r0, #1
 80061f2:	2000      	movne	r0, #0
 80061f4:	42ac      	cmp	r4, r5
 80061f6:	bf08      	it	eq
 80061f8:	f040 0001 	orreq.w	r0, r0, #1
 80061fc:	3518      	adds	r5, #24
 80061fe:	42ac      	cmp	r4, r5
 8006200:	bf08      	it	eq
 8006202:	f040 0001 	orreq.w	r0, r0, #1
 8006206:	3518      	adds	r5, #24
 8006208:	42ac      	cmp	r4, r5
 800620a:	bf08      	it	eq
 800620c:	f040 0001 	orreq.w	r0, r0, #1
 8006210:	3518      	adds	r5, #24
 8006212:	42ac      	cmp	r4, r5
 8006214:	bf08      	it	eq
 8006216:	f040 0001 	orreq.w	r0, r0, #1
 800621a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800621e:	42ac      	cmp	r4, r5
 8006220:	bf08      	it	eq
 8006222:	f040 0001 	orreq.w	r0, r0, #1
 8006226:	3518      	adds	r5, #24
 8006228:	42ac      	cmp	r4, r5
 800622a:	bf08      	it	eq
 800622c:	f040 0001 	orreq.w	r0, r0, #1
 8006230:	3518      	adds	r5, #24
 8006232:	42ac      	cmp	r4, r5
 8006234:	bf08      	it	eq
 8006236:	f040 0001 	orreq.w	r0, r0, #1
 800623a:	3518      	adds	r5, #24
 800623c:	42ac      	cmp	r4, r5
 800623e:	bf08      	it	eq
 8006240:	f040 0001 	orreq.w	r0, r0, #1
 8006244:	3518      	adds	r5, #24
 8006246:	42ac      	cmp	r4, r5
 8006248:	bf08      	it	eq
 800624a:	f040 0001 	orreq.w	r0, r0, #1
 800624e:	3518      	adds	r5, #24
 8006250:	42ac      	cmp	r4, r5
 8006252:	bf08      	it	eq
 8006254:	f040 0001 	orreq.w	r0, r0, #1
 8006258:	3518      	adds	r5, #24
 800625a:	42ac      	cmp	r4, r5
 800625c:	bf08      	it	eq
 800625e:	f040 0001 	orreq.w	r0, r0, #1
 8006262:	3518      	adds	r5, #24
 8006264:	42ac      	cmp	r4, r5
 8006266:	bf14      	ite	ne
 8006268:	4681      	movne	r9, r0
 800626a:	f040 0901 	orreq.w	r9, r0, #1
 800626e:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8006272:	42ac      	cmp	r4, r5
 8006274:	bf18      	it	ne
 8006276:	42b4      	cmpne	r4, r6
 8006278:	bf0c      	ite	eq
 800627a:	2501      	moveq	r5, #1
 800627c:	2500      	movne	r5, #0
 800627e:	d002      	beq.n	8006286 <HAL_DMA_Start_IT+0xee>
 8006280:	f1b9 0f00 	cmp.w	r9, #0
 8006284:	d054      	beq.n	8006330 <HAL_DMA_Start_IT+0x198>
 8006286:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006288:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800628c:	f026 0601 	bic.w	r6, r6, #1
 8006290:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006292:	2d00      	cmp	r5, #0
 8006294:	d078      	beq.n	8006388 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006296:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800629a:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800629c:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 80062a0:	b117      	cbz	r7, 80062a8 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062a2:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 80062a6:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062a8:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 80062ac:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 80062b0:	f006 081f 	and.w	r8, r6, #31
 80062b4:	fa0e fe08 	lsl.w	lr, lr, r8
 80062b8:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062bc:	6826      	ldr	r6, [r4, #0]
 80062be:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 80062c2:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80062c4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062c6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	f000 80e2 	beq.w	8006494 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80062d0:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80062d2:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062d4:	b91d      	cbnz	r5, 80062de <HAL_DMA_Start_IT+0x146>
 80062d6:	f1b9 0f00 	cmp.w	r9, #0
 80062da:	f000 80e1 	beq.w	80064a0 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	f023 031e 	bic.w	r3, r3, #30
 80062e4:	f043 0316 	orr.w	r3, r3, #22
 80062e8:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80062ea:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80062ee:	b11b      	cbz	r3, 80062f8 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	f043 0308 	orr.w	r3, r3, #8
 80062f6:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80062f8:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	03d2      	lsls	r2, r2, #15
 8006300:	d503      	bpl.n	800630a <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006308:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800630a:	b11f      	cbz	r7, 8006314 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006312:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8006314:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006316:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006318:	f043 0301 	orr.w	r3, r3, #1
 800631c:	6023      	str	r3, [r4, #0]
}
 800631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006322:	bf00      	nop
 8006324:	40020058 	.word	0x40020058
 8006328:	40020010 	.word	0x40020010
 800632c:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006330:	4f61      	ldr	r7, [pc, #388]	; (80064b8 <HAL_DMA_Start_IT+0x320>)
 8006332:	4e62      	ldr	r6, [pc, #392]	; (80064bc <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006334:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006338:	42b4      	cmp	r4, r6
 800633a:	bf18      	it	ne
 800633c:	42bc      	cmpne	r4, r7
 800633e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8006342:	bf0c      	ite	eq
 8006344:	2701      	moveq	r7, #1
 8006346:	2700      	movne	r7, #0
 8006348:	42b4      	cmp	r4, r6
 800634a:	bf08      	it	eq
 800634c:	f047 0701 	orreq.w	r7, r7, #1
 8006350:	3614      	adds	r6, #20
 8006352:	42b4      	cmp	r4, r6
 8006354:	bf08      	it	eq
 8006356:	f047 0701 	orreq.w	r7, r7, #1
 800635a:	3614      	adds	r6, #20
 800635c:	42b4      	cmp	r4, r6
 800635e:	bf08      	it	eq
 8006360:	f047 0701 	orreq.w	r7, r7, #1
 8006364:	3614      	adds	r6, #20
 8006366:	42b4      	cmp	r4, r6
 8006368:	bf08      	it	eq
 800636a:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800636e:	6826      	ldr	r6, [r4, #0]
 8006370:	f026 0601 	bic.w	r6, r6, #1
 8006374:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006376:	4e52      	ldr	r6, [pc, #328]	; (80064c0 <HAL_DMA_Start_IT+0x328>)
 8006378:	42b4      	cmp	r4, r6
 800637a:	bf08      	it	eq
 800637c:	f047 0701 	orreq.w	r7, r7, #1
 8006380:	b917      	cbnz	r7, 8006388 <HAL_DMA_Start_IT+0x1f0>
 8006382:	4f50      	ldr	r7, [pc, #320]	; (80064c4 <HAL_DMA_Start_IT+0x32c>)
 8006384:	42bc      	cmp	r4, r7
 8006386:	d10b      	bne.n	80063a0 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006388:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800638c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800638e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8006392:	b117      	cbz	r7, 800639a <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006394:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8006398:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800639a:	f1b9 0f00 	cmp.w	r9, #0
 800639e:	d183      	bne.n	80062a8 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063a0:	4f46      	ldr	r7, [pc, #280]	; (80064bc <HAL_DMA_Start_IT+0x324>)
 80063a2:	f8df e114 	ldr.w	lr, [pc, #276]	; 80064b8 <HAL_DMA_Start_IT+0x320>
 80063a6:	4574      	cmp	r4, lr
 80063a8:	bf18      	it	ne
 80063aa:	42bc      	cmpne	r4, r7
 80063ac:	f10e 0e14 	add.w	lr, lr, #20
 80063b0:	bf0c      	ite	eq
 80063b2:	2701      	moveq	r7, #1
 80063b4:	2700      	movne	r7, #0
 80063b6:	4574      	cmp	r4, lr
 80063b8:	bf08      	it	eq
 80063ba:	f047 0701 	orreq.w	r7, r7, #1
 80063be:	f10e 0e14 	add.w	lr, lr, #20
 80063c2:	4574      	cmp	r4, lr
 80063c4:	bf08      	it	eq
 80063c6:	f047 0701 	orreq.w	r7, r7, #1
 80063ca:	f10e 0e14 	add.w	lr, lr, #20
 80063ce:	4574      	cmp	r4, lr
 80063d0:	bf08      	it	eq
 80063d2:	f047 0701 	orreq.w	r7, r7, #1
 80063d6:	f10e 0e14 	add.w	lr, lr, #20
 80063da:	4574      	cmp	r4, lr
 80063dc:	bf08      	it	eq
 80063de:	f047 0701 	orreq.w	r7, r7, #1
 80063e2:	f10e 0e14 	add.w	lr, lr, #20
 80063e6:	4574      	cmp	r4, lr
 80063e8:	bf08      	it	eq
 80063ea:	f047 0701 	orreq.w	r7, r7, #1
 80063ee:	b917      	cbnz	r7, 80063f6 <HAL_DMA_Start_IT+0x25e>
 80063f0:	4f34      	ldr	r7, [pc, #208]	; (80064c4 <HAL_DMA_Start_IT+0x32c>)
 80063f2:	42bc      	cmp	r4, r7
 80063f4:	d154      	bne.n	80064a0 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063f6:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 80063fa:	2701      	movs	r7, #1
 80063fc:	f000 0e1f 	and.w	lr, r0, #31
 8006400:	fa07 f70e 	lsl.w	r7, r7, lr
 8006404:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006408:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800640a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d043      	beq.n	800649a <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006412:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006414:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	f023 030e 	bic.w	r3, r3, #14
 800641c:	f043 030a 	orr.w	r3, r3, #10
 8006420:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006422:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d02d      	beq.n	8006486 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	f043 0304 	orr.w	r3, r3, #4
 8006430:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006432:	4b21      	ldr	r3, [pc, #132]	; (80064b8 <HAL_DMA_Start_IT+0x320>)
 8006434:	4a21      	ldr	r2, [pc, #132]	; (80064bc <HAL_DMA_Start_IT+0x324>)
 8006436:	4294      	cmp	r4, r2
 8006438:	bf18      	it	ne
 800643a:	429c      	cmpne	r4, r3
 800643c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8006440:	bf0c      	ite	eq
 8006442:	2301      	moveq	r3, #1
 8006444:	2300      	movne	r3, #0
 8006446:	4294      	cmp	r4, r2
 8006448:	bf08      	it	eq
 800644a:	f043 0301 	orreq.w	r3, r3, #1
 800644e:	3214      	adds	r2, #20
 8006450:	4294      	cmp	r4, r2
 8006452:	bf08      	it	eq
 8006454:	f043 0301 	orreq.w	r3, r3, #1
 8006458:	3214      	adds	r2, #20
 800645a:	4294      	cmp	r4, r2
 800645c:	bf08      	it	eq
 800645e:	f043 0301 	orreq.w	r3, r3, #1
 8006462:	3214      	adds	r2, #20
 8006464:	4294      	cmp	r4, r2
 8006466:	bf08      	it	eq
 8006468:	f043 0301 	orreq.w	r3, r3, #1
 800646c:	3214      	adds	r2, #20
 800646e:	4294      	cmp	r4, r2
 8006470:	bf08      	it	eq
 8006472:	f043 0301 	orreq.w	r3, r3, #1
 8006476:	3214      	adds	r2, #20
 8006478:	4294      	cmp	r4, r2
 800647a:	bf08      	it	eq
 800647c:	f043 0301 	orreq.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	f43f af47 	beq.w	8006314 <HAL_DMA_Start_IT+0x17c>
 8006486:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800648a:	e735      	b.n	80062f8 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 800648c:	2001      	movs	r0, #1
 800648e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8006490:	2002      	movs	r0, #2
}
 8006492:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006494:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006496:	60e1      	str	r1, [r4, #12]
 8006498:	e71c      	b.n	80062d4 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800649a:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800649c:	60e1      	str	r1, [r4, #12]
 800649e:	e7ba      	b.n	8006416 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	f023 030e 	bic.w	r3, r3, #14
 80064a6:	f043 030a 	orr.w	r3, r3, #10
 80064aa:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80064ac:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1ba      	bne.n	800642a <HAL_DMA_Start_IT+0x292>
 80064b4:	e7bd      	b.n	8006432 <HAL_DMA_Start_IT+0x29a>
 80064b6:	bf00      	nop
 80064b8:	5802541c 	.word	0x5802541c
 80064bc:	58025408 	.word	0x58025408
 80064c0:	58025480 	.word	0x58025480
 80064c4:	58025494 	.word	0x58025494

080064c8 <HAL_DMA_Abort>:
{
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80064cc:	f7fd ff3e 	bl	800434c <HAL_GetTick>
  if(hdma == NULL)
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	f000 8124 	beq.w	800671e <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064d6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80064da:	2b02      	cmp	r3, #2
 80064dc:	f040 80dd 	bne.w	800669a <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064e0:	682c      	ldr	r4, [r5, #0]
 80064e2:	4606      	mov	r6, r0
 80064e4:	4b8f      	ldr	r3, [pc, #572]	; (8006724 <HAL_DMA_Abort+0x25c>)
 80064e6:	4890      	ldr	r0, [pc, #576]	; (8006728 <HAL_DMA_Abort+0x260>)
 80064e8:	4a90      	ldr	r2, [pc, #576]	; (800672c <HAL_DMA_Abort+0x264>)
 80064ea:	4284      	cmp	r4, r0
 80064ec:	bf18      	it	ne
 80064ee:	429c      	cmpne	r4, r3
 80064f0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80064f4:	498e      	ldr	r1, [pc, #568]	; (8006730 <HAL_DMA_Abort+0x268>)
 80064f6:	bf0c      	ite	eq
 80064f8:	2301      	moveq	r3, #1
 80064fa:	2300      	movne	r3, #0
 80064fc:	4284      	cmp	r4, r0
 80064fe:	bf08      	it	eq
 8006500:	f043 0301 	orreq.w	r3, r3, #1
 8006504:	3018      	adds	r0, #24
 8006506:	4284      	cmp	r4, r0
 8006508:	bf08      	it	eq
 800650a:	f043 0301 	orreq.w	r3, r3, #1
 800650e:	3018      	adds	r0, #24
 8006510:	4284      	cmp	r4, r0
 8006512:	bf08      	it	eq
 8006514:	f043 0301 	orreq.w	r3, r3, #1
 8006518:	3018      	adds	r0, #24
 800651a:	4284      	cmp	r4, r0
 800651c:	bf08      	it	eq
 800651e:	f043 0301 	orreq.w	r3, r3, #1
 8006522:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8006526:	4284      	cmp	r4, r0
 8006528:	bf08      	it	eq
 800652a:	f043 0301 	orreq.w	r3, r3, #1
 800652e:	3018      	adds	r0, #24
 8006530:	4284      	cmp	r4, r0
 8006532:	bf08      	it	eq
 8006534:	f043 0301 	orreq.w	r3, r3, #1
 8006538:	3018      	adds	r0, #24
 800653a:	4284      	cmp	r4, r0
 800653c:	bf08      	it	eq
 800653e:	f043 0301 	orreq.w	r3, r3, #1
 8006542:	3018      	adds	r0, #24
 8006544:	4284      	cmp	r4, r0
 8006546:	bf08      	it	eq
 8006548:	f043 0301 	orreq.w	r3, r3, #1
 800654c:	3018      	adds	r0, #24
 800654e:	4284      	cmp	r4, r0
 8006550:	bf08      	it	eq
 8006552:	f043 0301 	orreq.w	r3, r3, #1
 8006556:	3018      	adds	r0, #24
 8006558:	4284      	cmp	r4, r0
 800655a:	bf08      	it	eq
 800655c:	f043 0301 	orreq.w	r3, r3, #1
 8006560:	3018      	adds	r0, #24
 8006562:	4284      	cmp	r4, r0
 8006564:	bf08      	it	eq
 8006566:	f043 0301 	orreq.w	r3, r3, #1
 800656a:	3018      	adds	r0, #24
 800656c:	4284      	cmp	r4, r0
 800656e:	bf08      	it	eq
 8006570:	f043 0301 	orreq.w	r3, r3, #1
 8006574:	428c      	cmp	r4, r1
 8006576:	bf18      	it	ne
 8006578:	4294      	cmpne	r4, r2
 800657a:	bf0c      	ite	eq
 800657c:	2201      	moveq	r2, #1
 800657e:	2200      	movne	r2, #0
 8006580:	d002      	beq.n	8006588 <HAL_DMA_Abort+0xc0>
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 8090 	beq.w	80066a8 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006588:	6821      	ldr	r1, [r4, #0]
 800658a:	f021 011e 	bic.w	r1, r1, #30
 800658e:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006590:	6961      	ldr	r1, [r4, #20]
 8006592:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006596:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006598:	2a00      	cmp	r2, #0
 800659a:	f000 80b0 	beq.w	80066fe <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800659e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80065a0:	6813      	ldr	r3, [r2, #0]
 80065a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065a6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	e005      	b.n	80065be <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065b2:	f7fd fecb 	bl	800434c <HAL_GetTick>
 80065b6:	1b83      	subs	r3, r0, r6
 80065b8:	2b05      	cmp	r3, #5
 80065ba:	f200 80a6 	bhi.w	800670a <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	07db      	lsls	r3, r3, #31
 80065c2:	d4f6      	bmi.n	80065b2 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065c4:	682a      	ldr	r2, [r5, #0]
 80065c6:	4b57      	ldr	r3, [pc, #348]	; (8006724 <HAL_DMA_Abort+0x25c>)
 80065c8:	4857      	ldr	r0, [pc, #348]	; (8006728 <HAL_DMA_Abort+0x260>)
 80065ca:	495a      	ldr	r1, [pc, #360]	; (8006734 <HAL_DMA_Abort+0x26c>)
 80065cc:	4282      	cmp	r2, r0
 80065ce:	bf18      	it	ne
 80065d0:	429a      	cmpne	r2, r3
 80065d2:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	428a      	cmp	r2, r1
 80065de:	bf08      	it	eq
 80065e0:	f043 0301 	orreq.w	r3, r3, #1
 80065e4:	3130      	adds	r1, #48	; 0x30
 80065e6:	4282      	cmp	r2, r0
 80065e8:	bf08      	it	eq
 80065ea:	f043 0301 	orreq.w	r3, r3, #1
 80065ee:	3030      	adds	r0, #48	; 0x30
 80065f0:	428a      	cmp	r2, r1
 80065f2:	bf08      	it	eq
 80065f4:	f043 0301 	orreq.w	r3, r3, #1
 80065f8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80065fc:	4282      	cmp	r2, r0
 80065fe:	bf08      	it	eq
 8006600:	f043 0301 	orreq.w	r3, r3, #1
 8006604:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006608:	428a      	cmp	r2, r1
 800660a:	bf08      	it	eq
 800660c:	f043 0301 	orreq.w	r3, r3, #1
 8006610:	3130      	adds	r1, #48	; 0x30
 8006612:	4282      	cmp	r2, r0
 8006614:	bf08      	it	eq
 8006616:	f043 0301 	orreq.w	r3, r3, #1
 800661a:	3030      	adds	r0, #48	; 0x30
 800661c:	428a      	cmp	r2, r1
 800661e:	bf08      	it	eq
 8006620:	f043 0301 	orreq.w	r3, r3, #1
 8006624:	3130      	adds	r1, #48	; 0x30
 8006626:	4282      	cmp	r2, r0
 8006628:	bf08      	it	eq
 800662a:	f043 0301 	orreq.w	r3, r3, #1
 800662e:	3030      	adds	r0, #48	; 0x30
 8006630:	428a      	cmp	r2, r1
 8006632:	bf08      	it	eq
 8006634:	f043 0301 	orreq.w	r3, r3, #1
 8006638:	3130      	adds	r1, #48	; 0x30
 800663a:	4282      	cmp	r2, r0
 800663c:	bf08      	it	eq
 800663e:	f043 0301 	orreq.w	r3, r3, #1
 8006642:	428a      	cmp	r2, r1
 8006644:	bf08      	it	eq
 8006646:	f043 0301 	orreq.w	r3, r3, #1
 800664a:	3118      	adds	r1, #24
 800664c:	428a      	cmp	r2, r1
 800664e:	bf08      	it	eq
 8006650:	f043 0301 	orreq.w	r3, r3, #1
 8006654:	b933      	cbnz	r3, 8006664 <HAL_DMA_Abort+0x19c>
 8006656:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800665a:	4b35      	ldr	r3, [pc, #212]	; (8006730 <HAL_DMA_Abort+0x268>)
 800665c:	429a      	cmp	r2, r3
 800665e:	bf18      	it	ne
 8006660:	428a      	cmpne	r2, r1
 8006662:	d16f      	bne.n	8006744 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006664:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8006666:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006668:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800666a:	f002 021f 	and.w	r2, r2, #31
 800666e:	4093      	lsls	r3, r2
 8006670:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8006672:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006674:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8006678:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800667a:	b133      	cbz	r3, 800668a <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800667c:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800667e:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006686:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006688:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800668a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800668c:	2201      	movs	r2, #1
  return HAL_OK;
 800668e:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8006690:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8006694:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8006698:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800669a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800669c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800669e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066a0:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80066a2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066a8:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066aa:	4923      	ldr	r1, [pc, #140]	; (8006738 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066ac:	f022 020e 	bic.w	r2, r2, #14
 80066b0:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066b2:	4a22      	ldr	r2, [pc, #136]	; (800673c <HAL_DMA_Abort+0x274>)
 80066b4:	428c      	cmp	r4, r1
 80066b6:	bf18      	it	ne
 80066b8:	4294      	cmpne	r4, r2
 80066ba:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80066be:	bf0c      	ite	eq
 80066c0:	2201      	moveq	r2, #1
 80066c2:	2200      	movne	r2, #0
 80066c4:	428c      	cmp	r4, r1
 80066c6:	bf08      	it	eq
 80066c8:	f042 0201 	orreq.w	r2, r2, #1
 80066cc:	3114      	adds	r1, #20
 80066ce:	428c      	cmp	r4, r1
 80066d0:	bf08      	it	eq
 80066d2:	f042 0201 	orreq.w	r2, r2, #1
 80066d6:	3114      	adds	r1, #20
 80066d8:	428c      	cmp	r4, r1
 80066da:	bf08      	it	eq
 80066dc:	f042 0201 	orreq.w	r2, r2, #1
 80066e0:	3114      	adds	r1, #20
 80066e2:	428c      	cmp	r4, r1
 80066e4:	bf08      	it	eq
 80066e6:	f042 0201 	orreq.w	r2, r2, #1
 80066ea:	3114      	adds	r1, #20
 80066ec:	428c      	cmp	r4, r1
 80066ee:	bf08      	it	eq
 80066f0:	f042 0201 	orreq.w	r2, r2, #1
 80066f4:	b91a      	cbnz	r2, 80066fe <HAL_DMA_Abort+0x236>
 80066f6:	4a12      	ldr	r2, [pc, #72]	; (8006740 <HAL_DMA_Abort+0x278>)
 80066f8:	4294      	cmp	r4, r2
 80066fa:	f47f af55 	bne.w	80065a8 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066fe:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8006700:	680a      	ldr	r2, [r1, #0]
 8006702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006706:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8006708:	e74e      	b.n	80065a8 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800670a:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800670c:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 800670e:	2300      	movs	r3, #0
        return HAL_ERROR;
 8006710:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006712:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8006714:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8006718:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 800671c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800671e:	2001      	movs	r0, #1
}
 8006720:	bd70      	pop	{r4, r5, r6, pc}
 8006722:	bf00      	nop
 8006724:	40020058 	.word	0x40020058
 8006728:	40020040 	.word	0x40020040
 800672c:	40020010 	.word	0x40020010
 8006730:	40020028 	.word	0x40020028
 8006734:	40020070 	.word	0x40020070
 8006738:	58025408 	.word	0x58025408
 800673c:	5802541c 	.word	0x5802541c
 8006740:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006744:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8006746:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006748:	4b16      	ldr	r3, [pc, #88]	; (80067a4 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800674a:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800674e:	4c16      	ldr	r4, [pc, #88]	; (80067a8 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006750:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006752:	42a2      	cmp	r2, r4
 8006754:	bf18      	it	ne
 8006756:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006758:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006760:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006762:	4812      	ldr	r0, [pc, #72]	; (80067ac <HAL_DMA_Abort+0x2e4>)
 8006764:	4912      	ldr	r1, [pc, #72]	; (80067b0 <HAL_DMA_Abort+0x2e8>)
 8006766:	4282      	cmp	r2, r0
 8006768:	bf08      	it	eq
 800676a:	f043 0301 	orreq.w	r3, r3, #1
 800676e:	3028      	adds	r0, #40	; 0x28
 8006770:	428a      	cmp	r2, r1
 8006772:	bf08      	it	eq
 8006774:	f043 0301 	orreq.w	r3, r3, #1
 8006778:	3128      	adds	r1, #40	; 0x28
 800677a:	4282      	cmp	r2, r0
 800677c:	bf08      	it	eq
 800677e:	f043 0301 	orreq.w	r3, r3, #1
 8006782:	428a      	cmp	r2, r1
 8006784:	bf08      	it	eq
 8006786:	f043 0301 	orreq.w	r3, r3, #1
 800678a:	3114      	adds	r1, #20
 800678c:	428a      	cmp	r2, r1
 800678e:	bf08      	it	eq
 8006790:	f043 0301 	orreq.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	f47f af6c 	bne.w	8006672 <HAL_DMA_Abort+0x1aa>
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <HAL_DMA_Abort+0x2ec>)
 800679c:	429a      	cmp	r2, r3
 800679e:	f43f af68 	beq.w	8006672 <HAL_DMA_Abort+0x1aa>
 80067a2:	e772      	b.n	800668a <HAL_DMA_Abort+0x1c2>
 80067a4:	5802541c 	.word	0x5802541c
 80067a8:	58025408 	.word	0x58025408
 80067ac:	58025430 	.word	0x58025430
 80067b0:	58025444 	.word	0x58025444
 80067b4:	58025494 	.word	0x58025494

080067b8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d05f      	beq.n	800687c <HAL_DMA_Abort_IT+0xc4>
{
 80067bc:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067be:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80067c2:	4603      	mov	r3, r0
 80067c4:	2a02      	cmp	r2, #2
 80067c6:	d155      	bne.n	8006874 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067c8:	6801      	ldr	r1, [r0, #0]
 80067ca:	4a57      	ldr	r2, [pc, #348]	; (8006928 <HAL_DMA_Abort_IT+0x170>)
 80067cc:	4291      	cmp	r1, r2
 80067ce:	d048      	beq.n	8006862 <HAL_DMA_Abort_IT+0xaa>
 80067d0:	3218      	adds	r2, #24
 80067d2:	4291      	cmp	r1, r2
 80067d4:	d045      	beq.n	8006862 <HAL_DMA_Abort_IT+0xaa>
 80067d6:	3230      	adds	r2, #48	; 0x30
 80067d8:	4c54      	ldr	r4, [pc, #336]	; (800692c <HAL_DMA_Abort_IT+0x174>)
 80067da:	4855      	ldr	r0, [pc, #340]	; (8006930 <HAL_DMA_Abort_IT+0x178>)
 80067dc:	42a1      	cmp	r1, r4
 80067de:	bf18      	it	ne
 80067e0:	4291      	cmpne	r1, r2
 80067e2:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80067e6:	bf0c      	ite	eq
 80067e8:	2201      	moveq	r2, #1
 80067ea:	2200      	movne	r2, #0
 80067ec:	4281      	cmp	r1, r0
 80067ee:	bf08      	it	eq
 80067f0:	f042 0201 	orreq.w	r2, r2, #1
 80067f4:	3030      	adds	r0, #48	; 0x30
 80067f6:	42a1      	cmp	r1, r4
 80067f8:	bf08      	it	eq
 80067fa:	f042 0201 	orreq.w	r2, r2, #1
 80067fe:	3430      	adds	r4, #48	; 0x30
 8006800:	4281      	cmp	r1, r0
 8006802:	bf08      	it	eq
 8006804:	f042 0201 	orreq.w	r2, r2, #1
 8006808:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800680c:	42a1      	cmp	r1, r4
 800680e:	bf08      	it	eq
 8006810:	f042 0201 	orreq.w	r2, r2, #1
 8006814:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8006818:	4281      	cmp	r1, r0
 800681a:	bf08      	it	eq
 800681c:	f042 0201 	orreq.w	r2, r2, #1
 8006820:	3030      	adds	r0, #48	; 0x30
 8006822:	42a1      	cmp	r1, r4
 8006824:	bf08      	it	eq
 8006826:	f042 0201 	orreq.w	r2, r2, #1
 800682a:	3430      	adds	r4, #48	; 0x30
 800682c:	4281      	cmp	r1, r0
 800682e:	bf08      	it	eq
 8006830:	f042 0201 	orreq.w	r2, r2, #1
 8006834:	3030      	adds	r0, #48	; 0x30
 8006836:	42a1      	cmp	r1, r4
 8006838:	bf08      	it	eq
 800683a:	f042 0201 	orreq.w	r2, r2, #1
 800683e:	3430      	adds	r4, #48	; 0x30
 8006840:	4281      	cmp	r1, r0
 8006842:	bf08      	it	eq
 8006844:	f042 0201 	orreq.w	r2, r2, #1
 8006848:	3030      	adds	r0, #48	; 0x30
 800684a:	42a1      	cmp	r1, r4
 800684c:	bf08      	it	eq
 800684e:	f042 0201 	orreq.w	r2, r2, #1
 8006852:	4281      	cmp	r1, r0
 8006854:	bf08      	it	eq
 8006856:	f042 0201 	orreq.w	r2, r2, #1
 800685a:	b912      	cbnz	r2, 8006862 <HAL_DMA_Abort_IT+0xaa>
 800685c:	4a35      	ldr	r2, [pc, #212]	; (8006934 <HAL_DMA_Abort_IT+0x17c>)
 800685e:	4291      	cmp	r1, r2
 8006860:	d10e      	bne.n	8006880 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006862:	2204      	movs	r2, #4
  return HAL_OK;
 8006864:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8006866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800686a:	680b      	ldr	r3, [r1, #0]
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	600b      	str	r3, [r1, #0]
}
 8006872:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006874:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8006876:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006878:	655a      	str	r2, [r3, #84]	; 0x54
}
 800687a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800687c:	2001      	movs	r0, #1
}
 800687e:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006880:	4a2d      	ldr	r2, [pc, #180]	; (8006938 <HAL_DMA_Abort_IT+0x180>)
 8006882:	4d2e      	ldr	r5, [pc, #184]	; (800693c <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006884:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006886:	42a9      	cmp	r1, r5
 8006888:	bf18      	it	ne
 800688a:	4291      	cmpne	r1, r2
 800688c:	4c2c      	ldr	r4, [pc, #176]	; (8006940 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800688e:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006892:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8006896:	bf0c      	ite	eq
 8006898:	2201      	moveq	r2, #1
 800689a:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800689c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800689e:	42a1      	cmp	r1, r4
 80068a0:	bf08      	it	eq
 80068a2:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80068a6:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068a8:	3428      	adds	r4, #40	; 0x28
 80068aa:	42a9      	cmp	r1, r5
 80068ac:	bf08      	it	eq
 80068ae:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80068b2:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068b6:	42a1      	cmp	r1, r4
 80068b8:	bf08      	it	eq
 80068ba:	f042 0201 	orreq.w	r2, r2, #1
 80068be:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 80068c0:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068c2:	42a1      	cmp	r1, r4
 80068c4:	bf08      	it	eq
 80068c6:	f042 0201 	orreq.w	r2, r2, #1
 80068ca:	481e      	ldr	r0, [pc, #120]	; (8006944 <HAL_DMA_Abort_IT+0x18c>)
 80068cc:	4281      	cmp	r1, r0
 80068ce:	bf08      	it	eq
 80068d0:	f042 0201 	orreq.w	r2, r2, #1
 80068d4:	b912      	cbnz	r2, 80068dc <HAL_DMA_Abort_IT+0x124>
 80068d6:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <HAL_DMA_Abort_IT+0x190>)
 80068d8:	4291      	cmp	r1, r2
 80068da:	d117      	bne.n	800690c <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068dc:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068de:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068e0:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068e4:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068e6:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068ea:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068ee:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068f0:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068f2:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80068f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068f6:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 80068fa:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80068fc:	b132      	cbz	r2, 800690c <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068fe:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006900:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006904:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006908:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800690a:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800690c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800690e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8006910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8006912:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8006916:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800691a:	b11a      	cbz	r2, 8006924 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 800691c:	4618      	mov	r0, r3
 800691e:	4790      	blx	r2
  return HAL_OK;
 8006920:	4620      	mov	r0, r4
}
 8006922:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8006924:	4610      	mov	r0, r2
}
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	40020010 	.word	0x40020010
 800692c:	40020040 	.word	0x40020040
 8006930:	40020070 	.word	0x40020070
 8006934:	400204b8 	.word	0x400204b8
 8006938:	5802541c 	.word	0x5802541c
 800693c:	58025408 	.word	0x58025408
 8006940:	58025430 	.word	0x58025430
 8006944:	58025480 	.word	0x58025480
 8006948:	58025494 	.word	0x58025494

0800694c <HAL_DMA_IRQHandler>:
{
 800694c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8006950:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8006952:	4b9c      	ldr	r3, [pc, #624]	; (8006bc4 <HAL_DMA_IRQHandler+0x278>)
{
 8006954:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006956:	4e9c      	ldr	r6, [pc, #624]	; (8006bc8 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8006958:	681d      	ldr	r5, [r3, #0]
{
 800695a:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 800695c:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800695e:	6803      	ldr	r3, [r0, #0]
 8006960:	4a9a      	ldr	r2, [pc, #616]	; (8006bcc <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006962:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006964:	4293      	cmp	r3, r2
 8006966:	bf18      	it	ne
 8006968:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800696a:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800696c:	bf08      	it	eq
 800696e:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8006970:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006972:	bf18      	it	ne
 8006974:	2600      	movne	r6, #0
 8006976:	d045      	beq.n	8006a04 <HAL_DMA_IRQHandler+0xb8>
 8006978:	3218      	adds	r2, #24
 800697a:	4895      	ldr	r0, [pc, #596]	; (8006bd0 <HAL_DMA_IRQHandler+0x284>)
 800697c:	4283      	cmp	r3, r0
 800697e:	bf18      	it	ne
 8006980:	4293      	cmpne	r3, r2
 8006982:	f100 0018 	add.w	r0, r0, #24
 8006986:	bf0c      	ite	eq
 8006988:	2201      	moveq	r2, #1
 800698a:	2200      	movne	r2, #0
 800698c:	4283      	cmp	r3, r0
 800698e:	bf08      	it	eq
 8006990:	f042 0201 	orreq.w	r2, r2, #1
 8006994:	3018      	adds	r0, #24
 8006996:	4283      	cmp	r3, r0
 8006998:	bf08      	it	eq
 800699a:	f042 0201 	orreq.w	r2, r2, #1
 800699e:	3018      	adds	r0, #24
 80069a0:	4283      	cmp	r3, r0
 80069a2:	bf08      	it	eq
 80069a4:	f042 0201 	orreq.w	r2, r2, #1
 80069a8:	3018      	adds	r0, #24
 80069aa:	4283      	cmp	r3, r0
 80069ac:	bf08      	it	eq
 80069ae:	f042 0201 	orreq.w	r2, r2, #1
 80069b2:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80069b6:	4283      	cmp	r3, r0
 80069b8:	bf08      	it	eq
 80069ba:	f042 0201 	orreq.w	r2, r2, #1
 80069be:	3018      	adds	r0, #24
 80069c0:	4283      	cmp	r3, r0
 80069c2:	bf08      	it	eq
 80069c4:	f042 0201 	orreq.w	r2, r2, #1
 80069c8:	3018      	adds	r0, #24
 80069ca:	4283      	cmp	r3, r0
 80069cc:	bf08      	it	eq
 80069ce:	f042 0201 	orreq.w	r2, r2, #1
 80069d2:	3018      	adds	r0, #24
 80069d4:	4283      	cmp	r3, r0
 80069d6:	bf08      	it	eq
 80069d8:	f042 0201 	orreq.w	r2, r2, #1
 80069dc:	3018      	adds	r0, #24
 80069de:	4283      	cmp	r3, r0
 80069e0:	bf08      	it	eq
 80069e2:	f042 0201 	orreq.w	r2, r2, #1
 80069e6:	3018      	adds	r0, #24
 80069e8:	4283      	cmp	r3, r0
 80069ea:	bf08      	it	eq
 80069ec:	f042 0201 	orreq.w	r2, r2, #1
 80069f0:	3018      	adds	r0, #24
 80069f2:	4283      	cmp	r3, r0
 80069f4:	bf08      	it	eq
 80069f6:	f042 0201 	orreq.w	r2, r2, #1
 80069fa:	b91a      	cbnz	r2, 8006a04 <HAL_DMA_IRQHandler+0xb8>
 80069fc:	4a75      	ldr	r2, [pc, #468]	; (8006bd4 <HAL_DMA_IRQHandler+0x288>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	f040 8250 	bne.w	8006ea4 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a04:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8006a08:	2208      	movs	r2, #8
 8006a0a:	f001 0c1f 	and.w	ip, r1, #31
 8006a0e:	fa02 f20c 	lsl.w	r2, r2, ip
 8006a12:	4217      	tst	r7, r2
 8006a14:	f040 8188 	bne.w	8006d28 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a18:	fa27 f20c 	lsr.w	r2, r7, ip
 8006a1c:	07d2      	lsls	r2, r2, #31
 8006a1e:	d50c      	bpl.n	8006a3a <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a20:	695a      	ldr	r2, [r3, #20]
 8006a22:	0610      	lsls	r0, r2, #24
 8006a24:	d509      	bpl.n	8006a3a <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a26:	2201      	movs	r2, #1
 8006a28:	fa02 f20c 	lsl.w	r2, r2, ip
 8006a2c:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a2e:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8006a32:	f042 0202 	orr.w	r2, r2, #2
 8006a36:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a3a:	f04f 0e04 	mov.w	lr, #4
 8006a3e:	fa0e f00c 	lsl.w	r0, lr, ip
 8006a42:	4238      	tst	r0, r7
 8006a44:	d05b      	beq.n	8006afe <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	d14f      	bne.n	8006aea <HAL_DMA_IRQHandler+0x19e>
 8006a4a:	4a61      	ldr	r2, [pc, #388]	; (8006bd0 <HAL_DMA_IRQHandler+0x284>)
 8006a4c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8006bd8 <HAL_DMA_IRQHandler+0x28c>
 8006a50:	4543      	cmp	r3, r8
 8006a52:	bf18      	it	ne
 8006a54:	4293      	cmpne	r3, r2
 8006a56:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006a5a:	bf0c      	ite	eq
 8006a5c:	2201      	moveq	r2, #1
 8006a5e:	2200      	movne	r2, #0
 8006a60:	4543      	cmp	r3, r8
 8006a62:	bf08      	it	eq
 8006a64:	f042 0201 	orreq.w	r2, r2, #1
 8006a68:	f108 0818 	add.w	r8, r8, #24
 8006a6c:	4543      	cmp	r3, r8
 8006a6e:	bf08      	it	eq
 8006a70:	f042 0201 	orreq.w	r2, r2, #1
 8006a74:	f108 0818 	add.w	r8, r8, #24
 8006a78:	4543      	cmp	r3, r8
 8006a7a:	bf08      	it	eq
 8006a7c:	f042 0201 	orreq.w	r2, r2, #1
 8006a80:	f108 0818 	add.w	r8, r8, #24
 8006a84:	4543      	cmp	r3, r8
 8006a86:	bf08      	it	eq
 8006a88:	f042 0201 	orreq.w	r2, r2, #1
 8006a8c:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8006a90:	4543      	cmp	r3, r8
 8006a92:	bf08      	it	eq
 8006a94:	f042 0201 	orreq.w	r2, r2, #1
 8006a98:	f108 0818 	add.w	r8, r8, #24
 8006a9c:	4543      	cmp	r3, r8
 8006a9e:	bf08      	it	eq
 8006aa0:	f042 0201 	orreq.w	r2, r2, #1
 8006aa4:	f108 0818 	add.w	r8, r8, #24
 8006aa8:	4543      	cmp	r3, r8
 8006aaa:	bf08      	it	eq
 8006aac:	f042 0201 	orreq.w	r2, r2, #1
 8006ab0:	f108 0818 	add.w	r8, r8, #24
 8006ab4:	4543      	cmp	r3, r8
 8006ab6:	bf08      	it	eq
 8006ab8:	f042 0201 	orreq.w	r2, r2, #1
 8006abc:	f108 0818 	add.w	r8, r8, #24
 8006ac0:	4543      	cmp	r3, r8
 8006ac2:	bf08      	it	eq
 8006ac4:	f042 0201 	orreq.w	r2, r2, #1
 8006ac8:	f108 0818 	add.w	r8, r8, #24
 8006acc:	4543      	cmp	r3, r8
 8006ace:	bf08      	it	eq
 8006ad0:	f042 0201 	orreq.w	r2, r2, #1
 8006ad4:	f108 0818 	add.w	r8, r8, #24
 8006ad8:	4543      	cmp	r3, r8
 8006ada:	bf08      	it	eq
 8006adc:	f042 0201 	orreq.w	r2, r2, #1
 8006ae0:	b91a      	cbnz	r2, 8006aea <HAL_DMA_IRQHandler+0x19e>
 8006ae2:	4a3c      	ldr	r2, [pc, #240]	; (8006bd4 <HAL_DMA_IRQHandler+0x288>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	f040 8219 	bne.w	8006f1c <HAL_DMA_IRQHandler+0x5d0>
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	0792      	lsls	r2, r2, #30
 8006aee:	d506      	bpl.n	8006afe <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006af0:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006af2:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8006af6:	f042 0204 	orr.w	r2, r2, #4
 8006afa:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006afe:	2210      	movs	r2, #16
 8006b00:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006b04:	ea1c 0f07 	tst.w	ip, r7
 8006b08:	d06c      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d145      	bne.n	8006b9a <HAL_DMA_IRQHandler+0x24e>
 8006b0e:	4a30      	ldr	r2, [pc, #192]	; (8006bd0 <HAL_DMA_IRQHandler+0x284>)
 8006b10:	4e31      	ldr	r6, [pc, #196]	; (8006bd8 <HAL_DMA_IRQHandler+0x28c>)
 8006b12:	42b3      	cmp	r3, r6
 8006b14:	bf18      	it	ne
 8006b16:	4293      	cmpne	r3, r2
 8006b18:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8006b1c:	bf0c      	ite	eq
 8006b1e:	2201      	moveq	r2, #1
 8006b20:	2200      	movne	r2, #0
 8006b22:	42b3      	cmp	r3, r6
 8006b24:	bf08      	it	eq
 8006b26:	f042 0201 	orreq.w	r2, r2, #1
 8006b2a:	3618      	adds	r6, #24
 8006b2c:	42b3      	cmp	r3, r6
 8006b2e:	bf08      	it	eq
 8006b30:	f042 0201 	orreq.w	r2, r2, #1
 8006b34:	3618      	adds	r6, #24
 8006b36:	42b3      	cmp	r3, r6
 8006b38:	bf08      	it	eq
 8006b3a:	f042 0201 	orreq.w	r2, r2, #1
 8006b3e:	3618      	adds	r6, #24
 8006b40:	42b3      	cmp	r3, r6
 8006b42:	bf08      	it	eq
 8006b44:	f042 0201 	orreq.w	r2, r2, #1
 8006b48:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8006b4c:	42b3      	cmp	r3, r6
 8006b4e:	bf08      	it	eq
 8006b50:	f042 0201 	orreq.w	r2, r2, #1
 8006b54:	3618      	adds	r6, #24
 8006b56:	42b3      	cmp	r3, r6
 8006b58:	bf08      	it	eq
 8006b5a:	f042 0201 	orreq.w	r2, r2, #1
 8006b5e:	3618      	adds	r6, #24
 8006b60:	42b3      	cmp	r3, r6
 8006b62:	bf08      	it	eq
 8006b64:	f042 0201 	orreq.w	r2, r2, #1
 8006b68:	3618      	adds	r6, #24
 8006b6a:	42b3      	cmp	r3, r6
 8006b6c:	bf08      	it	eq
 8006b6e:	f042 0201 	orreq.w	r2, r2, #1
 8006b72:	3618      	adds	r6, #24
 8006b74:	42b3      	cmp	r3, r6
 8006b76:	bf08      	it	eq
 8006b78:	f042 0201 	orreq.w	r2, r2, #1
 8006b7c:	3618      	adds	r6, #24
 8006b7e:	42b3      	cmp	r3, r6
 8006b80:	bf08      	it	eq
 8006b82:	f042 0201 	orreq.w	r2, r2, #1
 8006b86:	3618      	adds	r6, #24
 8006b88:	42b3      	cmp	r3, r6
 8006b8a:	bf08      	it	eq
 8006b8c:	f042 0201 	orreq.w	r2, r2, #1
 8006b90:	b91a      	cbnz	r2, 8006b9a <HAL_DMA_IRQHandler+0x24e>
 8006b92:	4a10      	ldr	r2, [pc, #64]	; (8006bd4 <HAL_DMA_IRQHandler+0x288>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	f040 81c9 	bne.w	8006f2c <HAL_DMA_IRQHandler+0x5e0>
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	0710      	lsls	r0, r2, #28
 8006b9e:	d521      	bpl.n	8006be4 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ba0:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	0356      	lsls	r6, r2, #13
 8006ba8:	f100 814c 	bmi.w	8006e44 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	05d2      	lsls	r2, r2, #23
 8006bb0:	d403      	bmi.n	8006bba <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	f022 0208 	bic.w	r2, r2, #8
 8006bb8:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8006bba:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8006bbe:	b18b      	cbz	r3, 8006be4 <HAL_DMA_IRQHandler+0x298>
 8006bc0:	e00c      	b.n	8006bdc <HAL_DMA_IRQHandler+0x290>
 8006bc2:	bf00      	nop
 8006bc4:	240001ec 	.word	0x240001ec
 8006bc8:	40020010 	.word	0x40020010
 8006bcc:	40020028 	.word	0x40020028
 8006bd0:	40020058 	.word	0x40020058
 8006bd4:	400204b8 	.word	0x400204b8
 8006bd8:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8006bdc:	4648      	mov	r0, r9
 8006bde:	4798      	blx	r3
 8006be0:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006be4:	f001 011f 	and.w	r1, r1, #31
 8006be8:	2620      	movs	r6, #32
 8006bea:	408e      	lsls	r6, r1
 8006bec:	423e      	tst	r6, r7
 8006bee:	d068      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006bf0:	f8d9 2000 	ldr.w	r2, [r9]
 8006bf4:	4ba5      	ldr	r3, [pc, #660]	; (8006e8c <HAL_DMA_IRQHandler+0x540>)
 8006bf6:	4fa6      	ldr	r7, [pc, #664]	; (8006e90 <HAL_DMA_IRQHandler+0x544>)
 8006bf8:	42ba      	cmp	r2, r7
 8006bfa:	bf18      	it	ne
 8006bfc:	429a      	cmpne	r2, r3
 8006bfe:	f107 0718 	add.w	r7, r7, #24
 8006c02:	bf0c      	ite	eq
 8006c04:	2301      	moveq	r3, #1
 8006c06:	2300      	movne	r3, #0
 8006c08:	42ba      	cmp	r2, r7
 8006c0a:	bf08      	it	eq
 8006c0c:	f043 0301 	orreq.w	r3, r3, #1
 8006c10:	3718      	adds	r7, #24
 8006c12:	42ba      	cmp	r2, r7
 8006c14:	bf08      	it	eq
 8006c16:	f043 0301 	orreq.w	r3, r3, #1
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	42ba      	cmp	r2, r7
 8006c1e:	bf08      	it	eq
 8006c20:	f043 0301 	orreq.w	r3, r3, #1
 8006c24:	3718      	adds	r7, #24
 8006c26:	42ba      	cmp	r2, r7
 8006c28:	bf08      	it	eq
 8006c2a:	f043 0301 	orreq.w	r3, r3, #1
 8006c2e:	3718      	adds	r7, #24
 8006c30:	42ba      	cmp	r2, r7
 8006c32:	bf08      	it	eq
 8006c34:	f043 0301 	orreq.w	r3, r3, #1
 8006c38:	3718      	adds	r7, #24
 8006c3a:	42ba      	cmp	r2, r7
 8006c3c:	bf08      	it	eq
 8006c3e:	f043 0301 	orreq.w	r3, r3, #1
 8006c42:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8006c46:	42ba      	cmp	r2, r7
 8006c48:	bf08      	it	eq
 8006c4a:	f043 0301 	orreq.w	r3, r3, #1
 8006c4e:	3718      	adds	r7, #24
 8006c50:	42ba      	cmp	r2, r7
 8006c52:	bf08      	it	eq
 8006c54:	f043 0301 	orreq.w	r3, r3, #1
 8006c58:	3718      	adds	r7, #24
 8006c5a:	42ba      	cmp	r2, r7
 8006c5c:	bf08      	it	eq
 8006c5e:	f043 0301 	orreq.w	r3, r3, #1
 8006c62:	3718      	adds	r7, #24
 8006c64:	42ba      	cmp	r2, r7
 8006c66:	bf08      	it	eq
 8006c68:	f043 0301 	orreq.w	r3, r3, #1
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	42ba      	cmp	r2, r7
 8006c70:	bf08      	it	eq
 8006c72:	f043 0301 	orreq.w	r3, r3, #1
 8006c76:	3718      	adds	r7, #24
 8006c78:	42ba      	cmp	r2, r7
 8006c7a:	bf08      	it	eq
 8006c7c:	f043 0301 	orreq.w	r3, r3, #1
 8006c80:	3718      	adds	r7, #24
 8006c82:	42ba      	cmp	r2, r7
 8006c84:	bf08      	it	eq
 8006c86:	f043 0301 	orreq.w	r3, r3, #1
 8006c8a:	b91b      	cbnz	r3, 8006c94 <HAL_DMA_IRQHandler+0x348>
 8006c8c:	4b81      	ldr	r3, [pc, #516]	; (8006e94 <HAL_DMA_IRQHandler+0x548>)
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	f040 8162 	bne.w	8006f58 <HAL_DMA_IRQHandler+0x60c>
 8006c94:	6813      	ldr	r3, [r2, #0]
 8006c96:	06db      	lsls	r3, r3, #27
 8006c98:	d513      	bpl.n	8006cc2 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c9a:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c9c:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8006ca0:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ca2:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ca4:	f000 80ae 	beq.w	8006e04 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ca8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006cac:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006cae:	f000 80d3 	beq.w	8006e58 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006cb2:	031c      	lsls	r4, r3, #12
 8006cb4:	f140 80de 	bpl.w	8006e74 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 8006cb8:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8006cbc:	b10b      	cbz	r3, 8006cc2 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 8006cbe:	4648      	mov	r0, r9
 8006cc0:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006cc2:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 80b9 	beq.w	8006e3e <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ccc:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8006cd0:	07d8      	lsls	r0, r3, #31
 8006cd2:	d51f      	bpl.n	8006d14 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 8006cd4:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 8006cd8:	2104      	movs	r1, #4
 8006cda:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8006cde:	6813      	ldr	r3, [r2, #0]
 8006ce0:	f023 0301 	bic.w	r3, r3, #1
 8006ce4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ce6:	4b6c      	ldr	r3, [pc, #432]	; (8006e98 <HAL_DMA_IRQHandler+0x54c>)
 8006ce8:	fba3 3505 	umull	r3, r5, r3, r5
 8006cec:	0aad      	lsrs	r5, r5, #10
 8006cee:	e002      	b.n	8006cf6 <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006cf0:	6813      	ldr	r3, [r2, #0]
 8006cf2:	07d9      	lsls	r1, r3, #31
 8006cf4:	d504      	bpl.n	8006d00 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 8006cf6:	9b01      	ldr	r3, [sp, #4]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	42ab      	cmp	r3, r5
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	d9f7      	bls.n	8006cf0 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d00:	6813      	ldr	r3, [r2, #0]
 8006d02:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8006d04:	bf4c      	ite	mi
 8006d06:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8006d08:	2301      	movpl	r3, #1
 8006d0a:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8006d14:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8090 	beq.w	8006e3e <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 8006d1e:	4648      	mov	r0, r9
}
 8006d20:	b003      	add	sp, #12
 8006d22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 8006d26:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	0740      	lsls	r0, r0, #29
 8006d2c:	d50a      	bpl.n	8006d44 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	f020 0004 	bic.w	r0, r0, #4
 8006d34:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d36:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d38:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d44:	fa27 f20c 	lsr.w	r2, r7, ip
 8006d48:	07d2      	lsls	r2, r2, #31
 8006d4a:	f57f ae76 	bpl.w	8006a3a <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d4e:	4a53      	ldr	r2, [pc, #332]	; (8006e9c <HAL_DMA_IRQHandler+0x550>)
 8006d50:	4853      	ldr	r0, [pc, #332]	; (8006ea0 <HAL_DMA_IRQHandler+0x554>)
 8006d52:	4283      	cmp	r3, r0
 8006d54:	bf18      	it	ne
 8006d56:	4293      	cmpne	r3, r2
 8006d58:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8006d5c:	bf0c      	ite	eq
 8006d5e:	2201      	moveq	r2, #1
 8006d60:	2200      	movne	r2, #0
 8006d62:	4283      	cmp	r3, r0
 8006d64:	bf08      	it	eq
 8006d66:	f042 0201 	orreq.w	r2, r2, #1
 8006d6a:	3018      	adds	r0, #24
 8006d6c:	4283      	cmp	r3, r0
 8006d6e:	bf08      	it	eq
 8006d70:	f042 0201 	orreq.w	r2, r2, #1
 8006d74:	3018      	adds	r0, #24
 8006d76:	4283      	cmp	r3, r0
 8006d78:	bf08      	it	eq
 8006d7a:	f042 0201 	orreq.w	r2, r2, #1
 8006d7e:	3018      	adds	r0, #24
 8006d80:	4283      	cmp	r3, r0
 8006d82:	bf08      	it	eq
 8006d84:	f042 0201 	orreq.w	r2, r2, #1
 8006d88:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8006d8c:	4283      	cmp	r3, r0
 8006d8e:	bf08      	it	eq
 8006d90:	f042 0201 	orreq.w	r2, r2, #1
 8006d94:	3018      	adds	r0, #24
 8006d96:	4283      	cmp	r3, r0
 8006d98:	bf08      	it	eq
 8006d9a:	f042 0201 	orreq.w	r2, r2, #1
 8006d9e:	3018      	adds	r0, #24
 8006da0:	4283      	cmp	r3, r0
 8006da2:	bf08      	it	eq
 8006da4:	f042 0201 	orreq.w	r2, r2, #1
 8006da8:	3018      	adds	r0, #24
 8006daa:	4283      	cmp	r3, r0
 8006dac:	bf08      	it	eq
 8006dae:	f042 0201 	orreq.w	r2, r2, #1
 8006db2:	3018      	adds	r0, #24
 8006db4:	4283      	cmp	r3, r0
 8006db6:	bf08      	it	eq
 8006db8:	f042 0201 	orreq.w	r2, r2, #1
 8006dbc:	3018      	adds	r0, #24
 8006dbe:	4283      	cmp	r3, r0
 8006dc0:	bf08      	it	eq
 8006dc2:	f042 0201 	orreq.w	r2, r2, #1
 8006dc6:	3018      	adds	r0, #24
 8006dc8:	4283      	cmp	r3, r0
 8006dca:	bf08      	it	eq
 8006dcc:	f042 0201 	orreq.w	r2, r2, #1
 8006dd0:	3018      	adds	r0, #24
 8006dd2:	4283      	cmp	r3, r0
 8006dd4:	bf08      	it	eq
 8006dd6:	f042 0201 	orreq.w	r2, r2, #1
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	f47f ae20 	bne.w	8006a20 <HAL_DMA_IRQHandler+0xd4>
 8006de0:	2e00      	cmp	r6, #0
 8006de2:	f47f ae1d 	bne.w	8006a20 <HAL_DMA_IRQHandler+0xd4>
 8006de6:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006de8:	2204      	movs	r2, #4
 8006dea:	fa02 f20c 	lsl.w	r2, r2, ip
 8006dee:	423a      	tst	r2, r7
 8006df0:	f040 8094 	bne.w	8006f1c <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006df4:	2210      	movs	r2, #16
 8006df6:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006dfa:	ea17 0f0c 	tst.w	r7, ip
 8006dfe:	f43f aef1 	beq.w	8006be4 <HAL_DMA_IRQHandler+0x298>
 8006e02:	e684      	b.n	8006b0e <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e04:	f023 0316 	bic.w	r3, r3, #22
 8006e08:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e0a:	6953      	ldr	r3, [r2, #20]
 8006e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e10:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e12:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8006e16:	b39b      	cbz	r3, 8006e80 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e18:	6813      	ldr	r3, [r2, #0]
 8006e1a:	f023 0308 	bic.w	r3, r3, #8
 8006e1e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e20:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8006e22:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 8006e24:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e26:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8006e2a:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e2e:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8006e30:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8006e34:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f47f af70 	bne.w	8006d1e <HAL_DMA_IRQHandler+0x3d2>
}
 8006e3e:	b003      	add	sp, #12
 8006e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	0318      	lsls	r0, r3, #12
 8006e48:	f57f aeb7 	bpl.w	8006bba <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006e4c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f aec3 	bne.w	8006bdc <HAL_DMA_IRQHandler+0x290>
 8006e56:	e6c5      	b.n	8006be4 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e58:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006e5c:	f47f af2c 	bne.w	8006cb8 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e60:	6811      	ldr	r1, [r2, #0]
 8006e62:	f021 0110 	bic.w	r1, r1, #16
 8006e66:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8006e68:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8006e6a:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8006e6e:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8006e72:	e721      	b.n	8006cb8 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 8006e74:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f47f af20 	bne.w	8006cbe <HAL_DMA_IRQHandler+0x372>
 8006e7e:	e720      	b.n	8006cc2 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e80:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1c7      	bne.n	8006e18 <HAL_DMA_IRQHandler+0x4cc>
 8006e88:	e7ca      	b.n	8006e20 <HAL_DMA_IRQHandler+0x4d4>
 8006e8a:	bf00      	nop
 8006e8c:	40020010 	.word	0x40020010
 8006e90:	40020028 	.word	0x40020028
 8006e94:	400204b8 	.word	0x400204b8
 8006e98:	1b4e81b5 	.word	0x1b4e81b5
 8006e9c:	40020058 	.word	0x40020058
 8006ea0:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ea4:	4a4e      	ldr	r2, [pc, #312]	; (8006fe0 <HAL_DMA_IRQHandler+0x694>)
 8006ea6:	4d4f      	ldr	r5, [pc, #316]	; (8006fe4 <HAL_DMA_IRQHandler+0x698>)
 8006ea8:	42ab      	cmp	r3, r5
 8006eaa:	bf18      	it	ne
 8006eac:	4293      	cmpne	r3, r2
 8006eae:	f105 0514 	add.w	r5, r5, #20
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2201      	moveq	r2, #1
 8006eb6:	2200      	movne	r2, #0
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	bf08      	it	eq
 8006ebc:	f042 0201 	orreq.w	r2, r2, #1
 8006ec0:	3514      	adds	r5, #20
 8006ec2:	42ab      	cmp	r3, r5
 8006ec4:	bf08      	it	eq
 8006ec6:	f042 0201 	orreq.w	r2, r2, #1
 8006eca:	3514      	adds	r5, #20
 8006ecc:	42ab      	cmp	r3, r5
 8006ece:	bf08      	it	eq
 8006ed0:	f042 0201 	orreq.w	r2, r2, #1
 8006ed4:	3514      	adds	r5, #20
 8006ed6:	42ab      	cmp	r3, r5
 8006ed8:	bf08      	it	eq
 8006eda:	f042 0201 	orreq.w	r2, r2, #1
 8006ede:	3514      	adds	r5, #20
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	bf08      	it	eq
 8006ee4:	f042 0201 	orreq.w	r2, r2, #1
 8006ee8:	b912      	cbnz	r2, 8006ef0 <HAL_DMA_IRQHandler+0x5a4>
 8006eea:	4a3f      	ldr	r2, [pc, #252]	; (8006fe8 <HAL_DMA_IRQHandler+0x69c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d1a6      	bne.n	8006e3e <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ef0:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 8006ef4:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ef6:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ef8:	f005 051f 	and.w	r5, r5, #31
 8006efc:	40ae      	lsls	r6, r5
 8006efe:	420e      	tst	r6, r1
 8006f00:	d019      	beq.n	8006f36 <HAL_DMA_IRQHandler+0x5ea>
 8006f02:	0757      	lsls	r7, r2, #29
 8006f04:	d517      	bpl.n	8006f36 <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f06:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006f08:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f0a:	d54b      	bpl.n	8006fa4 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f0c:	03d1      	lsls	r1, r2, #15
 8006f0e:	d44f      	bmi.n	8006fb0 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f10:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f47f af02 	bne.w	8006d1e <HAL_DMA_IRQHandler+0x3d2>
 8006f1a:	e790      	b.n	8006e3e <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006f1c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f1e:	2210      	movs	r2, #16
 8006f20:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006f24:	ea17 0f0c 	tst.w	r7, ip
 8006f28:	f43f ae5c 	beq.w	8006be4 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	0752      	lsls	r2, r2, #29
 8006f30:	f57f ae58 	bpl.w	8006be4 <HAL_DMA_IRQHandler+0x298>
 8006f34:	e634      	b.n	8006ba0 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f36:	2602      	movs	r6, #2
 8006f38:	40ae      	lsls	r6, r5
 8006f3a:	420e      	tst	r6, r1
 8006f3c:	d011      	beq.n	8006f62 <HAL_DMA_IRQHandler+0x616>
 8006f3e:	0797      	lsls	r7, r2, #30
 8006f40:	d50f      	bpl.n	8006f62 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f42:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f44:	0414      	lsls	r4, r2, #16
 8006f46:	d539      	bpl.n	8006fbc <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f48:	03d0      	lsls	r0, r2, #15
 8006f4a:	d443      	bmi.n	8006fd4 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 8006f4c:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f47f aee4 	bne.w	8006d1e <HAL_DMA_IRQHandler+0x3d2>
 8006f56:	e772      	b.n	8006e3e <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006f58:	6813      	ldr	r3, [r2, #0]
 8006f5a:	079f      	lsls	r7, r3, #30
 8006f5c:	f57f aeb1 	bpl.w	8006cc2 <HAL_DMA_IRQHandler+0x376>
 8006f60:	e69b      	b.n	8006c9a <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f62:	2608      	movs	r6, #8
 8006f64:	40ae      	lsls	r6, r5
 8006f66:	420e      	tst	r6, r1
 8006f68:	f43f af69 	beq.w	8006e3e <HAL_DMA_IRQHandler+0x4f2>
 8006f6c:	0711      	lsls	r1, r2, #28
 8006f6e:	f57f af66 	bpl.w	8006e3e <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f72:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8006f74:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f76:	f022 020e 	bic.w	r2, r2, #14
 8006f7a:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f7c:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8006f7e:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f82:	fa03 f505 	lsl.w	r5, r3, r5
 8006f86:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f88:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8006f8c:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8006f90:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	f43f af52 	beq.w	8006e3e <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 8006f9a:	4648      	mov	r0, r9
}
 8006f9c:	b003      	add	sp, #12
 8006f9e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8006fa2:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006fa4:	0692      	lsls	r2, r2, #26
 8006fa6:	d403      	bmi.n	8006fb0 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	f022 0204 	bic.w	r2, r2, #4
 8006fae:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8006fb0:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f47f aeb2 	bne.w	8006d1e <HAL_DMA_IRQHandler+0x3d2>
 8006fba:	e740      	b.n	8006e3e <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006fbc:	f012 0220 	ands.w	r2, r2, #32
 8006fc0:	d108      	bne.n	8006fd4 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006fc2:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006fc4:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006fc6:	f021 010a 	bic.w	r1, r1, #10
 8006fca:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006fcc:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8006fd0:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8006fd4:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f aea0 	bne.w	8006d1e <HAL_DMA_IRQHandler+0x3d2>
 8006fde:	e72e      	b.n	8006e3e <HAL_DMA_IRQHandler+0x4f2>
 8006fe0:	58025408 	.word	0x58025408
 8006fe4:	5802541c 	.word	0x5802541c
 8006fe8:	58025494 	.word	0x58025494

08006fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ff0:	680c      	ldr	r4, [r1, #0]
{
 8006ff2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ff4:	2c00      	cmp	r4, #0
 8006ff6:	f000 80a6 	beq.w	8007146 <HAL_GPIO_Init+0x15a>
 8006ffa:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ffe:	4f8e      	ldr	r7, [pc, #568]	; (8007238 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 8007000:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007002:	2201      	movs	r2, #1
 8007004:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8007006:	ea12 0e04 	ands.w	lr, r2, r4
 800700a:	f000 8095 	beq.w	8007138 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800700e:	684d      	ldr	r5, [r1, #4]
 8007010:	f005 0903 	and.w	r9, r5, #3
 8007014:	f109 36ff 	add.w	r6, r9, #4294967295
 8007018:	2e01      	cmp	r6, #1
 800701a:	f240 8097 	bls.w	800714c <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800701e:	f1b9 0f03 	cmp.w	r9, #3
 8007022:	f040 80d1 	bne.w	80071c8 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007026:	fa09 f20c 	lsl.w	r2, r9, ip
 800702a:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 800702e:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007030:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007034:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007038:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 800703c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800703e:	d07b      	beq.n	8007138 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007040:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8007044:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007048:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800704c:	f042 0202 	orr.w	r2, r2, #2
 8007050:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007054:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007058:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800705c:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8007060:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8007064:	f002 0202 	and.w	r2, r2, #2
 8007068:	9201      	str	r2, [sp, #4]
 800706a:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800706c:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800706e:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007072:	fa02 f209 	lsl.w	r2, r2, r9
 8007076:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800707a:	4e70      	ldr	r6, [pc, #448]	; (800723c <HAL_GPIO_Init+0x250>)
 800707c:	42b0      	cmp	r0, r6
 800707e:	d029      	beq.n	80070d4 <HAL_GPIO_Init+0xe8>
 8007080:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007084:	42b0      	cmp	r0, r6
 8007086:	f000 80ac 	beq.w	80071e2 <HAL_GPIO_Init+0x1f6>
 800708a:	4e6d      	ldr	r6, [pc, #436]	; (8007240 <HAL_GPIO_Init+0x254>)
 800708c:	42b0      	cmp	r0, r6
 800708e:	f000 80ae 	beq.w	80071ee <HAL_GPIO_Init+0x202>
 8007092:	4e6c      	ldr	r6, [pc, #432]	; (8007244 <HAL_GPIO_Init+0x258>)
 8007094:	42b0      	cmp	r0, r6
 8007096:	f000 809e 	beq.w	80071d6 <HAL_GPIO_Init+0x1ea>
 800709a:	4e6b      	ldr	r6, [pc, #428]	; (8007248 <HAL_GPIO_Init+0x25c>)
 800709c:	42b0      	cmp	r0, r6
 800709e:	f000 80b2 	beq.w	8007206 <HAL_GPIO_Init+0x21a>
 80070a2:	4e6a      	ldr	r6, [pc, #424]	; (800724c <HAL_GPIO_Init+0x260>)
 80070a4:	42b0      	cmp	r0, r6
 80070a6:	f000 80b4 	beq.w	8007212 <HAL_GPIO_Init+0x226>
 80070aa:	4e69      	ldr	r6, [pc, #420]	; (8007250 <HAL_GPIO_Init+0x264>)
 80070ac:	42b0      	cmp	r0, r6
 80070ae:	f000 80a4 	beq.w	80071fa <HAL_GPIO_Init+0x20e>
 80070b2:	4e68      	ldr	r6, [pc, #416]	; (8007254 <HAL_GPIO_Init+0x268>)
 80070b4:	42b0      	cmp	r0, r6
 80070b6:	f000 80b2 	beq.w	800721e <HAL_GPIO_Init+0x232>
 80070ba:	4e67      	ldr	r6, [pc, #412]	; (8007258 <HAL_GPIO_Init+0x26c>)
 80070bc:	42b0      	cmp	r0, r6
 80070be:	f000 80b4 	beq.w	800722a <HAL_GPIO_Init+0x23e>
 80070c2:	4e66      	ldr	r6, [pc, #408]	; (800725c <HAL_GPIO_Init+0x270>)
 80070c4:	42b0      	cmp	r0, r6
 80070c6:	bf0c      	ite	eq
 80070c8:	2609      	moveq	r6, #9
 80070ca:	260a      	movne	r6, #10
 80070cc:	fa06 f909 	lsl.w	r9, r6, r9
 80070d0:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070d4:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070dc:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80070de:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 80070e2:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80070e4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80070e8:	bf54      	ite	pl
 80070ea:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80070ee:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 80070f2:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070f4:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 80070f6:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80070f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80070fc:	bf54      	ite	pl
 80070fe:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8007102:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 8007106:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007108:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800710c:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800710e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007112:	bf54      	ite	pl
 8007114:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8007118:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800711c:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800711e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8007122:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007126:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 800712a:	bf54      	ite	pl
 800712c:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8007130:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007134:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8007138:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800713a:	f10c 0c02 	add.w	ip, ip, #2
 800713e:	fa34 f203 	lsrs.w	r2, r4, r3
 8007142:	f47f af5e 	bne.w	8007002 <HAL_GPIO_Init+0x16>
  }
}
 8007146:	b003      	add	sp, #12
 8007148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800714c:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8007150:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007152:	fa08 f80c 	lsl.w	r8, r8, ip
 8007156:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800715a:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800715c:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007160:	fa06 f60c 	lsl.w	r6, r6, ip
 8007164:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8007168:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800716a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 800716e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007172:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007174:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007178:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800717a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800717c:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800717e:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007182:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007184:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007188:	fa06 f60c 	lsl.w	r6, r6, ip
 800718c:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8007190:	fa09 f20c 	lsl.w	r2, r9, ip
 8007194:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007196:	f47f af4a 	bne.w	800702e <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800719a:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800719e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071a2:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 80071a6:	260f      	movs	r6, #15
 80071a8:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80071ac:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 80071b0:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071b4:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071b8:	690e      	ldr	r6, [r1, #16]
 80071ba:	fa06 f60b 	lsl.w	r6, r6, fp
 80071be:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 80071c2:	f8c9 6020 	str.w	r6, [r9, #32]
 80071c6:	e732      	b.n	800702e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071c8:	f04f 0803 	mov.w	r8, #3
 80071cc:	fa08 f80c 	lsl.w	r8, r8, ip
 80071d0:	ea6f 0808 	mvn.w	r8, r8
 80071d4:	e7d2      	b.n	800717c <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071d6:	2603      	movs	r6, #3
 80071d8:	fa06 f909 	lsl.w	r9, r6, r9
 80071dc:	ea42 0209 	orr.w	r2, r2, r9
 80071e0:	e778      	b.n	80070d4 <HAL_GPIO_Init+0xe8>
 80071e2:	2601      	movs	r6, #1
 80071e4:	fa06 f909 	lsl.w	r9, r6, r9
 80071e8:	ea42 0209 	orr.w	r2, r2, r9
 80071ec:	e772      	b.n	80070d4 <HAL_GPIO_Init+0xe8>
 80071ee:	2602      	movs	r6, #2
 80071f0:	fa06 f909 	lsl.w	r9, r6, r9
 80071f4:	ea42 0209 	orr.w	r2, r2, r9
 80071f8:	e76c      	b.n	80070d4 <HAL_GPIO_Init+0xe8>
 80071fa:	2606      	movs	r6, #6
 80071fc:	fa06 f909 	lsl.w	r9, r6, r9
 8007200:	ea42 0209 	orr.w	r2, r2, r9
 8007204:	e766      	b.n	80070d4 <HAL_GPIO_Init+0xe8>
 8007206:	2604      	movs	r6, #4
 8007208:	fa06 f909 	lsl.w	r9, r6, r9
 800720c:	ea42 0209 	orr.w	r2, r2, r9
 8007210:	e760      	b.n	80070d4 <HAL_GPIO_Init+0xe8>
 8007212:	2605      	movs	r6, #5
 8007214:	fa06 f909 	lsl.w	r9, r6, r9
 8007218:	ea42 0209 	orr.w	r2, r2, r9
 800721c:	e75a      	b.n	80070d4 <HAL_GPIO_Init+0xe8>
 800721e:	2607      	movs	r6, #7
 8007220:	fa06 f909 	lsl.w	r9, r6, r9
 8007224:	ea42 0209 	orr.w	r2, r2, r9
 8007228:	e754      	b.n	80070d4 <HAL_GPIO_Init+0xe8>
 800722a:	2608      	movs	r6, #8
 800722c:	fa06 f909 	lsl.w	r9, r6, r9
 8007230:	ea42 0209 	orr.w	r2, r2, r9
 8007234:	e74e      	b.n	80070d4 <HAL_GPIO_Init+0xe8>
 8007236:	bf00      	nop
 8007238:	58024400 	.word	0x58024400
 800723c:	58020000 	.word	0x58020000
 8007240:	58020800 	.word	0x58020800
 8007244:	58020c00 	.word	0x58020c00
 8007248:	58021000 	.word	0x58021000
 800724c:	58021400 	.word	0x58021400
 8007250:	58021800 	.word	0x58021800
 8007254:	58021c00 	.word	0x58021c00
 8007258:	58022000 	.word	0x58022000
 800725c:	58022400 	.word	0x58022400

08007260 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007260:	6903      	ldr	r3, [r0, #16]
 8007262:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007264:	bf14      	ite	ne
 8007266:	2001      	movne	r0, #1
 8007268:	2000      	moveq	r0, #0
 800726a:	4770      	bx	lr

0800726c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800726c:	b902      	cbnz	r2, 8007270 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800726e:	0409      	lsls	r1, r1, #16
 8007270:	6181      	str	r1, [r0, #24]
  }
}
 8007272:	4770      	bx	lr

08007274 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007278:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800727c:	4201      	tst	r1, r0
 800727e:	d100      	bne.n	8007282 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8007280:	4770      	bx	lr
{
 8007282:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007284:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007288:	f7f9 fe3a 	bl	8000f00 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800728c:	bd08      	pop	{r3, pc}
 800728e:	bf00      	nop

08007290 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007290:	2800      	cmp	r0, #0
 8007292:	d05e      	beq.n	8007352 <HAL_LPTIM_Init+0xc2>
{
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007296:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800729a:	4604      	mov	r4, r0
 800729c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d051      	beq.n	8007348 <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80072a4:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80072a6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80072a8:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80072ac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80072b0:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 80072b2:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80072b4:	d03c      	beq.n	8007330 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80072b6:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 80072ba:	d039      	beq.n	8007330 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80072bc:	6962      	ldr	r2, [r4, #20]
 80072be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d003      	beq.n	80072ce <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80072c6:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80072ca:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80072ce:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 80072d0:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80072d2:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 80072d4:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 80072d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072d8:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80072da:	4e22      	ldr	r6, [pc, #136]	; (8007364 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 80072dc:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80072de:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80072e0:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80072e2:	b1ed      	cbz	r5, 8007320 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80072e4:	2d01      	cmp	r5, #1
 80072e6:	d11f      	bne.n	8007328 <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80072e8:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 80072ec:	4328      	orrs	r0, r5
 80072ee:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80072f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80072f4:	4282      	cmp	r2, r0
 80072f6:	d004      	beq.n	8007302 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80072f8:	69a0      	ldr	r0, [r4, #24]
 80072fa:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 80072fc:	69e0      	ldr	r0, [r4, #28]
 80072fe:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007300:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8007302:	4a19      	ldr	r2, [pc, #100]	; (8007368 <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 8007304:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8007306:	4291      	cmp	r1, r2
 8007308:	d015      	beq.n	8007336 <HAL_LPTIM_Init+0xa6>
 800730a:	4b18      	ldr	r3, [pc, #96]	; (800736c <HAL_LPTIM_Init+0xdc>)
 800730c:	4299      	cmp	r1, r3
 800730e:	d012      	beq.n	8007336 <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8007310:	4b17      	ldr	r3, [pc, #92]	; (8007370 <HAL_LPTIM_Init+0xe0>)
 8007312:	4299      	cmp	r1, r3
 8007314:	d01f      	beq.n	8007356 <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007316:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8007318:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800731a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800731e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007320:	69e0      	ldr	r0, [r4, #28]
 8007322:	6925      	ldr	r5, [r4, #16]
 8007324:	4328      	orrs	r0, r5
 8007326:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007328:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800732c:	d1e0      	bne.n	80072f0 <HAL_LPTIM_Init+0x60>
 800732e:	e7db      	b.n	80072e8 <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007330:	f020 001e 	bic.w	r0, r0, #30
 8007334:	e7c2      	b.n	80072bc <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007336:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 800733a:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800733c:	4313      	orrs	r3, r2
 800733e:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007340:	2301      	movs	r3, #1
 8007342:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8007346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8007348:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 800734c:	f7fc fd04 	bl	8003d58 <HAL_LPTIM_MspInit>
 8007350:	e7a8      	b.n	80072a4 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 8007352:	2001      	movs	r0, #1
}
 8007354:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007356:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8007358:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800735a:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 800735c:	2301      	movs	r3, #1
 800735e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8007362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007364:	ff19f1fe 	.word	0xff19f1fe
 8007368:	40002400 	.word	0x40002400
 800736c:	58002400 	.word	0x58002400
 8007370:	58002800 	.word	0x58002800

08007374 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007376:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007378:	2800      	cmp	r0, #0
 800737a:	f000 8088 	beq.w	800748e <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800737e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8007382:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8007384:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007386:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800738a:	2b00      	cmp	r3, #0
 800738c:	d079      	beq.n	8007482 <HAL_PCD_Init+0x10e>
 800738e:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007390:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007392:	462e      	mov	r6, r5
 8007394:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8007396:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800739a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800739c:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800739e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 80073a2:	bf08      	it	eq
 80073a4:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 80073a6:	f004 f9b1 	bl	800b70c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073aa:	f856 eb10 	ldr.w	lr, [r6], #16
 80073ae:	46b4      	mov	ip, r6
 80073b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80073b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80073ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073bc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80073c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80073c4:	4670      	mov	r0, lr
 80073c6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80073ca:	f004 f87f 	bl	800b4cc <USB_CoreInit>
 80073ce:	4604      	mov	r4, r0
 80073d0:	b130      	cbz	r0, 80073e0 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 80073d2:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073d4:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80073d6:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073d8:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 80073dc:	b00b      	add	sp, #44	; 0x2c
 80073de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80073e0:	4601      	mov	r1, r0
 80073e2:	6828      	ldr	r0, [r5, #0]
 80073e4:	f004 f99a 	bl	800b71c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073e8:	6868      	ldr	r0, [r5, #4]
 80073ea:	b358      	cbz	r0, 8007444 <HAL_PCD_Init+0xd0>
 80073ec:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 80073ee:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073f2:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 80073f4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073f8:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 80073fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007404:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007408:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800740c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007410:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007412:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8007416:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007418:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800741c:	d3ea      	bcc.n	80073f4 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 800741e:	2200      	movs	r2, #0
 8007420:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007424:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8007426:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800742a:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800742e:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 8007430:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007434:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007436:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800743a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800743e:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007442:	d3ed      	bcc.n	8007420 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007444:	466c      	mov	r4, sp
 8007446:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800744a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800744c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800744e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007452:	e884 0003 	stmia.w	r4, {r0, r1}
 8007456:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800745a:	6828      	ldr	r0, [r5, #0]
 800745c:	f004 f994 	bl	800b788 <USB_DevInit>
 8007460:	4604      	mov	r4, r0
 8007462:	2800      	cmp	r0, #0
 8007464:	d1b5      	bne.n	80073d2 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 8007466:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8007468:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800746a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800746e:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8007470:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8007474:	d00f      	beq.n	8007496 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007476:	6828      	ldr	r0, [r5, #0]
 8007478:	f004 fe00 	bl	800c07c <USB_DevDisconnect>
}
 800747c:	4620      	mov	r0, r4
 800747e:	b00b      	add	sp, #44	; 0x2c
 8007480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8007482:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8007486:	f005 fe53 	bl	800d130 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800748a:	6828      	ldr	r0, [r5, #0]
 800748c:	e780      	b.n	8007390 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800748e:	2401      	movs	r4, #1
}
 8007490:	4620      	mov	r0, r4
 8007492:	b00b      	add	sp, #44	; 0x2c
 8007494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007496:	4628      	mov	r0, r5
 8007498:	f000 fce0 	bl	8007e5c <HAL_PCDEx_ActivateLPM>
 800749c:	e7eb      	b.n	8007476 <HAL_PCD_Init+0x102>
 800749e:	bf00      	nop

080074a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80074a0:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 80074a2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 80074a6:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074a8:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d017      	beq.n	80074de <HAL_PCD_Start+0x3e>
 80074ae:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80074b2:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 80074b4:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074b8:	d009      	beq.n	80074ce <HAL_PCD_Start+0x2e>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 80074ba:	f004 f91f 	bl	800b6fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80074be:	6820      	ldr	r0, [r4, #0]
 80074c0:	f004 fdcc 	bl	800c05c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074c4:	2300      	movs	r3, #0

  return HAL_OK;
 80074c6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80074c8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 80074cc:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074ce:	69a3      	ldr	r3, [r4, #24]
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d0f2      	beq.n	80074ba <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80074d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074da:	6383      	str	r3, [r0, #56]	; 0x38
 80074dc:	e7ed      	b.n	80074ba <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 80074de:	2002      	movs	r0, #2
}
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	bf00      	nop

080074e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074e8:	6807      	ldr	r7, [r0, #0]
{
 80074ea:	b089      	sub	sp, #36	; 0x24
 80074ec:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074ee:	4638      	mov	r0, r7
 80074f0:	f004 fe02 	bl	800c0f8 <USB_GetMode>
 80074f4:	b110      	cbz	r0, 80074fc <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 80074f6:	b009      	add	sp, #36	; 0x24
 80074f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80074fc:	4683      	mov	fp, r0
 80074fe:	6820      	ldr	r0, [r4, #0]
 8007500:	f004 fdcc 	bl	800c09c <USB_ReadInterrupts>
 8007504:	2800      	cmp	r0, #0
 8007506:	d0f6      	beq.n	80074f6 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007508:	6820      	ldr	r0, [r4, #0]
 800750a:	f004 fdc7 	bl	800c09c <USB_ReadInterrupts>
 800750e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007512:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007514:	d003      	beq.n	800751e <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007516:	6943      	ldr	r3, [r0, #20]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800751e:	f004 fdbd 	bl	800c09c <USB_ReadInterrupts>
 8007522:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007526:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007528:	d012      	beq.n	8007550 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800752a:	6983      	ldr	r3, [r0, #24]
 800752c:	f023 0310 	bic.w	r3, r3, #16
 8007530:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8007532:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007534:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007538:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800753c:	2b02      	cmp	r3, #2
 800753e:	f000 8261 	beq.w	8007a04 <HAL_PCD_IRQHandler+0x520>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007542:	2b06      	cmp	r3, #6
 8007544:	f000 81b1 	beq.w	80078aa <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007548:	6983      	ldr	r3, [r0, #24]
 800754a:	f043 0310 	orr.w	r3, r3, #16
 800754e:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007550:	f004 fda4 	bl	800c09c <USB_ReadInterrupts>
 8007554:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007558:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800755a:	f040 80cf 	bne.w	80076fc <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800755e:	f004 fd9d 	bl	800c09c <USB_ReadInterrupts>
 8007562:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007566:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007568:	d175      	bne.n	8007656 <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800756a:	f004 fd97 	bl	800c09c <USB_ReadInterrupts>
 800756e:	2800      	cmp	r0, #0
 8007570:	db5d      	blt.n	800762e <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007572:	6820      	ldr	r0, [r4, #0]
 8007574:	f004 fd92 	bl	800c09c <USB_ReadInterrupts>
 8007578:	0500      	lsls	r0, r0, #20
 800757a:	d44d      	bmi.n	8007618 <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800757c:	6820      	ldr	r0, [r4, #0]
 800757e:	f004 fd8d 	bl	800c09c <USB_ReadInterrupts>
 8007582:	0102      	lsls	r2, r0, #4
 8007584:	d514      	bpl.n	80075b0 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007586:	6822      	ldr	r2, [r4, #0]
 8007588:	6953      	ldr	r3, [r2, #20]
 800758a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800758e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8007590:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007594:	2b00      	cmp	r3, #0
 8007596:	f040 8172 	bne.w	800787e <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800759a:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800759c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800759e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80075a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80075a4:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80075a8:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80075ac:	f000 fc6e 	bl	8007e8c <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	f004 fd73 	bl	800c09c <USB_ReadInterrupts>
 80075b6:	04c3      	lsls	r3, r0, #19
 80075b8:	f100 8116 	bmi.w	80077e8 <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	f004 fd6d 	bl	800c09c <USB_ReadInterrupts>
 80075c2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 80075c6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80075c8:	f040 80f7 	bne.w	80077ba <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80075cc:	f004 fd66 	bl	800c09c <USB_ReadInterrupts>
 80075d0:	0707      	lsls	r7, r0, #28
 80075d2:	f100 80e9 	bmi.w	80077a8 <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	f004 fd60 	bl	800c09c <USB_ReadInterrupts>
 80075dc:	02c6      	lsls	r6, r0, #11
 80075de:	f100 80d9 	bmi.w	8007794 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80075e2:	6820      	ldr	r0, [r4, #0]
 80075e4:	f004 fd5a 	bl	800c09c <USB_ReadInterrupts>
 80075e8:	0285      	lsls	r5, r0, #10
 80075ea:	f100 80c9 	bmi.w	8007780 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80075ee:	6820      	ldr	r0, [r4, #0]
 80075f0:	f004 fd54 	bl	800c09c <USB_ReadInterrupts>
 80075f4:	0040      	lsls	r0, r0, #1
 80075f6:	f100 80ba 	bmi.w	800776e <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	f004 fd4e 	bl	800c09c <USB_ReadInterrupts>
 8007600:	0741      	lsls	r1, r0, #29
 8007602:	f57f af78 	bpl.w	80074f6 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800760a:	076a      	lsls	r2, r5, #29
 800760c:	f100 821b 	bmi.w	8007a46 <HAL_PCD_IRQHandler+0x562>
      hpcd->Instance->GOTGINT |= temp;
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	432a      	orrs	r2, r5
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	e76e      	b.n	80074f6 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007618:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800761c:	07d9      	lsls	r1, r3, #31
 800761e:	f100 820e 	bmi.w	8007a3e <HAL_PCD_IRQHandler+0x55a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007622:	6820      	ldr	r0, [r4, #0]
 8007624:	6943      	ldr	r3, [r0, #20]
 8007626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762a:	6143      	str	r3, [r0, #20]
 800762c:	e7a7      	b.n	800757e <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800762e:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800763a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800763e:	2b01      	cmp	r3, #1
 8007640:	f000 812c 	beq.w	800789c <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 8007644:	4620      	mov	r0, r4
 8007646:	f005 fe1d 	bl	800d284 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800764a:	6820      	ldr	r0, [r4, #0]
 800764c:	6943      	ldr	r3, [r0, #20]
 800764e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007652:	6143      	str	r3, [r0, #20]
 8007654:	e78e      	b.n	8007574 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007656:	f004 fd2d 	bl	800c0b4 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800765a:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800765c:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800765e:	f1b8 0f00 	cmp.w	r8, #0
 8007662:	d082      	beq.n	800756a <HAL_PCD_IRQHandler+0x86>
      epnum = 0U;
 8007664:	f04f 0a00 	mov.w	sl, #0
 8007668:	f507 6910 	add.w	r9, r7, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800766c:	9703      	str	r7, [sp, #12]
 800766e:	4626      	mov	r6, r4
 8007670:	4657      	mov	r7, sl
 8007672:	f8cd b010 	str.w	fp, [sp, #16]
 8007676:	e009      	b.n	800768c <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 8007678:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800767c:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 8007680:	f106 061c 	add.w	r6, r6, #28
 8007684:	f109 0920 	add.w	r9, r9, #32
 8007688:	f000 8124 	beq.w	80078d4 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800768c:	f018 0f01 	tst.w	r8, #1
 8007690:	d0f2      	beq.n	8007678 <HAL_PCD_IRQHandler+0x194>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007692:	fa5f fa87 	uxtb.w	sl, r7
 8007696:	4651      	mov	r1, sl
 8007698:	f004 fd1e 	bl	800c0d8 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800769c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800769e:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80076a0:	d515      	bpl.n	80076ce <HAL_PCD_IRQHandler+0x1ea>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076a2:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076a4:	f007 030f 	and.w	r3, r7, #15
 80076a8:	2201      	movs	r2, #1
 80076aa:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076ac:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 80076b0:	ea23 0302 	bic.w	r3, r3, r2
 80076b4:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80076b8:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 80076ba:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80076bc:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 80076c0:	4299      	cmp	r1, r3
 80076c2:	f000 81c5 	beq.w	8007a50 <HAL_PCD_IRQHandler+0x56c>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80076c6:	4651      	mov	r1, sl
 80076c8:	4620      	mov	r0, r4
 80076ca:	f005 fd9f 	bl	800d20c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80076ce:	0728      	lsls	r0, r5, #28
 80076d0:	d502      	bpl.n	80076d8 <HAL_PCD_IRQHandler+0x1f4>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80076d2:	2308      	movs	r3, #8
 80076d4:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80076d8:	06e9      	lsls	r1, r5, #27
 80076da:	d502      	bpl.n	80076e2 <HAL_PCD_IRQHandler+0x1fe>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80076dc:	2310      	movs	r3, #16
 80076de:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80076e2:	066a      	lsls	r2, r5, #25
 80076e4:	d502      	bpl.n	80076ec <HAL_PCD_IRQHandler+0x208>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80076e6:	2340      	movs	r3, #64	; 0x40
 80076e8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80076ec:	07ab      	lsls	r3, r5, #30
 80076ee:	f100 8181 	bmi.w	80079f4 <HAL_PCD_IRQHandler+0x510>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80076f2:	062d      	lsls	r5, r5, #24
 80076f4:	f100 812a 	bmi.w	800794c <HAL_PCD_IRQHandler+0x468>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	e7bd      	b.n	8007678 <HAL_PCD_IRQHandler+0x194>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80076fc:	f004 fcd2 	bl	800c0a4 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8007700:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007702:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8007704:	2d00      	cmp	r5, #0
 8007706:	f43f af2a 	beq.w	800755e <HAL_PCD_IRQHandler+0x7a>
 800770a:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800770e:	46a2      	mov	sl, r4
      epnum = 0U;
 8007710:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007714:	9703      	str	r7, [sp, #12]
 8007716:	e008      	b.n	800772a <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 8007718:	086d      	lsrs	r5, r5, #1
        epnum++;
 800771a:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800771e:	f106 0620 	add.w	r6, r6, #32
 8007722:	f10a 0a1c 	add.w	sl, sl, #28
 8007726:	f000 80d3 	beq.w	80078d0 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800772a:	07ef      	lsls	r7, r5, #31
 800772c:	d5f4      	bpl.n	8007718 <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800772e:	fa5f f788 	uxtb.w	r7, r8
 8007732:	4639      	mov	r1, r7
 8007734:	f004 fcc6 	bl	800c0c4 <USB_ReadDevOutEPInterrupt>
 8007738:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800773a:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800773c:	f019 0f01 	tst.w	r9, #1
 8007740:	f040 80e5 	bne.w	800790e <HAL_PCD_IRQHandler+0x42a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007744:	f019 0f08 	tst.w	r9, #8
 8007748:	f040 80c7 	bne.w	80078da <HAL_PCD_IRQHandler+0x3f6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800774c:	f019 0f10 	tst.w	r9, #16
 8007750:	d001      	beq.n	8007756 <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007752:	2310      	movs	r3, #16
 8007754:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007756:	f019 0f20 	tst.w	r9, #32
 800775a:	d001      	beq.n	8007760 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800775c:	2320      	movs	r3, #32
 800775e:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007760:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8007764:	d0d8      	beq.n	8007718 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800776a:	60b3      	str	r3, [r6, #8]
 800776c:	e7d4      	b.n	8007718 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800776e:	4620      	mov	r0, r4
 8007770:	f005 fd94 	bl	800d29c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	6943      	ldr	r3, [r0, #20]
 8007778:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800777c:	6143      	str	r3, [r0, #20]
 800777e:	e73d      	b.n	80075fc <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007780:	4620      	mov	r0, r4
 8007782:	2100      	movs	r1, #0
 8007784:	f005 fd82 	bl	800d28c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007788:	6820      	ldr	r0, [r4, #0]
 800778a:	6943      	ldr	r3, [r0, #20]
 800778c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007790:	6143      	str	r3, [r0, #20]
 8007792:	e72d      	b.n	80075f0 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007794:	4620      	mov	r0, r4
 8007796:	2100      	movs	r1, #0
 8007798:	f005 fd7c 	bl	800d294 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800779c:	6820      	ldr	r0, [r4, #0]
 800779e:	6943      	ldr	r3, [r0, #20]
 80077a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077a4:	6143      	str	r3, [r0, #20]
 80077a6:	e71d      	b.n	80075e4 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 80077a8:	4620      	mov	r0, r4
 80077aa:	f005 fd39 	bl	800d220 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80077ae:	6820      	ldr	r0, [r4, #0]
 80077b0:	6943      	ldr	r3, [r0, #20]
 80077b2:	f003 0308 	and.w	r3, r3, #8
 80077b6:	6143      	str	r3, [r0, #20]
 80077b8:	e70e      	b.n	80075d8 <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 80077ba:	f004 fca1 	bl	800c100 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80077be:	6820      	ldr	r0, [r4, #0]
 80077c0:	f004 f91a 	bl	800b9f8 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077c4:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80077c6:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077c8:	f001 f900 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 80077cc:	7b22      	ldrb	r2, [r4, #12]
 80077ce:	4601      	mov	r1, r0
 80077d0:	4628      	mov	r0, r5
 80077d2:	f003 ff19 	bl	800b608 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80077d6:	4620      	mov	r0, r4
 80077d8:	f005 fd26 	bl	800d228 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	6943      	ldr	r3, [r0, #20]
 80077e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077e4:	6143      	str	r3, [r0, #20]
 80077e6:	e6f1      	b.n	80075cc <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077e8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80077ec:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80077f0:	2110      	movs	r1, #16
 80077f2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077f4:	f023 0301 	bic.w	r3, r3, #1
 80077f8:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80077fa:	f004 f8d5 	bl	800b9a8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077fe:	6860      	ldr	r0, [r4, #4]
 8007800:	b1e0      	cbz	r0, 800783c <HAL_PCD_IRQHandler+0x358>
 8007802:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007806:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800780a:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800780c:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007810:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007812:	3320      	adds	r3, #32
 8007814:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007816:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800781a:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800781e:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007822:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8007826:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800782a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800782e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8007832:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007836:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800783a:	d1e6      	bne.n	800780a <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800783c:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800783e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007840:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007844:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007846:	b9f2      	cbnz	r2, 8007886 <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007848:	696a      	ldr	r2, [r5, #20]
 800784a:	f242 032b 	movw	r3, #8235	; 0x202b
 800784e:	4313      	orrs	r3, r2
 8007850:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007852:	692b      	ldr	r3, [r5, #16]
 8007854:	f043 030b 	orr.w	r3, r3, #11
 8007858:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800785a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800785e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007862:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007864:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007868:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800786a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800786e:	f004 fc5d 	bl	800c12c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007872:	6820      	ldr	r0, [r4, #0]
 8007874:	6943      	ldr	r3, [r0, #20]
 8007876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800787a:	6143      	str	r3, [r0, #20]
 800787c:	e69f      	b.n	80075be <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800787e:	4620      	mov	r0, r4
 8007880:	f005 fce8 	bl	800d254 <HAL_PCD_SuspendCallback>
 8007884:	e694      	b.n	80075b0 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007886:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800788a:	f043 030b 	orr.w	r3, r3, #11
 800788e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007892:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007894:	f043 030b 	orr.w	r3, r3, #11
 8007898:	646b      	str	r3, [r5, #68]	; 0x44
 800789a:	e7de      	b.n	800785a <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800789c:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800789e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 80078a0:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80078a4:	f000 faf2 	bl	8007e8c <HAL_PCDEx_LPM_Callback>
 80078a8:	e6cf      	b.n	800764a <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078aa:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80078ae:	2208      	movs	r2, #8
 80078b0:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80078b4:	4638      	mov	r0, r7
 80078b6:	f004 fb39 	bl	800bf2c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078ba:	f3c5 130a 	ubfx	r3, r5, #4, #11
 80078be:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078c2:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078c4:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 80078c8:	440b      	add	r3, r1
 80078ca:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80078ce:	e63b      	b.n	8007548 <HAL_PCD_IRQHandler+0x64>
 80078d0:	9f03      	ldr	r7, [sp, #12]
 80078d2:	e644      	b.n	800755e <HAL_PCD_IRQHandler+0x7a>
 80078d4:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 80078d8:	e647      	b.n	800756a <HAL_PCD_IRQHandler+0x86>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80078da:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078dc:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80078e0:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078e6:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078e8:	4890      	ldr	r0, [pc, #576]	; (8007b2c <HAL_PCD_IRQHandler+0x648>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078ea:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078ec:	4282      	cmp	r2, r0
 80078ee:	f240 80c0 	bls.w	8007a72 <HAL_PCD_IRQHandler+0x58e>
 80078f2:	040a      	lsls	r2, r1, #16
 80078f4:	d502      	bpl.n	80078fc <HAL_PCD_IRQHandler+0x418>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80078fa:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80078fc:	4620      	mov	r0, r4
 80078fe:	f005 fc75 	bl	800d1ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007902:	6921      	ldr	r1, [r4, #16]
 8007904:	2901      	cmp	r1, #1
 8007906:	f000 80df 	beq.w	8007ac8 <HAL_PCD_IRQHandler+0x5e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800790a:	6820      	ldr	r0, [r4, #0]
 800790c:	e71e      	b.n	800774c <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800790e:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 8007910:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007912:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007914:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8007918:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800791a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800791e:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 8007922:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8007924:	f000 80aa 	beq.w	8007a7c <HAL_PCD_IRQHandler+0x598>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007928:	4981      	ldr	r1, [pc, #516]	; (8007b30 <HAL_PCD_IRQHandler+0x64c>)
 800792a:	458c      	cmp	ip, r1
 800792c:	f000 80bf 	beq.w	8007aae <HAL_PCD_IRQHandler+0x5ca>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007930:	f1b8 0f00 	cmp.w	r8, #0
 8007934:	d104      	bne.n	8007940 <HAL_PCD_IRQHandler+0x45c>
 8007936:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800793a:	2a00      	cmp	r2, #0
 800793c:	f000 80ef 	beq.w	8007b1e <HAL_PCD_IRQHandler+0x63a>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007940:	4620      	mov	r0, r4
 8007942:	4639      	mov	r1, r7
 8007944:	f005 fc58 	bl	800d1f8 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007948:	6820      	ldr	r0, [r4, #0]
 800794a:	e6fb      	b.n	8007744 <HAL_PCD_IRQHandler+0x260>
  if (ep->xfer_count > ep->xfer_len)
 800794c:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007950:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8007954:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007956:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8007958:	f63f ae8e 	bhi.w	8007678 <HAL_PCD_IRQHandler+0x194>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800795c:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8007960:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007962:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007966:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 800796a:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800796c:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800796e:	428a      	cmp	r2, r1
 8007970:	bf28      	it	cs
 8007972:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007974:	9905      	ldr	r1, [sp, #20]
 8007976:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8007978:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800797a:	b289      	uxth	r1, r1
 800797c:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 8007980:	f0c0 8091 	bcc.w	8007aa6 <HAL_PCD_IRQHandler+0x5c2>
 8007984:	464a      	mov	r2, r9
 8007986:	9706      	str	r7, [sp, #24]
 8007988:	46c1      	mov	r9, r8
 800798a:	4627      	mov	r7, r4
 800798c:	46d0      	mov	r8, sl
 800798e:	9c05      	ldr	r4, [sp, #20]
 8007990:	4692      	mov	sl, r2
 8007992:	e018      	b.n	80079c6 <HAL_PCD_IRQHandler+0x4e2>
 8007994:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007996:	4642      	mov	r2, r8
 8007998:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800799a:	4658      	mov	r0, fp
 800799c:	429d      	cmp	r5, r3
 800799e:	bf28      	it	cs
 80079a0:	461d      	movcs	r5, r3
 80079a2:	7c3b      	ldrb	r3, [r7, #16]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	b2ab      	uxth	r3, r5
 80079a8:	f004 faaa 	bl	800bf00 <USB_WritePacket>
    ep->xfer_buff  += len;
 80079ac:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079ae:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 80079b0:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079b2:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 80079b4:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80079b6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80079b8:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 80079ba:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079bc:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 80079c0:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079c2:	d368      	bcc.n	8007a96 <HAL_PCD_IRQHandler+0x5b2>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079c4:	6d35      	ldr	r5, [r6, #80]	; 0x50
 80079c6:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 80079c8:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079cc:	d3e2      	bcc.n	8007994 <HAL_PCD_IRQHandler+0x4b0>
 80079ce:	463c      	mov	r4, r7
 80079d0:	46c8      	mov	r8, r9
 80079d2:	9f06      	ldr	r7, [sp, #24]
 80079d4:	46d1      	mov	r9, sl
 80079d6:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079da:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079dc:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80079de:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079e0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079e4:	f007 030f 	and.w	r3, r7, #15
 80079e8:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079ea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80079ec:	ea23 0302 	bic.w	r3, r3, r2
 80079f0:	634b      	str	r3, [r1, #52]	; 0x34
 80079f2:	e641      	b.n	8007678 <HAL_PCD_IRQHandler+0x194>
            (void)USB_FlushTxFifo(USBx, epnum);
 80079f4:	4639      	mov	r1, r7
 80079f6:	9803      	ldr	r0, [sp, #12]
 80079f8:	f003 ffd6 	bl	800b9a8 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80079fc:	2302      	movs	r3, #2
 80079fe:	f8c9 3008 	str.w	r3, [r9, #8]
 8007a02:	e676      	b.n	80076f2 <HAL_PCD_IRQHandler+0x20e>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007a04:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007a08:	421d      	tst	r5, r3
 8007a0a:	f43f ad9d 	beq.w	8007548 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a0e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8007a12:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8007a16:	4638      	mov	r0, r7
 8007a18:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007a1c:	4615      	mov	r5, r2
 8007a1e:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8007a22:	f004 fa83 	bl	800bf2c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a26:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a2a:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a2c:	442b      	add	r3, r5
 8007a2e:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a32:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8007a36:	442b      	add	r3, r5
 8007a38:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 8007a3c:	e584      	b.n	8007548 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f005 fc08 	bl	800d254 <HAL_PCD_SuspendCallback>
 8007a44:	e5ed      	b.n	8007622 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 8007a46:	4620      	mov	r0, r4
 8007a48:	f005 fc2c 	bl	800d2a4 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	e5df      	b.n	8007610 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007a50:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8007a54:	4413      	add	r3, r2
 8007a56:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	f47f ae34 	bne.w	80076c6 <HAL_PCD_IRQHandler+0x1e2>
 8007a5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f47f ae30 	bne.w	80076c6 <HAL_PCD_IRQHandler+0x1e2>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a66:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007a6a:	6820      	ldr	r0, [r4, #0]
 8007a6c:	f004 fb5e 	bl	800c12c <USB_EP0_OutStart>
 8007a70:	e629      	b.n	80076c6 <HAL_PCD_IRQHandler+0x1e2>
  HAL_PCD_SetupStageCallback(hpcd);
 8007a72:	4620      	mov	r0, r4
 8007a74:	f005 fbba 	bl	800d1ec <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007a78:	6820      	ldr	r0, [r4, #0]
 8007a7a:	e667      	b.n	800774c <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007a7c:	0719      	lsls	r1, r3, #28
 8007a7e:	d51e      	bpl.n	8007abe <HAL_PCD_IRQHandler+0x5da>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a80:	492a      	ldr	r1, [pc, #168]	; (8007b2c <HAL_PCD_IRQHandler+0x648>)
 8007a82:	458c      	cmp	ip, r1
 8007a84:	f67f ae5e 	bls.w	8007744 <HAL_PCD_IRQHandler+0x260>
 8007a88:	041f      	lsls	r7, r3, #16
 8007a8a:	f57f ae5b 	bpl.w	8007744 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a92:	6093      	str	r3, [r2, #8]
 8007a94:	e656      	b.n	8007744 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007a96:	463c      	mov	r4, r7
 8007a98:	46c8      	mov	r8, r9
 8007a9a:	9f06      	ldr	r7, [sp, #24]
 8007a9c:	46d1      	mov	r9, sl
 8007a9e:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8007aa2:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007aa4:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 8007aa6:	42ab      	cmp	r3, r5
 8007aa8:	f4ff ade6 	bcc.w	8007678 <HAL_PCD_IRQHandler+0x194>
 8007aac:	e795      	b.n	80079da <HAL_PCD_IRQHandler+0x4f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007aae:	0419      	lsls	r1, r3, #16
 8007ab0:	d4ed      	bmi.n	8007a8e <HAL_PCD_IRQHandler+0x5aa>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ab2:	0699      	lsls	r1, r3, #26
 8007ab4:	f57f af44 	bpl.w	8007940 <HAL_PCD_IRQHandler+0x45c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ab8:	2120      	movs	r1, #32
 8007aba:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007abc:	e740      	b.n	8007940 <HAL_PCD_IRQHandler+0x45c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007abe:	0699      	lsls	r1, r3, #26
 8007ac0:	d508      	bpl.n	8007ad4 <HAL_PCD_IRQHandler+0x5f0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ac2:	2320      	movs	r3, #32
 8007ac4:	6093      	str	r3, [r2, #8]
 8007ac6:	e63d      	b.n	8007744 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ac8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	f004 fb2d 	bl	800c12c <USB_EP0_OutStart>
 8007ad2:	e71a      	b.n	800790a <HAL_PCD_IRQHandler+0x426>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007ad4:	f013 0f28 	tst.w	r3, #40	; 0x28
 8007ad8:	f47f ae34 	bne.w	8007744 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007adc:	4913      	ldr	r1, [pc, #76]	; (8007b2c <HAL_PCD_IRQHandler+0x648>)
 8007ade:	458c      	cmp	ip, r1
 8007ae0:	d901      	bls.n	8007ae6 <HAL_PCD_IRQHandler+0x602>
 8007ae2:	041b      	lsls	r3, r3, #16
 8007ae4:	d4d3      	bmi.n	8007a8e <HAL_PCD_IRQHandler+0x5aa>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ae6:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8007ae8:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007aec:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007af0:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 8007af2:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007af6:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 8007afa:	440a      	add	r2, r1
 8007afc:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b00:	f1b8 0f00 	cmp.w	r8, #0
 8007b04:	f47f af1c 	bne.w	8007940 <HAL_PCD_IRQHandler+0x45c>
 8007b08:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8007b0c:	2a00      	cmp	r2, #0
 8007b0e:	f47f af17 	bne.w	8007940 <HAL_PCD_IRQHandler+0x45c>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b12:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007b16:	2101      	movs	r1, #1
 8007b18:	f004 fb08 	bl	800c12c <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b1c:	e710      	b.n	8007940 <HAL_PCD_IRQHandler+0x45c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007b1e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007b22:	4641      	mov	r1, r8
 8007b24:	f004 fb02 	bl	800c12c <USB_EP0_OutStart>
 8007b28:	e70a      	b.n	8007940 <HAL_PCD_IRQHandler+0x45c>
 8007b2a:	bf00      	nop
 8007b2c:	4f54300a 	.word	0x4f54300a
 8007b30:	4f54310a 	.word	0x4f54310a

08007b34 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007b34:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8007b38:	2a01      	cmp	r2, #1
 8007b3a:	d00e      	beq.n	8007b5a <HAL_PCD_SetAddress+0x26>
 8007b3c:	2201      	movs	r2, #1
{
 8007b3e:	b510      	push	{r4, lr}
 8007b40:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b42:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8007b44:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8007b48:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b4c:	f004 fa74 	bl	800c038 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b50:	2300      	movs	r3, #0
  return HAL_OK;
 8007b52:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8007b54:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8007b58:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007b5a:	2002      	movs	r0, #2
}
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop

08007b60 <HAL_PCD_EP_Open>:
{
 8007b60:	b510      	push	{r4, lr}
 8007b62:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8007b66:	0609      	lsls	r1, r1, #24
{
 8007b68:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007b6a:	d427      	bmi.n	8007bbc <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b6c:	f04f 0c1c 	mov.w	ip, #28
 8007b70:	fb0c 0c0e 	mla	ip, ip, lr, r0
 8007b74:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 8007b78:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8007b7c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007b80:	2000      	movs	r0, #0
 8007b82:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8007b86:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8007b88:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b8a:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8007b8e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007b90:	b10a      	cbz	r2, 8007b96 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8007b92:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d101      	bne.n	8007b9e <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007b9e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d018      	beq.n	8007bd8 <HAL_PCD_EP_Open+0x78>
 8007ba6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007ba8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007baa:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007bae:	f003 ff2f 	bl	800ba10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007bb2:	2300      	movs	r3, #0
  return ret;
 8007bb4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8007bb6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8007bba:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bbc:	201c      	movs	r0, #28
    ep->is_in = 1U;
 8007bbe:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bc2:	fb00 400e 	mla	r0, r0, lr, r4
 8007bc6:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8007bca:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 8007bce:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007bd2:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 8007bd6:	e7d6      	b.n	8007b86 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8007bd8:	2002      	movs	r0, #2
}
 8007bda:	bd10      	pop	{r4, pc}

08007bdc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007bdc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007be0:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007be4:	f04f 011c 	mov.w	r1, #28
{
 8007be8:	b510      	push	{r4, lr}
 8007bea:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007bec:	d11a      	bne.n	8007c24 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bee:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007bf2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007bf6:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bf8:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007bfc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007c00:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007c04:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007c06:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d019      	beq.n	8007c42 <HAL_PCD_EP_Close+0x66>
 8007c0e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007c10:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007c12:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007c16:	f003 ff43 	bl	800baa0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c1a:	2300      	movs	r3, #0
  return HAL_OK;
 8007c1c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8007c1e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8007c22:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c24:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007c28:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c32:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007c34:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007c38:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007c3a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d1e5      	bne.n	8007c0e <HAL_PCD_EP_Close+0x32>
 8007c42:	2002      	movs	r0, #2
}
 8007c44:	bd10      	pop	{r4, pc}
 8007c46:	bf00      	nop

08007c48 <HAL_PCD_EP_Receive>:
{
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c4e:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007c50:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c54:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8007c58:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c5c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8007c60:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 8007c64:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8007c66:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c6a:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8007c6e:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8007c72:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8007c76:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c78:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007c7a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8007c7c:	bf08      	it	eq
 8007c7e:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c82:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c84:	b91c      	cbnz	r4, 8007c8e <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c86:	f004 f881 	bl	800bd8c <USB_EP0StartXfer>
}
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c8e:	f003 ff65 	bl	800bb5c <USB_EPStartXfer>
}
 8007c92:	2000      	movs	r0, #0
 8007c94:	bd10      	pop	{r4, pc}
 8007c96:	bf00      	nop

08007c98 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007c98:	f001 010f 	and.w	r1, r1, #15
 8007c9c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007ca0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007ca4:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop

08007cac <HAL_PCD_EP_Transmit>:
{
 8007cac:	b510      	push	{r4, lr}
 8007cae:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cb2:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007cb4:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cb8:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8007cbc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cc0:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8007cc2:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8007cc6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8007cc8:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8007ccc:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8007cd0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cd2:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 8007cd6:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8007cda:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cdc:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007cde:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8007ce0:	bf08      	it	eq
 8007ce2:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ce6:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ce8:	b91c      	cbnz	r4, 8007cf2 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cea:	f004 f84f 	bl	800bd8c <USB_EP0StartXfer>
}
 8007cee:	2000      	movs	r0, #0
 8007cf0:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cf2:	f003 ff33 	bl	800bb5c <USB_EPStartXfer>
}
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	bd10      	pop	{r4, pc}
 8007cfa:	bf00      	nop

08007cfc <HAL_PCD_EP_SetStall>:
{
 8007cfc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007cfe:	6843      	ldr	r3, [r0, #4]
 8007d00:	f001 050f 	and.w	r5, r1, #15
 8007d04:	429d      	cmp	r5, r3
 8007d06:	d834      	bhi.n	8007d72 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 8007d08:	060b      	lsls	r3, r1, #24
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	d41d      	bmi.n	8007d4a <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 8007d0e:	221c      	movs	r2, #28
    ep->is_in = 0U;
 8007d10:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8007d14:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8007d18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007d1c:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8007d1e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007d22:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007d26:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d28:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007d2a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007d2c:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d01c      	beq.n	8007d6e <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d34:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007d36:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d3a:	f004 f91d 	bl	800bf78 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d3e:	b1d5      	cbz	r5, 8007d76 <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 8007d40:	2300      	movs	r3, #0
  return HAL_OK;
 8007d42:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8007d44:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8007d48:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d4a:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8007d4c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007d50:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d52:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8007d56:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d5a:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8007d60:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d62:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007d64:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007d66:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d1e2      	bne.n	8007d34 <HAL_PCD_EP_SetStall+0x38>
 8007d6e:	2002      	movs	r0, #2
}
 8007d70:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007d72:	2001      	movs	r0, #1
}
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007d76:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007d7a:	7c21      	ldrb	r1, [r4, #16]
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	f004 f9d5 	bl	800c12c <USB_EP0_OutStart>
 8007d82:	e7dd      	b.n	8007d40 <HAL_PCD_EP_SetStall+0x44>

08007d84 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d84:	6842      	ldr	r2, [r0, #4]
{
 8007d86:	b538      	push	{r3, r4, r5, lr}
 8007d88:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d832      	bhi.n	8007df6 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8007d90:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007d94:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d96:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 8007d9a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8007d9e:	d119      	bne.n	8007dd4 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007da0:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007da4:	2000      	movs	r0, #0
 8007da6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8007daa:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dac:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007db0:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007db4:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007db6:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007db8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d018      	beq.n	8007df2 <HAL_PCD_EP_ClrStall+0x6e>
 8007dc0:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007dc2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007dc4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007dc8:	f004 f90a 	bl	800bfe0 <USB_EPClearStall>
  return HAL_OK;
 8007dcc:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8007dce:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dd4:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007dd8:	2001      	movs	r0, #1
 8007dda:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8007dde:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007de0:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007de2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8007de6:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007de8:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007dea:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d1e6      	bne.n	8007dc0 <HAL_PCD_EP_ClrStall+0x3c>
 8007df2:	2002      	movs	r0, #2
}
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007df6:	2001      	movs	r0, #1
}
 8007df8:	bd38      	pop	{r3, r4, r5, pc}
 8007dfa:	bf00      	nop

08007dfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007dfc:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007dfe:	6804      	ldr	r4, [r0, #0]
 8007e00:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8007e02:	b931      	cbnz	r1, 8007e12 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007e04:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007e08:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e10:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8007e14:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e18:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007e1c:	d00b      	beq.n	8007e36 <HAL_PCDEx_SetTxFiFo+0x3a>
 8007e1e:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007e20:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8007e24:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007e26:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8007e2a:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007e2c:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e2e:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007e30:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007e34:	d3f4      	bcc.n	8007e20 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007e36:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8007e3a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007e3e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 8007e42:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007e46:	f8cc 0004 	str.w	r0, [ip, #4]
}
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop

08007e50 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007e50:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 8007e52:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6259      	str	r1, [r3, #36]	; 0x24
}
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop

08007e5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e5c:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8007e5e:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e62:	4909      	ldr	r1, [pc, #36]	; (8007e88 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e64:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 8007e66:	4660      	mov	r0, ip
{
 8007e68:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 8007e6a:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 8007e6c:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 8007e70:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e74:	6993      	ldr	r3, [r2, #24]
}
 8007e76:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e7e:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e80:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007e82:	4319      	orrs	r1, r3
 8007e84:	6551      	str	r1, [r2, #84]	; 0x54
}
 8007e86:	4770      	bx	lr
 8007e88:	10000003 	.word	0x10000003

08007e8c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop

08007e90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e90:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e92:	4c10      	ldr	r4, [pc, #64]	; (8007ed4 <HAL_PWREx_ConfigSupply+0x44>)
 8007e94:	68e3      	ldr	r3, [r4, #12]
 8007e96:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e9a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e9c:	d105      	bne.n	8007eaa <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e9e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ea2:	1a18      	subs	r0, r3, r0
 8007ea4:	bf18      	it	ne
 8007ea6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	4318      	orrs	r0, r3
 8007eb0:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8007eb2:	f7fc fa4b 	bl	800434c <HAL_GetTick>
 8007eb6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007eb8:	e005      	b.n	8007ec6 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007eba:	f7fc fa47 	bl	800434c <HAL_GetTick>
 8007ebe:	1b40      	subs	r0, r0, r5
 8007ec0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007ec4:	d804      	bhi.n	8007ed0 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ec6:	6863      	ldr	r3, [r4, #4]
 8007ec8:	049b      	lsls	r3, r3, #18
 8007eca:	d5f6      	bpl.n	8007eba <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8007ecc:	2000      	movs	r0, #0
}
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007ed0:	2001      	movs	r0, #1
}
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	58024800 	.word	0x58024800

08007ed8 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007ed8:	4a02      	ldr	r2, [pc, #8]	; (8007ee4 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8007eda:	68d3      	ldr	r3, [r2, #12]
 8007edc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ee0:	60d3      	str	r3, [r2, #12]
}
 8007ee2:	4770      	bx	lr
 8007ee4:	58024800 	.word	0x58024800

08007ee8 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ee8:	4b3b      	ldr	r3, [pc, #236]	; (8007fd8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8007eea:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007eee:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ef0:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8007ef2:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007ef6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007ef8:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8007efc:	d038      	beq.n	8007f70 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007efe:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f02:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f06:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007f0a:	fb05 f101 	mul.w	r1, r5, r1
 8007f0e:	2a01      	cmp	r2, #1
 8007f10:	ee07 1a90 	vmov	s15, r1
 8007f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8007f18:	d002      	beq.n	8007f20 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8007f1a:	2a02      	cmp	r2, #2
 8007f1c:	d04e      	beq.n	8007fbc <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8007f1e:	b34a      	cbz	r2, 8007f74 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f20:	ee07 0a90 	vmov	s15, r0
 8007f24:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007fdc <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8007f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8007f32:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8007fe0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	ee06 3a90 	vmov	s13, r3
 8007f3e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8007f42:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007f46:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007f4a:	eee7 6a25 	vfma.f32	s13, s14, s11
 8007f4e:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007f52:	4b21      	ldr	r3, [pc, #132]	; (8007fd8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007f5a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007f5c:	ee07 3a90 	vmov	s15, r3
 8007f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f6c:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007f70:	bc30      	pop	{r4, r5}
 8007f72:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	0692      	lsls	r2, r2, #26
 8007f78:	d527      	bpl.n	8007fca <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f7a:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f7c:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f80:	4a18      	ldr	r2, [pc, #96]	; (8007fe4 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f82:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f88:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f90:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8007fe0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8007f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f98:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f9a:	ee06 3a90 	vmov	s13, r3
 8007f9e:	ee05 2a90 	vmov	s11, r2
 8007fa2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007fa6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007faa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007fae:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8007fb2:	eee7 6a05 	vfma.f32	s13, s14, s10
 8007fb6:	ee66 6a26 	vmul.f32	s13, s12, s13
 8007fba:	e7ca      	b.n	8007f52 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fbc:	ee07 0a90 	vmov	s15, r0
 8007fc0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007fe8 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8007fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fc8:	e7b0      	b.n	8007f2c <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fca:	ee07 0a90 	vmov	s15, r0
 8007fce:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007fec <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8007fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fd6:	e7a9      	b.n	8007f2c <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	4a742400 	.word	0x4a742400
 8007fe0:	39000000 	.word	0x39000000
 8007fe4:	03d09000 	.word	0x03d09000
 8007fe8:	4bbebc20 	.word	0x4bbebc20
 8007fec:	4c742400 	.word	0x4c742400

08007ff0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	f000 81e8 	beq.w	80083c6 <HAL_RCC_OscConfig+0x3d6>
{
 8007ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ff8:	6803      	ldr	r3, [r0, #0]
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	07d9      	lsls	r1, r3, #31
 8007ffe:	d52e      	bpl.n	800805e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008000:	49a4      	ldr	r1, [pc, #656]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 8008002:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008004:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008006:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800800a:	2a10      	cmp	r2, #16
 800800c:	f000 8107 	beq.w	800821e <HAL_RCC_OscConfig+0x22e>
 8008010:	2a18      	cmp	r2, #24
 8008012:	f000 80ff 	beq.w	8008214 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008016:	6863      	ldr	r3, [r4, #4]
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800801c:	f000 812a 	beq.w	8008274 <HAL_RCC_OscConfig+0x284>
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8168 	beq.w	80082f6 <HAL_RCC_OscConfig+0x306>
 8008026:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800802a:	4b9a      	ldr	r3, [pc, #616]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	f000 8269 	beq.w	8008504 <HAL_RCC_OscConfig+0x514>
 8008032:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800803e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008040:	f7fc f984 	bl	800434c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008044:	4e93      	ldr	r6, [pc, #588]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8008046:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008048:	e005      	b.n	8008056 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800804a:	f7fc f97f 	bl	800434c <HAL_GetTick>
 800804e:	1b40      	subs	r0, r0, r5
 8008050:	2864      	cmp	r0, #100	; 0x64
 8008052:	f200 814e 	bhi.w	80082f2 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008056:	6833      	ldr	r3, [r6, #0]
 8008058:	039b      	lsls	r3, r3, #14
 800805a:	d5f6      	bpl.n	800804a <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	079d      	lsls	r5, r3, #30
 8008060:	f100 808a 	bmi.w	8008178 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008064:	06d9      	lsls	r1, r3, #27
 8008066:	d533      	bpl.n	80080d0 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008068:	4a8a      	ldr	r2, [pc, #552]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 800806a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800806c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800806e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008072:	2b08      	cmp	r3, #8
 8008074:	f000 80e3 	beq.w	800823e <HAL_RCC_OscConfig+0x24e>
 8008078:	2b18      	cmp	r3, #24
 800807a:	f000 80db 	beq.w	8008234 <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800807e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8008080:	4d84      	ldr	r5, [pc, #528]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 816f 	beq.w	8008366 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008090:	f7fc f95c 	bl	800434c <HAL_GetTick>
 8008094:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008096:	e005      	b.n	80080a4 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008098:	f7fc f958 	bl	800434c <HAL_GetTick>
 800809c:	1b80      	subs	r0, r0, r6
 800809e:	2802      	cmp	r0, #2
 80080a0:	f200 8127 	bhi.w	80082f2 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	05db      	lsls	r3, r3, #23
 80080a8:	d5f6      	bpl.n	8008098 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080aa:	f7fc f967 	bl	800437c <HAL_GetREVID>
 80080ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80080b2:	4298      	cmp	r0, r3
 80080b4:	f200 8247 	bhi.w	8008546 <HAL_RCC_OscConfig+0x556>
 80080b8:	6a22      	ldr	r2, [r4, #32]
 80080ba:	686b      	ldr	r3, [r5, #4]
 80080bc:	2a20      	cmp	r2, #32
 80080be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80080c2:	bf0c      	ite	eq
 80080c4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80080c8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80080cc:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	071d      	lsls	r5, r3, #28
 80080d2:	d516      	bpl.n	8008102 <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080d4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80080d6:	4d6f      	ldr	r5, [pc, #444]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8122 	beq.w	8008322 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 80080de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80080e0:	f043 0301 	orr.w	r3, r3, #1
 80080e4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80080e6:	f7fc f931 	bl	800434c <HAL_GetTick>
 80080ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080ec:	e005      	b.n	80080fa <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080ee:	f7fc f92d 	bl	800434c <HAL_GetTick>
 80080f2:	1b80      	subs	r0, r0, r6
 80080f4:	2802      	cmp	r0, #2
 80080f6:	f200 80fc 	bhi.w	80082f2 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80080fc:	0798      	lsls	r0, r3, #30
 80080fe:	d5f6      	bpl.n	80080ee <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	069a      	lsls	r2, r3, #26
 8008104:	d516      	bpl.n	8008134 <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008106:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8008108:	4d62      	ldr	r5, [pc, #392]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 811a 	beq.w	8008344 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008116:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008118:	f7fc f918 	bl	800434c <HAL_GetTick>
 800811c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800811e:	e005      	b.n	800812c <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008120:	f7fc f914 	bl	800434c <HAL_GetTick>
 8008124:	1b80      	subs	r0, r0, r6
 8008126:	2802      	cmp	r0, #2
 8008128:	f200 80e3 	bhi.w	80082f2 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	049f      	lsls	r7, r3, #18
 8008130:	d5f6      	bpl.n	8008120 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	0759      	lsls	r1, r3, #29
 8008136:	f100 80a3 	bmi.w	8008280 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800813a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800813c:	b1d0      	cbz	r0, 8008174 <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800813e:	4d55      	ldr	r5, [pc, #340]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 8008140:	692b      	ldr	r3, [r5, #16]
 8008142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008146:	2b18      	cmp	r3, #24
 8008148:	f000 81ae 	beq.w	80084a8 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800814c:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800814e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008154:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008156:	f000 8142 	beq.w	80083de <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800815a:	f7fc f8f7 	bl	800434c <HAL_GetTick>
 800815e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008160:	e005      	b.n	800816e <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008162:	f7fc f8f3 	bl	800434c <HAL_GetTick>
 8008166:	1b00      	subs	r0, r0, r4
 8008168:	2802      	cmp	r0, #2
 800816a:	f200 80c2 	bhi.w	80082f2 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	019b      	lsls	r3, r3, #6
 8008172:	d4f6      	bmi.n	8008162 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8008174:	2000      	movs	r0, #0
}
 8008176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008178:	4a46      	ldr	r2, [pc, #280]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 800817a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800817c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800817e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8008182:	d12d      	bne.n	80081e0 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008184:	4b43      	ldr	r3, [pc, #268]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 8008186:	68e2      	ldr	r2, [r4, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	0759      	lsls	r1, r3, #29
 800818c:	d501      	bpl.n	8008192 <HAL_RCC_OscConfig+0x1a2>
 800818e:	2a00      	cmp	r2, #0
 8008190:	d04e      	beq.n	8008230 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008192:	4d40      	ldr	r5, [pc, #256]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	f023 0319 	bic.w	r3, r3, #25
 800819a:	4313      	orrs	r3, r2
 800819c:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 800819e:	f7fc f8d5 	bl	800434c <HAL_GetTick>
 80081a2:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081a4:	e005      	b.n	80081b2 <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081a6:	f7fc f8d1 	bl	800434c <HAL_GetTick>
 80081aa:	1b80      	subs	r0, r0, r6
 80081ac:	2802      	cmp	r0, #2
 80081ae:	f200 80a0 	bhi.w	80082f2 <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081b2:	682b      	ldr	r3, [r5, #0]
 80081b4:	075b      	lsls	r3, r3, #29
 80081b6:	d5f6      	bpl.n	80081a6 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081b8:	f7fc f8e0 	bl	800437c <HAL_GetREVID>
 80081bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80081c0:	4298      	cmp	r0, r3
 80081c2:	f200 80f7 	bhi.w	80083b4 <HAL_RCC_OscConfig+0x3c4>
 80081c6:	6922      	ldr	r2, [r4, #16]
 80081c8:	686b      	ldr	r3, [r5, #4]
 80081ca:	2a40      	cmp	r2, #64	; 0x40
 80081cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80081d0:	bf0c      	ite	eq
 80081d2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80081d6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80081da:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	e741      	b.n	8008064 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081e0:	2b18      	cmp	r3, #24
 80081e2:	f000 80e3 	beq.w	80083ac <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081e6:	4d2b      	ldr	r5, [pc, #172]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081e8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081ea:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081ec:	2a00      	cmp	r2, #0
 80081ee:	f000 80cc 	beq.w	800838a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081f2:	f023 0319 	bic.w	r3, r3, #25
 80081f6:	4313      	orrs	r3, r2
 80081f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80081fa:	f7fc f8a7 	bl	800434c <HAL_GetTick>
 80081fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008200:	e004      	b.n	800820c <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008202:	f7fc f8a3 	bl	800434c <HAL_GetTick>
 8008206:	1b80      	subs	r0, r0, r6
 8008208:	2802      	cmp	r0, #2
 800820a:	d872      	bhi.n	80082f2 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	075f      	lsls	r7, r3, #29
 8008210:	d5f7      	bpl.n	8008202 <HAL_RCC_OscConfig+0x212>
 8008212:	e7d1      	b.n	80081b8 <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008214:	f001 0103 	and.w	r1, r1, #3
 8008218:	2902      	cmp	r1, #2
 800821a:	f47f aefc 	bne.w	8008016 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800821e:	4a1d      	ldr	r2, [pc, #116]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 8008220:	6812      	ldr	r2, [r2, #0]
 8008222:	0392      	lsls	r2, r2, #14
 8008224:	f57f af1b 	bpl.w	800805e <HAL_RCC_OscConfig+0x6e>
 8008228:	6862      	ldr	r2, [r4, #4]
 800822a:	2a00      	cmp	r2, #0
 800822c:	f47f af17 	bne.w	800805e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8008230:	2001      	movs	r0, #1
}
 8008232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008234:	f002 0203 	and.w	r2, r2, #3
 8008238:	2a01      	cmp	r2, #1
 800823a:	f47f af20 	bne.w	800807e <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800823e:	4b15      	ldr	r3, [pc, #84]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	05da      	lsls	r2, r3, #23
 8008244:	d502      	bpl.n	800824c <HAL_RCC_OscConfig+0x25c>
 8008246:	69e3      	ldr	r3, [r4, #28]
 8008248:	2b80      	cmp	r3, #128	; 0x80
 800824a:	d1f1      	bne.n	8008230 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800824c:	f7fc f896 	bl	800437c <HAL_GetREVID>
 8008250:	f241 0303 	movw	r3, #4099	; 0x1003
 8008254:	4298      	cmp	r0, r3
 8008256:	f200 80b8 	bhi.w	80083ca <HAL_RCC_OscConfig+0x3da>
 800825a:	6a22      	ldr	r2, [r4, #32]
 800825c:	2a20      	cmp	r2, #32
 800825e:	f000 8187 	beq.w	8008570 <HAL_RCC_OscConfig+0x580>
 8008262:	490c      	ldr	r1, [pc, #48]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 8008264:	684b      	ldr	r3, [r1, #4]
 8008266:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800826a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800826e:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	e72d      	b.n	80080d0 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008274:	4a07      	ldr	r2, [pc, #28]	; (8008294 <HAL_RCC_OscConfig+0x2a4>)
 8008276:	6813      	ldr	r3, [r2, #0]
 8008278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800827c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800827e:	e6df      	b.n	8008040 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8008280:	4d05      	ldr	r5, [pc, #20]	; (8008298 <HAL_RCC_OscConfig+0x2a8>)
 8008282:	682b      	ldr	r3, [r5, #0]
 8008284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008288:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800828a:	f7fc f85f 	bl	800434c <HAL_GetTick>
 800828e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008290:	e009      	b.n	80082a6 <HAL_RCC_OscConfig+0x2b6>
 8008292:	bf00      	nop
 8008294:	58024400 	.word	0x58024400
 8008298:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800829c:	f7fc f856 	bl	800434c <HAL_GetTick>
 80082a0:	1b80      	subs	r0, r0, r6
 80082a2:	2864      	cmp	r0, #100	; 0x64
 80082a4:	d825      	bhi.n	80082f2 <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	05da      	lsls	r2, r3, #23
 80082aa:	d5f7      	bpl.n	800829c <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082ac:	68a3      	ldr	r3, [r4, #8]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	f000 8158 	beq.w	8008564 <HAL_RCC_OscConfig+0x574>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 812d 	beq.w	8008514 <HAL_RCC_OscConfig+0x524>
 80082ba:	2b05      	cmp	r3, #5
 80082bc:	4ba6      	ldr	r3, [pc, #664]	; (8008558 <HAL_RCC_OscConfig+0x568>)
 80082be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082c0:	f000 815f 	beq.w	8008582 <HAL_RCC_OscConfig+0x592>
 80082c4:	f022 0201 	bic.w	r2, r2, #1
 80082c8:	671a      	str	r2, [r3, #112]	; 0x70
 80082ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082cc:	f022 0204 	bic.w	r2, r2, #4
 80082d0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80082d2:	f7fc f83b 	bl	800434c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082d6:	4ea0      	ldr	r6, [pc, #640]	; (8008558 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082d8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80082dc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082de:	e004      	b.n	80082ea <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082e0:	f7fc f834 	bl	800434c <HAL_GetTick>
 80082e4:	1b40      	subs	r0, r0, r5
 80082e6:	42b8      	cmp	r0, r7
 80082e8:	d803      	bhi.n	80082f2 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ea:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80082ec:	079b      	lsls	r3, r3, #30
 80082ee:	d5f7      	bpl.n	80082e0 <HAL_RCC_OscConfig+0x2f0>
 80082f0:	e723      	b.n	800813a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 80082f2:	2003      	movs	r0, #3
}
 80082f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082f6:	4d98      	ldr	r5, [pc, #608]	; (8008558 <HAL_RCC_OscConfig+0x568>)
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008306:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008308:	f7fc f820 	bl	800434c <HAL_GetTick>
 800830c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800830e:	e004      	b.n	800831a <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008310:	f7fc f81c 	bl	800434c <HAL_GetTick>
 8008314:	1b80      	subs	r0, r0, r6
 8008316:	2864      	cmp	r0, #100	; 0x64
 8008318:	d8eb      	bhi.n	80082f2 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800831a:	682b      	ldr	r3, [r5, #0]
 800831c:	039f      	lsls	r7, r3, #14
 800831e:	d4f7      	bmi.n	8008310 <HAL_RCC_OscConfig+0x320>
 8008320:	e69c      	b.n	800805c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8008322:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008324:	f023 0301 	bic.w	r3, r3, #1
 8008328:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800832a:	f7fc f80f 	bl	800434c <HAL_GetTick>
 800832e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008330:	e004      	b.n	800833c <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008332:	f7fc f80b 	bl	800434c <HAL_GetTick>
 8008336:	1b80      	subs	r0, r0, r6
 8008338:	2802      	cmp	r0, #2
 800833a:	d8da      	bhi.n	80082f2 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800833c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800833e:	0799      	lsls	r1, r3, #30
 8008340:	d4f7      	bmi.n	8008332 <HAL_RCC_OscConfig+0x342>
 8008342:	e6dd      	b.n	8008100 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800834a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800834c:	f7fb fffe 	bl	800434c <HAL_GetTick>
 8008350:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008352:	e004      	b.n	800835e <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008354:	f7fb fffa 	bl	800434c <HAL_GetTick>
 8008358:	1b80      	subs	r0, r0, r6
 800835a:	2802      	cmp	r0, #2
 800835c:	d8c9      	bhi.n	80082f2 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800835e:	682b      	ldr	r3, [r5, #0]
 8008360:	0498      	lsls	r0, r3, #18
 8008362:	d4f7      	bmi.n	8008354 <HAL_RCC_OscConfig+0x364>
 8008364:	e6e5      	b.n	8008132 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8008366:	682b      	ldr	r3, [r5, #0]
 8008368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800836c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800836e:	f7fb ffed 	bl	800434c <HAL_GetTick>
 8008372:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008374:	e004      	b.n	8008380 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008376:	f7fb ffe9 	bl	800434c <HAL_GetTick>
 800837a:	1b80      	subs	r0, r0, r6
 800837c:	2802      	cmp	r0, #2
 800837e:	d8b8      	bhi.n	80082f2 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	05df      	lsls	r7, r3, #23
 8008384:	d4f7      	bmi.n	8008376 <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	e6a2      	b.n	80080d0 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800838a:	f023 0301 	bic.w	r3, r3, #1
 800838e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008390:	f7fb ffdc 	bl	800434c <HAL_GetTick>
 8008394:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008396:	e004      	b.n	80083a2 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008398:	f7fb ffd8 	bl	800434c <HAL_GetTick>
 800839c:	1b80      	subs	r0, r0, r6
 800839e:	2802      	cmp	r0, #2
 80083a0:	d8a7      	bhi.n	80082f2 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083a2:	682b      	ldr	r3, [r5, #0]
 80083a4:	0758      	lsls	r0, r3, #29
 80083a6:	d4f7      	bmi.n	8008398 <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	e65b      	b.n	8008064 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80083ac:	0790      	lsls	r0, r2, #30
 80083ae:	f47f af1a 	bne.w	80081e6 <HAL_RCC_OscConfig+0x1f6>
 80083b2:	e6e7      	b.n	8008184 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083b4:	686b      	ldr	r3, [r5, #4]
 80083b6:	6922      	ldr	r2, [r4, #16]
 80083b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80083bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80083c0:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	e64e      	b.n	8008064 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 80083c6:	2001      	movs	r0, #1
}
 80083c8:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083ca:	4a63      	ldr	r2, [pc, #396]	; (8008558 <HAL_RCC_OscConfig+0x568>)
 80083cc:	6a21      	ldr	r1, [r4, #32]
 80083ce:	68d3      	ldr	r3, [r2, #12]
 80083d0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80083d4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80083d8:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	e678      	b.n	80080d0 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 80083de:	f7fb ffb5 	bl	800434c <HAL_GetTick>
 80083e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083e4:	e004      	b.n	80083f0 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083e6:	f7fb ffb1 	bl	800434c <HAL_GetTick>
 80083ea:	1b80      	subs	r0, r0, r6
 80083ec:	2802      	cmp	r0, #2
 80083ee:	d880      	bhi.n	80082f2 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	0199      	lsls	r1, r3, #6
 80083f4:	d4f7      	bmi.n	80083e6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083f6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80083f8:	4b58      	ldr	r3, [pc, #352]	; (800855c <HAL_RCC_OscConfig+0x56c>)
 80083fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80083fc:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083fe:	4958      	ldr	r1, [pc, #352]	; (8008560 <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008400:	4e55      	ldr	r6, [pc, #340]	; (8008558 <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008402:	4313      	orrs	r3, r2
 8008404:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008406:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800840a:	62ab      	str	r3, [r5, #40]	; 0x28
 800840c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8008410:	3b01      	subs	r3, #1
 8008412:	3a01      	subs	r2, #1
 8008414:	025b      	lsls	r3, r3, #9
 8008416:	0412      	lsls	r2, r2, #16
 8008418:	b29b      	uxth	r3, r3
 800841a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800841e:	4313      	orrs	r3, r2
 8008420:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008422:	3a01      	subs	r2, #1
 8008424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008428:	4313      	orrs	r3, r2
 800842a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800842c:	3a01      	subs	r2, #1
 800842e:	0612      	lsls	r2, r2, #24
 8008430:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008434:	4313      	orrs	r3, r2
 8008436:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008438:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800843a:	f023 0301 	bic.w	r3, r3, #1
 800843e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008440:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008442:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008444:	4011      	ands	r1, r2
 8008446:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800844a:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800844c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800844e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008450:	f023 030c 	bic.w	r3, r3, #12
 8008454:	4313      	orrs	r3, r2
 8008456:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008458:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800845a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800845c:	f023 0302 	bic.w	r3, r3, #2
 8008460:	4313      	orrs	r3, r2
 8008462:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008464:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800846a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800846c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800846e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008472:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008474:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800847a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800847c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800848a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800848c:	f7fb ff5e 	bl	800434c <HAL_GetTick>
 8008490:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008492:	e005      	b.n	80084a0 <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008494:	f7fb ff5a 	bl	800434c <HAL_GetTick>
 8008498:	1b00      	subs	r0, r0, r4
 800849a:	2802      	cmp	r0, #2
 800849c:	f63f af29 	bhi.w	80082f2 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084a0:	6833      	ldr	r3, [r6, #0]
 80084a2:	019a      	lsls	r2, r3, #6
 80084a4:	d5f6      	bpl.n	8008494 <HAL_RCC_OscConfig+0x4a4>
 80084a6:	e665      	b.n	8008174 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084a8:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084aa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084ac:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084ae:	f43f ae62 	beq.w	8008176 <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084b2:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80084b8:	428b      	cmp	r3, r1
 80084ba:	f47f aeb9 	bne.w	8008230 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084be:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084c4:	429a      	cmp	r2, r3
 80084c6:	f47f aeb3 	bne.w	8008230 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80084cc:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80084d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084d2:	429a      	cmp	r2, r3
 80084d4:	f47f aeac 	bne.w	8008230 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084da:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80084de:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084e0:	429a      	cmp	r2, r3
 80084e2:	f47f aea5 	bne.w	8008230 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80084e8:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80084ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084ee:	429a      	cmp	r2, r3
 80084f0:	f47f ae9e 	bne.w	8008230 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80084f6:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80084fa:	3801      	subs	r0, #1
  return HAL_OK;
 80084fc:	1a28      	subs	r0, r5, r0
 80084fe:	bf18      	it	ne
 8008500:	2001      	movne	r0, #1
}
 8008502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008504:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	e595      	b.n	8008040 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008514:	4d10      	ldr	r5, [pc, #64]	; (8008558 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008516:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800851a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	672b      	str	r3, [r5, #112]	; 0x70
 8008522:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008524:	f023 0304 	bic.w	r3, r3, #4
 8008528:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800852a:	f7fb ff0f 	bl	800434c <HAL_GetTick>
 800852e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008530:	e005      	b.n	800853e <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008532:	f7fb ff0b 	bl	800434c <HAL_GetTick>
 8008536:	1b80      	subs	r0, r0, r6
 8008538:	42b8      	cmp	r0, r7
 800853a:	f63f aeda 	bhi.w	80082f2 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800853e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008540:	0798      	lsls	r0, r3, #30
 8008542:	d4f6      	bmi.n	8008532 <HAL_RCC_OscConfig+0x542>
 8008544:	e5f9      	b.n	800813a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008546:	68eb      	ldr	r3, [r5, #12]
 8008548:	6a22      	ldr	r2, [r4, #32]
 800854a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800854e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008552:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	e5bb      	b.n	80080d0 <HAL_RCC_OscConfig+0xe0>
 8008558:	58024400 	.word	0x58024400
 800855c:	fffffc0c 	.word	0xfffffc0c
 8008560:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008564:	4a0b      	ldr	r2, [pc, #44]	; (8008594 <HAL_RCC_OscConfig+0x5a4>)
 8008566:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008568:	f043 0301 	orr.w	r3, r3, #1
 800856c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800856e:	e6b0      	b.n	80082d2 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008570:	4a08      	ldr	r2, [pc, #32]	; (8008594 <HAL_RCC_OscConfig+0x5a4>)
 8008572:	6853      	ldr	r3, [r2, #4]
 8008574:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800857c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	e5a6      	b.n	80080d0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008582:	f042 0204 	orr.w	r2, r2, #4
 8008586:	671a      	str	r2, [r3, #112]	; 0x70
 8008588:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800858a:	f042 0201 	orr.w	r2, r2, #1
 800858e:	671a      	str	r2, [r3, #112]	; 0x70
 8008590:	e69f      	b.n	80082d2 <HAL_RCC_OscConfig+0x2e2>
 8008592:	bf00      	nop
 8008594:	58024400 	.word	0x58024400

08008598 <HAL_RCC_MCOConfig>:
{
 8008598:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800859a:	4e25      	ldr	r6, [pc, #148]	; (8008630 <HAL_RCC_MCOConfig+0x98>)
{
 800859c:	b088      	sub	sp, #32
 800859e:	460d      	mov	r5, r1
 80085a0:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 80085a2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if(RCC_MCOx == RCC_MCO1)
 80085a6:	b9f8      	cbnz	r0, 80085e8 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 80085a8:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 80085ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80085b0:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 80085b2:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80085b6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80085ba:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 80085bc:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80085c0:	481c      	ldr	r0, [pc, #112]	; (8008634 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 80085c6:	2302      	movs	r3, #2
 80085c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085cc:	2200      	movs	r2, #0
 80085ce:	2303      	movs	r3, #3
 80085d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80085d4:	f7fe fd0a 	bl	8006fec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80085d8:	6932      	ldr	r2, [r6, #16]
 80085da:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 80085de:	432a      	orrs	r2, r5
 80085e0:	4322      	orrs	r2, r4
 80085e2:	6132      	str	r2, [r6, #16]
}
 80085e4:	b008      	add	sp, #32
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80085e8:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 80085ec:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80085f0:	4811      	ldr	r0, [pc, #68]	; (8008638 <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 80085f2:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80085f6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008600:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 8008602:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008604:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800860a:	2200      	movs	r2, #0
 800860c:	2303      	movs	r3, #3
 800860e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008612:	2300      	movs	r3, #0
 8008614:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008616:	f7fe fce9 	bl	8006fec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800861a:	6933      	ldr	r3, [r6, #16]
 800861c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008620:	ea43 0105 	orr.w	r1, r3, r5
 8008624:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8008628:	6131      	str	r1, [r6, #16]
}
 800862a:	b008      	add	sp, #32
 800862c:	bd70      	pop	{r4, r5, r6, pc}
 800862e:	bf00      	nop
 8008630:	58024400 	.word	0x58024400
 8008634:	58020000 	.word	0x58020000
 8008638:	58020800 	.word	0x58020800

0800863c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800863c:	4a47      	ldr	r2, [pc, #284]	; (800875c <HAL_RCC_GetSysClockFreq+0x120>)
 800863e:	6913      	ldr	r3, [r2, #16]
 8008640:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008644:	2b10      	cmp	r3, #16
 8008646:	d004      	beq.n	8008652 <HAL_RCC_GetSysClockFreq+0x16>
 8008648:	2b18      	cmp	r3, #24
 800864a:	d00d      	beq.n	8008668 <HAL_RCC_GetSysClockFreq+0x2c>
 800864c:	b11b      	cbz	r3, 8008656 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800864e:	4844      	ldr	r0, [pc, #272]	; (8008760 <HAL_RCC_GetSysClockFreq+0x124>)
 8008650:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008652:	4844      	ldr	r0, [pc, #272]	; (8008764 <HAL_RCC_GetSysClockFreq+0x128>)
 8008654:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008656:	6813      	ldr	r3, [r2, #0]
 8008658:	0699      	lsls	r1, r3, #26
 800865a:	d54a      	bpl.n	80086f2 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800865c:	6813      	ldr	r3, [r2, #0]
 800865e:	4842      	ldr	r0, [pc, #264]	; (8008768 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008660:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008664:	40d8      	lsrs	r0, r3
 8008666:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008668:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800866a:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800866c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800866e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8008670:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008674:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008676:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800867a:	d038      	beq.n	80086ee <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800867c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008680:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008684:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008688:	fb05 f101 	mul.w	r1, r5, r1
 800868c:	2b01      	cmp	r3, #1
 800868e:	ee07 1a90 	vmov	s15, r1
 8008692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8008696:	d002      	beq.n	800869e <HAL_RCC_GetSysClockFreq+0x62>
 8008698:	2b02      	cmp	r3, #2
 800869a:	d02c      	beq.n	80086f6 <HAL_RCC_GetSysClockFreq+0xba>
 800869c:	b393      	cbz	r3, 8008704 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800869e:	ee07 0a90 	vmov	s15, r0
 80086a2:	eddf 6a32 	vldr	s13, [pc, #200]	; 800876c <HAL_RCC_GetSysClockFreq+0x130>
 80086a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80086ac:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80086b0:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8008770 <HAL_RCC_GetSysClockFreq+0x134>
 80086b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b8:	ee06 3a90 	vmov	s13, r3
 80086bc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80086c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80086c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80086c8:	eee7 6a25 	vfma.f32	s13, s14, s11
 80086cc:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80086d0:	4b22      	ldr	r3, [pc, #136]	; (800875c <HAL_RCC_GetSysClockFreq+0x120>)
 80086d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80086d8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ea:	ee17 0a90 	vmov	r0, s15
}
 80086ee:	bc30      	pop	{r4, r5}
 80086f0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80086f2:	481d      	ldr	r0, [pc, #116]	; (8008768 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 80086f4:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086f6:	ee07 0a90 	vmov	s15, r0
 80086fa:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008774 <HAL_RCC_GetSysClockFreq+0x138>
 80086fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008702:	e7d2      	b.n	80086aa <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008704:	6813      	ldr	r3, [r2, #0]
 8008706:	069b      	lsls	r3, r3, #26
 8008708:	d520      	bpl.n	800874c <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800870a:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800870c:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008710:	4915      	ldr	r1, [pc, #84]	; (8008768 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008712:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008716:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008718:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800871c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008720:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8008770 <HAL_RCC_GetSysClockFreq+0x134>
 8008724:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008728:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800872a:	ee06 3a90 	vmov	s13, r3
 800872e:	ee05 1a90 	vmov	s11, r1
 8008732:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008736:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800873a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800873e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008742:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008746:	ee66 6a26 	vmul.f32	s13, s12, s13
 800874a:	e7c1      	b.n	80086d0 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800874c:	ee07 0a90 	vmov	s15, r0
 8008750:	eddf 6a09 	vldr	s13, [pc, #36]	; 8008778 <HAL_RCC_GetSysClockFreq+0x13c>
 8008754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008758:	e7a7      	b.n	80086aa <HAL_RCC_GetSysClockFreq+0x6e>
 800875a:	bf00      	nop
 800875c:	58024400 	.word	0x58024400
 8008760:	003d0900 	.word	0x003d0900
 8008764:	017d7840 	.word	0x017d7840
 8008768:	03d09000 	.word	0x03d09000
 800876c:	4a742400 	.word	0x4a742400
 8008770:	39000000 	.word	0x39000000
 8008774:	4bbebc20 	.word	0x4bbebc20
 8008778:	4c742400 	.word	0x4c742400

0800877c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800877c:	2800      	cmp	r0, #0
 800877e:	f000 810c 	beq.w	800899a <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008782:	4a8c      	ldr	r2, [pc, #560]	; (80089b4 <HAL_RCC_ClockConfig+0x238>)
 8008784:	6813      	ldr	r3, [r2, #0]
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	428b      	cmp	r3, r1
{
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008794:	d20c      	bcs.n	80087b0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	f023 030f 	bic.w	r3, r3, #15
 800879c:	430b      	orrs	r3, r1
 800879e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087a0:	6813      	ldr	r3, [r2, #0]
 80087a2:	f003 030f 	and.w	r3, r3, #15
 80087a6:	428b      	cmp	r3, r1
 80087a8:	d002      	beq.n	80087b0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80087aa:	2001      	movs	r0, #1
}
 80087ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	075f      	lsls	r7, r3, #29
 80087b4:	d50b      	bpl.n	80087ce <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087b6:	4980      	ldr	r1, [pc, #512]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 80087b8:	6920      	ldr	r0, [r4, #16]
 80087ba:	698a      	ldr	r2, [r1, #24]
 80087bc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80087c0:	4290      	cmp	r0, r2
 80087c2:	d904      	bls.n	80087ce <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087c4:	698a      	ldr	r2, [r1, #24]
 80087c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087ca:	4302      	orrs	r2, r0
 80087cc:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ce:	071e      	lsls	r6, r3, #28
 80087d0:	d50b      	bpl.n	80087ea <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087d2:	4979      	ldr	r1, [pc, #484]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 80087d4:	6960      	ldr	r0, [r4, #20]
 80087d6:	69ca      	ldr	r2, [r1, #28]
 80087d8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80087dc:	4290      	cmp	r0, r2
 80087de:	d904      	bls.n	80087ea <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087e0:	69ca      	ldr	r2, [r1, #28]
 80087e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087e6:	4302      	orrs	r2, r0
 80087e8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ea:	06d8      	lsls	r0, r3, #27
 80087ec:	d50b      	bpl.n	8008806 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087ee:	4972      	ldr	r1, [pc, #456]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 80087f0:	69a0      	ldr	r0, [r4, #24]
 80087f2:	69ca      	ldr	r2, [r1, #28]
 80087f4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80087f8:	4290      	cmp	r0, r2
 80087fa:	d904      	bls.n	8008806 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087fc:	69ca      	ldr	r2, [r1, #28]
 80087fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008802:	4302      	orrs	r2, r0
 8008804:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008806:	0699      	lsls	r1, r3, #26
 8008808:	d50b      	bpl.n	8008822 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800880a:	496b      	ldr	r1, [pc, #428]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 800880c:	69e0      	ldr	r0, [r4, #28]
 800880e:	6a0a      	ldr	r2, [r1, #32]
 8008810:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008814:	4290      	cmp	r0, r2
 8008816:	d904      	bls.n	8008822 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008818:	6a0a      	ldr	r2, [r1, #32]
 800881a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800881e:	4302      	orrs	r2, r0
 8008820:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008822:	079a      	lsls	r2, r3, #30
 8008824:	f140 80ab 	bpl.w	800897e <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008828:	4863      	ldr	r0, [pc, #396]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 800882a:	68e1      	ldr	r1, [r4, #12]
 800882c:	6982      	ldr	r2, [r0, #24]
 800882e:	f002 020f 	and.w	r2, r2, #15
 8008832:	4291      	cmp	r1, r2
 8008834:	d904      	bls.n	8008840 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008836:	6982      	ldr	r2, [r0, #24]
 8008838:	f022 020f 	bic.w	r2, r2, #15
 800883c:	430a      	orrs	r2, r1
 800883e:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008840:	07d8      	lsls	r0, r3, #31
 8008842:	d530      	bpl.n	80088a6 <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008844:	4a5c      	ldr	r2, [pc, #368]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 8008846:	68a1      	ldr	r1, [r4, #8]
 8008848:	6993      	ldr	r3, [r2, #24]
 800884a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800884e:	430b      	orrs	r3, r1
 8008850:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008852:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008854:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008856:	2902      	cmp	r1, #2
 8008858:	f000 80a1 	beq.w	800899e <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800885c:	2903      	cmp	r1, #3
 800885e:	f000 8098 	beq.w	8008992 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008862:	2901      	cmp	r1, #1
 8008864:	f000 80a1 	beq.w	80089aa <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008868:	0758      	lsls	r0, r3, #29
 800886a:	d59e      	bpl.n	80087aa <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800886c:	4e52      	ldr	r6, [pc, #328]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800886e:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008872:	6933      	ldr	r3, [r6, #16]
 8008874:	f023 0307 	bic.w	r3, r3, #7
 8008878:	430b      	orrs	r3, r1
 800887a:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800887c:	f7fb fd66 	bl	800434c <HAL_GetTick>
 8008880:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008882:	e005      	b.n	8008890 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008884:	f7fb fd62 	bl	800434c <HAL_GetTick>
 8008888:	1bc0      	subs	r0, r0, r7
 800888a:	4540      	cmp	r0, r8
 800888c:	f200 808b 	bhi.w	80089a6 <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008890:	6933      	ldr	r3, [r6, #16]
 8008892:	6862      	ldr	r2, [r4, #4]
 8008894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008898:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800889c:	d1f2      	bne.n	8008884 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	0799      	lsls	r1, r3, #30
 80088a2:	d506      	bpl.n	80088b2 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088a4:	68e1      	ldr	r1, [r4, #12]
 80088a6:	4844      	ldr	r0, [pc, #272]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 80088a8:	6982      	ldr	r2, [r0, #24]
 80088aa:	f002 020f 	and.w	r2, r2, #15
 80088ae:	428a      	cmp	r2, r1
 80088b0:	d869      	bhi.n	8008986 <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088b2:	4940      	ldr	r1, [pc, #256]	; (80089b4 <HAL_RCC_ClockConfig+0x238>)
 80088b4:	680a      	ldr	r2, [r1, #0]
 80088b6:	f002 020f 	and.w	r2, r2, #15
 80088ba:	42aa      	cmp	r2, r5
 80088bc:	d90a      	bls.n	80088d4 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088be:	680a      	ldr	r2, [r1, #0]
 80088c0:	f022 020f 	bic.w	r2, r2, #15
 80088c4:	432a      	orrs	r2, r5
 80088c6:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c8:	680a      	ldr	r2, [r1, #0]
 80088ca:	f002 020f 	and.w	r2, r2, #15
 80088ce:	42aa      	cmp	r2, r5
 80088d0:	f47f af6b 	bne.w	80087aa <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088d4:	075a      	lsls	r2, r3, #29
 80088d6:	d50b      	bpl.n	80088f0 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088d8:	4937      	ldr	r1, [pc, #220]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 80088da:	6920      	ldr	r0, [r4, #16]
 80088dc:	698a      	ldr	r2, [r1, #24]
 80088de:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80088e2:	4290      	cmp	r0, r2
 80088e4:	d204      	bcs.n	80088f0 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088e6:	698a      	ldr	r2, [r1, #24]
 80088e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80088ec:	4302      	orrs	r2, r0
 80088ee:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088f0:	071f      	lsls	r7, r3, #28
 80088f2:	d50b      	bpl.n	800890c <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088f4:	4930      	ldr	r1, [pc, #192]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 80088f6:	6960      	ldr	r0, [r4, #20]
 80088f8:	69ca      	ldr	r2, [r1, #28]
 80088fa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80088fe:	4290      	cmp	r0, r2
 8008900:	d204      	bcs.n	800890c <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008902:	69ca      	ldr	r2, [r1, #28]
 8008904:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008908:	4302      	orrs	r2, r0
 800890a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800890c:	06de      	lsls	r6, r3, #27
 800890e:	d50b      	bpl.n	8008928 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008910:	4929      	ldr	r1, [pc, #164]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 8008912:	69a0      	ldr	r0, [r4, #24]
 8008914:	69ca      	ldr	r2, [r1, #28]
 8008916:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800891a:	4290      	cmp	r0, r2
 800891c:	d204      	bcs.n	8008928 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800891e:	69ca      	ldr	r2, [r1, #28]
 8008920:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008924:	4302      	orrs	r2, r0
 8008926:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008928:	069d      	lsls	r5, r3, #26
 800892a:	d50b      	bpl.n	8008944 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800892c:	4a22      	ldr	r2, [pc, #136]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 800892e:	69e1      	ldr	r1, [r4, #28]
 8008930:	6a13      	ldr	r3, [r2, #32]
 8008932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008936:	4299      	cmp	r1, r3
 8008938:	d204      	bcs.n	8008944 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800893a:	6a13      	ldr	r3, [r2, #32]
 800893c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008940:	430b      	orrs	r3, r1
 8008942:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008944:	f7ff fe7a 	bl	800863c <HAL_RCC_GetSysClockFreq>
 8008948:	4a1b      	ldr	r2, [pc, #108]	; (80089b8 <HAL_RCC_ClockConfig+0x23c>)
 800894a:	4603      	mov	r3, r0
 800894c:	481b      	ldr	r0, [pc, #108]	; (80089bc <HAL_RCC_ClockConfig+0x240>)
 800894e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008950:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008952:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8008956:	4d1a      	ldr	r5, [pc, #104]	; (80089c0 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008958:	f002 020f 	and.w	r2, r2, #15
 800895c:	4c19      	ldr	r4, [pc, #100]	; (80089c4 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800895e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008960:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008962:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8008966:	4818      	ldr	r0, [pc, #96]	; (80089c8 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008968:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800896c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 800896e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8008970:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008972:	40d3      	lsrs	r3, r2
 8008974:	6023      	str	r3, [r4, #0]
}
 8008976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800897a:	f7fb bc85 	b.w	8004288 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800897e:	07da      	lsls	r2, r3, #31
 8008980:	f53f af60 	bmi.w	8008844 <HAL_RCC_ClockConfig+0xc8>
 8008984:	e795      	b.n	80088b2 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008986:	6982      	ldr	r2, [r0, #24]
 8008988:	f022 020f 	bic.w	r2, r2, #15
 800898c:	4311      	orrs	r1, r2
 800898e:	6181      	str	r1, [r0, #24]
 8008990:	e78f      	b.n	80088b2 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008992:	019f      	lsls	r7, r3, #6
 8008994:	f53f af6a 	bmi.w	800886c <HAL_RCC_ClockConfig+0xf0>
 8008998:	e707      	b.n	80087aa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800899a:	2001      	movs	r0, #1
}
 800899c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800899e:	039b      	lsls	r3, r3, #14
 80089a0:	f53f af64 	bmi.w	800886c <HAL_RCC_ClockConfig+0xf0>
 80089a4:	e701      	b.n	80087aa <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80089a6:	2003      	movs	r0, #3
 80089a8:	e700      	b.n	80087ac <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089aa:	05de      	lsls	r6, r3, #23
 80089ac:	f53f af5e 	bmi.w	800886c <HAL_RCC_ClockConfig+0xf0>
 80089b0:	e6fb      	b.n	80087aa <HAL_RCC_ClockConfig+0x2e>
 80089b2:	bf00      	nop
 80089b4:	52002000 	.word	0x52002000
 80089b8:	58024400 	.word	0x58024400
 80089bc:	080187bc 	.word	0x080187bc
 80089c0:	240001ec 	.word	0x240001ec
 80089c4:	240001f0 	.word	0x240001f0
 80089c8:	240001f8 	.word	0x240001f8

080089cc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089cc:	4a18      	ldr	r2, [pc, #96]	; (8008a30 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089ce:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089d0:	6913      	ldr	r3, [r2, #16]
 80089d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089d6:	2b10      	cmp	r3, #16
 80089d8:	d01a      	beq.n	8008a10 <HAL_RCC_GetHCLKFreq+0x44>
 80089da:	2b18      	cmp	r3, #24
 80089dc:	d023      	beq.n	8008a26 <HAL_RCC_GetHCLKFreq+0x5a>
 80089de:	b1cb      	cbz	r3, 8008a14 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 80089e0:	4814      	ldr	r0, [pc, #80]	; (8008a34 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089e2:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <HAL_RCC_GetHCLKFreq+0x64>)
 80089e4:	4914      	ldr	r1, [pc, #80]	; (8008a38 <HAL_RCC_GetHCLKFreq+0x6c>)
 80089e6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089e8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089ea:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089ee:	4c13      	ldr	r4, [pc, #76]	; (8008a3c <HAL_RCC_GetHCLKFreq+0x70>)
 80089f0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089f4:	4d12      	ldr	r5, [pc, #72]	; (8008a40 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089f6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089f8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089fa:	f002 021f 	and.w	r2, r2, #31
 80089fe:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a02:	f003 001f 	and.w	r0, r3, #31
 8008a06:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8008a0a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a0c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a10:	480c      	ldr	r0, [pc, #48]	; (8008a44 <HAL_RCC_GetHCLKFreq+0x78>)
 8008a12:	e7e6      	b.n	80089e2 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a14:	6813      	ldr	r3, [r2, #0]
 8008a16:	069b      	lsls	r3, r3, #26
 8008a18:	d508      	bpl.n	8008a2c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a1a:	6812      	ldr	r2, [r2, #0]
 8008a1c:	480a      	ldr	r0, [pc, #40]	; (8008a48 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008a1e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008a22:	40d0      	lsrs	r0, r2
 8008a24:	e7dd      	b.n	80089e2 <HAL_RCC_GetHCLKFreq+0x16>
 8008a26:	f7ff fa5f 	bl	8007ee8 <HAL_RCC_GetSysClockFreq.part.0>
 8008a2a:	e7da      	b.n	80089e2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a2c:	4806      	ldr	r0, [pc, #24]	; (8008a48 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008a2e:	e7d8      	b.n	80089e2 <HAL_RCC_GetHCLKFreq+0x16>
 8008a30:	58024400 	.word	0x58024400
 8008a34:	003d0900 	.word	0x003d0900
 8008a38:	080187bc 	.word	0x080187bc
 8008a3c:	240001f0 	.word	0x240001f0
 8008a40:	240001ec 	.word	0x240001ec
 8008a44:	017d7840 	.word	0x017d7840
 8008a48:	03d09000 	.word	0x03d09000

08008a4c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a4c:	4a1c      	ldr	r2, [pc, #112]	; (8008ac0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a4e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a50:	6913      	ldr	r3, [r2, #16]
 8008a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a56:	2b10      	cmp	r3, #16
 8008a58:	d021      	beq.n	8008a9e <HAL_RCC_GetPCLK1Freq+0x52>
 8008a5a:	2b18      	cmp	r3, #24
 8008a5c:	d02b      	beq.n	8008ab6 <HAL_RCC_GetPCLK1Freq+0x6a>
 8008a5e:	b303      	cbz	r3, 8008aa2 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8008a60:	4818      	ldr	r0, [pc, #96]	; (8008ac4 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a62:	4a17      	ldr	r2, [pc, #92]	; (8008ac0 <HAL_RCC_GetPCLK1Freq+0x74>)
 8008a64:	4918      	ldr	r1, [pc, #96]	; (8008ac8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8008a66:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8008a68:	4d18      	ldr	r5, [pc, #96]	; (8008acc <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a6a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a6e:	4c18      	ldr	r4, [pc, #96]	; (8008ad0 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a70:	5ccb      	ldrb	r3, [r1, r3]
 8008a72:	f003 031f 	and.w	r3, r3, #31
 8008a76:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a7a:	6990      	ldr	r0, [r2, #24]
 8008a7c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8008a80:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a82:	5c08      	ldrb	r0, [r1, r0]
 8008a84:	f000 001f 	and.w	r0, r0, #31
 8008a88:	40c3      	lsrs	r3, r0
 8008a8a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a8c:	69d2      	ldr	r2, [r2, #28]
 8008a8e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8008a92:	5c88      	ldrb	r0, [r1, r2]
 8008a94:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a98:	fa23 f000 	lsr.w	r0, r3, r0
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a9e:	480d      	ldr	r0, [pc, #52]	; (8008ad4 <HAL_RCC_GetPCLK1Freq+0x88>)
 8008aa0:	e7df      	b.n	8008a62 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aa2:	6813      	ldr	r3, [r2, #0]
 8008aa4:	069b      	lsls	r3, r3, #26
 8008aa6:	d509      	bpl.n	8008abc <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008aa8:	6810      	ldr	r0, [r2, #0]
 8008aaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ad8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008aac:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8008ab0:	fa23 f000 	lsr.w	r0, r3, r0
 8008ab4:	e7d5      	b.n	8008a62 <HAL_RCC_GetPCLK1Freq+0x16>
 8008ab6:	f7ff fa17 	bl	8007ee8 <HAL_RCC_GetSysClockFreq.part.0>
 8008aba:	e7d2      	b.n	8008a62 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008abc:	4806      	ldr	r0, [pc, #24]	; (8008ad8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008abe:	e7d0      	b.n	8008a62 <HAL_RCC_GetPCLK1Freq+0x16>
 8008ac0:	58024400 	.word	0x58024400
 8008ac4:	003d0900 	.word	0x003d0900
 8008ac8:	080187bc 	.word	0x080187bc
 8008acc:	240001ec 	.word	0x240001ec
 8008ad0:	240001f0 	.word	0x240001f0
 8008ad4:	017d7840 	.word	0x017d7840
 8008ad8:	03d09000 	.word	0x03d09000

08008adc <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008adc:	4a1c      	ldr	r2, [pc, #112]	; (8008b50 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ade:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ae0:	6913      	ldr	r3, [r2, #16]
 8008ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ae6:	2b10      	cmp	r3, #16
 8008ae8:	d021      	beq.n	8008b2e <HAL_RCC_GetPCLK2Freq+0x52>
 8008aea:	2b18      	cmp	r3, #24
 8008aec:	d02b      	beq.n	8008b46 <HAL_RCC_GetPCLK2Freq+0x6a>
 8008aee:	b303      	cbz	r3, 8008b32 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8008af0:	4818      	ldr	r0, [pc, #96]	; (8008b54 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008af2:	4a17      	ldr	r2, [pc, #92]	; (8008b50 <HAL_RCC_GetPCLK2Freq+0x74>)
 8008af4:	4918      	ldr	r1, [pc, #96]	; (8008b58 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8008af6:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8008af8:	4d18      	ldr	r5, [pc, #96]	; (8008b5c <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008afa:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008afe:	4c18      	ldr	r4, [pc, #96]	; (8008b60 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b00:	5ccb      	ldrb	r3, [r1, r3]
 8008b02:	f003 031f 	and.w	r3, r3, #31
 8008b06:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b0a:	6990      	ldr	r0, [r2, #24]
 8008b0c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8008b10:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b12:	5c08      	ldrb	r0, [r1, r0]
 8008b14:	f000 001f 	and.w	r0, r0, #31
 8008b18:	40c3      	lsrs	r3, r0
 8008b1a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b1c:	69d2      	ldr	r2, [r2, #28]
 8008b1e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8008b22:	5c88      	ldrb	r0, [r1, r2]
 8008b24:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b28:	fa23 f000 	lsr.w	r0, r3, r0
 8008b2c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b2e:	480d      	ldr	r0, [pc, #52]	; (8008b64 <HAL_RCC_GetPCLK2Freq+0x88>)
 8008b30:	e7df      	b.n	8008af2 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b32:	6813      	ldr	r3, [r2, #0]
 8008b34:	069b      	lsls	r3, r3, #26
 8008b36:	d509      	bpl.n	8008b4c <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b38:	6810      	ldr	r0, [r2, #0]
 8008b3a:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008b3c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8008b40:	fa23 f000 	lsr.w	r0, r3, r0
 8008b44:	e7d5      	b.n	8008af2 <HAL_RCC_GetPCLK2Freq+0x16>
 8008b46:	f7ff f9cf 	bl	8007ee8 <HAL_RCC_GetSysClockFreq.part.0>
 8008b4a:	e7d2      	b.n	8008af2 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b4c:	4806      	ldr	r0, [pc, #24]	; (8008b68 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008b4e:	e7d0      	b.n	8008af2 <HAL_RCC_GetPCLK2Freq+0x16>
 8008b50:	58024400 	.word	0x58024400
 8008b54:	003d0900 	.word	0x003d0900
 8008b58:	080187bc 	.word	0x080187bc
 8008b5c:	240001ec 	.word	0x240001ec
 8008b60:	240001f0 	.word	0x240001f0
 8008b64:	017d7840 	.word	0x017d7840
 8008b68:	03d09000 	.word	0x03d09000

08008b6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b6e:	4c3a      	ldr	r4, [pc, #232]	; (8008c58 <RCCEx_PLL2_Config+0xec>)
 8008b70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b72:	f003 0303 	and.w	r3, r3, #3
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d067      	beq.n	8008c4a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	460f      	mov	r7, r1
 8008b80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b84:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b86:	f7fb fbe1 	bl	800434c <HAL_GetTick>
 8008b8a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b8c:	e004      	b.n	8008b98 <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b8e:	f7fb fbdd 	bl	800434c <HAL_GetTick>
 8008b92:	1b43      	subs	r3, r0, r5
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d856      	bhi.n	8008c46 <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	011a      	lsls	r2, r3, #4
 8008b9c:	d4f7      	bmi.n	8008b8e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ba0:	6832      	ldr	r2, [r6, #0]
 8008ba2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008ba6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008baa:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bac:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	3a01      	subs	r2, #1
 8008bb4:	025b      	lsls	r3, r3, #9
 8008bb6:	0412      	lsls	r2, r2, #16
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	6872      	ldr	r2, [r6, #4]
 8008bc2:	3a01      	subs	r2, #1
 8008bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	6932      	ldr	r2, [r6, #16]
 8008bcc:	3a01      	subs	r2, #1
 8008bce:	0612      	lsls	r2, r2, #24
 8008bd0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bda:	6972      	ldr	r2, [r6, #20]
 8008bdc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008be0:	4313      	orrs	r3, r2
 8008be2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008be4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008be6:	69b3      	ldr	r3, [r6, #24]
 8008be8:	f022 0220 	bic.w	r2, r2, #32
 8008bec:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008bee:	4b1b      	ldr	r3, [pc, #108]	; (8008c5c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008bf0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008bf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008bf4:	f022 0210 	bic.w	r2, r2, #16
 8008bf8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008bfa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008bfc:	69f2      	ldr	r2, [r6, #28]
 8008bfe:	400b      	ands	r3, r1
 8008c00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008c04:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c08:	f043 0310 	orr.w	r3, r3, #16
 8008c0c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008c10:	b1ef      	cbz	r7, 8008c4e <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c12:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c14:	bf0c      	ite	eq
 8008c16:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c1a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c20:	4c0d      	ldr	r4, [pc, #52]	; (8008c58 <RCCEx_PLL2_Config+0xec>)
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c28:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c2a:	f7fb fb8f 	bl	800434c <HAL_GetTick>
 8008c2e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c30:	e004      	b.n	8008c3c <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c32:	f7fb fb8b 	bl	800434c <HAL_GetTick>
 8008c36:	1b40      	subs	r0, r0, r5
 8008c38:	2802      	cmp	r0, #2
 8008c3a:	d804      	bhi.n	8008c46 <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	d5f7      	bpl.n	8008c32 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8008c42:	2000      	movs	r0, #0
}
 8008c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008c46:	2003      	movs	r0, #3
}
 8008c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008c4a:	2001      	movs	r0, #1
}
 8008c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c54:	e7e4      	b.n	8008c20 <RCCEx_PLL2_Config+0xb4>
 8008c56:	bf00      	nop
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	ffff0007 	.word	0xffff0007

08008c60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c62:	4c3a      	ldr	r4, [pc, #232]	; (8008d4c <RCCEx_PLL3_Config+0xec>)
 8008c64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d067      	beq.n	8008d3e <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	4606      	mov	r6, r0
 8008c72:	460f      	mov	r7, r1
 8008c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c78:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c7a:	f7fb fb67 	bl	800434c <HAL_GetTick>
 8008c7e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c80:	e004      	b.n	8008c8c <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c82:	f7fb fb63 	bl	800434c <HAL_GetTick>
 8008c86:	1b43      	subs	r3, r0, r5
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d856      	bhi.n	8008d3a <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	009a      	lsls	r2, r3, #2
 8008c90:	d4f7      	bmi.n	8008c82 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c94:	6832      	ldr	r2, [r6, #0]
 8008c96:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008c9a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008c9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ca0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	3a01      	subs	r2, #1
 8008ca8:	025b      	lsls	r3, r3, #9
 8008caa:	0412      	lsls	r2, r2, #16
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	6872      	ldr	r2, [r6, #4]
 8008cb6:	3a01      	subs	r2, #1
 8008cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	6932      	ldr	r2, [r6, #16]
 8008cc0:	3a01      	subs	r2, #1
 8008cc2:	0612      	lsls	r2, r2, #24
 8008cc4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cce:	6972      	ldr	r2, [r6, #20]
 8008cd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008cda:	69b3      	ldr	r3, [r6, #24]
 8008cdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ce0:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ce2:	4b1b      	ldr	r3, [pc, #108]	; (8008d50 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ce4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ce6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cec:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008cf0:	69f2      	ldr	r2, [r6, #28]
 8008cf2:	400b      	ands	r3, r1
 8008cf4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008cf8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008cfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d00:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008d04:	b1ef      	cbz	r7, 8008d42 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d06:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d08:	bf0c      	ite	eq
 8008d0a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d0e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008d12:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d14:	4c0d      	ldr	r4, [pc, #52]	; (8008d4c <RCCEx_PLL3_Config+0xec>)
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1e:	f7fb fb15 	bl	800434c <HAL_GetTick>
 8008d22:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d24:	e004      	b.n	8008d30 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d26:	f7fb fb11 	bl	800434c <HAL_GetTick>
 8008d2a:	1b40      	subs	r0, r0, r5
 8008d2c:	2802      	cmp	r0, #2
 8008d2e:	d804      	bhi.n	8008d3a <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	d5f7      	bpl.n	8008d26 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8008d36:	2000      	movs	r0, #0
}
 8008d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008d3a:	2003      	movs	r0, #3
}
 8008d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008d3e:	2001      	movs	r0, #1
}
 8008d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d48:	e7e4      	b.n	8008d14 <RCCEx_PLL3_Config+0xb4>
 8008d4a:	bf00      	nop
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	ffff0007 	.word	0xffff0007

08008d54 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d58:	6803      	ldr	r3, [r0, #0]
{
 8008d5a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d5c:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008d60:	d022      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008d62:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8008d64:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008d68:	f000 8499 	beq.w	800969e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008d6c:	d811      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8008d6e:	2a00      	cmp	r2, #0
 8008d70:	f000 8503 	beq.w	800977a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8008d74:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008d78:	f040 84fc 	bne.w	8009774 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d7c:	2102      	movs	r1, #2
 8008d7e:	3004      	adds	r0, #4
 8008d80:	f7ff fef4 	bl	8008b6c <RCCEx_PLL2_Config>
 8008d84:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008d86:	2e00      	cmp	r6, #0
 8008d88:	f040 8491 	bne.w	80096ae <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d8c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	e003      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008d92:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008d96:	f040 84ed 	bne.w	8009774 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d9a:	48a8      	ldr	r0, [pc, #672]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008d9c:	2600      	movs	r6, #0
 8008d9e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008da0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008da4:	430a      	orrs	r2, r1
 8008da6:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008da8:	05dd      	lsls	r5, r3, #23
 8008daa:	d50a      	bpl.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008dac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008dae:	2a04      	cmp	r2, #4
 8008db0:	d806      	bhi.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008db2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008db6:	04ad      	.short	0x04ad
 8008db8:	0493048c 	.word	0x0493048c
 8008dbc:	02e902e9 	.word	0x02e902e9
 8008dc0:	2601      	movs	r6, #1
 8008dc2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008dc4:	0598      	lsls	r0, r3, #22
 8008dc6:	d51b      	bpl.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008dc8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008dca:	2a80      	cmp	r2, #128	; 0x80
 8008dcc:	f000 8497 	beq.w	80096fe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8008dd0:	f200 80ec 	bhi.w	8008fac <HAL_RCCEx_PeriphCLKConfig+0x258>
 8008dd4:	2a00      	cmp	r2, #0
 8008dd6:	f000 8394 	beq.w	8009502 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008dda:	2a40      	cmp	r2, #64	; 0x40
 8008ddc:	f040 80ed 	bne.w	8008fba <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008de0:	2100      	movs	r1, #0
 8008de2:	1d20      	adds	r0, r4, #4
 8008de4:	f7ff fec2 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008de8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008dec:	2d00      	cmp	r5, #0
 8008dee:	f040 836e 	bne.w	80094ce <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008df2:	4992      	ldr	r1, [pc, #584]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008df6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008df8:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8008dfc:	4302      	orrs	r2, r0
 8008dfe:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e00:	0559      	lsls	r1, r3, #21
 8008e02:	d51f      	bpl.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e04:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8008e08:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008e0c:	f000 8456 	beq.w	80096bc <HAL_RCCEx_PeriphCLKConfig+0x968>
 8008e10:	f200 80d6 	bhi.w	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008e14:	2a00      	cmp	r2, #0
 8008e16:	f000 837a 	beq.w	800950e <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 8008e1a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008e1e:	f040 80d7 	bne.w	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e22:	2100      	movs	r1, #0
 8008e24:	1d20      	adds	r0, r4, #4
 8008e26:	f7ff fea1 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e2a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e2c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e2e:	2d00      	cmp	r5, #0
 8008e30:	f040 8351 	bne.w	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e34:	4981      	ldr	r1, [pc, #516]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e36:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8008e3a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008e3c:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8008e40:	4302      	orrs	r2, r0
 8008e42:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e44:	051a      	lsls	r2, r3, #20
 8008e46:	d51f      	bpl.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008e48:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8008e4c:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8008e50:	f000 8465 	beq.w	800971e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8008e54:	f200 80bf 	bhi.w	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8008e58:	2a00      	cmp	r2, #0
 8008e5a:	f000 835e 	beq.w	800951a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8008e5e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008e62:	f040 80c0 	bne.w	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e66:	2100      	movs	r1, #0
 8008e68:	1d20      	adds	r0, r4, #4
 8008e6a:	f7ff fe7f 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e6e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e70:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e72:	2d00      	cmp	r5, #0
 8008e74:	f040 8333 	bne.w	80094de <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e78:	4970      	ldr	r1, [pc, #448]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e7a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8008e7e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008e80:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8008e84:	4302      	orrs	r2, r0
 8008e86:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e88:	019f      	lsls	r7, r3, #6
 8008e8a:	d518      	bpl.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 8008e8c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008e8e:	2a20      	cmp	r2, #32
 8008e90:	f000 83ce 	beq.w	8009630 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008e94:	f200 80aa 	bhi.w	8008fec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008e98:	b13a      	cbz	r2, 8008eaa <HAL_RCCEx_PeriphCLKConfig+0x156>
 8008e9a:	2a10      	cmp	r2, #16
 8008e9c:	f040 80a9 	bne.w	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea0:	4966      	ldr	r1, [pc, #408]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008ea2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008ea4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008ea8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008eaa:	2d00      	cmp	r5, #0
 8008eac:	f040 8360 	bne.w	8009570 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008eb0:	4962      	ldr	r1, [pc, #392]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008eb2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008eb4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008eb6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008eba:	4302      	orrs	r2, r0
 8008ebc:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ebe:	04d8      	lsls	r0, r3, #19
 8008ec0:	d51d      	bpl.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008ec2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008ec4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008ec8:	f000 8410 	beq.w	80096ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 8008ecc:	f200 8094 	bhi.w	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8008ed0:	2a00      	cmp	r2, #0
 8008ed2:	f000 8328 	beq.w	8009526 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008ed6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008eda:	f040 8095 	bne.w	8009008 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ede:	2100      	movs	r1, #0
 8008ee0:	1d20      	adds	r0, r4, #4
 8008ee2:	f7ff fe43 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ee6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ee8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008eea:	2d00      	cmp	r5, #0
 8008eec:	f040 82f1 	bne.w	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ef0:	4952      	ldr	r1, [pc, #328]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008ef2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008ef4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008ef6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008efa:	4302      	orrs	r2, r0
 8008efc:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008efe:	0499      	lsls	r1, r3, #18
 8008f00:	d51a      	bpl.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f02:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008f04:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8008f08:	f000 8376 	beq.w	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8008f0c:	d87f      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008f0e:	b14a      	cbz	r2, 8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8008f10:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008f14:	f040 8083 	bne.w	800901e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f18:	2101      	movs	r1, #1
 8008f1a:	1d20      	adds	r0, r4, #4
 8008f1c:	f7ff fe26 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f20:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f22:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008f24:	2d00      	cmp	r5, #0
 8008f26:	f040 8325 	bne.w	8009574 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f2a:	4944      	ldr	r1, [pc, #272]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008f2c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008f2e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008f30:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008f34:	4302      	orrs	r2, r0
 8008f36:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f38:	045a      	lsls	r2, r3, #17
 8008f3a:	d51b      	bpl.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f3c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8008f40:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008f44:	f000 8362 	beq.w	800960c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008f48:	d86c      	bhi.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008f4a:	b142      	cbz	r2, 8008f5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008f4c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008f50:	d170      	bne.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f52:	2101      	movs	r1, #1
 8008f54:	1d20      	adds	r0, r4, #4
 8008f56:	f7ff fe09 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f5a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f5c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	f040 830a 	bne.w	8009578 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f64:	4935      	ldr	r1, [pc, #212]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008f66:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008f6a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008f6c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8008f70:	4302      	orrs	r2, r0
 8008f72:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f74:	041f      	lsls	r7, r3, #16
 8008f76:	d50d      	bpl.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 8008f78:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008f7a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008f7e:	f000 834f 	beq.w	8009620 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8008f82:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008f86:	f000 820b 	beq.w	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	f000 820e 	beq.w	80093ac <HAL_RCCEx_PeriphCLKConfig+0x658>
 8008f90:	2601      	movs	r6, #1
 8008f92:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f94:	01d8      	lsls	r0, r3, #7
 8008f96:	d55d      	bpl.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 8008f98:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008f9a:	2a03      	cmp	r2, #3
 8008f9c:	f200 8418 	bhi.w	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 8008fa0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008fa4:	035a0054 	.word	0x035a0054
 8008fa8:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 8008fac:	2ac0      	cmp	r2, #192	; 0xc0
 8008fae:	f43f af1d 	beq.w	8008dec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008fb2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008fb6:	f43f af19 	beq.w	8008dec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008fba:	2601      	movs	r6, #1
 8008fbc:	4635      	mov	r5, r6
 8008fbe:	e71f      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008fc0:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8008fc4:	f43f af33 	beq.w	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8008fc8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008fcc:	f43f af2f 	beq.w	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8008fd0:	2601      	movs	r6, #1
 8008fd2:	4635      	mov	r5, r6
 8008fd4:	e736      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008fd6:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8008fda:	f43f af4a 	beq.w	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8008fde:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8008fe2:	f43f af46 	beq.w	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8008fe6:	2601      	movs	r6, #1
 8008fe8:	4635      	mov	r5, r6
 8008fea:	e74d      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 8008fec:	2a30      	cmp	r2, #48	; 0x30
 8008fee:	f43f af5c 	beq.w	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x156>
 8008ff2:	2601      	movs	r6, #1
 8008ff4:	4635      	mov	r5, r6
 8008ff6:	e762      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008ff8:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8008ffc:	f43f af75 	beq.w	8008eea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009000:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009004:	f43f af71 	beq.w	8008eea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009008:	2601      	movs	r6, #1
 800900a:	4635      	mov	r5, r6
 800900c:	e777      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 800900e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8009012:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009016:	d085      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8009018:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800901c:	d082      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800901e:	2601      	movs	r6, #1
 8009020:	4635      	mov	r5, r6
 8009022:	e789      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009024:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009028:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800902c:	d097      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800902e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009032:	d094      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009034:	2601      	movs	r6, #1
 8009036:	4635      	mov	r5, r6
 8009038:	e79c      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800903a:	bf00      	nop
 800903c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009040:	2102      	movs	r1, #2
 8009042:	1d20      	adds	r0, r4, #4
 8009044:	f7ff fd92 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009048:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800904a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800904c:	2d00      	cmp	r5, #0
 800904e:	f000 8272 	beq.w	8009536 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8009052:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009054:	0259      	lsls	r1, r3, #9
 8009056:	f100 81ee 	bmi.w	8009436 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800905a:	07df      	lsls	r7, r3, #31
 800905c:	d52f      	bpl.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800905e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8009060:	2a28      	cmp	r2, #40	; 0x28
 8009062:	d82a      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x366>
 8009064:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009068:	002901dc 	.word	0x002901dc
 800906c:	00290029 	.word	0x00290029
 8009070:	00290029 	.word	0x00290029
 8009074:	00290029 	.word	0x00290029
 8009078:	00290378 	.word	0x00290378
 800907c:	00290029 	.word	0x00290029
 8009080:	00290029 	.word	0x00290029
 8009084:	00290029 	.word	0x00290029
 8009088:	002901d5 	.word	0x002901d5
 800908c:	00290029 	.word	0x00290029
 8009090:	00290029 	.word	0x00290029
 8009094:	00290029 	.word	0x00290029
 8009098:	002901dc 	.word	0x002901dc
 800909c:	00290029 	.word	0x00290029
 80090a0:	00290029 	.word	0x00290029
 80090a4:	00290029 	.word	0x00290029
 80090a8:	002901dc 	.word	0x002901dc
 80090ac:	00290029 	.word	0x00290029
 80090b0:	00290029 	.word	0x00290029
 80090b4:	00290029 	.word	0x00290029
 80090b8:	01dc      	.short	0x01dc
 80090ba:	2601      	movs	r6, #1
 80090bc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80090be:	0798      	lsls	r0, r3, #30
 80090c0:	d516      	bpl.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80090c2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80090c4:	2a05      	cmp	r2, #5
 80090c6:	f200 8380 	bhi.w	80097ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80090ca:	e8df f012 	tbh	[pc, r2, lsl #1]
 80090ce:	000d      	.short	0x000d
 80090d0:	00060331 	.word	0x00060331
 80090d4:	000d000d 	.word	0x000d000d
 80090d8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090da:	2101      	movs	r1, #1
 80090dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80090e0:	f7ff fdbe 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80090e4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80090e8:	2d00      	cmp	r5, #0
 80090ea:	f000 822e 	beq.w	800954a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80090ee:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80090f0:	0759      	lsls	r1, r3, #29
 80090f2:	d517      	bpl.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80090f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80090f8:	2a05      	cmp	r2, #5
 80090fa:	f200 836c 	bhi.w	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80090fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009102:	000d      	.short	0x000d
 8009104:	00060321 	.word	0x00060321
 8009108:	000d000d 	.word	0x000d000d
 800910c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800910e:	2101      	movs	r1, #1
 8009110:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009114:	f7ff fda4 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009118:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800911a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800911c:	2d00      	cmp	r5, #0
 800911e:	f000 821c 	beq.w	800955a <HAL_RCCEx_PeriphCLKConfig+0x806>
 8009122:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009124:	069a      	lsls	r2, r3, #26
 8009126:	d51d      	bpl.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009128:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800912c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009130:	f000 8287 	beq.w	8009642 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009134:	f200 80e6 	bhi.w	8009304 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8009138:	b14a      	cbz	r2, 800914e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800913a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800913e:	f040 80eb 	bne.w	8009318 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009142:	2100      	movs	r1, #0
 8009144:	1d20      	adds	r0, r4, #4
 8009146:	f7ff fd11 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800914a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800914c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800914e:	2d00      	cmp	r5, #0
 8009150:	f040 81ef 	bne.w	8009532 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009154:	49a4      	ldr	r1, [pc, #656]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009156:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800915a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800915c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009160:	4302      	orrs	r2, r0
 8009162:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009164:	065f      	lsls	r7, r3, #25
 8009166:	d51d      	bpl.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009168:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800916c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009170:	f000 822e 	beq.w	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8009174:	f200 80d3 	bhi.w	800931e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009178:	b14a      	cbz	r2, 800918e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800917a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800917e:	f040 80d8 	bne.w	8009332 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009182:	2100      	movs	r1, #0
 8009184:	1d20      	adds	r0, r4, #4
 8009186:	f7ff fcf1 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800918a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800918c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800918e:	2d00      	cmp	r5, #0
 8009190:	f040 81f4 	bne.w	800957c <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009194:	4994      	ldr	r1, [pc, #592]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009196:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800919a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800919c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80091a0:	4302      	orrs	r2, r0
 80091a2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80091a4:	0618      	lsls	r0, r3, #24
 80091a6:	d51d      	bpl.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80091a8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80091ac:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80091b0:	f000 8218 	beq.w	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x890>
 80091b4:	f200 80c0 	bhi.w	8009338 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80091b8:	b14a      	cbz	r2, 80091ce <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80091ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80091be:	f040 80c5 	bne.w	800934c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091c2:	2100      	movs	r1, #0
 80091c4:	1d20      	adds	r0, r4, #4
 80091c6:	f7ff fcd1 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80091ca:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80091ce:	2d00      	cmp	r5, #0
 80091d0:	f040 81b9 	bne.w	8009546 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091d4:	4984      	ldr	r1, [pc, #528]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80091d6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80091da:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80091dc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80091e0:	4302      	orrs	r2, r0
 80091e2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80091e4:	0719      	lsls	r1, r3, #28
 80091e6:	d50b      	bpl.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80091e8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80091ec:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80091f0:	f000 823b 	beq.w	800966a <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80091f4:	487c      	ldr	r0, [pc, #496]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80091f6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80091f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80091fc:	430a      	orrs	r2, r1
 80091fe:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009200:	06da      	lsls	r2, r3, #27
 8009202:	d50b      	bpl.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009204:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009208:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800920c:	f000 823a 	beq.w	8009684 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009210:	4875      	ldr	r0, [pc, #468]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009212:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8009214:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009218:	430a      	orrs	r2, r1
 800921a:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800921c:	031f      	lsls	r7, r3, #12
 800921e:	d50e      	bpl.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 8009220:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009224:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009228:	f000 80e0 	beq.w	80093ec <HAL_RCCEx_PeriphCLKConfig+0x698>
 800922c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009230:	f000 80e3 	beq.w	80093fa <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8009234:	2900      	cmp	r1, #0
 8009236:	f000 81c3 	beq.w	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800923a:	2601      	movs	r6, #1
 800923c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800923e:	0358      	lsls	r0, r3, #13
 8009240:	d50f      	bpl.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 8009242:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8009246:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800924a:	f000 80ba 	beq.w	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800924e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8009252:	f000 80bd 	beq.w	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 8009256:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800925a:	f000 81a9 	beq.w	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800925e:	2601      	movs	r6, #1
 8009260:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009262:	03d9      	lsls	r1, r3, #15
 8009264:	d509      	bpl.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009266:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009268:	2a00      	cmp	r2, #0
 800926a:	f000 818f 	beq.w	800958c <HAL_RCCEx_PeriphCLKConfig+0x838>
 800926e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009272:	f000 8136 	beq.w	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8009276:	2601      	movs	r6, #1
 8009278:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800927a:	009a      	lsls	r2, r3, #2
 800927c:	f100 811c 	bmi.w	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x764>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009280:	039f      	lsls	r7, r3, #14
 8009282:	d466      	bmi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 8009284:	1e30      	subs	r0, r6, #0
 8009286:	bf18      	it	ne
 8009288:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800928a:	02de      	lsls	r6, r3, #11
 800928c:	d506      	bpl.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800928e:	4956      	ldr	r1, [pc, #344]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009290:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009292:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009294:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009298:	432a      	orrs	r2, r5
 800929a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800929c:	00dd      	lsls	r5, r3, #3
 800929e:	d507      	bpl.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092a0:	4951      	ldr	r1, [pc, #324]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80092a2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80092a6:	690a      	ldr	r2, [r1, #16]
 80092a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092ac:	432a      	orrs	r2, r5
 80092ae:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092b0:	0299      	lsls	r1, r3, #10
 80092b2:	d506      	bpl.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092b4:	494c      	ldr	r1, [pc, #304]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80092b6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 80092b8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80092ba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80092be:	432a      	orrs	r2, r5
 80092c0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80092c2:	005a      	lsls	r2, r3, #1
 80092c4:	d509      	bpl.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092c6:	4a48      	ldr	r2, [pc, #288]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80092c8:	6911      	ldr	r1, [r2, #16]
 80092ca:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80092ce:	6111      	str	r1, [r2, #16]
 80092d0:	6911      	ldr	r1, [r2, #16]
 80092d2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80092d6:	4329      	orrs	r1, r5
 80092d8:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80092da:	2b00      	cmp	r3, #0
 80092dc:	da06      	bge.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092de:	4942      	ldr	r1, [pc, #264]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80092e0:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80092e2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80092e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80092e8:	432a      	orrs	r2, r5
 80092ea:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092ec:	021b      	lsls	r3, r3, #8
 80092ee:	d507      	bpl.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80092f0:	4a3d      	ldr	r2, [pc, #244]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80092f2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80092f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80092f8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80092fc:	430b      	orrs	r3, r1
 80092fe:	6553      	str	r3, [r2, #84]	; 0x54
}
 8009300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009304:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009308:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800930c:	f43f af1f 	beq.w	800914e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8009310:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009314:	f43f af1b 	beq.w	800914e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8009318:	2601      	movs	r6, #1
 800931a:	4635      	mov	r5, r6
 800931c:	e722      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800931e:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8009322:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009326:	f43f af32 	beq.w	800918e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800932a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800932e:	f43f af2e 	beq.w	800918e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8009332:	2601      	movs	r6, #1
 8009334:	4635      	mov	r5, r6
 8009336:	e735      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009338:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800933c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009340:	f43f af45 	beq.w	80091ce <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8009344:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8009348:	f43f af41 	beq.w	80091ce <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800934c:	2601      	movs	r6, #1
 800934e:	4635      	mov	r5, r6
 8009350:	e748      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 8009352:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009354:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009358:	f000 8121 	beq.w	800959e <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800935c:	d906      	bls.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x618>
 800935e:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009362:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009366:	d003      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8009368:	2001      	movs	r0, #1
 800936a:	e78e      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x536>
 800936c:	2a00      	cmp	r2, #0
 800936e:	d1fb      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 8009370:	2d00      	cmp	r5, #0
 8009372:	d1f9      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009374:	4d1c      	ldr	r5, [pc, #112]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 8009376:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009378:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800937a:	bf18      	it	ne
 800937c:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800937e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8009382:	430a      	orrs	r2, r1
 8009384:	656a      	str	r2, [r5, #84]	; 0x54
 8009386:	e780      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009388:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800938a:	2d00      	cmp	r5, #0
 800938c:	f040 80a5 	bne.w	80094da <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009390:	4915      	ldr	r1, [pc, #84]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009392:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009394:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009396:	f022 0207 	bic.w	r2, r2, #7
 800939a:	4302      	orrs	r2, r0
 800939c:	650a      	str	r2, [r1, #80]	; 0x50
 800939e:	e511      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093a0:	2101      	movs	r1, #1
 80093a2:	1d20      	adds	r0, r4, #4
 80093a4:	f7ff fbe2 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80093a8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093aa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	f040 80dd 	bne.w	800956c <HAL_RCCEx_PeriphCLKConfig+0x818>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80093b2:	490d      	ldr	r1, [pc, #52]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80093b4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80093b6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80093b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80093bc:	4302      	orrs	r2, r0
 80093be:	650a      	str	r2, [r1, #80]	; 0x50
 80093c0:	e5e8      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093c2:	2101      	movs	r1, #1
 80093c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093c8:	f7ff fc4a 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093cc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093ce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093d0:	2d00      	cmp	r5, #0
 80093d2:	f040 80d9 	bne.w	8009588 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093d6:	4904      	ldr	r1, [pc, #16]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80093d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80093dc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80093de:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80093e2:	4302      	orrs	r2, r0
 80093e4:	654a      	str	r2, [r1, #84]	; 0x54
 80093e6:	e73c      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80093e8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093ec:	2102      	movs	r1, #2
 80093ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093f2:	f7ff fc35 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80093f6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093fa:	2d00      	cmp	r5, #0
 80093fc:	f040 80c2 	bne.w	8009584 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009400:	49ac      	ldr	r1, [pc, #688]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009402:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8009406:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009408:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800940c:	4302      	orrs	r2, r0
 800940e:	658a      	str	r2, [r1, #88]	; 0x58
 8009410:	e715      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009412:	2101      	movs	r1, #1
 8009414:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009418:	f7ff fc22 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800941c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800941e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009420:	2d00      	cmp	r5, #0
 8009422:	f040 80ad 	bne.w	8009580 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009426:	49a3      	ldr	r1, [pc, #652]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009428:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800942a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800942c:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8009430:	4302      	orrs	r2, r0
 8009432:	654a      	str	r2, [r1, #84]	; 0x54
 8009434:	e643      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009436:	4fa0      	ldr	r7, [pc, #640]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800943e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8009440:	f7fa ff84 	bl	800434c <HAL_GetTick>
 8009444:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009446:	e006      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x702>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009448:	f7fa ff80 	bl	800434c <HAL_GetTick>
 800944c:	eba0 0008 	sub.w	r0, r0, r8
 8009450:	2864      	cmp	r0, #100	; 0x64
 8009452:	f200 818b 	bhi.w	800976c <HAL_RCCEx_PeriphCLKConfig+0xa18>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	05da      	lsls	r2, r3, #23
 800945a:	d5f5      	bpl.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if(ret == HAL_OK)
 800945c:	2d00      	cmp	r5, #0
 800945e:	f040 81b1 	bne.w	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009462:	4a94      	ldr	r2, [pc, #592]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009464:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009468:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800946a:	4059      	eors	r1, r3
 800946c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8009470:	d00b      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x736>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009472:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009474:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009476:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800947a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800947e:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009480:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8009482:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009486:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009488:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800948a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948e:	f000 817b 	beq.w	8009788 <HAL_RCCEx_PeriphCLKConfig+0xa34>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009492:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009496:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800949a:	f000 8189 	beq.w	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
 800949e:	4985      	ldr	r1, [pc, #532]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80094a0:	690a      	ldr	r2, [r1, #16]
 80094a2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80094a6:	610a      	str	r2, [r1, #16]
 80094a8:	4a82      	ldr	r2, [pc, #520]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80094aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ae:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80094b0:	430b      	orrs	r3, r1
 80094b2:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	e5d0      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80094b8:	2102      	movs	r1, #2
 80094ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80094be:	f7ff fbcf 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80094c2:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80094c4:	2800      	cmp	r0, #0
 80094c6:	f43f aedb 	beq.w	8009280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 80094ca:	2601      	movs	r6, #1
 80094cc:	e6d8      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80094ce:	462e      	mov	r6, r5
 80094d0:	e496      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80094d2:	462e      	mov	r6, r5
 80094d4:	e513      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80094d6:	462e      	mov	r6, r5
 80094d8:	e4b4      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 80094da:	462e      	mov	r6, r5
 80094dc:	e472      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80094de:	462e      	mov	r6, r5
 80094e0:	e4d2      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094e2:	2102      	movs	r1, #2
 80094e4:	1d20      	adds	r0, r4, #4
 80094e6:	f7ff fb41 	bl	8008b6c <RCCEx_PLL2_Config>
 80094ea:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80094ec:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80094ee:	2d00      	cmp	r5, #0
 80094f0:	d153      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80094f2:	4970      	ldr	r1, [pc, #448]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80094f4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80094f6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80094f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80094fc:	4302      	orrs	r2, r0
 80094fe:	64ca      	str	r2, [r1, #76]	; 0x4c
 8009500:	e6bb      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009502:	496c      	ldr	r1, [pc, #432]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009504:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009506:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800950a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800950c:	e46e      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800950e:	4969      	ldr	r1, [pc, #420]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009510:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009512:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009516:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009518:	e489      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800951a:	4966      	ldr	r1, [pc, #408]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800951c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800951e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009522:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009524:	e4a5      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009526:	4963      	ldr	r1, [pc, #396]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009528:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800952a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800952e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009530:	e4db      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009532:	462e      	mov	r6, r5
 8009534:	e616      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009536:	495f      	ldr	r1, [pc, #380]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009538:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800953a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800953c:	f022 0203 	bic.w	r2, r2, #3
 8009540:	4302      	orrs	r2, r0
 8009542:	64ca      	str	r2, [r1, #76]	; 0x4c
 8009544:	e586      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009546:	462e      	mov	r6, r5
 8009548:	e64c      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800954a:	495a      	ldr	r1, [pc, #360]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800954c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800954e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009550:	f022 0207 	bic.w	r2, r2, #7
 8009554:	4302      	orrs	r2, r0
 8009556:	654a      	str	r2, [r1, #84]	; 0x54
 8009558:	e5ca      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800955a:	4956      	ldr	r1, [pc, #344]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800955c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8009560:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009562:	f022 0207 	bic.w	r2, r2, #7
 8009566:	4302      	orrs	r2, r0
 8009568:	658a      	str	r2, [r1, #88]	; 0x58
 800956a:	e5db      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800956c:	462e      	mov	r6, r5
 800956e:	e511      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009570:	462e      	mov	r6, r5
 8009572:	e4a4      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8009574:	462e      	mov	r6, r5
 8009576:	e4df      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009578:	462e      	mov	r6, r5
 800957a:	e4fb      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800957c:	462e      	mov	r6, r5
 800957e:	e611      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8009580:	462e      	mov	r6, r5
 8009582:	e59c      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8009584:	462e      	mov	r6, r5
 8009586:	e65a      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8009588:	462e      	mov	r6, r5
 800958a:	e66a      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958c:	4949      	ldr	r1, [pc, #292]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800958e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009590:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009594:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009596:	2d00      	cmp	r5, #0
 8009598:	d0ab      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800959a:	462e      	mov	r6, r5
 800959c:	e66d      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800959e:	4845      	ldr	r0, [pc, #276]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80095a0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80095a2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80095a6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80095a8:	2d00      	cmp	r5, #0
 80095aa:	f47f aedd 	bne.w	8009368 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80095ae:	e6e1      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b0:	4940      	ldr	r1, [pc, #256]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80095b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80095b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80095b8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	d1e4      	bne.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x834>
 80095be:	e70a      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095c0:	1d20      	adds	r0, r4, #4
 80095c2:	f7ff fad3 	bl	8008b6c <RCCEx_PLL2_Config>
 80095c6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095c8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	d1da      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x830>
 80095ce:	e717      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095d0:	2102      	movs	r1, #2
 80095d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095d6:	f7ff fb43 	bl	8008c60 <RCCEx_PLL3_Config>
 80095da:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095dc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80095de:	2d00      	cmp	r5, #0
 80095e0:	d1cc      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x828>
 80095e2:	e5d7      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095e4:	2102      	movs	r1, #2
 80095e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095ea:	f7ff fb39 	bl	8008c60 <RCCEx_PLL3_Config>
 80095ee:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80095f0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80095f2:	2d00      	cmp	r5, #0
 80095f4:	d1a7      	bne.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80095f6:	e5ed      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095f8:	2101      	movs	r1, #1
 80095fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095fe:	f7ff fb2f 	bl	8008c60 <RCCEx_PLL3_Config>
 8009602:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009604:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009606:	2d00      	cmp	r5, #0
 8009608:	d1b4      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x820>
 800960a:	e48e      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800960c:	2101      	movs	r1, #1
 800960e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009612:	f7ff fb25 	bl	8008c60 <RCCEx_PLL3_Config>
 8009616:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009618:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800961a:	2d00      	cmp	r5, #0
 800961c:	d1ac      	bne.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x824>
 800961e:	e4a1      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009620:	4924      	ldr	r1, [pc, #144]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009622:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009624:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009628:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800962a:	2d00      	cmp	r5, #0
 800962c:	d19e      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x818>
 800962e:	e6c0      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009630:	2102      	movs	r1, #2
 8009632:	1d20      	adds	r0, r4, #4
 8009634:	f7ff fa9a 	bl	8008b6c <RCCEx_PLL2_Config>
 8009638:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800963a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800963c:	2d00      	cmp	r5, #0
 800963e:	d197      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8009640:	e436      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009642:	2102      	movs	r1, #2
 8009644:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009648:	f7ff fb0a 	bl	8008c60 <RCCEx_PLL3_Config>
 800964c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800964e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009650:	2d00      	cmp	r5, #0
 8009652:	f47f af6e 	bne.w	8009532 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8009656:	e57d      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009658:	4916      	ldr	r1, [pc, #88]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800965a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800965c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009660:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009662:	2d00      	cmp	r5, #0
 8009664:	f47f acf5 	bne.w	8009052 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8009668:	e765      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800966a:	2102      	movs	r1, #2
 800966c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009670:	f7ff faf6 	bl	8008c60 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009674:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009678:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800967a:	2800      	cmp	r0, #0
 800967c:	f43f adba 	beq.w	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 8009680:	2601      	movs	r6, #1
 8009682:	e5b7      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009684:	2102      	movs	r1, #2
 8009686:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800968a:	f7ff fae9 	bl	8008c60 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800968e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009692:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009694:	2800      	cmp	r0, #0
 8009696:	f43f adbb 	beq.w	8009210 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 800969a:	2601      	movs	r6, #1
 800969c:	e5b8      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800969e:	2102      	movs	r1, #2
 80096a0:	3024      	adds	r0, #36	; 0x24
 80096a2:	f7ff fadd 	bl	8008c60 <RCCEx_PLL3_Config>
 80096a6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80096a8:	2e00      	cmp	r6, #0
 80096aa:	f43f ab6f 	beq.w	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	f7ff bb7a 	b.w	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80096b4:	58024400 	.word	0x58024400
 80096b8:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096bc:	2100      	movs	r1, #0
 80096be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096c2:	f7ff facd 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80096c6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096c8:	4605      	mov	r5, r0
      break;
 80096ca:	f7ff bbb0 	b.w	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096ce:	2100      	movs	r1, #0
 80096d0:	1d20      	adds	r0, r4, #4
 80096d2:	f7ff fa4b 	bl	8008b6c <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80096d6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096d8:	4605      	mov	r5, r0
      break;
 80096da:	e656      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096dc:	2100      	movs	r1, #0
 80096de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096e2:	f7ff fabd 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80096e6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096e8:	4605      	mov	r5, r0
      break;
 80096ea:	e64e      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096ec:	2100      	movs	r1, #0
 80096ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096f2:	f7ff fab5 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096f6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096f8:	4605      	mov	r5, r0
      break;
 80096fa:	f7ff bbf6 	b.w	8008eea <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096fe:	2100      	movs	r1, #0
 8009700:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009704:	f7ff faac 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009708:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800970a:	4605      	mov	r5, r0
      break;
 800970c:	f7ff bb6e 	b.w	8008dec <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009710:	4932      	ldr	r1, [pc, #200]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
      break;
 8009712:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009714:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009716:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800971a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800971c:	e635      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800971e:	2100      	movs	r1, #0
 8009720:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009724:	f7ff fa9c 	bl	8008c60 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009728:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800972a:	4605      	mov	r5, r0
      break;
 800972c:	f7ff bba1 	b.w	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009730:	2101      	movs	r1, #1
 8009732:	1d20      	adds	r0, r4, #4
 8009734:	f7ff fa1a 	bl	8008b6c <RCCEx_PLL2_Config>
 8009738:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800973a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800973c:	2d00      	cmp	r5, #0
 800973e:	f47f acd6 	bne.w	80090ee <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8009742:	e702      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009744:	2101      	movs	r1, #1
 8009746:	1d20      	adds	r0, r4, #4
 8009748:	f7ff fa10 	bl	8008b6c <RCCEx_PLL2_Config>
 800974c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800974e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009750:	2d00      	cmp	r5, #0
 8009752:	f47f ace6 	bne.w	8009122 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009756:	e700      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009758:	2101      	movs	r1, #1
 800975a:	1d20      	adds	r0, r4, #4
 800975c:	f7ff fa06 	bl	8008b6c <RCCEx_PLL2_Config>
 8009760:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009762:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009764:	2d00      	cmp	r5, #0
 8009766:	f47f af0b 	bne.w	8009580 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800976a:	e65c      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
            ret = HAL_TIMEOUT;
 800976c:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800976e:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 8009770:	4635      	mov	r5, r6
 8009772:	e472      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009774:	2601      	movs	r6, #1
 8009776:	f7ff bb17 	b.w	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977a:	4818      	ldr	r0, [pc, #96]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800977c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800977e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009782:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009784:	f7ff bb09 	b.w	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8009788:	f7fa fde0 	bl	800434c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800978c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80097dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
        tickstart = HAL_GetTick();
 8009790:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009792:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009796:	e004      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009798:	f7fa fdd8 	bl	800434c <HAL_GetTick>
 800979c:	1bc0      	subs	r0, r0, r7
 800979e:	4548      	cmp	r0, r9
 80097a0:	d8e4      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xa18>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097a2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80097a6:	079b      	lsls	r3, r3, #30
 80097a8:	d5f6      	bpl.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xa44>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097aa:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80097ae:	e670      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80097b0:	480a      	ldr	r0, [pc, #40]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80097b2:	4a0b      	ldr	r2, [pc, #44]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 80097b4:	6901      	ldr	r1, [r0, #16]
 80097b6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80097ba:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80097be:	430a      	orrs	r2, r1
 80097c0:	6102      	str	r2, [r0, #16]
 80097c2:	e671      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x754>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80097c4:	6823      	ldr	r3, [r4, #0]
 80097c6:	462e      	mov	r6, r5
 80097c8:	e447      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80097ca:	2601      	movs	r6, #1
 80097cc:	4635      	mov	r5, r6
 80097ce:	e48f      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 80097d0:	2601      	movs	r6, #1
 80097d2:	4635      	mov	r5, r6
 80097d4:	e43e      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80097d6:	2601      	movs	r6, #1
 80097d8:	4635      	mov	r5, r6
 80097da:	e4a3      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80097dc:	58024400 	.word	0x58024400
 80097e0:	00ffffcf 	.word	0x00ffffcf

080097e4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80097e4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80097e6:	f7ff f8f1 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 80097ea:	4b05      	ldr	r3, [pc, #20]	; (8009800 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80097ec:	4a05      	ldr	r2, [pc, #20]	; (8009804 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80097f4:	5cd3      	ldrb	r3, [r2, r3]
 80097f6:	f003 031f 	and.w	r3, r3, #31
}
 80097fa:	40d8      	lsrs	r0, r3
 80097fc:	bd08      	pop	{r3, pc}
 80097fe:	bf00      	nop
 8009800:	58024400 	.word	0x58024400
 8009804:	080187bc 	.word	0x080187bc

08009808 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009808:	4b4f      	ldr	r3, [pc, #316]	; (8009948 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800980a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800980c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800980e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009810:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8009812:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009816:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800981a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800981c:	d05c      	beq.n	80098d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800981e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009822:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009826:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800982a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800982e:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009830:	ee07 4a90 	vmov	s15, r4
 8009834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009838:	d003      	beq.n	8009842 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800983a:	2902      	cmp	r1, #2
 800983c:	d075      	beq.n	800992a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800983e:	2900      	cmp	r1, #0
 8009840:	d04f      	beq.n	80098e2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009842:	ee07 2a90 	vmov	s15, r2
 8009846:	eddf 6a41 	vldr	s13, [pc, #260]	; 800994c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800984a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009854:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009950 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985c:	ee06 3a90 	vmov	s13, r3
 8009860:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009864:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009868:	ee76 6a85 	vadd.f32	s13, s13, s10
 800986c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009870:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009874:	4a34      	ldr	r2, [pc, #208]	; (8009948 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8009876:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800987a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800987c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009880:	ee07 3a10 	vmov	s14, r3
 8009884:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009888:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800988a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800988e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009896:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800989a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800989c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80098a0:	ee07 3a10 	vmov	s14, r3
 80098a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80098a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80098ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098b4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80098b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80098ba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80098ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80098d2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80098d6:	4770      	bx	lr
 80098d8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80098da:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80098de:	6082      	str	r2, [r0, #8]
}
 80098e0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	0689      	lsls	r1, r1, #26
 80098e6:	d527      	bpl.n	8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098e8:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098ea:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098ee:	4919      	ldr	r1, [pc, #100]	; (8009954 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80098f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098f6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098fe:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8009950 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009902:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009906:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009908:	ee06 3a90 	vmov	s13, r3
 800990c:	ee05 1a90 	vmov	s11, r1
 8009910:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009914:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009918:	ee76 6a86 	vadd.f32	s13, s13, s12
 800991c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009920:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009924:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009928:	e7a4      	b.n	8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800992a:	ee07 2a90 	vmov	s15, r2
 800992e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009958 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8009932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009936:	e78a      	b.n	800984e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009938:	ee07 2a90 	vmov	s15, r2
 800993c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800995c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8009940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009944:	e783      	b.n	800984e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8009946:	bf00      	nop
 8009948:	58024400 	.word	0x58024400
 800994c:	4a742400 	.word	0x4a742400
 8009950:	39000000 	.word	0x39000000
 8009954:	03d09000 	.word	0x03d09000
 8009958:	4bbebc20 	.word	0x4bbebc20
 800995c:	4c742400 	.word	0x4c742400

08009960 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009960:	4b4f      	ldr	r3, [pc, #316]	; (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8009962:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009964:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009966:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009968:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800996a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800996e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009972:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8009974:	d05c      	beq.n	8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009976:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800997a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800997e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009982:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8009986:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009988:	ee07 4a90 	vmov	s15, r4
 800998c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009990:	d003      	beq.n	800999a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8009992:	2902      	cmp	r1, #2
 8009994:	d075      	beq.n	8009a82 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8009996:	2900      	cmp	r1, #0
 8009998:	d04f      	beq.n	8009a3a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800999a:	ee07 2a90 	vmov	s15, r2
 800999e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80099a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80099ac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80099b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b4:	ee06 3a90 	vmov	s13, r3
 80099b8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80099bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80099c0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80099c4:	eee7 6a25 	vfma.f32	s13, s14, s11
 80099c8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80099cc:	4a34      	ldr	r2, [pc, #208]	; (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 80099ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80099d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80099d4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80099d8:	ee07 3a10 	vmov	s14, r3
 80099dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80099e0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80099e2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80099e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ee:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80099f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80099f4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80099f8:	ee07 3a10 	vmov	s14, r3
 80099fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a00:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009a10:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009a12:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a26:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009a2a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009a2e:	4770      	bx	lr
 8009a30:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a32:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a36:	6082      	str	r2, [r0, #8]
}
 8009a38:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a3a:	6819      	ldr	r1, [r3, #0]
 8009a3c:	0689      	lsls	r1, r1, #26
 8009a3e:	d527      	bpl.n	8009a90 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a40:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a42:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a46:	4919      	ldr	r1, [pc, #100]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a48:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a4e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a56:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a5e:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a60:	ee06 3a90 	vmov	s13, r3
 8009a64:	ee05 1a90 	vmov	s11, r1
 8009a68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009a6c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009a70:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009a74:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009a78:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009a7c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009a80:	e7a4      	b.n	80099cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a82:	ee07 2a90 	vmov	s15, r2
 8009a86:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8009a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a8e:	e78a      	b.n	80099a6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a90:	ee07 2a90 	vmov	s15, r2
 8009a94:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8009a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a9c:	e783      	b.n	80099a6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8009a9e:	bf00      	nop
 8009aa0:	58024400 	.word	0x58024400
 8009aa4:	4a742400 	.word	0x4a742400
 8009aa8:	39000000 	.word	0x39000000
 8009aac:	03d09000 	.word	0x03d09000
 8009ab0:	4bbebc20 	.word	0x4bbebc20
 8009ab4:	4c742400 	.word	0x4c742400

08009ab8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ab8:	4b4f      	ldr	r3, [pc, #316]	; (8009bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8009aba:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009abc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009abe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ac0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8009ac2:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009ac6:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009aca:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8009acc:	d05c      	beq.n	8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ace:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ad2:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ad6:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ada:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8009ade:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ae0:	ee07 4a90 	vmov	s15, r4
 8009ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009ae8:	d07e      	beq.n	8009be8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8009aea:	2902      	cmp	r1, #2
 8009aec:	d075      	beq.n	8009bda <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009aee:	2900      	cmp	r1, #0
 8009af0:	d04f      	beq.n	8009b92 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009af2:	ee07 2a90 	vmov	s15, r2
 8009af6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009bfc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b00:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009b04:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009c00 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0c:	ee06 3a90 	vmov	s13, r3
 8009b10:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009b14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b18:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009b1c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009b20:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009b24:	4a34      	ldr	r2, [pc, #208]	; (8009bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8009b26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009b2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b2c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009b30:	ee07 3a10 	vmov	s14, r3
 8009b34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009b38:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009b3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b46:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009b4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b4c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009b50:	ee07 3a10 	vmov	s14, r3
 8009b54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b64:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009b68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b6a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b76:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009b82:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009b86:	4770      	bx	lr
 8009b88:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b8a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b8e:	6082      	str	r2, [r0, #8]
}
 8009b90:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b92:	6819      	ldr	r1, [r3, #0]
 8009b94:	0689      	lsls	r1, r1, #26
 8009b96:	d5ac      	bpl.n	8009af2 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b98:	681c      	ldr	r4, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b9a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b9e:	4919      	ldr	r1, [pc, #100]	; (8009c04 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ba0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ba6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bae:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8009c00 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bb6:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bb8:	ee06 3a90 	vmov	s13, r3
 8009bbc:	ee05 1a90 	vmov	s11, r1
 8009bc0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009bc4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009bc8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009bcc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009bd0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009bd4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009bd8:	e7a4      	b.n	8009b24 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bda:	ee07 2a90 	vmov	s15, r2
 8009bde:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009c08 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8009be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009be6:	e78a      	b.n	8009afe <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009be8:	ee07 2a90 	vmov	s15, r2
 8009bec:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009c0c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8009bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bf4:	e783      	b.n	8009afe <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8009bf6:	bf00      	nop
 8009bf8:	58024400 	.word	0x58024400
 8009bfc:	4c742400 	.word	0x4c742400
 8009c00:	39000000 	.word	0x39000000
 8009c04:	03d09000 	.word	0x03d09000
 8009c08:	4bbebc20 	.word	0x4bbebc20
 8009c0c:	4a742400 	.word	0x4a742400

08009c10 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c10:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009c14:	b500      	push	{lr}
 8009c16:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c18:	d074      	beq.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009c1a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009c1e:	d02c      	beq.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009c20:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009c24:	f000 80cd 	beq.w	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009c28:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009c2c:	d07e      	beq.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009c2e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009c32:	d058      	beq.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009c34:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009c38:	f000 8102 	beq.w	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009c3c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009c40:	f000 810d 	beq.w	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009c44:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009c48:	f000 80e1 	beq.w	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009c4c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009c50:	d138      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009c52:	4b99      	ldr	r3, [pc, #612]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c5e:	f000 808d 	beq.w	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8009c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c66:	f000 813d 	beq.w	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8009c6a:	bb5b      	cbnz	r3, 8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c6c:	4b92      	ldr	r3, [pc, #584]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009c74:	d043      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = HSE_VALUE;
 8009c76:	4891      	ldr	r0, [pc, #580]	; (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8009c78:	e041      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009c7a:	4a8f      	ldr	r2, [pc, #572]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009c7c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c7e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009c82:	2b80      	cmp	r3, #128	; 0x80
 8009c84:	f000 8098 	beq.w	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8009c88:	d920      	bls.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8009c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8009c8c:	d036      	beq.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c92:	d117      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c94:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c96:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c9c:	0749      	lsls	r1, r1, #29
 8009c9e:	d502      	bpl.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80ae 	beq.w	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ca6:	4a84      	ldr	r2, [pc, #528]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009ca8:	6812      	ldr	r2, [r2, #0]
 8009caa:	05d0      	lsls	r0, r2, #23
 8009cac:	d503      	bpl.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8009cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cb2:	f000 80ff 	beq.w	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cb6:	4a80      	ldr	r2, [pc, #512]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009cb8:	6812      	ldr	r2, [r2, #0]
 8009cba:	0391      	lsls	r1, r2, #14
 8009cbc:	d502      	bpl.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8009cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cc2:	d0d8      	beq.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (srcclk)
 8009cc4:	2000      	movs	r0, #0
}
 8009cc6:	b005      	add	sp, #20
 8009cc8:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d04c      	beq.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	d1f7      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cd4:	6810      	ldr	r0, [r2, #0]
 8009cd6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009cda:	d010      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cdc:	a801      	add	r0, sp, #4
 8009cde:	f7ff fd93 	bl	8009808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ce2:	9801      	ldr	r0, [sp, #4]
 8009ce4:	e00b      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009ce6:	4a74      	ldr	r2, [pc, #464]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009ce8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009cea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf2:	d061      	beq.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8009cf4:	d937      	bls.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8009cf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cfa:	d179      	bne.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009cfc:	4870      	ldr	r0, [pc, #448]	; (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
}
 8009cfe:	b005      	add	sp, #20
 8009d00:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009d04:	4b6c      	ldr	r3, [pc, #432]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d08:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d8d9      	bhi.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8009d10:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8009d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d16:	bf00      	nop
 8009d18:	08009d7d 	.word	0x08009d7d
 8009d1c:	08009da1 	.word	0x08009da1
 8009d20:	08009d8d 	.word	0x08009d8d
 8009d24:	08009cfd 	.word	0x08009cfd
 8009d28:	08009d89 	.word	0x08009d89
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009d2c:	4a62      	ldr	r2, [pc, #392]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009d2e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d30:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d38:	d03e      	beq.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8009d3a:	d937      	bls.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8009d3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d40:	d0dc      	beq.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009d42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d46:	d1bd      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d48:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d4a:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d50:	0752      	lsls	r2, r2, #29
 8009d52:	d5a8      	bpl.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1a6      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d58:	4b57      	ldr	r3, [pc, #348]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009d5a:	485a      	ldr	r0, [pc, #360]	; (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009d62:	40d8      	lsrs	r0, r3
 8009d64:	e7cb      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d146      	bne.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d6a:	6810      	ldr	r0, [r2, #0]
 8009d6c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009d70:	d0c5      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d72:	a801      	add	r0, sp, #4
 8009d74:	f7ff fea0 	bl	8009ab8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d78:	9802      	ldr	r0, [sp, #8]
 8009d7a:	e7c0      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d7c:	4b4e      	ldr	r3, [pc, #312]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009d84:	d0bb      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8009d86:	e7f4      	b.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d88:	4a4b      	ldr	r2, [pc, #300]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009d8a:	e783      	b.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d8c:	4b4a      	ldr	r3, [pc, #296]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009d8e:	6818      	ldr	r0, [r3, #0]
 8009d90:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009d94:	d0b3      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d96:	a801      	add	r0, sp, #4
 8009d98:	f7ff fde2 	bl	8009960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d9c:	9801      	ldr	r0, [sp, #4]
 8009d9e:	e7ae      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009da0:	4b45      	ldr	r3, [pc, #276]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009da8:	d0a9      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8009daa:	e797      	b.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      switch (saiclocksource)
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0dc      	beq.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009db4:	d08e      	beq.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8009db6:	e785      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009db8:	6810      	ldr	r0, [r2, #0]
 8009dba:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009dbe:	d09e      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8009dc0:	e7e9      	b.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009dc2:	4a3d      	ldr	r2, [pc, #244]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009dc4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009dc6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dce:	d0f3      	beq.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8009dd0:	d806      	bhi.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0c9      	beq.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dda:	f43f af7b 	beq.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8009dde:	e771      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8009de0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009de4:	d08a      	beq.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009de6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dea:	f43f af53 	beq.w	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8009dee:	e769      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      switch (srcclk)
 8009df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009df4:	d0a8      	beq.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009df6:	e765      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8009df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfc:	f43f af6a 	beq.w	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8009e00:	e760      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e02:	6813      	ldr	r3, [r2, #0]
 8009e04:	482f      	ldr	r0, [pc, #188]	; (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e06:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009e0a:	40d8      	lsrs	r0, r3
 8009e0c:	e777      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009e0e:	4a2a      	ldr	r2, [pc, #168]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009e10:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e12:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8009e16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e1a:	d06e      	beq.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8009e1c:	d83c      	bhi.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 8009e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e22:	d05f      	beq.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8009e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e28:	d127      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e2a:	4b23      	ldr	r3, [pc, #140]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009e32:	f43f af64 	beq.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e36:	a801      	add	r0, sp, #4
 8009e38:	f7ff fd92 	bl	8009960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e3c:	9802      	ldr	r0, [sp, #8]
 8009e3e:	e75e      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009e40:	4a1d      	ldr	r2, [pc, #116]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009e42:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8009e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e4c:	d040      	beq.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e52:	f43f af79 	beq.w	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f47f af34 	bne.w	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8009e5c:	e73a      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009e5e:	4b16      	ldr	r3, [pc, #88]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8009e62:	03d2      	lsls	r2, r2, #15
 8009e64:	d58b      	bpl.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009e6c:	f43f af47 	beq.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e70:	a801      	add	r0, sp, #4
 8009e72:	f7ff fcc9 	bl	8009808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e76:	9803      	ldr	r0, [sp, #12]
 8009e78:	e741      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f47f af22 	bne.w	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009e80:	f7fe fda4 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009e86:	4a10      	ldr	r2, [pc, #64]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009e8e:	5cd3      	ldrb	r3, [r2, r3]
 8009e90:	f003 031f 	and.w	r3, r3, #31
 8009e94:	40d8      	lsrs	r0, r3
          break;
 8009e96:	e732      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 8009e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e9c:	d004      	beq.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8009e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ea2:	f43f aee3 	beq.w	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8009ea6:	e70d      	b.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ea8:	4b03      	ldr	r3, [pc, #12]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8009eb0:	f43f af25 	beq.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = CSI_VALUE;
 8009eb4:	4805      	ldr	r0, [pc, #20]	; (8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009eb6:	e722      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8009eb8:	58024400 	.word	0x58024400
 8009ebc:	017d7840 	.word	0x017d7840
 8009ec0:	00bb8000 	.word	0x00bb8000
 8009ec4:	03d09000 	.word	0x03d09000
 8009ec8:	080187bc 	.word	0x080187bc
 8009ecc:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ed0:	6810      	ldr	r0, [r2, #0]
 8009ed2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009ed6:	f43f af12 	beq.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eda:	a801      	add	r0, sp, #4
 8009edc:	f7ff fd40 	bl	8009960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009ee0:	9803      	ldr	r0, [sp, #12]
 8009ee2:	e70c      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ee4:	4b08      	ldr	r3, [pc, #32]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009eec:	f43f af07 	beq.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ef0:	a801      	add	r0, sp, #4
 8009ef2:	f7ff fc89 	bl	8009808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ef6:	9802      	ldr	r0, [sp, #8]
 8009ef8:	e701      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009efa:	6810      	ldr	r0, [r2, #0]
 8009efc:	f010 0004 	ands.w	r0, r0, #4
 8009f00:	f43f aefd 	beq.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8009f04:	e728      	b.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8009f06:	bf00      	nop
 8009f08:	58024400 	.word	0x58024400

08009f0c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f000 80a5 	beq.w	800a05c <HAL_TIM_Base_Init+0x150>
{
 8009f12:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009f18:	4604      	mov	r4, r0
 8009f1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d076      	beq.n	800a010 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f22:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009f24:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f26:	494e      	ldr	r1, [pc, #312]	; (800a060 <HAL_TIM_Base_Init+0x154>)
 8009f28:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8009f2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f30:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8009f34:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f36:	fab1 f181 	clz	r1, r1
 8009f3a:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8009f3e:	d027      	beq.n	8009f90 <HAL_TIM_Base_Init+0x84>
 8009f40:	bb31      	cbnz	r1, 8009f90 <HAL_TIM_Base_Init+0x84>
 8009f42:	4848      	ldr	r0, [pc, #288]	; (800a064 <HAL_TIM_Base_Init+0x158>)
 8009f44:	4d48      	ldr	r5, [pc, #288]	; (800a068 <HAL_TIM_Base_Init+0x15c>)
 8009f46:	4282      	cmp	r2, r0
 8009f48:	d067      	beq.n	800a01a <HAL_TIM_Base_Init+0x10e>
 8009f4a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009f4e:	4282      	cmp	r2, r0
 8009f50:	d063      	beq.n	800a01a <HAL_TIM_Base_Init+0x10e>
 8009f52:	1b55      	subs	r5, r2, r5
 8009f54:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009f58:	fab5 f585 	clz	r5, r5
 8009f5c:	4282      	cmp	r2, r0
 8009f5e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8009f62:	d063      	beq.n	800a02c <HAL_TIM_Base_Init+0x120>
 8009f64:	2d00      	cmp	r5, #0
 8009f66:	d161      	bne.n	800a02c <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f68:	4840      	ldr	r0, [pc, #256]	; (800a06c <HAL_TIM_Base_Init+0x160>)
 8009f6a:	4941      	ldr	r1, [pc, #260]	; (800a070 <HAL_TIM_Base_Init+0x164>)
 8009f6c:	428a      	cmp	r2, r1
 8009f6e:	bf18      	it	ne
 8009f70:	4282      	cmpne	r2, r0
 8009f72:	d065      	beq.n	800a040 <HAL_TIM_Base_Init+0x134>
 8009f74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009f78:	428a      	cmp	r2, r1
 8009f7a:	d061      	beq.n	800a040 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f7c:	69a0      	ldr	r0, [r4, #24]
 8009f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f82:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f84:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8009f86:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f88:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f8a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f8c:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f8e:	e023      	b.n	8009fd8 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f90:	4d35      	ldr	r5, [pc, #212]	; (800a068 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009f96:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f98:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8009f9a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f9c:	fab5 f585 	clz	r5, r5
 8009fa0:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fa2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fa8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009faa:	69a0      	ldr	r0, [r4, #24]
 8009fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fb0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8009fb2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fb4:	68e3      	ldr	r3, [r4, #12]
 8009fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009fb8:	6863      	ldr	r3, [r4, #4]
 8009fba:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fbc:	b951      	cbnz	r1, 8009fd4 <HAL_TIM_Base_Init+0xc8>
 8009fbe:	b94d      	cbnz	r5, 8009fd4 <HAL_TIM_Base_Init+0xc8>
 8009fc0:	492a      	ldr	r1, [pc, #168]	; (800a06c <HAL_TIM_Base_Init+0x160>)
 8009fc2:	4b2b      	ldr	r3, [pc, #172]	; (800a070 <HAL_TIM_Base_Init+0x164>)
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	bf18      	it	ne
 8009fc8:	428a      	cmpne	r2, r1
 8009fca:	d003      	beq.n	8009fd4 <HAL_TIM_Base_Init+0xc8>
 8009fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d101      	bne.n	8009fd8 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fd4:	6963      	ldr	r3, [r4, #20]
 8009fd6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fd8:	2301      	movs	r3, #1
  return HAL_OK;
 8009fda:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8009fdc:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fde:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fe2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009fe6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009fea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009fee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009ff2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ffa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009ffe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a002:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a006:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a00a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800a010:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a014:	f7f9 fede 	bl	8003dd4 <HAL_TIM_Base_MspInit>
 800a018:	e783      	b.n	8009f22 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a01a:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a01c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a020:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a022:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800a026:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a028:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a02a:	e7ba      	b.n	8009fa2 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800a02c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a032:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a034:	480f      	ldr	r0, [pc, #60]	; (800a074 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a036:	4282      	cmp	r2, r0
 800a038:	d0b3      	beq.n	8009fa2 <HAL_TIM_Base_Init+0x96>
 800a03a:	2d00      	cmp	r5, #0
 800a03c:	d1b1      	bne.n	8009fa2 <HAL_TIM_Base_Init+0x96>
 800a03e:	e793      	b.n	8009f68 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a040:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a046:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a048:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a04a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a04c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a050:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800a052:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800a054:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a056:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a058:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a05a:	e7b1      	b.n	8009fc0 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800a05c:	2001      	movs	r0, #1
}
 800a05e:	4770      	bx	lr
 800a060:	40010000 	.word	0x40010000
 800a064:	40000400 	.word	0x40000400
 800a068:	40010400 	.word	0x40010400
 800a06c:	40014000 	.word	0x40014000
 800a070:	40014400 	.word	0x40014400
 800a074:	40000c00 	.word	0x40000c00

0800a078 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a078:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d13d      	bne.n	800a0fc <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a080:	6802      	ldr	r2, [r0, #0]
 800a082:	4b23      	ldr	r3, [pc, #140]	; (800a110 <HAL_TIM_Base_Start+0x98>)
 800a084:	4923      	ldr	r1, [pc, #140]	; (800a114 <HAL_TIM_Base_Start+0x9c>)
 800a086:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a08a:	bf18      	it	ne
 800a08c:	429a      	cmpne	r2, r3
{
 800a08e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a090:	bf0c      	ite	eq
 800a092:	2301      	moveq	r3, #1
 800a094:	2300      	movne	r3, #0
 800a096:	4d20      	ldr	r5, [pc, #128]	; (800a118 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a098:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a09a:	42aa      	cmp	r2, r5
 800a09c:	bf08      	it	eq
 800a09e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a6:	4c1d      	ldr	r4, [pc, #116]	; (800a11c <HAL_TIM_Base_Start+0xa4>)
 800a0a8:	428a      	cmp	r2, r1
 800a0aa:	bf08      	it	eq
 800a0ac:	f043 0301 	orreq.w	r3, r3, #1
 800a0b0:	481b      	ldr	r0, [pc, #108]	; (800a120 <HAL_TIM_Base_Start+0xa8>)
 800a0b2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a0b6:	42a2      	cmp	r2, r4
 800a0b8:	bf08      	it	eq
 800a0ba:	f043 0301 	orreq.w	r3, r3, #1
 800a0be:	4282      	cmp	r2, r0
 800a0c0:	bf08      	it	eq
 800a0c2:	f043 0301 	orreq.w	r3, r3, #1
 800a0c6:	428a      	cmp	r2, r1
 800a0c8:	bf08      	it	eq
 800a0ca:	f043 0301 	orreq.w	r3, r3, #1
 800a0ce:	b933      	cbnz	r3, 800a0de <HAL_TIM_Base_Start+0x66>
 800a0d0:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800a0d4:	1a10      	subs	r0, r2, r0
 800a0d6:	fab0 f080 	clz	r0, r0
 800a0da:	0940      	lsrs	r0, r0, #5
 800a0dc:	b198      	cbz	r0, 800a106 <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0de:	6891      	ldr	r1, [r2, #8]
 800a0e0:	4b10      	ldr	r3, [pc, #64]	; (800a124 <HAL_TIM_Base_Start+0xac>)
 800a0e2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0e4:	2b06      	cmp	r3, #6
 800a0e6:	d00b      	beq.n	800a100 <HAL_TIM_Base_Start+0x88>
 800a0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ec:	d008      	beq.n	800a100 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800a0ee:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a0f0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a0f2:	f043 0301 	orr.w	r3, r3, #1
 800a0f6:	6013      	str	r3, [r2, #0]
}
 800a0f8:	bc30      	pop	{r4, r5}
 800a0fa:	4770      	bx	lr
    return HAL_ERROR;
 800a0fc:	2001      	movs	r0, #1
}
 800a0fe:	4770      	bx	lr
  return HAL_OK;
 800a100:	2000      	movs	r0, #0
}
 800a102:	bc30      	pop	{r4, r5}
 800a104:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a106:	6813      	ldr	r3, [r2, #0]
 800a108:	f043 0301 	orr.w	r3, r3, #1
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	e7f3      	b.n	800a0f8 <HAL_TIM_Base_Start+0x80>
 800a110:	40010000 	.word	0x40010000
 800a114:	40000800 	.word	0x40000800
 800a118:	40000400 	.word	0x40000400
 800a11c:	40000c00 	.word	0x40000c00
 800a120:	40010400 	.word	0x40010400
 800a124:	00010007 	.word	0x00010007

0800a128 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a128:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d141      	bne.n	800a1b4 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a130:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a132:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a134:	4b24      	ldr	r3, [pc, #144]	; (800a1c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800a136:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a13a:	bf18      	it	ne
 800a13c:	429a      	cmpne	r2, r3
{
 800a13e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a140:	bf0c      	ite	eq
 800a142:	2301      	moveq	r3, #1
 800a144:	2300      	movne	r3, #0
 800a146:	4d21      	ldr	r5, [pc, #132]	; (800a1cc <HAL_TIM_Base_Start_IT+0xa4>)
 800a148:	4c21      	ldr	r4, [pc, #132]	; (800a1d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800a14a:	42aa      	cmp	r2, r5
 800a14c:	bf08      	it	eq
 800a14e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a152:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a156:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a158:	42a2      	cmp	r2, r4
 800a15a:	bf08      	it	eq
 800a15c:	f043 0301 	orreq.w	r3, r3, #1
 800a160:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a164:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a168:	481a      	ldr	r0, [pc, #104]	; (800a1d4 <HAL_TIM_Base_Start_IT+0xac>)
 800a16a:	42a2      	cmp	r2, r4
 800a16c:	bf08      	it	eq
 800a16e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a172:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a174:	4282      	cmp	r2, r0
 800a176:	bf08      	it	eq
 800a178:	f043 0301 	orreq.w	r3, r3, #1
 800a17c:	4916      	ldr	r1, [pc, #88]	; (800a1d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800a17e:	428a      	cmp	r2, r1
 800a180:	bf08      	it	eq
 800a182:	f043 0301 	orreq.w	r3, r3, #1
 800a186:	b933      	cbnz	r3, 800a196 <HAL_TIM_Base_Start_IT+0x6e>
 800a188:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800a18c:	1a10      	subs	r0, r2, r0
 800a18e:	fab0 f080 	clz	r0, r0
 800a192:	0940      	lsrs	r0, r0, #5
 800a194:	b198      	cbz	r0, 800a1be <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a196:	6891      	ldr	r1, [r2, #8]
 800a198:	4b10      	ldr	r3, [pc, #64]	; (800a1dc <HAL_TIM_Base_Start_IT+0xb4>)
 800a19a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a19c:	2b06      	cmp	r3, #6
 800a19e:	d00b      	beq.n	800a1b8 <HAL_TIM_Base_Start_IT+0x90>
 800a1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1a4:	d008      	beq.n	800a1b8 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800a1a6:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a1a8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a1aa:	f043 0301 	orr.w	r3, r3, #1
 800a1ae:	6013      	str	r3, [r2, #0]
}
 800a1b0:	bc30      	pop	{r4, r5}
 800a1b2:	4770      	bx	lr
    return HAL_ERROR;
 800a1b4:	2001      	movs	r0, #1
}
 800a1b6:	4770      	bx	lr
  return HAL_OK;
 800a1b8:	2000      	movs	r0, #0
}
 800a1ba:	bc30      	pop	{r4, r5}
 800a1bc:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a1be:	6813      	ldr	r3, [r2, #0]
 800a1c0:	f043 0301 	orr.w	r3, r3, #1
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	e7f3      	b.n	800a1b0 <HAL_TIM_Base_Start_IT+0x88>
 800a1c8:	40010000 	.word	0x40010000
 800a1cc:	40000400 	.word	0x40000400
 800a1d0:	40000800 	.word	0x40000800
 800a1d4:	40010400 	.word	0x40010400
 800a1d8:	40001800 	.word	0x40001800
 800a1dc:	00010007 	.word	0x00010007

0800a1e0 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	f000 80cc 	beq.w	800a37e <HAL_TIM_Encoder_Init+0x19e>
{
 800a1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800a1e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 809b 	beq.w	800a330 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a1fa:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a1fc:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a1fe:	4a61      	ldr	r2, [pc, #388]	; (800a384 <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a200:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a208:	6899      	ldr	r1, [r3, #8]
 800a20a:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a20e:	495e      	ldr	r1, [pc, #376]	; (800a388 <HAL_TIM_Encoder_Init+0x1a8>)
 800a210:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a214:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800a216:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a218:	fab1 f181 	clz	r1, r1
 800a21c:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800a220:	d02b      	beq.n	800a27a <HAL_TIM_Encoder_Init+0x9a>
 800a222:	bb51      	cbnz	r1, 800a27a <HAL_TIM_Encoder_Init+0x9a>
 800a224:	4859      	ldr	r0, [pc, #356]	; (800a38c <HAL_TIM_Encoder_Init+0x1ac>)
 800a226:	4283      	cmp	r3, r0
 800a228:	f000 8087 	beq.w	800a33a <HAL_TIM_Encoder_Init+0x15a>
 800a22c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a230:	4283      	cmp	r3, r0
 800a232:	f000 8082 	beq.w	800a33a <HAL_TIM_Encoder_Init+0x15a>
 800a236:	4e56      	ldr	r6, [pc, #344]	; (800a390 <HAL_TIM_Encoder_Init+0x1b0>)
 800a238:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a23c:	1b9e      	subs	r6, r3, r6
 800a23e:	4283      	cmp	r3, r0
 800a240:	fab6 f686 	clz	r6, r6
 800a244:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800a248:	f000 8081 	beq.w	800a34e <HAL_TIM_Encoder_Init+0x16e>
 800a24c:	2e00      	cmp	r6, #0
 800a24e:	d17e      	bne.n	800a34e <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a250:	4850      	ldr	r0, [pc, #320]	; (800a394 <HAL_TIM_Encoder_Init+0x1b4>)
 800a252:	4951      	ldr	r1, [pc, #324]	; (800a398 <HAL_TIM_Encoder_Init+0x1b8>)
 800a254:	428b      	cmp	r3, r1
 800a256:	bf18      	it	ne
 800a258:	4283      	cmpne	r3, r0
 800a25a:	f000 8082 	beq.w	800a362 <HAL_TIM_Encoder_Init+0x182>
 800a25e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a262:	428b      	cmp	r3, r1
 800a264:	d07d      	beq.n	800a362 <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a266:	69a1      	ldr	r1, [r4, #24]
 800a268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a26c:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a26e:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800a270:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800a272:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a274:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a276:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a278:	e023      	b.n	800a2c2 <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a27a:	4e45      	ldr	r6, [pc, #276]	; (800a390 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a27c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a280:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a282:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800a284:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a286:	fab6 f686 	clz	r6, r6
 800a28a:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a28c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a28e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a292:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a294:	69a0      	ldr	r0, [r4, #24]
 800a296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a29a:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800a29c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a29e:	68e2      	ldr	r2, [r4, #12]
 800a2a0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a2a2:	6862      	ldr	r2, [r4, #4]
 800a2a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2a6:	b951      	cbnz	r1, 800a2be <HAL_TIM_Encoder_Init+0xde>
 800a2a8:	b94e      	cbnz	r6, 800a2be <HAL_TIM_Encoder_Init+0xde>
 800a2aa:	493a      	ldr	r1, [pc, #232]	; (800a394 <HAL_TIM_Encoder_Init+0x1b4>)
 800a2ac:	4a3a      	ldr	r2, [pc, #232]	; (800a398 <HAL_TIM_Encoder_Init+0x1b8>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	bf18      	it	ne
 800a2b2:	428b      	cmpne	r3, r1
 800a2b4:	d003      	beq.n	800a2be <HAL_TIM_Encoder_Init+0xde>
 800a2b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d101      	bne.n	800a2c2 <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800a2be:	6962      	ldr	r2, [r4, #20]
 800a2c0:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a2c2:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800a2c4:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a2c6:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a2c8:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a2cc:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800a2ce:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a2d0:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a2d4:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800a2d6:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a2d8:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800a2dc:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a2de:	492f      	ldr	r1, [pc, #188]	; (800a39c <HAL_TIM_Encoder_Init+0x1bc>)
 800a2e0:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a2e2:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a2e4:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a2e8:	68e9      	ldr	r1, [r5, #12]
 800a2ea:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800a2ec:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a2ee:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a2f2:	6a29      	ldr	r1, [r5, #32]
 800a2f4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a2f8:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800a2fa:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a2fc:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800a300:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a302:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800a306:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a308:	4825      	ldr	r0, [pc, #148]	; (800a3a0 <HAL_TIM_Encoder_Init+0x1c0>)
 800a30a:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a30e:	4302      	orrs	r2, r0
  return HAL_OK;
 800a310:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800a312:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800a314:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a316:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a31a:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a31e:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a322:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a326:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a32a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800a32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800a330:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800a334:	f7f9 fdac 	bl	8003e90 <HAL_TIM_Encoder_MspInit>
 800a338:	e75f      	b.n	800a1fa <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a33a:	4e15      	ldr	r6, [pc, #84]	; (800a390 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a33c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a340:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a342:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800a344:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a346:	fab6 f686 	clz	r6, r6
 800a34a:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a34c:	e79e      	b.n	800a28c <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800a34e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a350:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a354:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a356:	4813      	ldr	r0, [pc, #76]	; (800a3a4 <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a358:	4283      	cmp	r3, r0
 800a35a:	d097      	beq.n	800a28c <HAL_TIM_Encoder_Init+0xac>
 800a35c:	2e00      	cmp	r6, #0
 800a35e:	d195      	bne.n	800a28c <HAL_TIM_Encoder_Init+0xac>
 800a360:	e776      	b.n	800a250 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a362:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a364:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a368:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a36a:	69a1      	ldr	r1, [r4, #24]
 800a36c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a370:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a372:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800a374:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800a376:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a378:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a37a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a37c:	e795      	b.n	800a2aa <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800a37e:	2001      	movs	r0, #1
}
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	fffebff8 	.word	0xfffebff8
 800a388:	40010000 	.word	0x40010000
 800a38c:	40000400 	.word	0x40000400
 800a390:	40010400 	.word	0x40010400
 800a394:	40014000 	.word	0x40014000
 800a398:	40014400 	.word	0x40014400
 800a39c:	fffffcfc 	.word	0xfffffcfc
 800a3a0:	ffff0303 	.word	0xffff0303
 800a3a4:	40000c00 	.word	0x40000c00

0800a3a8 <HAL_TIM_Encoder_Start>:
{
 800a3a8:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a3aa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a3ae:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a3b2:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a3b6:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a3b8:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a3bc:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800a3be:	b9c1      	cbnz	r1, 800a3f2 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d123      	bne.n	800a40c <HAL_TIM_Encoder_Start+0x64>
 800a3c4:	2a01      	cmp	r2, #1
 800a3c6:	d121      	bne.n	800a40c <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a3c8:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3d0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3d4:	6a13      	ldr	r3, [r2, #32]
 800a3d6:	f023 0301 	bic.w	r3, r3, #1
 800a3da:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3dc:	6a13      	ldr	r3, [r2, #32]
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800a3e4:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a3e6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800a3e8:	f043 0301 	orr.w	r3, r3, #1
 800a3ec:	6013      	str	r3, [r2, #0]
}
 800a3ee:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800a3f2:	2904      	cmp	r1, #4
 800a3f4:	fa5f fc8c 	uxtb.w	ip, ip
 800a3f8:	fa5f fe8e 	uxtb.w	lr, lr
 800a3fc:	d027      	beq.n	800a44e <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d104      	bne.n	800a40c <HAL_TIM_Encoder_Start+0x64>
 800a402:	f1bc 0f01 	cmp.w	ip, #1
 800a406:	d101      	bne.n	800a40c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a408:	2a01      	cmp	r2, #1
 800a40a:	d002      	beq.n	800a412 <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800a40c:	2001      	movs	r0, #1
}
 800a40e:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a412:	f1be 0f01 	cmp.w	lr, #1
 800a416:	d1f9      	bne.n	800a40c <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a418:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a41a:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a41c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a420:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a424:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a428:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a42c:	6a13      	ldr	r3, [r2, #32]
 800a42e:	f023 0301 	bic.w	r3, r3, #1
 800a432:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a434:	6a13      	ldr	r3, [r2, #32]
 800a436:	f043 0301 	orr.w	r3, r3, #1
 800a43a:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800a43c:	6a13      	ldr	r3, [r2, #32]
 800a43e:	f023 0310 	bic.w	r3, r3, #16
 800a442:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a444:	6a13      	ldr	r3, [r2, #32]
 800a446:	f043 0310 	orr.w	r3, r3, #16
 800a44a:	6213      	str	r3, [r2, #32]
}
 800a44c:	e7ca      	b.n	800a3e4 <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a44e:	f1bc 0f01 	cmp.w	ip, #1
 800a452:	d1db      	bne.n	800a40c <HAL_TIM_Encoder_Start+0x64>
 800a454:	f1be 0f01 	cmp.w	lr, #1
 800a458:	d1d8      	bne.n	800a40c <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a45a:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a45c:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a45e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a462:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a466:	e7e9      	b.n	800a43c <HAL_TIM_Encoder_Start+0x94>

0800a468 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a468:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	f000 8081 	beq.w	800a574 <HAL_TIM_ConfigClockSource+0x10c>
 800a472:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800a474:	2302      	movs	r3, #2
{
 800a476:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 800a478:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800a47a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a47c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800a480:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a484:	4b5a      	ldr	r3, [pc, #360]	; (800a5f0 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800a486:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a488:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800a48a:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800a48c:	680b      	ldr	r3, [r1, #0]
 800a48e:	2b70      	cmp	r3, #112	; 0x70
 800a490:	f000 809c 	beq.w	800a5cc <HAL_TIM_ConfigClockSource+0x164>
 800a494:	d825      	bhi.n	800a4e2 <HAL_TIM_ConfigClockSource+0x7a>
 800a496:	2b50      	cmp	r3, #80	; 0x50
 800a498:	d06e      	beq.n	800a578 <HAL_TIM_ConfigClockSource+0x110>
 800a49a:	d939      	bls.n	800a510 <HAL_TIM_ConfigClockSource+0xa8>
 800a49c:	2b60      	cmp	r3, #96	; 0x60
 800a49e:	d118      	bne.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4a0:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4a2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4a4:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4a8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4aa:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ac:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800a4ae:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4b4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800a4b8:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4ba:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800a4be:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4c0:	4b4c      	ldr	r3, [pc, #304]	; (800a5f4 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4c2:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 800a4c6:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800a4c8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4ca:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4cc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a4d0:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800a4d2:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800a4d4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a4d6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a4da:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a4de:	bc70      	pop	{r4, r5, r6}
 800a4e0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800a4e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4e6:	d060      	beq.n	800a5aa <HAL_TIM_ConfigClockSource+0x142>
 800a4e8:	d933      	bls.n	800a552 <HAL_TIM_ConfigClockSource+0xea>
 800a4ea:	4943      	ldr	r1, [pc, #268]	; (800a5f8 <HAL_TIM_ConfigClockSource+0x190>)
 800a4ec:	428b      	cmp	r3, r1
 800a4ee:	d006      	beq.n	800a4fe <HAL_TIM_ConfigClockSource+0x96>
 800a4f0:	d929      	bls.n	800a546 <HAL_TIM_ConfigClockSource+0xde>
 800a4f2:	4942      	ldr	r1, [pc, #264]	; (800a5fc <HAL_TIM_ConfigClockSource+0x194>)
 800a4f4:	428b      	cmp	r3, r1
 800a4f6:	d002      	beq.n	800a4fe <HAL_TIM_ConfigClockSource+0x96>
 800a4f8:	3110      	adds	r1, #16
 800a4fa:	428b      	cmp	r3, r1
 800a4fc:	d1e9      	bne.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800a4fe:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a500:	493c      	ldr	r1, [pc, #240]	; (800a5f4 <HAL_TIM_ConfigClockSource+0x18c>)
 800a502:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800a504:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a506:	430b      	orrs	r3, r1
 800a508:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800a50c:	60a3      	str	r3, [r4, #8]
}
 800a50e:	e7e0      	b.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800a510:	2b40      	cmp	r3, #64	; 0x40
 800a512:	d123      	bne.n	800a55c <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800a514:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a516:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a518:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a51a:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a51e:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a522:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800a524:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800a526:	4b33      	ldr	r3, [pc, #204]	; (800a5f4 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a528:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a52a:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a52c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a530:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a534:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800a536:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a538:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800a53a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a53c:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a53e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a542:	60a3      	str	r3, [r4, #8]
}
 800a544:	e7c5      	b.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800a546:	f023 0110 	bic.w	r1, r3, #16
 800a54a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a54e:	d1c0      	bne.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
 800a550:	e7d5      	b.n	800a4fe <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800a552:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800a556:	bf18      	it	ne
 800a558:	2001      	movne	r0, #1
 800a55a:	e7ba      	b.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800a55c:	d8b9      	bhi.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
 800a55e:	2b20      	cmp	r3, #32
 800a560:	d0cd      	beq.n	800a4fe <HAL_TIM_ConfigClockSource+0x96>
 800a562:	d903      	bls.n	800a56c <HAL_TIM_ConfigClockSource+0x104>
 800a564:	2b30      	cmp	r3, #48	; 0x30
 800a566:	d0ca      	beq.n	800a4fe <HAL_TIM_ConfigClockSource+0x96>
 800a568:	2001      	movs	r0, #1
 800a56a:	e7b2      	b.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
 800a56c:	f033 0110 	bics.w	r1, r3, #16
 800a570:	d1af      	bne.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
 800a572:	e7c4      	b.n	800a4fe <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800a574:	2002      	movs	r0, #2
}
 800a576:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800a578:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a57a:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a57c:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a57e:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a582:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a586:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800a588:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800a58a:	4b1a      	ldr	r3, [pc, #104]	; (800a5f4 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a58c:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a58e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a590:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a594:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a598:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800a59a:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a59c:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800a59e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5a0:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5a2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800a5a6:	60a3      	str	r3, [r4, #8]
}
 800a5a8:	e793      	b.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5aa:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800a5ae:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5b0:	432b      	orrs	r3, r5
 800a5b2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5b4:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800a5b8:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a5be:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800a5c0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5c2:	68a3      	ldr	r3, [r4, #8]
 800a5c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5c8:	60a3      	str	r3, [r4, #8]
      break;
 800a5ca:	e782      	b.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5cc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800a5d0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5d2:	432b      	orrs	r3, r5
 800a5d4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5d6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800a5da:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a5e0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800a5e2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800a5e4:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a5ea:	60a3      	str	r3, [r4, #8]
      break;
 800a5ec:	e771      	b.n	800a4d2 <HAL_TIM_ConfigClockSource+0x6a>
 800a5ee:	bf00      	nop
 800a5f0:	ffce0088 	.word	0xffce0088
 800a5f4:	ffcfff8f 	.word	0xffcfff8f
 800a5f8:	00100020 	.word	0x00100020
 800a5fc:	00100030 	.word	0x00100030

0800a600 <HAL_TIM_OC_DelayElapsedCallback>:
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop

0800a604 <HAL_TIM_IC_CaptureCallback>:
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop

0800a608 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop

0800a60c <HAL_TIM_TriggerCallback>:
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a610:	6803      	ldr	r3, [r0, #0]
 800a612:	691a      	ldr	r2, [r3, #16]
 800a614:	0791      	lsls	r1, r2, #30
{
 800a616:	b510      	push	{r4, lr}
 800a618:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a61a:	d502      	bpl.n	800a622 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a61c:	68da      	ldr	r2, [r3, #12]
 800a61e:	0792      	lsls	r2, r2, #30
 800a620:	d468      	bmi.n	800a6f4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a622:	691a      	ldr	r2, [r3, #16]
 800a624:	0752      	lsls	r2, r2, #29
 800a626:	d502      	bpl.n	800a62e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	0750      	lsls	r0, r2, #29
 800a62c:	d44f      	bmi.n	800a6ce <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a62e:	691a      	ldr	r2, [r3, #16]
 800a630:	0711      	lsls	r1, r2, #28
 800a632:	d502      	bpl.n	800a63a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	0712      	lsls	r2, r2, #28
 800a638:	d437      	bmi.n	800a6aa <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	06d0      	lsls	r0, r2, #27
 800a63e:	d502      	bpl.n	800a646 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	06d1      	lsls	r1, r2, #27
 800a644:	d41e      	bmi.n	800a684 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	07d2      	lsls	r2, r2, #31
 800a64a:	d502      	bpl.n	800a652 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	07d0      	lsls	r0, r2, #31
 800a650:	d469      	bmi.n	800a726 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a652:	691a      	ldr	r2, [r3, #16]
 800a654:	0611      	lsls	r1, r2, #24
 800a656:	d502      	bpl.n	800a65e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	0612      	lsls	r2, r2, #24
 800a65c:	d46b      	bmi.n	800a736 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a65e:	691a      	ldr	r2, [r3, #16]
 800a660:	05d0      	lsls	r0, r2, #23
 800a662:	d502      	bpl.n	800a66a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a664:	68da      	ldr	r2, [r3, #12]
 800a666:	0611      	lsls	r1, r2, #24
 800a668:	d46d      	bmi.n	800a746 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a66a:	691a      	ldr	r2, [r3, #16]
 800a66c:	0652      	lsls	r2, r2, #25
 800a66e:	d502      	bpl.n	800a676 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a670:	68da      	ldr	r2, [r3, #12]
 800a672:	0650      	lsls	r0, r2, #25
 800a674:	d46f      	bmi.n	800a756 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	0691      	lsls	r1, r2, #26
 800a67a:	d502      	bpl.n	800a682 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	0692      	lsls	r2, r2, #26
 800a680:	d449      	bmi.n	800a716 <HAL_TIM_IRQHandler+0x106>
}
 800a682:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a684:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a688:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800a68a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a68c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a68e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a696:	d16f      	bne.n	800a778 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a698:	f7ff ffb2 	bl	800a600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7ff ffb3 	bl	800a608 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a6a4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a6:	7722      	strb	r2, [r4, #28]
 800a6a8:	e7cd      	b.n	800a646 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6aa:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6ae:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800a6b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6b2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6b6:	69db      	ldr	r3, [r3, #28]
 800a6b8:	079b      	lsls	r3, r3, #30
 800a6ba:	d15a      	bne.n	800a772 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6bc:	f7ff ffa0 	bl	800a600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f7ff ffa1 	bl	800a608 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6c6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6c8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ca:	7722      	strb	r2, [r4, #28]
 800a6cc:	e7b5      	b.n	800a63a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6ce:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6d2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a6d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6d6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a6e0:	d144      	bne.n	800a76c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6e2:	f7ff ff8d 	bl	800a600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7ff ff8e 	bl	800a608 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ec:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6ee:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6f0:	7722      	strb	r2, [r4, #28]
 800a6f2:	e79c      	b.n	800a62e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6f4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6f8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6fa:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6fc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	0799      	lsls	r1, r3, #30
 800a702:	d130      	bne.n	800a766 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a704:	f7ff ff7c 	bl	800a600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a708:	4620      	mov	r0, r4
 800a70a:	f7ff ff7d 	bl	800a608 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a70e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a710:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a712:	7722      	strb	r2, [r4, #28]
 800a714:	e785      	b.n	800a622 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a716:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800a71a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a71c:	611a      	str	r2, [r3, #16]
}
 800a71e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a722:	f000 b887 	b.w	800a834 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a726:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800a72a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a72c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a72e:	f7f5 ffbf 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	e78d      	b.n	800a652 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a736:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800a73a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a73c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a73e:	f000 f87b 	bl	800a838 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	e78b      	b.n	800a65e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a746:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800a74a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a74c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a74e:	f000 f875 	bl	800a83c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	e789      	b.n	800a66a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a756:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800a75a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a75c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a75e:	f7ff ff55 	bl	800a60c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	e787      	b.n	800a676 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800a766:	f7ff ff4d 	bl	800a604 <HAL_TIM_IC_CaptureCallback>
 800a76a:	e7d0      	b.n	800a70e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800a76c:	f7ff ff4a 	bl	800a604 <HAL_TIM_IC_CaptureCallback>
 800a770:	e7bc      	b.n	800a6ec <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800a772:	f7ff ff47 	bl	800a604 <HAL_TIM_IC_CaptureCallback>
 800a776:	e7a6      	b.n	800a6c6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a778:	f7ff ff44 	bl	800a604 <HAL_TIM_IC_CaptureCallback>
 800a77c:	e791      	b.n	800a6a2 <HAL_TIM_IRQHandler+0x92>
 800a77e:	bf00      	nop

0800a780 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a780:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a784:	2b01      	cmp	r3, #1
 800a786:	d04b      	beq.n	800a820 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a788:	6803      	ldr	r3, [r0, #0]
 800a78a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800a78c:	2002      	movs	r0, #2
{
 800a78e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a790:	4d24      	ldr	r5, [pc, #144]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a792:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a796:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800a798:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a79a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a79c:	d029      	beq.n	800a7f2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800a79e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a7a2:	42ab      	cmp	r3, r5
 800a7a4:	d025      	beq.n	800a7f2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7a6:	4d20      	ldr	r5, [pc, #128]	; (800a828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7a8:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7ac:	42ab      	cmp	r3, r5
 800a7ae:	bf18      	it	ne
 800a7b0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800a7b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a7b8:	bf0c      	ite	eq
 800a7ba:	f04f 0c01 	moveq.w	ip, #1
 800a7be:	f04f 0c00 	movne.w	ip, #0
 800a7c2:	42ab      	cmp	r3, r5
 800a7c4:	bf08      	it	eq
 800a7c6:	f04c 0c01 	orreq.w	ip, ip, #1
 800a7ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a7ce:	42ab      	cmp	r3, r5
 800a7d0:	bf08      	it	eq
 800a7d2:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7d6:	680d      	ldr	r5, [r1, #0]
 800a7d8:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7da:	4d14      	ldr	r5, [pc, #80]	; (800a82c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800a7dc:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7de:	42ab      	cmp	r3, r5
 800a7e0:	bf14      	ite	ne
 800a7e2:	4660      	movne	r0, ip
 800a7e4:	f04c 0001 	orreq.w	r0, ip, #1
 800a7e8:	b960      	cbnz	r0, 800a804 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a7ea:	4811      	ldr	r0, [pc, #68]	; (800a830 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a7ec:	4283      	cmp	r3, r0
 800a7ee:	d009      	beq.n	800a804 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a7f0:	e00d      	b.n	800a80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7f2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7f4:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7f8:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7fa:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7fc:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a800:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800a802:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a804:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a806:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a80a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a80c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a80e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a810:	2101      	movs	r1, #1

  return HAL_OK;
 800a812:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800a814:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a818:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a81c:	bc30      	pop	{r4, r5}
 800a81e:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a820:	2002      	movs	r0, #2
}
 800a822:	4770      	bx	lr
 800a824:	40010000 	.word	0x40010000
 800a828:	40000400 	.word	0x40000400
 800a82c:	40001800 	.word	0x40001800
 800a830:	40014000 	.word	0x40014000

0800a834 <HAL_TIMEx_CommutCallback>:
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop

0800a838 <HAL_TIMEx_BreakCallback>:
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop

0800a83c <HAL_TIMEx_Break2Callback>:
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop

0800a840 <HAL_UART_TxCpltCallback>:
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop

0800a844 <HAL_UART_ErrorCallback>:
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop

0800a848 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a848:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a84a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a852:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a856:	f7ff fff5 	bl	800a844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a85a:	bd08      	pop	{r3, pc}

0800a85c <HAL_UARTEx_RxEventCallback>:
}
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop

0800a860 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a860:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a862:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a866:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800a868:	ea12 0f0c 	tst.w	r2, ip
{
 800a86c:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a86e:	681d      	ldr	r5, [r3, #0]
{
 800a870:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a872:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800a874:	f000 811c 	beq.w	800aab0 <HAL_UART_IRQHandler+0x250>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a878:	4eae      	ldr	r6, [pc, #696]	; (800ab34 <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a87a:	48af      	ldr	r0, [pc, #700]	; (800ab38 <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a87c:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a880:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a882:	ea5c 0600 	orrs.w	r6, ip, r0
 800a886:	f040 8086 	bne.w	800a996 <HAL_UART_IRQHandler+0x136>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a88a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a88c:	2801      	cmp	r0, #1
 800a88e:	d022      	beq.n	800a8d6 <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a890:	02d0      	lsls	r0, r2, #11
 800a892:	d502      	bpl.n	800a89a <HAL_UART_IRQHandler+0x3a>
 800a894:	024e      	lsls	r6, r1, #9
 800a896:	f100 8134 	bmi.w	800ab02 <HAL_UART_IRQHandler+0x2a2>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a89a:	0610      	lsls	r0, r2, #24
 800a89c:	d506      	bpl.n	800a8ac <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a89e:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a8a2:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a8a6:	4301      	orrs	r1, r0
 800a8a8:	f040 8123 	bne.w	800aaf2 <HAL_UART_IRQHandler+0x292>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a8ac:	0651      	lsls	r1, r2, #25
 800a8ae:	d564      	bpl.n	800a97a <HAL_UART_IRQHandler+0x11a>
 800a8b0:	066e      	lsls	r6, r5, #25
 800a8b2:	d562      	bpl.n	800a97a <HAL_UART_IRQHandler+0x11a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b4:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	e843 2100 	strex	r1, r2, [r3]
 800a8c0:	2900      	cmp	r1, #0
 800a8c2:	d1f7      	bne.n	800a8b4 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8c4:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8c6:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8c8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800a8ca:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800a8ce:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800a8d0:	f7ff ffb6 	bl	800a840 <HAL_UART_TxCpltCallback>
}
 800a8d4:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8d6:	06d0      	lsls	r0, r2, #27
 800a8d8:	d5da      	bpl.n	800a890 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8da:	06ee      	lsls	r6, r5, #27
 800a8dc:	d5d8      	bpl.n	800a890 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8de:	2210      	movs	r2, #16
 800a8e0:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	0655      	lsls	r5, r2, #25
 800a8e6:	f140 8136 	bpl.w	800ab56 <HAL_UART_IRQHandler+0x2f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8ea:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a8ec:	6801      	ldr	r1, [r0, #0]
 800a8ee:	684a      	ldr	r2, [r1, #4]
 800a8f0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a8f2:	2a00      	cmp	r2, #0
 800a8f4:	d0ee      	beq.n	800a8d4 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8f6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a8fa:	4291      	cmp	r1, r2
 800a8fc:	d9ea      	bls.n	800a8d4 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800a8fe:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a902:	69c2      	ldr	r2, [r0, #28]
 800a904:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a908:	d02f      	beq.n	800a96a <HAL_UART_IRQHandler+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a90e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a912:	e843 2100 	strex	r1, r2, [r3]
 800a916:	2900      	cmp	r1, #0
 800a918:	d1f7      	bne.n	800a90a <HAL_UART_IRQHandler+0xaa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	f103 0208 	add.w	r2, r3, #8
 800a91e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a922:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a926:	f103 0508 	add.w	r5, r3, #8
 800a92a:	e845 2100 	strex	r1, r2, [r5]
 800a92e:	2900      	cmp	r1, #0
 800a930:	d1f3      	bne.n	800a91a <HAL_UART_IRQHandler+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	f103 0208 	add.w	r2, r3, #8
 800a936:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a93a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	f103 0508 	add.w	r5, r3, #8
 800a942:	e845 2100 	strex	r1, r2, [r5]
 800a946:	2900      	cmp	r1, #0
 800a948:	d1f3      	bne.n	800a932 <HAL_UART_IRQHandler+0xd2>
          huart->RxState = HAL_UART_STATE_READY;
 800a94a:	2220      	movs	r2, #32
 800a94c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a950:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a956:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95a:	e843 2100 	strex	r1, r2, [r3]
 800a95e:	2900      	cmp	r1, #0
 800a960:	d1f7      	bne.n	800a952 <HAL_UART_IRQHandler+0xf2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a962:	f7fb fdb1 	bl	80064c8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a966:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a96a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a96e:	4620      	mov	r0, r4
 800a970:	1ac9      	subs	r1, r1, r3
 800a972:	b289      	uxth	r1, r1
 800a974:	f7ff ff72 	bl	800a85c <HAL_UARTEx_RxEventCallback>
}
 800a978:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a97a:	0210      	lsls	r0, r2, #8
 800a97c:	d502      	bpl.n	800a984 <HAL_UART_IRQHandler+0x124>
 800a97e:	0069      	lsls	r1, r5, #1
 800a980:	f100 80e4 	bmi.w	800ab4c <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a984:	01d3      	lsls	r3, r2, #7
 800a986:	d5a5      	bpl.n	800a8d4 <HAL_UART_IRQHandler+0x74>
 800a988:	2d00      	cmp	r5, #0
 800a98a:	daa3      	bge.n	800a8d4 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a98c:	4620      	mov	r0, r4
}
 800a98e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a992:	f000 bcf5 	b.w	800b380 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a996:	07d6      	lsls	r6, r2, #31
 800a998:	d509      	bpl.n	800a9ae <HAL_UART_IRQHandler+0x14e>
 800a99a:	05ee      	lsls	r6, r5, #23
 800a99c:	d507      	bpl.n	800a9ae <HAL_UART_IRQHandler+0x14e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a99e:	2601      	movs	r6, #1
 800a9a0:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9a2:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800a9a6:	f046 0601 	orr.w	r6, r6, #1
 800a9aa:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9ae:	0796      	lsls	r6, r2, #30
 800a9b0:	f140 8090 	bpl.w	800aad4 <HAL_UART_IRQHandler+0x274>
 800a9b4:	07ce      	lsls	r6, r1, #31
 800a9b6:	d50a      	bpl.n	800a9ce <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9b8:	2602      	movs	r6, #2
 800a9ba:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9bc:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800a9c0:	f046 0604 	orr.w	r6, r6, #4
 800a9c4:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9c8:	0756      	lsls	r6, r2, #29
 800a9ca:	f100 8089 	bmi.w	800aae0 <HAL_UART_IRQHandler+0x280>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a9ce:	0716      	lsls	r6, r2, #28
 800a9d0:	d50b      	bpl.n	800a9ea <HAL_UART_IRQHandler+0x18a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9d2:	f005 0620 	and.w	r6, r5, #32
 800a9d6:	4330      	orrs	r0, r6
 800a9d8:	d007      	beq.n	800a9ea <HAL_UART_IRQHandler+0x18a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9da:	2008      	movs	r0, #8
 800a9dc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9de:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a9e2:	f040 0008 	orr.w	r0, r0, #8
 800a9e6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a9ea:	0516      	lsls	r6, r2, #20
 800a9ec:	d50a      	bpl.n	800aa04 <HAL_UART_IRQHandler+0x1a4>
 800a9ee:	0168      	lsls	r0, r5, #5
 800a9f0:	d508      	bpl.n	800aa04 <HAL_UART_IRQHandler+0x1a4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a9f6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a9f8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a9fc:	f040 0020 	orr.w	r0, r0, #32
 800aa00:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa04:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f43f af63 	beq.w	800a8d4 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa0e:	0696      	lsls	r6, r2, #26
 800aa10:	d50b      	bpl.n	800aa2a <HAL_UART_IRQHandler+0x1ca>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa12:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa16:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800aa1a:	ea55 0201 	orrs.w	r2, r5, r1
 800aa1e:	d004      	beq.n	800aa2a <HAL_UART_IRQHandler+0x1ca>
        if (huart->RxISR != NULL)
 800aa20:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800aa22:	b112      	cbz	r2, 800aa2a <HAL_UART_IRQHandler+0x1ca>
          huart->RxISR(huart);
 800aa24:	4620      	mov	r0, r4
 800aa26:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa28:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800aa2a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa2e:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa30:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa34:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800aa38:	4315      	orrs	r5, r2
 800aa3a:	f000 80c0 	beq.w	800abbe <HAL_UART_IRQHandler+0x35e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa46:	e843 2100 	strex	r1, r2, [r3]
 800aa4a:	2900      	cmp	r1, #0
 800aa4c:	d1f7      	bne.n	800aa3e <HAL_UART_IRQHandler+0x1de>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa4e:	483b      	ldr	r0, [pc, #236]	; (800ab3c <HAL_UART_IRQHandler+0x2dc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	f103 0208 	add.w	r2, r3, #8
 800aa54:	e852 2f00 	ldrex	r2, [r2]
 800aa58:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5a:	f103 0508 	add.w	r5, r3, #8
 800aa5e:	e845 2100 	strex	r1, r2, [r5]
 800aa62:	2900      	cmp	r1, #0
 800aa64:	d1f4      	bne.n	800aa50 <HAL_UART_IRQHandler+0x1f0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa66:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800aa68:	2a01      	cmp	r2, #1
 800aa6a:	d052      	beq.n	800ab12 <HAL_UART_IRQHandler+0x2b2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa6c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800aa6e:	2120      	movs	r1, #32
 800aa70:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa74:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa76:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800aa78:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa7a:	064d      	lsls	r5, r1, #25
 800aa7c:	d562      	bpl.n	800ab44 <HAL_UART_IRQHandler+0x2e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7e:	f103 0208 	add.w	r2, r3, #8
 800aa82:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8a:	f103 0008 	add.w	r0, r3, #8
 800aa8e:	e840 2100 	strex	r1, r2, [r0]
 800aa92:	2900      	cmp	r1, #0
 800aa94:	d1f3      	bne.n	800aa7e <HAL_UART_IRQHandler+0x21e>
          if (huart->hdmarx != NULL)
 800aa96:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d053      	beq.n	800ab44 <HAL_UART_IRQHandler+0x2e4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa9c:	4b28      	ldr	r3, [pc, #160]	; (800ab40 <HAL_UART_IRQHandler+0x2e0>)
 800aa9e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aaa0:	f7fb fe8a 	bl	80067b8 <HAL_DMA_Abort_IT>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f43f af15 	beq.w	800a8d4 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aaaa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aaac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800aaae:	e00e      	b.n	800aace <HAL_UART_IRQHandler+0x26e>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aab0:	0696      	lsls	r6, r2, #26
 800aab2:	f57f aeea 	bpl.w	800a88a <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aab6:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aaba:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800aabe:	ea56 060c 	orrs.w	r6, r6, ip
 800aac2:	f43f aee2 	beq.w	800a88a <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800aac6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f43f af03 	beq.w	800a8d4 <HAL_UART_IRQHandler+0x74>
}
 800aace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aad2:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aad4:	0756      	lsls	r6, r2, #29
 800aad6:	f57f af7a 	bpl.w	800a9ce <HAL_UART_IRQHandler+0x16e>
 800aada:	07ce      	lsls	r6, r1, #31
 800aadc:	f57f af77 	bpl.w	800a9ce <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aae0:	2604      	movs	r6, #4
 800aae2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aae4:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800aae8:	f046 0602 	orr.w	r6, r6, #2
 800aaec:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800aaf0:	e76d      	b.n	800a9ce <HAL_UART_IRQHandler+0x16e>
    if (huart->TxISR != NULL)
 800aaf2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f43f aeed 	beq.w	800a8d4 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800aafa:	4620      	mov	r0, r4
}
 800aafc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800ab00:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800ab06:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab08:	621a      	str	r2, [r3, #32]
}
 800ab0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800ab0e:	f000 bc35 	b.w	800b37c <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab12:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab16:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	e843 2100 	strex	r1, r2, [r3]
 800ab1e:	2900      	cmp	r1, #0
 800ab20:	d0a4      	beq.n	800aa6c <HAL_UART_IRQHandler+0x20c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	e853 2f00 	ldrex	r2, [r3]
 800ab26:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2a:	e843 2100 	strex	r1, r2, [r3]
 800ab2e:	2900      	cmp	r1, #0
 800ab30:	d1ef      	bne.n	800ab12 <HAL_UART_IRQHandler+0x2b2>
 800ab32:	e79b      	b.n	800aa6c <HAL_UART_IRQHandler+0x20c>
 800ab34:	04000120 	.word	0x04000120
 800ab38:	10000001 	.word	0x10000001
 800ab3c:	effffffe 	.word	0xeffffffe
 800ab40:	0800a849 	.word	0x0800a849
            HAL_UART_ErrorCallback(huart);
 800ab44:	4620      	mov	r0, r4
 800ab46:	f7ff fe7d 	bl	800a844 <HAL_UART_ErrorCallback>
}
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab4c:	4620      	mov	r0, r4
}
 800ab4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab52:	f000 bc17 	b.w	800b384 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab56:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800ab5a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800ab5e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab62:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800ab64:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab66:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800ab68:	2a00      	cmp	r2, #0
 800ab6a:	f43f aeb3 	beq.w	800a8d4 <HAL_UART_IRQHandler+0x74>
 800ab6e:	2900      	cmp	r1, #0
 800ab70:	f43f aeb0 	beq.w	800a8d4 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7c:	e843 2000 	strex	r0, r2, [r3]
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d1f7      	bne.n	800ab74 <HAL_UART_IRQHandler+0x314>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab84:	4d11      	ldr	r5, [pc, #68]	; (800abcc <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	f103 0208 	add.w	r2, r3, #8
 800ab8a:	e852 2f00 	ldrex	r2, [r2]
 800ab8e:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab90:	f103 0608 	add.w	r6, r3, #8
 800ab94:	e846 2000 	strex	r0, r2, [r6]
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d1f4      	bne.n	800ab86 <HAL_UART_IRQHandler+0x326>
        huart->RxState = HAL_UART_STATE_READY;
 800ab9c:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800ab9e:	6720      	str	r0, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800aba0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba4:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abaa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abae:	e843 2000 	strex	r0, r2, [r3]
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d1f7      	bne.n	800aba6 <HAL_UART_IRQHandler+0x346>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abb6:	4620      	mov	r0, r4
 800abb8:	f7ff fe50 	bl	800a85c <HAL_UARTEx_RxEventCallback>
}
 800abbc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800abbe:	4620      	mov	r0, r4
 800abc0:	f7ff fe40 	bl	800a844 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abc4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800abc8:	bd70      	pop	{r4, r5, r6, pc}
 800abca:	bf00      	nop
 800abcc:	effffffe 	.word	0xeffffffe

0800abd0 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abd0:	6901      	ldr	r1, [r0, #16]
 800abd2:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800abd4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abd6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abd8:	49c0      	ldr	r1, [pc, #768]	; (800aedc <UART_SetConfig+0x30c>)
{
 800abda:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abdc:	6945      	ldr	r5, [r0, #20]
{
 800abde:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abe0:	69c0      	ldr	r0, [r0, #28]
{
 800abe2:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abe4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abe6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abe8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abea:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abec:	4dbc      	ldr	r5, [pc, #752]	; (800aee0 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abf0:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abf2:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abf4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800abfc:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac00:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac02:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac04:	f000 80e0 	beq.w	800adc8 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800ac08:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac0a:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800ac0c:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac0e:	4ab5      	ldr	r2, [pc, #724]	; (800aee4 <UART_SetConfig+0x314>)
 800ac10:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac12:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac14:	4311      	orrs	r1, r2
 800ac16:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1a:	f022 020f 	bic.w	r2, r2, #15
 800ac1e:	432a      	orrs	r2, r5
 800ac20:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac22:	4ab1      	ldr	r2, [pc, #708]	; (800aee8 <UART_SetConfig+0x318>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d023      	beq.n	800ac70 <UART_SetConfig+0xa0>
 800ac28:	4ab0      	ldr	r2, [pc, #704]	; (800aeec <UART_SetConfig+0x31c>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d076      	beq.n	800ad1c <UART_SetConfig+0x14c>
 800ac2e:	4ab0      	ldr	r2, [pc, #704]	; (800aef0 <UART_SetConfig+0x320>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	f000 818f 	beq.w	800af54 <UART_SetConfig+0x384>
 800ac36:	4aaf      	ldr	r2, [pc, #700]	; (800aef4 <UART_SetConfig+0x324>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	f000 81e1 	beq.w	800b000 <UART_SetConfig+0x430>
 800ac3e:	4aae      	ldr	r2, [pc, #696]	; (800aef8 <UART_SetConfig+0x328>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	f000 8121 	beq.w	800ae88 <UART_SetConfig+0x2b8>
 800ac46:	4aad      	ldr	r2, [pc, #692]	; (800aefc <UART_SetConfig+0x32c>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	f000 81e3 	beq.w	800b014 <UART_SetConfig+0x444>
 800ac4e:	4aac      	ldr	r2, [pc, #688]	; (800af00 <UART_SetConfig+0x330>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	f000 8234 	beq.w	800b0be <UART_SetConfig+0x4ee>
 800ac56:	4aab      	ldr	r2, [pc, #684]	; (800af04 <UART_SetConfig+0x334>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	f000 81e7 	beq.w	800b02c <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800ac5e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800ac60:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800ac62:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800ac66:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800ac68:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800ac6a:	6763      	str	r3, [r4, #116]	; 0x74
}
 800ac6c:	b007      	add	sp, #28
 800ac6e:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac70:	4ba5      	ldr	r3, [pc, #660]	; (800af08 <UART_SetConfig+0x338>)
 800ac72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac78:	2b28      	cmp	r3, #40	; 0x28
 800ac7a:	d8f0      	bhi.n	800ac5e <UART_SetConfig+0x8e>
 800ac7c:	4aa3      	ldr	r2, [pc, #652]	; (800af0c <UART_SetConfig+0x33c>)
 800ac7e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac80:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ac84:	d055      	beq.n	800ad32 <UART_SetConfig+0x162>
    switch (clocksource)
 800ac86:	2b20      	cmp	r3, #32
 800ac88:	f200 814a 	bhi.w	800af20 <UART_SetConfig+0x350>
 800ac8c:	2b20      	cmp	r3, #32
 800ac8e:	d8e6      	bhi.n	800ac5e <UART_SetConfig+0x8e>
 800ac90:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <UART_SetConfig+0xc8>)
 800ac92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac96:	bf00      	nop
 800ac98:	0800aed7 	.word	0x0800aed7
 800ac9c:	0800aed1 	.word	0x0800aed1
 800aca0:	0800ac5f 	.word	0x0800ac5f
 800aca4:	0800ac5f 	.word	0x0800ac5f
 800aca8:	0800aec1 	.word	0x0800aec1
 800acac:	0800ac5f 	.word	0x0800ac5f
 800acb0:	0800ac5f 	.word	0x0800ac5f
 800acb4:	0800ac5f 	.word	0x0800ac5f
 800acb8:	0800aeb3 	.word	0x0800aeb3
 800acbc:	0800ac5f 	.word	0x0800ac5f
 800acc0:	0800ac5f 	.word	0x0800ac5f
 800acc4:	0800ac5f 	.word	0x0800ac5f
 800acc8:	0800ac5f 	.word	0x0800ac5f
 800accc:	0800ac5f 	.word	0x0800ac5f
 800acd0:	0800ac5f 	.word	0x0800ac5f
 800acd4:	0800ac5f 	.word	0x0800ac5f
 800acd8:	0800ae9d 	.word	0x0800ae9d
 800acdc:	0800ac5f 	.word	0x0800ac5f
 800ace0:	0800ac5f 	.word	0x0800ac5f
 800ace4:	0800ac5f 	.word	0x0800ac5f
 800ace8:	0800ac5f 	.word	0x0800ac5f
 800acec:	0800ac5f 	.word	0x0800ac5f
 800acf0:	0800ac5f 	.word	0x0800ac5f
 800acf4:	0800ac5f 	.word	0x0800ac5f
 800acf8:	0800ac5f 	.word	0x0800ac5f
 800acfc:	0800ac5f 	.word	0x0800ac5f
 800ad00:	0800ac5f 	.word	0x0800ac5f
 800ad04:	0800ac5f 	.word	0x0800ac5f
 800ad08:	0800ac5f 	.word	0x0800ac5f
 800ad0c:	0800ac5f 	.word	0x0800ac5f
 800ad10:	0800ac5f 	.word	0x0800ac5f
 800ad14:	0800ac5f 	.word	0x0800ac5f
 800ad18:	0800b041 	.word	0x0800b041
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad1c:	4b7a      	ldr	r3, [pc, #488]	; (800af08 <UART_SetConfig+0x338>)
 800ad1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad20:	f003 0307 	and.w	r3, r3, #7
 800ad24:	2b05      	cmp	r3, #5
 800ad26:	d89a      	bhi.n	800ac5e <UART_SetConfig+0x8e>
 800ad28:	4a79      	ldr	r2, [pc, #484]	; (800af10 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ad2e:	5cd3      	ldrb	r3, [r2, r3]
 800ad30:	d1a9      	bne.n	800ac86 <UART_SetConfig+0xb6>
    switch (clocksource)
 800ad32:	2b20      	cmp	r3, #32
 800ad34:	f200 8145 	bhi.w	800afc2 <UART_SetConfig+0x3f2>
 800ad38:	2b20      	cmp	r3, #32
 800ad3a:	d890      	bhi.n	800ac5e <UART_SetConfig+0x8e>
 800ad3c:	a201      	add	r2, pc, #4	; (adr r2, 800ad44 <UART_SetConfig+0x174>)
 800ad3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad42:	bf00      	nop
 800ad44:	0800b0ab 	.word	0x0800b0ab
 800ad48:	0800b0a5 	.word	0x0800b0a5
 800ad4c:	0800ac5f 	.word	0x0800ac5f
 800ad50:	0800ac5f 	.word	0x0800ac5f
 800ad54:	0800b0b1 	.word	0x0800b0b1
 800ad58:	0800ac5f 	.word	0x0800ac5f
 800ad5c:	0800ac5f 	.word	0x0800ac5f
 800ad60:	0800ac5f 	.word	0x0800ac5f
 800ad64:	0800b093 	.word	0x0800b093
 800ad68:	0800ac5f 	.word	0x0800ac5f
 800ad6c:	0800ac5f 	.word	0x0800ac5f
 800ad70:	0800ac5f 	.word	0x0800ac5f
 800ad74:	0800ac5f 	.word	0x0800ac5f
 800ad78:	0800ac5f 	.word	0x0800ac5f
 800ad7c:	0800ac5f 	.word	0x0800ac5f
 800ad80:	0800ac5f 	.word	0x0800ac5f
 800ad84:	0800b07f 	.word	0x0800b07f
 800ad88:	0800ac5f 	.word	0x0800ac5f
 800ad8c:	0800ac5f 	.word	0x0800ac5f
 800ad90:	0800ac5f 	.word	0x0800ac5f
 800ad94:	0800ac5f 	.word	0x0800ac5f
 800ad98:	0800ac5f 	.word	0x0800ac5f
 800ad9c:	0800ac5f 	.word	0x0800ac5f
 800ada0:	0800ac5f 	.word	0x0800ac5f
 800ada4:	0800ac5f 	.word	0x0800ac5f
 800ada8:	0800ac5f 	.word	0x0800ac5f
 800adac:	0800ac5f 	.word	0x0800ac5f
 800adb0:	0800ac5f 	.word	0x0800ac5f
 800adb4:	0800ac5f 	.word	0x0800ac5f
 800adb8:	0800ac5f 	.word	0x0800ac5f
 800adbc:	0800ac5f 	.word	0x0800ac5f
 800adc0:	0800ac5f 	.word	0x0800ac5f
 800adc4:	0800b0bb 	.word	0x0800b0bb
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800adc8:	6898      	ldr	r0, [r3, #8]
 800adca:	4a46      	ldr	r2, [pc, #280]	; (800aee4 <UART_SetConfig+0x314>)
 800adcc:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adce:	484e      	ldr	r0, [pc, #312]	; (800af08 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800add0:	430a      	orrs	r2, r1
 800add2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800add4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800add8:	f022 020f 	bic.w	r2, r2, #15
 800addc:	430a      	orrs	r2, r1
 800adde:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ade0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	2b05      	cmp	r3, #5
 800ade8:	f63f af39 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800adec:	4a49      	ldr	r2, [pc, #292]	; (800af14 <UART_SetConfig+0x344>)
 800adee:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800adf0:	2b20      	cmp	r3, #32
 800adf2:	f200 80b9 	bhi.w	800af68 <UART_SetConfig+0x398>
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	f67f af31 	bls.w	800ac5e <UART_SetConfig+0x8e>
 800adfc:	3b02      	subs	r3, #2
 800adfe:	2b1e      	cmp	r3, #30
 800ae00:	f63f af2d 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800ae04:	a201      	add	r2, pc, #4	; (adr r2, 800ae0c <UART_SetConfig+0x23c>)
 800ae06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0a:	bf00      	nop
 800ae0c:	0800b075 	.word	0x0800b075
 800ae10:	0800ac5f 	.word	0x0800ac5f
 800ae14:	0800b06b 	.word	0x0800b06b
 800ae18:	0800ac5f 	.word	0x0800ac5f
 800ae1c:	0800ac5f 	.word	0x0800ac5f
 800ae20:	0800ac5f 	.word	0x0800ac5f
 800ae24:	0800b059 	.word	0x0800b059
 800ae28:	0800ac5f 	.word	0x0800ac5f
 800ae2c:	0800ac5f 	.word	0x0800ac5f
 800ae30:	0800ac5f 	.word	0x0800ac5f
 800ae34:	0800ac5f 	.word	0x0800ac5f
 800ae38:	0800ac5f 	.word	0x0800ac5f
 800ae3c:	0800ac5f 	.word	0x0800ac5f
 800ae40:	0800ac5f 	.word	0x0800ac5f
 800ae44:	0800b045 	.word	0x0800b045
 800ae48:	0800ac5f 	.word	0x0800ac5f
 800ae4c:	0800ac5f 	.word	0x0800ac5f
 800ae50:	0800ac5f 	.word	0x0800ac5f
 800ae54:	0800ac5f 	.word	0x0800ac5f
 800ae58:	0800ac5f 	.word	0x0800ac5f
 800ae5c:	0800ac5f 	.word	0x0800ac5f
 800ae60:	0800ac5f 	.word	0x0800ac5f
 800ae64:	0800ac5f 	.word	0x0800ac5f
 800ae68:	0800ac5f 	.word	0x0800ac5f
 800ae6c:	0800ac5f 	.word	0x0800ac5f
 800ae70:	0800ac5f 	.word	0x0800ac5f
 800ae74:	0800ac5f 	.word	0x0800ac5f
 800ae78:	0800ac5f 	.word	0x0800ac5f
 800ae7c:	0800ac5f 	.word	0x0800ac5f
 800ae80:	0800ac5f 	.word	0x0800ac5f
 800ae84:	0800b07b 	.word	0x0800b07b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae88:	4b1f      	ldr	r3, [pc, #124]	; (800af08 <UART_SetConfig+0x338>)
 800ae8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8c:	f003 0307 	and.w	r3, r3, #7
 800ae90:	2b05      	cmp	r3, #5
 800ae92:	f63f aee4 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800ae96:	4a20      	ldr	r2, [pc, #128]	; (800af18 <UART_SetConfig+0x348>)
 800ae98:	5cd3      	ldrb	r3, [r2, r3]
 800ae9a:	e6f1      	b.n	800ac80 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae9c:	4b1a      	ldr	r3, [pc, #104]	; (800af08 <UART_SetConfig+0x338>)
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	0692      	lsls	r2, r2, #26
 800aea2:	f140 80c1 	bpl.w	800b028 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	481c      	ldr	r0, [pc, #112]	; (800af1c <UART_SetConfig+0x34c>)
 800aeaa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aeae:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800aeb0:	e03b      	b.n	800af2a <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeb2:	a803      	add	r0, sp, #12
 800aeb4:	f7fe fd54 	bl	8009960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aeb8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800aeba:	b938      	cbnz	r0, 800aecc <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 800aebc:	2000      	movs	r0, #0
 800aebe:	e6cf      	b.n	800ac60 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aec0:	4668      	mov	r0, sp
 800aec2:	f7fe fca1 	bl	8009808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aec6:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d0f7      	beq.n	800aebc <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aecc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aece:	e02c      	b.n	800af2a <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800aed0:	f7fd fe04 	bl	8008adc <HAL_RCC_GetPCLK2Freq>
        break;
 800aed4:	e7f1      	b.n	800aeba <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800aed6:	f7fd fdb9 	bl	8008a4c <HAL_RCC_GetPCLK1Freq>
        break;
 800aeda:	e7ee      	b.n	800aeba <UART_SetConfig+0x2ea>
 800aedc:	cfff69f3 	.word	0xcfff69f3
 800aee0:	58000c00 	.word	0x58000c00
 800aee4:	11fff4ff 	.word	0x11fff4ff
 800aee8:	40011000 	.word	0x40011000
 800aeec:	40004400 	.word	0x40004400
 800aef0:	40004800 	.word	0x40004800
 800aef4:	40004c00 	.word	0x40004c00
 800aef8:	40005000 	.word	0x40005000
 800aefc:	40011400 	.word	0x40011400
 800af00:	40007800 	.word	0x40007800
 800af04:	40007c00 	.word	0x40007c00
 800af08:	58024400 	.word	0x58024400
 800af0c:	080187d4 	.word	0x080187d4
 800af10:	08018800 	.word	0x08018800
 800af14:	08018808 	.word	0x08018808
 800af18:	08018800 	.word	0x08018800
 800af1c:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800af20:	2b40      	cmp	r3, #64	; 0x40
 800af22:	f47f ae9c 	bne.w	800ac5e <UART_SetConfig+0x8e>
 800af26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af2a:	4b6c      	ldr	r3, [pc, #432]	; (800b0dc <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af2c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af30:	6862      	ldr	r2, [r4, #4]
 800af32:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800af36:	fbb0 f3f3 	udiv	r3, r0, r3
 800af3a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800af3e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af42:	f1a3 0210 	sub.w	r2, r3, #16
 800af46:	428a      	cmp	r2, r1
 800af48:	f63f ae89 	bhi.w	800ac5e <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af4c:	6822      	ldr	r2, [r4, #0]
 800af4e:	2000      	movs	r0, #0
 800af50:	60d3      	str	r3, [r2, #12]
 800af52:	e685      	b.n	800ac60 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af54:	4b62      	ldr	r3, [pc, #392]	; (800b0e0 <UART_SetConfig+0x510>)
 800af56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af58:	f003 0307 	and.w	r3, r3, #7
 800af5c:	2b05      	cmp	r3, #5
 800af5e:	f63f ae7e 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800af62:	4a60      	ldr	r2, [pc, #384]	; (800b0e4 <UART_SetConfig+0x514>)
 800af64:	5cd3      	ldrb	r3, [r2, r3]
 800af66:	e68b      	b.n	800ac80 <UART_SetConfig+0xb0>
    switch (clocksource)
 800af68:	2b40      	cmp	r3, #64	; 0x40
 800af6a:	f47f ae78 	bne.w	800ac5e <UART_SetConfig+0x8e>
 800af6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af72:	4b5a      	ldr	r3, [pc, #360]	; (800b0dc <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af74:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af76:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af7a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af7e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af82:	4299      	cmp	r1, r3
 800af84:	f63f ae6b 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800af88:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800af8c:	f63f ae67 	bhi.w	800ac5e <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af90:	2300      	movs	r3, #0
 800af92:	4619      	mov	r1, r3
 800af94:	f7f5 f9fc 	bl	8000390 <__aeabi_uldivmod>
 800af98:	462a      	mov	r2, r5
 800af9a:	0209      	lsls	r1, r1, #8
 800af9c:	0203      	lsls	r3, r0, #8
 800af9e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800afa2:	0868      	lsrs	r0, r5, #1
 800afa4:	1818      	adds	r0, r3, r0
 800afa6:	f04f 0300 	mov.w	r3, #0
 800afaa:	f141 0100 	adc.w	r1, r1, #0
 800afae:	f7f5 f9ef 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afb2:	4a4d      	ldr	r2, [pc, #308]	; (800b0e8 <UART_SetConfig+0x518>)
 800afb4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afb8:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afba:	4291      	cmp	r1, r2
 800afbc:	f63f ae4f 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800afc0:	e7c4      	b.n	800af4c <UART_SetConfig+0x37c>
    switch (clocksource)
 800afc2:	2b40      	cmp	r3, #64	; 0x40
 800afc4:	f47f ae4b 	bne.w	800ac5e <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afc8:	4b44      	ldr	r3, [pc, #272]	; (800b0dc <UART_SetConfig+0x50c>)
 800afca:	6862      	ldr	r2, [r4, #4]
 800afcc:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800afd0:	0853      	lsrs	r3, r2, #1
 800afd2:	fbb0 f0f1 	udiv	r0, r0, r1
 800afd6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afda:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afde:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afe2:	f1a0 0210 	sub.w	r2, r0, #16
 800afe6:	429a      	cmp	r2, r3
 800afe8:	f63f ae39 	bhi.w	800ac5e <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afec:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aff0:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800aff4:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aff6:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800aff8:	4303      	orrs	r3, r0
 800affa:	2000      	movs	r0, #0
 800affc:	60d3      	str	r3, [r2, #12]
 800affe:	e62f      	b.n	800ac60 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b000:	4b37      	ldr	r3, [pc, #220]	; (800b0e0 <UART_SetConfig+0x510>)
 800b002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	2b05      	cmp	r3, #5
 800b00a:	f63f ae28 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800b00e:	4a37      	ldr	r2, [pc, #220]	; (800b0ec <UART_SetConfig+0x51c>)
 800b010:	5cd3      	ldrb	r3, [r2, r3]
 800b012:	e635      	b.n	800ac80 <UART_SetConfig+0xb0>
 800b014:	4b32      	ldr	r3, [pc, #200]	; (800b0e0 <UART_SetConfig+0x510>)
 800b016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b01c:	2b28      	cmp	r3, #40	; 0x28
 800b01e:	f63f ae1e 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800b022:	4a33      	ldr	r2, [pc, #204]	; (800b0f0 <UART_SetConfig+0x520>)
 800b024:	5cd3      	ldrb	r3, [r2, r3]
 800b026:	e62b      	b.n	800ac80 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800b028:	4832      	ldr	r0, [pc, #200]	; (800b0f4 <UART_SetConfig+0x524>)
 800b02a:	e77e      	b.n	800af2a <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b02c:	4b2c      	ldr	r3, [pc, #176]	; (800b0e0 <UART_SetConfig+0x510>)
 800b02e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b030:	f003 0307 	and.w	r3, r3, #7
 800b034:	2b05      	cmp	r3, #5
 800b036:	f63f ae12 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800b03a:	4a2f      	ldr	r2, [pc, #188]	; (800b0f8 <UART_SetConfig+0x528>)
 800b03c:	5cd3      	ldrb	r3, [r2, r3]
 800b03e:	e61f      	b.n	800ac80 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800b040:	482e      	ldr	r0, [pc, #184]	; (800b0fc <UART_SetConfig+0x52c>)
 800b042:	e772      	b.n	800af2a <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b044:	4b26      	ldr	r3, [pc, #152]	; (800b0e0 <UART_SetConfig+0x510>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	0690      	lsls	r0, r2, #26
 800b04a:	d542      	bpl.n	800b0d2 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4829      	ldr	r0, [pc, #164]	; (800b0f4 <UART_SetConfig+0x524>)
 800b050:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b054:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b056:	e78c      	b.n	800af72 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b058:	a803      	add	r0, sp, #12
 800b05a:	f7fe fc81 	bl	8009960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b05e:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800b060:	2800      	cmp	r0, #0
 800b062:	f43f af2b 	beq.w	800aebc <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b066:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b068:	e783      	b.n	800af72 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b06a:	4668      	mov	r0, sp
 800b06c:	f7fe fbcc 	bl	8009808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b070:	9801      	ldr	r0, [sp, #4]
        break;
 800b072:	e7f5      	b.n	800b060 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b074:	f7fe fbb6 	bl	80097e4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800b078:	e7f2      	b.n	800b060 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800b07a:	4820      	ldr	r0, [pc, #128]	; (800b0fc <UART_SetConfig+0x52c>)
 800b07c:	e779      	b.n	800af72 <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b07e:	4b18      	ldr	r3, [pc, #96]	; (800b0e0 <UART_SetConfig+0x510>)
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	0691      	lsls	r1, r2, #26
 800b084:	d527      	bpl.n	800b0d6 <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	481a      	ldr	r0, [pc, #104]	; (800b0f4 <UART_SetConfig+0x524>)
 800b08a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b08e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b090:	e79a      	b.n	800afc8 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b092:	a803      	add	r0, sp, #12
 800b094:	f7fe fc64 	bl	8009960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b098:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f43f af0e 	beq.w	800aebc <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b0a2:	e791      	b.n	800afc8 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0a4:	f7fd fd1a 	bl	8008adc <HAL_RCC_GetPCLK2Freq>
        break;
 800b0a8:	e7f7      	b.n	800b09a <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0aa:	f7fd fccf 	bl	8008a4c <HAL_RCC_GetPCLK1Freq>
        break;
 800b0ae:	e7f4      	b.n	800b09a <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0b0:	4668      	mov	r0, sp
 800b0b2:	f7fe fba9 	bl	8009808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0b6:	9801      	ldr	r0, [sp, #4]
        break;
 800b0b8:	e7ef      	b.n	800b09a <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800b0ba:	4810      	ldr	r0, [pc, #64]	; (800b0fc <UART_SetConfig+0x52c>)
 800b0bc:	e784      	b.n	800afc8 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0be:	4b08      	ldr	r3, [pc, #32]	; (800b0e0 <UART_SetConfig+0x510>)
 800b0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0c2:	f003 0307 	and.w	r3, r3, #7
 800b0c6:	2b05      	cmp	r3, #5
 800b0c8:	f63f adc9 	bhi.w	800ac5e <UART_SetConfig+0x8e>
 800b0cc:	4a0c      	ldr	r2, [pc, #48]	; (800b100 <UART_SetConfig+0x530>)
 800b0ce:	5cd3      	ldrb	r3, [r2, r3]
 800b0d0:	e5d6      	b.n	800ac80 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800b0d2:	4808      	ldr	r0, [pc, #32]	; (800b0f4 <UART_SetConfig+0x524>)
 800b0d4:	e74d      	b.n	800af72 <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800b0d6:	4807      	ldr	r0, [pc, #28]	; (800b0f4 <UART_SetConfig+0x524>)
 800b0d8:	e776      	b.n	800afc8 <UART_SetConfig+0x3f8>
 800b0da:	bf00      	nop
 800b0dc:	08018810 	.word	0x08018810
 800b0e0:	58024400 	.word	0x58024400
 800b0e4:	08018800 	.word	0x08018800
 800b0e8:	000ffcff 	.word	0x000ffcff
 800b0ec:	08018800 	.word	0x08018800
 800b0f0:	080187d4 	.word	0x080187d4
 800b0f4:	03d09000 	.word	0x03d09000
 800b0f8:	08018800 	.word	0x08018800
 800b0fc:	003d0900 	.word	0x003d0900
 800b100:	08018800 	.word	0x08018800

0800b104 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b104:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b106:	07da      	lsls	r2, r3, #31
{
 800b108:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b10a:	d506      	bpl.n	800b11a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b10c:	6801      	ldr	r1, [r0, #0]
 800b10e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800b110:	684a      	ldr	r2, [r1, #4]
 800b112:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b116:	4322      	orrs	r2, r4
 800b118:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b11a:	079c      	lsls	r4, r3, #30
 800b11c:	d506      	bpl.n	800b12c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b11e:	6801      	ldr	r1, [r0, #0]
 800b120:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800b122:	684a      	ldr	r2, [r1, #4]
 800b124:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b128:	4322      	orrs	r2, r4
 800b12a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b12c:	0759      	lsls	r1, r3, #29
 800b12e:	d506      	bpl.n	800b13e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b130:	6801      	ldr	r1, [r0, #0]
 800b132:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b134:	684a      	ldr	r2, [r1, #4]
 800b136:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b13a:	4322      	orrs	r2, r4
 800b13c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b13e:	071a      	lsls	r2, r3, #28
 800b140:	d506      	bpl.n	800b150 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b142:	6801      	ldr	r1, [r0, #0]
 800b144:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800b146:	684a      	ldr	r2, [r1, #4]
 800b148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b14c:	4322      	orrs	r2, r4
 800b14e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b150:	06dc      	lsls	r4, r3, #27
 800b152:	d506      	bpl.n	800b162 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b154:	6801      	ldr	r1, [r0, #0]
 800b156:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800b158:	688a      	ldr	r2, [r1, #8]
 800b15a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b15e:	4322      	orrs	r2, r4
 800b160:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b162:	0699      	lsls	r1, r3, #26
 800b164:	d506      	bpl.n	800b174 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b166:	6801      	ldr	r1, [r0, #0]
 800b168:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800b16a:	688a      	ldr	r2, [r1, #8]
 800b16c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b170:	4322      	orrs	r2, r4
 800b172:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b174:	065a      	lsls	r2, r3, #25
 800b176:	d50a      	bpl.n	800b18e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b178:	6801      	ldr	r1, [r0, #0]
 800b17a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800b17c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b17e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b182:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b186:	ea42 0204 	orr.w	r2, r2, r4
 800b18a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b18c:	d00b      	beq.n	800b1a6 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b18e:	061b      	lsls	r3, r3, #24
 800b190:	d506      	bpl.n	800b1a0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b192:	6802      	ldr	r2, [r0, #0]
 800b194:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b196:	6853      	ldr	r3, [r2, #4]
 800b198:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b19c:	430b      	orrs	r3, r1
 800b19e:	6053      	str	r3, [r2, #4]
}
 800b1a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1a4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1a6:	684a      	ldr	r2, [r1, #4]
 800b1a8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800b1aa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800b1ae:	4322      	orrs	r2, r4
 800b1b0:	604a      	str	r2, [r1, #4]
 800b1b2:	e7ec      	b.n	800b18e <UART_AdvFeatureConfig+0x8a>

0800b1b4 <UART_WaitOnFlagUntilTimeout>:
{
 800b1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1bc:	4607      	mov	r7, r0
 800b1be:	460e      	mov	r6, r1
 800b1c0:	4615      	mov	r5, r2
 800b1c2:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1c4:	6804      	ldr	r4, [r0, #0]
 800b1c6:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b1ca:	d10a      	bne.n	800b1e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800b1cc:	69e3      	ldr	r3, [r4, #28]
 800b1ce:	ea36 0303 	bics.w	r3, r6, r3
 800b1d2:	bf0c      	ite	eq
 800b1d4:	2301      	moveq	r3, #1
 800b1d6:	2300      	movne	r3, #0
 800b1d8:	429d      	cmp	r5, r3
 800b1da:	d0f7      	beq.n	800b1cc <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800b1dc:	2000      	movs	r0, #0
}
 800b1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1e2:	69e3      	ldr	r3, [r4, #28]
 800b1e4:	ea36 0303 	bics.w	r3, r6, r3
 800b1e8:	bf0c      	ite	eq
 800b1ea:	2301      	moveq	r3, #1
 800b1ec:	2300      	movne	r3, #0
 800b1ee:	42ab      	cmp	r3, r5
 800b1f0:	d1f4      	bne.n	800b1dc <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1f2:	f7f9 f8ab 	bl	800434c <HAL_GetTick>
 800b1f6:	eba0 0009 	sub.w	r0, r0, r9
 800b1fa:	4540      	cmp	r0, r8
 800b1fc:	d833      	bhi.n	800b266 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1fe:	f1b8 0f00 	cmp.w	r8, #0
 800b202:	d030      	beq.n	800b266 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b204:	683c      	ldr	r4, [r7, #0]
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	4622      	mov	r2, r4
 800b20a:	0759      	lsls	r1, r3, #29
 800b20c:	d5db      	bpl.n	800b1c6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b20e:	69e3      	ldr	r3, [r4, #28]
 800b210:	051b      	lsls	r3, r3, #20
 800b212:	d5d8      	bpl.n	800b1c6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b214:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b218:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b21e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	e844 3100 	strex	r1, r3, [r4]
 800b226:	b139      	cbz	r1, 800b238 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	e852 3f00 	ldrex	r3, [r2]
 800b22c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b230:	e842 3100 	strex	r1, r3, [r2]
 800b234:	2900      	cmp	r1, #0
 800b236:	d1f7      	bne.n	800b228 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b238:	f102 0308 	add.w	r3, r2, #8
 800b23c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b240:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b244:	f102 0008 	add.w	r0, r2, #8
 800b248:	e840 3100 	strex	r1, r3, [r0]
 800b24c:	2900      	cmp	r1, #0
 800b24e:	d1f3      	bne.n	800b238 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800b250:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800b252:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800b254:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 800b258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b25c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800b264:	e7bb      	b.n	800b1de <UART_WaitOnFlagUntilTimeout+0x2a>
 800b266:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b268:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b26c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b270:	e842 3100 	strex	r1, r3, [r2]
 800b274:	2900      	cmp	r1, #0
 800b276:	d1f7      	bne.n	800b268 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b278:	f102 0308 	add.w	r3, r2, #8
 800b27c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b280:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b284:	f102 0008 	add.w	r0, r2, #8
 800b288:	e840 3100 	strex	r1, r3, [r0]
 800b28c:	2900      	cmp	r1, #0
 800b28e:	d1f3      	bne.n	800b278 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800b290:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800b292:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800b294:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800b298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b29c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800b2a0:	e79d      	b.n	800b1de <UART_WaitOnFlagUntilTimeout+0x2a>
 800b2a2:	bf00      	nop

0800b2a4 <HAL_UART_Init>:
  if (huart == NULL)
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d066      	beq.n	800b376 <HAL_UART_Init+0xd2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b2a8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_RESET)
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d04c      	beq.n	800b350 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800b2b6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b2b8:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2ba:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800b2bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800b2c0:	6813      	ldr	r3, [r2, #0]
 800b2c2:	f023 0301 	bic.w	r3, r3, #1
 800b2c6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2c8:	f7ff fc82 	bl	800abd0 <UART_SetConfig>
 800b2cc:	2801      	cmp	r0, #1
 800b2ce:	d03c      	beq.n	800b34a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d135      	bne.n	800b342 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d8:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2da:	6859      	ldr	r1, [r3, #4]
 800b2dc:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800b2e0:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2e2:	6899      	ldr	r1, [r3, #8]
 800b2e4:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800b2e8:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b2ea:	6819      	ldr	r1, [r3, #0]
 800b2ec:	f041 0101 	orr.w	r1, r1, #1
 800b2f0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800b2f6:	f7f9 f829 	bl	800434c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2fa:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b2fc:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	0712      	lsls	r2, r2, #28
 800b302:	d40e      	bmi.n	800b322 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	075b      	lsls	r3, r3, #29
 800b308:	d427      	bmi.n	800b35a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b30a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b30c:	2220      	movs	r2, #32
  return HAL_OK;
 800b30e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800b310:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b314:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b318:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b31c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800b31e:	b002      	add	sp, #8
 800b320:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b322:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 800b326:	4603      	mov	r3, r0
 800b328:	462a      	mov	r2, r5
 800b32a:	4620      	mov	r0, r4
 800b32c:	9100      	str	r1, [sp, #0]
 800b32e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b332:	f7ff ff3f 	bl	800b1b4 <UART_WaitOnFlagUntilTimeout>
 800b336:	b9e0      	cbnz	r0, 800b372 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	075b      	lsls	r3, r3, #29
 800b33e:	d40c      	bmi.n	800b35a <HAL_UART_Init+0xb6>
 800b340:	e7e3      	b.n	800b30a <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800b342:	4620      	mov	r0, r4
 800b344:	f7ff fede 	bl	800b104 <UART_AdvFeatureConfig>
 800b348:	e7c5      	b.n	800b2d6 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800b34a:	2001      	movs	r0, #1
}
 800b34c:	b002      	add	sp, #8
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800b350:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800b354:	f7f8 fdde 	bl	8003f14 <HAL_UART_MspInit>
 800b358:	e7ad      	b.n	800b2b6 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b35a:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800b35e:	4633      	mov	r3, r6
 800b360:	2200      	movs	r2, #0
 800b362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b366:	9000      	str	r0, [sp, #0]
 800b368:	4620      	mov	r0, r4
 800b36a:	f7ff ff23 	bl	800b1b4 <UART_WaitOnFlagUntilTimeout>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d0cb      	beq.n	800b30a <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800b372:	2003      	movs	r0, #3
 800b374:	e7d3      	b.n	800b31e <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800b376:	2001      	movs	r0, #1
}
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop

0800b37c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop

0800b380 <HAL_UARTEx_RxFifoFullCallback>:
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop

0800b384 <HAL_UARTEx_TxFifoEmptyCallback>:
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop

0800b388 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b388:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b38c:	2a01      	cmp	r2, #1
 800b38e:	d017      	beq.n	800b3c0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b390:	6802      	ldr	r2, [r0, #0]
 800b392:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800b394:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b396:	2100      	movs	r1, #0
{
 800b398:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800b39a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800b39e:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3a0:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b3a2:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3a4:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800b3a8:	f024 0401 	bic.w	r4, r4, #1
 800b3ac:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3ae:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3b0:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800b3b2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b3b4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b3b8:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b3bc:	bc30      	pop	{r4, r5}
 800b3be:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b3c0:	2002      	movs	r0, #2
}
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3c4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b3c8:	2a01      	cmp	r2, #1
 800b3ca:	d037      	beq.n	800b43c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3cc:	6802      	ldr	r2, [r0, #0]
 800b3ce:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800b3d0:	2024      	movs	r0, #36	; 0x24
{
 800b3d2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b3d4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3d8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3da:	6810      	ldr	r0, [r2, #0]
 800b3dc:	f020 0001 	bic.w	r0, r0, #1
 800b3e0:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3e2:	6890      	ldr	r0, [r2, #8]
 800b3e4:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800b3e8:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3ea:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3ec:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3ee:	b310      	cbz	r0, 800b436 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3f0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3f2:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3f4:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3f8:	4911      	ldr	r1, [pc, #68]	; (800b440 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3fa:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3fe:	4d11      	ldr	r5, [pc, #68]	; (800b444 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b400:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b404:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b408:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b40c:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b40e:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b412:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b414:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b418:	fbb1 f1f5 	udiv	r1, r1, r5
 800b41c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800b420:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800b422:	2100      	movs	r1, #0
 800b424:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b428:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800b42a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b42c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b430:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b434:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800b436:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b438:	4608      	mov	r0, r1
 800b43a:	e7ef      	b.n	800b41c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800b43c:	2002      	movs	r0, #2
}
 800b43e:	4770      	bx	lr
 800b440:	08018830 	.word	0x08018830
 800b444:	08018828 	.word	0x08018828

0800b448 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b448:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b44c:	2a01      	cmp	r2, #1
 800b44e:	d037      	beq.n	800b4c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b450:	6802      	ldr	r2, [r0, #0]
 800b452:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800b454:	2024      	movs	r0, #36	; 0x24
{
 800b456:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b458:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b45c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b45e:	6810      	ldr	r0, [r2, #0]
 800b460:	f020 0001 	bic.w	r0, r0, #1
 800b464:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b466:	6890      	ldr	r0, [r2, #8]
 800b468:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800b46c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b46e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b470:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b472:	b310      	cbz	r0, 800b4ba <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b474:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b476:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b478:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b47c:	4911      	ldr	r1, [pc, #68]	; (800b4c4 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b47e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800b482:	4d11      	ldr	r5, [pc, #68]	; (800b4c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b484:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b488:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b48c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b490:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b492:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b496:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b498:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b49c:	fbb1 f1f5 	udiv	r1, r1, r5
 800b4a0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800b4a4:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4ac:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800b4ae:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b4b0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b4b4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b4b8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800b4ba:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b4bc:	4608      	mov	r0, r1
 800b4be:	e7ef      	b.n	800b4a0 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800b4c0:	2002      	movs	r0, #2
}
 800b4c2:	4770      	bx	lr
 800b4c4:	08018830 	.word	0x08018830
 800b4c8:	08018828 	.word	0x08018828

0800b4cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4cc:	b084      	sub	sp, #16
 800b4ce:	4684      	mov	ip, r0
 800b4d0:	b500      	push	{lr}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	f10d 0e14 	add.w	lr, sp, #20
 800b4d8:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d13d      	bne.n	800b55e <USB_CoreInit+0x92>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4e2:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b4e4:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800b4e8:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800b4ee:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4f0:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b4f2:	68c2      	ldr	r2, [r0, #12]
 800b4f4:	ea03 0302 	and.w	r3, r3, r2
 800b4f8:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b4fa:	68c3      	ldr	r3, [r0, #12]
 800b4fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b500:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800b502:	d078      	beq.n	800b5f6 <USB_CoreInit+0x12a>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800b504:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b506:	4a3e      	ldr	r2, [pc, #248]	; (800b600 <USB_CoreInit+0x134>)
  __IO uint32_t count = 0U;
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	e003      	b.n	800b514 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b50c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800b510:	2b00      	cmp	r3, #0
 800b512:	db3f      	blt.n	800b594 <USB_CoreInit+0xc8>
    if (++count > 200000U)
 800b514:	9b00      	ldr	r3, [sp, #0]
 800b516:	3301      	adds	r3, #1
 800b518:	4293      	cmp	r3, r2
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	d9f6      	bls.n	800b50c <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800b51e:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800b520:	9b08      	ldr	r3, [sp, #32]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d116      	bne.n	800b554 <USB_CoreInit+0x88>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b526:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b52a:	4b36      	ldr	r3, [pc, #216]	; (800b604 <USB_CoreInit+0x138>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b52c:	b292      	uxth	r2, r2
 800b52e:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b532:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800b536:	4313      	orrs	r3, r2
 800b538:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b53c:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800b540:	f043 0306 	orr.w	r3, r3, #6
 800b544:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b548:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800b54c:	f043 0320 	orr.w	r3, r3, #32
 800b550:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800b554:	b003      	add	sp, #12
 800b556:	f85d eb04 	ldr.w	lr, [sp], #4
 800b55a:	b004      	add	sp, #16
 800b55c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b55e:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800b560:	2100      	movs	r1, #0
    if (++count > 200000U)
 800b562:	4a27      	ldr	r2, [pc, #156]	; (800b600 <USB_CoreInit+0x134>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b568:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800b56a:	9101      	str	r1, [sp, #4]
 800b56c:	e003      	b.n	800b576 <USB_CoreInit+0xaa>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b56e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800b572:	2b00      	cmp	r3, #0
 800b574:	db2a      	blt.n	800b5cc <USB_CoreInit+0x100>
    if (++count > 200000U)
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	3301      	adds	r3, #1
 800b57a:	4293      	cmp	r3, r2
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	d9f6      	bls.n	800b56e <USB_CoreInit+0xa2>
      return HAL_TIMEOUT;
 800b580:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800b582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b584:	b9db      	cbnz	r3, 800b5be <USB_CoreInit+0xf2>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b586:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800b58a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b58e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800b592:	e7c5      	b.n	800b520 <USB_CoreInit+0x54>

  /* Core Soft Reset */
  count = 0U;
 800b594:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 800b596:	4a1a      	ldr	r2, [pc, #104]	; (800b600 <USB_CoreInit+0x134>)
  count = 0U;
 800b598:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b59a:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800b59e:	f043 0301 	orr.w	r3, r3, #1
 800b5a2:	f8cc 3010 	str.w	r3, [ip, #16]
 800b5a6:	e004      	b.n	800b5b2 <USB_CoreInit+0xe6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5a8:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800b5ac:	f010 0001 	ands.w	r0, r0, #1
 800b5b0:	d0b6      	beq.n	800b520 <USB_CoreInit+0x54>
    if (++count > 200000U)
 800b5b2:	9b00      	ldr	r3, [sp, #0]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	d9f5      	bls.n	800b5a8 <USB_CoreInit+0xdc>
 800b5bc:	e7af      	b.n	800b51e <USB_CoreInit+0x52>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5be:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800b5c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5c6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800b5ca:	e7a9      	b.n	800b520 <USB_CoreInit+0x54>
  count = 0U;
 800b5cc:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b5ce:	4a0c      	ldr	r2, [pc, #48]	; (800b600 <USB_CoreInit+0x134>)
  count = 0U;
 800b5d0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b5d2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800b5d6:	f043 0301 	orr.w	r3, r3, #1
 800b5da:	f8cc 3010 	str.w	r3, [ip, #16]
 800b5de:	e004      	b.n	800b5ea <USB_CoreInit+0x11e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5e0:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800b5e4:	f010 0001 	ands.w	r0, r0, #1
 800b5e8:	d0cb      	beq.n	800b582 <USB_CoreInit+0xb6>
    if (++count > 200000U)
 800b5ea:	9b01      	ldr	r3, [sp, #4]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	d9f5      	bls.n	800b5e0 <USB_CoreInit+0x114>
 800b5f4:	e7c4      	b.n	800b580 <USB_CoreInit+0xb4>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b5f6:	68c3      	ldr	r3, [r0, #12]
 800b5f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5fc:	60c3      	str	r3, [r0, #12]
 800b5fe:	e781      	b.n	800b504 <USB_CoreInit+0x38>
 800b600:	00030d40 	.word	0x00030d40
 800b604:	03ee0000 	.word	0x03ee0000

0800b608 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800b608:	2a02      	cmp	r2, #2
{
 800b60a:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800b60c:	d00b      	beq.n	800b626 <USB_SetTurnaroundTime+0x1e>
 800b60e:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b612:	68d9      	ldr	r1, [r3, #12]
}
 800b614:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b616:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800b61a:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	ea42 020c 	orr.w	r2, r2, ip
 800b622:	60da      	str	r2, [r3, #12]
}
 800b624:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b626:	4a23      	ldr	r2, [pc, #140]	; (800b6b4 <USB_SetTurnaroundTime+0xac>)
 800b628:	4823      	ldr	r0, [pc, #140]	; (800b6b8 <USB_SetTurnaroundTime+0xb0>)
 800b62a:	440a      	add	r2, r1
 800b62c:	4282      	cmp	r2, r0
 800b62e:	d92c      	bls.n	800b68a <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b630:	4a22      	ldr	r2, [pc, #136]	; (800b6bc <USB_SetTurnaroundTime+0xb4>)
 800b632:	4823      	ldr	r0, [pc, #140]	; (800b6c0 <USB_SetTurnaroundTime+0xb8>)
 800b634:	440a      	add	r2, r1
 800b636:	4282      	cmp	r2, r0
 800b638:	d92a      	bls.n	800b690 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b63a:	4a22      	ldr	r2, [pc, #136]	; (800b6c4 <USB_SetTurnaroundTime+0xbc>)
 800b63c:	4822      	ldr	r0, [pc, #136]	; (800b6c8 <USB_SetTurnaroundTime+0xc0>)
 800b63e:	440a      	add	r2, r1
 800b640:	4282      	cmp	r2, r0
 800b642:	d928      	bls.n	800b696 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b644:	4a21      	ldr	r2, [pc, #132]	; (800b6cc <USB_SetTurnaroundTime+0xc4>)
 800b646:	4822      	ldr	r0, [pc, #136]	; (800b6d0 <USB_SetTurnaroundTime+0xc8>)
 800b648:	440a      	add	r2, r1
 800b64a:	4282      	cmp	r2, r0
 800b64c:	d326      	bcc.n	800b69c <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b64e:	4a21      	ldr	r2, [pc, #132]	; (800b6d4 <USB_SetTurnaroundTime+0xcc>)
 800b650:	4821      	ldr	r0, [pc, #132]	; (800b6d8 <USB_SetTurnaroundTime+0xd0>)
 800b652:	440a      	add	r2, r1
 800b654:	4282      	cmp	r2, r0
 800b656:	d924      	bls.n	800b6a2 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b658:	4a20      	ldr	r2, [pc, #128]	; (800b6dc <USB_SetTurnaroundTime+0xd4>)
 800b65a:	4821      	ldr	r0, [pc, #132]	; (800b6e0 <USB_SetTurnaroundTime+0xd8>)
 800b65c:	440a      	add	r2, r1
 800b65e:	4282      	cmp	r2, r0
 800b660:	d322      	bcc.n	800b6a8 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b662:	4a20      	ldr	r2, [pc, #128]	; (800b6e4 <USB_SetTurnaroundTime+0xdc>)
 800b664:	4820      	ldr	r0, [pc, #128]	; (800b6e8 <USB_SetTurnaroundTime+0xe0>)
 800b666:	440a      	add	r2, r1
 800b668:	4282      	cmp	r2, r0
 800b66a:	d3d0      	bcc.n	800b60e <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b66c:	4a1f      	ldr	r2, [pc, #124]	; (800b6ec <USB_SetTurnaroundTime+0xe4>)
 800b66e:	4820      	ldr	r0, [pc, #128]	; (800b6f0 <USB_SetTurnaroundTime+0xe8>)
 800b670:	440a      	add	r2, r1
 800b672:	4282      	cmp	r2, r0
 800b674:	d31b      	bcc.n	800b6ae <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b676:	4a1f      	ldr	r2, [pc, #124]	; (800b6f4 <USB_SetTurnaroundTime+0xec>)
 800b678:	481f      	ldr	r0, [pc, #124]	; (800b6f8 <USB_SetTurnaroundTime+0xf0>)
 800b67a:	440a      	add	r2, r1
 800b67c:	4282      	cmp	r2, r0
 800b67e:	bf34      	ite	cc
 800b680:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 800b684:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 800b688:	e7c3      	b.n	800b612 <USB_SetTurnaroundTime+0xa>
 800b68a:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 800b68e:	e7c0      	b.n	800b612 <USB_SetTurnaroundTime+0xa>
 800b690:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 800b694:	e7bd      	b.n	800b612 <USB_SetTurnaroundTime+0xa>
 800b696:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800b69a:	e7ba      	b.n	800b612 <USB_SetTurnaroundTime+0xa>
 800b69c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800b6a0:	e7b7      	b.n	800b612 <USB_SetTurnaroundTime+0xa>
 800b6a2:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800b6a6:	e7b4      	b.n	800b612 <USB_SetTurnaroundTime+0xa>
 800b6a8:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 800b6ac:	e7b1      	b.n	800b612 <USB_SetTurnaroundTime+0xa>
 800b6ae:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 800b6b2:	e7ae      	b.n	800b612 <USB_SetTurnaroundTime+0xa>
 800b6b4:	ff275340 	.word	0xff275340
 800b6b8:	000c34ff 	.word	0x000c34ff
 800b6bc:	ff1b1e40 	.word	0xff1b1e40
 800b6c0:	000f423f 	.word	0x000f423f
 800b6c4:	ff0bdc00 	.word	0xff0bdc00
 800b6c8:	00124f7f 	.word	0x00124f7f
 800b6cc:	fef98c80 	.word	0xfef98c80
 800b6d0:	0013d620 	.word	0x0013d620
 800b6d4:	fee5b660 	.word	0xfee5b660
 800b6d8:	0016e35f 	.word	0x0016e35f
 800b6dc:	feced300 	.word	0xfeced300
 800b6e0:	001b7740 	.word	0x001b7740
 800b6e4:	feb35bc0 	.word	0xfeb35bc0
 800b6e8:	002191c0 	.word	0x002191c0
 800b6ec:	fe91ca00 	.word	0xfe91ca00
 800b6f0:	00387520 	.word	0x00387520
 800b6f4:	fe5954e0 	.word	0xfe5954e0
 800b6f8:	00419ce0 	.word	0x00419ce0

0800b6fc <USB_EnableGlobalInt>:
{
 800b6fc:	4603      	mov	r3, r0
}
 800b6fe:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b700:	689a      	ldr	r2, [r3, #8]
 800b702:	f042 0201 	orr.w	r2, r2, #1
 800b706:	609a      	str	r2, [r3, #8]
}
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop

0800b70c <USB_DisableGlobalInt>:
{
 800b70c:	4603      	mov	r3, r0
}
 800b70e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b710:	689a      	ldr	r2, [r3, #8]
 800b712:	f022 0201 	bic.w	r2, r2, #1
 800b716:	609a      	str	r2, [r3, #8]
}
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop

0800b71c <USB_SetCurrentMode>:
{
 800b71c:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b71e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b720:	2901      	cmp	r1, #1
{
 800b722:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b724:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b728:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b72a:	d017      	beq.n	800b75c <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800b72c:	b9a1      	cbnz	r1, 800b758 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b72e:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800b730:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b736:	60c3      	str	r3, [r0, #12]
 800b738:	e001      	b.n	800b73e <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b73a:	2c32      	cmp	r4, #50	; 0x32
 800b73c:	d00c      	beq.n	800b758 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800b73e:	2001      	movs	r0, #1
      ms++;
 800b740:	4404      	add	r4, r0
      HAL_Delay(1U);
 800b742:	f7f8 fe09 	bl	8004358 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800b746:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b748:	07db      	lsls	r3, r3, #31
 800b74a:	d4f6      	bmi.n	800b73a <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800b74c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800b750:	fab0 f080 	clz	r0, r0
 800b754:	0940      	lsrs	r0, r0, #5
}
 800b756:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b758:	2001      	movs	r0, #1
}
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b75c:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800b75e:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b764:	60c3      	str	r3, [r0, #12]
 800b766:	e001      	b.n	800b76c <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b768:	2c32      	cmp	r4, #50	; 0x32
 800b76a:	d0f5      	beq.n	800b758 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800b76c:	2001      	movs	r0, #1
      ms++;
 800b76e:	4404      	add	r4, r0
      HAL_Delay(1U);
 800b770:	f7f8 fdf2 	bl	8004358 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800b774:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b776:	07da      	lsls	r2, r3, #31
 800b778:	d5f6      	bpl.n	800b768 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800b77a:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800b77e:	fab0 f080 	clz	r0, r0
 800b782:	0940      	lsrs	r0, r0, #5
 800b784:	e7e7      	b.n	800b756 <USB_SetCurrentMode+0x3a>
 800b786:	bf00      	nop

0800b788 <USB_DevInit>:
{
 800b788:	b084      	sub	sp, #16
 800b78a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b78e:	b083      	sub	sp, #12
 800b790:	ac0b      	add	r4, sp, #44	; 0x2c
 800b792:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b79a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800b79e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800b7a2:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800b7a6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800b7aa:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800b7ae:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800b7b2:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800b7b6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800b7ba:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800b7be:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800b7c2:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800b7c6:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800b7ca:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800b7ce:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800b7d2:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800b7d6:	2c00      	cmp	r4, #0
 800b7d8:	f040 80a8 	bne.w	800b92c <USB_DevInit+0x1a4>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7dc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800b7e0:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800b7e4:	f043 0302 	orr.w	r3, r3, #2
 800b7e8:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b7ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b7ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7f2:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b7f4:	6803      	ldr	r3, [r0, #0]
 800b7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7fa:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b7fc:	6803      	ldr	r3, [r0, #0]
 800b7fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b802:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800b804:	2300      	movs	r3, #0
 800b806:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b80a:	f8dc 3000 	ldr.w	r3, [ip]
 800b80e:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b812:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b814:	2b01      	cmp	r3, #1
 800b816:	f000 80b0 	beq.w	800b97a <USB_DevInit+0x1f2>
  USBx_DEVICE->DCFG |= speed;
 800b81a:	f8dc 3000 	ldr.w	r3, [ip]
 800b81e:	f043 0303 	orr.w	r3, r3, #3
 800b822:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 800b826:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b828:	4a5c      	ldr	r2, [pc, #368]	; (800b99c <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	e003      	b.n	800b836 <USB_DevInit+0xae>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b82e:	6903      	ldr	r3, [r0, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	f2c0 8091 	blt.w	800b958 <USB_DevInit+0x1d0>
    if (++count > 200000U)
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	3301      	adds	r3, #1
 800b83a:	4293      	cmp	r3, r2
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	d9f6      	bls.n	800b82e <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800b840:	f04f 0e01 	mov.w	lr, #1
  __IO uint32_t count = 0U;
 800b844:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b846:	4a55      	ldr	r2, [pc, #340]	; (800b99c <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	e002      	b.n	800b852 <USB_DevInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b84c:	6903      	ldr	r3, [r0, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	db73      	blt.n	800b93a <USB_DevInit+0x1b2>
    if (++count > 200000U)
 800b852:	9b01      	ldr	r3, [sp, #4]
 800b854:	3301      	adds	r3, #1
 800b856:	4293      	cmp	r3, r2
 800b858:	9301      	str	r3, [sp, #4]
 800b85a:	d9f7      	bls.n	800b84c <USB_DevInit+0xc4>
    ret = HAL_ERROR;
 800b85c:	f04f 0e01 	mov.w	lr, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800b860:	2200      	movs	r2, #0
 800b862:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b866:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b86a:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b86e:	b1d1      	cbz	r1, 800b8a6 <USB_DevInit+0x11e>
 800b870:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b874:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b878:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800b87c:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b87e:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800b882:	e006      	b.n	800b892 <USB_DevInit+0x10a>
      USBx_INEP(i)->DIEPCTL = 0U;
 800b884:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b886:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b888:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b88a:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b88c:	3320      	adds	r3, #32
 800b88e:	4291      	cmp	r1, r2
 800b890:	d030      	beq.n	800b8f4 <USB_DevInit+0x16c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b892:	681d      	ldr	r5, [r3, #0]
 800b894:	2d00      	cmp	r5, #0
 800b896:	daf5      	bge.n	800b884 <USB_DevInit+0xfc>
      if (i == 0U)
 800b898:	b112      	cbz	r2, 800b8a0 <USB_DevInit+0x118>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b89a:	f8c3 8000 	str.w	r8, [r3]
 800b89e:	e7f2      	b.n	800b886 <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b8a0:	f8c3 9000 	str.w	r9, [r3]
 800b8a4:	e7ef      	b.n	800b886 <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b8a6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800b8aa:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b8ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8b0:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b8b4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800b8b8:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b8ba:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == 0U)
 800b8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8be:	b91b      	cbnz	r3, 800b8c8 <USB_DevInit+0x140>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b8c0:	6983      	ldr	r3, [r0, #24]
 800b8c2:	f043 0310 	orr.w	r3, r3, #16
 800b8c6:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b8c8:	6982      	ldr	r2, [r0, #24]
 800b8ca:	4b35      	ldr	r3, [pc, #212]	; (800b9a0 <USB_DevInit+0x218>)
 800b8cc:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800b8ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b8d0:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800b8d2:	b11a      	cbz	r2, 800b8dc <USB_DevInit+0x154>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b8d4:	6983      	ldr	r3, [r0, #24]
 800b8d6:	f043 0308 	orr.w	r3, r3, #8
 800b8da:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800b8dc:	2c01      	cmp	r4, #1
 800b8de:	d103      	bne.n	800b8e8 <USB_DevInit+0x160>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b8e0:	6982      	ldr	r2, [r0, #24]
 800b8e2:	4b30      	ldr	r3, [pc, #192]	; (800b9a4 <USB_DevInit+0x21c>)
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	6183      	str	r3, [r0, #24]
}
 800b8e8:	4670      	mov	r0, lr
 800b8ea:	b003      	add	sp, #12
 800b8ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8f0:	b004      	add	sp, #16
 800b8f2:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b8fa:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b8fe:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b902:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b904:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800b908:	e006      	b.n	800b918 <USB_DevInit+0x190>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b90a:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b90c:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b90e:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b910:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b912:	3320      	adds	r3, #32
 800b914:	4291      	cmp	r1, r2
 800b916:	d0c6      	beq.n	800b8a6 <USB_DevInit+0x11e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b918:	681d      	ldr	r5, [r3, #0]
 800b91a:	2d00      	cmp	r5, #0
 800b91c:	daf5      	bge.n	800b90a <USB_DevInit+0x182>
      if (i == 0U)
 800b91e:	b112      	cbz	r2, 800b926 <USB_DevInit+0x19e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b920:	f8c3 8000 	str.w	r8, [r3]
 800b924:	e7f2      	b.n	800b90c <USB_DevInit+0x184>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b926:	f8c3 9000 	str.w	r9, [r3]
 800b92a:	e7ef      	b.n	800b90c <USB_DevInit+0x184>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b92c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b92e:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b936:	6383      	str	r3, [r0, #56]	; 0x38
 800b938:	e764      	b.n	800b804 <USB_DevInit+0x7c>
  count = 0U;
 800b93a:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b93c:	4a17      	ldr	r2, [pc, #92]	; (800b99c <USB_DevInit+0x214>)
  count = 0U;
 800b93e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b940:	2310      	movs	r3, #16
 800b942:	6103      	str	r3, [r0, #16]
 800b944:	e002      	b.n	800b94c <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b946:	6903      	ldr	r3, [r0, #16]
 800b948:	06db      	lsls	r3, r3, #27
 800b94a:	d589      	bpl.n	800b860 <USB_DevInit+0xd8>
    if (++count > 200000U)
 800b94c:	9b01      	ldr	r3, [sp, #4]
 800b94e:	3301      	adds	r3, #1
 800b950:	4293      	cmp	r3, r2
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	d9f7      	bls.n	800b946 <USB_DevInit+0x1be>
 800b956:	e781      	b.n	800b85c <USB_DevInit+0xd4>
  count = 0U;
 800b958:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b95a:	4a10      	ldr	r2, [pc, #64]	; (800b99c <USB_DevInit+0x214>)
  count = 0U;
 800b95c:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b95e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800b962:	6103      	str	r3, [r0, #16]
 800b964:	e003      	b.n	800b96e <USB_DevInit+0x1e6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b966:	6903      	ldr	r3, [r0, #16]
 800b968:	f013 0320 	ands.w	r3, r3, #32
 800b96c:	d00c      	beq.n	800b988 <USB_DevInit+0x200>
    if (++count > 200000U)
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	3301      	adds	r3, #1
 800b972:	4293      	cmp	r3, r2
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	d9f6      	bls.n	800b966 <USB_DevInit+0x1de>
 800b978:	e762      	b.n	800b840 <USB_DevInit+0xb8>
    if (cfg.speed == USBD_HS_SPEED)
 800b97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b97c:	b933      	cbnz	r3, 800b98c <USB_DevInit+0x204>
  USBx_DEVICE->DCFG |= speed;
 800b97e:	f8dc 3000 	ldr.w	r3, [ip]
 800b982:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800b986:	e74e      	b.n	800b826 <USB_DevInit+0x9e>
  HAL_StatusTypeDef ret = HAL_OK;
 800b988:	469e      	mov	lr, r3
 800b98a:	e75b      	b.n	800b844 <USB_DevInit+0xbc>
  USBx_DEVICE->DCFG |= speed;
 800b98c:	f8dc 3000 	ldr.w	r3, [ip]
 800b990:	f043 0301 	orr.w	r3, r3, #1
 800b994:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800b998:	e745      	b.n	800b826 <USB_DevInit+0x9e>
 800b99a:	bf00      	nop
 800b99c:	00030d40 	.word	0x00030d40
 800b9a0:	803c3800 	.word	0x803c3800
 800b9a4:	40000004 	.word	0x40000004

0800b9a8 <USB_FlushTxFifo>:
{
 800b9a8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800b9aa:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b9ac:	4a11      	ldr	r2, [pc, #68]	; (800b9f4 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 800b9ae:	9301      	str	r3, [sp, #4]
 800b9b0:	e002      	b.n	800b9b8 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9b2:	6903      	ldr	r3, [r0, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	db07      	blt.n	800b9c8 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	d9f7      	bls.n	800b9b2 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800b9c2:	2003      	movs	r0, #3
}
 800b9c4:	b002      	add	sp, #8
 800b9c6:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b9c8:	0189      	lsls	r1, r1, #6
  count = 0U;
 800b9ca:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b9cc:	4a09      	ldr	r2, [pc, #36]	; (800b9f4 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b9ce:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800b9d2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b9d4:	6101      	str	r1, [r0, #16]
 800b9d6:	e003      	b.n	800b9e0 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b9d8:	6903      	ldr	r3, [r0, #16]
 800b9da:	f013 0320 	ands.w	r3, r3, #32
 800b9de:	d005      	beq.n	800b9ec <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 800b9e0:	9b01      	ldr	r3, [sp, #4]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	d9f6      	bls.n	800b9d8 <USB_FlushTxFifo+0x30>
 800b9ea:	e7ea      	b.n	800b9c2 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 800b9ec:	4618      	mov	r0, r3
}
 800b9ee:	b002      	add	sp, #8
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	00030d40 	.word	0x00030d40

0800b9f8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b9f8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b9fc:	f013 0006 	ands.w	r0, r3, #6
 800ba00:	d004      	beq.n	800ba0c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800ba02:	f013 0f02 	tst.w	r3, #2
 800ba06:	bf14      	ite	ne
 800ba08:	2002      	movne	r0, #2
 800ba0a:	200f      	moveq	r0, #15
}
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop

0800ba10 <USB_ActivateEndpoint>:
{
 800ba10:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800ba12:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ba14:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d020      	beq.n	800ba5c <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ba1a:	f002 0c0f 	and.w	ip, r2, #15
 800ba1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba22:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ba26:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ba2a:	fa03 f30c 	lsl.w	r3, r3, ip
 800ba2e:	4323      	orrs	r3, r4
 800ba30:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ba34:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800ba38:	041b      	lsls	r3, r3, #16
 800ba3a:	d40c      	bmi.n	800ba56 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba3c:	688b      	ldr	r3, [r1, #8]
 800ba3e:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 800ba42:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ba46:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba48:	4914      	ldr	r1, [pc, #80]	; (800ba9c <USB_ActivateEndpoint+0x8c>)
 800ba4a:	4323      	orrs	r3, r4
 800ba4c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800ba50:	4319      	orrs	r1, r3
 800ba52:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800ba56:	2000      	movs	r0, #0
 800ba58:	bc30      	pop	{r4, r5}
 800ba5a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ba5c:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800ba60:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ba64:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ba68:	40ab      	lsls	r3, r5
 800ba6a:	69e5      	ldr	r5, [r4, #28]
 800ba6c:	432b      	orrs	r3, r5
 800ba6e:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ba70:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ba74:	041c      	lsls	r4, r3, #16
 800ba76:	d4ee      	bmi.n	800ba56 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba78:	688b      	ldr	r3, [r1, #8]
 800ba7a:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800ba7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ba82:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba84:	4905      	ldr	r1, [pc, #20]	; (800ba9c <USB_ActivateEndpoint+0x8c>)
 800ba86:	432b      	orrs	r3, r5
 800ba88:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800ba8c:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800ba90:	4311      	orrs	r1, r2
}
 800ba92:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba94:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800ba98:	2000      	movs	r0, #0
 800ba9a:	4770      	bx	lr
 800ba9c:	10008000 	.word	0x10008000

0800baa0 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 800baa0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800baa2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800baa4:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800baa6:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800baaa:	d02a      	beq.n	800bb02 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800baac:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800bab0:	2a00      	cmp	r2, #0
 800bab2:	db19      	blt.n	800bae8 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bab4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bab8:	f003 030f 	and.w	r3, r3, #15
 800babc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800bac0:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bac4:	4a23      	ldr	r2, [pc, #140]	; (800bb54 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bac6:	ea21 0103 	bic.w	r1, r1, r3
 800baca:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bace:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800bad2:	ea21 0303 	bic.w	r3, r1, r3
 800bad6:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800bada:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800badc:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800bae0:	401a      	ands	r2, r3
 800bae2:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 800bae6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bae8:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800baec:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800baf0:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800baf4:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800baf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bafc:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 800bb00:	e7d8      	b.n	800bab4 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb02:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800bb06:	2a00      	cmp	r2, #0
 800bb08:	da0b      	bge.n	800bb22 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bb0a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800bb0e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bb12:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bb16:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800bb1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bb1e:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb22:	f003 020f 	and.w	r2, r3, #15
 800bb26:	2301      	movs	r3, #1
 800bb28:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800bb2c:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bb2e:	4a0a      	ldr	r2, [pc, #40]	; (800bb58 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb30:	ea21 0103 	bic.w	r1, r1, r3
 800bb34:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb38:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800bb3c:	ea21 0303 	bic.w	r3, r1, r3
 800bb40:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800bb44:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bb46:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800bb4a:	401a      	ands	r2, r3
 800bb4c:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	eff37800 	.word	0xeff37800
 800bb58:	ec337800 	.word	0xec337800

0800bb5c <USB_EPStartXfer>:
{
 800bb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800bb60:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bb62:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d051      	beq.n	800bc0e <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bb6a:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 800bb6e:	4c84      	ldr	r4, [pc, #528]	; (800bd80 <USB_EPStartXfer+0x224>)
 800bb70:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 800bb74:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 800bb78:	402c      	ands	r4, r5
 800bb7a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bb7c:	4c81      	ldr	r4, [pc, #516]	; (800bd84 <USB_EPStartXfer+0x228>)
 800bb7e:	691d      	ldr	r5, [r3, #16]
 800bb80:	402c      	ands	r4, r5
 800bb82:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 800bb84:	694c      	ldr	r4, [r1, #20]
 800bb86:	b384      	cbz	r4, 800bbea <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bb88:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800bb8a:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bb8c:	4e7e      	ldr	r6, [pc, #504]	; (800bd88 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bb8e:	442c      	add	r4, r5
 800bb90:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb94:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bb98:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 800bb9c:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bb9e:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bba2:	691d      	ldr	r5, [r3, #16]
 800bba4:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bba8:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bbac:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bbae:	691d      	ldr	r5, [r3, #16]
 800bbb0:	ea44 0405 	orr.w	r4, r4, r5
 800bbb4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800bbb6:	d025      	beq.n	800bc04 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 800bbb8:	78cb      	ldrb	r3, [r1, #3]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d10c      	bne.n	800bbd8 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bbbe:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800bbc2:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bbc6:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800bbca:	bf0c      	ite	eq
 800bbcc:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bbd0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800bbd4:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bbd8:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800bbdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bbe0:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bbea:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 800bbec:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bbee:	691d      	ldr	r5, [r3, #16]
 800bbf0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800bbf4:	ea44 0405 	orr.w	r4, r4, r5
 800bbf8:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bbfa:	691c      	ldr	r4, [r3, #16]
 800bbfc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800bc00:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800bc02:	d1d9      	bne.n	800bbb8 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800bc04:	68ca      	ldr	r2, [r1, #12]
 800bc06:	2a00      	cmp	r2, #0
 800bc08:	d0d6      	beq.n	800bbb8 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bc0a:	615a      	str	r2, [r3, #20]
 800bc0c:	e7d4      	b.n	800bbb8 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 800bc0e:	694d      	ldr	r5, [r1, #20]
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	d03d      	beq.n	800bc90 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc14:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 800bc18:	4e59      	ldr	r6, [pc, #356]	; (800bd80 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bc1a:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc1e:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc22:	4f58      	ldr	r7, [pc, #352]	; (800bd84 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc24:	ea08 0606 	and.w	r6, r8, r6
 800bc28:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bc2c:	eb05 060e 	add.w	r6, r5, lr
 800bc30:	3e01      	subs	r6, #1
 800bc32:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc36:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800bc3a:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc3c:	4e52      	ldr	r6, [pc, #328]	; (800bd88 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc3e:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc42:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 800bc46:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800bc4a:	433e      	orrs	r6, r7
 800bc4c:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc50:	f3c5 0612 	ubfx	r6, r5, #0, #19
 800bc54:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800bc58:	433e      	orrs	r6, r7
 800bc5a:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc5e:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800bc62:	f891 e003 	ldrb.w	lr, [r1, #3]
 800bc66:	f1be 0f01 	cmp.w	lr, #1
 800bc6a:	d057      	beq.n	800bd1c <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 800bc6c:	2a01      	cmp	r2, #1
 800bc6e:	d072      	beq.n	800bd56 <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc70:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc74:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc78:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc7c:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc80:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc84:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 800bc8e:	e7a9      	b.n	800bbe4 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc90:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 800bc94:	4e3b      	ldr	r6, [pc, #236]	; (800bd84 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc96:	4c3a      	ldr	r4, [pc, #232]	; (800bd80 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 800bc98:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc9a:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 800bc9e:	ea06 0607 	and.w	r6, r6, r7
 800bca2:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bca6:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800bcaa:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800bcae:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bcb2:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800bcb6:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcba:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bcbe:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800bcc2:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 800bcc6:	d03a      	beq.n	800bd3e <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bcc8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800bccc:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bcd0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800bcd4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800bcd8:	d184      	bne.n	800bbe4 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bcda:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800bcde:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bce2:	6833      	ldr	r3, [r6, #0]
 800bce4:	bf0c      	ite	eq
 800bce6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bcea:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800bcee:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 800bcf0:	2a00      	cmp	r2, #0
 800bcf2:	f47f af77 	bne.w	800bbe4 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 800bcf6:	b2ad      	uxth	r5, r5
 800bcf8:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 800bcfa:	08ad      	lsrs	r5, r5, #2
 800bcfc:	f43f af72 	beq.w	800bbe4 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bd00:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bd02:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 800bd06:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 800bd0a:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800bd0e:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800bd12:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bd14:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 800bd18:	d1f9      	bne.n	800bd0e <USB_EPStartXfer+0x1b2>
 800bd1a:	e763      	b.n	800bbe4 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bd1c:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 800bd1e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bd20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bd24:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bd26:	6933      	ldr	r3, [r6, #16]
 800bd28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd2c:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 800bd2e:	d017      	beq.n	800bd60 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd30:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800bd34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd38:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800bd3c:	e7cd      	b.n	800bcda <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 800bd3e:	690b      	ldr	r3, [r1, #16]
 800bd40:	b963      	cbnz	r3, 800bd5c <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 800bd42:	f1be 0f01 	cmp.w	lr, #1
 800bd46:	d00e      	beq.n	800bd66 <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd48:	6833      	ldr	r3, [r6, #0]
}
 800bd4a:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd50:	6033      	str	r3, [r6, #0]
}
 800bd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800bd56:	690b      	ldr	r3, [r1, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d0f5      	beq.n	800bd48 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bd5c:	6173      	str	r3, [r6, #20]
 800bd5e:	e7f0      	b.n	800bd42 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 800bd60:	690b      	ldr	r3, [r1, #16]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d1fa      	bne.n	800bd5c <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd66:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800bd6a:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bd6e:	6833      	ldr	r3, [r6, #0]
 800bd70:	bf0c      	ite	eq
 800bd72:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bd76:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800bd7a:	6033      	str	r3, [r6, #0]
 800bd7c:	e7e4      	b.n	800bd48 <USB_EPStartXfer+0x1ec>
 800bd7e:	bf00      	nop
 800bd80:	fff80000 	.word	0xfff80000
 800bd84:	e007ffff 	.word	0xe007ffff
 800bd88:	1ff80000 	.word	0x1ff80000

0800bd8c <USB_EP0StartXfer>:
{
 800bd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800bd8e:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bd90:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800bd92:	2c01      	cmp	r4, #1
 800bd94:	d026      	beq.n	800bde4 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd96:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800bd9a:	4c57      	ldr	r4, [pc, #348]	; (800bef8 <USB_EP0StartXfer+0x16c>)
 800bd9c:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 800bda0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800bda4:	402c      	ands	r4, r5
 800bda6:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bda8:	4c54      	ldr	r4, [pc, #336]	; (800befc <USB_EP0StartXfer+0x170>)
 800bdaa:	691d      	ldr	r5, [r3, #16]
 800bdac:	402c      	ands	r4, r5
 800bdae:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800bdb0:	694c      	ldr	r4, [r1, #20]
 800bdb2:	b9a4      	cbnz	r4, 800bdde <USB_EP0StartXfer+0x52>
      if (ep->xfer_len > ep->maxpacket)
 800bdb4:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdb6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bdb8:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800bdbc:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdbe:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800bdc2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bdc4:	691d      	ldr	r5, [r3, #16]
 800bdc6:	ea44 0405 	orr.w	r4, r4, r5
 800bdca:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800bdcc:	d049      	beq.n	800be62 <USB_EP0StartXfer+0xd6>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bdce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800bdd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bdd6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800bdda:	2000      	movs	r0, #0
 800bddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ep->xfer_len = ep->maxpacket;
 800bdde:	688c      	ldr	r4, [r1, #8]
 800bde0:	614c      	str	r4, [r1, #20]
 800bde2:	e7e8      	b.n	800bdb6 <USB_EP0StartXfer+0x2a>
    if (ep->xfer_len == 0U)
 800bde4:	694c      	ldr	r4, [r1, #20]
 800bde6:	2c00      	cmp	r4, #0
 800bde8:	d040      	beq.n	800be6c <USB_EP0StartXfer+0xe0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdea:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 800bdee:	4f42      	ldr	r7, [pc, #264]	; (800bef8 <USB_EP0StartXfer+0x16c>)
      if (ep->xfer_len > ep->maxpacket)
 800bdf0:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdf4:	f8d5 c910 	ldr.w	ip, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdf8:	4e40      	ldr	r6, [pc, #256]	; (800befc <USB_EP0StartXfer+0x170>)
      if (ep->xfer_len > ep->maxpacket)
 800bdfa:	4574      	cmp	r4, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdfc:	ea0c 0707 	and.w	r7, ip, r7
 800be00:	f505 6c10 	add.w	ip, r5, #2304	; 0x900
 800be04:	f8c5 7910 	str.w	r7, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be08:	f8d5 7910 	ldr.w	r7, [r5, #2320]	; 0x910
 800be0c:	ea06 0607 	and.w	r6, r6, r7
 800be10:	f8c5 6910 	str.w	r6, [r5, #2320]	; 0x910
      if (ep->xfer_len > ep->maxpacket)
 800be14:	d958      	bls.n	800bec8 <USB_EP0StartXfer+0x13c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be16:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 800be1a:	2a01      	cmp	r2, #1
        ep->xfer_len = ep->maxpacket;
 800be1c:	f8c1 e014 	str.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be20:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800be24:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800be28:	f3ce 0412 	ubfx	r4, lr, #0, #19
 800be2c:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800be30:	ea44 0406 	orr.w	r4, r4, r6
 800be34:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800be38:	d03a      	beq.n	800beb0 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be3a:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800be3e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800be42:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800be46:	f1be 0f00 	cmp.w	lr, #0
 800be4a:	d0c6      	beq.n	800bdda <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be4c:	f003 010f 	and.w	r1, r3, #15
 800be50:	2301      	movs	r3, #1
 800be52:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800be56:	408b      	lsls	r3, r1
 800be58:	4313      	orrs	r3, r2
 800be5a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800be5e:	2000      	movs	r0, #0
 800be60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800be62:	68ca      	ldr	r2, [r1, #12]
 800be64:	2a00      	cmp	r2, #0
 800be66:	d0b2      	beq.n	800bdce <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be68:	615a      	str	r2, [r3, #20]
 800be6a:	e7b0      	b.n	800bdce <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be6c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800be70:	4b22      	ldr	r3, [pc, #136]	; (800befc <USB_EP0StartXfer+0x170>)
    if (dma == 1U)
 800be72:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be74:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 800be78:	f500 6c10 	add.w	ip, r0, #2304	; 0x900
 800be7c:	ea03 0304 	and.w	r3, r3, r4
 800be80:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be84:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800be88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be8c:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be90:	4b19      	ldr	r3, [pc, #100]	; (800bef8 <USB_EP0StartXfer+0x16c>)
 800be92:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800be96:	ea03 0304 	and.w	r3, r3, r4
 800be9a:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
 800be9e:	d007      	beq.n	800beb0 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bea0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800bea4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bea8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800beac:	2000      	movs	r0, #0
 800beae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800beb0:	690b      	ldr	r3, [r1, #16]
 800beb2:	b10b      	cbz	r3, 800beb8 <USB_EP0StartXfer+0x12c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800beb4:	f8cc 3014 	str.w	r3, [ip, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800beb8:	f8dc 3000 	ldr.w	r3, [ip]
}
 800bebc:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bebe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bec2:	f8cc 3000 	str.w	r3, [ip]
}
 800bec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bec8:	f8dc 6010 	ldr.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800becc:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800bed0:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bed2:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800bed6:	f8cc 6010 	str.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800beda:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800bede:	ea44 0406 	orr.w	r4, r4, r6
 800bee2:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800bee6:	d0e3      	beq.n	800beb0 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bee8:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800beec:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800bef0:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800bef4:	e7aa      	b.n	800be4c <USB_EP0StartXfer+0xc0>
 800bef6:	bf00      	nop
 800bef8:	fff80000 	.word	0xfff80000
 800befc:	e007ffff 	.word	0xe007ffff

0800bf00 <USB_WritePacket>:
{
 800bf00:	b410      	push	{r4}
 800bf02:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800bf06:	b964      	cbnz	r4, 800bf22 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800bf08:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800bf0a:	089b      	lsrs	r3, r3, #2
 800bf0c:	d009      	beq.n	800bf22 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf0e:	3201      	adds	r2, #1
 800bf10:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bf14:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800bf18:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800bf1c:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf1e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800bf20:	d1fa      	bne.n	800bf18 <USB_WritePacket+0x18>
}
 800bf22:	2000      	movs	r0, #0
 800bf24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop

0800bf2c <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 800bf2c:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 800bf30:	b570      	push	{r4, r5, r6, lr}
 800bf32:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800bf34:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 800bf38:	d01c      	beq.n	800bf74 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf3a:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800bf3e:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800bf40:	2300      	movs	r3, #0
 800bf42:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf44:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 800bf48:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf4a:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800bf4e:	d1f8      	bne.n	800bf42 <USB_ReadPacket+0x16>
    pDest++;
 800bf50:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 800bf54:	b16e      	cbz	r6, 800bf72 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf56:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
      remaining_bytes--;
 800bf5a:	1e73      	subs	r3, r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf5c:	682a      	ldr	r2, [r5, #0]
      remaining_bytes--;
 800bf5e:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf60:	7002      	strb	r2, [r0, #0]
    } while (remaining_bytes != 0U);
 800bf62:	b12b      	cbz	r3, 800bf70 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf64:	0a11      	lsrs	r1, r2, #8
    } while (remaining_bytes != 0U);
 800bf66:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf68:	7041      	strb	r1, [r0, #1]
    } while (remaining_bytes != 0U);
 800bf6a:	d001      	beq.n	800bf70 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf6c:	0c12      	lsrs	r2, r2, #16
 800bf6e:	7082      	strb	r2, [r0, #2]
      pDest++;
 800bf70:	4430      	add	r0, r6
}
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800bf74:	4608      	mov	r0, r1
 800bf76:	e7ed      	b.n	800bf54 <USB_ReadPacket+0x28>

0800bf78 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800bf78:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bf7a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800bf7c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf7e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800bf82:	d00c      	beq.n	800bf9e <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf84:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800bf88:	b10b      	cbz	r3, 800bf8e <USB_EPSetStall+0x16>
 800bf8a:	2a00      	cmp	r2, #0
 800bf8c:	da14      	bge.n	800bfb8 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bf8e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800bf92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf96:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf9e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800bfa2:	2a00      	cmp	r2, #0
 800bfa4:	db00      	blt.n	800bfa8 <USB_EPSetStall+0x30>
 800bfa6:	b973      	cbnz	r3, 800bfc6 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bfa8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800bfac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfb0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bfb8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800bfbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bfc0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800bfc4:	e7e3      	b.n	800bf8e <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bfc6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800bfca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bfce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bfd2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800bfd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfda:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800bfde:	e7e9      	b.n	800bfb4 <USB_EPSetStall+0x3c>

0800bfe0 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800bfe0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bfe2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800bfe4:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bfe6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800bfea:	d013      	beq.n	800c014 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bfec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800bff0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bff4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bff8:	78cb      	ldrb	r3, [r1, #3]
 800bffa:	3b02      	subs	r3, #2
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d901      	bls.n	800c004 <USB_EPClearStall+0x24>
}
 800c000:	2000      	movs	r0, #0
 800c002:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c004:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c00c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800c010:	2000      	movs	r0, #0
 800c012:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c014:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c018:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c01c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c020:	78cb      	ldrb	r3, [r1, #3]
 800c022:	3b02      	subs	r3, #2
 800c024:	2b01      	cmp	r3, #1
 800c026:	d8eb      	bhi.n	800c000 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c028:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c02c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c030:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800c034:	2000      	movs	r0, #0
 800c036:	4770      	bx	lr

0800c038 <USB_SetDevAddress>:
{
 800c038:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c03a:	0109      	lsls	r1, r1, #4
}
 800c03c:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c03e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c042:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c046:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800c04a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c04e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800c052:	4311      	orrs	r1, r2
 800c054:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop

0800c05c <USB_DevConnect>:
{
 800c05c:	4603      	mov	r3, r0
}
 800c05e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c060:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c064:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c068:	f022 0203 	bic.w	r2, r2, #3
 800c06c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c070:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800c074:	f023 0302 	bic.w	r3, r3, #2
 800c078:	604b      	str	r3, [r1, #4]
}
 800c07a:	4770      	bx	lr

0800c07c <USB_DevDisconnect>:
{
 800c07c:	4603      	mov	r3, r0
}
 800c07e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c080:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c084:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c088:	f022 0203 	bic.w	r2, r2, #3
 800c08c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c090:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800c094:	f043 0302 	orr.w	r3, r3, #2
 800c098:	604b      	str	r3, [r1, #4]
}
 800c09a:	4770      	bx	lr

0800c09c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800c09c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800c09e:	6980      	ldr	r0, [r0, #24]
}
 800c0a0:	4010      	ands	r0, r2
 800c0a2:	4770      	bx	lr

0800c0a4 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800c0a4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c0a8:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800c0ac:	4018      	ands	r0, r3
}
 800c0ae:	0c00      	lsrs	r0, r0, #16
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop

0800c0b4 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800c0b4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c0b8:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800c0bc:	4018      	ands	r0, r3
}
 800c0be:	b280      	uxth	r0, r0
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop

0800c0c4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c0c4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c0c8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c0cc:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c0d0:	6940      	ldr	r0, [r0, #20]
}
 800c0d2:	4010      	ands	r0, r2
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop

0800c0d8 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800c0d8:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c0dc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c0e0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c0e4:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c0e8:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c0ec:	40cb      	lsrs	r3, r1
 800c0ee:	01db      	lsls	r3, r3, #7
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	4313      	orrs	r3, r2
}
 800c0f4:	4018      	ands	r0, r3
 800c0f6:	4770      	bx	lr

0800c0f8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800c0f8:	6940      	ldr	r0, [r0, #20]
}
 800c0fa:	f000 0001 	and.w	r0, r0, #1
 800c0fe:	4770      	bx	lr

0800c100 <USB_ActivateSetup>:
{
 800c100:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c102:	4a09      	ldr	r2, [pc, #36]	; (800c128 <USB_ActivateSetup+0x28>)
}
 800c104:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c106:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800c10a:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c10c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800c110:	4022      	ands	r2, r4
}
 800c112:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c116:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c11a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800c11e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c122:	604b      	str	r3, [r1, #4]
}
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	fffff800 	.word	0xfffff800

0800c12c <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c12c:	4b14      	ldr	r3, [pc, #80]	; (800c180 <USB_EP0_OutStart+0x54>)
{
 800c12e:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c130:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c132:	429c      	cmp	r4, r3
 800c134:	d81a      	bhi.n	800c16c <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c136:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c13a:	2300      	movs	r3, #0
  if (dma == 1U)
 800c13c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c13e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c140:	6903      	ldr	r3, [r0, #16]
 800c142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c146:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c148:	6903      	ldr	r3, [r0, #16]
 800c14a:	f043 0318 	orr.w	r3, r3, #24
 800c14e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c150:	6903      	ldr	r3, [r0, #16]
 800c152:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c156:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800c158:	d104      	bne.n	800c164 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c15a:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c15c:	6803      	ldr	r3, [r0, #0]
 800c15e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c162:	6003      	str	r3, [r0, #0]
}
 800c164:	2000      	movs	r0, #0
 800c166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c16a:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c16c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c170:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800c174:	2b00      	cmp	r3, #0
 800c176:	dae0      	bge.n	800c13a <USB_EP0_OutStart+0xe>
}
 800c178:	2000      	movs	r0, #0
 800c17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	4f54300a 	.word	0x4f54300a

0800c184 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c184:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c186:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c18a:	b194      	cbz	r4, 800c1b2 <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c18c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c190:	b16b      	cbz	r3, 800c1ae <USBD_CDC_EP0_RxReady+0x2a>
 800c192:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c196:	28ff      	cmp	r0, #255	; 0xff
 800c198:	d009      	beq.n	800c1ae <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	4621      	mov	r1, r4
 800c19e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c1a2:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800c1a4:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800c1a6:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800c1a8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800c1ac:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800c1ae:	2000      	movs	r0, #0
}
 800c1b0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c1b2:	2003      	movs	r0, #3
}
 800c1b4:	bd10      	pop	{r4, pc}
 800c1b6:	bf00      	nop

0800c1b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1b8:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c1ba:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 800c1bc:	4801      	ldr	r0, [pc, #4]	; (800c1c4 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c1be:	801a      	strh	r2, [r3, #0]
}
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	24000234 	.word	0x24000234

0800c1c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c1c8:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c1ca:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 800c1cc:	4801      	ldr	r0, [pc, #4]	; (800c1d4 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c1ce:	801a      	strh	r2, [r3, #0]
}
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	24000278 	.word	0x24000278

0800c1d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c1d8:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c1da:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800c1dc:	4801      	ldr	r0, [pc, #4]	; (800c1e4 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c1de:	801a      	strh	r2, [r3, #0]
}
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	240002c8 	.word	0x240002c8

0800c1e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c1e8:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c1ea:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800c1ec:	4801      	ldr	r0, [pc, #4]	; (800c1f4 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c1ee:	801a      	strh	r2, [r3, #0]
}
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	240002bc 	.word	0x240002bc

0800c1f8 <USBD_CDC_DataOut>:
{
 800c1f8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1fa:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800c1fe:	b17d      	cbz	r5, 800c220 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c200:	4604      	mov	r4, r0
 800c202:	f001 f91d 	bl	800d440 <USBD_LL_GetRxDataSize>
 800c206:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c208:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c20c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c210:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c214:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c216:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c21a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c21c:	2000      	movs	r0, #0
}
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800c220:	2003      	movs	r0, #3
}
 800c222:	bd38      	pop	{r3, r4, r5, pc}

0800c224 <USBD_CDC_DataIn>:
{
 800c224:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800c226:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 800c22a:	b36d      	cbz	r5, 800c288 <USBD_CDC_DataIn+0x64>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c22c:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800c230:	4684      	mov	ip, r0
 800c232:	460a      	mov	r2, r1
 800c234:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c238:	f8de 3018 	ldr.w	r3, [lr, #24]
 800c23c:	b96b      	cbnz	r3, 800c25a <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c23e:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800c242:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c244:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800c246:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c24a:	b1db      	cbz	r3, 800c284 <USBD_CDC_DataIn+0x60>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c24c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800c250:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800c254:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c256:	4620      	mov	r0, r4
}
 800c258:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c25a:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800c25e:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800c262:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800c266:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800c268:	fbb3 f6f4 	udiv	r6, r3, r4
 800c26c:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c270:	2c00      	cmp	r4, #0
 800c272:	d1e4      	bne.n	800c23e <USBD_CDC_DataIn+0x1a>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c274:	4623      	mov	r3, r4
 800c276:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800c278:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c27c:	f001 f8c4 	bl	800d408 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800c280:	4620      	mov	r0, r4
}
 800c282:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800c284:	4618      	mov	r0, r3
}
 800c286:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800c288:	2003      	movs	r0, #3
}
 800c28a:	bd70      	pop	{r4, r5, r6, pc}

0800c28c <USBD_CDC_Setup>:
{
 800c28c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t ifalt = 0U;
 800c28e:	2300      	movs	r3, #0
{
 800c290:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c292:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800c296:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800c29a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800c29e:	2d00      	cmp	r5, #0
 800c2a0:	d067      	beq.n	800c372 <USBD_CDC_Setup+0xe6>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2a2:	f891 c000 	ldrb.w	ip, [r1]
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	f01c 0760 	ands.w	r7, ip, #96	; 0x60
 800c2ae:	d01e      	beq.n	800c2ee <USBD_CDC_Setup+0x62>
 800c2b0:	2f20      	cmp	r7, #32
 800c2b2:	d007      	beq.n	800c2c4 <USBD_CDC_Setup+0x38>
          USBD_CtlError(pdev, req);
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	4630      	mov	r0, r6
          ret = USBD_FAIL;
 800c2b8:	2703      	movs	r7, #3
          USBD_CtlError(pdev, req);
 800c2ba:	f000 fd45 	bl	800cd48 <USBD_CtlError>
}
 800c2be:	4638      	mov	r0, r7
 800c2c0:	b003      	add	sp, #12
 800c2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800c2c4:	88ca      	ldrh	r2, [r1, #6]
 800c2c6:	b38a      	cbz	r2, 800c32c <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800c2c8:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c2cc:	d055      	beq.n	800c37a <USBD_CDC_Setup+0xee>
  USBD_StatusTypeDef ret = USBD_OK;
 800c2ce:	461f      	mov	r7, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2d0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	7860      	ldrb	r0, [r4, #1]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c2dc:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c2de:	4629      	mov	r1, r5
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	2a07      	cmp	r2, #7
 800c2e4:	bf28      	it	cs
 800c2e6:	2207      	movcs	r2, #7
 800c2e8:	f000 fd64 	bl	800cdb4 <USBD_CtlSendData>
 800c2ec:	e7e7      	b.n	800c2be <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800c2ee:	784b      	ldrb	r3, [r1, #1]
 800c2f0:	2b0b      	cmp	r3, #11
 800c2f2:	d8df      	bhi.n	800c2b4 <USBD_CDC_Setup+0x28>
 800c2f4:	a201      	add	r2, pc, #4	; (adr r2, 800c2fc <USBD_CDC_Setup+0x70>)
 800c2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fa:	bf00      	nop
 800c2fc:	0800c35d 	.word	0x0800c35d
 800c300:	0800c2bf 	.word	0x0800c2bf
 800c304:	0800c2b5 	.word	0x0800c2b5
 800c308:	0800c2b5 	.word	0x0800c2b5
 800c30c:	0800c2b5 	.word	0x0800c2b5
 800c310:	0800c2b5 	.word	0x0800c2b5
 800c314:	0800c2b5 	.word	0x0800c2b5
 800c318:	0800c2b5 	.word	0x0800c2b5
 800c31c:	0800c2b5 	.word	0x0800c2b5
 800c320:	0800c2b5 	.word	0x0800c2b5
 800c324:	0800c349 	.word	0x0800c349
 800c328:	0800c33f 	.word	0x0800c33f
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c32c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 800c330:	4617      	mov	r7, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c332:	7848      	ldrb	r0, [r1, #1]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	4798      	blx	r3
}
 800c338:	4638      	mov	r0, r7
 800c33a:	b003      	add	sp, #12
 800c33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c33e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c342:	2b03      	cmp	r3, #3
 800c344:	d0bb      	beq.n	800c2be <USBD_CDC_Setup+0x32>
 800c346:	e7b5      	b.n	800c2b4 <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c348:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c34c:	2b03      	cmp	r3, #3
 800c34e:	d1b1      	bne.n	800c2b4 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c350:	2201      	movs	r2, #1
 800c352:	f10d 0105 	add.w	r1, sp, #5
 800c356:	f000 fd2d 	bl	800cdb4 <USBD_CtlSendData>
 800c35a:	e7b0      	b.n	800c2be <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c35c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800c360:	2a03      	cmp	r2, #3
 800c362:	d1a7      	bne.n	800c2b4 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c364:	2202      	movs	r2, #2
 800c366:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 800c36a:	461f      	mov	r7, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c36c:	f000 fd22 	bl	800cdb4 <USBD_CtlSendData>
 800c370:	e7a5      	b.n	800c2be <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800c372:	2703      	movs	r7, #3
}
 800c374:	4638      	mov	r0, r7
 800c376:	b003      	add	sp, #12
 800c378:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hcdc->CmdOpCode = req->bRequest;
 800c37a:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 800c37c:	461f      	mov	r7, r3
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c37e:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
          hcdc->CmdOpCode = req->bRequest;
 800c382:	f885 1200 	strb.w	r1, [r5, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c386:	4629      	mov	r1, r5
 800c388:	f000 fd2c 	bl	800cde4 <USBD_CtlPrepareRx>
 800c38c:	e797      	b.n	800c2be <USBD_CDC_Setup+0x32>
 800c38e:	bf00      	nop

0800c390 <USBD_CDC_DeInit>:
{
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c394:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c396:	2181      	movs	r1, #129	; 0x81
 800c398:	f000 ffea 	bl	800d370 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c39c:	2101      	movs	r1, #1
 800c39e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c3a0:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c3a2:	f000 ffe5 	bl	800d370 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c3a6:	2182      	movs	r1, #130	; 0x82
 800c3a8:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c3aa:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c3ae:	f000 ffdf 	bl	800d370 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800c3b2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c3b6:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800c3b8:	b14b      	cbz	r3, 800c3ce <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c3ba:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c3c2:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800c3c6:	f001 f843 	bl	800d450 <USBD_static_free>
    pdev->pClassData = NULL;
 800c3ca:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	bd38      	pop	{r3, r4, r5, pc}
 800c3d2:	bf00      	nop

0800c3d4 <USBD_CDC_Init>:
{
 800c3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d8:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c3da:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c3de:	f001 f833 	bl	800d448 <USBD_static_malloc>
  if (hcdc == NULL)
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d04c      	beq.n	800c482 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3e8:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800c3ea:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3ee:	b393      	cbz	r3, 800c456 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c3f0:	2340      	movs	r3, #64	; 0x40
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	2181      	movs	r1, #129	; 0x81
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 ffa8 	bl	800d34c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c3fc:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c3fe:	2340      	movs	r3, #64	; 0x40
 800c400:	4631      	mov	r1, r6
 800c402:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c404:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c406:	4620      	mov	r0, r4
 800c408:	f000 ffa0 	bl	800d34c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c40c:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c40e:	2203      	movs	r2, #3
 800c410:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c412:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c416:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c418:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c41c:	2308      	movs	r3, #8
 800c41e:	f000 ff95 	bl	800d34c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c422:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c426:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800c42a:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c42c:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4798      	blx	r3
  hcdc->TxState = 0U;
 800c434:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800c438:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c43c:	7c26      	ldrb	r6, [r4, #16]
 800c43e:	b9ae      	cbnz	r6, 800c46c <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c440:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c444:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c448:	4641      	mov	r1, r8
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 ffea 	bl	800d424 <USBD_LL_PrepareReceive>
}
 800c450:	4630      	mov	r0, r6
 800c452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c45a:	2202      	movs	r2, #2
 800c45c:	2181      	movs	r1, #129	; 0x81
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 ff74 	bl	800d34c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c464:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c46a:	e7c9      	b.n	800c400 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 800c46c:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c46e:	2340      	movs	r3, #64	; 0x40
 800c470:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c474:	4641      	mov	r1, r8
 800c476:	4620      	mov	r0, r4
 800c478:	f000 ffd4 	bl	800d424 <USBD_LL_PrepareReceive>
}
 800c47c:	4630      	mov	r0, r6
 800c47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800c482:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800c484:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800c488:	4630      	mov	r0, r6
 800c48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c48e:	bf00      	nop

0800c490 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c490:	4603      	mov	r3, r0
  if (fops == NULL)
 800c492:	b119      	cbz	r1, 800c49c <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 800c494:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 800c496:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 800c49a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c49c:	2003      	movs	r0, #3
}
 800c49e:	4770      	bx	lr

0800c4a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4a0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c4a4:	b12b      	cbz	r3, 800c4b2 <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800c4a6:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800c4a8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c4ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800c4b0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c4b2:	2003      	movs	r0, #3
}
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop

0800c4b8 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4b8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c4bc:	b11b      	cbz	r3, 800c4c6 <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800c4be:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800c4c0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800c4c4:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c4c6:	2003      	movs	r0, #3
}
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop

0800c4cc <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4cc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800c4d0:	b192      	cbz	r2, 800c4f8 <USBD_CDC_TransmitPacket+0x2c>
{
 800c4d2:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800c4d4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800c4d8:	b10c      	cbz	r4, 800c4de <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c4da:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800c4dc:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800c4de:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c4e0:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800c4e2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c4e6:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c4ea:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c4ee:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c4f0:	f000 ff8a 	bl	800d408 <USBD_LL_Transmit>
    ret = USBD_OK;
 800c4f4:	4620      	mov	r0, r4
}
 800c4f6:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c4f8:	2003      	movs	r0, #3
}
 800c4fa:	4770      	bx	lr

0800c4fc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4fc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800c500:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800c502:	b19a      	cbz	r2, 800c52c <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c504:	7c04      	ldrb	r4, [r0, #16]
 800c506:	b144      	cbz	r4, 800c51a <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c508:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c50a:	2340      	movs	r3, #64	; 0x40
 800c50c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c510:	2101      	movs	r1, #1
 800c512:	f000 ff87 	bl	800d424 <USBD_LL_PrepareReceive>
}
 800c516:	4620      	mov	r0, r4
 800c518:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c51a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c51e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c522:	2101      	movs	r1, #1
 800c524:	f000 ff7e 	bl	800d424 <USBD_LL_PrepareReceive>
}
 800c528:	4620      	mov	r0, r4
 800c52a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c52c:	2403      	movs	r4, #3
}
 800c52e:	4620      	mov	r0, r4
 800c530:	bd10      	pop	{r4, pc}
 800c532:	bf00      	nop

0800c534 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c534:	b178      	cbz	r0, 800c556 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c536:	2300      	movs	r3, #0
 800c538:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c53c:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c540:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c544:	b109      	cbz	r1, 800c54a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800c546:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c54a:	2301      	movs	r3, #1
  pdev->id = id;
 800c54c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c54e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c552:	f000 bead 	b.w	800d2b0 <USBD_LL_Init>

  return ret;
}
 800c556:	2003      	movs	r0, #3
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop

0800c55c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c55c:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800c55e:	2400      	movs	r4, #0
{
 800c560:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800c562:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800c566:	b181      	cbz	r1, 800c58a <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c568:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800c56a:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 800c56c:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c570:	b143      	cbz	r3, 800c584 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c572:	f10d 0006 	add.w	r0, sp, #6
 800c576:	4798      	blx	r3
 800c578:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c57a:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c57c:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 800c580:	b003      	add	sp, #12
 800c582:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800c584:	4618      	mov	r0, r3
}
 800c586:	b003      	add	sp, #12
 800c588:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800c58a:	2003      	movs	r0, #3
}
 800c58c:	b003      	add	sp, #12
 800c58e:	bd30      	pop	{r4, r5, pc}

0800c590 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c590:	f000 bece 	b.w	800d330 <USBD_LL_Start>

0800c594 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800c594:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c598:	b10b      	cbz	r3, 800c59e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4718      	bx	r3
  }

  return ret;
}
 800c59e:	2003      	movs	r0, #3
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop

0800c5a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5a4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c5a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c5aa:	b10b      	cbz	r3, 800c5b0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	4798      	blx	r3
  }

  return USBD_OK;
}
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	bd08      	pop	{r3, pc}

0800c5b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5b4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5b6:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800c5ba:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5bc:	4628      	mov	r0, r5
 800c5be:	f000 fbb7 	bl	800cd30 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 800c5c2:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 800c5c6:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800c5ca:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800c5cc:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800c5d0:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800c5d4:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d009      	beq.n	800c5f0 <USBD_LL_SetupStage+0x3c>
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d013      	beq.n	800c608 <USBD_LL_SetupStage+0x54>
 800c5e0:	b163      	cbz	r3, 800c5fc <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800c5e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c5ec:	f000 bece 	b.w	800d38c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4620      	mov	r0, r4
}
 800c5f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c5f8:	f000 bac6 	b.w	800cb88 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	4620      	mov	r0, r4
}
 800c600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c604:	f000 b92a 	b.w	800c85c <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c608:	4629      	mov	r1, r5
 800c60a:	4620      	mov	r0, r4
}
 800c60c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c610:	f000 baf2 	b.w	800cbf8 <USBD_StdEPReq>

0800c614 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c618:	b929      	cbnz	r1, 800c626 <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c61a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d00d      	beq.n	800c63e <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800c622:	2000      	movs	r0, #0
 800c624:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c626:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c62a:	2b03      	cmp	r3, #3
 800c62c:	d1f9      	bne.n	800c622 <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800c62e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0f4      	beq.n	800c622 <USBD_LL_DataOutStage+0xe>
}
 800c638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c63c:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c63e:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 800c642:	42ab      	cmp	r3, r5
 800c644:	d808      	bhi.n	800c658 <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c646:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d00f      	beq.n	800c66e <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 fbe0 	bl	800ce14 <USBD_CtlSendStatus>
}
 800c654:	2000      	movs	r0, #0
 800c656:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c658:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c65a:	4611      	mov	r1, r2
 800c65c:	462a      	mov	r2, r5
 800c65e:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800c660:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c664:	bf28      	it	cs
 800c666:	461a      	movcs	r2, r3
 800c668:	f000 fbca 	bl	800ce00 <USBD_CtlContinueRx>
 800c66c:	e7d9      	b.n	800c622 <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800c66e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0ea      	beq.n	800c64e <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 800c678:	4798      	blx	r3
 800c67a:	e7e8      	b.n	800c64e <USBD_LL_DataOutStage+0x3a>

0800c67c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c67c:	b570      	push	{r4, r5, r6, lr}
 800c67e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c680:	b949      	cbnz	r1, 800c696 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c682:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c686:	2b02      	cmp	r3, #2
 800c688:	d011      	beq.n	800c6ae <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c68a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d022      	beq.n	800c6d8 <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 800c692:	2000      	movs	r0, #0
 800c694:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c696:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	d1f9      	bne.n	800c692 <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 800c69e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c6a2:	695b      	ldr	r3, [r3, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d0f4      	beq.n	800c692 <USBD_LL_DataInStage+0x16>
}
 800c6a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c6ac:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c6ae:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800c6b2:	460d      	mov	r5, r1
 800c6b4:	42b3      	cmp	r3, r6
 800c6b6:	d814      	bhi.n	800c6e2 <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 800c6b8:	d020      	beq.n	800c6fc <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ba:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c6be:	2b03      	cmp	r3, #3
 800c6c0:	d02f      	beq.n	800c722 <USBD_LL_DataInStage+0xa6>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6c2:	2180      	movs	r1, #128	; 0x80
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f000 fe61 	bl	800d38c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f000 fbae 	bl	800ce2c <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800c6d0:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d1dc      	bne.n	800c692 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 800c6dc:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800c6e0:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c6e2:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c6e4:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800c6e6:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	f000 fb71 	bl	800cdd0 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6ee:	462b      	mov	r3, r5
 800c6f0:	462a      	mov	r2, r5
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f000 fe95 	bl	800d424 <USBD_LL_PrepareReceive>
 800c6fa:	e7c6      	b.n	800c68a <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800c6fc:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d8db      	bhi.n	800c6ba <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 800c702:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800c706:	429a      	cmp	r2, r3
 800c708:	d2d7      	bcs.n	800c6ba <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c70a:	460a      	mov	r2, r1
 800c70c:	f000 fb60 	bl	800cdd0 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c710:	462b      	mov	r3, r5
 800c712:	462a      	mov	r2, r5
 800c714:	4629      	mov	r1, r5
 800c716:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800c718:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c71c:	f000 fe82 	bl	800d424 <USBD_LL_PrepareReceive>
 800c720:	e7b3      	b.n	800c68a <USBD_LL_DataInStage+0xe>
            if (pdev->pClass->EP0_TxSent != NULL)
 800c722:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d0ca      	beq.n	800c6c2 <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 800c72c:	4620      	mov	r0, r4
 800c72e:	4798      	blx	r3
 800c730:	e7c7      	b.n	800c6c2 <USBD_LL_DataInStage+0x46>
 800c732:	bf00      	nop

0800c734 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800c734:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c736:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800c738:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c73c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800c740:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c742:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800c746:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800c74a:	b1eb      	cbz	r3, 800c788 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800c74c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800c754:	b112      	cbz	r2, 800c75c <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	b103      	cbz	r3, 800c75c <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c75a:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c75c:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c75e:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c760:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c762:	4620      	mov	r0, r4
 800c764:	462b      	mov	r3, r5
 800c766:	4611      	mov	r1, r2
 800c768:	f000 fdf0 	bl	800d34c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c76c:	462b      	mov	r3, r5
 800c76e:	2200      	movs	r2, #0
 800c770:	2180      	movs	r1, #128	; 0x80
 800c772:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c774:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c778:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c77c:	f000 fde6 	bl	800d34c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800c780:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c782:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c784:	6225      	str	r5, [r4, #32]
}
 800c786:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c788:	2003      	movs	r0, #3
}
 800c78a:	4770      	bx	lr

0800c78c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c78c:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800c78e:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800c790:	7419      	strb	r1, [r3, #16]
}
 800c792:	4770      	bx	lr

0800c794 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c794:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c796:	2104      	movs	r1, #4

  return USBD_OK;
}
 800c798:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800c79a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c79e:	b2d2      	uxtb	r2, r2
 800c7a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c7a4:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop

0800c7ac <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c7ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d104      	bne.n	800c7be <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c7b4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800c7be:	2000      	movs	r0, #0
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop

0800c7c4 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800c7c4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c7c8:	b15a      	cbz	r2, 800c7e2 <USBD_LL_SOF+0x1e>
{
 800c7ca:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	d001      	beq.n	800c7d8 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800c7d4:	2000      	movs	r0, #0
}
 800c7d6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800c7d8:	69d3      	ldr	r3, [r2, #28]
 800c7da:	b123      	cbz	r3, 800c7e6 <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800c7dc:	4798      	blx	r3
  return USBD_OK;
 800c7de:	2000      	movs	r0, #0
}
 800c7e0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c7e2:	2003      	movs	r0, #3
}
 800c7e4:	4770      	bx	lr
  return USBD_OK;
 800c7e6:	4618      	mov	r0, r3
}
 800c7e8:	bd08      	pop	{r3, pc}
 800c7ea:	bf00      	nop

0800c7ec <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800c7ec:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c7f0:	b15a      	cbz	r2, 800c80a <USBD_LL_IsoINIncomplete+0x1e>
{
 800c7f2:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c7f8:	2b03      	cmp	r3, #3
 800c7fa:	d001      	beq.n	800c800 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c7fc:	2000      	movs	r0, #0
}
 800c7fe:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c800:	6a13      	ldr	r3, [r2, #32]
 800c802:	b123      	cbz	r3, 800c80e <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c804:	4798      	blx	r3
  return USBD_OK;
 800c806:	2000      	movs	r0, #0
}
 800c808:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c80a:	2003      	movs	r0, #3
}
 800c80c:	4770      	bx	lr
  return USBD_OK;
 800c80e:	4618      	mov	r0, r3
}
 800c810:	bd08      	pop	{r3, pc}
 800c812:	bf00      	nop

0800c814 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800c814:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c818:	b15a      	cbz	r2, 800c832 <USBD_LL_IsoOUTIncomplete+0x1e>
{
 800c81a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c81c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c820:	2b03      	cmp	r3, #3
 800c822:	d001      	beq.n	800c828 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c824:	2000      	movs	r0, #0
}
 800c826:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c828:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c82a:	b123      	cbz	r3, 800c836 <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c82c:	4798      	blx	r3
  return USBD_OK;
 800c82e:	2000      	movs	r0, #0
}
 800c830:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c832:	2003      	movs	r0, #3
}
 800c834:	4770      	bx	lr
  return USBD_OK;
 800c836:	4618      	mov	r0, r3
}
 800c838:	bd08      	pop	{r3, pc}
 800c83a:	bf00      	nop

0800c83c <USBD_LL_DevConnected>:
 800c83c:	2000      	movs	r0, #0
 800c83e:	4770      	bx	lr

0800c840 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c840:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800c842:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c846:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800c84a:	b12a      	cbz	r2, 800c858 <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c84c:	6852      	ldr	r2, [r2, #4]
 800c84e:	7901      	ldrb	r1, [r0, #4]
{
 800c850:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c852:	4790      	blx	r2
  }

  return USBD_OK;
}
 800c854:	2000      	movs	r0, #0
 800c856:	bd08      	pop	{r3, pc}
 800c858:	2000      	movs	r0, #0
 800c85a:	4770      	bx	lr

0800c85c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c85c:	b570      	push	{r4, r5, r6, lr}
 800c85e:	780c      	ldrb	r4, [r1, #0]
 800c860:	b082      	sub	sp, #8
 800c862:	460e      	mov	r6, r1
 800c864:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c866:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800c86a:	2c20      	cmp	r4, #32
 800c86c:	d00e      	beq.n	800c88c <USBD_StdDevReq+0x30>
 800c86e:	2c40      	cmp	r4, #64	; 0x40
 800c870:	d00c      	beq.n	800c88c <USBD_StdDevReq+0x30>
 800c872:	b1a4      	cbz	r4, 800c89e <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c874:	2180      	movs	r1, #128	; 0x80
 800c876:	4628      	mov	r0, r5
 800c878:	f000 fd88 	bl	800d38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c87c:	2100      	movs	r1, #0
 800c87e:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800c880:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800c882:	f000 fd83 	bl	800d38c <USBD_LL_StallEP>
}
 800c886:	4620      	mov	r0, r4
 800c888:	b002      	add	sp, #8
 800c88a:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c88c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800c890:	4631      	mov	r1, r6
 800c892:	4628      	mov	r0, r5
 800c894:	689b      	ldr	r3, [r3, #8]
}
 800c896:	b002      	add	sp, #8
 800c898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c89c:	4718      	bx	r3
      switch (req->bRequest)
 800c89e:	784b      	ldrb	r3, [r1, #1]
 800c8a0:	2b09      	cmp	r3, #9
 800c8a2:	d8e7      	bhi.n	800c874 <USBD_StdDevReq+0x18>
 800c8a4:	a201      	add	r2, pc, #4	; (adr r2, 800c8ac <USBD_StdDevReq+0x50>)
 800c8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8aa:	bf00      	nop
 800c8ac:	0800c90d 	.word	0x0800c90d
 800c8b0:	0800c93b 	.word	0x0800c93b
 800c8b4:	0800c875 	.word	0x0800c875
 800c8b8:	0800c959 	.word	0x0800c959
 800c8bc:	0800c875 	.word	0x0800c875
 800c8c0:	0800c961 	.word	0x0800c961
 800c8c4:	0800c999 	.word	0x0800c999
 800c8c8:	0800c875 	.word	0x0800c875
 800c8cc:	0800c9b5 	.word	0x0800c9b5
 800c8d0:	0800c8d5 	.word	0x0800c8d5
  cfgidx = (uint8_t)(req->wValue);
 800c8d4:	7889      	ldrb	r1, [r1, #2]
 800c8d6:	4eab      	ldr	r6, [pc, #684]	; (800cb84 <USBD_StdDevReq+0x328>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8d8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800c8da:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8dc:	f200 8140 	bhi.w	800cb60 <USBD_StdDevReq+0x304>
  switch (pdev->dev_state)
 800c8e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	f000 8129 	beq.w	800cb3e <USBD_StdDevReq+0x2e2>
 800c8ec:	2a03      	cmp	r2, #3
 800c8ee:	f000 8105 	beq.w	800cafc <USBD_StdDevReq+0x2a0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8f2:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800c8f4:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8f6:	f000 fd49 	bl	800d38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f000 fd45 	bl	800d38c <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c902:	7831      	ldrb	r1, [r6, #0]
 800c904:	4628      	mov	r0, r5
 800c906:	f7ff fe4d 	bl	800c5a4 <USBD_ClrClassConfig>
      break;
 800c90a:	e7bc      	b.n	800c886 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800c90c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800c910:	3a01      	subs	r2, #1
 800c912:	2a02      	cmp	r2, #2
 800c914:	d866      	bhi.n	800c9e4 <USBD_StdDevReq+0x188>
      if (req->wLength != 0x2U)
 800c916:	88ca      	ldrh	r2, [r1, #6]
 800c918:	2a02      	cmp	r2, #2
 800c91a:	d163      	bne.n	800c9e4 <USBD_StdDevReq+0x188>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c91c:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800c91e:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c922:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800c924:	b10a      	cbz	r2, 800c92a <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c926:	2203      	movs	r2, #3
 800c928:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c92a:	2202      	movs	r2, #2
 800c92c:	f105 010c 	add.w	r1, r5, #12
 800c930:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800c932:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c934:	f000 fa3e 	bl	800cdb4 <USBD_CtlSendData>
      break;
 800c938:	e7a5      	b.n	800c886 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800c93a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c93e:	3b01      	subs	r3, #1
 800c940:	2b02      	cmp	r3, #2
 800c942:	d84f      	bhi.n	800c9e4 <USBD_StdDevReq+0x188>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c944:	884b      	ldrh	r3, [r1, #2]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d19d      	bne.n	800c886 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800c94a:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 800c94c:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800c94e:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c952:	f000 fa5f 	bl	800ce14 <USBD_CtlSendStatus>
 800c956:	e796      	b.n	800c886 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c958:	884b      	ldrh	r3, [r1, #2]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d193      	bne.n	800c886 <USBD_StdDevReq+0x2a>
 800c95e:	e7f5      	b.n	800c94c <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c960:	888b      	ldrh	r3, [r1, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d13e      	bne.n	800c9e4 <USBD_StdDevReq+0x188>
 800c966:	88cb      	ldrh	r3, [r1, #6]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d13b      	bne.n	800c9e4 <USBD_StdDevReq+0x188>
 800c96c:	884e      	ldrh	r6, [r1, #2]
 800c96e:	2e7f      	cmp	r6, #127	; 0x7f
 800c970:	d838      	bhi.n	800c9e4 <USBD_StdDevReq+0x188>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c972:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c976:	2b03      	cmp	r3, #3
 800c978:	d034      	beq.n	800c9e4 <USBD_StdDevReq+0x188>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c97a:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800c97c:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c980:	f000 fd34 	bl	800d3ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c984:	4628      	mov	r0, r5
 800c986:	f000 fa45 	bl	800ce14 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c98a:	2e00      	cmp	r6, #0
 800c98c:	f040 80d3 	bne.w	800cb36 <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c990:	2301      	movs	r3, #1
 800c992:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c996:	e776      	b.n	800c886 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800c998:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800c99a:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800c99c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800c9a0:	0a13      	lsrs	r3, r2, #8
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	2b06      	cmp	r3, #6
 800c9a6:	d81d      	bhi.n	800c9e4 <USBD_StdDevReq+0x188>
 800c9a8:	e8df f003 	tbb	[pc, r3]
 800c9ac:	1c624d5a 	.word	0x1c624d5a
 800c9b0:	431c      	.short	0x431c
 800c9b2:	27          	.byte	0x27
 800c9b3:	00          	.byte	0x00
  if (req->wLength != 1U)
 800c9b4:	88ca      	ldrh	r2, [r1, #6]
 800c9b6:	2a01      	cmp	r2, #1
 800c9b8:	d114      	bne.n	800c9e4 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 800c9ba:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800c9be:	2902      	cmp	r1, #2
 800c9c0:	b2cb      	uxtb	r3, r1
 800c9c2:	f200 8094 	bhi.w	800caee <USBD_StdDevReq+0x292>
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f43f af54 	beq.w	800c874 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800c9cc:	4601      	mov	r1, r0
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c9d4:	f000 f9ee 	bl	800cdb4 <USBD_CtlSendData>
        break;
 800c9d8:	e755      	b.n	800c886 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c9da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d15c      	bne.n	800ca9e <USBD_StdDevReq+0x242>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9e4:	2180      	movs	r1, #128	; 0x80
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 fcd0 	bl	800d38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	f000 fccc 	bl	800d38c <USBD_LL_StallEP>
}
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	b002      	add	sp, #8
 800c9f8:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9fa:	7c03      	ldrb	r3, [r0, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1f1      	bne.n	800c9e4 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ca00:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ca04:	f10d 0006 	add.w	r0, sp, #6
 800ca08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca0c:	2307      	movs	r3, #7
 800ca0e:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800ca10:	88f2      	ldrh	r2, [r6, #6]
 800ca12:	2a00      	cmp	r2, #0
 800ca14:	d067      	beq.n	800cae6 <USBD_StdDevReq+0x28a>
    if (len != 0U)
 800ca16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d0e2      	beq.n	800c9e4 <USBD_StdDevReq+0x188>
      len = MIN(len, req->wLength);
 800ca1e:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca20:	4601      	mov	r1, r0
 800ca22:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800ca24:	bf28      	it	cs
 800ca26:	461a      	movcs	r2, r3
 800ca28:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca2c:	f000 f9c2 	bl	800cdb4 <USBD_CtlSendData>
 800ca30:	e729      	b.n	800c886 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca32:	7c03      	ldrb	r3, [r0, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1d5      	bne.n	800c9e4 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ca38:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ca3c:	f10d 0006 	add.w	r0, sp, #6
 800ca40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca42:	4798      	blx	r3
  if (err != 0U)
 800ca44:	e7e4      	b.n	800ca10 <USBD_StdDevReq+0x1b4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca46:	7c03      	ldrb	r3, [r0, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f040 8092 	bne.w	800cb72 <USBD_StdDevReq+0x316>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ca4e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ca52:	f10d 0006 	add.w	r0, sp, #6
 800ca56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca58:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca5a:	2302      	movs	r3, #2
 800ca5c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ca5e:	e7d7      	b.n	800ca10 <USBD_StdDevReq+0x1b4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ca60:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ca64:	f10d 0106 	add.w	r1, sp, #6
 800ca68:	7c00      	ldrb	r0, [r0, #16]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4798      	blx	r3
  if (err != 0U)
 800ca6e:	e7cf      	b.n	800ca10 <USBD_StdDevReq+0x1b4>
      switch ((uint8_t)(req->wValue))
 800ca70:	b2d2      	uxtb	r2, r2
 800ca72:	2a05      	cmp	r2, #5
 800ca74:	d8b6      	bhi.n	800c9e4 <USBD_StdDevReq+0x188>
 800ca76:	a301      	add	r3, pc, #4	; (adr r3, 800ca7c <USBD_StdDevReq+0x220>)
 800ca78:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800ca7c:	0800c9db 	.word	0x0800c9db
 800ca80:	0800cacd 	.word	0x0800cacd
 800ca84:	0800cac1 	.word	0x0800cac1
 800ca88:	0800cab5 	.word	0x0800cab5
 800ca8c:	0800caa9 	.word	0x0800caa9
 800ca90:	0800ca95 	.word	0x0800ca95
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d0a2      	beq.n	800c9e4 <USBD_StdDevReq+0x188>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca9e:	f10d 0106 	add.w	r1, sp, #6
 800caa2:	7c28      	ldrb	r0, [r5, #16]
 800caa4:	4798      	blx	r3
  if (err != 0U)
 800caa6:	e7b3      	b.n	800ca10 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800caa8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800caac:	695b      	ldr	r3, [r3, #20]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1f5      	bne.n	800ca9e <USBD_StdDevReq+0x242>
 800cab2:	e797      	b.n	800c9e4 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cab4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1ef      	bne.n	800ca9e <USBD_StdDevReq+0x242>
 800cabe:	e791      	b.n	800c9e4 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cac0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1e9      	bne.n	800ca9e <USBD_StdDevReq+0x242>
 800caca:	e78b      	b.n	800c9e4 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cacc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1e3      	bne.n	800ca9e <USBD_StdDevReq+0x242>
 800cad6:	e785      	b.n	800c9e4 <USBD_StdDevReq+0x188>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cad8:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800cada:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cadc:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cade:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cae2:	f7ff fd5f 	bl	800c5a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cae6:	4628      	mov	r0, r5
 800cae8:	f000 f994 	bl	800ce14 <USBD_CtlSendStatus>
 800caec:	e6cb      	b.n	800c886 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800caee:	2b03      	cmp	r3, #3
 800caf0:	f47f aec0 	bne.w	800c874 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800caf4:	1d01      	adds	r1, r0, #4
 800caf6:	f000 f95d 	bl	800cdb4 <USBD_CtlSendData>
        break;
 800cafa:	e6c4      	b.n	800c886 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800cafc:	2900      	cmp	r1, #0
 800cafe:	d0eb      	beq.n	800cad8 <USBD_StdDevReq+0x27c>
      else if (cfgidx != pdev->dev_config)
 800cb00:	6841      	ldr	r1, [r0, #4]
 800cb02:	2901      	cmp	r1, #1
 800cb04:	d0ef      	beq.n	800cae6 <USBD_StdDevReq+0x28a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb06:	b2c9      	uxtb	r1, r1
 800cb08:	f7ff fd4c 	bl	800c5a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb0c:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb0e:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800cb10:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb12:	f7ff fd3f 	bl	800c594 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cb16:	4606      	mov	r6, r0
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d0e4      	beq.n	800cae6 <USBD_StdDevReq+0x28a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb1c:	2180      	movs	r1, #128	; 0x80
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f000 fc34 	bl	800d38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb24:	2100      	movs	r1, #0
 800cb26:	4628      	mov	r0, r5
 800cb28:	4634      	mov	r4, r6
 800cb2a:	f000 fc2f 	bl	800d38c <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb2e:	7929      	ldrb	r1, [r5, #4]
 800cb30:	4628      	mov	r0, r5
 800cb32:	f7ff fd37 	bl	800c5a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb36:	2302      	movs	r3, #2
 800cb38:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800cb3c:	e6a3      	b.n	800c886 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800cb3e:	2900      	cmp	r1, #0
 800cb40:	d0d1      	beq.n	800cae6 <USBD_StdDevReq+0x28a>
        pdev->dev_config = cfgidx;
 800cb42:	2101      	movs	r1, #1
 800cb44:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb46:	f7ff fd25 	bl	800c594 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	f47f af49 	bne.w	800c9e4 <USBD_StdDevReq+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800cb52:	4628      	mov	r0, r5
 800cb54:	f000 f95e 	bl	800ce14 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800cb5e:	e692      	b.n	800c886 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb60:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800cb62:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb64:	f000 fc12 	bl	800d38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f000 fc0e 	bl	800d38c <USBD_LL_StallEP>
    return USBD_FAIL;
 800cb70:	e689      	b.n	800c886 <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cb72:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cb76:	f10d 0006 	add.w	r0, sp, #6
 800cb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb7e:	2302      	movs	r3, #2
 800cb80:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800cb82:	e745      	b.n	800ca10 <USBD_StdDevReq+0x1b4>
 800cb84:	2400d7fc 	.word	0x2400d7fc

0800cb88 <USBD_StdItfReq>:
{
 800cb88:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb8a:	780b      	ldrb	r3, [r1, #0]
{
 800cb8c:	460d      	mov	r5, r1
 800cb8e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb90:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800cb94:	2a40      	cmp	r2, #64	; 0x40
 800cb96:	d00b      	beq.n	800cbb0 <USBD_StdItfReq+0x28>
 800cb98:	065b      	lsls	r3, r3, #25
 800cb9a:	d509      	bpl.n	800cbb0 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800cb9c:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb9e:	2180      	movs	r1, #128	; 0x80
 800cba0:	f000 fbf4 	bl	800d38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cba4:	4620      	mov	r0, r4
 800cba6:	4629      	mov	r1, r5
 800cba8:	f000 fbf0 	bl	800d38c <USBD_LL_StallEP>
}
 800cbac:	4628      	mov	r0, r5
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800cbb0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d812      	bhi.n	800cbe0 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cbba:	792b      	ldrb	r3, [r5, #4]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d80f      	bhi.n	800cbe0 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbc0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cbcc:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbce:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1eb      	bne.n	800cbac <USBD_StdItfReq+0x24>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d1e9      	bne.n	800cbac <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 f91b 	bl	800ce14 <USBD_CtlSendStatus>
 800cbde:	e7e5      	b.n	800cbac <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbe0:	2180      	movs	r1, #128	; 0x80
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f000 fbd2 	bl	800d38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cbe8:	2100      	movs	r1, #0
 800cbea:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800cbec:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800cbee:	f000 fbcd 	bl	800d38c <USBD_LL_StallEP>
}
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	bd38      	pop	{r3, r4, r5, pc}
 800cbf6:	bf00      	nop

0800cbf8 <USBD_StdEPReq>:
{
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	780b      	ldrb	r3, [r1, #0]
 800cbfc:	460d      	mov	r5, r1
 800cbfe:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc04:	2b20      	cmp	r3, #32
 800cc06:	d01b      	beq.n	800cc40 <USBD_StdEPReq+0x48>
 800cc08:	2b40      	cmp	r3, #64	; 0x40
 800cc0a:	d019      	beq.n	800cc40 <USBD_StdEPReq+0x48>
 800cc0c:	b303      	cbz	r3, 800cc50 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc0e:	2180      	movs	r1, #128	; 0x80
 800cc10:	4620      	mov	r0, r4
 800cc12:	f000 fbbb 	bl	800d38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc16:	2100      	movs	r1, #0
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 fbb7 	bl	800d38c <USBD_LL_StallEP>
}
 800cc1e:	2000      	movs	r0, #0
 800cc20:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800cc22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	d04e      	beq.n	800ccca <USBD_StdEPReq+0xd2>
 800cc2c:	2a03      	cmp	r2, #3
 800cc2e:	d1ee      	bne.n	800cc0e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc30:	886b      	ldrh	r3, [r5, #2]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1f3      	bne.n	800cc1e <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc36:	064e      	lsls	r6, r1, #25
 800cc38:	d172      	bne.n	800cd20 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f000 f8ea 	bl	800ce14 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc40:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800cc44:	4629      	mov	r1, r5
 800cc46:	4620      	mov	r0, r4
 800cc48:	689b      	ldr	r3, [r3, #8]
}
 800cc4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc4e:	4718      	bx	r3
      switch (req->bRequest)
 800cc50:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800cc52:	888a      	ldrh	r2, [r1, #4]
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800cc58:	d0e3      	beq.n	800cc22 <USBD_StdEPReq+0x2a>
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d024      	beq.n	800cca8 <USBD_StdEPReq+0xb0>
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1d5      	bne.n	800cc0e <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800cc62:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	b2d8      	uxtb	r0, r3
 800cc6a:	d037      	beq.n	800ccdc <USBD_StdEPReq+0xe4>
 800cc6c:	2803      	cmp	r0, #3
 800cc6e:	d1ce      	bne.n	800cc0e <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc70:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800cc74:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cc7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800cc7e:	d43e      	bmi.n	800ccfe <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc80:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d0c2      	beq.n	800cc0e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc88:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cc8c:	2514      	movs	r5, #20
 800cc8e:	fb05 4503 	mla	r5, r5, r3, r4
 800cc92:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d13c      	bne.n	800cd14 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800cc9a:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	4629      	mov	r1, r5
 800cca0:	4620      	mov	r0, r4
 800cca2:	f000 f887 	bl	800cdb4 <USBD_CtlSendData>
              break;
 800cca6:	e7ba      	b.n	800cc1e <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800cca8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	d00b      	beq.n	800ccca <USBD_StdEPReq+0xd2>
 800ccb2:	2a03      	cmp	r2, #3
 800ccb4:	d1ab      	bne.n	800cc0e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ccb6:	886b      	ldrh	r3, [r5, #2]
 800ccb8:	b91b      	cbnz	r3, 800ccc2 <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ccba:	064a      	lsls	r2, r1, #25
 800ccbc:	d001      	beq.n	800ccc2 <USBD_StdEPReq+0xca>
 800ccbe:	88eb      	ldrh	r3, [r5, #6]
 800ccc0:	b39b      	cbz	r3, 800cd2a <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f000 f8a6 	bl	800ce14 <USBD_CtlSendStatus>
              break;
 800ccc8:	e7a9      	b.n	800cc1e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccca:	064b      	lsls	r3, r1, #25
 800cccc:	d09f      	beq.n	800cc0e <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ccce:	f000 fb5d 	bl	800d38c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccd2:	2180      	movs	r1, #128	; 0x80
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f000 fb59 	bl	800d38c <USBD_LL_StallEP>
 800ccda:	e7a0      	b.n	800cc1e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccdc:	0648      	lsls	r0, r1, #25
 800ccde:	d196      	bne.n	800cc0e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cce0:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800cce2:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cce6:	f04f 0202 	mov.w	r2, #2
 800ccea:	4620      	mov	r0, r4
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccec:	bf4c      	ite	mi
 800ccee:	f104 0114 	addmi.w	r1, r4, #20
 800ccf2:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800ccf6:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccf8:	f000 f85c 	bl	800cdb4 <USBD_CtlSendData>
              break;
 800ccfc:	e78f      	b.n	800cc1e <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ccfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d084      	beq.n	800cc0e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd04:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cd08:	1c5d      	adds	r5, r3, #1
 800cd0a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800cd0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800cd12:	e7c0      	b.n	800cc96 <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 fb55 	bl	800d3c4 <USBD_LL_IsStallEP>
 800cd1a:	b120      	cbz	r0, 800cd26 <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e7bc      	b.n	800cc9a <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd20:	f000 fb42 	bl	800d3a8 <USBD_LL_ClearStallEP>
 800cd24:	e789      	b.n	800cc3a <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800cd26:	6028      	str	r0, [r5, #0]
 800cd28:	e7b8      	b.n	800cc9c <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd2a:	f000 fb2f 	bl	800d38c <USBD_LL_StallEP>
 800cd2e:	e7c8      	b.n	800ccc2 <USBD_StdEPReq+0xca>

0800cd30 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800cd30:	780b      	ldrb	r3, [r1, #0]
 800cd32:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd34:	784b      	ldrb	r3, [r1, #1]
 800cd36:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800cd38:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800cd3a:	8043      	strh	r3, [r0, #2]
 800cd3c:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800cd3e:	8083      	strh	r3, [r0, #4]
 800cd40:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800cd42:	80c3      	strh	r3, [r0, #6]
}
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop

0800cd48 <USBD_CtlError>:
{
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd4c:	2180      	movs	r1, #128	; 0x80
 800cd4e:	f000 fb1d 	bl	800d38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd52:	2100      	movs	r1, #0
 800cd54:	4620      	mov	r0, r4
}
 800cd56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd5a:	f000 bb17 	b.w	800d38c <USBD_LL_StallEP>
 800cd5e:	bf00      	nop

0800cd60 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800cd60:	b318      	cbz	r0, 800cdaa <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800cd62:	7803      	ldrb	r3, [r0, #0]
{
 800cd64:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800cd66:	b30b      	cbz	r3, 800cdac <USBD_GetString+0x4c>
 800cd68:	4604      	mov	r4, r0
 800cd6a:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800cd6e:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800cd72:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2d00      	cmp	r5, #0
 800cd7a:	d1f8      	bne.n	800cd6e <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	b2dc      	uxtb	r4, r3
 800cd82:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd84:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800cd86:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd88:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800cd8a:	7804      	ldrb	r4, [r0, #0]
 800cd8c:	b15c      	cbz	r4, 800cda6 <USBD_GetString+0x46>
  idx++;
 800cd8e:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800cd90:	2500      	movs	r5, #0
    idx++;
 800cd92:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800cd94:	54cc      	strb	r4, [r1, r3]
    idx++;
 800cd96:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800cd98:	b2d2      	uxtb	r2, r2
    idx++;
 800cd9a:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800cd9c:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800cd9e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800cda2:	2c00      	cmp	r4, #0
 800cda4:	d1f5      	bne.n	800cd92 <USBD_GetString+0x32>
}
 800cda6:	bc30      	pop	{r4, r5}
 800cda8:	4770      	bx	lr
 800cdaa:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800cdac:	2402      	movs	r4, #2
 800cdae:	4623      	mov	r3, r4
 800cdb0:	e7e7      	b.n	800cd82 <USBD_GetString+0x22>
 800cdb2:	bf00      	nop

0800cdb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cdb8:	2402      	movs	r4, #2
{
 800cdba:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdbc:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cdbe:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800cdc2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdc6:	f000 fb1f 	bl	800d408 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cdca:	2000      	movs	r0, #0
 800cdcc:	bd10      	pop	{r4, pc}
 800cdce:	bf00      	nop

0800cdd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cdd0:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdd2:	2100      	movs	r1, #0
{
 800cdd4:	b508      	push	{r3, lr}
 800cdd6:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdd8:	4662      	mov	r2, ip
 800cdda:	f000 fb15 	bl	800d408 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cdde:	2000      	movs	r0, #0
 800cde0:	bd08      	pop	{r3, pc}
 800cde2:	bf00      	nop

0800cde4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cde4:	b510      	push	{r4, lr}
 800cde6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cde8:	2403      	movs	r4, #3
{
 800cdea:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdec:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdee:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800cdf2:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdf6:	f000 fb15 	bl	800d424 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	bd10      	pop	{r4, pc}
 800cdfe:	bf00      	nop

0800ce00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce00:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce02:	2100      	movs	r1, #0
{
 800ce04:	b508      	push	{r3, lr}
 800ce06:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce08:	4662      	mov	r2, ip
 800ce0a:	f000 fb0b 	bl	800d424 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ce0e:	2000      	movs	r0, #0
 800ce10:	bd08      	pop	{r3, pc}
 800ce12:	bf00      	nop

0800ce14 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce14:	2300      	movs	r3, #0
{
 800ce16:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce18:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce1e:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce22:	f000 faf1 	bl	800d408 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ce26:	2000      	movs	r0, #0
 800ce28:	bd10      	pop	{r4, pc}
 800ce2a:	bf00      	nop

0800ce2c <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce2c:	2300      	movs	r3, #0
{
 800ce2e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce30:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce32:	461a      	mov	r2, r3
 800ce34:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce36:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce3a:	f000 faf3 	bl	800d424 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ce3e:	2000      	movs	r0, #0
 800ce40:	bd10      	pop	{r4, pc}
 800ce42:	bf00      	nop

0800ce44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce46:	2200      	movs	r2, #0
 800ce48:	4919      	ldr	r1, [pc, #100]	; (800ceb0 <MX_USB_DEVICE_Init+0x6c>)
 800ce4a:	481a      	ldr	r0, [pc, #104]	; (800ceb4 <MX_USB_DEVICE_Init+0x70>)
 800ce4c:	f7ff fb72 	bl	800c534 <USBD_Init>
 800ce50:	b988      	cbnz	r0, 800ce76 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce52:	4919      	ldr	r1, [pc, #100]	; (800ceb8 <MX_USB_DEVICE_Init+0x74>)
 800ce54:	4817      	ldr	r0, [pc, #92]	; (800ceb4 <MX_USB_DEVICE_Init+0x70>)
 800ce56:	f7ff fb81 	bl	800c55c <USBD_RegisterClass>
 800ce5a:	b9a0      	cbnz	r0, 800ce86 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce5c:	4917      	ldr	r1, [pc, #92]	; (800cebc <MX_USB_DEVICE_Init+0x78>)
 800ce5e:	4815      	ldr	r0, [pc, #84]	; (800ceb4 <MX_USB_DEVICE_Init+0x70>)
 800ce60:	f7ff fb16 	bl	800c490 <USBD_CDC_RegisterInterface>
 800ce64:	b9b8      	cbnz	r0, 800ce96 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce66:	4813      	ldr	r0, [pc, #76]	; (800ceb4 <MX_USB_DEVICE_Init+0x70>)
 800ce68:	f7ff fb92 	bl	800c590 <USBD_Start>
 800ce6c:	b9d0      	cbnz	r0, 800cea4 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800ce72:	f7fb b831 	b.w	8007ed8 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800ce76:	f7f6 f869 	bl	8002f4c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce7a:	490f      	ldr	r1, [pc, #60]	; (800ceb8 <MX_USB_DEVICE_Init+0x74>)
 800ce7c:	480d      	ldr	r0, [pc, #52]	; (800ceb4 <MX_USB_DEVICE_Init+0x70>)
 800ce7e:	f7ff fb6d 	bl	800c55c <USBD_RegisterClass>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	d0ea      	beq.n	800ce5c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800ce86:	f7f6 f861 	bl	8002f4c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce8a:	490c      	ldr	r1, [pc, #48]	; (800cebc <MX_USB_DEVICE_Init+0x78>)
 800ce8c:	4809      	ldr	r0, [pc, #36]	; (800ceb4 <MX_USB_DEVICE_Init+0x70>)
 800ce8e:	f7ff faff 	bl	800c490 <USBD_CDC_RegisterInterface>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d0e7      	beq.n	800ce66 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800ce96:	f7f6 f859 	bl	8002f4c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce9a:	4806      	ldr	r0, [pc, #24]	; (800ceb4 <MX_USB_DEVICE_Init+0x70>)
 800ce9c:	f7ff fb78 	bl	800c590 <USBD_Start>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d0e4      	beq.n	800ce6e <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800cea4:	f7f6 f852 	bl	8002f4c <Error_Handler>
}
 800cea8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800ceac:	f7fb b814 	b.w	8007ed8 <HAL_PWREx_EnableUSBVoltageDetector>
 800ceb0:	24000328 	.word	0x24000328
 800ceb4:	2400d800 	.word	0x2400d800
 800ceb8:	240001fc 	.word	0x240001fc
 800cebc:	2400030c 	.word	0x2400030c

0800cec0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800cec0:	2000      	movs	r0, #0
 800cec2:	4770      	bx	lr

0800cec4 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800cec4:	2000      	movs	r0, #0
 800cec6:	4770      	bx	lr

0800cec8 <CDC_Receive_FS>:
{
 800cec8:	b570      	push	{r4, r5, r6, lr}
 800ceca:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cecc:	4e08      	ldr	r6, [pc, #32]	; (800cef0 <CDC_Receive_FS+0x28>)
{
 800cece:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ced0:	4630      	mov	r0, r6
 800ced2:	4621      	mov	r1, r4
 800ced4:	f7ff faf0 	bl	800c4b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7ff fb0f 	bl	800c4fc <USBD_CDC_ReceivePacket>
 800cede:	682a      	ldr	r2, [r5, #0]
 800cee0:	4b04      	ldr	r3, [pc, #16]	; (800cef4 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800cee2:	4621      	mov	r1, r4
 800cee4:	4804      	ldr	r0, [pc, #16]	; (800cef8 <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800cee6:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800cee8:	f001 fc08 	bl	800e6fc <memcpy>
}
 800ceec:	2000      	movs	r0, #0
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	2400d800 	.word	0x2400d800
 800cef4:	2400710c 	.word	0x2400710c
 800cef8:	24007114 	.word	0x24007114

0800cefc <CDC_Init_FS>:
{
 800cefc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cefe:	4c06      	ldr	r4, [pc, #24]	; (800cf18 <CDC_Init_FS+0x1c>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	4906      	ldr	r1, [pc, #24]	; (800cf1c <CDC_Init_FS+0x20>)
 800cf04:	4620      	mov	r0, r4
 800cf06:	f7ff facb 	bl	800c4a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf0a:	4905      	ldr	r1, [pc, #20]	; (800cf20 <CDC_Init_FS+0x24>)
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f7ff fad3 	bl	800c4b8 <USBD_CDC_SetRxBuffer>
}
 800cf12:	2000      	movs	r0, #0
 800cf14:	bd10      	pop	{r4, pc}
 800cf16:	bf00      	nop
 800cf18:	2400d800 	.word	0x2400d800
 800cf1c:	2400e2d0 	.word	0x2400e2d0
 800cf20:	2400dad0 	.word	0x2400dad0

0800cf24 <CDC_Control_FS>:
  switch(cmd)
 800cf24:	2820      	cmp	r0, #32
 800cf26:	d00a      	beq.n	800cf3e <CDC_Control_FS+0x1a>
 800cf28:	2821      	cmp	r0, #33	; 0x21
 800cf2a:	d106      	bne.n	800cf3a <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800cf2c:	4b09      	ldr	r3, [pc, #36]	; (800cf54 <CDC_Control_FS+0x30>)
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	889a      	ldrh	r2, [r3, #4]
 800cf32:	799b      	ldrb	r3, [r3, #6]
 800cf34:	6008      	str	r0, [r1, #0]
 800cf36:	808a      	strh	r2, [r1, #4]
 800cf38:	718b      	strb	r3, [r1, #6]
}
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800cf3e:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <CDC_Control_FS+0x30>)
 800cf40:	6808      	ldr	r0, [r1, #0]
 800cf42:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 800cf46:	798a      	ldrb	r2, [r1, #6]
 800cf48:	6018      	str	r0, [r3, #0]
}
 800cf4a:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800cf4c:	f8a3 c004 	strh.w	ip, [r3, #4]
 800cf50:	719a      	strb	r2, [r3, #6]
}
 800cf52:	4770      	bx	lr
 800cf54:	24000320 	.word	0x24000320

0800cf58 <CDC_Transmit_FS>:
{
 800cf58:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf5a:	4c09      	ldr	r4, [pc, #36]	; (800cf80 <CDC_Transmit_FS+0x28>)
 800cf5c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800cf60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf64:	b10b      	cbz	r3, 800cf6a <CDC_Transmit_FS+0x12>
}
 800cf66:	2001      	movs	r0, #1
 800cf68:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf6a:	460a      	mov	r2, r1
 800cf6c:	4601      	mov	r1, r0
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f7ff fa96 	bl	800c4a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf74:	4620      	mov	r0, r4
}
 800cf76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf7a:	f7ff baa7 	b.w	800c4cc <USBD_CDC_TransmitPacket>
 800cf7e:	bf00      	nop
 800cf80:	2400d800 	.word	0x2400d800

0800cf84 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf84:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800cf86:	4801      	ldr	r0, [pc, #4]	; (800cf8c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf88:	800b      	strh	r3, [r1, #0]
}
 800cf8a:	4770      	bx	lr
 800cf8c:	24000344 	.word	0x24000344

0800cf90 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf90:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800cf92:	4801      	ldr	r0, [pc, #4]	; (800cf98 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800cf94:	800b      	strh	r3, [r1, #0]
}
 800cf96:	4770      	bx	lr
 800cf98:	24000358 	.word	0x24000358

0800cf9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf9c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf9e:	4c04      	ldr	r4, [pc, #16]	; (800cfb0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800cfa0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cfa2:	4804      	ldr	r0, [pc, #16]	; (800cfb4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800cfa4:	4621      	mov	r1, r4
 800cfa6:	f7ff fedb 	bl	800cd60 <USBD_GetString>
  return USBD_StrDesc;
}
 800cfaa:	4620      	mov	r0, r4
 800cfac:	bd10      	pop	{r4, pc}
 800cfae:	bf00      	nop
 800cfb0:	2400ead0 	.word	0x2400ead0
 800cfb4:	08018838 	.word	0x08018838

0800cfb8 <USBD_FS_ProductStrDescriptor>:
{
 800cfb8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfba:	4c04      	ldr	r4, [pc, #16]	; (800cfcc <USBD_FS_ProductStrDescriptor+0x14>)
{
 800cfbc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfbe:	4804      	ldr	r0, [pc, #16]	; (800cfd0 <USBD_FS_ProductStrDescriptor+0x18>)
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	f7ff fecd 	bl	800cd60 <USBD_GetString>
}
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	bd10      	pop	{r4, pc}
 800cfca:	bf00      	nop
 800cfcc:	2400ead0 	.word	0x2400ead0
 800cfd0:	0801884c 	.word	0x0801884c

0800cfd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfd4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfd6:	4c04      	ldr	r4, [pc, #16]	; (800cfe8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800cfd8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfda:	4804      	ldr	r0, [pc, #16]	; (800cfec <USBD_FS_ConfigStrDescriptor+0x18>)
 800cfdc:	4621      	mov	r1, r4
 800cfde:	f7ff febf 	bl	800cd60 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	bd10      	pop	{r4, pc}
 800cfe6:	bf00      	nop
 800cfe8:	2400ead0 	.word	0x2400ead0
 800cfec:	08018864 	.word	0x08018864

0800cff0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cff2:	4c04      	ldr	r4, [pc, #16]	; (800d004 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800cff4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cff6:	4804      	ldr	r0, [pc, #16]	; (800d008 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800cff8:	4621      	mov	r1, r4
 800cffa:	f7ff feb1 	bl	800cd60 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800cffe:	4620      	mov	r0, r4
 800d000:	bd10      	pop	{r4, pc}
 800d002:	bf00      	nop
 800d004:	2400ead0 	.word	0x2400ead0
 800d008:	08018870 	.word	0x08018870

0800d00c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d00c:	4a46      	ldr	r2, [pc, #280]	; (800d128 <USBD_FS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 800d00e:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d012:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800d016:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 800d01a:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800d01e:	18c3      	adds	r3, r0, r3
 800d020:	d101      	bne.n	800d026 <USBD_FS_SerialStrDescriptor+0x1a>
}
 800d022:	4842      	ldr	r0, [pc, #264]	; (800d12c <USBD_FS_SerialStrDescriptor+0x120>)
 800d024:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800d026:	0f18      	lsrs	r0, r3, #28
 800d028:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d02c:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800d030:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d034:	4a3d      	ldr	r2, [pc, #244]	; (800d12c <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d036:	bf2c      	ite	cs
 800d038:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d03a:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d03c:	f882 c003 	strb.w	ip, [r2, #3]
 800d040:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d044:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800d046:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 800d04a:	f882 c005 	strb.w	ip, [r2, #5]
 800d04e:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800d052:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800d054:	f882 c007 	strb.w	ip, [r2, #7]
 800d058:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d05c:	bf8c      	ite	hi
 800d05e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d060:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d062:	f882 c009 	strb.w	ip, [r2, #9]
 800d066:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d06a:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800d06c:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800d070:	f882 c00b 	strb.w	ip, [r2, #11]
 800d074:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800d078:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800d07a:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d07e:	bf8c      	ite	hi
 800d080:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d082:	3030      	addls	r0, #48	; 0x30
 800d084:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800d086:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800d08a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d08c:	bf8c      	ite	hi
 800d08e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d090:	3030      	addls	r0, #48	; 0x30
 800d092:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800d094:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800d098:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d09a:	bf8c      	ite	hi
 800d09c:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d09e:	3030      	addls	r0, #48	; 0x30
 800d0a0:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800d0a2:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800d0a6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0a8:	bf8c      	ite	hi
 800d0aa:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0ac:	3030      	addls	r0, #48	; 0x30
 800d0ae:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800d0b0:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800d0b4:	f003 030f 	and.w	r3, r3, #15
 800d0b8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0ba:	bf8c      	ite	hi
 800d0bc:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0be:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800d0c0:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0c2:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800d0c4:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0c8:	bf94      	ite	ls
 800d0ca:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0cc:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800d0ce:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800d0d2:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0d4:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800d0d6:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800d0da:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0de:	bf2c      	ite	cs
 800d0e0:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0e2:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d0e4:	7450      	strb	r0, [r2, #17]
 800d0e6:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0e8:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800d0ea:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800d0ee:	74d0      	strb	r0, [r2, #19]
 800d0f0:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800d0f2:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800d0f4:	7550      	strb	r0, [r2, #21]
 800d0f6:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0fa:	bf8c      	ite	hi
 800d0fc:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0fe:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d100:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800d102:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800d104:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 800d108:	4808      	ldr	r0, [pc, #32]	; (800d12c <USBD_FS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 800d10a:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d10c:	bf8c      	ite	hi
 800d10e:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d110:	3330      	addls	r3, #48	; 0x30
 800d112:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800d114:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800d118:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d11a:	bf94      	ite	ls
 800d11c:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d11e:	3337      	addhi	r3, #55	; 0x37
 800d120:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	7653      	strb	r3, [r2, #25]
}
 800d126:	4770      	bx	lr
 800d128:	1ff1e000 	.word	0x1ff1e000
 800d12c:	2400035c 	.word	0x2400035c

0800d130 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d130:	b510      	push	{r4, lr}
 800d132:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d134:	2100      	movs	r1, #0
{
 800d136:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d138:	22bc      	movs	r2, #188	; 0xbc
 800d13a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d13c:	9106      	str	r1, [sp, #24]
 800d13e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800d142:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d146:	f001 fae7 	bl	800e718 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d14a:	4b25      	ldr	r3, [pc, #148]	; (800d1e0 <HAL_PCD_MspInit+0xb0>)
 800d14c:	6822      	ldr	r2, [r4, #0]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d001      	beq.n	800d156 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d152:	b036      	add	sp, #216	; 0xd8
 800d154:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d156:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d15a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d15e:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d160:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d162:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d164:	f7fb fdf6 	bl	8008d54 <HAL_RCCEx_PeriphCLKConfig>
 800d168:	bb90      	cbnz	r0, 800d1d0 <HAL_PCD_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d16a:	4c1e      	ldr	r4, [pc, #120]	; (800d1e4 <HAL_PCD_MspInit+0xb4>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800d16c:	f7fa feb4 	bl	8007ed8 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d170:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d172:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d174:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d178:	481b      	ldr	r0, [pc, #108]	; (800d1e8 <HAL_PCD_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d17a:	f043 0301 	orr.w	r3, r3, #1
 800d17e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d182:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d186:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d188:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d18a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d18e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800d1d8 <HAL_PCD_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d196:	2300      	movs	r3, #0
 800d198:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d19c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1a0:	f7f9 ff24 	bl	8006fec <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d1a4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d1ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d1b0:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d1b2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800d1b6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d1ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1be:	9301      	str	r3, [sp, #4]
 800d1c0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d1c2:	f7f8 fa2f 	bl	8005624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d1c6:	2065      	movs	r0, #101	; 0x65
 800d1c8:	f7f8 fa6a 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 800d1cc:	b036      	add	sp, #216	; 0xd8
 800d1ce:	bd10      	pop	{r4, pc}
      Error_Handler();
 800d1d0:	f7f5 febc 	bl	8002f4c <Error_Handler>
 800d1d4:	e7c9      	b.n	800d16a <HAL_PCD_MspInit+0x3a>
 800d1d6:	bf00      	nop
 800d1d8:	00001800 	.word	0x00001800
 800d1dc:	00000002 	.word	0x00000002
 800d1e0:	40080000 	.word	0x40080000
 800d1e4:	58024400 	.word	0x58024400
 800d1e8:	58020000 	.word	0x58020000

0800d1ec <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d1ec:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800d1f0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d1f4:	f7ff b9de 	b.w	800c5b4 <USBD_LL_SetupStage>

0800d1f8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d1f8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800d1fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d200:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d204:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d208:	f7ff ba04 	b.w	800c614 <USBD_LL_DataOutStage>

0800d20c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d20c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800d210:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d214:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d21a:	f7ff ba2f 	b.w	800c67c <USBD_LL_DataInStage>
 800d21e:	bf00      	nop

0800d220 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d220:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d224:	f7ff bace 	b.w	800c7c4 <USBD_LL_SOF>

0800d228 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d228:	68c1      	ldr	r1, [r0, #12]
{
 800d22a:	b510      	push	{r4, lr}
 800d22c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d22e:	b111      	cbz	r1, 800d236 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d230:	2902      	cmp	r1, #2
 800d232:	d10a      	bne.n	800d24a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800d234:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d236:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800d23a:	f7ff faa7 	bl	800c78c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d23e:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800d242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d246:	f7ff ba75 	b.w	800c734 <USBD_LL_Reset>
    Error_Handler();
 800d24a:	f7f5 fe7f 	bl	8002f4c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d24e:	2101      	movs	r1, #1
 800d250:	e7f1      	b.n	800d236 <HAL_PCD_ResetCallback+0xe>
 800d252:	bf00      	nop

0800d254 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d254:	b510      	push	{r4, lr}
 800d256:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d258:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d25c:	f7ff fa9a 	bl	800c794 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d260:	6822      	ldr	r2, [r4, #0]
 800d262:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800d266:	f043 0301 	orr.w	r3, r3, #1
 800d26a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d26e:	6a23      	ldr	r3, [r4, #32]
 800d270:	b123      	cbz	r3, 800d27c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d272:	4a03      	ldr	r2, [pc, #12]	; (800d280 <HAL_PCD_SuspendCallback+0x2c>)
 800d274:	6913      	ldr	r3, [r2, #16]
 800d276:	f043 0306 	orr.w	r3, r3, #6
 800d27a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d27c:	bd10      	pop	{r4, pc}
 800d27e:	bf00      	nop
 800d280:	e000ed00 	.word	0xe000ed00

0800d284 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d284:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d288:	f7ff ba90 	b.w	800c7ac <USBD_LL_Resume>

0800d28c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d28c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d290:	f7ff bac0 	b.w	800c814 <USBD_LL_IsoOUTIncomplete>

0800d294 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d294:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d298:	f7ff baa8 	b.w	800c7ec <USBD_LL_IsoINIncomplete>

0800d29c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d29c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d2a0:	f7ff bacc 	b.w	800c83c <USBD_LL_DevConnected>

0800d2a4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2a4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d2a8:	f7ff baca 	b.w	800c840 <USBD_LL_DevDisconnected>
 800d2ac:	0000      	movs	r0, r0
	...

0800d2b0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2b0:	7802      	ldrb	r2, [r0, #0]
 800d2b2:	b10a      	cbz	r2, 800d2b8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2b8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800d318 <USBD_LL_Init+0x68>
  hpcd_USB_OTG_FS.pData = pdev;
 800d2bc:	4b1a      	ldr	r3, [pc, #104]	; (800d328 <USBD_LL_Init+0x78>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2be:	491b      	ldr	r1, [pc, #108]	; (800d32c <USBD_LL_Init+0x7c>)
{
 800d2c0:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2c2:	ed83 7b06 	vstr	d7, [r3, #24]
 800d2c6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d320 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d2ca:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2cc:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2ce:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 800d2d0:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2d4:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2d8:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d2da:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d2dc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2de:	ed83 7b08 	vstr	d7, [r3, #32]
 800d2e2:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2e6:	e9c3 1203 	strd	r1, r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2ea:	f7fa f843 	bl	8007374 <HAL_PCD_Init>
 800d2ee:	b978      	cbnz	r0, 800d310 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d2f0:	2180      	movs	r1, #128	; 0x80
 800d2f2:	480d      	ldr	r0, [pc, #52]	; (800d328 <USBD_LL_Init+0x78>)
 800d2f4:	f7fa fdac 	bl	8007e50 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d2f8:	2240      	movs	r2, #64	; 0x40
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	480a      	ldr	r0, [pc, #40]	; (800d328 <USBD_LL_Init+0x78>)
 800d2fe:	f7fa fd7d 	bl	8007dfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d302:	2280      	movs	r2, #128	; 0x80
 800d304:	2101      	movs	r1, #1
 800d306:	4808      	ldr	r0, [pc, #32]	; (800d328 <USBD_LL_Init+0x78>)
 800d308:	f7fa fd78 	bl	8007dfc <HAL_PCDEx_SetTxFiFo>
}
 800d30c:	2000      	movs	r0, #0
 800d30e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d310:	f7f5 fe1c 	bl	8002f4c <Error_Handler>
 800d314:	e7ec      	b.n	800d2f0 <USBD_LL_Init+0x40>
 800d316:	bf00      	nop
 800d318:	00000002 	.word	0x00000002
	...
 800d328:	2400ecd0 	.word	0x2400ecd0
 800d32c:	40080000 	.word	0x40080000

0800d330 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800d330:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d334:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d336:	f7fa f8b3 	bl	80074a0 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d33a:	2803      	cmp	r0, #3
 800d33c:	d802      	bhi.n	800d344 <USBD_LL_Start+0x14>
 800d33e:	4b02      	ldr	r3, [pc, #8]	; (800d348 <USBD_LL_Start+0x18>)
 800d340:	5c18      	ldrb	r0, [r3, r0]
}
 800d342:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d344:	2003      	movs	r0, #3
}
 800d346:	bd08      	pop	{r3, pc}
 800d348:	08018880 	.word	0x08018880

0800d34c <USBD_LL_OpenEP>:
{
 800d34c:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d34e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d352:	461a      	mov	r2, r3
 800d354:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d356:	4663      	mov	r3, ip
 800d358:	f7fa fc02 	bl	8007b60 <HAL_PCD_EP_Open>
  switch (hal_status)
 800d35c:	2803      	cmp	r0, #3
 800d35e:	d802      	bhi.n	800d366 <USBD_LL_OpenEP+0x1a>
 800d360:	4b02      	ldr	r3, [pc, #8]	; (800d36c <USBD_LL_OpenEP+0x20>)
 800d362:	5c18      	ldrb	r0, [r3, r0]
}
 800d364:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d366:	2003      	movs	r0, #3
}
 800d368:	bd08      	pop	{r3, pc}
 800d36a:	bf00      	nop
 800d36c:	08018880 	.word	0x08018880

0800d370 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d370:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d374:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d376:	f7fa fc31 	bl	8007bdc <HAL_PCD_EP_Close>
  switch (hal_status)
 800d37a:	2803      	cmp	r0, #3
 800d37c:	d802      	bhi.n	800d384 <USBD_LL_CloseEP+0x14>
 800d37e:	4b02      	ldr	r3, [pc, #8]	; (800d388 <USBD_LL_CloseEP+0x18>)
 800d380:	5c18      	ldrb	r0, [r3, r0]
}
 800d382:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d384:	2003      	movs	r0, #3
}
 800d386:	bd08      	pop	{r3, pc}
 800d388:	08018880 	.word	0x08018880

0800d38c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d38c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d390:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d392:	f7fa fcb3 	bl	8007cfc <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800d396:	2803      	cmp	r0, #3
 800d398:	d802      	bhi.n	800d3a0 <USBD_LL_StallEP+0x14>
 800d39a:	4b02      	ldr	r3, [pc, #8]	; (800d3a4 <USBD_LL_StallEP+0x18>)
 800d39c:	5c18      	ldrb	r0, [r3, r0]
}
 800d39e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3a0:	2003      	movs	r0, #3
}
 800d3a2:	bd08      	pop	{r3, pc}
 800d3a4:	08018880 	.word	0x08018880

0800d3a8 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3a8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d3ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3ae:	f7fa fce9 	bl	8007d84 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800d3b2:	2803      	cmp	r0, #3
 800d3b4:	d802      	bhi.n	800d3bc <USBD_LL_ClearStallEP+0x14>
 800d3b6:	4b02      	ldr	r3, [pc, #8]	; (800d3c0 <USBD_LL_ClearStallEP+0x18>)
 800d3b8:	5c18      	ldrb	r0, [r3, r0]
}
 800d3ba:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3bc:	2003      	movs	r0, #3
}
 800d3be:	bd08      	pop	{r3, pc}
 800d3c0:	08018880 	.word	0x08018880

0800d3c4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800d3c4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3c6:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800d3ca:	d406      	bmi.n	800d3da <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d3cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d3d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d3d4:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800d3d8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3da:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d3de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d3e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d3e6:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800d3ea:	4770      	bx	lr

0800d3ec <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3ec:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d3f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3f2:	f7fa fb9f 	bl	8007b34 <HAL_PCD_SetAddress>
  switch (hal_status)
 800d3f6:	2803      	cmp	r0, #3
 800d3f8:	d802      	bhi.n	800d400 <USBD_LL_SetUSBAddress+0x14>
 800d3fa:	4b02      	ldr	r3, [pc, #8]	; (800d404 <USBD_LL_SetUSBAddress+0x18>)
 800d3fc:	5c18      	ldrb	r0, [r3, r0]
}
 800d3fe:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d400:	2003      	movs	r0, #3
}
 800d402:	bd08      	pop	{r3, pc}
 800d404:	08018880 	.word	0x08018880

0800d408 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d408:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d40c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d40e:	f7fa fc4d 	bl	8007cac <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800d412:	2803      	cmp	r0, #3
 800d414:	d802      	bhi.n	800d41c <USBD_LL_Transmit+0x14>
 800d416:	4b02      	ldr	r3, [pc, #8]	; (800d420 <USBD_LL_Transmit+0x18>)
 800d418:	5c18      	ldrb	r0, [r3, r0]
}
 800d41a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d41c:	2003      	movs	r0, #3
}
 800d41e:	bd08      	pop	{r3, pc}
 800d420:	08018880 	.word	0x08018880

0800d424 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d424:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d428:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d42a:	f7fa fc0d 	bl	8007c48 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800d42e:	2803      	cmp	r0, #3
 800d430:	d802      	bhi.n	800d438 <USBD_LL_PrepareReceive+0x14>
 800d432:	4b02      	ldr	r3, [pc, #8]	; (800d43c <USBD_LL_PrepareReceive+0x18>)
 800d434:	5c18      	ldrb	r0, [r3, r0]
}
 800d436:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d438:	2003      	movs	r0, #3
}
 800d43a:	bd08      	pop	{r3, pc}
 800d43c:	08018880 	.word	0x08018880

0800d440 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d440:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d444:	f7fa bc28 	b.w	8007c98 <HAL_PCD_EP_GetRxCount>

0800d448 <USBD_static_malloc>:
}
 800d448:	4800      	ldr	r0, [pc, #0]	; (800d44c <USBD_static_malloc+0x4>)
 800d44a:	4770      	bx	lr
 800d44c:	2400f0d8 	.word	0x2400f0d8

0800d450 <USBD_static_free>:
}
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop

0800d454 <arm_cfft_radix8by2_f32>:
 800d454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d458:	4607      	mov	r7, r0
 800d45a:	4608      	mov	r0, r1
 800d45c:	ed2d 8b06 	vpush	{d8-d10}
 800d460:	f8b7 c000 	ldrh.w	ip, [r7]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800d46a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800d46e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d472:	f000 80ac 	beq.w	800d5ce <arm_cfft_radix8by2_f32+0x17a>
 800d476:	008c      	lsls	r4, r1, #2
 800d478:	f100 0310 	add.w	r3, r0, #16
 800d47c:	3210      	adds	r2, #16
 800d47e:	f108 0610 	add.w	r6, r8, #16
 800d482:	3410      	adds	r4, #16
 800d484:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800d488:	1905      	adds	r5, r0, r4
 800d48a:	4444      	add	r4, r8
 800d48c:	ed16 7a04 	vldr	s14, [r6, #-16]
 800d490:	3310      	adds	r3, #16
 800d492:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800d496:	3510      	adds	r5, #16
 800d498:	ed56 0a03 	vldr	s1, [r6, #-12]
 800d49c:	3210      	adds	r2, #16
 800d49e:	ee74 9a87 	vadd.f32	s19, s9, s14
 800d4a2:	ed56 7a02 	vldr	s15, [r6, #-8]
 800d4a6:	ed56 2a01 	vldr	s5, [r6, #-4]
 800d4aa:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800d4ae:	ed54 5a04 	vldr	s11, [r4, #-16]
 800d4b2:	3610      	adds	r6, #16
 800d4b4:	ed14 5a03 	vldr	s10, [r4, #-12]
 800d4b8:	3410      	adds	r4, #16
 800d4ba:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800d4be:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800d4c2:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800d4c6:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800d4ca:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800d4ce:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800d4d2:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800d4d6:	ee33 8a83 	vadd.f32	s16, s7, s6
 800d4da:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800d4de:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800d4e2:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800d4e6:	ee34 0a06 	vadd.f32	s0, s8, s12
 800d4ea:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800d4ee:	ee77 aa20 	vadd.f32	s21, s14, s1
 800d4f2:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800d4f6:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800d4fa:	ee72 9a22 	vadd.f32	s19, s4, s5
 800d4fe:	ee71 8a05 	vadd.f32	s17, s2, s10
 800d502:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800d506:	ee37 7a60 	vsub.f32	s14, s14, s1
 800d50a:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800d50e:	ee35 5a41 	vsub.f32	s10, s10, s2
 800d512:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800d516:	ee36 6a44 	vsub.f32	s12, s12, s8
 800d51a:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800d51e:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800d522:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800d526:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800d52a:	ee72 7a62 	vsub.f32	s15, s4, s5
 800d52e:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800d532:	ee73 2a63 	vsub.f32	s5, s6, s7
 800d536:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800d53a:	4563      	cmp	r3, ip
 800d53c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800d540:	ee24 3a84 	vmul.f32	s6, s9, s8
 800d544:	ee27 2a26 	vmul.f32	s4, s14, s13
 800d548:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800d54c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800d550:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d554:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d558:	ee65 6a26 	vmul.f32	s13, s10, s13
 800d55c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d560:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d564:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d568:	ee33 4a02 	vadd.f32	s8, s6, s4
 800d56c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800d570:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800d574:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800d578:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800d57c:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800d580:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800d584:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800d588:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800d58c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800d590:	ee61 5a87 	vmul.f32	s11, s3, s14
 800d594:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d598:	ee22 5a87 	vmul.f32	s10, s5, s14
 800d59c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800d5a0:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d5a4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800d5a8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d5ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d5b0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d5b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d5b8:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800d5bc:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800d5c0:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800d5c4:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800d5c8:	f47f af60 	bne.w	800d48c <arm_cfft_radix8by2_f32+0x38>
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	b28c      	uxth	r4, r1
 800d5d0:	2302      	movs	r3, #2
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	f000 fda6 	bl	800e124 <arm_radix8_butterfly_f32>
 800d5d8:	4621      	mov	r1, r4
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	4640      	mov	r0, r8
 800d5de:	2302      	movs	r3, #2
 800d5e0:	ecbd 8b06 	vpop	{d8-d10}
 800d5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e8:	f000 bd9c 	b.w	800e124 <arm_radix8_butterfly_f32>

0800d5ec <arm_cfft_radix8by4_f32>:
 800d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	ed2d 8b04 	vpush	{d8-d9}
 800d5f4:	8804      	ldrh	r4, [r0, #0]
 800d5f6:	b08d      	sub	sp, #52	; 0x34
 800d5f8:	6842      	ldr	r2, [r0, #4]
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	0864      	lsrs	r4, r4, #1
 800d5fe:	edd1 7a00 	vldr	s15, [r1]
 800d602:	edd1 5a01 	vldr	s11, [r1, #4]
 800d606:	00a3      	lsls	r3, r4, #2
 800d608:	18ce      	adds	r6, r1, r3
 800d60a:	18f7      	adds	r7, r6, r3
 800d60c:	ed96 7a00 	vldr	s14, [r6]
 800d610:	ed96 4a01 	vldr	s8, [r6, #4]
 800d614:	ed97 6a00 	vldr	s12, [r7]
 800d618:	edd7 4a01 	vldr	s9, [r7, #4]
 800d61c:	ee77 6a86 	vadd.f32	s13, s15, s12
 800d620:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d624:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800d628:	ee77 2a26 	vadd.f32	s5, s14, s13
 800d62c:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800d630:	ee74 3a27 	vadd.f32	s7, s8, s15
 800d634:	ee76 4a44 	vsub.f32	s9, s12, s8
 800d638:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d63c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d640:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800d644:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d648:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d64c:	0860      	lsrs	r0, r4, #1
 800d64e:	f102 0408 	add.w	r4, r2, #8
 800d652:	9405      	str	r4, [sp, #20]
 800d654:	f102 0410 	add.w	r4, r2, #16
 800d658:	9009      	str	r0, [sp, #36]	; 0x24
 800d65a:	f1a0 0902 	sub.w	r9, r0, #2
 800d65e:	9403      	str	r4, [sp, #12]
 800d660:	18fc      	adds	r4, r7, r3
 800d662:	f102 0018 	add.w	r0, r2, #24
 800d666:	ed94 5a00 	vldr	s10, [r4]
 800d66a:	ed94 3a01 	vldr	s6, [r4, #4]
 800d66e:	ee72 2a85 	vadd.f32	s5, s5, s10
 800d672:	9004      	str	r0, [sp, #16]
 800d674:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d678:	4620      	mov	r0, r4
 800d67a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d67e:	9408      	str	r4, [sp, #32]
 800d680:	ee12 ca90 	vmov	ip, s5
 800d684:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800d688:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d68c:	f845 cb08 	str.w	ip, [r5], #8
 800d690:	ee13 ca90 	vmov	ip, s7
 800d694:	ed96 2a01 	vldr	s4, [r6, #4]
 800d698:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d69c:	edd4 2a01 	vldr	s5, [r4, #4]
 800d6a0:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d6a4:	ee36 6a02 	vadd.f32	s12, s12, s4
 800d6a8:	9500      	str	r5, [sp, #0]
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	ee36 6a22 	vadd.f32	s12, s12, s5
 800d6b0:	ed81 6a01 	vstr	s12, [r1, #4]
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	f841 cb08 	str.w	ip, [r1], #8
 800d6ba:	ee16 ca90 	vmov	ip, s13
 800d6be:	9106      	str	r1, [sp, #24]
 800d6c0:	4639      	mov	r1, r7
 800d6c2:	edc6 4a01 	vstr	s9, [r6, #4]
 800d6c6:	f841 cb08 	str.w	ip, [r1], #8
 800d6ca:	9102      	str	r1, [sp, #8]
 800d6cc:	ee17 1a90 	vmov	r1, s15
 800d6d0:	edc7 5a01 	vstr	s11, [r7, #4]
 800d6d4:	f840 1b08 	str.w	r1, [r0], #8
 800d6d8:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800d6dc:	9001      	str	r0, [sp, #4]
 800d6de:	ed84 7a01 	vstr	s14, [r4, #4]
 800d6e2:	9107      	str	r1, [sp, #28]
 800d6e4:	f000 8135 	beq.w	800d952 <arm_cfft_radix8by4_f32+0x366>
 800d6e8:	3b0c      	subs	r3, #12
 800d6ea:	f102 0920 	add.w	r9, r2, #32
 800d6ee:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800d6f2:	4622      	mov	r2, r4
 800d6f4:	468b      	mov	fp, r1
 800d6f6:	f105 0e10 	add.w	lr, r5, #16
 800d6fa:	4423      	add	r3, r4
 800d6fc:	f1a6 0c0c 	sub.w	ip, r6, #12
 800d700:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800d704:	f106 0010 	add.w	r0, r6, #16
 800d708:	f1a7 010c 	sub.w	r1, r7, #12
 800d70c:	f107 0510 	add.w	r5, r7, #16
 800d710:	3c0c      	subs	r4, #12
 800d712:	3210      	adds	r2, #16
 800d714:	ed15 7a02 	vldr	s14, [r5, #-8]
 800d718:	f1bb 0b01 	subs.w	fp, fp, #1
 800d71c:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800d720:	f1ac 0c08 	sub.w	ip, ip, #8
 800d724:	ed50 6a02 	vldr	s13, [r0, #-8]
 800d728:	f10e 0e08 	add.w	lr, lr, #8
 800d72c:	ee77 1a87 	vadd.f32	s3, s15, s14
 800d730:	ed52 4a02 	vldr	s9, [r2, #-8]
 800d734:	ed55 5a01 	vldr	s11, [r5, #-4]
 800d738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d73c:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800d740:	f10a 0a08 	add.w	sl, sl, #8
 800d744:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800d748:	ed10 3a01 	vldr	s6, [r0, #-4]
 800d74c:	ee37 4a25 	vadd.f32	s8, s14, s11
 800d750:	ed52 3a01 	vldr	s7, [r2, #-4]
 800d754:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d758:	f100 0008 	add.w	r0, r0, #8
 800d75c:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d760:	f1a1 0108 	sub.w	r1, r1, #8
 800d764:	ee73 2a27 	vadd.f32	s5, s6, s15
 800d768:	f109 0910 	add.w	r9, r9, #16
 800d76c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800d770:	f105 0508 	add.w	r5, r5, #8
 800d774:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800d778:	ee37 5a66 	vsub.f32	s10, s14, s13
 800d77c:	ed50 5a03 	vldr	s11, [r0, #-12]
 800d780:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800d784:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d788:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d78c:	ee74 5a25 	vadd.f32	s11, s8, s11
 800d790:	f1a4 0408 	sub.w	r4, r4, #8
 800d794:	ee34 4a43 	vsub.f32	s8, s8, s6
 800d798:	f108 0818 	add.w	r8, r8, #24
 800d79c:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800d7a0:	f102 0208 	add.w	r2, r2, #8
 800d7a4:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d7a8:	f1a3 0308 	sub.w	r3, r3, #8
 800d7ac:	ee34 6a63 	vsub.f32	s12, s8, s7
 800d7b0:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800d7b4:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800d7b8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d7bc:	ed94 4a04 	vldr	s8, [r4, #16]
 800d7c0:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800d7c4:	ed9c 3a04 	vldr	s6, [ip, #16]
 800d7c8:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d7cc:	edd1 7a04 	vldr	s15, [r1, #16]
 800d7d0:	ee73 6a04 	vadd.f32	s13, s6, s8
 800d7d4:	ed93 8a04 	vldr	s16, [r3, #16]
 800d7d8:	edd4 5a03 	vldr	s11, [r4, #12]
 800d7dc:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d7e0:	ed9c 2a03 	vldr	s4, [ip, #12]
 800d7e4:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800d7e8:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800d7ec:	ed91 1a03 	vldr	s2, [r1, #12]
 800d7f0:	ee32 4a25 	vadd.f32	s8, s4, s11
 800d7f4:	edd3 2a03 	vldr	s5, [r3, #12]
 800d7f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d7fc:	ee70 0a88 	vadd.f32	s1, s1, s16
 800d800:	ee73 4a41 	vsub.f32	s9, s6, s2
 800d804:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d808:	edcc 0a04 	vstr	s1, [ip, #16]
 800d80c:	ee74 0a41 	vsub.f32	s1, s8, s2
 800d810:	edd1 6a03 	vldr	s13, [r1, #12]
 800d814:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800d818:	ed93 9a03 	vldr	s18, [r3, #12]
 800d81c:	ee78 5a82 	vadd.f32	s11, s17, s4
 800d820:	ee34 4a26 	vadd.f32	s8, s8, s13
 800d824:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800d828:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800d82c:	ee34 4a09 	vadd.f32	s8, s8, s18
 800d830:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800d834:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800d838:	ed8c 4a03 	vstr	s8, [ip, #12]
 800d83c:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800d840:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800d844:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800d848:	ee60 2a01 	vmul.f32	s5, s0, s2
 800d84c:	ee64 6a81 	vmul.f32	s13, s9, s2
 800d850:	ee20 8a04 	vmul.f32	s16, s0, s8
 800d854:	ee64 4a84 	vmul.f32	s9, s9, s8
 800d858:	ee25 0a01 	vmul.f32	s0, s10, s2
 800d85c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d860:	ee25 4a84 	vmul.f32	s8, s11, s8
 800d864:	ee65 5a81 	vmul.f32	s11, s11, s2
 800d868:	ee35 5a62 	vsub.f32	s10, s10, s5
 800d86c:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800d870:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800d874:	ee38 1a00 	vadd.f32	s2, s16, s0
 800d878:	ed00 5a03 	vstr	s10, [r0, #-12]
 800d87c:	ed00 1a04 	vstr	s2, [r0, #-16]
 800d880:	ed81 4a04 	vstr	s8, [r1, #16]
 800d884:	edc1 5a03 	vstr	s11, [r1, #12]
 800d888:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800d88c:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800d890:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800d894:	ee66 2a25 	vmul.f32	s5, s12, s11
 800d898:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d89c:	ee21 4a85 	vmul.f32	s8, s3, s10
 800d8a0:	ee60 7a85 	vmul.f32	s15, s1, s10
 800d8a4:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800d8a8:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d8ac:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800d8b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d8b4:	ee34 5a22 	vadd.f32	s10, s8, s5
 800d8b8:	ee36 6a61 	vsub.f32	s12, s12, s3
 800d8bc:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800d8c0:	ed05 5a04 	vstr	s10, [r5, #-16]
 800d8c4:	ed05 6a03 	vstr	s12, [r5, #-12]
 800d8c8:	edc4 5a04 	vstr	s11, [r4, #16]
 800d8cc:	edc4 6a03 	vstr	s13, [r4, #12]
 800d8d0:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800d8d4:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800d8d8:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800d8dc:	ee67 5a27 	vmul.f32	s11, s14, s15
 800d8e0:	ee63 6a27 	vmul.f32	s13, s6, s15
 800d8e4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800d8e8:	ee27 7a22 	vmul.f32	s14, s14, s5
 800d8ec:	ee62 7a27 	vmul.f32	s15, s4, s15
 800d8f0:	ee23 3a22 	vmul.f32	s6, s6, s5
 800d8f4:	ee22 2a22 	vmul.f32	s4, s4, s5
 800d8f8:	ee36 6a25 	vadd.f32	s12, s12, s11
 800d8fc:	ee37 7a63 	vsub.f32	s14, s14, s7
 800d900:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800d904:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d908:	ed02 6a04 	vstr	s12, [r2, #-16]
 800d90c:	ed02 7a03 	vstr	s14, [r2, #-12]
 800d910:	ed83 2a04 	vstr	s4, [r3, #16]
 800d914:	edc3 7a03 	vstr	s15, [r3, #12]
 800d918:	f47f aefc 	bne.w	800d714 <arm_cfft_radix8by4_f32+0x128>
 800d91c:	9907      	ldr	r1, [sp, #28]
 800d91e:	9803      	ldr	r0, [sp, #12]
 800d920:	00cb      	lsls	r3, r1, #3
 800d922:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800d926:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800d92a:	9103      	str	r1, [sp, #12]
 800d92c:	9900      	ldr	r1, [sp, #0]
 800d92e:	4419      	add	r1, r3
 800d930:	9100      	str	r1, [sp, #0]
 800d932:	9905      	ldr	r1, [sp, #20]
 800d934:	4419      	add	r1, r3
 800d936:	9105      	str	r1, [sp, #20]
 800d938:	9906      	ldr	r1, [sp, #24]
 800d93a:	4419      	add	r1, r3
 800d93c:	9106      	str	r1, [sp, #24]
 800d93e:	9902      	ldr	r1, [sp, #8]
 800d940:	4419      	add	r1, r3
 800d942:	9102      	str	r1, [sp, #8]
 800d944:	9901      	ldr	r1, [sp, #4]
 800d946:	4419      	add	r1, r3
 800d948:	9b04      	ldr	r3, [sp, #16]
 800d94a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d94e:	9101      	str	r1, [sp, #4]
 800d950:	9304      	str	r3, [sp, #16]
 800d952:	9b00      	ldr	r3, [sp, #0]
 800d954:	9902      	ldr	r1, [sp, #8]
 800d956:	ed93 7a00 	vldr	s14, [r3]
 800d95a:	edd1 7a00 	vldr	s15, [r1]
 800d95e:	9a06      	ldr	r2, [sp, #24]
 800d960:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d964:	9d01      	ldr	r5, [sp, #4]
 800d966:	edd2 6a00 	vldr	s13, [r2]
 800d96a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d96e:	9b02      	ldr	r3, [sp, #8]
 800d970:	ee76 3a86 	vadd.f32	s7, s13, s12
 800d974:	ed95 3a00 	vldr	s6, [r5]
 800d978:	ed93 5a01 	vldr	s10, [r3, #4]
 800d97c:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d980:	9b00      	ldr	r3, [sp, #0]
 800d982:	ee73 3a83 	vadd.f32	s7, s7, s6
 800d986:	edd5 2a01 	vldr	s5, [r5, #4]
 800d98a:	ed93 4a01 	vldr	s8, [r3, #4]
 800d98e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800d992:	9b00      	ldr	r3, [sp, #0]
 800d994:	ee74 5a05 	vadd.f32	s11, s8, s10
 800d998:	edd2 7a01 	vldr	s15, [r2, #4]
 800d99c:	edc3 3a00 	vstr	s7, [r3]
 800d9a0:	ee34 4a45 	vsub.f32	s8, s8, s10
 800d9a4:	edd2 3a01 	vldr	s7, [r2, #4]
 800d9a8:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d9ac:	ed95 2a01 	vldr	s4, [r5, #4]
 800d9b0:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800d9b4:	9d05      	ldr	r5, [sp, #20]
 800d9b6:	ee34 5a66 	vsub.f32	s10, s8, s13
 800d9ba:	9b00      	ldr	r3, [sp, #0]
 800d9bc:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800d9c0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800d9c4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d9c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d9ca:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d9d4:	edc3 3a01 	vstr	s7, [r3, #4]
 800d9d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9dc:	edd5 3a00 	vldr	s7, [r5]
 800d9e0:	ee76 6a84 	vadd.f32	s13, s13, s8
 800d9e4:	ed95 7a01 	vldr	s14, [r5, #4]
 800d9e8:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800d9ec:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800d9f0:	2304      	movs	r3, #4
 800d9f2:	ee64 4a87 	vmul.f32	s9, s9, s14
 800d9f6:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d9fa:	ee25 5a23 	vmul.f32	s10, s10, s7
 800d9fe:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800da02:	ee34 7a07 	vadd.f32	s14, s8, s14
 800da06:	ee35 5a64 	vsub.f32	s10, s10, s9
 800da0a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800da0e:	ed82 7a00 	vstr	s14, [r2]
 800da12:	ed82 5a01 	vstr	s10, [r2, #4]
 800da16:	9a03      	ldr	r2, [sp, #12]
 800da18:	edd2 4a01 	vldr	s9, [r2, #4]
 800da1c:	ed92 7a00 	vldr	s14, [r2]
 800da20:	9a02      	ldr	r2, [sp, #8]
 800da22:	ee26 5a07 	vmul.f32	s10, s12, s14
 800da26:	ee26 6a24 	vmul.f32	s12, s12, s9
 800da2a:	ee25 7a87 	vmul.f32	s14, s11, s14
 800da2e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800da32:	ee37 6a46 	vsub.f32	s12, s14, s12
 800da36:	ee75 5a25 	vadd.f32	s11, s10, s11
 800da3a:	edc2 5a00 	vstr	s11, [r2]
 800da3e:	ed82 6a01 	vstr	s12, [r2, #4]
 800da42:	9a04      	ldr	r2, [sp, #16]
 800da44:	9d01      	ldr	r5, [sp, #4]
 800da46:	edd2 5a01 	vldr	s11, [r2, #4]
 800da4a:	ed92 7a00 	vldr	s14, [r2]
 800da4e:	ee27 6a87 	vmul.f32	s12, s15, s14
 800da52:	ee26 7a87 	vmul.f32	s14, s13, s14
 800da56:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800da5a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800da5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da62:	ee76 6a26 	vadd.f32	s13, s12, s13
 800da66:	edc5 7a01 	vstr	s15, [r5, #4]
 800da6a:	edc5 6a00 	vstr	s13, [r5]
 800da6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800da70:	686a      	ldr	r2, [r5, #4]
 800da72:	f000 fb57 	bl	800e124 <arm_radix8_butterfly_f32>
 800da76:	4630      	mov	r0, r6
 800da78:	4621      	mov	r1, r4
 800da7a:	686a      	ldr	r2, [r5, #4]
 800da7c:	2304      	movs	r3, #4
 800da7e:	f000 fb51 	bl	800e124 <arm_radix8_butterfly_f32>
 800da82:	4638      	mov	r0, r7
 800da84:	4621      	mov	r1, r4
 800da86:	686a      	ldr	r2, [r5, #4]
 800da88:	2304      	movs	r3, #4
 800da8a:	f000 fb4b 	bl	800e124 <arm_radix8_butterfly_f32>
 800da8e:	4621      	mov	r1, r4
 800da90:	686a      	ldr	r2, [r5, #4]
 800da92:	2304      	movs	r3, #4
 800da94:	9808      	ldr	r0, [sp, #32]
 800da96:	b00d      	add	sp, #52	; 0x34
 800da98:	ecbd 8b04 	vpop	{d8-d9}
 800da9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa0:	f000 bb40 	b.w	800e124 <arm_radix8_butterfly_f32>

0800daa4 <arm_cfft_f32>:
 800daa4:	2a01      	cmp	r2, #1
 800daa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daaa:	4606      	mov	r6, r0
 800daac:	4617      	mov	r7, r2
 800daae:	460c      	mov	r4, r1
 800dab0:	4698      	mov	r8, r3
 800dab2:	8805      	ldrh	r5, [r0, #0]
 800dab4:	d055      	beq.n	800db62 <arm_cfft_f32+0xbe>
 800dab6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800daba:	d061      	beq.n	800db80 <arm_cfft_f32+0xdc>
 800dabc:	d916      	bls.n	800daec <arm_cfft_f32+0x48>
 800dabe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800dac2:	d01a      	beq.n	800dafa <arm_cfft_f32+0x56>
 800dac4:	d946      	bls.n	800db54 <arm_cfft_f32+0xb0>
 800dac6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800daca:	d059      	beq.n	800db80 <arm_cfft_f32+0xdc>
 800dacc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800dad0:	d105      	bne.n	800dade <arm_cfft_f32+0x3a>
 800dad2:	2301      	movs	r3, #1
 800dad4:	6872      	ldr	r2, [r6, #4]
 800dad6:	4629      	mov	r1, r5
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 fb23 	bl	800e124 <arm_radix8_butterfly_f32>
 800dade:	f1b8 0f00 	cmp.w	r8, #0
 800dae2:	d111      	bne.n	800db08 <arm_cfft_f32+0x64>
 800dae4:	2f01      	cmp	r7, #1
 800dae6:	d016      	beq.n	800db16 <arm_cfft_f32+0x72>
 800dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daec:	2d20      	cmp	r5, #32
 800daee:	d047      	beq.n	800db80 <arm_cfft_f32+0xdc>
 800daf0:	d934      	bls.n	800db5c <arm_cfft_f32+0xb8>
 800daf2:	2d40      	cmp	r5, #64	; 0x40
 800daf4:	d0ed      	beq.n	800dad2 <arm_cfft_f32+0x2e>
 800daf6:	2d80      	cmp	r5, #128	; 0x80
 800daf8:	d1f1      	bne.n	800dade <arm_cfft_f32+0x3a>
 800dafa:	4621      	mov	r1, r4
 800dafc:	4630      	mov	r0, r6
 800dafe:	f7ff fca9 	bl	800d454 <arm_cfft_radix8by2_f32>
 800db02:	f1b8 0f00 	cmp.w	r8, #0
 800db06:	d0ed      	beq.n	800dae4 <arm_cfft_f32+0x40>
 800db08:	68b2      	ldr	r2, [r6, #8]
 800db0a:	4620      	mov	r0, r4
 800db0c:	89b1      	ldrh	r1, [r6, #12]
 800db0e:	f000 f83f 	bl	800db90 <arm_bitreversal_32>
 800db12:	2f01      	cmp	r7, #1
 800db14:	d1e8      	bne.n	800dae8 <arm_cfft_f32+0x44>
 800db16:	ee07 5a90 	vmov	s15, r5
 800db1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800db26:	2d00      	cmp	r5, #0
 800db28:	d0de      	beq.n	800dae8 <arm_cfft_f32+0x44>
 800db2a:	f104 0108 	add.w	r1, r4, #8
 800db2e:	2300      	movs	r3, #0
 800db30:	ed11 7a02 	vldr	s14, [r1, #-8]
 800db34:	3301      	adds	r3, #1
 800db36:	ed51 7a01 	vldr	s15, [r1, #-4]
 800db3a:	3108      	adds	r1, #8
 800db3c:	429d      	cmp	r5, r3
 800db3e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800db42:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800db46:	ed01 7a04 	vstr	s14, [r1, #-16]
 800db4a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800db4e:	d1ef      	bne.n	800db30 <arm_cfft_f32+0x8c>
 800db50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db54:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800db58:	d0bb      	beq.n	800dad2 <arm_cfft_f32+0x2e>
 800db5a:	e7c0      	b.n	800dade <arm_cfft_f32+0x3a>
 800db5c:	2d10      	cmp	r5, #16
 800db5e:	d0cc      	beq.n	800dafa <arm_cfft_f32+0x56>
 800db60:	e7bd      	b.n	800dade <arm_cfft_f32+0x3a>
 800db62:	b195      	cbz	r5, 800db8a <arm_cfft_f32+0xe6>
 800db64:	f101 030c 	add.w	r3, r1, #12
 800db68:	2200      	movs	r2, #0
 800db6a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800db6e:	3201      	adds	r2, #1
 800db70:	3308      	adds	r3, #8
 800db72:	eef1 7a67 	vneg.f32	s15, s15
 800db76:	4295      	cmp	r5, r2
 800db78:	ed43 7a04 	vstr	s15, [r3, #-16]
 800db7c:	d1f5      	bne.n	800db6a <arm_cfft_f32+0xc6>
 800db7e:	e79a      	b.n	800dab6 <arm_cfft_f32+0x12>
 800db80:	4621      	mov	r1, r4
 800db82:	4630      	mov	r0, r6
 800db84:	f7ff fd32 	bl	800d5ec <arm_cfft_radix8by4_f32>
 800db88:	e7a9      	b.n	800dade <arm_cfft_f32+0x3a>
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0ac      	beq.n	800dae8 <arm_cfft_f32+0x44>
 800db8e:	e7bb      	b.n	800db08 <arm_cfft_f32+0x64>

0800db90 <arm_bitreversal_32>:
 800db90:	b321      	cbz	r1, 800dbdc <arm_bitreversal_32+0x4c>
 800db92:	f102 0c02 	add.w	ip, r2, #2
 800db96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9a:	4690      	mov	r8, r2
 800db9c:	2500      	movs	r5, #0
 800db9e:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800dba2:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800dba6:	3502      	adds	r5, #2
 800dba8:	08a4      	lsrs	r4, r4, #2
 800dbaa:	089b      	lsrs	r3, r3, #2
 800dbac:	428d      	cmp	r5, r1
 800dbae:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800dbb2:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800dbb6:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800dbba:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800dbbe:	f107 0704 	add.w	r7, r7, #4
 800dbc2:	f106 0604 	add.w	r6, r6, #4
 800dbc6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800dbca:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800dbce:	59c4      	ldr	r4, [r0, r7]
 800dbd0:	5983      	ldr	r3, [r0, r6]
 800dbd2:	51c3      	str	r3, [r0, r7]
 800dbd4:	5184      	str	r4, [r0, r6]
 800dbd6:	d3e2      	bcc.n	800db9e <arm_bitreversal_32+0xe>
 800dbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop

0800dbe0 <arm_fir_decimate_init_f32>:
 800dbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe4:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 800dbe8:	fbbc f4f2 	udiv	r4, ip, r2
 800dbec:	fb02 c414 	mls	r4, r2, r4, ip
 800dbf0:	b99c      	cbnz	r4, 800dc1a <arm_fir_decimate_init_f32+0x3a>
 800dbf2:	460f      	mov	r7, r1
 800dbf4:	4616      	mov	r6, r2
 800dbf6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	443a      	add	r2, r7
 800dbfe:	8069      	strh	r1, [r5, #2]
 800dc00:	6043      	str	r3, [r0, #4]
 800dc02:	4621      	mov	r1, r4
 800dc04:	4462      	add	r2, ip
 800dc06:	4640      	mov	r0, r8
 800dc08:	0092      	lsls	r2, r2, #2
 800dc0a:	f000 fd85 	bl	800e718 <memset>
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f8c5 8008 	str.w	r8, [r5, #8]
 800dc14:	702e      	strb	r6, [r5, #0]
 800dc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1a:	f06f 0001 	mvn.w	r0, #1
 800dc1e:	e7fa      	b.n	800dc16 <arm_fir_decimate_init_f32+0x36>

0800dc20 <arm_fir_decimate_f32>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	4605      	mov	r5, r0
 800dc26:	b08d      	sub	sp, #52	; 0x34
 800dc28:	4694      	mov	ip, r2
 800dc2a:	782c      	ldrb	r4, [r5, #0]
 800dc2c:	886f      	ldrh	r7, [r5, #2]
 800dc2e:	9001      	str	r0, [sp, #4]
 800dc30:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800dc34:	68ae      	ldr	r6, [r5, #8]
 800dc36:	4438      	add	r0, r7
 800dc38:	686d      	ldr	r5, [r5, #4]
 800dc3a:	9207      	str	r2, [sp, #28]
 800dc3c:	970a      	str	r7, [sp, #40]	; 0x28
 800dc3e:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 800dc42:	9508      	str	r5, [sp, #32]
 800dc44:	fbb3 f3f4 	udiv	r3, r3, r4
 800dc48:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc4a:	089b      	lsrs	r3, r3, #2
 800dc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc4e:	f000 80ef 	beq.w	800de30 <arm_fir_decimate_f32+0x210>
 800dc52:	08ba      	lsrs	r2, r7, #2
 800dc54:	462b      	mov	r3, r5
 800dc56:	3510      	adds	r5, #16
 800dc58:	f007 0703 	and.w	r7, r7, #3
 800dc5c:	9205      	str	r2, [sp, #20]
 800dc5e:	0112      	lsls	r2, r2, #4
 800dc60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc62:	f10c 0910 	add.w	r9, ip, #16
 800dc66:	4413      	add	r3, r2
 800dc68:	9100      	str	r1, [sp, #0]
 800dc6a:	eb05 0e02 	add.w	lr, r5, r2
 800dc6e:	4611      	mov	r1, r2
 800dc70:	9503      	str	r5, [sp, #12]
 800dc72:	9704      	str	r7, [sp, #16]
 800dc74:	9002      	str	r0, [sp, #8]
 800dc76:	9306      	str	r3, [sp, #24]
 800dc78:	00a4      	lsls	r4, r4, #2
 800dc7a:	4658      	mov	r0, fp
 800dc7c:	9a00      	ldr	r2, [sp, #0]
 800dc7e:	4623      	mov	r3, r4
 800dc80:	f852 5b04 	ldr.w	r5, [r2], #4
 800dc84:	3b01      	subs	r3, #1
 800dc86:	f840 5b04 	str.w	r5, [r0], #4
 800dc8a:	d1f9      	bne.n	800dc80 <arm_fir_decimate_f32+0x60>
 800dc8c:	9b01      	ldr	r3, [sp, #4]
 800dc8e:	00a4      	lsls	r4, r4, #2
 800dc90:	eddf 0abe 	vldr	s1, [pc, #760]	; 800df8c <arm_fir_decimate_f32+0x36c>
 800dc94:	f893 8000 	ldrb.w	r8, [r3]
 800dc98:	44a3      	add	fp, r4
 800dc9a:	9b00      	ldr	r3, [sp, #0]
 800dc9c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800dca0:	4423      	add	r3, r4
 800dca2:	eb06 0708 	add.w	r7, r6, r8
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	eb07 0c08 	add.w	ip, r7, r8
 800dcac:	9b05      	ldr	r3, [sp, #20]
 800dcae:	eb0c 0a08 	add.w	sl, ip, r8
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 815c 	beq.w	800df70 <arm_fir_decimate_f32+0x350>
 800dcb8:	eef0 4a60 	vmov.f32	s9, s1
 800dcbc:	9b03      	ldr	r3, [sp, #12]
 800dcbe:	eef0 7a60 	vmov.f32	s15, s1
 800dcc2:	f106 0510 	add.w	r5, r6, #16
 800dcc6:	eeb0 7a60 	vmov.f32	s14, s1
 800dcca:	f107 0410 	add.w	r4, r7, #16
 800dcce:	f10c 0010 	add.w	r0, ip, #16
 800dcd2:	f10a 0210 	add.w	r2, sl, #16
 800dcd6:	ed53 5a04 	vldr	s11, [r3, #-16]
 800dcda:	3310      	adds	r3, #16
 800dcdc:	ed12 5a04 	vldr	s10, [r2, #-16]
 800dce0:	3510      	adds	r5, #16
 800dce2:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800dce6:	3410      	adds	r4, #16
 800dce8:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 800dcec:	3010      	adds	r0, #16
 800dcee:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800dcf2:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800dcf6:	ee25 1a81 	vmul.f32	s2, s11, s2
 800dcfa:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800dcfe:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800dd02:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800dd06:	ee65 5a85 	vmul.f32	s11, s11, s10
 800dd0a:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 800dd0e:	ed12 5a03 	vldr	s10, [r2, #-12]
 800dd12:	ee36 7a87 	vadd.f32	s14, s13, s14
 800dd16:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800dd1a:	ee73 1aa4 	vadd.f32	s3, s7, s9
 800dd1e:	ee26 2a02 	vmul.f32	s4, s12, s4
 800dd22:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800dd26:	ee31 1a27 	vadd.f32	s2, s2, s15
 800dd2a:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800dd2e:	ee66 7a22 	vmul.f32	s15, s12, s5
 800dd32:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800dd36:	ee26 3a03 	vmul.f32	s6, s12, s6
 800dd3a:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 800dd3e:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800dd42:	ed52 0a02 	vldr	s1, [r2, #-8]
 800dd46:	ee26 6a05 	vmul.f32	s12, s12, s10
 800dd4a:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800dd4e:	ee72 2a07 	vadd.f32	s5, s4, s14
 800dd52:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800dd56:	ee77 7a81 	vadd.f32	s15, s15, s2
 800dd5a:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800dd5e:	ee33 3a21 	vadd.f32	s6, s6, s3
 800dd62:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 800dd66:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800dd6a:	ed52 1a01 	vldr	s3, [r2, #-4]
 800dd6e:	ee26 4a84 	vmul.f32	s8, s13, s8
 800dd72:	459e      	cmp	lr, r3
 800dd74:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800dd78:	f102 0210 	add.w	r2, r2, #16
 800dd7c:	ee66 6aa0 	vmul.f32	s13, s13, s1
 800dd80:	ee36 6a25 	vadd.f32	s12, s12, s11
 800dd84:	ee25 7a07 	vmul.f32	s14, s10, s14
 800dd88:	ee34 4a27 	vadd.f32	s8, s8, s15
 800dd8c:	ee74 4a83 	vadd.f32	s9, s9, s6
 800dd90:	ee65 7a01 	vmul.f32	s15, s10, s2
 800dd94:	ee25 3a02 	vmul.f32	s6, s10, s4
 800dd98:	ee73 3aa2 	vadd.f32	s7, s7, s5
 800dd9c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dda0:	ee25 5a21 	vmul.f32	s10, s10, s3
 800dda4:	ee37 7a23 	vadd.f32	s14, s14, s7
 800dda8:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ddac:	ee73 4a24 	vadd.f32	s9, s6, s9
 800ddb0:	ee75 0a26 	vadd.f32	s1, s10, s13
 800ddb4:	d18f      	bne.n	800dcd6 <arm_fir_decimate_f32+0xb6>
 800ddb6:	440e      	add	r6, r1
 800ddb8:	440f      	add	r7, r1
 800ddba:	448c      	add	ip, r1
 800ddbc:	eb0a 0001 	add.w	r0, sl, r1
 800ddc0:	9a06      	ldr	r2, [sp, #24]
 800ddc2:	9b04      	ldr	r3, [sp, #16]
 800ddc4:	b1db      	cbz	r3, 800ddfe <arm_fir_decimate_f32+0x1de>
 800ddc6:	ecb2 5a01 	vldmia	r2!, {s10}
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	ecf6 2a01 	vldmia	r6!, {s5}
 800ddd0:	ecf7 3a01 	vldmia	r7!, {s7}
 800ddd4:	ecbc 4a01 	vldmia	ip!, {s8}
 800ddd8:	ee65 2a22 	vmul.f32	s5, s10, s5
 800dddc:	ecf0 6a01 	vldmia	r0!, {s13}
 800dde0:	ee65 3a23 	vmul.f32	s7, s10, s7
 800dde4:	ee25 4a04 	vmul.f32	s8, s10, s8
 800dde8:	ee25 5a26 	vmul.f32	s10, s10, s13
 800ddec:	ee37 7a22 	vadd.f32	s14, s14, s5
 800ddf0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ddf4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ddf8:	ee70 0a85 	vadd.f32	s1, s1, s10
 800ddfc:	d1e3      	bne.n	800ddc6 <arm_fir_decimate_f32+0x1a6>
 800ddfe:	9b02      	ldr	r3, [sp, #8]
 800de00:	eb0a 0608 	add.w	r6, sl, r8
 800de04:	ed09 7a04 	vstr	s14, [r9, #-16]
 800de08:	f109 0910 	add.w	r9, r9, #16
 800de0c:	3b01      	subs	r3, #1
 800de0e:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 800de12:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 800de16:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 800de1a:	9302      	str	r3, [sp, #8]
 800de1c:	d002      	beq.n	800de24 <arm_fir_decimate_f32+0x204>
 800de1e:	9b01      	ldr	r3, [sp, #4]
 800de20:	781c      	ldrb	r4, [r3, #0]
 800de22:	e729      	b.n	800dc78 <arm_fir_decimate_f32+0x58>
 800de24:	9b07      	ldr	r3, [sp, #28]
 800de26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de28:	9900      	ldr	r1, [sp, #0]
 800de2a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800de2e:	9307      	str	r3, [sp, #28]
 800de30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de32:	f013 0803 	ands.w	r8, r3, #3
 800de36:	d067      	beq.n	800df08 <arm_fir_decimate_f32+0x2e8>
 800de38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de3a:	9808      	ldr	r0, [sp, #32]
 800de3c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800de40:	9d07      	ldr	r5, [sp, #28]
 800de42:	4602      	mov	r2, r0
 800de44:	f003 0703 	and.w	r7, r3, #3
 800de48:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 800de4c:	f8cd e000 	str.w	lr, [sp]
 800de50:	3210      	adds	r2, #16
 800de52:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800de56:	eb00 090c 	add.w	r9, r0, ip
 800de5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800de5e:	eb02 040c 	add.w	r4, r2, ip
 800de62:	46aa      	mov	sl, r5
 800de64:	9203      	str	r2, [sp, #12]
 800de66:	f89e 5000 	ldrb.w	r5, [lr]
 800de6a:	4658      	mov	r0, fp
 800de6c:	460a      	mov	r2, r1
 800de6e:	462b      	mov	r3, r5
 800de70:	ecf2 7a01 	vldmia	r2!, {s15}
 800de74:	3b01      	subs	r3, #1
 800de76:	ece0 7a01 	vstmia	r0!, {s15}
 800de7a:	d1f9      	bne.n	800de70 <arm_fir_decimate_f32+0x250>
 800de7c:	00ad      	lsls	r5, r5, #2
 800de7e:	9b00      	ldr	r3, [sp, #0]
 800de80:	4429      	add	r1, r5
 800de82:	44ab      	add	fp, r5
 800de84:	2b00      	cmp	r3, #0
 800de86:	d07c      	beq.n	800df82 <arm_fir_decimate_f32+0x362>
 800de88:	9b03      	ldr	r3, [sp, #12]
 800de8a:	f106 0210 	add.w	r2, r6, #16
 800de8e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800df8c <arm_fir_decimate_f32+0x36c>
 800de92:	ed13 7a04 	vldr	s14, [r3, #-16]
 800de96:	3310      	adds	r3, #16
 800de98:	ed52 6a04 	vldr	s13, [r2, #-16]
 800de9c:	3210      	adds	r2, #16
 800de9e:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800dea2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dea6:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 800deaa:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800deae:	ee26 6a25 	vmul.f32	s12, s12, s11
 800deb2:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 800deb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800deba:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 800debe:	ee26 7a85 	vmul.f32	s14, s13, s10
 800dec2:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 800dec6:	429c      	cmp	r4, r3
 800dec8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800decc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800ded0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ded4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ded8:	d1db      	bne.n	800de92 <arm_fir_decimate_f32+0x272>
 800deda:	eb06 000c 	add.w	r0, r6, ip
 800dede:	464a      	mov	r2, r9
 800dee0:	b157      	cbz	r7, 800def8 <arm_fir_decimate_f32+0x2d8>
 800dee2:	463b      	mov	r3, r7
 800dee4:	ecb2 7a01 	vldmia	r2!, {s14}
 800dee8:	3b01      	subs	r3, #1
 800deea:	ecf0 6a01 	vldmia	r0!, {s13}
 800deee:	ee27 7a26 	vmul.f32	s14, s14, s13
 800def2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800def6:	d1f5      	bne.n	800dee4 <arm_fir_decimate_f32+0x2c4>
 800def8:	f89e 3000 	ldrb.w	r3, [lr]
 800defc:	ecea 7a01 	vstmia	sl!, {s15}
 800df00:	45c2      	cmp	sl, r8
 800df02:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800df06:	d1ae      	bne.n	800de66 <arm_fir_decimate_f32+0x246>
 800df08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df0a:	1e5c      	subs	r4, r3, #1
 800df0c:	9b01      	ldr	r3, [sp, #4]
 800df0e:	08a5      	lsrs	r5, r4, #2
 800df10:	689f      	ldr	r7, [r3, #8]
 800df12:	d01d      	beq.n	800df50 <arm_fir_decimate_f32+0x330>
 800df14:	f106 0210 	add.w	r2, r6, #16
 800df18:	f107 0310 	add.w	r3, r7, #16
 800df1c:	4629      	mov	r1, r5
 800df1e:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800df22:	3901      	subs	r1, #1
 800df24:	f102 0210 	add.w	r2, r2, #16
 800df28:	f103 0310 	add.w	r3, r3, #16
 800df2c:	f843 0c20 	str.w	r0, [r3, #-32]
 800df30:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800df34:	f843 0c1c 	str.w	r0, [r3, #-28]
 800df38:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800df3c:	f843 0c18 	str.w	r0, [r3, #-24]
 800df40:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800df44:	f843 0c14 	str.w	r0, [r3, #-20]
 800df48:	d1e9      	bne.n	800df1e <arm_fir_decimate_f32+0x2fe>
 800df4a:	012d      	lsls	r5, r5, #4
 800df4c:	442e      	add	r6, r5
 800df4e:	442f      	add	r7, r5
 800df50:	f014 0403 	ands.w	r4, r4, #3
 800df54:	d009      	beq.n	800df6a <arm_fir_decimate_f32+0x34a>
 800df56:	6833      	ldr	r3, [r6, #0]
 800df58:	3c01      	subs	r4, #1
 800df5a:	603b      	str	r3, [r7, #0]
 800df5c:	d005      	beq.n	800df6a <arm_fir_decimate_f32+0x34a>
 800df5e:	6873      	ldr	r3, [r6, #4]
 800df60:	2c01      	cmp	r4, #1
 800df62:	607b      	str	r3, [r7, #4]
 800df64:	d001      	beq.n	800df6a <arm_fir_decimate_f32+0x34a>
 800df66:	68b3      	ldr	r3, [r6, #8]
 800df68:	60bb      	str	r3, [r7, #8]
 800df6a:	b00d      	add	sp, #52	; 0x34
 800df6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df70:	4650      	mov	r0, sl
 800df72:	9a08      	ldr	r2, [sp, #32]
 800df74:	eef0 4a60 	vmov.f32	s9, s1
 800df78:	eef0 7a60 	vmov.f32	s15, s1
 800df7c:	eeb0 7a60 	vmov.f32	s14, s1
 800df80:	e71f      	b.n	800ddc2 <arm_fir_decimate_f32+0x1a2>
 800df82:	9a08      	ldr	r2, [sp, #32]
 800df84:	4630      	mov	r0, r6
 800df86:	eddf 7a01 	vldr	s15, [pc, #4]	; 800df8c <arm_fir_decimate_f32+0x36c>
 800df8a:	e7a9      	b.n	800dee0 <arm_fir_decimate_f32+0x2c0>
 800df8c:	00000000 	.word	0x00000000

0800df90 <arm_cmplx_mult_cmplx_f32>:
 800df90:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800df94:	b4f0      	push	{r4, r5, r6, r7}
 800df96:	d073      	beq.n	800e080 <arm_cmplx_mult_cmplx_f32+0xf0>
 800df98:	f100 0620 	add.w	r6, r0, #32
 800df9c:	f101 0520 	add.w	r5, r1, #32
 800dfa0:	f102 0420 	add.w	r4, r2, #32
 800dfa4:	4667      	mov	r7, ip
 800dfa6:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800dfaa:	3f01      	subs	r7, #1
 800dfac:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800dfb0:	f105 0520 	add.w	r5, r5, #32
 800dfb4:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 800dfb8:	f106 0620 	add.w	r6, r6, #32
 800dfbc:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 800dfc0:	f104 0420 	add.w	r4, r4, #32
 800dfc4:	ee27 6a87 	vmul.f32	s12, s15, s14
 800dfc8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800dfcc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dfd0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dfd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfd8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800dfdc:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 800dfe0:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 800dfe4:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 800dfe8:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 800dfec:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 800dff0:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 800dff4:	ee27 6a87 	vmul.f32	s12, s15, s14
 800dff8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800dffc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e000:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e004:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e008:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e00c:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800e010:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 800e014:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 800e018:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 800e01c:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 800e020:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 800e024:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e028:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e02c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e030:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e034:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e038:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e03c:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 800e040:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 800e044:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800e048:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 800e04c:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 800e050:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 800e054:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e058:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e05c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e060:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e064:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e068:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e06c:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800e070:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 800e074:	d197      	bne.n	800dfa6 <arm_cmplx_mult_cmplx_f32+0x16>
 800e076:	ea4f 144c 	mov.w	r4, ip, lsl #5
 800e07a:	4420      	add	r0, r4
 800e07c:	4421      	add	r1, r4
 800e07e:	4422      	add	r2, r4
 800e080:	f013 0303 	ands.w	r3, r3, #3
 800e084:	d04b      	beq.n	800e11e <arm_cmplx_mult_cmplx_f32+0x18e>
 800e086:	edd0 5a00 	vldr	s11, [r0]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	edd1 7a00 	vldr	s15, [r1]
 800e090:	edd0 6a01 	vldr	s13, [r0, #4]
 800e094:	ed91 7a01 	vldr	s14, [r1, #4]
 800e098:	ee27 6aa5 	vmul.f32	s12, s15, s11
 800e09c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e0a0:	ee67 6a26 	vmul.f32	s13, s14, s13
 800e0a4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e0a8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e0ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0b0:	edc2 6a00 	vstr	s13, [r2]
 800e0b4:	edc2 7a01 	vstr	s15, [r2, #4]
 800e0b8:	d031      	beq.n	800e11e <arm_cmplx_mult_cmplx_f32+0x18e>
 800e0ba:	edd0 7a02 	vldr	s15, [r0, #8]
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	ed91 7a02 	vldr	s14, [r1, #8]
 800e0c4:	edd0 6a03 	vldr	s13, [r0, #12]
 800e0c8:	edd1 5a03 	vldr	s11, [r1, #12]
 800e0cc:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e0d0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e0d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e0d8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e0dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0e0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e0e4:	edc2 7a03 	vstr	s15, [r2, #12]
 800e0e8:	edc2 6a02 	vstr	s13, [r2, #8]
 800e0ec:	d017      	beq.n	800e11e <arm_cmplx_mult_cmplx_f32+0x18e>
 800e0ee:	edd0 7a04 	vldr	s15, [r0, #16]
 800e0f2:	ed91 7a04 	vldr	s14, [r1, #16]
 800e0f6:	edd0 6a05 	vldr	s13, [r0, #20]
 800e0fa:	edd1 5a05 	vldr	s11, [r1, #20]
 800e0fe:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e102:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e106:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e10a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e10e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e112:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e116:	edc2 7a05 	vstr	s15, [r2, #20]
 800e11a:	edc2 6a04 	vstr	s13, [r2, #16]
 800e11e:	bcf0      	pop	{r4, r5, r6, r7}
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop

0800e124 <arm_radix8_butterfly_f32>:
 800e124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e128:	ed2d 8b10 	vpush	{d8-d15}
 800e12c:	b095      	sub	sp, #84	; 0x54
 800e12e:	468a      	mov	sl, r1
 800e130:	468b      	mov	fp, r1
 800e132:	eddf 8abb 	vldr	s17, [pc, #748]	; 800e420 <arm_radix8_butterfly_f32+0x2fc>
 800e136:	9012      	str	r0, [sp, #72]	; 0x48
 800e138:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800e13c:	4603      	mov	r3, r0
 800e13e:	3304      	adds	r3, #4
 800e140:	9313      	str	r3, [sp, #76]	; 0x4c
 800e142:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800e146:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e14c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800e150:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800e154:	920f      	str	r2, [sp, #60]	; 0x3c
 800e156:	9303      	str	r3, [sp, #12]
 800e158:	0153      	lsls	r3, r2, #5
 800e15a:	0114      	lsls	r4, r2, #4
 800e15c:	eba9 0002 	sub.w	r0, r9, r2
 800e160:	18ce      	adds	r6, r1, r3
 800e162:	9302      	str	r3, [sp, #8]
 800e164:	0097      	lsls	r7, r2, #2
 800e166:	4613      	mov	r3, r2
 800e168:	eb06 0509 	add.w	r5, r6, r9
 800e16c:	9004      	str	r0, [sp, #16]
 800e16e:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800e172:	1bd2      	subs	r2, r2, r7
 800e174:	eb05 0109 	add.w	r1, r5, r9
 800e178:	441f      	add	r7, r3
 800e17a:	9405      	str	r4, [sp, #20]
 800e17c:	f109 0004 	add.w	r0, r9, #4
 800e180:	9101      	str	r1, [sp, #4]
 800e182:	1d21      	adds	r1, r4, #4
 800e184:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e186:	f04f 0e00 	mov.w	lr, #0
 800e18a:	9c01      	ldr	r4, [sp, #4]
 800e18c:	4418      	add	r0, r3
 800e18e:	4419      	add	r1, r3
 800e190:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800e194:	9b02      	ldr	r3, [sp, #8]
 800e196:	00fc      	lsls	r4, r7, #3
 800e198:	18d7      	adds	r7, r2, r3
 800e19a:	9b04      	ldr	r3, [sp, #16]
 800e19c:	9406      	str	r4, [sp, #24]
 800e19e:	00db      	lsls	r3, r3, #3
 800e1a0:	9c01      	ldr	r4, [sp, #4]
 800e1a2:	9307      	str	r3, [sp, #28]
 800e1a4:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800e1a8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800e1ac:	9304      	str	r3, [sp, #16]
 800e1ae:	9b03      	ldr	r3, [sp, #12]
 800e1b0:	edd6 6a00 	vldr	s13, [r6]
 800e1b4:	44de      	add	lr, fp
 800e1b6:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800e1ba:	ed94 7a00 	vldr	s14, [r4]
 800e1be:	45f2      	cmp	sl, lr
 800e1c0:	ed10 6a01 	vldr	s12, [r0, #-4]
 800e1c4:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800e1c8:	edd5 2a00 	vldr	s5, [r5]
 800e1cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e1d0:	edd7 3a00 	vldr	s7, [r7]
 800e1d4:	ed11 5a01 	vldr	s10, [r1, #-4]
 800e1d8:	ee36 3a22 	vadd.f32	s6, s12, s5
 800e1dc:	edd2 6a00 	vldr	s13, [r2]
 800e1e0:	ee75 5a07 	vadd.f32	s11, s10, s14
 800e1e4:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800e1e8:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800e1ec:	ee72 4a25 	vadd.f32	s9, s4, s11
 800e1f0:	ee73 3a04 	vadd.f32	s7, s6, s8
 800e1f4:	ee35 5a47 	vsub.f32	s10, s10, s14
 800e1f8:	ee36 7a62 	vsub.f32	s14, s12, s5
 800e1fc:	ee32 2a65 	vsub.f32	s4, s4, s11
 800e200:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800e204:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800e208:	ee37 6a66 	vsub.f32	s12, s14, s13
 800e20c:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800e210:	ee33 3a44 	vsub.f32	s6, s6, s8
 800e214:	edc6 4a00 	vstr	s9, [r6]
 800e218:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e21c:	ed97 4a01 	vldr	s8, [r7, #4]
 800e220:	ee66 6a28 	vmul.f32	s13, s12, s17
 800e224:	edd0 5a00 	vldr	s11, [r0]
 800e228:	ed95 6a01 	vldr	s12, [r5, #4]
 800e22c:	ee27 7a28 	vmul.f32	s14, s14, s17
 800e230:	edd2 3a01 	vldr	s7, [r2, #4]
 800e234:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800e238:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800e23c:	ed96 1a01 	vldr	s2, [r6, #4]
 800e240:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800e244:	edd4 0a01 	vldr	s1, [r4, #4]
 800e248:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e24c:	eddc 6a00 	vldr	s13, [ip]
 800e250:	ee75 5a86 	vadd.f32	s11, s11, s12
 800e254:	ed91 6a00 	vldr	s12, [r1]
 800e258:	ee73 3a84 	vadd.f32	s7, s7, s8
 800e25c:	ee74 1a80 	vadd.f32	s3, s9, s0
 800e260:	ee36 4a81 	vadd.f32	s8, s13, s2
 800e264:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800e268:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800e26c:	ee36 1a20 	vadd.f32	s2, s12, s1
 800e270:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800e274:	ee36 6a60 	vsub.f32	s12, s12, s1
 800e278:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800e27c:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800e280:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800e284:	ee74 3a01 	vadd.f32	s7, s8, s2
 800e288:	ee34 4a41 	vsub.f32	s8, s8, s2
 800e28c:	ee36 1a21 	vadd.f32	s2, s12, s3
 800e290:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800e294:	ee36 6a61 	vsub.f32	s12, s12, s3
 800e298:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800e29c:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800e2a0:	ed8c 0a00 	vstr	s0, [ip]
 800e2a4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800e2a8:	449c      	add	ip, r3
 800e2aa:	ee75 4a07 	vadd.f32	s9, s10, s14
 800e2ae:	edc6 3a01 	vstr	s7, [r6, #4]
 800e2b2:	ee35 7a47 	vsub.f32	s14, s10, s14
 800e2b6:	441e      	add	r6, r3
 800e2b8:	ee32 5a25 	vadd.f32	s10, s4, s11
 800e2bc:	ee72 5a65 	vsub.f32	s11, s4, s11
 800e2c0:	ee72 3a81 	vadd.f32	s7, s5, s2
 800e2c4:	ed01 5a01 	vstr	s10, [r1, #-4]
 800e2c8:	ee34 2a43 	vsub.f32	s4, s8, s6
 800e2cc:	edc4 5a00 	vstr	s11, [r4]
 800e2d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 800e2d4:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800e2d8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e2dc:	ed81 2a00 	vstr	s4, [r1]
 800e2e0:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800e2e4:	4419      	add	r1, r3
 800e2e6:	ee33 4a04 	vadd.f32	s8, s6, s8
 800e2ea:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800e2ee:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800e2f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e2f6:	ed84 4a01 	vstr	s8, [r4, #4]
 800e2fa:	ed40 3a01 	vstr	s7, [r0, #-4]
 800e2fe:	441c      	add	r4, r3
 800e300:	edc7 2a00 	vstr	s5, [r7]
 800e304:	ed85 5a00 	vstr	s10, [r5]
 800e308:	edc2 7a00 	vstr	s15, [r2]
 800e30c:	edc0 5a00 	vstr	s11, [r0]
 800e310:	4418      	add	r0, r3
 800e312:	edc7 4a01 	vstr	s9, [r7, #4]
 800e316:	441f      	add	r7, r3
 800e318:	ed85 6a01 	vstr	s12, [r5, #4]
 800e31c:	441d      	add	r5, r3
 800e31e:	ed82 7a01 	vstr	s14, [r2, #4]
 800e322:	441a      	add	r2, r3
 800e324:	f63f af44 	bhi.w	800e1b0 <arm_radix8_butterfly_f32+0x8c>
 800e328:	469c      	mov	ip, r3
 800e32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e32c:	2b07      	cmp	r3, #7
 800e32e:	f240 81b6 	bls.w	800e69e <arm_radix8_butterfly_f32+0x57a>
 800e332:	9a02      	ldr	r2, [sp, #8]
 800e334:	f109 0608 	add.w	r6, r9, #8
 800e338:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e33a:	f108 0408 	add.w	r4, r8, #8
 800e33e:	3208      	adds	r2, #8
 800e340:	9f06      	ldr	r7, [sp, #24]
 800e342:	9d04      	ldr	r5, [sp, #16]
 800e344:	189a      	adds	r2, r3, r2
 800e346:	3708      	adds	r7, #8
 800e348:	3508      	adds	r5, #8
 800e34a:	9807      	ldr	r0, [sp, #28]
 800e34c:	920c      	str	r2, [sp, #48]	; 0x30
 800e34e:	199a      	adds	r2, r3, r6
 800e350:	9905      	ldr	r1, [sp, #20]
 800e352:	3008      	adds	r0, #8
 800e354:	920b      	str	r2, [sp, #44]	; 0x2c
 800e356:	19da      	adds	r2, r3, r7
 800e358:	310c      	adds	r1, #12
 800e35a:	920a      	str	r2, [sp, #40]	; 0x28
 800e35c:	195a      	adds	r2, r3, r5
 800e35e:	9209      	str	r2, [sp, #36]	; 0x24
 800e360:	191a      	adds	r2, r3, r4
 800e362:	9208      	str	r2, [sp, #32]
 800e364:	181a      	adds	r2, r3, r0
 800e366:	9207      	str	r2, [sp, #28]
 800e368:	185a      	adds	r2, r3, r1
 800e36a:	330c      	adds	r3, #12
 800e36c:	9205      	str	r2, [sp, #20]
 800e36e:	9306      	str	r3, [sp, #24]
 800e370:	2301      	movs	r3, #1
 800e372:	9304      	str	r3, [sp, #16]
 800e374:	2300      	movs	r3, #0
 800e376:	930d      	str	r3, [sp, #52]	; 0x34
 800e378:	4663      	mov	r3, ip
 800e37a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e37c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e37e:	f8dd c014 	ldr.w	ip, [sp, #20]
 800e382:	440a      	add	r2, r1
 800e384:	9f06      	ldr	r7, [sp, #24]
 800e386:	9e07      	ldr	r6, [sp, #28]
 800e388:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800e38c:	920d      	str	r2, [sp, #52]	; 0x34
 800e38e:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800e392:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e394:	9d08      	ldr	r5, [sp, #32]
 800e396:	4442      	add	r2, r8
 800e398:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e39a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e39c:	eb02 0108 	add.w	r1, r2, r8
 800e3a0:	ed92 ea00 	vldr	s28, [r2]
 800e3a4:	eb01 0208 	add.w	r2, r1, r8
 800e3a8:	edd1 da00 	vldr	s27, [r1]
 800e3ac:	eb02 0108 	add.w	r1, r2, r8
 800e3b0:	ed92 da00 	vldr	s26, [r2]
 800e3b4:	eb01 0208 	add.w	r2, r1, r8
 800e3b8:	edd1 ca00 	vldr	s25, [r1]
 800e3bc:	eb02 0108 	add.w	r1, r2, r8
 800e3c0:	ed92 ca00 	vldr	s24, [r2]
 800e3c4:	eb01 0208 	add.w	r2, r1, r8
 800e3c8:	edd1 ba00 	vldr	s23, [r1]
 800e3cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ce:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800e3d2:	ed92 ba00 	vldr	s22, [r2]
 800e3d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3d8:	eb0e 0908 	add.w	r9, lr, r8
 800e3dc:	910e      	str	r1, [sp, #56]	; 0x38
 800e3de:	9201      	str	r2, [sp, #4]
 800e3e0:	eb09 0208 	add.w	r2, r9, r8
 800e3e4:	ed99 aa01 	vldr	s20, [r9, #4]
 800e3e8:	edde aa01 	vldr	s21, [lr, #4]
 800e3ec:	eb02 0908 	add.w	r9, r2, r8
 800e3f0:	edd2 9a01 	vldr	s19, [r2, #4]
 800e3f4:	f8dd e010 	ldr.w	lr, [sp, #16]
 800e3f8:	eb09 0208 	add.w	r2, r9, r8
 800e3fc:	ed99 9a01 	vldr	s18, [r9, #4]
 800e400:	eb02 0908 	add.w	r9, r2, r8
 800e404:	ed92 8a01 	vldr	s16, [r2, #4]
 800e408:	9a01      	ldr	r2, [sp, #4]
 800e40a:	edd9 7a01 	vldr	s15, [r9, #4]
 800e40e:	44c8      	add	r8, r9
 800e410:	edcd 7a02 	vstr	s15, [sp, #8]
 800e414:	edd8 7a01 	vldr	s15, [r8, #4]
 800e418:	edcd 7a03 	vstr	s15, [sp, #12]
 800e41c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e41e:	e001      	b.n	800e424 <arm_radix8_butterfly_f32+0x300>
 800e420:	3f3504f3 	.word	0x3f3504f3
 800e424:	ed92 7a00 	vldr	s14, [r2]
 800e428:	44de      	add	lr, fp
 800e42a:	ed17 1a01 	vldr	s2, [r7, #-4]
 800e42e:	ed90 5a00 	vldr	s10, [r0]
 800e432:	45f2      	cmp	sl, lr
 800e434:	ed1c fa01 	vldr	s30, [ip, #-4]
 800e438:	ee31 3a07 	vadd.f32	s6, s2, s14
 800e43c:	edd6 5a00 	vldr	s11, [r6]
 800e440:	ee31 1a47 	vsub.f32	s2, s2, s14
 800e444:	edd4 7a00 	vldr	s15, [r4]
 800e448:	ed95 7a00 	vldr	s14, [r5]
 800e44c:	ed91 4a00 	vldr	s8, [r1]
 800e450:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800e454:	ee77 6a25 	vadd.f32	s13, s14, s11
 800e458:	edd7 ea00 	vldr	s29, [r7]
 800e45c:	ee74 fa05 	vadd.f32	s31, s8, s10
 800e460:	ee73 1a06 	vadd.f32	s3, s6, s12
 800e464:	ee34 4a45 	vsub.f32	s8, s8, s10
 800e468:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800e46c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e470:	ee33 3a46 	vsub.f32	s6, s6, s12
 800e474:	ee31 6a85 	vadd.f32	s12, s3, s10
 800e478:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800e47c:	ee34 fa07 	vadd.f32	s30, s8, s14
 800e480:	ed07 6a01 	vstr	s12, [r7, #-4]
 800e484:	ee34 4a47 	vsub.f32	s8, s8, s14
 800e488:	edd5 3a01 	vldr	s7, [r5, #4]
 800e48c:	ee7f fae6 	vsub.f32	s31, s31, s13
 800e490:	ed90 7a01 	vldr	s14, [r0, #4]
 800e494:	ee2f fa28 	vmul.f32	s30, s30, s17
 800e498:	edd1 5a01 	vldr	s11, [r1, #4]
 800e49c:	ee24 4a28 	vmul.f32	s8, s8, s17
 800e4a0:	ed96 6a01 	vldr	s12, [r6, #4]
 800e4a4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800e4a8:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800e4ac:	edd2 6a01 	vldr	s13, [r2, #4]
 800e4b0:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800e4b4:	edd4 4a01 	vldr	s9, [r4, #4]
 800e4b8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e4bc:	ed9c 7a00 	vldr	s14, [ip]
 800e4c0:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800e4c4:	ee33 6a86 	vadd.f32	s12, s7, s12
 800e4c8:	ee37 facf 	vsub.f32	s30, s15, s30
 800e4cc:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800e4d0:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800e4d4:	ee7e eae6 	vsub.f32	s29, s29, s13
 800e4d8:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800e4dc:	ee77 6a24 	vadd.f32	s13, s14, s9
 800e4e0:	ee75 0a86 	vadd.f32	s1, s11, s12
 800e4e4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e4e8:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800e4ec:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e4f0:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800e4f4:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800e4f8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800e4fc:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800e500:	ee77 4a22 	vadd.f32	s9, s14, s5
 800e504:	ee7e eae7 	vsub.f32	s29, s29, s15
 800e508:	ee77 7a62 	vsub.f32	s15, s14, s5
 800e50c:	ee71 2a04 	vadd.f32	s5, s2, s8
 800e510:	ee31 7a44 	vsub.f32	s14, s2, s8
 800e514:	ee30 1a60 	vsub.f32	s2, s0, s1
 800e518:	ee73 1a06 	vadd.f32	s3, s6, s12
 800e51c:	ee33 6a46 	vsub.f32	s12, s6, s12
 800e520:	ee33 3aef 	vsub.f32	s6, s7, s31
 800e524:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800e528:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800e52c:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800e530:	ee72 5a25 	vadd.f32	s11, s4, s11
 800e534:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800e538:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800e53c:	ee77 2a27 	vadd.f32	s5, s14, s15
 800e540:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e544:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800e548:	ee2c fa85 	vmul.f32	s30, s25, s10
 800e54c:	ee69 ea01 	vmul.f32	s29, s18, s2
 800e550:	ee29 5a05 	vmul.f32	s10, s18, s10
 800e554:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800e558:	ee6d faa1 	vmul.f32	s31, s27, s3
 800e55c:	ee70 0a20 	vadd.f32	s1, s0, s1
 800e560:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800e564:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800e568:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800e56c:	edc7 0a00 	vstr	s1, [r7]
 800e570:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800e574:	441f      	add	r7, r3
 800e576:	ee2a faa3 	vmul.f32	s30, s21, s7
 800e57a:	ee31 5a45 	vsub.f32	s10, s2, s10
 800e57e:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800e582:	edc2 ea00 	vstr	s29, [r2]
 800e586:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800e58a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e58e:	ed82 5a01 	vstr	s10, [r2, #4]
 800e592:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800e596:	edcd 3a01 	vstr	s7, [sp, #4]
 800e59a:	ed9d 5a03 	vldr	s10, [sp, #12]
 800e59e:	ee6b ea86 	vmul.f32	s29, s23, s12
 800e5a2:	eddd 3a02 	vldr	s7, [sp, #8]
 800e5a6:	ee6b fa24 	vmul.f32	s31, s22, s9
 800e5aa:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800e5ae:	ee65 4a24 	vmul.f32	s9, s10, s9
 800e5b2:	ed8c 3a00 	vstr	s6, [ip]
 800e5b6:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800e5ba:	ee23 6a86 	vmul.f32	s12, s7, s12
 800e5be:	eddd 3a01 	vldr	s7, [sp, #4]
 800e5c2:	ee25 5a25 	vmul.f32	s10, s10, s11
 800e5c6:	441a      	add	r2, r3
 800e5c8:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800e5cc:	449c      	add	ip, r3
 800e5ce:	ee68 1a04 	vmul.f32	s3, s16, s8
 800e5d2:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800e5d6:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800e5da:	ee29 faa7 	vmul.f32	s30, s19, s15
 800e5de:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800e5e2:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800e5e6:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800e5ea:	ee68 2a22 	vmul.f32	s5, s16, s5
 800e5ee:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800e5f2:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e5f6:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800e5fa:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e5fe:	ee7e ea81 	vadd.f32	s29, s29, s2
 800e602:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800e606:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800e60a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800e60e:	edc4 ea00 	vstr	s29, [r4]
 800e612:	ee30 0a21 	vadd.f32	s0, s0, s3
 800e616:	ed84 6a01 	vstr	s12, [r4, #4]
 800e61a:	ee74 2a62 	vsub.f32	s5, s8, s5
 800e61e:	edc1 0a00 	vstr	s1, [r1]
 800e622:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800e626:	edc1 3a01 	vstr	s7, [r1, #4]
 800e62a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e62e:	ed86 5a00 	vstr	s10, [r6]
 800e632:	edc6 4a01 	vstr	s9, [r6, #4]
 800e636:	4419      	add	r1, r3
 800e638:	ed80 0a00 	vstr	s0, [r0]
 800e63c:	441c      	add	r4, r3
 800e63e:	edc0 2a01 	vstr	s5, [r0, #4]
 800e642:	441e      	add	r6, r3
 800e644:	ed85 3a00 	vstr	s6, [r5]
 800e648:	4418      	add	r0, r3
 800e64a:	ed85 7a01 	vstr	s14, [r5, #4]
 800e64e:	441d      	add	r5, r3
 800e650:	f63f aee8 	bhi.w	800e424 <arm_radix8_butterfly_f32+0x300>
 800e654:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e656:	9a04      	ldr	r2, [sp, #16]
 800e658:	3108      	adds	r1, #8
 800e65a:	3201      	adds	r2, #1
 800e65c:	910c      	str	r1, [sp, #48]	; 0x30
 800e65e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e660:	9204      	str	r2, [sp, #16]
 800e662:	3108      	adds	r1, #8
 800e664:	910b      	str	r1, [sp, #44]	; 0x2c
 800e666:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e668:	3108      	adds	r1, #8
 800e66a:	910a      	str	r1, [sp, #40]	; 0x28
 800e66c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e66e:	3108      	adds	r1, #8
 800e670:	9109      	str	r1, [sp, #36]	; 0x24
 800e672:	9908      	ldr	r1, [sp, #32]
 800e674:	3108      	adds	r1, #8
 800e676:	9108      	str	r1, [sp, #32]
 800e678:	9907      	ldr	r1, [sp, #28]
 800e67a:	3108      	adds	r1, #8
 800e67c:	9107      	str	r1, [sp, #28]
 800e67e:	9906      	ldr	r1, [sp, #24]
 800e680:	3108      	adds	r1, #8
 800e682:	9106      	str	r1, [sp, #24]
 800e684:	9905      	ldr	r1, [sp, #20]
 800e686:	3108      	adds	r1, #8
 800e688:	9105      	str	r1, [sp, #20]
 800e68a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e68c:	4291      	cmp	r1, r2
 800e68e:	f47f ae74 	bne.w	800e37a <arm_radix8_butterfly_f32+0x256>
 800e692:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e694:	468b      	mov	fp, r1
 800e696:	00db      	lsls	r3, r3, #3
 800e698:	b29b      	uxth	r3, r3
 800e69a:	9310      	str	r3, [sp, #64]	; 0x40
 800e69c:	e551      	b.n	800e142 <arm_radix8_butterfly_f32+0x1e>
 800e69e:	b015      	add	sp, #84	; 0x54
 800e6a0:	ecbd 8b10 	vpop	{d8-d15}
 800e6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6a8 <__errno>:
 800e6a8:	4b01      	ldr	r3, [pc, #4]	; (800e6b0 <__errno+0x8>)
 800e6aa:	6818      	ldr	r0, [r3, #0]
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	24000378 	.word	0x24000378

0800e6b4 <__libc_init_array>:
 800e6b4:	b570      	push	{r4, r5, r6, lr}
 800e6b6:	4d0d      	ldr	r5, [pc, #52]	; (800e6ec <__libc_init_array+0x38>)
 800e6b8:	4c0d      	ldr	r4, [pc, #52]	; (800e6f0 <__libc_init_array+0x3c>)
 800e6ba:	1b64      	subs	r4, r4, r5
 800e6bc:	10a4      	asrs	r4, r4, #2
 800e6be:	2600      	movs	r6, #0
 800e6c0:	42a6      	cmp	r6, r4
 800e6c2:	d109      	bne.n	800e6d8 <__libc_init_array+0x24>
 800e6c4:	4d0b      	ldr	r5, [pc, #44]	; (800e6f4 <__libc_init_array+0x40>)
 800e6c6:	4c0c      	ldr	r4, [pc, #48]	; (800e6f8 <__libc_init_array+0x44>)
 800e6c8:	f003 ffa8 	bl	801261c <_init>
 800e6cc:	1b64      	subs	r4, r4, r5
 800e6ce:	10a4      	asrs	r4, r4, #2
 800e6d0:	2600      	movs	r6, #0
 800e6d2:	42a6      	cmp	r6, r4
 800e6d4:	d105      	bne.n	800e6e2 <__libc_init_array+0x2e>
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}
 800e6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6dc:	4798      	blx	r3
 800e6de:	3601      	adds	r6, #1
 800e6e0:	e7ee      	b.n	800e6c0 <__libc_init_array+0xc>
 800e6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6e6:	4798      	blx	r3
 800e6e8:	3601      	adds	r6, #1
 800e6ea:	e7f2      	b.n	800e6d2 <__libc_init_array+0x1e>
 800e6ec:	0801cd60 	.word	0x0801cd60
 800e6f0:	0801cd60 	.word	0x0801cd60
 800e6f4:	0801cd60 	.word	0x0801cd60
 800e6f8:	0801cd64 	.word	0x0801cd64

0800e6fc <memcpy>:
 800e6fc:	440a      	add	r2, r1
 800e6fe:	4291      	cmp	r1, r2
 800e700:	f100 33ff 	add.w	r3, r0, #4294967295
 800e704:	d100      	bne.n	800e708 <memcpy+0xc>
 800e706:	4770      	bx	lr
 800e708:	b510      	push	{r4, lr}
 800e70a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e70e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e712:	4291      	cmp	r1, r2
 800e714:	d1f9      	bne.n	800e70a <memcpy+0xe>
 800e716:	bd10      	pop	{r4, pc}

0800e718 <memset>:
 800e718:	4402      	add	r2, r0
 800e71a:	4603      	mov	r3, r0
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d100      	bne.n	800e722 <memset+0xa>
 800e720:	4770      	bx	lr
 800e722:	f803 1b01 	strb.w	r1, [r3], #1
 800e726:	e7f9      	b.n	800e71c <memset+0x4>

0800e728 <__cvt>:
 800e728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72a:	ed2d 8b02 	vpush	{d8}
 800e72e:	eeb0 8b40 	vmov.f64	d8, d0
 800e732:	b085      	sub	sp, #20
 800e734:	4617      	mov	r7, r2
 800e736:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e738:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e73a:	ee18 2a90 	vmov	r2, s17
 800e73e:	f025 0520 	bic.w	r5, r5, #32
 800e742:	2a00      	cmp	r2, #0
 800e744:	bfb6      	itet	lt
 800e746:	222d      	movlt	r2, #45	; 0x2d
 800e748:	2200      	movge	r2, #0
 800e74a:	eeb1 8b40 	vneglt.f64	d8, d0
 800e74e:	2d46      	cmp	r5, #70	; 0x46
 800e750:	460c      	mov	r4, r1
 800e752:	701a      	strb	r2, [r3, #0]
 800e754:	d004      	beq.n	800e760 <__cvt+0x38>
 800e756:	2d45      	cmp	r5, #69	; 0x45
 800e758:	d100      	bne.n	800e75c <__cvt+0x34>
 800e75a:	3401      	adds	r4, #1
 800e75c:	2102      	movs	r1, #2
 800e75e:	e000      	b.n	800e762 <__cvt+0x3a>
 800e760:	2103      	movs	r1, #3
 800e762:	ab03      	add	r3, sp, #12
 800e764:	9301      	str	r3, [sp, #4]
 800e766:	ab02      	add	r3, sp, #8
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	4622      	mov	r2, r4
 800e76c:	4633      	mov	r3, r6
 800e76e:	eeb0 0b48 	vmov.f64	d0, d8
 800e772:	f000 fce9 	bl	800f148 <_dtoa_r>
 800e776:	2d47      	cmp	r5, #71	; 0x47
 800e778:	d101      	bne.n	800e77e <__cvt+0x56>
 800e77a:	07fb      	lsls	r3, r7, #31
 800e77c:	d51a      	bpl.n	800e7b4 <__cvt+0x8c>
 800e77e:	2d46      	cmp	r5, #70	; 0x46
 800e780:	eb00 0204 	add.w	r2, r0, r4
 800e784:	d10c      	bne.n	800e7a0 <__cvt+0x78>
 800e786:	7803      	ldrb	r3, [r0, #0]
 800e788:	2b30      	cmp	r3, #48	; 0x30
 800e78a:	d107      	bne.n	800e79c <__cvt+0x74>
 800e78c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e794:	bf1c      	itt	ne
 800e796:	f1c4 0401 	rsbne	r4, r4, #1
 800e79a:	6034      	strne	r4, [r6, #0]
 800e79c:	6833      	ldr	r3, [r6, #0]
 800e79e:	441a      	add	r2, r3
 800e7a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a8:	bf08      	it	eq
 800e7aa:	9203      	streq	r2, [sp, #12]
 800e7ac:	2130      	movs	r1, #48	; 0x30
 800e7ae:	9b03      	ldr	r3, [sp, #12]
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d307      	bcc.n	800e7c4 <__cvt+0x9c>
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7b8:	1a1b      	subs	r3, r3, r0
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	b005      	add	sp, #20
 800e7be:	ecbd 8b02 	vpop	{d8}
 800e7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7c4:	1c5c      	adds	r4, r3, #1
 800e7c6:	9403      	str	r4, [sp, #12]
 800e7c8:	7019      	strb	r1, [r3, #0]
 800e7ca:	e7f0      	b.n	800e7ae <__cvt+0x86>

0800e7cc <__exponent>:
 800e7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2900      	cmp	r1, #0
 800e7d2:	bfb8      	it	lt
 800e7d4:	4249      	neglt	r1, r1
 800e7d6:	f803 2b02 	strb.w	r2, [r3], #2
 800e7da:	bfb4      	ite	lt
 800e7dc:	222d      	movlt	r2, #45	; 0x2d
 800e7de:	222b      	movge	r2, #43	; 0x2b
 800e7e0:	2909      	cmp	r1, #9
 800e7e2:	7042      	strb	r2, [r0, #1]
 800e7e4:	dd2a      	ble.n	800e83c <__exponent+0x70>
 800e7e6:	f10d 0407 	add.w	r4, sp, #7
 800e7ea:	46a4      	mov	ip, r4
 800e7ec:	270a      	movs	r7, #10
 800e7ee:	46a6      	mov	lr, r4
 800e7f0:	460a      	mov	r2, r1
 800e7f2:	fb91 f6f7 	sdiv	r6, r1, r7
 800e7f6:	fb07 1516 	mls	r5, r7, r6, r1
 800e7fa:	3530      	adds	r5, #48	; 0x30
 800e7fc:	2a63      	cmp	r2, #99	; 0x63
 800e7fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800e802:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e806:	4631      	mov	r1, r6
 800e808:	dcf1      	bgt.n	800e7ee <__exponent+0x22>
 800e80a:	3130      	adds	r1, #48	; 0x30
 800e80c:	f1ae 0502 	sub.w	r5, lr, #2
 800e810:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e814:	1c44      	adds	r4, r0, #1
 800e816:	4629      	mov	r1, r5
 800e818:	4561      	cmp	r1, ip
 800e81a:	d30a      	bcc.n	800e832 <__exponent+0x66>
 800e81c:	f10d 0209 	add.w	r2, sp, #9
 800e820:	eba2 020e 	sub.w	r2, r2, lr
 800e824:	4565      	cmp	r5, ip
 800e826:	bf88      	it	hi
 800e828:	2200      	movhi	r2, #0
 800e82a:	4413      	add	r3, r2
 800e82c:	1a18      	subs	r0, r3, r0
 800e82e:	b003      	add	sp, #12
 800e830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e836:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e83a:	e7ed      	b.n	800e818 <__exponent+0x4c>
 800e83c:	2330      	movs	r3, #48	; 0x30
 800e83e:	3130      	adds	r1, #48	; 0x30
 800e840:	7083      	strb	r3, [r0, #2]
 800e842:	70c1      	strb	r1, [r0, #3]
 800e844:	1d03      	adds	r3, r0, #4
 800e846:	e7f1      	b.n	800e82c <__exponent+0x60>

0800e848 <_printf_float>:
 800e848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e84c:	b08b      	sub	sp, #44	; 0x2c
 800e84e:	460c      	mov	r4, r1
 800e850:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e854:	4616      	mov	r6, r2
 800e856:	461f      	mov	r7, r3
 800e858:	4605      	mov	r5, r0
 800e85a:	f001 f9e3 	bl	800fc24 <_localeconv_r>
 800e85e:	f8d0 b000 	ldr.w	fp, [r0]
 800e862:	4658      	mov	r0, fp
 800e864:	f7f1 fd3c 	bl	80002e0 <strlen>
 800e868:	2300      	movs	r3, #0
 800e86a:	9308      	str	r3, [sp, #32]
 800e86c:	f8d8 3000 	ldr.w	r3, [r8]
 800e870:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e874:	6822      	ldr	r2, [r4, #0]
 800e876:	3307      	adds	r3, #7
 800e878:	f023 0307 	bic.w	r3, r3, #7
 800e87c:	f103 0108 	add.w	r1, r3, #8
 800e880:	f8c8 1000 	str.w	r1, [r8]
 800e884:	4682      	mov	sl, r0
 800e886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e88a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e88e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800eaf0 <_printf_float+0x2a8>
 800e892:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e896:	eeb0 6bc0 	vabs.f64	d6, d0
 800e89a:	eeb4 6b47 	vcmp.f64	d6, d7
 800e89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a2:	dd24      	ble.n	800e8ee <_printf_float+0xa6>
 800e8a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ac:	d502      	bpl.n	800e8b4 <_printf_float+0x6c>
 800e8ae:	232d      	movs	r3, #45	; 0x2d
 800e8b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8b4:	4b90      	ldr	r3, [pc, #576]	; (800eaf8 <_printf_float+0x2b0>)
 800e8b6:	4891      	ldr	r0, [pc, #580]	; (800eafc <_printf_float+0x2b4>)
 800e8b8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e8bc:	bf94      	ite	ls
 800e8be:	4698      	movls	r8, r3
 800e8c0:	4680      	movhi	r8, r0
 800e8c2:	2303      	movs	r3, #3
 800e8c4:	6123      	str	r3, [r4, #16]
 800e8c6:	f022 0204 	bic.w	r2, r2, #4
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	6022      	str	r2, [r4, #0]
 800e8ce:	9304      	str	r3, [sp, #16]
 800e8d0:	9700      	str	r7, [sp, #0]
 800e8d2:	4633      	mov	r3, r6
 800e8d4:	aa09      	add	r2, sp, #36	; 0x24
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	4628      	mov	r0, r5
 800e8da:	f000 f9d3 	bl	800ec84 <_printf_common>
 800e8de:	3001      	adds	r0, #1
 800e8e0:	f040 808a 	bne.w	800e9f8 <_printf_float+0x1b0>
 800e8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e8:	b00b      	add	sp, #44	; 0x2c
 800e8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ee:	eeb4 0b40 	vcmp.f64	d0, d0
 800e8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f6:	d709      	bvc.n	800e90c <_printf_float+0xc4>
 800e8f8:	ee10 3a90 	vmov	r3, s1
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	bfbc      	itt	lt
 800e900:	232d      	movlt	r3, #45	; 0x2d
 800e902:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e906:	487e      	ldr	r0, [pc, #504]	; (800eb00 <_printf_float+0x2b8>)
 800e908:	4b7e      	ldr	r3, [pc, #504]	; (800eb04 <_printf_float+0x2bc>)
 800e90a:	e7d5      	b.n	800e8b8 <_printf_float+0x70>
 800e90c:	6863      	ldr	r3, [r4, #4]
 800e90e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e912:	9104      	str	r1, [sp, #16]
 800e914:	1c59      	adds	r1, r3, #1
 800e916:	d13c      	bne.n	800e992 <_printf_float+0x14a>
 800e918:	2306      	movs	r3, #6
 800e91a:	6063      	str	r3, [r4, #4]
 800e91c:	2300      	movs	r3, #0
 800e91e:	9303      	str	r3, [sp, #12]
 800e920:	ab08      	add	r3, sp, #32
 800e922:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e926:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e92a:	ab07      	add	r3, sp, #28
 800e92c:	6861      	ldr	r1, [r4, #4]
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	6022      	str	r2, [r4, #0]
 800e932:	f10d 031b 	add.w	r3, sp, #27
 800e936:	4628      	mov	r0, r5
 800e938:	f7ff fef6 	bl	800e728 <__cvt>
 800e93c:	9b04      	ldr	r3, [sp, #16]
 800e93e:	9907      	ldr	r1, [sp, #28]
 800e940:	2b47      	cmp	r3, #71	; 0x47
 800e942:	4680      	mov	r8, r0
 800e944:	d108      	bne.n	800e958 <_printf_float+0x110>
 800e946:	1cc8      	adds	r0, r1, #3
 800e948:	db02      	blt.n	800e950 <_printf_float+0x108>
 800e94a:	6863      	ldr	r3, [r4, #4]
 800e94c:	4299      	cmp	r1, r3
 800e94e:	dd41      	ble.n	800e9d4 <_printf_float+0x18c>
 800e950:	f1a9 0902 	sub.w	r9, r9, #2
 800e954:	fa5f f989 	uxtb.w	r9, r9
 800e958:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e95c:	d820      	bhi.n	800e9a0 <_printf_float+0x158>
 800e95e:	3901      	subs	r1, #1
 800e960:	464a      	mov	r2, r9
 800e962:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e966:	9107      	str	r1, [sp, #28]
 800e968:	f7ff ff30 	bl	800e7cc <__exponent>
 800e96c:	9a08      	ldr	r2, [sp, #32]
 800e96e:	9004      	str	r0, [sp, #16]
 800e970:	1813      	adds	r3, r2, r0
 800e972:	2a01      	cmp	r2, #1
 800e974:	6123      	str	r3, [r4, #16]
 800e976:	dc02      	bgt.n	800e97e <_printf_float+0x136>
 800e978:	6822      	ldr	r2, [r4, #0]
 800e97a:	07d2      	lsls	r2, r2, #31
 800e97c:	d501      	bpl.n	800e982 <_printf_float+0x13a>
 800e97e:	3301      	adds	r3, #1
 800e980:	6123      	str	r3, [r4, #16]
 800e982:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d0a2      	beq.n	800e8d0 <_printf_float+0x88>
 800e98a:	232d      	movs	r3, #45	; 0x2d
 800e98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e990:	e79e      	b.n	800e8d0 <_printf_float+0x88>
 800e992:	9904      	ldr	r1, [sp, #16]
 800e994:	2947      	cmp	r1, #71	; 0x47
 800e996:	d1c1      	bne.n	800e91c <_printf_float+0xd4>
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1bf      	bne.n	800e91c <_printf_float+0xd4>
 800e99c:	2301      	movs	r3, #1
 800e99e:	e7bc      	b.n	800e91a <_printf_float+0xd2>
 800e9a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e9a4:	d118      	bne.n	800e9d8 <_printf_float+0x190>
 800e9a6:	2900      	cmp	r1, #0
 800e9a8:	6863      	ldr	r3, [r4, #4]
 800e9aa:	dd0b      	ble.n	800e9c4 <_printf_float+0x17c>
 800e9ac:	6121      	str	r1, [r4, #16]
 800e9ae:	b913      	cbnz	r3, 800e9b6 <_printf_float+0x16e>
 800e9b0:	6822      	ldr	r2, [r4, #0]
 800e9b2:	07d0      	lsls	r0, r2, #31
 800e9b4:	d502      	bpl.n	800e9bc <_printf_float+0x174>
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	440b      	add	r3, r1
 800e9ba:	6123      	str	r3, [r4, #16]
 800e9bc:	2300      	movs	r3, #0
 800e9be:	65a1      	str	r1, [r4, #88]	; 0x58
 800e9c0:	9304      	str	r3, [sp, #16]
 800e9c2:	e7de      	b.n	800e982 <_printf_float+0x13a>
 800e9c4:	b913      	cbnz	r3, 800e9cc <_printf_float+0x184>
 800e9c6:	6822      	ldr	r2, [r4, #0]
 800e9c8:	07d2      	lsls	r2, r2, #31
 800e9ca:	d501      	bpl.n	800e9d0 <_printf_float+0x188>
 800e9cc:	3302      	adds	r3, #2
 800e9ce:	e7f4      	b.n	800e9ba <_printf_float+0x172>
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e7f2      	b.n	800e9ba <_printf_float+0x172>
 800e9d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e9d8:	9b08      	ldr	r3, [sp, #32]
 800e9da:	4299      	cmp	r1, r3
 800e9dc:	db05      	blt.n	800e9ea <_printf_float+0x1a2>
 800e9de:	6823      	ldr	r3, [r4, #0]
 800e9e0:	6121      	str	r1, [r4, #16]
 800e9e2:	07d8      	lsls	r0, r3, #31
 800e9e4:	d5ea      	bpl.n	800e9bc <_printf_float+0x174>
 800e9e6:	1c4b      	adds	r3, r1, #1
 800e9e8:	e7e7      	b.n	800e9ba <_printf_float+0x172>
 800e9ea:	2900      	cmp	r1, #0
 800e9ec:	bfd4      	ite	le
 800e9ee:	f1c1 0202 	rsble	r2, r1, #2
 800e9f2:	2201      	movgt	r2, #1
 800e9f4:	4413      	add	r3, r2
 800e9f6:	e7e0      	b.n	800e9ba <_printf_float+0x172>
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	055a      	lsls	r2, r3, #21
 800e9fc:	d407      	bmi.n	800ea0e <_printf_float+0x1c6>
 800e9fe:	6923      	ldr	r3, [r4, #16]
 800ea00:	4642      	mov	r2, r8
 800ea02:	4631      	mov	r1, r6
 800ea04:	4628      	mov	r0, r5
 800ea06:	47b8      	blx	r7
 800ea08:	3001      	adds	r0, #1
 800ea0a:	d12a      	bne.n	800ea62 <_printf_float+0x21a>
 800ea0c:	e76a      	b.n	800e8e4 <_printf_float+0x9c>
 800ea0e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ea12:	f240 80e2 	bls.w	800ebda <_printf_float+0x392>
 800ea16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ea1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea22:	d133      	bne.n	800ea8c <_printf_float+0x244>
 800ea24:	4a38      	ldr	r2, [pc, #224]	; (800eb08 <_printf_float+0x2c0>)
 800ea26:	2301      	movs	r3, #1
 800ea28:	4631      	mov	r1, r6
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	47b8      	blx	r7
 800ea2e:	3001      	adds	r0, #1
 800ea30:	f43f af58 	beq.w	800e8e4 <_printf_float+0x9c>
 800ea34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	db02      	blt.n	800ea42 <_printf_float+0x1fa>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	07d8      	lsls	r0, r3, #31
 800ea40:	d50f      	bpl.n	800ea62 <_printf_float+0x21a>
 800ea42:	4653      	mov	r3, sl
 800ea44:	465a      	mov	r2, fp
 800ea46:	4631      	mov	r1, r6
 800ea48:	4628      	mov	r0, r5
 800ea4a:	47b8      	blx	r7
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	f43f af49 	beq.w	800e8e4 <_printf_float+0x9c>
 800ea52:	f04f 0800 	mov.w	r8, #0
 800ea56:	f104 091a 	add.w	r9, r4, #26
 800ea5a:	9b08      	ldr	r3, [sp, #32]
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	4543      	cmp	r3, r8
 800ea60:	dc09      	bgt.n	800ea76 <_printf_float+0x22e>
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	079b      	lsls	r3, r3, #30
 800ea66:	f100 8108 	bmi.w	800ec7a <_printf_float+0x432>
 800ea6a:	68e0      	ldr	r0, [r4, #12]
 800ea6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea6e:	4298      	cmp	r0, r3
 800ea70:	bfb8      	it	lt
 800ea72:	4618      	movlt	r0, r3
 800ea74:	e738      	b.n	800e8e8 <_printf_float+0xa0>
 800ea76:	2301      	movs	r3, #1
 800ea78:	464a      	mov	r2, r9
 800ea7a:	4631      	mov	r1, r6
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	47b8      	blx	r7
 800ea80:	3001      	adds	r0, #1
 800ea82:	f43f af2f 	beq.w	800e8e4 <_printf_float+0x9c>
 800ea86:	f108 0801 	add.w	r8, r8, #1
 800ea8a:	e7e6      	b.n	800ea5a <_printf_float+0x212>
 800ea8c:	9b07      	ldr	r3, [sp, #28]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	dc3c      	bgt.n	800eb0c <_printf_float+0x2c4>
 800ea92:	4a1d      	ldr	r2, [pc, #116]	; (800eb08 <_printf_float+0x2c0>)
 800ea94:	2301      	movs	r3, #1
 800ea96:	4631      	mov	r1, r6
 800ea98:	4628      	mov	r0, r5
 800ea9a:	47b8      	blx	r7
 800ea9c:	3001      	adds	r0, #1
 800ea9e:	f43f af21 	beq.w	800e8e4 <_printf_float+0x9c>
 800eaa2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	d102      	bne.n	800eab0 <_printf_float+0x268>
 800eaaa:	6823      	ldr	r3, [r4, #0]
 800eaac:	07d9      	lsls	r1, r3, #31
 800eaae:	d5d8      	bpl.n	800ea62 <_printf_float+0x21a>
 800eab0:	4653      	mov	r3, sl
 800eab2:	465a      	mov	r2, fp
 800eab4:	4631      	mov	r1, r6
 800eab6:	4628      	mov	r0, r5
 800eab8:	47b8      	blx	r7
 800eaba:	3001      	adds	r0, #1
 800eabc:	f43f af12 	beq.w	800e8e4 <_printf_float+0x9c>
 800eac0:	f04f 0900 	mov.w	r9, #0
 800eac4:	f104 0a1a 	add.w	sl, r4, #26
 800eac8:	9b07      	ldr	r3, [sp, #28]
 800eaca:	425b      	negs	r3, r3
 800eacc:	454b      	cmp	r3, r9
 800eace:	dc01      	bgt.n	800ead4 <_printf_float+0x28c>
 800ead0:	9b08      	ldr	r3, [sp, #32]
 800ead2:	e795      	b.n	800ea00 <_printf_float+0x1b8>
 800ead4:	2301      	movs	r3, #1
 800ead6:	4652      	mov	r2, sl
 800ead8:	4631      	mov	r1, r6
 800eada:	4628      	mov	r0, r5
 800eadc:	47b8      	blx	r7
 800eade:	3001      	adds	r0, #1
 800eae0:	f43f af00 	beq.w	800e8e4 <_printf_float+0x9c>
 800eae4:	f109 0901 	add.w	r9, r9, #1
 800eae8:	e7ee      	b.n	800eac8 <_printf_float+0x280>
 800eaea:	bf00      	nop
 800eaec:	f3af 8000 	nop.w
 800eaf0:	ffffffff 	.word	0xffffffff
 800eaf4:	7fefffff 	.word	0x7fefffff
 800eaf8:	0801b6a8 	.word	0x0801b6a8
 800eafc:	0801b6ac 	.word	0x0801b6ac
 800eb00:	0801b6b4 	.word	0x0801b6b4
 800eb04:	0801b6b0 	.word	0x0801b6b0
 800eb08:	0801b6b8 	.word	0x0801b6b8
 800eb0c:	9a08      	ldr	r2, [sp, #32]
 800eb0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb10:	429a      	cmp	r2, r3
 800eb12:	bfa8      	it	ge
 800eb14:	461a      	movge	r2, r3
 800eb16:	2a00      	cmp	r2, #0
 800eb18:	4691      	mov	r9, r2
 800eb1a:	dc38      	bgt.n	800eb8e <_printf_float+0x346>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	9305      	str	r3, [sp, #20]
 800eb20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb24:	f104 021a 	add.w	r2, r4, #26
 800eb28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb2a:	9905      	ldr	r1, [sp, #20]
 800eb2c:	9304      	str	r3, [sp, #16]
 800eb2e:	eba3 0309 	sub.w	r3, r3, r9
 800eb32:	428b      	cmp	r3, r1
 800eb34:	dc33      	bgt.n	800eb9e <_printf_float+0x356>
 800eb36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	db3c      	blt.n	800ebb8 <_printf_float+0x370>
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	07da      	lsls	r2, r3, #31
 800eb42:	d439      	bmi.n	800ebb8 <_printf_float+0x370>
 800eb44:	9b08      	ldr	r3, [sp, #32]
 800eb46:	9a04      	ldr	r2, [sp, #16]
 800eb48:	9907      	ldr	r1, [sp, #28]
 800eb4a:	1a9a      	subs	r2, r3, r2
 800eb4c:	eba3 0901 	sub.w	r9, r3, r1
 800eb50:	4591      	cmp	r9, r2
 800eb52:	bfa8      	it	ge
 800eb54:	4691      	movge	r9, r2
 800eb56:	f1b9 0f00 	cmp.w	r9, #0
 800eb5a:	dc35      	bgt.n	800ebc8 <_printf_float+0x380>
 800eb5c:	f04f 0800 	mov.w	r8, #0
 800eb60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb64:	f104 0a1a 	add.w	sl, r4, #26
 800eb68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eb6c:	1a9b      	subs	r3, r3, r2
 800eb6e:	eba3 0309 	sub.w	r3, r3, r9
 800eb72:	4543      	cmp	r3, r8
 800eb74:	f77f af75 	ble.w	800ea62 <_printf_float+0x21a>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	4652      	mov	r2, sl
 800eb7c:	4631      	mov	r1, r6
 800eb7e:	4628      	mov	r0, r5
 800eb80:	47b8      	blx	r7
 800eb82:	3001      	adds	r0, #1
 800eb84:	f43f aeae 	beq.w	800e8e4 <_printf_float+0x9c>
 800eb88:	f108 0801 	add.w	r8, r8, #1
 800eb8c:	e7ec      	b.n	800eb68 <_printf_float+0x320>
 800eb8e:	4613      	mov	r3, r2
 800eb90:	4631      	mov	r1, r6
 800eb92:	4642      	mov	r2, r8
 800eb94:	4628      	mov	r0, r5
 800eb96:	47b8      	blx	r7
 800eb98:	3001      	adds	r0, #1
 800eb9a:	d1bf      	bne.n	800eb1c <_printf_float+0x2d4>
 800eb9c:	e6a2      	b.n	800e8e4 <_printf_float+0x9c>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	4631      	mov	r1, r6
 800eba2:	4628      	mov	r0, r5
 800eba4:	9204      	str	r2, [sp, #16]
 800eba6:	47b8      	blx	r7
 800eba8:	3001      	adds	r0, #1
 800ebaa:	f43f ae9b 	beq.w	800e8e4 <_printf_float+0x9c>
 800ebae:	9b05      	ldr	r3, [sp, #20]
 800ebb0:	9a04      	ldr	r2, [sp, #16]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	9305      	str	r3, [sp, #20]
 800ebb6:	e7b7      	b.n	800eb28 <_printf_float+0x2e0>
 800ebb8:	4653      	mov	r3, sl
 800ebba:	465a      	mov	r2, fp
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	47b8      	blx	r7
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	d1be      	bne.n	800eb44 <_printf_float+0x2fc>
 800ebc6:	e68d      	b.n	800e8e4 <_printf_float+0x9c>
 800ebc8:	9a04      	ldr	r2, [sp, #16]
 800ebca:	464b      	mov	r3, r9
 800ebcc:	4442      	add	r2, r8
 800ebce:	4631      	mov	r1, r6
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	47b8      	blx	r7
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d1c1      	bne.n	800eb5c <_printf_float+0x314>
 800ebd8:	e684      	b.n	800e8e4 <_printf_float+0x9c>
 800ebda:	9a08      	ldr	r2, [sp, #32]
 800ebdc:	2a01      	cmp	r2, #1
 800ebde:	dc01      	bgt.n	800ebe4 <_printf_float+0x39c>
 800ebe0:	07db      	lsls	r3, r3, #31
 800ebe2:	d537      	bpl.n	800ec54 <_printf_float+0x40c>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	4642      	mov	r2, r8
 800ebe8:	4631      	mov	r1, r6
 800ebea:	4628      	mov	r0, r5
 800ebec:	47b8      	blx	r7
 800ebee:	3001      	adds	r0, #1
 800ebf0:	f43f ae78 	beq.w	800e8e4 <_printf_float+0x9c>
 800ebf4:	4653      	mov	r3, sl
 800ebf6:	465a      	mov	r2, fp
 800ebf8:	4631      	mov	r1, r6
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	47b8      	blx	r7
 800ebfe:	3001      	adds	r0, #1
 800ec00:	f43f ae70 	beq.w	800e8e4 <_printf_float+0x9c>
 800ec04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ec08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec10:	d01b      	beq.n	800ec4a <_printf_float+0x402>
 800ec12:	9b08      	ldr	r3, [sp, #32]
 800ec14:	f108 0201 	add.w	r2, r8, #1
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	4631      	mov	r1, r6
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	47b8      	blx	r7
 800ec20:	3001      	adds	r0, #1
 800ec22:	d10e      	bne.n	800ec42 <_printf_float+0x3fa>
 800ec24:	e65e      	b.n	800e8e4 <_printf_float+0x9c>
 800ec26:	2301      	movs	r3, #1
 800ec28:	464a      	mov	r2, r9
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	47b8      	blx	r7
 800ec30:	3001      	adds	r0, #1
 800ec32:	f43f ae57 	beq.w	800e8e4 <_printf_float+0x9c>
 800ec36:	f108 0801 	add.w	r8, r8, #1
 800ec3a:	9b08      	ldr	r3, [sp, #32]
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	4543      	cmp	r3, r8
 800ec40:	dcf1      	bgt.n	800ec26 <_printf_float+0x3de>
 800ec42:	9b04      	ldr	r3, [sp, #16]
 800ec44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec48:	e6db      	b.n	800ea02 <_printf_float+0x1ba>
 800ec4a:	f04f 0800 	mov.w	r8, #0
 800ec4e:	f104 091a 	add.w	r9, r4, #26
 800ec52:	e7f2      	b.n	800ec3a <_printf_float+0x3f2>
 800ec54:	2301      	movs	r3, #1
 800ec56:	4642      	mov	r2, r8
 800ec58:	e7df      	b.n	800ec1a <_printf_float+0x3d2>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	464a      	mov	r2, r9
 800ec5e:	4631      	mov	r1, r6
 800ec60:	4628      	mov	r0, r5
 800ec62:	47b8      	blx	r7
 800ec64:	3001      	adds	r0, #1
 800ec66:	f43f ae3d 	beq.w	800e8e4 <_printf_float+0x9c>
 800ec6a:	f108 0801 	add.w	r8, r8, #1
 800ec6e:	68e3      	ldr	r3, [r4, #12]
 800ec70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec72:	1a5b      	subs	r3, r3, r1
 800ec74:	4543      	cmp	r3, r8
 800ec76:	dcf0      	bgt.n	800ec5a <_printf_float+0x412>
 800ec78:	e6f7      	b.n	800ea6a <_printf_float+0x222>
 800ec7a:	f04f 0800 	mov.w	r8, #0
 800ec7e:	f104 0919 	add.w	r9, r4, #25
 800ec82:	e7f4      	b.n	800ec6e <_printf_float+0x426>

0800ec84 <_printf_common>:
 800ec84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec88:	4616      	mov	r6, r2
 800ec8a:	4699      	mov	r9, r3
 800ec8c:	688a      	ldr	r2, [r1, #8]
 800ec8e:	690b      	ldr	r3, [r1, #16]
 800ec90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec94:	4293      	cmp	r3, r2
 800ec96:	bfb8      	it	lt
 800ec98:	4613      	movlt	r3, r2
 800ec9a:	6033      	str	r3, [r6, #0]
 800ec9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eca0:	4607      	mov	r7, r0
 800eca2:	460c      	mov	r4, r1
 800eca4:	b10a      	cbz	r2, 800ecaa <_printf_common+0x26>
 800eca6:	3301      	adds	r3, #1
 800eca8:	6033      	str	r3, [r6, #0]
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	0699      	lsls	r1, r3, #26
 800ecae:	bf42      	ittt	mi
 800ecb0:	6833      	ldrmi	r3, [r6, #0]
 800ecb2:	3302      	addmi	r3, #2
 800ecb4:	6033      	strmi	r3, [r6, #0]
 800ecb6:	6825      	ldr	r5, [r4, #0]
 800ecb8:	f015 0506 	ands.w	r5, r5, #6
 800ecbc:	d106      	bne.n	800eccc <_printf_common+0x48>
 800ecbe:	f104 0a19 	add.w	sl, r4, #25
 800ecc2:	68e3      	ldr	r3, [r4, #12]
 800ecc4:	6832      	ldr	r2, [r6, #0]
 800ecc6:	1a9b      	subs	r3, r3, r2
 800ecc8:	42ab      	cmp	r3, r5
 800ecca:	dc26      	bgt.n	800ed1a <_printf_common+0x96>
 800eccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecd0:	1e13      	subs	r3, r2, #0
 800ecd2:	6822      	ldr	r2, [r4, #0]
 800ecd4:	bf18      	it	ne
 800ecd6:	2301      	movne	r3, #1
 800ecd8:	0692      	lsls	r2, r2, #26
 800ecda:	d42b      	bmi.n	800ed34 <_printf_common+0xb0>
 800ecdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ece0:	4649      	mov	r1, r9
 800ece2:	4638      	mov	r0, r7
 800ece4:	47c0      	blx	r8
 800ece6:	3001      	adds	r0, #1
 800ece8:	d01e      	beq.n	800ed28 <_printf_common+0xa4>
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	68e5      	ldr	r5, [r4, #12]
 800ecee:	6832      	ldr	r2, [r6, #0]
 800ecf0:	f003 0306 	and.w	r3, r3, #6
 800ecf4:	2b04      	cmp	r3, #4
 800ecf6:	bf08      	it	eq
 800ecf8:	1aad      	subeq	r5, r5, r2
 800ecfa:	68a3      	ldr	r3, [r4, #8]
 800ecfc:	6922      	ldr	r2, [r4, #16]
 800ecfe:	bf0c      	ite	eq
 800ed00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed04:	2500      	movne	r5, #0
 800ed06:	4293      	cmp	r3, r2
 800ed08:	bfc4      	itt	gt
 800ed0a:	1a9b      	subgt	r3, r3, r2
 800ed0c:	18ed      	addgt	r5, r5, r3
 800ed0e:	2600      	movs	r6, #0
 800ed10:	341a      	adds	r4, #26
 800ed12:	42b5      	cmp	r5, r6
 800ed14:	d11a      	bne.n	800ed4c <_printf_common+0xc8>
 800ed16:	2000      	movs	r0, #0
 800ed18:	e008      	b.n	800ed2c <_printf_common+0xa8>
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	4652      	mov	r2, sl
 800ed1e:	4649      	mov	r1, r9
 800ed20:	4638      	mov	r0, r7
 800ed22:	47c0      	blx	r8
 800ed24:	3001      	adds	r0, #1
 800ed26:	d103      	bne.n	800ed30 <_printf_common+0xac>
 800ed28:	f04f 30ff 	mov.w	r0, #4294967295
 800ed2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed30:	3501      	adds	r5, #1
 800ed32:	e7c6      	b.n	800ecc2 <_printf_common+0x3e>
 800ed34:	18e1      	adds	r1, r4, r3
 800ed36:	1c5a      	adds	r2, r3, #1
 800ed38:	2030      	movs	r0, #48	; 0x30
 800ed3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed3e:	4422      	add	r2, r4
 800ed40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed48:	3302      	adds	r3, #2
 800ed4a:	e7c7      	b.n	800ecdc <_printf_common+0x58>
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	4622      	mov	r2, r4
 800ed50:	4649      	mov	r1, r9
 800ed52:	4638      	mov	r0, r7
 800ed54:	47c0      	blx	r8
 800ed56:	3001      	adds	r0, #1
 800ed58:	d0e6      	beq.n	800ed28 <_printf_common+0xa4>
 800ed5a:	3601      	adds	r6, #1
 800ed5c:	e7d9      	b.n	800ed12 <_printf_common+0x8e>
	...

0800ed60 <_printf_i>:
 800ed60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed64:	7e0f      	ldrb	r7, [r1, #24]
 800ed66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed68:	2f78      	cmp	r7, #120	; 0x78
 800ed6a:	4691      	mov	r9, r2
 800ed6c:	4680      	mov	r8, r0
 800ed6e:	460c      	mov	r4, r1
 800ed70:	469a      	mov	sl, r3
 800ed72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed76:	d807      	bhi.n	800ed88 <_printf_i+0x28>
 800ed78:	2f62      	cmp	r7, #98	; 0x62
 800ed7a:	d80a      	bhi.n	800ed92 <_printf_i+0x32>
 800ed7c:	2f00      	cmp	r7, #0
 800ed7e:	f000 80d8 	beq.w	800ef32 <_printf_i+0x1d2>
 800ed82:	2f58      	cmp	r7, #88	; 0x58
 800ed84:	f000 80a3 	beq.w	800eece <_printf_i+0x16e>
 800ed88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed90:	e03a      	b.n	800ee08 <_printf_i+0xa8>
 800ed92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed96:	2b15      	cmp	r3, #21
 800ed98:	d8f6      	bhi.n	800ed88 <_printf_i+0x28>
 800ed9a:	a101      	add	r1, pc, #4	; (adr r1, 800eda0 <_printf_i+0x40>)
 800ed9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eda0:	0800edf9 	.word	0x0800edf9
 800eda4:	0800ee0d 	.word	0x0800ee0d
 800eda8:	0800ed89 	.word	0x0800ed89
 800edac:	0800ed89 	.word	0x0800ed89
 800edb0:	0800ed89 	.word	0x0800ed89
 800edb4:	0800ed89 	.word	0x0800ed89
 800edb8:	0800ee0d 	.word	0x0800ee0d
 800edbc:	0800ed89 	.word	0x0800ed89
 800edc0:	0800ed89 	.word	0x0800ed89
 800edc4:	0800ed89 	.word	0x0800ed89
 800edc8:	0800ed89 	.word	0x0800ed89
 800edcc:	0800ef19 	.word	0x0800ef19
 800edd0:	0800ee3d 	.word	0x0800ee3d
 800edd4:	0800eefb 	.word	0x0800eefb
 800edd8:	0800ed89 	.word	0x0800ed89
 800eddc:	0800ed89 	.word	0x0800ed89
 800ede0:	0800ef3b 	.word	0x0800ef3b
 800ede4:	0800ed89 	.word	0x0800ed89
 800ede8:	0800ee3d 	.word	0x0800ee3d
 800edec:	0800ed89 	.word	0x0800ed89
 800edf0:	0800ed89 	.word	0x0800ed89
 800edf4:	0800ef03 	.word	0x0800ef03
 800edf8:	682b      	ldr	r3, [r5, #0]
 800edfa:	1d1a      	adds	r2, r3, #4
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	602a      	str	r2, [r5, #0]
 800ee00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e0a3      	b.n	800ef54 <_printf_i+0x1f4>
 800ee0c:	6820      	ldr	r0, [r4, #0]
 800ee0e:	6829      	ldr	r1, [r5, #0]
 800ee10:	0606      	lsls	r6, r0, #24
 800ee12:	f101 0304 	add.w	r3, r1, #4
 800ee16:	d50a      	bpl.n	800ee2e <_printf_i+0xce>
 800ee18:	680e      	ldr	r6, [r1, #0]
 800ee1a:	602b      	str	r3, [r5, #0]
 800ee1c:	2e00      	cmp	r6, #0
 800ee1e:	da03      	bge.n	800ee28 <_printf_i+0xc8>
 800ee20:	232d      	movs	r3, #45	; 0x2d
 800ee22:	4276      	negs	r6, r6
 800ee24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee28:	485e      	ldr	r0, [pc, #376]	; (800efa4 <_printf_i+0x244>)
 800ee2a:	230a      	movs	r3, #10
 800ee2c:	e019      	b.n	800ee62 <_printf_i+0x102>
 800ee2e:	680e      	ldr	r6, [r1, #0]
 800ee30:	602b      	str	r3, [r5, #0]
 800ee32:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee36:	bf18      	it	ne
 800ee38:	b236      	sxthne	r6, r6
 800ee3a:	e7ef      	b.n	800ee1c <_printf_i+0xbc>
 800ee3c:	682b      	ldr	r3, [r5, #0]
 800ee3e:	6820      	ldr	r0, [r4, #0]
 800ee40:	1d19      	adds	r1, r3, #4
 800ee42:	6029      	str	r1, [r5, #0]
 800ee44:	0601      	lsls	r1, r0, #24
 800ee46:	d501      	bpl.n	800ee4c <_printf_i+0xec>
 800ee48:	681e      	ldr	r6, [r3, #0]
 800ee4a:	e002      	b.n	800ee52 <_printf_i+0xf2>
 800ee4c:	0646      	lsls	r6, r0, #25
 800ee4e:	d5fb      	bpl.n	800ee48 <_printf_i+0xe8>
 800ee50:	881e      	ldrh	r6, [r3, #0]
 800ee52:	4854      	ldr	r0, [pc, #336]	; (800efa4 <_printf_i+0x244>)
 800ee54:	2f6f      	cmp	r7, #111	; 0x6f
 800ee56:	bf0c      	ite	eq
 800ee58:	2308      	moveq	r3, #8
 800ee5a:	230a      	movne	r3, #10
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee62:	6865      	ldr	r5, [r4, #4]
 800ee64:	60a5      	str	r5, [r4, #8]
 800ee66:	2d00      	cmp	r5, #0
 800ee68:	bfa2      	ittt	ge
 800ee6a:	6821      	ldrge	r1, [r4, #0]
 800ee6c:	f021 0104 	bicge.w	r1, r1, #4
 800ee70:	6021      	strge	r1, [r4, #0]
 800ee72:	b90e      	cbnz	r6, 800ee78 <_printf_i+0x118>
 800ee74:	2d00      	cmp	r5, #0
 800ee76:	d04d      	beq.n	800ef14 <_printf_i+0x1b4>
 800ee78:	4615      	mov	r5, r2
 800ee7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee7e:	fb03 6711 	mls	r7, r3, r1, r6
 800ee82:	5dc7      	ldrb	r7, [r0, r7]
 800ee84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee88:	4637      	mov	r7, r6
 800ee8a:	42bb      	cmp	r3, r7
 800ee8c:	460e      	mov	r6, r1
 800ee8e:	d9f4      	bls.n	800ee7a <_printf_i+0x11a>
 800ee90:	2b08      	cmp	r3, #8
 800ee92:	d10b      	bne.n	800eeac <_printf_i+0x14c>
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	07de      	lsls	r6, r3, #31
 800ee98:	d508      	bpl.n	800eeac <_printf_i+0x14c>
 800ee9a:	6923      	ldr	r3, [r4, #16]
 800ee9c:	6861      	ldr	r1, [r4, #4]
 800ee9e:	4299      	cmp	r1, r3
 800eea0:	bfde      	ittt	le
 800eea2:	2330      	movle	r3, #48	; 0x30
 800eea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eea8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eeac:	1b52      	subs	r2, r2, r5
 800eeae:	6122      	str	r2, [r4, #16]
 800eeb0:	f8cd a000 	str.w	sl, [sp]
 800eeb4:	464b      	mov	r3, r9
 800eeb6:	aa03      	add	r2, sp, #12
 800eeb8:	4621      	mov	r1, r4
 800eeba:	4640      	mov	r0, r8
 800eebc:	f7ff fee2 	bl	800ec84 <_printf_common>
 800eec0:	3001      	adds	r0, #1
 800eec2:	d14c      	bne.n	800ef5e <_printf_i+0x1fe>
 800eec4:	f04f 30ff 	mov.w	r0, #4294967295
 800eec8:	b004      	add	sp, #16
 800eeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eece:	4835      	ldr	r0, [pc, #212]	; (800efa4 <_printf_i+0x244>)
 800eed0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eed4:	6829      	ldr	r1, [r5, #0]
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	f851 6b04 	ldr.w	r6, [r1], #4
 800eedc:	6029      	str	r1, [r5, #0]
 800eede:	061d      	lsls	r5, r3, #24
 800eee0:	d514      	bpl.n	800ef0c <_printf_i+0x1ac>
 800eee2:	07df      	lsls	r7, r3, #31
 800eee4:	bf44      	itt	mi
 800eee6:	f043 0320 	orrmi.w	r3, r3, #32
 800eeea:	6023      	strmi	r3, [r4, #0]
 800eeec:	b91e      	cbnz	r6, 800eef6 <_printf_i+0x196>
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	f023 0320 	bic.w	r3, r3, #32
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	2310      	movs	r3, #16
 800eef8:	e7b0      	b.n	800ee5c <_printf_i+0xfc>
 800eefa:	6823      	ldr	r3, [r4, #0]
 800eefc:	f043 0320 	orr.w	r3, r3, #32
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	2378      	movs	r3, #120	; 0x78
 800ef04:	4828      	ldr	r0, [pc, #160]	; (800efa8 <_printf_i+0x248>)
 800ef06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef0a:	e7e3      	b.n	800eed4 <_printf_i+0x174>
 800ef0c:	0659      	lsls	r1, r3, #25
 800ef0e:	bf48      	it	mi
 800ef10:	b2b6      	uxthmi	r6, r6
 800ef12:	e7e6      	b.n	800eee2 <_printf_i+0x182>
 800ef14:	4615      	mov	r5, r2
 800ef16:	e7bb      	b.n	800ee90 <_printf_i+0x130>
 800ef18:	682b      	ldr	r3, [r5, #0]
 800ef1a:	6826      	ldr	r6, [r4, #0]
 800ef1c:	6961      	ldr	r1, [r4, #20]
 800ef1e:	1d18      	adds	r0, r3, #4
 800ef20:	6028      	str	r0, [r5, #0]
 800ef22:	0635      	lsls	r5, r6, #24
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	d501      	bpl.n	800ef2c <_printf_i+0x1cc>
 800ef28:	6019      	str	r1, [r3, #0]
 800ef2a:	e002      	b.n	800ef32 <_printf_i+0x1d2>
 800ef2c:	0670      	lsls	r0, r6, #25
 800ef2e:	d5fb      	bpl.n	800ef28 <_printf_i+0x1c8>
 800ef30:	8019      	strh	r1, [r3, #0]
 800ef32:	2300      	movs	r3, #0
 800ef34:	6123      	str	r3, [r4, #16]
 800ef36:	4615      	mov	r5, r2
 800ef38:	e7ba      	b.n	800eeb0 <_printf_i+0x150>
 800ef3a:	682b      	ldr	r3, [r5, #0]
 800ef3c:	1d1a      	adds	r2, r3, #4
 800ef3e:	602a      	str	r2, [r5, #0]
 800ef40:	681d      	ldr	r5, [r3, #0]
 800ef42:	6862      	ldr	r2, [r4, #4]
 800ef44:	2100      	movs	r1, #0
 800ef46:	4628      	mov	r0, r5
 800ef48:	f7f1 f9d2 	bl	80002f0 <memchr>
 800ef4c:	b108      	cbz	r0, 800ef52 <_printf_i+0x1f2>
 800ef4e:	1b40      	subs	r0, r0, r5
 800ef50:	6060      	str	r0, [r4, #4]
 800ef52:	6863      	ldr	r3, [r4, #4]
 800ef54:	6123      	str	r3, [r4, #16]
 800ef56:	2300      	movs	r3, #0
 800ef58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef5c:	e7a8      	b.n	800eeb0 <_printf_i+0x150>
 800ef5e:	6923      	ldr	r3, [r4, #16]
 800ef60:	462a      	mov	r2, r5
 800ef62:	4649      	mov	r1, r9
 800ef64:	4640      	mov	r0, r8
 800ef66:	47d0      	blx	sl
 800ef68:	3001      	adds	r0, #1
 800ef6a:	d0ab      	beq.n	800eec4 <_printf_i+0x164>
 800ef6c:	6823      	ldr	r3, [r4, #0]
 800ef6e:	079b      	lsls	r3, r3, #30
 800ef70:	d413      	bmi.n	800ef9a <_printf_i+0x23a>
 800ef72:	68e0      	ldr	r0, [r4, #12]
 800ef74:	9b03      	ldr	r3, [sp, #12]
 800ef76:	4298      	cmp	r0, r3
 800ef78:	bfb8      	it	lt
 800ef7a:	4618      	movlt	r0, r3
 800ef7c:	e7a4      	b.n	800eec8 <_printf_i+0x168>
 800ef7e:	2301      	movs	r3, #1
 800ef80:	4632      	mov	r2, r6
 800ef82:	4649      	mov	r1, r9
 800ef84:	4640      	mov	r0, r8
 800ef86:	47d0      	blx	sl
 800ef88:	3001      	adds	r0, #1
 800ef8a:	d09b      	beq.n	800eec4 <_printf_i+0x164>
 800ef8c:	3501      	adds	r5, #1
 800ef8e:	68e3      	ldr	r3, [r4, #12]
 800ef90:	9903      	ldr	r1, [sp, #12]
 800ef92:	1a5b      	subs	r3, r3, r1
 800ef94:	42ab      	cmp	r3, r5
 800ef96:	dcf2      	bgt.n	800ef7e <_printf_i+0x21e>
 800ef98:	e7eb      	b.n	800ef72 <_printf_i+0x212>
 800ef9a:	2500      	movs	r5, #0
 800ef9c:	f104 0619 	add.w	r6, r4, #25
 800efa0:	e7f5      	b.n	800ef8e <_printf_i+0x22e>
 800efa2:	bf00      	nop
 800efa4:	0801b6ba 	.word	0x0801b6ba
 800efa8:	0801b6cb 	.word	0x0801b6cb

0800efac <siprintf>:
 800efac:	b40e      	push	{r1, r2, r3}
 800efae:	b500      	push	{lr}
 800efb0:	b09c      	sub	sp, #112	; 0x70
 800efb2:	ab1d      	add	r3, sp, #116	; 0x74
 800efb4:	9002      	str	r0, [sp, #8]
 800efb6:	9006      	str	r0, [sp, #24]
 800efb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efbc:	4809      	ldr	r0, [pc, #36]	; (800efe4 <siprintf+0x38>)
 800efbe:	9107      	str	r1, [sp, #28]
 800efc0:	9104      	str	r1, [sp, #16]
 800efc2:	4909      	ldr	r1, [pc, #36]	; (800efe8 <siprintf+0x3c>)
 800efc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc8:	9105      	str	r1, [sp, #20]
 800efca:	6800      	ldr	r0, [r0, #0]
 800efcc:	9301      	str	r3, [sp, #4]
 800efce:	a902      	add	r1, sp, #8
 800efd0:	f001 fb0a 	bl	80105e8 <_svfiprintf_r>
 800efd4:	9b02      	ldr	r3, [sp, #8]
 800efd6:	2200      	movs	r2, #0
 800efd8:	701a      	strb	r2, [r3, #0]
 800efda:	b01c      	add	sp, #112	; 0x70
 800efdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800efe0:	b003      	add	sp, #12
 800efe2:	4770      	bx	lr
 800efe4:	24000378 	.word	0x24000378
 800efe8:	ffff0208 	.word	0xffff0208

0800efec <stpcpy>:
 800efec:	4603      	mov	r3, r0
 800efee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eff2:	4618      	mov	r0, r3
 800eff4:	f803 2b01 	strb.w	r2, [r3], #1
 800eff8:	2a00      	cmp	r2, #0
 800effa:	d1f8      	bne.n	800efee <stpcpy+0x2>
 800effc:	4770      	bx	lr

0800effe <strcat>:
 800effe:	b510      	push	{r4, lr}
 800f000:	4602      	mov	r2, r0
 800f002:	7814      	ldrb	r4, [r2, #0]
 800f004:	4613      	mov	r3, r2
 800f006:	3201      	adds	r2, #1
 800f008:	2c00      	cmp	r4, #0
 800f00a:	d1fa      	bne.n	800f002 <strcat+0x4>
 800f00c:	3b01      	subs	r3, #1
 800f00e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f012:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f016:	2a00      	cmp	r2, #0
 800f018:	d1f9      	bne.n	800f00e <strcat+0x10>
 800f01a:	bd10      	pop	{r4, pc}

0800f01c <strcpy>:
 800f01c:	4603      	mov	r3, r0
 800f01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f022:	f803 2b01 	strb.w	r2, [r3], #1
 800f026:	2a00      	cmp	r2, #0
 800f028:	d1f9      	bne.n	800f01e <strcpy+0x2>
 800f02a:	4770      	bx	lr

0800f02c <quorem>:
 800f02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f030:	6903      	ldr	r3, [r0, #16]
 800f032:	690c      	ldr	r4, [r1, #16]
 800f034:	42a3      	cmp	r3, r4
 800f036:	4607      	mov	r7, r0
 800f038:	f2c0 8081 	blt.w	800f13e <quorem+0x112>
 800f03c:	3c01      	subs	r4, #1
 800f03e:	f101 0814 	add.w	r8, r1, #20
 800f042:	f100 0514 	add.w	r5, r0, #20
 800f046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f04a:	9301      	str	r3, [sp, #4]
 800f04c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f054:	3301      	adds	r3, #1
 800f056:	429a      	cmp	r2, r3
 800f058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f05c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f060:	fbb2 f6f3 	udiv	r6, r2, r3
 800f064:	d331      	bcc.n	800f0ca <quorem+0x9e>
 800f066:	f04f 0e00 	mov.w	lr, #0
 800f06a:	4640      	mov	r0, r8
 800f06c:	46ac      	mov	ip, r5
 800f06e:	46f2      	mov	sl, lr
 800f070:	f850 2b04 	ldr.w	r2, [r0], #4
 800f074:	b293      	uxth	r3, r2
 800f076:	fb06 e303 	mla	r3, r6, r3, lr
 800f07a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f07e:	b29b      	uxth	r3, r3
 800f080:	ebaa 0303 	sub.w	r3, sl, r3
 800f084:	f8dc a000 	ldr.w	sl, [ip]
 800f088:	0c12      	lsrs	r2, r2, #16
 800f08a:	fa13 f38a 	uxtah	r3, r3, sl
 800f08e:	fb06 e202 	mla	r2, r6, r2, lr
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	9b00      	ldr	r3, [sp, #0]
 800f096:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f09a:	b292      	uxth	r2, r2
 800f09c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f0a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800f0a8:	4581      	cmp	r9, r0
 800f0aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0ae:	f84c 3b04 	str.w	r3, [ip], #4
 800f0b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f0b6:	d2db      	bcs.n	800f070 <quorem+0x44>
 800f0b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800f0bc:	b92b      	cbnz	r3, 800f0ca <quorem+0x9e>
 800f0be:	9b01      	ldr	r3, [sp, #4]
 800f0c0:	3b04      	subs	r3, #4
 800f0c2:	429d      	cmp	r5, r3
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	d32e      	bcc.n	800f126 <quorem+0xfa>
 800f0c8:	613c      	str	r4, [r7, #16]
 800f0ca:	4638      	mov	r0, r7
 800f0cc:	f001 f838 	bl	8010140 <__mcmp>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	db24      	blt.n	800f11e <quorem+0xf2>
 800f0d4:	3601      	adds	r6, #1
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	f04f 0c00 	mov.w	ip, #0
 800f0dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800f0e0:	f8d0 e000 	ldr.w	lr, [r0]
 800f0e4:	b293      	uxth	r3, r2
 800f0e6:	ebac 0303 	sub.w	r3, ip, r3
 800f0ea:	0c12      	lsrs	r2, r2, #16
 800f0ec:	fa13 f38e 	uxtah	r3, r3, lr
 800f0f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f0f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0fe:	45c1      	cmp	r9, r8
 800f100:	f840 3b04 	str.w	r3, [r0], #4
 800f104:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f108:	d2e8      	bcs.n	800f0dc <quorem+0xb0>
 800f10a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f10e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f112:	b922      	cbnz	r2, 800f11e <quorem+0xf2>
 800f114:	3b04      	subs	r3, #4
 800f116:	429d      	cmp	r5, r3
 800f118:	461a      	mov	r2, r3
 800f11a:	d30a      	bcc.n	800f132 <quorem+0x106>
 800f11c:	613c      	str	r4, [r7, #16]
 800f11e:	4630      	mov	r0, r6
 800f120:	b003      	add	sp, #12
 800f122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f126:	6812      	ldr	r2, [r2, #0]
 800f128:	3b04      	subs	r3, #4
 800f12a:	2a00      	cmp	r2, #0
 800f12c:	d1cc      	bne.n	800f0c8 <quorem+0x9c>
 800f12e:	3c01      	subs	r4, #1
 800f130:	e7c7      	b.n	800f0c2 <quorem+0x96>
 800f132:	6812      	ldr	r2, [r2, #0]
 800f134:	3b04      	subs	r3, #4
 800f136:	2a00      	cmp	r2, #0
 800f138:	d1f0      	bne.n	800f11c <quorem+0xf0>
 800f13a:	3c01      	subs	r4, #1
 800f13c:	e7eb      	b.n	800f116 <quorem+0xea>
 800f13e:	2000      	movs	r0, #0
 800f140:	e7ee      	b.n	800f120 <quorem+0xf4>
 800f142:	0000      	movs	r0, r0
 800f144:	0000      	movs	r0, r0
	...

0800f148 <_dtoa_r>:
 800f148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14c:	ed2d 8b02 	vpush	{d8}
 800f150:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f152:	b091      	sub	sp, #68	; 0x44
 800f154:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f158:	ec59 8b10 	vmov	r8, r9, d0
 800f15c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f15e:	9106      	str	r1, [sp, #24]
 800f160:	4606      	mov	r6, r0
 800f162:	9208      	str	r2, [sp, #32]
 800f164:	930c      	str	r3, [sp, #48]	; 0x30
 800f166:	b975      	cbnz	r5, 800f186 <_dtoa_r+0x3e>
 800f168:	2010      	movs	r0, #16
 800f16a:	f000 fd5f 	bl	800fc2c <malloc>
 800f16e:	4602      	mov	r2, r0
 800f170:	6270      	str	r0, [r6, #36]	; 0x24
 800f172:	b920      	cbnz	r0, 800f17e <_dtoa_r+0x36>
 800f174:	4baa      	ldr	r3, [pc, #680]	; (800f420 <_dtoa_r+0x2d8>)
 800f176:	21ea      	movs	r1, #234	; 0xea
 800f178:	48aa      	ldr	r0, [pc, #680]	; (800f424 <_dtoa_r+0x2dc>)
 800f17a:	f001 fb45 	bl	8010808 <__assert_func>
 800f17e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f182:	6005      	str	r5, [r0, #0]
 800f184:	60c5      	str	r5, [r0, #12]
 800f186:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f188:	6819      	ldr	r1, [r3, #0]
 800f18a:	b151      	cbz	r1, 800f1a2 <_dtoa_r+0x5a>
 800f18c:	685a      	ldr	r2, [r3, #4]
 800f18e:	604a      	str	r2, [r1, #4]
 800f190:	2301      	movs	r3, #1
 800f192:	4093      	lsls	r3, r2
 800f194:	608b      	str	r3, [r1, #8]
 800f196:	4630      	mov	r0, r6
 800f198:	f000 fd90 	bl	800fcbc <_Bfree>
 800f19c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f19e:	2200      	movs	r2, #0
 800f1a0:	601a      	str	r2, [r3, #0]
 800f1a2:	f1b9 0300 	subs.w	r3, r9, #0
 800f1a6:	bfbb      	ittet	lt
 800f1a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f1ac:	9303      	strlt	r3, [sp, #12]
 800f1ae:	2300      	movge	r3, #0
 800f1b0:	2201      	movlt	r2, #1
 800f1b2:	bfac      	ite	ge
 800f1b4:	6023      	strge	r3, [r4, #0]
 800f1b6:	6022      	strlt	r2, [r4, #0]
 800f1b8:	4b9b      	ldr	r3, [pc, #620]	; (800f428 <_dtoa_r+0x2e0>)
 800f1ba:	9c03      	ldr	r4, [sp, #12]
 800f1bc:	43a3      	bics	r3, r4
 800f1be:	d11c      	bne.n	800f1fa <_dtoa_r+0xb2>
 800f1c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f1c6:	6013      	str	r3, [r2, #0]
 800f1c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f1cc:	ea53 0308 	orrs.w	r3, r3, r8
 800f1d0:	f000 84fd 	beq.w	800fbce <_dtoa_r+0xa86>
 800f1d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f1d6:	b963      	cbnz	r3, 800f1f2 <_dtoa_r+0xaa>
 800f1d8:	4b94      	ldr	r3, [pc, #592]	; (800f42c <_dtoa_r+0x2e4>)
 800f1da:	e01f      	b.n	800f21c <_dtoa_r+0xd4>
 800f1dc:	4b94      	ldr	r3, [pc, #592]	; (800f430 <_dtoa_r+0x2e8>)
 800f1de:	9301      	str	r3, [sp, #4]
 800f1e0:	3308      	adds	r3, #8
 800f1e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f1e4:	6013      	str	r3, [r2, #0]
 800f1e6:	9801      	ldr	r0, [sp, #4]
 800f1e8:	b011      	add	sp, #68	; 0x44
 800f1ea:	ecbd 8b02 	vpop	{d8}
 800f1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f2:	4b8e      	ldr	r3, [pc, #568]	; (800f42c <_dtoa_r+0x2e4>)
 800f1f4:	9301      	str	r3, [sp, #4]
 800f1f6:	3303      	adds	r3, #3
 800f1f8:	e7f3      	b.n	800f1e2 <_dtoa_r+0x9a>
 800f1fa:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f1fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f206:	d10b      	bne.n	800f220 <_dtoa_r+0xd8>
 800f208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f20a:	2301      	movs	r3, #1
 800f20c:	6013      	str	r3, [r2, #0]
 800f20e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f210:	2b00      	cmp	r3, #0
 800f212:	f000 84d9 	beq.w	800fbc8 <_dtoa_r+0xa80>
 800f216:	4887      	ldr	r0, [pc, #540]	; (800f434 <_dtoa_r+0x2ec>)
 800f218:	6018      	str	r0, [r3, #0]
 800f21a:	1e43      	subs	r3, r0, #1
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	e7e2      	b.n	800f1e6 <_dtoa_r+0x9e>
 800f220:	a90f      	add	r1, sp, #60	; 0x3c
 800f222:	aa0e      	add	r2, sp, #56	; 0x38
 800f224:	4630      	mov	r0, r6
 800f226:	eeb0 0b48 	vmov.f64	d0, d8
 800f22a:	f001 f82f 	bl	801028c <__d2b>
 800f22e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f232:	4605      	mov	r5, r0
 800f234:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f236:	2900      	cmp	r1, #0
 800f238:	d046      	beq.n	800f2c8 <_dtoa_r+0x180>
 800f23a:	ee18 4a90 	vmov	r4, s17
 800f23e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f242:	ec53 2b18 	vmov	r2, r3, d8
 800f246:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f24a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f24e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f252:	2400      	movs	r4, #0
 800f254:	ec43 2b16 	vmov	d6, r2, r3
 800f258:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f25c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f408 <_dtoa_r+0x2c0>
 800f260:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f264:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800f410 <_dtoa_r+0x2c8>
 800f268:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f26c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f418 <_dtoa_r+0x2d0>
 800f270:	ee07 1a90 	vmov	s15, r1
 800f274:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f278:	eeb0 7b46 	vmov.f64	d7, d6
 800f27c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f280:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f284:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f28c:	ee16 ba90 	vmov	fp, s13
 800f290:	940a      	str	r4, [sp, #40]	; 0x28
 800f292:	d508      	bpl.n	800f2a6 <_dtoa_r+0x15e>
 800f294:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f298:	eeb4 6b47 	vcmp.f64	d6, d7
 800f29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2a0:	bf18      	it	ne
 800f2a2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f2a6:	f1bb 0f16 	cmp.w	fp, #22
 800f2aa:	d82f      	bhi.n	800f30c <_dtoa_r+0x1c4>
 800f2ac:	4b62      	ldr	r3, [pc, #392]	; (800f438 <_dtoa_r+0x2f0>)
 800f2ae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f2b2:	ed93 7b00 	vldr	d7, [r3]
 800f2b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2be:	d501      	bpl.n	800f2c4 <_dtoa_r+0x17c>
 800f2c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	e022      	b.n	800f30e <_dtoa_r+0x1c6>
 800f2c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f2ca:	4401      	add	r1, r0
 800f2cc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f2d0:	2b20      	cmp	r3, #32
 800f2d2:	bfc1      	itttt	gt
 800f2d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2d8:	fa04 f303 	lslgt.w	r3, r4, r3
 800f2dc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f2e0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f2e4:	bfd6      	itet	le
 800f2e6:	f1c3 0320 	rsble	r3, r3, #32
 800f2ea:	ea43 0808 	orrgt.w	r8, r3, r8
 800f2ee:	fa08 f803 	lslle.w	r8, r8, r3
 800f2f2:	ee07 8a90 	vmov	s15, r8
 800f2f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f2fa:	3901      	subs	r1, #1
 800f2fc:	ee17 4a90 	vmov	r4, s15
 800f300:	ec53 2b17 	vmov	r2, r3, d7
 800f304:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f308:	2401      	movs	r4, #1
 800f30a:	e7a3      	b.n	800f254 <_dtoa_r+0x10c>
 800f30c:	2301      	movs	r3, #1
 800f30e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f310:	1a43      	subs	r3, r0, r1
 800f312:	1e5a      	subs	r2, r3, #1
 800f314:	bf45      	ittet	mi
 800f316:	f1c3 0301 	rsbmi	r3, r3, #1
 800f31a:	9304      	strmi	r3, [sp, #16]
 800f31c:	2300      	movpl	r3, #0
 800f31e:	2300      	movmi	r3, #0
 800f320:	9205      	str	r2, [sp, #20]
 800f322:	bf54      	ite	pl
 800f324:	9304      	strpl	r3, [sp, #16]
 800f326:	9305      	strmi	r3, [sp, #20]
 800f328:	f1bb 0f00 	cmp.w	fp, #0
 800f32c:	db18      	blt.n	800f360 <_dtoa_r+0x218>
 800f32e:	9b05      	ldr	r3, [sp, #20]
 800f330:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f334:	445b      	add	r3, fp
 800f336:	9305      	str	r3, [sp, #20]
 800f338:	2300      	movs	r3, #0
 800f33a:	9a06      	ldr	r2, [sp, #24]
 800f33c:	2a09      	cmp	r2, #9
 800f33e:	d849      	bhi.n	800f3d4 <_dtoa_r+0x28c>
 800f340:	2a05      	cmp	r2, #5
 800f342:	bfc4      	itt	gt
 800f344:	3a04      	subgt	r2, #4
 800f346:	9206      	strgt	r2, [sp, #24]
 800f348:	9a06      	ldr	r2, [sp, #24]
 800f34a:	f1a2 0202 	sub.w	r2, r2, #2
 800f34e:	bfcc      	ite	gt
 800f350:	2400      	movgt	r4, #0
 800f352:	2401      	movle	r4, #1
 800f354:	2a03      	cmp	r2, #3
 800f356:	d848      	bhi.n	800f3ea <_dtoa_r+0x2a2>
 800f358:	e8df f002 	tbb	[pc, r2]
 800f35c:	3a2c2e0b 	.word	0x3a2c2e0b
 800f360:	9b04      	ldr	r3, [sp, #16]
 800f362:	2200      	movs	r2, #0
 800f364:	eba3 030b 	sub.w	r3, r3, fp
 800f368:	9304      	str	r3, [sp, #16]
 800f36a:	9209      	str	r2, [sp, #36]	; 0x24
 800f36c:	f1cb 0300 	rsb	r3, fp, #0
 800f370:	e7e3      	b.n	800f33a <_dtoa_r+0x1f2>
 800f372:	2200      	movs	r2, #0
 800f374:	9207      	str	r2, [sp, #28]
 800f376:	9a08      	ldr	r2, [sp, #32]
 800f378:	2a00      	cmp	r2, #0
 800f37a:	dc39      	bgt.n	800f3f0 <_dtoa_r+0x2a8>
 800f37c:	f04f 0a01 	mov.w	sl, #1
 800f380:	46d1      	mov	r9, sl
 800f382:	4652      	mov	r2, sl
 800f384:	f8cd a020 	str.w	sl, [sp, #32]
 800f388:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f38a:	2100      	movs	r1, #0
 800f38c:	6079      	str	r1, [r7, #4]
 800f38e:	2004      	movs	r0, #4
 800f390:	f100 0c14 	add.w	ip, r0, #20
 800f394:	4594      	cmp	ip, r2
 800f396:	6879      	ldr	r1, [r7, #4]
 800f398:	d92f      	bls.n	800f3fa <_dtoa_r+0x2b2>
 800f39a:	4630      	mov	r0, r6
 800f39c:	930d      	str	r3, [sp, #52]	; 0x34
 800f39e:	f000 fc4d 	bl	800fc3c <_Balloc>
 800f3a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3a4:	9001      	str	r0, [sp, #4]
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d149      	bne.n	800f440 <_dtoa_r+0x2f8>
 800f3ac:	4b23      	ldr	r3, [pc, #140]	; (800f43c <_dtoa_r+0x2f4>)
 800f3ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f3b2:	e6e1      	b.n	800f178 <_dtoa_r+0x30>
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	e7dd      	b.n	800f374 <_dtoa_r+0x22c>
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	9207      	str	r2, [sp, #28]
 800f3bc:	9a08      	ldr	r2, [sp, #32]
 800f3be:	eb0b 0a02 	add.w	sl, fp, r2
 800f3c2:	f10a 0901 	add.w	r9, sl, #1
 800f3c6:	464a      	mov	r2, r9
 800f3c8:	2a01      	cmp	r2, #1
 800f3ca:	bfb8      	it	lt
 800f3cc:	2201      	movlt	r2, #1
 800f3ce:	e7db      	b.n	800f388 <_dtoa_r+0x240>
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	e7f2      	b.n	800f3ba <_dtoa_r+0x272>
 800f3d4:	2401      	movs	r4, #1
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f3dc:	f04f 3aff 	mov.w	sl, #4294967295
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	46d1      	mov	r9, sl
 800f3e4:	2212      	movs	r2, #18
 800f3e6:	9108      	str	r1, [sp, #32]
 800f3e8:	e7ce      	b.n	800f388 <_dtoa_r+0x240>
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	9207      	str	r2, [sp, #28]
 800f3ee:	e7f5      	b.n	800f3dc <_dtoa_r+0x294>
 800f3f0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f3f4:	46d1      	mov	r9, sl
 800f3f6:	4652      	mov	r2, sl
 800f3f8:	e7c6      	b.n	800f388 <_dtoa_r+0x240>
 800f3fa:	3101      	adds	r1, #1
 800f3fc:	6079      	str	r1, [r7, #4]
 800f3fe:	0040      	lsls	r0, r0, #1
 800f400:	e7c6      	b.n	800f390 <_dtoa_r+0x248>
 800f402:	bf00      	nop
 800f404:	f3af 8000 	nop.w
 800f408:	636f4361 	.word	0x636f4361
 800f40c:	3fd287a7 	.word	0x3fd287a7
 800f410:	8b60c8b3 	.word	0x8b60c8b3
 800f414:	3fc68a28 	.word	0x3fc68a28
 800f418:	509f79fb 	.word	0x509f79fb
 800f41c:	3fd34413 	.word	0x3fd34413
 800f420:	0801b6e9 	.word	0x0801b6e9
 800f424:	0801b700 	.word	0x0801b700
 800f428:	7ff00000 	.word	0x7ff00000
 800f42c:	0801b6e5 	.word	0x0801b6e5
 800f430:	0801b6dc 	.word	0x0801b6dc
 800f434:	0801b6b9 	.word	0x0801b6b9
 800f438:	0801b7f0 	.word	0x0801b7f0
 800f43c:	0801b75b 	.word	0x0801b75b
 800f440:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f442:	9901      	ldr	r1, [sp, #4]
 800f444:	6011      	str	r1, [r2, #0]
 800f446:	f1b9 0f0e 	cmp.w	r9, #14
 800f44a:	d86c      	bhi.n	800f526 <_dtoa_r+0x3de>
 800f44c:	2c00      	cmp	r4, #0
 800f44e:	d06a      	beq.n	800f526 <_dtoa_r+0x3de>
 800f450:	f1bb 0f00 	cmp.w	fp, #0
 800f454:	f340 80a0 	ble.w	800f598 <_dtoa_r+0x450>
 800f458:	49c1      	ldr	r1, [pc, #772]	; (800f760 <_dtoa_r+0x618>)
 800f45a:	f00b 020f 	and.w	r2, fp, #15
 800f45e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f462:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f466:	ed92 7b00 	vldr	d7, [r2]
 800f46a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f46e:	f000 8087 	beq.w	800f580 <_dtoa_r+0x438>
 800f472:	4abc      	ldr	r2, [pc, #752]	; (800f764 <_dtoa_r+0x61c>)
 800f474:	ed92 6b08 	vldr	d6, [r2, #32]
 800f478:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f47c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f480:	f001 010f 	and.w	r1, r1, #15
 800f484:	2203      	movs	r2, #3
 800f486:	48b7      	ldr	r0, [pc, #732]	; (800f764 <_dtoa_r+0x61c>)
 800f488:	2900      	cmp	r1, #0
 800f48a:	d17b      	bne.n	800f584 <_dtoa_r+0x43c>
 800f48c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f490:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f494:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f49a:	2900      	cmp	r1, #0
 800f49c:	f000 80a2 	beq.w	800f5e4 <_dtoa_r+0x49c>
 800f4a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f4a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b0:	f140 8098 	bpl.w	800f5e4 <_dtoa_r+0x49c>
 800f4b4:	f1b9 0f00 	cmp.w	r9, #0
 800f4b8:	f000 8094 	beq.w	800f5e4 <_dtoa_r+0x49c>
 800f4bc:	f1ba 0f00 	cmp.w	sl, #0
 800f4c0:	dd2f      	ble.n	800f522 <_dtoa_r+0x3da>
 800f4c2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f4c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f4ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f4ce:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f4d2:	3201      	adds	r2, #1
 800f4d4:	4650      	mov	r0, sl
 800f4d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f4da:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f4de:	ee07 2a90 	vmov	s15, r2
 800f4e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f4e6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f4ea:	ee15 4a90 	vmov	r4, s11
 800f4ee:	ec52 1b15 	vmov	r1, r2, d5
 800f4f2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d177      	bne.n	800f5ea <_dtoa_r+0x4a2>
 800f4fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f4fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f502:	ec42 1b17 	vmov	d7, r1, r2
 800f506:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50e:	f300 8263 	bgt.w	800f9d8 <_dtoa_r+0x890>
 800f512:	eeb1 7b47 	vneg.f64	d7, d7
 800f516:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51e:	f100 8258 	bmi.w	800f9d2 <_dtoa_r+0x88a>
 800f522:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f528:	2a00      	cmp	r2, #0
 800f52a:	f2c0 811d 	blt.w	800f768 <_dtoa_r+0x620>
 800f52e:	f1bb 0f0e 	cmp.w	fp, #14
 800f532:	f300 8119 	bgt.w	800f768 <_dtoa_r+0x620>
 800f536:	4b8a      	ldr	r3, [pc, #552]	; (800f760 <_dtoa_r+0x618>)
 800f538:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f53c:	ed93 6b00 	vldr	d6, [r3]
 800f540:	9b08      	ldr	r3, [sp, #32]
 800f542:	2b00      	cmp	r3, #0
 800f544:	f280 80b7 	bge.w	800f6b6 <_dtoa_r+0x56e>
 800f548:	f1b9 0f00 	cmp.w	r9, #0
 800f54c:	f300 80b3 	bgt.w	800f6b6 <_dtoa_r+0x56e>
 800f550:	f040 823f 	bne.w	800f9d2 <_dtoa_r+0x88a>
 800f554:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f558:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f55c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f560:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f568:	464c      	mov	r4, r9
 800f56a:	464f      	mov	r7, r9
 800f56c:	f280 8215 	bge.w	800f99a <_dtoa_r+0x852>
 800f570:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f574:	2331      	movs	r3, #49	; 0x31
 800f576:	f808 3b01 	strb.w	r3, [r8], #1
 800f57a:	f10b 0b01 	add.w	fp, fp, #1
 800f57e:	e211      	b.n	800f9a4 <_dtoa_r+0x85c>
 800f580:	2202      	movs	r2, #2
 800f582:	e780      	b.n	800f486 <_dtoa_r+0x33e>
 800f584:	07cc      	lsls	r4, r1, #31
 800f586:	d504      	bpl.n	800f592 <_dtoa_r+0x44a>
 800f588:	ed90 6b00 	vldr	d6, [r0]
 800f58c:	3201      	adds	r2, #1
 800f58e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f592:	1049      	asrs	r1, r1, #1
 800f594:	3008      	adds	r0, #8
 800f596:	e777      	b.n	800f488 <_dtoa_r+0x340>
 800f598:	d022      	beq.n	800f5e0 <_dtoa_r+0x498>
 800f59a:	f1cb 0100 	rsb	r1, fp, #0
 800f59e:	4a70      	ldr	r2, [pc, #448]	; (800f760 <_dtoa_r+0x618>)
 800f5a0:	f001 000f 	and.w	r0, r1, #15
 800f5a4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f5a8:	ed92 7b00 	vldr	d7, [r2]
 800f5ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f5b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f5b4:	486b      	ldr	r0, [pc, #428]	; (800f764 <_dtoa_r+0x61c>)
 800f5b6:	1109      	asrs	r1, r1, #4
 800f5b8:	2400      	movs	r4, #0
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	b929      	cbnz	r1, 800f5ca <_dtoa_r+0x482>
 800f5be:	2c00      	cmp	r4, #0
 800f5c0:	f43f af6a 	beq.w	800f498 <_dtoa_r+0x350>
 800f5c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f5c8:	e766      	b.n	800f498 <_dtoa_r+0x350>
 800f5ca:	07cf      	lsls	r7, r1, #31
 800f5cc:	d505      	bpl.n	800f5da <_dtoa_r+0x492>
 800f5ce:	ed90 6b00 	vldr	d6, [r0]
 800f5d2:	3201      	adds	r2, #1
 800f5d4:	2401      	movs	r4, #1
 800f5d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f5da:	1049      	asrs	r1, r1, #1
 800f5dc:	3008      	adds	r0, #8
 800f5de:	e7ed      	b.n	800f5bc <_dtoa_r+0x474>
 800f5e0:	2202      	movs	r2, #2
 800f5e2:	e759      	b.n	800f498 <_dtoa_r+0x350>
 800f5e4:	465f      	mov	r7, fp
 800f5e6:	4648      	mov	r0, r9
 800f5e8:	e775      	b.n	800f4d6 <_dtoa_r+0x38e>
 800f5ea:	ec42 1b17 	vmov	d7, r1, r2
 800f5ee:	4a5c      	ldr	r2, [pc, #368]	; (800f760 <_dtoa_r+0x618>)
 800f5f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f5f4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f5f8:	9a01      	ldr	r2, [sp, #4]
 800f5fa:	1814      	adds	r4, r2, r0
 800f5fc:	9a07      	ldr	r2, [sp, #28]
 800f5fe:	b352      	cbz	r2, 800f656 <_dtoa_r+0x50e>
 800f600:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f604:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f608:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f60c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f610:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f614:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f618:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f61c:	ee14 2a90 	vmov	r2, s9
 800f620:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f624:	3230      	adds	r2, #48	; 0x30
 800f626:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f62a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f632:	f808 2b01 	strb.w	r2, [r8], #1
 800f636:	d439      	bmi.n	800f6ac <_dtoa_r+0x564>
 800f638:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f63c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f644:	d472      	bmi.n	800f72c <_dtoa_r+0x5e4>
 800f646:	45a0      	cmp	r8, r4
 800f648:	f43f af6b 	beq.w	800f522 <_dtoa_r+0x3da>
 800f64c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f650:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f654:	e7e0      	b.n	800f618 <_dtoa_r+0x4d0>
 800f656:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f65a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f65e:	4621      	mov	r1, r4
 800f660:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f664:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f668:	ee14 2a90 	vmov	r2, s9
 800f66c:	3230      	adds	r2, #48	; 0x30
 800f66e:	f808 2b01 	strb.w	r2, [r8], #1
 800f672:	45a0      	cmp	r8, r4
 800f674:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f678:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f67c:	d118      	bne.n	800f6b0 <_dtoa_r+0x568>
 800f67e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f682:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f686:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68e:	dc4d      	bgt.n	800f72c <_dtoa_r+0x5e4>
 800f690:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f694:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69c:	f57f af41 	bpl.w	800f522 <_dtoa_r+0x3da>
 800f6a0:	4688      	mov	r8, r1
 800f6a2:	3901      	subs	r1, #1
 800f6a4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f6a8:	2b30      	cmp	r3, #48	; 0x30
 800f6aa:	d0f9      	beq.n	800f6a0 <_dtoa_r+0x558>
 800f6ac:	46bb      	mov	fp, r7
 800f6ae:	e02a      	b.n	800f706 <_dtoa_r+0x5be>
 800f6b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f6b4:	e7d6      	b.n	800f664 <_dtoa_r+0x51c>
 800f6b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f6ba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f6be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f6c2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f6c6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f6ca:	ee15 3a10 	vmov	r3, s10
 800f6ce:	3330      	adds	r3, #48	; 0x30
 800f6d0:	f808 3b01 	strb.w	r3, [r8], #1
 800f6d4:	9b01      	ldr	r3, [sp, #4]
 800f6d6:	eba8 0303 	sub.w	r3, r8, r3
 800f6da:	4599      	cmp	r9, r3
 800f6dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f6e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f6e4:	d133      	bne.n	800f74e <_dtoa_r+0x606>
 800f6e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f6ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f2:	dc1a      	bgt.n	800f72a <_dtoa_r+0x5e2>
 800f6f4:	eeb4 7b46 	vcmp.f64	d7, d6
 800f6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6fc:	d103      	bne.n	800f706 <_dtoa_r+0x5be>
 800f6fe:	ee15 3a10 	vmov	r3, s10
 800f702:	07d9      	lsls	r1, r3, #31
 800f704:	d411      	bmi.n	800f72a <_dtoa_r+0x5e2>
 800f706:	4629      	mov	r1, r5
 800f708:	4630      	mov	r0, r6
 800f70a:	f000 fad7 	bl	800fcbc <_Bfree>
 800f70e:	2300      	movs	r3, #0
 800f710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f712:	f888 3000 	strb.w	r3, [r8]
 800f716:	f10b 0301 	add.w	r3, fp, #1
 800f71a:	6013      	str	r3, [r2, #0]
 800f71c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f43f ad61 	beq.w	800f1e6 <_dtoa_r+0x9e>
 800f724:	f8c3 8000 	str.w	r8, [r3]
 800f728:	e55d      	b.n	800f1e6 <_dtoa_r+0x9e>
 800f72a:	465f      	mov	r7, fp
 800f72c:	4643      	mov	r3, r8
 800f72e:	4698      	mov	r8, r3
 800f730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f734:	2a39      	cmp	r2, #57	; 0x39
 800f736:	d106      	bne.n	800f746 <_dtoa_r+0x5fe>
 800f738:	9a01      	ldr	r2, [sp, #4]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d1f7      	bne.n	800f72e <_dtoa_r+0x5e6>
 800f73e:	9901      	ldr	r1, [sp, #4]
 800f740:	2230      	movs	r2, #48	; 0x30
 800f742:	3701      	adds	r7, #1
 800f744:	700a      	strb	r2, [r1, #0]
 800f746:	781a      	ldrb	r2, [r3, #0]
 800f748:	3201      	adds	r2, #1
 800f74a:	701a      	strb	r2, [r3, #0]
 800f74c:	e7ae      	b.n	800f6ac <_dtoa_r+0x564>
 800f74e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f752:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75a:	d1b2      	bne.n	800f6c2 <_dtoa_r+0x57a>
 800f75c:	e7d3      	b.n	800f706 <_dtoa_r+0x5be>
 800f75e:	bf00      	nop
 800f760:	0801b7f0 	.word	0x0801b7f0
 800f764:	0801b7c8 	.word	0x0801b7c8
 800f768:	9907      	ldr	r1, [sp, #28]
 800f76a:	2900      	cmp	r1, #0
 800f76c:	f000 80d0 	beq.w	800f910 <_dtoa_r+0x7c8>
 800f770:	9906      	ldr	r1, [sp, #24]
 800f772:	2901      	cmp	r1, #1
 800f774:	f300 80b4 	bgt.w	800f8e0 <_dtoa_r+0x798>
 800f778:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f77a:	2900      	cmp	r1, #0
 800f77c:	f000 80ac 	beq.w	800f8d8 <_dtoa_r+0x790>
 800f780:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f784:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f788:	461c      	mov	r4, r3
 800f78a:	930a      	str	r3, [sp, #40]	; 0x28
 800f78c:	9b04      	ldr	r3, [sp, #16]
 800f78e:	4413      	add	r3, r2
 800f790:	9304      	str	r3, [sp, #16]
 800f792:	9b05      	ldr	r3, [sp, #20]
 800f794:	2101      	movs	r1, #1
 800f796:	4413      	add	r3, r2
 800f798:	4630      	mov	r0, r6
 800f79a:	9305      	str	r3, [sp, #20]
 800f79c:	f000 fb46 	bl	800fe2c <__i2b>
 800f7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a2:	4607      	mov	r7, r0
 800f7a4:	f1b8 0f00 	cmp.w	r8, #0
 800f7a8:	dd0d      	ble.n	800f7c6 <_dtoa_r+0x67e>
 800f7aa:	9a05      	ldr	r2, [sp, #20]
 800f7ac:	2a00      	cmp	r2, #0
 800f7ae:	dd0a      	ble.n	800f7c6 <_dtoa_r+0x67e>
 800f7b0:	4542      	cmp	r2, r8
 800f7b2:	9904      	ldr	r1, [sp, #16]
 800f7b4:	bfa8      	it	ge
 800f7b6:	4642      	movge	r2, r8
 800f7b8:	1a89      	subs	r1, r1, r2
 800f7ba:	9104      	str	r1, [sp, #16]
 800f7bc:	9905      	ldr	r1, [sp, #20]
 800f7be:	eba8 0802 	sub.w	r8, r8, r2
 800f7c2:	1a8a      	subs	r2, r1, r2
 800f7c4:	9205      	str	r2, [sp, #20]
 800f7c6:	b303      	cbz	r3, 800f80a <_dtoa_r+0x6c2>
 800f7c8:	9a07      	ldr	r2, [sp, #28]
 800f7ca:	2a00      	cmp	r2, #0
 800f7cc:	f000 80a5 	beq.w	800f91a <_dtoa_r+0x7d2>
 800f7d0:	2c00      	cmp	r4, #0
 800f7d2:	dd13      	ble.n	800f7fc <_dtoa_r+0x6b4>
 800f7d4:	4639      	mov	r1, r7
 800f7d6:	4622      	mov	r2, r4
 800f7d8:	4630      	mov	r0, r6
 800f7da:	930d      	str	r3, [sp, #52]	; 0x34
 800f7dc:	f000 fbe6 	bl	800ffac <__pow5mult>
 800f7e0:	462a      	mov	r2, r5
 800f7e2:	4601      	mov	r1, r0
 800f7e4:	4607      	mov	r7, r0
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	f000 fb36 	bl	800fe58 <__multiply>
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	900a      	str	r0, [sp, #40]	; 0x28
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	f000 fa63 	bl	800fcbc <_Bfree>
 800f7f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7fa:	4615      	mov	r5, r2
 800f7fc:	1b1a      	subs	r2, r3, r4
 800f7fe:	d004      	beq.n	800f80a <_dtoa_r+0x6c2>
 800f800:	4629      	mov	r1, r5
 800f802:	4630      	mov	r0, r6
 800f804:	f000 fbd2 	bl	800ffac <__pow5mult>
 800f808:	4605      	mov	r5, r0
 800f80a:	2101      	movs	r1, #1
 800f80c:	4630      	mov	r0, r6
 800f80e:	f000 fb0d 	bl	800fe2c <__i2b>
 800f812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f814:	2b00      	cmp	r3, #0
 800f816:	4604      	mov	r4, r0
 800f818:	f340 8081 	ble.w	800f91e <_dtoa_r+0x7d6>
 800f81c:	461a      	mov	r2, r3
 800f81e:	4601      	mov	r1, r0
 800f820:	4630      	mov	r0, r6
 800f822:	f000 fbc3 	bl	800ffac <__pow5mult>
 800f826:	9b06      	ldr	r3, [sp, #24]
 800f828:	2b01      	cmp	r3, #1
 800f82a:	4604      	mov	r4, r0
 800f82c:	dd7a      	ble.n	800f924 <_dtoa_r+0x7dc>
 800f82e:	2300      	movs	r3, #0
 800f830:	930a      	str	r3, [sp, #40]	; 0x28
 800f832:	6922      	ldr	r2, [r4, #16]
 800f834:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f838:	6910      	ldr	r0, [r2, #16]
 800f83a:	f000 faa7 	bl	800fd8c <__hi0bits>
 800f83e:	f1c0 0020 	rsb	r0, r0, #32
 800f842:	9b05      	ldr	r3, [sp, #20]
 800f844:	4418      	add	r0, r3
 800f846:	f010 001f 	ands.w	r0, r0, #31
 800f84a:	f000 808c 	beq.w	800f966 <_dtoa_r+0x81e>
 800f84e:	f1c0 0220 	rsb	r2, r0, #32
 800f852:	2a04      	cmp	r2, #4
 800f854:	f340 8085 	ble.w	800f962 <_dtoa_r+0x81a>
 800f858:	f1c0 001c 	rsb	r0, r0, #28
 800f85c:	9b04      	ldr	r3, [sp, #16]
 800f85e:	4403      	add	r3, r0
 800f860:	9304      	str	r3, [sp, #16]
 800f862:	9b05      	ldr	r3, [sp, #20]
 800f864:	4403      	add	r3, r0
 800f866:	4480      	add	r8, r0
 800f868:	9305      	str	r3, [sp, #20]
 800f86a:	9b04      	ldr	r3, [sp, #16]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	dd05      	ble.n	800f87c <_dtoa_r+0x734>
 800f870:	4629      	mov	r1, r5
 800f872:	461a      	mov	r2, r3
 800f874:	4630      	mov	r0, r6
 800f876:	f000 fbf3 	bl	8010060 <__lshift>
 800f87a:	4605      	mov	r5, r0
 800f87c:	9b05      	ldr	r3, [sp, #20]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	dd05      	ble.n	800f88e <_dtoa_r+0x746>
 800f882:	4621      	mov	r1, r4
 800f884:	461a      	mov	r2, r3
 800f886:	4630      	mov	r0, r6
 800f888:	f000 fbea 	bl	8010060 <__lshift>
 800f88c:	4604      	mov	r4, r0
 800f88e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f890:	2b00      	cmp	r3, #0
 800f892:	d06a      	beq.n	800f96a <_dtoa_r+0x822>
 800f894:	4621      	mov	r1, r4
 800f896:	4628      	mov	r0, r5
 800f898:	f000 fc52 	bl	8010140 <__mcmp>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	da64      	bge.n	800f96a <_dtoa_r+0x822>
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	4629      	mov	r1, r5
 800f8a4:	220a      	movs	r2, #10
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	f000 fa2a 	bl	800fd00 <__multadd>
 800f8ac:	9b07      	ldr	r3, [sp, #28]
 800f8ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8b2:	4605      	mov	r5, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f000 8191 	beq.w	800fbdc <_dtoa_r+0xa94>
 800f8ba:	4639      	mov	r1, r7
 800f8bc:	2300      	movs	r3, #0
 800f8be:	220a      	movs	r2, #10
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f000 fa1d 	bl	800fd00 <__multadd>
 800f8c6:	f1ba 0f00 	cmp.w	sl, #0
 800f8ca:	4607      	mov	r7, r0
 800f8cc:	f300 808d 	bgt.w	800f9ea <_dtoa_r+0x8a2>
 800f8d0:	9b06      	ldr	r3, [sp, #24]
 800f8d2:	2b02      	cmp	r3, #2
 800f8d4:	dc50      	bgt.n	800f978 <_dtoa_r+0x830>
 800f8d6:	e088      	b.n	800f9ea <_dtoa_r+0x8a2>
 800f8d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f8de:	e751      	b.n	800f784 <_dtoa_r+0x63c>
 800f8e0:	f109 34ff 	add.w	r4, r9, #4294967295
 800f8e4:	42a3      	cmp	r3, r4
 800f8e6:	bfbf      	itttt	lt
 800f8e8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800f8ea:	1ae3      	sublt	r3, r4, r3
 800f8ec:	18d2      	addlt	r2, r2, r3
 800f8ee:	9209      	strlt	r2, [sp, #36]	; 0x24
 800f8f0:	bfb6      	itet	lt
 800f8f2:	4623      	movlt	r3, r4
 800f8f4:	1b1c      	subge	r4, r3, r4
 800f8f6:	2400      	movlt	r4, #0
 800f8f8:	f1b9 0f00 	cmp.w	r9, #0
 800f8fc:	bfb5      	itete	lt
 800f8fe:	9a04      	ldrlt	r2, [sp, #16]
 800f900:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800f904:	eba2 0809 	sublt.w	r8, r2, r9
 800f908:	464a      	movge	r2, r9
 800f90a:	bfb8      	it	lt
 800f90c:	2200      	movlt	r2, #0
 800f90e:	e73c      	b.n	800f78a <_dtoa_r+0x642>
 800f910:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f914:	9f07      	ldr	r7, [sp, #28]
 800f916:	461c      	mov	r4, r3
 800f918:	e744      	b.n	800f7a4 <_dtoa_r+0x65c>
 800f91a:	461a      	mov	r2, r3
 800f91c:	e770      	b.n	800f800 <_dtoa_r+0x6b8>
 800f91e:	9b06      	ldr	r3, [sp, #24]
 800f920:	2b01      	cmp	r3, #1
 800f922:	dc18      	bgt.n	800f956 <_dtoa_r+0x80e>
 800f924:	9b02      	ldr	r3, [sp, #8]
 800f926:	b9b3      	cbnz	r3, 800f956 <_dtoa_r+0x80e>
 800f928:	9b03      	ldr	r3, [sp, #12]
 800f92a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f92e:	b9a2      	cbnz	r2, 800f95a <_dtoa_r+0x812>
 800f930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f934:	0d12      	lsrs	r2, r2, #20
 800f936:	0512      	lsls	r2, r2, #20
 800f938:	b18a      	cbz	r2, 800f95e <_dtoa_r+0x816>
 800f93a:	9b04      	ldr	r3, [sp, #16]
 800f93c:	3301      	adds	r3, #1
 800f93e:	9304      	str	r3, [sp, #16]
 800f940:	9b05      	ldr	r3, [sp, #20]
 800f942:	3301      	adds	r3, #1
 800f944:	9305      	str	r3, [sp, #20]
 800f946:	2301      	movs	r3, #1
 800f948:	930a      	str	r3, [sp, #40]	; 0x28
 800f94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f47f af70 	bne.w	800f832 <_dtoa_r+0x6ea>
 800f952:	2001      	movs	r0, #1
 800f954:	e775      	b.n	800f842 <_dtoa_r+0x6fa>
 800f956:	2300      	movs	r3, #0
 800f958:	e7f6      	b.n	800f948 <_dtoa_r+0x800>
 800f95a:	9b02      	ldr	r3, [sp, #8]
 800f95c:	e7f4      	b.n	800f948 <_dtoa_r+0x800>
 800f95e:	920a      	str	r2, [sp, #40]	; 0x28
 800f960:	e7f3      	b.n	800f94a <_dtoa_r+0x802>
 800f962:	d082      	beq.n	800f86a <_dtoa_r+0x722>
 800f964:	4610      	mov	r0, r2
 800f966:	301c      	adds	r0, #28
 800f968:	e778      	b.n	800f85c <_dtoa_r+0x714>
 800f96a:	f1b9 0f00 	cmp.w	r9, #0
 800f96e:	dc37      	bgt.n	800f9e0 <_dtoa_r+0x898>
 800f970:	9b06      	ldr	r3, [sp, #24]
 800f972:	2b02      	cmp	r3, #2
 800f974:	dd34      	ble.n	800f9e0 <_dtoa_r+0x898>
 800f976:	46ca      	mov	sl, r9
 800f978:	f1ba 0f00 	cmp.w	sl, #0
 800f97c:	d10d      	bne.n	800f99a <_dtoa_r+0x852>
 800f97e:	4621      	mov	r1, r4
 800f980:	4653      	mov	r3, sl
 800f982:	2205      	movs	r2, #5
 800f984:	4630      	mov	r0, r6
 800f986:	f000 f9bb 	bl	800fd00 <__multadd>
 800f98a:	4601      	mov	r1, r0
 800f98c:	4604      	mov	r4, r0
 800f98e:	4628      	mov	r0, r5
 800f990:	f000 fbd6 	bl	8010140 <__mcmp>
 800f994:	2800      	cmp	r0, #0
 800f996:	f73f adeb 	bgt.w	800f570 <_dtoa_r+0x428>
 800f99a:	9b08      	ldr	r3, [sp, #32]
 800f99c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f9a0:	ea6f 0b03 	mvn.w	fp, r3
 800f9a4:	f04f 0900 	mov.w	r9, #0
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	f000 f986 	bl	800fcbc <_Bfree>
 800f9b0:	2f00      	cmp	r7, #0
 800f9b2:	f43f aea8 	beq.w	800f706 <_dtoa_r+0x5be>
 800f9b6:	f1b9 0f00 	cmp.w	r9, #0
 800f9ba:	d005      	beq.n	800f9c8 <_dtoa_r+0x880>
 800f9bc:	45b9      	cmp	r9, r7
 800f9be:	d003      	beq.n	800f9c8 <_dtoa_r+0x880>
 800f9c0:	4649      	mov	r1, r9
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f000 f97a 	bl	800fcbc <_Bfree>
 800f9c8:	4639      	mov	r1, r7
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f000 f976 	bl	800fcbc <_Bfree>
 800f9d0:	e699      	b.n	800f706 <_dtoa_r+0x5be>
 800f9d2:	2400      	movs	r4, #0
 800f9d4:	4627      	mov	r7, r4
 800f9d6:	e7e0      	b.n	800f99a <_dtoa_r+0x852>
 800f9d8:	46bb      	mov	fp, r7
 800f9da:	4604      	mov	r4, r0
 800f9dc:	4607      	mov	r7, r0
 800f9de:	e5c7      	b.n	800f570 <_dtoa_r+0x428>
 800f9e0:	9b07      	ldr	r3, [sp, #28]
 800f9e2:	46ca      	mov	sl, r9
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f000 8100 	beq.w	800fbea <_dtoa_r+0xaa2>
 800f9ea:	f1b8 0f00 	cmp.w	r8, #0
 800f9ee:	dd05      	ble.n	800f9fc <_dtoa_r+0x8b4>
 800f9f0:	4639      	mov	r1, r7
 800f9f2:	4642      	mov	r2, r8
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f000 fb33 	bl	8010060 <__lshift>
 800f9fa:	4607      	mov	r7, r0
 800f9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d05d      	beq.n	800fabe <_dtoa_r+0x976>
 800fa02:	6879      	ldr	r1, [r7, #4]
 800fa04:	4630      	mov	r0, r6
 800fa06:	f000 f919 	bl	800fc3c <_Balloc>
 800fa0a:	4680      	mov	r8, r0
 800fa0c:	b928      	cbnz	r0, 800fa1a <_dtoa_r+0x8d2>
 800fa0e:	4b82      	ldr	r3, [pc, #520]	; (800fc18 <_dtoa_r+0xad0>)
 800fa10:	4602      	mov	r2, r0
 800fa12:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fa16:	f7ff bbaf 	b.w	800f178 <_dtoa_r+0x30>
 800fa1a:	693a      	ldr	r2, [r7, #16]
 800fa1c:	3202      	adds	r2, #2
 800fa1e:	0092      	lsls	r2, r2, #2
 800fa20:	f107 010c 	add.w	r1, r7, #12
 800fa24:	300c      	adds	r0, #12
 800fa26:	f7fe fe69 	bl	800e6fc <memcpy>
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	4641      	mov	r1, r8
 800fa2e:	4630      	mov	r0, r6
 800fa30:	f000 fb16 	bl	8010060 <__lshift>
 800fa34:	9b01      	ldr	r3, [sp, #4]
 800fa36:	3301      	adds	r3, #1
 800fa38:	9304      	str	r3, [sp, #16]
 800fa3a:	9b01      	ldr	r3, [sp, #4]
 800fa3c:	4453      	add	r3, sl
 800fa3e:	9308      	str	r3, [sp, #32]
 800fa40:	9b02      	ldr	r3, [sp, #8]
 800fa42:	f003 0301 	and.w	r3, r3, #1
 800fa46:	46b9      	mov	r9, r7
 800fa48:	9307      	str	r3, [sp, #28]
 800fa4a:	4607      	mov	r7, r0
 800fa4c:	9b04      	ldr	r3, [sp, #16]
 800fa4e:	4621      	mov	r1, r4
 800fa50:	3b01      	subs	r3, #1
 800fa52:	4628      	mov	r0, r5
 800fa54:	9302      	str	r3, [sp, #8]
 800fa56:	f7ff fae9 	bl	800f02c <quorem>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	3330      	adds	r3, #48	; 0x30
 800fa5e:	9005      	str	r0, [sp, #20]
 800fa60:	4649      	mov	r1, r9
 800fa62:	4628      	mov	r0, r5
 800fa64:	9309      	str	r3, [sp, #36]	; 0x24
 800fa66:	f000 fb6b 	bl	8010140 <__mcmp>
 800fa6a:	463a      	mov	r2, r7
 800fa6c:	4682      	mov	sl, r0
 800fa6e:	4621      	mov	r1, r4
 800fa70:	4630      	mov	r0, r6
 800fa72:	f000 fb81 	bl	8010178 <__mdiff>
 800fa76:	68c2      	ldr	r2, [r0, #12]
 800fa78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa7a:	4680      	mov	r8, r0
 800fa7c:	bb0a      	cbnz	r2, 800fac2 <_dtoa_r+0x97a>
 800fa7e:	4601      	mov	r1, r0
 800fa80:	4628      	mov	r0, r5
 800fa82:	f000 fb5d 	bl	8010140 <__mcmp>
 800fa86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa88:	4602      	mov	r2, r0
 800fa8a:	4641      	mov	r1, r8
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800fa92:	f000 f913 	bl	800fcbc <_Bfree>
 800fa96:	9b06      	ldr	r3, [sp, #24]
 800fa98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa9a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fa9e:	ea43 0102 	orr.w	r1, r3, r2
 800faa2:	9b07      	ldr	r3, [sp, #28]
 800faa4:	430b      	orrs	r3, r1
 800faa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faa8:	d10d      	bne.n	800fac6 <_dtoa_r+0x97e>
 800faaa:	2b39      	cmp	r3, #57	; 0x39
 800faac:	d029      	beq.n	800fb02 <_dtoa_r+0x9ba>
 800faae:	f1ba 0f00 	cmp.w	sl, #0
 800fab2:	dd01      	ble.n	800fab8 <_dtoa_r+0x970>
 800fab4:	9b05      	ldr	r3, [sp, #20]
 800fab6:	3331      	adds	r3, #49	; 0x31
 800fab8:	9a02      	ldr	r2, [sp, #8]
 800faba:	7013      	strb	r3, [r2, #0]
 800fabc:	e774      	b.n	800f9a8 <_dtoa_r+0x860>
 800fabe:	4638      	mov	r0, r7
 800fac0:	e7b8      	b.n	800fa34 <_dtoa_r+0x8ec>
 800fac2:	2201      	movs	r2, #1
 800fac4:	e7e1      	b.n	800fa8a <_dtoa_r+0x942>
 800fac6:	f1ba 0f00 	cmp.w	sl, #0
 800faca:	db06      	blt.n	800fada <_dtoa_r+0x992>
 800facc:	9906      	ldr	r1, [sp, #24]
 800face:	ea41 0a0a 	orr.w	sl, r1, sl
 800fad2:	9907      	ldr	r1, [sp, #28]
 800fad4:	ea5a 0101 	orrs.w	r1, sl, r1
 800fad8:	d120      	bne.n	800fb1c <_dtoa_r+0x9d4>
 800fada:	2a00      	cmp	r2, #0
 800fadc:	ddec      	ble.n	800fab8 <_dtoa_r+0x970>
 800fade:	4629      	mov	r1, r5
 800fae0:	2201      	movs	r2, #1
 800fae2:	4630      	mov	r0, r6
 800fae4:	9304      	str	r3, [sp, #16]
 800fae6:	f000 fabb 	bl	8010060 <__lshift>
 800faea:	4621      	mov	r1, r4
 800faec:	4605      	mov	r5, r0
 800faee:	f000 fb27 	bl	8010140 <__mcmp>
 800faf2:	2800      	cmp	r0, #0
 800faf4:	9b04      	ldr	r3, [sp, #16]
 800faf6:	dc02      	bgt.n	800fafe <_dtoa_r+0x9b6>
 800faf8:	d1de      	bne.n	800fab8 <_dtoa_r+0x970>
 800fafa:	07da      	lsls	r2, r3, #31
 800fafc:	d5dc      	bpl.n	800fab8 <_dtoa_r+0x970>
 800fafe:	2b39      	cmp	r3, #57	; 0x39
 800fb00:	d1d8      	bne.n	800fab4 <_dtoa_r+0x96c>
 800fb02:	9a02      	ldr	r2, [sp, #8]
 800fb04:	2339      	movs	r3, #57	; 0x39
 800fb06:	7013      	strb	r3, [r2, #0]
 800fb08:	4643      	mov	r3, r8
 800fb0a:	4698      	mov	r8, r3
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fb12:	2a39      	cmp	r2, #57	; 0x39
 800fb14:	d051      	beq.n	800fbba <_dtoa_r+0xa72>
 800fb16:	3201      	adds	r2, #1
 800fb18:	701a      	strb	r2, [r3, #0]
 800fb1a:	e745      	b.n	800f9a8 <_dtoa_r+0x860>
 800fb1c:	2a00      	cmp	r2, #0
 800fb1e:	dd03      	ble.n	800fb28 <_dtoa_r+0x9e0>
 800fb20:	2b39      	cmp	r3, #57	; 0x39
 800fb22:	d0ee      	beq.n	800fb02 <_dtoa_r+0x9ba>
 800fb24:	3301      	adds	r3, #1
 800fb26:	e7c7      	b.n	800fab8 <_dtoa_r+0x970>
 800fb28:	9a04      	ldr	r2, [sp, #16]
 800fb2a:	9908      	ldr	r1, [sp, #32]
 800fb2c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fb30:	428a      	cmp	r2, r1
 800fb32:	d02b      	beq.n	800fb8c <_dtoa_r+0xa44>
 800fb34:	4629      	mov	r1, r5
 800fb36:	2300      	movs	r3, #0
 800fb38:	220a      	movs	r2, #10
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	f000 f8e0 	bl	800fd00 <__multadd>
 800fb40:	45b9      	cmp	r9, r7
 800fb42:	4605      	mov	r5, r0
 800fb44:	f04f 0300 	mov.w	r3, #0
 800fb48:	f04f 020a 	mov.w	r2, #10
 800fb4c:	4649      	mov	r1, r9
 800fb4e:	4630      	mov	r0, r6
 800fb50:	d107      	bne.n	800fb62 <_dtoa_r+0xa1a>
 800fb52:	f000 f8d5 	bl	800fd00 <__multadd>
 800fb56:	4681      	mov	r9, r0
 800fb58:	4607      	mov	r7, r0
 800fb5a:	9b04      	ldr	r3, [sp, #16]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	9304      	str	r3, [sp, #16]
 800fb60:	e774      	b.n	800fa4c <_dtoa_r+0x904>
 800fb62:	f000 f8cd 	bl	800fd00 <__multadd>
 800fb66:	4639      	mov	r1, r7
 800fb68:	4681      	mov	r9, r0
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	220a      	movs	r2, #10
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f000 f8c6 	bl	800fd00 <__multadd>
 800fb74:	4607      	mov	r7, r0
 800fb76:	e7f0      	b.n	800fb5a <_dtoa_r+0xa12>
 800fb78:	f1ba 0f00 	cmp.w	sl, #0
 800fb7c:	9a01      	ldr	r2, [sp, #4]
 800fb7e:	bfcc      	ite	gt
 800fb80:	46d0      	movgt	r8, sl
 800fb82:	f04f 0801 	movle.w	r8, #1
 800fb86:	4490      	add	r8, r2
 800fb88:	f04f 0900 	mov.w	r9, #0
 800fb8c:	4629      	mov	r1, r5
 800fb8e:	2201      	movs	r2, #1
 800fb90:	4630      	mov	r0, r6
 800fb92:	9302      	str	r3, [sp, #8]
 800fb94:	f000 fa64 	bl	8010060 <__lshift>
 800fb98:	4621      	mov	r1, r4
 800fb9a:	4605      	mov	r5, r0
 800fb9c:	f000 fad0 	bl	8010140 <__mcmp>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	dcb1      	bgt.n	800fb08 <_dtoa_r+0x9c0>
 800fba4:	d102      	bne.n	800fbac <_dtoa_r+0xa64>
 800fba6:	9b02      	ldr	r3, [sp, #8]
 800fba8:	07db      	lsls	r3, r3, #31
 800fbaa:	d4ad      	bmi.n	800fb08 <_dtoa_r+0x9c0>
 800fbac:	4643      	mov	r3, r8
 800fbae:	4698      	mov	r8, r3
 800fbb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbb4:	2a30      	cmp	r2, #48	; 0x30
 800fbb6:	d0fa      	beq.n	800fbae <_dtoa_r+0xa66>
 800fbb8:	e6f6      	b.n	800f9a8 <_dtoa_r+0x860>
 800fbba:	9a01      	ldr	r2, [sp, #4]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d1a4      	bne.n	800fb0a <_dtoa_r+0x9c2>
 800fbc0:	f10b 0b01 	add.w	fp, fp, #1
 800fbc4:	2331      	movs	r3, #49	; 0x31
 800fbc6:	e778      	b.n	800faba <_dtoa_r+0x972>
 800fbc8:	4b14      	ldr	r3, [pc, #80]	; (800fc1c <_dtoa_r+0xad4>)
 800fbca:	f7ff bb27 	b.w	800f21c <_dtoa_r+0xd4>
 800fbce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f47f ab03 	bne.w	800f1dc <_dtoa_r+0x94>
 800fbd6:	4b12      	ldr	r3, [pc, #72]	; (800fc20 <_dtoa_r+0xad8>)
 800fbd8:	f7ff bb20 	b.w	800f21c <_dtoa_r+0xd4>
 800fbdc:	f1ba 0f00 	cmp.w	sl, #0
 800fbe0:	dc03      	bgt.n	800fbea <_dtoa_r+0xaa2>
 800fbe2:	9b06      	ldr	r3, [sp, #24]
 800fbe4:	2b02      	cmp	r3, #2
 800fbe6:	f73f aec7 	bgt.w	800f978 <_dtoa_r+0x830>
 800fbea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fbee:	4621      	mov	r1, r4
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	f7ff fa1b 	bl	800f02c <quorem>
 800fbf6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fbfa:	f808 3b01 	strb.w	r3, [r8], #1
 800fbfe:	9a01      	ldr	r2, [sp, #4]
 800fc00:	eba8 0202 	sub.w	r2, r8, r2
 800fc04:	4592      	cmp	sl, r2
 800fc06:	ddb7      	ble.n	800fb78 <_dtoa_r+0xa30>
 800fc08:	4629      	mov	r1, r5
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	220a      	movs	r2, #10
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f000 f876 	bl	800fd00 <__multadd>
 800fc14:	4605      	mov	r5, r0
 800fc16:	e7ea      	b.n	800fbee <_dtoa_r+0xaa6>
 800fc18:	0801b75b 	.word	0x0801b75b
 800fc1c:	0801b6b8 	.word	0x0801b6b8
 800fc20:	0801b6dc 	.word	0x0801b6dc

0800fc24 <_localeconv_r>:
 800fc24:	4800      	ldr	r0, [pc, #0]	; (800fc28 <_localeconv_r+0x4>)
 800fc26:	4770      	bx	lr
 800fc28:	240004cc 	.word	0x240004cc

0800fc2c <malloc>:
 800fc2c:	4b02      	ldr	r3, [pc, #8]	; (800fc38 <malloc+0xc>)
 800fc2e:	4601      	mov	r1, r0
 800fc30:	6818      	ldr	r0, [r3, #0]
 800fc32:	f000 bc09 	b.w	8010448 <_malloc_r>
 800fc36:	bf00      	nop
 800fc38:	24000378 	.word	0x24000378

0800fc3c <_Balloc>:
 800fc3c:	b570      	push	{r4, r5, r6, lr}
 800fc3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc40:	4604      	mov	r4, r0
 800fc42:	460d      	mov	r5, r1
 800fc44:	b976      	cbnz	r6, 800fc64 <_Balloc+0x28>
 800fc46:	2010      	movs	r0, #16
 800fc48:	f7ff fff0 	bl	800fc2c <malloc>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	6260      	str	r0, [r4, #36]	; 0x24
 800fc50:	b920      	cbnz	r0, 800fc5c <_Balloc+0x20>
 800fc52:	4b18      	ldr	r3, [pc, #96]	; (800fcb4 <_Balloc+0x78>)
 800fc54:	4818      	ldr	r0, [pc, #96]	; (800fcb8 <_Balloc+0x7c>)
 800fc56:	2166      	movs	r1, #102	; 0x66
 800fc58:	f000 fdd6 	bl	8010808 <__assert_func>
 800fc5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc60:	6006      	str	r6, [r0, #0]
 800fc62:	60c6      	str	r6, [r0, #12]
 800fc64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc66:	68f3      	ldr	r3, [r6, #12]
 800fc68:	b183      	cbz	r3, 800fc8c <_Balloc+0x50>
 800fc6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc72:	b9b8      	cbnz	r0, 800fca4 <_Balloc+0x68>
 800fc74:	2101      	movs	r1, #1
 800fc76:	fa01 f605 	lsl.w	r6, r1, r5
 800fc7a:	1d72      	adds	r2, r6, #5
 800fc7c:	0092      	lsls	r2, r2, #2
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f000 fb60 	bl	8010344 <_calloc_r>
 800fc84:	b160      	cbz	r0, 800fca0 <_Balloc+0x64>
 800fc86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc8a:	e00e      	b.n	800fcaa <_Balloc+0x6e>
 800fc8c:	2221      	movs	r2, #33	; 0x21
 800fc8e:	2104      	movs	r1, #4
 800fc90:	4620      	mov	r0, r4
 800fc92:	f000 fb57 	bl	8010344 <_calloc_r>
 800fc96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc98:	60f0      	str	r0, [r6, #12]
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e4      	bne.n	800fc6a <_Balloc+0x2e>
 800fca0:	2000      	movs	r0, #0
 800fca2:	bd70      	pop	{r4, r5, r6, pc}
 800fca4:	6802      	ldr	r2, [r0, #0]
 800fca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcaa:	2300      	movs	r3, #0
 800fcac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fcb0:	e7f7      	b.n	800fca2 <_Balloc+0x66>
 800fcb2:	bf00      	nop
 800fcb4:	0801b6e9 	.word	0x0801b6e9
 800fcb8:	0801b76c 	.word	0x0801b76c

0800fcbc <_Bfree>:
 800fcbc:	b570      	push	{r4, r5, r6, lr}
 800fcbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fcc0:	4605      	mov	r5, r0
 800fcc2:	460c      	mov	r4, r1
 800fcc4:	b976      	cbnz	r6, 800fce4 <_Bfree+0x28>
 800fcc6:	2010      	movs	r0, #16
 800fcc8:	f7ff ffb0 	bl	800fc2c <malloc>
 800fccc:	4602      	mov	r2, r0
 800fcce:	6268      	str	r0, [r5, #36]	; 0x24
 800fcd0:	b920      	cbnz	r0, 800fcdc <_Bfree+0x20>
 800fcd2:	4b09      	ldr	r3, [pc, #36]	; (800fcf8 <_Bfree+0x3c>)
 800fcd4:	4809      	ldr	r0, [pc, #36]	; (800fcfc <_Bfree+0x40>)
 800fcd6:	218a      	movs	r1, #138	; 0x8a
 800fcd8:	f000 fd96 	bl	8010808 <__assert_func>
 800fcdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fce0:	6006      	str	r6, [r0, #0]
 800fce2:	60c6      	str	r6, [r0, #12]
 800fce4:	b13c      	cbz	r4, 800fcf6 <_Bfree+0x3a>
 800fce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fce8:	6862      	ldr	r2, [r4, #4]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fcf0:	6021      	str	r1, [r4, #0]
 800fcf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcf6:	bd70      	pop	{r4, r5, r6, pc}
 800fcf8:	0801b6e9 	.word	0x0801b6e9
 800fcfc:	0801b76c 	.word	0x0801b76c

0800fd00 <__multadd>:
 800fd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd04:	690d      	ldr	r5, [r1, #16]
 800fd06:	4607      	mov	r7, r0
 800fd08:	460c      	mov	r4, r1
 800fd0a:	461e      	mov	r6, r3
 800fd0c:	f101 0c14 	add.w	ip, r1, #20
 800fd10:	2000      	movs	r0, #0
 800fd12:	f8dc 3000 	ldr.w	r3, [ip]
 800fd16:	b299      	uxth	r1, r3
 800fd18:	fb02 6101 	mla	r1, r2, r1, r6
 800fd1c:	0c1e      	lsrs	r6, r3, #16
 800fd1e:	0c0b      	lsrs	r3, r1, #16
 800fd20:	fb02 3306 	mla	r3, r2, r6, r3
 800fd24:	b289      	uxth	r1, r1
 800fd26:	3001      	adds	r0, #1
 800fd28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd2c:	4285      	cmp	r5, r0
 800fd2e:	f84c 1b04 	str.w	r1, [ip], #4
 800fd32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd36:	dcec      	bgt.n	800fd12 <__multadd+0x12>
 800fd38:	b30e      	cbz	r6, 800fd7e <__multadd+0x7e>
 800fd3a:	68a3      	ldr	r3, [r4, #8]
 800fd3c:	42ab      	cmp	r3, r5
 800fd3e:	dc19      	bgt.n	800fd74 <__multadd+0x74>
 800fd40:	6861      	ldr	r1, [r4, #4]
 800fd42:	4638      	mov	r0, r7
 800fd44:	3101      	adds	r1, #1
 800fd46:	f7ff ff79 	bl	800fc3c <_Balloc>
 800fd4a:	4680      	mov	r8, r0
 800fd4c:	b928      	cbnz	r0, 800fd5a <__multadd+0x5a>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	4b0c      	ldr	r3, [pc, #48]	; (800fd84 <__multadd+0x84>)
 800fd52:	480d      	ldr	r0, [pc, #52]	; (800fd88 <__multadd+0x88>)
 800fd54:	21b5      	movs	r1, #181	; 0xb5
 800fd56:	f000 fd57 	bl	8010808 <__assert_func>
 800fd5a:	6922      	ldr	r2, [r4, #16]
 800fd5c:	3202      	adds	r2, #2
 800fd5e:	f104 010c 	add.w	r1, r4, #12
 800fd62:	0092      	lsls	r2, r2, #2
 800fd64:	300c      	adds	r0, #12
 800fd66:	f7fe fcc9 	bl	800e6fc <memcpy>
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	4638      	mov	r0, r7
 800fd6e:	f7ff ffa5 	bl	800fcbc <_Bfree>
 800fd72:	4644      	mov	r4, r8
 800fd74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd78:	3501      	adds	r5, #1
 800fd7a:	615e      	str	r6, [r3, #20]
 800fd7c:	6125      	str	r5, [r4, #16]
 800fd7e:	4620      	mov	r0, r4
 800fd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd84:	0801b75b 	.word	0x0801b75b
 800fd88:	0801b76c 	.word	0x0801b76c

0800fd8c <__hi0bits>:
 800fd8c:	0c03      	lsrs	r3, r0, #16
 800fd8e:	041b      	lsls	r3, r3, #16
 800fd90:	b9d3      	cbnz	r3, 800fdc8 <__hi0bits+0x3c>
 800fd92:	0400      	lsls	r0, r0, #16
 800fd94:	2310      	movs	r3, #16
 800fd96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fd9a:	bf04      	itt	eq
 800fd9c:	0200      	lsleq	r0, r0, #8
 800fd9e:	3308      	addeq	r3, #8
 800fda0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fda4:	bf04      	itt	eq
 800fda6:	0100      	lsleq	r0, r0, #4
 800fda8:	3304      	addeq	r3, #4
 800fdaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fdae:	bf04      	itt	eq
 800fdb0:	0080      	lsleq	r0, r0, #2
 800fdb2:	3302      	addeq	r3, #2
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	db05      	blt.n	800fdc4 <__hi0bits+0x38>
 800fdb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fdbc:	f103 0301 	add.w	r3, r3, #1
 800fdc0:	bf08      	it	eq
 800fdc2:	2320      	moveq	r3, #32
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	4770      	bx	lr
 800fdc8:	2300      	movs	r3, #0
 800fdca:	e7e4      	b.n	800fd96 <__hi0bits+0xa>

0800fdcc <__lo0bits>:
 800fdcc:	6803      	ldr	r3, [r0, #0]
 800fdce:	f013 0207 	ands.w	r2, r3, #7
 800fdd2:	4601      	mov	r1, r0
 800fdd4:	d00b      	beq.n	800fdee <__lo0bits+0x22>
 800fdd6:	07da      	lsls	r2, r3, #31
 800fdd8:	d423      	bmi.n	800fe22 <__lo0bits+0x56>
 800fdda:	0798      	lsls	r0, r3, #30
 800fddc:	bf49      	itett	mi
 800fdde:	085b      	lsrmi	r3, r3, #1
 800fde0:	089b      	lsrpl	r3, r3, #2
 800fde2:	2001      	movmi	r0, #1
 800fde4:	600b      	strmi	r3, [r1, #0]
 800fde6:	bf5c      	itt	pl
 800fde8:	600b      	strpl	r3, [r1, #0]
 800fdea:	2002      	movpl	r0, #2
 800fdec:	4770      	bx	lr
 800fdee:	b298      	uxth	r0, r3
 800fdf0:	b9a8      	cbnz	r0, 800fe1e <__lo0bits+0x52>
 800fdf2:	0c1b      	lsrs	r3, r3, #16
 800fdf4:	2010      	movs	r0, #16
 800fdf6:	b2da      	uxtb	r2, r3
 800fdf8:	b90a      	cbnz	r2, 800fdfe <__lo0bits+0x32>
 800fdfa:	3008      	adds	r0, #8
 800fdfc:	0a1b      	lsrs	r3, r3, #8
 800fdfe:	071a      	lsls	r2, r3, #28
 800fe00:	bf04      	itt	eq
 800fe02:	091b      	lsreq	r3, r3, #4
 800fe04:	3004      	addeq	r0, #4
 800fe06:	079a      	lsls	r2, r3, #30
 800fe08:	bf04      	itt	eq
 800fe0a:	089b      	lsreq	r3, r3, #2
 800fe0c:	3002      	addeq	r0, #2
 800fe0e:	07da      	lsls	r2, r3, #31
 800fe10:	d403      	bmi.n	800fe1a <__lo0bits+0x4e>
 800fe12:	085b      	lsrs	r3, r3, #1
 800fe14:	f100 0001 	add.w	r0, r0, #1
 800fe18:	d005      	beq.n	800fe26 <__lo0bits+0x5a>
 800fe1a:	600b      	str	r3, [r1, #0]
 800fe1c:	4770      	bx	lr
 800fe1e:	4610      	mov	r0, r2
 800fe20:	e7e9      	b.n	800fdf6 <__lo0bits+0x2a>
 800fe22:	2000      	movs	r0, #0
 800fe24:	4770      	bx	lr
 800fe26:	2020      	movs	r0, #32
 800fe28:	4770      	bx	lr
	...

0800fe2c <__i2b>:
 800fe2c:	b510      	push	{r4, lr}
 800fe2e:	460c      	mov	r4, r1
 800fe30:	2101      	movs	r1, #1
 800fe32:	f7ff ff03 	bl	800fc3c <_Balloc>
 800fe36:	4602      	mov	r2, r0
 800fe38:	b928      	cbnz	r0, 800fe46 <__i2b+0x1a>
 800fe3a:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <__i2b+0x24>)
 800fe3c:	4805      	ldr	r0, [pc, #20]	; (800fe54 <__i2b+0x28>)
 800fe3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fe42:	f000 fce1 	bl	8010808 <__assert_func>
 800fe46:	2301      	movs	r3, #1
 800fe48:	6144      	str	r4, [r0, #20]
 800fe4a:	6103      	str	r3, [r0, #16]
 800fe4c:	bd10      	pop	{r4, pc}
 800fe4e:	bf00      	nop
 800fe50:	0801b75b 	.word	0x0801b75b
 800fe54:	0801b76c 	.word	0x0801b76c

0800fe58 <__multiply>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	4691      	mov	r9, r2
 800fe5e:	690a      	ldr	r2, [r1, #16]
 800fe60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	bfb8      	it	lt
 800fe68:	460b      	movlt	r3, r1
 800fe6a:	460c      	mov	r4, r1
 800fe6c:	bfbc      	itt	lt
 800fe6e:	464c      	movlt	r4, r9
 800fe70:	4699      	movlt	r9, r3
 800fe72:	6927      	ldr	r7, [r4, #16]
 800fe74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe78:	68a3      	ldr	r3, [r4, #8]
 800fe7a:	6861      	ldr	r1, [r4, #4]
 800fe7c:	eb07 060a 	add.w	r6, r7, sl
 800fe80:	42b3      	cmp	r3, r6
 800fe82:	b085      	sub	sp, #20
 800fe84:	bfb8      	it	lt
 800fe86:	3101      	addlt	r1, #1
 800fe88:	f7ff fed8 	bl	800fc3c <_Balloc>
 800fe8c:	b930      	cbnz	r0, 800fe9c <__multiply+0x44>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	4b44      	ldr	r3, [pc, #272]	; (800ffa4 <__multiply+0x14c>)
 800fe92:	4845      	ldr	r0, [pc, #276]	; (800ffa8 <__multiply+0x150>)
 800fe94:	f240 115d 	movw	r1, #349	; 0x15d
 800fe98:	f000 fcb6 	bl	8010808 <__assert_func>
 800fe9c:	f100 0514 	add.w	r5, r0, #20
 800fea0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fea4:	462b      	mov	r3, r5
 800fea6:	2200      	movs	r2, #0
 800fea8:	4543      	cmp	r3, r8
 800feaa:	d321      	bcc.n	800fef0 <__multiply+0x98>
 800feac:	f104 0314 	add.w	r3, r4, #20
 800feb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800feb4:	f109 0314 	add.w	r3, r9, #20
 800feb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800febc:	9202      	str	r2, [sp, #8]
 800febe:	1b3a      	subs	r2, r7, r4
 800fec0:	3a15      	subs	r2, #21
 800fec2:	f022 0203 	bic.w	r2, r2, #3
 800fec6:	3204      	adds	r2, #4
 800fec8:	f104 0115 	add.w	r1, r4, #21
 800fecc:	428f      	cmp	r7, r1
 800fece:	bf38      	it	cc
 800fed0:	2204      	movcc	r2, #4
 800fed2:	9201      	str	r2, [sp, #4]
 800fed4:	9a02      	ldr	r2, [sp, #8]
 800fed6:	9303      	str	r3, [sp, #12]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d80c      	bhi.n	800fef6 <__multiply+0x9e>
 800fedc:	2e00      	cmp	r6, #0
 800fede:	dd03      	ble.n	800fee8 <__multiply+0x90>
 800fee0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d05a      	beq.n	800ff9e <__multiply+0x146>
 800fee8:	6106      	str	r6, [r0, #16]
 800feea:	b005      	add	sp, #20
 800feec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef0:	f843 2b04 	str.w	r2, [r3], #4
 800fef4:	e7d8      	b.n	800fea8 <__multiply+0x50>
 800fef6:	f8b3 a000 	ldrh.w	sl, [r3]
 800fefa:	f1ba 0f00 	cmp.w	sl, #0
 800fefe:	d024      	beq.n	800ff4a <__multiply+0xf2>
 800ff00:	f104 0e14 	add.w	lr, r4, #20
 800ff04:	46a9      	mov	r9, r5
 800ff06:	f04f 0c00 	mov.w	ip, #0
 800ff0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ff0e:	f8d9 1000 	ldr.w	r1, [r9]
 800ff12:	fa1f fb82 	uxth.w	fp, r2
 800ff16:	b289      	uxth	r1, r1
 800ff18:	fb0a 110b 	mla	r1, sl, fp, r1
 800ff1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ff20:	f8d9 2000 	ldr.w	r2, [r9]
 800ff24:	4461      	add	r1, ip
 800ff26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ff2a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ff2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ff32:	b289      	uxth	r1, r1
 800ff34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ff38:	4577      	cmp	r7, lr
 800ff3a:	f849 1b04 	str.w	r1, [r9], #4
 800ff3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ff42:	d8e2      	bhi.n	800ff0a <__multiply+0xb2>
 800ff44:	9a01      	ldr	r2, [sp, #4]
 800ff46:	f845 c002 	str.w	ip, [r5, r2]
 800ff4a:	9a03      	ldr	r2, [sp, #12]
 800ff4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ff50:	3304      	adds	r3, #4
 800ff52:	f1b9 0f00 	cmp.w	r9, #0
 800ff56:	d020      	beq.n	800ff9a <__multiply+0x142>
 800ff58:	6829      	ldr	r1, [r5, #0]
 800ff5a:	f104 0c14 	add.w	ip, r4, #20
 800ff5e:	46ae      	mov	lr, r5
 800ff60:	f04f 0a00 	mov.w	sl, #0
 800ff64:	f8bc b000 	ldrh.w	fp, [ip]
 800ff68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ff6c:	fb09 220b 	mla	r2, r9, fp, r2
 800ff70:	4492      	add	sl, r2
 800ff72:	b289      	uxth	r1, r1
 800ff74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ff78:	f84e 1b04 	str.w	r1, [lr], #4
 800ff7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ff80:	f8be 1000 	ldrh.w	r1, [lr]
 800ff84:	0c12      	lsrs	r2, r2, #16
 800ff86:	fb09 1102 	mla	r1, r9, r2, r1
 800ff8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ff8e:	4567      	cmp	r7, ip
 800ff90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff94:	d8e6      	bhi.n	800ff64 <__multiply+0x10c>
 800ff96:	9a01      	ldr	r2, [sp, #4]
 800ff98:	50a9      	str	r1, [r5, r2]
 800ff9a:	3504      	adds	r5, #4
 800ff9c:	e79a      	b.n	800fed4 <__multiply+0x7c>
 800ff9e:	3e01      	subs	r6, #1
 800ffa0:	e79c      	b.n	800fedc <__multiply+0x84>
 800ffa2:	bf00      	nop
 800ffa4:	0801b75b 	.word	0x0801b75b
 800ffa8:	0801b76c 	.word	0x0801b76c

0800ffac <__pow5mult>:
 800ffac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffb0:	4615      	mov	r5, r2
 800ffb2:	f012 0203 	ands.w	r2, r2, #3
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	460f      	mov	r7, r1
 800ffba:	d007      	beq.n	800ffcc <__pow5mult+0x20>
 800ffbc:	4c25      	ldr	r4, [pc, #148]	; (8010054 <__pow5mult+0xa8>)
 800ffbe:	3a01      	subs	r2, #1
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ffc6:	f7ff fe9b 	bl	800fd00 <__multadd>
 800ffca:	4607      	mov	r7, r0
 800ffcc:	10ad      	asrs	r5, r5, #2
 800ffce:	d03d      	beq.n	801004c <__pow5mult+0xa0>
 800ffd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ffd2:	b97c      	cbnz	r4, 800fff4 <__pow5mult+0x48>
 800ffd4:	2010      	movs	r0, #16
 800ffd6:	f7ff fe29 	bl	800fc2c <malloc>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	6270      	str	r0, [r6, #36]	; 0x24
 800ffde:	b928      	cbnz	r0, 800ffec <__pow5mult+0x40>
 800ffe0:	4b1d      	ldr	r3, [pc, #116]	; (8010058 <__pow5mult+0xac>)
 800ffe2:	481e      	ldr	r0, [pc, #120]	; (801005c <__pow5mult+0xb0>)
 800ffe4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ffe8:	f000 fc0e 	bl	8010808 <__assert_func>
 800ffec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fff0:	6004      	str	r4, [r0, #0]
 800fff2:	60c4      	str	r4, [r0, #12]
 800fff4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fffc:	b94c      	cbnz	r4, 8010012 <__pow5mult+0x66>
 800fffe:	f240 2171 	movw	r1, #625	; 0x271
 8010002:	4630      	mov	r0, r6
 8010004:	f7ff ff12 	bl	800fe2c <__i2b>
 8010008:	2300      	movs	r3, #0
 801000a:	f8c8 0008 	str.w	r0, [r8, #8]
 801000e:	4604      	mov	r4, r0
 8010010:	6003      	str	r3, [r0, #0]
 8010012:	f04f 0900 	mov.w	r9, #0
 8010016:	07eb      	lsls	r3, r5, #31
 8010018:	d50a      	bpl.n	8010030 <__pow5mult+0x84>
 801001a:	4639      	mov	r1, r7
 801001c:	4622      	mov	r2, r4
 801001e:	4630      	mov	r0, r6
 8010020:	f7ff ff1a 	bl	800fe58 <__multiply>
 8010024:	4639      	mov	r1, r7
 8010026:	4680      	mov	r8, r0
 8010028:	4630      	mov	r0, r6
 801002a:	f7ff fe47 	bl	800fcbc <_Bfree>
 801002e:	4647      	mov	r7, r8
 8010030:	106d      	asrs	r5, r5, #1
 8010032:	d00b      	beq.n	801004c <__pow5mult+0xa0>
 8010034:	6820      	ldr	r0, [r4, #0]
 8010036:	b938      	cbnz	r0, 8010048 <__pow5mult+0x9c>
 8010038:	4622      	mov	r2, r4
 801003a:	4621      	mov	r1, r4
 801003c:	4630      	mov	r0, r6
 801003e:	f7ff ff0b 	bl	800fe58 <__multiply>
 8010042:	6020      	str	r0, [r4, #0]
 8010044:	f8c0 9000 	str.w	r9, [r0]
 8010048:	4604      	mov	r4, r0
 801004a:	e7e4      	b.n	8010016 <__pow5mult+0x6a>
 801004c:	4638      	mov	r0, r7
 801004e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010052:	bf00      	nop
 8010054:	0801b8b8 	.word	0x0801b8b8
 8010058:	0801b6e9 	.word	0x0801b6e9
 801005c:	0801b76c 	.word	0x0801b76c

08010060 <__lshift>:
 8010060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010064:	460c      	mov	r4, r1
 8010066:	6849      	ldr	r1, [r1, #4]
 8010068:	6923      	ldr	r3, [r4, #16]
 801006a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801006e:	68a3      	ldr	r3, [r4, #8]
 8010070:	4607      	mov	r7, r0
 8010072:	4691      	mov	r9, r2
 8010074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010078:	f108 0601 	add.w	r6, r8, #1
 801007c:	42b3      	cmp	r3, r6
 801007e:	db0b      	blt.n	8010098 <__lshift+0x38>
 8010080:	4638      	mov	r0, r7
 8010082:	f7ff fddb 	bl	800fc3c <_Balloc>
 8010086:	4605      	mov	r5, r0
 8010088:	b948      	cbnz	r0, 801009e <__lshift+0x3e>
 801008a:	4602      	mov	r2, r0
 801008c:	4b2a      	ldr	r3, [pc, #168]	; (8010138 <__lshift+0xd8>)
 801008e:	482b      	ldr	r0, [pc, #172]	; (801013c <__lshift+0xdc>)
 8010090:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010094:	f000 fbb8 	bl	8010808 <__assert_func>
 8010098:	3101      	adds	r1, #1
 801009a:	005b      	lsls	r3, r3, #1
 801009c:	e7ee      	b.n	801007c <__lshift+0x1c>
 801009e:	2300      	movs	r3, #0
 80100a0:	f100 0114 	add.w	r1, r0, #20
 80100a4:	f100 0210 	add.w	r2, r0, #16
 80100a8:	4618      	mov	r0, r3
 80100aa:	4553      	cmp	r3, sl
 80100ac:	db37      	blt.n	801011e <__lshift+0xbe>
 80100ae:	6920      	ldr	r0, [r4, #16]
 80100b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80100b4:	f104 0314 	add.w	r3, r4, #20
 80100b8:	f019 091f 	ands.w	r9, r9, #31
 80100bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80100c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80100c4:	d02f      	beq.n	8010126 <__lshift+0xc6>
 80100c6:	f1c9 0e20 	rsb	lr, r9, #32
 80100ca:	468a      	mov	sl, r1
 80100cc:	f04f 0c00 	mov.w	ip, #0
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	fa02 f209 	lsl.w	r2, r2, r9
 80100d6:	ea42 020c 	orr.w	r2, r2, ip
 80100da:	f84a 2b04 	str.w	r2, [sl], #4
 80100de:	f853 2b04 	ldr.w	r2, [r3], #4
 80100e2:	4298      	cmp	r0, r3
 80100e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80100e8:	d8f2      	bhi.n	80100d0 <__lshift+0x70>
 80100ea:	1b03      	subs	r3, r0, r4
 80100ec:	3b15      	subs	r3, #21
 80100ee:	f023 0303 	bic.w	r3, r3, #3
 80100f2:	3304      	adds	r3, #4
 80100f4:	f104 0215 	add.w	r2, r4, #21
 80100f8:	4290      	cmp	r0, r2
 80100fa:	bf38      	it	cc
 80100fc:	2304      	movcc	r3, #4
 80100fe:	f841 c003 	str.w	ip, [r1, r3]
 8010102:	f1bc 0f00 	cmp.w	ip, #0
 8010106:	d001      	beq.n	801010c <__lshift+0xac>
 8010108:	f108 0602 	add.w	r6, r8, #2
 801010c:	3e01      	subs	r6, #1
 801010e:	4638      	mov	r0, r7
 8010110:	612e      	str	r6, [r5, #16]
 8010112:	4621      	mov	r1, r4
 8010114:	f7ff fdd2 	bl	800fcbc <_Bfree>
 8010118:	4628      	mov	r0, r5
 801011a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801011e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010122:	3301      	adds	r3, #1
 8010124:	e7c1      	b.n	80100aa <__lshift+0x4a>
 8010126:	3904      	subs	r1, #4
 8010128:	f853 2b04 	ldr.w	r2, [r3], #4
 801012c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010130:	4298      	cmp	r0, r3
 8010132:	d8f9      	bhi.n	8010128 <__lshift+0xc8>
 8010134:	e7ea      	b.n	801010c <__lshift+0xac>
 8010136:	bf00      	nop
 8010138:	0801b75b 	.word	0x0801b75b
 801013c:	0801b76c 	.word	0x0801b76c

08010140 <__mcmp>:
 8010140:	b530      	push	{r4, r5, lr}
 8010142:	6902      	ldr	r2, [r0, #16]
 8010144:	690c      	ldr	r4, [r1, #16]
 8010146:	1b12      	subs	r2, r2, r4
 8010148:	d10e      	bne.n	8010168 <__mcmp+0x28>
 801014a:	f100 0314 	add.w	r3, r0, #20
 801014e:	3114      	adds	r1, #20
 8010150:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010154:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010158:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801015c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010160:	42a5      	cmp	r5, r4
 8010162:	d003      	beq.n	801016c <__mcmp+0x2c>
 8010164:	d305      	bcc.n	8010172 <__mcmp+0x32>
 8010166:	2201      	movs	r2, #1
 8010168:	4610      	mov	r0, r2
 801016a:	bd30      	pop	{r4, r5, pc}
 801016c:	4283      	cmp	r3, r0
 801016e:	d3f3      	bcc.n	8010158 <__mcmp+0x18>
 8010170:	e7fa      	b.n	8010168 <__mcmp+0x28>
 8010172:	f04f 32ff 	mov.w	r2, #4294967295
 8010176:	e7f7      	b.n	8010168 <__mcmp+0x28>

08010178 <__mdiff>:
 8010178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017c:	460c      	mov	r4, r1
 801017e:	4606      	mov	r6, r0
 8010180:	4611      	mov	r1, r2
 8010182:	4620      	mov	r0, r4
 8010184:	4690      	mov	r8, r2
 8010186:	f7ff ffdb 	bl	8010140 <__mcmp>
 801018a:	1e05      	subs	r5, r0, #0
 801018c:	d110      	bne.n	80101b0 <__mdiff+0x38>
 801018e:	4629      	mov	r1, r5
 8010190:	4630      	mov	r0, r6
 8010192:	f7ff fd53 	bl	800fc3c <_Balloc>
 8010196:	b930      	cbnz	r0, 80101a6 <__mdiff+0x2e>
 8010198:	4b3a      	ldr	r3, [pc, #232]	; (8010284 <__mdiff+0x10c>)
 801019a:	4602      	mov	r2, r0
 801019c:	f240 2132 	movw	r1, #562	; 0x232
 80101a0:	4839      	ldr	r0, [pc, #228]	; (8010288 <__mdiff+0x110>)
 80101a2:	f000 fb31 	bl	8010808 <__assert_func>
 80101a6:	2301      	movs	r3, #1
 80101a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80101ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b0:	bfa4      	itt	ge
 80101b2:	4643      	movge	r3, r8
 80101b4:	46a0      	movge	r8, r4
 80101b6:	4630      	mov	r0, r6
 80101b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80101bc:	bfa6      	itte	ge
 80101be:	461c      	movge	r4, r3
 80101c0:	2500      	movge	r5, #0
 80101c2:	2501      	movlt	r5, #1
 80101c4:	f7ff fd3a 	bl	800fc3c <_Balloc>
 80101c8:	b920      	cbnz	r0, 80101d4 <__mdiff+0x5c>
 80101ca:	4b2e      	ldr	r3, [pc, #184]	; (8010284 <__mdiff+0x10c>)
 80101cc:	4602      	mov	r2, r0
 80101ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80101d2:	e7e5      	b.n	80101a0 <__mdiff+0x28>
 80101d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80101d8:	6926      	ldr	r6, [r4, #16]
 80101da:	60c5      	str	r5, [r0, #12]
 80101dc:	f104 0914 	add.w	r9, r4, #20
 80101e0:	f108 0514 	add.w	r5, r8, #20
 80101e4:	f100 0e14 	add.w	lr, r0, #20
 80101e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80101ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80101f0:	f108 0210 	add.w	r2, r8, #16
 80101f4:	46f2      	mov	sl, lr
 80101f6:	2100      	movs	r1, #0
 80101f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80101fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010200:	fa1f f883 	uxth.w	r8, r3
 8010204:	fa11 f18b 	uxtah	r1, r1, fp
 8010208:	0c1b      	lsrs	r3, r3, #16
 801020a:	eba1 0808 	sub.w	r8, r1, r8
 801020e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010212:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010216:	fa1f f888 	uxth.w	r8, r8
 801021a:	1419      	asrs	r1, r3, #16
 801021c:	454e      	cmp	r6, r9
 801021e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010222:	f84a 3b04 	str.w	r3, [sl], #4
 8010226:	d8e7      	bhi.n	80101f8 <__mdiff+0x80>
 8010228:	1b33      	subs	r3, r6, r4
 801022a:	3b15      	subs	r3, #21
 801022c:	f023 0303 	bic.w	r3, r3, #3
 8010230:	3304      	adds	r3, #4
 8010232:	3415      	adds	r4, #21
 8010234:	42a6      	cmp	r6, r4
 8010236:	bf38      	it	cc
 8010238:	2304      	movcc	r3, #4
 801023a:	441d      	add	r5, r3
 801023c:	4473      	add	r3, lr
 801023e:	469e      	mov	lr, r3
 8010240:	462e      	mov	r6, r5
 8010242:	4566      	cmp	r6, ip
 8010244:	d30e      	bcc.n	8010264 <__mdiff+0xec>
 8010246:	f10c 0203 	add.w	r2, ip, #3
 801024a:	1b52      	subs	r2, r2, r5
 801024c:	f022 0203 	bic.w	r2, r2, #3
 8010250:	3d03      	subs	r5, #3
 8010252:	45ac      	cmp	ip, r5
 8010254:	bf38      	it	cc
 8010256:	2200      	movcc	r2, #0
 8010258:	441a      	add	r2, r3
 801025a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801025e:	b17b      	cbz	r3, 8010280 <__mdiff+0x108>
 8010260:	6107      	str	r7, [r0, #16]
 8010262:	e7a3      	b.n	80101ac <__mdiff+0x34>
 8010264:	f856 8b04 	ldr.w	r8, [r6], #4
 8010268:	fa11 f288 	uxtah	r2, r1, r8
 801026c:	1414      	asrs	r4, r2, #16
 801026e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010272:	b292      	uxth	r2, r2
 8010274:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010278:	f84e 2b04 	str.w	r2, [lr], #4
 801027c:	1421      	asrs	r1, r4, #16
 801027e:	e7e0      	b.n	8010242 <__mdiff+0xca>
 8010280:	3f01      	subs	r7, #1
 8010282:	e7ea      	b.n	801025a <__mdiff+0xe2>
 8010284:	0801b75b 	.word	0x0801b75b
 8010288:	0801b76c 	.word	0x0801b76c

0801028c <__d2b>:
 801028c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010290:	4689      	mov	r9, r1
 8010292:	2101      	movs	r1, #1
 8010294:	ec57 6b10 	vmov	r6, r7, d0
 8010298:	4690      	mov	r8, r2
 801029a:	f7ff fccf 	bl	800fc3c <_Balloc>
 801029e:	4604      	mov	r4, r0
 80102a0:	b930      	cbnz	r0, 80102b0 <__d2b+0x24>
 80102a2:	4602      	mov	r2, r0
 80102a4:	4b25      	ldr	r3, [pc, #148]	; (801033c <__d2b+0xb0>)
 80102a6:	4826      	ldr	r0, [pc, #152]	; (8010340 <__d2b+0xb4>)
 80102a8:	f240 310a 	movw	r1, #778	; 0x30a
 80102ac:	f000 faac 	bl	8010808 <__assert_func>
 80102b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80102b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80102b8:	bb35      	cbnz	r5, 8010308 <__d2b+0x7c>
 80102ba:	2e00      	cmp	r6, #0
 80102bc:	9301      	str	r3, [sp, #4]
 80102be:	d028      	beq.n	8010312 <__d2b+0x86>
 80102c0:	4668      	mov	r0, sp
 80102c2:	9600      	str	r6, [sp, #0]
 80102c4:	f7ff fd82 	bl	800fdcc <__lo0bits>
 80102c8:	9900      	ldr	r1, [sp, #0]
 80102ca:	b300      	cbz	r0, 801030e <__d2b+0x82>
 80102cc:	9a01      	ldr	r2, [sp, #4]
 80102ce:	f1c0 0320 	rsb	r3, r0, #32
 80102d2:	fa02 f303 	lsl.w	r3, r2, r3
 80102d6:	430b      	orrs	r3, r1
 80102d8:	40c2      	lsrs	r2, r0
 80102da:	6163      	str	r3, [r4, #20]
 80102dc:	9201      	str	r2, [sp, #4]
 80102de:	9b01      	ldr	r3, [sp, #4]
 80102e0:	61a3      	str	r3, [r4, #24]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	bf14      	ite	ne
 80102e6:	2202      	movne	r2, #2
 80102e8:	2201      	moveq	r2, #1
 80102ea:	6122      	str	r2, [r4, #16]
 80102ec:	b1d5      	cbz	r5, 8010324 <__d2b+0x98>
 80102ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80102f2:	4405      	add	r5, r0
 80102f4:	f8c9 5000 	str.w	r5, [r9]
 80102f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102fc:	f8c8 0000 	str.w	r0, [r8]
 8010300:	4620      	mov	r0, r4
 8010302:	b003      	add	sp, #12
 8010304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801030c:	e7d5      	b.n	80102ba <__d2b+0x2e>
 801030e:	6161      	str	r1, [r4, #20]
 8010310:	e7e5      	b.n	80102de <__d2b+0x52>
 8010312:	a801      	add	r0, sp, #4
 8010314:	f7ff fd5a 	bl	800fdcc <__lo0bits>
 8010318:	9b01      	ldr	r3, [sp, #4]
 801031a:	6163      	str	r3, [r4, #20]
 801031c:	2201      	movs	r2, #1
 801031e:	6122      	str	r2, [r4, #16]
 8010320:	3020      	adds	r0, #32
 8010322:	e7e3      	b.n	80102ec <__d2b+0x60>
 8010324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801032c:	f8c9 0000 	str.w	r0, [r9]
 8010330:	6918      	ldr	r0, [r3, #16]
 8010332:	f7ff fd2b 	bl	800fd8c <__hi0bits>
 8010336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801033a:	e7df      	b.n	80102fc <__d2b+0x70>
 801033c:	0801b75b 	.word	0x0801b75b
 8010340:	0801b76c 	.word	0x0801b76c

08010344 <_calloc_r>:
 8010344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010346:	fba1 2402 	umull	r2, r4, r1, r2
 801034a:	b94c      	cbnz	r4, 8010360 <_calloc_r+0x1c>
 801034c:	4611      	mov	r1, r2
 801034e:	9201      	str	r2, [sp, #4]
 8010350:	f000 f87a 	bl	8010448 <_malloc_r>
 8010354:	9a01      	ldr	r2, [sp, #4]
 8010356:	4605      	mov	r5, r0
 8010358:	b930      	cbnz	r0, 8010368 <_calloc_r+0x24>
 801035a:	4628      	mov	r0, r5
 801035c:	b003      	add	sp, #12
 801035e:	bd30      	pop	{r4, r5, pc}
 8010360:	220c      	movs	r2, #12
 8010362:	6002      	str	r2, [r0, #0]
 8010364:	2500      	movs	r5, #0
 8010366:	e7f8      	b.n	801035a <_calloc_r+0x16>
 8010368:	4621      	mov	r1, r4
 801036a:	f7fe f9d5 	bl	800e718 <memset>
 801036e:	e7f4      	b.n	801035a <_calloc_r+0x16>

08010370 <_free_r>:
 8010370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010372:	2900      	cmp	r1, #0
 8010374:	d044      	beq.n	8010400 <_free_r+0x90>
 8010376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801037a:	9001      	str	r0, [sp, #4]
 801037c:	2b00      	cmp	r3, #0
 801037e:	f1a1 0404 	sub.w	r4, r1, #4
 8010382:	bfb8      	it	lt
 8010384:	18e4      	addlt	r4, r4, r3
 8010386:	f000 fa9b 	bl	80108c0 <__malloc_lock>
 801038a:	4a1e      	ldr	r2, [pc, #120]	; (8010404 <_free_r+0x94>)
 801038c:	9801      	ldr	r0, [sp, #4]
 801038e:	6813      	ldr	r3, [r2, #0]
 8010390:	b933      	cbnz	r3, 80103a0 <_free_r+0x30>
 8010392:	6063      	str	r3, [r4, #4]
 8010394:	6014      	str	r4, [r2, #0]
 8010396:	b003      	add	sp, #12
 8010398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801039c:	f000 ba96 	b.w	80108cc <__malloc_unlock>
 80103a0:	42a3      	cmp	r3, r4
 80103a2:	d908      	bls.n	80103b6 <_free_r+0x46>
 80103a4:	6825      	ldr	r5, [r4, #0]
 80103a6:	1961      	adds	r1, r4, r5
 80103a8:	428b      	cmp	r3, r1
 80103aa:	bf01      	itttt	eq
 80103ac:	6819      	ldreq	r1, [r3, #0]
 80103ae:	685b      	ldreq	r3, [r3, #4]
 80103b0:	1949      	addeq	r1, r1, r5
 80103b2:	6021      	streq	r1, [r4, #0]
 80103b4:	e7ed      	b.n	8010392 <_free_r+0x22>
 80103b6:	461a      	mov	r2, r3
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	b10b      	cbz	r3, 80103c0 <_free_r+0x50>
 80103bc:	42a3      	cmp	r3, r4
 80103be:	d9fa      	bls.n	80103b6 <_free_r+0x46>
 80103c0:	6811      	ldr	r1, [r2, #0]
 80103c2:	1855      	adds	r5, r2, r1
 80103c4:	42a5      	cmp	r5, r4
 80103c6:	d10b      	bne.n	80103e0 <_free_r+0x70>
 80103c8:	6824      	ldr	r4, [r4, #0]
 80103ca:	4421      	add	r1, r4
 80103cc:	1854      	adds	r4, r2, r1
 80103ce:	42a3      	cmp	r3, r4
 80103d0:	6011      	str	r1, [r2, #0]
 80103d2:	d1e0      	bne.n	8010396 <_free_r+0x26>
 80103d4:	681c      	ldr	r4, [r3, #0]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	6053      	str	r3, [r2, #4]
 80103da:	4421      	add	r1, r4
 80103dc:	6011      	str	r1, [r2, #0]
 80103de:	e7da      	b.n	8010396 <_free_r+0x26>
 80103e0:	d902      	bls.n	80103e8 <_free_r+0x78>
 80103e2:	230c      	movs	r3, #12
 80103e4:	6003      	str	r3, [r0, #0]
 80103e6:	e7d6      	b.n	8010396 <_free_r+0x26>
 80103e8:	6825      	ldr	r5, [r4, #0]
 80103ea:	1961      	adds	r1, r4, r5
 80103ec:	428b      	cmp	r3, r1
 80103ee:	bf04      	itt	eq
 80103f0:	6819      	ldreq	r1, [r3, #0]
 80103f2:	685b      	ldreq	r3, [r3, #4]
 80103f4:	6063      	str	r3, [r4, #4]
 80103f6:	bf04      	itt	eq
 80103f8:	1949      	addeq	r1, r1, r5
 80103fa:	6021      	streq	r1, [r4, #0]
 80103fc:	6054      	str	r4, [r2, #4]
 80103fe:	e7ca      	b.n	8010396 <_free_r+0x26>
 8010400:	b003      	add	sp, #12
 8010402:	bd30      	pop	{r4, r5, pc}
 8010404:	2400f2f8 	.word	0x2400f2f8

08010408 <sbrk_aligned>:
 8010408:	b570      	push	{r4, r5, r6, lr}
 801040a:	4e0e      	ldr	r6, [pc, #56]	; (8010444 <sbrk_aligned+0x3c>)
 801040c:	460c      	mov	r4, r1
 801040e:	6831      	ldr	r1, [r6, #0]
 8010410:	4605      	mov	r5, r0
 8010412:	b911      	cbnz	r1, 801041a <sbrk_aligned+0x12>
 8010414:	f000 f9e8 	bl	80107e8 <_sbrk_r>
 8010418:	6030      	str	r0, [r6, #0]
 801041a:	4621      	mov	r1, r4
 801041c:	4628      	mov	r0, r5
 801041e:	f000 f9e3 	bl	80107e8 <_sbrk_r>
 8010422:	1c43      	adds	r3, r0, #1
 8010424:	d00a      	beq.n	801043c <sbrk_aligned+0x34>
 8010426:	1cc4      	adds	r4, r0, #3
 8010428:	f024 0403 	bic.w	r4, r4, #3
 801042c:	42a0      	cmp	r0, r4
 801042e:	d007      	beq.n	8010440 <sbrk_aligned+0x38>
 8010430:	1a21      	subs	r1, r4, r0
 8010432:	4628      	mov	r0, r5
 8010434:	f000 f9d8 	bl	80107e8 <_sbrk_r>
 8010438:	3001      	adds	r0, #1
 801043a:	d101      	bne.n	8010440 <sbrk_aligned+0x38>
 801043c:	f04f 34ff 	mov.w	r4, #4294967295
 8010440:	4620      	mov	r0, r4
 8010442:	bd70      	pop	{r4, r5, r6, pc}
 8010444:	2400f2fc 	.word	0x2400f2fc

08010448 <_malloc_r>:
 8010448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801044c:	1ccd      	adds	r5, r1, #3
 801044e:	f025 0503 	bic.w	r5, r5, #3
 8010452:	3508      	adds	r5, #8
 8010454:	2d0c      	cmp	r5, #12
 8010456:	bf38      	it	cc
 8010458:	250c      	movcc	r5, #12
 801045a:	2d00      	cmp	r5, #0
 801045c:	4607      	mov	r7, r0
 801045e:	db01      	blt.n	8010464 <_malloc_r+0x1c>
 8010460:	42a9      	cmp	r1, r5
 8010462:	d905      	bls.n	8010470 <_malloc_r+0x28>
 8010464:	230c      	movs	r3, #12
 8010466:	603b      	str	r3, [r7, #0]
 8010468:	2600      	movs	r6, #0
 801046a:	4630      	mov	r0, r6
 801046c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010470:	4e2e      	ldr	r6, [pc, #184]	; (801052c <_malloc_r+0xe4>)
 8010472:	f000 fa25 	bl	80108c0 <__malloc_lock>
 8010476:	6833      	ldr	r3, [r6, #0]
 8010478:	461c      	mov	r4, r3
 801047a:	bb34      	cbnz	r4, 80104ca <_malloc_r+0x82>
 801047c:	4629      	mov	r1, r5
 801047e:	4638      	mov	r0, r7
 8010480:	f7ff ffc2 	bl	8010408 <sbrk_aligned>
 8010484:	1c43      	adds	r3, r0, #1
 8010486:	4604      	mov	r4, r0
 8010488:	d14d      	bne.n	8010526 <_malloc_r+0xde>
 801048a:	6834      	ldr	r4, [r6, #0]
 801048c:	4626      	mov	r6, r4
 801048e:	2e00      	cmp	r6, #0
 8010490:	d140      	bne.n	8010514 <_malloc_r+0xcc>
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	4631      	mov	r1, r6
 8010496:	4638      	mov	r0, r7
 8010498:	eb04 0803 	add.w	r8, r4, r3
 801049c:	f000 f9a4 	bl	80107e8 <_sbrk_r>
 80104a0:	4580      	cmp	r8, r0
 80104a2:	d13a      	bne.n	801051a <_malloc_r+0xd2>
 80104a4:	6821      	ldr	r1, [r4, #0]
 80104a6:	3503      	adds	r5, #3
 80104a8:	1a6d      	subs	r5, r5, r1
 80104aa:	f025 0503 	bic.w	r5, r5, #3
 80104ae:	3508      	adds	r5, #8
 80104b0:	2d0c      	cmp	r5, #12
 80104b2:	bf38      	it	cc
 80104b4:	250c      	movcc	r5, #12
 80104b6:	4629      	mov	r1, r5
 80104b8:	4638      	mov	r0, r7
 80104ba:	f7ff ffa5 	bl	8010408 <sbrk_aligned>
 80104be:	3001      	adds	r0, #1
 80104c0:	d02b      	beq.n	801051a <_malloc_r+0xd2>
 80104c2:	6823      	ldr	r3, [r4, #0]
 80104c4:	442b      	add	r3, r5
 80104c6:	6023      	str	r3, [r4, #0]
 80104c8:	e00e      	b.n	80104e8 <_malloc_r+0xa0>
 80104ca:	6822      	ldr	r2, [r4, #0]
 80104cc:	1b52      	subs	r2, r2, r5
 80104ce:	d41e      	bmi.n	801050e <_malloc_r+0xc6>
 80104d0:	2a0b      	cmp	r2, #11
 80104d2:	d916      	bls.n	8010502 <_malloc_r+0xba>
 80104d4:	1961      	adds	r1, r4, r5
 80104d6:	42a3      	cmp	r3, r4
 80104d8:	6025      	str	r5, [r4, #0]
 80104da:	bf18      	it	ne
 80104dc:	6059      	strne	r1, [r3, #4]
 80104de:	6863      	ldr	r3, [r4, #4]
 80104e0:	bf08      	it	eq
 80104e2:	6031      	streq	r1, [r6, #0]
 80104e4:	5162      	str	r2, [r4, r5]
 80104e6:	604b      	str	r3, [r1, #4]
 80104e8:	4638      	mov	r0, r7
 80104ea:	f104 060b 	add.w	r6, r4, #11
 80104ee:	f000 f9ed 	bl	80108cc <__malloc_unlock>
 80104f2:	f026 0607 	bic.w	r6, r6, #7
 80104f6:	1d23      	adds	r3, r4, #4
 80104f8:	1af2      	subs	r2, r6, r3
 80104fa:	d0b6      	beq.n	801046a <_malloc_r+0x22>
 80104fc:	1b9b      	subs	r3, r3, r6
 80104fe:	50a3      	str	r3, [r4, r2]
 8010500:	e7b3      	b.n	801046a <_malloc_r+0x22>
 8010502:	6862      	ldr	r2, [r4, #4]
 8010504:	42a3      	cmp	r3, r4
 8010506:	bf0c      	ite	eq
 8010508:	6032      	streq	r2, [r6, #0]
 801050a:	605a      	strne	r2, [r3, #4]
 801050c:	e7ec      	b.n	80104e8 <_malloc_r+0xa0>
 801050e:	4623      	mov	r3, r4
 8010510:	6864      	ldr	r4, [r4, #4]
 8010512:	e7b2      	b.n	801047a <_malloc_r+0x32>
 8010514:	4634      	mov	r4, r6
 8010516:	6876      	ldr	r6, [r6, #4]
 8010518:	e7b9      	b.n	801048e <_malloc_r+0x46>
 801051a:	230c      	movs	r3, #12
 801051c:	603b      	str	r3, [r7, #0]
 801051e:	4638      	mov	r0, r7
 8010520:	f000 f9d4 	bl	80108cc <__malloc_unlock>
 8010524:	e7a1      	b.n	801046a <_malloc_r+0x22>
 8010526:	6025      	str	r5, [r4, #0]
 8010528:	e7de      	b.n	80104e8 <_malloc_r+0xa0>
 801052a:	bf00      	nop
 801052c:	2400f2f8 	.word	0x2400f2f8

08010530 <__ssputs_r>:
 8010530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010534:	688e      	ldr	r6, [r1, #8]
 8010536:	429e      	cmp	r6, r3
 8010538:	4682      	mov	sl, r0
 801053a:	460c      	mov	r4, r1
 801053c:	4690      	mov	r8, r2
 801053e:	461f      	mov	r7, r3
 8010540:	d838      	bhi.n	80105b4 <__ssputs_r+0x84>
 8010542:	898a      	ldrh	r2, [r1, #12]
 8010544:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010548:	d032      	beq.n	80105b0 <__ssputs_r+0x80>
 801054a:	6825      	ldr	r5, [r4, #0]
 801054c:	6909      	ldr	r1, [r1, #16]
 801054e:	eba5 0901 	sub.w	r9, r5, r1
 8010552:	6965      	ldr	r5, [r4, #20]
 8010554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801055c:	3301      	adds	r3, #1
 801055e:	444b      	add	r3, r9
 8010560:	106d      	asrs	r5, r5, #1
 8010562:	429d      	cmp	r5, r3
 8010564:	bf38      	it	cc
 8010566:	461d      	movcc	r5, r3
 8010568:	0553      	lsls	r3, r2, #21
 801056a:	d531      	bpl.n	80105d0 <__ssputs_r+0xa0>
 801056c:	4629      	mov	r1, r5
 801056e:	f7ff ff6b 	bl	8010448 <_malloc_r>
 8010572:	4606      	mov	r6, r0
 8010574:	b950      	cbnz	r0, 801058c <__ssputs_r+0x5c>
 8010576:	230c      	movs	r3, #12
 8010578:	f8ca 3000 	str.w	r3, [sl]
 801057c:	89a3      	ldrh	r3, [r4, #12]
 801057e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010582:	81a3      	strh	r3, [r4, #12]
 8010584:	f04f 30ff 	mov.w	r0, #4294967295
 8010588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801058c:	6921      	ldr	r1, [r4, #16]
 801058e:	464a      	mov	r2, r9
 8010590:	f7fe f8b4 	bl	800e6fc <memcpy>
 8010594:	89a3      	ldrh	r3, [r4, #12]
 8010596:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801059a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801059e:	81a3      	strh	r3, [r4, #12]
 80105a0:	6126      	str	r6, [r4, #16]
 80105a2:	6165      	str	r5, [r4, #20]
 80105a4:	444e      	add	r6, r9
 80105a6:	eba5 0509 	sub.w	r5, r5, r9
 80105aa:	6026      	str	r6, [r4, #0]
 80105ac:	60a5      	str	r5, [r4, #8]
 80105ae:	463e      	mov	r6, r7
 80105b0:	42be      	cmp	r6, r7
 80105b2:	d900      	bls.n	80105b6 <__ssputs_r+0x86>
 80105b4:	463e      	mov	r6, r7
 80105b6:	6820      	ldr	r0, [r4, #0]
 80105b8:	4632      	mov	r2, r6
 80105ba:	4641      	mov	r1, r8
 80105bc:	f000 f966 	bl	801088c <memmove>
 80105c0:	68a3      	ldr	r3, [r4, #8]
 80105c2:	1b9b      	subs	r3, r3, r6
 80105c4:	60a3      	str	r3, [r4, #8]
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	4433      	add	r3, r6
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	2000      	movs	r0, #0
 80105ce:	e7db      	b.n	8010588 <__ssputs_r+0x58>
 80105d0:	462a      	mov	r2, r5
 80105d2:	f000 f981 	bl	80108d8 <_realloc_r>
 80105d6:	4606      	mov	r6, r0
 80105d8:	2800      	cmp	r0, #0
 80105da:	d1e1      	bne.n	80105a0 <__ssputs_r+0x70>
 80105dc:	6921      	ldr	r1, [r4, #16]
 80105de:	4650      	mov	r0, sl
 80105e0:	f7ff fec6 	bl	8010370 <_free_r>
 80105e4:	e7c7      	b.n	8010576 <__ssputs_r+0x46>
	...

080105e8 <_svfiprintf_r>:
 80105e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ec:	4698      	mov	r8, r3
 80105ee:	898b      	ldrh	r3, [r1, #12]
 80105f0:	061b      	lsls	r3, r3, #24
 80105f2:	b09d      	sub	sp, #116	; 0x74
 80105f4:	4607      	mov	r7, r0
 80105f6:	460d      	mov	r5, r1
 80105f8:	4614      	mov	r4, r2
 80105fa:	d50e      	bpl.n	801061a <_svfiprintf_r+0x32>
 80105fc:	690b      	ldr	r3, [r1, #16]
 80105fe:	b963      	cbnz	r3, 801061a <_svfiprintf_r+0x32>
 8010600:	2140      	movs	r1, #64	; 0x40
 8010602:	f7ff ff21 	bl	8010448 <_malloc_r>
 8010606:	6028      	str	r0, [r5, #0]
 8010608:	6128      	str	r0, [r5, #16]
 801060a:	b920      	cbnz	r0, 8010616 <_svfiprintf_r+0x2e>
 801060c:	230c      	movs	r3, #12
 801060e:	603b      	str	r3, [r7, #0]
 8010610:	f04f 30ff 	mov.w	r0, #4294967295
 8010614:	e0d1      	b.n	80107ba <_svfiprintf_r+0x1d2>
 8010616:	2340      	movs	r3, #64	; 0x40
 8010618:	616b      	str	r3, [r5, #20]
 801061a:	2300      	movs	r3, #0
 801061c:	9309      	str	r3, [sp, #36]	; 0x24
 801061e:	2320      	movs	r3, #32
 8010620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010624:	f8cd 800c 	str.w	r8, [sp, #12]
 8010628:	2330      	movs	r3, #48	; 0x30
 801062a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80107d4 <_svfiprintf_r+0x1ec>
 801062e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010632:	f04f 0901 	mov.w	r9, #1
 8010636:	4623      	mov	r3, r4
 8010638:	469a      	mov	sl, r3
 801063a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801063e:	b10a      	cbz	r2, 8010644 <_svfiprintf_r+0x5c>
 8010640:	2a25      	cmp	r2, #37	; 0x25
 8010642:	d1f9      	bne.n	8010638 <_svfiprintf_r+0x50>
 8010644:	ebba 0b04 	subs.w	fp, sl, r4
 8010648:	d00b      	beq.n	8010662 <_svfiprintf_r+0x7a>
 801064a:	465b      	mov	r3, fp
 801064c:	4622      	mov	r2, r4
 801064e:	4629      	mov	r1, r5
 8010650:	4638      	mov	r0, r7
 8010652:	f7ff ff6d 	bl	8010530 <__ssputs_r>
 8010656:	3001      	adds	r0, #1
 8010658:	f000 80aa 	beq.w	80107b0 <_svfiprintf_r+0x1c8>
 801065c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801065e:	445a      	add	r2, fp
 8010660:	9209      	str	r2, [sp, #36]	; 0x24
 8010662:	f89a 3000 	ldrb.w	r3, [sl]
 8010666:	2b00      	cmp	r3, #0
 8010668:	f000 80a2 	beq.w	80107b0 <_svfiprintf_r+0x1c8>
 801066c:	2300      	movs	r3, #0
 801066e:	f04f 32ff 	mov.w	r2, #4294967295
 8010672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010676:	f10a 0a01 	add.w	sl, sl, #1
 801067a:	9304      	str	r3, [sp, #16]
 801067c:	9307      	str	r3, [sp, #28]
 801067e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010682:	931a      	str	r3, [sp, #104]	; 0x68
 8010684:	4654      	mov	r4, sl
 8010686:	2205      	movs	r2, #5
 8010688:	f814 1b01 	ldrb.w	r1, [r4], #1
 801068c:	4851      	ldr	r0, [pc, #324]	; (80107d4 <_svfiprintf_r+0x1ec>)
 801068e:	f7ef fe2f 	bl	80002f0 <memchr>
 8010692:	9a04      	ldr	r2, [sp, #16]
 8010694:	b9d8      	cbnz	r0, 80106ce <_svfiprintf_r+0xe6>
 8010696:	06d0      	lsls	r0, r2, #27
 8010698:	bf44      	itt	mi
 801069a:	2320      	movmi	r3, #32
 801069c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106a0:	0711      	lsls	r1, r2, #28
 80106a2:	bf44      	itt	mi
 80106a4:	232b      	movmi	r3, #43	; 0x2b
 80106a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106aa:	f89a 3000 	ldrb.w	r3, [sl]
 80106ae:	2b2a      	cmp	r3, #42	; 0x2a
 80106b0:	d015      	beq.n	80106de <_svfiprintf_r+0xf6>
 80106b2:	9a07      	ldr	r2, [sp, #28]
 80106b4:	4654      	mov	r4, sl
 80106b6:	2000      	movs	r0, #0
 80106b8:	f04f 0c0a 	mov.w	ip, #10
 80106bc:	4621      	mov	r1, r4
 80106be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106c2:	3b30      	subs	r3, #48	; 0x30
 80106c4:	2b09      	cmp	r3, #9
 80106c6:	d94e      	bls.n	8010766 <_svfiprintf_r+0x17e>
 80106c8:	b1b0      	cbz	r0, 80106f8 <_svfiprintf_r+0x110>
 80106ca:	9207      	str	r2, [sp, #28]
 80106cc:	e014      	b.n	80106f8 <_svfiprintf_r+0x110>
 80106ce:	eba0 0308 	sub.w	r3, r0, r8
 80106d2:	fa09 f303 	lsl.w	r3, r9, r3
 80106d6:	4313      	orrs	r3, r2
 80106d8:	9304      	str	r3, [sp, #16]
 80106da:	46a2      	mov	sl, r4
 80106dc:	e7d2      	b.n	8010684 <_svfiprintf_r+0x9c>
 80106de:	9b03      	ldr	r3, [sp, #12]
 80106e0:	1d19      	adds	r1, r3, #4
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	9103      	str	r1, [sp, #12]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	bfbb      	ittet	lt
 80106ea:	425b      	neglt	r3, r3
 80106ec:	f042 0202 	orrlt.w	r2, r2, #2
 80106f0:	9307      	strge	r3, [sp, #28]
 80106f2:	9307      	strlt	r3, [sp, #28]
 80106f4:	bfb8      	it	lt
 80106f6:	9204      	strlt	r2, [sp, #16]
 80106f8:	7823      	ldrb	r3, [r4, #0]
 80106fa:	2b2e      	cmp	r3, #46	; 0x2e
 80106fc:	d10c      	bne.n	8010718 <_svfiprintf_r+0x130>
 80106fe:	7863      	ldrb	r3, [r4, #1]
 8010700:	2b2a      	cmp	r3, #42	; 0x2a
 8010702:	d135      	bne.n	8010770 <_svfiprintf_r+0x188>
 8010704:	9b03      	ldr	r3, [sp, #12]
 8010706:	1d1a      	adds	r2, r3, #4
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	9203      	str	r2, [sp, #12]
 801070c:	2b00      	cmp	r3, #0
 801070e:	bfb8      	it	lt
 8010710:	f04f 33ff 	movlt.w	r3, #4294967295
 8010714:	3402      	adds	r4, #2
 8010716:	9305      	str	r3, [sp, #20]
 8010718:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80107e4 <_svfiprintf_r+0x1fc>
 801071c:	7821      	ldrb	r1, [r4, #0]
 801071e:	2203      	movs	r2, #3
 8010720:	4650      	mov	r0, sl
 8010722:	f7ef fde5 	bl	80002f0 <memchr>
 8010726:	b140      	cbz	r0, 801073a <_svfiprintf_r+0x152>
 8010728:	2340      	movs	r3, #64	; 0x40
 801072a:	eba0 000a 	sub.w	r0, r0, sl
 801072e:	fa03 f000 	lsl.w	r0, r3, r0
 8010732:	9b04      	ldr	r3, [sp, #16]
 8010734:	4303      	orrs	r3, r0
 8010736:	3401      	adds	r4, #1
 8010738:	9304      	str	r3, [sp, #16]
 801073a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801073e:	4826      	ldr	r0, [pc, #152]	; (80107d8 <_svfiprintf_r+0x1f0>)
 8010740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010744:	2206      	movs	r2, #6
 8010746:	f7ef fdd3 	bl	80002f0 <memchr>
 801074a:	2800      	cmp	r0, #0
 801074c:	d038      	beq.n	80107c0 <_svfiprintf_r+0x1d8>
 801074e:	4b23      	ldr	r3, [pc, #140]	; (80107dc <_svfiprintf_r+0x1f4>)
 8010750:	bb1b      	cbnz	r3, 801079a <_svfiprintf_r+0x1b2>
 8010752:	9b03      	ldr	r3, [sp, #12]
 8010754:	3307      	adds	r3, #7
 8010756:	f023 0307 	bic.w	r3, r3, #7
 801075a:	3308      	adds	r3, #8
 801075c:	9303      	str	r3, [sp, #12]
 801075e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010760:	4433      	add	r3, r6
 8010762:	9309      	str	r3, [sp, #36]	; 0x24
 8010764:	e767      	b.n	8010636 <_svfiprintf_r+0x4e>
 8010766:	fb0c 3202 	mla	r2, ip, r2, r3
 801076a:	460c      	mov	r4, r1
 801076c:	2001      	movs	r0, #1
 801076e:	e7a5      	b.n	80106bc <_svfiprintf_r+0xd4>
 8010770:	2300      	movs	r3, #0
 8010772:	3401      	adds	r4, #1
 8010774:	9305      	str	r3, [sp, #20]
 8010776:	4619      	mov	r1, r3
 8010778:	f04f 0c0a 	mov.w	ip, #10
 801077c:	4620      	mov	r0, r4
 801077e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010782:	3a30      	subs	r2, #48	; 0x30
 8010784:	2a09      	cmp	r2, #9
 8010786:	d903      	bls.n	8010790 <_svfiprintf_r+0x1a8>
 8010788:	2b00      	cmp	r3, #0
 801078a:	d0c5      	beq.n	8010718 <_svfiprintf_r+0x130>
 801078c:	9105      	str	r1, [sp, #20]
 801078e:	e7c3      	b.n	8010718 <_svfiprintf_r+0x130>
 8010790:	fb0c 2101 	mla	r1, ip, r1, r2
 8010794:	4604      	mov	r4, r0
 8010796:	2301      	movs	r3, #1
 8010798:	e7f0      	b.n	801077c <_svfiprintf_r+0x194>
 801079a:	ab03      	add	r3, sp, #12
 801079c:	9300      	str	r3, [sp, #0]
 801079e:	462a      	mov	r2, r5
 80107a0:	4b0f      	ldr	r3, [pc, #60]	; (80107e0 <_svfiprintf_r+0x1f8>)
 80107a2:	a904      	add	r1, sp, #16
 80107a4:	4638      	mov	r0, r7
 80107a6:	f7fe f84f 	bl	800e848 <_printf_float>
 80107aa:	1c42      	adds	r2, r0, #1
 80107ac:	4606      	mov	r6, r0
 80107ae:	d1d6      	bne.n	801075e <_svfiprintf_r+0x176>
 80107b0:	89ab      	ldrh	r3, [r5, #12]
 80107b2:	065b      	lsls	r3, r3, #25
 80107b4:	f53f af2c 	bmi.w	8010610 <_svfiprintf_r+0x28>
 80107b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107ba:	b01d      	add	sp, #116	; 0x74
 80107bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c0:	ab03      	add	r3, sp, #12
 80107c2:	9300      	str	r3, [sp, #0]
 80107c4:	462a      	mov	r2, r5
 80107c6:	4b06      	ldr	r3, [pc, #24]	; (80107e0 <_svfiprintf_r+0x1f8>)
 80107c8:	a904      	add	r1, sp, #16
 80107ca:	4638      	mov	r0, r7
 80107cc:	f7fe fac8 	bl	800ed60 <_printf_i>
 80107d0:	e7eb      	b.n	80107aa <_svfiprintf_r+0x1c2>
 80107d2:	bf00      	nop
 80107d4:	0801b8c4 	.word	0x0801b8c4
 80107d8:	0801b8ce 	.word	0x0801b8ce
 80107dc:	0800e849 	.word	0x0800e849
 80107e0:	08010531 	.word	0x08010531
 80107e4:	0801b8ca 	.word	0x0801b8ca

080107e8 <_sbrk_r>:
 80107e8:	b538      	push	{r3, r4, r5, lr}
 80107ea:	4d06      	ldr	r5, [pc, #24]	; (8010804 <_sbrk_r+0x1c>)
 80107ec:	2300      	movs	r3, #0
 80107ee:	4604      	mov	r4, r0
 80107f0:	4608      	mov	r0, r1
 80107f2:	602b      	str	r3, [r5, #0]
 80107f4:	f7f3 fc90 	bl	8004118 <_sbrk>
 80107f8:	1c43      	adds	r3, r0, #1
 80107fa:	d102      	bne.n	8010802 <_sbrk_r+0x1a>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	b103      	cbz	r3, 8010802 <_sbrk_r+0x1a>
 8010800:	6023      	str	r3, [r4, #0]
 8010802:	bd38      	pop	{r3, r4, r5, pc}
 8010804:	2400f300 	.word	0x2400f300

08010808 <__assert_func>:
 8010808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801080a:	4614      	mov	r4, r2
 801080c:	461a      	mov	r2, r3
 801080e:	4b09      	ldr	r3, [pc, #36]	; (8010834 <__assert_func+0x2c>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	4605      	mov	r5, r0
 8010814:	68d8      	ldr	r0, [r3, #12]
 8010816:	b14c      	cbz	r4, 801082c <__assert_func+0x24>
 8010818:	4b07      	ldr	r3, [pc, #28]	; (8010838 <__assert_func+0x30>)
 801081a:	9100      	str	r1, [sp, #0]
 801081c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010820:	4906      	ldr	r1, [pc, #24]	; (801083c <__assert_func+0x34>)
 8010822:	462b      	mov	r3, r5
 8010824:	f000 f80e 	bl	8010844 <fiprintf>
 8010828:	f000 faac 	bl	8010d84 <abort>
 801082c:	4b04      	ldr	r3, [pc, #16]	; (8010840 <__assert_func+0x38>)
 801082e:	461c      	mov	r4, r3
 8010830:	e7f3      	b.n	801081a <__assert_func+0x12>
 8010832:	bf00      	nop
 8010834:	24000378 	.word	0x24000378
 8010838:	0801b8d5 	.word	0x0801b8d5
 801083c:	0801b8e2 	.word	0x0801b8e2
 8010840:	0801b910 	.word	0x0801b910

08010844 <fiprintf>:
 8010844:	b40e      	push	{r1, r2, r3}
 8010846:	b503      	push	{r0, r1, lr}
 8010848:	4601      	mov	r1, r0
 801084a:	ab03      	add	r3, sp, #12
 801084c:	4805      	ldr	r0, [pc, #20]	; (8010864 <fiprintf+0x20>)
 801084e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010852:	6800      	ldr	r0, [r0, #0]
 8010854:	9301      	str	r3, [sp, #4]
 8010856:	f000 f897 	bl	8010988 <_vfiprintf_r>
 801085a:	b002      	add	sp, #8
 801085c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010860:	b003      	add	sp, #12
 8010862:	4770      	bx	lr
 8010864:	24000378 	.word	0x24000378

08010868 <__ascii_mbtowc>:
 8010868:	b082      	sub	sp, #8
 801086a:	b901      	cbnz	r1, 801086e <__ascii_mbtowc+0x6>
 801086c:	a901      	add	r1, sp, #4
 801086e:	b142      	cbz	r2, 8010882 <__ascii_mbtowc+0x1a>
 8010870:	b14b      	cbz	r3, 8010886 <__ascii_mbtowc+0x1e>
 8010872:	7813      	ldrb	r3, [r2, #0]
 8010874:	600b      	str	r3, [r1, #0]
 8010876:	7812      	ldrb	r2, [r2, #0]
 8010878:	1e10      	subs	r0, r2, #0
 801087a:	bf18      	it	ne
 801087c:	2001      	movne	r0, #1
 801087e:	b002      	add	sp, #8
 8010880:	4770      	bx	lr
 8010882:	4610      	mov	r0, r2
 8010884:	e7fb      	b.n	801087e <__ascii_mbtowc+0x16>
 8010886:	f06f 0001 	mvn.w	r0, #1
 801088a:	e7f8      	b.n	801087e <__ascii_mbtowc+0x16>

0801088c <memmove>:
 801088c:	4288      	cmp	r0, r1
 801088e:	b510      	push	{r4, lr}
 8010890:	eb01 0402 	add.w	r4, r1, r2
 8010894:	d902      	bls.n	801089c <memmove+0x10>
 8010896:	4284      	cmp	r4, r0
 8010898:	4623      	mov	r3, r4
 801089a:	d807      	bhi.n	80108ac <memmove+0x20>
 801089c:	1e43      	subs	r3, r0, #1
 801089e:	42a1      	cmp	r1, r4
 80108a0:	d008      	beq.n	80108b4 <memmove+0x28>
 80108a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108aa:	e7f8      	b.n	801089e <memmove+0x12>
 80108ac:	4402      	add	r2, r0
 80108ae:	4601      	mov	r1, r0
 80108b0:	428a      	cmp	r2, r1
 80108b2:	d100      	bne.n	80108b6 <memmove+0x2a>
 80108b4:	bd10      	pop	{r4, pc}
 80108b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80108be:	e7f7      	b.n	80108b0 <memmove+0x24>

080108c0 <__malloc_lock>:
 80108c0:	4801      	ldr	r0, [pc, #4]	; (80108c8 <__malloc_lock+0x8>)
 80108c2:	f000 bc1f 	b.w	8011104 <__retarget_lock_acquire_recursive>
 80108c6:	bf00      	nop
 80108c8:	2400f304 	.word	0x2400f304

080108cc <__malloc_unlock>:
 80108cc:	4801      	ldr	r0, [pc, #4]	; (80108d4 <__malloc_unlock+0x8>)
 80108ce:	f000 bc1a 	b.w	8011106 <__retarget_lock_release_recursive>
 80108d2:	bf00      	nop
 80108d4:	2400f304 	.word	0x2400f304

080108d8 <_realloc_r>:
 80108d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108dc:	4680      	mov	r8, r0
 80108de:	4614      	mov	r4, r2
 80108e0:	460e      	mov	r6, r1
 80108e2:	b921      	cbnz	r1, 80108ee <_realloc_r+0x16>
 80108e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108e8:	4611      	mov	r1, r2
 80108ea:	f7ff bdad 	b.w	8010448 <_malloc_r>
 80108ee:	b92a      	cbnz	r2, 80108fc <_realloc_r+0x24>
 80108f0:	f7ff fd3e 	bl	8010370 <_free_r>
 80108f4:	4625      	mov	r5, r4
 80108f6:	4628      	mov	r0, r5
 80108f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108fc:	f000 fc6a 	bl	80111d4 <_malloc_usable_size_r>
 8010900:	4284      	cmp	r4, r0
 8010902:	4607      	mov	r7, r0
 8010904:	d802      	bhi.n	801090c <_realloc_r+0x34>
 8010906:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801090a:	d812      	bhi.n	8010932 <_realloc_r+0x5a>
 801090c:	4621      	mov	r1, r4
 801090e:	4640      	mov	r0, r8
 8010910:	f7ff fd9a 	bl	8010448 <_malloc_r>
 8010914:	4605      	mov	r5, r0
 8010916:	2800      	cmp	r0, #0
 8010918:	d0ed      	beq.n	80108f6 <_realloc_r+0x1e>
 801091a:	42bc      	cmp	r4, r7
 801091c:	4622      	mov	r2, r4
 801091e:	4631      	mov	r1, r6
 8010920:	bf28      	it	cs
 8010922:	463a      	movcs	r2, r7
 8010924:	f7fd feea 	bl	800e6fc <memcpy>
 8010928:	4631      	mov	r1, r6
 801092a:	4640      	mov	r0, r8
 801092c:	f7ff fd20 	bl	8010370 <_free_r>
 8010930:	e7e1      	b.n	80108f6 <_realloc_r+0x1e>
 8010932:	4635      	mov	r5, r6
 8010934:	e7df      	b.n	80108f6 <_realloc_r+0x1e>

08010936 <__sfputc_r>:
 8010936:	6893      	ldr	r3, [r2, #8]
 8010938:	3b01      	subs	r3, #1
 801093a:	2b00      	cmp	r3, #0
 801093c:	b410      	push	{r4}
 801093e:	6093      	str	r3, [r2, #8]
 8010940:	da08      	bge.n	8010954 <__sfputc_r+0x1e>
 8010942:	6994      	ldr	r4, [r2, #24]
 8010944:	42a3      	cmp	r3, r4
 8010946:	db01      	blt.n	801094c <__sfputc_r+0x16>
 8010948:	290a      	cmp	r1, #10
 801094a:	d103      	bne.n	8010954 <__sfputc_r+0x1e>
 801094c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010950:	f000 b94a 	b.w	8010be8 <__swbuf_r>
 8010954:	6813      	ldr	r3, [r2, #0]
 8010956:	1c58      	adds	r0, r3, #1
 8010958:	6010      	str	r0, [r2, #0]
 801095a:	7019      	strb	r1, [r3, #0]
 801095c:	4608      	mov	r0, r1
 801095e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010962:	4770      	bx	lr

08010964 <__sfputs_r>:
 8010964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010966:	4606      	mov	r6, r0
 8010968:	460f      	mov	r7, r1
 801096a:	4614      	mov	r4, r2
 801096c:	18d5      	adds	r5, r2, r3
 801096e:	42ac      	cmp	r4, r5
 8010970:	d101      	bne.n	8010976 <__sfputs_r+0x12>
 8010972:	2000      	movs	r0, #0
 8010974:	e007      	b.n	8010986 <__sfputs_r+0x22>
 8010976:	f814 1b01 	ldrb.w	r1, [r4], #1
 801097a:	463a      	mov	r2, r7
 801097c:	4630      	mov	r0, r6
 801097e:	f7ff ffda 	bl	8010936 <__sfputc_r>
 8010982:	1c43      	adds	r3, r0, #1
 8010984:	d1f3      	bne.n	801096e <__sfputs_r+0xa>
 8010986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010988 <_vfiprintf_r>:
 8010988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098c:	460d      	mov	r5, r1
 801098e:	b09d      	sub	sp, #116	; 0x74
 8010990:	4614      	mov	r4, r2
 8010992:	4698      	mov	r8, r3
 8010994:	4606      	mov	r6, r0
 8010996:	b118      	cbz	r0, 80109a0 <_vfiprintf_r+0x18>
 8010998:	6983      	ldr	r3, [r0, #24]
 801099a:	b90b      	cbnz	r3, 80109a0 <_vfiprintf_r+0x18>
 801099c:	f000 fb14 	bl	8010fc8 <__sinit>
 80109a0:	4b89      	ldr	r3, [pc, #548]	; (8010bc8 <_vfiprintf_r+0x240>)
 80109a2:	429d      	cmp	r5, r3
 80109a4:	d11b      	bne.n	80109de <_vfiprintf_r+0x56>
 80109a6:	6875      	ldr	r5, [r6, #4]
 80109a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109aa:	07d9      	lsls	r1, r3, #31
 80109ac:	d405      	bmi.n	80109ba <_vfiprintf_r+0x32>
 80109ae:	89ab      	ldrh	r3, [r5, #12]
 80109b0:	059a      	lsls	r2, r3, #22
 80109b2:	d402      	bmi.n	80109ba <_vfiprintf_r+0x32>
 80109b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109b6:	f000 fba5 	bl	8011104 <__retarget_lock_acquire_recursive>
 80109ba:	89ab      	ldrh	r3, [r5, #12]
 80109bc:	071b      	lsls	r3, r3, #28
 80109be:	d501      	bpl.n	80109c4 <_vfiprintf_r+0x3c>
 80109c0:	692b      	ldr	r3, [r5, #16]
 80109c2:	b9eb      	cbnz	r3, 8010a00 <_vfiprintf_r+0x78>
 80109c4:	4629      	mov	r1, r5
 80109c6:	4630      	mov	r0, r6
 80109c8:	f000 f96e 	bl	8010ca8 <__swsetup_r>
 80109cc:	b1c0      	cbz	r0, 8010a00 <_vfiprintf_r+0x78>
 80109ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109d0:	07dc      	lsls	r4, r3, #31
 80109d2:	d50e      	bpl.n	80109f2 <_vfiprintf_r+0x6a>
 80109d4:	f04f 30ff 	mov.w	r0, #4294967295
 80109d8:	b01d      	add	sp, #116	; 0x74
 80109da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109de:	4b7b      	ldr	r3, [pc, #492]	; (8010bcc <_vfiprintf_r+0x244>)
 80109e0:	429d      	cmp	r5, r3
 80109e2:	d101      	bne.n	80109e8 <_vfiprintf_r+0x60>
 80109e4:	68b5      	ldr	r5, [r6, #8]
 80109e6:	e7df      	b.n	80109a8 <_vfiprintf_r+0x20>
 80109e8:	4b79      	ldr	r3, [pc, #484]	; (8010bd0 <_vfiprintf_r+0x248>)
 80109ea:	429d      	cmp	r5, r3
 80109ec:	bf08      	it	eq
 80109ee:	68f5      	ldreq	r5, [r6, #12]
 80109f0:	e7da      	b.n	80109a8 <_vfiprintf_r+0x20>
 80109f2:	89ab      	ldrh	r3, [r5, #12]
 80109f4:	0598      	lsls	r0, r3, #22
 80109f6:	d4ed      	bmi.n	80109d4 <_vfiprintf_r+0x4c>
 80109f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109fa:	f000 fb84 	bl	8011106 <__retarget_lock_release_recursive>
 80109fe:	e7e9      	b.n	80109d4 <_vfiprintf_r+0x4c>
 8010a00:	2300      	movs	r3, #0
 8010a02:	9309      	str	r3, [sp, #36]	; 0x24
 8010a04:	2320      	movs	r3, #32
 8010a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a0e:	2330      	movs	r3, #48	; 0x30
 8010a10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010bd4 <_vfiprintf_r+0x24c>
 8010a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a18:	f04f 0901 	mov.w	r9, #1
 8010a1c:	4623      	mov	r3, r4
 8010a1e:	469a      	mov	sl, r3
 8010a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a24:	b10a      	cbz	r2, 8010a2a <_vfiprintf_r+0xa2>
 8010a26:	2a25      	cmp	r2, #37	; 0x25
 8010a28:	d1f9      	bne.n	8010a1e <_vfiprintf_r+0x96>
 8010a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8010a2e:	d00b      	beq.n	8010a48 <_vfiprintf_r+0xc0>
 8010a30:	465b      	mov	r3, fp
 8010a32:	4622      	mov	r2, r4
 8010a34:	4629      	mov	r1, r5
 8010a36:	4630      	mov	r0, r6
 8010a38:	f7ff ff94 	bl	8010964 <__sfputs_r>
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	f000 80aa 	beq.w	8010b96 <_vfiprintf_r+0x20e>
 8010a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a44:	445a      	add	r2, fp
 8010a46:	9209      	str	r2, [sp, #36]	; 0x24
 8010a48:	f89a 3000 	ldrb.w	r3, [sl]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f000 80a2 	beq.w	8010b96 <_vfiprintf_r+0x20e>
 8010a52:	2300      	movs	r3, #0
 8010a54:	f04f 32ff 	mov.w	r2, #4294967295
 8010a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a5c:	f10a 0a01 	add.w	sl, sl, #1
 8010a60:	9304      	str	r3, [sp, #16]
 8010a62:	9307      	str	r3, [sp, #28]
 8010a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a68:	931a      	str	r3, [sp, #104]	; 0x68
 8010a6a:	4654      	mov	r4, sl
 8010a6c:	2205      	movs	r2, #5
 8010a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a72:	4858      	ldr	r0, [pc, #352]	; (8010bd4 <_vfiprintf_r+0x24c>)
 8010a74:	f7ef fc3c 	bl	80002f0 <memchr>
 8010a78:	9a04      	ldr	r2, [sp, #16]
 8010a7a:	b9d8      	cbnz	r0, 8010ab4 <_vfiprintf_r+0x12c>
 8010a7c:	06d1      	lsls	r1, r2, #27
 8010a7e:	bf44      	itt	mi
 8010a80:	2320      	movmi	r3, #32
 8010a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a86:	0713      	lsls	r3, r2, #28
 8010a88:	bf44      	itt	mi
 8010a8a:	232b      	movmi	r3, #43	; 0x2b
 8010a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a90:	f89a 3000 	ldrb.w	r3, [sl]
 8010a94:	2b2a      	cmp	r3, #42	; 0x2a
 8010a96:	d015      	beq.n	8010ac4 <_vfiprintf_r+0x13c>
 8010a98:	9a07      	ldr	r2, [sp, #28]
 8010a9a:	4654      	mov	r4, sl
 8010a9c:	2000      	movs	r0, #0
 8010a9e:	f04f 0c0a 	mov.w	ip, #10
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010aa8:	3b30      	subs	r3, #48	; 0x30
 8010aaa:	2b09      	cmp	r3, #9
 8010aac:	d94e      	bls.n	8010b4c <_vfiprintf_r+0x1c4>
 8010aae:	b1b0      	cbz	r0, 8010ade <_vfiprintf_r+0x156>
 8010ab0:	9207      	str	r2, [sp, #28]
 8010ab2:	e014      	b.n	8010ade <_vfiprintf_r+0x156>
 8010ab4:	eba0 0308 	sub.w	r3, r0, r8
 8010ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8010abc:	4313      	orrs	r3, r2
 8010abe:	9304      	str	r3, [sp, #16]
 8010ac0:	46a2      	mov	sl, r4
 8010ac2:	e7d2      	b.n	8010a6a <_vfiprintf_r+0xe2>
 8010ac4:	9b03      	ldr	r3, [sp, #12]
 8010ac6:	1d19      	adds	r1, r3, #4
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	9103      	str	r1, [sp, #12]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	bfbb      	ittet	lt
 8010ad0:	425b      	neglt	r3, r3
 8010ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8010ad6:	9307      	strge	r3, [sp, #28]
 8010ad8:	9307      	strlt	r3, [sp, #28]
 8010ada:	bfb8      	it	lt
 8010adc:	9204      	strlt	r2, [sp, #16]
 8010ade:	7823      	ldrb	r3, [r4, #0]
 8010ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8010ae2:	d10c      	bne.n	8010afe <_vfiprintf_r+0x176>
 8010ae4:	7863      	ldrb	r3, [r4, #1]
 8010ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ae8:	d135      	bne.n	8010b56 <_vfiprintf_r+0x1ce>
 8010aea:	9b03      	ldr	r3, [sp, #12]
 8010aec:	1d1a      	adds	r2, r3, #4
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	9203      	str	r2, [sp, #12]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	bfb8      	it	lt
 8010af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8010afa:	3402      	adds	r4, #2
 8010afc:	9305      	str	r3, [sp, #20]
 8010afe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010be4 <_vfiprintf_r+0x25c>
 8010b02:	7821      	ldrb	r1, [r4, #0]
 8010b04:	2203      	movs	r2, #3
 8010b06:	4650      	mov	r0, sl
 8010b08:	f7ef fbf2 	bl	80002f0 <memchr>
 8010b0c:	b140      	cbz	r0, 8010b20 <_vfiprintf_r+0x198>
 8010b0e:	2340      	movs	r3, #64	; 0x40
 8010b10:	eba0 000a 	sub.w	r0, r0, sl
 8010b14:	fa03 f000 	lsl.w	r0, r3, r0
 8010b18:	9b04      	ldr	r3, [sp, #16]
 8010b1a:	4303      	orrs	r3, r0
 8010b1c:	3401      	adds	r4, #1
 8010b1e:	9304      	str	r3, [sp, #16]
 8010b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b24:	482c      	ldr	r0, [pc, #176]	; (8010bd8 <_vfiprintf_r+0x250>)
 8010b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b2a:	2206      	movs	r2, #6
 8010b2c:	f7ef fbe0 	bl	80002f0 <memchr>
 8010b30:	2800      	cmp	r0, #0
 8010b32:	d03f      	beq.n	8010bb4 <_vfiprintf_r+0x22c>
 8010b34:	4b29      	ldr	r3, [pc, #164]	; (8010bdc <_vfiprintf_r+0x254>)
 8010b36:	bb1b      	cbnz	r3, 8010b80 <_vfiprintf_r+0x1f8>
 8010b38:	9b03      	ldr	r3, [sp, #12]
 8010b3a:	3307      	adds	r3, #7
 8010b3c:	f023 0307 	bic.w	r3, r3, #7
 8010b40:	3308      	adds	r3, #8
 8010b42:	9303      	str	r3, [sp, #12]
 8010b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b46:	443b      	add	r3, r7
 8010b48:	9309      	str	r3, [sp, #36]	; 0x24
 8010b4a:	e767      	b.n	8010a1c <_vfiprintf_r+0x94>
 8010b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b50:	460c      	mov	r4, r1
 8010b52:	2001      	movs	r0, #1
 8010b54:	e7a5      	b.n	8010aa2 <_vfiprintf_r+0x11a>
 8010b56:	2300      	movs	r3, #0
 8010b58:	3401      	adds	r4, #1
 8010b5a:	9305      	str	r3, [sp, #20]
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	f04f 0c0a 	mov.w	ip, #10
 8010b62:	4620      	mov	r0, r4
 8010b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b68:	3a30      	subs	r2, #48	; 0x30
 8010b6a:	2a09      	cmp	r2, #9
 8010b6c:	d903      	bls.n	8010b76 <_vfiprintf_r+0x1ee>
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d0c5      	beq.n	8010afe <_vfiprintf_r+0x176>
 8010b72:	9105      	str	r1, [sp, #20]
 8010b74:	e7c3      	b.n	8010afe <_vfiprintf_r+0x176>
 8010b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	e7f0      	b.n	8010b62 <_vfiprintf_r+0x1da>
 8010b80:	ab03      	add	r3, sp, #12
 8010b82:	9300      	str	r3, [sp, #0]
 8010b84:	462a      	mov	r2, r5
 8010b86:	4b16      	ldr	r3, [pc, #88]	; (8010be0 <_vfiprintf_r+0x258>)
 8010b88:	a904      	add	r1, sp, #16
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	f7fd fe5c 	bl	800e848 <_printf_float>
 8010b90:	4607      	mov	r7, r0
 8010b92:	1c78      	adds	r0, r7, #1
 8010b94:	d1d6      	bne.n	8010b44 <_vfiprintf_r+0x1bc>
 8010b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b98:	07d9      	lsls	r1, r3, #31
 8010b9a:	d405      	bmi.n	8010ba8 <_vfiprintf_r+0x220>
 8010b9c:	89ab      	ldrh	r3, [r5, #12]
 8010b9e:	059a      	lsls	r2, r3, #22
 8010ba0:	d402      	bmi.n	8010ba8 <_vfiprintf_r+0x220>
 8010ba2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ba4:	f000 faaf 	bl	8011106 <__retarget_lock_release_recursive>
 8010ba8:	89ab      	ldrh	r3, [r5, #12]
 8010baa:	065b      	lsls	r3, r3, #25
 8010bac:	f53f af12 	bmi.w	80109d4 <_vfiprintf_r+0x4c>
 8010bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bb2:	e711      	b.n	80109d8 <_vfiprintf_r+0x50>
 8010bb4:	ab03      	add	r3, sp, #12
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	462a      	mov	r2, r5
 8010bba:	4b09      	ldr	r3, [pc, #36]	; (8010be0 <_vfiprintf_r+0x258>)
 8010bbc:	a904      	add	r1, sp, #16
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f7fe f8ce 	bl	800ed60 <_printf_i>
 8010bc4:	e7e4      	b.n	8010b90 <_vfiprintf_r+0x208>
 8010bc6:	bf00      	nop
 8010bc8:	0801ba3c 	.word	0x0801ba3c
 8010bcc:	0801ba5c 	.word	0x0801ba5c
 8010bd0:	0801ba1c 	.word	0x0801ba1c
 8010bd4:	0801b8c4 	.word	0x0801b8c4
 8010bd8:	0801b8ce 	.word	0x0801b8ce
 8010bdc:	0800e849 	.word	0x0800e849
 8010be0:	08010965 	.word	0x08010965
 8010be4:	0801b8ca 	.word	0x0801b8ca

08010be8 <__swbuf_r>:
 8010be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bea:	460e      	mov	r6, r1
 8010bec:	4614      	mov	r4, r2
 8010bee:	4605      	mov	r5, r0
 8010bf0:	b118      	cbz	r0, 8010bfa <__swbuf_r+0x12>
 8010bf2:	6983      	ldr	r3, [r0, #24]
 8010bf4:	b90b      	cbnz	r3, 8010bfa <__swbuf_r+0x12>
 8010bf6:	f000 f9e7 	bl	8010fc8 <__sinit>
 8010bfa:	4b21      	ldr	r3, [pc, #132]	; (8010c80 <__swbuf_r+0x98>)
 8010bfc:	429c      	cmp	r4, r3
 8010bfe:	d12b      	bne.n	8010c58 <__swbuf_r+0x70>
 8010c00:	686c      	ldr	r4, [r5, #4]
 8010c02:	69a3      	ldr	r3, [r4, #24]
 8010c04:	60a3      	str	r3, [r4, #8]
 8010c06:	89a3      	ldrh	r3, [r4, #12]
 8010c08:	071a      	lsls	r2, r3, #28
 8010c0a:	d52f      	bpl.n	8010c6c <__swbuf_r+0x84>
 8010c0c:	6923      	ldr	r3, [r4, #16]
 8010c0e:	b36b      	cbz	r3, 8010c6c <__swbuf_r+0x84>
 8010c10:	6923      	ldr	r3, [r4, #16]
 8010c12:	6820      	ldr	r0, [r4, #0]
 8010c14:	1ac0      	subs	r0, r0, r3
 8010c16:	6963      	ldr	r3, [r4, #20]
 8010c18:	b2f6      	uxtb	r6, r6
 8010c1a:	4283      	cmp	r3, r0
 8010c1c:	4637      	mov	r7, r6
 8010c1e:	dc04      	bgt.n	8010c2a <__swbuf_r+0x42>
 8010c20:	4621      	mov	r1, r4
 8010c22:	4628      	mov	r0, r5
 8010c24:	f000 f93c 	bl	8010ea0 <_fflush_r>
 8010c28:	bb30      	cbnz	r0, 8010c78 <__swbuf_r+0x90>
 8010c2a:	68a3      	ldr	r3, [r4, #8]
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	60a3      	str	r3, [r4, #8]
 8010c30:	6823      	ldr	r3, [r4, #0]
 8010c32:	1c5a      	adds	r2, r3, #1
 8010c34:	6022      	str	r2, [r4, #0]
 8010c36:	701e      	strb	r6, [r3, #0]
 8010c38:	6963      	ldr	r3, [r4, #20]
 8010c3a:	3001      	adds	r0, #1
 8010c3c:	4283      	cmp	r3, r0
 8010c3e:	d004      	beq.n	8010c4a <__swbuf_r+0x62>
 8010c40:	89a3      	ldrh	r3, [r4, #12]
 8010c42:	07db      	lsls	r3, r3, #31
 8010c44:	d506      	bpl.n	8010c54 <__swbuf_r+0x6c>
 8010c46:	2e0a      	cmp	r6, #10
 8010c48:	d104      	bne.n	8010c54 <__swbuf_r+0x6c>
 8010c4a:	4621      	mov	r1, r4
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	f000 f927 	bl	8010ea0 <_fflush_r>
 8010c52:	b988      	cbnz	r0, 8010c78 <__swbuf_r+0x90>
 8010c54:	4638      	mov	r0, r7
 8010c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c58:	4b0a      	ldr	r3, [pc, #40]	; (8010c84 <__swbuf_r+0x9c>)
 8010c5a:	429c      	cmp	r4, r3
 8010c5c:	d101      	bne.n	8010c62 <__swbuf_r+0x7a>
 8010c5e:	68ac      	ldr	r4, [r5, #8]
 8010c60:	e7cf      	b.n	8010c02 <__swbuf_r+0x1a>
 8010c62:	4b09      	ldr	r3, [pc, #36]	; (8010c88 <__swbuf_r+0xa0>)
 8010c64:	429c      	cmp	r4, r3
 8010c66:	bf08      	it	eq
 8010c68:	68ec      	ldreq	r4, [r5, #12]
 8010c6a:	e7ca      	b.n	8010c02 <__swbuf_r+0x1a>
 8010c6c:	4621      	mov	r1, r4
 8010c6e:	4628      	mov	r0, r5
 8010c70:	f000 f81a 	bl	8010ca8 <__swsetup_r>
 8010c74:	2800      	cmp	r0, #0
 8010c76:	d0cb      	beq.n	8010c10 <__swbuf_r+0x28>
 8010c78:	f04f 37ff 	mov.w	r7, #4294967295
 8010c7c:	e7ea      	b.n	8010c54 <__swbuf_r+0x6c>
 8010c7e:	bf00      	nop
 8010c80:	0801ba3c 	.word	0x0801ba3c
 8010c84:	0801ba5c 	.word	0x0801ba5c
 8010c88:	0801ba1c 	.word	0x0801ba1c

08010c8c <__ascii_wctomb>:
 8010c8c:	b149      	cbz	r1, 8010ca2 <__ascii_wctomb+0x16>
 8010c8e:	2aff      	cmp	r2, #255	; 0xff
 8010c90:	bf85      	ittet	hi
 8010c92:	238a      	movhi	r3, #138	; 0x8a
 8010c94:	6003      	strhi	r3, [r0, #0]
 8010c96:	700a      	strbls	r2, [r1, #0]
 8010c98:	f04f 30ff 	movhi.w	r0, #4294967295
 8010c9c:	bf98      	it	ls
 8010c9e:	2001      	movls	r0, #1
 8010ca0:	4770      	bx	lr
 8010ca2:	4608      	mov	r0, r1
 8010ca4:	4770      	bx	lr
	...

08010ca8 <__swsetup_r>:
 8010ca8:	4b32      	ldr	r3, [pc, #200]	; (8010d74 <__swsetup_r+0xcc>)
 8010caa:	b570      	push	{r4, r5, r6, lr}
 8010cac:	681d      	ldr	r5, [r3, #0]
 8010cae:	4606      	mov	r6, r0
 8010cb0:	460c      	mov	r4, r1
 8010cb2:	b125      	cbz	r5, 8010cbe <__swsetup_r+0x16>
 8010cb4:	69ab      	ldr	r3, [r5, #24]
 8010cb6:	b913      	cbnz	r3, 8010cbe <__swsetup_r+0x16>
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f000 f985 	bl	8010fc8 <__sinit>
 8010cbe:	4b2e      	ldr	r3, [pc, #184]	; (8010d78 <__swsetup_r+0xd0>)
 8010cc0:	429c      	cmp	r4, r3
 8010cc2:	d10f      	bne.n	8010ce4 <__swsetup_r+0x3c>
 8010cc4:	686c      	ldr	r4, [r5, #4]
 8010cc6:	89a3      	ldrh	r3, [r4, #12]
 8010cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ccc:	0719      	lsls	r1, r3, #28
 8010cce:	d42c      	bmi.n	8010d2a <__swsetup_r+0x82>
 8010cd0:	06dd      	lsls	r5, r3, #27
 8010cd2:	d411      	bmi.n	8010cf8 <__swsetup_r+0x50>
 8010cd4:	2309      	movs	r3, #9
 8010cd6:	6033      	str	r3, [r6, #0]
 8010cd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010cdc:	81a3      	strh	r3, [r4, #12]
 8010cde:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce2:	e03e      	b.n	8010d62 <__swsetup_r+0xba>
 8010ce4:	4b25      	ldr	r3, [pc, #148]	; (8010d7c <__swsetup_r+0xd4>)
 8010ce6:	429c      	cmp	r4, r3
 8010ce8:	d101      	bne.n	8010cee <__swsetup_r+0x46>
 8010cea:	68ac      	ldr	r4, [r5, #8]
 8010cec:	e7eb      	b.n	8010cc6 <__swsetup_r+0x1e>
 8010cee:	4b24      	ldr	r3, [pc, #144]	; (8010d80 <__swsetup_r+0xd8>)
 8010cf0:	429c      	cmp	r4, r3
 8010cf2:	bf08      	it	eq
 8010cf4:	68ec      	ldreq	r4, [r5, #12]
 8010cf6:	e7e6      	b.n	8010cc6 <__swsetup_r+0x1e>
 8010cf8:	0758      	lsls	r0, r3, #29
 8010cfa:	d512      	bpl.n	8010d22 <__swsetup_r+0x7a>
 8010cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cfe:	b141      	cbz	r1, 8010d12 <__swsetup_r+0x6a>
 8010d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d04:	4299      	cmp	r1, r3
 8010d06:	d002      	beq.n	8010d0e <__swsetup_r+0x66>
 8010d08:	4630      	mov	r0, r6
 8010d0a:	f7ff fb31 	bl	8010370 <_free_r>
 8010d0e:	2300      	movs	r3, #0
 8010d10:	6363      	str	r3, [r4, #52]	; 0x34
 8010d12:	89a3      	ldrh	r3, [r4, #12]
 8010d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010d18:	81a3      	strh	r3, [r4, #12]
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	6063      	str	r3, [r4, #4]
 8010d1e:	6923      	ldr	r3, [r4, #16]
 8010d20:	6023      	str	r3, [r4, #0]
 8010d22:	89a3      	ldrh	r3, [r4, #12]
 8010d24:	f043 0308 	orr.w	r3, r3, #8
 8010d28:	81a3      	strh	r3, [r4, #12]
 8010d2a:	6923      	ldr	r3, [r4, #16]
 8010d2c:	b94b      	cbnz	r3, 8010d42 <__swsetup_r+0x9a>
 8010d2e:	89a3      	ldrh	r3, [r4, #12]
 8010d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d38:	d003      	beq.n	8010d42 <__swsetup_r+0x9a>
 8010d3a:	4621      	mov	r1, r4
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	f000 fa09 	bl	8011154 <__smakebuf_r>
 8010d42:	89a0      	ldrh	r0, [r4, #12]
 8010d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d48:	f010 0301 	ands.w	r3, r0, #1
 8010d4c:	d00a      	beq.n	8010d64 <__swsetup_r+0xbc>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	60a3      	str	r3, [r4, #8]
 8010d52:	6963      	ldr	r3, [r4, #20]
 8010d54:	425b      	negs	r3, r3
 8010d56:	61a3      	str	r3, [r4, #24]
 8010d58:	6923      	ldr	r3, [r4, #16]
 8010d5a:	b943      	cbnz	r3, 8010d6e <__swsetup_r+0xc6>
 8010d5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010d60:	d1ba      	bne.n	8010cd8 <__swsetup_r+0x30>
 8010d62:	bd70      	pop	{r4, r5, r6, pc}
 8010d64:	0781      	lsls	r1, r0, #30
 8010d66:	bf58      	it	pl
 8010d68:	6963      	ldrpl	r3, [r4, #20]
 8010d6a:	60a3      	str	r3, [r4, #8]
 8010d6c:	e7f4      	b.n	8010d58 <__swsetup_r+0xb0>
 8010d6e:	2000      	movs	r0, #0
 8010d70:	e7f7      	b.n	8010d62 <__swsetup_r+0xba>
 8010d72:	bf00      	nop
 8010d74:	24000378 	.word	0x24000378
 8010d78:	0801ba3c 	.word	0x0801ba3c
 8010d7c:	0801ba5c 	.word	0x0801ba5c
 8010d80:	0801ba1c 	.word	0x0801ba1c

08010d84 <abort>:
 8010d84:	b508      	push	{r3, lr}
 8010d86:	2006      	movs	r0, #6
 8010d88:	f000 fa54 	bl	8011234 <raise>
 8010d8c:	2001      	movs	r0, #1
 8010d8e:	f7f3 f993 	bl	80040b8 <_exit>
	...

08010d94 <__sflush_r>:
 8010d94:	898a      	ldrh	r2, [r1, #12]
 8010d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d9a:	4605      	mov	r5, r0
 8010d9c:	0710      	lsls	r0, r2, #28
 8010d9e:	460c      	mov	r4, r1
 8010da0:	d458      	bmi.n	8010e54 <__sflush_r+0xc0>
 8010da2:	684b      	ldr	r3, [r1, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	dc05      	bgt.n	8010db4 <__sflush_r+0x20>
 8010da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	dc02      	bgt.n	8010db4 <__sflush_r+0x20>
 8010dae:	2000      	movs	r0, #0
 8010db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010db6:	2e00      	cmp	r6, #0
 8010db8:	d0f9      	beq.n	8010dae <__sflush_r+0x1a>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010dc0:	682f      	ldr	r7, [r5, #0]
 8010dc2:	602b      	str	r3, [r5, #0]
 8010dc4:	d032      	beq.n	8010e2c <__sflush_r+0x98>
 8010dc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010dc8:	89a3      	ldrh	r3, [r4, #12]
 8010dca:	075a      	lsls	r2, r3, #29
 8010dcc:	d505      	bpl.n	8010dda <__sflush_r+0x46>
 8010dce:	6863      	ldr	r3, [r4, #4]
 8010dd0:	1ac0      	subs	r0, r0, r3
 8010dd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010dd4:	b10b      	cbz	r3, 8010dda <__sflush_r+0x46>
 8010dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010dd8:	1ac0      	subs	r0, r0, r3
 8010dda:	2300      	movs	r3, #0
 8010ddc:	4602      	mov	r2, r0
 8010dde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010de0:	6a21      	ldr	r1, [r4, #32]
 8010de2:	4628      	mov	r0, r5
 8010de4:	47b0      	blx	r6
 8010de6:	1c43      	adds	r3, r0, #1
 8010de8:	89a3      	ldrh	r3, [r4, #12]
 8010dea:	d106      	bne.n	8010dfa <__sflush_r+0x66>
 8010dec:	6829      	ldr	r1, [r5, #0]
 8010dee:	291d      	cmp	r1, #29
 8010df0:	d82c      	bhi.n	8010e4c <__sflush_r+0xb8>
 8010df2:	4a2a      	ldr	r2, [pc, #168]	; (8010e9c <__sflush_r+0x108>)
 8010df4:	40ca      	lsrs	r2, r1
 8010df6:	07d6      	lsls	r6, r2, #31
 8010df8:	d528      	bpl.n	8010e4c <__sflush_r+0xb8>
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	6062      	str	r2, [r4, #4]
 8010dfe:	04d9      	lsls	r1, r3, #19
 8010e00:	6922      	ldr	r2, [r4, #16]
 8010e02:	6022      	str	r2, [r4, #0]
 8010e04:	d504      	bpl.n	8010e10 <__sflush_r+0x7c>
 8010e06:	1c42      	adds	r2, r0, #1
 8010e08:	d101      	bne.n	8010e0e <__sflush_r+0x7a>
 8010e0a:	682b      	ldr	r3, [r5, #0]
 8010e0c:	b903      	cbnz	r3, 8010e10 <__sflush_r+0x7c>
 8010e0e:	6560      	str	r0, [r4, #84]	; 0x54
 8010e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e12:	602f      	str	r7, [r5, #0]
 8010e14:	2900      	cmp	r1, #0
 8010e16:	d0ca      	beq.n	8010dae <__sflush_r+0x1a>
 8010e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e1c:	4299      	cmp	r1, r3
 8010e1e:	d002      	beq.n	8010e26 <__sflush_r+0x92>
 8010e20:	4628      	mov	r0, r5
 8010e22:	f7ff faa5 	bl	8010370 <_free_r>
 8010e26:	2000      	movs	r0, #0
 8010e28:	6360      	str	r0, [r4, #52]	; 0x34
 8010e2a:	e7c1      	b.n	8010db0 <__sflush_r+0x1c>
 8010e2c:	6a21      	ldr	r1, [r4, #32]
 8010e2e:	2301      	movs	r3, #1
 8010e30:	4628      	mov	r0, r5
 8010e32:	47b0      	blx	r6
 8010e34:	1c41      	adds	r1, r0, #1
 8010e36:	d1c7      	bne.n	8010dc8 <__sflush_r+0x34>
 8010e38:	682b      	ldr	r3, [r5, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d0c4      	beq.n	8010dc8 <__sflush_r+0x34>
 8010e3e:	2b1d      	cmp	r3, #29
 8010e40:	d001      	beq.n	8010e46 <__sflush_r+0xb2>
 8010e42:	2b16      	cmp	r3, #22
 8010e44:	d101      	bne.n	8010e4a <__sflush_r+0xb6>
 8010e46:	602f      	str	r7, [r5, #0]
 8010e48:	e7b1      	b.n	8010dae <__sflush_r+0x1a>
 8010e4a:	89a3      	ldrh	r3, [r4, #12]
 8010e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e50:	81a3      	strh	r3, [r4, #12]
 8010e52:	e7ad      	b.n	8010db0 <__sflush_r+0x1c>
 8010e54:	690f      	ldr	r7, [r1, #16]
 8010e56:	2f00      	cmp	r7, #0
 8010e58:	d0a9      	beq.n	8010dae <__sflush_r+0x1a>
 8010e5a:	0793      	lsls	r3, r2, #30
 8010e5c:	680e      	ldr	r6, [r1, #0]
 8010e5e:	bf08      	it	eq
 8010e60:	694b      	ldreq	r3, [r1, #20]
 8010e62:	600f      	str	r7, [r1, #0]
 8010e64:	bf18      	it	ne
 8010e66:	2300      	movne	r3, #0
 8010e68:	eba6 0807 	sub.w	r8, r6, r7
 8010e6c:	608b      	str	r3, [r1, #8]
 8010e6e:	f1b8 0f00 	cmp.w	r8, #0
 8010e72:	dd9c      	ble.n	8010dae <__sflush_r+0x1a>
 8010e74:	6a21      	ldr	r1, [r4, #32]
 8010e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e78:	4643      	mov	r3, r8
 8010e7a:	463a      	mov	r2, r7
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	47b0      	blx	r6
 8010e80:	2800      	cmp	r0, #0
 8010e82:	dc06      	bgt.n	8010e92 <__sflush_r+0xfe>
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e8a:	81a3      	strh	r3, [r4, #12]
 8010e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e90:	e78e      	b.n	8010db0 <__sflush_r+0x1c>
 8010e92:	4407      	add	r7, r0
 8010e94:	eba8 0800 	sub.w	r8, r8, r0
 8010e98:	e7e9      	b.n	8010e6e <__sflush_r+0xda>
 8010e9a:	bf00      	nop
 8010e9c:	20400001 	.word	0x20400001

08010ea0 <_fflush_r>:
 8010ea0:	b538      	push	{r3, r4, r5, lr}
 8010ea2:	690b      	ldr	r3, [r1, #16]
 8010ea4:	4605      	mov	r5, r0
 8010ea6:	460c      	mov	r4, r1
 8010ea8:	b913      	cbnz	r3, 8010eb0 <_fflush_r+0x10>
 8010eaa:	2500      	movs	r5, #0
 8010eac:	4628      	mov	r0, r5
 8010eae:	bd38      	pop	{r3, r4, r5, pc}
 8010eb0:	b118      	cbz	r0, 8010eba <_fflush_r+0x1a>
 8010eb2:	6983      	ldr	r3, [r0, #24]
 8010eb4:	b90b      	cbnz	r3, 8010eba <_fflush_r+0x1a>
 8010eb6:	f000 f887 	bl	8010fc8 <__sinit>
 8010eba:	4b14      	ldr	r3, [pc, #80]	; (8010f0c <_fflush_r+0x6c>)
 8010ebc:	429c      	cmp	r4, r3
 8010ebe:	d11b      	bne.n	8010ef8 <_fflush_r+0x58>
 8010ec0:	686c      	ldr	r4, [r5, #4]
 8010ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d0ef      	beq.n	8010eaa <_fflush_r+0xa>
 8010eca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ecc:	07d0      	lsls	r0, r2, #31
 8010ece:	d404      	bmi.n	8010eda <_fflush_r+0x3a>
 8010ed0:	0599      	lsls	r1, r3, #22
 8010ed2:	d402      	bmi.n	8010eda <_fflush_r+0x3a>
 8010ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ed6:	f000 f915 	bl	8011104 <__retarget_lock_acquire_recursive>
 8010eda:	4628      	mov	r0, r5
 8010edc:	4621      	mov	r1, r4
 8010ede:	f7ff ff59 	bl	8010d94 <__sflush_r>
 8010ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ee4:	07da      	lsls	r2, r3, #31
 8010ee6:	4605      	mov	r5, r0
 8010ee8:	d4e0      	bmi.n	8010eac <_fflush_r+0xc>
 8010eea:	89a3      	ldrh	r3, [r4, #12]
 8010eec:	059b      	lsls	r3, r3, #22
 8010eee:	d4dd      	bmi.n	8010eac <_fflush_r+0xc>
 8010ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ef2:	f000 f908 	bl	8011106 <__retarget_lock_release_recursive>
 8010ef6:	e7d9      	b.n	8010eac <_fflush_r+0xc>
 8010ef8:	4b05      	ldr	r3, [pc, #20]	; (8010f10 <_fflush_r+0x70>)
 8010efa:	429c      	cmp	r4, r3
 8010efc:	d101      	bne.n	8010f02 <_fflush_r+0x62>
 8010efe:	68ac      	ldr	r4, [r5, #8]
 8010f00:	e7df      	b.n	8010ec2 <_fflush_r+0x22>
 8010f02:	4b04      	ldr	r3, [pc, #16]	; (8010f14 <_fflush_r+0x74>)
 8010f04:	429c      	cmp	r4, r3
 8010f06:	bf08      	it	eq
 8010f08:	68ec      	ldreq	r4, [r5, #12]
 8010f0a:	e7da      	b.n	8010ec2 <_fflush_r+0x22>
 8010f0c:	0801ba3c 	.word	0x0801ba3c
 8010f10:	0801ba5c 	.word	0x0801ba5c
 8010f14:	0801ba1c 	.word	0x0801ba1c

08010f18 <std>:
 8010f18:	2300      	movs	r3, #0
 8010f1a:	b510      	push	{r4, lr}
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f26:	6083      	str	r3, [r0, #8]
 8010f28:	8181      	strh	r1, [r0, #12]
 8010f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8010f2c:	81c2      	strh	r2, [r0, #14]
 8010f2e:	6183      	str	r3, [r0, #24]
 8010f30:	4619      	mov	r1, r3
 8010f32:	2208      	movs	r2, #8
 8010f34:	305c      	adds	r0, #92	; 0x5c
 8010f36:	f7fd fbef 	bl	800e718 <memset>
 8010f3a:	4b05      	ldr	r3, [pc, #20]	; (8010f50 <std+0x38>)
 8010f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f3e:	4b05      	ldr	r3, [pc, #20]	; (8010f54 <std+0x3c>)
 8010f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f42:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <std+0x40>)
 8010f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f46:	4b05      	ldr	r3, [pc, #20]	; (8010f5c <std+0x44>)
 8010f48:	6224      	str	r4, [r4, #32]
 8010f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8010f4c:	bd10      	pop	{r4, pc}
 8010f4e:	bf00      	nop
 8010f50:	0801126d 	.word	0x0801126d
 8010f54:	0801128f 	.word	0x0801128f
 8010f58:	080112c7 	.word	0x080112c7
 8010f5c:	080112eb 	.word	0x080112eb

08010f60 <_cleanup_r>:
 8010f60:	4901      	ldr	r1, [pc, #4]	; (8010f68 <_cleanup_r+0x8>)
 8010f62:	f000 b8af 	b.w	80110c4 <_fwalk_reent>
 8010f66:	bf00      	nop
 8010f68:	08010ea1 	.word	0x08010ea1

08010f6c <__sfmoreglue>:
 8010f6c:	b570      	push	{r4, r5, r6, lr}
 8010f6e:	2268      	movs	r2, #104	; 0x68
 8010f70:	1e4d      	subs	r5, r1, #1
 8010f72:	4355      	muls	r5, r2
 8010f74:	460e      	mov	r6, r1
 8010f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010f7a:	f7ff fa65 	bl	8010448 <_malloc_r>
 8010f7e:	4604      	mov	r4, r0
 8010f80:	b140      	cbz	r0, 8010f94 <__sfmoreglue+0x28>
 8010f82:	2100      	movs	r1, #0
 8010f84:	e9c0 1600 	strd	r1, r6, [r0]
 8010f88:	300c      	adds	r0, #12
 8010f8a:	60a0      	str	r0, [r4, #8]
 8010f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010f90:	f7fd fbc2 	bl	800e718 <memset>
 8010f94:	4620      	mov	r0, r4
 8010f96:	bd70      	pop	{r4, r5, r6, pc}

08010f98 <__sfp_lock_acquire>:
 8010f98:	4801      	ldr	r0, [pc, #4]	; (8010fa0 <__sfp_lock_acquire+0x8>)
 8010f9a:	f000 b8b3 	b.w	8011104 <__retarget_lock_acquire_recursive>
 8010f9e:	bf00      	nop
 8010fa0:	2400f305 	.word	0x2400f305

08010fa4 <__sfp_lock_release>:
 8010fa4:	4801      	ldr	r0, [pc, #4]	; (8010fac <__sfp_lock_release+0x8>)
 8010fa6:	f000 b8ae 	b.w	8011106 <__retarget_lock_release_recursive>
 8010faa:	bf00      	nop
 8010fac:	2400f305 	.word	0x2400f305

08010fb0 <__sinit_lock_acquire>:
 8010fb0:	4801      	ldr	r0, [pc, #4]	; (8010fb8 <__sinit_lock_acquire+0x8>)
 8010fb2:	f000 b8a7 	b.w	8011104 <__retarget_lock_acquire_recursive>
 8010fb6:	bf00      	nop
 8010fb8:	2400f306 	.word	0x2400f306

08010fbc <__sinit_lock_release>:
 8010fbc:	4801      	ldr	r0, [pc, #4]	; (8010fc4 <__sinit_lock_release+0x8>)
 8010fbe:	f000 b8a2 	b.w	8011106 <__retarget_lock_release_recursive>
 8010fc2:	bf00      	nop
 8010fc4:	2400f306 	.word	0x2400f306

08010fc8 <__sinit>:
 8010fc8:	b510      	push	{r4, lr}
 8010fca:	4604      	mov	r4, r0
 8010fcc:	f7ff fff0 	bl	8010fb0 <__sinit_lock_acquire>
 8010fd0:	69a3      	ldr	r3, [r4, #24]
 8010fd2:	b11b      	cbz	r3, 8010fdc <__sinit+0x14>
 8010fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fd8:	f7ff bff0 	b.w	8010fbc <__sinit_lock_release>
 8010fdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010fe0:	6523      	str	r3, [r4, #80]	; 0x50
 8010fe2:	4b13      	ldr	r3, [pc, #76]	; (8011030 <__sinit+0x68>)
 8010fe4:	4a13      	ldr	r2, [pc, #76]	; (8011034 <__sinit+0x6c>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	62a2      	str	r2, [r4, #40]	; 0x28
 8010fea:	42a3      	cmp	r3, r4
 8010fec:	bf04      	itt	eq
 8010fee:	2301      	moveq	r3, #1
 8010ff0:	61a3      	streq	r3, [r4, #24]
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f000 f820 	bl	8011038 <__sfp>
 8010ff8:	6060      	str	r0, [r4, #4]
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f000 f81c 	bl	8011038 <__sfp>
 8011000:	60a0      	str	r0, [r4, #8]
 8011002:	4620      	mov	r0, r4
 8011004:	f000 f818 	bl	8011038 <__sfp>
 8011008:	2200      	movs	r2, #0
 801100a:	60e0      	str	r0, [r4, #12]
 801100c:	2104      	movs	r1, #4
 801100e:	6860      	ldr	r0, [r4, #4]
 8011010:	f7ff ff82 	bl	8010f18 <std>
 8011014:	68a0      	ldr	r0, [r4, #8]
 8011016:	2201      	movs	r2, #1
 8011018:	2109      	movs	r1, #9
 801101a:	f7ff ff7d 	bl	8010f18 <std>
 801101e:	68e0      	ldr	r0, [r4, #12]
 8011020:	2202      	movs	r2, #2
 8011022:	2112      	movs	r1, #18
 8011024:	f7ff ff78 	bl	8010f18 <std>
 8011028:	2301      	movs	r3, #1
 801102a:	61a3      	str	r3, [r4, #24]
 801102c:	e7d2      	b.n	8010fd4 <__sinit+0xc>
 801102e:	bf00      	nop
 8011030:	0801b6a4 	.word	0x0801b6a4
 8011034:	08010f61 	.word	0x08010f61

08011038 <__sfp>:
 8011038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103a:	4607      	mov	r7, r0
 801103c:	f7ff ffac 	bl	8010f98 <__sfp_lock_acquire>
 8011040:	4b1e      	ldr	r3, [pc, #120]	; (80110bc <__sfp+0x84>)
 8011042:	681e      	ldr	r6, [r3, #0]
 8011044:	69b3      	ldr	r3, [r6, #24]
 8011046:	b913      	cbnz	r3, 801104e <__sfp+0x16>
 8011048:	4630      	mov	r0, r6
 801104a:	f7ff ffbd 	bl	8010fc8 <__sinit>
 801104e:	3648      	adds	r6, #72	; 0x48
 8011050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011054:	3b01      	subs	r3, #1
 8011056:	d503      	bpl.n	8011060 <__sfp+0x28>
 8011058:	6833      	ldr	r3, [r6, #0]
 801105a:	b30b      	cbz	r3, 80110a0 <__sfp+0x68>
 801105c:	6836      	ldr	r6, [r6, #0]
 801105e:	e7f7      	b.n	8011050 <__sfp+0x18>
 8011060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011064:	b9d5      	cbnz	r5, 801109c <__sfp+0x64>
 8011066:	4b16      	ldr	r3, [pc, #88]	; (80110c0 <__sfp+0x88>)
 8011068:	60e3      	str	r3, [r4, #12]
 801106a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801106e:	6665      	str	r5, [r4, #100]	; 0x64
 8011070:	f000 f847 	bl	8011102 <__retarget_lock_init_recursive>
 8011074:	f7ff ff96 	bl	8010fa4 <__sfp_lock_release>
 8011078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801107c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011080:	6025      	str	r5, [r4, #0]
 8011082:	61a5      	str	r5, [r4, #24]
 8011084:	2208      	movs	r2, #8
 8011086:	4629      	mov	r1, r5
 8011088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801108c:	f7fd fb44 	bl	800e718 <memset>
 8011090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011098:	4620      	mov	r0, r4
 801109a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801109c:	3468      	adds	r4, #104	; 0x68
 801109e:	e7d9      	b.n	8011054 <__sfp+0x1c>
 80110a0:	2104      	movs	r1, #4
 80110a2:	4638      	mov	r0, r7
 80110a4:	f7ff ff62 	bl	8010f6c <__sfmoreglue>
 80110a8:	4604      	mov	r4, r0
 80110aa:	6030      	str	r0, [r6, #0]
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d1d5      	bne.n	801105c <__sfp+0x24>
 80110b0:	f7ff ff78 	bl	8010fa4 <__sfp_lock_release>
 80110b4:	230c      	movs	r3, #12
 80110b6:	603b      	str	r3, [r7, #0]
 80110b8:	e7ee      	b.n	8011098 <__sfp+0x60>
 80110ba:	bf00      	nop
 80110bc:	0801b6a4 	.word	0x0801b6a4
 80110c0:	ffff0001 	.word	0xffff0001

080110c4 <_fwalk_reent>:
 80110c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c8:	4606      	mov	r6, r0
 80110ca:	4688      	mov	r8, r1
 80110cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110d0:	2700      	movs	r7, #0
 80110d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110d6:	f1b9 0901 	subs.w	r9, r9, #1
 80110da:	d505      	bpl.n	80110e8 <_fwalk_reent+0x24>
 80110dc:	6824      	ldr	r4, [r4, #0]
 80110de:	2c00      	cmp	r4, #0
 80110e0:	d1f7      	bne.n	80110d2 <_fwalk_reent+0xe>
 80110e2:	4638      	mov	r0, r7
 80110e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110e8:	89ab      	ldrh	r3, [r5, #12]
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d907      	bls.n	80110fe <_fwalk_reent+0x3a>
 80110ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110f2:	3301      	adds	r3, #1
 80110f4:	d003      	beq.n	80110fe <_fwalk_reent+0x3a>
 80110f6:	4629      	mov	r1, r5
 80110f8:	4630      	mov	r0, r6
 80110fa:	47c0      	blx	r8
 80110fc:	4307      	orrs	r7, r0
 80110fe:	3568      	adds	r5, #104	; 0x68
 8011100:	e7e9      	b.n	80110d6 <_fwalk_reent+0x12>

08011102 <__retarget_lock_init_recursive>:
 8011102:	4770      	bx	lr

08011104 <__retarget_lock_acquire_recursive>:
 8011104:	4770      	bx	lr

08011106 <__retarget_lock_release_recursive>:
 8011106:	4770      	bx	lr

08011108 <__swhatbuf_r>:
 8011108:	b570      	push	{r4, r5, r6, lr}
 801110a:	460e      	mov	r6, r1
 801110c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011110:	2900      	cmp	r1, #0
 8011112:	b096      	sub	sp, #88	; 0x58
 8011114:	4614      	mov	r4, r2
 8011116:	461d      	mov	r5, r3
 8011118:	da08      	bge.n	801112c <__swhatbuf_r+0x24>
 801111a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801111e:	2200      	movs	r2, #0
 8011120:	602a      	str	r2, [r5, #0]
 8011122:	061a      	lsls	r2, r3, #24
 8011124:	d410      	bmi.n	8011148 <__swhatbuf_r+0x40>
 8011126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801112a:	e00e      	b.n	801114a <__swhatbuf_r+0x42>
 801112c:	466a      	mov	r2, sp
 801112e:	f000 f903 	bl	8011338 <_fstat_r>
 8011132:	2800      	cmp	r0, #0
 8011134:	dbf1      	blt.n	801111a <__swhatbuf_r+0x12>
 8011136:	9a01      	ldr	r2, [sp, #4]
 8011138:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801113c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011140:	425a      	negs	r2, r3
 8011142:	415a      	adcs	r2, r3
 8011144:	602a      	str	r2, [r5, #0]
 8011146:	e7ee      	b.n	8011126 <__swhatbuf_r+0x1e>
 8011148:	2340      	movs	r3, #64	; 0x40
 801114a:	2000      	movs	r0, #0
 801114c:	6023      	str	r3, [r4, #0]
 801114e:	b016      	add	sp, #88	; 0x58
 8011150:	bd70      	pop	{r4, r5, r6, pc}
	...

08011154 <__smakebuf_r>:
 8011154:	898b      	ldrh	r3, [r1, #12]
 8011156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011158:	079d      	lsls	r5, r3, #30
 801115a:	4606      	mov	r6, r0
 801115c:	460c      	mov	r4, r1
 801115e:	d507      	bpl.n	8011170 <__smakebuf_r+0x1c>
 8011160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011164:	6023      	str	r3, [r4, #0]
 8011166:	6123      	str	r3, [r4, #16]
 8011168:	2301      	movs	r3, #1
 801116a:	6163      	str	r3, [r4, #20]
 801116c:	b002      	add	sp, #8
 801116e:	bd70      	pop	{r4, r5, r6, pc}
 8011170:	ab01      	add	r3, sp, #4
 8011172:	466a      	mov	r2, sp
 8011174:	f7ff ffc8 	bl	8011108 <__swhatbuf_r>
 8011178:	9900      	ldr	r1, [sp, #0]
 801117a:	4605      	mov	r5, r0
 801117c:	4630      	mov	r0, r6
 801117e:	f7ff f963 	bl	8010448 <_malloc_r>
 8011182:	b948      	cbnz	r0, 8011198 <__smakebuf_r+0x44>
 8011184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011188:	059a      	lsls	r2, r3, #22
 801118a:	d4ef      	bmi.n	801116c <__smakebuf_r+0x18>
 801118c:	f023 0303 	bic.w	r3, r3, #3
 8011190:	f043 0302 	orr.w	r3, r3, #2
 8011194:	81a3      	strh	r3, [r4, #12]
 8011196:	e7e3      	b.n	8011160 <__smakebuf_r+0xc>
 8011198:	4b0d      	ldr	r3, [pc, #52]	; (80111d0 <__smakebuf_r+0x7c>)
 801119a:	62b3      	str	r3, [r6, #40]	; 0x28
 801119c:	89a3      	ldrh	r3, [r4, #12]
 801119e:	6020      	str	r0, [r4, #0]
 80111a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111a4:	81a3      	strh	r3, [r4, #12]
 80111a6:	9b00      	ldr	r3, [sp, #0]
 80111a8:	6163      	str	r3, [r4, #20]
 80111aa:	9b01      	ldr	r3, [sp, #4]
 80111ac:	6120      	str	r0, [r4, #16]
 80111ae:	b15b      	cbz	r3, 80111c8 <__smakebuf_r+0x74>
 80111b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111b4:	4630      	mov	r0, r6
 80111b6:	f000 f8d1 	bl	801135c <_isatty_r>
 80111ba:	b128      	cbz	r0, 80111c8 <__smakebuf_r+0x74>
 80111bc:	89a3      	ldrh	r3, [r4, #12]
 80111be:	f023 0303 	bic.w	r3, r3, #3
 80111c2:	f043 0301 	orr.w	r3, r3, #1
 80111c6:	81a3      	strh	r3, [r4, #12]
 80111c8:	89a0      	ldrh	r0, [r4, #12]
 80111ca:	4305      	orrs	r5, r0
 80111cc:	81a5      	strh	r5, [r4, #12]
 80111ce:	e7cd      	b.n	801116c <__smakebuf_r+0x18>
 80111d0:	08010f61 	.word	0x08010f61

080111d4 <_malloc_usable_size_r>:
 80111d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111d8:	1f18      	subs	r0, r3, #4
 80111da:	2b00      	cmp	r3, #0
 80111dc:	bfbc      	itt	lt
 80111de:	580b      	ldrlt	r3, [r1, r0]
 80111e0:	18c0      	addlt	r0, r0, r3
 80111e2:	4770      	bx	lr

080111e4 <_raise_r>:
 80111e4:	291f      	cmp	r1, #31
 80111e6:	b538      	push	{r3, r4, r5, lr}
 80111e8:	4604      	mov	r4, r0
 80111ea:	460d      	mov	r5, r1
 80111ec:	d904      	bls.n	80111f8 <_raise_r+0x14>
 80111ee:	2316      	movs	r3, #22
 80111f0:	6003      	str	r3, [r0, #0]
 80111f2:	f04f 30ff 	mov.w	r0, #4294967295
 80111f6:	bd38      	pop	{r3, r4, r5, pc}
 80111f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80111fa:	b112      	cbz	r2, 8011202 <_raise_r+0x1e>
 80111fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011200:	b94b      	cbnz	r3, 8011216 <_raise_r+0x32>
 8011202:	4620      	mov	r0, r4
 8011204:	f000 f830 	bl	8011268 <_getpid_r>
 8011208:	462a      	mov	r2, r5
 801120a:	4601      	mov	r1, r0
 801120c:	4620      	mov	r0, r4
 801120e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011212:	f000 b817 	b.w	8011244 <_kill_r>
 8011216:	2b01      	cmp	r3, #1
 8011218:	d00a      	beq.n	8011230 <_raise_r+0x4c>
 801121a:	1c59      	adds	r1, r3, #1
 801121c:	d103      	bne.n	8011226 <_raise_r+0x42>
 801121e:	2316      	movs	r3, #22
 8011220:	6003      	str	r3, [r0, #0]
 8011222:	2001      	movs	r0, #1
 8011224:	e7e7      	b.n	80111f6 <_raise_r+0x12>
 8011226:	2400      	movs	r4, #0
 8011228:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801122c:	4628      	mov	r0, r5
 801122e:	4798      	blx	r3
 8011230:	2000      	movs	r0, #0
 8011232:	e7e0      	b.n	80111f6 <_raise_r+0x12>

08011234 <raise>:
 8011234:	4b02      	ldr	r3, [pc, #8]	; (8011240 <raise+0xc>)
 8011236:	4601      	mov	r1, r0
 8011238:	6818      	ldr	r0, [r3, #0]
 801123a:	f7ff bfd3 	b.w	80111e4 <_raise_r>
 801123e:	bf00      	nop
 8011240:	24000378 	.word	0x24000378

08011244 <_kill_r>:
 8011244:	b538      	push	{r3, r4, r5, lr}
 8011246:	4d07      	ldr	r5, [pc, #28]	; (8011264 <_kill_r+0x20>)
 8011248:	2300      	movs	r3, #0
 801124a:	4604      	mov	r4, r0
 801124c:	4608      	mov	r0, r1
 801124e:	4611      	mov	r1, r2
 8011250:	602b      	str	r3, [r5, #0]
 8011252:	f7f2 ff27 	bl	80040a4 <_kill>
 8011256:	1c43      	adds	r3, r0, #1
 8011258:	d102      	bne.n	8011260 <_kill_r+0x1c>
 801125a:	682b      	ldr	r3, [r5, #0]
 801125c:	b103      	cbz	r3, 8011260 <_kill_r+0x1c>
 801125e:	6023      	str	r3, [r4, #0]
 8011260:	bd38      	pop	{r3, r4, r5, pc}
 8011262:	bf00      	nop
 8011264:	2400f300 	.word	0x2400f300

08011268 <_getpid_r>:
 8011268:	f7f2 bf1a 	b.w	80040a0 <_getpid>

0801126c <__sread>:
 801126c:	b510      	push	{r4, lr}
 801126e:	460c      	mov	r4, r1
 8011270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011274:	f000 f894 	bl	80113a0 <_read_r>
 8011278:	2800      	cmp	r0, #0
 801127a:	bfab      	itete	ge
 801127c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801127e:	89a3      	ldrhlt	r3, [r4, #12]
 8011280:	181b      	addge	r3, r3, r0
 8011282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011286:	bfac      	ite	ge
 8011288:	6563      	strge	r3, [r4, #84]	; 0x54
 801128a:	81a3      	strhlt	r3, [r4, #12]
 801128c:	bd10      	pop	{r4, pc}

0801128e <__swrite>:
 801128e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011292:	461f      	mov	r7, r3
 8011294:	898b      	ldrh	r3, [r1, #12]
 8011296:	05db      	lsls	r3, r3, #23
 8011298:	4605      	mov	r5, r0
 801129a:	460c      	mov	r4, r1
 801129c:	4616      	mov	r6, r2
 801129e:	d505      	bpl.n	80112ac <__swrite+0x1e>
 80112a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112a4:	2302      	movs	r3, #2
 80112a6:	2200      	movs	r2, #0
 80112a8:	f000 f868 	bl	801137c <_lseek_r>
 80112ac:	89a3      	ldrh	r3, [r4, #12]
 80112ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112b6:	81a3      	strh	r3, [r4, #12]
 80112b8:	4632      	mov	r2, r6
 80112ba:	463b      	mov	r3, r7
 80112bc:	4628      	mov	r0, r5
 80112be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112c2:	f000 b817 	b.w	80112f4 <_write_r>

080112c6 <__sseek>:
 80112c6:	b510      	push	{r4, lr}
 80112c8:	460c      	mov	r4, r1
 80112ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112ce:	f000 f855 	bl	801137c <_lseek_r>
 80112d2:	1c43      	adds	r3, r0, #1
 80112d4:	89a3      	ldrh	r3, [r4, #12]
 80112d6:	bf15      	itete	ne
 80112d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80112da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80112de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80112e2:	81a3      	strheq	r3, [r4, #12]
 80112e4:	bf18      	it	ne
 80112e6:	81a3      	strhne	r3, [r4, #12]
 80112e8:	bd10      	pop	{r4, pc}

080112ea <__sclose>:
 80112ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112ee:	f000 b813 	b.w	8011318 <_close_r>
	...

080112f4 <_write_r>:
 80112f4:	b538      	push	{r3, r4, r5, lr}
 80112f6:	4d07      	ldr	r5, [pc, #28]	; (8011314 <_write_r+0x20>)
 80112f8:	4604      	mov	r4, r0
 80112fa:	4608      	mov	r0, r1
 80112fc:	4611      	mov	r1, r2
 80112fe:	2200      	movs	r2, #0
 8011300:	602a      	str	r2, [r5, #0]
 8011302:	461a      	mov	r2, r3
 8011304:	f7f2 feec 	bl	80040e0 <_write>
 8011308:	1c43      	adds	r3, r0, #1
 801130a:	d102      	bne.n	8011312 <_write_r+0x1e>
 801130c:	682b      	ldr	r3, [r5, #0]
 801130e:	b103      	cbz	r3, 8011312 <_write_r+0x1e>
 8011310:	6023      	str	r3, [r4, #0]
 8011312:	bd38      	pop	{r3, r4, r5, pc}
 8011314:	2400f300 	.word	0x2400f300

08011318 <_close_r>:
 8011318:	b538      	push	{r3, r4, r5, lr}
 801131a:	4d06      	ldr	r5, [pc, #24]	; (8011334 <_close_r+0x1c>)
 801131c:	2300      	movs	r3, #0
 801131e:	4604      	mov	r4, r0
 8011320:	4608      	mov	r0, r1
 8011322:	602b      	str	r3, [r5, #0]
 8011324:	f7f2 feea 	bl	80040fc <_close>
 8011328:	1c43      	adds	r3, r0, #1
 801132a:	d102      	bne.n	8011332 <_close_r+0x1a>
 801132c:	682b      	ldr	r3, [r5, #0]
 801132e:	b103      	cbz	r3, 8011332 <_close_r+0x1a>
 8011330:	6023      	str	r3, [r4, #0]
 8011332:	bd38      	pop	{r3, r4, r5, pc}
 8011334:	2400f300 	.word	0x2400f300

08011338 <_fstat_r>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	4d07      	ldr	r5, [pc, #28]	; (8011358 <_fstat_r+0x20>)
 801133c:	2300      	movs	r3, #0
 801133e:	4604      	mov	r4, r0
 8011340:	4608      	mov	r0, r1
 8011342:	4611      	mov	r1, r2
 8011344:	602b      	str	r3, [r5, #0]
 8011346:	f7f2 fedd 	bl	8004104 <_fstat>
 801134a:	1c43      	adds	r3, r0, #1
 801134c:	d102      	bne.n	8011354 <_fstat_r+0x1c>
 801134e:	682b      	ldr	r3, [r5, #0]
 8011350:	b103      	cbz	r3, 8011354 <_fstat_r+0x1c>
 8011352:	6023      	str	r3, [r4, #0]
 8011354:	bd38      	pop	{r3, r4, r5, pc}
 8011356:	bf00      	nop
 8011358:	2400f300 	.word	0x2400f300

0801135c <_isatty_r>:
 801135c:	b538      	push	{r3, r4, r5, lr}
 801135e:	4d06      	ldr	r5, [pc, #24]	; (8011378 <_isatty_r+0x1c>)
 8011360:	2300      	movs	r3, #0
 8011362:	4604      	mov	r4, r0
 8011364:	4608      	mov	r0, r1
 8011366:	602b      	str	r3, [r5, #0]
 8011368:	f7f2 fed2 	bl	8004110 <_isatty>
 801136c:	1c43      	adds	r3, r0, #1
 801136e:	d102      	bne.n	8011376 <_isatty_r+0x1a>
 8011370:	682b      	ldr	r3, [r5, #0]
 8011372:	b103      	cbz	r3, 8011376 <_isatty_r+0x1a>
 8011374:	6023      	str	r3, [r4, #0]
 8011376:	bd38      	pop	{r3, r4, r5, pc}
 8011378:	2400f300 	.word	0x2400f300

0801137c <_lseek_r>:
 801137c:	b538      	push	{r3, r4, r5, lr}
 801137e:	4d07      	ldr	r5, [pc, #28]	; (801139c <_lseek_r+0x20>)
 8011380:	4604      	mov	r4, r0
 8011382:	4608      	mov	r0, r1
 8011384:	4611      	mov	r1, r2
 8011386:	2200      	movs	r2, #0
 8011388:	602a      	str	r2, [r5, #0]
 801138a:	461a      	mov	r2, r3
 801138c:	f7f2 fec2 	bl	8004114 <_lseek>
 8011390:	1c43      	adds	r3, r0, #1
 8011392:	d102      	bne.n	801139a <_lseek_r+0x1e>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	b103      	cbz	r3, 801139a <_lseek_r+0x1e>
 8011398:	6023      	str	r3, [r4, #0]
 801139a:	bd38      	pop	{r3, r4, r5, pc}
 801139c:	2400f300 	.word	0x2400f300

080113a0 <_read_r>:
 80113a0:	b538      	push	{r3, r4, r5, lr}
 80113a2:	4d07      	ldr	r5, [pc, #28]	; (80113c0 <_read_r+0x20>)
 80113a4:	4604      	mov	r4, r0
 80113a6:	4608      	mov	r0, r1
 80113a8:	4611      	mov	r1, r2
 80113aa:	2200      	movs	r2, #0
 80113ac:	602a      	str	r2, [r5, #0]
 80113ae:	461a      	mov	r2, r3
 80113b0:	f7f2 fe88 	bl	80040c4 <_read>
 80113b4:	1c43      	adds	r3, r0, #1
 80113b6:	d102      	bne.n	80113be <_read_r+0x1e>
 80113b8:	682b      	ldr	r3, [r5, #0]
 80113ba:	b103      	cbz	r3, 80113be <_read_r+0x1e>
 80113bc:	6023      	str	r3, [r4, #0]
 80113be:	bd38      	pop	{r3, r4, r5, pc}
 80113c0:	2400f300 	.word	0x2400f300
 80113c4:	00000000 	.word	0x00000000

080113c8 <exp>:
 80113c8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80113ca:	ee10 3a90 	vmov	r3, s1
 80113ce:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80113d2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80113d6:	18a2      	adds	r2, r4, r2
 80113d8:	2a3e      	cmp	r2, #62	; 0x3e
 80113da:	ee10 1a10 	vmov	r1, s0
 80113de:	d922      	bls.n	8011426 <exp+0x5e>
 80113e0:	2a00      	cmp	r2, #0
 80113e2:	da06      	bge.n	80113f2 <exp+0x2a>
 80113e4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80113e8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80113ec:	b004      	add	sp, #16
 80113ee:	bcf0      	pop	{r4, r5, r6, r7}
 80113f0:	4770      	bx	lr
 80113f2:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 80113f6:	f04f 0000 	mov.w	r0, #0
 80113fa:	d913      	bls.n	8011424 <exp+0x5c>
 80113fc:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8011400:	bf08      	it	eq
 8011402:	4281      	cmpeq	r1, r0
 8011404:	f000 80a0 	beq.w	8011548 <exp+0x180>
 8011408:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801140c:	4294      	cmp	r4, r2
 801140e:	d0e9      	beq.n	80113e4 <exp+0x1c>
 8011410:	4283      	cmp	r3, r0
 8011412:	da03      	bge.n	801141c <exp+0x54>
 8011414:	b004      	add	sp, #16
 8011416:	bcf0      	pop	{r4, r5, r6, r7}
 8011418:	f000 b9be 	b.w	8011798 <__math_uflow>
 801141c:	b004      	add	sp, #16
 801141e:	bcf0      	pop	{r4, r5, r6, r7}
 8011420:	f000 b9c2 	b.w	80117a8 <__math_oflow>
 8011424:	4604      	mov	r4, r0
 8011426:	4950      	ldr	r1, [pc, #320]	; (8011568 <exp+0x1a0>)
 8011428:	ed91 6b02 	vldr	d6, [r1, #8]
 801142c:	ed91 5b00 	vldr	d5, [r1]
 8011430:	eeb0 7b46 	vmov.f64	d7, d6
 8011434:	eea5 7b00 	vfma.f64	d7, d5, d0
 8011438:	ee17 5a10 	vmov	r5, s14
 801143c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011440:	ed91 6b04 	vldr	d6, [r1, #16]
 8011444:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011448:	eea6 0b07 	vfma.f64	d0, d6, d7
 801144c:	ed91 6b06 	vldr	d6, [r1, #24]
 8011450:	18d8      	adds	r0, r3, r3
 8011452:	f100 030f 	add.w	r3, r0, #15
 8011456:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801145a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801145e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011462:	ee20 7b00 	vmul.f64	d7, d0, d0
 8011466:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801146a:	ed91 5b08 	vldr	d5, [r1, #32]
 801146e:	ee30 6b06 	vadd.f64	d6, d0, d6
 8011472:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011476:	eea4 5b00 	vfma.f64	d5, d4, d0
 801147a:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801147e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011482:	ee27 7b07 	vmul.f64	d7, d7, d7
 8011486:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801148a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801148e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8011492:	eea4 5b00 	vfma.f64	d5, d4, d0
 8011496:	2600      	movs	r6, #0
 8011498:	19f2      	adds	r2, r6, r7
 801149a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801149e:	eea7 6b05 	vfma.f64	d6, d7, d5
 80114a2:	2c00      	cmp	r4, #0
 80114a4:	d14b      	bne.n	801153e <exp+0x176>
 80114a6:	42b5      	cmp	r5, r6
 80114a8:	db10      	blt.n	80114cc <exp+0x104>
 80114aa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80114ae:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8011550 <exp+0x188>
 80114b2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80114b6:	4610      	mov	r0, r2
 80114b8:	ec41 0b10 	vmov	d0, r0, r1
 80114bc:	eea6 0b00 	vfma.f64	d0, d6, d0
 80114c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80114c4:	b004      	add	sp, #16
 80114c6:	bcf0      	pop	{r4, r5, r6, r7}
 80114c8:	f000 b9a6 	b.w	8011818 <__math_check_oflow>
 80114cc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80114d0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80114d4:	4610      	mov	r0, r2
 80114d6:	ec41 0b17 	vmov	d7, r0, r1
 80114da:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80114de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80114e2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80114e6:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80114ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ee:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011558 <exp+0x190>
 80114f2:	d51e      	bpl.n	8011532 <exp+0x16a>
 80114f4:	ee35 3b04 	vadd.f64	d3, d5, d4
 80114f8:	ee37 7b45 	vsub.f64	d7, d7, d5
 80114fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011500:	ee34 6b43 	vsub.f64	d6, d4, d3
 8011504:	ee36 5b05 	vadd.f64	d5, d6, d5
 8011508:	ee35 5b07 	vadd.f64	d5, d5, d7
 801150c:	ee35 5b03 	vadd.f64	d5, d5, d3
 8011510:	ee35 5b44 	vsub.f64	d5, d5, d4
 8011514:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8011518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801151c:	d101      	bne.n	8011522 <exp+0x15a>
 801151e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8011560 <exp+0x198>
 8011522:	ed8d 0b00 	vstr	d0, [sp]
 8011526:	ed9d 7b00 	vldr	d7, [sp]
 801152a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801152e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011532:	ee25 0b00 	vmul.f64	d0, d5, d0
 8011536:	b004      	add	sp, #16
 8011538:	bcf0      	pop	{r4, r5, r6, r7}
 801153a:	f000 b964 	b.w	8011806 <__math_check_uflow>
 801153e:	ec43 2b10 	vmov	d0, r2, r3
 8011542:	eea6 0b00 	vfma.f64	d0, d6, d0
 8011546:	e751      	b.n	80113ec <exp+0x24>
 8011548:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011560 <exp+0x198>
 801154c:	e74e      	b.n	80113ec <exp+0x24>
 801154e:	bf00      	nop
 8011550:	00000000 	.word	0x00000000
 8011554:	7f000000 	.word	0x7f000000
 8011558:	00000000 	.word	0x00000000
 801155c:	00100000 	.word	0x00100000
	...
 8011568:	0801ba80 	.word	0x0801ba80
 801156c:	00000000 	.word	0x00000000

08011570 <log>:
 8011570:	b470      	push	{r4, r5, r6}
 8011572:	ee10 1a90 	vmov	r1, s1
 8011576:	ee10 2a10 	vmov	r2, s0
 801157a:	f04f 34ff 	mov.w	r4, #4294967295
 801157e:	4294      	cmp	r4, r2
 8011580:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8011584:	4c72      	ldr	r4, [pc, #456]	; (8011750 <log+0x1e0>)
 8011586:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 801158a:	eb74 0000 	sbcs.w	r0, r4, r0
 801158e:	ed2d 8b02 	vpush	{d8}
 8011592:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8011596:	d35c      	bcc.n	8011652 <log+0xe2>
 8011598:	4b6e      	ldr	r3, [pc, #440]	; (8011754 <log+0x1e4>)
 801159a:	4299      	cmp	r1, r3
 801159c:	bf08      	it	eq
 801159e:	2a00      	cmpeq	r2, #0
 80115a0:	f000 80c6 	beq.w	8011730 <log+0x1c0>
 80115a4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80115a8:	ee30 0b47 	vsub.f64	d0, d0, d7
 80115ac:	4b6a      	ldr	r3, [pc, #424]	; (8011758 <log+0x1e8>)
 80115ae:	ee20 2b00 	vmul.f64	d2, d0, d0
 80115b2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80115b6:	ee20 4b02 	vmul.f64	d4, d0, d2
 80115ba:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80115be:	eea6 7b00 	vfma.f64	d7, d6, d0
 80115c2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80115c6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 80115ca:	eea6 7b02 	vfma.f64	d7, d6, d2
 80115ce:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80115d2:	eea5 6b00 	vfma.f64	d6, d5, d0
 80115d6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80115da:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 80115de:	eea5 6b02 	vfma.f64	d6, d5, d2
 80115e2:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 80115e6:	eea3 5b00 	vfma.f64	d5, d3, d0
 80115ea:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 80115ee:	eea3 5b02 	vfma.f64	d5, d3, d2
 80115f2:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 80115f6:	eeb0 2b40 	vmov.f64	d2, d0
 80115fa:	eea3 5b04 	vfma.f64	d5, d3, d4
 80115fe:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011602:	eea5 6b04 	vfma.f64	d6, d5, d4
 8011606:	eea6 7b04 	vfma.f64	d7, d6, d4
 801160a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8011738 <log+0x1c8>
 801160e:	eeb0 1b47 	vmov.f64	d1, d7
 8011612:	eeb0 5b40 	vmov.f64	d5, d0
 8011616:	eea0 5b06 	vfma.f64	d5, d0, d6
 801161a:	eea0 5b46 	vfms.f64	d5, d0, d6
 801161e:	ee30 8b45 	vsub.f64	d8, d0, d5
 8011622:	ee25 7b05 	vmul.f64	d7, d5, d5
 8011626:	ee30 5b05 	vadd.f64	d5, d0, d5
 801162a:	eea7 2b03 	vfma.f64	d2, d7, d3
 801162e:	ee30 6b42 	vsub.f64	d6, d0, d2
 8011632:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011636:	ee23 3b08 	vmul.f64	d3, d3, d8
 801163a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801163e:	eeb0 0b46 	vmov.f64	d0, d6
 8011642:	eea1 0b04 	vfma.f64	d0, d1, d4
 8011646:	ee32 0b00 	vadd.f64	d0, d2, d0
 801164a:	ecbd 8b02 	vpop	{d8}
 801164e:	bc70      	pop	{r4, r5, r6}
 8011650:	4770      	bx	lr
 8011652:	f1a3 0410 	sub.w	r4, r3, #16
 8011656:	f647 70df 	movw	r0, #32735	; 0x7fdf
 801165a:	4284      	cmp	r4, r0
 801165c:	d923      	bls.n	80116a6 <log+0x136>
 801165e:	1894      	adds	r4, r2, r2
 8011660:	eb41 0001 	adc.w	r0, r1, r1
 8011664:	4320      	orrs	r0, r4
 8011666:	d105      	bne.n	8011674 <log+0x104>
 8011668:	ecbd 8b02 	vpop	{d8}
 801166c:	2001      	movs	r0, #1
 801166e:	bc70      	pop	{r4, r5, r6}
 8011670:	f000 b8a2 	b.w	80117b8 <__math_divzero>
 8011674:	4839      	ldr	r0, [pc, #228]	; (801175c <log+0x1ec>)
 8011676:	4281      	cmp	r1, r0
 8011678:	bf08      	it	eq
 801167a:	2a00      	cmpeq	r2, #0
 801167c:	d0e5      	beq.n	801164a <log+0xda>
 801167e:	041a      	lsls	r2, r3, #16
 8011680:	d404      	bmi.n	801168c <log+0x11c>
 8011682:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8011686:	ea32 0303 	bics.w	r3, r2, r3
 801168a:	d104      	bne.n	8011696 <log+0x126>
 801168c:	ecbd 8b02 	vpop	{d8}
 8011690:	bc70      	pop	{r4, r5, r6}
 8011692:	f000 b8a9 	b.w	80117e8 <__math_invalid>
 8011696:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8011740 <log+0x1d0>
 801169a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801169e:	ec53 2b17 	vmov	r2, r3, d7
 80116a2:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 80116a6:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80116aa:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 80116ae:	0d1e      	lsrs	r6, r3, #20
 80116b0:	1e14      	subs	r4, r2, #0
 80116b2:	4a29      	ldr	r2, [pc, #164]	; (8011758 <log+0x1e8>)
 80116b4:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80116b8:	f3c3 3046 	ubfx	r0, r3, #13, #7
 80116bc:	0536      	lsls	r6, r6, #20
 80116be:	1b8d      	subs	r5, r1, r6
 80116c0:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 80116c4:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 80116c8:	ec45 4b16 	vmov	d6, r4, r5
 80116cc:	151b      	asrs	r3, r3, #20
 80116ce:	eea6 5b07 	vfma.f64	d5, d6, d7
 80116d2:	ee07 3a90 	vmov	s15, r3
 80116d6:	ee25 2b05 	vmul.f64	d2, d5, d5
 80116da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80116de:	ed92 4b00 	vldr	d4, [r2]
 80116e2:	ee25 1b02 	vmul.f64	d1, d5, d2
 80116e6:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 80116ea:	eea4 7b06 	vfma.f64	d7, d4, d6
 80116ee:	ee35 4b07 	vadd.f64	d4, d5, d7
 80116f2:	ee37 0b44 	vsub.f64	d0, d7, d4
 80116f6:	ed92 7b02 	vldr	d7, [r2, #8]
 80116fa:	ee30 0b05 	vadd.f64	d0, d0, d5
 80116fe:	eea7 0b06 	vfma.f64	d0, d7, d6
 8011702:	ed92 7b04 	vldr	d7, [r2, #16]
 8011706:	ed92 6b08 	vldr	d6, [r2, #32]
 801170a:	eea7 0b02 	vfma.f64	d0, d7, d2
 801170e:	ed92 7b06 	vldr	d7, [r2, #24]
 8011712:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 8011716:	eea6 7b05 	vfma.f64	d7, d6, d5
 801171a:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 801171e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011722:	eea6 7b02 	vfma.f64	d7, d6, d2
 8011726:	eea1 0b07 	vfma.f64	d0, d1, d7
 801172a:	ee30 0b04 	vadd.f64	d0, d0, d4
 801172e:	e78c      	b.n	801164a <log+0xda>
 8011730:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011748 <log+0x1d8>
 8011734:	e789      	b.n	801164a <log+0xda>
 8011736:	bf00      	nop
 8011738:	00000000 	.word	0x00000000
 801173c:	41a00000 	.word	0x41a00000
 8011740:	00000000 	.word	0x00000000
 8011744:	43300000 	.word	0x43300000
	...
 8011750:	000308ff 	.word	0x000308ff
 8011754:	3ff00000 	.word	0x3ff00000
 8011758:	0801c2f0 	.word	0x0801c2f0
 801175c:	7ff00000 	.word	0x7ff00000

08011760 <with_errno>:
 8011760:	b513      	push	{r0, r1, r4, lr}
 8011762:	4604      	mov	r4, r0
 8011764:	ed8d 0b00 	vstr	d0, [sp]
 8011768:	f7fc ff9e 	bl	800e6a8 <__errno>
 801176c:	ed9d 0b00 	vldr	d0, [sp]
 8011770:	6004      	str	r4, [r0, #0]
 8011772:	b002      	add	sp, #8
 8011774:	bd10      	pop	{r4, pc}

08011776 <xflow>:
 8011776:	b082      	sub	sp, #8
 8011778:	b158      	cbz	r0, 8011792 <xflow+0x1c>
 801177a:	eeb1 7b40 	vneg.f64	d7, d0
 801177e:	ed8d 7b00 	vstr	d7, [sp]
 8011782:	ed9d 7b00 	vldr	d7, [sp]
 8011786:	2022      	movs	r0, #34	; 0x22
 8011788:	ee20 0b07 	vmul.f64	d0, d0, d7
 801178c:	b002      	add	sp, #8
 801178e:	f7ff bfe7 	b.w	8011760 <with_errno>
 8011792:	eeb0 7b40 	vmov.f64	d7, d0
 8011796:	e7f2      	b.n	801177e <xflow+0x8>

08011798 <__math_uflow>:
 8011798:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80117a0 <__math_uflow+0x8>
 801179c:	f7ff bfeb 	b.w	8011776 <xflow>
 80117a0:	00000000 	.word	0x00000000
 80117a4:	10000000 	.word	0x10000000

080117a8 <__math_oflow>:
 80117a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80117b0 <__math_oflow+0x8>
 80117ac:	f7ff bfe3 	b.w	8011776 <xflow>
 80117b0:	00000000 	.word	0x00000000
 80117b4:	70000000 	.word	0x70000000

080117b8 <__math_divzero>:
 80117b8:	b082      	sub	sp, #8
 80117ba:	2800      	cmp	r0, #0
 80117bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80117c0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80117c4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80117c8:	ed8d 7b00 	vstr	d7, [sp]
 80117cc:	ed9d 0b00 	vldr	d0, [sp]
 80117d0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80117e0 <__math_divzero+0x28>
 80117d4:	2022      	movs	r0, #34	; 0x22
 80117d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80117da:	b002      	add	sp, #8
 80117dc:	f7ff bfc0 	b.w	8011760 <with_errno>
	...

080117e8 <__math_invalid>:
 80117e8:	eeb0 7b40 	vmov.f64	d7, d0
 80117ec:	eeb4 7b47 	vcmp.f64	d7, d7
 80117f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80117f8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80117fc:	d602      	bvs.n	8011804 <__math_invalid+0x1c>
 80117fe:	2021      	movs	r0, #33	; 0x21
 8011800:	f7ff bfae 	b.w	8011760 <with_errno>
 8011804:	4770      	bx	lr

08011806 <__math_check_uflow>:
 8011806:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801180e:	d102      	bne.n	8011816 <__math_check_uflow+0x10>
 8011810:	2022      	movs	r0, #34	; 0x22
 8011812:	f7ff bfa5 	b.w	8011760 <with_errno>
 8011816:	4770      	bx	lr

08011818 <__math_check_oflow>:
 8011818:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011838 <__math_check_oflow+0x20>
 801181c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011820:	eeb4 7b46 	vcmp.f64	d7, d6
 8011824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011828:	dd02      	ble.n	8011830 <__math_check_oflow+0x18>
 801182a:	2022      	movs	r0, #34	; 0x22
 801182c:	f7ff bf98 	b.w	8011760 <with_errno>
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop
 8011834:	f3af 8000 	nop.w
 8011838:	ffffffff 	.word	0xffffffff
 801183c:	7fefffff 	.word	0x7fefffff

08011840 <cos>:
 8011840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011842:	eeb0 7b40 	vmov.f64	d7, d0
 8011846:	ee17 3a90 	vmov	r3, s15
 801184a:	4a21      	ldr	r2, [pc, #132]	; (80118d0 <cos+0x90>)
 801184c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011850:	4293      	cmp	r3, r2
 8011852:	dc06      	bgt.n	8011862 <cos+0x22>
 8011854:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80118c8 <cos+0x88>
 8011858:	b005      	add	sp, #20
 801185a:	f85d eb04 	ldr.w	lr, [sp], #4
 801185e:	f000 ba6f 	b.w	8011d40 <__kernel_cos>
 8011862:	4a1c      	ldr	r2, [pc, #112]	; (80118d4 <cos+0x94>)
 8011864:	4293      	cmp	r3, r2
 8011866:	dd04      	ble.n	8011872 <cos+0x32>
 8011868:	ee30 0b40 	vsub.f64	d0, d0, d0
 801186c:	b005      	add	sp, #20
 801186e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011872:	4668      	mov	r0, sp
 8011874:	f000 f920 	bl	8011ab8 <__ieee754_rem_pio2>
 8011878:	f000 0003 	and.w	r0, r0, #3
 801187c:	2801      	cmp	r0, #1
 801187e:	d009      	beq.n	8011894 <cos+0x54>
 8011880:	2802      	cmp	r0, #2
 8011882:	d010      	beq.n	80118a6 <cos+0x66>
 8011884:	b9b0      	cbnz	r0, 80118b4 <cos+0x74>
 8011886:	ed9d 1b02 	vldr	d1, [sp, #8]
 801188a:	ed9d 0b00 	vldr	d0, [sp]
 801188e:	f000 fa57 	bl	8011d40 <__kernel_cos>
 8011892:	e7eb      	b.n	801186c <cos+0x2c>
 8011894:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011898:	ed9d 0b00 	vldr	d0, [sp]
 801189c:	f000 fd54 	bl	8012348 <__kernel_sin>
 80118a0:	eeb1 0b40 	vneg.f64	d0, d0
 80118a4:	e7e2      	b.n	801186c <cos+0x2c>
 80118a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118aa:	ed9d 0b00 	vldr	d0, [sp]
 80118ae:	f000 fa47 	bl	8011d40 <__kernel_cos>
 80118b2:	e7f5      	b.n	80118a0 <cos+0x60>
 80118b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118b8:	ed9d 0b00 	vldr	d0, [sp]
 80118bc:	2001      	movs	r0, #1
 80118be:	f000 fd43 	bl	8012348 <__kernel_sin>
 80118c2:	e7d3      	b.n	801186c <cos+0x2c>
 80118c4:	f3af 8000 	nop.w
	...
 80118d0:	3fe921fb 	.word	0x3fe921fb
 80118d4:	7fefffff 	.word	0x7fefffff

080118d8 <sin>:
 80118d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118da:	eeb0 7b40 	vmov.f64	d7, d0
 80118de:	ee17 3a90 	vmov	r3, s15
 80118e2:	4a21      	ldr	r2, [pc, #132]	; (8011968 <sin+0x90>)
 80118e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80118e8:	4293      	cmp	r3, r2
 80118ea:	dc07      	bgt.n	80118fc <sin+0x24>
 80118ec:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011960 <sin+0x88>
 80118f0:	2000      	movs	r0, #0
 80118f2:	b005      	add	sp, #20
 80118f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80118f8:	f000 bd26 	b.w	8012348 <__kernel_sin>
 80118fc:	4a1b      	ldr	r2, [pc, #108]	; (801196c <sin+0x94>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	dd04      	ble.n	801190c <sin+0x34>
 8011902:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011906:	b005      	add	sp, #20
 8011908:	f85d fb04 	ldr.w	pc, [sp], #4
 801190c:	4668      	mov	r0, sp
 801190e:	f000 f8d3 	bl	8011ab8 <__ieee754_rem_pio2>
 8011912:	f000 0003 	and.w	r0, r0, #3
 8011916:	2801      	cmp	r0, #1
 8011918:	d00a      	beq.n	8011930 <sin+0x58>
 801191a:	2802      	cmp	r0, #2
 801191c:	d00f      	beq.n	801193e <sin+0x66>
 801191e:	b9c0      	cbnz	r0, 8011952 <sin+0x7a>
 8011920:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011924:	ed9d 0b00 	vldr	d0, [sp]
 8011928:	2001      	movs	r0, #1
 801192a:	f000 fd0d 	bl	8012348 <__kernel_sin>
 801192e:	e7ea      	b.n	8011906 <sin+0x2e>
 8011930:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011934:	ed9d 0b00 	vldr	d0, [sp]
 8011938:	f000 fa02 	bl	8011d40 <__kernel_cos>
 801193c:	e7e3      	b.n	8011906 <sin+0x2e>
 801193e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011942:	ed9d 0b00 	vldr	d0, [sp]
 8011946:	2001      	movs	r0, #1
 8011948:	f000 fcfe 	bl	8012348 <__kernel_sin>
 801194c:	eeb1 0b40 	vneg.f64	d0, d0
 8011950:	e7d9      	b.n	8011906 <sin+0x2e>
 8011952:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011956:	ed9d 0b00 	vldr	d0, [sp]
 801195a:	f000 f9f1 	bl	8011d40 <__kernel_cos>
 801195e:	e7f5      	b.n	801194c <sin+0x74>
	...
 8011968:	3fe921fb 	.word	0x3fe921fb
 801196c:	7fefffff 	.word	0x7fefffff

08011970 <log10>:
 8011970:	b508      	push	{r3, lr}
 8011972:	ed2d 8b02 	vpush	{d8}
 8011976:	eeb0 8b40 	vmov.f64	d8, d0
 801197a:	f000 f82d 	bl	80119d8 <__ieee754_log10>
 801197e:	eeb4 8b48 	vcmp.f64	d8, d8
 8011982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011986:	d60f      	bvs.n	80119a8 <log10+0x38>
 8011988:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011990:	d80a      	bhi.n	80119a8 <log10+0x38>
 8011992:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199a:	d108      	bne.n	80119ae <log10+0x3e>
 801199c:	f7fc fe84 	bl	800e6a8 <__errno>
 80119a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80119c8 <log10+0x58>
 80119a4:	2322      	movs	r3, #34	; 0x22
 80119a6:	6003      	str	r3, [r0, #0]
 80119a8:	ecbd 8b02 	vpop	{d8}
 80119ac:	bd08      	pop	{r3, pc}
 80119ae:	f7fc fe7b 	bl	800e6a8 <__errno>
 80119b2:	ecbd 8b02 	vpop	{d8}
 80119b6:	2321      	movs	r3, #33	; 0x21
 80119b8:	6003      	str	r3, [r0, #0]
 80119ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80119be:	4804      	ldr	r0, [pc, #16]	; (80119d0 <log10+0x60>)
 80119c0:	f000 bd9a 	b.w	80124f8 <nan>
 80119c4:	f3af 8000 	nop.w
 80119c8:	00000000 	.word	0x00000000
 80119cc:	fff00000 	.word	0xfff00000
 80119d0:	0801b910 	.word	0x0801b910
 80119d4:	00000000 	.word	0x00000000

080119d8 <__ieee754_log10>:
 80119d8:	b510      	push	{r4, lr}
 80119da:	ee10 3a90 	vmov	r3, s1
 80119de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119e2:	ed2d 8b02 	vpush	{d8}
 80119e6:	da21      	bge.n	8011a2c <__ieee754_log10+0x54>
 80119e8:	ee10 1a10 	vmov	r1, s0
 80119ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80119f0:	430a      	orrs	r2, r1
 80119f2:	d108      	bne.n	8011a06 <__ieee754_log10+0x2e>
 80119f4:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8011a80 <__ieee754_log10+0xa8>
 80119f8:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8011a88 <__ieee754_log10+0xb0>
 80119fc:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8011a00:	ecbd 8b02 	vpop	{d8}
 8011a04:	bd10      	pop	{r4, pc}
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	da02      	bge.n	8011a10 <__ieee754_log10+0x38>
 8011a0a:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011a0e:	e7f3      	b.n	80119f8 <__ieee754_log10+0x20>
 8011a10:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011a90 <__ieee754_log10+0xb8>
 8011a14:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011a18:	ee10 3a90 	vmov	r3, s1
 8011a1c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011a20:	4923      	ldr	r1, [pc, #140]	; (8011ab0 <__ieee754_log10+0xd8>)
 8011a22:	428b      	cmp	r3, r1
 8011a24:	dd04      	ble.n	8011a30 <__ieee754_log10+0x58>
 8011a26:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011a2a:	e7e9      	b.n	8011a00 <__ieee754_log10+0x28>
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	e7f7      	b.n	8011a20 <__ieee754_log10+0x48>
 8011a30:	1518      	asrs	r0, r3, #20
 8011a32:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011a36:	4410      	add	r0, r2
 8011a38:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8011a3c:	f240 34ff 	movw	r4, #1023	; 0x3ff
 8011a40:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8011a44:	ee08 3a10 	vmov	s16, r3
 8011a48:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8011a4c:	ec53 2b10 	vmov	r2, r3, d0
 8011a50:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011a54:	ec43 2b10 	vmov	d0, r2, r3
 8011a58:	f7ff fd8a 	bl	8011570 <log>
 8011a5c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011a98 <__ieee754_log10+0xc0>
 8011a60:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011a64:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011aa0 <__ieee754_log10+0xc8>
 8011a68:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8011a6c:	eea8 0b07 	vfma.f64	d0, d8, d7
 8011a70:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8011aa8 <__ieee754_log10+0xd0>
 8011a74:	eea8 0b07 	vfma.f64	d0, d8, d7
 8011a78:	e7c2      	b.n	8011a00 <__ieee754_log10+0x28>
 8011a7a:	bf00      	nop
 8011a7c:	f3af 8000 	nop.w
 8011a80:	00000000 	.word	0x00000000
 8011a84:	c3500000 	.word	0xc3500000
	...
 8011a94:	43500000 	.word	0x43500000
 8011a98:	1526e50e 	.word	0x1526e50e
 8011a9c:	3fdbcb7b 	.word	0x3fdbcb7b
 8011aa0:	11f12b36 	.word	0x11f12b36
 8011aa4:	3d59fef3 	.word	0x3d59fef3
 8011aa8:	509f6000 	.word	0x509f6000
 8011aac:	3fd34413 	.word	0x3fd34413
 8011ab0:	7fefffff 	.word	0x7fefffff
 8011ab4:	00000000 	.word	0x00000000

08011ab8 <__ieee754_rem_pio2>:
 8011ab8:	b570      	push	{r4, r5, r6, lr}
 8011aba:	eeb0 7b40 	vmov.f64	d7, d0
 8011abe:	ee17 5a90 	vmov	r5, s15
 8011ac2:	4b99      	ldr	r3, [pc, #612]	; (8011d28 <__ieee754_rem_pio2+0x270>)
 8011ac4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011ac8:	429e      	cmp	r6, r3
 8011aca:	b088      	sub	sp, #32
 8011acc:	4604      	mov	r4, r0
 8011ace:	dc07      	bgt.n	8011ae0 <__ieee754_rem_pio2+0x28>
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	ed84 0b00 	vstr	d0, [r4]
 8011ad8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011adc:	2000      	movs	r0, #0
 8011ade:	e01b      	b.n	8011b18 <__ieee754_rem_pio2+0x60>
 8011ae0:	4b92      	ldr	r3, [pc, #584]	; (8011d2c <__ieee754_rem_pio2+0x274>)
 8011ae2:	429e      	cmp	r6, r3
 8011ae4:	dc3b      	bgt.n	8011b5e <__ieee754_rem_pio2+0xa6>
 8011ae6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011aea:	2d00      	cmp	r5, #0
 8011aec:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011ce8 <__ieee754_rem_pio2+0x230>
 8011af0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8011af4:	dd19      	ble.n	8011b2a <__ieee754_rem_pio2+0x72>
 8011af6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011afa:	429e      	cmp	r6, r3
 8011afc:	d00e      	beq.n	8011b1c <__ieee754_rem_pio2+0x64>
 8011afe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011cf0 <__ieee754_rem_pio2+0x238>
 8011b02:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011b06:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011b0a:	ed84 5b00 	vstr	d5, [r4]
 8011b0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011b12:	ed84 7b02 	vstr	d7, [r4, #8]
 8011b16:	2001      	movs	r0, #1
 8011b18:	b008      	add	sp, #32
 8011b1a:	bd70      	pop	{r4, r5, r6, pc}
 8011b1c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011cf8 <__ieee754_rem_pio2+0x240>
 8011b20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011b24:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011d00 <__ieee754_rem_pio2+0x248>
 8011b28:	e7eb      	b.n	8011b02 <__ieee754_rem_pio2+0x4a>
 8011b2a:	429e      	cmp	r6, r3
 8011b2c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011b30:	d00e      	beq.n	8011b50 <__ieee754_rem_pio2+0x98>
 8011b32:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011cf0 <__ieee754_rem_pio2+0x238>
 8011b36:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011b3a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011b3e:	ed84 5b00 	vstr	d5, [r4]
 8011b42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011b46:	f04f 30ff 	mov.w	r0, #4294967295
 8011b4a:	ed84 7b02 	vstr	d7, [r4, #8]
 8011b4e:	e7e3      	b.n	8011b18 <__ieee754_rem_pio2+0x60>
 8011b50:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011cf8 <__ieee754_rem_pio2+0x240>
 8011b54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011b58:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011d00 <__ieee754_rem_pio2+0x248>
 8011b5c:	e7eb      	b.n	8011b36 <__ieee754_rem_pio2+0x7e>
 8011b5e:	4b74      	ldr	r3, [pc, #464]	; (8011d30 <__ieee754_rem_pio2+0x278>)
 8011b60:	429e      	cmp	r6, r3
 8011b62:	dc70      	bgt.n	8011c46 <__ieee754_rem_pio2+0x18e>
 8011b64:	f000 fc48 	bl	80123f8 <fabs>
 8011b68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011b6c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011d08 <__ieee754_rem_pio2+0x250>
 8011b70:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011b74:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011b78:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011b7c:	ee17 0a90 	vmov	r0, s15
 8011b80:	eeb1 4b45 	vneg.f64	d4, d5
 8011b84:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011ce8 <__ieee754_rem_pio2+0x230>
 8011b88:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011b8c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011cf0 <__ieee754_rem_pio2+0x238>
 8011b90:	281f      	cmp	r0, #31
 8011b92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011b96:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011b9a:	dc08      	bgt.n	8011bae <__ieee754_rem_pio2+0xf6>
 8011b9c:	4b65      	ldr	r3, [pc, #404]	; (8011d34 <__ieee754_rem_pio2+0x27c>)
 8011b9e:	1e42      	subs	r2, r0, #1
 8011ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ba4:	42b3      	cmp	r3, r6
 8011ba6:	d002      	beq.n	8011bae <__ieee754_rem_pio2+0xf6>
 8011ba8:	ed84 6b00 	vstr	d6, [r4]
 8011bac:	e026      	b.n	8011bfc <__ieee754_rem_pio2+0x144>
 8011bae:	ee16 3a90 	vmov	r3, s13
 8011bb2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011bb6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011bba:	2b10      	cmp	r3, #16
 8011bbc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011bc0:	ddf2      	ble.n	8011ba8 <__ieee754_rem_pio2+0xf0>
 8011bc2:	eeb0 6b40 	vmov.f64	d6, d0
 8011bc6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011cf8 <__ieee754_rem_pio2+0x240>
 8011bca:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011d00 <__ieee754_rem_pio2+0x248>
 8011bce:	eea4 6b07 	vfma.f64	d6, d4, d7
 8011bd2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011bd6:	eea4 0b07 	vfma.f64	d0, d4, d7
 8011bda:	eeb0 7b40 	vmov.f64	d7, d0
 8011bde:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8011be2:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011be6:	ee13 3a90 	vmov	r3, s7
 8011bea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	2b31      	cmp	r3, #49	; 0x31
 8011bf2:	dc17      	bgt.n	8011c24 <__ieee754_rem_pio2+0x16c>
 8011bf4:	eeb0 0b46 	vmov.f64	d0, d6
 8011bf8:	ed84 3b00 	vstr	d3, [r4]
 8011bfc:	ed94 6b00 	vldr	d6, [r4]
 8011c00:	2d00      	cmp	r5, #0
 8011c02:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011c06:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011c0a:	ed84 0b02 	vstr	d0, [r4, #8]
 8011c0e:	da83      	bge.n	8011b18 <__ieee754_rem_pio2+0x60>
 8011c10:	eeb1 6b46 	vneg.f64	d6, d6
 8011c14:	eeb1 0b40 	vneg.f64	d0, d0
 8011c18:	ed84 6b00 	vstr	d6, [r4]
 8011c1c:	ed84 0b02 	vstr	d0, [r4, #8]
 8011c20:	4240      	negs	r0, r0
 8011c22:	e779      	b.n	8011b18 <__ieee754_rem_pio2+0x60>
 8011c24:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011d10 <__ieee754_rem_pio2+0x258>
 8011c28:	eeb0 0b46 	vmov.f64	d0, d6
 8011c2c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011c30:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011c34:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011d18 <__ieee754_rem_pio2+0x260>
 8011c38:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011c3c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011c40:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011c44:	e7b0      	b.n	8011ba8 <__ieee754_rem_pio2+0xf0>
 8011c46:	4b3c      	ldr	r3, [pc, #240]	; (8011d38 <__ieee754_rem_pio2+0x280>)
 8011c48:	429e      	cmp	r6, r3
 8011c4a:	dd06      	ble.n	8011c5a <__ieee754_rem_pio2+0x1a2>
 8011c4c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011c50:	ed80 7b02 	vstr	d7, [r0, #8]
 8011c54:	ed80 7b00 	vstr	d7, [r0]
 8011c58:	e740      	b.n	8011adc <__ieee754_rem_pio2+0x24>
 8011c5a:	1532      	asrs	r2, r6, #20
 8011c5c:	ee10 0a10 	vmov	r0, s0
 8011c60:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011c64:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011c68:	ec41 0b17 	vmov	d7, r0, r1
 8011c6c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011c70:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011d20 <__ieee754_rem_pio2+0x268>
 8011c74:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011c78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011c80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011c84:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011c88:	a902      	add	r1, sp, #8
 8011c8a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011c8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c92:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011c96:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011c9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c9e:	2603      	movs	r6, #3
 8011ca0:	4608      	mov	r0, r1
 8011ca2:	ed91 7b04 	vldr	d7, [r1, #16]
 8011ca6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cae:	4633      	mov	r3, r6
 8011cb0:	f1a1 0108 	sub.w	r1, r1, #8
 8011cb4:	f106 36ff 	add.w	r6, r6, #4294967295
 8011cb8:	d0f3      	beq.n	8011ca2 <__ieee754_rem_pio2+0x1ea>
 8011cba:	4920      	ldr	r1, [pc, #128]	; (8011d3c <__ieee754_rem_pio2+0x284>)
 8011cbc:	9101      	str	r1, [sp, #4]
 8011cbe:	2102      	movs	r1, #2
 8011cc0:	9100      	str	r1, [sp, #0]
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	f000 f8a8 	bl	8011e18 <__kernel_rem_pio2>
 8011cc8:	2d00      	cmp	r5, #0
 8011cca:	f6bf af25 	bge.w	8011b18 <__ieee754_rem_pio2+0x60>
 8011cce:	ed94 7b00 	vldr	d7, [r4]
 8011cd2:	eeb1 7b47 	vneg.f64	d7, d7
 8011cd6:	ed84 7b00 	vstr	d7, [r4]
 8011cda:	ed94 7b02 	vldr	d7, [r4, #8]
 8011cde:	eeb1 7b47 	vneg.f64	d7, d7
 8011ce2:	ed84 7b02 	vstr	d7, [r4, #8]
 8011ce6:	e79b      	b.n	8011c20 <__ieee754_rem_pio2+0x168>
 8011ce8:	54400000 	.word	0x54400000
 8011cec:	3ff921fb 	.word	0x3ff921fb
 8011cf0:	1a626331 	.word	0x1a626331
 8011cf4:	3dd0b461 	.word	0x3dd0b461
 8011cf8:	1a600000 	.word	0x1a600000
 8011cfc:	3dd0b461 	.word	0x3dd0b461
 8011d00:	2e037073 	.word	0x2e037073
 8011d04:	3ba3198a 	.word	0x3ba3198a
 8011d08:	6dc9c883 	.word	0x6dc9c883
 8011d0c:	3fe45f30 	.word	0x3fe45f30
 8011d10:	2e000000 	.word	0x2e000000
 8011d14:	3ba3198a 	.word	0x3ba3198a
 8011d18:	252049c1 	.word	0x252049c1
 8011d1c:	397b839a 	.word	0x397b839a
 8011d20:	00000000 	.word	0x00000000
 8011d24:	41700000 	.word	0x41700000
 8011d28:	3fe921fb 	.word	0x3fe921fb
 8011d2c:	4002d97b 	.word	0x4002d97b
 8011d30:	413921fb 	.word	0x413921fb
 8011d34:	0801cb80 	.word	0x0801cb80
 8011d38:	7fefffff 	.word	0x7fefffff
 8011d3c:	0801cc00 	.word	0x0801cc00

08011d40 <__kernel_cos>:
 8011d40:	ee10 1a90 	vmov	r1, s1
 8011d44:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011d48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011d4c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011d50:	da05      	bge.n	8011d5e <__kernel_cos+0x1e>
 8011d52:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011d56:	ee17 3a90 	vmov	r3, s15
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d03d      	beq.n	8011dda <__kernel_cos+0x9a>
 8011d5e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011d62:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011de0 <__kernel_cos+0xa0>
 8011d66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011de8 <__kernel_cos+0xa8>
 8011d6a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011d6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011df0 <__kernel_cos+0xb0>
 8011d72:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011d76:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011df8 <__kernel_cos+0xb8>
 8011d7a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011d7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011e00 <__kernel_cos+0xc0>
 8011d82:	4b23      	ldr	r3, [pc, #140]	; (8011e10 <__kernel_cos+0xd0>)
 8011d84:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011d88:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011e08 <__kernel_cos+0xc8>
 8011d8c:	4299      	cmp	r1, r3
 8011d8e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011d92:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011d96:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011d9a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011d9e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011da2:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011da6:	dc04      	bgt.n	8011db2 <__kernel_cos+0x72>
 8011da8:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011dac:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011db0:	4770      	bx	lr
 8011db2:	4b18      	ldr	r3, [pc, #96]	; (8011e14 <__kernel_cos+0xd4>)
 8011db4:	4299      	cmp	r1, r3
 8011db6:	dc0d      	bgt.n	8011dd4 <__kernel_cos+0x94>
 8011db8:	2200      	movs	r2, #0
 8011dba:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011dbe:	ec43 2b15 	vmov	d5, r2, r3
 8011dc2:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011dc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011dca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011dce:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011dd2:	4770      	bx	lr
 8011dd4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011dd8:	e7f3      	b.n	8011dc2 <__kernel_cos+0x82>
 8011dda:	eeb0 0b44 	vmov.f64	d0, d4
 8011dde:	4770      	bx	lr
 8011de0:	be8838d4 	.word	0xbe8838d4
 8011de4:	bda8fae9 	.word	0xbda8fae9
 8011de8:	bdb4b1c4 	.word	0xbdb4b1c4
 8011dec:	3e21ee9e 	.word	0x3e21ee9e
 8011df0:	809c52ad 	.word	0x809c52ad
 8011df4:	be927e4f 	.word	0xbe927e4f
 8011df8:	19cb1590 	.word	0x19cb1590
 8011dfc:	3efa01a0 	.word	0x3efa01a0
 8011e00:	16c15177 	.word	0x16c15177
 8011e04:	bf56c16c 	.word	0xbf56c16c
 8011e08:	5555554c 	.word	0x5555554c
 8011e0c:	3fa55555 	.word	0x3fa55555
 8011e10:	3fd33332 	.word	0x3fd33332
 8011e14:	3fe90000 	.word	0x3fe90000

08011e18 <__kernel_rem_pio2>:
 8011e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e1c:	ed2d 8b06 	vpush	{d8-d10}
 8011e20:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011e24:	460f      	mov	r7, r1
 8011e26:	9002      	str	r0, [sp, #8]
 8011e28:	49c5      	ldr	r1, [pc, #788]	; (8012140 <__kernel_rem_pio2+0x328>)
 8011e2a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011e2c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011e30:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8011e34:	9301      	str	r3, [sp, #4]
 8011e36:	f112 0f14 	cmn.w	r2, #20
 8011e3a:	bfa8      	it	ge
 8011e3c:	2018      	movge	r0, #24
 8011e3e:	f103 31ff 	add.w	r1, r3, #4294967295
 8011e42:	bfb8      	it	lt
 8011e44:	2000      	movlt	r0, #0
 8011e46:	f06f 0417 	mvn.w	r4, #23
 8011e4a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8012128 <__kernel_rem_pio2+0x310>
 8011e4e:	bfa4      	itt	ge
 8011e50:	f1a2 0a03 	subge.w	sl, r2, #3
 8011e54:	fb9a f0f0 	sdivge	r0, sl, r0
 8011e58:	fb00 4404 	mla	r4, r0, r4, r4
 8011e5c:	1a46      	subs	r6, r0, r1
 8011e5e:	4414      	add	r4, r2
 8011e60:	eb09 0c01 	add.w	ip, r9, r1
 8011e64:	ad1a      	add	r5, sp, #104	; 0x68
 8011e66:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	4562      	cmp	r2, ip
 8011e6e:	dd10      	ble.n	8011e92 <__kernel_rem_pio2+0x7a>
 8011e70:	9a01      	ldr	r2, [sp, #4]
 8011e72:	ab1a      	add	r3, sp, #104	; 0x68
 8011e74:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011e78:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011e7c:	f04f 0c00 	mov.w	ip, #0
 8011e80:	45cc      	cmp	ip, r9
 8011e82:	dc26      	bgt.n	8011ed2 <__kernel_rem_pio2+0xba>
 8011e84:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8012128 <__kernel_rem_pio2+0x310>
 8011e88:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011e8c:	4616      	mov	r6, r2
 8011e8e:	2500      	movs	r5, #0
 8011e90:	e015      	b.n	8011ebe <__kernel_rem_pio2+0xa6>
 8011e92:	42d6      	cmn	r6, r2
 8011e94:	d409      	bmi.n	8011eaa <__kernel_rem_pio2+0x92>
 8011e96:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011e9a:	ee07 3a90 	vmov	s15, r3
 8011e9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011ea2:	eca5 7b02 	vstmia	r5!, {d7}
 8011ea6:	3201      	adds	r2, #1
 8011ea8:	e7e0      	b.n	8011e6c <__kernel_rem_pio2+0x54>
 8011eaa:	eeb0 7b46 	vmov.f64	d7, d6
 8011eae:	e7f8      	b.n	8011ea2 <__kernel_rem_pio2+0x8a>
 8011eb0:	ecb8 5b02 	vldmia	r8!, {d5}
 8011eb4:	ed96 6b00 	vldr	d6, [r6]
 8011eb8:	3501      	adds	r5, #1
 8011eba:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011ebe:	428d      	cmp	r5, r1
 8011ec0:	f1a6 0608 	sub.w	r6, r6, #8
 8011ec4:	ddf4      	ble.n	8011eb0 <__kernel_rem_pio2+0x98>
 8011ec6:	ecaa 7b02 	vstmia	sl!, {d7}
 8011eca:	f10c 0c01 	add.w	ip, ip, #1
 8011ece:	3208      	adds	r2, #8
 8011ed0:	e7d6      	b.n	8011e80 <__kernel_rem_pio2+0x68>
 8011ed2:	ab06      	add	r3, sp, #24
 8011ed4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8012130 <__kernel_rem_pio2+0x318>
 8011ed8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8012138 <__kernel_rem_pio2+0x320>
 8011edc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011ee0:	9303      	str	r3, [sp, #12]
 8011ee2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8011ee6:	464d      	mov	r5, r9
 8011ee8:	00eb      	lsls	r3, r5, #3
 8011eea:	9304      	str	r3, [sp, #16]
 8011eec:	ab92      	add	r3, sp, #584	; 0x248
 8011eee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011ef2:	f10d 0b18 	add.w	fp, sp, #24
 8011ef6:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011ef8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8011efc:	465e      	mov	r6, fp
 8011efe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011f02:	4628      	mov	r0, r5
 8011f04:	2800      	cmp	r0, #0
 8011f06:	f1a2 0208 	sub.w	r2, r2, #8
 8011f0a:	dc4c      	bgt.n	8011fa6 <__kernel_rem_pio2+0x18e>
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	9105      	str	r1, [sp, #20]
 8011f10:	f000 fafa 	bl	8012508 <scalbn>
 8011f14:	eeb0 8b40 	vmov.f64	d8, d0
 8011f18:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011f1c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011f20:	f000 fa76 	bl	8012410 <floor>
 8011f24:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011f28:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011f2c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011f30:	2c00      	cmp	r4, #0
 8011f32:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011f36:	ee17 8a90 	vmov	r8, s15
 8011f3a:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011f3e:	9905      	ldr	r1, [sp, #20]
 8011f40:	dd43      	ble.n	8011fca <__kernel_rem_pio2+0x1b2>
 8011f42:	1e68      	subs	r0, r5, #1
 8011f44:	ab06      	add	r3, sp, #24
 8011f46:	f1c4 0c18 	rsb	ip, r4, #24
 8011f4a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011f4e:	fa46 f20c 	asr.w	r2, r6, ip
 8011f52:	4490      	add	r8, r2
 8011f54:	fa02 f20c 	lsl.w	r2, r2, ip
 8011f58:	1ab6      	subs	r6, r6, r2
 8011f5a:	f1c4 0217 	rsb	r2, r4, #23
 8011f5e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011f62:	4116      	asrs	r6, r2
 8011f64:	2e00      	cmp	r6, #0
 8011f66:	dd3f      	ble.n	8011fe8 <__kernel_rem_pio2+0x1d0>
 8011f68:	f04f 0c00 	mov.w	ip, #0
 8011f6c:	f108 0801 	add.w	r8, r8, #1
 8011f70:	4660      	mov	r0, ip
 8011f72:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011f76:	4565      	cmp	r5, ip
 8011f78:	dc6e      	bgt.n	8012058 <__kernel_rem_pio2+0x240>
 8011f7a:	2c00      	cmp	r4, #0
 8011f7c:	dd04      	ble.n	8011f88 <__kernel_rem_pio2+0x170>
 8011f7e:	2c01      	cmp	r4, #1
 8011f80:	d07f      	beq.n	8012082 <__kernel_rem_pio2+0x26a>
 8011f82:	2c02      	cmp	r4, #2
 8011f84:	f000 8087 	beq.w	8012096 <__kernel_rem_pio2+0x27e>
 8011f88:	2e02      	cmp	r6, #2
 8011f8a:	d12d      	bne.n	8011fe8 <__kernel_rem_pio2+0x1d0>
 8011f8c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011f90:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011f94:	b340      	cbz	r0, 8011fe8 <__kernel_rem_pio2+0x1d0>
 8011f96:	4620      	mov	r0, r4
 8011f98:	9105      	str	r1, [sp, #20]
 8011f9a:	f000 fab5 	bl	8012508 <scalbn>
 8011f9e:	9905      	ldr	r1, [sp, #20]
 8011fa0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011fa4:	e020      	b.n	8011fe8 <__kernel_rem_pio2+0x1d0>
 8011fa6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011faa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011fae:	3801      	subs	r0, #1
 8011fb0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011fb4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011fb8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011fbc:	eca6 0a01 	vstmia	r6!, {s0}
 8011fc0:	ed92 0b00 	vldr	d0, [r2]
 8011fc4:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011fc8:	e79c      	b.n	8011f04 <__kernel_rem_pio2+0xec>
 8011fca:	d105      	bne.n	8011fd8 <__kernel_rem_pio2+0x1c0>
 8011fcc:	1e6a      	subs	r2, r5, #1
 8011fce:	ab06      	add	r3, sp, #24
 8011fd0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011fd4:	15f6      	asrs	r6, r6, #23
 8011fd6:	e7c5      	b.n	8011f64 <__kernel_rem_pio2+0x14c>
 8011fd8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011fdc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe4:	da36      	bge.n	8012054 <__kernel_rem_pio2+0x23c>
 8011fe6:	2600      	movs	r6, #0
 8011fe8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff0:	f040 80aa 	bne.w	8012148 <__kernel_rem_pio2+0x330>
 8011ff4:	f105 3bff 	add.w	fp, r5, #4294967295
 8011ff8:	4658      	mov	r0, fp
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	4548      	cmp	r0, r9
 8011ffe:	da52      	bge.n	80120a6 <__kernel_rem_pio2+0x28e>
 8012000:	2a00      	cmp	r2, #0
 8012002:	f000 8081 	beq.w	8012108 <__kernel_rem_pio2+0x2f0>
 8012006:	ab06      	add	r3, sp, #24
 8012008:	3c18      	subs	r4, #24
 801200a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801200e:	2b00      	cmp	r3, #0
 8012010:	f000 8087 	beq.w	8012122 <__kernel_rem_pio2+0x30a>
 8012014:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012018:	4620      	mov	r0, r4
 801201a:	f000 fa75 	bl	8012508 <scalbn>
 801201e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012022:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8012130 <__kernel_rem_pio2+0x318>
 8012026:	a96a      	add	r1, sp, #424	; 0x1a8
 8012028:	f103 0208 	add.w	r2, r3, #8
 801202c:	1888      	adds	r0, r1, r2
 801202e:	4659      	mov	r1, fp
 8012030:	2900      	cmp	r1, #0
 8012032:	f280 80b7 	bge.w	80121a4 <__kernel_rem_pio2+0x38c>
 8012036:	4659      	mov	r1, fp
 8012038:	2900      	cmp	r1, #0
 801203a:	f2c0 80d5 	blt.w	80121e8 <__kernel_rem_pio2+0x3d0>
 801203e:	a86a      	add	r0, sp, #424	; 0x1a8
 8012040:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8012044:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8012128 <__kernel_rem_pio2+0x310>
 8012048:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8012144 <__kernel_rem_pio2+0x32c>
 801204c:	2400      	movs	r4, #0
 801204e:	ebab 0001 	sub.w	r0, fp, r1
 8012052:	e0be      	b.n	80121d2 <__kernel_rem_pio2+0x3ba>
 8012054:	2602      	movs	r6, #2
 8012056:	e787      	b.n	8011f68 <__kernel_rem_pio2+0x150>
 8012058:	f8db 2000 	ldr.w	r2, [fp]
 801205c:	b958      	cbnz	r0, 8012076 <__kernel_rem_pio2+0x25e>
 801205e:	b122      	cbz	r2, 801206a <__kernel_rem_pio2+0x252>
 8012060:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8012064:	f8cb 2000 	str.w	r2, [fp]
 8012068:	2201      	movs	r2, #1
 801206a:	f10c 0c01 	add.w	ip, ip, #1
 801206e:	f10b 0b04 	add.w	fp, fp, #4
 8012072:	4610      	mov	r0, r2
 8012074:	e77f      	b.n	8011f76 <__kernel_rem_pio2+0x15e>
 8012076:	ebae 0202 	sub.w	r2, lr, r2
 801207a:	f8cb 2000 	str.w	r2, [fp]
 801207e:	4602      	mov	r2, r0
 8012080:	e7f3      	b.n	801206a <__kernel_rem_pio2+0x252>
 8012082:	f105 3cff 	add.w	ip, r5, #4294967295
 8012086:	ab06      	add	r3, sp, #24
 8012088:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801208c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012090:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8012094:	e778      	b.n	8011f88 <__kernel_rem_pio2+0x170>
 8012096:	f105 3cff 	add.w	ip, r5, #4294967295
 801209a:	ab06      	add	r3, sp, #24
 801209c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80120a0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80120a4:	e7f4      	b.n	8012090 <__kernel_rem_pio2+0x278>
 80120a6:	ab06      	add	r3, sp, #24
 80120a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80120ac:	3801      	subs	r0, #1
 80120ae:	431a      	orrs	r2, r3
 80120b0:	e7a4      	b.n	8011ffc <__kernel_rem_pio2+0x1e4>
 80120b2:	f10c 0c01 	add.w	ip, ip, #1
 80120b6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80120ba:	2800      	cmp	r0, #0
 80120bc:	d0f9      	beq.n	80120b2 <__kernel_rem_pio2+0x29a>
 80120be:	9b04      	ldr	r3, [sp, #16]
 80120c0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80120c4:	eb0d 0203 	add.w	r2, sp, r3
 80120c8:	9b01      	ldr	r3, [sp, #4]
 80120ca:	18e8      	adds	r0, r5, r3
 80120cc:	ab1a      	add	r3, sp, #104	; 0x68
 80120ce:	1c6e      	adds	r6, r5, #1
 80120d0:	3a98      	subs	r2, #152	; 0x98
 80120d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80120d6:	4465      	add	r5, ip
 80120d8:	42b5      	cmp	r5, r6
 80120da:	f6ff af05 	blt.w	8011ee8 <__kernel_rem_pio2+0xd0>
 80120de:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80120e2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80120e6:	ee07 3a90 	vmov	s15, r3
 80120ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80120ee:	f04f 0c00 	mov.w	ip, #0
 80120f2:	eca0 7b02 	vstmia	r0!, {d7}
 80120f6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012128 <__kernel_rem_pio2+0x310>
 80120fa:	4680      	mov	r8, r0
 80120fc:	458c      	cmp	ip, r1
 80120fe:	dd07      	ble.n	8012110 <__kernel_rem_pio2+0x2f8>
 8012100:	eca2 7b02 	vstmia	r2!, {d7}
 8012104:	3601      	adds	r6, #1
 8012106:	e7e7      	b.n	80120d8 <__kernel_rem_pio2+0x2c0>
 8012108:	9a03      	ldr	r2, [sp, #12]
 801210a:	f04f 0c01 	mov.w	ip, #1
 801210e:	e7d2      	b.n	80120b6 <__kernel_rem_pio2+0x29e>
 8012110:	ecbe 5b02 	vldmia	lr!, {d5}
 8012114:	ed38 6b02 	vldmdb	r8!, {d6}
 8012118:	f10c 0c01 	add.w	ip, ip, #1
 801211c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012120:	e7ec      	b.n	80120fc <__kernel_rem_pio2+0x2e4>
 8012122:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012126:	e76e      	b.n	8012006 <__kernel_rem_pio2+0x1ee>
	...
 8012134:	3e700000 	.word	0x3e700000
 8012138:	00000000 	.word	0x00000000
 801213c:	41700000 	.word	0x41700000
 8012140:	0801cd48 	.word	0x0801cd48
 8012144:	0801cd08 	.word	0x0801cd08
 8012148:	4260      	negs	r0, r4
 801214a:	eeb0 0b48 	vmov.f64	d0, d8
 801214e:	f000 f9db 	bl	8012508 <scalbn>
 8012152:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012330 <__kernel_rem_pio2+0x518>
 8012156:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801215e:	db18      	blt.n	8012192 <__kernel_rem_pio2+0x37a>
 8012160:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8012338 <__kernel_rem_pio2+0x520>
 8012164:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012168:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801216c:	aa06      	add	r2, sp, #24
 801216e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8012172:	eea5 0b46 	vfms.f64	d0, d5, d6
 8012176:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801217a:	f105 0b01 	add.w	fp, r5, #1
 801217e:	ee10 3a10 	vmov	r3, s0
 8012182:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012186:	ee17 3a10 	vmov	r3, s14
 801218a:	3418      	adds	r4, #24
 801218c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8012190:	e740      	b.n	8012014 <__kernel_rem_pio2+0x1fc>
 8012192:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012196:	aa06      	add	r2, sp, #24
 8012198:	ee10 3a10 	vmov	r3, s0
 801219c:	46ab      	mov	fp, r5
 801219e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80121a2:	e737      	b.n	8012014 <__kernel_rem_pio2+0x1fc>
 80121a4:	ac06      	add	r4, sp, #24
 80121a6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80121aa:	9401      	str	r4, [sp, #4]
 80121ac:	ee07 4a90 	vmov	s15, r4
 80121b0:	3901      	subs	r1, #1
 80121b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80121b6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80121ba:	ee20 0b06 	vmul.f64	d0, d0, d6
 80121be:	ed20 7b02 	vstmdb	r0!, {d7}
 80121c2:	e735      	b.n	8012030 <__kernel_rem_pio2+0x218>
 80121c4:	ecbc 5b02 	vldmia	ip!, {d5}
 80121c8:	ecb5 6b02 	vldmia	r5!, {d6}
 80121cc:	3401      	adds	r4, #1
 80121ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80121d2:	454c      	cmp	r4, r9
 80121d4:	dc01      	bgt.n	80121da <__kernel_rem_pio2+0x3c2>
 80121d6:	4284      	cmp	r4, r0
 80121d8:	ddf4      	ble.n	80121c4 <__kernel_rem_pio2+0x3ac>
 80121da:	ac42      	add	r4, sp, #264	; 0x108
 80121dc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80121e0:	ed80 7b00 	vstr	d7, [r0]
 80121e4:	3901      	subs	r1, #1
 80121e6:	e727      	b.n	8012038 <__kernel_rem_pio2+0x220>
 80121e8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80121ea:	2902      	cmp	r1, #2
 80121ec:	dc0a      	bgt.n	8012204 <__kernel_rem_pio2+0x3ec>
 80121ee:	2900      	cmp	r1, #0
 80121f0:	dc2c      	bgt.n	801224c <__kernel_rem_pio2+0x434>
 80121f2:	d045      	beq.n	8012280 <__kernel_rem_pio2+0x468>
 80121f4:	f008 0007 	and.w	r0, r8, #7
 80121f8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80121fc:	ecbd 8b06 	vpop	{d8-d10}
 8012200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012204:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012206:	2a03      	cmp	r2, #3
 8012208:	d1f4      	bne.n	80121f4 <__kernel_rem_pio2+0x3dc>
 801220a:	aa42      	add	r2, sp, #264	; 0x108
 801220c:	4413      	add	r3, r2
 801220e:	461a      	mov	r2, r3
 8012210:	4619      	mov	r1, r3
 8012212:	4658      	mov	r0, fp
 8012214:	2800      	cmp	r0, #0
 8012216:	f1a1 0108 	sub.w	r1, r1, #8
 801221a:	dc54      	bgt.n	80122c6 <__kernel_rem_pio2+0x4ae>
 801221c:	4659      	mov	r1, fp
 801221e:	2901      	cmp	r1, #1
 8012220:	f1a2 0208 	sub.w	r2, r2, #8
 8012224:	dc5f      	bgt.n	80122e6 <__kernel_rem_pio2+0x4ce>
 8012226:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012340 <__kernel_rem_pio2+0x528>
 801222a:	3308      	adds	r3, #8
 801222c:	f1bb 0f01 	cmp.w	fp, #1
 8012230:	dc69      	bgt.n	8012306 <__kernel_rem_pio2+0x4ee>
 8012232:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8012236:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801223a:	2e00      	cmp	r6, #0
 801223c:	d16a      	bne.n	8012314 <__kernel_rem_pio2+0x4fc>
 801223e:	ed87 5b00 	vstr	d5, [r7]
 8012242:	ed87 6b02 	vstr	d6, [r7, #8]
 8012246:	ed87 7b04 	vstr	d7, [r7, #16]
 801224a:	e7d3      	b.n	80121f4 <__kernel_rem_pio2+0x3dc>
 801224c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012340 <__kernel_rem_pio2+0x528>
 8012250:	ab42      	add	r3, sp, #264	; 0x108
 8012252:	441a      	add	r2, r3
 8012254:	465b      	mov	r3, fp
 8012256:	2b00      	cmp	r3, #0
 8012258:	da26      	bge.n	80122a8 <__kernel_rem_pio2+0x490>
 801225a:	b35e      	cbz	r6, 80122b4 <__kernel_rem_pio2+0x49c>
 801225c:	eeb1 7b46 	vneg.f64	d7, d6
 8012260:	ed87 7b00 	vstr	d7, [r7]
 8012264:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8012268:	aa44      	add	r2, sp, #272	; 0x110
 801226a:	2301      	movs	r3, #1
 801226c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012270:	459b      	cmp	fp, r3
 8012272:	da22      	bge.n	80122ba <__kernel_rem_pio2+0x4a2>
 8012274:	b10e      	cbz	r6, 801227a <__kernel_rem_pio2+0x462>
 8012276:	eeb1 7b47 	vneg.f64	d7, d7
 801227a:	ed87 7b02 	vstr	d7, [r7, #8]
 801227e:	e7b9      	b.n	80121f4 <__kernel_rem_pio2+0x3dc>
 8012280:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012340 <__kernel_rem_pio2+0x528>
 8012284:	ab42      	add	r3, sp, #264	; 0x108
 8012286:	441a      	add	r2, r3
 8012288:	f1bb 0f00 	cmp.w	fp, #0
 801228c:	da05      	bge.n	801229a <__kernel_rem_pio2+0x482>
 801228e:	b10e      	cbz	r6, 8012294 <__kernel_rem_pio2+0x47c>
 8012290:	eeb1 7b47 	vneg.f64	d7, d7
 8012294:	ed87 7b00 	vstr	d7, [r7]
 8012298:	e7ac      	b.n	80121f4 <__kernel_rem_pio2+0x3dc>
 801229a:	ed32 6b02 	vldmdb	r2!, {d6}
 801229e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80122a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80122a6:	e7ef      	b.n	8012288 <__kernel_rem_pio2+0x470>
 80122a8:	ed32 7b02 	vldmdb	r2!, {d7}
 80122ac:	3b01      	subs	r3, #1
 80122ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80122b2:	e7d0      	b.n	8012256 <__kernel_rem_pio2+0x43e>
 80122b4:	eeb0 7b46 	vmov.f64	d7, d6
 80122b8:	e7d2      	b.n	8012260 <__kernel_rem_pio2+0x448>
 80122ba:	ecb2 6b02 	vldmia	r2!, {d6}
 80122be:	3301      	adds	r3, #1
 80122c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80122c4:	e7d4      	b.n	8012270 <__kernel_rem_pio2+0x458>
 80122c6:	ed91 7b00 	vldr	d7, [r1]
 80122ca:	ed91 5b02 	vldr	d5, [r1, #8]
 80122ce:	3801      	subs	r0, #1
 80122d0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80122d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80122d8:	ed81 6b00 	vstr	d6, [r1]
 80122dc:	ee37 7b05 	vadd.f64	d7, d7, d5
 80122e0:	ed81 7b02 	vstr	d7, [r1, #8]
 80122e4:	e796      	b.n	8012214 <__kernel_rem_pio2+0x3fc>
 80122e6:	ed92 7b00 	vldr	d7, [r2]
 80122ea:	ed92 5b02 	vldr	d5, [r2, #8]
 80122ee:	3901      	subs	r1, #1
 80122f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80122f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80122f8:	ed82 6b00 	vstr	d6, [r2]
 80122fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012300:	ed82 7b02 	vstr	d7, [r2, #8]
 8012304:	e78b      	b.n	801221e <__kernel_rem_pio2+0x406>
 8012306:	ed33 6b02 	vldmdb	r3!, {d6}
 801230a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801230e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012312:	e78b      	b.n	801222c <__kernel_rem_pio2+0x414>
 8012314:	eeb1 5b45 	vneg.f64	d5, d5
 8012318:	eeb1 6b46 	vneg.f64	d6, d6
 801231c:	ed87 5b00 	vstr	d5, [r7]
 8012320:	eeb1 7b47 	vneg.f64	d7, d7
 8012324:	ed87 6b02 	vstr	d6, [r7, #8]
 8012328:	e78d      	b.n	8012246 <__kernel_rem_pio2+0x42e>
 801232a:	bf00      	nop
 801232c:	f3af 8000 	nop.w
 8012330:	00000000 	.word	0x00000000
 8012334:	41700000 	.word	0x41700000
 8012338:	00000000 	.word	0x00000000
 801233c:	3e700000 	.word	0x3e700000
	...

08012348 <__kernel_sin>:
 8012348:	ee10 3a90 	vmov	r3, s1
 801234c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012350:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012354:	da04      	bge.n	8012360 <__kernel_sin+0x18>
 8012356:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801235a:	ee17 3a90 	vmov	r3, s15
 801235e:	b35b      	cbz	r3, 80123b8 <__kernel_sin+0x70>
 8012360:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012364:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012368:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80123c0 <__kernel_sin+0x78>
 801236c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80123c8 <__kernel_sin+0x80>
 8012370:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012374:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80123d0 <__kernel_sin+0x88>
 8012378:	eea4 7b06 	vfma.f64	d7, d4, d6
 801237c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80123d8 <__kernel_sin+0x90>
 8012380:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012384:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80123e0 <__kernel_sin+0x98>
 8012388:	eea4 7b06 	vfma.f64	d7, d4, d6
 801238c:	b930      	cbnz	r0, 801239c <__kernel_sin+0x54>
 801238e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80123e8 <__kernel_sin+0xa0>
 8012392:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012396:	eea4 0b05 	vfma.f64	d0, d4, d5
 801239a:	4770      	bx	lr
 801239c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80123a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80123a4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80123a8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80123ac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80123f0 <__kernel_sin+0xa8>
 80123b0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80123b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop
 80123bc:	f3af 8000 	nop.w
 80123c0:	5acfd57c 	.word	0x5acfd57c
 80123c4:	3de5d93a 	.word	0x3de5d93a
 80123c8:	8a2b9ceb 	.word	0x8a2b9ceb
 80123cc:	be5ae5e6 	.word	0xbe5ae5e6
 80123d0:	57b1fe7d 	.word	0x57b1fe7d
 80123d4:	3ec71de3 	.word	0x3ec71de3
 80123d8:	19c161d5 	.word	0x19c161d5
 80123dc:	bf2a01a0 	.word	0xbf2a01a0
 80123e0:	1110f8a6 	.word	0x1110f8a6
 80123e4:	3f811111 	.word	0x3f811111
 80123e8:	55555549 	.word	0x55555549
 80123ec:	bfc55555 	.word	0xbfc55555
 80123f0:	55555549 	.word	0x55555549
 80123f4:	3fc55555 	.word	0x3fc55555

080123f8 <fabs>:
 80123f8:	ec51 0b10 	vmov	r0, r1, d0
 80123fc:	ee10 2a10 	vmov	r2, s0
 8012400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012404:	ec43 2b10 	vmov	d0, r2, r3
 8012408:	4770      	bx	lr
 801240a:	0000      	movs	r0, r0
 801240c:	0000      	movs	r0, r0
	...

08012410 <floor>:
 8012410:	ee10 1a90 	vmov	r1, s1
 8012414:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012418:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801241c:	2b13      	cmp	r3, #19
 801241e:	b530      	push	{r4, r5, lr}
 8012420:	ee10 0a10 	vmov	r0, s0
 8012424:	ee10 5a10 	vmov	r5, s0
 8012428:	dc31      	bgt.n	801248e <floor+0x7e>
 801242a:	2b00      	cmp	r3, #0
 801242c:	da15      	bge.n	801245a <floor+0x4a>
 801242e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80124e8 <floor+0xd8>
 8012432:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012436:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243e:	dd07      	ble.n	8012450 <floor+0x40>
 8012440:	2900      	cmp	r1, #0
 8012442:	da4e      	bge.n	80124e2 <floor+0xd2>
 8012444:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012448:	4318      	orrs	r0, r3
 801244a:	d001      	beq.n	8012450 <floor+0x40>
 801244c:	4928      	ldr	r1, [pc, #160]	; (80124f0 <floor+0xe0>)
 801244e:	2000      	movs	r0, #0
 8012450:	460b      	mov	r3, r1
 8012452:	4602      	mov	r2, r0
 8012454:	ec43 2b10 	vmov	d0, r2, r3
 8012458:	e020      	b.n	801249c <floor+0x8c>
 801245a:	4a26      	ldr	r2, [pc, #152]	; (80124f4 <floor+0xe4>)
 801245c:	411a      	asrs	r2, r3
 801245e:	ea01 0402 	and.w	r4, r1, r2
 8012462:	4304      	orrs	r4, r0
 8012464:	d01a      	beq.n	801249c <floor+0x8c>
 8012466:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80124e8 <floor+0xd8>
 801246a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801246e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012476:	ddeb      	ble.n	8012450 <floor+0x40>
 8012478:	2900      	cmp	r1, #0
 801247a:	bfbe      	ittt	lt
 801247c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012480:	fa40 f303 	asrlt.w	r3, r0, r3
 8012484:	18c9      	addlt	r1, r1, r3
 8012486:	ea21 0102 	bic.w	r1, r1, r2
 801248a:	2000      	movs	r0, #0
 801248c:	e7e0      	b.n	8012450 <floor+0x40>
 801248e:	2b33      	cmp	r3, #51	; 0x33
 8012490:	dd05      	ble.n	801249e <floor+0x8e>
 8012492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012496:	d101      	bne.n	801249c <floor+0x8c>
 8012498:	ee30 0b00 	vadd.f64	d0, d0, d0
 801249c:	bd30      	pop	{r4, r5, pc}
 801249e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80124a2:	f04f 32ff 	mov.w	r2, #4294967295
 80124a6:	40e2      	lsrs	r2, r4
 80124a8:	4202      	tst	r2, r0
 80124aa:	d0f7      	beq.n	801249c <floor+0x8c>
 80124ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80124e8 <floor+0xd8>
 80124b0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80124b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80124b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124bc:	ddc8      	ble.n	8012450 <floor+0x40>
 80124be:	2900      	cmp	r1, #0
 80124c0:	da02      	bge.n	80124c8 <floor+0xb8>
 80124c2:	2b14      	cmp	r3, #20
 80124c4:	d103      	bne.n	80124ce <floor+0xbe>
 80124c6:	3101      	adds	r1, #1
 80124c8:	ea20 0002 	bic.w	r0, r0, r2
 80124cc:	e7c0      	b.n	8012450 <floor+0x40>
 80124ce:	2401      	movs	r4, #1
 80124d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80124d4:	fa04 f303 	lsl.w	r3, r4, r3
 80124d8:	4418      	add	r0, r3
 80124da:	42a8      	cmp	r0, r5
 80124dc:	bf38      	it	cc
 80124de:	1909      	addcc	r1, r1, r4
 80124e0:	e7f2      	b.n	80124c8 <floor+0xb8>
 80124e2:	2000      	movs	r0, #0
 80124e4:	4601      	mov	r1, r0
 80124e6:	e7b3      	b.n	8012450 <floor+0x40>
 80124e8:	8800759c 	.word	0x8800759c
 80124ec:	7e37e43c 	.word	0x7e37e43c
 80124f0:	bff00000 	.word	0xbff00000
 80124f4:	000fffff 	.word	0x000fffff

080124f8 <nan>:
 80124f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012500 <nan+0x8>
 80124fc:	4770      	bx	lr
 80124fe:	bf00      	nop
 8012500:	00000000 	.word	0x00000000
 8012504:	7ff80000 	.word	0x7ff80000

08012508 <scalbn>:
 8012508:	ee10 1a90 	vmov	r1, s1
 801250c:	b510      	push	{r4, lr}
 801250e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012512:	b98c      	cbnz	r4, 8012538 <scalbn+0x30>
 8012514:	ee10 3a10 	vmov	r3, s0
 8012518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801251c:	430b      	orrs	r3, r1
 801251e:	d011      	beq.n	8012544 <scalbn+0x3c>
 8012520:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80125e8 <scalbn+0xe0>
 8012524:	4b3c      	ldr	r3, [pc, #240]	; (8012618 <scalbn+0x110>)
 8012526:	ee20 0b07 	vmul.f64	d0, d0, d7
 801252a:	4298      	cmp	r0, r3
 801252c:	da0b      	bge.n	8012546 <scalbn+0x3e>
 801252e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80125f0 <scalbn+0xe8>
 8012532:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012536:	e005      	b.n	8012544 <scalbn+0x3c>
 8012538:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801253c:	429c      	cmp	r4, r3
 801253e:	d107      	bne.n	8012550 <scalbn+0x48>
 8012540:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012544:	bd10      	pop	{r4, pc}
 8012546:	ee10 1a90 	vmov	r1, s1
 801254a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801254e:	3c36      	subs	r4, #54	; 0x36
 8012550:	4404      	add	r4, r0
 8012552:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8012556:	429c      	cmp	r4, r3
 8012558:	dd0d      	ble.n	8012576 <scalbn+0x6e>
 801255a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80125f8 <scalbn+0xf0>
 801255e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012600 <scalbn+0xf8>
 8012562:	eeb0 6b47 	vmov.f64	d6, d7
 8012566:	ee10 3a90 	vmov	r3, s1
 801256a:	2b00      	cmp	r3, #0
 801256c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012570:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012574:	e7e6      	b.n	8012544 <scalbn+0x3c>
 8012576:	2c00      	cmp	r4, #0
 8012578:	dd0a      	ble.n	8012590 <scalbn+0x88>
 801257a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801257e:	ec53 2b10 	vmov	r2, r3, d0
 8012582:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012586:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801258a:	ec43 2b10 	vmov	d0, r2, r3
 801258e:	e7d9      	b.n	8012544 <scalbn+0x3c>
 8012590:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8012594:	da19      	bge.n	80125ca <scalbn+0xc2>
 8012596:	f24c 3350 	movw	r3, #50000	; 0xc350
 801259a:	4298      	cmp	r0, r3
 801259c:	ee10 3a90 	vmov	r3, s1
 80125a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80125a4:	dd09      	ble.n	80125ba <scalbn+0xb2>
 80125a6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80125f8 <scalbn+0xf0>
 80125aa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012600 <scalbn+0xf8>
 80125ae:	eeb0 7b40 	vmov.f64	d7, d0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80125b8:	e7bb      	b.n	8012532 <scalbn+0x2a>
 80125ba:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80125f0 <scalbn+0xe8>
 80125be:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8012608 <scalbn+0x100>
 80125c2:	eeb0 7b40 	vmov.f64	d7, d0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	e7f4      	b.n	80125b4 <scalbn+0xac>
 80125ca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80125ce:	ec53 2b10 	vmov	r2, r3, d0
 80125d2:	3436      	adds	r4, #54	; 0x36
 80125d4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80125d8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80125dc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012610 <scalbn+0x108>
 80125e0:	ec43 2b10 	vmov	d0, r2, r3
 80125e4:	e7a5      	b.n	8012532 <scalbn+0x2a>
 80125e6:	bf00      	nop
 80125e8:	00000000 	.word	0x00000000
 80125ec:	43500000 	.word	0x43500000
 80125f0:	c2f8f359 	.word	0xc2f8f359
 80125f4:	01a56e1f 	.word	0x01a56e1f
 80125f8:	8800759c 	.word	0x8800759c
 80125fc:	7e37e43c 	.word	0x7e37e43c
 8012600:	8800759c 	.word	0x8800759c
 8012604:	fe37e43c 	.word	0xfe37e43c
 8012608:	c2f8f359 	.word	0xc2f8f359
 801260c:	81a56e1f 	.word	0x81a56e1f
 8012610:	00000000 	.word	0x00000000
 8012614:	3c900000 	.word	0x3c900000
 8012618:	ffff3cb0 	.word	0xffff3cb0

0801261c <_init>:
 801261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801261e:	bf00      	nop
 8012620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012622:	bc08      	pop	{r3}
 8012624:	469e      	mov	lr, r3
 8012626:	4770      	bx	lr

08012628 <_fini>:
 8012628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801262a:	bf00      	nop
 801262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801262e:	bc08      	pop	{r3}
 8012630:	469e      	mov	lr, r3
 8012632:	4770      	bx	lr
