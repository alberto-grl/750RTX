
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f7c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a6c8  08011220  08011220  00021220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b8e8  0801b8e8  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801b8e8  0801b8e8  0002b8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b8f0  0801b8f0  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b8f0  0801b8f0  0002b8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b8f4  0801b8f4  0002b8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000554  24000000  0801b8f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ed8c  24000560  0801be4c  00030560  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2400f2ec  0801be4c  0003f2ec  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00050f64  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008856  00000000  00000000  0009ff92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00027946  00000000  00000000  000a87e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a90  00000000  00000000  000d0130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000044f0  00000000  00000000  000d1bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003fb2d  00000000  00000000  000d60b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a6c2  00000000  00000000  00115bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001832e7  00000000  00000000  0015029f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c1  00000000  00000000  002d3586  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000070a0  00000000  00000000  002d3648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000560 	.word	0x24000560
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011204 	.word	0x08011204

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000564 	.word	0x24000564
 80002dc:	08011204 	.word	0x08011204

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b96e 	b.w	8000744 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	468c      	mov	ip, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	f040 8083 	bne.w	8000596 <__udivmoddi4+0x116>
 8000490:	428a      	cmp	r2, r1
 8000492:	4617      	mov	r7, r2
 8000494:	d947      	bls.n	8000526 <__udivmoddi4+0xa6>
 8000496:	fab2 f282 	clz	r2, r2
 800049a:	b142      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049c:	f1c2 0020 	rsb	r0, r2, #32
 80004a0:	fa24 f000 	lsr.w	r0, r4, r0
 80004a4:	4091      	lsls	r1, r2
 80004a6:	4097      	lsls	r7, r2
 80004a8:	ea40 0c01 	orr.w	ip, r0, r1
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbbc f6f8 	udiv	r6, ip, r8
 80004b8:	fa1f fe87 	uxth.w	lr, r7
 80004bc:	fb08 c116 	mls	r1, r8, r6, ip
 80004c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c4:	fb06 f10e 	mul.w	r1, r6, lr
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80004d2:	f080 8119 	bcs.w	8000708 <__udivmoddi4+0x288>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8116 	bls.w	8000708 <__udivmoddi4+0x288>
 80004dc:	3e02      	subs	r6, #2
 80004de:	443b      	add	r3, r7
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	193c      	adds	r4, r7, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8105 	bcs.w	800070c <__udivmoddi4+0x28c>
 8000502:	45a6      	cmp	lr, r4
 8000504:	f240 8102 	bls.w	800070c <__udivmoddi4+0x28c>
 8000508:	3802      	subs	r0, #2
 800050a:	443c      	add	r4, r7
 800050c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000510:	eba4 040e 	sub.w	r4, r4, lr
 8000514:	2600      	movs	r6, #0
 8000516:	b11d      	cbz	r5, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c5 4300 	strd	r4, r3, [r5]
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	b902      	cbnz	r2, 800052a <__udivmoddi4+0xaa>
 8000528:	deff      	udf	#255	; 0xff
 800052a:	fab2 f282 	clz	r2, r2
 800052e:	2a00      	cmp	r2, #0
 8000530:	d150      	bne.n	80005d4 <__udivmoddi4+0x154>
 8000532:	1bcb      	subs	r3, r1, r7
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	fa1f f887 	uxth.w	r8, r7
 800053c:	2601      	movs	r6, #1
 800053e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000542:	0c21      	lsrs	r1, r4, #16
 8000544:	fb0e 331c 	mls	r3, lr, ip, r3
 8000548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054c:	fb08 f30c 	mul.w	r3, r8, ip
 8000550:	428b      	cmp	r3, r1
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000554:	1879      	adds	r1, r7, r1
 8000556:	f10c 30ff 	add.w	r0, ip, #4294967295
 800055a:	d202      	bcs.n	8000562 <__udivmoddi4+0xe2>
 800055c:	428b      	cmp	r3, r1
 800055e:	f200 80e9 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 8000562:	4684      	mov	ip, r0
 8000564:	1ac9      	subs	r1, r1, r3
 8000566:	b2a3      	uxth	r3, r4
 8000568:	fbb1 f0fe 	udiv	r0, r1, lr
 800056c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000570:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000574:	fb08 f800 	mul.w	r8, r8, r0
 8000578:	45a0      	cmp	r8, r4
 800057a:	d907      	bls.n	800058c <__udivmoddi4+0x10c>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x10a>
 8000584:	45a0      	cmp	r8, r4
 8000586:	f200 80d9 	bhi.w	800073c <__udivmoddi4+0x2bc>
 800058a:	4618      	mov	r0, r3
 800058c:	eba4 0408 	sub.w	r4, r4, r8
 8000590:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000594:	e7bf      	b.n	8000516 <__udivmoddi4+0x96>
 8000596:	428b      	cmp	r3, r1
 8000598:	d909      	bls.n	80005ae <__udivmoddi4+0x12e>
 800059a:	2d00      	cmp	r5, #0
 800059c:	f000 80b1 	beq.w	8000702 <__udivmoddi4+0x282>
 80005a0:	2600      	movs	r6, #0
 80005a2:	e9c5 0100 	strd	r0, r1, [r5]
 80005a6:	4630      	mov	r0, r6
 80005a8:	4631      	mov	r1, r6
 80005aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ae:	fab3 f683 	clz	r6, r3
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d14a      	bne.n	800064c <__udivmoddi4+0x1cc>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d302      	bcc.n	80005c0 <__udivmoddi4+0x140>
 80005ba:	4282      	cmp	r2, r0
 80005bc:	f200 80b8 	bhi.w	8000730 <__udivmoddi4+0x2b0>
 80005c0:	1a84      	subs	r4, r0, r2
 80005c2:	eb61 0103 	sbc.w	r1, r1, r3
 80005c6:	2001      	movs	r0, #1
 80005c8:	468c      	mov	ip, r1
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0a8      	beq.n	8000520 <__udivmoddi4+0xa0>
 80005ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80005d2:	e7a5      	b.n	8000520 <__udivmoddi4+0xa0>
 80005d4:	f1c2 0320 	rsb	r3, r2, #32
 80005d8:	fa20 f603 	lsr.w	r6, r0, r3
 80005dc:	4097      	lsls	r7, r2
 80005de:	fa01 f002 	lsl.w	r0, r1, r2
 80005e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005e6:	40d9      	lsrs	r1, r3
 80005e8:	4330      	orrs	r0, r6
 80005ea:	0c03      	lsrs	r3, r0, #16
 80005ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80005f0:	fa1f f887 	uxth.w	r8, r7
 80005f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80005f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005fc:	fb06 f108 	mul.w	r1, r6, r8
 8000600:	4299      	cmp	r1, r3
 8000602:	fa04 f402 	lsl.w	r4, r4, r2
 8000606:	d909      	bls.n	800061c <__udivmoddi4+0x19c>
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	f106 3cff 	add.w	ip, r6, #4294967295
 800060e:	f080 808d 	bcs.w	800072c <__udivmoddi4+0x2ac>
 8000612:	4299      	cmp	r1, r3
 8000614:	f240 808a 	bls.w	800072c <__udivmoddi4+0x2ac>
 8000618:	3e02      	subs	r6, #2
 800061a:	443b      	add	r3, r7
 800061c:	1a5b      	subs	r3, r3, r1
 800061e:	b281      	uxth	r1, r0
 8000620:	fbb3 f0fe 	udiv	r0, r3, lr
 8000624:	fb0e 3310 	mls	r3, lr, r0, r3
 8000628:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062c:	fb00 f308 	mul.w	r3, r0, r8
 8000630:	428b      	cmp	r3, r1
 8000632:	d907      	bls.n	8000644 <__udivmoddi4+0x1c4>
 8000634:	1879      	adds	r1, r7, r1
 8000636:	f100 3cff 	add.w	ip, r0, #4294967295
 800063a:	d273      	bcs.n	8000724 <__udivmoddi4+0x2a4>
 800063c:	428b      	cmp	r3, r1
 800063e:	d971      	bls.n	8000724 <__udivmoddi4+0x2a4>
 8000640:	3802      	subs	r0, #2
 8000642:	4439      	add	r1, r7
 8000644:	1acb      	subs	r3, r1, r3
 8000646:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800064a:	e778      	b.n	800053e <__udivmoddi4+0xbe>
 800064c:	f1c6 0c20 	rsb	ip, r6, #32
 8000650:	fa03 f406 	lsl.w	r4, r3, r6
 8000654:	fa22 f30c 	lsr.w	r3, r2, ip
 8000658:	431c      	orrs	r4, r3
 800065a:	fa20 f70c 	lsr.w	r7, r0, ip
 800065e:	fa01 f306 	lsl.w	r3, r1, r6
 8000662:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000666:	fa21 f10c 	lsr.w	r1, r1, ip
 800066a:	431f      	orrs	r7, r3
 800066c:	0c3b      	lsrs	r3, r7, #16
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fa1f f884 	uxth.w	r8, r4
 8000676:	fb0e 1119 	mls	r1, lr, r9, r1
 800067a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800067e:	fb09 fa08 	mul.w	sl, r9, r8
 8000682:	458a      	cmp	sl, r1
 8000684:	fa02 f206 	lsl.w	r2, r2, r6
 8000688:	fa00 f306 	lsl.w	r3, r0, r6
 800068c:	d908      	bls.n	80006a0 <__udivmoddi4+0x220>
 800068e:	1861      	adds	r1, r4, r1
 8000690:	f109 30ff 	add.w	r0, r9, #4294967295
 8000694:	d248      	bcs.n	8000728 <__udivmoddi4+0x2a8>
 8000696:	458a      	cmp	sl, r1
 8000698:	d946      	bls.n	8000728 <__udivmoddi4+0x2a8>
 800069a:	f1a9 0902 	sub.w	r9, r9, #2
 800069e:	4421      	add	r1, r4
 80006a0:	eba1 010a 	sub.w	r1, r1, sl
 80006a4:	b2bf      	uxth	r7, r7
 80006a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80006aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80006ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80006b2:	fb00 f808 	mul.w	r8, r0, r8
 80006b6:	45b8      	cmp	r8, r7
 80006b8:	d907      	bls.n	80006ca <__udivmoddi4+0x24a>
 80006ba:	19e7      	adds	r7, r4, r7
 80006bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80006c0:	d22e      	bcs.n	8000720 <__udivmoddi4+0x2a0>
 80006c2:	45b8      	cmp	r8, r7
 80006c4:	d92c      	bls.n	8000720 <__udivmoddi4+0x2a0>
 80006c6:	3802      	subs	r0, #2
 80006c8:	4427      	add	r7, r4
 80006ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006ce:	eba7 0708 	sub.w	r7, r7, r8
 80006d2:	fba0 8902 	umull	r8, r9, r0, r2
 80006d6:	454f      	cmp	r7, r9
 80006d8:	46c6      	mov	lr, r8
 80006da:	4649      	mov	r1, r9
 80006dc:	d31a      	bcc.n	8000714 <__udivmoddi4+0x294>
 80006de:	d017      	beq.n	8000710 <__udivmoddi4+0x290>
 80006e0:	b15d      	cbz	r5, 80006fa <__udivmoddi4+0x27a>
 80006e2:	ebb3 020e 	subs.w	r2, r3, lr
 80006e6:	eb67 0701 	sbc.w	r7, r7, r1
 80006ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006ee:	40f2      	lsrs	r2, r6
 80006f0:	ea4c 0202 	orr.w	r2, ip, r2
 80006f4:	40f7      	lsrs	r7, r6
 80006f6:	e9c5 2700 	strd	r2, r7, [r5]
 80006fa:	2600      	movs	r6, #0
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	462e      	mov	r6, r5
 8000704:	4628      	mov	r0, r5
 8000706:	e70b      	b.n	8000520 <__udivmoddi4+0xa0>
 8000708:	4606      	mov	r6, r0
 800070a:	e6e9      	b.n	80004e0 <__udivmoddi4+0x60>
 800070c:	4618      	mov	r0, r3
 800070e:	e6fd      	b.n	800050c <__udivmoddi4+0x8c>
 8000710:	4543      	cmp	r3, r8
 8000712:	d2e5      	bcs.n	80006e0 <__udivmoddi4+0x260>
 8000714:	ebb8 0e02 	subs.w	lr, r8, r2
 8000718:	eb69 0104 	sbc.w	r1, r9, r4
 800071c:	3801      	subs	r0, #1
 800071e:	e7df      	b.n	80006e0 <__udivmoddi4+0x260>
 8000720:	4608      	mov	r0, r1
 8000722:	e7d2      	b.n	80006ca <__udivmoddi4+0x24a>
 8000724:	4660      	mov	r0, ip
 8000726:	e78d      	b.n	8000644 <__udivmoddi4+0x1c4>
 8000728:	4681      	mov	r9, r0
 800072a:	e7b9      	b.n	80006a0 <__udivmoddi4+0x220>
 800072c:	4666      	mov	r6, ip
 800072e:	e775      	b.n	800061c <__udivmoddi4+0x19c>
 8000730:	4630      	mov	r0, r6
 8000732:	e74a      	b.n	80005ca <__udivmoddi4+0x14a>
 8000734:	f1ac 0c02 	sub.w	ip, ip, #2
 8000738:	4439      	add	r1, r7
 800073a:	e713      	b.n	8000564 <__udivmoddi4+0xe4>
 800073c:	3802      	subs	r0, #2
 800073e:	443c      	add	r4, r7
 8000740:	e724      	b.n	800058c <__udivmoddi4+0x10c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <Load_Presets+0x40>)
{
 800074a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800074e:	4c0f      	ldr	r4, [pc, #60]	; (800078c <Load_Presets+0x44>)
 8000750:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8000754:	4f0e      	ldr	r7, [pc, #56]	; (8000790 <Load_Presets+0x48>)
 8000756:	4e0f      	ldr	r6, [pc, #60]	; (8000794 <Load_Presets+0x4c>)
 8000758:	4d0f      	ldr	r5, [pc, #60]	; (8000798 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 800075a:	4621      	mov	r1, r4
 800075c:	4618      	mov	r0, r3
 800075e:	f00d fa5d 	bl	800dc1c <strcpy>
		psets[k].freq = pFreqs[k];
		psets[k].mode = pModes[k];
 8000762:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		strcpy(psets[k].name, pNames[k]);
 8000766:	4603      	mov	r3, r0
		psets[k].bw   = pBws[k];
 8000768:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		psets[k].freq = pFreqs[k];
 800076c:	f857 0b04 	ldr.w	r0, [r7], #4
 8000770:	3410      	adds	r4, #16
		psets[k].mode = pModes[k];
 8000772:	7519      	strb	r1, [r3, #20]
 8000774:	3318      	adds	r3, #24
		psets[k].freq = pFreqs[k];
 8000776:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 800077a:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 800077e:	4543      	cmp	r3, r8
 8000780:	d1eb      	bne.n	800075a <Load_Presets+0x12>
	}
}
 8000782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000786:	bf00      	nop
 8000788:	24008b04 	.word	0x24008b04
 800078c:	24000000 	.word	0x24000000
 8000790:	08017230 	.word	0x08017230
 8000794:	08017267 	.word	0x08017267
 8000798:	0801721f 	.word	0x0801721f

0800079c <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <SetBW+0x8c>)
	CurrentBW = newbw;
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <SetBW+0x90>)
{
 80007a0:	b470      	push	{r4, r5, r6}
 80007a2:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 80007a4:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d83c      	bhi.n	8000824 <SetBW+0x88>
 80007aa:	e8df f003 	tbb	[pc, r3]
 80007ae:	1c0f      	.short	0x1c0f
 80007b0:	022f      	.short	0x022f

		break;

	case CW  :

		bw[CW] = newbw;
 80007b2:	491f      	ldr	r1, [pc, #124]	; (8000830 <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 80007b4:	2500      	movs	r5, #0
 80007b6:	4c1f      	ldr	r4, [pc, #124]	; (8000834 <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80007b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 80007bc:	70c8      	strb	r0, [r1, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80007be:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <SetBW+0x9c>)
		CWindex = 0; // TODO toglimi
 80007c0:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80007c2:	491e      	ldr	r1, [pc, #120]	; (800083c <SetBW+0xa0>)
 80007c4:	481e      	ldr	r0, [pc, #120]	; (8000840 <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 80007c6:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80007c8:	f001 b8aa 	b.w	8001920 <SDR_2R_toC_f32>
		bw[AM] = newbw;
 80007cc:	4918      	ldr	r1, [pc, #96]	; (8000830 <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 80007ce:	2500      	movs	r5, #0
 80007d0:	4c1c      	ldr	r4, [pc, #112]	; (8000844 <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80007d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 80007d6:	7008      	strb	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <SetBW+0x9c>)
		AMindex = 0; // TODO toglimi
 80007da:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80007dc:	491a      	ldr	r1, [pc, #104]	; (8000848 <SetBW+0xac>)
 80007de:	481b      	ldr	r0, [pc, #108]	; (800084c <SetBW+0xb0>)
}	
 80007e0:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80007e2:	f001 b89d 	b.w	8001920 <SDR_2R_toC_f32>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80007e6:	1e06      	subs	r6, r0, #0
		bw[LSB] = newbw;
 80007e8:	4a11      	ldr	r2, [pc, #68]	; (8000830 <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 80007ea:	4916      	ldr	r1, [pc, #88]	; (8000844 <SetBW+0xa8>)
		LSBindex = 0; // TODO toglimi
 80007ec:	f04f 0500 	mov.w	r5, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80007f0:	bf18      	it	ne
 80007f2:	2601      	movne	r6, #1
		LSBindex = 0; // TODO toglimi
 80007f4:	4c16      	ldr	r4, [pc, #88]	; (8000850 <SetBW+0xb4>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[LSB] = newbw;
 80007fa:	7050      	strb	r0, [r2, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 80007fc:	800e      	strh	r6, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <SetBW+0x9c>)
		USBindex = 0; // TODO toglimi
 8000800:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000802:	4914      	ldr	r1, [pc, #80]	; (8000854 <SetBW+0xb8>)
 8000804:	4814      	ldr	r0, [pc, #80]	; (8000858 <SetBW+0xbc>)
}	
 8000806:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000808:	f001 b88a 	b.w	8001920 <SDR_2R_toC_f32>
		bw[USB] = newbw;
 800080c:	4a08      	ldr	r2, [pc, #32]	; (8000830 <SetBW+0x94>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 800080e:	1e06      	subs	r6, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <SetBW+0xa8>)
		USBindex = 0; // TODO toglimi
 8000812:	f04f 0500 	mov.w	r5, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000816:	bf18      	it	ne
 8000818:	2601      	movne	r6, #1
		USBindex = 0; // TODO toglimi
 800081a:	4c10      	ldr	r4, [pc, #64]	; (800085c <SetBW+0xc0>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 800081c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[USB] = newbw;
 8000820:	7090      	strb	r0, [r2, #2]
 8000822:	e7eb      	b.n	80007fc <SetBW+0x60>
}	
 8000824:	bc70      	pop	{r4, r5, r6}
 8000826:	4770      	bx	lr
 8000828:	2400c5fc 	.word	0x2400c5fc
 800082c:	24000cb0 	.word	0x24000cb0
 8000830:	240090b8 	.word	0x240090b8
 8000834:	240090b4 	.word	0x240090b4
 8000838:	20004000 	.word	0x20004000
 800083c:	08013220 	.word	0x08013220
 8000840:	08014220 	.word	0x08014220
 8000844:	2400da02 	.word	0x2400da02
 8000848:	08011220 	.word	0x08011220
 800084c:	08012220 	.word	0x08012220
 8000850:	2400da00 	.word	0x2400da00
 8000854:	08015220 	.word	0x08015220
 8000858:	08016220 	.word	0x08016220
 800085c:	24008278 	.word	0x24008278

08000860 <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 8000862:	4a24      	ldr	r2, [pc, #144]	; (80008f4 <SetAGC+0x94>)
{
 8000864:	b430      	push	{r4, r5}
 8000866:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000868:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 800086a:	2b03      	cmp	r3, #3
 800086c:	d810      	bhi.n	8000890 <SetAGC+0x30>
 800086e:	e8df f003 	tbb	[pc, r3]
 8000872:	2011      	.short	0x2011
 8000874:	022f      	.short	0x022f
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <SetAGC+0x98>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000878:	4a20      	ldr	r2, [pc, #128]	; (80008fc <SetAGC+0x9c>)
	Decay[CW]   = AGC_decay[newAGC];
 800087a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800087e:	4c20      	ldr	r4, [pc, #128]	; (8000900 <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000880:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000884:	681d      	ldr	r5, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000886:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <SetAGC+0xa4>)
	case CW :       agc[CW] = newAGC;
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 800088a:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 800088c:	80d1      	strh	r1, [r2, #6]
	case CW :       agc[CW] = newAGC;
 800088e:	70d8      	strb	r0, [r3, #3]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8000890:	bc30      	pop	{r4, r5}
 8000892:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <SetAGC+0x98>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <SetAGC+0x9c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000898:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800089c:	4c18      	ldr	r4, [pc, #96]	; (8000900 <SetAGC+0xa0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 800089e:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 80008a2:	681d      	ldr	r5, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 80008a4:	4a17      	ldr	r2, [pc, #92]	; (8000904 <SetAGC+0xa4>)
	case AM :       agc[AM] = newAGC;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 80008a8:	6025      	str	r5, [r4, #0]
	case AM :       agc[AM] = newAGC;
 80008aa:	7018      	strb	r0, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 80008ac:	8011      	strh	r1, [r2, #0]
}	
 80008ae:	bc30      	pop	{r4, r5}
 80008b0:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <SetAGC+0x98>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 80008b4:	4a11      	ldr	r2, [pc, #68]	; (80008fc <SetAGC+0x9c>)
	Decay[LSB]  = AGC_decay[newAGC];
 80008b6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80008ba:	4c11      	ldr	r4, [pc, #68]	; (8000900 <SetAGC+0xa0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 80008bc:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 80008c0:	681d      	ldr	r5, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <SetAGC+0xa4>)
	case LSB :      agc[LSB] = newAGC;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 80008c6:	6065      	str	r5, [r4, #4]
	case LSB :      agc[LSB] = newAGC;
 80008c8:	7058      	strb	r0, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80008ca:	8051      	strh	r1, [r2, #2]
}	
 80008cc:	bc30      	pop	{r4, r5}
 80008ce:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <SetAGC+0x98>)
	Hcount[USB] = Hangcount[newAGC]; break;
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <SetAGC+0x9c>)
	Decay[USB]  = AGC_decay[newAGC];
 80008d4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80008d8:	4c09      	ldr	r4, [pc, #36]	; (8000900 <SetAGC+0xa0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 80008da:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 80008de:	681d      	ldr	r5, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 80008e0:	4a08      	ldr	r2, [pc, #32]	; (8000904 <SetAGC+0xa4>)
	case USB :      agc[USB] = newAGC;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 80008e4:	60a5      	str	r5, [r4, #8]
	case USB :      agc[USB] = newAGC;
 80008e6:	7098      	strb	r0, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 80008e8:	8091      	strh	r1, [r2, #4]
}	
 80008ea:	bc30      	pop	{r4, r5}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2400c5fc 	.word	0x2400c5fc
 80008f4:	240008a0 	.word	0x240008a0
 80008f8:	2400c5ec 	.word	0x2400c5ec
 80008fc:	2400a0c4 	.word	0x2400a0c4
 8000900:	24002cbc 	.word	0x24002cbc
 8000904:	2400826c 	.word	0x2400826c
 8000908:	24007a2c 	.word	0x24007a2c

0800090c <Tune_Preset>:
{
 800090c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8000910:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000914:	4e48      	ldr	r6, [pc, #288]	; (8000a38 <Tune_Preset+0x12c>)
 8000916:	4a49      	ldr	r2, [pc, #292]	; (8000a3c <Tune_Preset+0x130>)
{
 8000918:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 800091a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 800091e:	4f48      	ldr	r7, [pc, #288]	; (8000a40 <Tune_Preset+0x134>)
	LOfreq = psets[Idx].freq;
 8000920:	0045      	lsls	r5, r0, #1
 8000922:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8000924:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8000926:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000928:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 800092a:	2b03      	cmp	r3, #3
 800092c:	d87d      	bhi.n	8000a2a <Tune_Preset+0x11e>
 800092e:	e8df f003 	tbb	[pc, r3]
 8000932:	6458      	.short	0x6458
 8000934:	0270      	.short	0x0270
		//     ChangeColor(ptr, hUSB, GUI_RED);
		//     ChangeColor(ptr, hCW,  GUI_BLACK);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000936:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000a7c <Tune_Preset+0x170>
 800093a:	f898 0003 	ldrb.w	r0, [r8, #3]
 800093e:	f7ff ff2d 	bl	800079c <SetBW>
 8000942:	4b40      	ldr	r3, [pc, #256]	; (8000a44 <Tune_Preset+0x138>)
 8000944:	78d8      	ldrb	r0, [r3, #3]
 8000946:	f7ff ff8b 	bl	8000860 <SetAGC>
		//     ChangeColor(ptr, hAM,  GUI_BLACK);
		//     ChangeColor(ptr, hLSB, GUI_BLACK);
		//     ChangeColor(ptr, hUSB, GUI_BLACK);
		//     ChangeColor(ptr, hCW,  GUI_RED);
		break;
 800094a:	783b      	ldrb	r3, [r7, #0]
	SetBW( psets[Idx].bw);
 800094c:	4425      	add	r5, r4
	CurrentBW = newbw;
 800094e:	493e      	ldr	r1, [pc, #248]	; (8000a48 <Tune_Preset+0x13c>)
	SetBW( psets[Idx].bw);
 8000950:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8000954:	7d6a      	ldrb	r2, [r5, #21]
	CurrentBW = newbw;
 8000956:	700a      	strb	r2, [r1, #0]
	switch(CurrentMode)
 8000958:	2b03      	cmp	r3, #3
 800095a:	d80f      	bhi.n	800097c <Tune_Preset+0x70>
 800095c:	e8df f003 	tbb	[pc, r3]
 8000960:	0217372a 	.word	0x0217372a
		CWindex = 0; // TODO toglimi
 8000964:	4839      	ldr	r0, [pc, #228]	; (8000a4c <Tune_Preset+0x140>)
 8000966:	2500      	movs	r5, #0
		bw[CW] = newbw;
 8000968:	f888 2003 	strb.w	r2, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 800096c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8000970:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000972:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <Tune_Preset+0x144>)
 8000974:	4937      	ldr	r1, [pc, #220]	; (8000a54 <Tune_Preset+0x148>)
 8000976:	4838      	ldr	r0, [pc, #224]	; (8000a58 <Tune_Preset+0x14c>)
 8000978:	f000 ffd2 	bl	8001920 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 800097c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000980:	4836      	ldr	r0, [pc, #216]	; (8000a5c <Tune_Preset+0x150>)
 8000982:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 800098a:	f00d b947 	b.w	800dc1c <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 800098e:	1e17      	subs	r7, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000990:	4933      	ldr	r1, [pc, #204]	; (8000a60 <Tune_Preset+0x154>)
		USBindex = 0; // TODO toglimi
 8000992:	4834      	ldr	r0, [pc, #208]	; (8000a64 <Tune_Preset+0x158>)
 8000994:	f04f 0500 	mov.w	r5, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000998:	bf18      	it	ne
 800099a:	2701      	movne	r7, #1
		bw[USB] = newbw;
 800099c:	f888 2002 	strb.w	r2, [r8, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 80009a0:	800f      	strh	r7, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80009a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 80009a6:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80009a8:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <Tune_Preset+0x144>)
 80009aa:	492f      	ldr	r1, [pc, #188]	; (8000a68 <Tune_Preset+0x15c>)
 80009ac:	482f      	ldr	r0, [pc, #188]	; (8000a6c <Tune_Preset+0x160>)
 80009ae:	f000 ffb7 	bl	8001920 <SDR_2R_toC_f32>
		break;
 80009b2:	e7e3      	b.n	800097c <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 80009b4:	482a      	ldr	r0, [pc, #168]	; (8000a60 <Tune_Preset+0x154>)
 80009b6:	2500      	movs	r5, #0
		bw[AM] = newbw;
 80009b8:	f888 2000 	strb.w	r2, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80009bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 80009c0:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80009c2:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <Tune_Preset+0x144>)
 80009c4:	492a      	ldr	r1, [pc, #168]	; (8000a70 <Tune_Preset+0x164>)
 80009c6:	482b      	ldr	r0, [pc, #172]	; (8000a74 <Tune_Preset+0x168>)
 80009c8:	f000 ffaa 	bl	8001920 <SDR_2R_toC_f32>
		break;
 80009cc:	e7d6      	b.n	800097c <Tune_Preset+0x70>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80009ce:	1e17      	subs	r7, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 80009d0:	4923      	ldr	r1, [pc, #140]	; (8000a60 <Tune_Preset+0x154>)
		LSBindex = 0; // TODO toglimi
 80009d2:	4829      	ldr	r0, [pc, #164]	; (8000a78 <Tune_Preset+0x16c>)
 80009d4:	f04f 0500 	mov.w	r5, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80009d8:	bf18      	it	ne
 80009da:	2701      	movne	r7, #1
		bw[LSB] = newbw;
 80009dc:	f888 2001 	strb.w	r2, [r8, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 80009e0:	e7de      	b.n	80009a0 <Tune_Preset+0x94>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80009e2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000a7c <Tune_Preset+0x170>
 80009e6:	f898 0000 	ldrb.w	r0, [r8]
 80009ea:	f7ff fed7 	bl	800079c <SetBW>
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <Tune_Preset+0x138>)
 80009f0:	7818      	ldrb	r0, [r3, #0]
 80009f2:	f7ff ff35 	bl	8000860 <SetAGC>
		break;
 80009f6:	783b      	ldrb	r3, [r7, #0]

	default :
		break;
	}
}	
 80009f8:	e7a8      	b.n	800094c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80009fa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000a7c <Tune_Preset+0x170>
 80009fe:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000a02:	f7ff fecb 	bl	800079c <SetBW>
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <Tune_Preset+0x138>)
 8000a08:	7858      	ldrb	r0, [r3, #1]
 8000a0a:	f7ff ff29 	bl	8000860 <SetAGC>
		break;
 8000a0e:	783b      	ldrb	r3, [r7, #0]
 8000a10:	e79c      	b.n	800094c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000a12:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000a7c <Tune_Preset+0x170>
 8000a16:	f898 0002 	ldrb.w	r0, [r8, #2]
 8000a1a:	f7ff febf 	bl	800079c <SetBW>
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <Tune_Preset+0x138>)
 8000a20:	7898      	ldrb	r0, [r3, #2]
 8000a22:	f7ff ff1d 	bl	8000860 <SetAGC>
		break;
 8000a26:	783b      	ldrb	r3, [r7, #0]
 8000a28:	e790      	b.n	800094c <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8000a2a:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <Tune_Preset+0x13c>)
	SetBW( psets[Idx].bw);
 8000a2e:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 8000a32:	7d5b      	ldrb	r3, [r3, #21]
 8000a34:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8000a36:	e7a1      	b.n	800097c <Tune_Preset+0x70>
 8000a38:	24008b04 	.word	0x24008b04
 8000a3c:	2400a0c8 	.word	0x2400a0c8
 8000a40:	2400c5fc 	.word	0x2400c5fc
 8000a44:	24007a2c 	.word	0x24007a2c
 8000a48:	24000cb0 	.word	0x24000cb0
 8000a4c:	240090b4 	.word	0x240090b4
 8000a50:	20004000 	.word	0x20004000
 8000a54:	08013220 	.word	0x08013220
 8000a58:	08014220 	.word	0x08014220
 8000a5c:	24004684 	.word	0x24004684
 8000a60:	2400da02 	.word	0x2400da02
 8000a64:	24008278 	.word	0x24008278
 8000a68:	08015220 	.word	0x08015220
 8000a6c:	08016220 	.word	0x08016220
 8000a70:	08011220 	.word	0x08011220
 8000a74:	08012220 	.word	0x08012220
 8000a78:	2400da00 	.word	0x2400da00
 8000a7c:	240090b8 	.word	0x240090b8

08000a80 <SetMode>:
{
 8000a80:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <SetMode+0x64>)
 8000a84:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8000a86:	2803      	cmp	r0, #3
 8000a88:	d82b      	bhi.n	8000ae2 <SetMode+0x62>
 8000a8a:	e8df f000 	tbb	[pc, r0]
 8000a8e:	160c      	.short	0x160c
 8000a90:	0220      	.short	0x0220
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <SetMode+0x68>)
 8000a94:	78d8      	ldrb	r0, [r3, #3]
 8000a96:	f7ff fe81 	bl	800079c <SetBW>
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <SetMode+0x6c>)
 8000a9c:	78d8      	ldrb	r0, [r3, #3]
}	
 8000a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000aa2:	f7ff bedd 	b.w	8000860 <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <SetMode+0x68>)
 8000aa8:	7818      	ldrb	r0, [r3, #0]
 8000aaa:	f7ff fe77 	bl	800079c <SetBW>
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <SetMode+0x6c>)
 8000ab0:	7818      	ldrb	r0, [r3, #0]
}	
 8000ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000ab6:	f7ff bed3 	b.w	8000860 <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <SetMode+0x68>)
 8000abc:	7858      	ldrb	r0, [r3, #1]
 8000abe:	f7ff fe6d 	bl	800079c <SetBW>
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <SetMode+0x6c>)
 8000ac4:	7858      	ldrb	r0, [r3, #1]
}	
 8000ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000aca:	f7ff bec9 	b.w	8000860 <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SetMode+0x68>)
 8000ad0:	7898      	ldrb	r0, [r3, #2]
 8000ad2:	f7ff fe63 	bl	800079c <SetBW>
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SetMode+0x6c>)
 8000ad8:	7898      	ldrb	r0, [r3, #2]
}	
 8000ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000ade:	f7ff bebf 	b.w	8000860 <SetAGC>
}	
 8000ae2:	bd08      	pop	{r3, pc}
 8000ae4:	2400c5fc 	.word	0x2400c5fc
 8000ae8:	240090b8 	.word	0x240090b8
 8000aec:	24007a2c 	.word	0x24007a2c

08000af0 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8000af0:	2809      	cmp	r0, #9
{
 8000af2:	b508      	push	{r3, lr}
	if (idx == 9)
 8000af4:	d012      	beq.n	8000b1c <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
	    Fstep = pow(10, 5 - idx);
 8000af6:	f1c0 0005 	rsb	r0, r0, #5
 8000afa:	ee06 0a90 	vmov	s13, r0
 8000afe:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000b28 <SetFstep+0x38>
 8000b02:	eeb8 0be6 	vcvt.f64.s32	d0, s13
 8000b06:	ee20 0b07 	vmul.f64	d0, d0, d7
 8000b0a:	f00f fa25 	bl	800ff58 <exp>
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <SetFstep+0x40>)
 8000b10:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8000b14:	ee17 3a90 	vmov	r3, s15
 8000b18:	6013      	str	r3, [r2, #0]
}	
 8000b1a:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8000b1c:	f242 3328 	movw	r3, #9000	; 0x2328
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <SetFstep+0x40>)
 8000b22:	6013      	str	r3, [r2, #0]
}	
 8000b24:	bd08      	pop	{r3, pc}
 8000b26:	bf00      	nop
 8000b28:	bbb55516 	.word	0xbbb55516
 8000b2c:	40026bb1 	.word	0x40026bb1
 8000b30:	2400c5f4 	.word	0x2400c5f4

08000b34 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked()
{	
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOfreq += Fstep;
 8000b36:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <FplusClicked+0x128>)
 8000b38:	4a49      	ldr	r2, [pc, #292]	; (8000c60 <FplusClicked+0x12c>)
 8000b3a:	edd3 7a00 	vldr	s15, [r3]
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000b3e:	4e49      	ldr	r6, [pc, #292]	; (8000c64 <FplusClicked+0x130>)
	LOfreq += Fstep;
 8000b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b44:	ed92 7a00 	vldr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000b48:	7833      	ldrb	r3, [r6, #0]
	psets[0].bw = bw[CurrentMode];
 8000b4a:	4d47      	ldr	r5, [pc, #284]	; (8000c68 <FplusClicked+0x134>)
	LOfreq += Fstep;
 8000b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000b50:	4c46      	ldr	r4, [pc, #280]	; (8000c6c <FplusClicked+0x138>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000b52:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000c70 <FplusClicked+0x13c>
	psets[0].bw = bw[CurrentMode];
 8000b56:	5ce9      	ldrb	r1, [r5, r3]
	LOfreq  = min(LOfreq, 50000000.f);
 8000b58:	fec7 7ac7 	vminnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000b5c:	7523      	strb	r3, [r4, #20]
	LOfreq  = min(LOfreq, 50000000.f);
 8000b5e:	edc2 7a00 	vstr	s15, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000b62:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8000b66:	7561      	strb	r1, [r4, #21]
	switch(CurrentMode)
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d874      	bhi.n	8000c56 <FplusClicked+0x122>
 8000b6c:	e8df f003 	tbb	[pc, r3]
 8000b70:	02695f55 	.word	0x02695f55
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000b74:	78e8      	ldrb	r0, [r5, #3]
 8000b76:	f7ff fe11 	bl	800079c <SetBW>
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <FplusClicked+0x140>)
 8000b7c:	78d8      	ldrb	r0, [r3, #3]
 8000b7e:	f7ff fe6f 	bl	8000860 <SetAGC>
		break;
 8000b82:	7d61      	ldrb	r1, [r4, #21]
 8000b84:	7833      	ldrb	r3, [r6, #0]
	CurrentBW = newbw;
 8000b86:	4a3c      	ldr	r2, [pc, #240]	; (8000c78 <FplusClicked+0x144>)
 8000b88:	7011      	strb	r1, [r2, #0]
	switch(CurrentMode)
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d80e      	bhi.n	8000bac <FplusClicked+0x78>
 8000b8e:	e8df f003 	tbb	[pc, r3]
 8000b92:	3b2a      	.short	0x3b2a
 8000b94:	0213      	.short	0x0213
		CWindex = 0; // TODO toglimi
 8000b96:	4c39      	ldr	r4, [pc, #228]	; (8000c7c <FplusClicked+0x148>)
 8000b98:	2600      	movs	r6, #0
		bw[CW] = newbw;
 8000b9a:	70e9      	strb	r1, [r5, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba0:	4a37      	ldr	r2, [pc, #220]	; (8000c80 <FplusClicked+0x14c>)
 8000ba2:	4938      	ldr	r1, [pc, #224]	; (8000c84 <FplusClicked+0x150>)
 8000ba4:	4838      	ldr	r0, [pc, #224]	; (8000c88 <FplusClicked+0x154>)
		CWindex = 0; // TODO toglimi
 8000ba6:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000ba8:	f000 feba 	bl	8001920 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000bac:	492f      	ldr	r1, [pc, #188]	; (8000c6c <FplusClicked+0x138>)
 8000bae:	4837      	ldr	r0, [pc, #220]	; (8000c8c <FplusClicked+0x158>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000bb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000bb4:	f00d b832 	b.w	800dc1c <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000bb8:	1e0f      	subs	r7, r1, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000bba:	4835      	ldr	r0, [pc, #212]	; (8000c90 <FplusClicked+0x15c>)
		USBindex = 0; // TODO toglimi
 8000bbc:	4c35      	ldr	r4, [pc, #212]	; (8000c94 <FplusClicked+0x160>)
 8000bbe:	f04f 0600 	mov.w	r6, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000bc2:	bf18      	it	ne
 8000bc4:	2701      	movne	r7, #1
		bw[USB] = newbw;
 8000bc6:	70a9      	strb	r1, [r5, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000bc8:	8007      	strh	r7, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bce:	4932      	ldr	r1, [pc, #200]	; (8000c98 <FplusClicked+0x164>)
 8000bd0:	4832      	ldr	r0, [pc, #200]	; (8000c9c <FplusClicked+0x168>)
		USBindex = 0; // TODO toglimi
 8000bd2:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000bd4:	4a2a      	ldr	r2, [pc, #168]	; (8000c80 <FplusClicked+0x14c>)
 8000bd6:	f000 fea3 	bl	8001920 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000bda:	4924      	ldr	r1, [pc, #144]	; (8000c6c <FplusClicked+0x138>)
 8000bdc:	482b      	ldr	r0, [pc, #172]	; (8000c8c <FplusClicked+0x158>)
}	
 8000bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000be2:	f00d b81b 	b.w	800dc1c <strcpy>
		AMindex = 0; // TODO toglimi
 8000be6:	4c2a      	ldr	r4, [pc, #168]	; (8000c90 <FplusClicked+0x15c>)
 8000be8:	2600      	movs	r6, #0
		bw[AM] = newbw;
 8000bea:	7029      	strb	r1, [r5, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf0:	492b      	ldr	r1, [pc, #172]	; (8000ca0 <FplusClicked+0x16c>)
 8000bf2:	482c      	ldr	r0, [pc, #176]	; (8000ca4 <FplusClicked+0x170>)
		AMindex = 0; // TODO toglimi
 8000bf4:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bf6:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <FplusClicked+0x14c>)
 8000bf8:	f000 fe92 	bl	8001920 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000bfc:	491b      	ldr	r1, [pc, #108]	; (8000c6c <FplusClicked+0x138>)
 8000bfe:	4823      	ldr	r0, [pc, #140]	; (8000c8c <FplusClicked+0x158>)
}	
 8000c00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000c04:	f00d b80a 	b.w	800dc1c <strcpy>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c08:	1e0f      	subs	r7, r1, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c0a:	4821      	ldr	r0, [pc, #132]	; (8000c90 <FplusClicked+0x15c>)
		LSBindex = 0; // TODO toglimi
 8000c0c:	4c26      	ldr	r4, [pc, #152]	; (8000ca8 <FplusClicked+0x174>)
 8000c0e:	f04f 0600 	mov.w	r6, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c12:	bf18      	it	ne
 8000c14:	2701      	movne	r7, #1
		bw[LSB] = newbw;
 8000c16:	7069      	strb	r1, [r5, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c18:	e7d6      	b.n	8000bc8 <FplusClicked+0x94>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c1a:	7828      	ldrb	r0, [r5, #0]
 8000c1c:	f7ff fdbe 	bl	800079c <SetBW>
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <FplusClicked+0x140>)
 8000c22:	7818      	ldrb	r0, [r3, #0]
 8000c24:	f7ff fe1c 	bl	8000860 <SetAGC>
		break;
 8000c28:	7d61      	ldrb	r1, [r4, #21]
 8000c2a:	7833      	ldrb	r3, [r6, #0]
}	
 8000c2c:	e7ab      	b.n	8000b86 <FplusClicked+0x52>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c2e:	7868      	ldrb	r0, [r5, #1]
 8000c30:	f7ff fdb4 	bl	800079c <SetBW>
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <FplusClicked+0x140>)
 8000c36:	7858      	ldrb	r0, [r3, #1]
 8000c38:	f7ff fe12 	bl	8000860 <SetAGC>
		break;
 8000c3c:	7d61      	ldrb	r1, [r4, #21]
 8000c3e:	7833      	ldrb	r3, [r6, #0]
 8000c40:	e7a1      	b.n	8000b86 <FplusClicked+0x52>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c42:	78a8      	ldrb	r0, [r5, #2]
 8000c44:	f7ff fdaa 	bl	800079c <SetBW>
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <FplusClicked+0x140>)
 8000c4a:	7898      	ldrb	r0, [r3, #2]
 8000c4c:	f7ff fe08 	bl	8000860 <SetAGC>
		break;
 8000c50:	7d61      	ldrb	r1, [r4, #21]
 8000c52:	7833      	ldrb	r3, [r6, #0]
 8000c54:	e797      	b.n	8000b86 <FplusClicked+0x52>
	CurrentBW = newbw;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <FplusClicked+0x144>)
 8000c58:	7019      	strb	r1, [r3, #0]
	switch(CurrentMode)
 8000c5a:	e7a7      	b.n	8000bac <FplusClicked+0x78>
 8000c5c:	2400c5f4 	.word	0x2400c5f4
 8000c60:	2400a0c8 	.word	0x2400a0c8
 8000c64:	2400c5fc 	.word	0x2400c5fc
 8000c68:	240090b8 	.word	0x240090b8
 8000c6c:	24008b04 	.word	0x24008b04
 8000c70:	4c3ebc20 	.word	0x4c3ebc20
 8000c74:	24007a2c 	.word	0x24007a2c
 8000c78:	24000cb0 	.word	0x24000cb0
 8000c7c:	240090b4 	.word	0x240090b4
 8000c80:	20004000 	.word	0x20004000
 8000c84:	08013220 	.word	0x08013220
 8000c88:	08014220 	.word	0x08014220
 8000c8c:	24004684 	.word	0x24004684
 8000c90:	2400da02 	.word	0x2400da02
 8000c94:	24008278 	.word	0x24008278
 8000c98:	08015220 	.word	0x08015220
 8000c9c:	08016220 	.word	0x08016220
 8000ca0:	08011220 	.word	0x08011220
 8000ca4:	08012220 	.word	0x08012220
 8000ca8:	2400da00 	.word	0x2400da00

08000cac <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked()
{	
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOfreq -= Fstep;
 8000cae:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <FminusClicked+0x128>)
 8000cb0:	4a49      	ldr	r2, [pc, #292]	; (8000dd8 <FminusClicked+0x12c>)
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000cb6:	4e49      	ldr	r6, [pc, #292]	; (8000ddc <FminusClicked+0x130>)
	LOfreq -= Fstep;
 8000cb8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000cbc:	edd2 7a00 	vldr	s15, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000cc0:	7833      	ldrb	r3, [r6, #0]
	psets[0].bw = bw[CurrentMode];
 8000cc2:	4d47      	ldr	r5, [pc, #284]	; (8000de0 <FminusClicked+0x134>)
	LOfreq -= Fstep;
 8000cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000cc8:	4c46      	ldr	r4, [pc, #280]	; (8000de4 <FminusClicked+0x138>)
	LOfreq  = max(LOfreq, 8000.f);
 8000cca:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000de8 <FminusClicked+0x13c>
	psets[0].bw = bw[CurrentMode];
 8000cce:	5ce9      	ldrb	r1, [r5, r3]
	LOfreq  = max(LOfreq, 8000.f);
 8000cd0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000cd4:	7523      	strb	r3, [r4, #20]
	LOfreq  = max(LOfreq, 8000.f);
 8000cd6:	edc2 7a00 	vstr	s15, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000cda:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8000cde:	7561      	strb	r1, [r4, #21]
	switch(CurrentMode)
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d874      	bhi.n	8000dce <FminusClicked+0x122>
 8000ce4:	e8df f003 	tbb	[pc, r3]
 8000ce8:	02695f55 	.word	0x02695f55
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000cec:	78e8      	ldrb	r0, [r5, #3]
 8000cee:	f7ff fd55 	bl	800079c <SetBW>
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <FminusClicked+0x140>)
 8000cf4:	78d8      	ldrb	r0, [r3, #3]
 8000cf6:	f7ff fdb3 	bl	8000860 <SetAGC>
		break;
 8000cfa:	7d61      	ldrb	r1, [r4, #21]
 8000cfc:	7833      	ldrb	r3, [r6, #0]
	CurrentBW = newbw;
 8000cfe:	4a3c      	ldr	r2, [pc, #240]	; (8000df0 <FminusClicked+0x144>)
 8000d00:	7011      	strb	r1, [r2, #0]
	switch(CurrentMode)
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d80e      	bhi.n	8000d24 <FminusClicked+0x78>
 8000d06:	e8df f003 	tbb	[pc, r3]
 8000d0a:	3b2a      	.short	0x3b2a
 8000d0c:	0213      	.short	0x0213
		CWindex = 0; // TODO toglimi
 8000d0e:	4c39      	ldr	r4, [pc, #228]	; (8000df4 <FminusClicked+0x148>)
 8000d10:	2600      	movs	r6, #0
		bw[CW] = newbw;
 8000d12:	70e9      	strb	r1, [r5, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d18:	4a37      	ldr	r2, [pc, #220]	; (8000df8 <FminusClicked+0x14c>)
 8000d1a:	4938      	ldr	r1, [pc, #224]	; (8000dfc <FminusClicked+0x150>)
 8000d1c:	4838      	ldr	r0, [pc, #224]	; (8000e00 <FminusClicked+0x154>)
		CWindex = 0; // TODO toglimi
 8000d1e:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000d20:	f000 fdfe 	bl	8001920 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000d24:	492f      	ldr	r1, [pc, #188]	; (8000de4 <FminusClicked+0x138>)
 8000d26:	4837      	ldr	r0, [pc, #220]	; (8000e04 <FminusClicked+0x158>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8000d28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000d2c:	f00c bf76 	b.w	800dc1c <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000d30:	1e0f      	subs	r7, r1, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000d32:	4835      	ldr	r0, [pc, #212]	; (8000e08 <FminusClicked+0x15c>)
		USBindex = 0; // TODO toglimi
 8000d34:	4c35      	ldr	r4, [pc, #212]	; (8000e0c <FminusClicked+0x160>)
 8000d36:	f04f 0600 	mov.w	r6, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000d3a:	bf18      	it	ne
 8000d3c:	2701      	movne	r7, #1
		bw[USB] = newbw;
 8000d3e:	70a9      	strb	r1, [r5, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000d40:	8007      	strh	r7, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	4932      	ldr	r1, [pc, #200]	; (8000e10 <FminusClicked+0x164>)
 8000d48:	4832      	ldr	r0, [pc, #200]	; (8000e14 <FminusClicked+0x168>)
		USBindex = 0; // TODO toglimi
 8000d4a:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000d4c:	4a2a      	ldr	r2, [pc, #168]	; (8000df8 <FminusClicked+0x14c>)
 8000d4e:	f000 fde7 	bl	8001920 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000d52:	4924      	ldr	r1, [pc, #144]	; (8000de4 <FminusClicked+0x138>)
 8000d54:	482b      	ldr	r0, [pc, #172]	; (8000e04 <FminusClicked+0x158>)
}
 8000d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000d5a:	f00c bf5f 	b.w	800dc1c <strcpy>
		AMindex = 0; // TODO toglimi
 8000d5e:	4c2a      	ldr	r4, [pc, #168]	; (8000e08 <FminusClicked+0x15c>)
 8000d60:	2600      	movs	r6, #0
		bw[AM] = newbw;
 8000d62:	7029      	strb	r1, [r5, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	492b      	ldr	r1, [pc, #172]	; (8000e18 <FminusClicked+0x16c>)
 8000d6a:	482c      	ldr	r0, [pc, #176]	; (8000e1c <FminusClicked+0x170>)
		AMindex = 0; // TODO toglimi
 8000d6c:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000d6e:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <FminusClicked+0x14c>)
 8000d70:	f000 fdd6 	bl	8001920 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000d74:	491b      	ldr	r1, [pc, #108]	; (8000de4 <FminusClicked+0x138>)
 8000d76:	4823      	ldr	r0, [pc, #140]	; (8000e04 <FminusClicked+0x158>)
}
 8000d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000d7c:	f00c bf4e 	b.w	800dc1c <strcpy>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000d80:	1e0f      	subs	r7, r1, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000d82:	4821      	ldr	r0, [pc, #132]	; (8000e08 <FminusClicked+0x15c>)
		LSBindex = 0; // TODO toglimi
 8000d84:	4c26      	ldr	r4, [pc, #152]	; (8000e20 <FminusClicked+0x174>)
 8000d86:	f04f 0600 	mov.w	r6, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000d8a:	bf18      	it	ne
 8000d8c:	2701      	movne	r7, #1
		bw[LSB] = newbw;
 8000d8e:	7069      	strb	r1, [r5, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000d90:	e7d6      	b.n	8000d40 <FminusClicked+0x94>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000d92:	7828      	ldrb	r0, [r5, #0]
 8000d94:	f7ff fd02 	bl	800079c <SetBW>
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <FminusClicked+0x140>)
 8000d9a:	7818      	ldrb	r0, [r3, #0]
 8000d9c:	f7ff fd60 	bl	8000860 <SetAGC>
		break;
 8000da0:	7d61      	ldrb	r1, [r4, #21]
 8000da2:	7833      	ldrb	r3, [r6, #0]
}	
 8000da4:	e7ab      	b.n	8000cfe <FminusClicked+0x52>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000da6:	7868      	ldrb	r0, [r5, #1]
 8000da8:	f7ff fcf8 	bl	800079c <SetBW>
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <FminusClicked+0x140>)
 8000dae:	7858      	ldrb	r0, [r3, #1]
 8000db0:	f7ff fd56 	bl	8000860 <SetAGC>
		break;
 8000db4:	7d61      	ldrb	r1, [r4, #21]
 8000db6:	7833      	ldrb	r3, [r6, #0]
 8000db8:	e7a1      	b.n	8000cfe <FminusClicked+0x52>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000dba:	78a8      	ldrb	r0, [r5, #2]
 8000dbc:	f7ff fcee 	bl	800079c <SetBW>
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <FminusClicked+0x140>)
 8000dc2:	7898      	ldrb	r0, [r3, #2]
 8000dc4:	f7ff fd4c 	bl	8000860 <SetAGC>
		break;
 8000dc8:	7d61      	ldrb	r1, [r4, #21]
 8000dca:	7833      	ldrb	r3, [r6, #0]
 8000dcc:	e797      	b.n	8000cfe <FminusClicked+0x52>
	CurrentBW = newbw;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <FminusClicked+0x144>)
 8000dd0:	7019      	strb	r1, [r3, #0]
	switch(CurrentMode)
 8000dd2:	e7a7      	b.n	8000d24 <FminusClicked+0x78>
 8000dd4:	2400c5f4 	.word	0x2400c5f4
 8000dd8:	2400a0c8 	.word	0x2400a0c8
 8000ddc:	2400c5fc 	.word	0x2400c5fc
 8000de0:	240090b8 	.word	0x240090b8
 8000de4:	24008b04 	.word	0x24008b04
 8000de8:	45fa0000 	.word	0x45fa0000
 8000dec:	24007a2c 	.word	0x24007a2c
 8000df0:	24000cb0 	.word	0x24000cb0
 8000df4:	240090b4 	.word	0x240090b4
 8000df8:	20004000 	.word	0x20004000
 8000dfc:	08013220 	.word	0x08013220
 8000e00:	08014220 	.word	0x08014220
 8000e04:	24004684 	.word	0x24004684
 8000e08:	2400da02 	.word	0x2400da02
 8000e0c:	24008278 	.word	0x24008278
 8000e10:	08015220 	.word	0x08015220
 8000e14:	08016220 	.word	0x08016220
 8000e18:	08011220 	.word	0x08011220
 8000e1c:	08012220 	.word	0x08012220
 8000e20:	2400da00 	.word	0x2400da00

08000e24 <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000e28:	b510      	push	{r4, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8000e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e2e:	493a      	ldr	r1, [pc, #232]	; (8000f18 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000e30:	483a      	ldr	r0, [pc, #232]	; (8000f1c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000e32:	f000 fe83 	bl	8001b3c <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8000e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e3a:	4939      	ldr	r1, [pc, #228]	; (8000f20 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000e3c:	4839      	ldr	r0, [pc, #228]	; (8000f24 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000e3e:	f000 fe7d 	bl	8001b3c <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8000e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e46:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x100>)
 8000e48:	4934      	ldr	r1, [pc, #208]	; (8000f1c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000e4a:	4838      	ldr	r0, [pc, #224]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x104>)
 8000e4c:	f00b fcf4 	bl	800c838 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8000e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e54:	4a36      	ldr	r2, [pc, #216]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e56:	4933      	ldr	r1, [pc, #204]	; (8000f24 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000e58:	4836      	ldr	r0, [pc, #216]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e5a:	f00b fced 	bl	800c838 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000e5e:	4936      	ldr	r1, [pc, #216]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e60:	f44f 6280 	mov.w	r2, #1024	; 0x400

	// compute the direct FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);

	// if LSB, copy the LSB in the lower half (USB)
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000e64:	4c35      	ldr	r4, [pc, #212]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x114>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000e66:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8000e6a:	f000 fe67 	bl	8001b3c <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 8000e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e72:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e74:	492e      	ldr	r1, [pc, #184]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e76:	482c      	ldr	r0, [pc, #176]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x100>)
 8000e78:	f000 fd52 	bl	8001920 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8000e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e80:	492f      	ldr	r1, [pc, #188]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x118>)
 8000e82:	4830      	ldr	r0, [pc, #192]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e84:	f000 fe5a 	bl	8001b3c <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8000e88:	2301      	movs	r3, #1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	492d      	ldr	r1, [pc, #180]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e8e:	482e      	ldr	r0, [pc, #184]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e90:	f00b fc3c 	bl	800c70c <arm_cfft_f32>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000e94:	7823      	ldrb	r3, [r4, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d038      	beq.n	8000f0c <HAL_GPIO_EXTI_Callback+0xe4>
	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8000e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9e:	4a2b      	ldr	r2, [pc, #172]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x124>)
 8000ea0:	492b      	ldr	r1, [pc, #172]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x128>)
 8000ea2:	4828      	ldr	r0, [pc, #160]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000ea4:	f00b fe84 	bl	800cbb0 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4928      	ldr	r1, [pc, #160]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x124>)
 8000eac:	461a      	mov	r2, r3
 8000eae:	4826      	ldr	r0, [pc, #152]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x120>)
 8000eb0:	f00b fc2c 	bl	800c70c <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 8000eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb8:	4926      	ldr	r1, [pc, #152]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000eba:	4827      	ldr	r0, [pc, #156]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ebc:	f000 fe3e 	bl	8001b3c <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8000ec0:	7823      	ldrb	r3, [r4, #0]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d80d      	bhi.n	8000ee2 <HAL_GPIO_EXTI_Callback+0xba>
 8000ec6:	b9e3      	cbnz	r3, 8000f02 <HAL_GPIO_EXTI_Callback+0xda>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 8000ec8:	4924      	ldr	r1, [pc, #144]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x134>)
 8000eca:	4823      	ldr	r0, [pc, #140]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ecc:	f000 ff8c 	bl	8001de8 <SDR_demodAM_AGC>


	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x138>)
 8000ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed6:	4821      	ldr	r0, [pc, #132]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x134>)
 8000ed8:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8000eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8000ede:	f000 bdc3 	b.w	8001a68 <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d1f4      	bne.n	8000ed0 <HAL_GPIO_EXTI_Callback+0xa8>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8000ee6:	491d      	ldr	r1, [pc, #116]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x134>)
 8000ee8:	481b      	ldr	r0, [pc, #108]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x130>)
 8000eea:	f000 fff9 	bl	8001ee0 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000ef0:	78db      	ldrb	r3, [r3, #3]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1ec      	bne.n	8000ed0 <HAL_GPIO_EXTI_Callback+0xa8>
			SDR_CWPeak(fAudio, BSIZE);
 8000ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efa:	4818      	ldr	r0, [pc, #96]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x134>)
 8000efc:	f000 fee4 	bl	8001cc8 <SDR_CWPeak>
 8000f00:	e7e6      	b.n	8000ed0 <HAL_GPIO_EXTI_Callback+0xa8>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 8000f02:	4916      	ldr	r1, [pc, #88]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x134>)
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f06:	f000 ffeb 	bl	8001ee0 <SDR_demodSSB_CW_AGC>
 8000f0a:	e7e1      	b.n	8000ed0 <HAL_GPIO_EXTI_Callback+0xa8>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f12:	f000 fe2f 	bl	8001b74 <SDR_mirror_LSB>
 8000f16:	e7c0      	b.n	8000e9a <HAL_GPIO_EXTI_Callback+0x72>
 8000f18:	2000d000 	.word	0x2000d000
 8000f1c:	20009000 	.word	0x20009000
 8000f20:	2000b000 	.word	0x2000b000
 8000f24:	20007000 	.word	0x20007000
 8000f28:	20006800 	.word	0x20006800
 8000f2c:	240008a4 	.word	0x240008a4
 8000f30:	20006000 	.word	0x20006000
 8000f34:	24008af8 	.word	0x24008af8
 8000f38:	24001cbc 	.word	0x24001cbc
 8000f3c:	2400c5fc 	.word	0x2400c5fc
 8000f40:	24000cbc 	.word	0x24000cbc
 8000f44:	20002000 	.word	0x20002000
 8000f48:	0801740c 	.word	0x0801740c
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20004000 	.word	0x20004000
 8000f54:	20001000 	.word	0x20001000
 8000f58:	24002dd4 	.word	0x24002dd4
 8000f5c:	2400c600 	.word	0x2400c600
 8000f60:	240046b0 	.word	0x240046b0
 8000f64:	240090b8 	.word	0x240090b8

08000f68 <ADC_Stream0_Handler>:

//-----------------------------------------------------------------------------  
// This the handler of the highest priority task interrupts, those generated
// by DMA2 Stream when a new ADC buffer is just filled
void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8000f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}
#endif


// compute the new NCO buffer, with the CWpitch offset if receiving CW  
if(CurrentMode == CW)
 8000f6c:	4a79      	ldr	r2, [pc, #484]	; (8001154 <ADC_Stream0_Handler+0x1ec>)
	pR = (uint16_t *) &aADCDualConvertedValues[0];
 8000f6e:	4e7a      	ldr	r6, [pc, #488]	; (8001158 <ADC_Stream0_Handler+0x1f0>)
{
 8000f70:	ed2d 8b10 	vpush	{d8-d15}
	pR = (uint16_t *) &aADCDualConvertedValues[0];
 8000f74:	f5a6 6180 	sub.w	r1, r6, #1024	; 0x400
if(CurrentMode == CW)
 8000f78:	7812      	ldrb	r2, [r2, #0]
{
 8000f7a:	b097      	sub	sp, #92	; 0x5c
	pR = (uint16_t *) &aADCDualConvertedValues[0];
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	bf08      	it	eq
 8000f80:	460e      	moveq	r6, r1
if(CurrentMode == CW)
 8000f82:	2a03      	cmp	r2, #3
 8000f84:	f000 83ff 	beq.w	8001786 <ADC_Stream0_Handler+0x81e>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
else
	SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 8000f88:	4b74      	ldr	r3, [pc, #464]	; (800115c <ADC_Stream0_Handler+0x1f4>)
 8000f8a:	ed93 0a00 	vldr	s0, [r3]
 8000f8e:	f000 fc0b 	bl	80017a8 <SDR_ComputeLO>

// compute the smoothed average value of the buffer, to be used as offset
// in the short words to floating point conversion routine  
sum = 0; k = BSIZE;
while(k)
 8000f92:	f206 32fe 	addw	r2, r6, #1022	; 0x3fe
 8000f96:	1eb5      	subs	r5, r6, #2
sum = 0; k = BSIZE;
 8000f98:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8001160 <ADC_Stream0_Handler+0x1f8>
{
	sum += pR[k-1];
 8000f9c:	8811      	ldrh	r1, [r2, #0]
 8000f9e:	3a08      	subs	r2, #8
	sum += pR[k-2];
 8000fa0:	88d3      	ldrh	r3, [r2, #6]
	sum += pR[k-1];
 8000fa2:	b289      	uxth	r1, r1
	sum += pR[k-3];
 8000fa4:	8890      	ldrh	r0, [r2, #4]
	sum += pR[k-2];
 8000fa6:	b29b      	uxth	r3, r3
	sum += pR[k-1];
 8000fa8:	ee07 1a90 	vmov	s15, r1
	sum += pR[k-3];
 8000fac:	b280      	uxth	r0, r0
	sum += pR[k-4];
 8000fae:	8851      	ldrh	r1, [r2, #2]
while(k)
 8000fb0:	4295      	cmp	r5, r2
	sum += pR[k-1];
 8000fb2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	sum += pR[k-2];
 8000fb6:	ee07 3a90 	vmov	s15, r3
	sum += pR[k-4];
 8000fba:	b289      	uxth	r1, r1
	sum += pR[k-2];
 8000fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	sum += pR[k-3];
 8000fc0:	ee07 0a90 	vmov	s15, r0
	sum += pR[k-4];
 8000fc4:	ee06 1a90 	vmov	s13, r1
	sum += pR[k-3];
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sum += pR[k-4];
 8000fcc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000fdc:	ee30 0a27 	vadd.f32	s0, s0, s15
while(k)
 8000fe0:	d1dc      	bne.n	8000f9c <ADC_Stream0_Handler+0x34>
	k-=4;
}

TestSampledValue=pR[BSIZE/2];
 8000fe2:	f8b6 3200 	ldrh.w	r3, [r6, #512]	; 0x200

meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio

// downconvert to zero IF, by multiplication by the exp(-jwt) signal
// generated by the NCO, and at the same time convert to floating point  
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8000fe6:	4630      	mov	r0, r6
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8000fe8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001164 <ADC_Stream0_Handler+0x1fc>
 8000fec:	2400      	movs	r4, #0
TestSampledValue=pR[BSIZE/2];
 8000fee:	b29b      	uxth	r3, r3
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8000ff0:	4d5d      	ldr	r5, [pc, #372]	; (8001168 <ADC_Stream0_Handler+0x200>)
 8000ff2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000ff6:	4e5d      	ldr	r6, [pc, #372]	; (800116c <ADC_Stream0_Handler+0x204>)
TestSampledValue=pR[BSIZE/2];
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	4f5c      	ldr	r7, [pc, #368]	; (8001170 <ADC_Stream0_Handler+0x208>)
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8000ffe:	4a5d      	ldr	r2, [pc, #372]	; (8001174 <ADC_Stream0_Handler+0x20c>)
TestSampledValue=pR[BSIZE/2];
 8001000:	eef8 7a67 	vcvt.f32.u32	s15, s15
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001004:	495c      	ldr	r1, [pc, #368]	; (8001178 <ADC_Stream0_Handler+0x210>)
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001006:	ed85 0a00 	vstr	s0, [r5]
 800100a:	8034      	strh	r4, [r6, #0]
TestSampledValue=pR[BSIZE/2];
 800100c:	edc7 7a00 	vstr	s15, [r7]
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001010:	f000 fcb8 	bl	8001984 <SDR_downconvert_f32>
// passed to the baseband interrupt routine, where it is additionally filtered with a
// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
//-------------------------------------------------------------------------

k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
while(k--)
 8001014:	21ff      	movs	r1, #255	; 0xff
 8001016:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8001200 <ADC_Stream0_Handler+0x298>
 800101a:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 8001204 <ADC_Stream0_Handler+0x29c>
 800101e:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8001022:	8031      	strh	r1, [r6, #0]
 8001024:	460b      	mov	r3, r1
 8001026:	4955      	ldr	r1, [pc, #340]	; (800117c <ADC_Stream0_Handler+0x214>)
 8001028:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 800102c:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8001208 <ADC_Stream0_Handler+0x2a0>
 8001030:	edd1 0a00 	vldr	s1, [r1]
 8001034:	4952      	ldr	r1, [pc, #328]	; (8001180 <ADC_Stream0_Handler+0x218>)
 8001036:	ed98 0a00 	vldr	s0, [r8]
 800103a:	ed91 7a00 	vldr	s14, [r1]
 800103e:	4951      	ldr	r1, [pc, #324]	; (8001184 <ADC_Stream0_Handler+0x21c>)
 8001040:	edde 7a00 	vldr	s15, [lr]
 8001044:	edd1 1a00 	vldr	s3, [r1]
 8001048:	494f      	ldr	r1, [pc, #316]	; (8001188 <ADC_Stream0_Handler+0x220>)
 800104a:	ed9c 1a00 	vldr	s2, [ip]
 800104e:	edd1 aa00 	vldr	s21, [r1]
 8001052:	494e      	ldr	r1, [pc, #312]	; (800118c <ADC_Stream0_Handler+0x224>)
 8001054:	484e      	ldr	r0, [pc, #312]	; (8001190 <ADC_Stream0_Handler+0x228>)
 8001056:	ed91 5a00 	vldr	s10, [r1]
 800105a:	494e      	ldr	r1, [pc, #312]	; (8001194 <ADC_Stream0_Handler+0x22c>)
 800105c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 800120c <ADC_Stream0_Handler+0x2a4>
 8001060:	edd1 9a00 	vldr	s19, [r1]
 8001064:	494c      	ldr	r1, [pc, #304]	; (8001198 <ADC_Stream0_Handler+0x230>)
 8001066:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001210 <ADC_Stream0_Handler+0x2a8>
 800106a:	ed91 aa00 	vldr	s20, [r1]
 800106e:	494b      	ldr	r1, [pc, #300]	; (800119c <ADC_Stream0_Handler+0x234>)
 8001070:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8001214 <ADC_Stream0_Handler+0x2ac>
 8001074:	edd1 5a00 	vldr	s11, [r1]
 8001078:	4949      	ldr	r1, [pc, #292]	; (80011a0 <ADC_Stream0_Handler+0x238>)
 800107a:	4a4a      	ldr	r2, [pc, #296]	; (80011a4 <ADC_Stream0_Handler+0x23c>)
 800107c:	ed91 9a00 	vldr	s18, [r1]
 8001080:	4949      	ldr	r1, [pc, #292]	; (80011a8 <ADC_Stream0_Handler+0x240>)
 8001082:	f502 6400 	add.w	r4, r2, #2048	; 0x800
 8001086:	edd1 da00 	vldr	s27, [r1]
 800108a:	4948      	ldr	r1, [pc, #288]	; (80011ac <ADC_Stream0_Handler+0x244>)
 800108c:	ed91 3a00 	vldr	s6, [r1]
 8001090:	4947      	ldr	r1, [pc, #284]	; (80011b0 <ADC_Stream0_Handler+0x248>)
 8001092:	edd1 ba00 	vldr	s23, [r1]
 8001096:	4947      	ldr	r1, [pc, #284]	; (80011b4 <ADC_Stream0_Handler+0x24c>)
 8001098:	ed91 da00 	vldr	s26, [r1]
 800109c:	4946      	ldr	r1, [pc, #280]	; (80011b8 <ADC_Stream0_Handler+0x250>)
 800109e:	edd1 3a00 	vldr	s7, [r1]
 80010a2:	4946      	ldr	r1, [pc, #280]	; (80011bc <ADC_Stream0_Handler+0x254>)
 80010a4:	ed91 ba00 	vldr	s22, [r1]
 80010a8:	4945      	ldr	r1, [pc, #276]	; (80011c0 <ADC_Stream0_Handler+0x258>)
 80010aa:	edd1 fa00 	vldr	s31, [r1]
 80010ae:	4945      	ldr	r1, [pc, #276]	; (80011c4 <ADC_Stream0_Handler+0x25c>)
 80010b0:	edd1 6a00 	vldr	s13, [r1]
 80010b4:	4944      	ldr	r1, [pc, #272]	; (80011c8 <ADC_Stream0_Handler+0x260>)
 80010b6:	edcd 6a04 	vstr	s13, [sp, #16]
 80010ba:	edd1 ea00 	vldr	s29, [r1]
 80010be:	4943      	ldr	r1, [pc, #268]	; (80011cc <ADC_Stream0_Handler+0x264>)
 80010c0:	ed91 fa00 	vldr	s30, [r1]
 80010c4:	4942      	ldr	r1, [pc, #264]	; (80011d0 <ADC_Stream0_Handler+0x268>)
 80010c6:	edd1 6a00 	vldr	s13, [r1]
 80010ca:	4942      	ldr	r1, [pc, #264]	; (80011d4 <ADC_Stream0_Handler+0x26c>)
 80010cc:	edcd 6a03 	vstr	s13, [sp, #12]
 80010d0:	ed91 ea00 	vldr	s28, [r1]
 80010d4:	4940      	ldr	r1, [pc, #256]	; (80011d8 <ADC_Stream0_Handler+0x270>)
 80010d6:	edd1 6a00 	vldr	s13, [r1]
 80010da:	4940      	ldr	r1, [pc, #256]	; (80011dc <ADC_Stream0_Handler+0x274>)
 80010dc:	edcd 6a02 	vstr	s13, [sp, #8]
 80010e0:	edd1 6a00 	vldr	s13, [r1]
 80010e4:	493e      	ldr	r1, [pc, #248]	; (80011e0 <ADC_Stream0_Handler+0x278>)
 80010e6:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 80010ea:	edd1 6a00 	vldr	s13, [r1]
 80010ee:	493d      	ldr	r1, [pc, #244]	; (80011e4 <ADC_Stream0_Handler+0x27c>)
 80010f0:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 80010f4:	edd1 6a00 	vldr	s13, [r1]
 80010f8:	493b      	ldr	r1, [pc, #236]	; (80011e8 <ADC_Stream0_Handler+0x280>)
 80010fa:	edcd 6a05 	vstr	s13, [sp, #20]
 80010fe:	edd1 6a00 	vldr	s13, [r1]
 8001102:	493a      	ldr	r1, [pc, #232]	; (80011ec <ADC_Stream0_Handler+0x284>)
 8001104:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8001108:	edd1 6a00 	vldr	s13, [r1]
 800110c:	4938      	ldr	r1, [pc, #224]	; (80011f0 <ADC_Stream0_Handler+0x288>)
 800110e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8001112:	edd1 6a00 	vldr	s13, [r1]
 8001116:	4937      	ldr	r1, [pc, #220]	; (80011f4 <ADC_Stream0_Handler+0x28c>)
 8001118:	edcd 6a08 	vstr	s13, [sp, #32]
 800111c:	edd0 6a00 	vldr	s13, [r0]
 8001120:	4835      	ldr	r0, [pc, #212]	; (80011f8 <ADC_Stream0_Handler+0x290>)
 8001122:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001126:	edd0 6a00 	vldr	s13, [r0]
 800112a:	4834      	ldr	r0, [pc, #208]	; (80011fc <ADC_Stream0_Handler+0x294>)
 800112c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8001130:	edd0 6a00 	vldr	s13, [r0]
 8001134:	f9ba 0000 	ldrsh.w	r0, [sl]
 8001138:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 800113c:	eddb 6a00 	vldr	s13, [fp]
 8001140:	4605      	mov	r5, r0
 8001142:	4608      	mov	r0, r1
 8001144:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8001148:	edd9 6a00 	vldr	s13, [r9]
 800114c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8001150:	e165      	b.n	800141e <ADC_Stream0_Handler+0x4b6>
 8001152:	bf00      	nop
 8001154:	2400c5fc 	.word	0x2400c5fc
 8001158:	2400d200 	.word	0x2400d200
 800115c:	2400a0c8 	.word	0x2400a0c8
 8001160:	00000000 	.word	0x00000000
 8001164:	3b000000 	.word	0x3b000000
 8001168:	2400c5e0 	.word	0x2400c5e0
 800116c:	24000610 	.word	0x24000610
 8001170:	2400c5f8 	.word	0x2400c5f8
 8001174:	2400827c 	.word	0x2400827c
 8001178:	24007a6c 	.word	0x24007a6c
 800117c:	240005b0 	.word	0x240005b0
 8001180:	240005b4 	.word	0x240005b4
 8001184:	24000580 	.word	0x24000580
 8001188:	240005c8 	.word	0x240005c8
 800118c:	240005cc 	.word	0x240005cc
 8001190:	2400060c 	.word	0x2400060c
 8001194:	2400058c 	.word	0x2400058c
 8001198:	240005c0 	.word	0x240005c0
 800119c:	240005c4 	.word	0x240005c4
 80011a0:	24000588 	.word	0x24000588
 80011a4:	24007a74 	.word	0x24007a74
 80011a8:	240005d8 	.word	0x240005d8
 80011ac:	240005dc 	.word	0x240005dc
 80011b0:	24000594 	.word	0x24000594
 80011b4:	240005d0 	.word	0x240005d0
 80011b8:	240005d4 	.word	0x240005d4
 80011bc:	24000590 	.word	0x24000590
 80011c0:	240005e8 	.word	0x240005e8
 80011c4:	240005ec 	.word	0x240005ec
 80011c8:	2400059c 	.word	0x2400059c
 80011cc:	240005e0 	.word	0x240005e0
 80011d0:	240005e4 	.word	0x240005e4
 80011d4:	24000598 	.word	0x24000598
 80011d8:	240005f8 	.word	0x240005f8
 80011dc:	240005fc 	.word	0x240005fc
 80011e0:	240005a4 	.word	0x240005a4
 80011e4:	240005f0 	.word	0x240005f0
 80011e8:	240005f4 	.word	0x240005f4
 80011ec:	240005a0 	.word	0x240005a0
 80011f0:	24000608 	.word	0x24000608
 80011f4:	24008284 	.word	0x24008284
 80011f8:	240005ac 	.word	0x240005ac
 80011fc:	24000600 	.word	0x24000600
 8001200:	240005b8 	.word	0x240005b8
 8001204:	240005bc 	.word	0x240005bc
 8001208:	24000584 	.word	0x24000584
 800120c:	24000604 	.word	0x24000604
 8001210:	240005a8 	.word	0x240005a8
 8001214:	2400057c 	.word	0x2400057c
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 2
	// now compute the couple of elements for the next step

	inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001218:	eeaa 5a84 	vfma.f32	s10, s21, s8

	inE2Rold = inER;                           inE2Iold = inEI;
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 800121c:	0799      	lsls	r1, r3, #30
 800121e:	eeea 5a04 	vfma.f32	s11, s20, s8
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001222:	ee79 9aac 	vadd.f32	s19, s19, s25
 8001226:	ee39 9a0c 	vadd.f32	s18, s18, s24
 800122a:	eea9 5aa4 	vfma.f32	s10, s19, s9
 800122e:	eee9 5a24 	vfma.f32	s11, s18, s9
 8001232:	ee75 2a26 	vadd.f32	s5, s10, s13
 8001236:	ee75 7a86 	vadd.f32	s15, s11, s12
	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 800123a:	f100 8118 	bmi.w	800146e <ADC_Stream0_Handler+0x506>
	// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 800123e:	eead 3a84 	vfma.f32	s6, s27, s8
 8001242:	ed9d 7a01 	vldr	s14, [sp, #4]
 8001246:	eeed 3a04 	vfma.f32	s7, s26, s8
 800124a:	eddd 5a00 	vldr	s11, [sp]
 800124e:	ee7b ba87 	vadd.f32	s23, s23, s14

	inE3Rold  = inER;                          inE3Iold  = inEI;
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001252:	075f      	lsls	r7, r3, #29
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001254:	ee3b ba25 	vadd.f32	s22, s22, s11
 8001258:	eeab 3aa4 	vfma.f32	s6, s23, s9
 800125c:	eeeb 3a24 	vfma.f32	s7, s22, s9
 8001260:	ee33 7a22 	vadd.f32	s14, s6, s5
 8001264:	ee33 2aa7 	vadd.f32	s4, s7, s15
	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001268:	f100 8112 	bmi.w	8001490 <ADC_Stream0_Handler+0x528>
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 8
	// now compute the couple of elements for the next step

	inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800126c:	ed9d 9a04 	vldr	s18, [sp, #16]

	inE4Rold = inER;                           inE4Iold = inEI;
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001270:	0719      	lsls	r1, r3, #28
 8001272:	eddd 9a03 	vldr	s19, [sp, #12]
 8001276:	eeaf 9a84 	vfma.f32	s18, s31, s8
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800127a:	ed9d 5a07 	vldr	s10, [sp, #28]
 800127e:	eeef 9a04 	vfma.f32	s19, s30, s8
 8001282:	eddd 3a06 	vldr	s7, [sp, #24]
 8001286:	ee7e ea85 	vadd.f32	s29, s29, s10
 800128a:	ee3e ea23 	vadd.f32	s28, s28, s7
 800128e:	eeae 9aa4 	vfma.f32	s18, s29, s9
 8001292:	eeee 9a24 	vfma.f32	s19, s28, s9
 8001296:	ee37 9a09 	vadd.f32	s18, s14, s18
 800129a:	ee79 9a82 	vadd.f32	s19, s19, s4
	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 800129e:	f100 81a1 	bmi.w	80015e4 <ADC_Stream0_Handler+0x67c>
	// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80012a2:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28

	inE5Rold  = inER;                          inE5Iold  = inEI;
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;

	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80012a6:	f013 0110 	ands.w	r1, r3, #16
 80012aa:	ed9d ea02 	vldr	s28, [sp, #8]
 80012ae:	eddd ba0c 	vldr	s23, [sp, #48]	; 0x30
 80012b2:	eddd ea05 	vldr	s29, [sp, #20]
 80012b6:	eeae ba04 	vfma.f32	s22, s28, s8
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80012ba:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
 80012be:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 80012c2:	eeee ba84 	vfma.f32	s23, s29, s8
 80012c6:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 80012ca:	ee33 5a05 	vadd.f32	s10, s6, s10
 80012ce:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80012d2:	910b      	str	r1, [sp, #44]	; 0x2c
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80012d4:	ee73 5a23 	vadd.f32	s11, s6, s7
 80012d8:	eea5 ba24 	vfma.f32	s22, s10, s9
 80012dc:	eee5 baa4 	vfma.f32	s23, s11, s9
 80012e0:	ee39 ba0b 	vadd.f32	s22, s18, s22
 80012e4:	ee79 baab 	vadd.f32	s23, s19, s23
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80012e8:	f040 81a5 	bne.w	8001636 <ADC_Stream0_Handler+0x6ce>
	// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
	// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
	// a decimation by 16. Now compute the couple of elements for the next step

	inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80012ec:	eddd 3a08 	vldr	s7, [sp, #32]
 80012f0:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 80012f4:	ed9d 3a09 	vldr	s6, [sp, #36]	; 0x24
 80012f8:	eea3 5a84 	vfma.f32	s10, s7, s8
 80012fc:	eddd 3a10 	vldr	s7, [sp, #64]	; 0x40
 8001300:	ed9d ea11 	vldr	s28, [sp, #68]	; 0x44
 8001304:	eee3 3a04 	vfma.f32	s7, s6, s8
 8001308:	ed9d 3a0f 	vldr	s6, [sp, #60]	; 0x3c
	// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
	// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

	// create a block of BSIZE*4 entries, which will be then decimated by 4

	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800130c:	49df      	ldr	r1, [pc, #892]	; (800168c <ADC_Stream0_Handler+0x724>)
 800130e:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8001312:	00a9      	lsls	r1, r5, #2
 8001314:	3501      	adds	r5, #1
 8001316:	9703      	str	r7, [sp, #12]
 8001318:	eef0 5a63 	vmov.f32	s11, s7
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800131c:	eddd 3a14 	vldr	s7, [sp, #80]	; 0x50
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001320:	4fdb      	ldr	r7, [pc, #876]	; (8001690 <ADC_Stream0_Handler+0x728>)
 8001322:	b22d      	sxth	r5, r5
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001324:	ee33 3a83 	vadd.f32	s6, s7, s6
 8001328:	eddd 3a15 	vldr	s7, [sp, #84]	; 0x54
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800132c:	4439      	add	r1, r7
	//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

	if(idx < BSIZE*4)
 800132e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001332:	ee73 3a8e 	vadd.f32	s7, s7, s28
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001336:	9f03      	ldr	r7, [sp, #12]
 8001338:	eea3 5a24 	vfma.f32	s10, s6, s9
 800133c:	eee3 5aa4 	vfma.f32	s11, s7, s9
 8001340:	eddf 3ad4 	vldr	s7, [pc, #848]	; 8001694 <ADC_Stream0_Handler+0x72c>
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001344:	ee35 5a0b 	vadd.f32	s10, s10, s22
 8001348:	ee75 5aab 	vadd.f32	s11, s11, s23
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800134c:	ee25 5a23 	vmul.f32	s10, s10, s7
 8001350:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8001354:	ed87 5a00 	vstr	s10, [r7]
 8001358:	edc1 5a00 	vstr	s11, [r1]
	if(idx < BSIZE*4)
 800135c:	f2c0 81da 	blt.w	8001714 <ADC_Stream0_Handler+0x7ac>

#endif

		// generate now an interrupt to signal the base band processing routine that it has a new buffer

		EXTI->SWIER1 |= GPIO_PIN_14;
 8001360:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001364:	eddd 3a08 	vldr	s7, [sp, #32]
 8001368:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800136c:	eef0 5a4a 	vmov.f32	s11, s20
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001370:	68b9      	ldr	r1, [r7, #8]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001372:	eeb0 aa46 	vmov.f32	s20, s12
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001376:	ed9d 3a02 	vldr	s6, [sp, #8]
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800137a:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800137e:	eef0 3a4d 	vmov.f32	s7, s26
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001382:	ed8d fa03 	vstr	s30, [sp, #12]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001386:	eeb0 da67 	vmov.f32	s26, s15
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800138a:	edcd fa04 	vstr	s31, [sp, #16]
 800138e:	eeb0 fa42 	vmov.f32	s30, s4
 8001392:	eef0 fa47 	vmov.f32	s31, s14
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001396:	ed8d 5a10 	vstr	s10, [sp, #64]	; 0x40
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800139a:	ed8d 3a0a 	vstr	s6, [sp, #40]	; 0x28
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800139e:	eeb0 5a6a 	vmov.f32	s10, s21
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80013a2:	eeb0 3a6d 	vmov.f32	s6, s27
		EXTI->SWIER1 |= GPIO_PIN_14;
 80013a6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80013aa:	eef0 da62 	vmov.f32	s27, s5
	inE6Rold = inER;                           inE6Iold = inEI;
 80013ae:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80013b2:	eef0 aa66 	vmov.f32	s21, s13
	inE6Rold = inER;                           inE6Iold = inEI;
 80013b6:	eddd 2a15 	vldr	s5, [sp, #84]	; 0x54
	inE5Rold  = inER;                          inE5Iold  = inEI;
 80013ba:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
	idx = 0;
 80013be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80013c0:	edcd ea0c 	vstr	s29, [sp, #48]	; 0x30
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80013c4:	edcd ba09 	vstr	s23, [sp, #36]	; 0x24
 80013c8:	ed8d ba08 	vstr	s22, [sp, #32]
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80013cc:	edcd 9a05 	vstr	s19, [sp, #20]
 80013d0:	ed8d 9a02 	vstr	s18, [sp, #8]
		EXTI->SWIER1 |= GPIO_PIN_14;
 80013d4:	60b9      	str	r1, [r7, #8]
	inE6Rold = inER;                           inE6Iold = inEI;
 80013d6:	edcd 2a11 	vstr	s5, [sp, #68]	; 0x44
 80013da:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
	inE5Rold  = inER;                          inE5Iold  = inEI;
 80013de:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
	inE2Rold = inER;                           inE2Iold = inEI;
 80013e2:	eeb0 9a4c 	vmov.f32	s18, s24
	inE5Rold  = inER;                          inE5Iold  = inEI;
 80013e6:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
	inE2Rold = inER;                           inE2Iold = inEI;
 80013ea:	eef0 9a6c 	vmov.f32	s19, s25
	inE4Rold = inER;                           inE4Iold = inEI;
 80013ee:	ed9d ea06 	vldr	s28, [sp, #24]
 80013f2:	eddd ea07 	vldr	s29, [sp, #28]
	inE3Rold  = inER;                          inE3Iold  = inEI;
 80013f6:	ed9d ba00 	vldr	s22, [sp]
 80013fa:	eddd ba01 	vldr	s23, [sp, #4]
	inE5Rold  = inER;                          inE5Iold  = inEI;
 80013fe:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
while(k--)
 8001402:	3208      	adds	r2, #8
 8001404:	3b01      	subs	r3, #1
 8001406:	eef0 7a40 	vmov.f32	s15, s0
 800140a:	3008      	adds	r0, #8
 800140c:	4294      	cmp	r4, r2
 800140e:	eeb0 7a60 	vmov.f32	s14, s1
 8001412:	b29b      	uxth	r3, r3
 8001414:	d059      	beq.n	80014ca <ADC_Stream0_Handler+0x562>
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001416:	eef0 0a48 	vmov.f32	s1, s16
 800141a:	eeb0 0a68 	vmov.f32	s0, s17
 800141e:	ed52 8a01 	vldr	s17, [r2, #-4]
 8001422:	eeb0 2a41 	vmov.f32	s4, s2
 8001426:	ed10 8a01 	vldr	s16, [r0, #-4]
 800142a:	eef0 2a61 	vmov.f32	s5, s3
 800142e:	eef0 6a68 	vmov.f32	s13, s17
 8001432:	ed12 1a02 	vldr	s2, [r2, #-8]
 8001436:	eeb0 6a48 	vmov.f32	s12, s16
 800143a:	ed50 1a02 	vldr	s3, [r0, #-8]
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 800143e:	ee31 2a02 	vadd.f32	s4, s2, s4
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001442:	07df      	lsls	r7, r3, #31
 8001444:	eee0 6a04 	vfma.f32	s13, s0, s8
 8001448:	eea0 6a84 	vfma.f32	s12, s1, s8
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 800144c:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8001450:	eee2 6a24 	vfma.f32	s13, s4, s9
 8001454:	eea2 6aa4 	vfma.f32	s12, s5, s9
 8001458:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800145c:	ee37 6a06 	vadd.f32	s12, s14, s12
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001460:	f57f aeda 	bpl.w	8001218 <ADC_Stream0_Handler+0x2b0>
		tmp1R = outR; tmp1I = outI;  // save the even element produced
 8001464:	eeb0 ca46 	vmov.f32	s24, s12
 8001468:	eef0 ca66 	vmov.f32	s25, s13
 800146c:	e7c9      	b.n	8001402 <ADC_Stream0_Handler+0x49a>
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800146e:	eef0 5a4a 	vmov.f32	s11, s20
		tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001472:	edcd 7a00 	vstr	s15, [sp]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001476:	eeb0 5a6a 	vmov.f32	s10, s21
		tmp2R = outR; tmp2I = outI;  // save the even element produced
 800147a:	edcd 2a01 	vstr	s5, [sp, #4]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800147e:	eeb0 aa46 	vmov.f32	s20, s12
 8001482:	eef0 aa66 	vmov.f32	s21, s13
	inE2Rold = inER;                           inE2Iold = inEI;
 8001486:	eeb0 9a4c 	vmov.f32	s18, s24
 800148a:	eef0 9a6c 	vmov.f32	s19, s25
 800148e:	e7b8      	b.n	8001402 <ADC_Stream0_Handler+0x49a>
 8001490:	eeb0 ba65 	vmov.f32	s22, s11
	inE3Rold  = inER;                          inE3Iold  = inEI;
 8001494:	eddd ba01 	vldr	s23, [sp, #4]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001498:	eef0 3a4d 	vmov.f32	s7, s26
		tmp3R = outR; tmp3I = outI;  // save the even element produced
 800149c:	ed8d 2a06 	vstr	s4, [sp, #24]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80014a0:	eeb0 3a6d 	vmov.f32	s6, s27
		tmp3R = outR; tmp3I = outI;  // save the even element produced
 80014a4:	ed8d 7a07 	vstr	s14, [sp, #28]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80014a8:	eef0 5a4a 	vmov.f32	s11, s20
 80014ac:	eeb0 5a6a 	vmov.f32	s10, s21
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80014b0:	eeb0 da67 	vmov.f32	s26, s15
 80014b4:	eef0 da62 	vmov.f32	s27, s5
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80014b8:	eeb0 aa46 	vmov.f32	s20, s12
 80014bc:	eef0 aa66 	vmov.f32	s21, s13
	inE2Rold = inER;                           inE2Iold = inEI;
 80014c0:	eeb0 9a4c 	vmov.f32	s18, s24
 80014c4:	eef0 9a6c 	vmov.f32	s19, s25
 80014c8:	e79b      	b.n	8001402 <ADC_Stream0_Handler+0x49a>
 80014ca:	4a73      	ldr	r2, [pc, #460]	; (8001698 <ADC_Stream0_Handler+0x730>)
 80014cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d0:	eddd 7a04 	vldr	s15, [sp, #16]
 80014d4:	ed82 8a00 	vstr	s16, [r2]
 80014d8:	4a70      	ldr	r2, [pc, #448]	; (800169c <ADC_Stream0_Handler+0x734>)
 80014da:	edc8 8a00 	vstr	s17, [r8]
 80014de:	edc2 0a00 	vstr	s1, [r2]
 80014e2:	4a6f      	ldr	r2, [pc, #444]	; (80016a0 <ADC_Stream0_Handler+0x738>)
 80014e4:	ed8e 0a00 	vstr	s0, [lr]
 80014e8:	edc2 1a00 	vstr	s3, [r2]
 80014ec:	4a6d      	ldr	r2, [pc, #436]	; (80016a4 <ADC_Stream0_Handler+0x73c>)
 80014ee:	ed8c 1a00 	vstr	s2, [ip]
 80014f2:	edc2 aa00 	vstr	s21, [r2]
 80014f6:	4a6c      	ldr	r2, [pc, #432]	; (80016a8 <ADC_Stream0_Handler+0x740>)
 80014f8:	ed82 5a00 	vstr	s10, [r2]
 80014fc:	4a6b      	ldr	r2, [pc, #428]	; (80016ac <ADC_Stream0_Handler+0x744>)
 80014fe:	edc2 9a00 	vstr	s19, [r2]
 8001502:	4a6b      	ldr	r2, [pc, #428]	; (80016b0 <ADC_Stream0_Handler+0x748>)
 8001504:	ed82 aa00 	vstr	s20, [r2]
 8001508:	4a6a      	ldr	r2, [pc, #424]	; (80016b4 <ADC_Stream0_Handler+0x74c>)
 800150a:	edc2 5a00 	vstr	s11, [r2]
 800150e:	4a6a      	ldr	r2, [pc, #424]	; (80016b8 <ADC_Stream0_Handler+0x750>)
 8001510:	ed82 9a00 	vstr	s18, [r2]
 8001514:	4a69      	ldr	r2, [pc, #420]	; (80016bc <ADC_Stream0_Handler+0x754>)
 8001516:	edc2 da00 	vstr	s27, [r2]
 800151a:	4a69      	ldr	r2, [pc, #420]	; (80016c0 <ADC_Stream0_Handler+0x758>)
 800151c:	ed82 3a00 	vstr	s6, [r2]
 8001520:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <ADC_Stream0_Handler+0x75c>)
 8001522:	edc2 ba00 	vstr	s23, [r2]
 8001526:	4a68      	ldr	r2, [pc, #416]	; (80016c8 <ADC_Stream0_Handler+0x760>)
 8001528:	ed82 da00 	vstr	s26, [r2]
 800152c:	4a67      	ldr	r2, [pc, #412]	; (80016cc <ADC_Stream0_Handler+0x764>)
 800152e:	edc2 3a00 	vstr	s7, [r2]
 8001532:	4a67      	ldr	r2, [pc, #412]	; (80016d0 <ADC_Stream0_Handler+0x768>)
 8001534:	ed82 ba00 	vstr	s22, [r2]
 8001538:	4a66      	ldr	r2, [pc, #408]	; (80016d4 <ADC_Stream0_Handler+0x76c>)
 800153a:	edc2 fa00 	vstr	s31, [r2]
 800153e:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <ADC_Stream0_Handler+0x770>)
 8001540:	edc2 7a00 	vstr	s15, [r2]
 8001544:	4a65      	ldr	r2, [pc, #404]	; (80016dc <ADC_Stream0_Handler+0x774>)
 8001546:	eddd 7a03 	vldr	s15, [sp, #12]
 800154a:	edc2 ea00 	vstr	s29, [r2]
 800154e:	4a64      	ldr	r2, [pc, #400]	; (80016e0 <ADC_Stream0_Handler+0x778>)
 8001550:	ed82 fa00 	vstr	s30, [r2]
 8001554:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <ADC_Stream0_Handler+0x77c>)
 8001556:	edc2 7a00 	vstr	s15, [r2]
 800155a:	4a63      	ldr	r2, [pc, #396]	; (80016e8 <ADC_Stream0_Handler+0x780>)
 800155c:	eddd 7a02 	vldr	s15, [sp, #8]
 8001560:	ed82 ea00 	vstr	s28, [r2]
 8001564:	4a61      	ldr	r2, [pc, #388]	; (80016ec <ADC_Stream0_Handler+0x784>)
 8001566:	edc2 7a00 	vstr	s15, [r2]
 800156a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800156e:	4a60      	ldr	r2, [pc, #384]	; (80016f0 <ADC_Stream0_Handler+0x788>)
 8001570:	edc2 7a00 	vstr	s15, [r2]
 8001574:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8001578:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <ADC_Stream0_Handler+0x78c>)
 800157a:	edc2 7a00 	vstr	s15, [r2]
 800157e:	eddd 7a05 	vldr	s15, [sp, #20]
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <ADC_Stream0_Handler+0x790>)
 8001584:	f8aa 5000 	strh.w	r5, [sl]
 8001588:	edc2 7a00 	vstr	s15, [r2]
 800158c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001590:	4a5a      	ldr	r2, [pc, #360]	; (80016fc <ADC_Stream0_Handler+0x794>)
 8001592:	8033      	strh	r3, [r6, #0]
 8001594:	edc2 7a00 	vstr	s15, [r2]
 8001598:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800159c:	4a58      	ldr	r2, [pc, #352]	; (8001700 <ADC_Stream0_Handler+0x798>)
 800159e:	edc2 7a00 	vstr	s15, [r2]
 80015a2:	eddd 7a08 	vldr	s15, [sp, #32]
 80015a6:	4a57      	ldr	r2, [pc, #348]	; (8001704 <ADC_Stream0_Handler+0x79c>)
 80015a8:	edc2 7a00 	vstr	s15, [r2]
 80015ac:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80015b0:	4a55      	ldr	r2, [pc, #340]	; (8001708 <ADC_Stream0_Handler+0x7a0>)
 80015b2:	edc2 7a00 	vstr	s15, [r2]
 80015b6:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80015ba:	4a54      	ldr	r2, [pc, #336]	; (800170c <ADC_Stream0_Handler+0x7a4>)
 80015bc:	edc2 7a00 	vstr	s15, [r2]
 80015c0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <ADC_Stream0_Handler+0x7a8>)
 80015c6:	edc2 7a00 	vstr	s15, [r2]
 80015ca:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80015ce:	edcb 7a00 	vstr	s15, [fp]
 80015d2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80015d6:	edc9 7a00 	vstr	s15, [r9]
	}

	// LED_YELLOW_OFF;

}
 80015da:	b017      	add	sp, #92	; 0x5c
 80015dc:	ecbd 8b10 	vpop	{d8-d15}
 80015e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015e4:	eeb0 ea63 	vmov.f32	s28, s7
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80015e8:	ed8d fa03 	vstr	s30, [sp, #12]
 80015ec:	eef0 ea45 	vmov.f32	s29, s10
 80015f0:	edcd fa04 	vstr	s31, [sp, #16]
 80015f4:	eeb0 ba65 	vmov.f32	s22, s11
		tmp4R = outR; tmp4I = outI;  // save the even element produced
 80015f8:	edcd 9a12 	vstr	s19, [sp, #72]	; 0x48
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80015fc:	eef0 3a4d 	vmov.f32	s7, s26
		tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001600:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001604:	eeb0 3a6d 	vmov.f32	s6, s27
	inE3Rold  = inER;                          inE3Iold  = inEI;
 8001608:	eddd ba01 	vldr	s23, [sp, #4]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800160c:	eef0 5a4a 	vmov.f32	s11, s20
 8001610:	eeb0 5a6a 	vmov.f32	s10, s21
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001614:	eeb0 fa42 	vmov.f32	s30, s4
 8001618:	eef0 fa47 	vmov.f32	s31, s14
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800161c:	eeb0 da67 	vmov.f32	s26, s15
 8001620:	eef0 da62 	vmov.f32	s27, s5
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001624:	eeb0 aa46 	vmov.f32	s20, s12
 8001628:	eef0 aa66 	vmov.f32	s21, s13
	inE2Rold = inER;                           inE2Iold = inEI;
 800162c:	eeb0 9a4c 	vmov.f32	s18, s24
 8001630:	eef0 9a6c 	vmov.f32	s19, s25
 8001634:	e6e5      	b.n	8001402 <ADC_Stream0_Handler+0x49a>
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001636:	eddd 5a02 	vldr	s11, [sp, #8]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800163a:	eef0 3a4d 	vmov.f32	s7, s26
 800163e:	eeb0 3a6d 	vmov.f32	s6, s27
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001642:	ed8d fa03 	vstr	s30, [sp, #12]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001646:	eeb0 5a6a 	vmov.f32	s10, s21
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800164a:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800164e:	edcd fa04 	vstr	s31, [sp, #16]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001652:	eef0 5a4a 	vmov.f32	s11, s20
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001656:	eeb0 fa42 	vmov.f32	s30, s4
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800165a:	edcd ea0c 	vstr	s29, [sp, #48]	; 0x30
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800165e:	eef0 fa47 	vmov.f32	s31, s14
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001662:	edcd 9a05 	vstr	s19, [sp, #20]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001666:	eeb0 da67 	vmov.f32	s26, s15
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800166a:	ed8d 9a02 	vstr	s18, [sp, #8]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800166e:	eef0 da62 	vmov.f32	s27, s5
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001672:	edcd ba15 	vstr	s23, [sp, #84]	; 0x54
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001676:	eeb0 aa46 	vmov.f32	s20, s12
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 800167a:	ed8d ba14 	vstr	s22, [sp, #80]	; 0x50
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800167e:	eef0 aa66 	vmov.f32	s21, s13
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001682:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8001686:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 800168a:	e6aa      	b.n	80013e2 <ADC_Stream0_Handler+0x47a>
 800168c:	2000d000 	.word	0x2000d000
 8001690:	2000b000 	.word	0x2000b000
 8001694:	34000000 	.word	0x34000000
 8001698:	240005b0 	.word	0x240005b0
 800169c:	240005b4 	.word	0x240005b4
 80016a0:	24000580 	.word	0x24000580
 80016a4:	240005c8 	.word	0x240005c8
 80016a8:	240005cc 	.word	0x240005cc
 80016ac:	2400058c 	.word	0x2400058c
 80016b0:	240005c0 	.word	0x240005c0
 80016b4:	240005c4 	.word	0x240005c4
 80016b8:	24000588 	.word	0x24000588
 80016bc:	240005d8 	.word	0x240005d8
 80016c0:	240005dc 	.word	0x240005dc
 80016c4:	24000594 	.word	0x24000594
 80016c8:	240005d0 	.word	0x240005d0
 80016cc:	240005d4 	.word	0x240005d4
 80016d0:	24000590 	.word	0x24000590
 80016d4:	240005e8 	.word	0x240005e8
 80016d8:	240005ec 	.word	0x240005ec
 80016dc:	2400059c 	.word	0x2400059c
 80016e0:	240005e0 	.word	0x240005e0
 80016e4:	240005e4 	.word	0x240005e4
 80016e8:	24000598 	.word	0x24000598
 80016ec:	240005f8 	.word	0x240005f8
 80016f0:	240005fc 	.word	0x240005fc
 80016f4:	240005a4 	.word	0x240005a4
 80016f8:	240005f0 	.word	0x240005f0
 80016fc:	240005f4 	.word	0x240005f4
 8001700:	240005a0 	.word	0x240005a0
 8001704:	24000608 	.word	0x24000608
 8001708:	2400060c 	.word	0x2400060c
 800170c:	240005ac 	.word	0x240005ac
 8001710:	24000600 	.word	0x24000600
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001714:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001718:	eef0 3a4d 	vmov.f32	s7, s26
 800171c:	eeb0 da67 	vmov.f32	s26, s15
	inE6Rold = inER;                           inE6Iold = inEI;
 8001720:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001724:	edcd 5a10 	vstr	s11, [sp, #64]	; 0x40
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001728:	eeb0 3a6d 	vmov.f32	s6, s27
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800172c:	eddd 5a08 	vldr	s11, [sp, #32]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001730:	eeb0 5a6a 	vmov.f32	s10, s21
	inE6Rold = inER;                           inE6Iold = inEI;
 8001734:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001738:	eef0 da62 	vmov.f32	s27, s5
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800173c:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001740:	eef0 aa66 	vmov.f32	s21, s13
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001744:	eddd 5a05 	vldr	s11, [sp, #20]
	inE6Rold = inER;                           inE6Iold = inEI;
 8001748:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800174c:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
 8001750:	eddd 5a02 	vldr	s11, [sp, #8]
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001754:	ed8d fa03 	vstr	s30, [sp, #12]
 8001758:	eeb0 fa42 	vmov.f32	s30, s4
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800175c:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001760:	eef0 5a4a 	vmov.f32	s11, s20
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001764:	edcd fa04 	vstr	s31, [sp, #16]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001768:	eeb0 aa46 	vmov.f32	s20, s12
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800176c:	eef0 fa47 	vmov.f32	s31, s14
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001770:	edcd ba09 	vstr	s23, [sp, #36]	; 0x24
 8001774:	ed8d ba08 	vstr	s22, [sp, #32]
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001778:	edcd 9a05 	vstr	s19, [sp, #20]
 800177c:	ed8d 9a02 	vstr	s18, [sp, #8]
	inE6Rold = inER;                           inE6Iold = inEI;
 8001780:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8001784:	e77d      	b.n	8001682 <ADC_Stream0_Handler+0x71a>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <ADC_Stream0_Handler+0x838>)
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <ADC_Stream0_Handler+0x83c>)
 800178a:	ed92 0a00 	vldr	s0, [r2]
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001796:	f000 f807 	bl	80017a8 <SDR_ComputeLO>
 800179a:	f7ff bbfa 	b.w	8000f92 <ADC_Stream0_Handler+0x2a>
 800179e:	bf00      	nop
 80017a0:	2400a0c8 	.word	0x2400a0c8
 80017a4:	2400a0c0 	.word	0x2400a0c0

080017a8 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 80017a8:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 80017aa:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <SDR_ComputeLO+0x140>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eef4 7a40 	vcmp.f32	s15, s0
{
 80017b4:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	d171      	bne.n	80018a2 <SDR_ComputeLO+0xfa>
 80017be:	4a4b      	ldr	r2, [pc, #300]	; (80018ec <SDR_ComputeLO+0x144>)
 80017c0:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <SDR_ComputeLO+0x148>)
 80017c2:	ed92 8a00 	vldr	s16, [r2]
 80017c6:	ed93 6a00 	vldr	s12, [r3]
 80017ca:	4d4a      	ldr	r5, [pc, #296]	; (80018f4 <SDR_ComputeLO+0x14c>)
 80017cc:	4c4a      	ldr	r4, [pc, #296]	; (80018f8 <SDR_ComputeLO+0x150>)
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80017ce:	484b      	ldr	r0, [pc, #300]	; (80018fc <SDR_ComputeLO+0x154>)
 80017d0:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <SDR_ComputeLO+0x158>)
 80017d2:	ed95 5a00 	vldr	s10, [r5]
 80017d6:	edd4 7a00 	vldr	s15, [r4]
 80017da:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 80017de:	edd0 5a00 	vldr	s11, [r0]
 80017e2:	4a48      	ldr	r2, [pc, #288]	; (8001904 <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80017e4:	ee27 7a88 	vmul.f32	s14, s15, s16
 80017e8:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80017ea:	ee66 7a67 	vnmul.f32	s15, s12, s15
 80017ee:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80017f0:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80017f4:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80017f8:	ee25 7a87 	vmul.f32	s14, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80017fc:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001800:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001804:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001808:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800180c:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001810:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001814:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001818:	ee65 7aa7 	vmul.f32	s15, s11, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800181c:	ee25 7a87 	vmul.f32	s14, s11, s14
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001820:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001824:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001828:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800182c:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001830:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001834:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001838:	ee25 7aa6 	vmul.f32	s14, s11, s13
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800183c:	ee65 7aa7 	vmul.f32	s15, s11, s15
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001840:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001844:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001848:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800184c:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001850:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001854:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001858:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800185c:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001860:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 8001864:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001866:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 800186a:	d1bb      	bne.n	80017e4 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 800186c:	ee67 5a07 	vmul.f32	s11, s14, s14
 8001870:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8001908 <SDR_ComputeLO+0x160>
 8001874:	edc4 7a00 	vstr	s15, [r4]
 8001878:	eddf 4a24 	vldr	s9, [pc, #144]	; 800190c <SDR_ComputeLO+0x164>
 800187c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8001880:	4a23      	ldr	r2, [pc, #140]	; (8001910 <SDR_ComputeLO+0x168>)
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <SDR_ComputeLO+0x16c>)
 8001884:	ed85 5a00 	vstr	s10, [r5]
 8001888:	edc2 6a00 	vstr	s13, [r2]
 800188c:	ed83 7a00 	vstr	s14, [r3]
 8001890:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 8001894:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001898:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800189c:	edc0 7a00 	vstr	s15, [r0]
}	
 80018a0:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 80018a2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001918 <SDR_ComputeLO+0x170>
 80018a6:	4a1d      	ldr	r2, [pc, #116]	; (800191c <SDR_ComputeLO+0x174>)
 80018a8:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 80018ac:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 80018b0:	ed92 7a00 	vldr	s14, [r2]
 80018b4:	ee87 9a87 	vdiv.f32	s18, s15, s14
 80018b8:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 80018bc:	eeb0 0b49 	vmov.f64	d0, d9
 80018c0:	f00e fcaa 	bl	8010218 <cos>
 80018c4:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 80018ca:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 80018ce:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 80018d2:	f00e fce9 	bl	80102a8 <sin>
 80018d6:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SDR_ComputeLO+0x148>)
 80018dc:	eeb1 6a46 	vneg.f32	s12, s12
 80018e0:	ed83 6a00 	vstr	s12, [r3]
 80018e4:	e771      	b.n	80017ca <SDR_ComputeLO+0x22>
 80018e6:	bf00      	nop
 80018e8:	240000e4 	.word	0x240000e4
 80018ec:	24000614 	.word	0x24000614
 80018f0:	24000624 	.word	0x24000624
 80018f4:	240000f0 	.word	0x240000f0
 80018f8:	2400063c 	.word	0x2400063c
 80018fc:	240000e0 	.word	0x240000e0
 8001900:	24003e14 	.word	0x24003e14
 8001904:	240047c4 	.word	0x240047c4
 8001908:	46000200 	.word	0x46000200
 800190c:	39000000 	.word	0x39000000
 8001910:	24000640 	.word	0x24000640
 8001914:	24000644 	.word	0x24000644
 8001918:	40c90fdb 	.word	0x40c90fdb
 800191c:	240046ac 	.word	0x240046ac

08001920 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	d02e      	beq.n	8001982 <SDR_2R_toC_f32+0x62>
 8001924:	3010      	adds	r0, #16
 8001926:	3110      	adds	r1, #16
 8001928:	3220      	adds	r2, #32
{
 800192a:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800192c:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001930:	3b01      	subs	r3, #1
 8001932:	f100 0010 	add.w	r0, r0, #16
 8001936:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800193a:	f842 4c20 	str.w	r4, [r2, #-32]
 800193e:	f102 0220 	add.w	r2, r2, #32
 8001942:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8001946:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800194a:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 800194e:	f842 4c38 	str.w	r4, [r2, #-56]
 8001952:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8001956:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800195a:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800195e:	f842 4c30 	str.w	r4, [r2, #-48]
 8001962:	f851 4c18 	ldr.w	r4, [r1, #-24]
 8001966:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800196a:	f850 4c14 	ldr.w	r4, [r0, #-20]
 800196e:	f842 4c28 	str.w	r4, [r2, #-40]
 8001972:	f851 4c14 	ldr.w	r4, [r1, #-20]
 8001976:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 800197a:	d1d7      	bne.n	800192c <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 800197c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	4770      	bx	lr

08001984 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <SDR_downconvert_f32+0xd8>)
 8001986:	3008      	adds	r0, #8
 8001988:	3110      	adds	r1, #16
 800198a:	3210      	adds	r2, #16
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 800198c:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001a60 <SDR_downconvert_f32+0xdc>
{
 8001990:	b430      	push	{r4, r5}
 8001992:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 8001996:	4c33      	ldr	r4, [pc, #204]	; (8001a64 <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001998:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 800199c:	3310      	adds	r3, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800199e:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 80019a2:	3008      	adds	r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 80019a4:	ee06 ca10 	vmov	s12, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 80019a8:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 80019ac:	3110      	adds	r1, #16
 80019ae:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 80019b0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 80019b4:	ee06 ca90 	vmov	s13, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 80019b8:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 80019bc:	3210      	adds	r2, #16
    tmp2=((*(pt+1)-offset)) / 2048.f;
 80019be:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    tmp1=((*(pt)  -offset)) / 2048.f;
 80019c2:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 80019c6:	ee07 ca90 	vmov	s15, ip
	tmp3=((*(pt+2)-offset)) / 2048.f;
 80019ca:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 80019ce:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 80019d2:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 80019d6:	ee07 ca10 	vmov	s14, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 80019da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 80019de:	ee66 6aa5 	vmul.f32	s13, s13, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80019e2:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 80019e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 80019ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80019ee:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 80019f2:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 80019f6:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 80019fa:	ee67 7aa5 	vmul.f32	s15, s15, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80019fe:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001a02:	ee27 7a25 	vmul.f32	s14, s14, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001a06:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001a0a:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001a0e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001a12:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001a16:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001a1a:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001a1e:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001a22:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001a26:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001a2a:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001a2e:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001a32:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001a36:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001a3a:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 8001a3e:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001a48:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a50:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001a54:	d1a0      	bne.n	8001998 <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001a56:	bc30      	pop	{r4, r5}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	24003e14 	.word	0x24003e14
 8001a60:	3a000000 	.word	0x3a000000
 8001a64:	240047c4 	.word	0x240047c4

08001a68 <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 8001a68:	b430      	push	{r4, r5}
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001a6a:	0895      	lsrs	r5, r2, #2
  while(blkCnt--)
 8001a6c:	2d00      	cmp	r5, #0
 8001a6e:	d05b      	beq.n	8001b28 <SDR_float_to_DAC_audio+0xc0>
 8001a70:	1e6c      	subs	r4, r5, #1
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001a72:	4d30      	ldr	r5, [pc, #192]	; (8001b34 <SDR_float_to_DAC_audio+0xcc>)
 8001a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a78:	b2a3      	uxth	r3, r4
 8001a7a:	f100 0420 	add.w	r4, r0, #32
 8001a7e:	edd5 7a00 	vldr	s15, [r5]
 8001a82:	3010      	adds	r0, #16
 8001a84:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8001a88:	f101 0308 	add.w	r3, r1, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001a8c:	eef0 4a47 	vmov.f32	s9, s14
 8001a90:	ed50 5a03 	vldr	s11, [r0, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001a94:	ed10 6a02 	vldr	s12, [r0, #-8]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001a98:	eeb0 5a47 	vmov.f32	s10, s14
 8001a9c:	ed50 6a04 	vldr	s13, [r0, #-16]
 8001aa0:	3010      	adds	r0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001aa2:	eee7 4aa5 	vfma.f32	s9, s15, s11
 8001aa6:	3308      	adds	r3, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001aa8:	eea6 5aa7 	vfma.f32	s10, s13, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001aac:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
  while(blkCnt--)
 8001ab0:	4284      	cmp	r4, r0
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ab2:	eef0 5a64 	vmov.f32	s11, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ab6:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001aba:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001abe:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ac2:	eee7 4a86 	vfma.f32	s9, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ac6:	ee15 5a10 	vmov	r5, s10
 8001aca:	f823 5c10 	strh.w	r5, [r3, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ace:	ee15 5a90 	vmov	r5, s11
 8001ad2:	f823 5c0e 	strh.w	r5, [r3, #-14]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ad6:	eeb0 6a64 	vmov.f32	s12, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ada:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ade:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ae2:	eee7 4aa6 	vfma.f32	s9, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ae6:	ee16 5a10 	vmov	r5, s12
 8001aea:	f823 5c0c 	strh.w	r5, [r3, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001aee:	eef0 6a64 	vmov.f32	s13, s9
 8001af2:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
 8001af6:	ee16 5a90 	vmov	r5, s13
 8001afa:	f823 5c0a 	strh.w	r5, [r3, #-10]
  while(blkCnt--)
 8001afe:	d1c5      	bne.n	8001a8c <SDR_float_to_DAC_audio+0x24>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001b00:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001b02:	f001 021f 	and.w	r2, r1, #31
 8001b06:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b08:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001b0c:	480a      	ldr	r0, [pc, #40]	; (8001b38 <SDR_float_to_DAC_audio+0xd0>)
 8001b0e:	440a      	add	r2, r1
 8001b10:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001b14:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001b16:	1a53      	subs	r3, r2, r1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	dcf9      	bgt.n	8001b10 <SDR_float_to_DAC_audio+0xa8>
 8001b1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b20:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001b24:	bc30      	pop	{r4, r5}
 8001b26:	4770      	bx	lr
    if ( dsize > 0 ) { 
 8001b28:	0093      	lsls	r3, r2, #2
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	d1e9      	bne.n	8001b02 <SDR_float_to_DAC_audio+0x9a>
 8001b2e:	bc30      	pop	{r4, r5}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	24004604 	.word	0x24004604
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001b3c:	0892      	lsrs	r2, r2, #2
 8001b3e:	d017      	beq.n	8001b70 <SDR_memcpy_f32+0x34>
 8001b40:	3110      	adds	r1, #16
 8001b42:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001b44:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	f101 0110 	add.w	r1, r1, #16
 8001b4e:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001b52:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8001b56:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8001b5a:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8001b5e:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8001b62:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8001b66:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8001b6a:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8001b6e:	d1e9      	bne.n	8001b44 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8001b74:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001b76:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8001b7a:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001b7c:	440b      	add	r3, r1
	while(blkCnt--)
 8001b7e:	d037      	beq.n	8001bf0 <SDR_mirror_LSB+0x7c>
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	1e91      	subs	r1, r2, #2
{
 8001b84:	b410      	push	{r4}
 8001b86:	f1a3 0220 	sub.w	r2, r3, #32
 8001b8a:	f1a3 041c 	sub.w	r4, r3, #28
 8001b8e:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001b92:	4402      	add	r2, r0
 8001b94:	4420      	add	r0, r4
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001b96:	6a14      	ldr	r4, [r2, #32]
	while(blkCnt--)
 8001b98:	3901      	subs	r1, #1
 8001b9a:	3a20      	subs	r2, #32
 8001b9c:	3820      	subs	r0, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001b9e:	f843 4c20 	str.w	r4, [r3, #-32]
 8001ba2:	3320      	adds	r3, #32
 8001ba4:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8001ba8:	eef1 7a67 	vneg.f32	s15, s15
 8001bac:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001bb0:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8001bb2:	f843 4c38 	str.w	r4, [r3, #-56]
 8001bb6:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8001bba:	eef1 7a67 	vneg.f32	s15, s15
 8001bbe:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001bc2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8001bc4:	f843 4c30 	str.w	r4, [r3, #-48]
 8001bc8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8001bcc:	eef1 7a67 	vneg.f32	s15, s15
 8001bd0:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001bd4:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8001bd6:	f843 4c28 	str.w	r4, [r3, #-40]
	while(blkCnt--)
 8001bda:	1c4c      	adds	r4, r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001bdc:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001be0:	eef1 7a67 	vneg.f32	s15, s15
 8001be4:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8001be8:	d1d5      	bne.n	8001b96 <SDR_mirror_LSB+0x22>
	}
}
 8001bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop

08001bf4 <SDR_compute_IIR_parms>:
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 8001bf4:	b508      	push	{r3, lr}

   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <SDR_compute_IIR_parms+0xb0>)
 8001bf8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001ca8 <SDR_compute_IIR_parms+0xb4>
 8001bfc:	edd3 7a00 	vldr	s15, [r3]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001c00:	4a2a      	ldr	r2, [pc, #168]	; (8001cac <SDR_compute_IIR_parms+0xb8>)
   wr = 2.f * cwpitch / rate * myPI;
 8001c02:	ee67 7a87 	vmul.f32	s15, s15, s14
   r = Qfactor;
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <SDR_compute_IIR_parms+0xbc>)
   wr = 2.f * cwpitch / rate * myPI;
 8001c08:	ed92 7a00 	vldr	s14, [r2]
 8001c0c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001cb4 <SDR_compute_IIR_parms+0xc0>
{
 8001c10:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 8001c14:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 8001c18:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001c1c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8001c20:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001c24:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8001c28:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001c2c:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8001c30:	ee68 8a80 	vmul.f32	s17, s17, s0
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001c34:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8001c38:	f00e faee 	bl	8010218 <cos>
 8001c3c:	ee8a 5a09 	vdiv.f32	s10, s20, s18
   a1 = -2.f * r * cosw0;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 8001c42:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <SDR_compute_IIR_parms+0xc8>)
 8001c44:	edc2 aa00 	vstr	s21, [r2]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001c48:	eeb0 6b40 	vmov.f64	d6, d0
   a1 = -2.f * r * cosw0;
 8001c4c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001c50:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8001c54:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8001c58:	ee69 7aa7 	vmul.f32	s15, s19, s15
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001c5c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001c60:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8001c64:	ee25 6b06 	vmul.f64	d6, d5, d6
 8001c68:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8001c6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c70:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001c74:	f00e fad0 	bl	8010218 <cos>
 8001c78:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8001c7c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001cc0 <SDR_compute_IIR_parms+0xcc>
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <SDR_compute_IIR_parms+0xd0>)
 8001c82:	ee28 7a07 	vmul.f32	s14, s16, s14
 8001c86:	eeaa 6b40 	vfms.f64	d6, d10, d0
 8001c8a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8001c8e:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001c92:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8001c96:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001c9a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001c9e:	ed83 7a00 	vstr	s14, [r3]
}
 8001ca2:	bd08      	pop	{r3, pc}
 8001ca4:	2400a0c0 	.word	0x2400a0c0
 8001ca8:	44000000 	.word	0x44000000
 8001cac:	240046ac 	.word	0x240046ac
 8001cb0:	240090b0 	.word	0x240090b0
 8001cb4:	40490fdb 	.word	0x40490fdb
 8001cb8:	24004608 	.word	0x24004608
 8001cbc:	240090ac 	.word	0x240090ac
 8001cc0:	3f99999a 	.word	0x3f99999a
 8001cc4:	2400c5e8 	.word	0x2400c5e8

08001cc8 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8001cc8:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 8001cca:	2900      	cmp	r1, #0
 8001ccc:	d07c      	beq.n	8001dc8 <SDR_CWPeak+0x100>
 8001cce:	1e4b      	subs	r3, r1, #1
 8001cd0:	f8df c110 	ldr.w	ip, [pc, #272]	; 8001de4 <SDR_CWPeak+0x11c>
 8001cd4:	493d      	ldr	r1, [pc, #244]	; (8001dcc <SDR_CWPeak+0x104>)
 8001cd6:	3010      	adds	r0, #16
 8001cd8:	4a3d      	ldr	r2, [pc, #244]	; (8001dd0 <SDR_CWPeak+0x108>)
 8001cda:	eddc 2a00 	vldr	s5, [ip]
 8001cde:	edd1 6a00 	vldr	s13, [r1]
 8001ce2:	ed92 5a00 	vldr	s10, [r2]
{
 8001ce6:	b4f0      	push	{r4, r5, r6, r7}
 8001ce8:	4c3a      	ldr	r4, [pc, #232]	; (8001dd4 <SDR_CWPeak+0x10c>)
 8001cea:	4f3b      	ldr	r7, [pc, #236]	; (8001dd8 <SDR_CWPeak+0x110>)
 8001cec:	edd4 4a00 	vldr	s9, [r4]
 8001cf0:	4e3a      	ldr	r6, [pc, #232]	; (8001ddc <SDR_CWPeak+0x114>)
 8001cf2:	4d3b      	ldr	r5, [pc, #236]	; (8001de0 <SDR_CWPeak+0x118>)
 8001cf4:	eeb1 2a64 	vneg.f32	s4, s9
 8001cf8:	edd7 7a00 	vldr	s15, [r7]
 8001cfc:	edd6 5a00 	vldr	s11, [r6]
 8001d00:	ed95 7a00 	vldr	s14, [r5]
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d04:	ee66 3ae7 	vnmul.f32	s7, s13, s15
 8001d08:	ed50 7a04 	vldr	s15, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001d0c:	ee26 4ac7 	vnmul.f32	s8, s13, s14
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d10:	ed10 6a03 	vldr	s12, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d14:	ed10 7a02 	vldr	s14, [r0, #-8]
	 while(blkCnt--)
 8001d18:	3b01      	subs	r3, #1
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d1a:	eee2 3a22 	vfma.f32	s7, s4, s5
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d1e:	ed10 3a01 	vldr	s6, [r0, #-4]
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001d22:	eea2 4a25 	vfma.f32	s8, s4, s11
	 while(blkCnt--)
 8001d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2a:	f100 0010 	add.w	r0, r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d2e:	eee7 3a85 	vfma.f32	s7, s15, s10
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001d32:	eea3 4a85 	vfma.f32	s8, s7, s10
	   *buf++ = y0;
 8001d36:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d3a:	ed92 5a00 	vldr	s10, [r2]
 8001d3e:	edd1 6a00 	vldr	s13, [r1]
 8001d42:	ee25 6a06 	vmul.f32	s12, s10, s12
 8001d46:	edd4 4a00 	vldr	s9, [r4]
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d4a:	ee65 7a07 	vmul.f32	s15, s10, s14
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d4e:	ee25 3a03 	vmul.f32	s6, s10, s6
 8001d52:	eeb0 7a46 	vmov.f32	s14, s12
 8001d56:	eee6 7ae3 	vfms.f32	s15, s13, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d5a:	eeb1 2a64 	vneg.f32	s4, s9
 8001d5e:	eea6 7ae2 	vfms.f32	s14, s13, s5
 8001d62:	eea4 7ae3 	vfms.f32	s14, s9, s7
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001d66:	eef0 3a43 	vmov.f32	s7, s6
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d6a:	eee4 7ac7 	vfms.f32	s15, s9, s14
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001d6e:	ee25 6a07 	vmul.f32	s12, s10, s14
 8001d72:	eee6 3ac7 	vfms.f32	s7, s13, s14
 8001d76:	eea4 6ac4 	vfms.f32	s12, s9, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001d7a:	ee25 7a27 	vmul.f32	s14, s10, s15
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d7e:	eee4 3ae7 	vfms.f32	s7, s9, s15
 8001d82:	eea6 7ac4 	vfms.f32	s14, s13, s8
 8001d86:	eeb0 4a46 	vmov.f32	s8, s12
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001d8a:	eea6 6ae5 	vfms.f32	s12, s13, s11
	   *buf++ = y0;
 8001d8e:	ee96 4aa5 	vfnms.f32	s8, s13, s11
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001d92:	ee65 5a23 	vmul.f32	s11, s10, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001d96:	eef0 2a63 	vmov.f32	s5, s7
 8001d9a:	eee6 5ac6 	vfms.f32	s11, s13, s12
	   *buf++ = y0;
 8001d9e:	ed00 6a07 	vstr	s12, [r0, #-28]	; 0xffffffe4
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001da2:	eea4 7a84 	vfma.f32	s14, s9, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001da6:	eee4 5ac7 	vfms.f32	s11, s9, s14
	   *buf++ = y0;
 8001daa:	ed00 7a06 	vstr	s14, [r0, #-24]	; 0xffffffe8
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 8001dae:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8001db2:	d1a7      	bne.n	8001d04 <SDR_CWPeak+0x3c>
 8001db4:	edc7 7a00 	vstr	s15, [r7]
 8001db8:	edc6 5a00 	vstr	s11, [r6]
 8001dbc:	ed85 7a00 	vstr	s14, [r5]
 8001dc0:	edcc 3a00 	vstr	s7, [ip]
   }
}
 8001dc4:	bcf0      	pop	{r4, r5, r6, r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	240090ac 	.word	0x240090ac
 8001dd0:	2400c5e8 	.word	0x2400c5e8
 8001dd4:	24004608 	.word	0x24004608
 8001dd8:	24000634 	.word	0x24000634
 8001ddc:	24000630 	.word	0x24000630
 8001de0:	24000638 	.word	0x24000638
 8001de4:	2400062c 	.word	0x2400062c

08001de8 <SDR_demodAM_AGC>:
// ------------------------------------------------------
// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8001de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 8001dec:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <SDR_demodAM_AGC+0xd0>)
{
 8001dee:	b082      	sub	sp, #8
 8001df0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8001ed4 <SDR_demodAM_AGC+0xec>
 8001df4:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 8001df8:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8001ed8 <SDR_demodAM_AGC+0xf0>
 8001dfc:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8001edc <SDR_demodAM_AGC+0xf4>
		  hangcnt = Hcount[AM]; 
 8001e00:	881f      	ldrh	r7, [r3, #0]
 8001e02:	ed98 7a00 	vldr	s14, [r8]
 8001e06:	f8dc 3000 	ldr.w	r3, [ip]
 8001e0a:	ed9e 6a00 	vldr	s12, [lr]
 8001e0e:	4c2b      	ldr	r4, [pc, #172]	; (8001ebc <SDR_demodAM_AGC+0xd4>)
 8001e10:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <SDR_demodAM_AGC+0xd8>)

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001e12:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8001ec4 <SDR_demodAM_AGC+0xdc>
	  }

    audiotmp /= max(pk, AgcThreshold);  
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
 8001e16:	4e2c      	ldr	r6, [pc, #176]	; (8001ec8 <SDR_demodAM_AGC+0xe0>)
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001e18:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 8001ecc <SDR_demodAM_AGC+0xe4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8001e1c:	edd0 7a01 	vldr	s15, [r0, #4]
 8001e20:	3008      	adds	r0, #8
 8001e22:	ed50 6a02 	vldr	s13, [r0, #-8]
 8001e26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e2a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8001e2e:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8001e32:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8001e36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = __builtin_sqrtf(in);
 8001e3e:	bfa8      	it	ge
 8001e40:	eef1 6ae7 	vsqrtge.f32	s13, s15
    audiotmp /= max(pk, AgcThreshold);  
 8001e44:	edd4 7a00 	vldr	s15, [r4]
      *pOut = 0.0f;
 8001e48:	bfb8      	it	lt
 8001e4a:	eef0 6a64 	vmovlt.f32	s13, s9
	  if(pk < audiotmp)
 8001e4e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	d502      	bpl.n	8001e5e <SDR_demodAM_AGC+0x76>
 8001e58:	eeb0 7a66 	vmov.f32	s14, s13
		  hangcnt = Hcount[AM]; 
 8001e5c:	463b      	mov	r3, r7
    audiotmp /= max(pk, AgcThreshold);  
 8001e5e:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8001e62:	eec6 5aa7 	vdiv.f32	s11, s13, s15
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001e66:	eef0 7a65 	vmov.f32	s15, s11
    audiotmp /= max(pk, AgcThreshold);  
 8001e6a:	edc2 5a00 	vstr	s11, [r2]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001e6e:	eee6 7a05 	vfma.f32	s15, s12, s10
	  if(hangcnt == 0)
 8001e72:	b91b      	cbnz	r3, 8001e7c <SDR_demodAM_AGC+0x94>
		  pk  *= Decay[AM];
 8001e74:	edd6 6a00 	vldr	s13, [r6]
 8001e78:	ee27 7a26 	vmul.f32	s14, s14, s13
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001e7c:	edcd 7a00 	vstr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8001e80:	4285      	cmp	r5, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8001e82:	eddd 7a00 	vldr	s15, [sp]
 8001e86:	ee77 7ac6 	vsub.f32	s15, s15, s12
	  wold = w;
 8001e8a:	ed9d 6a00 	vldr	s12, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8001e8e:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8001e92:	d1c3      	bne.n	8001e1c <SDR_demodAM_AGC+0x34>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <SDR_demodAM_AGC+0xe8>)
	if(hangcnt > 0)  hangcnt--;
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	ed88 7a00 	vstr	s14, [r8]
 8001e9c:	f8cc 3000 	str.w	r3, [ip]
 8001ea0:	ed8e 6a00 	vstr	s12, [lr]
    PeakAudioValue=pk;
 8001ea4:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8001ea8:	dd02      	ble.n	8001eb0 <SDR_demodAM_AGC+0xc8>
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f8cc 3000 	str.w	r3, [ip]
}
 8001eb0:	b002      	add	sp, #8
 8001eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2400826c 	.word	0x2400826c
 8001ebc:	2400a0bc 	.word	0x2400a0bc
 8001ec0:	24000cb4 	.word	0x24000cb4
 8001ec4:	00000000 	.word	0x00000000
 8001ec8:	24002cbc 	.word	0x24002cbc
 8001ecc:	3f75c28f 	.word	0x3f75c28f
 8001ed0:	24008af4 	.word	0x24008af4
 8001ed4:	240000e8 	.word	0x240000e8
 8001ed8:	24000618 	.word	0x24000618
 8001edc:	24000628 	.word	0x24000628

08001ee0 <SDR_demodSSB_CW_AGC>:
//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
	  arm_sqrt_f32(tmp, &sav);  

	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <SDR_demodSSB_CW_AGC+0x12c>)
{
 8001ee4:	460a      	mov	r2, r1
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8001ee6:	4c4a      	ldr	r4, [pc, #296]	; (8002010 <SDR_demodSSB_CW_AGC+0x130>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8001ee8:	f893 e000 	ldrb.w	lr, [r3]
{
 8001eec:	4603      	mov	r3, r0
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8001eee:	8861      	ldrh	r1, [r4, #2]
 8001ef0:	88a5      	ldrh	r5, [r4, #4]
 8001ef2:	4f48      	ldr	r7, [pc, #288]	; (8002014 <SDR_demodSSB_CW_AGC+0x134>)
 8001ef4:	f1be 0f01 	cmp.w	lr, #1
 8001ef8:	bf08      	it	eq
 8001efa:	460d      	moveq	r5, r1
 8001efc:	4e46      	ldr	r6, [pc, #280]	; (8002018 <SDR_demodSSB_CW_AGC+0x138>)
 8001efe:	f1be 0f03 	cmp.w	lr, #3
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8001f02:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8001f06:	edd7 7a00 	vldr	s15, [r7]
 8001f0a:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 8001f0e:	6831      	ldr	r1, [r6, #0]
 8001f10:	4842      	ldr	r0, [pc, #264]	; (800201c <SDR_demodSSB_CW_AGC+0x13c>)
 8001f12:	d057      	beq.n	8001fc4 <SDR_demodSSB_CW_AGC+0xe4>
 8001f14:	f1be 0f01 	cmp.w	lr, #1
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8001f18:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8002028 <SDR_demodSSB_CW_AGC+0x148>
 8001f1c:	d02f      	beq.n	8001f7e <SDR_demodSSB_CW_AGC+0x9e>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8001f1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f22:	3308      	adds	r3, #8
 8001f24:	ed13 6a02 	vldr	s12, [r3, #-8]
 8001f28:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001f2c:	eea6 7a06 	vfma.f32	s14, s12, s12
      *pOut = __builtin_sqrtf(in);
 8001f30:	eef1 6ac7 	vsqrt.f32	s13, s14
	  if(pk < sav)
 8001f34:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	d502      	bpl.n	8001f44 <SDR_demodSSB_CW_AGC+0x64>
 8001f3e:	eef0 7a66 	vmov.f32	s15, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8001f42:	4629      	mov	r1, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8001f44:	ed90 7a00 	vldr	s14, [r0]
 8001f48:	fe87 7a87 	vmaxnm.f32	s14, s15, s14
 8001f4c:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8001f50:	ece2 5a01 	vstmia	r2!, {s11}
	  if(hangcnt == 0)
 8001f54:	b919      	cbnz	r1, 8001f5e <SDR_demodSSB_CW_AGC+0x7e>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8001f56:	ed9c 7a02 	vldr	s14, [ip, #8]
 8001f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
	for(k=j=0; k<BSIZE*2; k+=2)
 8001f5e:	429c      	cmp	r4, r3
 8001f60:	d1dd      	bne.n	8001f1e <SDR_demodSSB_CW_AGC+0x3e>
 8001f62:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <SDR_demodSSB_CW_AGC+0x140>)
    }  
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 8001f64:	2900      	cmp	r1, #0
	PeakAudioValue=pk;
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <SDR_demodSSB_CW_AGC+0x144>)
 8001f68:	edc7 7a00 	vstr	s15, [r7]
 8001f6c:	6031      	str	r1, [r6, #0]
 8001f6e:	edc2 6a00 	vstr	s13, [r2]
 8001f72:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 8001f76:	dd01      	ble.n	8001f7c <SDR_demodSSB_CW_AGC+0x9c>
 8001f78:	3901      	subs	r1, #1
 8001f7a:	6031      	str	r1, [r6, #0]
}
 8001f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8001f7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f82:	3308      	adds	r3, #8
 8001f84:	ed13 6a02 	vldr	s12, [r3, #-8]
 8001f88:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001f8c:	eea6 7a06 	vfma.f32	s14, s12, s12
 8001f90:	eef1 6ac7 	vsqrt.f32	s13, s14
	  if(pk < sav)
 8001f94:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	d502      	bpl.n	8001fa4 <SDR_demodSSB_CW_AGC+0xc4>
 8001f9e:	eef0 7a66 	vmov.f32	s15, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8001fa2:	4629      	mov	r1, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8001fa4:	ed90 7a00 	vldr	s14, [r0]
 8001fa8:	fe87 7a87 	vmaxnm.f32	s14, s15, s14
 8001fac:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8001fb0:	ece2 5a01 	vstmia	r2!, {s11}
	  if(hangcnt == 0)
 8001fb4:	b919      	cbnz	r1, 8001fbe <SDR_demodSSB_CW_AGC+0xde>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8001fb6:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001fba:	ee67 7a87 	vmul.f32	s15, s15, s14
	for(k=j=0; k<BSIZE*2; k+=2)
 8001fbe:	42a3      	cmp	r3, r4
 8001fc0:	d1dd      	bne.n	8001f7e <SDR_demodSSB_CW_AGC+0x9e>
 8001fc2:	e7ce      	b.n	8001f62 <SDR_demodSSB_CW_AGC+0x82>
      if(CurrentMode == CW) pk  *= Decay[CW];
 8001fc4:	4d18      	ldr	r5, [pc, #96]	; (8002028 <SDR_demodSSB_CW_AGC+0x148>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8001fc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fca:	3308      	adds	r3, #8
 8001fcc:	ed13 6a02 	vldr	s12, [r3, #-8]
 8001fd0:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001fd4:	eea6 7a06 	vfma.f32	s14, s12, s12
 8001fd8:	eef1 6ac7 	vsqrt.f32	s13, s14
	  if(pk < sav)
 8001fdc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	d502      	bpl.n	8001fec <SDR_demodSSB_CW_AGC+0x10c>
 8001fe6:	eef0 7a66 	vmov.f32	s15, s13
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8001fea:	4661      	mov	r1, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8001fec:	ed90 7a00 	vldr	s14, [r0]
 8001ff0:	fe87 7a87 	vmaxnm.f32	s14, s15, s14
 8001ff4:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8001ff8:	ece2 5a01 	vstmia	r2!, {s11}
	  if(hangcnt == 0)
 8001ffc:	b919      	cbnz	r1, 8002006 <SDR_demodSSB_CW_AGC+0x126>
      if(CurrentMode == CW) pk  *= Decay[CW];
 8001ffe:	ed95 7a03 	vldr	s14, [r5, #12]
 8002002:	ee67 7a87 	vmul.f32	s15, s15, s14
	for(k=j=0; k<BSIZE*2; k+=2)
 8002006:	42a3      	cmp	r3, r4
 8002008:	d1dd      	bne.n	8001fc6 <SDR_demodSSB_CW_AGC+0xe6>
 800200a:	e7aa      	b.n	8001f62 <SDR_demodSSB_CW_AGC+0x82>
 800200c:	2400c5fc 	.word	0x2400c5fc
 8002010:	2400826c 	.word	0x2400826c
 8002014:	240000ec 	.word	0x240000ec
 8002018:	2400061c 	.word	0x2400061c
 800201c:	2400a0bc 	.word	0x2400a0bc
 8002020:	24000620 	.word	0x24000620
 8002024:	24008af4 	.word	0x24008af4
 8002028:	24002cbc 	.word	0x24002cbc

0800202c <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 800202c:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002030:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002034:	490a      	ldr	r1, [pc, #40]	; (8002060 <HAL_ADC_ConvCpltCallback+0x34>)
 8002036:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800203a:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800203e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8002040:	4293      	cmp	r3, r2
 8002042:	d1fa      	bne.n	800203a <HAL_ADC_ConvCpltCallback+0xe>
 8002044:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002048:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(1);
 800204c:	2001      	movs	r0, #1
 800204e:	f7fe ff8b 	bl	8000f68 <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_ADC_ConvCpltCallback+0x38>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
}
 8002058:	bd08      	pop	{r3, pc}
 800205a:	bf00      	nop
 800205c:	2400d200 	.word	0x2400d200
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	24000669 	.word	0x24000669

08002068 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002068:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 800206c:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002070:	490a      	ldr	r1, [pc, #40]	; (800209c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002072:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8002076:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800207a:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 800207c:	4293      	cmp	r3, r2
 800207e:	d1fa      	bne.n	8002076 <HAL_ADC_ConvHalfCpltCallback+0xe>
 8002080:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002084:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(0);
 8002088:	2000      	movs	r0, #0
 800208a:	f7fe ff6d 	bl	8000f68 <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
}
 8002094:	bd08      	pop	{r3, pc}
 8002096:	bf00      	nop
 8002098:	2400ce00 	.word	0x2400ce00
 800209c:	e000ed00 	.word	0xe000ed00
 80020a0:	24000669 	.word	0x24000669

080020a4 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020a4:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 80020a8:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 80020aa:	4c05      	ldr	r4, [pc, #20]	; (80020c0 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 80020ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 80020b2:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 80020b4:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 80020b8:	f004 ba8e 	b.w	80065d8 <HAL_GPIO_WritePin>
 80020bc:	240046b0 	.word	0x240046b0
 80020c0:	240074c0 	.word	0x240074c0
 80020c4:	58020400 	.word	0x58020400

080020c8 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020c8:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 80020cc:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 80020ce:	4c05      	ldr	r4, [pc, #20]	; (80020e4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 80020d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 80020d6:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 80020d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 80020dc:	f004 ba7c 	b.w	80065d8 <HAL_GPIO_WritePin>
 80020e0:	240046b0 	.word	0x240046b0
 80020e4:	240070c0 	.word	0x240070c0
 80020e8:	58020400 	.word	0x58020400

080020ec <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
	OVFDetected = OVF_TIMEOUT;
	/* Reset register IER */
	 __HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	 __HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_ADC_LevelOutOfWindowCallback+0x2c>)
	 __HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80020f0:	6811      	ldr	r1, [r2, #0]
	 __HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80020f2:	681a      	ldr	r2, [r3, #0]
	 __HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80020f4:	684b      	ldr	r3, [r1, #4]
	OVFDetected = OVF_TIMEOUT;
 80020f6:	4809      	ldr	r0, [pc, #36]	; (800211c <HAL_ADC_LevelOutOfWindowCallback+0x30>)
	 __HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80020f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 80020fc:	b410      	push	{r4}
	 __HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80020fe:	604b      	str	r3, [r1, #4]
	OVFDetected = OVF_TIMEOUT;
 8002100:	2402      	movs	r4, #2
	 __HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002102:	6853      	ldr	r3, [r2, #4]
	OVFDetected = OVF_TIMEOUT;
 8002104:	8004      	strh	r4, [r0, #0]
	 __HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
}
 800210a:	f85d 4b04 	ldr.w	r4, [sp], #4
	 __HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 800210e:	6053      	str	r3, [r2, #4]
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	240079c8 	.word	0x240079c8
 8002118:	24002d70 	.word	0x24002d70
 800211c:	24000cb8 	.word	0x24000cb8

08002120 <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 8002120:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <DisplayStatus+0x174>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	b086      	sub	sp, #24
	switch(Fstep)
 800212c:	f000 809b 	beq.w	8002266 <DisplayStatus+0x146>
 8002130:	d81c      	bhi.n	800216c <DisplayStatus+0x4c>
 8002132:	2b0a      	cmp	r3, #10
 8002134:	f000 809e 	beq.w	8002274 <DisplayStatus+0x154>
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d10e      	bne.n	800215a <DisplayStatus+0x3a>
	{
	case 1: strcpy(StringStep,"   1"); break;
	case 10: strcpy(StringStep,"  10"); break;
	case 100: strcpy(StringStep," 100"); break;
 800213c:	4a56      	ldr	r2, [pc, #344]	; (8002298 <DisplayStatus+0x178>)
 800213e:	4b57      	ldr	r3, [pc, #348]	; (800229c <DisplayStatus+0x17c>)
 8002140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002144:	6018      	str	r0, [r3, #0]
 8002146:	7119      	strb	r1, [r3, #4]
	case 9000: strcpy(StringStep,"   9K"); break;
	case 10000: strcpy(StringStep," 10K"); break;
	case 100000: strcpy(StringStep,"100K"); break;
	}

	switch(CurrentMode)
 8002148:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <DisplayStatus+0x180>)
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	2a03      	cmp	r2, #3
 800214e:	f200 809f 	bhi.w	8002290 <DisplayStatus+0x170>
 8002152:	e8df f002 	tbb	[pc, r2]
 8002156:	6765      	.short	0x6765
 8002158:	2780      	.short	0x2780
	switch(Fstep)
 800215a:	2b01      	cmp	r3, #1
 800215c:	d120      	bne.n	80021a0 <DisplayStatus+0x80>
	case 1: strcpy(StringStep,"   1"); break;
 800215e:	4a51      	ldr	r2, [pc, #324]	; (80022a4 <DisplayStatus+0x184>)
 8002160:	4b4e      	ldr	r3, [pc, #312]	; (800229c <DisplayStatus+0x17c>)
 8002162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002166:	6018      	str	r0, [r3, #0]
 8002168:	7119      	strb	r1, [r3, #4]
 800216a:	e7ed      	b.n	8002148 <DisplayStatus+0x28>
	switch(Fstep)
 800216c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002170:	4293      	cmp	r3, r2
 8002172:	f000 8086 	beq.w	8002282 <DisplayStatus+0x162>
 8002176:	4a4c      	ldr	r2, [pc, #304]	; (80022a8 <DisplayStatus+0x188>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d106      	bne.n	800218a <DisplayStatus+0x6a>
	case 100000: strcpy(StringStep,"100K"); break;
 800217c:	4a4b      	ldr	r2, [pc, #300]	; (80022ac <DisplayStatus+0x18c>)
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <DisplayStatus+0x17c>)
 8002180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002184:	6018      	str	r0, [r3, #0]
 8002186:	7119      	strb	r1, [r3, #4]
 8002188:	e7de      	b.n	8002148 <DisplayStatus+0x28>
	switch(Fstep)
 800218a:	f242 3228 	movw	r2, #9000	; 0x2328
 800218e:	4293      	cmp	r3, r2
 8002190:	d106      	bne.n	80021a0 <DisplayStatus+0x80>
	case 9000: strcpy(StringStep,"   9K"); break;
 8002192:	4a47      	ldr	r2, [pc, #284]	; (80022b0 <DisplayStatus+0x190>)
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <DisplayStatus+0x17c>)
 8002196:	e892 0003 	ldmia.w	r2, {r0, r1}
 800219a:	6018      	str	r0, [r3, #0]
 800219c:	8099      	strh	r1, [r3, #4]
 800219e:	e7d3      	b.n	8002148 <DisplayStatus+0x28>
 80021a0:	4b3e      	ldr	r3, [pc, #248]	; (800229c <DisplayStatus+0x17c>)
 80021a2:	e7d1      	b.n	8002148 <DisplayStatus+0x28>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 80021a4:	4a43      	ldr	r2, [pc, #268]	; (80022b4 <DisplayStatus+0x194>)
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	4d43      	ldr	r5, [pc, #268]	; (80022b8 <DisplayStatus+0x198>)
 80021aa:	0c11      	lsrs	r1, r2, #16
 80021ac:	802a      	strh	r2, [r5, #0]
 80021ae:	70a9      	strb	r1, [r5, #2]
	}
	switch (CurrentAGC)
 80021b0:	4a42      	ldr	r2, [pc, #264]	; (80022bc <DisplayStatus+0x19c>)
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	d03c      	beq.n	8002232 <DisplayStatus+0x112>
 80021b8:	2a01      	cmp	r2, #1
 80021ba:	d150      	bne.n	800225e <DisplayStatus+0x13e>
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
 80021bc:	4a40      	ldr	r2, [pc, #256]	; (80022c0 <DisplayStatus+0x1a0>)
 80021be:	4c41      	ldr	r4, [pc, #260]	; (80022c4 <DisplayStatus+0x1a4>)
 80021c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021c4:	6020      	str	r0, [r4, #0]
 80021c6:	7121      	strb	r1, [r4, #4]
	}
	switch (CurrentBW)
 80021c8:	4a3f      	ldr	r2, [pc, #252]	; (80022c8 <DisplayStatus+0x1a8>)
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d03a      	beq.n	8002246 <DisplayStatus+0x126>
 80021d0:	2a01      	cmp	r2, #1
 80021d2:	d146      	bne.n	8002262 <DisplayStatus+0x142>
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
 80021d4:	493d      	ldr	r1, [pc, #244]	; (80022cc <DisplayStatus+0x1ac>)
 80021d6:	4a3e      	ldr	r2, [pc, #248]	; (80022d0 <DisplayStatus+0x1b0>)
 80021d8:	c903      	ldmia	r1, {r0, r1}
 80021da:	6010      	str	r0, [r2, #0]
 80021dc:	7111      	strb	r1, [r2, #4]
	}
	sprintf(UartTXString, "\e[3;1HFreq %.0f Step %s\e[5;1HMode %s BW %s AGG %s Volume %1.1f   \r", LOfreq, StringStep, StringMode, StringWidth, StringAGC, volume);
 80021de:	493d      	ldr	r1, [pc, #244]	; (80022d4 <DisplayStatus+0x1b4>)
 80021e0:	9403      	str	r4, [sp, #12]
 80021e2:	ed91 7a00 	vldr	s14, [r1]
 80021e6:	493c      	ldr	r1, [pc, #240]	; (80022d8 <DisplayStatus+0x1b8>)
 80021e8:	9202      	str	r2, [sp, #8]
 80021ea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80021ee:	edd1 6a00 	vldr	s13, [r1]
 80021f2:	483a      	ldr	r0, [pc, #232]	; (80022dc <DisplayStatus+0x1bc>)
 80021f4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021f8:	4939      	ldr	r1, [pc, #228]	; (80022e0 <DisplayStatus+0x1c0>)
 80021fa:	e9cd 3500 	strd	r3, r5, [sp]
 80021fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002202:	ec53 2b16 	vmov	r2, r3, d6
 8002206:	f00b fce9 	bl	800dbdc <siprintf>
#ifdef UART_UI
	//HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
#endif
#ifdef USB_UI
	CDC_Transmit_FS(UartTXString, strlen(UartTXString));
 800220a:	4834      	ldr	r0, [pc, #208]	; (80022dc <DisplayStatus+0x1bc>)
 800220c:	f7fe f8c8 	bl	80003a0 <strlen>
 8002210:	4601      	mov	r1, r0
 8002212:	4832      	ldr	r0, [pc, #200]	; (80022dc <DisplayStatus+0x1bc>)
 8002214:	b289      	uxth	r1, r1
#endif
}
 8002216:	b006      	add	sp, #24
 8002218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	CDC_Transmit_FS(UartTXString, strlen(UartTXString));
 800221c:	f009 bce0 	b.w	800bbe0 <CDC_Transmit_FS>
	case AM: strcpy(StringMode,"AM"); break;
 8002220:	4a30      	ldr	r2, [pc, #192]	; (80022e4 <DisplayStatus+0x1c4>)
 8002222:	e7c0      	b.n	80021a6 <DisplayStatus+0x86>
	case LSB: strcpy(StringMode,"LSB"); break;
 8002224:	4a30      	ldr	r2, [pc, #192]	; (80022e8 <DisplayStatus+0x1c8>)
 8002226:	4d24      	ldr	r5, [pc, #144]	; (80022b8 <DisplayStatus+0x198>)
 8002228:	602a      	str	r2, [r5, #0]
	switch (CurrentAGC)
 800222a:	4a24      	ldr	r2, [pc, #144]	; (80022bc <DisplayStatus+0x19c>)
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	2a00      	cmp	r2, #0
 8002230:	d1c2      	bne.n	80021b8 <DisplayStatus+0x98>
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002232:	4a2e      	ldr	r2, [pc, #184]	; (80022ec <DisplayStatus+0x1cc>)
 8002234:	4c23      	ldr	r4, [pc, #140]	; (80022c4 <DisplayStatus+0x1a4>)
 8002236:	e892 0003 	ldmia.w	r2, {r0, r1}
	switch (CurrentBW)
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <DisplayStatus+0x1a8>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 800223c:	6020      	str	r0, [r4, #0]
	switch (CurrentBW)
 800223e:	7812      	ldrb	r2, [r2, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002240:	7121      	strb	r1, [r4, #4]
	switch (CurrentBW)
 8002242:	2a00      	cmp	r2, #0
 8002244:	d1c4      	bne.n	80021d0 <DisplayStatus+0xb0>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8002246:	492a      	ldr	r1, [pc, #168]	; (80022f0 <DisplayStatus+0x1d0>)
 8002248:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <DisplayStatus+0x1b0>)
 800224a:	c903      	ldmia	r1, {r0, r1}
 800224c:	0c0e      	lsrs	r6, r1, #16
 800224e:	6010      	str	r0, [r2, #0]
 8002250:	8091      	strh	r1, [r2, #4]
 8002252:	7196      	strb	r6, [r2, #6]
 8002254:	e7c3      	b.n	80021de <DisplayStatus+0xbe>
	case USB: strcpy(StringMode,"USB"); break;
 8002256:	4d18      	ldr	r5, [pc, #96]	; (80022b8 <DisplayStatus+0x198>)
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <DisplayStatus+0x1d4>)
 800225a:	602a      	str	r2, [r5, #0]
 800225c:	e7a8      	b.n	80021b0 <DisplayStatus+0x90>
 800225e:	4c19      	ldr	r4, [pc, #100]	; (80022c4 <DisplayStatus+0x1a4>)
 8002260:	e7b2      	b.n	80021c8 <DisplayStatus+0xa8>
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <DisplayStatus+0x1b0>)
 8002264:	e7bb      	b.n	80021de <DisplayStatus+0xbe>
	case 1000: strcpy(StringStep,"  1K"); break;
 8002266:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <DisplayStatus+0x1d8>)
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <DisplayStatus+0x17c>)
 800226a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800226e:	6018      	str	r0, [r3, #0]
 8002270:	7119      	strb	r1, [r3, #4]
 8002272:	e769      	b.n	8002148 <DisplayStatus+0x28>
	case 10: strcpy(StringStep,"  10"); break;
 8002274:	4a21      	ldr	r2, [pc, #132]	; (80022fc <DisplayStatus+0x1dc>)
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <DisplayStatus+0x17c>)
 8002278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800227c:	6018      	str	r0, [r3, #0]
 800227e:	7119      	strb	r1, [r3, #4]
 8002280:	e762      	b.n	8002148 <DisplayStatus+0x28>
	case 10000: strcpy(StringStep," 10K"); break;
 8002282:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <DisplayStatus+0x1e0>)
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <DisplayStatus+0x17c>)
 8002286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228a:	6018      	str	r0, [r3, #0]
 800228c:	7119      	strb	r1, [r3, #4]
 800228e:	e75b      	b.n	8002148 <DisplayStatus+0x28>
 8002290:	4d09      	ldr	r5, [pc, #36]	; (80022b8 <DisplayStatus+0x198>)
 8002292:	e78d      	b.n	80021b0 <DisplayStatus+0x90>
 8002294:	2400c5f4 	.word	0x2400c5f4
 8002298:	08017288 	.word	0x08017288
 800229c:	24000658 	.word	0x24000658
 80022a0:	2400c5fc 	.word	0x2400c5fc
 80022a4:	08017278 	.word	0x08017278
 80022a8:	000186a0 	.word	0x000186a0
 80022ac:	080172a8 	.word	0x080172a8
 80022b0:	08017298 	.word	0x08017298
 80022b4:	080172b4 	.word	0x080172b4
 80022b8:	24000650 	.word	0x24000650
 80022bc:	240008a0 	.word	0x240008a0
 80022c0:	080172c0 	.word	0x080172c0
 80022c4:	24000648 	.word	0x24000648
 80022c8:	24000cb0 	.word	0x24000cb0
 80022cc:	080172d0 	.word	0x080172d0
 80022d0:	24000660 	.word	0x24000660
 80022d4:	24004604 	.word	0x24004604
 80022d8:	2400a0c8 	.word	0x2400a0c8
 80022dc:	240078c4 	.word	0x240078c4
 80022e0:	080172d8 	.word	0x080172d8
 80022e4:	080172b0 	.word	0x080172b0
 80022e8:	0042534c 	.word	0x0042534c
 80022ec:	080172b8 	.word	0x080172b8
 80022f0:	080172c8 	.word	0x080172c8
 80022f4:	00425355 	.word	0x00425355
 80022f8:	08017290 	.word	0x08017290
 80022fc:	08017280 	.word	0x08017280
 8002300:	080172a0 	.word	0x080172a0
 8002304:	00000000 	.word	0x00000000

08002308 <UserInput>:
	if (USBRXLength)
 8002308:	4b87      	ldr	r3, [pc, #540]	; (8002528 <UserInput+0x220>)
 800230a:	681a      	ldr	r2, [r3, #0]
{
 800230c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230e:	b083      	sub	sp, #12
	if (USBRXLength)
 8002310:	2a00      	cmp	r2, #0
 8002312:	f000 809c 	beq.w	800244e <UserInput+0x146>
		result = HAL_OK;
 8002316:	2200      	movs	r2, #0
 8002318:	f88d 2007 	strb.w	r2, [sp, #7]
		USBRXLength = 0;
 800231c:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 800231e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002322:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002326:	2b00      	cmp	r3, #0
 8002328:	d145      	bne.n	80023b6 <UserInput+0xae>
		switch (UartRXString[0])
 800232a:	4b80      	ldr	r3, [pc, #512]	; (800252c <UserInput+0x224>)
		UartRXDataReady = RESET;
 800232c:	4980      	ldr	r1, [pc, #512]	; (8002530 <UserInput+0x228>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 8002332:	3b2b      	subs	r3, #43	; 0x2b
 8002334:	2b4c      	cmp	r3, #76	; 0x4c
 8002336:	d83c      	bhi.n	80023b2 <UserInput+0xaa>
 8002338:	e8df f003 	tbb	[pc, r3]
 800233c:	3b273bd8 	.word	0x3b273bd8
 8002340:	d2d53b3b 	.word	0xd2d53b3b
 8002344:	c2c6cace 	.word	0xc2c6cace
 8002348:	3bb6babe 	.word	0x3bb6babe
 800234c:	3b3b3b3b 	.word	0x3b3b3b3b
 8002350:	3b3b3b3b 	.word	0x3b3b3b3b
 8002354:	3b3b3b3b 	.word	0x3b3b3b3b
 8002358:	3b3b3b3b 	.word	0x3b3b3b3b
 800235c:	3b3b3b3b 	.word	0x3b3b3b3b
 8002360:	3b3b3b3b 	.word	0x3b3b3b3b
 8002364:	3b3b3b3b 	.word	0x3b3b3b3b
 8002368:	3b3b3b3b 	.word	0x3b3b3b3b
 800236c:	3b3b3b3b 	.word	0x3b3b3b3b
 8002370:	3bb23b3b 	.word	0x3bb23b3b
 8002374:	aa3b3bae 	.word	0xaa3b3bae
 8002378:	3b3b3b3b 	.word	0x3b3b3b3b
 800237c:	a23ba63b 	.word	0xa23ba63b
 8002380:	3b3b3b3b 	.word	0x3b3b3b3b
 8002384:	3b9a3b9e 	.word	0x3b9a3b9e
 8002388:	96          	.byte	0x96
 8002389:	00          	.byte	0x00
			volume -= 0.1;
 800238a:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <UserInput+0x22c>)
			if (volume < 0)
 800238c:	2200      	movs	r2, #0
			volume -= 0.1;
 800238e:	ed93 7a00 	vldr	s14, [r3]
 8002392:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8002510 <UserInput+0x208>
 8002396:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800239a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800239e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 80023a2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	f100 80af 	bmi.w	800250c <UserInput+0x204>
			volume += 0.1;
 80023ae:	ed83 7a00 	vstr	s14, [r3]
		DisplayStatus();
 80023b2:	f7ff feb5 	bl	8002120 <DisplayStatus>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80023b6:	4b60      	ldr	r3, [pc, #384]	; (8002538 <UserInput+0x230>)
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f\r", SValue);
 80023b8:	4c60      	ldr	r4, [pc, #384]	; (800253c <UserInput+0x234>)
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80023ba:	ed93 7a00 	vldr	s14, [r3]
 80023be:	4d60      	ldr	r5, [pc, #384]	; (8002540 <UserInput+0x238>)
 80023c0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80023c4:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8002518 <UserInput+0x210>
 80023c8:	ee27 0b00 	vmul.f64	d0, d7, d0
 80023cc:	f00d ffb4 	bl	8010338 <log10>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f\r", SValue);
 80023d0:	495c      	ldr	r1, [pc, #368]	; (8002544 <UserInput+0x23c>)
 80023d2:	4620      	mov	r0, r4
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80023d4:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8002520 <UserInput+0x218>
 80023d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80023dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f\r", SValue);
 80023e0:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80023e4:	ed85 0a00 	vstr	s0, [r5]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f\r", SValue);
 80023e8:	ec53 2b17 	vmov	r2, r3, d7
 80023ec:	f00b fbf6 	bl	800dbdc <siprintf>
	CDC_Transmit_FS(UartTXString, strlen(UartTXString));
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7fd ffd5 	bl	80003a0 <strlen>
 80023f6:	4601      	mov	r1, r0
 80023f8:	4620      	mov	r0, r4
 80023fa:	b289      	uxth	r1, r1
 80023fc:	f009 fbf0 	bl	800bbe0 <CDC_Transmit_FS>
	if (OVFDetected)
 8002400:	4951      	ldr	r1, [pc, #324]	; (8002548 <UserInput+0x240>)
 8002402:	880b      	ldrh	r3, [r1, #0]
 8002404:	b33b      	cbz	r3, 8002456 <UserInput+0x14e>
		OVFDetected--;
 8002406:	3b01      	subs	r3, #1
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002408:	4d50      	ldr	r5, [pc, #320]	; (800254c <UserInput+0x244>)
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 800240a:	4851      	ldr	r0, [pc, #324]	; (8002550 <UserInput+0x248>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 800240c:	2780      	movs	r7, #128	; 0x80
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 800240e:	4a51      	ldr	r2, [pc, #324]	; (8002554 <UserInput+0x24c>)
		OVFDetected--;
 8002410:	b29b      	uxth	r3, r3
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002412:	682e      	ldr	r6, [r5, #0]
		OVFDetected--;
 8002414:	800b      	strh	r3, [r1, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002416:	6805      	ldr	r5, [r0, #0]
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002418:	ca03      	ldmia	r2!, {r0, r1}
 800241a:	6061      	str	r1, [r4, #4]
 800241c:	8811      	ldrh	r1, [r2, #0]
 800241e:	7892      	ldrb	r2, [r2, #2]
 8002420:	6020      	str	r0, [r4, #0]
 8002422:	8121      	strh	r1, [r4, #8]
 8002424:	72a2      	strb	r2, [r4, #10]
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002426:	6037      	str	r7, [r6, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002428:	602f      	str	r7, [r5, #0]
		if (!OVFDetected)
 800242a:	b92b      	cbnz	r3, 8002438 <UserInput+0x130>
				 __HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 800242c:	6873      	ldr	r3, [r6, #4]
 800242e:	433b      	orrs	r3, r7
 8002430:	6073      	str	r3, [r6, #4]
				 __HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002432:	686b      	ldr	r3, [r5, #4]
 8002434:	433b      	orrs	r3, r7
 8002436:	606b      	str	r3, [r5, #4]
	CDC_Transmit_FS(UartTXString, strlen(UartTXString));
 8002438:	4840      	ldr	r0, [pc, #256]	; (800253c <UserInput+0x234>)
 800243a:	f7fd ffb1 	bl	80003a0 <strlen>
 800243e:	4601      	mov	r1, r0
 8002440:	483e      	ldr	r0, [pc, #248]	; (800253c <UserInput+0x234>)
 8002442:	b289      	uxth	r1, r1
}
 8002444:	b003      	add	sp, #12
 8002446:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	CDC_Transmit_FS(UartTXString, strlen(UartTXString));
 800244a:	f009 bbc9 	b.w	800bbe0 <CDC_Transmit_FS>
		result = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	f88d 3007 	strb.w	r3, [sp, #7]
 8002454:	e763      	b.n	800231e <UserInput+0x16>
		sprintf((char*)UartTXString, "\e[4;1H   \r");
 8002456:	4b40      	ldr	r3, [pc, #256]	; (8002558 <UserInput+0x250>)
 8002458:	cb03      	ldmia	r3!, {r0, r1}
 800245a:	881a      	ldrh	r2, [r3, #0]
 800245c:	789b      	ldrb	r3, [r3, #2]
 800245e:	6020      	str	r0, [r4, #0]
 8002460:	6061      	str	r1, [r4, #4]
 8002462:	8122      	strh	r2, [r4, #8]
 8002464:	72a3      	strb	r3, [r4, #10]
 8002466:	e7e7      	b.n	8002438 <UserInput+0x130>
			SetBW((Bwidth)Wide);  break;
 8002468:	2001      	movs	r0, #1
 800246a:	f7fe f997 	bl	800079c <SetBW>
 800246e:	e7a0      	b.n	80023b2 <UserInput+0xaa>
			SetMode((Mode)USB); break;
 8002470:	2002      	movs	r0, #2
 8002472:	f7fe fb05 	bl	8000a80 <SetMode>
 8002476:	e79c      	b.n	80023b2 <UserInput+0xaa>
			SetAGC((Agctype)Slow);  break;
 8002478:	2001      	movs	r0, #1
 800247a:	f7fe f9f1 	bl	8000860 <SetAGC>
 800247e:	e798      	b.n	80023b2 <UserInput+0xaa>
			SetBW((Bwidth)Narrow);  break;
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe f98b 	bl	800079c <SetBW>
 8002486:	e794      	b.n	80023b2 <UserInput+0xaa>
			SetMode((Mode)LSB); break;
 8002488:	2001      	movs	r0, #1
 800248a:	f7fe faf9 	bl	8000a80 <SetMode>
 800248e:	e790      	b.n	80023b2 <UserInput+0xaa>
			SetAGC((Agctype)Fast);  break;
 8002490:	2000      	movs	r0, #0
 8002492:	f7fe f9e5 	bl	8000860 <SetAGC>
 8002496:	e78c      	b.n	80023b2 <UserInput+0xaa>
			SetMode((Mode)CW); break;
 8002498:	2003      	movs	r0, #3
 800249a:	f7fe faf1 	bl	8000a80 <SetMode>
 800249e:	e788      	b.n	80023b2 <UserInput+0xaa>
			SetMode((Mode)AM); break;
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe faed 	bl	8000a80 <SetMode>
 80024a6:	e784      	b.n	80023b2 <UserInput+0xaa>
			SetFstep(9); break;
 80024a8:	2009      	movs	r0, #9
 80024aa:	f7fe fb21 	bl	8000af0 <SetFstep>
 80024ae:	e780      	b.n	80023b2 <UserInput+0xaa>
			SetFstep(0); break;
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fb1d 	bl	8000af0 <SetFstep>
 80024b6:	e77c      	b.n	80023b2 <UserInput+0xaa>
			SetFstep(1); break;
 80024b8:	2001      	movs	r0, #1
 80024ba:	f7fe fb19 	bl	8000af0 <SetFstep>
 80024be:	e778      	b.n	80023b2 <UserInput+0xaa>
			SetFstep(2);  break;
 80024c0:	2002      	movs	r0, #2
 80024c2:	f7fe fb15 	bl	8000af0 <SetFstep>
 80024c6:	e774      	b.n	80023b2 <UserInput+0xaa>
			SetFstep(3);  break;
 80024c8:	2003      	movs	r0, #3
 80024ca:	f7fe fb11 	bl	8000af0 <SetFstep>
 80024ce:	e770      	b.n	80023b2 <UserInput+0xaa>
			SetFstep(4);  break;
 80024d0:	2004      	movs	r0, #4
 80024d2:	f7fe fb0d 	bl	8000af0 <SetFstep>
 80024d6:	e76c      	b.n	80023b2 <UserInput+0xaa>
			SetFstep(5);  break;
 80024d8:	2005      	movs	r0, #5
 80024da:	f7fe fb09 	bl	8000af0 <SetFstep>
 80024de:	e768      	b.n	80023b2 <UserInput+0xaa>
			FplusClicked(); break;
 80024e0:	f7fe fb28 	bl	8000b34 <FplusClicked>
 80024e4:	e765      	b.n	80023b2 <UserInput+0xaa>
			FminusClicked(); break;
 80024e6:	f7fe fbe1 	bl	8000cac <FminusClicked>
 80024ea:	e762      	b.n	80023b2 <UserInput+0xaa>
			volume += 0.1;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <UserInput+0x22c>)
			if (volume > 1.0)
 80024ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 80024f2:	ed93 7a00 	vldr	s14, [r3]
 80024f6:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8002510 <UserInput+0x208>
 80024fa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80024fe:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002502:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002506:	fe87 7a66 	vminnm.f32	s14, s14, s13
 800250a:	e750      	b.n	80023ae <UserInput+0xa6>
				volume = 0;
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e750      	b.n	80023b2 <UserInput+0xaa>
 8002510:	9999999a 	.word	0x9999999a
 8002514:	3fb99999 	.word	0x3fb99999
 8002518:	00000000 	.word	0x00000000
 800251c:	409f4000 	.word	0x409f4000
 8002520:	9916f6a6 	.word	0x9916f6a6
 8002524:	400a93fc 	.word	0x400a93fc
 8002528:	240078c0 	.word	0x240078c0
 800252c:	240046b4 	.word	0x240046b4
 8002530:	24000668 	.word	0x24000668
 8002534:	24004604 	.word	0x24004604
 8002538:	24008af4 	.word	0x24008af4
 800253c:	240078c4 	.word	0x240078c4
 8002540:	240046a4 	.word	0x240046a4
 8002544:	0801731c 	.word	0x0801731c
 8002548:	24000cb8 	.word	0x24000cb8
 800254c:	240079c8 	.word	0x240079c8
 8002550:	24002d70 	.word	0x24002d70
 8002554:	0801732c 	.word	0x0801732c
 8002558:	08017338 	.word	0x08017338

0800255c <Error_Handler>:
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800255c:	4e09      	ldr	r6, [pc, #36]	; (8002584 <Error_Handler+0x28>)
{
 800255e:	4d0a      	ldr	r5, [pc, #40]	; (8002588 <Error_Handler+0x2c>)
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <Error_Handler+0x30>)
 8002562:	b508      	push	{r3, lr}
 8002564:	6833      	ldr	r3, [r6, #0]
 8002566:	fb05 f303 	mul.w	r3, r5, r3
 800256a:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 800256e:	d200      	bcs.n	8002572 <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8002570:	e7fe      	b.n	8002570 <Error_Handler+0x14>
			LED_switch();
 8002572:	f7fe fc57 	bl	8000e24 <LED_switch>
 8002576:	6833      	ldr	r3, [r6, #0]
 8002578:	fb05 f303 	mul.w	r3, r5, r3
 800257c:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8002580:	d2f7      	bcs.n	8002572 <Error_Handler+0x16>
 8002582:	e7f5      	b.n	8002570 <Error_Handler+0x14>
 8002584:	2400a0cc 	.word	0x2400a0cc
 8002588:	c28f5c29 	.word	0xc28f5c29
 800258c:	051eb851 	.word	0x051eb851

08002590 <PeriphCommonClock_Config>:
{
 8002590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002594:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002596:	2278      	movs	r2, #120	; 0x78
 8002598:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800259a:	2600      	movs	r6, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800259c:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LPTIM2;
 800259e:	4c1d      	ldr	r4, [pc, #116]	; (8002614 <PeriphCommonClock_Config+0x84>)
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a0:	f00a fed0 	bl	800d344 <memset>
  __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80025a4:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <PeriphCommonClock_Config+0x88>)
  PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80025a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80025aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80025ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LPTIM2;
 80025b0:	2504      	movs	r5, #4
 80025b2:	2702      	movs	r7, #2
 80025b4:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80025b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LPTIM2;
 80025bc:	f04f 0905 	mov.w	r9, #5
  __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80025c0:	62d3      	str	r3, [r2, #44]	; 0x2c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LPTIM2;
 80025c2:	2226      	movs	r2, #38	; 0x26
 80025c4:	2318      	movs	r3, #24
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80025c6:	9610      	str	r6, [sp, #64]	; 0x40
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LPTIM2;
 80025c8:	2602      	movs	r6, #2
  PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80025ca:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80025cc:	9128      	str	r1, [sp, #160]	; 0xa0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LPTIM2;
 80025ce:	2080      	movs	r0, #128	; 0x80
 80025d0:	2100      	movs	r1, #0
 80025d2:	e9cd 4500 	strd	r4, r5, [sp]
 80025d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80025de:	2400      	movs	r4, #0
 80025e0:	2505      	movs	r5, #5
 80025e2:	2250      	movs	r2, #80	; 0x50
 80025e4:	2302      	movs	r3, #2
 80025e6:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80025ea:	2700      	movs	r7, #0
 80025ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f0:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LPTIM2;
 80025f2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80025f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80025fa:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80025fe:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002602:	f005 fd83 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 8002606:	b910      	cbnz	r0, 800260e <PeriphCommonClock_Config+0x7e>
}
 8002608:	b031      	add	sp, #196	; 0xc4
 800260a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 800260e:	f7ff ffa5 	bl	800255c <Error_Handler>
 8002612:	bf00      	nop
 8002614:	00080040 	.word	0x00080040
 8002618:	58024400 	.word	0x58024400

0800261c <SystemClock_Config_For_OC>:
{
 800261c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002620:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002622:	224c      	movs	r2, #76	; 0x4c
 8002624:	2100      	movs	r1, #0
 8002626:	a80a      	add	r0, sp, #40	; 0x28
 8002628:	f00a fe8c 	bl	800d344 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262c:	2220      	movs	r2, #32
 800262e:	2100      	movs	r1, #0
 8002630:	a802      	add	r0, sp, #8
 8002632:	f00a fe87 	bl	800d344 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002636:	22bc      	movs	r2, #188	; 0xbc
 8002638:	2100      	movs	r1, #0
 800263a:	a81e      	add	r0, sp, #120	; 0x78
 800263c:	f00a fe82 	bl	800d344 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002640:	2002      	movs	r0, #2
 8002642:	f004 fdcd 	bl	80071e0 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002646:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <SystemClock_Config_For_OC+0x154>)
 8002648:	2200      	movs	r2, #0
 800264a:	494a      	ldr	r1, [pc, #296]	; (8002774 <SystemClock_Config_For_OC+0x158>)
 800264c:	9201      	str	r2, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800264e:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002650:	6998      	ldr	r0, [r3, #24]
 8002652:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8002656:	6198      	str	r0, [r3, #24]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002668:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002672:	6993      	ldr	r3, [r2, #24]
 8002674:	049b      	lsls	r3, r3, #18
 8002676:	d5fc      	bpl.n	8002672 <SystemClock_Config_For_OC+0x56>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002678:	483f      	ldr	r0, [pc, #252]	; (8002778 <SystemClock_Config_For_OC+0x15c>)
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800267a:	2202      	movs	r2, #2
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800267c:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800267e:	2501      	movs	r5, #1
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002680:	6a83      	ldr	r3, [r0, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002682:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLM = 5;
 8002684:	2705      	movs	r7, #5
	RCC_OscInitStruct.PLL.PLLN = 240;
 8002686:	26f0      	movs	r6, #240	; 0xf0
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002688:	f023 0303 	bic.w	r3, r3, #3
 800268c:	4313      	orrs	r3, r2
 800268e:	6283      	str	r3, [r0, #40]	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002694:	9217      	str	r2, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002696:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002698:	9219      	str	r2, [sp, #100]	; 0x64
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800269a:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800269c:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800269e:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLM = 5;
 80026a0:	9715      	str	r7, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 240;
 80026a2:	9616      	str	r6, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a4:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80026a8:	2221      	movs	r2, #33	; 0x21
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80026aa:	e9cd 111b 	strd	r1, r1, [sp, #108]	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80026ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b2:	f004 fe47 	bl	8007344 <HAL_RCC_OscConfig>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d157      	bne.n	800276a <SystemClock_Config_For_OC+0x14e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ba:	263f      	movs	r6, #63	; 0x3f
 80026bc:	2703      	movs	r7, #3
 80026be:	2200      	movs	r2, #0
 80026c0:	2308      	movs	r3, #8
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026c2:	4621      	mov	r1, r4
 80026c4:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80026ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80026ce:	2640      	movs	r6, #64	; 0x40
 80026d0:	2340      	movs	r3, #64	; 0x40
 80026d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d6:	2740      	movs	r7, #64	; 0x40
 80026d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80026dc:	e9cd 6706 	strd	r6, r7, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026e0:	f005 fa22 	bl	8007b28 <HAL_RCC_ClockConfig>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d13f      	bne.n	800276a <SystemClock_Config_For_OC+0x14e>
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80026ea:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80026ee:	932e      	str	r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026f0:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80026f2:	2310      	movs	r3, #16
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80026f4:	923f      	str	r2, [sp, #252]	; 0xfc
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80026f6:	22f0      	movs	r2, #240	; 0xf0
 80026f8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800277c <SystemClock_Config_For_OC+0x160>
 80026fc:	f04f 0919 	mov.w	r9, #25
 8002700:	2602      	movs	r6, #2
 8002702:	2702      	movs	r7, #2
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8002704:	f44f 6480 	mov.w	r4, #1024	; 0x400
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8002708:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800270c:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 800270e:	9444      	str	r4, [sp, #272]	; 0x110
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8002710:	9146      	str	r1, [sp, #280]	; 0x118
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8002712:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	2300      	movs	r3, #0
 800271a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800271e:	22a0      	movs	r2, #160	; 0xa0
 8002720:	2302      	movs	r3, #2
 8002722:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8002726:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 800272a:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 800272e:	f04f 0800 	mov.w	r8, #0
 8002732:	f04f 0905 	mov.w	r9, #5
 8002736:	2608      	movs	r6, #8
 8002738:	2705      	movs	r7, #5
 800273a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800273e:	2300      	movs	r3, #0
 8002740:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 8002744:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 8002748:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800274c:	f005 fcde 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 8002750:	b958      	cbnz	r0, 800276a <SystemClock_Config_For_OC+0x14e>
	HAL_PWREx_EnableUSBVoltageDetector();
 8002752:	f004 fd6b 	bl	800722c <HAL_PWREx_EnableUSBVoltageDetector>
		HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8002756:	4628      	mov	r0, r5
 8002758:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800275c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8002760:	f005 f8e6 	bl	8007930 <HAL_RCC_MCOConfig>
}
 8002764:	b04f      	add	sp, #316	; 0x13c
 8002766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Error_Handler();
 800276a:	f7ff fef7 	bl	800255c <Error_Handler>
 800276e:	bf00      	nop
 8002770:	58024800 	.word	0x58024800
 8002774:	58000400 	.word	0x58000400
 8002778:	58024400 	.word	0x58024400
 800277c:	000c0042 	.word	0x000c0042

08002780 <MX_TIM6_Init_Custom_Rate>:
{
 8002780:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 8002782:	4810      	ldr	r0, [pc, #64]	; (80027c4 <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002784:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8002786:	4c10      	ldr	r4, [pc, #64]	; (80027c8 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8002788:	b084      	sub	sp, #16
	htim6.Init.Period = 7679;
 800278a:	f641 51ff 	movw	r1, #7679	; 0x1dff
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800278e:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 8002790:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002792:	4620      	mov	r0, r4
	htim6.Init.Period = 7679;
 8002794:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002796:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8002798:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279a:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279c:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027a2:	f006 fda1 	bl	80092e8 <HAL_TIM_Base_Init>
 80027a6:	b950      	cbnz	r0, 80027be <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027a8:	4603      	mov	r3, r0
 80027aa:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027ac:	a901      	add	r1, sp, #4
 80027ae:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b0:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027b2:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027b4:	f006 ff5a 	bl	800966c <HAL_TIMEx_MasterConfigSynchronization>
 80027b8:	b908      	cbnz	r0, 80027be <MX_TIM6_Init_Custom_Rate+0x3e>
}
 80027ba:	b004      	add	sp, #16
 80027bc:	bd10      	pop	{r4, pc}
		Error_Handler();
 80027be:	f7ff fecd 	bl	800255c <Error_Handler>
 80027c2:	bf00      	nop
 80027c4:	40001000 	.word	0x40001000
 80027c8:	24009060 	.word	0x24009060
 80027cc:	00000000 	.word	0x00000000

080027d0 <main>:
{
 80027d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80027d4:	b0b7      	sub	sp, #220	; 0xdc
  HAL_Init();
 80027d6:	f000 feff 	bl	80035d8 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80027da:	4bd3      	ldr	r3, [pc, #844]	; (8002b28 <main+0x358>)
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80027e2:	d111      	bne.n	8002808 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80027e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027e8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80027ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80027f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027f4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002804:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800280a:	4ec8      	ldr	r6, [pc, #800]	; (8002b2c <main+0x35c>)
	SystemClock_Config_For_OC();
 800280c:	f7ff ff06 	bl	800261c <SystemClock_Config_For_OC>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002810:	2701      	movs	r7, #1
	  PeriphCommonClock_Config();
 8002812:	f7ff febd 	bl	8002590 <PeriphCommonClock_Config>
	HAL_Delay(20);  //needed for USB setup. USB somentimes (and almost always oh an Android phone) does not initialize
 8002816:	2014      	movs	r0, #20
 8002818:	f000 ff20 	bl	800365c <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	942e      	str	r4, [sp, #184]	; 0xb8
 800281e:	942f      	str	r4, [sp, #188]	; 0xbc
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002820:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	9430      	str	r4, [sp, #192]	; 0xc0
  HAL_GPIO_WritePin(TX_ENA_GPIO_Port, TX_ENA_Pin, GPIO_PIN_RESET);
 8002826:	4622      	mov	r2, r4
 8002828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800282c:	48c0      	ldr	r0, [pc, #768]	; (8002b30 <main+0x360>)
  GPIO_InitStruct.Pin = TX_ENA_Pin;
 800282e:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8002832:	f04f 0901 	mov.w	r9, #1
  hadc1.Instance = ADC1;
 8002836:	4dbf      	ldr	r5, [pc, #764]	; (8002b34 <main+0x364>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002838:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002840:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800284c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	9305      	str	r3, [sp, #20]
 8002856:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002858:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800285c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002860:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8002864:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	9306      	str	r3, [sp, #24]
 800286e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002870:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8002874:	433b      	orrs	r3, r7
 8002876:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800287a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800287e:	403b      	ands	r3, r7
 8002880:	9307      	str	r3, [sp, #28]
 8002882:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002884:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8002890:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	9308      	str	r3, [sp, #32]
 800289a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800289c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80028a0:	ea43 030b 	orr.w	r3, r3, fp
 80028a4:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80028a8:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80028ac:	ea03 030b 	and.w	r3, r3, fp
 80028b0:	9309      	str	r3, [sp, #36]	; 0x24
 80028b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(TX_ENA_GPIO_Port, TX_ENA_Pin, GPIO_PIN_RESET);
 80028b4:	f003 fe90 	bl	80065d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80028b8:	4622      	mov	r2, r4
 80028ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028be:	489e      	ldr	r0, [pc, #632]	; (8002b38 <main+0x368>)
 80028c0:	f003 fe8a 	bl	80065d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 80028c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028c8:	4b9c      	ldr	r3, [pc, #624]	; (8002b3c <main+0x36c>)
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80028ca:	a92c      	add	r1, sp, #176	; 0xb0
 80028cc:	489c      	ldr	r0, [pc, #624]	; (8002b40 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ce:	972e      	str	r7, [sp, #184]	; 0xb8
  GPIO_InitStruct.Pin = SwInt1_Pin;
 80028d0:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f003 fd62 	bl	800639c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TX_ENA_Pin;
 80028d8:	2202      	movs	r2, #2
 80028da:	2300      	movs	r3, #0
  HAL_GPIO_Init(TX_ENA_GPIO_Port, &GPIO_InitStruct);
 80028dc:	a92c      	add	r1, sp, #176	; 0xb0
 80028de:	4894      	ldr	r0, [pc, #592]	; (8002b30 <main+0x360>)
  GPIO_InitStruct.Pin = TX_ENA_Pin;
 80028e0:	e9cd 892c 	strd	r8, r9, [sp, #176]	; 0xb0
 80028e4:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028e8:	f44f 7800 	mov.w	r8, #512	; 0x200
  HAL_GPIO_Init(TX_ENA_GPIO_Port, &GPIO_InitStruct);
 80028ec:	f003 fd56 	bl	800639c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028f0:	f04f 0902 	mov.w	r9, #2
 80028f4:	2200      	movs	r2, #0
 80028f6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f8:	a92c      	add	r1, sp, #176	; 0xb0
 80028fa:	4891      	ldr	r0, [pc, #580]	; (8002b40 <main+0x370>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028fc:	9430      	str	r4, [sp, #192]	; 0xc0
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028fe:	e9cd 892c 	strd	r8, r9, [sp, #176]	; 0xb0
 8002902:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002906:	f44f 7880 	mov.w	r8, #256	; 0x100
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290a:	f003 fd47 	bl	800639c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800290e:	f04f 0901 	mov.w	r9, #1
 8002912:	2300      	movs	r3, #0
 8002914:	2200      	movs	r2, #0
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002916:	a92c      	add	r1, sp, #176	; 0xb0
 8002918:	4887      	ldr	r0, [pc, #540]	; (8002b38 <main+0x368>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800291a:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
 800291e:	e9cd 892c 	strd	r8, r9, [sp, #176]	; 0xb0
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002922:	f003 fd3b 	bl	800639c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8002926:	4622      	mov	r2, r4
 8002928:	2104      	movs	r1, #4
 800292a:	2028      	movs	r0, #40	; 0x28
 800292c:	f002 f816 	bl	800495c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002930:	2028      	movs	r0, #40	; 0x28
 8002932:	f002 f84d 	bl	80049d0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002936:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800293a:	4622      	mov	r2, r4
 800293c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800293e:	433b      	orrs	r3, r7
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002940:	200b      	movs	r0, #11
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002942:	f04f 0904 	mov.w	r9, #4
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002946:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  __HAL_RCC_DMA1_CLK_ENABLE();
 800294a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
 800294e:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002952:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002956:	403b      	ands	r3, r7
 8002958:	9304      	str	r3, [sp, #16]
 800295a:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800295c:	f001 fffe 	bl	800495c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002960:	200b      	movs	r0, #11
 8002962:	f002 f835 	bl	80049d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8002966:	4622      	mov	r2, r4
 8002968:	2102      	movs	r1, #2
 800296a:	200c      	movs	r0, #12
 800296c:	f001 fff6 	bl	800495c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002970:	200c      	movs	r0, #12
 8002972:	f002 f82d 	bl	80049d0 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002976:	4a73      	ldr	r2, [pc, #460]	; (8002b44 <main+0x374>)
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002978:	2303      	movs	r3, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800297a:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800297c:	82ae      	strh	r6, [r5, #20]
  ADC_MultiModeTypeDef multimode = {0};
 800297e:	940a      	str	r4, [sp, #40]	; 0x28
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002980:	9416      	str	r4, [sp, #88]	; 0x58
  ADC_ChannelConfTypeDef sConfig = {0};
 8002982:	9424      	str	r4, [sp, #144]	; 0x90
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002984:	941b      	str	r4, [sp, #108]	; 0x6c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002986:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002988:	61af      	str	r7, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800298a:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800298c:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800298e:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Instance = ADC1;
 8002992:	602a      	str	r2, [r5, #0]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002994:	62eb      	str	r3, [r5, #44]	; 0x2c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002996:	f8c5 9010 	str.w	r9, [r5, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800299a:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 800299e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80029a2:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 80029a6:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  ADC_ChannelConfTypeDef sConfig = {0};
 80029aa:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
 80029ae:	e9cd 4427 	strd	r4, r4, [sp, #156]	; 0x9c
 80029b2:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029b6:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029ba:	e9c5 ab01 	strd	sl, fp, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029be:	f001 fd6b 	bl	8004498 <HAL_ADC_Init>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	f040 81fb 	bne.w	8002dbe <main+0x5ee>
  multimode.Mode = ADC_DUALMODE_INTERL;
 80029c8:	2207      	movs	r2, #7
 80029ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80029ce:	a90a      	add	r1, sp, #40	; 0x28
 80029d0:	4628      	mov	r0, r5
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80029d2:	960c      	str	r6, [sp, #48]	; 0x30
  multimode.Mode = ADC_DUALMODE_INTERL;
 80029d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80029d8:	f001 ff44 	bl	8004864 <HAL_ADCEx_MultiModeConfigChannel>
 80029dc:	2800      	cmp	r0, #0
 80029de:	f040 81ee 	bne.w	8002dbe <main+0x5ee>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80029e2:	4a59      	ldr	r2, [pc, #356]	; (8002b48 <main+0x378>)
 80029e4:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80029e8:	4c58      	ldr	r4, [pc, #352]	; (8002b4c <main+0x37c>)
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80029ea:	a916      	add	r1, sp, #88	; 0x58
 80029ec:	4628      	mov	r0, r5
  AnalogWDGConfig.ITMode = ENABLE;
 80029ee:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80029f2:	9418      	str	r4, [sp, #96]	; 0x60
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80029f4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  AnalogWDGConfig.HighThreshold = 4094;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80029fe:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8002a02:	f001 fa27 	bl	8003e54 <HAL_ADC_AnalogWDGConfig>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	f040 81d8 	bne.w	8002dbe <main+0x5ee>
  sConfig.Channel = ADC_CHANNEL_5;
 8002a0e:	2200      	movs	r2, #0
  sConfig.OffsetSignedSaturation = DISABLE;
 8002a10:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
  sConfig.Channel = ADC_CHANNEL_5;
 8002a14:	f240 73ff 	movw	r3, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a18:	a924      	add	r1, sp, #144	; 0x90
 8002a1a:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8002a1c:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8002a20:	a33f      	add	r3, pc, #252	; (adr r3, 8002b20 <main+0x350>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a32:	f000 ffdf 	bl	80039f4 <HAL_ADC_ConfigChannel>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	f040 81c0 	bne.w	8002dbe <main+0x5ee>
  hadc2.Instance = ADC2;
 8002a3e:	4d44      	ldr	r5, [pc, #272]	; (8002b50 <main+0x380>)
 8002a40:	4a44      	ldr	r2, [pc, #272]	; (8002b54 <main+0x384>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002a42:	9010      	str	r0, [sp, #64]	; 0x40
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a44:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a46:	4628      	mov	r0, r5
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002a48:	82ae      	strh	r6, [r5, #20]
  hadc2.Init.NbrOfConversion = 1;
 8002a4a:	61af      	str	r7, [r5, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a4c:	772b      	strb	r3, [r5, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002a4e:	636b      	str	r3, [r5, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002a50:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hadc2.Instance = ADC2;
 8002a54:	602a      	str	r2, [r5, #0]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002a56:	9315      	str	r3, [sp, #84]	; 0x54
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a58:	e9c5 ab01 	strd	sl, fp, [r5, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a5c:	e9c5 3903 	strd	r3, r9, [r5, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002a60:	e9c5 380b 	strd	r3, r8, [r5, #44]	; 0x2c
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002a64:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8002a68:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a6c:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 8002a70:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8002a74:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a78:	f001 fd0e 	bl	8004498 <HAL_ADC_Init>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	f040 819e 	bne.w	8002dbe <main+0x5ee>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002a82:	4a31      	ldr	r2, [pc, #196]	; (8002b48 <main+0x378>)
 8002a84:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8002a88:	a910      	add	r1, sp, #64	; 0x40
 8002a8a:	4628      	mov	r0, r5
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8002a8c:	9412      	str	r4, [sp, #72]	; 0x48
  AnalogWDGConfig.ITMode = ENABLE;
 8002a8e:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002a92:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  AnalogWDGConfig.HighThreshold = 4094;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a9c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8002aa0:	f001 f9d8 	bl	8003e54 <HAL_ADC_AnalogWDGConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	f040 8189 	bne.w	8002dbe <main+0x5ee>
  sConfig.OffsetSignedSaturation = DISABLE;
 8002aac:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
  sConfig.Channel = ADC_CHANNEL_5;
 8002ab0:	2200      	movs	r2, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ab2:	a91c      	add	r1, sp, #112	; 0x70
 8002ab4:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8002ab6:	a41a      	add	r4, pc, #104	; (adr r4, 8002b20 <main+0x350>)
 8002ab8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002abc:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
 8002ac0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002ac4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8002ac8:	2204      	movs	r2, #4
 8002aca:	2300      	movs	r3, #0
 8002acc:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ad0:	f000 ff90 	bl	80039f4 <HAL_ADC_ConfigChannel>
 8002ad4:	4601      	mov	r1, r0
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	f040 8171 	bne.w	8002dbe <main+0x5ee>
  DAC_ChannelConfTypeDef sConfig = {0};
 8002adc:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8002ade:	4c1e      	ldr	r4, [pc, #120]	; (8002b58 <main+0x388>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8002ae0:	a82c      	add	r0, sp, #176	; 0xb0
 8002ae2:	f00a fc2f 	bl	800d344 <memset>
  hdac1.Instance = DAC1;
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <main+0x38c>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002ae8:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8002aea:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002aec:	f001 ff96 	bl	8004a1c <HAL_DAC_Init>
 8002af0:	4602      	mov	r2, r0
 8002af2:	2800      	cmp	r0, #0
 8002af4:	f040 8163 	bne.w	8002dbe <main+0x5ee>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002af8:	2000      	movs	r0, #0
 8002afa:	2116      	movs	r1, #22
 8002afc:	2600      	movs	r6, #0
 8002afe:	2701      	movs	r7, #1
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002b00:	9230      	str	r2, [sp, #192]	; 0xc0
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002b02:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002b06:	a92c      	add	r1, sp, #176	; 0xb0
 8002b08:	4620      	mov	r0, r4
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002b0a:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002b0e:	f002 f8c1 	bl	8004c94 <HAL_DAC_ConfigChannel>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2800      	cmp	r0, #0
 8002b16:	f040 8152 	bne.w	8002dbe <main+0x5ee>
 8002b1a:	e021      	b.n	8002b60 <main+0x390>
 8002b1c:	f3af 8000 	nop.w
 8002b20:	14f00020 	.word	0x14f00020
 8002b24:	00000006 	.word	0x00000006
 8002b28:	e000ed00 	.word	0xe000ed00
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	58020c00 	.word	0x58020c00
 8002b34:	240079c8 	.word	0x240079c8
 8002b38:	58020000 	.word	0x58020000
 8002b3c:	11110000 	.word	0x11110000
 8002b40:	58020800 	.word	0x58020800
 8002b44:	40022000 	.word	0x40022000
 8002b48:	7dc00000 	.word	0x7dc00000
 8002b4c:	14f00020 	.word	0x14f00020
 8002b50:	24002d70 	.word	0x24002d70
 8002b54:	40022100 	.word	0x40022100
 8002b58:	24002ccc 	.word	0x24002ccc
 8002b5c:	40007400 	.word	0x40007400
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002b60:	a92c      	add	r1, sp, #176	; 0xb0
 8002b62:	4620      	mov	r0, r4
 8002b64:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002b66:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002b68:	f002 f894 	bl	8004c94 <HAL_DAC_ConfigChannel>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	f040 8126 	bne.w	8002dbe <main+0x5ee>
  hlptim2.Instance = LPTIM2;
 8002b72:	48a6      	ldr	r0, [pc, #664]	; (8002e0c <main+0x63c>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002b74:	2300      	movs	r3, #0
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002b76:	f64f 71ff 	movw	r1, #65535	; 0xffff
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002b7a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  hlptim2.Instance = LPTIM2;
 8002b7e:	4ca4      	ldr	r4, [pc, #656]	; (8002e10 <main+0x640>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002b80:	6141      	str	r1, [r0, #20]
  hlptim2.Instance = LPTIM2;
 8002b82:	6004      	str	r4, [r0, #0]
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002b84:	6282      	str	r2, [r0, #40]	; 0x28
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002b86:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002b8a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002b8e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002b92:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8002b96:	f003 fd31 	bl	80065fc <HAL_LPTIM_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	f040 810e 	bne.w	8002dbe <main+0x5ee>
  htim6.Instance = TIM6;
 8002ba2:	4c9c      	ldr	r4, [pc, #624]	; (8002e14 <main+0x644>)
  htim6.Init.Period = 8191;
 8002ba4:	f641 71ff 	movw	r1, #8191	; 0x1fff
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ba8:	2280      	movs	r2, #128	; 0x80
  htim6.Instance = TIM6;
 8002baa:	4d9b      	ldr	r5, [pc, #620]	; (8002e18 <main+0x648>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bac:	900d      	str	r0, [sp, #52]	; 0x34
  htim6.Init.Prescaler = 0;
 8002bae:	6060      	str	r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bb0:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb2:	60a3      	str	r3, [r4, #8]
  htim6.Instance = TIM6;
 8002bb4:	6025      	str	r5, [r4, #0]
  htim6.Init.Period = 8191;
 8002bb6:	60e1      	str	r1, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bb8:	61a2      	str	r2, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bba:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bbe:	f006 fb93 	bl	80092e8 <HAL_TIM_Base_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	f040 80fa 	bne.w	8002dbe <main+0x5ee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002bca:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bcc:	a90d      	add	r1, sp, #52	; 0x34
 8002bce:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd0:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002bd2:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bd4:	f006 fd4a 	bl	800966c <HAL_TIMEx_MasterConfigSynchronization>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	f040 80ef 	bne.w	8002dbe <main+0x5ee>
  huart3.Instance = USART3;
 8002be0:	4c8e      	ldr	r4, [pc, #568]	; (8002e1c <main+0x64c>)
  huart3.Init.BaudRate = 115200;
 8002be2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002be6:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 8002be8:	f505 5560 	add.w	r5, r5, #14336	; 0x3800
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bec:	4620      	mov	r0, r4
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bee:	6123      	str	r3, [r4, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bf0:	62a3      	str	r3, [r4, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bf2:	6162      	str	r2, [r4, #20]
  huart3.Init.BaudRate = 115200;
 8002bf4:	e9c4 5100 	strd	r5, r1, [r4]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bf8:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bfc:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c00:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c04:	f006 ffbc 	bl	8009b80 <HAL_UART_Init>
 8002c08:	4601      	mov	r1, r0
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	f040 80d7 	bne.w	8002dbe <main+0x5ee>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c10:	4620      	mov	r0, r4
 8002c12:	f007 fab9 	bl	800a188 <HAL_UARTEx_SetTxFifoThreshold>
 8002c16:	4601      	mov	r1, r0
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	f040 80d0 	bne.w	8002dbe <main+0x5ee>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f007 faf0 	bl	800a204 <HAL_UARTEx_SetRxFifoThreshold>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	f040 80ca 	bne.w	8002dbe <main+0x5ee>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f007 fa8e 	bl	800a14c <HAL_UARTEx_DisableFifoMode>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	f040 80c4 	bne.w	8002dbe <main+0x5ee>
  MX_USB_DEVICE_Init();
 8002c36:	f008 ff47 	bl	800bac8 <MX_USB_DEVICE_Init>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002c3a:	4979      	ldr	r1, [pc, #484]	; (8002e20 <main+0x650>)
 8002c3c:	694b      	ldr	r3, [r1, #20]
 8002c3e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8002c42:	d124      	bne.n	8002c8e <main+0x4be>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002c44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c48:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002c4c:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002c50:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002c54:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c58:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8002c5c:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002c5e:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c62:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002c64:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
      } while (ways-- != 0U);
 8002c68:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002c6a:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	d1f8      	bne.n	8002c64 <main+0x494>
    } while(sets-- != 0U);
 8002c72:	3c20      	subs	r4, #32
 8002c74:	f114 0f20 	cmn.w	r4, #32
 8002c78:	d1f1      	bne.n	8002c5e <main+0x48e>
 8002c7a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002c7e:	694b      	ldr	r3, [r1, #20]
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	614b      	str	r3, [r1, #20]
 8002c86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c8a:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8002c8e:	f7ff fd77 	bl	8002780 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8002c92:	2100      	movs	r1, #0
 8002c94:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c98:	4862      	ldr	r0, [pc, #392]	; (8002e24 <main+0x654>)
 8002c9a:	f001 fd09 	bl	80046b0 <HAL_ADCEx_Calibration_Start>
 8002c9e:	4601      	mov	r1, r0
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	f040 808c 	bne.w	8002dbe <main+0x5ee>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8002ca6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002caa:	485f      	ldr	r0, [pc, #380]	; (8002e28 <main+0x658>)
 8002cac:	f001 fd00 	bl	80046b0 <HAL_ADCEx_Calibration_Start>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	f040 8083 	bne.w	8002dbe <main+0x5ee>
	volume= 0.1;
 8002cb8:	4b5c      	ldr	r3, [pc, #368]	; (8002e2c <main+0x65c>)
	SetFstep(2);
 8002cba:	2002      	movs	r0, #2
	volume= 0.1;
 8002cbc:	4a5c      	ldr	r2, [pc, #368]	; (8002e30 <main+0x660>)
	AMindex  = LSBindex = 1;
 8002cbe:	2501      	movs	r5, #1
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002cc0:	f44f 6600 	mov.w	r6, #2048	; 0x800
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002cc4:	4f5b      	ldr	r7, [pc, #364]	; (8002e34 <main+0x664>)
	volume= 0.1;
 8002cc6:	601a      	str	r2, [r3, #0]
	SetFstep(2);
 8002cc8:	f7fd ff12 	bl	8000af0 <SetFstep>
	cwpitch = CWPITCH;
 8002ccc:	4b5a      	ldr	r3, [pc, #360]	; (8002e38 <main+0x668>)
	meanavg = 0.f;
 8002cce:	2000      	movs	r0, #0
	cwpitch = CWPITCH;
 8002cd0:	495a      	ldr	r1, [pc, #360]	; (8002e3c <main+0x66c>)
	bw[AM]   = bw[LSB]  = Wide;
 8002cd2:	f04f 3c01 	mov.w	ip, #16843009	; 0x1010101
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002cd6:	4622      	mov	r2, r4
	cwpitch = CWPITCH;
 8002cd8:	6019      	str	r1, [r3, #0]
	meanavg = 0.f;
 8002cda:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <main+0x670>)
	os_time = 0;
 8002cdc:	4959      	ldr	r1, [pc, #356]	; (8002e44 <main+0x674>)
	meanavg = 0.f;
 8002cde:	6018      	str	r0, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8002ce0:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <main+0x678>)
 8002ce2:	485a      	ldr	r0, [pc, #360]	; (8002e4c <main+0x67c>)
	os_time = 0;
 8002ce4:	600c      	str	r4, [r1, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002ce6:	4631      	mov	r1, r6
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8002ce8:	6018      	str	r0, [r3, #0]
	Muted   = false;
 8002cea:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <main+0x680>)
	AMindex  = LSBindex = 1;
 8002cec:	4859      	ldr	r0, [pc, #356]	; (8002e54 <main+0x684>)
	Muted   = false;
 8002cee:	701c      	strb	r4, [r3, #0]
	AMindex  = LSBindex = 1;
 8002cf0:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <main+0x688>)
 8002cf2:	8005      	strh	r5, [r0, #0]
 8002cf4:	801d      	strh	r5, [r3, #0]
	USBindex = CWindex  = 1;
 8002cf6:	4859      	ldr	r0, [pc, #356]	; (8002e5c <main+0x68c>)
 8002cf8:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <main+0x690>)
 8002cfa:	8005      	strh	r5, [r0, #0]
 8002cfc:	801d      	strh	r5, [r3, #0]
	agc[AM]  = agc[LSB] = Slow;
 8002cfe:	4859      	ldr	r0, [pc, #356]	; (8002e64 <main+0x694>)
	bw[AM]   = bw[LSB]  = Wide;
 8002d00:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <main+0x698>)
	agc[AM]  = agc[LSB] = Slow;
 8002d02:	4c5a      	ldr	r4, [pc, #360]	; (8002e6c <main+0x69c>)
	bw[AM]   = bw[LSB]  = Wide;
 8002d04:	f8c3 c000 	str.w	ip, [r3]
	agc[AM]  = agc[LSB] = Slow;
 8002d08:	6004      	str	r4, [r0, #0]
	AGC_decay[Fast] = 0.9995f;
 8002d0a:	4b59      	ldr	r3, [pc, #356]	; (8002e70 <main+0x6a0>)
 8002d0c:	4c59      	ldr	r4, [pc, #356]	; (8002e74 <main+0x6a4>)
	AGC_decay[Slow] = 0.99995f;
 8002d0e:	485a      	ldr	r0, [pc, #360]	; (8002e78 <main+0x6a8>)
	AGC_decay[Fast] = 0.9995f;
 8002d10:	601c      	str	r4, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8002d12:	6058      	str	r0, [r3, #4]
	Hangcount[Fast] = 2;
 8002d14:	4c59      	ldr	r4, [pc, #356]	; (8002e7c <main+0x6ac>)
 8002d16:	4b5a      	ldr	r3, [pc, #360]	; (8002e80 <main+0x6b0>)
	AgcThreshold    = 1.92e-4f;
 8002d18:	485a      	ldr	r0, [pc, #360]	; (8002e84 <main+0x6b4>)
	Hangcount[Fast] = 2;
 8002d1a:	601c      	str	r4, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8002d1c:	4c5a      	ldr	r4, [pc, #360]	; (8002e88 <main+0x6b8>)
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <main+0x6bc>)
	AgcThreshold    = 1.92e-4f;
 8002d20:	6004      	str	r4, [r0, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002d22:	485b      	ldr	r0, [pc, #364]	; (8002e90 <main+0x6c0>)
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002d24:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002d26:	f003 fc57 	bl	80065d8 <HAL_GPIO_WritePin>
	__HAL_RCC_PLL2_DISABLE();
 8002d2a:	4b5a      	ldr	r3, [pc, #360]	; (8002e94 <main+0x6c4>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8002d2c:	221a      	movs	r2, #26
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8002d2e:	485a      	ldr	r0, [pc, #360]	; (8002e98 <main+0x6c8>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8002d30:	9203      	str	r2, [sp, #12]
	__HAL_RCC_PLL2_DISABLE();
 8002d32:	681a      	ldr	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002d34:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002e9c <main+0x6cc>
	__HAL_RCC_PLL2_DISABLE();
 8002d38:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002d3c:	edd7 7a00 	vldr	s15, [r7]
 8002d40:	4957      	ldr	r1, [pc, #348]	; (8002ea0 <main+0x6d0>)
	__HAL_RCC_PLL2_DISABLE();
 8002d42:	601a      	str	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002d44:	ee67 7a87 	vmul.f32	s15, s15, s14
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8002d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002d4a:	4c56      	ldr	r4, [pc, #344]	; (8002ea4 <main+0x6d4>)
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8002d4c:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8002d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
 8002d56:	9a03      	ldr	r2, [sp, #12]
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d5e:	4310      	orrs	r0, r2
 8002d60:	6398      	str	r0, [r3, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d68:	601a      	str	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002d6a:	edc1 7a00 	vstr	s15, [r1]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8002d6e:	f7fe ff41 	bl	8001bf4 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002d72:	4b4d      	ldr	r3, [pc, #308]	; (8002ea8 <main+0x6d8>)
 8002d74:	2204      	movs	r2, #4
 8002d76:	2140      	movs	r1, #64	; 0x40
 8002d78:	484c      	ldr	r0, [pc, #304]	; (8002eac <main+0x6dc>)
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	9601      	str	r6, [sp, #4]
 8002d7e:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <main+0x6e0>)
 8002d80:	f009 fd3c 	bl	800c7fc <arm_fir_decimate_init_f32>
 8002d84:	7020      	strb	r0, [r4, #0]
	while(arc != ARM_MATH_SUCCESS)
 8002d86:	b100      	cbz	r0, 8002d8a <main+0x5ba>
 8002d88:	e7fe      	b.n	8002d88 <main+0x5b8>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8002d8a:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <main+0x6e4>)
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	2140      	movs	r1, #64	; 0x40
 8002d90:	4849      	ldr	r0, [pc, #292]	; (8002eb8 <main+0x6e8>)
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	9601      	str	r6, [sp, #4]
 8002d96:	4b46      	ldr	r3, [pc, #280]	; (8002eb0 <main+0x6e0>)
 8002d98:	f009 fd30 	bl	800c7fc <arm_fir_decimate_init_f32>
 8002d9c:	7020      	strb	r0, [r4, #0]
	while(arc != ARM_MATH_SUCCESS)
 8002d9e:	b980      	cbnz	r0, 8002dc2 <main+0x5f2>
	Load_Presets();
 8002da0:	f7fd fcd2 	bl	8000748 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8002da4:	4628      	mov	r0, r5
 8002da6:	f7fd fdb1 	bl	800090c <Tune_Preset>
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8002daa:	f7ff f9b9 	bl	8002120 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8002dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db2:	4942      	ldr	r1, [pc, #264]	; (8002ebc <main+0x6ec>)
 8002db4:	481b      	ldr	r0, [pc, #108]	; (8002e24 <main+0x654>)
 8002db6:	f001 fccd 	bl	8004754 <HAL_ADCEx_MultiModeStart_DMA>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	b110      	cbz	r0, 8002dc4 <main+0x5f4>
    Error_Handler();
 8002dbe:	f7ff fbcd 	bl	800255c <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8002dc2:	e7fe      	b.n	8002dc2 <main+0x5f2>
	HAL_TIM_Base_Start(&htim6);
 8002dc4:	4813      	ldr	r0, [pc, #76]	; (8002e14 <main+0x644>)
 8002dc6:	f006 fb3d 	bl	8009444 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002dca:	4621      	mov	r1, r4
 8002dcc:	483c      	ldr	r0, [pc, #240]	; (8002ec0 <main+0x6f0>)
 8002dce:	f001 fe3b 	bl	8004a48 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8002dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd6:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <main+0x6f4>)
 8002dd8:	4621      	mov	r1, r4
 8002dda:	4839      	ldr	r0, [pc, #228]	; (8002ec0 <main+0x6f0>)
 8002ddc:	9400      	str	r4, [sp, #0]
 8002dde:	f001 fe5f 	bl	8004aa0 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8002de2:	4620      	mov	r0, r4
 8002de4:	f000 fc52 	bl	800368c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002de8:	2110      	movs	r1, #16
 8002dea:	4835      	ldr	r0, [pc, #212]	; (8002ec0 <main+0x6f0>)
 8002dec:	f001 fe2c 	bl	8004a48 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
 8002df0:	4622      	mov	r2, r4
 8002df2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002df6:	2110      	movs	r1, #16
 8002df8:	4831      	ldr	r0, [pc, #196]	; (8002ec0 <main+0x6f0>)
 8002dfa:	f001 fee1 	bl	8004bc0 <HAL_DAC_SetValue>
		UserInput();
 8002dfe:	f7ff fa83 	bl	8002308 <UserInput>
		HAL_Delay(100);
 8002e02:	2064      	movs	r0, #100	; 0x64
 8002e04:	f000 fc2a 	bl	800365c <HAL_Delay>
		if (ubADCDualConversionComplete == RESET)
 8002e08:	e7f9      	b.n	8002dfe <main+0x62e>
 8002e0a:	bf00      	nop
 8002e0c:	24007a34 	.word	0x24007a34
 8002e10:	58002400 	.word	0x58002400
 8002e14:	24009060 	.word	0x24009060
 8002e18:	40001000 	.word	0x40001000
 8002e1c:	24002ce0 	.word	0x24002ce0
 8002e20:	e000ed00 	.word	0xe000ed00
 8002e24:	240079c8 	.word	0x240079c8
 8002e28:	24002d70 	.word	0x24002d70
 8002e2c:	24004604 	.word	0x24004604
 8002e30:	3dcccccd 	.word	0x3dcccccd
 8002e34:	240046ac 	.word	0x240046ac
 8002e38:	2400a0c0 	.word	0x2400a0c0
 8002e3c:	44228000 	.word	0x44228000
 8002e40:	2400c5e0 	.word	0x2400c5e0
 8002e44:	2400a0cc 	.word	0x2400a0cc
 8002e48:	240090b0 	.word	0x240090b0
 8002e4c:	3f7cac08 	.word	0x3f7cac08
 8002e50:	240079c4 	.word	0x240079c4
 8002e54:	2400da00 	.word	0x2400da00
 8002e58:	2400da02 	.word	0x2400da02
 8002e5c:	240090b4 	.word	0x240090b4
 8002e60:	24008278 	.word	0x24008278
 8002e64:	24007a2c 	.word	0x24007a2c
 8002e68:	240090b8 	.word	0x240090b8
 8002e6c:	00010101 	.word	0x00010101
 8002e70:	2400c5ec 	.word	0x2400c5ec
 8002e74:	3f7fdf3b 	.word	0x3f7fdf3b
 8002e78:	3f7ffcb9 	.word	0x3f7ffcb9
 8002e7c:	001e0002 	.word	0x001e0002
 8002e80:	2400a0c4 	.word	0x2400a0c4
 8002e84:	2400a0bc 	.word	0x2400a0bc
 8002e88:	3949539c 	.word	0x3949539c
 8002e8c:	4b189680 	.word	0x4b189680
 8002e90:	58020c00 	.word	0x58020c00
 8002e94:	58024400 	.word	0x58024400
 8002e98:	01012e00 	.word	0x01012e00
 8002e9c:	3b800000 	.word	0x3b800000
 8002ea0:	24008274 	.word	0x24008274
 8002ea4:	2400c5e4 	.word	0x2400c5e4
 8002ea8:	24004fb4 	.word	0x24004fb4
 8002eac:	240008a4 	.word	0x240008a4
 8002eb0:	240000f4 	.word	0x240000f4
 8002eb4:	2400a0d0 	.word	0x2400a0d0
 8002eb8:	24008af8 	.word	0x24008af8
 8002ebc:	2400ce00 	.word	0x2400ce00
 8002ec0:	24002ccc 	.word	0x24002ccc
 8002ec4:	240070c0 	.word	0x240070c0

08002ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	4c14      	ldr	r4, [pc, #80]	; (8002f1c <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002ecc:	2102      	movs	r1, #2
{
 8002ece:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002ed0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002ed6:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	430b      	orrs	r3, r1
 8002edc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8002ee0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002eea:	f001 fd37 	bl	800495c <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8002eee:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8002ef2:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8002ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8002efc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8002f08:	f000 fbc0 	bl	800368c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002f0c:	f000 fbd2 	bl	80036b4 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002f10:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f12:	b002      	add	sp, #8
 8002f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002f18:	f000 bbc2 	b.w	80036a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8002f1c:	58024400 	.word	0x58024400

08002f20 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002f20:	4951      	ldr	r1, [pc, #324]	; (8003068 <HAL_ADC_MspInit+0x148>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f22:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8002f24:	6802      	ldr	r2, [r0, #0]
{
 8002f26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hadc->Instance==ADC1)
 8002f2a:	428a      	cmp	r2, r1
{
 8002f2c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2e:	9305      	str	r3, [sp, #20]
 8002f30:	9304      	str	r3, [sp, #16]
 8002f32:	9308      	str	r3, [sp, #32]
 8002f34:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(hadc->Instance==ADC1)
 8002f38:	d02d      	beq.n	8002f96 <HAL_ADC_MspInit+0x76>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_ADC_MspInit+0x14c>)
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d002      	beq.n	8002f46 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f40:	b00b      	add	sp, #44	; 0x2c
 8002f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f46:	4a4a      	ldr	r2, [pc, #296]	; (8003070 <HAL_ADC_MspInit+0x150>)
 8002f48:	6813      	ldr	r3, [r2, #0]
 8002f4a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f4c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f50:	d079      	beq.n	8003046 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f52:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f56:	2602      	movs	r6, #2
 8002f58:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	a904      	add	r1, sp, #16
 8002f60:	4845      	ldr	r0, [pc, #276]	; (8003078 <HAL_ADC_MspInit+0x158>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	f044 0402 	orr.w	r4, r4, #2
 8002f66:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8002f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	9303      	str	r3, [sp, #12]
 8002f76:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f78:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f003 fa0e 	bl	800639c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002f80:	462a      	mov	r2, r5
 8002f82:	4629      	mov	r1, r5
 8002f84:	2012      	movs	r0, #18
 8002f86:	f001 fce9 	bl	800495c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002f8a:	2012      	movs	r0, #18
 8002f8c:	f001 fd20 	bl	80049d0 <HAL_NVIC_EnableIRQ>
}
 8002f90:	b00b      	add	sp, #44	; 0x2c
 8002f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f96:	4a36      	ldr	r2, [pc, #216]	; (8003070 <HAL_ADC_MspInit+0x150>)
 8002f98:	4604      	mov	r4, r0
 8002f9a:	6813      	ldr	r3, [r2, #0]
 8002f9c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f9e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002fa0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002fa2:	d042      	beq.n	800302a <HAL_ADC_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa4:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fa8:	f04f 0802 	mov.w	r8, #2
 8002fac:	f04f 0903 	mov.w	r9, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb4:	a904      	add	r1, sp, #16
 8002fb6:	4830      	ldr	r0, [pc, #192]	; (8003078 <HAL_ADC_MspInit+0x158>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fb8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fbc:	f042 0202 	orr.w	r2, r2, #2
    hdma_adc1.Instance = DMA1_Stream0;
 8002fc0:	4d2e      	ldr	r5, [pc, #184]	; (800307c <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fd4:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd8:	f003 f9e0 	bl	800639c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8002fdc:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_ADC_MspInit+0x160>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fde:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002fe2:	f04f 0c09 	mov.w	ip, #9
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fe6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fea:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Stream0;
 8002fee:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ff4:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ff6:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff8:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffa:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ffc:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ffe:	f8c5 c004 	str.w	ip, [r5, #4]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003002:	e9c5 7105 	strd	r7, r1, [r5, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003006:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800300a:	f001 fff7 	bl	8004ffc <HAL_DMA_Init>
 800300e:	bb40      	cbnz	r0, 8003062 <HAL_ADC_MspInit+0x142>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003014:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003016:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003018:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800301a:	f001 fc9f 	bl	800495c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800301e:	2012      	movs	r0, #18
 8003020:	f001 fcd6 	bl	80049d0 <HAL_NVIC_EnableIRQ>
}
 8003024:	b00b      	add	sp, #44	; 0x2c
 8003026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_ADC_MspInit+0x154>)
 800302c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003030:	f042 0220 	orr.w	r2, r2, #32
 8003034:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	9b00      	ldr	r3, [sp, #0]
 8003044:	e7ae      	b.n	8002fa4 <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_ADC_MspInit+0x154>)
 8003048:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800304c:	f042 0220 	orr.w	r2, r2, #32
 8003050:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	9302      	str	r3, [sp, #8]
 800305e:	9b02      	ldr	r3, [sp, #8]
 8003060:	e777      	b.n	8002f52 <HAL_ADC_MspInit+0x32>
      Error_Handler();
 8003062:	f7ff fa7b 	bl	800255c <Error_Handler>
 8003066:	e7d3      	b.n	8003010 <HAL_ADC_MspInit+0xf0>
 8003068:	40022000 	.word	0x40022000
 800306c:	40022100 	.word	0x40022100
 8003070:	2400066c 	.word	0x2400066c
 8003074:	58024400 	.word	0x58024400
 8003078:	58020400 	.word	0x58020400
 800307c:	24008a7c 	.word	0x24008a7c
 8003080:	40020010 	.word	0x40020010

08003084 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_DAC_MspInit+0xc4>)
 8003086:	6802      	ldr	r2, [r0, #0]
{
 8003088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hdac->Instance==DAC1)
 800308c:	429a      	cmp	r2, r3
{
 800308e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f04f 0400 	mov.w	r4, #0
 8003094:	9403      	str	r4, [sp, #12]
 8003096:	9402      	str	r4, [sp, #8]
 8003098:	9406      	str	r4, [sp, #24]
 800309a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hdac->Instance==DAC1)
 800309e:	d002      	beq.n	80030a6 <HAL_DAC_MspInit+0x22>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80030a0:	b009      	add	sp, #36	; 0x24
 80030a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_DAC_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030a8:	f04f 0830 	mov.w	r8, #48	; 0x30
 80030ac:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b0:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC12_CLK_ENABLE();
 80030b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80030b6:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b8:	4825      	ldr	r0, [pc, #148]	; (8003150 <HAL_DAC_MspInit+0xcc>)
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030ba:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 80030be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80030c2:	4e24      	ldr	r6, [pc, #144]	; (8003154 <HAL_DAC_MspInit+0xd0>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 80030c4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80030c8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80030cc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80030d0:	9200      	str	r2, [sp, #0]
 80030d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80030e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f2:	f003 f953 	bl	800639c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80030f6:	4b18      	ldr	r3, [pc, #96]	; (8003158 <HAL_DAC_MspInit+0xd4>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030f8:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80030fa:	f04f 0c43 	mov.w	ip, #67	; 0x43
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003106:	6033      	str	r3, [r6, #0]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003108:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800310c:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800310e:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003110:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003112:	e9c6 c001 	strd	ip, r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003116:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003118:	e9c6 7104 	strd	r7, r1, [r6, #16]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800311c:	e9c6 2306 	strd	r2, r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003120:	f001 ff6c 	bl	8004ffc <HAL_DMA_Init>
 8003124:	b960      	cbnz	r0, 8003140 <HAL_DAC_MspInit+0xbc>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800312a:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800312c:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800312e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003130:	f001 fc14 	bl	800495c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003134:	2036      	movs	r0, #54	; 0x36
 8003136:	f001 fc4b 	bl	80049d0 <HAL_NVIC_EnableIRQ>
}
 800313a:	b009      	add	sp, #36	; 0x24
 800313c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8003140:	f7ff fa0c 	bl	800255c <Error_Handler>
 8003144:	e7ef      	b.n	8003126 <HAL_DAC_MspInit+0xa2>
 8003146:	bf00      	nop
 8003148:	40007400 	.word	0x40007400
 800314c:	58024400 	.word	0x58024400
 8003150:	58020000 	.word	0x58020000
 8003154:	2400460c 	.word	0x2400460c
 8003158:	40020028 	.word	0x40020028

0800315c <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315e:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8003160:	6801      	ldr	r1, [r0, #0]
{
 8003162:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlptim->Instance==LPTIM2)
 8003164:	4291      	cmp	r1, r2
{
 8003166:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800316c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003170:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8003172:	d001      	beq.n	8003178 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8003174:	b009      	add	sp, #36	; 0x24
 8003176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 800317a:	2603      	movs	r6, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800317c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003180:	2502      	movs	r5, #2
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003182:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003186:	a902      	add	r1, sp, #8
 8003188:	4812      	ldr	r0, [pc, #72]	; (80031d4 <HAL_LPTIM_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800318a:	2700      	movs	r7, #0
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800318c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003190:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003194:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003198:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800319c:	9200      	str	r2, [sp, #0]
 800319e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80031a4:	f042 0202 	orr.w	r2, r2, #2
 80031a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80031ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80031b0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031b2:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80031c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	f003 f8ea 	bl	800639c <HAL_GPIO_Init>
}
 80031c8:	b009      	add	sp, #36	; 0x24
 80031ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031cc:	58002400 	.word	0x58002400
 80031d0:	58024400 	.word	0x58024400
 80031d4:	58020400 	.word	0x58020400

080031d8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_TIM_Base_MspInit+0x40>)
 80031da:	6802      	ldr	r2, [r0, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d000      	beq.n	80031e2 <HAL_TIM_Base_MspInit+0xa>
 80031e0:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_TIM_Base_MspInit+0x44>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	2101      	movs	r1, #1
 80031e8:	2036      	movs	r0, #54	; 0x36
{
 80031ea:	b510      	push	{r4, lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031ec:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 80031f0:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031f2:	f044 0410 	orr.w	r4, r4, #16
 80031f6:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80031fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003206:	f001 fba9 	bl	800495c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800320a:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800320c:	b002      	add	sp, #8
 800320e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003212:	f001 bbdd 	b.w	80049d0 <HAL_NVIC_EnableIRQ>
 8003216:	bf00      	nop
 8003218:	40001000 	.word	0x40001000
 800321c:	58024400 	.word	0x58024400

08003220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	2400      	movs	r4, #0
{
 8003226:	b0b8      	sub	sp, #224	; 0xe0
 8003228:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800322a:	22bc      	movs	r2, #188	; 0xbc
 800322c:	4621      	mov	r1, r4
 800322e:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	9408      	str	r4, [sp, #32]
 8003232:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003236:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800323a:	f00a f883 	bl	800d344 <memset>
  if(huart->Instance==USART3)
 800323e:	682a      	ldr	r2, [r5, #0]
 8003240:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <HAL_UART_MspInit+0xe0>)
 8003242:	429a      	cmp	r2, r3
 8003244:	d002      	beq.n	800324c <HAL_UART_MspInit+0x2c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003246:	b038      	add	sp, #224	; 0xe0
 8003248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800324c:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800324e:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003250:	9426      	str	r4, [sp, #152]	; 0x98
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003252:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003254:	f004 ff5a 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 8003258:	2800      	cmp	r0, #0
 800325a:	d14d      	bne.n	80032f8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800325c:	4b29      	ldr	r3, [pc, #164]	; (8003304 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800325e:	2400      	movs	r4, #0
 8003260:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003262:	f04f 0807 	mov.w	r8, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8003266:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800326a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800326e:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003270:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003272:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003276:	4824      	ldr	r0, [pc, #144]	; (8003308 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003278:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800327c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003280:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003284:	9201      	str	r2, [sp, #4]
 8003286:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003288:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800328c:	f042 0202 	orr.w	r2, r2, #2
 8003290:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003294:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003298:	f002 0202 	and.w	r2, r2, #2
 800329c:	9202      	str	r2, [sp, #8]
 800329e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80032a4:	f042 0208 	orr.w	r2, r2, #8
 80032a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80032ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032b0:	f8cd 8020 	str.w	r8, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	9303      	str	r3, [sp, #12]
 80032ba:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80032bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80032c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	f003 f86a 	bl	800639c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032c8:	2302      	movs	r3, #2
 80032ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ce:	a904      	add	r1, sp, #16
 80032d0:	480e      	ldr	r0, [pc, #56]	; (800330c <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032d2:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032da:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032de:	f003 f85d 	bl	800639c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2101      	movs	r1, #1
 80032e6:	2027      	movs	r0, #39	; 0x27
 80032e8:	f001 fb38 	bl	800495c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032ec:	2027      	movs	r0, #39	; 0x27
 80032ee:	f001 fb6f 	bl	80049d0 <HAL_NVIC_EnableIRQ>
}
 80032f2:	b038      	add	sp, #224	; 0xe0
 80032f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 80032f8:	f7ff f930 	bl	800255c <Error_Handler>
 80032fc:	e7ae      	b.n	800325c <HAL_UART_MspInit+0x3c>
 80032fe:	bf00      	nop
 8003300:	40004800 	.word	0x40004800
 8003304:	58024400 	.word	0x58024400
 8003308:	58020400 	.word	0x58020400
 800330c:	58020c00 	.word	0x58020c00

08003310 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop

08003314 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003314:	e7fe      	b.n	8003314 <HardFault_Handler>
 8003316:	bf00      	nop

08003318 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003318:	e7fe      	b.n	8003318 <MemManage_Handler>
 800331a:	bf00      	nop

0800331c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800331c:	e7fe      	b.n	800331c <BusFault_Handler>
 800331e:	bf00      	nop

08003320 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003320:	e7fe      	b.n	8003320 <UsageFault_Handler>
 8003322:	bf00      	nop

08003324 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8003324:	f000 b930 	b.w	8003588 <ADC3_IRQHandler>

08003328 <DebugMon_Handler>:
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop

0800332c <PendSV_Handler>:
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop

08003330 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003330:	f000 b982 	b.w	8003638 <HAL_IncTick>

08003334 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003334:	4801      	ldr	r0, [pc, #4]	; (800333c <DMA1_Stream0_IRQHandler+0x8>)
 8003336:	f002 bcd3 	b.w	8005ce0 <HAL_DMA_IRQHandler>
 800333a:	bf00      	nop
 800333c:	24008a7c 	.word	0x24008a7c

08003340 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003340:	4801      	ldr	r0, [pc, #4]	; (8003348 <DMA1_Stream1_IRQHandler+0x8>)
 8003342:	f002 bccd 	b.w	8005ce0 <HAL_DMA_IRQHandler>
 8003346:	bf00      	nop
 8003348:	2400460c 	.word	0x2400460c

0800334c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800334c:	4804      	ldr	r0, [pc, #16]	; (8003360 <ADC_IRQHandler+0x14>)
{
 800334e:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 8003350:	f000 f9d2 	bl	80036f8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003354:	4803      	ldr	r0, [pc, #12]	; (8003364 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 800335a:	f000 b9cd 	b.w	80036f8 <HAL_ADC_IRQHandler>
 800335e:	bf00      	nop
 8003360:	240079c8 	.word	0x240079c8
 8003364:	24002d70 	.word	0x24002d70

08003368 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003368:	4801      	ldr	r0, [pc, #4]	; (8003370 <USART3_IRQHandler+0x8>)
 800336a:	f006 b9e9 	b.w	8009740 <HAL_UART_IRQHandler>
 800336e:	bf00      	nop
 8003370:	24002ce0 	.word	0x24002ce0

08003374 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003374:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003378:	f003 b932 	b.w	80065e0 <HAL_GPIO_EXTI_IRQHandler>

0800337c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800337c:	4804      	ldr	r0, [pc, #16]	; (8003390 <TIM6_DAC_IRQHandler+0x14>)
{
 800337e:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8003380:	f001 fc54 	bl	8004c2c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003384:	4803      	ldr	r0, [pc, #12]	; (8003394 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800338a:	f006 b8b7 	b.w	80094fc <HAL_TIM_IRQHandler>
 800338e:	bf00      	nop
 8003390:	24002ccc 	.word	0x24002ccc
 8003394:	24009060 	.word	0x24009060

08003398 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <OTG_FS_IRQHandler+0x8>)
 800339a:	f003 ba5b 	b.w	8006854 <HAL_PCD_IRQHandler>
 800339e:	bf00      	nop
 80033a0:	2400eed4 	.word	0x2400eed4

080033a4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80033a4:	2001      	movs	r0, #1
 80033a6:	4770      	bx	lr

080033a8 <_kill>:

int _kill(int pid, int sig)
{
 80033a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80033aa:	f009 ff93 	bl	800d2d4 <__errno>
 80033ae:	2216      	movs	r2, #22
 80033b0:	4603      	mov	r3, r0
	return -1;
}
 80033b2:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	bd08      	pop	{r3, pc}
 80033ba:	bf00      	nop

080033bc <_exit>:

void _exit (int status)
{
 80033bc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80033be:	f009 ff89 	bl	800d2d4 <__errno>
 80033c2:	2316      	movs	r3, #22
 80033c4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80033c6:	e7fe      	b.n	80033c6 <_exit+0xa>

080033c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033c8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ca:	1e16      	subs	r6, r2, #0
 80033cc:	dd07      	ble.n	80033de <_read+0x16>
 80033ce:	460c      	mov	r4, r1
 80033d0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80033d2:	f3af 8000 	nop.w
 80033d6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033da:	42a5      	cmp	r5, r4
 80033dc:	d1f9      	bne.n	80033d2 <_read+0xa>
	}

return len;
}
 80033de:	4630      	mov	r0, r6
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
 80033e2:	bf00      	nop

080033e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033e4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e6:	1e16      	subs	r6, r2, #0
 80033e8:	dd07      	ble.n	80033fa <_write+0x16>
 80033ea:	460c      	mov	r4, r1
 80033ec:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80033ee:	f814 0b01 	ldrb.w	r0, [r4], #1
 80033f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f6:	42ac      	cmp	r4, r5
 80033f8:	d1f9      	bne.n	80033ee <_write+0xa>
	}
	return len;
}
 80033fa:	4630      	mov	r0, r6
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	bf00      	nop

08003400 <_close>:

int _close(int file)
{
	return -1;
}
 8003400:	f04f 30ff 	mov.w	r0, #4294967295
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800340c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800340e:	604b      	str	r3, [r1, #4]
}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop

08003414 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003414:	2001      	movs	r0, #1
 8003416:	4770      	bx	lr

08003418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003418:	2000      	movs	r0, #0
 800341a:	4770      	bx	lr

0800341c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800341c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800341e:	4c0d      	ldr	r4, [pc, #52]	; (8003454 <_sbrk+0x38>)
{
 8003420:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003422:	490d      	ldr	r1, [pc, #52]	; (8003458 <_sbrk+0x3c>)
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8003426:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003428:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 800342a:	b12a      	cbz	r2, 8003438 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800342c:	4413      	add	r3, r2
 800342e:	428b      	cmp	r3, r1
 8003430:	d808      	bhi.n	8003444 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003432:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8003434:	6023      	str	r3, [r4, #0]
}
 8003436:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003438:	4809      	ldr	r0, [pc, #36]	; (8003460 <_sbrk+0x44>)
 800343a:	4602      	mov	r2, r0
 800343c:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800343e:	4413      	add	r3, r2
 8003440:	428b      	cmp	r3, r1
 8003442:	d9f6      	bls.n	8003432 <_sbrk+0x16>
    errno = ENOMEM;
 8003444:	f009 ff46 	bl	800d2d4 <__errno>
 8003448:	230c      	movs	r3, #12
    return (void *)-1;
 800344a:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800344e:	6003      	str	r3, [r0, #0]
}
 8003450:	4610      	mov	r0, r2
 8003452:	bd10      	pop	{r4, pc}
 8003454:	24000670 	.word	0x24000670
 8003458:	24080000 	.word	0x24080000
 800345c:	00000400 	.word	0x00000400
 8003460:	2400f2f0 	.word	0x2400f2f0

08003464 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003464:	4929      	ldr	r1, [pc, #164]	; (800350c <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003466:	4a2a      	ldr	r2, [pc, #168]	; (8003510 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003468:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800346c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8003470:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003476:	6813      	ldr	r3, [r2, #0]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	2b06      	cmp	r3, #6
 800347e:	d805      	bhi.n	800348c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	f023 030f 	bic.w	r3, r3, #15
 8003486:	f043 0307 	orr.w	r3, r3, #7
 800348a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800348e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003490:	4a21      	ldr	r2, [pc, #132]	; (8003518 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8003492:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003494:	481e      	ldr	r0, [pc, #120]	; (8003510 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003496:	f041 0101 	orr.w	r1, r1, #1
 800349a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800349c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	400a      	ands	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034a4:	6803      	ldr	r3, [r0, #0]
 80034a6:	071b      	lsls	r3, r3, #28
 80034a8:	d505      	bpl.n	80034b6 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034aa:	6803      	ldr	r3, [r0, #0]
 80034ac:	f023 030f 	bic.w	r3, r3, #15
 80034b0:	f043 0307 	orr.w	r3, r3, #7
 80034b4:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <SystemInit+0xb0>)
 80034b8:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80034ba:	4918      	ldr	r1, [pc, #96]	; (800351c <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 80034bc:	4c18      	ldr	r4, [pc, #96]	; (8003520 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 80034be:	4819      	ldr	r0, [pc, #100]	; (8003524 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 80034c0:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80034c2:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80034c4:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80034c6:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80034c8:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80034ca:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034ce:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80034d2:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034d6:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80034d8:	4c13      	ldr	r4, [pc, #76]	; (8003528 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 80034da:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80034de:	4913      	ldr	r1, [pc, #76]	; (800352c <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 80034e0:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80034e2:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	4019      	ands	r1, r3
 80034e8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80034ec:	d202      	bcs.n	80034f4 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <SystemInit+0xcc>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80034f4:	490f      	ldr	r1, [pc, #60]	; (8003534 <SystemInit+0xd0>)
 80034f6:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034fa:	4b04      	ldr	r3, [pc, #16]	; (800350c <SystemInit+0xa8>)
 80034fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003500:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003502:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000ed00 	.word	0xe000ed00
 8003510:	52002000 	.word	0x52002000
 8003514:	58024400 	.word	0x58024400
 8003518:	eaf6ed7f 	.word	0xeaf6ed7f
 800351c:	01010280 	.word	0x01010280
 8003520:	02020200 	.word	0x02020200
 8003524:	01ff0000 	.word	0x01ff0000
 8003528:	5c001000 	.word	0x5c001000
 800352c:	ffff0000 	.word	0xffff0000
 8003530:	51008108 	.word	0x51008108
 8003534:	52004000 	.word	0x52004000

08003538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003570 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800353c:	f7ff ff92 	bl	8003464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003540:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003542:	e003      	b.n	800354c <LoopCopyDataInit>

08003544 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003546:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003548:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800354a:	3104      	adds	r1, #4

0800354c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800354c:	480a      	ldr	r0, [pc, #40]	; (8003578 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003550:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003552:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003554:	d3f6      	bcc.n	8003544 <CopyDataInit>
  ldr  r2, =_sbss
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003558:	e002      	b.n	8003560 <LoopFillZerobss>

0800355a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800355a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800355c:	f842 3b04 	str.w	r3, [r2], #4

08003560 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003562:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003564:	d3f9      	bcc.n	800355a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003566:	f009 febb 	bl	800d2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800356a:	f7ff f931 	bl	80027d0 <main>
  bx  lr    
 800356e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003570:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003574:	0801b8f8 	.word	0x0801b8f8
  ldr  r0, =_sdata
 8003578:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800357c:	24000554 	.word	0x24000554
  ldr  r2, =_sbss
 8003580:	24000560 	.word	0x24000560
  ldr  r3, = _ebss
 8003584:	2400f2ec 	.word	0x2400f2ec

08003588 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003588:	e7fe      	b.n	8003588 <ADC3_IRQHandler>
	...

0800358c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <HAL_InitTick+0x40>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	b90b      	cbnz	r3, 8003596 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003592:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003594:	4770      	bx	lr
{
 8003596:	b510      	push	{r4, lr}
 8003598:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800359a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800359e:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <HAL_InitTick+0x44>)
 80035a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a4:	6810      	ldr	r0, [r2, #0]
 80035a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80035aa:	f001 fa1f 	bl	80049ec <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ae:	2c0f      	cmp	r4, #15
 80035b0:	d800      	bhi.n	80035b4 <HAL_InitTick+0x28>
 80035b2:	b108      	cbz	r0, 80035b8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80035b4:	2001      	movs	r0, #1
}
 80035b6:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035b8:	2200      	movs	r2, #0
 80035ba:	4621      	mov	r1, r4
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	f001 f9cc 	bl	800495c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <HAL_InitTick+0x48>)
 80035c6:	2000      	movs	r0, #0
 80035c8:	601c      	str	r4, [r3, #0]
}
 80035ca:	bd10      	pop	{r4, pc}
 80035cc:	240001fc 	.word	0x240001fc
 80035d0:	240001f4 	.word	0x240001f4
 80035d4:	24000200 	.word	0x24000200

080035d8 <HAL_Init>:
{
 80035d8:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035da:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035dc:	4c12      	ldr	r4, [pc, #72]	; (8003628 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035de:	f001 f9a9 	bl	8004934 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035e2:	4d12      	ldr	r5, [pc, #72]	; (800362c <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035e4:	f004 fa00 	bl	80079e8 <HAL_RCC_GetSysClockFreq>
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <HAL_Init+0x58>)
 80035ea:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035ec:	2000      	movs	r0, #0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035ee:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035f0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035f2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035f6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035fa:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035fc:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035fe:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8003602:	4c0c      	ldr	r4, [pc, #48]	; (8003634 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003604:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003608:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800360a:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800360e:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003610:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003612:	f7ff ffbb 	bl	800358c <HAL_InitTick>
 8003616:	b110      	cbz	r0, 800361e <HAL_Init+0x46>
    return HAL_ERROR;
 8003618:	2401      	movs	r4, #1
}
 800361a:	4620      	mov	r0, r4
 800361c:	bd38      	pop	{r3, r4, r5, pc}
 800361e:	4604      	mov	r4, r0
  HAL_MspInit();
 8003620:	f7ff fc52 	bl	8002ec8 <HAL_MspInit>
}
 8003624:	4620      	mov	r0, r4
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	08017344 	.word	0x08017344
 800362c:	240001f8 	.word	0x240001f8
 8003630:	58024400 	.word	0x58024400
 8003634:	240001f4 	.word	0x240001f4

08003638 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003638:	4a03      	ldr	r2, [pc, #12]	; (8003648 <HAL_IncTick+0x10>)
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <HAL_IncTick+0x14>)
 800363c:	6811      	ldr	r1, [r2, #0]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	440b      	add	r3, r1
 8003642:	6013      	str	r3, [r2, #0]
}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	240046a8 	.word	0x240046a8
 800364c:	240001fc 	.word	0x240001fc

08003650 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003650:	4b01      	ldr	r3, [pc, #4]	; (8003658 <HAL_GetTick+0x8>)
 8003652:	6818      	ldr	r0, [r3, #0]
}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	240046a8 	.word	0x240046a8

0800365c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003660:	f7ff fff6 	bl	8003650 <HAL_GetTick>
 8003664:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003666:	1c63      	adds	r3, r4, #1
 8003668:	d002      	beq.n	8003670 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_Delay+0x20>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003670:	f7ff ffee 	bl	8003650 <HAL_GetTick>
 8003674:	1b43      	subs	r3, r0, r5
 8003676:	42a3      	cmp	r3, r4
 8003678:	d3fa      	bcc.n	8003670 <HAL_Delay+0x14>
  {
  }
}
 800367a:	bd38      	pop	{r3, r4, r5, pc}
 800367c:	240001fc 	.word	0x240001fc

08003680 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003680:	4b01      	ldr	r3, [pc, #4]	; (8003688 <HAL_GetREVID+0x8>)
 8003682:	6818      	ldr	r0, [r3, #0]
}
 8003684:	0c00      	lsrs	r0, r0, #16
 8003686:	4770      	bx	lr
 8003688:	5c001000 	.word	0x5c001000

0800368c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800368c:	4a03      	ldr	r2, [pc, #12]	; (800369c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003694:	4318      	orrs	r0, r3
 8003696:	6010      	str	r0, [r2, #0]
}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	58003c00 	.word	0x58003c00

080036a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80036a0:	4a03      	ldr	r2, [pc, #12]	; (80036b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	f023 0302 	bic.w	r3, r3, #2
 80036a8:	4318      	orrs	r0, r3
 80036aa:	6010      	str	r0, [r2, #0]
}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	58003c00 	.word	0x58003c00

080036b4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80036b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 80036b8:	681a      	ldr	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80036ba:	461d      	mov	r5, r3
  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80036c2:	f7ff ffc5 	bl	8003650 <HAL_GetTick>
 80036c6:	4604      	mov	r4, r0
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80036c8:	e004      	b.n	80036d4 <HAL_SYSCFG_EnableVREFBUF+0x20>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80036ca:	f7ff ffc1 	bl	8003650 <HAL_GetTick>
 80036ce:	1b00      	subs	r0, r0, r4
 80036d0:	280a      	cmp	r0, #10
 80036d2:	d804      	bhi.n	80036de <HAL_SYSCFG_EnableVREFBUF+0x2a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	071b      	lsls	r3, r3, #28
 80036d8:	d5f7      	bpl.n	80036ca <HAL_SYSCFG_EnableVREFBUF+0x16>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80036da:	2000      	movs	r0, #0
}
 80036dc:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80036de:	2003      	movs	r0, #3
}
 80036e0:	bd38      	pop	{r3, r4, r5, pc}
 80036e2:	bf00      	nop
 80036e4:	58003c00 	.word	0x58003c00

080036e8 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80036ea:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036ec:	f7fe fcbc 	bl	8002068 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036f0:	bd08      	pop	{r3, pc}
 80036f2:	bf00      	nop

080036f4 <HAL_ADC_ErrorCallback>:
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop

080036f8 <HAL_ADC_IRQHandler>:
{
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036fa:	4a97      	ldr	r2, [pc, #604]	; (8003958 <HAL_ADC_IRQHandler+0x260>)
{
 80036fc:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80036fe:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003700:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003702:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003704:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003706:	f000 8098 	beq.w	800383a <HAL_ADC_IRQHandler+0x142>
 800370a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800370e:	4293      	cmp	r3, r2
 8003710:	f000 8093 	beq.w	800383a <HAL_ADC_IRQHandler+0x142>
 8003714:	4a91      	ldr	r2, [pc, #580]	; (800395c <HAL_ADC_IRQHandler+0x264>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003716:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003718:	07a9      	lsls	r1, r5, #30
 800371a:	f007 071f 	and.w	r7, r7, #31
 800371e:	d502      	bpl.n	8003726 <HAL_ADC_IRQHandler+0x2e>
 8003720:	07b2      	lsls	r2, r6, #30
 8003722:	f100 80ac 	bmi.w	800387e <HAL_ADC_IRQHandler+0x186>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003726:	0769      	lsls	r1, r5, #29
 8003728:	d57c      	bpl.n	8003824 <HAL_ADC_IRQHandler+0x12c>
 800372a:	0772      	lsls	r2, r6, #29
 800372c:	d57a      	bpl.n	8003824 <HAL_ADC_IRQHandler+0x12c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800372e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003730:	06d2      	lsls	r2, r2, #27
 8003732:	d403      	bmi.n	800373c <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003734:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373a:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003742:	d11c      	bne.n	800377e <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003744:	4a86      	ldr	r2, [pc, #536]	; (8003960 <HAL_ADC_IRQHandler+0x268>)
 8003746:	4293      	cmp	r3, r2
 8003748:	f000 80e2 	beq.w	8003910 <HAL_ADC_IRQHandler+0x218>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800374c:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800374e:	0490      	lsls	r0, r2, #18
 8003750:	d415      	bmi.n	800377e <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	0711      	lsls	r1, r2, #28
 8003756:	d512      	bpl.n	800377e <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	0752      	lsls	r2, r2, #29
 800375c:	f100 80f1 	bmi.w	8003942 <HAL_ADC_IRQHandler+0x24a>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	f022 020c 	bic.w	r2, r2, #12
 8003766:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800376a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800376e:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003770:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003772:	04db      	lsls	r3, r3, #19
 8003774:	d403      	bmi.n	800377e <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003776:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800377e:	4620      	mov	r0, r4
 8003780:	f7fe fc54 	bl	800202c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	220c      	movs	r2, #12
 8003788:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800378a:	06a8      	lsls	r0, r5, #26
 800378c:	d550      	bpl.n	8003830 <HAL_ADC_IRQHandler+0x138>
 800378e:	06b1      	lsls	r1, r6, #26
 8003790:	d54e      	bpl.n	8003830 <HAL_ADC_IRQHandler+0x138>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003792:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003794:	06d1      	lsls	r1, r2, #27
 8003796:	d403      	bmi.n	80037a0 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003798:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800379a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800379e:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037a0:	486f      	ldr	r0, [pc, #444]	; (8003960 <HAL_ADC_IRQHandler+0x268>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80037a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037a4:	4283      	cmp	r3, r0
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037a6:	68d9      	ldr	r1, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80037a8:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80037ac:	d075      	beq.n	800389a <HAL_ADC_IRQHandler+0x1a2>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037ae:	68d8      	ldr	r0, [r3, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80037b0:	b12a      	cbz	r2, 80037be <HAL_ADC_IRQHandler+0xc6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80037b2:	4a6c      	ldr	r2, [pc, #432]	; (8003964 <HAL_ADC_IRQHandler+0x26c>)
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037b4:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80037b8:	4002      	ands	r2, r0
 80037ba:	430a      	orrs	r2, r1
 80037bc:	d117      	bne.n	80037ee <HAL_ADC_IRQHandler+0xf6>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	0652      	lsls	r2, r2, #25
 80037c2:	d514      	bpl.n	80037ee <HAL_ADC_IRQHandler+0xf6>
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80037c4:	0281      	lsls	r1, r0, #10
 80037c6:	d412      	bmi.n	80037ee <HAL_ADC_IRQHandler+0xf6>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	0712      	lsls	r2, r2, #28
 80037cc:	f100 80b0 	bmi.w	8003930 <HAL_ADC_IRQHandler+0x238>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d6:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80037d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037de:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80037e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037e2:	05d8      	lsls	r0, r3, #23
 80037e4:	d403      	bmi.n	80037ee <HAL_ADC_IRQHandler+0xf6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037ee:	4620      	mov	r0, r4
 80037f0:	f001 f82e 	bl	8004850 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	2260      	movs	r2, #96	; 0x60
 80037f8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037fa:	0629      	lsls	r1, r5, #24
 80037fc:	d501      	bpl.n	8003802 <HAL_ADC_IRQHandler+0x10a>
 80037fe:	0632      	lsls	r2, r6, #24
 8003800:	d45f      	bmi.n	80038c2 <HAL_ADC_IRQHandler+0x1ca>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003802:	05e8      	lsls	r0, r5, #23
 8003804:	d501      	bpl.n	800380a <HAL_ADC_IRQHandler+0x112>
 8003806:	05f1      	lsls	r1, r6, #23
 8003808:	d466      	bmi.n	80038d8 <HAL_ADC_IRQHandler+0x1e0>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800380a:	05aa      	lsls	r2, r5, #22
 800380c:	d501      	bpl.n	8003812 <HAL_ADC_IRQHandler+0x11a>
 800380e:	05b0      	lsls	r0, r6, #22
 8003810:	d44b      	bmi.n	80038aa <HAL_ADC_IRQHandler+0x1b2>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003812:	06e9      	lsls	r1, r5, #27
 8003814:	d501      	bpl.n	800381a <HAL_ADC_IRQHandler+0x122>
 8003816:	06f2      	lsls	r2, r6, #27
 8003818:	d411      	bmi.n	800383e <HAL_ADC_IRQHandler+0x146>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800381a:	0568      	lsls	r0, r5, #21
 800381c:	d501      	bpl.n	8003822 <HAL_ADC_IRQHandler+0x12a>
 800381e:	0571      	lsls	r1, r6, #21
 8003820:	d466      	bmi.n	80038f0 <HAL_ADC_IRQHandler+0x1f8>
}
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003824:	0728      	lsls	r0, r5, #28
 8003826:	d5b0      	bpl.n	800378a <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003828:	0731      	lsls	r1, r6, #28
 800382a:	d480      	bmi.n	800372e <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800382c:	06a8      	lsls	r0, r5, #26
 800382e:	d4ae      	bmi.n	800378e <HAL_ADC_IRQHandler+0x96>
 8003830:	066a      	lsls	r2, r5, #25
 8003832:	d5e2      	bpl.n	80037fa <HAL_ADC_IRQHandler+0x102>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003834:	0670      	lsls	r0, r6, #25
 8003836:	d5e0      	bpl.n	80037fa <HAL_ADC_IRQHandler+0x102>
 8003838:	e7ab      	b.n	8003792 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800383a:	4a4b      	ldr	r2, [pc, #300]	; (8003968 <HAL_ADC_IRQHandler+0x270>)
 800383c:	e76b      	b.n	8003716 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800383e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003840:	b172      	cbz	r2, 8003860 <HAL_ADC_IRQHandler+0x168>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003842:	2f00      	cmp	r7, #0
 8003844:	d069      	beq.n	800391a <HAL_ADC_IRQHandler+0x222>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003846:	4a44      	ldr	r2, [pc, #272]	; (8003958 <HAL_ADC_IRQHandler+0x260>)
 8003848:	4293      	cmp	r3, r2
 800384a:	f000 8083 	beq.w	8003954 <HAL_ADC_IRQHandler+0x25c>
 800384e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003852:	4293      	cmp	r3, r2
 8003854:	d07e      	beq.n	8003954 <HAL_ADC_IRQHandler+0x25c>
 8003856:	4a41      	ldr	r2, [pc, #260]	; (800395c <HAL_ADC_IRQHandler+0x264>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003858:	6892      	ldr	r2, [r2, #8]
 800385a:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800385e:	d00b      	beq.n	8003878 <HAL_ADC_IRQHandler+0x180>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003860:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 8003862:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003868:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800386a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8003872:	f7ff ff3f 	bl	80036f4 <HAL_ADC_ErrorCallback>
 8003876:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003878:	2210      	movs	r2, #16
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e7cd      	b.n	800381a <HAL_ADC_IRQHandler+0x122>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800387e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003880:	06d8      	lsls	r0, r3, #27
 8003882:	d403      	bmi.n	800388c <HAL_ADC_IRQHandler+0x194>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003884:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003886:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800388a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800388c:	4620      	mov	r0, r4
 800388e:	f000 ffe7 	bl	8004860 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	2202      	movs	r2, #2
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e745      	b.n	8003726 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800389a:	1fb8      	subs	r0, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800389c:	2801      	cmp	r0, #1
 800389e:	d986      	bls.n	80037ae <HAL_ADC_IRQHandler+0xb6>
 80038a0:	2f00      	cmp	r7, #0
 80038a2:	d084      	beq.n	80037ae <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038a4:	482c      	ldr	r0, [pc, #176]	; (8003958 <HAL_ADC_IRQHandler+0x260>)
 80038a6:	68c0      	ldr	r0, [r0, #12]
 80038a8:	e782      	b.n	80037b0 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80038ac:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b2:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80038b4:	f000 ffd2 	bl	800485c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	e7a7      	b.n	8003812 <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038c4:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ca:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038cc:	f7fe fc0e 	bl	80020ec <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e794      	b.n	8003802 <HAL_ADC_IRQHandler+0x10a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038da:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e0:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038e2:	f000 ffb9 	bl	8004858 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e78c      	b.n	800380a <HAL_ADC_IRQHandler+0x112>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038f6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038fc:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038fe:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003900:	f042 0208 	orr.w	r2, r2, #8
 8003904:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003906:	6019      	str	r1, [r3, #0]
}
 8003908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800390c:	f000 bfa2 	b.w	8004854 <HAL_ADCEx_InjectedQueueOverflowCallback>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003910:	2f09      	cmp	r7, #9
 8003912:	d906      	bls.n	8003922 <HAL_ADC_IRQHandler+0x22a>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003914:	4a10      	ldr	r2, [pc, #64]	; (8003958 <HAL_ADC_IRQHandler+0x260>)
 8003916:	68d2      	ldr	r2, [r2, #12]
 8003918:	e719      	b.n	800374e <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	0797      	lsls	r7, r2, #30
 800391e:	d0ab      	beq.n	8003878 <HAL_ADC_IRQHandler+0x180>
 8003920:	e79e      	b.n	8003860 <HAL_ADC_IRQHandler+0x168>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003922:	f240 2221 	movw	r2, #545	; 0x221
 8003926:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003928:	07d2      	lsls	r2, r2, #31
 800392a:	f53f af0f 	bmi.w	800374c <HAL_ADC_IRQHandler+0x54>
 800392e:	e7f1      	b.n	8003914 <HAL_ADC_IRQHandler+0x21c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003930:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003932:	f043 0310 	orr.w	r3, r3, #16
 8003936:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003940:	e755      	b.n	80037ee <HAL_ADC_IRQHandler+0xf6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003942:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	65a3      	str	r3, [r4, #88]	; 0x58
 8003952:	e714      	b.n	800377e <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <HAL_ADC_IRQHandler+0x270>)
 8003956:	e77f      	b.n	8003858 <HAL_ADC_IRQHandler+0x160>
 8003958:	40022000 	.word	0x40022000
 800395c:	58026300 	.word	0x58026300
 8003960:	40022100 	.word	0x40022100
 8003964:	02002000 	.word	0x02002000
 8003968:	40022300 	.word	0x40022300

0800396c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800396e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003970:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8003976:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003978:	d11d      	bne.n	80039b6 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800397a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800397c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003982:	680a      	ldr	r2, [r1, #0]
 8003984:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003988:	68ca      	ldr	r2, [r1, #12]
 800398a:	d01b      	beq.n	80039c4 <ADC_DMAConvCplt+0x58>
 800398c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003990:	d10d      	bne.n	80039ae <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003992:	68ca      	ldr	r2, [r1, #12]
 8003994:	0494      	lsls	r4, r2, #18
 8003996:	d40a      	bmi.n	80039ae <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800399a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039a2:	04d1      	lsls	r1, r2, #19
 80039a4:	d403      	bmi.n	80039ae <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fb3c 	bl	800202c <HAL_ADC_ConvCpltCallback>
}
 80039b4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039b6:	06d2      	lsls	r2, r2, #27
 80039b8:	d40a      	bmi.n	80039d0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80039bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80039c4:	0790      	lsls	r0, r2, #30
 80039c6:	d0e7      	beq.n	8003998 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fb2f 	bl	800202c <HAL_ADC_ConvCpltCallback>
 80039ce:	e7f1      	b.n	80039b4 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fe8f 	bl	80036f4 <HAL_ADC_ErrorCallback>
}
 80039d6:	bd10      	pop	{r4, pc}

080039d8 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80039da:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80039de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039e4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039ec:	f7ff fe82 	bl	80036f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039f0:	bd08      	pop	{r3, pc}
 80039f2:	bf00      	nop

080039f4 <HAL_ADC_ConfigChannel>:
{
 80039f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80039f6:	2200      	movs	r2, #0
{
 80039f8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80039fa:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80039fc:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8003a00:	2a01      	cmp	r2, #1
 8003a02:	f000 813a 	beq.w	8003c7a <HAL_ADC_ConfigChannel+0x286>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a0a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8003a0c:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a10:	6894      	ldr	r4, [r2, #8]
 8003a12:	0766      	lsls	r6, r4, #29
 8003a14:	f100 8099 	bmi.w	8003b4a <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a18:	680c      	ldr	r4, [r1, #0]
 8003a1a:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8003a1e:	2d00      	cmp	r5, #0
 8003a20:	f040 809e 	bne.w	8003b60 <HAL_ADC_ConfigChannel+0x16c>
 8003a24:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8003a28:	fa00 f00c 	lsl.w	r0, r0, ip
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a2c:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8003a2e:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a30:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a32:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 8003a34:	4034      	ands	r4, r6
 8003a36:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a38:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8003a3c:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8003a40:	40a6      	lsls	r6, r4
 8003a42:	61d0      	str	r0, [r2, #28]
 8003a44:	fa0c f404 	lsl.w	r4, ip, r4
 8003a48:	5978      	ldr	r0, [r7, r5]
 8003a4a:	ea20 0006 	bic.w	r0, r0, r6
 8003a4e:	4320      	orrs	r0, r4
 8003a50:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a52:	6890      	ldr	r0, [r2, #8]
 8003a54:	0745      	lsls	r5, r0, #29
 8003a56:	f100 8081 	bmi.w	8003b5c <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a5a:	6895      	ldr	r5, [r2, #8]
 8003a5c:	f015 0508 	ands.w	r5, r5, #8
 8003a60:	d157      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x11e>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a62:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a64:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8003a68:	2007      	movs	r0, #7
 8003a6a:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a6c:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8003a70:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a74:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8003a78:	fa00 fe04 	lsl.w	lr, r0, r4
 8003a7c:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a80:	4fc4      	ldr	r7, [pc, #784]	; (8003d94 <HAL_ADC_ConfigChannel+0x3a0>)
 8003a82:	f85c 0006 	ldr.w	r0, [ip, r6]
 8003a86:	ea20 000e 	bic.w	r0, r0, lr
 8003a8a:	4320      	orrs	r0, r4
 8003a8c:	f84c 0006 	str.w	r0, [ip, r6]
 8003a90:	6838      	ldr	r0, [r7, #0]
 8003a92:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8003a96:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8003a9a:	f000 8098 	beq.w	8003bce <HAL_ADC_ConfigChannel+0x1da>
 8003a9e:	68d0      	ldr	r0, [r2, #12]
 8003aa0:	68d6      	ldr	r6, [r2, #12]
 8003aa2:	f010 0f10 	tst.w	r0, #16
 8003aa6:	6948      	ldr	r0, [r1, #20]
 8003aa8:	f040 8107 	bne.w	8003cba <HAL_ADC_ConfigChannel+0x2c6>
 8003aac:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8003ab0:	0076      	lsls	r6, r6, #1
 8003ab2:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ab6:	690f      	ldr	r7, [r1, #16]
 8003ab8:	2f04      	cmp	r7, #4
 8003aba:	f000 80e1 	beq.w	8003c80 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003abe:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8003ac2:	6808      	ldr	r0, [r1, #0]
 8003ac4:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8003ac8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003acc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8003ad0:	ea40 000c 	orr.w	r0, r0, ip
 8003ad4:	4330      	orrs	r0, r6
 8003ad6:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ada:	7e4f      	ldrb	r7, [r1, #25]
 8003adc:	690e      	ldr	r6, [r1, #16]
 8003ade:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003ae0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8003ae4:	bf0c      	ite	eq
 8003ae6:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8003aea:	2700      	movne	r7, #0
 8003aec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003af0:	4338      	orrs	r0, r7
 8003af2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003af6:	7e0c      	ldrb	r4, [r1, #24]
 8003af8:	6908      	ldr	r0, [r1, #16]
 8003afa:	2c01      	cmp	r4, #1
 8003afc:	d104      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x114>
 8003afe:	f000 001f 	and.w	r0, r0, #31
 8003b02:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003b06:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b08:	6910      	ldr	r0, [r2, #16]
 8003b0a:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8003b0e:	4305      	orrs	r5, r0
 8003b10:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b12:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b14:	07c4      	lsls	r4, r0, #31
 8003b16:	d416      	bmi.n	8003b46 <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b18:	68ce      	ldr	r6, [r1, #12]
 8003b1a:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8003b1c:	f006 0718 	and.w	r7, r6, #24
 8003b20:	4c9d      	ldr	r4, [pc, #628]	; (8003d98 <HAL_ADC_ConfigChannel+0x3a4>)
 8003b22:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8003b26:	40fc      	lsrs	r4, r7
 8003b28:	f3c0 0713 	ubfx	r7, r0, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b2c:	f8df c28c 	ldr.w	ip, [pc, #652]	; 8003dbc <HAL_ADC_ConfigChannel+0x3c8>
 8003b30:	4004      	ands	r4, r0
 8003b32:	ea25 0507 	bic.w	r5, r5, r7
 8003b36:	4566      	cmp	r6, ip
 8003b38:	ea44 0405 	orr.w	r4, r4, r5
 8003b3c:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8003b40:	d04d      	beq.n	8003bde <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b42:	2800      	cmp	r0, #0
 8003b44:	db15      	blt.n	8003b72 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b46:	2000      	movs	r0, #0
 8003b48:	e003      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b4c:	f042 0220 	orr.w	r2, r2, #32
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003b58:	b003      	add	sp, #12
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b5c:	6890      	ldr	r0, [r2, #8]
 8003b5e:	e7d8      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b64:	b115      	cbz	r5, 8003b6c <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003b66:	fab5 f585 	clz	r5, r5
 8003b6a:	40a8      	lsls	r0, r5
 8003b6c:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8003b70:	e75c      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b72:	498a      	ldr	r1, [pc, #552]	; (8003d9c <HAL_ADC_ConfigChannel+0x3a8>)
 8003b74:	428a      	cmp	r2, r1
 8003b76:	f000 80c6 	beq.w	8003d06 <HAL_ADC_ConfigChannel+0x312>
 8003b7a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8003b7e:	428a      	cmp	r2, r1
 8003b80:	f000 80c1 	beq.w	8003d06 <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b84:	4e86      	ldr	r6, [pc, #536]	; (8003da0 <HAL_ADC_ConfigChannel+0x3ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b86:	4d87      	ldr	r5, [pc, #540]	; (8003da4 <HAL_ADC_ConfigChannel+0x3b0>)
 8003b88:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b8a:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b8c:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b90:	43e4      	mvns	r4, r4
 8003b92:	f004 0401 	and.w	r4, r4, #1
 8003b96:	2c00      	cmp	r4, #0
 8003b98:	f000 80c3 	beq.w	8003d22 <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b9c:	4c82      	ldr	r4, [pc, #520]	; (8003da8 <HAL_ADC_ConfigChannel+0x3b4>)
 8003b9e:	42a0      	cmp	r0, r4
 8003ba0:	f000 810e 	beq.w	8003dc0 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ba4:	4c81      	ldr	r4, [pc, #516]	; (8003dac <HAL_ADC_ConfigChannel+0x3b8>)
 8003ba6:	42a0      	cmp	r0, r4
 8003ba8:	f000 812d 	beq.w	8003e06 <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bac:	4c80      	ldr	r4, [pc, #512]	; (8003db0 <HAL_ADC_ConfigChannel+0x3bc>)
 8003bae:	42a0      	cmp	r0, r4
 8003bb0:	d1c9      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003bb2:	0249      	lsls	r1, r1, #9
 8003bb4:	d4c7      	bmi.n	8003b46 <HAL_ADC_ConfigChannel+0x152>
 8003bb6:	497a      	ldr	r1, [pc, #488]	; (8003da0 <HAL_ADC_ConfigChannel+0x3ac>)
 8003bb8:	428a      	cmp	r2, r1
 8003bba:	d1c4      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bbc:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003bc4:	4332      	orrs	r2, r6
 8003bc6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003bca:	60aa      	str	r2, [r5, #8]
}
 8003bcc:	e7c1      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bce:	68d6      	ldr	r6, [r2, #12]
 8003bd0:	6948      	ldr	r0, [r1, #20]
 8003bd2:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8003bd6:	0076      	lsls	r6, r6, #1
 8003bd8:	fa00 f606 	lsl.w	r6, r0, r6
 8003bdc:	e76b      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bde:	2f00      	cmp	r7, #0
 8003be0:	d071      	beq.n	8003cc6 <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003be6:	2c00      	cmp	r4, #0
 8003be8:	f000 80af 	beq.w	8003d4a <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8003bec:	fab4 f484 	clz	r4, r4
 8003bf0:	3401      	adds	r4, #1
 8003bf2:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bf6:	2c09      	cmp	r4, #9
 8003bf8:	f240 80a7 	bls.w	8003d4a <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c00:	2d00      	cmp	r5, #0
 8003c02:	f000 8114 	beq.w	8003e2e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003c06:	fab5 f585 	clz	r5, r5
 8003c0a:	3501      	adds	r5, #1
 8003c0c:	06ad      	lsls	r5, r5, #26
 8003c0e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003c16:	2c00      	cmp	r4, #0
 8003c18:	f000 8107 	beq.w	8003e2a <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8003c1c:	2601      	movs	r6, #1
 8003c1e:	fab4 f484 	clz	r4, r4
 8003c22:	4434      	add	r4, r6
 8003c24:	f004 041f 	and.w	r4, r4, #31
 8003c28:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c2c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003c32:	2800      	cmp	r0, #0
 8003c34:	f000 80f7 	beq.w	8003e26 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8003c38:	fab0 f480 	clz	r4, r0
 8003c3c:	3401      	adds	r4, #1
 8003c3e:	f004 041f 	and.w	r4, r4, #31
 8003c42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003c46:	f1a4 001e 	sub.w	r0, r4, #30
 8003c4a:	0500      	lsls	r0, r0, #20
 8003c4c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c50:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8003c52:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c56:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8003c5a:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c5c:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8003c5e:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c62:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8003c66:	fa0c fc00 	lsl.w	ip, ip, r0
 8003c6a:	4086      	lsls	r6, r0
 8003c6c:	597c      	ldr	r4, [r7, r5]
 8003c6e:	ea24 000c 	bic.w	r0, r4, ip
 8003c72:	4330      	orrs	r0, r6
 8003c74:	5178      	str	r0, [r7, r5]
 8003c76:	6808      	ldr	r0, [r1, #0]
}
 8003c78:	e763      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8003c7a:	2002      	movs	r0, #2
}
 8003c7c:	b003      	add	sp, #12
 8003c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c80:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8003c82:	680d      	ldr	r5, [r1, #0]
 8003c84:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003c88:	06ac      	lsls	r4, r5, #26
 8003c8a:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8003c8e:	d030      	beq.n	8003cf2 <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c90:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8003c92:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003c96:	4284      	cmp	r4, r0
 8003c98:	d026      	beq.n	8003ce8 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c9a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003c9c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003ca0:	4284      	cmp	r4, r0
 8003ca2:	d02b      	beq.n	8003cfc <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ca4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8003ca6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003caa:	4284      	cmp	r4, r0
 8003cac:	f47f af31 	bne.w	8003b12 <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003cb0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8003cb2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003cb6:	66d0      	str	r0, [r2, #108]	; 0x6c
 8003cb8:	e72b      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cba:	0876      	lsrs	r6, r6, #1
 8003cbc:	f006 0608 	and.w	r6, r6, #8
 8003cc0:	fa00 f606 	lsl.w	r6, r0, r6
 8003cc4:	e6f7      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cc6:	0e80      	lsrs	r0, r0, #26
 8003cc8:	1c44      	adds	r4, r0, #1
 8003cca:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cce:	2e09      	cmp	r6, #9
 8003cd0:	d82d      	bhi.n	8003d2e <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cd2:	06a5      	lsls	r5, r4, #26
 8003cd4:	2401      	movs	r4, #1
 8003cd6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8003cda:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003cde:	fa04 f606 	lsl.w	r6, r4, r6
 8003ce2:	0500      	lsls	r0, r0, #20
 8003ce4:	4335      	orrs	r5, r6
 8003ce6:	e7b3      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ce8:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8003cea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003cee:	6650      	str	r0, [r2, #100]	; 0x64
 8003cf0:	e7d3      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003cf2:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8003cf4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003cf8:	6610      	str	r0, [r2, #96]	; 0x60
 8003cfa:	e7c9      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003cfc:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003cfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003d02:	6690      	str	r0, [r2, #104]	; 0x68
 8003d04:	e7ce      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d06:	492b      	ldr	r1, [pc, #172]	; (8003db4 <HAL_ADC_ConfigChannel+0x3c0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d08:	4e24      	ldr	r6, [pc, #144]	; (8003d9c <HAL_ADC_ConfigChannel+0x3a8>)
 8003d0a:	4c2b      	ldr	r4, [pc, #172]	; (8003db8 <HAL_ADC_ConfigChannel+0x3c4>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d0c:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d0e:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d10:	68b7      	ldr	r7, [r6, #8]
 8003d12:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d14:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d18:	433c      	orrs	r4, r7
 8003d1a:	43e4      	mvns	r4, r4
 8003d1c:	f004 0401 	and.w	r4, r4, #1
 8003d20:	e739      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003d24:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d26:	f042 0220 	orr.w	r2, r2, #32
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003d2c:	e711      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d2e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8003d32:	2701      	movs	r7, #1
 8003d34:	06a5      	lsls	r5, r4, #26
 8003d36:	381e      	subs	r0, #30
 8003d38:	fa07 f606 	lsl.w	r6, r7, r6
 8003d3c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003d40:	0500      	lsls	r0, r0, #20
 8003d42:	4335      	orrs	r5, r6
 8003d44:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8003d48:	e782      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003d4e:	2d00      	cmp	r5, #0
 8003d50:	d075      	beq.n	8003e3e <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8003d52:	fab5 f585 	clz	r5, r5
 8003d56:	3501      	adds	r5, #1
 8003d58:	06ad      	lsls	r5, r5, #26
 8003d5a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003d62:	2c00      	cmp	r4, #0
 8003d64:	d069      	beq.n	8003e3a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003d66:	2601      	movs	r6, #1
 8003d68:	fab4 f484 	clz	r4, r4
 8003d6c:	4434      	add	r4, r6
 8003d6e:	f004 041f 	and.w	r4, r4, #31
 8003d72:	fa06 f404 	lsl.w	r4, r6, r4
 8003d76:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d059      	beq.n	8003e34 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8003d80:	fab0 f480 	clz	r4, r0
 8003d84:	3401      	adds	r4, #1
 8003d86:	f004 041f 	and.w	r4, r4, #31
 8003d8a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003d8e:	0520      	lsls	r0, r4, #20
 8003d90:	e75e      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x25c>
 8003d92:	bf00      	nop
 8003d94:	5c001000 	.word	0x5c001000
 8003d98:	000fffff 	.word	0x000fffff
 8003d9c:	40022000 	.word	0x40022000
 8003da0:	58026000 	.word	0x58026000
 8003da4:	58026300 	.word	0x58026300
 8003da8:	cb840000 	.word	0xcb840000
 8003dac:	c7520000 	.word	0xc7520000
 8003db0:	cfb80000 	.word	0xcfb80000
 8003db4:	40022300 	.word	0x40022300
 8003db8:	40022100 	.word	0x40022100
 8003dbc:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dc0:	0208      	lsls	r0, r1, #8
 8003dc2:	f53f aec0 	bmi.w	8003b46 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc6:	491f      	ldr	r1, [pc, #124]	; (8003e44 <HAL_ADC_ConfigChannel+0x450>)
 8003dc8:	428a      	cmp	r2, r1
 8003dca:	f47f aebc 	bne.w	8003b46 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dce:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <HAL_ADC_ConfigChannel+0x454>)
 8003dd0:	481e      	ldr	r0, [pc, #120]	; (8003e4c <HAL_ADC_ConfigChannel+0x458>)
 8003dd2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003dd4:	68a9      	ldr	r1, [r5, #8]
 8003dd6:	0992      	lsrs	r2, r2, #6
 8003dd8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003ddc:	fba0 0202 	umull	r0, r2, r0, r2
 8003de0:	4331      	orrs	r1, r6
 8003de2:	0992      	lsrs	r2, r2, #6
 8003de4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003de8:	3201      	adds	r2, #1
 8003dea:	60a9      	str	r1, [r5, #8]
 8003dec:	0052      	lsls	r2, r2, #1
 8003dee:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003df0:	9a01      	ldr	r2, [sp, #4]
 8003df2:	2a00      	cmp	r2, #0
 8003df4:	f43f aea7 	beq.w	8003b46 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8003df8:	9a01      	ldr	r2, [sp, #4]
 8003dfa:	3a01      	subs	r2, #1
 8003dfc:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003dfe:	9a01      	ldr	r2, [sp, #4]
 8003e00:	2a00      	cmp	r2, #0
 8003e02:	d1f9      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x404>
 8003e04:	e69f      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e06:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8003e0a:	f47f ae9c 	bne.w	8003b46 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e0e:	490d      	ldr	r1, [pc, #52]	; (8003e44 <HAL_ADC_ConfigChannel+0x450>)
 8003e10:	428a      	cmp	r2, r1
 8003e12:	f47f ae98 	bne.w	8003b46 <HAL_ADC_ConfigChannel+0x152>
 8003e16:	68aa      	ldr	r2, [r5, #8]
 8003e18:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003e1c:	4332      	orrs	r2, r6
 8003e1e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003e22:	60aa      	str	r2, [r5, #8]
}
 8003e24:	e695      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x15e>
 8003e26:	480a      	ldr	r0, [pc, #40]	; (8003e50 <HAL_ADC_ConfigChannel+0x45c>)
 8003e28:	e712      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x25c>
 8003e2a:	2402      	movs	r4, #2
 8003e2c:	e6fe      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x238>
 8003e2e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003e32:	e6ee      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x21e>
 8003e34:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003e38:	e70a      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x25c>
 8003e3a:	2402      	movs	r4, #2
 8003e3c:	e79b      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x382>
 8003e3e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003e42:	e78c      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x36a>
 8003e44:	58026000 	.word	0x58026000
 8003e48:	240001f4 	.word	0x240001f4
 8003e4c:	053e2d63 	.word	0x053e2d63
 8003e50:	fe500000 	.word	0xfe500000

08003e54 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8003e54:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8003e58:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003e5a:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8003e5c:	2a01      	cmp	r2, #1
 8003e5e:	f000 80e8 	beq.w	8004032 <HAL_ADC_AnalogWDGConfig+0x1de>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e62:	681a      	ldr	r2, [r3, #0]
{
 8003e64:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8003e66:	2401      	movs	r4, #1
 8003e68:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e6c:	6894      	ldr	r4, [r2, #8]
 8003e6e:	0765      	lsls	r5, r4, #29
 8003e70:	d42a      	bmi.n	8003ec8 <HAL_ADC_AnalogWDGConfig+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e72:	6894      	ldr	r4, [r2, #8]
 8003e74:	0724      	lsls	r4, r4, #28
 8003e76:	d428      	bmi.n	8003eca <HAL_ADC_AnalogWDGConfig+0x76>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003e78:	680c      	ldr	r4, [r1, #0]
 8003e7a:	4dc5      	ldr	r5, [pc, #788]	; (8004190 <HAL_ADC_AnalogWDGConfig+0x33c>)
 8003e7c:	42ac      	cmp	r4, r5
 8003e7e:	f000 8094 	beq.w	8003faa <HAL_ADC_AnalogWDGConfig+0x156>
      switch (AnalogWDGConfig->WatchdogMode)
 8003e82:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8003e86:	d030      	beq.n	8003eea <HAL_ADC_AnalogWDGConfig+0x96>
 8003e88:	d829      	bhi.n	8003ede <HAL_ADC_AnalogWDGConfig+0x8a>
 8003e8a:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8003e8e:	d02c      	beq.n	8003eea <HAL_ADC_AnalogWDGConfig+0x96>
 8003e90:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003e94:	d029      	beq.n	8003eea <HAL_ADC_AnalogWDGConfig+0x96>
 8003e96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003e9a:	d026      	beq.n	8003eea <HAL_ADC_AnalogWDGConfig+0x96>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8003e9c:	f004 0c01 	and.w	ip, r4, #1
  MODIFY_REG(*preg,
 8003ea0:	4ebc      	ldr	r6, [pc, #752]	; (8004194 <HAL_ADC_AnalogWDGConfig+0x340>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8003ea2:	f3c4 5501 	ubfx	r5, r4, #20, #2
 8003ea6:	f102 000c 	add.w	r0, r2, #12
 8003eaa:	ea4f 07cc 	mov.w	r7, ip, lsl #3
  MODIFY_REG(*preg,
 8003eae:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8003eb0:	eb07 040c 	add.w	r4, r7, ip
 8003eb4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  MODIFY_REG(*preg,
 8003eb8:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8003ebc:	ea25 0506 	bic.w	r5, r5, r6
 8003ec0:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8003ec4:	680c      	ldr	r4, [r1, #0]
}
 8003ec6:	e023      	b.n	8003f10 <HAL_ADC_AnalogWDGConfig+0xbc>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ec8:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003ecc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ece:	f042 0220 	orr.w	r2, r2, #32
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003eda:	bcf0      	pop	{r4, r5, r6, r7}
 8003edc:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8003ede:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8003ee2:	d002      	beq.n	8003eea <HAL_ADC_AnalogWDGConfig+0x96>
 8003ee4:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8003ee8:	d1d8      	bne.n	8003e9c <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8003eea:	48ab      	ldr	r0, [pc, #684]	; (8004198 <HAL_ADC_AnalogWDGConfig+0x344>)
 8003eec:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8003eee:	6888      	ldr	r0, [r1, #8]
 8003ef0:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8003ef4:	f000 80d7 	beq.w	80040a6 <HAL_ADC_AnalogWDGConfig+0x252>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	f040 80eb 	bne.w	80040d4 <HAL_ADC_AnalogWDGConfig+0x280>
 8003efe:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003f02:	2501      	movs	r5, #1
 8003f04:	4085      	lsls	r5, r0
 8003f06:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8003f0a:	4328      	orrs	r0, r5
 8003f0c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8003f10:	48a2      	ldr	r0, [pc, #648]	; (800419c <HAL_ADC_AnalogWDGConfig+0x348>)
 8003f12:	6800      	ldr	r0, [r0, #0]
 8003f14:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8003f18:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8003f1c:	68d0      	ldr	r0, [r2, #12]
 8003f1e:	f000 80b0 	beq.w	8004082 <HAL_ADC_AnalogWDGConfig+0x22e>
 8003f22:	f010 0f10 	tst.w	r0, #16
 8003f26:	690d      	ldr	r5, [r1, #16]
 8003f28:	68d0      	ldr	r0, [r2, #12]
 8003f2a:	f040 80b1 	bne.w	8004090 <HAL_ADC_AnalogWDGConfig+0x23c>
 8003f2e:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8003f32:	0040      	lsls	r0, r0, #1
 8003f34:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8003f38:	4d98      	ldr	r5, [pc, #608]	; (800419c <HAL_ADC_AnalogWDGConfig+0x348>)
 8003f3a:	682d      	ldr	r5, [r5, #0]
 8003f3c:	f005 4570 	and.w	r5, r5, #4026531840	; 0xf0000000
 8003f40:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8003f44:	f000 8096 	beq.w	8004074 <HAL_ADC_AnalogWDGConfig+0x220>
 8003f48:	68d5      	ldr	r5, [r2, #12]
 8003f4a:	68d6      	ldr	r6, [r2, #12]
 8003f4c:	f015 0f10 	tst.w	r5, #16
 8003f50:	694d      	ldr	r5, [r1, #20]
 8003f52:	f040 80a3 	bne.w	800409c <HAL_ADC_AnalogWDGConfig+0x248>
 8003f56:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8003f5a:	0076      	lsls	r6, r6, #1
 8003f5c:	40b5      	lsls	r5, r6
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8003f5e:	4e8e      	ldr	r6, [pc, #568]	; (8004198 <HAL_ADC_AnalogWDGConfig+0x344>)
 8003f60:	42b4      	cmp	r4, r6
 8003f62:	d068      	beq.n	8004036 <HAL_ADC_AnalogWDGConfig+0x1e2>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8003f64:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8003f68:	f44f 7600 	mov.w	r6, #512	; 0x200
 8003f6c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8003f70:	4325      	orrs	r5, r4
 8003f72:	f8c2 50b8 	str.w	r5, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8003f76:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8003f7a:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8003f7e:	4320      	orrs	r0, r4
 8003f80:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f84:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003f86:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8003f8a:	6558      	str	r0, [r3, #84]	; 0x54
 8003f8c:	6016      	str	r6, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8003f8e:	7b09      	ldrb	r1, [r1, #12]
 8003f90:	2901      	cmp	r1, #1
 8003f92:	f000 8099 	beq.w	80040c8 <HAL_ADC_AnalogWDGConfig+0x274>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8003f96:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003f9e:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003fa6:	bcf0      	pop	{r4, r5, r6, r7}
 8003fa8:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8003faa:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8003fae:	f000 8109 	beq.w	80041c4 <HAL_ADC_AnalogWDGConfig+0x370>
 8003fb2:	d82b      	bhi.n	800400c <HAL_ADC_AnalogWDGConfig+0x1b8>
 8003fb4:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8003fb8:	f000 80f9 	beq.w	80041ae <HAL_ADC_AnalogWDGConfig+0x35a>
 8003fbc:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003fc0:	d119      	bne.n	8003ff6 <HAL_ADC_AnalogWDGConfig+0x1a2>
  MODIFY_REG(*preg,
 8003fc2:	68d4      	ldr	r4, [r2, #12]
 8003fc4:	4876      	ldr	r0, [pc, #472]	; (80041a0 <HAL_ADC_AnalogWDGConfig+0x34c>)
 8003fc6:	4020      	ands	r0, r4
 8003fc8:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8003fcc:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8003fce:	4873      	ldr	r0, [pc, #460]	; (800419c <HAL_ADC_AnalogWDGConfig+0x348>)
 8003fd0:	6800      	ldr	r0, [r0, #0]
 8003fd2:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8003fd6:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8003fda:	68d0      	ldr	r0, [r2, #12]
 8003fdc:	f000 8083 	beq.w	80040e6 <HAL_ADC_AnalogWDGConfig+0x292>
 8003fe0:	f010 0f10 	tst.w	r0, #16
 8003fe4:	690d      	ldr	r5, [r1, #16]
 8003fe6:	68d0      	ldr	r0, [r2, #12]
 8003fe8:	f040 80b9 	bne.w	800415e <HAL_ADC_AnalogWDGConfig+0x30a>
 8003fec:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8003ff0:	0040      	lsls	r0, r0, #1
 8003ff2:	4085      	lsls	r5, r0
 8003ff4:	e07c      	b.n	80040f0 <HAL_ADC_AnalogWDGConfig+0x29c>
      switch (AnalogWDGConfig->WatchdogMode)
 8003ff6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003ffa:	f040 80d3 	bne.w	80041a4 <HAL_ADC_AnalogWDGConfig+0x350>
 8003ffe:	68d4      	ldr	r4, [r2, #12]
 8004000:	4867      	ldr	r0, [pc, #412]	; (80041a0 <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004002:	4020      	ands	r0, r4
 8004004:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004008:	60d0      	str	r0, [r2, #12]
}
 800400a:	e7e0      	b.n	8003fce <HAL_ADC_AnalogWDGConfig+0x17a>
 800400c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004010:	f000 80e3 	beq.w	80041da <HAL_ADC_AnalogWDGConfig+0x386>
 8004014:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004018:	f040 80c4 	bne.w	80041a4 <HAL_ADC_AnalogWDGConfig+0x350>
  MODIFY_REG(*preg,
 800401c:	68d5      	ldr	r5, [r2, #12]
 800401e:	6888      	ldr	r0, [r1, #8]
 8004020:	4c5f      	ldr	r4, [pc, #380]	; (80041a0 <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004022:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004026:	402c      	ands	r4, r5
 8004028:	4320      	orrs	r0, r4
 800402a:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 800402e:	60d0      	str	r0, [r2, #12]
}
 8004030:	e7cd      	b.n	8003fce <HAL_ADC_AnalogWDGConfig+0x17a>
  __HAL_LOCK(hadc);
 8004032:	2002      	movs	r0, #2
}
 8004034:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004036:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800403a:	f44f 7680 	mov.w	r6, #256	; 0x100
 800403e:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004042:	4325      	orrs	r5, r4
 8004044:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004048:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 800404c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004050:	4320      	orrs	r0, r4
 8004052:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004056:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004058:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 800405c:	6558      	str	r0, [r3, #84]	; 0x54
 800405e:	6016      	str	r6, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004060:	7b09      	ldrb	r1, [r1, #12]
 8004062:	2901      	cmp	r1, #1
 8004064:	f000 808d 	beq.w	8004182 <HAL_ADC_AnalogWDGConfig+0x32e>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004068:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800406a:	2000      	movs	r0, #0
 800406c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004070:	6051      	str	r1, [r2, #4]
}
 8004072:	e72f      	b.n	8003ed4 <HAL_ADC_AnalogWDGConfig+0x80>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004074:	68d6      	ldr	r6, [r2, #12]
 8004076:	694d      	ldr	r5, [r1, #20]
 8004078:	f3c6 0682 	ubfx	r6, r6, #2, #3
 800407c:	0076      	lsls	r6, r6, #1
 800407e:	40b5      	lsls	r5, r6
 8004080:	e76d      	b.n	8003f5e <HAL_ADC_AnalogWDGConfig+0x10a>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004082:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004086:	690d      	ldr	r5, [r1, #16]
 8004088:	0040      	lsls	r0, r0, #1
 800408a:	fa05 f000 	lsl.w	r0, r5, r0
 800408e:	e753      	b.n	8003f38 <HAL_ADC_AnalogWDGConfig+0xe4>
 8004090:	0840      	lsrs	r0, r0, #1
 8004092:	f000 0008 	and.w	r0, r0, #8
 8004096:	fa05 f000 	lsl.w	r0, r5, r0
 800409a:	e74d      	b.n	8003f38 <HAL_ADC_AnalogWDGConfig+0xe4>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800409c:	0876      	lsrs	r6, r6, #1
 800409e:	f006 0608 	and.w	r6, r6, #8
 80040a2:	40b5      	lsls	r5, r6
 80040a4:	e75b      	b.n	8003f5e <HAL_ADC_AnalogWDGConfig+0x10a>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	d064      	beq.n	8004174 <HAL_ADC_AnalogWDGConfig+0x320>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80040ae:	2800      	cmp	r0, #0
 80040b0:	f000 809a 	beq.w	80041e8 <HAL_ADC_AnalogWDGConfig+0x394>
  return __builtin_clz(value);
 80040b4:	fab0 f080 	clz	r0, r0
 80040b8:	2501      	movs	r5, #1
 80040ba:	4085      	lsls	r5, r0
 80040bc:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 80040c0:	4328      	orrs	r0, r5
 80040c2:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 80040c6:	e723      	b.n	8003f10 <HAL_ADC_AnalogWDGConfig+0xbc>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80040c8:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ca:	2000      	movs	r0, #0
 80040cc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80040d0:	6051      	str	r1, [r2, #4]
}
 80040d2:	e6ff      	b.n	8003ed4 <HAL_ADC_AnalogWDGConfig+0x80>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80040d8:	2800      	cmp	r0, #0
 80040da:	d050      	beq.n	800417e <HAL_ADC_AnalogWDGConfig+0x32a>
  return __builtin_clz(value);
 80040dc:	fab0 f080 	clz	r0, r0
 80040e0:	2501      	movs	r5, #1
 80040e2:	4085      	lsls	r5, r0
 80040e4:	e70f      	b.n	8003f06 <HAL_ADC_AnalogWDGConfig+0xb2>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80040e6:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80040ea:	690d      	ldr	r5, [r1, #16]
 80040ec:	0040      	lsls	r0, r0, #1
 80040ee:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80040f0:	482a      	ldr	r0, [pc, #168]	; (800419c <HAL_ADC_AnalogWDGConfig+0x348>)
 80040f2:	6800      	ldr	r0, [r0, #0]
 80040f4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80040f8:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80040fc:	68d0      	ldr	r0, [r2, #12]
 80040fe:	d00a      	beq.n	8004116 <HAL_ADC_AnalogWDGConfig+0x2c2>
 8004100:	f010 0f10 	tst.w	r0, #16
 8004104:	694c      	ldr	r4, [r1, #20]
 8004106:	68d0      	ldr	r0, [r2, #12]
 8004108:	d12e      	bne.n	8004168 <HAL_ADC_AnalogWDGConfig+0x314>
 800410a:	f3c0 0082 	ubfx	r0, r0, #2, #3
 800410e:	0040      	lsls	r0, r0, #1
 8004110:	fa04 f000 	lsl.w	r0, r4, r0
 8004114:	e005      	b.n	8004122 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8004116:	f3c0 0082 	ubfx	r0, r0, #2, #3
 800411a:	694c      	ldr	r4, [r1, #20]
 800411c:	0040      	lsls	r0, r0, #1
 800411e:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004122:	6a14      	ldr	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004124:	2680      	movs	r6, #128	; 0x80
 8004126:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800412a:	4304      	orrs	r4, r0
 800412c:	6214      	str	r4, [r2, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800412e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004130:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8004134:	4328      	orrs	r0, r5
 8004136:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004138:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800413a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800413e:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004140:	2000      	movs	r0, #0
 8004142:	6016      	str	r6, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 8004144:	7b09      	ldrb	r1, [r1, #12]
 8004146:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004148:	6851      	ldr	r1, [r2, #4]
 800414a:	bf0c      	ite	eq
 800414c:	4331      	orreq	r1, r6
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800414e:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 8004152:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800415a:	bcf0      	pop	{r4, r5, r6, r7}
 800415c:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800415e:	0840      	lsrs	r0, r0, #1
 8004160:	f000 0008 	and.w	r0, r0, #8
 8004164:	4085      	lsls	r5, r0
 8004166:	e7c3      	b.n	80040f0 <HAL_ADC_AnalogWDGConfig+0x29c>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004168:	0840      	lsrs	r0, r0, #1
 800416a:	f000 0008 	and.w	r0, r0, #8
 800416e:	fa04 f000 	lsl.w	r0, r4, r0
 8004172:	e7d6      	b.n	8004122 <HAL_ADC_AnalogWDGConfig+0x2ce>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004174:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004178:	2501      	movs	r5, #1
 800417a:	4085      	lsls	r5, r0
 800417c:	e79e      	b.n	80040bc <HAL_ADC_AnalogWDGConfig+0x268>
 800417e:	2501      	movs	r5, #1
 8004180:	e6c1      	b.n	8003f06 <HAL_ADC_AnalogWDGConfig+0xb2>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004182:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004184:	2000      	movs	r0, #0
 8004186:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800418a:	6051      	str	r1, [r2, #4]
}
 800418c:	e6a2      	b.n	8003ed4 <HAL_ADC_AnalogWDGConfig+0x80>
 800418e:	bf00      	nop
 8004190:	7dc00000 	.word	0x7dc00000
 8004194:	7dcfffff 	.word	0x7dcfffff
 8004198:	001fffff 	.word	0x001fffff
 800419c:	5c001000 	.word	0x5c001000
 80041a0:	823fffff 	.word	0x823fffff
  MODIFY_REG(*preg,
 80041a4:	68d4      	ldr	r4, [r2, #12]
 80041a6:	4811      	ldr	r0, [pc, #68]	; (80041ec <HAL_ADC_AnalogWDGConfig+0x398>)
 80041a8:	4020      	ands	r0, r4
 80041aa:	60d0      	str	r0, [r2, #12]
}
 80041ac:	e70f      	b.n	8003fce <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 80041ae:	68d5      	ldr	r5, [r2, #12]
 80041b0:	6888      	ldr	r0, [r1, #8]
 80041b2:	4c0e      	ldr	r4, [pc, #56]	; (80041ec <HAL_ADC_AnalogWDGConfig+0x398>)
 80041b4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80041b8:	402c      	ands	r4, r5
 80041ba:	4320      	orrs	r0, r4
 80041bc:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80041c0:	60d0      	str	r0, [r2, #12]
}
 80041c2:	e704      	b.n	8003fce <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 80041c4:	68d5      	ldr	r5, [r2, #12]
 80041c6:	6888      	ldr	r0, [r1, #8]
 80041c8:	4c08      	ldr	r4, [pc, #32]	; (80041ec <HAL_ADC_AnalogWDGConfig+0x398>)
 80041ca:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80041ce:	402c      	ands	r4, r5
 80041d0:	4320      	orrs	r0, r4
 80041d2:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 80041d6:	60d0      	str	r0, [r2, #12]
}
 80041d8:	e6f9      	b.n	8003fce <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 80041da:	68d4      	ldr	r4, [r2, #12]
 80041dc:	4803      	ldr	r0, [pc, #12]	; (80041ec <HAL_ADC_AnalogWDGConfig+0x398>)
 80041de:	4020      	ands	r0, r4
 80041e0:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 80041e4:	60d0      	str	r0, [r2, #12]
}
 80041e6:	e6f2      	b.n	8003fce <HAL_ADC_AnalogWDGConfig+0x17a>
 80041e8:	2501      	movs	r5, #1
 80041ea:	e767      	b.n	80040bc <HAL_ADC_AnalogWDGConfig+0x268>
 80041ec:	823fffff 	.word	0x823fffff

080041f0 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041f0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	07d1      	lsls	r1, r2, #31
 80041f6:	d501      	bpl.n	80041fc <ADC_Enable+0xc>
  return HAL_OK;
 80041f8:	2000      	movs	r0, #0
}
 80041fa:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80041fc:	6899      	ldr	r1, [r3, #8]
 80041fe:	4a21      	ldr	r2, [pc, #132]	; (8004284 <ADC_Enable+0x94>)
 8004200:	4211      	tst	r1, r2
{
 8004202:	b570      	push	{r4, r5, r6, lr}
 8004204:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004206:	d008      	beq.n	800421a <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004208:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 800420a:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420c:	f043 0310 	orr.w	r3, r3, #16
 8004210:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004214:	4303      	orrs	r3, r0
 8004216:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004218:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800421a:	6899      	ldr	r1, [r3, #8]
 800421c:	4a1a      	ldr	r2, [pc, #104]	; (8004288 <ADC_Enable+0x98>)
 800421e:	400a      	ands	r2, r1
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004226:	f7ff fa13 	bl	8003650 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	4a17      	ldr	r2, [pc, #92]	; (800428c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 800422e:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004230:	4293      	cmp	r3, r2
 8004232:	d01f      	beq.n	8004274 <ADC_Enable+0x84>
 8004234:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004238:	4293      	cmp	r3, r2
 800423a:	d01b      	beq.n	8004274 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800423c:	4a14      	ldr	r2, [pc, #80]	; (8004290 <ADC_Enable+0xa0>)
 800423e:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	07d6      	lsls	r6, r2, #31
 8004244:	d414      	bmi.n	8004270 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 8004246:	4e10      	ldr	r6, [pc, #64]	; (8004288 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004248:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800424a:	07d0      	lsls	r0, r2, #31
 800424c:	d404      	bmi.n	8004258 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	4032      	ands	r2, r6
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004258:	f7ff f9fa 	bl	8003650 <HAL_GetTick>
 800425c:	1b43      	subs	r3, r0, r5
 800425e:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004260:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004262:	d902      	bls.n	800426a <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	07d1      	lsls	r1, r2, #31
 8004268:	d5ce      	bpl.n	8004208 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	07d2      	lsls	r2, r2, #31
 800426e:	d5eb      	bpl.n	8004248 <ADC_Enable+0x58>
  return HAL_OK;
 8004270:	2000      	movs	r0, #0
}
 8004272:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <ADC_Enable+0xa4>)
 8004276:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004278:	06d2      	lsls	r2, r2, #27
 800427a:	d0e1      	beq.n	8004240 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800427c:	4a06      	ldr	r2, [pc, #24]	; (8004298 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800427e:	4293      	cmp	r3, r2
 8004280:	d1de      	bne.n	8004240 <ADC_Enable+0x50>
 8004282:	e7f5      	b.n	8004270 <ADC_Enable+0x80>
 8004284:	8000003f 	.word	0x8000003f
 8004288:	7fffffc0 	.word	0x7fffffc0
 800428c:	40022000 	.word	0x40022000
 8004290:	58026300 	.word	0x58026300
 8004294:	40022300 	.word	0x40022300
 8004298:	40022100 	.word	0x40022100

0800429c <ADC_Disable>:
{
 800429c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800429e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	0795      	lsls	r5, r2, #30
 80042a4:	d502      	bpl.n	80042ac <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042a6:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80042a8:	2000      	movs	r0, #0
}
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042ae:	07d4      	lsls	r4, r2, #31
 80042b0:	d529      	bpl.n	8004306 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	4604      	mov	r4, r0
 80042b6:	f002 020d 	and.w	r2, r2, #13
 80042ba:	2a01      	cmp	r2, #1
 80042bc:	d008      	beq.n	80042d0 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042be:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80042c0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c2:	f043 0310 	orr.w	r3, r3, #16
 80042c6:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042ca:	4303      	orrs	r3, r0
 80042cc:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80042ce:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80042d0:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80042d2:	2103      	movs	r1, #3
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <ADC_Disable+0x70>)
 80042d6:	4002      	ands	r2, r0
 80042d8:	f042 0202 	orr.w	r2, r2, #2
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80042e0:	f7ff f9b6 	bl	8003650 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042e4:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80042e6:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	07d9      	lsls	r1, r3, #31
 80042ec:	d50b      	bpl.n	8004306 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042ee:	f7ff f9af 	bl	8003650 <HAL_GetTick>
 80042f2:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042f4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042f6:	2802      	cmp	r0, #2
 80042f8:	d902      	bls.n	8004300 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	07d2      	lsls	r2, r2, #31
 80042fe:	d4de      	bmi.n	80042be <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	07db      	lsls	r3, r3, #31
 8004304:	d4f3      	bmi.n	80042ee <ADC_Disable+0x52>
  return HAL_OK;
 8004306:	2000      	movs	r0, #0
}
 8004308:	bd38      	pop	{r3, r4, r5, pc}
 800430a:	bf00      	nop
 800430c:	7fffffc0 	.word	0x7fffffc0

08004310 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004310:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004312:	4a5a      	ldr	r2, [pc, #360]	; (800447c <ADC_ConfigureBoostMode+0x16c>)
{
 8004314:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004316:	6803      	ldr	r3, [r0, #0]
 8004318:	4293      	cmp	r3, r2
 800431a:	d029      	beq.n	8004370 <ADC_ConfigureBoostMode+0x60>
 800431c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004320:	4293      	cmp	r3, r2
 8004322:	d025      	beq.n	8004370 <ADC_ConfigureBoostMode+0x60>
 8004324:	4b56      	ldr	r3, [pc, #344]	; (8004480 <ADC_ConfigureBoostMode+0x170>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800432c:	bf14      	ite	ne
 800432e:	2301      	movne	r3, #1
 8004330:	2300      	moveq	r3, #0
 8004332:	b333      	cbz	r3, 8004382 <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004334:	f003 fd22 	bl	8007d7c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8004338:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 800433a:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800433c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004340:	f000 808b 	beq.w	800445a <ADC_ConfigureBoostMode+0x14a>
 8004344:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004348:	d06f      	beq.n	800442a <ADC_ConfigureBoostMode+0x11a>
 800434a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434e:	f000 8084 	beq.w	800445a <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004352:	f7ff f995 	bl	8003680 <HAL_GetREVID>
 8004356:	f241 0303 	movw	r3, #4099	; 0x1003
 800435a:	4298      	cmp	r0, r3
 800435c:	d84e      	bhi.n	80043fc <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 800435e:	4b49      	ldr	r3, [pc, #292]	; (8004484 <ADC_ConfigureBoostMode+0x174>)
 8004360:	429d      	cmp	r5, r3
 8004362:	d92d      	bls.n	80043c0 <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	6893      	ldr	r3, [r2, #8]
 8004368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436c:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800436e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004370:	4b45      	ldr	r3, [pc, #276]	; (8004488 <ADC_ConfigureBoostMode+0x178>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8004378:	bf14      	ite	ne
 800437a:	2301      	movne	r3, #1
 800437c:	2300      	moveq	r3, #0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1d8      	bne.n	8004334 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004382:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004386:	f004 fe2d 	bl	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800438a:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800438c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800438e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004392:	d06c      	beq.n	800446e <ADC_ConfigureBoostMode+0x15e>
 8004394:	d808      	bhi.n	80043a8 <ADC_ConfigureBoostMode+0x98>
 8004396:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800439a:	d050      	beq.n	800443e <ADC_ConfigureBoostMode+0x12e>
 800439c:	d916      	bls.n	80043cc <ADC_ConfigureBoostMode+0xbc>
 800439e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043a2:	d1d6      	bne.n	8004352 <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 80043a4:	0945      	lsrs	r5, r0, #5
        break;
 80043a6:	e7d4      	b.n	8004352 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 80043a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80043ac:	d045      	beq.n	800443a <ADC_ConfigureBoostMode+0x12a>
 80043ae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80043b2:	d1ce      	bne.n	8004352 <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80043b4:	f7ff f964 	bl	8003680 <HAL_GetREVID>
 80043b8:	f241 0303 	movw	r3, #4099	; 0x1003
 80043bc:	4298      	cmp	r0, r3
 80043be:	d840      	bhi.n	8004442 <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	6893      	ldr	r3, [r2, #8]
 80043c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c8:	6093      	str	r3, [r2, #8]
}
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80043cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d0:	d006      	beq.n	80043e0 <ADC_ConfigureBoostMode+0xd0>
 80043d2:	d90a      	bls.n	80043ea <ADC_ConfigureBoostMode+0xda>
 80043d4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80043d8:	d002      	beq.n	80043e0 <ADC_ConfigureBoostMode+0xd0>
 80043da:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80043de:	d1b8      	bne.n	8004352 <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80043e0:	0c9b      	lsrs	r3, r3, #18
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80043e8:	e7b3      	b.n	8004352 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 80043ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043ee:	d0f7      	beq.n	80043e0 <ADC_ConfigureBoostMode+0xd0>
 80043f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043f4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80043f8:	d0f2      	beq.n	80043e0 <ADC_ConfigureBoostMode+0xd0>
 80043fa:	e7aa      	b.n	8004352 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 80043fc:	4b23      	ldr	r3, [pc, #140]	; (800448c <ADC_ConfigureBoostMode+0x17c>)
 80043fe:	429d      	cmp	r5, r3
 8004400:	d805      	bhi.n	800440e <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	6893      	ldr	r3, [r2, #8]
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440a:	6093      	str	r3, [r2, #8]
}
 800440c:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <ADC_ConfigureBoostMode+0x180>)
 8004410:	429d      	cmp	r5, r3
 8004412:	d91a      	bls.n	800444a <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8004414:	4b1f      	ldr	r3, [pc, #124]	; (8004494 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004416:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8004418:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800441a:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 800441c:	d829      	bhi.n	8004472 <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800441e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004426:	6093      	str	r3, [r2, #8]
}
 8004428:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 800442a:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800442c:	f7ff f928 	bl	8003680 <HAL_GetREVID>
 8004430:	f241 0303 	movw	r3, #4099	; 0x1003
 8004434:	4298      	cmp	r0, r3
 8004436:	d8e1      	bhi.n	80043fc <ADC_ConfigureBoostMode+0xec>
 8004438:	e791      	b.n	800435e <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 800443a:	09c5      	lsrs	r5, r0, #7
        break;
 800443c:	e789      	b.n	8004352 <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 800443e:	0905      	lsrs	r5, r0, #4
        break;
 8004440:	e787      	b.n	8004352 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <ADC_ConfigureBoostMode+0x17c>)
 8004444:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8004448:	d2db      	bcs.n	8004402 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	6893      	ldr	r3, [r2, #8]
 800444e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004456:	6093      	str	r3, [r2, #8]
}
 8004458:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004460:	f7ff f90e 	bl	8003680 <HAL_GetREVID>
 8004464:	f241 0303 	movw	r3, #4099	; 0x1003
 8004468:	4298      	cmp	r0, r3
 800446a:	d8c7      	bhi.n	80043fc <ADC_ConfigureBoostMode+0xec>
 800446c:	e777      	b.n	800435e <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 800446e:	0985      	lsrs	r5, r0, #6
        break;
 8004470:	e76f      	b.n	8004352 <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004472:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004476:	6093      	str	r3, [r2, #8]
}
 8004478:	bd38      	pop	{r3, r4, r5, pc}
 800447a:	bf00      	nop
 800447c:	40022000 	.word	0x40022000
 8004480:	58026300 	.word	0x58026300
 8004484:	01312d00 	.word	0x01312d00
 8004488:	40022300 	.word	0x40022300
 800448c:	00bebc21 	.word	0x00bebc21
 8004490:	017d7841 	.word	0x017d7841
 8004494:	02faf081 	.word	0x02faf081

08004498 <HAL_ADC_Init>:
{
 8004498:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 800449a:	2300      	movs	r3, #0
{
 800449c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800449e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80044a0:	2800      	cmp	r0, #0
 80044a2:	f000 80d0 	beq.w	8004646 <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044a6:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80044a8:	4604      	mov	r4, r0
 80044aa:	2d00      	cmp	r5, #0
 80044ac:	f000 80ba 	beq.w	8004624 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044b0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044b2:	6893      	ldr	r3, [r2, #8]
 80044b4:	009d      	lsls	r5, r3, #2
 80044b6:	d503      	bpl.n	80044c0 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044b8:	6891      	ldr	r1, [r2, #8]
 80044ba:	4b71      	ldr	r3, [pc, #452]	; (8004680 <HAL_ADC_Init+0x1e8>)
 80044bc:	400b      	ands	r3, r1
 80044be:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044c0:	6893      	ldr	r3, [r2, #8]
 80044c2:	00d8      	lsls	r0, r3, #3
 80044c4:	d416      	bmi.n	80044f4 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044c6:	4b6f      	ldr	r3, [pc, #444]	; (8004684 <HAL_ADC_Init+0x1ec>)
 80044c8:	4d6f      	ldr	r5, [pc, #444]	; (8004688 <HAL_ADC_Init+0x1f0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80044cc:	6890      	ldr	r0, [r2, #8]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	496e      	ldr	r1, [pc, #440]	; (800468c <HAL_ADC_Init+0x1f4>)
 80044d2:	fba5 5303 	umull	r5, r3, r5, r3
 80044d6:	4001      	ands	r1, r0
 80044d8:	099b      	lsrs	r3, r3, #6
 80044da:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80044de:	3301      	adds	r3, #1
 80044e0:	6091      	str	r1, [r2, #8]
 80044e2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80044e4:	9b01      	ldr	r3, [sp, #4]
 80044e6:	b12b      	cbz	r3, 80044f4 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80044e8:	9b01      	ldr	r3, [sp, #4]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80044ee:	9b01      	ldr	r3, [sp, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f9      	bne.n	80044e8 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044f4:	6893      	ldr	r3, [r2, #8]
 80044f6:	00d9      	lsls	r1, r3, #3
 80044f8:	d424      	bmi.n	8004544 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80044fc:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fe:	f043 0310 	orr.w	r3, r3, #16
 8004502:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004506:	432b      	orrs	r3, r5
 8004508:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800450a:	6893      	ldr	r3, [r2, #8]
 800450c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004510:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004512:	d11d      	bne.n	8004550 <HAL_ADC_Init+0xb8>
 8004514:	06db      	lsls	r3, r3, #27
 8004516:	d41b      	bmi.n	8004550 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8004518:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800451a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004524:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004526:	07de      	lsls	r6, r3, #31
 8004528:	d428      	bmi.n	800457c <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800452a:	4b59      	ldr	r3, [pc, #356]	; (8004690 <HAL_ADC_Init+0x1f8>)
 800452c:	429a      	cmp	r2, r3
 800452e:	d017      	beq.n	8004560 <HAL_ADC_Init+0xc8>
 8004530:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004534:	429a      	cmp	r2, r3
 8004536:	d013      	beq.n	8004560 <HAL_ADC_Init+0xc8>
 8004538:	4b56      	ldr	r3, [pc, #344]	; (8004694 <HAL_ADC_Init+0x1fc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	07d9      	lsls	r1, r3, #31
 800453e:	d41d      	bmi.n	800457c <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004540:	4a55      	ldr	r2, [pc, #340]	; (8004698 <HAL_ADC_Init+0x200>)
 8004542:	e015      	b.n	8004570 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004544:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004546:	2500      	movs	r5, #0
 8004548:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800454c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800454e:	d0e1      	beq.n	8004514 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004550:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004552:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004554:	f043 0310 	orr.w	r3, r3, #16
}
 8004558:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800455c:	b002      	add	sp, #8
 800455e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004560:	4a4b      	ldr	r2, [pc, #300]	; (8004690 <HAL_ADC_Init+0x1f8>)
 8004562:	4b4e      	ldr	r3, [pc, #312]	; (800469c <HAL_ADC_Init+0x204>)
 8004564:	6892      	ldr	r2, [r2, #8]
 8004566:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004568:	4313      	orrs	r3, r2
 800456a:	07d8      	lsls	r0, r3, #31
 800456c:	d406      	bmi.n	800457c <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800456e:	4a4c      	ldr	r2, [pc, #304]	; (80046a0 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004570:	6893      	ldr	r3, [r2, #8]
 8004572:	6861      	ldr	r1, [r4, #4]
 8004574:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004578:	430b      	orrs	r3, r1
 800457a:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800457c:	f7ff f880 	bl	8003680 <HAL_GetREVID>
 8004580:	f241 0303 	movw	r3, #4099	; 0x1003
 8004584:	68a1      	ldr	r1, [r4, #8]
 8004586:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004588:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800458a:	d851      	bhi.n	8004630 <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800458c:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800458e:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004590:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004592:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8004596:	4302      	orrs	r2, r0
 8004598:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800459a:	2b01      	cmp	r3, #1
 800459c:	d103      	bne.n	80045a6 <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800459e:	6a23      	ldr	r3, [r4, #32]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045a8:	b123      	cbz	r3, 80045b4 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045aa:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80045b0:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045b2:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	493b      	ldr	r1, [pc, #236]	; (80046a4 <HAL_ADC_Init+0x20c>)
 80045b8:	68d8      	ldr	r0, [r3, #12]
 80045ba:	4001      	ands	r1, r0
 80045bc:	430a      	orrs	r2, r1
 80045be:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045c6:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045c8:	d11c      	bne.n	8004604 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045ca:	0712      	lsls	r2, r2, #28
 80045cc:	d41a      	bmi.n	8004604 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045ce:	68d9      	ldr	r1, [r3, #12]
 80045d0:	4a35      	ldr	r2, [pc, #212]	; (80046a8 <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045d2:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045d4:	400a      	ands	r2, r1
 80045d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80045d8:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80045dc:	430a      	orrs	r2, r1
 80045de:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80045e0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80045e4:	2a01      	cmp	r2, #1
 80045e6:	d03a      	beq.n	800465e <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80045f0:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80045f2:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80045f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80045fa:	430a      	orrs	r2, r1
 80045fc:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80045fe:	f7ff fe87 	bl	8004310 <ADC_ConfigureBoostMode>
 8004602:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004604:	68e2      	ldr	r2, [r4, #12]
 8004606:	2a01      	cmp	r2, #1
 8004608:	d021      	beq.n	800464e <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800460a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800460c:	f022 020f 	bic.w	r2, r2, #15
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004612:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8004614:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8004620:	b002      	add	sp, #8
 8004622:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004624:	f7fe fc7c 	bl	8002f20 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004628:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800462a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800462e:	e73f      	b.n	80044b0 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004630:	2910      	cmp	r1, #16
 8004632:	d1ab      	bne.n	800458c <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004634:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004636:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004638:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800463a:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 800463e:	430a      	orrs	r2, r1
 8004640:	f042 021c 	orr.w	r2, r2, #28
 8004644:	e7a9      	b.n	800459a <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8004646:	2501      	movs	r5, #1
}
 8004648:	4628      	mov	r0, r5
 800464a:	b002      	add	sp, #8
 800464c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800464e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004650:	69a2      	ldr	r2, [r4, #24]
 8004652:	f021 010f 	bic.w	r1, r1, #15
 8004656:	3a01      	subs	r2, #1
 8004658:	430a      	orrs	r2, r1
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
 800465c:	e7d9      	b.n	8004612 <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800465e:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8004662:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8004664:	3901      	subs	r1, #1
 8004666:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004668:	4332      	orrs	r2, r6
 800466a:	691e      	ldr	r6, [r3, #16]
 800466c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004670:	490e      	ldr	r1, [pc, #56]	; (80046ac <HAL_ADC_Init+0x214>)
 8004672:	4302      	orrs	r2, r0
 8004674:	4031      	ands	r1, r6
 8004676:	430a      	orrs	r2, r1
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	611a      	str	r2, [r3, #16]
 800467e:	e7b7      	b.n	80045f0 <HAL_ADC_Init+0x158>
 8004680:	5fffffc0 	.word	0x5fffffc0
 8004684:	240001f4 	.word	0x240001f4
 8004688:	053e2d63 	.word	0x053e2d63
 800468c:	6fffffc0 	.word	0x6fffffc0
 8004690:	40022000 	.word	0x40022000
 8004694:	58026000 	.word	0x58026000
 8004698:	58026300 	.word	0x58026300
 800469c:	40022100 	.word	0x40022100
 80046a0:	40022300 	.word	0x40022300
 80046a4:	fff0c003 	.word	0xfff0c003
 80046a8:	ffffbffc 	.word	0xffffbffc
 80046ac:	fc00f81e 	.word	0xfc00f81e

080046b0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80046b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b2:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046b4:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
{
 80046b8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80046ba:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 80046bc:	2901      	cmp	r1, #1
  __IO uint32_t wait_loop_index = 0UL;
 80046be:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 80046c0:	d03e      	beq.n	8004740 <HAL_ADCEx_Calibration_Start+0x90>
 80046c2:	2301      	movs	r3, #1
 80046c4:	4604      	mov	r4, r0
 80046c6:	4617      	mov	r7, r2
 80046c8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80046cc:	f7ff fde6 	bl	800429c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 80046d2:	b9e0      	cbnz	r0, 800470e <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 80046d4:	4e1c      	ldr	r6, [pc, #112]	; (8004748 <HAL_ADCEx_Calibration_Start+0x98>)
  MODIFY_REG(ADCx->CR,
 80046d6:	f007 4280 	and.w	r2, r7, #1073741824	; 0x40000000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80046da:	6821      	ldr	r1, [r4, #0]
 80046dc:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
    ADC_STATE_CLR_SET(hadc->State,
 80046e0:	401e      	ands	r6, r3
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <HAL_ADCEx_Calibration_Start+0x9c>)

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046e4:	4f1a      	ldr	r7, [pc, #104]	; (8004750 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 80046e6:	f046 0602 	orr.w	r6, r6, #2
 80046ea:	6566      	str	r6, [r4, #84]	; 0x54
 80046ec:	688e      	ldr	r6, [r1, #8]
 80046ee:	4033      	ands	r3, r6
 80046f0:	4313      	orrs	r3, r2
 80046f2:	432b      	orrs	r3, r5
 80046f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046f8:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80046fa:	688b      	ldr	r3, [r1, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	db0e      	blt.n	800471e <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6563      	str	r3, [r4, #84]	; 0x54
 800470c:	e002      	b.n	8004714 <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470e:	f043 0310 	orr.w	r3, r3, #16
 8004712:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004714:	2300      	movs	r3, #0
 8004716:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800471a:	b003      	add	sp, #12
 800471c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 800471e:	9b01      	ldr	r3, [sp, #4]
 8004720:	3301      	adds	r3, #1
 8004722:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004724:	9b01      	ldr	r3, [sp, #4]
 8004726:	42bb      	cmp	r3, r7
 8004728:	d3e7      	bcc.n	80046fa <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 800472a:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800472c:	2200      	movs	r2, #0
        return HAL_ERROR;
 800472e:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8004730:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8004734:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8004738:	f043 0310 	orr.w	r3, r3, #16
 800473c:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800473e:	e7ec      	b.n	800471a <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 8004740:	2002      	movs	r0, #2
}
 8004742:	b003      	add	sp, #12
 8004744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004746:	bf00      	nop
 8004748:	ffffeefd 	.word	0xffffeefd
 800474c:	3ffeffc0 	.word	0x3ffeffc0
 8004750:	25c3f800 	.word	0x25c3f800

08004754 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004758:	f8d0 9000 	ldr.w	r9, [r0]
{
 800475c:	b09b      	sub	sp, #108	; 0x6c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800475e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8004762:	f015 0504 	ands.w	r5, r5, #4
 8004766:	d116      	bne.n	8004796 <HAL_ADCEx_MultiModeStart_DMA+0x42>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004768:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800476c:	4604      	mov	r4, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d011      	beq.n	8004796 <HAL_ADCEx_MultiModeStart_DMA+0x42>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
    __HAL_LOCK(hadc);
 8004774:	2601      	movs	r6, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004776:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004778:	4599      	cmp	r9, r3
    __HAL_LOCK(hadc);
 800477a:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800477e:	9517      	str	r5, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004780:	d00d      	beq.n	800479e <HAL_ADCEx_MultiModeStart_DMA+0x4a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004782:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8004784:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 8004786:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800478a:	f043 0320 	orr.w	r3, r3, #32
 800478e:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8004790:	b01b      	add	sp, #108	; 0x6c
 8004792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8004796:	2002      	movs	r0, #2
}
 8004798:	b01b      	add	sp, #108	; 0x6c
 800479a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800479e:	4d24      	ldr	r5, [pc, #144]	; (8004830 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
 80047a0:	460f      	mov	r7, r1
 80047a2:	4690      	mov	r8, r2
 80047a4:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 80047a6:	f7ff fd23 	bl	80041f0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80047aa:	b128      	cbz	r0, 80047b8 <HAL_ADCEx_MultiModeStart_DMA+0x64>
      __HAL_UNLOCK(hadc);
 80047ac:	2300      	movs	r3, #0
 80047ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80047b2:	b01b      	add	sp, #108	; 0x6c
 80047b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80047b8:	a801      	add	r0, sp, #4
 80047ba:	f7ff fd19 	bl	80041f0 <ADC_Enable>
 80047be:	4603      	mov	r3, r0
    if (tmp_hal_status == HAL_OK)
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d1f3      	bne.n	80047ac <HAL_ADCEx_MultiModeStart_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 80047c4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80047c6:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 80047ca:	400a      	ands	r2, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047cc:	4e1a      	ldr	r6, [pc, #104]	; (8004838 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047ce:	f8df c074 	ldr.w	ip, [pc, #116]	; 8004844 <HAL_ADCEx_MultiModeStart_DMA+0xf0>
      ADC_STATE_CLR_SET(hadc->State,
 80047d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80047d6:	4919      	ldr	r1, [pc, #100]	; (800483c <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      ADC_STATE_CLR_SET(hadc->State,
 80047d8:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80047da:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047dc:	63c6      	str	r6, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047de:	6826      	ldr	r6, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047e0:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047e4:	454e      	cmp	r6, r9
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80047e6:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047e8:	d01c      	beq.n	8004824 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80047ea:	42ae      	cmp	r6, r5
 80047ec:	d01a      	beq.n	8004824 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80047ee:	f8df c058 	ldr.w	ip, [pc, #88]	; 8004848 <HAL_ADCEx_MultiModeStart_DMA+0xf4>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047f2:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 80047f4:	2500      	movs	r5, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80047f6:	4643      	mov	r3, r8
 80047f8:	463a      	mov	r2, r7
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047fa:	6031      	str	r1, [r6, #0]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80047fc:	f10c 010c 	add.w	r1, ip, #12
      __HAL_UNLOCK(hadc);
 8004800:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004804:	6875      	ldr	r5, [r6, #4]
 8004806:	f045 0510 	orr.w	r5, r5, #16
 800480a:	6075      	str	r5, [r6, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800480c:	f000 fe70 	bl	80054f0 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004810:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 8004814:	6891      	ldr	r1, [r2, #8]
 8004816:	400b      	ands	r3, r1
 8004818:	f043 0304 	orr.w	r3, r3, #4
 800481c:	6093      	str	r3, [r2, #8]
}
 800481e:	b01b      	add	sp, #108	; 0x6c
 8004820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004824:	f8df c024 	ldr.w	ip, [pc, #36]	; 800484c <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 8004828:	e7e3      	b.n	80047f2 <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 800482a:	bf00      	nop
 800482c:	40022000 	.word	0x40022000
 8004830:	40022100 	.word	0x40022100
 8004834:	fffff0fe 	.word	0xfffff0fe
 8004838:	0800396d 	.word	0x0800396d
 800483c:	080039d9 	.word	0x080039d9
 8004840:	7fffffc0 	.word	0x7fffffc0
 8004844:	080036e9 	.word	0x080036e9
 8004848:	58026300 	.word	0x58026300
 800484c:	40022300 	.word	0x40022300

08004850 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop

08004854 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop

08004858 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <HAL_ADCEx_LevelOutOfWindow3Callback>:
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop

08004860 <HAL_ADCEx_EndOfSamplingCallback>:
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop

08004864 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004864:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004866:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 800486a:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800486c:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800486e:	2a01      	cmp	r2, #1
 8004870:	d04d      	beq.n	800490e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8004872:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004874:	4c2b      	ldr	r4, [pc, #172]	; (8004924 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004876:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004878:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800487a:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800487c:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800487e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8004880:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004884:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004886:	d008      	beq.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004888:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800488a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800488e:	f041 0120 	orr.w	r1, r1, #32
 8004892:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004894:	b01a      	add	sp, #104	; 0x68
 8004896:	bcf0      	pop	{r4, r5, r6, r7}
 8004898:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800489a:	4c23      	ldr	r4, [pc, #140]	; (8004928 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800489c:	68a2      	ldr	r2, [r4, #8]
 800489e:	0752      	lsls	r2, r2, #29
 80048a0:	d50b      	bpl.n	80048ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80048a2:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80048a6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a8:	f042 0220 	orr.w	r2, r2, #32
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80048b4:	b01a      	add	sp, #104	; 0x68
 80048b6:	bcf0      	pop	{r4, r5, r6, r7}
 80048b8:	4770      	bx	lr
 80048ba:	68a8      	ldr	r0, [r5, #8]
 80048bc:	f010 0004 	ands.w	r0, r0, #4
 80048c0:	d1f0      	bne.n	80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048c2:	b1c6      	cbz	r6, 80048f6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048c4:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004930 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80048c8:	684f      	ldr	r7, [r1, #4]
 80048ca:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80048ce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80048d2:	433a      	orrs	r2, r7
 80048d4:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048d8:	68ad      	ldr	r5, [r5, #8]
 80048da:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048dc:	432a      	orrs	r2, r5
 80048de:	07d4      	lsls	r4, r2, #31
 80048e0:	d413      	bmi.n	800490a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 80048e2:	688a      	ldr	r2, [r1, #8]
 80048e4:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80048e8:	4910      	ldr	r1, [pc, #64]	; (800492c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80048ea:	4316      	orrs	r6, r2
 80048ec:	4021      	ands	r1, r4
 80048ee:	430e      	orrs	r6, r1
 80048f0:	f8cc 6008 	str.w	r6, [ip, #8]
 80048f4:	e7db      	b.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048f6:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80048f8:	688a      	ldr	r2, [r1, #8]
 80048fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80048fe:	608a      	str	r2, [r1, #8]
 8004900:	68a8      	ldr	r0, [r5, #8]
 8004902:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004904:	4302      	orrs	r2, r0
 8004906:	07d0      	lsls	r0, r2, #31
 8004908:	d505      	bpl.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800490a:	2000      	movs	r0, #0
 800490c:	e7cf      	b.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800490e:	2002      	movs	r0, #2
}
 8004910:	b01a      	add	sp, #104	; 0x68
 8004912:	bcf0      	pop	{r4, r5, r6, r7}
 8004914:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004916:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004918:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800491a:	4a04      	ldr	r2, [pc, #16]	; (800492c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800491c:	4022      	ands	r2, r4
 800491e:	608a      	str	r2, [r1, #8]
 8004920:	e7c5      	b.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8004922:	bf00      	nop
 8004924:	40022000 	.word	0x40022000
 8004928:	40022100 	.word	0x40022100
 800492c:	fffff0e0 	.word	0xfffff0e0
 8004930:	40022300 	.word	0x40022300

08004934 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004934:	4907      	ldr	r1, [pc, #28]	; (8004954 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004936:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800493a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800493c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004940:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004942:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004946:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004948:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800494c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800494e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004950:	60cb      	str	r3, [r1, #12]
 8004952:	4770      	bx	lr
 8004954:	e000ed00 	.word	0xe000ed00
 8004958:	05fa0000 	.word	0x05fa0000

0800495c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_NVIC_SetPriority+0x68>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004964:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004966:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800496a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800496c:	2d04      	cmp	r5, #4
 800496e:	bf28      	it	cs
 8004970:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004972:	2c06      	cmp	r4, #6
 8004974:	d919      	bls.n	80049aa <HAL_NVIC_SetPriority+0x4e>
 8004976:	3b03      	subs	r3, #3
 8004978:	f04f 34ff 	mov.w	r4, #4294967295
 800497c:	409c      	lsls	r4, r3
 800497e:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004982:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8004986:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004988:	fa04 f405 	lsl.w	r4, r4, r5
 800498c:	ea21 0104 	bic.w	r1, r1, r4
 8004990:	fa01 f103 	lsl.w	r1, r1, r3
 8004994:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004998:	db0a      	blt.n	80049b0 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499a:	0109      	lsls	r1, r1, #4
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <HAL_NVIC_SetPriority+0x6c>)
 800499e:	b2c9      	uxtb	r1, r1
 80049a0:	4403      	add	r3, r0
 80049a2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049a6:	bc30      	pop	{r4, r5}
 80049a8:	4770      	bx	lr
 80049aa:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ac:	4613      	mov	r3, r2
 80049ae:	e7e8      	b.n	8004982 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b0:	f000 000f 	and.w	r0, r0, #15
 80049b4:	0109      	lsls	r1, r1, #4
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_NVIC_SetPriority+0x70>)
 80049b8:	b2c9      	uxtb	r1, r1
 80049ba:	4403      	add	r3, r0
 80049bc:	7619      	strb	r1, [r3, #24]
 80049be:	bc30      	pop	{r4, r5}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000ed00 	.word	0xe000ed00
 80049c8:	e000e100 	.word	0xe000e100
 80049cc:	e000ecfc 	.word	0xe000ecfc

080049d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80049d0:	2800      	cmp	r0, #0
 80049d2:	db07      	blt.n	80049e4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049d4:	2301      	movs	r3, #1
 80049d6:	f000 011f 	and.w	r1, r0, #31
 80049da:	4a03      	ldr	r2, [pc, #12]	; (80049e8 <HAL_NVIC_EnableIRQ+0x18>)
 80049dc:	0940      	lsrs	r0, r0, #5
 80049de:	408b      	lsls	r3, r1
 80049e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	e000e100 	.word	0xe000e100

080049ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049ec:	3801      	subs	r0, #1
 80049ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80049f2:	d20d      	bcs.n	8004a10 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049f4:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049f6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049f8:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fa:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fc:	25f0      	movs	r5, #240	; 0xf0
 80049fe:	4c06      	ldr	r4, [pc, #24]	; (8004a18 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a00:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a02:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a04:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a0a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8004a0c:	bc30      	pop	{r4, r5}
 8004a0e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004a10:	2001      	movs	r0, #1
 8004a12:	4770      	bx	lr
 8004a14:	e000e010 	.word	0xe000e010
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004a1c:	b188      	cbz	r0, 8004a42 <HAL_DAC_Init+0x26>
{
 8004a1e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a20:	7903      	ldrb	r3, [r0, #4]
 8004a22:	4604      	mov	r4, r0
 8004a24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a28:	b13b      	cbz	r3, 8004a3a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a2a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a2c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a2e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a30:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004a32:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a34:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004a36:	7122      	strb	r2, [r4, #4]
}
 8004a38:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004a3a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004a3c:	f7fe fb22 	bl	8003084 <HAL_DAC_MspInit>
 8004a40:	e7f3      	b.n	8004a2a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004a42:	2001      	movs	r0, #1
}
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop

08004a48 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a48:	7942      	ldrb	r2, [r0, #5]
 8004a4a:	2a01      	cmp	r2, #1
 8004a4c:	d026      	beq.n	8004a9c <HAL_DAC_Start+0x54>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a4e:	4603      	mov	r3, r0

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004a50:	2201      	movs	r2, #1
 8004a52:	6800      	ldr	r0, [r0, #0]
{
 8004a54:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a56:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 8004a58:	f001 0510 	and.w	r5, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a5c:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8004a5e:	40aa      	lsls	r2, r5
 8004a60:	6806      	ldr	r6, [r0, #0]
 8004a62:	4332      	orrs	r2, r6
 8004a64:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004a66:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 8004a68:	b971      	cbnz	r1, 8004a88 <HAL_DAC_Start+0x40>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004a6a:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8004a6e:	42a2      	cmp	r2, r4
 8004a70:	d103      	bne.n	8004a7a <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004a72:	6842      	ldr	r2, [r0, #4]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a7a:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8004a7c:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8004a7e:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8004a80:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8004a82:	715a      	strb	r2, [r3, #5]
}
 8004a84:	bc70      	pop	{r4, r5, r6}
 8004a86:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004a88:	40ac      	lsls	r4, r5
 8004a8a:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8004a8e:	42a2      	cmp	r2, r4
 8004a90:	d1f3      	bne.n	8004a7a <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004a92:	6842      	ldr	r2, [r0, #4]
 8004a94:	f042 0202 	orr.w	r2, r2, #2
 8004a98:	6042      	str	r2, [r0, #4]
 8004a9a:	e7ee      	b.n	8004a7a <HAL_DAC_Start+0x32>
  __HAL_LOCK(hdac);
 8004a9c:	2002      	movs	r0, #2
}
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004aa4:	7940      	ldrb	r0, [r0, #5]
{
 8004aa6:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdac);
 8004aa8:	2801      	cmp	r0, #1
 8004aaa:	d057      	beq.n	8004b5c <HAL_DAC_Start_DMA+0xbc>
 8004aac:	460d      	mov	r5, r1
 8004aae:	2001      	movs	r0, #1
 8004ab0:	4611      	mov	r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ab2:	2202      	movs	r2, #2

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ab4:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hdac);
 8004ab6:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ab8:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8004aba:	bb4d      	cbnz	r5, 8004b10 <HAL_DAC_Start_DMA+0x70>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004abc:	683a      	ldr	r2, [r7, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004abe:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004ac0:	68a0      	ldr	r0, [r4, #8]
 8004ac2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004ba8 <HAL_DAC_Start_DMA+0x108>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ac6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004aca:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8004bac <HAL_DAC_Start_DMA+0x10c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004ace:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004ad2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8004bb0 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004ad6:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004ada:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ade:	603a      	str	r2, [r7, #0]
    switch (Alignment)
 8004ae0:	d044      	beq.n	8004b6c <HAL_DAC_Start_DMA+0xcc>
 8004ae2:	2e08      	cmp	r6, #8
 8004ae4:	d03f      	beq.n	8004b66 <HAL_DAC_Start_DMA+0xc6>
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	d03a      	beq.n	8004b60 <HAL_DAC_Start_DMA+0xc0>
 8004aea:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004aec:	683e      	ldr	r6, [r7, #0]
 8004aee:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8004af2:	603e      	str	r6, [r7, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004af4:	f000 fcfc 	bl	80054f0 <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004af8:	2300      	movs	r3, #0
 8004afa:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8004afc:	bb48      	cbnz	r0, 8004b52 <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	f005 0110 	and.w	r1, r5, #16
 8004b04:	2501      	movs	r5, #1
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	408d      	lsls	r5, r1
 8004b0a:	4315      	orrs	r5, r2
 8004b0c:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8004b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004b10:	683a      	ldr	r2, [r7, #0]
    switch (Alignment)
 8004b12:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004b14:	68e0      	ldr	r0, [r4, #12]
 8004b16:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8004bb4 <HAL_DAC_Start_DMA+0x114>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004b1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004b1e:	f8df e098 	ldr.w	lr, [pc, #152]	; 8004bb8 <HAL_DAC_Start_DMA+0x118>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004b22:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004b26:	f8df c094 	ldr.w	ip, [pc, #148]	; 8004bbc <HAL_DAC_Start_DMA+0x11c>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004b2a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004b2e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004b32:	603a      	str	r2, [r7, #0]
    switch (Alignment)
 8004b34:	d02f      	beq.n	8004b96 <HAL_DAC_Start_DMA+0xf6>
 8004b36:	2e08      	cmp	r6, #8
 8004b38:	d024      	beq.n	8004b84 <HAL_DAC_Start_DMA+0xe4>
 8004b3a:	b1d6      	cbz	r6, 8004b72 <HAL_DAC_Start_DMA+0xd2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b3c:	683e      	ldr	r6, [r7, #0]
    switch (Alignment)
 8004b3e:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b40:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8004b44:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b46:	f000 fcd3 	bl	80054f0 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d0d5      	beq.n	8004afe <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	f043 0304 	orr.w	r3, r3, #4
 8004b58:	6123      	str	r3, [r4, #16]
}
 8004b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8004b5c:	2002      	movs	r0, #2
}
 8004b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004b60:	f107 0208 	add.w	r2, r7, #8
        break;
 8004b64:	e7c2      	b.n	8004aec <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004b66:	f107 0210 	add.w	r2, r7, #16
        break;
 8004b6a:	e7bf      	b.n	8004aec <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004b6c:	f107 020c 	add.w	r2, r7, #12
        break;
 8004b70:	e7bc      	b.n	8004aec <HAL_DAC_Start_DMA+0x4c>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b72:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004b74:	f107 0214 	add.w	r2, r7, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b78:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8004b7c:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b7e:	f000 fcb7 	bl	80054f0 <HAL_DMA_Start_IT>
 8004b82:	e7e2      	b.n	8004b4a <HAL_DAC_Start_DMA+0xaa>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b84:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004b86:	f107 021c 	add.w	r2, r7, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b8a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8004b8e:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b90:	f000 fcae 	bl	80054f0 <HAL_DMA_Start_IT>
 8004b94:	e7d9      	b.n	8004b4a <HAL_DAC_Start_DMA+0xaa>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b96:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004b98:	f107 0218 	add.w	r2, r7, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b9c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8004ba0:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004ba2:	f000 fca5 	bl	80054f0 <HAL_DMA_Start_IT>
 8004ba6:	e7d0      	b.n	8004b4a <HAL_DAC_Start_DMA+0xaa>
 8004ba8:	08004bf1 	.word	0x08004bf1
 8004bac:	08004c01 	.word	0x08004c01
 8004bb0:	08004c11 	.word	0x08004c11
 8004bb4:	08004ded 	.word	0x08004ded
 8004bb8:	08004e01 	.word	0x08004e01
 8004bbc:	08004e11 	.word	0x08004e11

08004bc0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004bc0:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004bc2:	6800      	ldr	r0, [r0, #0]
{
 8004bc4:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0;
 8004bc6:	2400      	movs	r4, #0
 8004bc8:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8004bca:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8004bcc:	b951      	cbnz	r1, 8004be4 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004bce:	9901      	ldr	r1, [sp, #4]
 8004bd0:	3108      	adds	r1, #8
 8004bd2:	440a      	add	r2, r1
 8004bd4:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004bd6:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8004bd8:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	b003      	add	sp, #12
 8004bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004be2:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004be4:	9901      	ldr	r1, [sp, #4]
 8004be6:	3114      	adds	r1, #20
 8004be8:	440a      	add	r2, r1
 8004bea:	9201      	str	r2, [sp, #4]
 8004bec:	e7f3      	b.n	8004bd6 <HAL_DAC_SetValue+0x16>
 8004bee:	bf00      	nop

08004bf0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7fd fa55 	bl	80020a4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	7123      	strb	r3, [r4, #4]
}
 8004bfe:	bd10      	pop	{r4, pc}

08004c00 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004c00:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8004c02:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004c04:	f7fd fa60 	bl	80020c8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004c08:	bd08      	pop	{r3, pc}
 8004c0a:	bf00      	nop

08004c0c <HAL_DAC_ErrorCallbackCh1>:
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop

08004c10 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004c10:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c12:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c14:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004c16:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004c1e:	f7ff fff5 	bl	8004c0c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004c22:	2301      	movs	r3, #1
 8004c24:	7123      	strb	r3, [r4, #4]
}
 8004c26:	bd10      	pop	{r4, pc}

08004c28 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop

08004c2c <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004c2c:	6803      	ldr	r3, [r0, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	0491      	lsls	r1, r2, #18
{
 8004c32:	b510      	push	{r4, lr}
 8004c34:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004c36:	d502      	bpl.n	8004c3e <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3a:	0492      	lsls	r2, r2, #18
 8004c3c:	d418      	bmi.n	8004c70 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	0091      	lsls	r1, r2, #2
 8004c42:	d502      	bpl.n	8004c4a <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c46:	0092      	lsls	r2, r2, #2
 8004c48:	d400      	bmi.n	8004c4c <HAL_DAC_IRQHandler+0x20>
}
 8004c4a:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8004c4c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004c4e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004c52:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8004c54:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004c56:	6922      	ldr	r2, [r4, #16]
 8004c58:	f042 0202 	orr.w	r2, r2, #2
 8004c5c:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004c5e:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8004c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004c6a:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004c6c:	f000 b8dc 	b.w	8004e28 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8004c70:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8004c76:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004c78:	6902      	ldr	r2, [r0, #16]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004c80:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c88:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004c8a:	f7ff ffcd 	bl	8004c28 <HAL_DAC_DMAUnderrunCallbackCh1>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	e7d5      	b.n	8004c3e <HAL_DAC_IRQHandler+0x12>
 8004c92:	bf00      	nop

08004c94 <HAL_DAC_ConfigChannel>:
{
 8004c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8004c98:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004c9a:	680f      	ldr	r7, [r1, #0]
  __HAL_LOCK(hdac);
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	f000 8095 	beq.w	8004dcc <HAL_DAC_ConfigChannel+0x138>
 8004ca2:	4615      	mov	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ca4:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8004ca6:	2201      	movs	r2, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ca8:	2f04      	cmp	r7, #4
 8004caa:	4606      	mov	r6, r0
 8004cac:	460c      	mov	r4, r1
  __HAL_LOCK(hdac);
 8004cae:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cb0:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004cb2:	d04a      	beq.n	8004d4a <HAL_DAC_ConfigChannel+0xb6>
 8004cb4:	f005 0210 	and.w	r2, r5, #16
 8004cb8:	6801      	ldr	r1, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004cba:	6923      	ldr	r3, [r4, #16]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d108      	bne.n	8004cd2 <HAL_DAC_ConfigChannel+0x3e>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004cc0:	251f      	movs	r5, #31
    tmpreg1 = hdac->Instance->CCR;
 8004cc2:	6b88      	ldr	r0, [r1, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cc4:	6963      	ldr	r3, [r4, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004cc6:	4095      	lsls	r5, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cc8:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004cca:	ea20 0005 	bic.w	r0, r0, r5
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cce:	4303      	orrs	r3, r0
    hdac->Instance->CCR = tmpreg1;
 8004cd0:	638b      	str	r3, [r1, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004cd2:	2007      	movs	r0, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004cd4:	68e5      	ldr	r5, [r4, #12]
  tmpreg1 = hdac->Instance->MCR;
 8004cd6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004cd8:	4090      	lsls	r0, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004cda:	2d01      	cmp	r5, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004cdc:	ea23 0000 	bic.w	r0, r3, r0
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004ce0:	d02e      	beq.n	8004d40 <HAL_DAC_ConfigChannel+0xac>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004ce2:	2d02      	cmp	r5, #2
 8004ce4:	68a5      	ldr	r5, [r4, #8]
 8004ce6:	d02e      	beq.n	8004d46 <HAL_DAC_ConfigChannel+0xb2>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004ce8:	fab5 f385 	clz	r3, r5
 8004cec:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004cee:	432b      	orrs	r3, r5
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004cf0:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cf4:	6865      	ldr	r5, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004cf6:	f640 74fe 	movw	r4, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004cfa:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004cfc:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004d00:	fa04 f702 	lsl.w	r7, r4, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d04:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d06:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004d08:	24c0      	movs	r4, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 8004d0a:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 8004d0e:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d12:	4303      	orrs	r3, r0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004d14:	4094      	lsls	r4, r2
  return HAL_OK;
 8004d16:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 8004d18:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004d1a:	680b      	ldr	r3, [r1, #0]
 8004d1c:	ea23 0308 	bic.w	r3, r3, r8
 8004d20:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 8004d22:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004d24:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d28:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8004d2a:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004d2c:	680a      	ldr	r2, [r1, #0]
 8004d2e:	ea22 0204 	bic.w	r2, r2, r4
 8004d32:	600a      	str	r2, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8004d34:	f886 e004 	strb.w	lr, [r6, #4]
  __HAL_UNLOCK(hdac);
 8004d38:	f886 c005 	strb.w	ip, [r6, #5]
}
 8004d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d40:	68a5      	ldr	r5, [r4, #8]
    connectOnChip = 0x00000000UL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e7d3      	b.n	8004cee <HAL_DAC_ConfigChannel+0x5a>
    connectOnChip = DAC_MCR_MODE1_0;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e7d1      	b.n	8004cee <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 8004d4a:	f7fe fc81 	bl	8003650 <HAL_GetTick>
 8004d4e:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8004d50:	b9c5      	cbnz	r5, 8004d84 <HAL_DAC_ConfigChannel+0xf0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d52:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004de4 <HAL_DAC_ConfigChannel+0x150>
 8004d56:	e004      	b.n	8004d62 <HAL_DAC_ConfigChannel+0xce>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d58:	f7fe fc7a 	bl	8003650 <HAL_GetTick>
 8004d5c:	1bc3      	subs	r3, r0, r7
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d837      	bhi.n	8004dd2 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d62:	6833      	ldr	r3, [r6, #0]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	ea13 0f08 	tst.w	r3, r8
 8004d6a:	d1f5      	bne.n	8004d58 <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	f7fe fc75 	bl	800365c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d72:	6831      	ldr	r1, [r6, #0]
 8004d74:	69a3      	ldr	r3, [r4, #24]
 8004d76:	640b      	str	r3, [r1, #64]	; 0x40
 8004d78:	e00e      	b.n	8004d98 <HAL_DAC_ConfigChannel+0x104>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d7a:	f7fe fc69 	bl	8003650 <HAL_GetTick>
 8004d7e:	1bc3      	subs	r3, r0, r7
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d826      	bhi.n	8004dd2 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d84:	6833      	ldr	r3, [r6, #0]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	dbf6      	blt.n	8004d7a <HAL_DAC_ConfigChannel+0xe6>
      HAL_Delay(1U);
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f7fe fc65 	bl	800365c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d92:	6831      	ldr	r1, [r6, #0]
 8004d94:	69a3      	ldr	r3, [r4, #24]
 8004d96:	644b      	str	r3, [r1, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d98:	f005 0210 	and.w	r2, r5, #16
 8004d9c:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8004da0:	6c88      	ldr	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004da2:	23ff      	movs	r3, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004da4:	69e7      	ldr	r7, [r4, #28]
 8004da6:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004daa:	fa03 f502 	lsl.w	r5, r3, r2
 8004dae:	6a23      	ldr	r3, [r4, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004db0:	4097      	lsls	r7, r2
 8004db2:	ea20 000c 	bic.w	r0, r0, ip
 8004db6:	4338      	orrs	r0, r7
 8004db8:	6827      	ldr	r7, [r4, #0]
 8004dba:	6488      	str	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004dbc:	fa03 f002 	lsl.w	r0, r3, r2
 8004dc0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8004dc2:	ea23 0305 	bic.w	r3, r3, r5
 8004dc6:	4303      	orrs	r3, r0
 8004dc8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004dca:	e776      	b.n	8004cba <HAL_DAC_ConfigChannel+0x26>
  __HAL_LOCK(hdac);
 8004dcc:	2002      	movs	r0, #2
}
 8004dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004dd2:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004dd4:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004dd6:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8004dda:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ddc:	6133      	str	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004dde:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 8004de0:	e7ac      	b.n	8004d3c <HAL_DAC_ConfigChannel+0xa8>
 8004de2:	bf00      	nop
 8004de4:	20008000 	.word	0x20008000

08004de8 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop

08004dec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004dec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dee:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004df0:	4620      	mov	r0, r4
 8004df2:	f7ff fff9 	bl	8004de8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004df6:	2301      	movs	r3, #1
 8004df8:	7123      	strb	r3, [r4, #4]
}
 8004dfa:	bd10      	pop	{r4, pc}

08004dfc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop

08004e00 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004e00:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8004e02:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004e04:	f7ff fffa 	bl	8004dfc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004e08:	bd08      	pop	{r3, pc}
 8004e0a:	bf00      	nop

08004e0c <HAL_DACEx_ErrorCallbackCh2>:
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop

08004e10 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004e10:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e12:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e14:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004e16:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e18:	f043 0304 	orr.w	r3, r3, #4
 8004e1c:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004e1e:	f7ff fff5 	bl	8004e0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e22:	2301      	movs	r3, #1
 8004e24:	7123      	strb	r3, [r4, #4]
}
 8004e26:	bd10      	pop	{r4, pc}

08004e28 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop

08004e2c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e2c:	6802      	ldr	r2, [r0, #0]
 8004e2e:	4b35      	ldr	r3, [pc, #212]	; (8004f04 <DMA_CalcBaseAndBitshift+0xd8>)
 8004e30:	4935      	ldr	r1, [pc, #212]	; (8004f08 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8004e32:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e34:	4c35      	ldr	r4, [pc, #212]	; (8004f0c <DMA_CalcBaseAndBitshift+0xe0>)
 8004e36:	4d36      	ldr	r5, [pc, #216]	; (8004f10 <DMA_CalcBaseAndBitshift+0xe4>)
 8004e38:	42a2      	cmp	r2, r4
 8004e3a:	bf18      	it	ne
 8004e3c:	429a      	cmpne	r2, r3
 8004e3e:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	428a      	cmp	r2, r1
 8004e4a:	bf08      	it	eq
 8004e4c:	f043 0301 	orreq.w	r3, r3, #1
 8004e50:	3148      	adds	r1, #72	; 0x48
 8004e52:	42aa      	cmp	r2, r5
 8004e54:	bf08      	it	eq
 8004e56:	f043 0301 	orreq.w	r3, r3, #1
 8004e5a:	3548      	adds	r5, #72	; 0x48
 8004e5c:	42a2      	cmp	r2, r4
 8004e5e:	bf08      	it	eq
 8004e60:	f043 0301 	orreq.w	r3, r3, #1
 8004e64:	3448      	adds	r4, #72	; 0x48
 8004e66:	428a      	cmp	r2, r1
 8004e68:	bf08      	it	eq
 8004e6a:	f043 0301 	orreq.w	r3, r3, #1
 8004e6e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8004e72:	42aa      	cmp	r2, r5
 8004e74:	bf08      	it	eq
 8004e76:	f043 0301 	orreq.w	r3, r3, #1
 8004e7a:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004e7e:	42a2      	cmp	r2, r4
 8004e80:	bf08      	it	eq
 8004e82:	f043 0301 	orreq.w	r3, r3, #1
 8004e86:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8004e8a:	428a      	cmp	r2, r1
 8004e8c:	bf08      	it	eq
 8004e8e:	f043 0301 	orreq.w	r3, r3, #1
 8004e92:	3148      	adds	r1, #72	; 0x48
 8004e94:	42aa      	cmp	r2, r5
 8004e96:	bf08      	it	eq
 8004e98:	f043 0301 	orreq.w	r3, r3, #1
 8004e9c:	3548      	adds	r5, #72	; 0x48
 8004e9e:	42a2      	cmp	r2, r4
 8004ea0:	bf08      	it	eq
 8004ea2:	f043 0301 	orreq.w	r3, r3, #1
 8004ea6:	3448      	adds	r4, #72	; 0x48
 8004ea8:	428a      	cmp	r2, r1
 8004eaa:	bf08      	it	eq
 8004eac:	f043 0301 	orreq.w	r3, r3, #1
 8004eb0:	3148      	adds	r1, #72	; 0x48
 8004eb2:	42aa      	cmp	r2, r5
 8004eb4:	bf08      	it	eq
 8004eb6:	f043 0301 	orreq.w	r3, r3, #1
 8004eba:	42a2      	cmp	r2, r4
 8004ebc:	bf08      	it	eq
 8004ebe:	f043 0301 	orreq.w	r3, r3, #1
 8004ec2:	428a      	cmp	r2, r1
 8004ec4:	bf08      	it	eq
 8004ec6:	f043 0301 	orreq.w	r3, r3, #1
 8004eca:	b913      	cbnz	r3, 8004ed2 <DMA_CalcBaseAndBitshift+0xa6>
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <DMA_CalcBaseAndBitshift+0xe8>)
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d113      	bne.n	8004efa <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ed2:	b2d3      	uxtb	r3, r2
 8004ed4:	4910      	ldr	r1, [pc, #64]	; (8004f18 <DMA_CalcBaseAndBitshift+0xec>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ed6:	4c11      	ldr	r4, [pc, #68]	; (8004f1c <DMA_CalcBaseAndBitshift+0xf0>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ed8:	3b10      	subs	r3, #16
 8004eda:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8004ede:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ee2:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ee6:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004eea:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004eec:	bf88      	it	hi
 8004eee:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ef0:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ef2:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bc30      	pop	{r4, r5}
 8004ef8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004efa:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8004efe:	6583      	str	r3, [r0, #88]	; 0x58
 8004f00:	e7f8      	b.n	8004ef4 <DMA_CalcBaseAndBitshift+0xc8>
 8004f02:	bf00      	nop
 8004f04:	40020010 	.word	0x40020010
 8004f08:	40020040 	.word	0x40020040
 8004f0c:	40020028 	.word	0x40020028
 8004f10:	40020058 	.word	0x40020058
 8004f14:	400204b8 	.word	0x400204b8
 8004f18:	aaaaaaab 	.word	0xaaaaaaab
 8004f1c:	08017354 	.word	0x08017354
 8004f20:	fffffc00 	.word	0xfffffc00

08004f24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f24:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f26:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004f28:	4929      	ldr	r1, [pc, #164]	; (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8004f2a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f2c:	4d29      	ldr	r5, [pc, #164]	; (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8004f2e:	4c2a      	ldr	r4, [pc, #168]	; (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	bf18      	it	ne
 8004f34:	4293      	cmpne	r3, r2
 8004f36:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2201      	moveq	r2, #1
 8004f3e:	2200      	movne	r2, #0
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	bf08      	it	eq
 8004f44:	f042 0201 	orreq.w	r2, r2, #1
 8004f48:	343c      	adds	r4, #60	; 0x3c
 8004f4a:	428b      	cmp	r3, r1
 8004f4c:	bf08      	it	eq
 8004f4e:	f042 0201 	orreq.w	r2, r2, #1
 8004f52:	313c      	adds	r1, #60	; 0x3c
 8004f54:	42ab      	cmp	r3, r5
 8004f56:	bf08      	it	eq
 8004f58:	f042 0201 	orreq.w	r2, r2, #1
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	bf08      	it	eq
 8004f60:	f042 0201 	orreq.w	r2, r2, #1
 8004f64:	428b      	cmp	r3, r1
 8004f66:	bf08      	it	eq
 8004f68:	f042 0201 	orreq.w	r2, r2, #1
 8004f6c:	b912      	cbnz	r2, 8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d113      	bne.n	8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4d1a      	ldr	r5, [pc, #104]	; (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f78:	4a1a      	ldr	r2, [pc, #104]	; (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f7a:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f7c:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f7e:	4c1a      	ldr	r4, [pc, #104]	; (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f80:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f84:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f86:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f8a:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f8e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f90:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f94:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f96:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f98:	bc30      	pop	{r4, r5}
 8004f9a:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f9c:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f9e:	4913      	ldr	r1, [pc, #76]	; (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fa0:	4c13      	ldr	r4, [pc, #76]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fa2:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fa4:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fa6:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fa8:	fba4 2302 	umull	r2, r3, r4, r2
 8004fac:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fb0:	d800      	bhi.n	8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>
      stream_number += 8U;
 8004fb2:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fb6:	f003 051f 	and.w	r5, r3, #31
 8004fba:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fbc:	4c0e      	ldr	r4, [pc, #56]	; (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fbe:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fc0:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fc2:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fc4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fc6:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fc8:	6602      	str	r2, [r0, #96]	; 0x60
}
 8004fca:	e7e5      	b.n	8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
 8004fcc:	58025408 	.word	0x58025408
 8004fd0:	58025444 	.word	0x58025444
 8004fd4:	5802541c 	.word	0x5802541c
 8004fd8:	58025430 	.word	0x58025430
 8004fdc:	58025494 	.word	0x58025494
 8004fe0:	cccccccd 	.word	0xcccccccd
 8004fe4:	16009600 	.word	0x16009600
 8004fe8:	58025880 	.word	0x58025880
 8004fec:	bffdfbf0 	.word	0xbffdfbf0
 8004ff0:	aaaaaaab 	.word	0xaaaaaaab
 8004ff4:	10008200 	.word	0x10008200
 8004ff8:	40020880 	.word	0x40020880

08004ffc <HAL_DMA_Init>:
{
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005000:	f7fe fb26 	bl	8003650 <HAL_GetTick>
  if(hdma == NULL)
 8005004:	2c00      	cmp	r4, #0
 8005006:	f000 818a 	beq.w	800531e <HAL_DMA_Init+0x322>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	4605      	mov	r5, r0
 800500e:	4a95      	ldr	r2, [pc, #596]	; (8005264 <HAL_DMA_Init+0x268>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d049      	beq.n	80050a8 <HAL_DMA_Init+0xac>
 8005014:	3218      	adds	r2, #24
 8005016:	4293      	cmp	r3, r2
 8005018:	d046      	beq.n	80050a8 <HAL_DMA_Init+0xac>
 800501a:	3230      	adds	r2, #48	; 0x30
 800501c:	4892      	ldr	r0, [pc, #584]	; (8005268 <HAL_DMA_Init+0x26c>)
 800501e:	4993      	ldr	r1, [pc, #588]	; (800526c <HAL_DMA_Init+0x270>)
 8005020:	4283      	cmp	r3, r0
 8005022:	bf18      	it	ne
 8005024:	4293      	cmpne	r3, r2
 8005026:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800502a:	bf0c      	ite	eq
 800502c:	2201      	moveq	r2, #1
 800502e:	2200      	movne	r2, #0
 8005030:	428b      	cmp	r3, r1
 8005032:	bf08      	it	eq
 8005034:	f042 0201 	orreq.w	r2, r2, #1
 8005038:	3130      	adds	r1, #48	; 0x30
 800503a:	4283      	cmp	r3, r0
 800503c:	bf08      	it	eq
 800503e:	f042 0201 	orreq.w	r2, r2, #1
 8005042:	3030      	adds	r0, #48	; 0x30
 8005044:	428b      	cmp	r3, r1
 8005046:	bf08      	it	eq
 8005048:	f042 0201 	orreq.w	r2, r2, #1
 800504c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005050:	4283      	cmp	r3, r0
 8005052:	bf08      	it	eq
 8005054:	f042 0201 	orreq.w	r2, r2, #1
 8005058:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800505c:	428b      	cmp	r3, r1
 800505e:	bf08      	it	eq
 8005060:	f042 0201 	orreq.w	r2, r2, #1
 8005064:	3130      	adds	r1, #48	; 0x30
 8005066:	4283      	cmp	r3, r0
 8005068:	bf08      	it	eq
 800506a:	f042 0201 	orreq.w	r2, r2, #1
 800506e:	3030      	adds	r0, #48	; 0x30
 8005070:	428b      	cmp	r3, r1
 8005072:	bf08      	it	eq
 8005074:	f042 0201 	orreq.w	r2, r2, #1
 8005078:	3130      	adds	r1, #48	; 0x30
 800507a:	4283      	cmp	r3, r0
 800507c:	bf08      	it	eq
 800507e:	f042 0201 	orreq.w	r2, r2, #1
 8005082:	3030      	adds	r0, #48	; 0x30
 8005084:	428b      	cmp	r3, r1
 8005086:	bf08      	it	eq
 8005088:	f042 0201 	orreq.w	r2, r2, #1
 800508c:	3130      	adds	r1, #48	; 0x30
 800508e:	4283      	cmp	r3, r0
 8005090:	bf08      	it	eq
 8005092:	f042 0201 	orreq.w	r2, r2, #1
 8005096:	428b      	cmp	r3, r1
 8005098:	bf08      	it	eq
 800509a:	f042 0201 	orreq.w	r2, r2, #1
 800509e:	b91a      	cbnz	r2, 80050a8 <HAL_DMA_Init+0xac>
 80050a0:	4a73      	ldr	r2, [pc, #460]	; (8005270 <HAL_DMA_Init+0x274>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	f040 81a1 	bne.w	80053ea <HAL_DMA_Init+0x3ee>
    hdma->State = HAL_DMA_STATE_BUSY;
 80050a8:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 80050aa:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ac:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80050b0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e006      	b.n	80050cc <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050be:	f7fe fac7 	bl	8003650 <HAL_GetTick>
 80050c2:	1b43      	subs	r3, r0, r5
 80050c4:	2b05      	cmp	r3, #5
 80050c6:	f200 8111 	bhi.w	80052ec <HAL_DMA_Init+0x2f0>
 80050ca:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	07d0      	lsls	r0, r2, #31
 80050d0:	d4f5      	bmi.n	80050be <HAL_DMA_Init+0xc2>
    registerValue |=  hdma->Init.Direction           |
 80050d2:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d6:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 80050d8:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80050da:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050dc:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e0:	430a      	orrs	r2, r1
 80050e2:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050e4:	4e63      	ldr	r6, [pc, #396]	; (8005274 <HAL_DMA_Init+0x278>)
            hdma->Init.Mode                | hdma->Init.Priority;
 80050e6:	e9d4 5107 	ldrd	r5, r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ea:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050ec:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ee:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 80050f2:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050f4:	2d04      	cmp	r5, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80050f6:	4960      	ldr	r1, [pc, #384]	; (8005278 <HAL_DMA_Init+0x27c>)
    registerValue |=  hdma->Init.Direction           |
 80050f8:	ea42 0206 	orr.w	r2, r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80050fc:	4e5f      	ldr	r6, [pc, #380]	; (800527c <HAL_DMA_Init+0x280>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050fe:	f000 8110 	beq.w	8005322 <HAL_DMA_Init+0x326>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005102:	6836      	ldr	r6, [r6, #0]
 8005104:	4031      	ands	r1, r6
 8005106:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800510a:	f080 80c3 	bcs.w	8005294 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800510e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005110:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005112:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8005116:	4329      	orrs	r1, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005118:	6159      	str	r1, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff fe86 	bl	8004e2c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005120:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005122:	233f      	movs	r3, #63	; 0x3f
 8005124:	f002 021f 	and.w	r2, r2, #31
 8005128:	4093      	lsls	r3, r2
 800512a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	4b4d      	ldr	r3, [pc, #308]	; (8005264 <HAL_DMA_Init+0x268>)
 8005130:	4953      	ldr	r1, [pc, #332]	; (8005280 <HAL_DMA_Init+0x284>)
 8005132:	4d4d      	ldr	r5, [pc, #308]	; (8005268 <HAL_DMA_Init+0x26c>)
 8005134:	428a      	cmp	r2, r1
 8005136:	bf18      	it	ne
 8005138:	429a      	cmpne	r2, r3
 800513a:	4852      	ldr	r0, [pc, #328]	; (8005284 <HAL_DMA_Init+0x288>)
 800513c:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8005140:	bf0c      	ite	eq
 8005142:	2301      	moveq	r3, #1
 8005144:	2300      	movne	r3, #0
 8005146:	42aa      	cmp	r2, r5
 8005148:	bf08      	it	eq
 800514a:	f043 0301 	orreq.w	r3, r3, #1
 800514e:	3548      	adds	r5, #72	; 0x48
 8005150:	4282      	cmp	r2, r0
 8005152:	bf08      	it	eq
 8005154:	f043 0301 	orreq.w	r3, r3, #1
 8005158:	3048      	adds	r0, #72	; 0x48
 800515a:	428a      	cmp	r2, r1
 800515c:	bf08      	it	eq
 800515e:	f043 0301 	orreq.w	r3, r3, #1
 8005162:	3148      	adds	r1, #72	; 0x48
 8005164:	42aa      	cmp	r2, r5
 8005166:	bf08      	it	eq
 8005168:	f043 0301 	orreq.w	r3, r3, #1
 800516c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005170:	4282      	cmp	r2, r0
 8005172:	bf08      	it	eq
 8005174:	f043 0301 	orreq.w	r3, r3, #1
 8005178:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800517c:	428a      	cmp	r2, r1
 800517e:	bf08      	it	eq
 8005180:	f043 0301 	orreq.w	r3, r3, #1
 8005184:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8005188:	42aa      	cmp	r2, r5
 800518a:	bf08      	it	eq
 800518c:	f043 0301 	orreq.w	r3, r3, #1
 8005190:	3548      	adds	r5, #72	; 0x48
 8005192:	4282      	cmp	r2, r0
 8005194:	bf08      	it	eq
 8005196:	f043 0301 	orreq.w	r3, r3, #1
 800519a:	3048      	adds	r0, #72	; 0x48
 800519c:	428a      	cmp	r2, r1
 800519e:	bf08      	it	eq
 80051a0:	f043 0301 	orreq.w	r3, r3, #1
 80051a4:	3148      	adds	r1, #72	; 0x48
 80051a6:	42aa      	cmp	r2, r5
 80051a8:	bf08      	it	eq
 80051aa:	f043 0301 	orreq.w	r3, r3, #1
 80051ae:	3548      	adds	r5, #72	; 0x48
 80051b0:	4282      	cmp	r2, r0
 80051b2:	bf08      	it	eq
 80051b4:	f043 0301 	orreq.w	r3, r3, #1
 80051b8:	3048      	adds	r0, #72	; 0x48
 80051ba:	428a      	cmp	r2, r1
 80051bc:	bf08      	it	eq
 80051be:	f043 0301 	orreq.w	r3, r3, #1
 80051c2:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 80051c6:	42aa      	cmp	r2, r5
 80051c8:	bf08      	it	eq
 80051ca:	f043 0301 	orreq.w	r3, r3, #1
 80051ce:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 80051d2:	4d2d      	ldr	r5, [pc, #180]	; (8005288 <HAL_DMA_Init+0x28c>)
 80051d4:	4282      	cmp	r2, r0
 80051d6:	bf08      	it	eq
 80051d8:	f043 0301 	orreq.w	r3, r3, #1
 80051dc:	482b      	ldr	r0, [pc, #172]	; (800528c <HAL_DMA_Init+0x290>)
 80051de:	428a      	cmp	r2, r1
 80051e0:	bf08      	it	eq
 80051e2:	f043 0301 	orreq.w	r3, r3, #1
 80051e6:	313c      	adds	r1, #60	; 0x3c
 80051e8:	42aa      	cmp	r2, r5
 80051ea:	bf08      	it	eq
 80051ec:	f043 0301 	orreq.w	r3, r3, #1
 80051f0:	353c      	adds	r5, #60	; 0x3c
 80051f2:	4282      	cmp	r2, r0
 80051f4:	bf08      	it	eq
 80051f6:	f043 0301 	orreq.w	r3, r3, #1
 80051fa:	303c      	adds	r0, #60	; 0x3c
 80051fc:	428a      	cmp	r2, r1
 80051fe:	bf08      	it	eq
 8005200:	f043 0301 	orreq.w	r3, r3, #1
 8005204:	313c      	adds	r1, #60	; 0x3c
 8005206:	42aa      	cmp	r2, r5
 8005208:	bf08      	it	eq
 800520a:	f043 0301 	orreq.w	r3, r3, #1
 800520e:	4282      	cmp	r2, r0
 8005210:	bf08      	it	eq
 8005212:	f043 0301 	orreq.w	r3, r3, #1
 8005216:	428a      	cmp	r2, r1
 8005218:	bf08      	it	eq
 800521a:	f043 0301 	orreq.w	r3, r3, #1
 800521e:	b913      	cbnz	r3, 8005226 <HAL_DMA_Init+0x22a>
 8005220:	4b1b      	ldr	r3, [pc, #108]	; (8005290 <HAL_DMA_Init+0x294>)
 8005222:	429a      	cmp	r2, r3
 8005224:	d118      	bne.n	8005258 <HAL_DMA_Init+0x25c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005226:	4620      	mov	r0, r4
 8005228:	f7ff fe7c 	bl	8004f24 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800522c:	68a3      	ldr	r3, [r4, #8]
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d069      	beq.n	8005306 <HAL_DMA_Init+0x30a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005232:	6863      	ldr	r3, [r4, #4]
 8005234:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8005236:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005238:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800523a:	e9d4 1019 	ldrd	r1, r0, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800523e:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005240:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005242:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005244:	d866      	bhi.n	8005314 <HAL_DMA_Init+0x318>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005246:	1e50      	subs	r0, r2, #1
 8005248:	2807      	cmp	r0, #7
 800524a:	d97c      	bls.n	8005346 <HAL_DMA_Init+0x34a>
 800524c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800524e:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005252:	2000      	movs	r0, #0
 8005254:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005256:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005258:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800525a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800525c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800525e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005264:	40020010 	.word	0x40020010
 8005268:	40020040 	.word	0x40020040
 800526c:	40020070 	.word	0x40020070
 8005270:	400204b8 	.word	0x400204b8
 8005274:	fe10803f 	.word	0xfe10803f
 8005278:	ffff0000 	.word	0xffff0000
 800527c:	5c001000 	.word	0x5c001000
 8005280:	40020028 	.word	0x40020028
 8005284:	40020058 	.word	0x40020058
 8005288:	5802541c 	.word	0x5802541c
 800528c:	58025430 	.word	0x58025430
 8005290:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005294:	6861      	ldr	r1, [r4, #4]
 8005296:	f1a1 0629 	sub.w	r6, r1, #41	; 0x29
 800529a:	2e1f      	cmp	r6, #31
 800529c:	d92d      	bls.n	80052fa <HAL_DMA_Init+0x2fe>
 800529e:	394f      	subs	r1, #79	; 0x4f
 80052a0:	2903      	cmp	r1, #3
 80052a2:	d801      	bhi.n	80052a8 <HAL_DMA_Init+0x2ac>
        registerValue |= DMA_SxCR_TRBUFF;
 80052a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052a8:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052aa:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052ac:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052ae:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 80052b2:	ea41 0105 	orr.w	r1, r1, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052b6:	f47f af2f 	bne.w	8005118 <HAL_DMA_Init+0x11c>
 80052ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80052bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80052be:	4311      	orrs	r1, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052c0:	2e00      	cmp	r6, #0
 80052c2:	f43f af29 	beq.w	8005118 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d173      	bne.n	80053b2 <HAL_DMA_Init+0x3b6>
    switch (hdma->Init.FIFOThreshold)
 80052ca:	2a01      	cmp	r2, #1
 80052cc:	f000 8088 	beq.w	80053e0 <HAL_DMA_Init+0x3e4>
 80052d0:	f032 0202 	bics.w	r2, r2, #2
 80052d4:	f47f af20 	bne.w	8005118 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052d8:	01f2      	lsls	r2, r6, #7
 80052da:	f57f af1d 	bpl.w	8005118 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 80052de:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e0:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80052e2:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e4:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80052e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80052ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052ec:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80052ee:	2303      	movs	r3, #3
        return HAL_ERROR;
 80052f0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052f2:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80052f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80052f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80052fa:	4970      	ldr	r1, [pc, #448]	; (80054bc <HAL_DMA_Init+0x4c0>)
 80052fc:	fa21 f606 	lsr.w	r6, r1, r6
 8005300:	07f1      	lsls	r1, r6, #31
 8005302:	d5d1      	bpl.n	80052a8 <HAL_DMA_Init+0x2ac>
 8005304:	e7ce      	b.n	80052a4 <HAL_DMA_Init+0x2a8>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005306:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005308:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800530a:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800530e:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005310:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005312:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8005314:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8005316:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800531a:	6763      	str	r3, [r4, #116]	; 0x74
 800531c:	e79c      	b.n	8005258 <HAL_DMA_Init+0x25c>
    return HAL_ERROR;
 800531e:	2001      	movs	r0, #1
}
 8005320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005322:	6837      	ldr	r7, [r6, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005326:	4039      	ands	r1, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005328:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800532a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800532e:	ea46 0707 	orr.w	r7, r6, r7
 8005332:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005336:	d2ad      	bcs.n	8005294 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005338:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800533a:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800533c:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8005340:	f041 0104 	orr.w	r1, r1, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005344:	e7ba      	b.n	80052bc <HAL_DMA_Init+0x2c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005346:	6821      	ldr	r1, [r4, #0]
 8005348:	4b5d      	ldr	r3, [pc, #372]	; (80054c0 <HAL_DMA_Init+0x4c4>)
 800534a:	4e5e      	ldr	r6, [pc, #376]	; (80054c4 <HAL_DMA_Init+0x4c8>)
 800534c:	4d5e      	ldr	r5, [pc, #376]	; (80054c8 <HAL_DMA_Init+0x4cc>)
 800534e:	42b1      	cmp	r1, r6
 8005350:	bf18      	it	ne
 8005352:	4299      	cmpne	r1, r3
 8005354:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	42a9      	cmp	r1, r5
 8005360:	bf08      	it	eq
 8005362:	f043 0301 	orreq.w	r3, r3, #1
 8005366:	3528      	adds	r5, #40	; 0x28
 8005368:	42b1      	cmp	r1, r6
 800536a:	bf08      	it	eq
 800536c:	f043 0301 	orreq.w	r3, r3, #1
 8005370:	3628      	adds	r6, #40	; 0x28
 8005372:	42a9      	cmp	r1, r5
 8005374:	bf08      	it	eq
 8005376:	f043 0301 	orreq.w	r3, r3, #1
 800537a:	3528      	adds	r5, #40	; 0x28
 800537c:	42b1      	cmp	r1, r6
 800537e:	bf08      	it	eq
 8005380:	f043 0301 	orreq.w	r3, r3, #1
 8005384:	42a9      	cmp	r1, r5
 8005386:	bf08      	it	eq
 8005388:	f043 0301 	orreq.w	r3, r3, #1
 800538c:	b93b      	cbnz	r3, 800539e <HAL_DMA_Init+0x3a2>
 800538e:	4b4f      	ldr	r3, [pc, #316]	; (80054cc <HAL_DMA_Init+0x4d0>)
 8005390:	4299      	cmp	r1, r3
 8005392:	d004      	beq.n	800539e <HAL_DMA_Init+0x3a2>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005394:	4b4e      	ldr	r3, [pc, #312]	; (80054d0 <HAL_DMA_Init+0x4d4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005396:	494f      	ldr	r1, [pc, #316]	; (80054d4 <HAL_DMA_Init+0x4d8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800539c:	e003      	b.n	80053a6 <HAL_DMA_Init+0x3aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800539e:	4b4e      	ldr	r3, [pc, #312]	; (80054d8 <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80053a0:	494e      	ldr	r1, [pc, #312]	; (80054dc <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80053a6:	2201      	movs	r2, #1
 80053a8:	4082      	lsls	r2, r0
 80053aa:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80053ae:	6762      	str	r2, [r4, #116]	; 0x74
 80053b0:	e74f      	b.n	8005252 <HAL_DMA_Init+0x256>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053b2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80053b6:	d004      	beq.n	80053c2 <HAL_DMA_Init+0x3c6>
    switch (hdma->Init.FIFOThreshold)
 80053b8:	2a02      	cmp	r2, #2
 80053ba:	d990      	bls.n	80052de <HAL_DMA_Init+0x2e2>
 80053bc:	2a03      	cmp	r2, #3
 80053be:	d08b      	beq.n	80052d8 <HAL_DMA_Init+0x2dc>
 80053c0:	e6aa      	b.n	8005118 <HAL_DMA_Init+0x11c>
    switch (hdma->Init.FIFOThreshold)
 80053c2:	2a03      	cmp	r2, #3
 80053c4:	f63f aea8 	bhi.w	8005118 <HAL_DMA_Init+0x11c>
 80053c8:	a001      	add	r0, pc, #4	; (adr r0, 80053d0 <HAL_DMA_Init+0x3d4>)
 80053ca:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	080052df 	.word	0x080052df
 80053d4:	080052d9 	.word	0x080052d9
 80053d8:	080052df 	.word	0x080052df
 80053dc:	080053e1 	.word	0x080053e1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053e0:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 80053e4:	f47f ae98 	bne.w	8005118 <HAL_DMA_Init+0x11c>
 80053e8:	e779      	b.n	80052de <HAL_DMA_Init+0x2e2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053ea:	4a35      	ldr	r2, [pc, #212]	; (80054c0 <HAL_DMA_Init+0x4c4>)
 80053ec:	4935      	ldr	r1, [pc, #212]	; (80054c4 <HAL_DMA_Init+0x4c8>)
 80053ee:	4836      	ldr	r0, [pc, #216]	; (80054c8 <HAL_DMA_Init+0x4cc>)
 80053f0:	428b      	cmp	r3, r1
 80053f2:	bf18      	it	ne
 80053f4:	4293      	cmpne	r3, r2
 80053f6:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80053fa:	4d39      	ldr	r5, [pc, #228]	; (80054e0 <HAL_DMA_Init+0x4e4>)
 80053fc:	bf0c      	ite	eq
 80053fe:	2201      	moveq	r2, #1
 8005400:	2200      	movne	r2, #0
 8005402:	4283      	cmp	r3, r0
 8005404:	bf08      	it	eq
 8005406:	f042 0201 	orreq.w	r2, r2, #1
 800540a:	303c      	adds	r0, #60	; 0x3c
 800540c:	428b      	cmp	r3, r1
 800540e:	bf08      	it	eq
 8005410:	f042 0201 	orreq.w	r2, r2, #1
 8005414:	313c      	adds	r1, #60	; 0x3c
 8005416:	42ab      	cmp	r3, r5
 8005418:	bf08      	it	eq
 800541a:	f042 0201 	orreq.w	r2, r2, #1
 800541e:	4283      	cmp	r3, r0
 8005420:	bf08      	it	eq
 8005422:	f042 0201 	orreq.w	r2, r2, #1
 8005426:	428b      	cmp	r3, r1
 8005428:	bf08      	it	eq
 800542a:	f042 0201 	orreq.w	r2, r2, #1
 800542e:	b912      	cbnz	r2, 8005436 <HAL_DMA_Init+0x43a>
 8005430:	4a26      	ldr	r2, [pc, #152]	; (80054cc <HAL_DMA_Init+0x4d0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d13a      	bne.n	80054ac <HAL_DMA_Init+0x4b0>
    hdma->State = HAL_DMA_STATE_BUSY;
 8005436:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005438:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800543a:	4f2a      	ldr	r7, [pc, #168]	; (80054e4 <HAL_DMA_Init+0x4e8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800543c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005440:	68a2      	ldr	r2, [r4, #8]
    __HAL_UNLOCK(hdma);
 8005442:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005446:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005448:	6819      	ldr	r1, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800544a:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800544e:	d02b      	beq.n	80054a8 <HAL_DMA_Init+0x4ac>
 8005450:	2a80      	cmp	r2, #128	; 0x80
 8005452:	bf0c      	ite	eq
 8005454:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 8005458:	2100      	movne	r1, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800545a:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800545c:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800545e:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005460:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005462:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005464:	f8df c084 	ldr.w	ip, [pc, #132]	; 80054ec <HAL_DMA_Init+0x4f0>
 8005468:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800546c:	69a6      	ldr	r6, [r4, #24]
 800546e:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005472:	69e5      	ldr	r5, [r4, #28]
 8005474:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005478:	4e1b      	ldr	r6, [pc, #108]	; (80054e8 <HAL_DMA_Init+0x4ec>)
 800547a:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 800547e:	441e      	add	r6, r3
 8005480:	6a25      	ldr	r5, [r4, #32]
 8005482:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8005486:	fbac 6506 	umull	r6, r5, ip, r6
 800548a:	433a      	orrs	r2, r7
 800548c:	092d      	lsrs	r5, r5, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800548e:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005490:	00ad      	lsls	r5, r5, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005492:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005494:	65e5      	str	r5, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005496:	f7ff fcc9 	bl	8004e2c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800549a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800549c:	2301      	movs	r3, #1
 800549e:	f002 021f 	and.w	r2, r2, #31
 80054a2:	4093      	lsls	r3, r2
 80054a4:	6043      	str	r3, [r0, #4]
 80054a6:	e641      	b.n	800512c <HAL_DMA_Init+0x130>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054a8:	2110      	movs	r1, #16
 80054aa:	e7d6      	b.n	800545a <HAL_DMA_Init+0x45e>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054ac:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054ae:	2303      	movs	r3, #3
    return HAL_ERROR;
 80054b0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054b2:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80054b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ba:	bf00      	nop
 80054bc:	c3c0003f 	.word	0xc3c0003f
 80054c0:	58025408 	.word	0x58025408
 80054c4:	5802541c 	.word	0x5802541c
 80054c8:	58025430 	.word	0x58025430
 80054cc:	58025494 	.word	0x58025494
 80054d0:	1000823f 	.word	0x1000823f
 80054d4:	40020940 	.word	0x40020940
 80054d8:	1600963f 	.word	0x1600963f
 80054dc:	58025940 	.word	0x58025940
 80054e0:	58025458 	.word	0x58025458
 80054e4:	fffe000f 	.word	0xfffe000f
 80054e8:	a7fdabf8 	.word	0xa7fdabf8
 80054ec:	cccccccd 	.word	0xcccccccd

080054f0 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80054f0:	2800      	cmp	r0, #0
 80054f2:	f000 818a 	beq.w	800580a <HAL_DMA_Start_IT+0x31a>
{
 80054f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fa:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80054fc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005500:	2801      	cmp	r0, #1
 8005502:	f000 8184 	beq.w	800580e <HAL_DMA_Start_IT+0x31e>
 8005506:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005508:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 800550c:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 800550e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005512:	d007      	beq.n	8005524 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8005514:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005516:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800551a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800551e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 8005524:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005526:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 800552a:	4858      	ldr	r0, [pc, #352]	; (800568c <HAL_DMA_Start_IT+0x19c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800552c:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE(hdma);
 800552e:	4e58      	ldr	r6, [pc, #352]	; (8005690 <HAL_DMA_Start_IT+0x1a0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8005530:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005534:	42b5      	cmp	r5, r6
 8005536:	bf18      	it	ne
 8005538:	4285      	cmpne	r5, r0
    __HAL_DMA_DISABLE(hdma);
 800553a:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8005698 <HAL_DMA_Start_IT+0x1a8>
 800553e:	f106 0630 	add.w	r6, r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005542:	6567      	str	r7, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8005544:	bf0c      	ite	eq
 8005546:	2001      	moveq	r0, #1
 8005548:	2000      	movne	r0, #0
 800554a:	4f52      	ldr	r7, [pc, #328]	; (8005694 <HAL_DMA_Start_IT+0x1a4>)
 800554c:	4565      	cmp	r5, ip
 800554e:	bf08      	it	eq
 8005550:	f040 0001 	orreq.w	r0, r0, #1
 8005554:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8005558:	42b5      	cmp	r5, r6
 800555a:	bf08      	it	eq
 800555c:	f040 0001 	orreq.w	r0, r0, #1
 8005560:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8005564:	4565      	cmp	r5, ip
 8005566:	bf08      	it	eq
 8005568:	f040 0001 	orreq.w	r0, r0, #1
 800556c:	f50c 7c62 	add.w	ip, ip, #904	; 0x388
 8005570:	42bd      	cmp	r5, r7
 8005572:	bf08      	it	eq
 8005574:	f040 0001 	orreq.w	r0, r0, #1
 8005578:	f507 7762 	add.w	r7, r7, #904	; 0x388
 800557c:	42b5      	cmp	r5, r6
 800557e:	bf08      	it	eq
 8005580:	f040 0001 	orreq.w	r0, r0, #1
 8005584:	3648      	adds	r6, #72	; 0x48
 8005586:	4565      	cmp	r5, ip
 8005588:	bf08      	it	eq
 800558a:	f040 0001 	orreq.w	r0, r0, #1
 800558e:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8005592:	42bd      	cmp	r5, r7
 8005594:	bf08      	it	eq
 8005596:	f040 0001 	orreq.w	r0, r0, #1
 800559a:	3748      	adds	r7, #72	; 0x48
 800559c:	42b5      	cmp	r5, r6
 800559e:	bf08      	it	eq
 80055a0:	f040 0001 	orreq.w	r0, r0, #1
 80055a4:	3648      	adds	r6, #72	; 0x48
 80055a6:	4565      	cmp	r5, ip
 80055a8:	bf08      	it	eq
 80055aa:	f040 0001 	orreq.w	r0, r0, #1
 80055ae:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 80055b2:	42bd      	cmp	r5, r7
 80055b4:	bf08      	it	eq
 80055b6:	f040 0001 	orreq.w	r0, r0, #1
 80055ba:	f5a7 678f 	sub.w	r7, r7, #1144	; 0x478
 80055be:	42b5      	cmp	r5, r6
 80055c0:	bf08      	it	eq
 80055c2:	f040 0001 	orreq.w	r0, r0, #1
 80055c6:	f5a6 668f 	sub.w	r6, r6, #1144	; 0x478
 80055ca:	4565      	cmp	r5, ip
 80055cc:	bf14      	ite	ne
 80055ce:	4682      	movne	sl, r0
 80055d0:	f040 0a01 	orreq.w	sl, r0, #1
 80055d4:	42b5      	cmp	r5, r6
 80055d6:	bf18      	it	ne
 80055d8:	42bd      	cmpne	r5, r7
 80055da:	bf0c      	ite	eq
 80055dc:	2601      	moveq	r6, #1
 80055de:	2600      	movne	r6, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_DMA_Start_IT+0xf8>
 80055e2:	f1ba 0f00 	cmp.w	sl, #0
 80055e6:	d059      	beq.n	800569c <HAL_DMA_Start_IT+0x1ac>
 80055e8:	682f      	ldr	r7, [r5, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ea:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 80055ee:	f027 0701 	bic.w	r7, r7, #1
 80055f2:	602f      	str	r7, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055f4:	2e00      	cmp	r6, #0
 80055f6:	f000 8084 	beq.w	8005702 <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055fa:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80055fc:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 8005600:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005602:	f1be 0f00 	cmp.w	lr, #0
 8005606:	d002      	beq.n	800560e <HAL_DMA_Start_IT+0x11e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005608:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 800560c:	6078      	str	r0, [r7, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800560e:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8005610:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005614:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005618:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800561c:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005620:	fa09 f707 	lsl.w	r7, r9, r7
 8005624:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005628:	682f      	ldr	r7, [r5, #0]
 800562a:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 800562e:	602f      	str	r7, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005630:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005632:	f000 80ef 	beq.w	8005814 <HAL_DMA_Start_IT+0x324>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005636:	60a9      	str	r1, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005638:	60ea      	str	r2, [r5, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800563a:	b91e      	cbnz	r6, 8005644 <HAL_DMA_Start_IT+0x154>
 800563c:	f1ba 0f00 	cmp.w	sl, #0
 8005640:	f000 80ee 	beq.w	8005820 <HAL_DMA_Start_IT+0x330>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005644:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005646:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005648:	f023 031e 	bic.w	r3, r3, #30
 800564c:	f043 0316 	orr.w	r3, r3, #22
 8005650:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005652:	b11a      	cbz	r2, 800565c <HAL_DMA_Start_IT+0x16c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	f043 0308 	orr.w	r3, r3, #8
 800565a:	602b      	str	r3, [r5, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800565c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	03d2      	lsls	r2, r2, #15
 8005662:	d503      	bpl.n	800566c <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566a:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800566c:	f1be 0f00 	cmp.w	lr, #0
 8005670:	d005      	beq.n	800567e <HAL_DMA_Start_IT+0x18e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005672:	f8de 3000 	ldr.w	r3, [lr]
 8005676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567a:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 800567e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005680:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	602b      	str	r3, [r5, #0]
}
 8005688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568c:	40020040 	.word	0x40020040
 8005690:	40020058 	.word	0x40020058
 8005694:	400200b8 	.word	0x400200b8
 8005698:	40020070 	.word	0x40020070
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800569c:	4f65      	ldr	r7, [pc, #404]	; (8005834 <HAL_DMA_Start_IT+0x344>)
 800569e:	f8df e19c 	ldr.w	lr, [pc, #412]	; 800583c <HAL_DMA_Start_IT+0x34c>
 80056a2:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8005840 <HAL_DMA_Start_IT+0x350>
 80056a6:	4575      	cmp	r5, lr
 80056a8:	bf18      	it	ne
 80056aa:	42bd      	cmpne	r5, r7
 80056ac:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 80056b0:	bf0c      	ite	eq
 80056b2:	2701      	moveq	r7, #1
 80056b4:	2700      	movne	r7, #0
 80056b6:	4565      	cmp	r5, ip
 80056b8:	bf08      	it	eq
 80056ba:	f047 0701 	orreq.w	r7, r7, #1
 80056be:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80056c2:	4575      	cmp	r5, lr
 80056c4:	bf08      	it	eq
 80056c6:	f047 0701 	orreq.w	r7, r7, #1
 80056ca:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80056ce:	4565      	cmp	r5, ip
 80056d0:	bf08      	it	eq
 80056d2:	f047 0701 	orreq.w	r7, r7, #1
 80056d6:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80056da:	4575      	cmp	r5, lr
 80056dc:	bf08      	it	eq
 80056de:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80056e2:	f8d5 e000 	ldr.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056e6:	4565      	cmp	r5, ip
 80056e8:	bf08      	it	eq
 80056ea:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80056ee:	f02e 0e01 	bic.w	lr, lr, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056f2:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 80056f6:	f8c5 e000 	str.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056fa:	b917      	cbnz	r7, 8005702 <HAL_DMA_Start_IT+0x212>
 80056fc:	4f4e      	ldr	r7, [pc, #312]	; (8005838 <HAL_DMA_Start_IT+0x348>)
 80056fe:	42bd      	cmp	r5, r7
 8005700:	d10d      	bne.n	800571e <HAL_DMA_Start_IT+0x22e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005702:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8005704:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 8005708:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800570a:	f1be 0f00 	cmp.w	lr, #0
 800570e:	d002      	beq.n	8005716 <HAL_DMA_Start_IT+0x226>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005710:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 8005714:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005716:	f1ba 0f00 	cmp.w	sl, #0
 800571a:	f47f af78 	bne.w	800560e <HAL_DMA_Start_IT+0x11e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800571e:	4f47      	ldr	r7, [pc, #284]	; (800583c <HAL_DMA_Start_IT+0x34c>)
 8005720:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8005834 <HAL_DMA_Start_IT+0x344>
 8005724:	f8df e118 	ldr.w	lr, [pc, #280]	; 8005840 <HAL_DMA_Start_IT+0x350>
 8005728:	4545      	cmp	r5, r8
 800572a:	bf18      	it	ne
 800572c:	42bd      	cmpne	r5, r7
 800572e:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8005732:	bf0c      	ite	eq
 8005734:	2701      	moveq	r7, #1
 8005736:	2700      	movne	r7, #0
 8005738:	4575      	cmp	r5, lr
 800573a:	bf08      	it	eq
 800573c:	f047 0701 	orreq.w	r7, r7, #1
 8005740:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8005744:	4545      	cmp	r5, r8
 8005746:	bf08      	it	eq
 8005748:	f047 0701 	orreq.w	r7, r7, #1
 800574c:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8005750:	4575      	cmp	r5, lr
 8005752:	bf08      	it	eq
 8005754:	f047 0701 	orreq.w	r7, r7, #1
 8005758:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800575c:	4545      	cmp	r5, r8
 800575e:	bf08      	it	eq
 8005760:	f047 0701 	orreq.w	r7, r7, #1
 8005764:	4575      	cmp	r5, lr
 8005766:	bf08      	it	eq
 8005768:	f047 0701 	orreq.w	r7, r7, #1
 800576c:	b917      	cbnz	r7, 8005774 <HAL_DMA_Start_IT+0x284>
 800576e:	4f32      	ldr	r7, [pc, #200]	; (8005838 <HAL_DMA_Start_IT+0x348>)
 8005770:	42bd      	cmp	r5, r7
 8005772:	d155      	bne.n	8005820 <HAL_DMA_Start_IT+0x330>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005774:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8005776:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800577a:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800577e:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005782:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005786:	fa0e f707 	lsl.w	r7, lr, r7
 800578a:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800578e:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005790:	d043      	beq.n	800581a <HAL_DMA_Start_IT+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005792:	60a9      	str	r1, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005794:	60ea      	str	r2, [r5, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005796:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005798:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800579a:	f023 030e 	bic.w	r3, r3, #14
 800579e:	f043 030a 	orr.w	r3, r3, #10
 80057a2:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	d02d      	beq.n	8005804 <HAL_DMA_Start_IT+0x314>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	f043 0304 	orr.w	r3, r3, #4
 80057ae:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057b0:	4b20      	ldr	r3, [pc, #128]	; (8005834 <HAL_DMA_Start_IT+0x344>)
 80057b2:	4a22      	ldr	r2, [pc, #136]	; (800583c <HAL_DMA_Start_IT+0x34c>)
 80057b4:	4922      	ldr	r1, [pc, #136]	; (8005840 <HAL_DMA_Start_IT+0x350>)
 80057b6:	4295      	cmp	r5, r2
 80057b8:	bf18      	it	ne
 80057ba:	429d      	cmpne	r5, r3
 80057bc:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80057c0:	bf0c      	ite	eq
 80057c2:	2301      	moveq	r3, #1
 80057c4:	2300      	movne	r3, #0
 80057c6:	428d      	cmp	r5, r1
 80057c8:	bf08      	it	eq
 80057ca:	f043 0301 	orreq.w	r3, r3, #1
 80057ce:	3128      	adds	r1, #40	; 0x28
 80057d0:	4295      	cmp	r5, r2
 80057d2:	bf08      	it	eq
 80057d4:	f043 0301 	orreq.w	r3, r3, #1
 80057d8:	3228      	adds	r2, #40	; 0x28
 80057da:	428d      	cmp	r5, r1
 80057dc:	bf08      	it	eq
 80057de:	f043 0301 	orreq.w	r3, r3, #1
 80057e2:	3128      	adds	r1, #40	; 0x28
 80057e4:	4295      	cmp	r5, r2
 80057e6:	bf08      	it	eq
 80057e8:	f043 0301 	orreq.w	r3, r3, #1
 80057ec:	3228      	adds	r2, #40	; 0x28
 80057ee:	428d      	cmp	r5, r1
 80057f0:	bf08      	it	eq
 80057f2:	f043 0301 	orreq.w	r3, r3, #1
 80057f6:	4295      	cmp	r5, r2
 80057f8:	bf08      	it	eq
 80057fa:	f043 0301 	orreq.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f43f af3d 	beq.w	800567e <HAL_DMA_Start_IT+0x18e>
 8005804:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 8005808:	e728      	b.n	800565c <HAL_DMA_Start_IT+0x16c>
    return HAL_ERROR;
 800580a:	2001      	movs	r0, #1
}
 800580c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800580e:	2002      	movs	r0, #2
}
 8005810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005814:	60aa      	str	r2, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005816:	60e9      	str	r1, [r5, #12]
 8005818:	e70f      	b.n	800563a <HAL_DMA_Start_IT+0x14a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800581a:	60aa      	str	r2, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800581c:	60e9      	str	r1, [r5, #12]
 800581e:	e7ba      	b.n	8005796 <HAL_DMA_Start_IT+0x2a6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005820:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005822:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005824:	f023 030e 	bic.w	r3, r3, #14
 8005828:	f043 030a 	orr.w	r3, r3, #10
 800582c:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800582e:	2a00      	cmp	r2, #0
 8005830:	d1ba      	bne.n	80057a8 <HAL_DMA_Start_IT+0x2b8>
 8005832:	e7bd      	b.n	80057b0 <HAL_DMA_Start_IT+0x2c0>
 8005834:	5802541c 	.word	0x5802541c
 8005838:	58025494 	.word	0x58025494
 800583c:	58025408 	.word	0x58025408
 8005840:	58025430 	.word	0x58025430

08005844 <HAL_DMA_Abort>:
{
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8005848:	f7fd ff02 	bl	8003650 <HAL_GetTick>
  if(hdma == NULL)
 800584c:	2d00      	cmp	r5, #0
 800584e:	f000 8128 	beq.w	8005aa2 <HAL_DMA_Abort+0x25e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005852:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8005856:	2b02      	cmp	r3, #2
 8005858:	f040 80e1 	bne.w	8005a1e <HAL_DMA_Abort+0x1da>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800585c:	682c      	ldr	r4, [r5, #0]
 800585e:	4606      	mov	r6, r0
 8005860:	4b91      	ldr	r3, [pc, #580]	; (8005aa8 <HAL_DMA_Abort+0x264>)
 8005862:	4992      	ldr	r1, [pc, #584]	; (8005aac <HAL_DMA_Abort+0x268>)
 8005864:	4a92      	ldr	r2, [pc, #584]	; (8005ab0 <HAL_DMA_Abort+0x26c>)
 8005866:	428c      	cmp	r4, r1
 8005868:	bf18      	it	ne
 800586a:	429c      	cmpne	r4, r3
 800586c:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8005870:	4890      	ldr	r0, [pc, #576]	; (8005ab4 <HAL_DMA_Abort+0x270>)
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	4294      	cmp	r4, r2
 800587a:	bf08      	it	eq
 800587c:	f043 0301 	orreq.w	r3, r3, #1
 8005880:	3248      	adds	r2, #72	; 0x48
 8005882:	428c      	cmp	r4, r1
 8005884:	bf08      	it	eq
 8005886:	f043 0301 	orreq.w	r3, r3, #1
 800588a:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800588e:	4284      	cmp	r4, r0
 8005890:	bf08      	it	eq
 8005892:	f043 0301 	orreq.w	r3, r3, #1
 8005896:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800589a:	4294      	cmp	r4, r2
 800589c:	bf08      	it	eq
 800589e:	f043 0301 	orreq.w	r3, r3, #1
 80058a2:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80058a6:	428c      	cmp	r4, r1
 80058a8:	bf08      	it	eq
 80058aa:	f043 0301 	orreq.w	r3, r3, #1
 80058ae:	3148      	adds	r1, #72	; 0x48
 80058b0:	4284      	cmp	r4, r0
 80058b2:	bf08      	it	eq
 80058b4:	f043 0301 	orreq.w	r3, r3, #1
 80058b8:	3048      	adds	r0, #72	; 0x48
 80058ba:	4294      	cmp	r4, r2
 80058bc:	bf08      	it	eq
 80058be:	f043 0301 	orreq.w	r3, r3, #1
 80058c2:	3248      	adds	r2, #72	; 0x48
 80058c4:	428c      	cmp	r4, r1
 80058c6:	bf08      	it	eq
 80058c8:	f043 0301 	orreq.w	r3, r3, #1
 80058cc:	3148      	adds	r1, #72	; 0x48
 80058ce:	4284      	cmp	r4, r0
 80058d0:	bf08      	it	eq
 80058d2:	f043 0301 	orreq.w	r3, r3, #1
 80058d6:	3048      	adds	r0, #72	; 0x48
 80058d8:	4294      	cmp	r4, r2
 80058da:	bf08      	it	eq
 80058dc:	f043 0301 	orreq.w	r3, r3, #1
 80058e0:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 80058e4:	428c      	cmp	r4, r1
 80058e6:	bf08      	it	eq
 80058e8:	f043 0301 	orreq.w	r3, r3, #1
 80058ec:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 80058f0:	4284      	cmp	r4, r0
 80058f2:	bf08      	it	eq
 80058f4:	f043 0301 	orreq.w	r3, r3, #1
 80058f8:	428c      	cmp	r4, r1
 80058fa:	bf18      	it	ne
 80058fc:	4294      	cmpne	r4, r2
 80058fe:	bf0c      	ite	eq
 8005900:	2201      	moveq	r2, #1
 8005902:	2200      	movne	r2, #0
 8005904:	d002      	beq.n	800590c <HAL_DMA_Abort+0xc8>
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8090 	beq.w	8005a2c <HAL_DMA_Abort+0x1e8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800590c:	6821      	ldr	r1, [r4, #0]
 800590e:	f021 011e 	bic.w	r1, r1, #30
 8005912:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005914:	6961      	ldr	r1, [r4, #20]
 8005916:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800591a:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800591c:	2a00      	cmp	r2, #0
 800591e:	f000 80b0 	beq.w	8005a82 <HAL_DMA_Abort+0x23e>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005922:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8005924:	6813      	ldr	r3, [r2, #0]
 8005926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800592a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	6023      	str	r3, [r4, #0]
 8005934:	e005      	b.n	8005942 <HAL_DMA_Abort+0xfe>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005936:	f7fd fe8b 	bl	8003650 <HAL_GetTick>
 800593a:	1b83      	subs	r3, r0, r6
 800593c:	2b05      	cmp	r3, #5
 800593e:	f200 80a6 	bhi.w	8005a8e <HAL_DMA_Abort+0x24a>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	07db      	lsls	r3, r3, #31
 8005946:	d4f6      	bmi.n	8005936 <HAL_DMA_Abort+0xf2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005948:	682a      	ldr	r2, [r5, #0]
 800594a:	4b57      	ldr	r3, [pc, #348]	; (8005aa8 <HAL_DMA_Abort+0x264>)
 800594c:	4957      	ldr	r1, [pc, #348]	; (8005aac <HAL_DMA_Abort+0x268>)
 800594e:	4c58      	ldr	r4, [pc, #352]	; (8005ab0 <HAL_DMA_Abort+0x26c>)
 8005950:	428a      	cmp	r2, r1
 8005952:	bf18      	it	ne
 8005954:	429a      	cmpne	r2, r3
 8005956:	4858      	ldr	r0, [pc, #352]	; (8005ab8 <HAL_DMA_Abort+0x274>)
 8005958:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	42a2      	cmp	r2, r4
 8005964:	bf08      	it	eq
 8005966:	f043 0301 	orreq.w	r3, r3, #1
 800596a:	3448      	adds	r4, #72	; 0x48
 800596c:	4282      	cmp	r2, r0
 800596e:	bf08      	it	eq
 8005970:	f043 0301 	orreq.w	r3, r3, #1
 8005974:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8005978:	428a      	cmp	r2, r1
 800597a:	bf08      	it	eq
 800597c:	f043 0301 	orreq.w	r3, r3, #1
 8005980:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8005984:	42a2      	cmp	r2, r4
 8005986:	bf08      	it	eq
 8005988:	f043 0301 	orreq.w	r3, r3, #1
 800598c:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8005990:	4282      	cmp	r2, r0
 8005992:	bf08      	it	eq
 8005994:	f043 0301 	orreq.w	r3, r3, #1
 8005998:	3048      	adds	r0, #72	; 0x48
 800599a:	428a      	cmp	r2, r1
 800599c:	bf08      	it	eq
 800599e:	f043 0301 	orreq.w	r3, r3, #1
 80059a2:	3148      	adds	r1, #72	; 0x48
 80059a4:	42a2      	cmp	r2, r4
 80059a6:	bf08      	it	eq
 80059a8:	f043 0301 	orreq.w	r3, r3, #1
 80059ac:	3448      	adds	r4, #72	; 0x48
 80059ae:	4282      	cmp	r2, r0
 80059b0:	bf08      	it	eq
 80059b2:	f043 0301 	orreq.w	r3, r3, #1
 80059b6:	3048      	adds	r0, #72	; 0x48
 80059b8:	428a      	cmp	r2, r1
 80059ba:	bf08      	it	eq
 80059bc:	f043 0301 	orreq.w	r3, r3, #1
 80059c0:	3148      	adds	r1, #72	; 0x48
 80059c2:	42a2      	cmp	r2, r4
 80059c4:	bf08      	it	eq
 80059c6:	f043 0301 	orreq.w	r3, r3, #1
 80059ca:	4282      	cmp	r2, r0
 80059cc:	bf08      	it	eq
 80059ce:	f043 0301 	orreq.w	r3, r3, #1
 80059d2:	428a      	cmp	r2, r1
 80059d4:	bf08      	it	eq
 80059d6:	f043 0301 	orreq.w	r3, r3, #1
 80059da:	b933      	cbnz	r3, 80059ea <HAL_DMA_Abort+0x1a6>
 80059dc:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 80059e0:	4b36      	ldr	r3, [pc, #216]	; (8005abc <HAL_DMA_Abort+0x278>)
 80059e2:	429a      	cmp	r2, r3
 80059e4:	bf18      	it	ne
 80059e6:	428a      	cmpne	r2, r1
 80059e8:	d172      	bne.n	8005ad0 <HAL_DMA_Abort+0x28c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059ea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80059ec:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ee:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059f0:	f002 021f 	and.w	r2, r2, #31
 80059f4:	4093      	lsls	r3, r2
 80059f6:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 80059f8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059fa:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 80059fe:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8005a00:	b133      	cbz	r3, 8005a10 <HAL_DMA_Abort+0x1cc>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a02:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a04:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8005a06:	6f68      	ldr	r0, [r5, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a0c:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a0e:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005a10:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8005a12:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8005a14:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005a18:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a1e:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8005a20:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005a22:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a24:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005a26:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a2c:	4a24      	ldr	r2, [pc, #144]	; (8005ac0 <HAL_DMA_Abort+0x27c>)
 8005a2e:	4925      	ldr	r1, [pc, #148]	; (8005ac4 <HAL_DMA_Abort+0x280>)
 8005a30:	4825      	ldr	r0, [pc, #148]	; (8005ac8 <HAL_DMA_Abort+0x284>)
 8005a32:	428c      	cmp	r4, r1
 8005a34:	bf18      	it	ne
 8005a36:	4294      	cmpne	r4, r2
 8005a38:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8005a3c:	bf0c      	ite	eq
 8005a3e:	2201      	moveq	r2, #1
 8005a40:	2200      	movne	r2, #0
 8005a42:	4284      	cmp	r4, r0
 8005a44:	bf08      	it	eq
 8005a46:	f042 0201 	orreq.w	r2, r2, #1
 8005a4a:	3028      	adds	r0, #40	; 0x28
 8005a4c:	428c      	cmp	r4, r1
 8005a4e:	bf08      	it	eq
 8005a50:	f042 0201 	orreq.w	r2, r2, #1
 8005a54:	3128      	adds	r1, #40	; 0x28
 8005a56:	4284      	cmp	r4, r0
 8005a58:	bf08      	it	eq
 8005a5a:	f042 0201 	orreq.w	r2, r2, #1
 8005a5e:	3028      	adds	r0, #40	; 0x28
 8005a60:	428c      	cmp	r4, r1
 8005a62:	bf08      	it	eq
 8005a64:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a68:	6821      	ldr	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a6a:	4284      	cmp	r4, r0
 8005a6c:	bf08      	it	eq
 8005a6e:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a72:	f021 010e 	bic.w	r1, r1, #14
 8005a76:	6021      	str	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a78:	b91a      	cbnz	r2, 8005a82 <HAL_DMA_Abort+0x23e>
 8005a7a:	4a14      	ldr	r2, [pc, #80]	; (8005acc <HAL_DMA_Abort+0x288>)
 8005a7c:	4294      	cmp	r4, r2
 8005a7e:	f47f af55 	bne.w	800592c <HAL_DMA_Abort+0xe8>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a82:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8005a84:	680a      	ldr	r2, [r1, #0]
 8005a86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a8a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8005a8c:	e74e      	b.n	800592c <HAL_DMA_Abort+0xe8>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a8e:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8005a90:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a92:	2303      	movs	r3, #3
        return HAL_ERROR;
 8005a94:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a96:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005a98:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a9c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8005aa0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005aa2:	2001      	movs	r0, #1
}
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40020058 	.word	0x40020058
 8005aac:	40020040 	.word	0x40020040
 8005ab0:	40020070 	.word	0x40020070
 8005ab4:	400200a0 	.word	0x400200a0
 8005ab8:	40020088 	.word	0x40020088
 8005abc:	40020028 	.word	0x40020028
 8005ac0:	5802541c 	.word	0x5802541c
 8005ac4:	58025408 	.word	0x58025408
 8005ac8:	58025430 	.word	0x58025430
 8005acc:	58025494 	.word	0x58025494
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ad0:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 8005ad4:	4b18      	ldr	r3, [pc, #96]	; (8005b38 <HAL_DMA_Abort+0x2f4>)
 8005ad6:	4819      	ldr	r0, [pc, #100]	; (8005b3c <HAL_DMA_Abort+0x2f8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ad8:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ada:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 8005ade:	42a2      	cmp	r2, r4
 8005ae0:	bf18      	it	ne
 8005ae2:	429a      	cmpne	r2, r3
 8005ae4:	f104 043c 	add.w	r4, r4, #60	; 0x3c
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	4282      	cmp	r2, r0
 8005af0:	bf08      	it	eq
 8005af2:	f043 0301 	orreq.w	r3, r3, #1
 8005af6:	3028      	adds	r0, #40	; 0x28
 8005af8:	42a2      	cmp	r2, r4
 8005afa:	bf08      	it	eq
 8005afc:	f043 0301 	orreq.w	r3, r3, #1
 8005b00:	3428      	adds	r4, #40	; 0x28
 8005b02:	4282      	cmp	r2, r0
 8005b04:	bf08      	it	eq
 8005b06:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b0a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b0c:	42a2      	cmp	r2, r4
 8005b0e:	bf08      	it	eq
 8005b10:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b14:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b18:	3414      	adds	r4, #20
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b1a:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b1c:	42a2      	cmp	r2, r4
 8005b1e:	bf08      	it	eq
 8005b20:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b24:	6dac      	ldr	r4, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b26:	6061      	str	r1, [r4, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f47f af65 	bne.w	80059f8 <HAL_DMA_Abort+0x1b4>
 8005b2e:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <HAL_DMA_Abort+0x2fc>)
 8005b30:	429a      	cmp	r2, r3
 8005b32:	f43f af61 	beq.w	80059f8 <HAL_DMA_Abort+0x1b4>
 8005b36:	e76b      	b.n	8005a10 <HAL_DMA_Abort+0x1cc>
 8005b38:	5802541c 	.word	0x5802541c
 8005b3c:	58025430 	.word	0x58025430
 8005b40:	58025494 	.word	0x58025494

08005b44 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d060      	beq.n	8005c0a <HAL_DMA_Abort_IT+0xc6>
{
 8005b48:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b4a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2a02      	cmp	r2, #2
 8005b52:	d156      	bne.n	8005c02 <HAL_DMA_Abort_IT+0xbe>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b54:	6801      	ldr	r1, [r0, #0]
 8005b56:	4a59      	ldr	r2, [pc, #356]	; (8005cbc <HAL_DMA_Abort_IT+0x178>)
 8005b58:	4291      	cmp	r1, r2
 8005b5a:	d049      	beq.n	8005bf0 <HAL_DMA_Abort_IT+0xac>
 8005b5c:	3218      	adds	r2, #24
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	d046      	beq.n	8005bf0 <HAL_DMA_Abort_IT+0xac>
 8005b62:	3230      	adds	r2, #48	; 0x30
 8005b64:	4856      	ldr	r0, [pc, #344]	; (8005cc0 <HAL_DMA_Abort_IT+0x17c>)
 8005b66:	4c57      	ldr	r4, [pc, #348]	; (8005cc4 <HAL_DMA_Abort_IT+0x180>)
 8005b68:	4281      	cmp	r1, r0
 8005b6a:	bf18      	it	ne
 8005b6c:	4291      	cmpne	r1, r2
 8005b6e:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005b72:	4d55      	ldr	r5, [pc, #340]	; (8005cc8 <HAL_DMA_Abort_IT+0x184>)
 8005b74:	bf0c      	ite	eq
 8005b76:	2201      	moveq	r2, #1
 8005b78:	2200      	movne	r2, #0
 8005b7a:	42a1      	cmp	r1, r4
 8005b7c:	bf08      	it	eq
 8005b7e:	f042 0201 	orreq.w	r2, r2, #1
 8005b82:	3448      	adds	r4, #72	; 0x48
 8005b84:	4281      	cmp	r1, r0
 8005b86:	bf08      	it	eq
 8005b88:	f042 0201 	orreq.w	r2, r2, #1
 8005b8c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8005b90:	42a9      	cmp	r1, r5
 8005b92:	bf08      	it	eq
 8005b94:	f042 0201 	orreq.w	r2, r2, #1
 8005b98:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005b9c:	42a1      	cmp	r1, r4
 8005b9e:	bf08      	it	eq
 8005ba0:	f042 0201 	orreq.w	r2, r2, #1
 8005ba4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8005ba8:	4281      	cmp	r1, r0
 8005baa:	bf08      	it	eq
 8005bac:	f042 0201 	orreq.w	r2, r2, #1
 8005bb0:	3048      	adds	r0, #72	; 0x48
 8005bb2:	42a9      	cmp	r1, r5
 8005bb4:	bf08      	it	eq
 8005bb6:	f042 0201 	orreq.w	r2, r2, #1
 8005bba:	3548      	adds	r5, #72	; 0x48
 8005bbc:	42a1      	cmp	r1, r4
 8005bbe:	bf08      	it	eq
 8005bc0:	f042 0201 	orreq.w	r2, r2, #1
 8005bc4:	3448      	adds	r4, #72	; 0x48
 8005bc6:	4281      	cmp	r1, r0
 8005bc8:	bf08      	it	eq
 8005bca:	f042 0201 	orreq.w	r2, r2, #1
 8005bce:	3048      	adds	r0, #72	; 0x48
 8005bd0:	42a9      	cmp	r1, r5
 8005bd2:	bf08      	it	eq
 8005bd4:	f042 0201 	orreq.w	r2, r2, #1
 8005bd8:	42a1      	cmp	r1, r4
 8005bda:	bf08      	it	eq
 8005bdc:	f042 0201 	orreq.w	r2, r2, #1
 8005be0:	4281      	cmp	r1, r0
 8005be2:	bf08      	it	eq
 8005be4:	f042 0201 	orreq.w	r2, r2, #1
 8005be8:	b912      	cbnz	r2, 8005bf0 <HAL_DMA_Abort_IT+0xac>
 8005bea:	4a38      	ldr	r2, [pc, #224]	; (8005ccc <HAL_DMA_Abort_IT+0x188>)
 8005bec:	4291      	cmp	r1, r2
 8005bee:	d10e      	bne.n	8005c0e <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bf0:	2204      	movs	r2, #4
  return HAL_OK;
 8005bf2:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005bf8:	680b      	ldr	r3, [r1, #0]
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	600b      	str	r3, [r1, #0]
}
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c02:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8005c04:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c06:	655a      	str	r2, [r3, #84]	; 0x54
}
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005c0a:	2001      	movs	r0, #1
}
 8005c0c:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c0e:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 8005c12:	4a2f      	ldr	r2, [pc, #188]	; (8005cd0 <HAL_DMA_Abort_IT+0x18c>)
 8005c14:	482f      	ldr	r0, [pc, #188]	; (8005cd4 <HAL_DMA_Abort_IT+0x190>)
 8005c16:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 8005c1a:	4d2f      	ldr	r5, [pc, #188]	; (8005cd8 <HAL_DMA_Abort_IT+0x194>)
 8005c1c:	42a1      	cmp	r1, r4
 8005c1e:	bf18      	it	ne
 8005c20:	4291      	cmpne	r1, r2
 8005c22:	f104 0450 	add.w	r4, r4, #80	; 0x50
 8005c26:	bf0c      	ite	eq
 8005c28:	2201      	moveq	r2, #1
 8005c2a:	2200      	movne	r2, #0
 8005c2c:	4281      	cmp	r1, r0
 8005c2e:	bf08      	it	eq
 8005c30:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c34:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c36:	42a9      	cmp	r1, r5
 8005c38:	bf08      	it	eq
 8005c3a:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c3e:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c42:	3528      	adds	r5, #40	; 0x28
 8005c44:	42a1      	cmp	r1, r4
 8005c46:	bf08      	it	eq
 8005c48:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c4c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c4e:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8005c50:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c52:	42a9      	cmp	r1, r5
 8005c54:	bf08      	it	eq
 8005c56:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8005c5a:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c5e:	42a1      	cmp	r1, r4
 8005c60:	bf08      	it	eq
 8005c62:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8005c66:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c68:	b912      	cbnz	r2, 8005c70 <HAL_DMA_Abort_IT+0x12c>
 8005c6a:	4a1c      	ldr	r2, [pc, #112]	; (8005cdc <HAL_DMA_Abort_IT+0x198>)
 8005c6c:	4291      	cmp	r1, r2
 8005c6e:	d117      	bne.n	8005ca0 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c70:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c72:	2101      	movs	r1, #1
 8005c74:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c76:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c78:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c7c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c82:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c84:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c86:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 8005c88:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c8c:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c8e:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005c90:	b132      	cbz	r2, 8005ca0 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c92:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c94:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005c96:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c98:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005c9c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c9e:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8005ca0:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005ca2:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8005ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8005ca6:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005caa:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8005cae:	b11a      	cbz	r2, 8005cb8 <HAL_DMA_Abort_IT+0x174>
        hdma->XferAbortCallback(hdma);
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	4790      	blx	r2
  return HAL_OK;
 8005cb4:	4620      	mov	r0, r4
}
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8005cb8:	4610      	mov	r0, r2
}
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	40020010 	.word	0x40020010
 8005cc0:	40020040 	.word	0x40020040
 8005cc4:	40020070 	.word	0x40020070
 8005cc8:	400200a0 	.word	0x400200a0
 8005ccc:	400204b8 	.word	0x400204b8
 8005cd0:	5802541c 	.word	0x5802541c
 8005cd4:	58025430 	.word	0x58025430
 8005cd8:	58025444 	.word	0x58025444
 8005cdc:	58025494 	.word	0x58025494

08005ce0 <HAL_DMA_IRQHandler>:
{
 8005ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ce4:	4a9f      	ldr	r2, [pc, #636]	; (8005f64 <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 8005ce6:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ce8:	4e9f      	ldr	r6, [pc, #636]	; (8005f68 <HAL_DMA_IRQHandler+0x288>)
{
 8005cea:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005cec:	6803      	ldr	r3, [r0, #0]
{
 8005cee:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cf0:	499e      	ldr	r1, [pc, #632]	; (8005f6c <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cf2:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	bf18      	it	ne
 8005cf8:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 8005cfa:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005cfc:	bf08      	it	eq
 8005cfe:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d00:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 8005d02:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d04:	bf18      	it	ne
 8005d06:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 8005d08:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d0a:	d04a      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xc2>
 8005d0c:	3230      	adds	r2, #48	; 0x30
 8005d0e:	f8df e26c 	ldr.w	lr, [pc, #620]	; 8005f7c <HAL_DMA_IRQHandler+0x29c>
 8005d12:	4897      	ldr	r0, [pc, #604]	; (8005f70 <HAL_DMA_IRQHandler+0x290>)
 8005d14:	4573      	cmp	r3, lr
 8005d16:	bf18      	it	ne
 8005d18:	4293      	cmpne	r3, r2
 8005d1a:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 8005d1e:	bf0c      	ite	eq
 8005d20:	2201      	moveq	r2, #1
 8005d22:	2200      	movne	r2, #0
 8005d24:	4283      	cmp	r3, r0
 8005d26:	bf08      	it	eq
 8005d28:	f042 0201 	orreq.w	r2, r2, #1
 8005d2c:	3030      	adds	r0, #48	; 0x30
 8005d2e:	4573      	cmp	r3, lr
 8005d30:	bf08      	it	eq
 8005d32:	f042 0201 	orreq.w	r2, r2, #1
 8005d36:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8005d3a:	4283      	cmp	r3, r0
 8005d3c:	bf08      	it	eq
 8005d3e:	f042 0201 	orreq.w	r2, r2, #1
 8005d42:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005d46:	4573      	cmp	r3, lr
 8005d48:	bf08      	it	eq
 8005d4a:	f042 0201 	orreq.w	r2, r2, #1
 8005d4e:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8005d52:	4283      	cmp	r3, r0
 8005d54:	bf08      	it	eq
 8005d56:	f042 0201 	orreq.w	r2, r2, #1
 8005d5a:	3030      	adds	r0, #48	; 0x30
 8005d5c:	4573      	cmp	r3, lr
 8005d5e:	bf08      	it	eq
 8005d60:	f042 0201 	orreq.w	r2, r2, #1
 8005d64:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8005d68:	4283      	cmp	r3, r0
 8005d6a:	bf08      	it	eq
 8005d6c:	f042 0201 	orreq.w	r2, r2, #1
 8005d70:	3030      	adds	r0, #48	; 0x30
 8005d72:	4573      	cmp	r3, lr
 8005d74:	bf08      	it	eq
 8005d76:	f042 0201 	orreq.w	r2, r2, #1
 8005d7a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8005d7e:	4283      	cmp	r3, r0
 8005d80:	bf08      	it	eq
 8005d82:	f042 0201 	orreq.w	r2, r2, #1
 8005d86:	3030      	adds	r0, #48	; 0x30
 8005d88:	4573      	cmp	r3, lr
 8005d8a:	bf08      	it	eq
 8005d8c:	f042 0201 	orreq.w	r2, r2, #1
 8005d90:	4283      	cmp	r3, r0
 8005d92:	bf08      	it	eq
 8005d94:	f042 0201 	orreq.w	r2, r2, #1
 8005d98:	b91a      	cbnz	r2, 8005da2 <HAL_DMA_IRQHandler+0xc2>
 8005d9a:	4a76      	ldr	r2, [pc, #472]	; (8005f74 <HAL_DMA_IRQHandler+0x294>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	f040 820b 	bne.w	80061b8 <HAL_DMA_IRQHandler+0x4d8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005da2:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 8005da6:	2208      	movs	r2, #8
 8005da8:	f001 0c1f 	and.w	ip, r1, #31
 8005dac:	fa02 f20c 	lsl.w	r2, r2, ip
 8005db0:	4217      	tst	r7, r2
 8005db2:	f040 818d 	bne.w	80060d0 <HAL_DMA_IRQHandler+0x3f0>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005db6:	fa27 f20c 	lsr.w	r2, r7, ip
 8005dba:	07d2      	lsls	r2, r2, #31
 8005dbc:	d50c      	bpl.n	8005dd8 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	0610      	lsls	r0, r2, #24
 8005dc2:	d509      	bpl.n	8005dd8 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	fa02 f20c 	lsl.w	r2, r2, ip
 8005dca:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dcc:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8005dd0:	f042 0202 	orr.w	r2, r2, #2
 8005dd4:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dd8:	f04f 0e04 	mov.w	lr, #4
 8005ddc:	fa0e f00c 	lsl.w	r0, lr, ip
 8005de0:	4238      	tst	r0, r7
 8005de2:	d05b      	beq.n	8005e9c <HAL_DMA_IRQHandler+0x1bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005de4:	2e00      	cmp	r6, #0
 8005de6:	d14f      	bne.n	8005e88 <HAL_DMA_IRQHandler+0x1a8>
 8005de8:	4a63      	ldr	r2, [pc, #396]	; (8005f78 <HAL_DMA_IRQHandler+0x298>)
 8005dea:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8005f7c <HAL_DMA_IRQHandler+0x29c>
 8005dee:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8005f70 <HAL_DMA_IRQHandler+0x290>
 8005df2:	454b      	cmp	r3, r9
 8005df4:	bf18      	it	ne
 8005df6:	4293      	cmpne	r3, r2
 8005df8:	f109 0948 	add.w	r9, r9, #72	; 0x48
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2201      	moveq	r2, #1
 8005e00:	2200      	movne	r2, #0
 8005e02:	4543      	cmp	r3, r8
 8005e04:	bf08      	it	eq
 8005e06:	f042 0201 	orreq.w	r2, r2, #1
 8005e0a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8005e0e:	454b      	cmp	r3, r9
 8005e10:	bf08      	it	eq
 8005e12:	f042 0201 	orreq.w	r2, r2, #1
 8005e16:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8005e1a:	4543      	cmp	r3, r8
 8005e1c:	bf08      	it	eq
 8005e1e:	f042 0201 	orreq.w	r2, r2, #1
 8005e22:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8005e26:	454b      	cmp	r3, r9
 8005e28:	bf08      	it	eq
 8005e2a:	f042 0201 	orreq.w	r2, r2, #1
 8005e2e:	f509 795c 	add.w	r9, r9, #880	; 0x370
 8005e32:	4543      	cmp	r3, r8
 8005e34:	bf08      	it	eq
 8005e36:	f042 0201 	orreq.w	r2, r2, #1
 8005e3a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8005e3e:	454b      	cmp	r3, r9
 8005e40:	bf08      	it	eq
 8005e42:	f042 0201 	orreq.w	r2, r2, #1
 8005e46:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8005e4a:	4543      	cmp	r3, r8
 8005e4c:	bf08      	it	eq
 8005e4e:	f042 0201 	orreq.w	r2, r2, #1
 8005e52:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8005e56:	454b      	cmp	r3, r9
 8005e58:	bf08      	it	eq
 8005e5a:	f042 0201 	orreq.w	r2, r2, #1
 8005e5e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8005e62:	4543      	cmp	r3, r8
 8005e64:	bf08      	it	eq
 8005e66:	f042 0201 	orreq.w	r2, r2, #1
 8005e6a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8005e6e:	454b      	cmp	r3, r9
 8005e70:	bf08      	it	eq
 8005e72:	f042 0201 	orreq.w	r2, r2, #1
 8005e76:	4543      	cmp	r3, r8
 8005e78:	bf08      	it	eq
 8005e7a:	f042 0201 	orreq.w	r2, r2, #1
 8005e7e:	b91a      	cbnz	r2, 8005e88 <HAL_DMA_IRQHandler+0x1a8>
 8005e80:	4a3c      	ldr	r2, [pc, #240]	; (8005f74 <HAL_DMA_IRQHandler+0x294>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	f040 822f 	bne.w	80062e6 <HAL_DMA_IRQHandler+0x606>
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	0792      	lsls	r2, r2, #30
 8005e8c:	d506      	bpl.n	8005e9c <HAL_DMA_IRQHandler+0x1bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e8e:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e90:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8005e94:	f042 0204 	orr.w	r2, r2, #4
 8005e98:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e9c:	2210      	movs	r2, #16
 8005e9e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8005ea2:	ea1c 0f07 	tst.w	ip, r7
 8005ea6:	d06f      	beq.n	8005f88 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	d146      	bne.n	8005f3a <HAL_DMA_IRQHandler+0x25a>
 8005eac:	4a32      	ldr	r2, [pc, #200]	; (8005f78 <HAL_DMA_IRQHandler+0x298>)
 8005eae:	4833      	ldr	r0, [pc, #204]	; (8005f7c <HAL_DMA_IRQHandler+0x29c>)
 8005eb0:	4e2f      	ldr	r6, [pc, #188]	; (8005f70 <HAL_DMA_IRQHandler+0x290>)
 8005eb2:	4283      	cmp	r3, r0
 8005eb4:	bf18      	it	ne
 8005eb6:	4293      	cmpne	r3, r2
 8005eb8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2201      	moveq	r2, #1
 8005ec0:	2200      	movne	r2, #0
 8005ec2:	42b3      	cmp	r3, r6
 8005ec4:	bf08      	it	eq
 8005ec6:	f042 0201 	orreq.w	r2, r2, #1
 8005eca:	3630      	adds	r6, #48	; 0x30
 8005ecc:	4283      	cmp	r3, r0
 8005ece:	bf08      	it	eq
 8005ed0:	f042 0201 	orreq.w	r2, r2, #1
 8005ed4:	3030      	adds	r0, #48	; 0x30
 8005ed6:	42b3      	cmp	r3, r6
 8005ed8:	bf08      	it	eq
 8005eda:	f042 0201 	orreq.w	r2, r2, #1
 8005ede:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	bf08      	it	eq
 8005ee6:	f042 0201 	orreq.w	r2, r2, #1
 8005eea:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005eee:	42b3      	cmp	r3, r6
 8005ef0:	bf08      	it	eq
 8005ef2:	f042 0201 	orreq.w	r2, r2, #1
 8005ef6:	3630      	adds	r6, #48	; 0x30
 8005ef8:	4283      	cmp	r3, r0
 8005efa:	bf08      	it	eq
 8005efc:	f042 0201 	orreq.w	r2, r2, #1
 8005f00:	3030      	adds	r0, #48	; 0x30
 8005f02:	42b3      	cmp	r3, r6
 8005f04:	bf08      	it	eq
 8005f06:	f042 0201 	orreq.w	r2, r2, #1
 8005f0a:	3630      	adds	r6, #48	; 0x30
 8005f0c:	4283      	cmp	r3, r0
 8005f0e:	bf08      	it	eq
 8005f10:	f042 0201 	orreq.w	r2, r2, #1
 8005f14:	3030      	adds	r0, #48	; 0x30
 8005f16:	42b3      	cmp	r3, r6
 8005f18:	bf08      	it	eq
 8005f1a:	f042 0201 	orreq.w	r2, r2, #1
 8005f1e:	3630      	adds	r6, #48	; 0x30
 8005f20:	4283      	cmp	r3, r0
 8005f22:	bf08      	it	eq
 8005f24:	f042 0201 	orreq.w	r2, r2, #1
 8005f28:	42b3      	cmp	r3, r6
 8005f2a:	bf08      	it	eq
 8005f2c:	f042 0201 	orreq.w	r2, r2, #1
 8005f30:	b91a      	cbnz	r2, 8005f3a <HAL_DMA_IRQHandler+0x25a>
 8005f32:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <HAL_DMA_IRQHandler+0x294>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	f040 81de 	bne.w	80062f6 <HAL_DMA_IRQHandler+0x616>
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8005f40:	b312      	cbz	r2, 8005f88 <HAL_DMA_IRQHandler+0x2a8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f42:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	0352      	lsls	r2, r2, #13
 8005f4a:	f100 818b 	bmi.w	8006264 <HAL_DMA_IRQHandler+0x584>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	05d6      	lsls	r6, r2, #23
 8005f52:	d403      	bmi.n	8005f5c <HAL_DMA_IRQHandler+0x27c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	f022 0208 	bic.w	r2, r2, #8
 8005f5a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005f5c:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8005f60:	b193      	cbz	r3, 8005f88 <HAL_DMA_IRQHandler+0x2a8>
 8005f62:	e00d      	b.n	8005f80 <HAL_DMA_IRQHandler+0x2a0>
 8005f64:	40020028 	.word	0x40020028
 8005f68:	40020010 	.word	0x40020010
 8005f6c:	240001f4 	.word	0x240001f4
 8005f70:	40020070 	.word	0x40020070
 8005f74:	400204b8 	.word	0x400204b8
 8005f78:	40020058 	.word	0x40020058
 8005f7c:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8005f80:	4650      	mov	r0, sl
 8005f82:	4798      	blx	r3
 8005f84:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f88:	f001 011f 	and.w	r1, r1, #31
 8005f8c:	2620      	movs	r6, #32
 8005f8e:	408e      	lsls	r6, r1
 8005f90:	423e      	tst	r6, r7
 8005f92:	d06a      	beq.n	800606a <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f94:	f8da 2000 	ldr.w	r2, [sl]
 8005f98:	4ba7      	ldr	r3, [pc, #668]	; (8006238 <HAL_DMA_IRQHandler+0x558>)
 8005f9a:	48a8      	ldr	r0, [pc, #672]	; (800623c <HAL_DMA_IRQHandler+0x55c>)
 8005f9c:	4fa8      	ldr	r7, [pc, #672]	; (8006240 <HAL_DMA_IRQHandler+0x560>)
 8005f9e:	4282      	cmp	r2, r0
 8005fa0:	bf18      	it	ne
 8005fa2:	429a      	cmpne	r2, r3
 8005fa4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005fa8:	bf0c      	ite	eq
 8005faa:	2301      	moveq	r3, #1
 8005fac:	2300      	movne	r3, #0
 8005fae:	42ba      	cmp	r2, r7
 8005fb0:	bf08      	it	eq
 8005fb2:	f043 0301 	orreq.w	r3, r3, #1
 8005fb6:	3730      	adds	r7, #48	; 0x30
 8005fb8:	4282      	cmp	r2, r0
 8005fba:	bf08      	it	eq
 8005fbc:	f043 0301 	orreq.w	r3, r3, #1
 8005fc0:	3030      	adds	r0, #48	; 0x30
 8005fc2:	42ba      	cmp	r2, r7
 8005fc4:	bf08      	it	eq
 8005fc6:	f043 0301 	orreq.w	r3, r3, #1
 8005fca:	3730      	adds	r7, #48	; 0x30
 8005fcc:	4282      	cmp	r2, r0
 8005fce:	bf08      	it	eq
 8005fd0:	f043 0301 	orreq.w	r3, r3, #1
 8005fd4:	3030      	adds	r0, #48	; 0x30
 8005fd6:	42ba      	cmp	r2, r7
 8005fd8:	bf08      	it	eq
 8005fda:	f043 0301 	orreq.w	r3, r3, #1
 8005fde:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005fe2:	4282      	cmp	r2, r0
 8005fe4:	bf08      	it	eq
 8005fe6:	f043 0301 	orreq.w	r3, r3, #1
 8005fea:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005fee:	42ba      	cmp	r2, r7
 8005ff0:	bf08      	it	eq
 8005ff2:	f043 0301 	orreq.w	r3, r3, #1
 8005ff6:	3730      	adds	r7, #48	; 0x30
 8005ff8:	4282      	cmp	r2, r0
 8005ffa:	bf08      	it	eq
 8005ffc:	f043 0301 	orreq.w	r3, r3, #1
 8006000:	3030      	adds	r0, #48	; 0x30
 8006002:	42ba      	cmp	r2, r7
 8006004:	bf08      	it	eq
 8006006:	f043 0301 	orreq.w	r3, r3, #1
 800600a:	3730      	adds	r7, #48	; 0x30
 800600c:	4282      	cmp	r2, r0
 800600e:	bf08      	it	eq
 8006010:	f043 0301 	orreq.w	r3, r3, #1
 8006014:	3030      	adds	r0, #48	; 0x30
 8006016:	42ba      	cmp	r2, r7
 8006018:	bf08      	it	eq
 800601a:	f043 0301 	orreq.w	r3, r3, #1
 800601e:	3730      	adds	r7, #48	; 0x30
 8006020:	4282      	cmp	r2, r0
 8006022:	bf08      	it	eq
 8006024:	f043 0301 	orreq.w	r3, r3, #1
 8006028:	42ba      	cmp	r2, r7
 800602a:	bf08      	it	eq
 800602c:	f043 0301 	orreq.w	r3, r3, #1
 8006030:	b91b      	cbnz	r3, 800603a <HAL_DMA_IRQHandler+0x35a>
 8006032:	4b84      	ldr	r3, [pc, #528]	; (8006244 <HAL_DMA_IRQHandler+0x564>)
 8006034:	429a      	cmp	r2, r3
 8006036:	f040 8173 	bne.w	8006320 <HAL_DMA_IRQHandler+0x640>
 800603a:	6813      	ldr	r3, [r2, #0]
 800603c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006040:	b19b      	cbz	r3, 800606a <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006042:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006044:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 8006048:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800604a:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800604c:	f000 8114 	beq.w	8006278 <HAL_DMA_IRQHandler+0x598>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006050:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006054:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006056:	f000 812d 	beq.w	80062b4 <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800605a:	031c      	lsls	r4, r3, #12
 800605c:	f140 8138 	bpl.w	80062d0 <HAL_DMA_IRQHandler+0x5f0>
          if(hdma->XferCpltCallback != NULL)
 8006060:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8006064:	b10b      	cbz	r3, 800606a <HAL_DMA_IRQHandler+0x38a>
            hdma->XferCpltCallback(hdma);
 8006066:	4650      	mov	r0, sl
 8006068:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800606a:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80df 	beq.w	8006232 <HAL_DMA_IRQHandler+0x552>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006074:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8006078:	07d8      	lsls	r0, r3, #31
 800607a:	d51f      	bpl.n	80060bc <HAL_DMA_IRQHandler+0x3dc>
        __HAL_DMA_DISABLE(hdma);
 800607c:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 8006080:	2404      	movs	r4, #4
 8006082:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8006086:	6813      	ldr	r3, [r2, #0]
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800608e:	4b6e      	ldr	r3, [pc, #440]	; (8006248 <HAL_DMA_IRQHandler+0x568>)
 8006090:	fba3 3505 	umull	r3, r5, r3, r5
 8006094:	0aad      	lsrs	r5, r5, #10
 8006096:	e002      	b.n	800609e <HAL_DMA_IRQHandler+0x3be>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006098:	6813      	ldr	r3, [r2, #0]
 800609a:	07d9      	lsls	r1, r3, #31
 800609c:	d504      	bpl.n	80060a8 <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 800609e:	9b01      	ldr	r3, [sp, #4]
 80060a0:	3301      	adds	r3, #1
 80060a2:	42ab      	cmp	r3, r5
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	d9f7      	bls.n	8006098 <HAL_DMA_IRQHandler+0x3b8>
        __HAL_UNLOCK(hdma);
 80060a8:	2300      	movs	r3, #0
 80060aa:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060ae:	6813      	ldr	r3, [r2, #0]
 80060b0:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80060b2:	bf4c      	ite	mi
 80060b4:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80060b6:	2301      	movpl	r3, #1
 80060b8:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80060bc:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80b6 	beq.w	8006232 <HAL_DMA_IRQHandler+0x552>
        hdma->XferErrorCallback(hdma);
 80060c6:	4650      	mov	r0, sl
}
 80060c8:	b002      	add	sp, #8
 80060ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 80060ce:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	0740      	lsls	r0, r0, #29
 80060d4:	d50a      	bpl.n	80060ec <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	f020 0004 	bic.w	r0, r0, #4
 80060dc:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060de:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060e0:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060ec:	fa27 f20c 	lsr.w	r2, r7, ip
 80060f0:	07d2      	lsls	r2, r2, #31
 80060f2:	f57f ae71 	bpl.w	8005dd8 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80060f6:	4a55      	ldr	r2, [pc, #340]	; (800624c <HAL_DMA_IRQHandler+0x56c>)
 80060f8:	4851      	ldr	r0, [pc, #324]	; (8006240 <HAL_DMA_IRQHandler+0x560>)
 80060fa:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8006260 <HAL_DMA_IRQHandler+0x580>
 80060fe:	4283      	cmp	r3, r0
 8006100:	bf18      	it	ne
 8006102:	4293      	cmpne	r3, r2
 8006104:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006108:	bf0c      	ite	eq
 800610a:	2201      	moveq	r2, #1
 800610c:	2200      	movne	r2, #0
 800610e:	4543      	cmp	r3, r8
 8006110:	bf08      	it	eq
 8006112:	f042 0201 	orreq.w	r2, r2, #1
 8006116:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800611a:	4283      	cmp	r3, r0
 800611c:	bf08      	it	eq
 800611e:	f042 0201 	orreq.w	r2, r2, #1
 8006122:	3030      	adds	r0, #48	; 0x30
 8006124:	4543      	cmp	r3, r8
 8006126:	bf08      	it	eq
 8006128:	f042 0201 	orreq.w	r2, r2, #1
 800612c:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8006130:	4283      	cmp	r3, r0
 8006132:	bf08      	it	eq
 8006134:	f042 0201 	orreq.w	r2, r2, #1
 8006138:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800613c:	4543      	cmp	r3, r8
 800613e:	bf08      	it	eq
 8006140:	f042 0201 	orreq.w	r2, r2, #1
 8006144:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006148:	4283      	cmp	r3, r0
 800614a:	bf08      	it	eq
 800614c:	f042 0201 	orreq.w	r2, r2, #1
 8006150:	3030      	adds	r0, #48	; 0x30
 8006152:	4543      	cmp	r3, r8
 8006154:	bf08      	it	eq
 8006156:	f042 0201 	orreq.w	r2, r2, #1
 800615a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800615e:	4283      	cmp	r3, r0
 8006160:	bf08      	it	eq
 8006162:	f042 0201 	orreq.w	r2, r2, #1
 8006166:	3030      	adds	r0, #48	; 0x30
 8006168:	4543      	cmp	r3, r8
 800616a:	bf08      	it	eq
 800616c:	f042 0201 	orreq.w	r2, r2, #1
 8006170:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006174:	4283      	cmp	r3, r0
 8006176:	bf08      	it	eq
 8006178:	f042 0201 	orreq.w	r2, r2, #1
 800617c:	3030      	adds	r0, #48	; 0x30
 800617e:	4543      	cmp	r3, r8
 8006180:	bf08      	it	eq
 8006182:	f042 0201 	orreq.w	r2, r2, #1
 8006186:	4283      	cmp	r3, r0
 8006188:	bf08      	it	eq
 800618a:	f042 0201 	orreq.w	r2, r2, #1
 800618e:	2a00      	cmp	r2, #0
 8006190:	f47f ae15 	bne.w	8005dbe <HAL_DMA_IRQHandler+0xde>
 8006194:	2e00      	cmp	r6, #0
 8006196:	f47f ae12 	bne.w	8005dbe <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800619a:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800619c:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800619e:	fa02 f20c 	lsl.w	r2, r2, ip
 80061a2:	423a      	tst	r2, r7
 80061a4:	f040 809f 	bne.w	80062e6 <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061a8:	2210      	movs	r2, #16
 80061aa:	fa02 fc0c 	lsl.w	ip, r2, ip
 80061ae:	ea17 0f0c 	tst.w	r7, ip
 80061b2:	f43f aee9 	beq.w	8005f88 <HAL_DMA_IRQHandler+0x2a8>
 80061b6:	e679      	b.n	8005eac <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80061b8:	4a25      	ldr	r2, [pc, #148]	; (8006250 <HAL_DMA_IRQHandler+0x570>)
 80061ba:	4e26      	ldr	r6, [pc, #152]	; (8006254 <HAL_DMA_IRQHandler+0x574>)
 80061bc:	4d26      	ldr	r5, [pc, #152]	; (8006258 <HAL_DMA_IRQHandler+0x578>)
 80061be:	42b3      	cmp	r3, r6
 80061c0:	bf18      	it	ne
 80061c2:	4293      	cmpne	r3, r2
 80061c4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80061c8:	bf0c      	ite	eq
 80061ca:	2201      	moveq	r2, #1
 80061cc:	2200      	movne	r2, #0
 80061ce:	42ab      	cmp	r3, r5
 80061d0:	bf08      	it	eq
 80061d2:	f042 0201 	orreq.w	r2, r2, #1
 80061d6:	3528      	adds	r5, #40	; 0x28
 80061d8:	42b3      	cmp	r3, r6
 80061da:	bf08      	it	eq
 80061dc:	f042 0201 	orreq.w	r2, r2, #1
 80061e0:	3628      	adds	r6, #40	; 0x28
 80061e2:	42ab      	cmp	r3, r5
 80061e4:	bf08      	it	eq
 80061e6:	f042 0201 	orreq.w	r2, r2, #1
 80061ea:	3528      	adds	r5, #40	; 0x28
 80061ec:	42b3      	cmp	r3, r6
 80061ee:	bf08      	it	eq
 80061f0:	f042 0201 	orreq.w	r2, r2, #1
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	bf08      	it	eq
 80061f8:	f042 0201 	orreq.w	r2, r2, #1
 80061fc:	b912      	cbnz	r2, 8006204 <HAL_DMA_IRQHandler+0x524>
 80061fe:	4a17      	ldr	r2, [pc, #92]	; (800625c <HAL_DMA_IRQHandler+0x57c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d116      	bne.n	8006232 <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006204:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 8006208:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800620a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800620c:	f005 051f 	and.w	r5, r5, #31
 8006210:	40ae      	lsls	r6, r5
 8006212:	420e      	tst	r6, r1
 8006214:	d073      	beq.n	80062fe <HAL_DMA_IRQHandler+0x61e>
 8006216:	0757      	lsls	r7, r2, #29
 8006218:	d571      	bpl.n	80062fe <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800621a:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800621c:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800621e:	f140 809f 	bpl.w	8006360 <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006222:	03d1      	lsls	r1, r2, #15
 8006224:	f100 80a2 	bmi.w	800636c <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006228:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800622c:	2b00      	cmp	r3, #0
 800622e:	f47f af4a 	bne.w	80060c6 <HAL_DMA_IRQHandler+0x3e6>
}
 8006232:	b002      	add	sp, #8
 8006234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006238:	40020010 	.word	0x40020010
 800623c:	40020028 	.word	0x40020028
 8006240:	40020040 	.word	0x40020040
 8006244:	400204b8 	.word	0x400204b8
 8006248:	1b4e81b5 	.word	0x1b4e81b5
 800624c:	40020058 	.word	0x40020058
 8006250:	58025408 	.word	0x58025408
 8006254:	5802541c 	.word	0x5802541c
 8006258:	58025430 	.word	0x58025430
 800625c:	58025494 	.word	0x58025494
 8006260:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	031b      	lsls	r3, r3, #12
 8006268:	f57f ae78 	bpl.w	8005f5c <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800626c:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8006270:	2b00      	cmp	r3, #0
 8006272:	f47f ae85 	bne.w	8005f80 <HAL_DMA_IRQHandler+0x2a0>
 8006276:	e687      	b.n	8005f88 <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006278:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800627c:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006280:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006282:	6953      	ldr	r3, [r2, #20]
 8006284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006288:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800628a:	b33d      	cbz	r5, 80062dc <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800628c:	6813      	ldr	r3, [r2, #0]
 800628e:	f023 0308 	bic.w	r3, r3, #8
 8006292:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006294:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8006296:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 8006298:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800629a:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800629e:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062a2:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 80062a4:	f88a 5034 	strb.w	r5, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80062a8:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f47f af0a 	bne.w	80060c6 <HAL_DMA_IRQHandler+0x3e6>
 80062b2:	e7be      	b.n	8006232 <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062b4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80062b8:	f47f aed2 	bne.w	8006060 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80062bc:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80062be:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80062c0:	f021 0110 	bic.w	r1, r1, #16
 80062c4:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 80062c6:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80062ca:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
 80062ce:	e6c7      	b.n	8006060 <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 80062d0:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f47f aec6 	bne.w	8006066 <HAL_DMA_IRQHandler+0x386>
 80062da:	e6c6      	b.n	800606a <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062dc:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1d3      	bne.n	800628c <HAL_DMA_IRQHandler+0x5ac>
 80062e4:	e7d6      	b.n	8006294 <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062e6:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062e8:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ea:	fa02 fc0c 	lsl.w	ip, r2, ip
 80062ee:	ea17 0f0c 	tst.w	r7, ip
 80062f2:	f43f ae49 	beq.w	8005f88 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80062fc:	e620      	b.n	8005f40 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80062fe:	2602      	movs	r6, #2
 8006300:	40ae      	lsls	r6, r5
 8006302:	420e      	tst	r6, r1
 8006304:	d010      	beq.n	8006328 <HAL_DMA_IRQHandler+0x648>
 8006306:	0797      	lsls	r7, r2, #30
 8006308:	d50e      	bpl.n	8006328 <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800630a:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800630c:	0414      	lsls	r4, r2, #16
 800630e:	d533      	bpl.n	8006378 <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006310:	03d0      	lsls	r0, r2, #15
 8006312:	d43d      	bmi.n	8006390 <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 8006314:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8006318:	2b00      	cmp	r3, #0
 800631a:	f47f aed4 	bne.w	80060c6 <HAL_DMA_IRQHandler+0x3e6>
 800631e:	e788      	b.n	8006232 <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006320:	6813      	ldr	r3, [r2, #0]
 8006322:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006326:	e68b      	b.n	8006040 <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006328:	2608      	movs	r6, #8
 800632a:	40ae      	lsls	r6, r5
 800632c:	420e      	tst	r6, r1
 800632e:	d080      	beq.n	8006232 <HAL_DMA_IRQHandler+0x552>
 8006330:	0711      	lsls	r1, r2, #28
 8006332:	f57f af7e 	bpl.w	8006232 <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006336:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006338:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800633a:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800633c:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006340:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006344:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8006346:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800634a:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800634c:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8006350:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8006354:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8006358:	2b00      	cmp	r3, #0
 800635a:	f47f aeb4 	bne.w	80060c6 <HAL_DMA_IRQHandler+0x3e6>
 800635e:	e768      	b.n	8006232 <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006360:	0692      	lsls	r2, r2, #26
 8006362:	d403      	bmi.n	800636c <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	f022 0204 	bic.w	r2, r2, #4
 800636a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800636c:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	f47f aea8 	bne.w	80060c6 <HAL_DMA_IRQHandler+0x3e6>
 8006376:	e75c      	b.n	8006232 <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006378:	f012 0220 	ands.w	r2, r2, #32
 800637c:	d108      	bne.n	8006390 <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800637e:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006380:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006382:	f021 010a 	bic.w	r1, r1, #10
 8006386:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8006388:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800638c:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8006390:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8006394:	2b00      	cmp	r3, #0
 8006396:	f47f ae96 	bne.w	80060c6 <HAL_DMA_IRQHandler+0x3e6>
 800639a:	e74a      	b.n	8006232 <HAL_DMA_IRQHandler+0x552>

0800639c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800639c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063a0:	680e      	ldr	r6, [r1, #0]
{
 80063a2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063a4:	2e00      	cmp	r6, #0
 80063a6:	f000 80d3 	beq.w	8006550 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 80063aa:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ac:	f8df a220 	ldr.w	sl, [pc, #544]	; 80065d0 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80063b0:	f8df b220 	ldr.w	fp, [pc, #544]	; 80065d4 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80063b4:	46b1      	mov	r9, r6
 80063b6:	e020      	b.n	80063fa <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 80063b8:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063ba:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063be:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063c2:	f04f 0e0f 	mov.w	lr, #15
 80063c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063ca:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063d0:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 80063d4:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063d6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063da:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063de:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063e2:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 80063e6:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 80063e8:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063ea:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063ec:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 80063ee:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 80063f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063f2:	fa39 f203 	lsrs.w	r2, r9, r3
 80063f6:	f000 80ab 	beq.w	8006550 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80063fa:	2201      	movs	r2, #1
 80063fc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80063fe:	ea12 0809 	ands.w	r8, r2, r9
 8006402:	d0f5      	beq.n	80063f0 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006404:	684c      	ldr	r4, [r1, #4]
 8006406:	005f      	lsls	r7, r3, #1
 8006408:	f024 0c10 	bic.w	ip, r4, #16
 800640c:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006410:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006412:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006416:	f200 809e 	bhi.w	8006556 <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800641a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 800641e:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006422:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006424:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006426:	ea2e 0e05 	bic.w	lr, lr, r5
 800642a:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800642c:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800642e:	68ce      	ldr	r6, [r1, #12]
 8006430:	40be      	lsls	r6, r7
 8006432:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006436:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8006438:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800643c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006440:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006444:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8006446:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8006448:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800644a:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800644e:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006450:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006454:	fa02 f207 	lsl.w	r2, r2, r7
 8006458:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 800645c:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800645e:	d0ab      	beq.n	80063b8 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8006460:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006462:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006466:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006468:	fa02 f707 	lsl.w	r7, r2, r7
 800646c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800646e:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006470:	00e6      	lsls	r6, r4, #3
 8006472:	d5bd      	bpl.n	80063f0 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006474:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8006478:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800647c:	f003 0203 	and.w	r2, r3, #3
 8006480:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006482:	f046 0602 	orr.w	r6, r6, #2
 8006486:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800648a:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800648c:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8006490:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006494:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006498:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800649c:	f006 0602 	and.w	r6, r6, #2
 80064a0:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064a2:	4e42      	ldr	r6, [pc, #264]	; (80065ac <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064a4:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064a6:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80064a8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064aa:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064ae:	d020      	beq.n	80064f2 <HAL_GPIO_Init+0x156>
 80064b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80064b4:	42b0      	cmp	r0, r6
 80064b6:	d056      	beq.n	8006566 <HAL_GPIO_Init+0x1ca>
 80064b8:	4e3d      	ldr	r6, [pc, #244]	; (80065b0 <HAL_GPIO_Init+0x214>)
 80064ba:	42b0      	cmp	r0, r6
 80064bc:	d058      	beq.n	8006570 <HAL_GPIO_Init+0x1d4>
 80064be:	4e3d      	ldr	r6, [pc, #244]	; (80065b4 <HAL_GPIO_Init+0x218>)
 80064c0:	42b0      	cmp	r0, r6
 80064c2:	d04b      	beq.n	800655c <HAL_GPIO_Init+0x1c0>
 80064c4:	4e3c      	ldr	r6, [pc, #240]	; (80065b8 <HAL_GPIO_Init+0x21c>)
 80064c6:	42b0      	cmp	r0, r6
 80064c8:	d05c      	beq.n	8006584 <HAL_GPIO_Init+0x1e8>
 80064ca:	4e3c      	ldr	r6, [pc, #240]	; (80065bc <HAL_GPIO_Init+0x220>)
 80064cc:	42b0      	cmp	r0, r6
 80064ce:	d05e      	beq.n	800658e <HAL_GPIO_Init+0x1f2>
 80064d0:	4e3b      	ldr	r6, [pc, #236]	; (80065c0 <HAL_GPIO_Init+0x224>)
 80064d2:	42b0      	cmp	r0, r6
 80064d4:	d051      	beq.n	800657a <HAL_GPIO_Init+0x1de>
 80064d6:	4e3b      	ldr	r6, [pc, #236]	; (80065c4 <HAL_GPIO_Init+0x228>)
 80064d8:	42b0      	cmp	r0, r6
 80064da:	d05d      	beq.n	8006598 <HAL_GPIO_Init+0x1fc>
 80064dc:	4e3a      	ldr	r6, [pc, #232]	; (80065c8 <HAL_GPIO_Init+0x22c>)
 80064de:	42b0      	cmp	r0, r6
 80064e0:	d05f      	beq.n	80065a2 <HAL_GPIO_Init+0x206>
 80064e2:	4e3a      	ldr	r6, [pc, #232]	; (80065cc <HAL_GPIO_Init+0x230>)
 80064e4:	42b0      	cmp	r0, r6
 80064e6:	bf0c      	ite	eq
 80064e8:	2609      	moveq	r6, #9
 80064ea:	260a      	movne	r6, #10
 80064ec:	fa06 f202 	lsl.w	r2, r6, r2
 80064f0:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064f2:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80064f4:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 80064f8:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064fc:	03e5      	lsls	r5, r4, #15
    position++;
 80064fe:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8006502:	bf54      	ite	pl
 8006504:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8006506:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800650a:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800650e:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8006510:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8006514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8006518:	bf54      	ite	pl
 800651a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800651c:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006520:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8006522:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8006526:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8006528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800652c:	bf54      	ite	pl
 800652e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8006530:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006534:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8006536:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800653a:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 800653c:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800653e:	bf54      	ite	pl
 8006540:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8006542:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8006546:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006548:	fa39 f203 	lsrs.w	r2, r9, r3
 800654c:	f47f af55 	bne.w	80063fa <HAL_GPIO_Init+0x5e>
  }
}
 8006550:	b005      	add	sp, #20
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	40bd      	lsls	r5, r7
 8006558:	43ed      	mvns	r5, r5
 800655a:	e775      	b.n	8006448 <HAL_GPIO_Init+0xac>
 800655c:	2603      	movs	r6, #3
 800655e:	fa06 f202 	lsl.w	r2, r6, r2
 8006562:	4315      	orrs	r5, r2
 8006564:	e7c5      	b.n	80064f2 <HAL_GPIO_Init+0x156>
 8006566:	2601      	movs	r6, #1
 8006568:	fa06 f202 	lsl.w	r2, r6, r2
 800656c:	4315      	orrs	r5, r2
 800656e:	e7c0      	b.n	80064f2 <HAL_GPIO_Init+0x156>
 8006570:	2602      	movs	r6, #2
 8006572:	fa06 f202 	lsl.w	r2, r6, r2
 8006576:	4315      	orrs	r5, r2
 8006578:	e7bb      	b.n	80064f2 <HAL_GPIO_Init+0x156>
 800657a:	2606      	movs	r6, #6
 800657c:	fa06 f202 	lsl.w	r2, r6, r2
 8006580:	4315      	orrs	r5, r2
 8006582:	e7b6      	b.n	80064f2 <HAL_GPIO_Init+0x156>
 8006584:	2604      	movs	r6, #4
 8006586:	fa06 f202 	lsl.w	r2, r6, r2
 800658a:	4315      	orrs	r5, r2
 800658c:	e7b1      	b.n	80064f2 <HAL_GPIO_Init+0x156>
 800658e:	2605      	movs	r6, #5
 8006590:	fa06 f202 	lsl.w	r2, r6, r2
 8006594:	4315      	orrs	r5, r2
 8006596:	e7ac      	b.n	80064f2 <HAL_GPIO_Init+0x156>
 8006598:	2607      	movs	r6, #7
 800659a:	fa06 f202 	lsl.w	r2, r6, r2
 800659e:	4315      	orrs	r5, r2
 80065a0:	e7a7      	b.n	80064f2 <HAL_GPIO_Init+0x156>
 80065a2:	2608      	movs	r6, #8
 80065a4:	fa06 f202 	lsl.w	r2, r6, r2
 80065a8:	4315      	orrs	r5, r2
 80065aa:	e7a2      	b.n	80064f2 <HAL_GPIO_Init+0x156>
 80065ac:	58020000 	.word	0x58020000
 80065b0:	58020800 	.word	0x58020800
 80065b4:	58020c00 	.word	0x58020c00
 80065b8:	58021000 	.word	0x58021000
 80065bc:	58021400 	.word	0x58021400
 80065c0:	58021800 	.word	0x58021800
 80065c4:	58021c00 	.word	0x58021c00
 80065c8:	58022000 	.word	0x58022000
 80065cc:	58022400 	.word	0x58022400
 80065d0:	58024400 	.word	0x58024400
 80065d4:	58000080 	.word	0x58000080

080065d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065d8:	b902      	cbnz	r2, 80065dc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80065da:	0409      	lsls	r1, r1, #16
 80065dc:	6181      	str	r1, [r0, #24]
  }
}
 80065de:	4770      	bx	lr

080065e0 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80065e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065e4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80065e8:	4201      	tst	r1, r0
 80065ea:	d100      	bne.n	80065ee <HAL_GPIO_EXTI_IRQHandler+0xe>
 80065ec:	4770      	bx	lr
{
 80065ee:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065f0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065f4:	f7fa fc18 	bl	8000e28 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80065f8:	bd08      	pop	{r3, pc}
 80065fa:	bf00      	nop

080065fc <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d061      	beq.n	80066c4 <HAL_LPTIM_Init+0xc8>
{
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006602:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8006606:	4604      	mov	r4, r0
 8006608:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800660c:	2b00      	cmp	r3, #0
 800660e:	d054      	beq.n	80066ba <HAL_LPTIM_Init+0xbe>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006610:	2302      	movs	r3, #2
 8006612:	6aa5      	ldr	r5, [r4, #40]	; 0x28

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8006614:	e9d4 1700 	ldrd	r1, r7, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006618:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 800661c:	2f01      	cmp	r7, #1
  tmpcfgr = hlptim->Instance->CFGR;
 800661e:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8006620:	d03f      	beq.n	80066a2 <HAL_LPTIM_Init+0xa6>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006622:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 8006626:	d03c      	beq.n	80066a2 <HAL_LPTIM_Init+0xa6>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006628:	6962      	ldr	r2, [r4, #20]
 800662a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800662e:	429a      	cmp	r2, r3
 8006630:	d003      	beq.n	800663a <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8006632:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8006636:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800663a:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 800663c:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800663e:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8006640:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80066e4 <HAL_LPTIM_Init+0xe8>
              hlptim->Init.Clock.Prescaler |
 8006644:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 8006646:	6a66      	ldr	r6, [r4, #36]	; 0x24
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8006648:	ea0c 0c00 	and.w	ip, ip, r0
              hlptim->Init.OutputPolarity  |
 800664c:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 800664e:	432b      	orrs	r3, r5
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006650:	ea43 030c 	orr.w	r3, r3, ip
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8006654:	b1ef      	cbz	r7, 8006692 <HAL_LPTIM_Init+0x96>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8006656:	2f01      	cmp	r7, #1
 8006658:	d11f      	bne.n	800669a <HAL_LPTIM_Init+0x9e>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800665a:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 800665e:	4328      	orrs	r0, r5
 8006660:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006662:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006666:	4282      	cmp	r2, r0
 8006668:	d004      	beq.n	8006674 <HAL_LPTIM_Init+0x78>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
                hlptim->Init.Trigger.ActiveEdge |
 800666a:	e9d4 5006 	ldrd	r5, r0, [r4, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800666e:	432a      	orrs	r2, r5
                hlptim->Init.Trigger.ActiveEdge |
 8006670:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006672:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8006674:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <HAL_LPTIM_Init+0xdc>)
  hlptim->Instance->CFGR = tmpcfgr;
 8006676:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8006678:	4291      	cmp	r1, r2
 800667a:	d015      	beq.n	80066a8 <HAL_LPTIM_Init+0xac>
 800667c:	4b17      	ldr	r3, [pc, #92]	; (80066dc <HAL_LPTIM_Init+0xe0>)
 800667e:	4299      	cmp	r1, r3
 8006680:	d012      	beq.n	80066a8 <HAL_LPTIM_Init+0xac>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8006682:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <HAL_LPTIM_Init+0xe4>)
 8006684:	4299      	cmp	r1, r3
 8006686:	d01f      	beq.n	80066c8 <HAL_LPTIM_Init+0xcc>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006688:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800668a:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800668c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8006690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006692:	69e0      	ldr	r0, [r4, #28]
 8006694:	6926      	ldr	r6, [r4, #16]
 8006696:	4330      	orrs	r0, r6
 8006698:	4303      	orrs	r3, r0
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800669a:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 800669e:	d1e0      	bne.n	8006662 <HAL_LPTIM_Init+0x66>
 80066a0:	e7db      	b.n	800665a <HAL_LPTIM_Init+0x5e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80066a2:	f020 001e 	bic.w	r0, r0, #30
 80066a6:	e7bf      	b.n	8006628 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80066a8:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 80066ac:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80066ae:	4313      	orrs	r3, r2
 80066b0:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80066b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 80066ba:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 80066be:	f7fc fd4d 	bl	800315c <HAL_LPTIM_MspInit>
 80066c2:	e7a5      	b.n	8006610 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 80066c4:	2001      	movs	r0, #1
}
 80066c6:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80066c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80066ca:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80066cc:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80066d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40002400 	.word	0x40002400
 80066dc:	58002400 	.word	0x58002400
 80066e0:	58002800 	.word	0x58002800
 80066e4:	ff19f1fe 	.word	0xff19f1fe

080066e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ea:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066ec:	2800      	cmp	r0, #0
 80066ee:	f000 8088 	beq.w	8006802 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066f2:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80066f6:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 80066f8:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d079      	beq.n	80067f6 <HAL_PCD_Init+0x10e>
 8006702:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006704:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006706:	462e      	mov	r6, r5
 8006708:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800670a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800670e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006710:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006712:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8006716:	bf08      	it	eq
 8006718:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800671a:	f003 fea9 	bl	800a470 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800671e:	f856 eb10 	ldr.w	lr, [r6], #16
 8006722:	46b4      	mov	ip, r6
 8006724:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800672a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800672e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006730:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8006734:	e884 0003 	stmia.w	r4, {r0, r1}
 8006738:	4670      	mov	r0, lr
 800673a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800673e:	f003 fd9f 	bl	800a280 <USB_CoreInit>
 8006742:	4604      	mov	r4, r0
 8006744:	b130      	cbz	r0, 8006754 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8006746:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006748:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800674a:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800674c:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 8006750:	b00b      	add	sp, #44	; 0x2c
 8006752:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006754:	4601      	mov	r1, r0
 8006756:	6828      	ldr	r0, [r5, #0]
 8006758:	f003 fe92 	bl	800a480 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800675c:	6868      	ldr	r0, [r5, #4]
 800675e:	b358      	cbz	r0, 80067b8 <HAL_PCD_Init+0xd0>
 8006760:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8006762:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006766:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8006768:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800676c:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 8006770:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006778:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800677c:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 8006780:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006784:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006786:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800678a:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800678c:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006790:	d3ea      	bcc.n	8006768 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8006792:	2200      	movs	r2, #0
 8006794:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006798:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800679a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800679e:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067a2:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 80067a4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067a8:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80067aa:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80067ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80067b2:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067b6:	d3ed      	bcc.n	8006794 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067b8:	466c      	mov	r4, sp
 80067ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80067bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80067c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80067c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80067ca:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80067ce:	6828      	ldr	r0, [r5, #0]
 80067d0:	f003 fe6e 	bl	800a4b0 <USB_DevInit>
 80067d4:	4604      	mov	r4, r0
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d1b5      	bne.n	8006746 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 80067da:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80067dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 80067de:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 80067e2:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 80067e4:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80067e8:	d00f      	beq.n	800680a <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 80067ea:	6828      	ldr	r0, [r5, #0]
 80067ec:	f004 fa80 	bl	800acf0 <USB_DevDisconnect>
}
 80067f0:	4620      	mov	r0, r4
 80067f2:	b00b      	add	sp, #44	; 0x2c
 80067f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80067f6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80067fa:	f005 fad9 	bl	800bdb0 <HAL_PCD_MspInit>
 80067fe:	6828      	ldr	r0, [r5, #0]
 8006800:	e780      	b.n	8006704 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8006802:	2401      	movs	r4, #1
}
 8006804:	4620      	mov	r0, r4
 8006806:	b00b      	add	sp, #44	; 0x2c
 8006808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800680a:	4628      	mov	r0, r5
 800680c:	f000 fcd0 	bl	80071b0 <HAL_PCDEx_ActivateLPM>
 8006810:	e7eb      	b.n	80067ea <HAL_PCD_Init+0x102>
 8006812:	bf00      	nop

08006814 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006814:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8006816:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 800681a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800681c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800681e:	2b01      	cmp	r3, #1
 8006820:	d016      	beq.n	8006850 <HAL_PCD_Start+0x3c>
 8006822:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006824:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006826:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8006828:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800682c:	d008      	beq.n	8006840 <HAL_PCD_Start+0x2c>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800682e:	f003 fe17 	bl	800a460 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006832:	6820      	ldr	r0, [r4, #0]
 8006834:	f004 fa4c 	bl	800acd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006838:	2000      	movs	r0, #0
 800683a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800683e:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006840:	69a3      	ldr	r3, [r4, #24]
 8006842:	4293      	cmp	r3, r2
 8006844:	d0f3      	beq.n	800682e <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006846:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800684c:	6383      	str	r3, [r0, #56]	; 0x38
 800684e:	e7ee      	b.n	800682e <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8006850:	2002      	movs	r0, #2
}
 8006852:	bd10      	pop	{r4, pc}

08006854 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006858:	6806      	ldr	r6, [r0, #0]
{
 800685a:	b087      	sub	sp, #28
 800685c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800685e:	4630      	mov	r0, r6
 8006860:	f004 fa86 	bl	800ad70 <USB_GetMode>
 8006864:	b110      	cbz	r0, 800686c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8006866:	b007      	add	sp, #28
 8006868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800686c:	4683      	mov	fp, r0
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	f004 fa4e 	bl	800ad10 <USB_ReadInterrupts>
 8006874:	2800      	cmp	r0, #0
 8006876:	d0f6      	beq.n	8006866 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006878:	6820      	ldr	r0, [r4, #0]
 800687a:	f004 fa49 	bl	800ad10 <USB_ReadInterrupts>
 800687e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006882:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006884:	d003      	beq.n	800688e <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006886:	6943      	ldr	r3, [r0, #20]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800688e:	f004 fa3f 	bl	800ad10 <USB_ReadInterrupts>
 8006892:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006896:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006898:	d012      	beq.n	80068c0 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800689a:	6983      	ldr	r3, [r0, #24]
 800689c:	f023 0310 	bic.w	r3, r3, #16
 80068a0:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80068a2:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80068a4:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80068a8:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	f000 826c 	beq.w	8006d8a <HAL_PCD_IRQHandler+0x536>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80068b2:	2b06      	cmp	r3, #6
 80068b4:	f000 81cb 	beq.w	8006c4e <HAL_PCD_IRQHandler+0x3fa>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80068b8:	6983      	ldr	r3, [r0, #24]
 80068ba:	f043 0310 	orr.w	r3, r3, #16
 80068be:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80068c0:	f004 fa26 	bl	800ad10 <USB_ReadInterrupts>
 80068c4:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80068c8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80068ca:	f040 80df 	bne.w	8006a8c <HAL_PCD_IRQHandler+0x238>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80068ce:	f004 fa1f 	bl	800ad10 <USB_ReadInterrupts>
 80068d2:	0342      	lsls	r2, r0, #13
 80068d4:	d478      	bmi.n	80069c8 <HAL_PCD_IRQHandler+0x174>
 80068d6:	f8d4 8000 	ldr.w	r8, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80068da:	4640      	mov	r0, r8
 80068dc:	f004 fa18 	bl	800ad10 <USB_ReadInterrupts>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	db5d      	blt.n	80069a0 <HAL_PCD_IRQHandler+0x14c>
 80068e4:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80068e6:	f004 fa13 	bl	800ad10 <USB_ReadInterrupts>
 80068ea:	0500      	lsls	r0, r0, #20
 80068ec:	d44d      	bmi.n	800698a <HAL_PCD_IRQHandler+0x136>
 80068ee:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80068f0:	f004 fa0e 	bl	800ad10 <USB_ReadInterrupts>
 80068f4:	0102      	lsls	r2, r0, #4
 80068f6:	d514      	bpl.n	8006922 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80068f8:	6822      	ldr	r2, [r4, #0]
 80068fa:	6953      	ldr	r3, [r2, #20]
 80068fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006900:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8006902:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8006906:	2b00      	cmp	r3, #0
 8006908:	f040 818b 	bne.w	8006c22 <HAL_PCD_IRQHandler+0x3ce>
        hpcd->LPM_State = LPM_L1;
 800690c:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800690e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8006910:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006914:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006916:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800691a:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800691e:	f000 fc5d 	bl	80071dc <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006922:	6820      	ldr	r0, [r4, #0]
 8006924:	f004 f9f4 	bl	800ad10 <USB_ReadInterrupts>
 8006928:	04c3      	lsls	r3, r0, #19
 800692a:	f100 8129 	bmi.w	8006b80 <HAL_PCD_IRQHandler+0x32c>
 800692e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006930:	f004 f9ee 	bl	800ad10 <USB_ReadInterrupts>
 8006934:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8006938:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800693a:	f040 810a 	bne.w	8006b52 <HAL_PCD_IRQHandler+0x2fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800693e:	f004 f9e7 	bl	800ad10 <USB_ReadInterrupts>
 8006942:	0707      	lsls	r7, r0, #28
 8006944:	f100 80fc 	bmi.w	8006b40 <HAL_PCD_IRQHandler+0x2ec>
 8006948:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800694a:	f004 f9e1 	bl	800ad10 <USB_ReadInterrupts>
 800694e:	02c6      	lsls	r6, r0, #11
 8006950:	f100 80ec 	bmi.w	8006b2c <HAL_PCD_IRQHandler+0x2d8>
 8006954:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006956:	f004 f9db 	bl	800ad10 <USB_ReadInterrupts>
 800695a:	0285      	lsls	r5, r0, #10
 800695c:	f100 80dc 	bmi.w	8006b18 <HAL_PCD_IRQHandler+0x2c4>
 8006960:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006962:	f004 f9d5 	bl	800ad10 <USB_ReadInterrupts>
 8006966:	0040      	lsls	r0, r0, #1
 8006968:	f100 80cd 	bmi.w	8006b06 <HAL_PCD_IRQHandler+0x2b2>
 800696c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800696e:	f004 f9cf 	bl	800ad10 <USB_ReadInterrupts>
 8006972:	0741      	lsls	r1, r0, #29
 8006974:	f57f af77 	bpl.w	8006866 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800697c:	076a      	lsls	r2, r5, #29
 800697e:	f100 8225 	bmi.w	8006dcc <HAL_PCD_IRQHandler+0x578>
      hpcd->Instance->GOTGINT |= temp;
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	432a      	orrs	r2, r5
 8006986:	605a      	str	r2, [r3, #4]
 8006988:	e76d      	b.n	8006866 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800698a:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800698e:	07d9      	lsls	r1, r3, #31
 8006990:	f100 8218 	bmi.w	8006dc4 <HAL_PCD_IRQHandler+0x570>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006994:	6820      	ldr	r0, [r4, #0]
 8006996:	6943      	ldr	r3, [r0, #20]
 8006998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800699c:	6143      	str	r3, [r0, #20]
 800699e:	e7a7      	b.n	80068f0 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069a0:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 80069a4:	f023 0301 	bic.w	r3, r3, #1
 80069a8:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80069ac:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f000 8145 	beq.w	8006c40 <HAL_PCD_IRQHandler+0x3ec>
        HAL_PCD_ResumeCallback(hpcd);
 80069b6:	4620      	mov	r0, r4
 80069b8:	f005 faa6 	bl	800bf08 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	6943      	ldr	r3, [r0, #20]
 80069c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c4:	6143      	str	r3, [r0, #20]
 80069c6:	e78e      	b.n	80068e6 <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	f004 f9ad 	bl	800ad28 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80069ce:	f8d4 8000 	ldr.w	r8, [r4]
 80069d2:	4681      	mov	r9, r0
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d080      	beq.n	80068da <HAL_PCD_IRQHandler+0x86>
 80069d8:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 80069dc:	4625      	mov	r5, r4
      epnum = 0U;
 80069de:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80069e2:	f8cd b010 	str.w	fp, [sp, #16]
 80069e6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80069ea:	e007      	b.n	80069fc <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 80069ec:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80069f0:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 80069f4:	f105 051c 	add.w	r5, r5, #28
 80069f8:	f000 813e 	beq.w	8006c78 <HAL_PCD_IRQHandler+0x424>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80069fc:	f019 0f01 	tst.w	r9, #1
 8006a00:	d0f4      	beq.n	80069ec <HAL_PCD_IRQHandler+0x198>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006a02:	fa5f f78a 	uxtb.w	r7, sl
 8006a06:	4640      	mov	r0, r8
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f004 f99f 	bl	800ad4c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a0e:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006a10:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a12:	d519      	bpl.n	8006a48 <HAL_PCD_IRQHandler+0x1f4>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a14:	f04f 0c01 	mov.w	ip, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a18:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a1a:	f00a 010f 	and.w	r1, sl, #15
 8006a1e:	9a02      	ldr	r2, [sp, #8]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a20:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a24:	fa0c f101 	lsl.w	r1, ip, r1
 8006a28:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a2c:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 8006a30:	6921      	ldr	r1, [r4, #16]
 8006a32:	4561      	cmp	r1, ip
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a34:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a38:	f8c2 c008 	str.w	ip, [r2, #8]
            if (hpcd->Init.dma_enable == 1U)
 8006a3c:	f000 81cb 	beq.w	8006dd6 <HAL_PCD_IRQHandler+0x582>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006a40:	4639      	mov	r1, r7
 8006a42:	4620      	mov	r0, r4
 8006a44:	f005 fa24 	bl	800be90 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006a48:	0730      	lsls	r0, r6, #28
 8006a4a:	d504      	bpl.n	8006a56 <HAL_PCD_IRQHandler+0x202>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	2208      	movs	r2, #8
 8006a50:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8006a54:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006a56:	06f1      	lsls	r1, r6, #27
 8006a58:	d504      	bpl.n	8006a64 <HAL_PCD_IRQHandler+0x210>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006a5a:	9b02      	ldr	r3, [sp, #8]
 8006a5c:	2210      	movs	r2, #16
 8006a5e:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8006a62:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006a64:	0672      	lsls	r2, r6, #25
 8006a66:	d504      	bpl.n	8006a72 <HAL_PCD_IRQHandler+0x21e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	2240      	movs	r2, #64	; 0x40
 8006a6c:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8006a70:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006a72:	07b3      	lsls	r3, r6, #30
 8006a74:	d504      	bpl.n	8006a80 <HAL_PCD_IRQHandler+0x22c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006a76:	9b02      	ldr	r3, [sp, #8]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8006a7e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006a80:	0636      	lsls	r6, r6, #24
 8006a82:	f100 80fc 	bmi.w	8006c7e <HAL_PCD_IRQHandler+0x42a>
 8006a86:	f8d4 8000 	ldr.w	r8, [r4]
 8006a8a:	e7af      	b.n	80069ec <HAL_PCD_IRQHandler+0x198>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006a8c:	f004 f944 	bl	800ad18 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8006a90:	4605      	mov	r5, r0
 8006a92:	6820      	ldr	r0, [r4, #0]
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	f43f af1a 	beq.w	80068ce <HAL_PCD_IRQHandler+0x7a>
 8006a9a:	f506 6330 	add.w	r3, r6, #2816	; 0xb00
 8006a9e:	f504 7901 	add.w	r9, r4, #516	; 0x204
      epnum = 0U;
 8006aa2:	2700      	movs	r7, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006aa4:	9602      	str	r6, [sp, #8]
 8006aa6:	469a      	mov	sl, r3
 8006aa8:	e006      	b.n	8006ab8 <HAL_PCD_IRQHandler+0x264>
      while (ep_intr != 0U)
 8006aaa:	086d      	lsrs	r5, r5, #1
        epnum++;
 8006aac:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 8006ab0:	f109 091c 	add.w	r9, r9, #28
 8006ab4:	f000 80de 	beq.w	8006c74 <HAL_PCD_IRQHandler+0x420>
        if ((ep_intr & 0x1U) != 0U)
 8006ab8:	07ee      	lsls	r6, r5, #31
 8006aba:	d5f6      	bpl.n	8006aaa <HAL_PCD_IRQHandler+0x256>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006abc:	b2fe      	uxtb	r6, r7
 8006abe:	4631      	mov	r1, r6
 8006ac0:	f004 f93a 	bl	800ad38 <USB_ReadDevOutEPInterrupt>
 8006ac4:	4680      	mov	r8, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ac6:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006ac8:	f018 0f01 	tst.w	r8, #1
 8006acc:	f040 813e 	bne.w	8006d4c <HAL_PCD_IRQHandler+0x4f8>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ad0:	f018 0f08 	tst.w	r8, #8
 8006ad4:	f040 8120 	bne.w	8006d18 <HAL_PCD_IRQHandler+0x4c4>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006ad8:	f018 0f10 	tst.w	r8, #16
 8006adc:	d003      	beq.n	8006ae6 <HAL_PCD_IRQHandler+0x292>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006ade:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 8006ae2:	2210      	movs	r2, #16
 8006ae4:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ae6:	f018 0f20 	tst.w	r8, #32
 8006aea:	d003      	beq.n	8006af4 <HAL_PCD_IRQHandler+0x2a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006aec:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 8006af0:	2220      	movs	r2, #32
 8006af2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006af4:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8006af8:	d0d7      	beq.n	8006aaa <HAL_PCD_IRQHandler+0x256>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006afa:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 8006afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b02:	609a      	str	r2, [r3, #8]
 8006b04:	e7d1      	b.n	8006aaa <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ConnectCallback(hpcd);
 8006b06:	4620      	mov	r0, r4
 8006b08:	f005 fa0a 	bl	800bf20 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	6943      	ldr	r3, [r0, #20]
 8006b10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b14:	6143      	str	r3, [r0, #20]
 8006b16:	e72a      	b.n	800696e <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b18:	4620      	mov	r0, r4
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	f005 f9f8 	bl	800bf10 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006b20:	6820      	ldr	r0, [r4, #0]
 8006b22:	6943      	ldr	r3, [r0, #20]
 8006b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b28:	6143      	str	r3, [r0, #20]
 8006b2a:	e71a      	b.n	8006962 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	2100      	movs	r1, #0
 8006b30:	f005 f9f2 	bl	800bf18 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006b34:	6820      	ldr	r0, [r4, #0]
 8006b36:	6943      	ldr	r3, [r0, #20]
 8006b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b3c:	6143      	str	r3, [r0, #20]
 8006b3e:	e70a      	b.n	8006956 <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 8006b40:	4620      	mov	r0, r4
 8006b42:	f005 f9af 	bl	800bea4 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b46:	6820      	ldr	r0, [r4, #0]
 8006b48:	6943      	ldr	r3, [r0, #20]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	6143      	str	r3, [r0, #20]
 8006b50:	e6fb      	b.n	800694a <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b52:	f004 f911 	bl	800ad78 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b56:	6820      	ldr	r0, [r4, #0]
 8006b58:	f003 fd9c 	bl	800a694 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b5c:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b5e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b60:	f001 f90c 	bl	8007d7c <HAL_RCC_GetHCLKFreq>
 8006b64:	7b22      	ldrb	r2, [r4, #12]
 8006b66:	4601      	mov	r1, r0
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f003 fbfd 	bl	800a368 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f005 f99c 	bl	800beac <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b74:	6820      	ldr	r0, [r4, #0]
 8006b76:	6943      	ldr	r3, [r0, #20]
 8006b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b7c:	6143      	str	r3, [r0, #20]
 8006b7e:	e6de      	b.n	800693e <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b80:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006b84:	2110      	movs	r1, #16
 8006b86:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b88:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006b92:	f003 fd6d 	bl	800a670 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b96:	6860      	ldr	r0, [r4, #4]
 8006b98:	b310      	cbz	r0, 8006be0 <HAL_PCD_IRQHandler+0x38c>
 8006b9a:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006b9e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8006ba2:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ba4:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bac:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006bb2:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bb6:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8006bba:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006bbe:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006bc2:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bc6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8006bca:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006bce:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006bd2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8006bd6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006bda:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bde:	d1e0      	bne.n	8006ba2 <HAL_PCD_IRQHandler+0x34e>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006be0:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006be2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006be4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006be8:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006bea:	b9f2      	cbnz	r2, 8006c2a <HAL_PCD_IRQHandler+0x3d6>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006bec:	696a      	ldr	r2, [r5, #20]
 8006bee:	f242 032b 	movw	r3, #8235	; 0x202b
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006bf6:	692b      	ldr	r3, [r5, #16]
 8006bf8:	f043 030b 	orr.w	r3, r3, #11
 8006bfc:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006bfe:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006c02:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006c06:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006c08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006c0c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006c0e:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006c12:	f004 f8c7 	bl	800ada4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	6943      	ldr	r3, [r0, #20]
 8006c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c1e:	6143      	str	r3, [r0, #20]
 8006c20:	e686      	b.n	8006930 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 8006c22:	4620      	mov	r0, r4
 8006c24:	f005 f958 	bl	800bed8 <HAL_PCD_SuspendCallback>
 8006c28:	e67b      	b.n	8006922 <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006c2a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8006c2e:	f043 030b 	orr.w	r3, r3, #11
 8006c32:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006c36:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006c38:	f043 030b 	orr.w	r3, r3, #11
 8006c3c:	646b      	str	r3, [r5, #68]	; 0x44
 8006c3e:	e7de      	b.n	8006bfe <HAL_PCD_IRQHandler+0x3aa>
        hpcd->LPM_State = LPM_L0;
 8006c40:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006c42:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8006c44:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006c48:	f000 fac8 	bl	80071dc <HAL_PCDEx_LPM_Callback>
 8006c4c:	e6b6      	b.n	80069bc <HAL_PCD_IRQHandler+0x168>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c4e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006c52:	2208      	movs	r2, #8
 8006c54:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f003 ffa3 	bl	800aba4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c5e:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8006c62:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8006c66:	6820      	ldr	r0, [r4, #0]
 8006c68:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8006c6c:	440b      	add	r3, r1
 8006c6e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8006c72:	e621      	b.n	80068b8 <HAL_PCD_IRQHandler+0x64>
 8006c74:	9e02      	ldr	r6, [sp, #8]
 8006c76:	e62a      	b.n	80068ce <HAL_PCD_IRQHandler+0x7a>
 8006c78:	e9dd 6b03 	ldrd	r6, fp, [sp, #12]
 8006c7c:	e62d      	b.n	80068da <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 8006c7e:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c82:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8006c86:	428b      	cmp	r3, r1
 8006c88:	f63f aeb0 	bhi.w	80069ec <HAL_PCD_IRQHandler+0x198>
  len = ep->xfer_len - ep->xfer_count;
 8006c8c:	1aca      	subs	r2, r1, r3
  len32b = (len + 3U) / 4U;
 8006c8e:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c90:	f508 6b10 	add.w	fp, r8, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c94:	f8cd 8014 	str.w	r8, [sp, #20]
  len32b = (len + 3U) / 4U;
 8006c98:	4282      	cmp	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c9a:	eb0b 1b4a 	add.w	fp, fp, sl, lsl #5
  len32b = (len + 3U) / 4U;
 8006c9e:	bf28      	it	cs
 8006ca0:	4602      	movcs	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ca2:	f8db 0018 	ldr.w	r0, [fp, #24]
  len32b = (len + 3U) / 4U;
 8006ca6:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ca8:	b280      	uxth	r0, r0
 8006caa:	ebb0 0f92 	cmp.w	r0, r2, lsr #2
 8006cae:	d21b      	bcs.n	8006ce8 <HAL_PCD_IRQHandler+0x494>
 8006cb0:	e022      	b.n	8006cf8 <HAL_PCD_IRQHandler+0x4a4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cb2:	b1f9      	cbz	r1, 8006cf4 <HAL_PCD_IRQHandler+0x4a0>
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cb4:	f894 c010 	ldrb.w	ip, [r4, #16]
 8006cb8:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 8006cbc:	f8cd c000 	str.w	ip, [sp]
 8006cc0:	429e      	cmp	r6, r3
 8006cc2:	bf28      	it	cs
 8006cc4:	461e      	movcs	r6, r3
 8006cc6:	b2b3      	uxth	r3, r6
 8006cc8:	f003 ff56 	bl	800ab78 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ccc:	f8db 2018 	ldr.w	r2, [fp, #24]
    ep->xfer_buff  += len;
 8006cd0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8006cd2:	1cf0      	adds	r0, r6, #3
    ep->xfer_count += len;
 8006cd4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cd6:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8006cd8:	4431      	add	r1, r6
    ep->xfer_count += len;
 8006cda:	4433      	add	r3, r6
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cdc:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 8006ce0:	64a9      	str	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8006ce2:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ce4:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8006ce6:	d305      	bcc.n	8006cf4 <HAL_PCD_IRQHandler+0x4a0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ce8:	4299      	cmp	r1, r3
    len = ep->xfer_len - ep->xfer_count;
 8006cea:	eba1 0603 	sub.w	r6, r1, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cee:	463a      	mov	r2, r7
 8006cf0:	4640      	mov	r0, r8
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cf2:	d8de      	bhi.n	8006cb2 <HAL_PCD_IRQHandler+0x45e>
 8006cf4:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8006cf8:	4299      	cmp	r1, r3
 8006cfa:	f63f ae77 	bhi.w	80069ec <HAL_PCD_IRQHandler+0x198>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006cfe:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d00:	f00a 010f 	and.w	r1, sl, #15
 8006d04:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d06:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d0a:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d0e:	ea22 0201 	bic.w	r2, r2, r1
 8006d12:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8006d16:	e669      	b.n	80069ec <HAL_PCD_IRQHandler+0x198>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006d18:	eb0a 1247 	add.w	r2, sl, r7, lsl #5
 8006d1c:	2108      	movs	r1, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d1e:	eb00 1347 	add.w	r3, r0, r7, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006d22:	6091      	str	r1, [r2, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d24:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d2a:	485e      	ldr	r0, [pc, #376]	; (8006ea4 <HAL_PCD_IRQHandler+0x650>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d2c:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d2e:	4282      	cmp	r2, r0
 8006d30:	d963      	bls.n	8006dfa <HAL_PCD_IRQHandler+0x5a6>
 8006d32:	0409      	lsls	r1, r1, #16
 8006d34:	d502      	bpl.n	8006d3c <HAL_PCD_IRQHandler+0x4e8>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d3a:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f005 f897 	bl	800be70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d42:	6921      	ldr	r1, [r4, #16]
 8006d44:	2901      	cmp	r1, #1
 8006d46:	d07b      	beq.n	8006e40 <HAL_PCD_IRQHandler+0x5ec>
 8006d48:	6820      	ldr	r0, [r4, #0]
 8006d4a:	e6c5      	b.n	8006ad8 <HAL_PCD_IRQHandler+0x284>
  if (hpcd->Init.dma_enable == 1U)
 8006d4c:	f8d4 c010 	ldr.w	ip, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d50:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006d54:	2301      	movs	r3, #1
 8006d56:	eb0a 1147 	add.w	r1, sl, r7, lsl #5
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d5a:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8006d5e:	f1bc 0f01 	cmp.w	ip, #1
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006d62:	608b      	str	r3, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d64:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d66:	f8d2 e008 	ldr.w	lr, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8006d6a:	d04b      	beq.n	8006e04 <HAL_PCD_IRQHandler+0x5b0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006d6c:	494e      	ldr	r1, [pc, #312]	; (8006ea8 <HAL_PCD_IRQHandler+0x654>)
 8006d6e:	428b      	cmp	r3, r1
 8006d70:	d057      	beq.n	8006e22 <HAL_PCD_IRQHandler+0x5ce>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006d72:	b927      	cbnz	r7, 8006d7e <HAL_PCD_IRQHandler+0x52a>
 8006d74:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8006d78:	2a00      	cmp	r2, #0
 8006d7a:	f000 808c 	beq.w	8006e96 <HAL_PCD_IRQHandler+0x642>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4631      	mov	r1, r6
 8006d82:	f005 f87b 	bl	800be7c <HAL_PCD_DataOutStageCallback>
 8006d86:	6820      	ldr	r0, [r4, #0]
 8006d88:	e6a2      	b.n	8006ad0 <HAL_PCD_IRQHandler+0x27c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006d8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006d8e:	421d      	tst	r5, r3
 8006d90:	f43f ad92 	beq.w	80068b8 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d94:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8006d98:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006da2:	4615      	mov	r5, r2
 8006da4:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8006da8:	f003 fefc 	bl	800aba4 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006dac:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006db0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006db4:	442a      	add	r2, r5
 8006db6:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006db8:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006dba:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006dbe:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 8006dc2:	e579      	b.n	80068b8 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f005 f887 	bl	800bed8 <HAL_PCD_SuspendCallback>
 8006dca:	e5e3      	b.n	8006994 <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f005 f8ab 	bl	800bf28 <HAL_PCD_DisconnectCallback>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	e5d5      	b.n	8006982 <HAL_PCD_IRQHandler+0x12e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006dd6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8006dda:	4413      	add	r3, r2
 8006ddc:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006dde:	f1ba 0f00 	cmp.w	sl, #0
 8006de2:	f47f ae2d 	bne.w	8006a40 <HAL_PCD_IRQHandler+0x1ec>
 8006de6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f47f ae29 	bne.w	8006a40 <HAL_PCD_IRQHandler+0x1ec>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006dee:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006df2:	6820      	ldr	r0, [r4, #0]
 8006df4:	f003 ffd6 	bl	800ada4 <USB_EP0_OutStart>
 8006df8:	e622      	b.n	8006a40 <HAL_PCD_IRQHandler+0x1ec>
  HAL_PCD_SetupStageCallback(hpcd);
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f005 f838 	bl	800be70 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006e00:	6820      	ldr	r0, [r4, #0]
 8006e02:	e669      	b.n	8006ad8 <HAL_PCD_IRQHandler+0x284>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006e04:	f01e 0f08 	tst.w	lr, #8
 8006e08:	d014      	beq.n	8006e34 <HAL_PCD_IRQHandler+0x5e0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e0a:	4926      	ldr	r1, [pc, #152]	; (8006ea4 <HAL_PCD_IRQHandler+0x650>)
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	f67f ae5f 	bls.w	8006ad0 <HAL_PCD_IRQHandler+0x27c>
 8006e12:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8006e16:	f43f ae5b 	beq.w	8006ad0 <HAL_PCD_IRQHandler+0x27c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e1e:	6093      	str	r3, [r2, #8]
 8006e20:	e656      	b.n	8006ad0 <HAL_PCD_IRQHandler+0x27c>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e22:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8006e26:	d1f8      	bne.n	8006e1a <HAL_PCD_IRQHandler+0x5c6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e28:	f01e 0f20 	tst.w	lr, #32
 8006e2c:	d0a7      	beq.n	8006d7e <HAL_PCD_IRQHandler+0x52a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e2e:	2120      	movs	r1, #32
 8006e30:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e32:	e7a4      	b.n	8006d7e <HAL_PCD_IRQHandler+0x52a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006e34:	f01e 0f20 	tst.w	lr, #32
 8006e38:	d008      	beq.n	8006e4c <HAL_PCD_IRQHandler+0x5f8>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e3a:	2320      	movs	r3, #32
 8006e3c:	6093      	str	r3, [r2, #8]
 8006e3e:	e647      	b.n	8006ad0 <HAL_PCD_IRQHandler+0x27c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e40:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006e44:	6820      	ldr	r0, [r4, #0]
 8006e46:	f003 ffad 	bl	800ada4 <USB_EP0_OutStart>
 8006e4a:	e77d      	b.n	8006d48 <HAL_PCD_IRQHandler+0x4f4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006e4c:	f01e 0f28 	tst.w	lr, #40	; 0x28
 8006e50:	f47f ae3e 	bne.w	8006ad0 <HAL_PCD_IRQHandler+0x27c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e54:	4913      	ldr	r1, [pc, #76]	; (8006ea4 <HAL_PCD_IRQHandler+0x650>)
 8006e56:	428b      	cmp	r3, r1
 8006e58:	d902      	bls.n	8006e60 <HAL_PCD_IRQHandler+0x60c>
 8006e5a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8006e5e:	d1dc      	bne.n	8006e1a <HAL_PCD_IRQHandler+0x5c6>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e60:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8006e62:	f8d9 3000 	ldr.w	r3, [r9]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006e66:	f8d9 1004 	ldr.w	r1, [r9, #4]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e6a:	f3c2 0212 	ubfx	r2, r2, #0, #19
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006e6e:	4419      	add	r1, r3
          hpcd->OUT_ep[epnum].maxpacket -
 8006e70:	1a9a      	subs	r2, r3, r2
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006e72:	f8c9 1004 	str.w	r1, [r9, #4]
        hpcd->OUT_ep[epnum].xfer_count =
 8006e76:	f8c9 2010 	str.w	r2, [r9, #16]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e7a:	2f00      	cmp	r7, #0
 8006e7c:	f47f af7f 	bne.w	8006d7e <HAL_PCD_IRQHandler+0x52a>
 8006e80:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	f47f af7a 	bne.w	8006d7e <HAL_PCD_IRQHandler+0x52a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e8a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006e8e:	2101      	movs	r1, #1
 8006e90:	f003 ff88 	bl	800ada4 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e94:	e773      	b.n	8006d7e <HAL_PCD_IRQHandler+0x52a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006e96:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f003 ff82 	bl	800ada4 <USB_EP0_OutStart>
 8006ea0:	e76d      	b.n	8006d7e <HAL_PCD_IRQHandler+0x52a>
 8006ea2:	bf00      	nop
 8006ea4:	4f54300a 	.word	0x4f54300a
 8006ea8:	4f54310a 	.word	0x4f54310a

08006eac <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8006eac:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8006eb0:	2a01      	cmp	r2, #1
 8006eb2:	d00d      	beq.n	8006ed0 <HAL_PCD_SetAddress+0x24>
 8006eb4:	2201      	movs	r2, #1
{
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8006eba:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ebe:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8006ec0:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ec4:	f003 fef2 	bl	800acac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006ece:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006ed0:	2002      	movs	r0, #2
}
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_PCD_EP_Open>:
{
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	f001 050f 	and.w	r5, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8006eda:	0609      	lsls	r1, r1, #24
{
 8006edc:	4606      	mov	r6, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ede:	f04f 041c 	mov.w	r4, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8006ee2:	d422      	bmi.n	8006f2a <HAL_PCD_EP_Open+0x56>
    ep->is_in = 0U;
 8006ee4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ee8:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 8006eec:	2700      	movs	r7, #0
 8006eee:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ef2:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8006ef6:	f880 71fd 	strb.w	r7, [r0, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8006efa:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006efc:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8006efe:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8006f00:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8006f02:	b100      	cbz	r0, 8006f06 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8006f04:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d101      	bne.n	8006f0e <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8006f0e:	f896 33bc 	ldrb.w	r3, [r6, #956]	; 0x3bc
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d015      	beq.n	8006f42 <HAL_PCD_EP_Open+0x6e>
 8006f16:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006f18:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 8006f1a:	f886 33bc 	strb.w	r3, [r6, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006f1e:	f003 fbc5 	bl	800a6ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f22:	2000      	movs	r0, #0
 8006f24:	f886 03bc 	strb.w	r0, [r6, #956]	; 0x3bc
}
 8006f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8006f2a:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8006f2e:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f30:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 1U;
 8006f34:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f38:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 8006f3c:	f880 703d 	strb.w	r7, [r0, #61]	; 0x3d
 8006f40:	e7db      	b.n	8006efa <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8006f42:	2002      	movs	r0, #2
}
 8006f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f46:	bf00      	nop

08006f48 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8006f48:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006f4c:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f50:	f04f 011c 	mov.w	r1, #28
{
 8006f54:	b510      	push	{r4, lr}
 8006f56:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8006f58:	d119      	bne.n	8006f8e <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f5a:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8006f5e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8006f62:	2000      	movs	r0, #0
 8006f64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f68:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8006f6c:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006f70:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8006f72:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d018      	beq.n	8006fac <HAL_PCD_EP_Close+0x64>
 8006f7a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f7c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006f7e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f82:	f003 fbdb 	bl	800a73c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f86:	2000      	movs	r0, #0
 8006f88:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006f8c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f8e:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8006f92:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8006f96:	2001      	movs	r0, #1
 8006f98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f9c:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8006f9e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006fa2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8006fa4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d1e6      	bne.n	8006f7a <HAL_PCD_EP_Close+0x32>
 8006fac:	2002      	movs	r0, #2
}
 8006fae:	bd10      	pop	{r4, pc}

08006fb0 <HAL_PCD_EP_Receive>:
{
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8006fb6:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fb8:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8006fba:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fbe:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8006fc2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fc6:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8006fca:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8006fce:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fd2:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8006fd6:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8006fda:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8006fde:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fe0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8006fe2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8006fe4:	bf08      	it	eq
 8006fe6:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fea:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006fec:	b91d      	cbnz	r5, 8006ff6 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fee:	f003 fd1b 	bl	800aa28 <USB_EP0StartXfer>
}
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ff6:	f003 fc03 	bl	800a800 <USB_EPStartXfer>
}
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	bf00      	nop

08007000 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007000:	f001 010f 	and.w	r1, r1, #15
 8007004:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800700c:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop

08007014 <HAL_PCD_EP_Transmit>:
{
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 800701a:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 800701c:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800701e:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007020:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007024:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8007028:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800702c:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 800702e:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8007030:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8007032:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8007036:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8007038:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800703c:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800703e:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007040:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 8007042:	bf08      	it	eq
 8007044:	64e2      	streq	r2, [r4, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007046:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007048:	b91d      	cbnz	r5, 8007052 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800704a:	f003 fced 	bl	800aa28 <USB_EP0StartXfer>
}
 800704e:	2000      	movs	r0, #0
 8007050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007052:	f003 fbd5 	bl	800a800 <USB_EPStartXfer>
}
 8007056:	2000      	movs	r0, #0
 8007058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800705a:	bf00      	nop

0800705c <HAL_PCD_EP_SetStall>:
{
 800705c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800705e:	6843      	ldr	r3, [r0, #4]
 8007060:	f001 050f 	and.w	r5, r1, #15
 8007064:	429d      	cmp	r5, r3
 8007066:	d833      	bhi.n	80070d0 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8007068:	060b      	lsls	r3, r1, #24
 800706a:	4604      	mov	r4, r0
 800706c:	d41c      	bmi.n	80070a8 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 800706e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8007072:	201c      	movs	r0, #28
    ep->is_in = 0U;
 8007074:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8007076:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 800707a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 800707e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007082:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007086:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007088:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800708a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800708c:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007090:	429a      	cmp	r2, r3
 8007092:	d01b      	beq.n	80070cc <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007094:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007096:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800709a:	f003 fda7 	bl	800abec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800709e:	b1cd      	cbz	r5, 80070d4 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 80070a0:	2000      	movs	r0, #0
 80070a2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070a8:	211c      	movs	r1, #28
    ep->is_in = 1U;
 80070aa:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80070ae:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070b0:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 80070b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070b8:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 80070be:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80070c0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80070c2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80070c4:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d1e3      	bne.n	8007094 <HAL_PCD_EP_SetStall+0x38>
 80070cc:	2002      	movs	r0, #2
}
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80070d0:	2001      	movs	r0, #1
}
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80070d4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80070d8:	7c21      	ldrb	r1, [r4, #16]
 80070da:	6820      	ldr	r0, [r4, #0]
 80070dc:	f003 fe62 	bl	800ada4 <USB_EP0_OutStart>
 80070e0:	e7de      	b.n	80070a0 <HAL_PCD_EP_SetStall+0x44>
 80070e2:	bf00      	nop

080070e4 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80070e4:	6842      	ldr	r2, [r0, #4]
{
 80070e6:	b538      	push	{r3, r4, r5, lr}
 80070e8:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d832      	bhi.n	8007156 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 80070f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80070f4:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070f6:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 80070fa:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80070fe:	d119      	bne.n	8007134 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007100:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007104:	2000      	movs	r0, #0
 8007106:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800710a:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800710c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007110:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007114:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007116:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007118:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800711c:	2b01      	cmp	r3, #1
 800711e:	d018      	beq.n	8007152 <HAL_PCD_EP_ClrStall+0x6e>
 8007120:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007122:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007124:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007128:	f003 fd94 	bl	800ac54 <USB_EPClearStall>
  return HAL_OK;
 800712c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800712e:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8007132:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007134:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007138:	2001      	movs	r0, #1
 800713a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800713e:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007140:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007142:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8007146:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007148:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800714a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800714e:	2b01      	cmp	r3, #1
 8007150:	d1e6      	bne.n	8007120 <HAL_PCD_EP_ClrStall+0x3c>
 8007152:	2002      	movs	r0, #2
}
 8007154:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007156:	2001      	movs	r0, #1
}
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	bf00      	nop

0800715c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800715c:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800715e:	6805      	ldr	r5, [r0, #0]
 8007160:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 8007162:	b929      	cbnz	r1, 8007170 <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007168:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800716a:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800716c:	bc30      	pop	{r4, r5}
 800716e:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007170:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8007172:	1e4c      	subs	r4, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007174:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007178:	d00b      	beq.n	8007192 <HAL_PCDEx_SetTxFiFo+0x36>
 800717a:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800717c:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8007180:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007182:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8007186:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007188:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800718a:	42a3      	cmp	r3, r4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800718c:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007190:	d3f4      	bcc.n	800717c <HAL_PCDEx_SetTxFiFo+0x20>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007192:	3440      	adds	r4, #64	; 0x40
 8007194:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007198:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800719c:	6060      	str	r0, [r4, #4]
}
 800719e:	2000      	movs	r0, #0
 80071a0:	bc30      	pop	{r4, r5}
 80071a2:	4770      	bx	lr

080071a4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80071a4:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 80071a6:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6259      	str	r1, [r3, #36]	; 0x24
}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop

080071b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80071b0:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071b2:	4909      	ldr	r1, [pc, #36]	; (80071d8 <HAL_PCDEx_ActivateLPM+0x28>)
{
 80071b4:	b430      	push	{r4, r5}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071b6:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 80071b8:	2400      	movs	r4, #0
  hpcd->lpm_active = 1U;
 80071ba:	2501      	movs	r5, #1
  hpcd->LPM_State = LPM_L0;
 80071bc:	f883 43f4 	strb.w	r4, [r3, #1012]	; 0x3f4

  return HAL_OK;
}
 80071c0:	4620      	mov	r0, r4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80071c2:	6994      	ldr	r4, [r2, #24]
  hpcd->lpm_active = 1U;
 80071c4:	f8c3 53fc 	str.w	r5, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80071c8:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 80071cc:	6194      	str	r4, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071ce:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80071d0:	4319      	orrs	r1, r3
}
 80071d2:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071d4:	6551      	str	r1, [r2, #84]	; 0x54
}
 80071d6:	4770      	bx	lr
 80071d8:	10000003 	.word	0x10000003

080071dc <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop

080071e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071e0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <HAL_PWREx_ConfigSupply+0x48>)
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	0752      	lsls	r2, r2, #29
 80071e8:	d406      	bmi.n	80071f8 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071f0:	1a18      	subs	r0, r3, r0
 80071f2:	bf18      	it	ne
 80071f4:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071f8:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80071fa:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071fc:	f022 0207 	bic.w	r2, r2, #7
 8007200:	4310      	orrs	r0, r2
 8007202:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8007204:	f7fc fa24 	bl	8003650 <HAL_GetTick>
 8007208:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800720a:	e005      	b.n	8007218 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800720c:	f7fc fa20 	bl	8003650 <HAL_GetTick>
 8007210:	1b00      	subs	r0, r0, r4
 8007212:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007216:	d804      	bhi.n	8007222 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007218:	686b      	ldr	r3, [r5, #4]
 800721a:	049b      	lsls	r3, r3, #18
 800721c:	d5f6      	bpl.n	800720c <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 800721e:	2000      	movs	r0, #0
}
 8007220:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007222:	2001      	movs	r0, #1
}
 8007224:	bd38      	pop	{r3, r4, r5, pc}
 8007226:	bf00      	nop
 8007228:	58024800 	.word	0x58024800

0800722c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800722c:	4a02      	ldr	r2, [pc, #8]	; (8007238 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800722e:	68d3      	ldr	r3, [r2, #12]
 8007230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007234:	60d3      	str	r3, [r2, #12]
}
 8007236:	4770      	bx	lr
 8007238:	58024800 	.word	0x58024800

0800723c <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800723c:	4b3b      	ldr	r3, [pc, #236]	; (800732c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800723e:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007242:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8007246:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800724a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800724e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 8007250:	d038      	beq.n	80072c4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007252:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007256:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800725a:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800725e:	fb01 f105 	mul.w	r1, r1, r5
 8007262:	2a01      	cmp	r2, #1
 8007264:	ee07 1a90 	vmov	s15, r1
 8007268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800726c:	d002      	beq.n	8007274 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800726e:	2a02      	cmp	r2, #2
 8007270:	d04e      	beq.n	8007310 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8007272:	b34a      	cbz	r2, 80072c8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007274:	ee07 0a90 	vmov	s15, r0
 8007278:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007330 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800727c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8007286:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8007334 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728e:	ee06 3a90 	vmov	s13, r3
 8007292:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8007296:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800729a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800729e:	eee7 6a25 	vfma.f32	s13, s14, s11
 80072a2:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80072a6:	4b21      	ldr	r3, [pc, #132]	; (800732c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80072ae:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80072b0:	ee07 3a90 	vmov	s15, r3
 80072b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c0:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80072c4:	bc30      	pop	{r4, r5}
 80072c6:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	0692      	lsls	r2, r2, #26
 80072cc:	d527      	bpl.n	800731e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072ce:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072d0:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072d4:	4a18      	ldr	r2, [pc, #96]	; (8007338 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072d6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072da:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072e4:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072e6:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8007334 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80072ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ee:	ee06 2a10 	vmov	s12, r2
 80072f2:	ee06 3a90 	vmov	s13, r3
 80072f6:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 80072fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80072fe:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8007302:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007306:	eee7 6a05 	vfma.f32	s13, s14, s10
 800730a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800730e:	e7ca      	b.n	80072a6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007310:	ee07 0a90 	vmov	s15, r0
 8007314:	eddf 6a09 	vldr	s13, [pc, #36]	; 800733c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8007318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800731c:	e7b0      	b.n	8007280 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800731e:	ee07 0a90 	vmov	s15, r0
 8007322:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007340 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8007326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800732a:	e7a9      	b.n	8007280 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800732c:	58024400 	.word	0x58024400
 8007330:	4a742400 	.word	0x4a742400
 8007334:	39000000 	.word	0x39000000
 8007338:	03d09000 	.word	0x03d09000
 800733c:	4bbebc20 	.word	0x4bbebc20
 8007340:	4c742400 	.word	0x4c742400

08007344 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007344:	2800      	cmp	r0, #0
 8007346:	f000 81f7 	beq.w	8007738 <HAL_RCC_OscConfig+0x3f4>
{
 800734a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800734c:	6803      	ldr	r3, [r0, #0]
 800734e:	4604      	mov	r4, r0
 8007350:	07d9      	lsls	r1, r3, #31
 8007352:	d52e      	bpl.n	80073b2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007354:	49b4      	ldr	r1, [pc, #720]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 8007356:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007358:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800735a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800735e:	2a10      	cmp	r2, #16
 8007360:	f000 812c 	beq.w	80075bc <HAL_RCC_OscConfig+0x278>
 8007364:	2a18      	cmp	r2, #24
 8007366:	f000 8124 	beq.w	80075b2 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800736a:	6863      	ldr	r3, [r4, #4]
 800736c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007370:	f000 8167 	beq.w	8007642 <HAL_RCC_OscConfig+0x2fe>
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 817f 	beq.w	8007678 <HAL_RCC_OscConfig+0x334>
 800737a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800737e:	4baa      	ldr	r3, [pc, #680]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	f000 8278 	beq.w	8007876 <HAL_RCC_OscConfig+0x532>
 8007386:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007392:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007394:	f7fc f95c 	bl	8003650 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007398:	4ea3      	ldr	r6, [pc, #652]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 800739a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800739c:	e005      	b.n	80073aa <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800739e:	f7fc f957 	bl	8003650 <HAL_GetTick>
 80073a2:	1b40      	subs	r0, r0, r5
 80073a4:	2864      	cmp	r0, #100	; 0x64
 80073a6:	f200 8165 	bhi.w	8007674 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073aa:	6833      	ldr	r3, [r6, #0]
 80073ac:	039f      	lsls	r7, r3, #14
 80073ae:	d5f6      	bpl.n	800739e <HAL_RCC_OscConfig+0x5a>
 80073b0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b2:	0799      	lsls	r1, r3, #30
 80073b4:	d521      	bpl.n	80073fa <HAL_RCC_OscConfig+0xb6>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073b6:	4a9c      	ldr	r2, [pc, #624]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 80073b8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073ba:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073bc:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80073c0:	f040 80a8 	bne.w	8007514 <HAL_RCC_OscConfig+0x1d0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073c4:	4b98      	ldr	r3, [pc, #608]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	075b      	lsls	r3, r3, #29
 80073ca:	d503      	bpl.n	80073d4 <HAL_RCC_OscConfig+0x90>
 80073cc:	68e3      	ldr	r3, [r4, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80ed 	beq.w	80075ae <HAL_RCC_OscConfig+0x26a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d4:	f7fc f954 	bl	8003680 <HAL_GetREVID>
 80073d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80073dc:	4298      	cmp	r0, r3
 80073de:	f200 8189 	bhi.w	80076f4 <HAL_RCC_OscConfig+0x3b0>
 80073e2:	6922      	ldr	r2, [r4, #16]
 80073e4:	2a40      	cmp	r2, #64	; 0x40
 80073e6:	f000 824e 	beq.w	8007886 <HAL_RCC_OscConfig+0x542>
 80073ea:	498f      	ldr	r1, [pc, #572]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 80073ec:	684b      	ldr	r3, [r1, #4]
 80073ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80073f2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80073f6:	604b      	str	r3, [r1, #4]
 80073f8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80073fa:	06d9      	lsls	r1, r3, #27
 80073fc:	d456      	bmi.n	80074ac <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073fe:	071d      	lsls	r5, r3, #28
 8007400:	d517      	bpl.n	8007432 <HAL_RCC_OscConfig+0xee>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007402:	6963      	ldr	r3, [r4, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80b4 	beq.w	8007572 <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_LSI_ENABLE();
 800740a:	4b87      	ldr	r3, [pc, #540]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 800740c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800740e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8007410:	f042 0201 	orr.w	r2, r2, #1
 8007414:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007416:	f7fc f91b 	bl	8003650 <HAL_GetTick>
 800741a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800741c:	e005      	b.n	800742a <HAL_RCC_OscConfig+0xe6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800741e:	f7fc f917 	bl	8003650 <HAL_GetTick>
 8007422:	1b40      	subs	r0, r0, r5
 8007424:	2802      	cmp	r0, #2
 8007426:	f200 8125 	bhi.w	8007674 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800742a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800742c:	0798      	lsls	r0, r3, #30
 800742e:	d5f6      	bpl.n	800741e <HAL_RCC_OscConfig+0xda>
 8007430:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007432:	069a      	lsls	r2, r3, #26
 8007434:	d517      	bpl.n	8007466 <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007436:	69a3      	ldr	r3, [r4, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 8134 	beq.w	80076a6 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 800743e:	4b7a      	ldr	r3, [pc, #488]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 8007440:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007442:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8007444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007448:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800744a:	f7fc f901 	bl	8003650 <HAL_GetTick>
 800744e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007450:	e005      	b.n	800745e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007452:	f7fc f8fd 	bl	8003650 <HAL_GetTick>
 8007456:	1b40      	subs	r0, r0, r5
 8007458:	2802      	cmp	r0, #2
 800745a:	f200 810b 	bhi.w	8007674 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800745e:	6833      	ldr	r3, [r6, #0]
 8007460:	049f      	lsls	r7, r3, #18
 8007462:	d5f6      	bpl.n	8007452 <HAL_RCC_OscConfig+0x10e>
 8007464:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007466:	0759      	lsls	r1, r3, #29
 8007468:	f100 80b2 	bmi.w	80075d0 <HAL_RCC_OscConfig+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800746c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800746e:	b1d8      	cbz	r0, 80074a8 <HAL_RCC_OscConfig+0x164>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007470:	4b6d      	ldr	r3, [pc, #436]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8007478:	2a18      	cmp	r2, #24
 800747a:	f000 81ce 	beq.w	800781a <HAL_RCC_OscConfig+0x4d6>
        __HAL_RCC_PLL_DISABLE();
 800747e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007480:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007482:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8007484:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007488:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800748a:	f000 8161 	beq.w	8007750 <HAL_RCC_OscConfig+0x40c>
        tickstart = HAL_GetTick();
 800748e:	f7fc f8df 	bl	8003650 <HAL_GetTick>
 8007492:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007494:	e005      	b.n	80074a2 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007496:	f7fc f8db 	bl	8003650 <HAL_GetTick>
 800749a:	1b00      	subs	r0, r0, r4
 800749c:	2802      	cmp	r0, #2
 800749e:	f200 80e9 	bhi.w	8007674 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	019b      	lsls	r3, r3, #6
 80074a6:	d4f6      	bmi.n	8007496 <HAL_RCC_OscConfig+0x152>
  return HAL_OK;
 80074a8:	2000      	movs	r0, #0
}
 80074aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ac:	4a5e      	ldr	r2, [pc, #376]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 80074ae:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80074b6:	2b08      	cmp	r3, #8
 80074b8:	d072      	beq.n	80075a0 <HAL_RCC_OscConfig+0x25c>
 80074ba:	2b18      	cmp	r3, #24
 80074bc:	d06c      	beq.n	8007598 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80074be:	69e3      	ldr	r3, [r4, #28]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 8103 	beq.w	80076cc <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 80074c6:	4b58      	ldr	r3, [pc, #352]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 80074c8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074ca:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 80074cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80074d2:	f7fc f8bd 	bl	8003650 <HAL_GetTick>
 80074d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074d8:	e005      	b.n	80074e6 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80074da:	f7fc f8b9 	bl	8003650 <HAL_GetTick>
 80074de:	1b40      	subs	r0, r0, r5
 80074e0:	2802      	cmp	r0, #2
 80074e2:	f200 80c7 	bhi.w	8007674 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074e6:	6833      	ldr	r3, [r6, #0]
 80074e8:	05db      	lsls	r3, r3, #23
 80074ea:	d5f6      	bpl.n	80074da <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074ec:	f7fc f8c8 	bl	8003680 <HAL_GetREVID>
 80074f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80074f4:	4298      	cmp	r0, r3
 80074f6:	f200 81e9 	bhi.w	80078cc <HAL_RCC_OscConfig+0x588>
 80074fa:	6a22      	ldr	r2, [r4, #32]
 80074fc:	6873      	ldr	r3, [r6, #4]
 80074fe:	2a20      	cmp	r2, #32
 8007500:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007504:	bf0c      	ite	eq
 8007506:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800750a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800750e:	6073      	str	r3, [r6, #4]
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	e774      	b.n	80073fe <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007514:	2b18      	cmp	r3, #24
 8007516:	f000 810b 	beq.w	8007730 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800751a:	68e2      	ldr	r2, [r4, #12]
 800751c:	2a00      	cmp	r2, #0
 800751e:	f000 80f3 	beq.w	8007708 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007522:	4941      	ldr	r1, [pc, #260]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 8007524:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007526:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007528:	f023 0319 	bic.w	r3, r3, #25
 800752c:	4313      	orrs	r3, r2
 800752e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8007530:	f7fc f88e 	bl	8003650 <HAL_GetTick>
 8007534:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007536:	e005      	b.n	8007544 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007538:	f7fc f88a 	bl	8003650 <HAL_GetTick>
 800753c:	1b40      	subs	r0, r0, r5
 800753e:	2802      	cmp	r0, #2
 8007540:	f200 8098 	bhi.w	8007674 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007544:	6833      	ldr	r3, [r6, #0]
 8007546:	075f      	lsls	r7, r3, #29
 8007548:	d5f6      	bpl.n	8007538 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800754a:	f7fc f899 	bl	8003680 <HAL_GetREVID>
 800754e:	f241 0303 	movw	r3, #4099	; 0x1003
 8007552:	4298      	cmp	r0, r3
 8007554:	f200 81c3 	bhi.w	80078de <HAL_RCC_OscConfig+0x59a>
 8007558:	6922      	ldr	r2, [r4, #16]
 800755a:	6873      	ldr	r3, [r6, #4]
 800755c:	2a40      	cmp	r2, #64	; 0x40
 800755e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007562:	bf0c      	ite	eq
 8007564:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8007568:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800756c:	6073      	str	r3, [r6, #4]
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	e743      	b.n	80073fa <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8007572:	4b2d      	ldr	r3, [pc, #180]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 8007574:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007576:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8007578:	f022 0201 	bic.w	r2, r2, #1
 800757c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800757e:	f7fc f867 	bl	8003650 <HAL_GetTick>
 8007582:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007584:	e004      	b.n	8007590 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007586:	f7fc f863 	bl	8003650 <HAL_GetTick>
 800758a:	1b40      	subs	r0, r0, r5
 800758c:	2802      	cmp	r0, #2
 800758e:	d871      	bhi.n	8007674 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007590:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007592:	0799      	lsls	r1, r3, #30
 8007594:	d4f7      	bmi.n	8007586 <HAL_RCC_OscConfig+0x242>
 8007596:	e74b      	b.n	8007430 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007598:	f002 0203 	and.w	r2, r2, #3
 800759c:	2a01      	cmp	r2, #1
 800759e:	d18e      	bne.n	80074be <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075a0:	4b21      	ldr	r3, [pc, #132]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	05da      	lsls	r2, r3, #23
 80075a6:	d552      	bpl.n	800764e <HAL_RCC_OscConfig+0x30a>
 80075a8:	69e3      	ldr	r3, [r4, #28]
 80075aa:	2b80      	cmp	r3, #128	; 0x80
 80075ac:	d04f      	beq.n	800764e <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 80075ae:	2001      	movs	r0, #1
}
 80075b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075b2:	f001 0103 	and.w	r1, r1, #3
 80075b6:	2902      	cmp	r1, #2
 80075b8:	f47f aed7 	bne.w	800736a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075bc:	4a1a      	ldr	r2, [pc, #104]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 80075be:	6812      	ldr	r2, [r2, #0]
 80075c0:	0392      	lsls	r2, r2, #14
 80075c2:	f57f aef6 	bpl.w	80073b2 <HAL_RCC_OscConfig+0x6e>
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	f47f aef2 	bne.w	80073b2 <HAL_RCC_OscConfig+0x6e>
 80075ce:	e7ee      	b.n	80075ae <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 80075d0:	4b16      	ldr	r3, [pc, #88]	; (800762c <HAL_RCC_OscConfig+0x2e8>)
 80075d2:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075d4:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80075d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075da:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80075dc:	f7fc f838 	bl	8003650 <HAL_GetTick>
 80075e0:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e2:	e004      	b.n	80075ee <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075e4:	f7fc f834 	bl	8003650 <HAL_GetTick>
 80075e8:	1b40      	subs	r0, r0, r5
 80075ea:	2864      	cmp	r0, #100	; 0x64
 80075ec:	d842      	bhi.n	8007674 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ee:	6833      	ldr	r3, [r6, #0]
 80075f0:	05da      	lsls	r2, r3, #23
 80075f2:	d5f7      	bpl.n	80075e4 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075f4:	68a3      	ldr	r3, [r4, #8]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	f000 817a 	beq.w	80078f0 <HAL_RCC_OscConfig+0x5ac>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 814b 	beq.w	8007898 <HAL_RCC_OscConfig+0x554>
 8007602:	2b05      	cmp	r3, #5
 8007604:	4b08      	ldr	r3, [pc, #32]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
 8007606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007608:	f000 8187 	beq.w	800791a <HAL_RCC_OscConfig+0x5d6>
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	671a      	str	r2, [r3, #112]	; 0x70
 8007612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007614:	f022 0204 	bic.w	r2, r2, #4
 8007618:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800761a:	f7fc f819 	bl	8003650 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800761e:	4e02      	ldr	r6, [pc, #8]	; (8007628 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007620:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007624:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x2f6>
 8007628:	58024400 	.word	0x58024400
 800762c:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007630:	f7fc f80e 	bl	8003650 <HAL_GetTick>
 8007634:	1b40      	subs	r0, r0, r5
 8007636:	42b8      	cmp	r0, r7
 8007638:	d81c      	bhi.n	8007674 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800763a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800763c:	079b      	lsls	r3, r3, #30
 800763e:	d5f7      	bpl.n	8007630 <HAL_RCC_OscConfig+0x2ec>
 8007640:	e714      	b.n	800746c <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007642:	4aae      	ldr	r2, [pc, #696]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 8007644:	6813      	ldr	r3, [r2, #0]
 8007646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800764a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800764c:	e6a2      	b.n	8007394 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800764e:	f7fc f817 	bl	8003680 <HAL_GetREVID>
 8007652:	f241 0303 	movw	r3, #4099	; 0x1003
 8007656:	4298      	cmp	r0, r3
 8007658:	d870      	bhi.n	800773c <HAL_RCC_OscConfig+0x3f8>
 800765a:	6a22      	ldr	r2, [r4, #32]
 800765c:	2a20      	cmp	r2, #32
 800765e:	f000 8153 	beq.w	8007908 <HAL_RCC_OscConfig+0x5c4>
 8007662:	49a6      	ldr	r1, [pc, #664]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 8007664:	684b      	ldr	r3, [r1, #4]
 8007666:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800766a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800766e:	604b      	str	r3, [r1, #4]
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	e6c4      	b.n	80073fe <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8007674:	2003      	movs	r0, #3
}
 8007676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007678:	4ba0      	ldr	r3, [pc, #640]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 800767a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800767c:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800767e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800768a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800768c:	f7fb ffe0 	bl	8003650 <HAL_GetTick>
 8007690:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007692:	e004      	b.n	800769e <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007694:	f7fb ffdc 	bl	8003650 <HAL_GetTick>
 8007698:	1b40      	subs	r0, r0, r5
 800769a:	2864      	cmp	r0, #100	; 0x64
 800769c:	d8ea      	bhi.n	8007674 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800769e:	6833      	ldr	r3, [r6, #0]
 80076a0:	0398      	lsls	r0, r3, #14
 80076a2:	d4f7      	bmi.n	8007694 <HAL_RCC_OscConfig+0x350>
 80076a4:	e684      	b.n	80073b0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 80076a6:	4b95      	ldr	r3, [pc, #596]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 80076a8:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076aa:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80076ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80076b2:	f7fb ffcd 	bl	8003650 <HAL_GetTick>
 80076b6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076b8:	e004      	b.n	80076c4 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80076ba:	f7fb ffc9 	bl	8003650 <HAL_GetTick>
 80076be:	1b40      	subs	r0, r0, r5
 80076c0:	2802      	cmp	r0, #2
 80076c2:	d8d7      	bhi.n	8007674 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076c4:	6833      	ldr	r3, [r6, #0]
 80076c6:	0498      	lsls	r0, r3, #18
 80076c8:	d4f7      	bmi.n	80076ba <HAL_RCC_OscConfig+0x376>
 80076ca:	e6cb      	b.n	8007464 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 80076cc:	4b8b      	ldr	r3, [pc, #556]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 80076ce:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076d0:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 80076d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80076d8:	f7fb ffba 	bl	8003650 <HAL_GetTick>
 80076dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076de:	e004      	b.n	80076ea <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80076e0:	f7fb ffb6 	bl	8003650 <HAL_GetTick>
 80076e4:	1b40      	subs	r0, r0, r5
 80076e6:	2802      	cmp	r0, #2
 80076e8:	d8c4      	bhi.n	8007674 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076ea:	6833      	ldr	r3, [r6, #0]
 80076ec:	05df      	lsls	r7, r3, #23
 80076ee:	d4f7      	bmi.n	80076e0 <HAL_RCC_OscConfig+0x39c>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	e684      	b.n	80073fe <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f4:	4a81      	ldr	r2, [pc, #516]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 80076f6:	6921      	ldr	r1, [r4, #16]
 80076f8:	6853      	ldr	r3, [r2, #4]
 80076fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80076fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007702:	6053      	str	r3, [r2, #4]
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	e678      	b.n	80073fa <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8007708:	4b7c      	ldr	r3, [pc, #496]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 800770a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800770c:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800770e:	f022 0201 	bic.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007714:	f7fb ff9c 	bl	8003650 <HAL_GetTick>
 8007718:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800771a:	e004      	b.n	8007726 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800771c:	f7fb ff98 	bl	8003650 <HAL_GetTick>
 8007720:	1b40      	subs	r0, r0, r5
 8007722:	2802      	cmp	r0, #2
 8007724:	d8a6      	bhi.n	8007674 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007726:	6833      	ldr	r3, [r6, #0]
 8007728:	0758      	lsls	r0, r3, #29
 800772a:	d4f7      	bmi.n	800771c <HAL_RCC_OscConfig+0x3d8>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	e664      	b.n	80073fa <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007730:	0792      	lsls	r2, r2, #30
 8007732:	f47f aef2 	bne.w	800751a <HAL_RCC_OscConfig+0x1d6>
 8007736:	e645      	b.n	80073c4 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8007738:	2001      	movs	r0, #1
}
 800773a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800773c:	4a6f      	ldr	r2, [pc, #444]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 800773e:	6a21      	ldr	r1, [r4, #32]
 8007740:	68d3      	ldr	r3, [r2, #12]
 8007742:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007746:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800774a:	60d3      	str	r3, [r2, #12]
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	e656      	b.n	80073fe <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8007750:	f7fb ff7e 	bl	8003650 <HAL_GetTick>
 8007754:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007756:	e004      	b.n	8007762 <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007758:	f7fb ff7a 	bl	8003650 <HAL_GetTick>
 800775c:	1b80      	subs	r0, r0, r6
 800775e:	2802      	cmp	r0, #2
 8007760:	d888      	bhi.n	8007674 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007762:	682b      	ldr	r3, [r5, #0]
 8007764:	0199      	lsls	r1, r3, #6
 8007766:	d4f7      	bmi.n	8007758 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007768:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800776a:	4b65      	ldr	r3, [pc, #404]	; (8007900 <HAL_RCC_OscConfig+0x5bc>)
 800776c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800776e:	4013      	ands	r3, r2
 8007770:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007772:	4964      	ldr	r1, [pc, #400]	; (8007904 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007774:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007776:	4e61      	ldr	r6, [pc, #388]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007778:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800777c:	62ab      	str	r3, [r5, #40]	; 0x28
 800777e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007780:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8007784:	3f01      	subs	r7, #1
 8007786:	1e50      	subs	r0, r2, #1
 8007788:	3b01      	subs	r3, #1
 800778a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800778c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007790:	025b      	lsls	r3, r3, #9
 8007792:	0400      	lsls	r0, r0, #16
 8007794:	3a01      	subs	r2, #1
 8007796:	b29b      	uxth	r3, r3
 8007798:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800779c:	0612      	lsls	r2, r2, #24
 800779e:	4303      	orrs	r3, r0
 80077a0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80077a4:	433b      	orrs	r3, r7
 80077a6:	4313      	orrs	r3, r2
 80077a8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80077aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077b2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80077b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80077b6:	4011      	ands	r1, r2
 80077b8:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80077bc:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80077be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80077c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80077c2:	f023 030c 	bic.w	r3, r3, #12
 80077c6:	4313      	orrs	r3, r2
 80077c8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80077ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80077cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80077ce:	f023 0302 	bic.w	r3, r3, #2
 80077d2:	4313      	orrs	r3, r2
 80077d4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80077d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077dc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80077e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077e4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80077e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80077e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077ec:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80077ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80077f6:	682b      	ldr	r3, [r5, #0]
 80077f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80077fe:	f7fb ff27 	bl	8003650 <HAL_GetTick>
 8007802:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007804:	e005      	b.n	8007812 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007806:	f7fb ff23 	bl	8003650 <HAL_GetTick>
 800780a:	1b00      	subs	r0, r0, r4
 800780c:	2802      	cmp	r0, #2
 800780e:	f63f af31 	bhi.w	8007674 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007812:	6833      	ldr	r3, [r6, #0]
 8007814:	019a      	lsls	r2, r3, #6
 8007816:	d5f6      	bpl.n	8007806 <HAL_RCC_OscConfig+0x4c2>
 8007818:	e646      	b.n	80074a8 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800781a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800781c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800781e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007820:	f43f ae43 	beq.w	80074aa <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007824:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007828:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800782a:	428b      	cmp	r3, r1
 800782c:	f47f aebf 	bne.w	80075ae <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007830:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007836:	429a      	cmp	r2, r3
 8007838:	f47f aeb9 	bne.w	80075ae <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800783c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800783e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8007842:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007844:	429a      	cmp	r2, r3
 8007846:	f47f aeb2 	bne.w	80075ae <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800784a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800784c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8007850:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007852:	429a      	cmp	r2, r3
 8007854:	f47f aeab 	bne.w	80075ae <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007858:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800785a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800785e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007860:	429a      	cmp	r2, r3
 8007862:	f47f aea4 	bne.w	80075ae <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007866:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007868:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800786c:	3801      	subs	r0, #1
  return HAL_OK;
 800786e:	1a28      	subs	r0, r5, r0
 8007870:	bf18      	it	ne
 8007872:	2001      	movne	r0, #1
}
 8007874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007876:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	e586      	b.n	8007394 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007886:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 8007888:	6853      	ldr	r3, [r2, #4]
 800788a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800788e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007892:	6053      	str	r3, [r2, #4]
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	e5b0      	b.n	80073fa <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007898:	4b18      	ldr	r3, [pc, #96]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800789a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800789e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078a0:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078a2:	f022 0201 	bic.w	r2, r2, #1
 80078a6:	671a      	str	r2, [r3, #112]	; 0x70
 80078a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078aa:	f022 0204 	bic.w	r2, r2, #4
 80078ae:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80078b0:	f7fb fece 	bl	8003650 <HAL_GetTick>
 80078b4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078b6:	e005      	b.n	80078c4 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078b8:	f7fb feca 	bl	8003650 <HAL_GetTick>
 80078bc:	1b40      	subs	r0, r0, r5
 80078be:	42b8      	cmp	r0, r7
 80078c0:	f63f aed8 	bhi.w	8007674 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078c4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80078c6:	0798      	lsls	r0, r3, #30
 80078c8:	d4f6      	bmi.n	80078b8 <HAL_RCC_OscConfig+0x574>
 80078ca:	e5cf      	b.n	800746c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078cc:	68f3      	ldr	r3, [r6, #12]
 80078ce:	6a22      	ldr	r2, [r4, #32]
 80078d0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80078d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80078d8:	60f3      	str	r3, [r6, #12]
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	e58f      	b.n	80073fe <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078de:	6873      	ldr	r3, [r6, #4]
 80078e0:	6922      	ldr	r2, [r4, #16]
 80078e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80078ea:	6073      	str	r3, [r6, #4]
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	e584      	b.n	80073fa <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078f0:	4a02      	ldr	r2, [pc, #8]	; (80078fc <HAL_RCC_OscConfig+0x5b8>)
 80078f2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80078f4:	f043 0301 	orr.w	r3, r3, #1
 80078f8:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078fa:	e68e      	b.n	800761a <HAL_RCC_OscConfig+0x2d6>
 80078fc:	58024400 	.word	0x58024400
 8007900:	fffffc0c 	.word	0xfffffc0c
 8007904:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007908:	4a08      	ldr	r2, [pc, #32]	; (800792c <HAL_RCC_OscConfig+0x5e8>)
 800790a:	6853      	ldr	r3, [r2, #4]
 800790c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007914:	6053      	str	r3, [r2, #4]
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	e571      	b.n	80073fe <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800791a:	f042 0204 	orr.w	r2, r2, #4
 800791e:	671a      	str	r2, [r3, #112]	; 0x70
 8007920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	671a      	str	r2, [r3, #112]	; 0x70
 8007928:	e677      	b.n	800761a <HAL_RCC_OscConfig+0x2d6>
 800792a:	bf00      	nop
 800792c:	58024400 	.word	0x58024400

08007930 <HAL_RCC_MCOConfig>:
{
 8007930:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8007934:	460d      	mov	r5, r1
 8007936:	b088      	sub	sp, #32
 8007938:	4614      	mov	r4, r2
  if(RCC_MCOx == RCC_MCO1)
 800793a:	bb28      	cbnz	r0, 8007988 <HAL_RCC_MCOConfig+0x58>
    MCO1_CLK_ENABLE();
 800793c:	4e27      	ldr	r6, [pc, #156]	; (80079dc <HAL_RCC_MCOConfig+0xac>)
 800793e:	4603      	mov	r3, r0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007940:	f44f 7880 	mov.w	r8, #256	; 0x100
 8007944:	f04f 0902 	mov.w	r9, #2
    MCO1_CLK_ENABLE();
 8007948:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800794c:	a902      	add	r1, sp, #8
 800794e:	4824      	ldr	r0, [pc, #144]	; (80079e0 <HAL_RCC_MCOConfig+0xb0>)
    MCO1_CLK_ENABLE();
 8007950:	f042 0201 	orr.w	r2, r2, #1
 8007954:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 8007958:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800795c:	9306      	str	r3, [sp, #24]
    MCO1_CLK_ENABLE();
 800795e:	f002 0201 	and.w	r2, r2, #1
 8007962:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007964:	2200      	movs	r2, #0
    MCO1_CLK_ENABLE();
 8007966:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007968:	2303      	movs	r3, #3
 800796a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800796e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007972:	f7fe fd13 	bl	800639c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007976:	6932      	ldr	r2, [r6, #16]
 8007978:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 800797c:	432a      	orrs	r2, r5
 800797e:	4322      	orrs	r2, r4
 8007980:	6132      	str	r2, [r6, #16]
}
 8007982:	b008      	add	sp, #32
 8007984:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MCO2_CLK_ENABLE();
 8007988:	4e14      	ldr	r6, [pc, #80]	; (80079dc <HAL_RCC_MCOConfig+0xac>)
    GPIO_InitStruct.Pin = MCO2_PIN;
 800798a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800798e:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007990:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
 8007992:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007996:	f04f 0800 	mov.w	r8, #0
 800799a:	f04f 0903 	mov.w	r9, #3
    MCO2_CLK_ENABLE();
 800799e:	f043 0304 	orr.w	r3, r3, #4
 80079a2:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80079a6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80079aa:	9206      	str	r2, [sp, #24]
    MCO2_CLK_ENABLE();
 80079ac:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 80079b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    MCO2_CLK_ENABLE();
 80079b4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80079b6:	a902      	add	r1, sp, #8
 80079b8:	480a      	ldr	r0, [pc, #40]	; (80079e4 <HAL_RCC_MCOConfig+0xb4>)
    MCO2_CLK_ENABLE();
 80079ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80079bc:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80079c0:	f7fe fcec 	bl	800639c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80079c4:	6933      	ldr	r3, [r6, #16]
 80079c6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80079ca:	ea43 0105 	orr.w	r1, r3, r5
 80079ce:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 80079d2:	6131      	str	r1, [r6, #16]
}
 80079d4:	b008      	add	sp, #32
 80079d6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80079da:	bf00      	nop
 80079dc:	58024400 	.word	0x58024400
 80079e0:	58020000 	.word	0x58020000
 80079e4:	58020800 	.word	0x58020800

080079e8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079e8:	4a47      	ldr	r2, [pc, #284]	; (8007b08 <HAL_RCC_GetSysClockFreq+0x120>)
 80079ea:	6913      	ldr	r3, [r2, #16]
 80079ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079f0:	2b10      	cmp	r3, #16
 80079f2:	d004      	beq.n	80079fe <HAL_RCC_GetSysClockFreq+0x16>
 80079f4:	2b18      	cmp	r3, #24
 80079f6:	d00d      	beq.n	8007a14 <HAL_RCC_GetSysClockFreq+0x2c>
 80079f8:	b11b      	cbz	r3, 8007a02 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 80079fa:	4844      	ldr	r0, [pc, #272]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x124>)
 80079fc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079fe:	4844      	ldr	r0, [pc, #272]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x128>)
 8007a00:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a02:	6813      	ldr	r3, [r2, #0]
 8007a04:	0699      	lsls	r1, r3, #26
 8007a06:	d54a      	bpl.n	8007a9e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a08:	6813      	ldr	r3, [r2, #0]
 8007a0a:	4842      	ldr	r0, [pc, #264]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007a0c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007a10:	40d8      	lsrs	r0, r3
 8007a12:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a14:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8007a16:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a18:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8007a1c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a20:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a24:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8007a26:	d038      	beq.n	8007a9a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a28:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a2c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a30:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a34:	fb01 f105 	mul.w	r1, r1, r5
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	ee07 1a90 	vmov	s15, r1
 8007a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8007a42:	d002      	beq.n	8007a4a <HAL_RCC_GetSysClockFreq+0x62>
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d02c      	beq.n	8007aa2 <HAL_RCC_GetSysClockFreq+0xba>
 8007a48:	b393      	cbz	r3, 8007ab0 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a4a:	ee07 0a90 	vmov	s15, r0
 8007a4e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8007b18 <HAL_RCC_GetSysClockFreq+0x130>
 8007a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007a58:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8007a5c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8007b1c <HAL_RCC_GetSysClockFreq+0x134>
 8007a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a64:	ee06 3a90 	vmov	s13, r3
 8007a68:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8007a6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007a70:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007a74:	eee7 6a25 	vfma.f32	s13, s14, s11
 8007a78:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007a7c:	4b22      	ldr	r3, [pc, #136]	; (8007b08 <HAL_RCC_GetSysClockFreq+0x120>)
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007a84:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a96:	ee17 0a90 	vmov	r0, s15
}
 8007a9a:	bc30      	pop	{r4, r5}
 8007a9c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a9e:	481d      	ldr	r0, [pc, #116]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8007aa0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007aa2:	ee07 0a90 	vmov	s15, r0
 8007aa6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8007b20 <HAL_RCC_GetSysClockFreq+0x138>
 8007aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aae:	e7d2      	b.n	8007a56 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ab0:	6813      	ldr	r3, [r2, #0]
 8007ab2:	069b      	lsls	r3, r3, #26
 8007ab4:	d520      	bpl.n	8007af8 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ab6:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ab8:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007abc:	4915      	ldr	r1, [pc, #84]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007abe:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ac2:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aca:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007acc:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ace:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8007b1c <HAL_RCC_GetSysClockFreq+0x134>
 8007ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad6:	ee06 1a10 	vmov	s12, r1
 8007ada:	ee06 3a90 	vmov	s13, r3
 8007ade:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8007ae2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007ae6:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8007aea:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007aee:	eee7 6a05 	vfma.f32	s13, s14, s10
 8007af2:	ee66 6a26 	vmul.f32	s13, s12, s13
 8007af6:	e7c1      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007af8:	ee07 0a90 	vmov	s15, r0
 8007afc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007b24 <HAL_RCC_GetSysClockFreq+0x13c>
 8007b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b04:	e7a7      	b.n	8007a56 <HAL_RCC_GetSysClockFreq+0x6e>
 8007b06:	bf00      	nop
 8007b08:	58024400 	.word	0x58024400
 8007b0c:	003d0900 	.word	0x003d0900
 8007b10:	017d7840 	.word	0x017d7840
 8007b14:	03d09000 	.word	0x03d09000
 8007b18:	4a742400 	.word	0x4a742400
 8007b1c:	39000000 	.word	0x39000000
 8007b20:	4bbebc20 	.word	0x4bbebc20
 8007b24:	4c742400 	.word	0x4c742400

08007b28 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f000 810e 	beq.w	8007d4a <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b2e:	4a8d      	ldr	r2, [pc, #564]	; (8007d64 <HAL_RCC_ClockConfig+0x23c>)
 8007b30:	6813      	ldr	r3, [r2, #0]
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	428b      	cmp	r3, r1
{
 8007b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b40:	d20c      	bcs.n	8007b5c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b42:	6813      	ldr	r3, [r2, #0]
 8007b44:	f023 030f 	bic.w	r3, r3, #15
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b4c:	6813      	ldr	r3, [r2, #0]
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	428b      	cmp	r3, r1
 8007b54:	d002      	beq.n	8007b5c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007b56:	2001      	movs	r0, #1
}
 8007b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	075f      	lsls	r7, r3, #29
 8007b60:	d50b      	bpl.n	8007b7a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b62:	4981      	ldr	r1, [pc, #516]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007b64:	6920      	ldr	r0, [r4, #16]
 8007b66:	698a      	ldr	r2, [r1, #24]
 8007b68:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007b6c:	4290      	cmp	r0, r2
 8007b6e:	d904      	bls.n	8007b7a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b70:	698a      	ldr	r2, [r1, #24]
 8007b72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007b76:	4302      	orrs	r2, r0
 8007b78:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b7a:	071e      	lsls	r6, r3, #28
 8007b7c:	d50b      	bpl.n	8007b96 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b7e:	497a      	ldr	r1, [pc, #488]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007b80:	6960      	ldr	r0, [r4, #20]
 8007b82:	69ca      	ldr	r2, [r1, #28]
 8007b84:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007b88:	4290      	cmp	r0, r2
 8007b8a:	d904      	bls.n	8007b96 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b8c:	69ca      	ldr	r2, [r1, #28]
 8007b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007b92:	4302      	orrs	r2, r0
 8007b94:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b96:	06d8      	lsls	r0, r3, #27
 8007b98:	d50b      	bpl.n	8007bb2 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b9a:	4973      	ldr	r1, [pc, #460]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007b9c:	69a0      	ldr	r0, [r4, #24]
 8007b9e:	69ca      	ldr	r2, [r1, #28]
 8007ba0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007ba4:	4290      	cmp	r0, r2
 8007ba6:	d904      	bls.n	8007bb2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ba8:	69ca      	ldr	r2, [r1, #28]
 8007baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bae:	4302      	orrs	r2, r0
 8007bb0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007bb2:	0699      	lsls	r1, r3, #26
 8007bb4:	d50b      	bpl.n	8007bce <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007bb6:	496c      	ldr	r1, [pc, #432]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007bb8:	69e0      	ldr	r0, [r4, #28]
 8007bba:	6a0a      	ldr	r2, [r1, #32]
 8007bbc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007bc0:	4290      	cmp	r0, r2
 8007bc2:	d904      	bls.n	8007bce <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007bc4:	6a0a      	ldr	r2, [r1, #32]
 8007bc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007bca:	4302      	orrs	r2, r0
 8007bcc:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bce:	079a      	lsls	r2, r3, #30
 8007bd0:	f140 80ad 	bpl.w	8007d2e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bd4:	4864      	ldr	r0, [pc, #400]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007bd6:	68e1      	ldr	r1, [r4, #12]
 8007bd8:	6982      	ldr	r2, [r0, #24]
 8007bda:	f002 020f 	and.w	r2, r2, #15
 8007bde:	4291      	cmp	r1, r2
 8007be0:	d904      	bls.n	8007bec <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007be2:	6982      	ldr	r2, [r0, #24]
 8007be4:	f022 020f 	bic.w	r2, r2, #15
 8007be8:	430a      	orrs	r2, r1
 8007bea:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bec:	07d8      	lsls	r0, r3, #31
 8007bee:	d531      	bpl.n	8007c54 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007bf0:	4a5d      	ldr	r2, [pc, #372]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007bf2:	68a1      	ldr	r1, [r4, #8]
 8007bf4:	6993      	ldr	r3, [r2, #24]
 8007bf6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bfe:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c00:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c02:	2902      	cmp	r1, #2
 8007c04:	f000 80a3 	beq.w	8007d4e <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c08:	2903      	cmp	r1, #3
 8007c0a:	f000 809a 	beq.w	8007d42 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007c0e:	2901      	cmp	r1, #1
 8007c10:	f000 80a3 	beq.w	8007d5a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c14:	0758      	lsls	r0, r3, #29
 8007c16:	d59e      	bpl.n	8007b56 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c18:	4a53      	ldr	r2, [pc, #332]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c1a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c1e:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c20:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c22:	f023 0307 	bic.w	r3, r3, #7
 8007c26:	430b      	orrs	r3, r1
 8007c28:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8007c2a:	f7fb fd11 	bl	8003650 <HAL_GetTick>
 8007c2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c30:	e005      	b.n	8007c3e <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c32:	f7fb fd0d 	bl	8003650 <HAL_GetTick>
 8007c36:	1b80      	subs	r0, r0, r6
 8007c38:	4540      	cmp	r0, r8
 8007c3a:	f200 808c 	bhi.w	8007d56 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	6862      	ldr	r2, [r4, #4]
 8007c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c46:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007c4a:	d1f2      	bne.n	8007c32 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	0799      	lsls	r1, r3, #30
 8007c50:	d506      	bpl.n	8007c60 <HAL_RCC_ClockConfig+0x138>
 8007c52:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c54:	4844      	ldr	r0, [pc, #272]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007c56:	6982      	ldr	r2, [r0, #24]
 8007c58:	f002 020f 	and.w	r2, r2, #15
 8007c5c:	428a      	cmp	r2, r1
 8007c5e:	d86a      	bhi.n	8007d36 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c60:	4940      	ldr	r1, [pc, #256]	; (8007d64 <HAL_RCC_ClockConfig+0x23c>)
 8007c62:	680a      	ldr	r2, [r1, #0]
 8007c64:	f002 020f 	and.w	r2, r2, #15
 8007c68:	42aa      	cmp	r2, r5
 8007c6a:	d90a      	bls.n	8007c82 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c6c:	680a      	ldr	r2, [r1, #0]
 8007c6e:	f022 020f 	bic.w	r2, r2, #15
 8007c72:	432a      	orrs	r2, r5
 8007c74:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c76:	680a      	ldr	r2, [r1, #0]
 8007c78:	f002 020f 	and.w	r2, r2, #15
 8007c7c:	42aa      	cmp	r2, r5
 8007c7e:	f47f af6a 	bne.w	8007b56 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c82:	075a      	lsls	r2, r3, #29
 8007c84:	d50b      	bpl.n	8007c9e <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c86:	4938      	ldr	r1, [pc, #224]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007c88:	6920      	ldr	r0, [r4, #16]
 8007c8a:	698a      	ldr	r2, [r1, #24]
 8007c8c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007c90:	4290      	cmp	r0, r2
 8007c92:	d204      	bcs.n	8007c9e <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c94:	698a      	ldr	r2, [r1, #24]
 8007c96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007c9a:	4302      	orrs	r2, r0
 8007c9c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c9e:	071f      	lsls	r7, r3, #28
 8007ca0:	d50b      	bpl.n	8007cba <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ca2:	4931      	ldr	r1, [pc, #196]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007ca4:	6960      	ldr	r0, [r4, #20]
 8007ca6:	69ca      	ldr	r2, [r1, #28]
 8007ca8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007cac:	4290      	cmp	r0, r2
 8007cae:	d204      	bcs.n	8007cba <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cb0:	69ca      	ldr	r2, [r1, #28]
 8007cb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007cb6:	4302      	orrs	r2, r0
 8007cb8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cba:	06de      	lsls	r6, r3, #27
 8007cbc:	d50b      	bpl.n	8007cd6 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007cbe:	492a      	ldr	r1, [pc, #168]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007cc0:	69a0      	ldr	r0, [r4, #24]
 8007cc2:	69ca      	ldr	r2, [r1, #28]
 8007cc4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007cc8:	4290      	cmp	r0, r2
 8007cca:	d204      	bcs.n	8007cd6 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ccc:	69ca      	ldr	r2, [r1, #28]
 8007cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cd2:	4302      	orrs	r2, r0
 8007cd4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cd6:	069d      	lsls	r5, r3, #26
 8007cd8:	d50b      	bpl.n	8007cf2 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007cda:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007cdc:	69e1      	ldr	r1, [r4, #28]
 8007cde:	6a13      	ldr	r3, [r2, #32]
 8007ce0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ce4:	4299      	cmp	r1, r3
 8007ce6:	d204      	bcs.n	8007cf2 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ce8:	6a13      	ldr	r3, [r2, #32]
 8007cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cee:	430b      	orrs	r3, r1
 8007cf0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007cf2:	f7ff fe79 	bl	80079e8 <HAL_RCC_GetSysClockFreq>
 8007cf6:	4b1c      	ldr	r3, [pc, #112]	; (8007d68 <HAL_RCC_ClockConfig+0x240>)
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	481c      	ldr	r0, [pc, #112]	; (8007d6c <HAL_RCC_ClockConfig+0x244>)
 8007cfc:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cfe:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d00:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8007d04:	4d1a      	ldr	r5, [pc, #104]	; (8007d70 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	4c1a      	ldr	r4, [pc, #104]	; (8007d74 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d0c:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d0e:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d10:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8007d14:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d16:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8007d1a:	4d17      	ldr	r5, [pc, #92]	; (8007d78 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d1c:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d1e:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8007d22:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d24:	6023      	str	r3, [r4, #0]
}
 8007d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8007d2a:	f7fb bc2f 	b.w	800358c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d2e:	07da      	lsls	r2, r3, #31
 8007d30:	f53f af5e 	bmi.w	8007bf0 <HAL_RCC_ClockConfig+0xc8>
 8007d34:	e794      	b.n	8007c60 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d36:	6982      	ldr	r2, [r0, #24]
 8007d38:	f022 020f 	bic.w	r2, r2, #15
 8007d3c:	4311      	orrs	r1, r2
 8007d3e:	6181      	str	r1, [r0, #24]
 8007d40:	e78e      	b.n	8007c60 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d42:	019f      	lsls	r7, r3, #6
 8007d44:	f53f af68 	bmi.w	8007c18 <HAL_RCC_ClockConfig+0xf0>
 8007d48:	e705      	b.n	8007b56 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8007d4a:	2001      	movs	r0, #1
}
 8007d4c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d4e:	039b      	lsls	r3, r3, #14
 8007d50:	f53f af62 	bmi.w	8007c18 <HAL_RCC_ClockConfig+0xf0>
 8007d54:	e6ff      	b.n	8007b56 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8007d56:	2003      	movs	r0, #3
 8007d58:	e6fe      	b.n	8007b58 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d5a:	05de      	lsls	r6, r3, #23
 8007d5c:	f53f af5c 	bmi.w	8007c18 <HAL_RCC_ClockConfig+0xf0>
 8007d60:	e6f9      	b.n	8007b56 <HAL_RCC_ClockConfig+0x2e>
 8007d62:	bf00      	nop
 8007d64:	52002000 	.word	0x52002000
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	08017344 	.word	0x08017344
 8007d70:	24000200 	.word	0x24000200
 8007d74:	240001f8 	.word	0x240001f8
 8007d78:	240001f4 	.word	0x240001f4

08007d7c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d7c:	4a18      	ldr	r2, [pc, #96]	; (8007de0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d7e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d80:	6913      	ldr	r3, [r2, #16]
 8007d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d86:	2b10      	cmp	r3, #16
 8007d88:	d01a      	beq.n	8007dc0 <HAL_RCC_GetHCLKFreq+0x44>
 8007d8a:	2b18      	cmp	r3, #24
 8007d8c:	d023      	beq.n	8007dd6 <HAL_RCC_GetHCLKFreq+0x5a>
 8007d8e:	b1cb      	cbz	r3, 8007dc4 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8007d90:	4814      	ldr	r0, [pc, #80]	; (8007de4 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d92:	4b13      	ldr	r3, [pc, #76]	; (8007de0 <HAL_RCC_GetHCLKFreq+0x64>)
 8007d94:	4914      	ldr	r1, [pc, #80]	; (8007de8 <HAL_RCC_GetHCLKFreq+0x6c>)
 8007d96:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d98:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d9a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d9e:	4c13      	ldr	r4, [pc, #76]	; (8007dec <HAL_RCC_GetHCLKFreq+0x70>)
 8007da0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007da4:	4d12      	ldr	r5, [pc, #72]	; (8007df0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007da6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007da8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007daa:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007dae:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007db2:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007db6:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8007dba:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007dbc:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dc0:	480c      	ldr	r0, [pc, #48]	; (8007df4 <HAL_RCC_GetHCLKFreq+0x78>)
 8007dc2:	e7e6      	b.n	8007d92 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc4:	6813      	ldr	r3, [r2, #0]
 8007dc6:	069b      	lsls	r3, r3, #26
 8007dc8:	d508      	bpl.n	8007ddc <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	480a      	ldr	r0, [pc, #40]	; (8007df8 <HAL_RCC_GetHCLKFreq+0x7c>)
 8007dce:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007dd2:	40d0      	lsrs	r0, r2
 8007dd4:	e7dd      	b.n	8007d92 <HAL_RCC_GetHCLKFreq+0x16>
 8007dd6:	f7ff fa31 	bl	800723c <HAL_RCC_GetSysClockFreq.part.0>
 8007dda:	e7da      	b.n	8007d92 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ddc:	4806      	ldr	r0, [pc, #24]	; (8007df8 <HAL_RCC_GetHCLKFreq+0x7c>)
 8007dde:	e7d8      	b.n	8007d92 <HAL_RCC_GetHCLKFreq+0x16>
 8007de0:	58024400 	.word	0x58024400
 8007de4:	003d0900 	.word	0x003d0900
 8007de8:	08017344 	.word	0x08017344
 8007dec:	240001f8 	.word	0x240001f8
 8007df0:	240001f4 	.word	0x240001f4
 8007df4:	017d7840 	.word	0x017d7840
 8007df8:	03d09000 	.word	0x03d09000

08007dfc <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dfc:	4a1c      	ldr	r2, [pc, #112]	; (8007e70 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dfe:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e00:	6913      	ldr	r3, [r2, #16]
 8007e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d021      	beq.n	8007e4e <HAL_RCC_GetPCLK1Freq+0x52>
 8007e0a:	2b18      	cmp	r3, #24
 8007e0c:	d02a      	beq.n	8007e64 <HAL_RCC_GetPCLK1Freq+0x68>
 8007e0e:	b303      	cbz	r3, 8007e52 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8007e10:	4818      	ldr	r0, [pc, #96]	; (8007e74 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e12:	4a17      	ldr	r2, [pc, #92]	; (8007e70 <HAL_RCC_GetPCLK1Freq+0x74>)
 8007e14:	4918      	ldr	r1, [pc, #96]	; (8007e78 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8007e16:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e18:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e1a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8007e1e:	4d17      	ldr	r5, [pc, #92]	; (8007e7c <HAL_RCC_GetPCLK1Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e20:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e24:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e26:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e28:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e2c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e30:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e32:	4c13      	ldr	r4, [pc, #76]	; (8007e80 <HAL_RCC_GetPCLK1Freq+0x84>)
 8007e34:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8007e38:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e3a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e3c:	69d2      	ldr	r2, [r2, #28]
 8007e3e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007e42:	5c88      	ldrb	r0, [r1, r2]
 8007e44:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e48:	fa23 f000 	lsr.w	r0, r3, r0
 8007e4c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e4e:	480d      	ldr	r0, [pc, #52]	; (8007e84 <HAL_RCC_GetPCLK1Freq+0x88>)
 8007e50:	e7df      	b.n	8007e12 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	069b      	lsls	r3, r3, #26
 8007e56:	d508      	bpl.n	8007e6a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e58:	6813      	ldr	r3, [r2, #0]
 8007e5a:	480b      	ldr	r0, [pc, #44]	; (8007e88 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8007e5c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007e60:	40d8      	lsrs	r0, r3
 8007e62:	e7d6      	b.n	8007e12 <HAL_RCC_GetPCLK1Freq+0x16>
 8007e64:	f7ff f9ea 	bl	800723c <HAL_RCC_GetSysClockFreq.part.0>
 8007e68:	e7d3      	b.n	8007e12 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e6a:	4807      	ldr	r0, [pc, #28]	; (8007e88 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8007e6c:	e7d1      	b.n	8007e12 <HAL_RCC_GetPCLK1Freq+0x16>
 8007e6e:	bf00      	nop
 8007e70:	58024400 	.word	0x58024400
 8007e74:	003d0900 	.word	0x003d0900
 8007e78:	08017344 	.word	0x08017344
 8007e7c:	240001f4 	.word	0x240001f4
 8007e80:	240001f8 	.word	0x240001f8
 8007e84:	017d7840 	.word	0x017d7840
 8007e88:	03d09000 	.word	0x03d09000

08007e8c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e8c:	4a1c      	ldr	r2, [pc, #112]	; (8007f00 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e8e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e90:	6913      	ldr	r3, [r2, #16]
 8007e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e96:	2b10      	cmp	r3, #16
 8007e98:	d021      	beq.n	8007ede <HAL_RCC_GetPCLK2Freq+0x52>
 8007e9a:	2b18      	cmp	r3, #24
 8007e9c:	d02a      	beq.n	8007ef4 <HAL_RCC_GetPCLK2Freq+0x68>
 8007e9e:	b303      	cbz	r3, 8007ee2 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8007ea0:	4818      	ldr	r0, [pc, #96]	; (8007f04 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ea2:	4a17      	ldr	r2, [pc, #92]	; (8007f00 <HAL_RCC_GetPCLK2Freq+0x74>)
 8007ea4:	4918      	ldr	r1, [pc, #96]	; (8007f08 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8007ea6:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ea8:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007eaa:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8007eae:	4d17      	ldr	r5, [pc, #92]	; (8007f0c <HAL_RCC_GetPCLK2Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007eb0:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007eb4:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007eb8:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ebc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ec0:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ec2:	4c13      	ldr	r4, [pc, #76]	; (8007f10 <HAL_RCC_GetPCLK2Freq+0x84>)
 8007ec4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8007ec8:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007eca:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ecc:	69d2      	ldr	r2, [r2, #28]
 8007ece:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8007ed2:	5c88      	ldrb	r0, [r1, r2]
 8007ed4:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ed8:	fa23 f000 	lsr.w	r0, r3, r0
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ede:	480d      	ldr	r0, [pc, #52]	; (8007f14 <HAL_RCC_GetPCLK2Freq+0x88>)
 8007ee0:	e7df      	b.n	8007ea2 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ee2:	6813      	ldr	r3, [r2, #0]
 8007ee4:	069b      	lsls	r3, r3, #26
 8007ee6:	d508      	bpl.n	8007efa <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ee8:	6813      	ldr	r3, [r2, #0]
 8007eea:	480b      	ldr	r0, [pc, #44]	; (8007f18 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8007eec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007ef0:	40d8      	lsrs	r0, r3
 8007ef2:	e7d6      	b.n	8007ea2 <HAL_RCC_GetPCLK2Freq+0x16>
 8007ef4:	f7ff f9a2 	bl	800723c <HAL_RCC_GetSysClockFreq.part.0>
 8007ef8:	e7d3      	b.n	8007ea2 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007efa:	4807      	ldr	r0, [pc, #28]	; (8007f18 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8007efc:	e7d1      	b.n	8007ea2 <HAL_RCC_GetPCLK2Freq+0x16>
 8007efe:	bf00      	nop
 8007f00:	58024400 	.word	0x58024400
 8007f04:	003d0900 	.word	0x003d0900
 8007f08:	08017344 	.word	0x08017344
 8007f0c:	240001f4 	.word	0x240001f4
 8007f10:	240001f8 	.word	0x240001f8
 8007f14:	017d7840 	.word	0x017d7840
 8007f18:	03d09000 	.word	0x03d09000

08007f1c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f1c:	4a3b      	ldr	r2, [pc, #236]	; (800800c <RCCEx_PLL2_Config+0xf0>)
{
 8007f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f20:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d069      	beq.n	8007ffe <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f2a:	6813      	ldr	r3, [r2, #0]
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f30:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8007f32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f36:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007f38:	f7fb fb8a 	bl	8003650 <HAL_GetTick>
 8007f3c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f3e:	e004      	b.n	8007f4a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f40:	f7fb fb86 	bl	8003650 <HAL_GetTick>
 8007f44:	1b43      	subs	r3, r0, r5
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d857      	bhi.n	8007ffa <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	011a      	lsls	r2, r3, #4
 8007f4e:	d4f7      	bmi.n	8007f40 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f52:	6832      	ldr	r2, [r6, #0]
 8007f54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007f58:	492d      	ldr	r1, [pc, #180]	; (8008010 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f5a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007f5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f60:	6875      	ldr	r5, [r6, #4]
 8007f62:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007f66:	3d01      	subs	r5, #1
 8007f68:	1e50      	subs	r0, r2, #1
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	6932      	ldr	r2, [r6, #16]
 8007f6e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8007f72:	025b      	lsls	r3, r3, #9
 8007f74:	0400      	lsls	r0, r0, #16
 8007f76:	3a01      	subs	r2, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8007f7e:	0612      	lsls	r2, r2, #24
 8007f80:	4303      	orrs	r3, r0
 8007f82:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007f86:	432b      	orrs	r3, r5
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007f8e:	6972      	ldr	r2, [r6, #20]
 8007f90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f94:	4313      	orrs	r3, r2
 8007f96:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007f9a:	69b2      	ldr	r2, [r6, #24]
 8007f9c:	f023 0320 	bic.w	r3, r3, #32
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fa6:	f023 0310 	bic.w	r3, r3, #16
 8007faa:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007fae:	69f3      	ldr	r3, [r6, #28]
 8007fb0:	4011      	ands	r1, r2
 8007fb2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8007fb6:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007fb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fba:	f043 0310 	orr.w	r3, r3, #16
 8007fbe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007fc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007fc2:	b1f7      	cbz	r7, 8008002 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007fc4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007fc6:	bf0c      	ite	eq
 8007fc8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007fcc:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8007fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007fd2:	4b0e      	ldr	r3, [pc, #56]	; (800800c <RCCEx_PLL2_Config+0xf0>)
 8007fd4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fd6:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8007fd8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007fdc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007fde:	f7fb fb37 	bl	8003650 <HAL_GetTick>
 8007fe2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fe4:	e004      	b.n	8007ff0 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fe6:	f7fb fb33 	bl	8003650 <HAL_GetTick>
 8007fea:	1b00      	subs	r0, r0, r4
 8007fec:	2802      	cmp	r0, #2
 8007fee:	d804      	bhi.n	8007ffa <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	d5f7      	bpl.n	8007fe6 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8007ff6:	2000      	movs	r0, #0
}
 8007ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007ffa:	2003      	movs	r0, #3
}
 8007ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007ffe:	2001      	movs	r0, #1
}
 8008000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008006:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008008:	e7e3      	b.n	8007fd2 <RCCEx_PLL2_Config+0xb6>
 800800a:	bf00      	nop
 800800c:	58024400 	.word	0x58024400
 8008010:	ffff0007 	.word	0xffff0007

08008014 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008014:	4a3b      	ldr	r2, [pc, #236]	; (8008104 <RCCEx_PLL3_Config+0xf0>)
{
 8008016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008018:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b03      	cmp	r3, #3
 8008020:	d069      	beq.n	80080f6 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008022:	6813      	ldr	r3, [r2, #0]
 8008024:	4606      	mov	r6, r0
 8008026:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008028:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800802a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800802e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008030:	f7fb fb0e 	bl	8003650 <HAL_GetTick>
 8008034:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008036:	e004      	b.n	8008042 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008038:	f7fb fb0a 	bl	8003650 <HAL_GetTick>
 800803c:	1b43      	subs	r3, r0, r5
 800803e:	2b02      	cmp	r3, #2
 8008040:	d857      	bhi.n	80080f2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	009a      	lsls	r2, r3, #2
 8008046:	d4f7      	bmi.n	8008038 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008048:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800804a:	6832      	ldr	r2, [r6, #0]
 800804c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008050:	492d      	ldr	r1, [pc, #180]	; (8008108 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008052:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008056:	62a3      	str	r3, [r4, #40]	; 0x28
 8008058:	6875      	ldr	r5, [r6, #4]
 800805a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800805e:	3d01      	subs	r5, #1
 8008060:	1e50      	subs	r0, r2, #1
 8008062:	3b01      	subs	r3, #1
 8008064:	6932      	ldr	r2, [r6, #16]
 8008066:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800806a:	025b      	lsls	r3, r3, #9
 800806c:	0400      	lsls	r0, r0, #16
 800806e:	3a01      	subs	r2, #1
 8008070:	b29b      	uxth	r3, r3
 8008072:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008076:	0612      	lsls	r2, r2, #24
 8008078:	4303      	orrs	r3, r0
 800807a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800807e:	432b      	orrs	r3, r5
 8008080:	4313      	orrs	r3, r2
 8008082:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008086:	6972      	ldr	r2, [r6, #20]
 8008088:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800808c:	4313      	orrs	r3, r2
 800808e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008092:	69b2      	ldr	r2, [r6, #24]
 8008094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008098:	4313      	orrs	r3, r2
 800809a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800809c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800809e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80080a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80080a6:	69f3      	ldr	r3, [r6, #28]
 80080a8:	4011      	ands	r1, r2
 80080aa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80080ae:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80080b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80080b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80080ba:	b1f7      	cbz	r7, 80080fa <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080bc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80080be:	bf0c      	ite	eq
 80080c0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80080c4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80080c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80080ca:	4b0e      	ldr	r3, [pc, #56]	; (8008104 <RCCEx_PLL3_Config+0xf0>)
 80080cc:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080ce:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 80080d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80080d4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80080d6:	f7fb fabb 	bl	8003650 <HAL_GetTick>
 80080da:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080dc:	e004      	b.n	80080e8 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80080de:	f7fb fab7 	bl	8003650 <HAL_GetTick>
 80080e2:	1b00      	subs	r0, r0, r4
 80080e4:	2802      	cmp	r0, #2
 80080e6:	d804      	bhi.n	80080f2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	d5f7      	bpl.n	80080de <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80080ee:	2000      	movs	r0, #0
}
 80080f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80080f2:	2003      	movs	r0, #3
}
 80080f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80080f6:	2001      	movs	r0, #1
}
 80080f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80080fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80080fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008100:	e7e3      	b.n	80080ca <RCCEx_PLL3_Config+0xb6>
 8008102:	bf00      	nop
 8008104:	58024400 	.word	0x58024400
 8008108:	ffff0007 	.word	0xffff0007

0800810c <HAL_RCCEx_PeriphCLKConfig>:
{
 800810c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008110:	6803      	ldr	r3, [r0, #0]
{
 8008112:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008114:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008118:	d01c      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800811a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800811c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008120:	f000 84ba 	beq.w	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008124:	d823      	bhi.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008126:	2a00      	cmp	r2, #0
 8008128:	f000 83dc 	beq.w	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 800812c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008130:	d120      	bne.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008132:	2102      	movs	r1, #2
 8008134:	3004      	adds	r0, #4
 8008136:	f7ff fef1 	bl	8007f1c <RCCEx_PLL2_Config>
 800813a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800813c:	2e00      	cmp	r6, #0
 800813e:	f040 849f 	bne.w	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8008142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008144:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008146:	48ab      	ldr	r0, [pc, #684]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008148:	2600      	movs	r6, #0
 800814a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800814c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008150:	430a      	orrs	r2, r1
 8008152:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008154:	05dd      	lsls	r5, r3, #23
 8008156:	d511      	bpl.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008158:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800815a:	2a04      	cmp	r2, #4
 800815c:	f200 851c 	bhi.w	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8008160:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008164:	0476046f 	.word	0x0476046f
 8008168:	02d40486 	.word	0x02d40486
 800816c:	02d4      	.short	0x02d4
    switch(PeriphClkInit->SpdifrxClockSelection)
 800816e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008172:	d0e8      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008174:	05dd      	lsls	r5, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008176:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800817a:	d4ed      	bmi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800817c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800817e:	0598      	lsls	r0, r3, #22
 8008180:	d51b      	bpl.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008182:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008184:	2a80      	cmp	r2, #128	; 0x80
 8008186:	f000 8453 	beq.w	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800818a:	f200 80ec 	bhi.w	8008366 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800818e:	2a00      	cmp	r2, #0
 8008190:	f000 83a2 	beq.w	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8008194:	2a40      	cmp	r2, #64	; 0x40
 8008196:	f040 80ed 	bne.w	8008374 <HAL_RCCEx_PeriphCLKConfig+0x268>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800819a:	2100      	movs	r1, #0
 800819c:	1d20      	adds	r0, r4, #4
 800819e:	f7ff febd 	bl	8007f1c <RCCEx_PLL2_Config>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	f040 8386 	bne.w	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80081ac:	4991      	ldr	r1, [pc, #580]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80081ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081b0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80081b2:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80081b6:	4302      	orrs	r2, r0
 80081b8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80081ba:	0559      	lsls	r1, r3, #21
 80081bc:	d51f      	bpl.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 80081be:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80081c2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80081c6:	f000 844a 	beq.w	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x952>
 80081ca:	f200 80d6 	bhi.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	f000 837c 	beq.w	80088cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80081d4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80081d8:	f040 80d7 	bne.w	800838a <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081dc:	2100      	movs	r1, #0
 80081de:	1d20      	adds	r0, r4, #4
 80081e0:	f7ff fe9c 	bl	8007f1c <RCCEx_PLL2_Config>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80081e8:	2d00      	cmp	r5, #0
 80081ea:	f040 8367 	bne.w	80088bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081ee:	4981      	ldr	r1, [pc, #516]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80081f0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80081f4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80081f6:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80081fa:	4302      	orrs	r2, r0
 80081fc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081fe:	051a      	lsls	r2, r3, #20
 8008200:	d51f      	bpl.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008202:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8008206:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800820a:	f000 843c 	beq.w	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800820e:	f200 80bf 	bhi.w	8008390 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8008212:	2a00      	cmp	r2, #0
 8008214:	f000 836c 	beq.w	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008218:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800821c:	f040 80c0 	bne.w	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x294>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008220:	2100      	movs	r1, #0
 8008222:	1d20      	adds	r0, r4, #4
 8008224:	f7ff fe7a 	bl	8007f1c <RCCEx_PLL2_Config>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800822c:	2d00      	cmp	r5, #0
 800822e:	f040 833f 	bne.w	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008232:	4970      	ldr	r1, [pc, #448]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008234:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8008238:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800823a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800823e:	4302      	orrs	r2, r0
 8008240:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008242:	019f      	lsls	r7, r3, #6
 8008244:	d518      	bpl.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8008246:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008248:	2a20      	cmp	r2, #32
 800824a:	f000 8392 	beq.w	8008972 <HAL_RCCEx_PeriphCLKConfig+0x866>
 800824e:	f200 80aa 	bhi.w	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8008252:	b13a      	cbz	r2, 8008264 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008254:	2a10      	cmp	r2, #16
 8008256:	f040 80a9 	bne.w	80083ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800825a:	4966      	ldr	r1, [pc, #408]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800825c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800825e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008262:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008264:	2d00      	cmp	r5, #0
 8008266:	f040 8366 	bne.w	8008936 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800826a:	4962      	ldr	r1, [pc, #392]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800826c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800826e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008270:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008274:	4302      	orrs	r2, r0
 8008276:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008278:	04d8      	lsls	r0, r3, #19
 800827a:	d51d      	bpl.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 800827c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800827e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008282:	f000 83cd 	beq.w	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8008286:	f200 8094 	bhi.w	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800828a:	2a00      	cmp	r2, #0
 800828c:	f000 8318 	beq.w	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8008290:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008294:	f040 8095 	bne.w	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008298:	2100      	movs	r1, #0
 800829a:	1d20      	adds	r0, r4, #4
 800829c:	f7ff fe3e 	bl	8007f1c <RCCEx_PLL2_Config>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80082a4:	2d00      	cmp	r5, #0
 80082a6:	f040 8305 	bne.w	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80082aa:	4952      	ldr	r1, [pc, #328]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80082ac:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80082ae:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80082b0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80082b4:	4302      	orrs	r2, r0
 80082b6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80082b8:	0499      	lsls	r1, r3, #18
 80082ba:	d51a      	bpl.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi45ClockSelection)
 80082bc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80082be:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80082c2:	f000 8398 	beq.w	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 80082c6:	d87f      	bhi.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80082c8:	b14a      	cbz	r2, 80082de <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80082ca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80082ce:	f040 8083 	bne.w	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082d2:	2101      	movs	r1, #1
 80082d4:	1d20      	adds	r0, r4, #4
 80082d6:	f7ff fe21 	bl	8007f1c <RCCEx_PLL2_Config>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80082de:	2d00      	cmp	r5, #0
 80082e0:	f040 832b 	bne.w	800893a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80082e4:	4943      	ldr	r1, [pc, #268]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80082e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80082e8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80082ea:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80082ee:	4302      	orrs	r2, r0
 80082f0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082f2:	045a      	lsls	r2, r3, #17
 80082f4:	d51b      	bpl.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->Spi6ClockSelection)
 80082f6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80082fa:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80082fe:	f000 834a 	beq.w	8008996 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8008302:	d86c      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008304:	b142      	cbz	r2, 8008318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8008306:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800830a:	d170      	bne.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800830c:	2101      	movs	r1, #1
 800830e:	1d20      	adds	r0, r4, #4
 8008310:	f7ff fe04 	bl	8007f1c <RCCEx_PLL2_Config>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008318:	2d00      	cmp	r5, #0
 800831a:	f040 8302 	bne.w	8008922 <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800831e:	4935      	ldr	r1, [pc, #212]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008320:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008324:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008326:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800832a:	4302      	orrs	r2, r0
 800832c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800832e:	041f      	lsls	r7, r3, #16
 8008330:	d50d      	bpl.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->FdcanClockSelection)
 8008332:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008334:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008338:	f000 834b 	beq.w	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800833c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008340:	f000 81f0 	beq.w	8008724 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008344:	2a00      	cmp	r2, #0
 8008346:	f000 81f3 	beq.w	8008730 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800834a:	2601      	movs	r6, #1
 800834c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800834e:	01d8      	lsls	r0, r3, #7
 8008350:	d55c      	bpl.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 8008352:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008354:	2a03      	cmp	r2, #3
 8008356:	f200 8425 	bhi.w	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xa98>
 800835a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800835e:	0053      	.short	0x0053
 8008360:	004d0313 	.word	0x004d0313
 8008364:	0053      	.short	0x0053
    switch(PeriphClkInit->Sai23ClockSelection)
 8008366:	2ac0      	cmp	r2, #192	; 0xc0
 8008368:	f43f af1d 	beq.w	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800836c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008370:	f43f af19 	beq.w	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008374:	2601      	movs	r6, #1
 8008376:	4635      	mov	r5, r6
 8008378:	e71f      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 800837a:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800837e:	f43f af33 	beq.w	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008382:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008386:	f43f af2f 	beq.w	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800838a:	2601      	movs	r6, #1
 800838c:	4635      	mov	r5, r6
 800838e:	e736      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008390:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8008394:	f43f af4a 	beq.w	800822c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008398:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800839c:	f43f af46 	beq.w	800822c <HAL_RCCEx_PeriphCLKConfig+0x120>
 80083a0:	2601      	movs	r6, #1
 80083a2:	4635      	mov	r5, r6
 80083a4:	e74d      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 80083a6:	2a30      	cmp	r2, #48	; 0x30
 80083a8:	f43f af5c 	beq.w	8008264 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80083ac:	2601      	movs	r6, #1
 80083ae:	4635      	mov	r5, r6
 80083b0:	e762      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80083b2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80083b6:	f43f af75 	beq.w	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80083ba:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80083be:	f43f af71 	beq.w	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80083c2:	2601      	movs	r6, #1
 80083c4:	4635      	mov	r5, r6
 80083c6:	e777      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 80083c8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80083cc:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80083d0:	d085      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80083d2:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80083d6:	d082      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80083d8:	2601      	movs	r6, #1
 80083da:	4635      	mov	r5, r6
 80083dc:	e789      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi6ClockSelection)
 80083de:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80083e2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80083e6:	d097      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80083e8:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80083ec:	d094      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80083ee:	2601      	movs	r6, #1
 80083f0:	4635      	mov	r5, r6
 80083f2:	e79c      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80083f4:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083f8:	2102      	movs	r1, #2
 80083fa:	1d20      	adds	r0, r4, #4
 80083fc:	f7ff fd8e 	bl	8007f1c <RCCEx_PLL2_Config>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008404:	2d00      	cmp	r5, #0
 8008406:	f000 828e 	beq.w	8008926 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800840a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800840c:	0259      	lsls	r1, r3, #9
 800840e:	f100 8208 	bmi.w	8008822 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008412:	07df      	lsls	r7, r3, #31
 8008414:	d539      	bpl.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008416:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8008418:	2a28      	cmp	r2, #40	; 0x28
 800841a:	f200 8174 	bhi.w	8008706 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800841e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008422:	0030      	.short	0x0030
 8008424:	01720172 	.word	0x01720172
 8008428:	01720172 	.word	0x01720172
 800842c:	01720172 	.word	0x01720172
 8008430:	03580172 	.word	0x03580172
 8008434:	01720172 	.word	0x01720172
 8008438:	01720172 	.word	0x01720172
 800843c:	01720172 	.word	0x01720172
 8008440:	00290172 	.word	0x00290172
 8008444:	01720172 	.word	0x01720172
 8008448:	01720172 	.word	0x01720172
 800844c:	01720172 	.word	0x01720172
 8008450:	00300172 	.word	0x00300172
 8008454:	01720172 	.word	0x01720172
 8008458:	01720172 	.word	0x01720172
 800845c:	01720172 	.word	0x01720172
 8008460:	00300172 	.word	0x00300172
 8008464:	01720172 	.word	0x01720172
 8008468:	01720172 	.word	0x01720172
 800846c:	01720172 	.word	0x01720172
 8008470:	00300172 	.word	0x00300172
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008474:	2101      	movs	r1, #1
 8008476:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800847a:	f7ff fdcb 	bl	8008014 <RCCEx_PLL3_Config>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008482:	2d00      	cmp	r5, #0
 8008484:	f000 826b 	beq.w	800895e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008488:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800848a:	0798      	lsls	r0, r3, #30
 800848c:	d516      	bpl.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800848e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8008490:	2a05      	cmp	r2, #5
 8008492:	f200 8384 	bhi.w	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008496:	e8df f012 	tbh	[pc, r2, lsl #1]
 800849a:	000d      	.short	0x000d
 800849c:	00060308 	.word	0x00060308
 80084a0:	000d000d 	.word	0x000d000d
 80084a4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084a6:	2101      	movs	r1, #1
 80084a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80084ac:	f7ff fdb2 	bl	8008014 <RCCEx_PLL3_Config>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80084b4:	2d00      	cmp	r5, #0
 80084b6:	f000 822c 	beq.w	8008912 <HAL_RCCEx_PeriphCLKConfig+0x806>
 80084ba:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084bc:	0759      	lsls	r1, r3, #29
 80084be:	d517      	bpl.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80084c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80084c4:	2a05      	cmp	r2, #5
 80084c6:	f200 8370 	bhi.w	8008baa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
 80084ca:	e8df f012 	tbh	[pc, r2, lsl #1]
 80084ce:	000d      	.short	0x000d
 80084d0:	000602f8 	.word	0x000602f8
 80084d4:	000d000d 	.word	0x000d000d
 80084d8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084da:	2101      	movs	r1, #1
 80084dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80084e0:	f7ff fd98 	bl	8008014 <RCCEx_PLL3_Config>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80084e8:	2d00      	cmp	r5, #0
 80084ea:	f000 8209 	beq.w	8008900 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 80084ee:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084f0:	069a      	lsls	r2, r3, #26
 80084f2:	d51d      	bpl.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80084f4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80084f8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80084fc:	f000 8271 	beq.w	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8008500:	f200 8121 	bhi.w	8008746 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 8008504:	b14a      	cbz	r2, 800851a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008506:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800850a:	f040 8126 	bne.w	800875a <HAL_RCCEx_PeriphCLKConfig+0x64e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800850e:	2100      	movs	r1, #0
 8008510:	1d20      	adds	r0, r4, #4
 8008512:	f7ff fd03 	bl	8007f1c <RCCEx_PLL2_Config>
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800851a:	2d00      	cmp	r5, #0
 800851c:	f040 8213 	bne.w	8008946 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008520:	49b9      	ldr	r1, [pc, #740]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8008522:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008526:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008528:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800852c:	4302      	orrs	r2, r0
 800852e:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008530:	065f      	lsls	r7, r3, #25
 8008532:	d51d      	bpl.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008534:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8008538:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800853c:	f000 823f 	beq.w	80089be <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8008540:	f200 8129 	bhi.w	8008796 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8008544:	b14a      	cbz	r2, 800855a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008546:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800854a:	f040 812e 	bne.w	80087aa <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800854e:	2100      	movs	r1, #0
 8008550:	1d20      	adds	r0, r4, #4
 8008552:	f7ff fce3 	bl	8007f1c <RCCEx_PLL2_Config>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800855a:	2d00      	cmp	r5, #0
 800855c:	f040 81ef 	bne.w	800893e <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008560:	49a9      	ldr	r1, [pc, #676]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8008562:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8008566:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008568:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800856c:	4302      	orrs	r2, r0
 800856e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008570:	0618      	lsls	r0, r3, #24
 8008572:	d51d      	bpl.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008574:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8008578:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800857c:	f000 8215 	beq.w	80089aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8008580:	f200 80fc 	bhi.w	800877c <HAL_RCCEx_PeriphCLKConfig+0x670>
 8008584:	b14a      	cbz	r2, 800859a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8008586:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800858a:	f040 8101 	bne.w	8008790 <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800858e:	2100      	movs	r1, #0
 8008590:	1d20      	adds	r0, r4, #4
 8008592:	f7ff fcc3 	bl	8007f1c <RCCEx_PLL2_Config>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800859a:	2d00      	cmp	r5, #0
 800859c:	f040 81d1 	bne.w	8008942 <HAL_RCCEx_PeriphCLKConfig+0x836>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085a0:	4999      	ldr	r1, [pc, #612]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80085a2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80085a6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80085a8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80085ac:	4302      	orrs	r2, r0
 80085ae:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80085b0:	0719      	lsls	r1, r3, #28
 80085b2:	d50b      	bpl.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80085b4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80085b8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80085bc:	f000 8225 	beq.w	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80085c0:	4891      	ldr	r0, [pc, #580]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80085c2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80085c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80085c8:	430a      	orrs	r2, r1
 80085ca:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085cc:	06da      	lsls	r2, r3, #27
 80085ce:	d50b      	bpl.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80085d0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80085d4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80085d8:	f000 82b2 	beq.w	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085dc:	488a      	ldr	r0, [pc, #552]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80085de:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80085e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80085e4:	430a      	orrs	r2, r1
 80085e6:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085e8:	031f      	lsls	r7, r3, #12
 80085ea:	d50e      	bpl.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    switch(PeriphClkInit->AdcClockSelection)
 80085ec:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80085f0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80085f4:	f000 80f2 	beq.w	80087dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80085f8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80085fc:	f000 80f5 	beq.w	80087ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8008600:	2900      	cmp	r1, #0
 8008602:	f000 828b 	beq.w	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8008606:	2601      	movs	r6, #1
 8008608:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800860a:	0358      	lsls	r0, r3, #13
 800860c:	d50f      	bpl.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->UsbClockSelection)
 800860e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8008612:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008616:	f000 80cb 	beq.w	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 800861a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800861e:	f000 80ce 	beq.w	80087be <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8008622:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008626:	f000 8282 	beq.w	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800862a:	2601      	movs	r6, #1
 800862c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800862e:	03d9      	lsls	r1, r3, #15
 8008630:	d517      	bpl.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->SdmmcClockSelection)
 8008632:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008634:	2a00      	cmp	r2, #0
 8008636:	f000 825f 	beq.w	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 800863a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800863e:	f040 8132 	bne.w	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008642:	2102      	movs	r1, #2
 8008644:	1d20      	adds	r0, r4, #4
 8008646:	f7ff fc69 	bl	8007f1c <RCCEx_PLL2_Config>
 800864a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	2d00      	cmp	r5, #0
 8008650:	f040 818d 	bne.w	800896e <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008654:	496c      	ldr	r1, [pc, #432]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8008656:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008658:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800865a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800865e:	4302      	orrs	r2, r0
 8008660:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008662:	009a      	lsls	r2, r3, #2
 8008664:	f100 80d2 	bmi.w	800880c <HAL_RCCEx_PeriphCLKConfig+0x700>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008668:	039f      	lsls	r7, r3, #14
 800866a:	d43f      	bmi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800866c:	1e30      	subs	r0, r6, #0
 800866e:	bf18      	it	ne
 8008670:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008672:	02de      	lsls	r6, r3, #11
 8008674:	d506      	bpl.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x578>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008676:	4964      	ldr	r1, [pc, #400]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8008678:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800867a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800867c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008680:	432a      	orrs	r2, r5
 8008682:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008684:	00dd      	lsls	r5, r3, #3
 8008686:	d507      	bpl.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008688:	495f      	ldr	r1, [pc, #380]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800868a:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800868e:	690a      	ldr	r2, [r1, #16]
 8008690:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008694:	432a      	orrs	r2, r5
 8008696:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008698:	0299      	lsls	r1, r3, #10
 800869a:	d506      	bpl.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800869c:	495a      	ldr	r1, [pc, #360]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800869e:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 80086a0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80086a2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80086a6:	432a      	orrs	r2, r5
 80086a8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086aa:	005a      	lsls	r2, r3, #1
 80086ac:	d509      	bpl.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086ae:	4a56      	ldr	r2, [pc, #344]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80086b0:	6911      	ldr	r1, [r2, #16]
 80086b2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80086b6:	6111      	str	r1, [r2, #16]
 80086b8:	6911      	ldr	r1, [r2, #16]
 80086ba:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80086be:	4329      	orrs	r1, r5
 80086c0:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	da06      	bge.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80086c6:	4950      	ldr	r1, [pc, #320]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80086c8:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80086ca:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80086cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80086d0:	432a      	orrs	r2, r5
 80086d2:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086d4:	021b      	lsls	r3, r3, #8
 80086d6:	d507      	bpl.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086d8:	4a4b      	ldr	r2, [pc, #300]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80086da:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80086de:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80086e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80086e4:	430b      	orrs	r3, r1
 80086e6:	6553      	str	r3, [r2, #84]	; 0x54
}
 80086e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80086ec:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80086ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80086f2:	f000 820a 	beq.w	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80086f6:	d933      	bls.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80086f8:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80086fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008700:	d030      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8008702:	2001      	movs	r0, #1
 8008704:	e7b5      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008706:	2601      	movs	r6, #1
 8008708:	4635      	mov	r5, r6
 800870a:	e6be      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800870c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800870e:	2d00      	cmp	r5, #0
 8008710:	f040 80cc 	bne.w	80088ac <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008714:	493c      	ldr	r1, [pc, #240]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8008716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008718:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800871a:	f022 0207 	bic.w	r2, r2, #7
 800871e:	4302      	orrs	r2, r0
 8008720:	650a      	str	r2, [r1, #80]	; 0x50
 8008722:	e52c      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008724:	2101      	movs	r1, #1
 8008726:	1d20      	adds	r0, r4, #4
 8008728:	f7ff fbf8 	bl	8007f1c <RCCEx_PLL2_Config>
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008730:	2d00      	cmp	r5, #0
 8008732:	f040 80e3 	bne.w	80088fc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008736:	4934      	ldr	r1, [pc, #208]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8008738:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800873a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800873c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008740:	4302      	orrs	r2, r0
 8008742:	650a      	str	r2, [r1, #80]	; 0x50
 8008744:	e603      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008746:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800874a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800874e:	f43f aee4 	beq.w	800851a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008752:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008756:	f43f aee0 	beq.w	800851a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800875a:	2601      	movs	r6, #1
 800875c:	4635      	mov	r5, r6
 800875e:	e6e7      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->RngClockSelection)
 8008760:	2a00      	cmp	r2, #0
 8008762:	d1ce      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if(ret == HAL_OK)
 8008764:	2d00      	cmp	r5, #0
 8008766:	d1cc      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008768:	4d27      	ldr	r5, [pc, #156]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800876a:	1e30      	subs	r0, r6, #0
 800876c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800876e:	bf18      	it	ne
 8008770:	2001      	movne	r0, #1
 8008772:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8008776:	430a      	orrs	r2, r1
 8008778:	656a      	str	r2, [r5, #84]	; 0x54
 800877a:	e77a      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800877c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8008780:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008784:	f43f af09 	beq.w	800859a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8008788:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800878c:	f43f af05 	beq.w	800859a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8008790:	2601      	movs	r6, #1
 8008792:	4635      	mov	r5, r6
 8008794:	e70c      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008796:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800879a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800879e:	f43f aedc 	beq.w	800855a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80087a2:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80087a6:	f43f aed8 	beq.w	800855a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80087aa:	2601      	movs	r6, #1
 80087ac:	4635      	mov	r5, r6
 80087ae:	e6df      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x464>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087b0:	2101      	movs	r1, #1
 80087b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80087b6:	f7ff fc2d 	bl	8008014 <RCCEx_PLL3_Config>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80087be:	2d00      	cmp	r5, #0
 80087c0:	f040 80c8 	bne.w	8008954 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087c4:	4910      	ldr	r1, [pc, #64]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80087c6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80087ca:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80087cc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80087d0:	4302      	orrs	r2, r0
 80087d2:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80087d4:	03d9      	lsls	r1, r3, #15
 80087d6:	f57f af44 	bpl.w	8008662 <HAL_RCCEx_PeriphCLKConfig+0x556>
 80087da:	e72a      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x526>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087dc:	2102      	movs	r1, #2
 80087de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80087e2:	f7ff fc17 	bl	8008014 <RCCEx_PLL3_Config>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80087ea:	2d00      	cmp	r5, #0
 80087ec:	f040 80ad 	bne.w	800894a <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087f0:	4905      	ldr	r1, [pc, #20]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80087f2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80087f6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80087f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80087fc:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087fe:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008800:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008802:	f57f af14 	bpl.w	800862e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008806:	e702      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008808:	58024400 	.word	0x58024400
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800880c:	2102      	movs	r1, #2
 800880e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008812:	f7ff fbff 	bl	8008014 <RCCEx_PLL3_Config>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	2800      	cmp	r0, #0
 800881a:	f43f af25 	beq.w	8008668 <HAL_RCCEx_PeriphCLKConfig+0x55c>
      status=HAL_ERROR;
 800881e:	2601      	movs	r6, #1
 8008820:	e722      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008822:	4bb3      	ldr	r3, [pc, #716]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8008824:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008826:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800882c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800882e:	f7fa ff0f 	bl	8003650 <HAL_GetTick>
 8008832:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008834:	e005      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x736>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008836:	f7fa ff0b 	bl	8003650 <HAL_GetTick>
 800883a:	1bc0      	subs	r0, r0, r7
 800883c:	2864      	cmp	r0, #100	; 0x64
 800883e:	f200 8152 	bhi.w	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008842:	f8d8 3000 	ldr.w	r3, [r8]
 8008846:	05da      	lsls	r2, r3, #23
 8008848:	d5f5      	bpl.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    if(ret == HAL_OK)
 800884a:	2d00      	cmp	r5, #0
 800884c:	f040 81a1 	bne.w	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xa86>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008850:	4aa8      	ldr	r2, [pc, #672]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008852:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8008856:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008858:	4059      	eors	r1, r3
 800885a:	f411 7f40 	tst.w	r1, #768	; 0x300
 800885e:	d00b      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x76c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008860:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8008862:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008864:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008868:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800886c:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800886e:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8008870:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8008874:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8008876:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800887c:	f000 816b 	beq.w	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008880:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008884:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008888:	f000 8179 	beq.w	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800888c:	4999      	ldr	r1, [pc, #612]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800888e:	690a      	ldr	r2, [r1, #16]
 8008890:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8008894:	610a      	str	r2, [r1, #16]
 8008896:	4a97      	ldr	r2, [pc, #604]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800889c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800889e:	430b      	orrs	r3, r1
 80088a0:	6713      	str	r3, [r2, #112]	; 0x70
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	e5b5      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SdmmcClockSelection)
 80088a6:	2601      	movs	r6, #1
 80088a8:	4635      	mov	r5, r6
 80088aa:	e6da      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x556>
 80088ac:	462e      	mov	r6, r5
 80088ae:	e466      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80088b0:	462e      	mov	r6, r5
 80088b2:	e4c6      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80088b4:	462e      	mov	r6, r5
 80088b6:	e4ff      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80088b8:	462e      	mov	r6, r5
 80088ba:	e47e      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xae>
 80088bc:	462e      	mov	r6, r5
 80088be:	e49e      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088c0:	498c      	ldr	r1, [pc, #560]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80088c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80088c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80088c8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80088ca:	e4eb      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088cc:	4989      	ldr	r1, [pc, #548]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80088ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80088d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80088d4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80088d6:	e487      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d8:	4986      	ldr	r1, [pc, #536]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80088da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80088dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80088e0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80088e2:	e460      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088e4:	4883      	ldr	r0, [pc, #524]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80088e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80088e8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80088ec:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80088ee:	e42a      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088f0:	4980      	ldr	r1, [pc, #512]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80088f2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80088f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80088f8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80088fa:	e497      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x120>
 80088fc:	462e      	mov	r6, r5
 80088fe:	e526      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008900:	497c      	ldr	r1, [pc, #496]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008902:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8008906:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008908:	f022 0207 	bic.w	r2, r2, #7
 800890c:	4302      	orrs	r2, r0
 800890e:	658a      	str	r2, [r1, #88]	; 0x58
 8008910:	e5ee      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008912:	4978      	ldr	r1, [pc, #480]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008914:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008916:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008918:	f022 0207 	bic.w	r2, r2, #7
 800891c:	4302      	orrs	r2, r0
 800891e:	654a      	str	r2, [r1, #84]	; 0x54
 8008920:	e5cc      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8008922:	462e      	mov	r6, r5
 8008924:	e503      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008926:	4973      	ldr	r1, [pc, #460]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008928:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800892a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800892c:	f022 0203 	bic.w	r2, r2, #3
 8008930:	4302      	orrs	r2, r0
 8008932:	64ca      	str	r2, [r1, #76]	; 0x4c
 8008934:	e56a      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008936:	462e      	mov	r6, r5
 8008938:	e49e      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800893a:	462e      	mov	r6, r5
 800893c:	e4d9      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800893e:	462e      	mov	r6, r5
 8008940:	e616      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008942:	462e      	mov	r6, r5
 8008944:	e634      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008946:	462e      	mov	r6, r5
 8008948:	e5f2      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x424>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800894a:	0358      	lsls	r0, r3, #13
 800894c:	462e      	mov	r6, r5
 800894e:	f57f ae6e 	bpl.w	800862e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008952:	e65c      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x502>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008954:	03d9      	lsls	r1, r3, #15
 8008956:	462e      	mov	r6, r5
 8008958:	f57f ae83 	bpl.w	8008662 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800895c:	e669      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800895e:	4965      	ldr	r1, [pc, #404]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008960:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008962:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008964:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8008968:	4302      	orrs	r2, r0
 800896a:	654a      	str	r2, [r1, #84]	; 0x54
 800896c:	e58d      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800896e:	462e      	mov	r6, r5
 8008970:	e677      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x556>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008972:	2102      	movs	r1, #2
 8008974:	1d20      	adds	r0, r4, #4
 8008976:	f7ff fad1 	bl	8007f1c <RCCEx_PLL2_Config>
 800897a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	2d00      	cmp	r5, #0
 8008980:	d1d9      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8008982:	e472      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008984:	495b      	ldr	r1, [pc, #364]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008986:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008988:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800898c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800898e:	2d00      	cmp	r5, #0
 8008990:	f47f ad3b 	bne.w	800840a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8008994:	e7c7      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008996:	2101      	movs	r1, #1
 8008998:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800899c:	f7ff fb3a 	bl	8008014 <RCCEx_PLL3_Config>
 80089a0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	2d00      	cmp	r5, #0
 80089a6:	d1bc      	bne.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80089a8:	e4b9      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089aa:	2102      	movs	r1, #2
 80089ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089b0:	f7ff fb30 	bl	8008014 <RCCEx_PLL3_Config>
 80089b4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	d1c2      	bne.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x836>
 80089bc:	e5f0      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089be:	2102      	movs	r1, #2
 80089c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089c4:	f7ff fb26 	bl	8008014 <RCCEx_PLL3_Config>
 80089c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	2d00      	cmp	r5, #0
 80089ce:	d1b6      	bne.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x832>
 80089d0:	e5c6      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089d2:	4948      	ldr	r1, [pc, #288]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80089d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80089d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80089da:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80089dc:	2d00      	cmp	r5, #0
 80089de:	d18d      	bne.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 80089e0:	e6a9      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x62a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089e2:	2102      	movs	r1, #2
 80089e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089e8:	f7ff fb14 	bl	8008014 <RCCEx_PLL3_Config>
 80089ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	d1a8      	bne.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80089f4:	e594      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x414>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089f6:	2101      	movs	r1, #1
 80089f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089fc:	f7ff fb0a 	bl	8008014 <RCCEx_PLL3_Config>
 8008a00:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	d198      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8008a08:	e46c      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a0a:	2102      	movs	r1, #2
 8008a0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a10:	f7ff fb00 	bl	8008014 <RCCEx_PLL3_Config>
 8008a14:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008a18:	b100      	cbz	r0, 8008a1c <HAL_RCCEx_PeriphCLKConfig+0x910>
          status = HAL_ERROR;
 8008a1a:	2601      	movs	r6, #1
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	e5cf      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a20:	2100      	movs	r1, #0
 8008a22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a26:	f7ff faf5 	bl	8008014 <RCCEx_PLL3_Config>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	4605      	mov	r5, r0
      break;
 8008a2e:	e439      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a30:	2100      	movs	r1, #0
 8008a32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a36:	f7ff faed 	bl	8008014 <RCCEx_PLL3_Config>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	4605      	mov	r5, r0
      break;
 8008a3e:	f7ff bbb2 	b.w	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a42:	492c      	ldr	r1, [pc, #176]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8008a44:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a46:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008a48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008a4c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008a4e:	e65e      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a50:	2100      	movs	r1, #0
 8008a52:	1d20      	adds	r0, r4, #4
 8008a54:	f7ff fa62 	bl	8007f1c <RCCEx_PLL2_Config>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	4605      	mov	r5, r0
      break;
 8008a5c:	e657      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a64:	f7ff fad6 	bl	8008014 <RCCEx_PLL3_Config>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	4605      	mov	r5, r0
      break;
 8008a6c:	f7ff bbbc 	b.w	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a70:	2100      	movs	r1, #0
 8008a72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a76:	f7ff facd 	bl	8008014 <RCCEx_PLL3_Config>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	4605      	mov	r5, r0
      break;
 8008a7e:	e646      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	f7ff bb67 	b.w	8008154 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a86:	2100      	movs	r1, #0
 8008a88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a8c:	f7ff fac2 	bl	8008014 <RCCEx_PLL3_Config>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	4605      	mov	r5, r0
      break;
 8008a94:	f7ff bbca 	b.w	800822c <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a98:	2102      	movs	r1, #2
 8008a9a:	3024      	adds	r0, #36	; 0x24
 8008a9c:	f7ff faba 	bl	8008014 <RCCEx_PLL3_Config>
 8008aa0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008aa2:	2e00      	cmp	r6, #0
 8008aa4:	f43f ab4d 	beq.w	8008142 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8008aa8:	e7ea      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x974>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008aaa:	2101      	movs	r1, #1
 8008aac:	1d20      	adds	r0, r4, #4
 8008aae:	f7ff fa35 	bl	8007f1c <RCCEx_PLL2_Config>
 8008ab2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	f47f acff 	bne.w	80084ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008abc:	e729      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008abe:	2101      	movs	r1, #1
 8008ac0:	1d20      	adds	r0, r4, #4
 8008ac2:	f7ff fa2b 	bl	8007f1c <RCCEx_PLL2_Config>
 8008ac6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	f47f ad0f 	bne.w	80084ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8008ad0:	e716      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	1d20      	adds	r0, r4, #4
 8008ad6:	f7ff fa21 	bl	8007f1c <RCCEx_PLL2_Config>
 8008ada:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	f47f acd2 	bne.w	8008488 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8008ae4:	e73b      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x852>
            ret = HAL_TIMEOUT;
 8008ae6:	2603      	movs	r6, #3
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	4635      	mov	r5, r6
 8008aec:	e491      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8008aee:	bf00      	nop
 8008af0:	58024800 	.word	0x58024800
 8008af4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af8:	492d      	ldr	r1, [pc, #180]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008afa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008afc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008b00:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	f47f af33 	bne.w	800896e <HAL_RCCEx_PeriphCLKConfig+0x862>
 8008b08:	e5a4      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x548>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b0a:	4829      	ldr	r0, [pc, #164]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008b0c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008b0e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008b12:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	f47f adf4 	bne.w	8008702 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8008b1a:	e625      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b1c:	1d20      	adds	r0, r4, #4
 8008b1e:	f7ff f9fd 	bl	8007f1c <RCCEx_PLL2_Config>
 8008b22:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	2d00      	cmp	r5, #0
 8008b28:	f47f af0f 	bne.w	800894a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8008b2c:	e660      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b2e:	4920      	ldr	r1, [pc, #128]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008b30:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008b32:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008b36:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008b38:	2d00      	cmp	r5, #0
 8008b3a:	f47f af0b 	bne.w	8008954 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008b3e:	e641      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008b40:	2102      	movs	r1, #2
 8008b42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b46:	f7ff fa65 	bl	8008014 <RCCEx_PLL3_Config>
 8008b4a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8008b4e:	b100      	cbz	r0, 8008b52 <HAL_RCCEx_PeriphCLKConfig+0xa46>
        status = HAL_ERROR;
 8008b50:	2601      	movs	r6, #1
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	e542      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        tickstart = HAL_GetTick();
 8008b56:	f7fa fd7b 	bl	8003650 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b5a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b5e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008b62:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b64:	e004      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xa64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b66:	f7fa fd73 	bl	8003650 <HAL_GetTick>
 8008b6a:	1bc0      	subs	r0, r0, r7
 8008b6c:	4548      	cmp	r0, r9
 8008b6e:	d8ba      	bhi.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b70:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8008b74:	079b      	lsls	r3, r3, #30
 8008b76:	d5f6      	bpl.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8008b78:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8008b7c:	e680      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x774>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b7e:	480c      	ldr	r0, [pc, #48]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008b80:	4a0c      	ldr	r2, [pc, #48]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8008b82:	6901      	ldr	r1, [r0, #16]
 8008b84:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8008b88:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	6102      	str	r2, [r0, #16]
 8008b90:	e681      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8008b92:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008b94:	462e      	mov	r6, r5
 8008b96:	e43c      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b98:	2601      	movs	r6, #1
 8008b9a:	f7ff baef 	b.w	800817c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b9e:	2601      	movs	r6, #1
 8008ba0:	4635      	mov	r5, r6
 8008ba2:	e48b      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FmcClockSelection)
 8008ba4:	2601      	movs	r6, #1
 8008ba6:	4635      	mov	r5, r6
 8008ba8:	e430      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008baa:	2601      	movs	r6, #1
 8008bac:	4635      	mov	r5, r6
 8008bae:	e49f      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008bb0:	58024400 	.word	0x58024400
 8008bb4:	00ffffcf 	.word	0x00ffffcf

08008bb8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8008bb8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008bba:	f7ff f8df 	bl	8007d7c <HAL_RCC_GetHCLKFreq>
 8008bbe:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8008bc0:	4a05      	ldr	r2, [pc, #20]	; (8008bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008bc8:	5cd3      	ldrb	r3, [r2, r3]
 8008bca:	f003 031f 	and.w	r3, r3, #31
}
 8008bce:	40d8      	lsrs	r0, r3
 8008bd0:	bd08      	pop	{r3, pc}
 8008bd2:	bf00      	nop
 8008bd4:	58024400 	.word	0x58024400
 8008bd8:	08017344 	.word	0x08017344

08008bdc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bdc:	4b4f      	ldr	r3, [pc, #316]	; (8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8008bde:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008be0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008be2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008be4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8008be6:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008bea:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008bee:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8008bf0:	d05c      	beq.n	8008cac <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008bf2:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008bf6:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bfa:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008bfe:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8008c02:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008c04:	ee07 4a90 	vmov	s15, r4
 8008c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008c0c:	d003      	beq.n	8008c16 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8008c0e:	2902      	cmp	r1, #2
 8008c10:	d075      	beq.n	8008cfe <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8008c12:	2900      	cmp	r1, #0
 8008c14:	d04f      	beq.n	8008cb6 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c16:	ee07 2a90 	vmov	s15, r2
 8008c1a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8008d20 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8008c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008c28:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8008c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c30:	ee06 3a90 	vmov	s13, r3
 8008c34:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8008c38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008c3c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008c40:	eee7 6a25 	vfma.f32	s13, s14, s11
 8008c44:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008c48:	4a34      	ldr	r2, [pc, #208]	; (8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8008c4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008c4e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008c50:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008c54:	ee07 3a10 	vmov	s14, r3
 8008c58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008c5c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008c5e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c6a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008c6e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008c70:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008c74:	ee07 3a10 	vmov	s14, r3
 8008c78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c7c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c88:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008c8c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008c8e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c9a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008ca6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008caa:	4770      	bx	lr
 8008cac:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cae:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cb2:	6082      	str	r2, [r0, #8]
}
 8008cb4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cb6:	6819      	ldr	r1, [r3, #0]
 8008cb8:	0689      	lsls	r1, r1, #26
 8008cba:	d527      	bpl.n	8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cbc:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cbe:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cc2:	4a19      	ldr	r2, [pc, #100]	; (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cc4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cc8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cd2:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cd4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8008cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cdc:	ee06 2a10 	vmov	s12, r2
 8008ce0:	ee06 3a90 	vmov	s13, r3
 8008ce4:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8008ce8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008cec:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008cf0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008cf4:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008cf8:	ee66 6a26 	vmul.f32	s13, s12, s13
 8008cfc:	e7a4      	b.n	8008c48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cfe:	ee07 2a90 	vmov	s15, r2
 8008d02:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8008d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d0a:	e78a      	b.n	8008c22 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d0c:	ee07 2a90 	vmov	s15, r2
 8008d10:	eddf 6a07 	vldr	s13, [pc, #28]	; 8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8008d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d18:	e783      	b.n	8008c22 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8008d1a:	bf00      	nop
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	4a742400 	.word	0x4a742400
 8008d24:	39000000 	.word	0x39000000
 8008d28:	03d09000 	.word	0x03d09000
 8008d2c:	4bbebc20 	.word	0x4bbebc20
 8008d30:	4c742400 	.word	0x4c742400

08008d34 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d34:	4b4f      	ldr	r3, [pc, #316]	; (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8008d36:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d38:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008d3a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d3c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8008d3e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008d42:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008d46:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8008d48:	d05c      	beq.n	8008e04 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008d4a:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d4e:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d52:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008d56:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8008d5a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008d5c:	ee07 4a90 	vmov	s15, r4
 8008d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008d64:	d003      	beq.n	8008d6e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8008d66:	2902      	cmp	r1, #2
 8008d68:	d075      	beq.n	8008e56 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8008d6a:	2900      	cmp	r1, #0
 8008d6c:	d04f      	beq.n	8008e0e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d6e:	ee07 2a90 	vmov	s15, r2
 8008d72:	eddf 6a41 	vldr	s13, [pc, #260]	; 8008e78 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8008d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008d80:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8008d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d88:	ee06 3a90 	vmov	s13, r3
 8008d8c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8008d90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008d94:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008d98:	eee7 6a25 	vfma.f32	s13, s14, s11
 8008d9c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008da0:	4a34      	ldr	r2, [pc, #208]	; (8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8008da2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008da6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008da8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008dac:	ee07 3a10 	vmov	s14, r3
 8008db0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008db4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008db6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc2:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008dc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008dc8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008dcc:	ee07 3a10 	vmov	s14, r3
 8008dd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008dd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008de4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008de6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008df2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008dfe:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008e02:	4770      	bx	lr
 8008e04:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e06:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e0a:	6082      	str	r2, [r0, #8]
}
 8008e0c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e0e:	6819      	ldr	r1, [r3, #0]
 8008e10:	0689      	lsls	r1, r1, #26
 8008e12:	d527      	bpl.n	8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e14:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e16:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e1a:	4a19      	ldr	r2, [pc, #100]	; (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e1c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e20:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e2a:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e2c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8008e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e34:	ee06 2a10 	vmov	s12, r2
 8008e38:	ee06 3a90 	vmov	s13, r3
 8008e3c:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8008e40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008e44:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008e48:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008e4c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008e50:	ee66 6a26 	vmul.f32	s13, s12, s13
 8008e54:	e7a4      	b.n	8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e56:	ee07 2a90 	vmov	s15, r2
 8008e5a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8008e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e62:	e78a      	b.n	8008d7a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e64:	ee07 2a90 	vmov	s15, r2
 8008e68:	eddf 6a07 	vldr	s13, [pc, #28]	; 8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8008e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e70:	e783      	b.n	8008d7a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8008e72:	bf00      	nop
 8008e74:	58024400 	.word	0x58024400
 8008e78:	4a742400 	.word	0x4a742400
 8008e7c:	39000000 	.word	0x39000000
 8008e80:	03d09000 	.word	0x03d09000
 8008e84:	4bbebc20 	.word	0x4bbebc20
 8008e88:	4c742400 	.word	0x4c742400

08008e8c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e8c:	4b4f      	ldr	r3, [pc, #316]	; (8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8008e8e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e90:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008e92:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e94:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8008e96:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008e9a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008e9e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8008ea0:	d05c      	beq.n	8008f5c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ea2:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ea6:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008eaa:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008eae:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8008eb2:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008eb4:	ee07 4a90 	vmov	s15, r4
 8008eb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008ebc:	d07e      	beq.n	8008fbc <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8008ebe:	2902      	cmp	r1, #2
 8008ec0:	d075      	beq.n	8008fae <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8008ec2:	2900      	cmp	r1, #0
 8008ec4:	d04f      	beq.n	8008f66 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ec6:	ee07 2a90 	vmov	s15, r2
 8008eca:	eddf 6a41 	vldr	s13, [pc, #260]	; 8008fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8008ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008ed8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8008edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee0:	ee06 3a90 	vmov	s13, r3
 8008ee4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8008ee8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008eec:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008ef0:	eee7 6a25 	vfma.f32	s13, s14, s11
 8008ef4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008ef8:	4a34      	ldr	r2, [pc, #208]	; (8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8008efa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008efe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008f00:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008f04:	ee07 3a10 	vmov	s14, r3
 8008f08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008f0c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008f0e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1a:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008f1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008f20:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008f24:	ee07 3a10 	vmov	s14, r3
 8008f28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008f2c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f38:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008f3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008f3e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f4a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f52:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008f56:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008f5a:	4770      	bx	lr
 8008f5c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f5e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f62:	6082      	str	r2, [r0, #8]
}
 8008f64:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f66:	6819      	ldr	r1, [r3, #0]
 8008f68:	0689      	lsls	r1, r1, #26
 8008f6a:	d5ac      	bpl.n	8008ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f6c:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f6e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f72:	4a19      	ldr	r2, [pc, #100]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f74:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f78:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f82:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f84:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8008fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8008f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8c:	ee06 2a10 	vmov	s12, r2
 8008f90:	ee06 3a90 	vmov	s13, r3
 8008f94:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8008f98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008f9c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008fa0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008fa4:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008fa8:	ee66 6a26 	vmul.f32	s13, s12, s13
 8008fac:	e7a4      	b.n	8008ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fae:	ee07 2a90 	vmov	s15, r2
 8008fb2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8008fdc <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8008fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fba:	e78a      	b.n	8008ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fbc:	ee07 2a90 	vmov	s15, r2
 8008fc0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8008fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fc8:	e783      	b.n	8008ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8008fca:	bf00      	nop
 8008fcc:	58024400 	.word	0x58024400
 8008fd0:	4c742400 	.word	0x4c742400
 8008fd4:	39000000 	.word	0x39000000
 8008fd8:	03d09000 	.word	0x03d09000
 8008fdc:	4bbebc20 	.word	0x4bbebc20
 8008fe0:	4a742400 	.word	0x4a742400

08008fe4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008fe4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8008fe8:	b500      	push	{lr}
 8008fea:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008fec:	d077      	beq.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008fee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008ff2:	d02e      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ff4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008ff8:	f000 80cf 	beq.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ffc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009000:	f000 8080 	beq.w	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009004:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009008:	d05a      	beq.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800900a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800900e:	f000 8105 	beq.w	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009012:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009016:	f000 8110 	beq.w	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800901a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800901e:	f000 80e2 	beq.w	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009022:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009026:	d13a      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009028:	4ba9      	ldr	r3, [pc, #676]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800902a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800902c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009034:	f000 808e 	beq.w	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800903c:	f000 812e 	beq.w	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009040:	bb6b      	cbnz	r3, 800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009042:	4aa3      	ldr	r2, [pc, #652]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8009044:	4ba3      	ldr	r3, [pc, #652]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009046:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8009048:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800904c:	bf18      	it	ne
 800904e:	4618      	movne	r0, r3
 8009050:	e042      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009052:	4a9f      	ldr	r2, [pc, #636]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009054:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009056:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800905a:	2b80      	cmp	r3, #128	; 0x80
 800905c:	f000 8098 	beq.w	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009060:	d921      	bls.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8009062:	2bc0      	cmp	r3, #192	; 0xc0
 8009064:	d037      	beq.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800906a:	d118      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800906c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800906e:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009070:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009074:	0749      	lsls	r1, r1, #29
 8009076:	d502      	bpl.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 80ae 	beq.w	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800907e:	4a94      	ldr	r2, [pc, #592]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009080:	6812      	ldr	r2, [r2, #0]
 8009082:	05d0      	lsls	r0, r2, #23
 8009084:	d503      	bpl.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800908a:	f000 80fb 	beq.w	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800908e:	4a90      	ldr	r2, [pc, #576]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	0391      	lsls	r1, r2, #14
 8009094:	d503      	bpl.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800909a:	f000 80bd 	beq.w	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 800909e:	2000      	movs	r0, #0
}
 80090a0:	b005      	add	sp, #20
 80090a2:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d04b      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80090aa:	2b40      	cmp	r3, #64	; 0x40
 80090ac:	d1f7      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ae:	6810      	ldr	r0, [r2, #0]
 80090b0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80090b4:	d010      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090b6:	a801      	add	r0, sp, #4
 80090b8:	f7ff fd90 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090bc:	9801      	ldr	r0, [sp, #4]
 80090be:	e00b      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80090c0:	4a83      	ldr	r2, [pc, #524]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80090c2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80090c4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80090c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090cc:	d060      	beq.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80090ce:	d936      	bls.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80090d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090d4:	d178      	bne.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 80090d6:	4880      	ldr	r0, [pc, #512]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 80090d8:	b005      	add	sp, #20
 80090da:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80090de:	4b7c      	ldr	r3, [pc, #496]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80090e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d8d9      	bhi.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80090ea:	a201      	add	r2, pc, #4	; (adr r2, 80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 80090ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f0:	08009155 	.word	0x08009155
 80090f4:	08009179 	.word	0x08009179
 80090f8:	08009165 	.word	0x08009165
 80090fc:	080090d7 	.word	0x080090d7
 8009100:	08009161 	.word	0x08009161
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009104:	4a72      	ldr	r2, [pc, #456]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009106:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009108:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800910c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009110:	d03e      	beq.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009112:	d937      	bls.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009114:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009118:	d0dd      	beq.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800911a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800911e:	d1be      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009120:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009122:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009128:	0752      	lsls	r2, r2, #29
 800912a:	d5a8      	bpl.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1a6      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009130:	4b67      	ldr	r3, [pc, #412]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009132:	486a      	ldr	r0, [pc, #424]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800913a:	40d8      	lsrs	r0, r3
 800913c:	e7cc      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800913e:	2b00      	cmp	r3, #0
 8009140:	d146      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009142:	6810      	ldr	r0, [r2, #0]
 8009144:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009148:	d0c6      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800914a:	a801      	add	r0, sp, #4
 800914c:	f7ff fe9e 	bl	8008e8c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009150:	9802      	ldr	r0, [sp, #8]
 8009152:	e7c1      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009154:	4b5e      	ldr	r3, [pc, #376]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800915c:	d0bc      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800915e:	e7f4      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009160:	4a5b      	ldr	r2, [pc, #364]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009162:	e783      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009164:	4b5a      	ldr	r3, [pc, #360]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800916c:	d0b4      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916e:	a801      	add	r0, sp, #4
 8009170:	f7ff fde0 	bl	8008d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009174:	9801      	ldr	r0, [sp, #4]
 8009176:	e7af      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009178:	4b55      	ldr	r3, [pc, #340]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009180:	d0aa      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009182:	e798      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0dc      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800918c:	d08f      	beq.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800918e:	e786      	b.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009190:	6810      	ldr	r0, [r2, #0]
 8009192:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009196:	d09f      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009198:	e7e9      	b.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800919a:	4a4d      	ldr	r2, [pc, #308]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800919c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800919e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80091a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091a6:	d0f3      	beq.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80091a8:	d806      	bhi.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0c9      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80091ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091b2:	f43f af7c 	beq.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 80091b6:	e772      	b.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80091b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091bc:	d08b      	beq.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80091be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091c2:	f43f af53 	beq.w	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 80091c6:	e76a      	b.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 80091c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091cc:	d0a8      	beq.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80091ce:	e766      	b.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80091d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d4:	f43f af6b 	beq.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 80091d8:	e761      	b.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	483f      	ldr	r0, [pc, #252]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80091de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80091e2:	40d8      	lsrs	r0, r3
 80091e4:	e778      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80091e6:	4a3a      	ldr	r2, [pc, #232]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80091e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80091ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80091ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091f2:	d066      	beq.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80091f4:	d82f      	bhi.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80091f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091fa:	d04f      	beq.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80091fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009200:	d131      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009202:	4b33      	ldr	r3, [pc, #204]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800920a:	f43f af65 	beq.w	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800920e:	a801      	add	r0, sp, #4
 8009210:	f7ff fd90 	bl	8008d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009214:	9802      	ldr	r0, [sp, #8]
 8009216:	e75f      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8009218:	482e      	ldr	r0, [pc, #184]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800921a:	e75d      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800921c:	4a2c      	ldr	r2, [pc, #176]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800921e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8009224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009228:	d02e      	beq.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800922a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800922e:	f43f af77 	beq.w	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009232:	2b00      	cmp	r3, #0
 8009234:	f47f af33 	bne.w	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009238:	e739      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800923a:	4b25      	ldr	r3, [pc, #148]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800923c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800923e:	03d2      	lsls	r2, r2, #15
 8009240:	d589      	bpl.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009248:	f43f af46 	beq.w	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800924c:	a801      	add	r0, sp, #4
 800924e:	f7ff fcc5 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009252:	9803      	ldr	r0, [sp, #12]
 8009254:	e740      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925a:	d02a      	beq.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800925c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009260:	f43f aeef 	beq.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8009264:	e71b      	b.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009266:	2b00      	cmp	r3, #0
 8009268:	f47f af19 	bne.w	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800926c:	f7fe fd86 	bl	8007d7c <HAL_RCC_GetHCLKFreq>
 8009270:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009272:	4a1b      	ldr	r2, [pc, #108]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800927a:	5cd3      	ldrb	r3, [r2, r3]
 800927c:	f003 031f 	and.w	r3, r3, #31
 8009280:	40d8      	lsrs	r0, r3
          break;
 8009282:	e729      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 8009284:	4817      	ldr	r0, [pc, #92]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009286:	e727      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009288:	6810      	ldr	r0, [r2, #0]
 800928a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800928e:	f43f af23 	beq.w	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009292:	a801      	add	r0, sp, #4
 8009294:	f7ff fd4e 	bl	8008d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009298:	9803      	ldr	r0, [sp, #12]
 800929a:	e71d      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800929c:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80092a4:	f43f af18 	beq.w	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a8:	a801      	add	r0, sp, #4
 80092aa:	f7ff fc97 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092ae:	9802      	ldr	r0, [sp, #8]
 80092b0:	e712      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092b2:	4a07      	ldr	r2, [pc, #28]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 80092b4:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092b6:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 80092b8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80092bc:	bf18      	it	ne
 80092be:	4618      	movne	r0, r3
 80092c0:	e70a      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092c2:	6810      	ldr	r0, [r2, #0]
 80092c4:	f010 0004 	ands.w	r0, r0, #4
 80092c8:	f43f af06 	beq.w	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80092cc:	e730      	b.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80092ce:	bf00      	nop
 80092d0:	58024400 	.word	0x58024400
 80092d4:	017d7840 	.word	0x017d7840
 80092d8:	00bb8000 	.word	0x00bb8000
 80092dc:	03d09000 	.word	0x03d09000
 80092e0:	08017344 	.word	0x08017344
 80092e4:	003d0900 	.word	0x003d0900

080092e8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092e8:	2800      	cmp	r0, #0
 80092ea:	f000 809c 	beq.w	8009426 <HAL_TIM_Base_Init+0x13e>
{
 80092ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80092f4:	4604      	mov	r4, r0
 80092f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d075      	beq.n	80093ea <HAL_TIM_Base_Init+0x102>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092fe:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009300:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009302:	494a      	ldr	r1, [pc, #296]	; (800942c <HAL_TIM_Base_Init+0x144>)
 8009304:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8009308:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800930c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8009310:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009312:	fab1 f181 	clz	r1, r1
 8009316:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800931a:	d026      	beq.n	800936a <HAL_TIM_Base_Init+0x82>
 800931c:	bb29      	cbnz	r1, 800936a <HAL_TIM_Base_Init+0x82>
 800931e:	4844      	ldr	r0, [pc, #272]	; (8009430 <HAL_TIM_Base_Init+0x148>)
 8009320:	4282      	cmp	r2, r0
 8009322:	d022      	beq.n	800936a <HAL_TIM_Base_Init+0x82>
 8009324:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009328:	4282      	cmp	r2, r0
 800932a:	d01e      	beq.n	800936a <HAL_TIM_Base_Init+0x82>
 800932c:	4f41      	ldr	r7, [pc, #260]	; (8009434 <HAL_TIM_Base_Init+0x14c>)
 800932e:	4d42      	ldr	r5, [pc, #264]	; (8009438 <HAL_TIM_Base_Init+0x150>)
 8009330:	1bd7      	subs	r7, r2, r7
 8009332:	42aa      	cmp	r2, r5
 8009334:	fab7 f787 	clz	r7, r7
 8009338:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800933c:	d05a      	beq.n	80093f4 <HAL_TIM_Base_Init+0x10c>
 800933e:	2f00      	cmp	r7, #0
 8009340:	d158      	bne.n	80093f4 <HAL_TIM_Base_Init+0x10c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009342:	483e      	ldr	r0, [pc, #248]	; (800943c <HAL_TIM_Base_Init+0x154>)
 8009344:	493e      	ldr	r1, [pc, #248]	; (8009440 <HAL_TIM_Base_Init+0x158>)
 8009346:	428a      	cmp	r2, r1
 8009348:	bf18      	it	ne
 800934a:	4282      	cmpne	r2, r0
 800934c:	d05d      	beq.n	800940a <HAL_TIM_Base_Init+0x122>
 800934e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009352:	428a      	cmp	r2, r1
 8009354:	d059      	beq.n	800940a <HAL_TIM_Base_Init+0x122>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009356:	69a1      	ldr	r1, [r4, #24]
 8009358:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800935c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800935e:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009360:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8009362:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009364:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009366:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009368:	e023      	b.n	80093b2 <HAL_TIM_Base_Init+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800936a:	4f32      	ldr	r7, [pc, #200]	; (8009434 <HAL_TIM_Base_Init+0x14c>)
 800936c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009370:	68a5      	ldr	r5, [r4, #8]
 8009372:	1bd7      	subs	r7, r2, r7
 8009374:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009376:	fab7 f787 	clz	r7, r7
 800937a:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800937c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800937e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009382:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009384:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009386:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8009388:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800938a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800938e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009390:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009392:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009394:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009396:	b951      	cbnz	r1, 80093ae <HAL_TIM_Base_Init+0xc6>
 8009398:	b94f      	cbnz	r7, 80093ae <HAL_TIM_Base_Init+0xc6>
 800939a:	4928      	ldr	r1, [pc, #160]	; (800943c <HAL_TIM_Base_Init+0x154>)
 800939c:	4b28      	ldr	r3, [pc, #160]	; (8009440 <HAL_TIM_Base_Init+0x158>)
 800939e:	429a      	cmp	r2, r3
 80093a0:	bf18      	it	ne
 80093a2:	428a      	cmpne	r2, r1
 80093a4:	d003      	beq.n	80093ae <HAL_TIM_Base_Init+0xc6>
 80093a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d101      	bne.n	80093b2 <HAL_TIM_Base_Init+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093ae:	6963      	ldr	r3, [r4, #20]
 80093b0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093b2:	2301      	movs	r3, #1
  return HAL_OK;
 80093b4:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80093b6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80093c0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80093c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80093c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80093cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80093d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093dc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80093e0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80093e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80093e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80093ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80093ee:	f7f9 fef3 	bl	80031d8 <HAL_TIM_Base_MspInit>
 80093f2:	e784      	b.n	80092fe <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093f4:	4810      	ldr	r0, [pc, #64]	; (8009438 <HAL_TIM_Base_Init+0x150>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80093fa:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093fc:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 80093fe:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009402:	d0bb      	beq.n	800937c <HAL_TIM_Base_Init+0x94>
 8009404:	2f00      	cmp	r7, #0
 8009406:	d1b9      	bne.n	800937c <HAL_TIM_Base_Init+0x94>
 8009408:	e79b      	b.n	8009342 <HAL_TIM_Base_Init+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800940a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800940c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009410:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009412:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009414:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8009416:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800941c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800941e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009420:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009422:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009424:	e7b9      	b.n	800939a <HAL_TIM_Base_Init+0xb2>
    return HAL_ERROR;
 8009426:	2001      	movs	r0, #1
}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	40010000 	.word	0x40010000
 8009430:	40000400 	.word	0x40000400
 8009434:	40010400 	.word	0x40010400
 8009438:	40000c00 	.word	0x40000c00
 800943c:	40014000 	.word	0x40014000
 8009440:	40014400 	.word	0x40014400

08009444 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009444:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009448:	2b01      	cmp	r3, #1
 800944a:	d138      	bne.n	80094be <HAL_TIM_Base_Start+0x7a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800944c:	6802      	ldr	r2, [r0, #0]
 800944e:	4b21      	ldr	r3, [pc, #132]	; (80094d4 <HAL_TIM_Base_Start+0x90>)
 8009450:	4921      	ldr	r1, [pc, #132]	; (80094d8 <HAL_TIM_Base_Start+0x94>)
 8009452:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009456:	bf18      	it	ne
 8009458:	429a      	cmpne	r2, r3
 800945a:	bf0c      	ite	eq
 800945c:	2301      	moveq	r3, #1
 800945e:	2300      	movne	r3, #0
{
 8009460:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009462:	428a      	cmp	r2, r1
 8009464:	bf08      	it	eq
 8009466:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800946a:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800946c:	4c1b      	ldr	r4, [pc, #108]	; (80094dc <HAL_TIM_Base_Start+0x98>)
 800946e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  htim->State = HAL_TIM_STATE_BUSY;
 8009472:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009476:	42a2      	cmp	r2, r4
 8009478:	bf08      	it	eq
 800947a:	f043 0301 	orreq.w	r3, r3, #1
 800947e:	4818      	ldr	r0, [pc, #96]	; (80094e0 <HAL_TIM_Base_Start+0x9c>)
 8009480:	4282      	cmp	r2, r0
 8009482:	bf08      	it	eq
 8009484:	f043 0301 	orreq.w	r3, r3, #1
 8009488:	428a      	cmp	r2, r1
 800948a:	bf08      	it	eq
 800948c:	f043 0301 	orreq.w	r3, r3, #1
 8009490:	b933      	cbnz	r3, 80094a0 <HAL_TIM_Base_Start+0x5c>
 8009492:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8009496:	1a10      	subs	r0, r2, r0
 8009498:	fab0 f080 	clz	r0, r0
 800949c:	0940      	lsrs	r0, r0, #5
 800949e:	b198      	cbz	r0, 80094c8 <HAL_TIM_Base_Start+0x84>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094a0:	6891      	ldr	r1, [r2, #8]
 80094a2:	4b10      	ldr	r3, [pc, #64]	; (80094e4 <HAL_TIM_Base_Start+0xa0>)
 80094a4:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a6:	2b06      	cmp	r3, #6
 80094a8:	d00b      	beq.n	80094c2 <HAL_TIM_Base_Start+0x7e>
 80094aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ae:	d008      	beq.n	80094c2 <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 80094b0:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 80094b2:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80094b4:	f043 0301 	orr.w	r3, r3, #1
 80094b8:	6013      	str	r3, [r2, #0]
}
 80094ba:	bc30      	pop	{r4, r5}
 80094bc:	4770      	bx	lr
    return HAL_ERROR;
 80094be:	2001      	movs	r0, #1
}
 80094c0:	4770      	bx	lr
  return HAL_OK;
 80094c2:	2000      	movs	r0, #0
}
 80094c4:	bc30      	pop	{r4, r5}
 80094c6:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80094c8:	6813      	ldr	r3, [r2, #0]
 80094ca:	f043 0301 	orr.w	r3, r3, #1
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	e7f3      	b.n	80094ba <HAL_TIM_Base_Start+0x76>
 80094d2:	bf00      	nop
 80094d4:	40010000 	.word	0x40010000
 80094d8:	40000400 	.word	0x40000400
 80094dc:	40000800 	.word	0x40000800
 80094e0:	40000c00 	.word	0x40000c00
 80094e4:	00010007 	.word	0x00010007

080094e8 <HAL_TIM_PeriodElapsedCallback>:
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop

080094ec <HAL_TIM_OC_DelayElapsedCallback>:
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <HAL_TIM_IC_CaptureCallback>:
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop

080094f4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop

080094f8 <HAL_TIM_TriggerCallback>:
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop

080094fc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094fc:	6803      	ldr	r3, [r0, #0]
 80094fe:	691a      	ldr	r2, [r3, #16]
 8009500:	0791      	lsls	r1, r2, #30
{
 8009502:	b510      	push	{r4, lr}
 8009504:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009506:	d502      	bpl.n	800950e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	0792      	lsls	r2, r2, #30
 800950c:	d468      	bmi.n	80095e0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800950e:	691a      	ldr	r2, [r3, #16]
 8009510:	0752      	lsls	r2, r2, #29
 8009512:	d502      	bpl.n	800951a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	0750      	lsls	r0, r2, #29
 8009518:	d44f      	bmi.n	80095ba <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800951a:	691a      	ldr	r2, [r3, #16]
 800951c:	0711      	lsls	r1, r2, #28
 800951e:	d502      	bpl.n	8009526 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	0712      	lsls	r2, r2, #28
 8009524:	d437      	bmi.n	8009596 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	06d0      	lsls	r0, r2, #27
 800952a:	d502      	bpl.n	8009532 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	06d1      	lsls	r1, r2, #27
 8009530:	d41e      	bmi.n	8009570 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009532:	691a      	ldr	r2, [r3, #16]
 8009534:	07d2      	lsls	r2, r2, #31
 8009536:	d502      	bpl.n	800953e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	07d0      	lsls	r0, r2, #31
 800953c:	d469      	bmi.n	8009612 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800953e:	691a      	ldr	r2, [r3, #16]
 8009540:	0611      	lsls	r1, r2, #24
 8009542:	d502      	bpl.n	800954a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	0612      	lsls	r2, r2, #24
 8009548:	d46b      	bmi.n	8009622 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	05d0      	lsls	r0, r2, #23
 800954e:	d502      	bpl.n	8009556 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	0611      	lsls	r1, r2, #24
 8009554:	d46d      	bmi.n	8009632 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	0652      	lsls	r2, r2, #25
 800955a:	d502      	bpl.n	8009562 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	0650      	lsls	r0, r2, #25
 8009560:	d46f      	bmi.n	8009642 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	0691      	lsls	r1, r2, #26
 8009566:	d502      	bpl.n	800956e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	0692      	lsls	r2, r2, #26
 800956c:	d449      	bmi.n	8009602 <HAL_TIM_IRQHandler+0x106>
}
 800956e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009570:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009574:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8009576:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009578:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800957a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009582:	d16f      	bne.n	8009664 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009584:	f7ff ffb2 	bl	80094ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009588:	4620      	mov	r0, r4
 800958a:	f7ff ffb3 	bl	80094f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800958e:	2200      	movs	r2, #0
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	7722      	strb	r2, [r4, #28]
 8009594:	e7cd      	b.n	8009532 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009596:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800959a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800959c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800959e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	079b      	lsls	r3, r3, #30
 80095a6:	d15a      	bne.n	800965e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a8:	f7ff ffa0 	bl	80094ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ac:	4620      	mov	r0, r4
 80095ae:	f7ff ffa1 	bl	80094f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095b2:	2200      	movs	r2, #0
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	7722      	strb	r2, [r4, #28]
 80095b8:	e7b5      	b.n	8009526 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80095ba:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095be:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80095c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80095c2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80095cc:	d144      	bne.n	8009658 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ce:	f7ff ff8d 	bl	80094ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095d2:	4620      	mov	r0, r4
 80095d4:	f7ff ff8e 	bl	80094f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d8:	2200      	movs	r2, #0
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	7722      	strb	r2, [r4, #28]
 80095de:	e79c      	b.n	800951a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095e0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095e4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095e6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095e8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	0799      	lsls	r1, r3, #30
 80095ee:	d130      	bne.n	8009652 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f0:	f7ff ff7c 	bl	80094ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095f4:	4620      	mov	r0, r4
 80095f6:	f7ff ff7d 	bl	80094f4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095fa:	2200      	movs	r2, #0
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	7722      	strb	r2, [r4, #28]
 8009600:	e785      	b.n	800950e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009602:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8009606:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009608:	611a      	str	r2, [r3, #16]
}
 800960a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800960e:	f000 b881 	b.w	8009714 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009612:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8009616:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009618:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800961a:	f7ff ff65 	bl	80094e8 <HAL_TIM_PeriodElapsedCallback>
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	e78d      	b.n	800953e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009622:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8009626:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009628:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800962a:	f000 f875 	bl	8009718 <HAL_TIMEx_BreakCallback>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	e78b      	b.n	800954a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009632:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8009636:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009638:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800963a:	f000 f86f 	bl	800971c <HAL_TIMEx_Break2Callback>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	e789      	b.n	8009556 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009642:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8009646:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009648:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800964a:	f7ff ff55 	bl	80094f8 <HAL_TIM_TriggerCallback>
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	e787      	b.n	8009562 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8009652:	f7ff ff4d 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 8009656:	e7d0      	b.n	80095fa <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8009658:	f7ff ff4a 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 800965c:	e7bc      	b.n	80095d8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800965e:	f7ff ff47 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 8009662:	e7a6      	b.n	80095b2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8009664:	f7ff ff44 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 8009668:	e791      	b.n	800958e <HAL_TIM_IRQHandler+0x92>
 800966a:	bf00      	nop

0800966c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800966c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009670:	2b01      	cmp	r3, #1
 8009672:	d042      	beq.n	80096fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009674:	4602      	mov	r2, r0
 8009676:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009678:	6813      	ldr	r3, [r2, #0]
{
 800967a:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800967c:	4d20      	ldr	r5, [pc, #128]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
  htim->State = HAL_TIM_STATE_BUSY;
 800967e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009682:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8009684:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009686:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009688:	d020      	beq.n	80096cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800968a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800968e:	42ab      	cmp	r3, r5
 8009690:	d01c      	beq.n	80096cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009692:	4d1c      	ldr	r5, [pc, #112]	; (8009704 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8009694:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009698:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800969a:	42ab      	cmp	r3, r5
 800969c:	bf18      	it	ne
 800969e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80096a2:	4f19      	ldr	r7, [pc, #100]	; (8009708 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096a4:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096a8:	4e18      	ldr	r6, [pc, #96]	; (800970c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80096aa:	bf0c      	ite	eq
 80096ac:	2501      	moveq	r5, #1
 80096ae:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 80096b0:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096b2:	42bb      	cmp	r3, r7
 80096b4:	bf08      	it	eq
 80096b6:	f045 0501 	orreq.w	r5, r5, #1
 80096ba:	42b3      	cmp	r3, r6
 80096bc:	bf08      	it	eq
 80096be:	f045 0501 	orreq.w	r5, r5, #1
 80096c2:	b965      	cbnz	r5, 80096de <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80096c4:	4812      	ldr	r0, [pc, #72]	; (8009710 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80096c6:	4283      	cmp	r3, r0
 80096c8:	d009      	beq.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80096ca:	e00d      	b.n	80096e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096cc:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80096d0:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80096d4:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80096d6:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096da:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80096dc:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096de:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096e0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096e4:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096e6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80096e8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80096ea:	2101      	movs	r1, #1

  return HAL_OK;
 80096ec:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80096ee:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80096f2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80096f6:	bcf0      	pop	{r4, r5, r6, r7}
 80096f8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80096fa:	2002      	movs	r0, #2
}
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40010000 	.word	0x40010000
 8009704:	40000400 	.word	0x40000400
 8009708:	40000800 	.word	0x40000800
 800970c:	40000c00 	.word	0x40000c00
 8009710:	40001800 	.word	0x40001800

08009714 <HAL_TIMEx_CommutCallback>:
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop

08009718 <HAL_TIMEx_BreakCallback>:
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop

0800971c <HAL_TIMEx_Break2Callback>:
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop

08009720 <HAL_UART_TxCpltCallback>:
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop

08009724 <HAL_UART_ErrorCallback>:
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop

08009728 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009728:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800972a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009732:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009736:	f7ff fff5 	bl	8009724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800973a:	bd08      	pop	{r3, pc}

0800973c <HAL_UARTEx_RxEventCallback>:
}
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop

08009740 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009740:	6802      	ldr	r2, [r0, #0]
{
 8009742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009746:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009748:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800974c:	6815      	ldr	r5, [r2, #0]
{
 800974e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8009750:	4233      	tst	r3, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009752:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8009754:	d027      	beq.n	80097a6 <HAL_UART_IRQHandler+0x66>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009756:	48a8      	ldr	r0, [pc, #672]	; (80099f8 <HAL_UART_IRQHandler+0x2b8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009758:	4ea8      	ldr	r6, [pc, #672]	; (80099fc <HAL_UART_IRQHandler+0x2bc>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800975a:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800975c:	402e      	ands	r6, r5
 800975e:	4306      	orrs	r6, r0
 8009760:	d16b      	bne.n	800983a <HAL_UART_IRQHandler+0xfa>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009762:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009764:	2801      	cmp	r0, #1
 8009766:	d02c      	beq.n	80097c2 <HAL_UART_IRQHandler+0x82>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009768:	02de      	lsls	r6, r3, #11
 800976a:	d502      	bpl.n	8009772 <HAL_UART_IRQHandler+0x32>
 800976c:	0248      	lsls	r0, r1, #9
 800976e:	f100 80ee 	bmi.w	800994e <HAL_UART_IRQHandler+0x20e>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009772:	061f      	lsls	r7, r3, #24
 8009774:	d506      	bpl.n	8009784 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009776:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800977a:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800977e:	4301      	orrs	r1, r0
 8009780:	f040 80dd 	bne.w	800993e <HAL_UART_IRQHandler+0x1fe>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009784:	065e      	lsls	r6, r3, #25
 8009786:	d502      	bpl.n	800978e <HAL_UART_IRQHandler+0x4e>
 8009788:	0668      	lsls	r0, r5, #25
 800978a:	f100 80ec 	bmi.w	8009966 <HAL_UART_IRQHandler+0x226>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800978e:	0219      	lsls	r1, r3, #8
 8009790:	d502      	bpl.n	8009798 <HAL_UART_IRQHandler+0x58>
 8009792:	006a      	lsls	r2, r5, #1
 8009794:	f100 80f4 	bmi.w	8009980 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009798:	01db      	lsls	r3, r3, #7
 800979a:	d502      	bpl.n	80097a2 <HAL_UART_IRQHandler+0x62>
 800979c:	2d00      	cmp	r5, #0
 800979e:	f2c0 811f 	blt.w	80099e0 <HAL_UART_IRQHandler+0x2a0>
}
 80097a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097a6:	069e      	lsls	r6, r3, #26
 80097a8:	d5db      	bpl.n	8009762 <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097aa:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097ae:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 80097b2:	433e      	orrs	r6, r7
 80097b4:	d0d5      	beq.n	8009762 <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 80097b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0f2      	beq.n	80097a2 <HAL_UART_IRQHandler+0x62>
}
 80097bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097c0:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097c2:	06d8      	lsls	r0, r3, #27
 80097c4:	d5d0      	bpl.n	8009768 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097c6:	06ef      	lsls	r7, r5, #27
 80097c8:	d5ce      	bpl.n	8009768 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097ca:	2310      	movs	r3, #16
 80097cc:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ce:	6893      	ldr	r3, [r2, #8]
 80097d0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80097d4:	f000 80e0 	beq.w	8009998 <HAL_UART_IRQHandler+0x258>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097d8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80097da:	6801      	ldr	r1, [r0, #0]
 80097dc:	684b      	ldr	r3, [r1, #4]
 80097de:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0de      	beq.n	80097a2 <HAL_UART_IRQHandler+0x62>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097e4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80097e8:	4299      	cmp	r1, r3
 80097ea:	d9da      	bls.n	80097a2 <HAL_UART_IRQHandler+0x62>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097ec:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 80097ee:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097f2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80097f6:	d018      	beq.n	800982a <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097f8:	6813      	ldr	r3, [r2, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fa:	2100      	movs	r1, #0
          huart->RxState = HAL_UART_STATE_READY;
 80097fc:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009802:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009804:	6893      	ldr	r3, [r2, #8]
 8009806:	f023 0301 	bic.w	r3, r3, #1
 800980a:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800980c:	6893      	ldr	r3, [r2, #8]
 800980e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009812:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8009814:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009818:	66e1      	str	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	f023 0310 	bic.w	r3, r3, #16
 8009820:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009822:	f7fc f80f 	bl	8005844 <HAL_DMA_Abort>
 8009826:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800982a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800982e:	4620      	mov	r0, r4
 8009830:	1ac9      	subs	r1, r1, r3
 8009832:	b289      	uxth	r1, r1
 8009834:	f7ff ff82 	bl	800973c <HAL_UARTEx_RxEventCallback>
 8009838:	e7b3      	b.n	80097a2 <HAL_UART_IRQHandler+0x62>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800983a:	07df      	lsls	r7, r3, #31
 800983c:	d509      	bpl.n	8009852 <HAL_UART_IRQHandler+0x112>
 800983e:	05ee      	lsls	r6, r5, #23
 8009840:	d507      	bpl.n	8009852 <HAL_UART_IRQHandler+0x112>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009842:	2601      	movs	r6, #1
 8009844:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009846:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800984a:	f046 0601 	orr.w	r6, r6, #1
 800984e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009852:	079f      	lsls	r7, r3, #30
 8009854:	d566      	bpl.n	8009924 <HAL_UART_IRQHandler+0x1e4>
 8009856:	07ce      	lsls	r6, r1, #31
 8009858:	d509      	bpl.n	800986e <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800985a:	2602      	movs	r6, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800985c:	075f      	lsls	r7, r3, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800985e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009860:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8009864:	f046 0604 	orr.w	r6, r6, #4
 8009868:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800986c:	d45e      	bmi.n	800992c <HAL_UART_IRQHandler+0x1ec>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800986e:	071e      	lsls	r6, r3, #28
 8009870:	d50b      	bpl.n	800988a <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009872:	f005 0620 	and.w	r6, r5, #32
 8009876:	4330      	orrs	r0, r6
 8009878:	d007      	beq.n	800988a <HAL_UART_IRQHandler+0x14a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800987a:	2008      	movs	r0, #8
 800987c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800987e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009882:	f040 0008 	orr.w	r0, r0, #8
 8009886:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800988a:	0518      	lsls	r0, r3, #20
 800988c:	d50a      	bpl.n	80098a4 <HAL_UART_IRQHandler+0x164>
 800988e:	016f      	lsls	r7, r5, #5
 8009890:	d508      	bpl.n	80098a4 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009892:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009896:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009898:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800989c:	f040 0020 	orr.w	r0, r0, #32
 80098a0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098a4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80098a8:	2800      	cmp	r0, #0
 80098aa:	f43f af7a 	beq.w	80097a2 <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098ae:	069e      	lsls	r6, r3, #26
 80098b0:	d506      	bpl.n	80098c0 <HAL_UART_IRQHandler+0x180>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098b2:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098b6:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80098ba:	ea55 0301 	orrs.w	r3, r5, r1
 80098be:	d164      	bne.n	800998a <HAL_UART_IRQHandler+0x24a>
      errorcode = huart->ErrorCode;
 80098c0:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098c4:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098c6:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ce:	431d      	orrs	r5, r3
 80098d0:	f000 808b 	beq.w	80099ea <HAL_UART_IRQHandler+0x2aa>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098d4:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098d6:	4b4a      	ldr	r3, [pc, #296]	; (8009a00 <HAL_UART_IRQHandler+0x2c0>)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098d8:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80098dc:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098de:	6891      	ldr	r1, [r2, #8]
 80098e0:	400b      	ands	r3, r1
 80098e2:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d103      	bne.n	80098f2 <HAL_UART_IRQHandler+0x1b2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ea:	6813      	ldr	r3, [r2, #0]
 80098ec:	f023 0310 	bic.w	r3, r3, #16
 80098f0:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80098f2:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80098f6:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fa:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098fc:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 80098fe:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009900:	064d      	lsls	r5, r1, #25
 8009902:	d52c      	bpl.n	800995e <HAL_UART_IRQHandler+0x21e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009904:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8009906:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800990c:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800990e:	b330      	cbz	r0, 800995e <HAL_UART_IRQHandler+0x21e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009910:	4b3c      	ldr	r3, [pc, #240]	; (8009a04 <HAL_UART_IRQHandler+0x2c4>)
 8009912:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009914:	f7fc f916 	bl	8005b44 <HAL_DMA_Abort_IT>
 8009918:	2800      	cmp	r0, #0
 800991a:	f43f af42 	beq.w	80097a2 <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800991e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009920:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009922:	e74b      	b.n	80097bc <HAL_UART_IRQHandler+0x7c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009924:	075e      	lsls	r6, r3, #29
 8009926:	d5a2      	bpl.n	800986e <HAL_UART_IRQHandler+0x12e>
 8009928:	07cf      	lsls	r7, r1, #31
 800992a:	d5a0      	bpl.n	800986e <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800992c:	2604      	movs	r6, #4
 800992e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009930:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8009934:	f046 0602 	orr.w	r6, r6, #2
 8009938:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800993c:	e797      	b.n	800986e <HAL_UART_IRQHandler+0x12e>
    if (huart->TxISR != NULL)
 800993e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009940:	2b00      	cmp	r3, #0
 8009942:	f43f af2e 	beq.w	80097a2 <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 8009946:	4620      	mov	r0, r4
}
 8009948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800994c:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800994e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8009952:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009954:	6213      	str	r3, [r2, #32]
}
 8009956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800995a:	f000 bbf1 	b.w	800a140 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800995e:	4620      	mov	r0, r4
 8009960:	f7ff fee0 	bl	8009724 <HAL_UART_ErrorCallback>
 8009964:	e71d      	b.n	80097a2 <HAL_UART_IRQHandler+0x62>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009966:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009968:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800996a:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800996c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800996e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009972:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009974:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8009978:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800997a:	f7ff fed1 	bl	8009720 <HAL_UART_TxCpltCallback>
    return;
 800997e:	e710      	b.n	80097a2 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009980:	4620      	mov	r0, r4
}
 8009982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009986:	f000 bbdf 	b.w	800a148 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 800998a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800998c:	2b00      	cmp	r3, #0
 800998e:	d097      	beq.n	80098c0 <HAL_UART_IRQHandler+0x180>
          huart->RxISR(huart);
 8009990:	4620      	mov	r0, r4
 8009992:	4798      	blx	r3
 8009994:	6822      	ldr	r2, [r4, #0]
 8009996:	e793      	b.n	80098c0 <HAL_UART_IRQHandler+0x180>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009998:	f8b4 505e 	ldrh.w	r5, [r4, #94]	; 0x5e
 800999c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 80099a0:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099a4:	1b49      	subs	r1, r1, r5
      if ((huart->RxXferCount > 0U)
 80099a6:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099a8:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80099aa:	2800      	cmp	r0, #0
 80099ac:	f43f aef9 	beq.w	80097a2 <HAL_UART_IRQHandler+0x62>
 80099b0:	2900      	cmp	r1, #0
 80099b2:	f43f aef6 	beq.w	80097a2 <HAL_UART_IRQHandler+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b6:	6816      	ldr	r6, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80099b8:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099ba:	4d11      	ldr	r5, [pc, #68]	; (8009a00 <HAL_UART_IRQHandler+0x2c0>)
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099bc:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099be:	f426 7690 	bic.w	r6, r6, #288	; 0x120
 80099c2:	6016      	str	r6, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099c4:	6896      	ldr	r6, [r2, #8]
 80099c6:	4035      	ands	r5, r6
 80099c8:	6095      	str	r5, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80099ca:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ce:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d0:	6815      	ldr	r5, [r2, #0]
        huart->RxISR = NULL;
 80099d2:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d4:	f025 0510 	bic.w	r5, r5, #16
 80099d8:	6015      	str	r5, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099da:	f7ff feaf 	bl	800973c <HAL_UARTEx_RxEventCallback>
 80099de:	e6e0      	b.n	80097a2 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099e0:	4620      	mov	r0, r4
}
 80099e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099e6:	f000 bbad 	b.w	800a144 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 80099ea:	4620      	mov	r0, r4
 80099ec:	f7ff fe9a 	bl	8009724 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f0:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 80099f4:	e6d5      	b.n	80097a2 <HAL_UART_IRQHandler+0x62>
 80099f6:	bf00      	nop
 80099f8:	10000001 	.word	0x10000001
 80099fc:	04000120 	.word	0x04000120
 8009a00:	effffffe 	.word	0xeffffffe
 8009a04:	08009729 	.word	0x08009729

08009a08 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009a0a:	07da      	lsls	r2, r3, #31
{
 8009a0c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a0e:	d506      	bpl.n	8009a1e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a10:	6801      	ldr	r1, [r0, #0]
 8009a12:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009a14:	684a      	ldr	r2, [r1, #4]
 8009a16:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009a1a:	4322      	orrs	r2, r4
 8009a1c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a1e:	079c      	lsls	r4, r3, #30
 8009a20:	d506      	bpl.n	8009a30 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a22:	6801      	ldr	r1, [r0, #0]
 8009a24:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009a26:	684a      	ldr	r2, [r1, #4]
 8009a28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a2c:	4322      	orrs	r2, r4
 8009a2e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a30:	0759      	lsls	r1, r3, #29
 8009a32:	d506      	bpl.n	8009a42 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a34:	6801      	ldr	r1, [r0, #0]
 8009a36:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009a38:	684a      	ldr	r2, [r1, #4]
 8009a3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a3e:	4322      	orrs	r2, r4
 8009a40:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a42:	071a      	lsls	r2, r3, #28
 8009a44:	d506      	bpl.n	8009a54 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a46:	6801      	ldr	r1, [r0, #0]
 8009a48:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009a4a:	684a      	ldr	r2, [r1, #4]
 8009a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a50:	4322      	orrs	r2, r4
 8009a52:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a54:	06dc      	lsls	r4, r3, #27
 8009a56:	d506      	bpl.n	8009a66 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a58:	6801      	ldr	r1, [r0, #0]
 8009a5a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009a5c:	688a      	ldr	r2, [r1, #8]
 8009a5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a62:	4322      	orrs	r2, r4
 8009a64:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a66:	0699      	lsls	r1, r3, #26
 8009a68:	d506      	bpl.n	8009a78 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a6a:	6801      	ldr	r1, [r0, #0]
 8009a6c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009a6e:	688a      	ldr	r2, [r1, #8]
 8009a70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a74:	4322      	orrs	r2, r4
 8009a76:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a78:	065a      	lsls	r2, r3, #25
 8009a7a:	d50a      	bpl.n	8009a92 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a7c:	6801      	ldr	r1, [r0, #0]
 8009a7e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009a80:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a82:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a86:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009a8a:	ea42 0204 	orr.w	r2, r2, r4
 8009a8e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a90:	d00b      	beq.n	8009aaa <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a92:	061b      	lsls	r3, r3, #24
 8009a94:	d506      	bpl.n	8009aa4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a96:	6802      	ldr	r2, [r0, #0]
 8009a98:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009a9a:	6853      	ldr	r3, [r2, #4]
 8009a9c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009aa0:	430b      	orrs	r3, r1
 8009aa2:	6053      	str	r3, [r2, #4]
}
 8009aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009aaa:	684a      	ldr	r2, [r1, #4]
 8009aac:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009aae:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009ab2:	4322      	orrs	r2, r4
 8009ab4:	604a      	str	r2, [r1, #4]
 8009ab6:	e7ec      	b.n	8009a92 <UART_AdvFeatureConfig+0x8a>

08009ab8 <UART_CheckIdleState>:
{
 8009ab8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aba:	2300      	movs	r3, #0
{
 8009abc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009abe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8009ac2:	f7f9 fdc5 	bl	8003650 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ac6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8009ac8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	0711      	lsls	r1, r2, #28
 8009ace:	d40d      	bmi.n	8009aec <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	0752      	lsls	r2, r2, #29
 8009ad4:	d431      	bmi.n	8009b3a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009ad8:	2220      	movs	r2, #32
  return HAL_OK;
 8009ada:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8009adc:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009ae0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009ae4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aec:	69da      	ldr	r2, [r3, #28]
 8009aee:	0292      	lsls	r2, r2, #10
 8009af0:	d4ee      	bmi.n	8009ad0 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009af2:	f7f9 fdad 	bl	8003650 <HAL_GetTick>
 8009af6:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009af8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009afa:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8009afe:	d22d      	bcs.n	8009b5c <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	0750      	lsls	r0, r2, #29
 8009b04:	d5f2      	bpl.n	8009aec <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b06:	69da      	ldr	r2, [r3, #28]
 8009b08:	0511      	lsls	r1, r2, #20
 8009b0a:	d5ef      	bpl.n	8009aec <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8009b10:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8009b12:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8009b14:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b16:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b18:	6819      	ldr	r1, [r3, #0]
 8009b1a:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8009b1e:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b20:	6899      	ldr	r1, [r3, #8]
 8009b22:	f021 0101 	bic.w	r1, r1, #1
 8009b26:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8009b28:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009b2c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009b30:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b34:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8009b38:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	0258      	lsls	r0, r3, #9
 8009b3e:	d4ca      	bmi.n	8009ad6 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b40:	f7f9 fd86 	bl	8003650 <HAL_GetTick>
 8009b44:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b46:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b48:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8009b4c:	d206      	bcs.n	8009b5c <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	0751      	lsls	r1, r2, #29
 8009b52:	d5f2      	bpl.n	8009b3a <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b54:	69da      	ldr	r2, [r3, #28]
 8009b56:	0512      	lsls	r2, r2, #20
 8009b58:	d5ef      	bpl.n	8009b3a <UART_CheckIdleState+0x82>
 8009b5a:	e7d7      	b.n	8009b0c <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b5c:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8009b5e:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8009b60:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8009b62:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b6a:	689a      	ldr	r2, [r3, #8]
 8009b6c:	f022 0201 	bic.w	r2, r2, #1
 8009b70:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009b72:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8009b76:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009b7a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}

08009b80 <HAL_UART_Init>:
  if (huart == NULL)
 8009b80:	2800      	cmp	r0, #0
 8009b82:	f000 8198 	beq.w	8009eb6 <HAL_UART_Init+0x336>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009b86:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8009b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8e:	4604      	mov	r4, r0
 8009b90:	b086      	sub	sp, #24
  if (huart->gState == HAL_UART_STATE_RESET)
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d05f      	beq.n	8009c56 <HAL_UART_Init+0xd6>
  __HAL_UART_DISABLE(huart);
 8009b96:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009b98:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b9a:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8009b9c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ba0:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8009ba2:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ba4:	432a      	orrs	r2, r5
 8009ba6:	6965      	ldr	r5, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8009ba8:	f020 0001 	bic.w	r0, r0, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bac:	49cb      	ldr	r1, [pc, #812]	; (8009edc <HAL_UART_Init+0x35c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bae:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bb0:	68e6      	ldr	r6, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8009bb2:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bb4:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bb6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bb8:	4302      	orrs	r2, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bba:	69a7      	ldr	r7, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bbc:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bbe:	4dc8      	ldr	r5, [pc, #800]	; (8009ee0 <HAL_UART_Init+0x360>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bc0:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bc2:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bc4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009bcc:	ea42 0206 	orr.w	r2, r2, r6
 8009bd0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bd2:	d045      	beq.n	8009c60 <HAL_UART_Init+0xe0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bd4:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8009bd6:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bd8:	49c2      	ldr	r1, [pc, #776]	; (8009ee4 <HAL_UART_Init+0x364>)
    tmpreg |= huart->Init.OneBitSampling;
 8009bda:	433a      	orrs	r2, r7
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bdc:	4ec2      	ldr	r6, [pc, #776]	; (8009ee8 <HAL_UART_Init+0x368>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bde:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009be0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009be2:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009be4:	ea42 0201 	orr.w	r2, r2, r1
 8009be8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bec:	f022 020f 	bic.w	r2, r2, #15
 8009bf0:	ea42 0205 	orr.w	r2, r2, r5
 8009bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bf6:	d025      	beq.n	8009c44 <HAL_UART_Init+0xc4>
 8009bf8:	4abc      	ldr	r2, [pc, #752]	; (8009eec <HAL_UART_Init+0x36c>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	f000 808c 	beq.w	8009d18 <HAL_UART_Init+0x198>
 8009c00:	4abb      	ldr	r2, [pc, #748]	; (8009ef0 <HAL_UART_Init+0x370>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	f000 8159 	beq.w	8009eba <HAL_UART_Init+0x33a>
 8009c08:	4aba      	ldr	r2, [pc, #744]	; (8009ef4 <HAL_UART_Init+0x374>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	f000 813f 	beq.w	8009e8e <HAL_UART_Init+0x30e>
 8009c10:	4ab9      	ldr	r2, [pc, #740]	; (8009ef8 <HAL_UART_Init+0x378>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	f000 81fa 	beq.w	800a00c <HAL_UART_Init+0x48c>
 8009c18:	4ab8      	ldr	r2, [pc, #736]	; (8009efc <HAL_UART_Init+0x37c>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	f000 8265 	beq.w	800a0ea <HAL_UART_Init+0x56a>
 8009c20:	4ab7      	ldr	r2, [pc, #732]	; (8009f00 <HAL_UART_Init+0x380>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	f000 826b 	beq.w	800a0fe <HAL_UART_Init+0x57e>
 8009c28:	4ab6      	ldr	r2, [pc, #728]	; (8009f04 <HAL_UART_Init+0x384>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	f000 8251 	beq.w	800a0d2 <HAL_UART_Init+0x552>
  huart->NbRxDataToProcess = 1;
 8009c30:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8009c34:	2300      	movs	r3, #0
    return HAL_ERROR;
 8009c36:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 8009c38:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8009c3a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 8009c3e:	b006      	add	sp, #24
 8009c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c44:	4bb0      	ldr	r3, [pc, #704]	; (8009f08 <HAL_UART_Init+0x388>)
 8009c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c4c:	2b28      	cmp	r3, #40	; 0x28
 8009c4e:	d8ef      	bhi.n	8009c30 <HAL_UART_Init+0xb0>
 8009c50:	4aae      	ldr	r2, [pc, #696]	; (8009f0c <HAL_UART_Init+0x38c>)
 8009c52:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c54:	e068      	b.n	8009d28 <HAL_UART_Init+0x1a8>
    huart->Lock = HAL_UNLOCKED;
 8009c56:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009c5a:	f7f9 fae1 	bl	8003220 <HAL_UART_MspInit>
 8009c5e:	e79a      	b.n	8009b96 <HAL_UART_Init+0x16>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c60:	6899      	ldr	r1, [r3, #8]
 8009c62:	4aa0      	ldr	r2, [pc, #640]	; (8009ee4 <HAL_UART_Init+0x364>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c64:	48a8      	ldr	r0, [pc, #672]	; (8009f08 <HAL_UART_Init+0x388>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c66:	400a      	ands	r2, r1
 8009c68:	433a      	orrs	r2, r7
 8009c6a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c70:	f022 020f 	bic.w	r2, r2, #15
 8009c74:	430a      	orrs	r2, r1
 8009c76:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c78:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	2b05      	cmp	r3, #5
 8009c80:	d8d6      	bhi.n	8009c30 <HAL_UART_Init+0xb0>
 8009c82:	4aa3      	ldr	r2, [pc, #652]	; (8009f10 <HAL_UART_Init+0x390>)
 8009c84:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8009c86:	2b20      	cmp	r3, #32
 8009c88:	f200 8121 	bhi.w	8009ece <HAL_UART_Init+0x34e>
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d9cf      	bls.n	8009c30 <HAL_UART_Init+0xb0>
 8009c90:	3b02      	subs	r3, #2
 8009c92:	2b1e      	cmp	r3, #30
 8009c94:	d8cc      	bhi.n	8009c30 <HAL_UART_Init+0xb0>
 8009c96:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <HAL_UART_Init+0x11c>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	0800a093 	.word	0x0800a093
 8009ca0:	08009c31 	.word	0x08009c31
 8009ca4:	0800a089 	.word	0x0800a089
 8009ca8:	08009c31 	.word	0x08009c31
 8009cac:	08009c31 	.word	0x08009c31
 8009cb0:	08009c31 	.word	0x08009c31
 8009cb4:	0800a079 	.word	0x0800a079
 8009cb8:	08009c31 	.word	0x08009c31
 8009cbc:	08009c31 	.word	0x08009c31
 8009cc0:	08009c31 	.word	0x08009c31
 8009cc4:	08009c31 	.word	0x08009c31
 8009cc8:	08009c31 	.word	0x08009c31
 8009ccc:	08009c31 	.word	0x08009c31
 8009cd0:	08009c31 	.word	0x08009c31
 8009cd4:	0800a065 	.word	0x0800a065
 8009cd8:	08009c31 	.word	0x08009c31
 8009cdc:	08009c31 	.word	0x08009c31
 8009ce0:	08009c31 	.word	0x08009c31
 8009ce4:	08009c31 	.word	0x08009c31
 8009ce8:	08009c31 	.word	0x08009c31
 8009cec:	08009c31 	.word	0x08009c31
 8009cf0:	08009c31 	.word	0x08009c31
 8009cf4:	08009c31 	.word	0x08009c31
 8009cf8:	08009c31 	.word	0x08009c31
 8009cfc:	08009c31 	.word	0x08009c31
 8009d00:	08009c31 	.word	0x08009c31
 8009d04:	08009c31 	.word	0x08009c31
 8009d08:	08009c31 	.word	0x08009c31
 8009d0c:	08009c31 	.word	0x08009c31
 8009d10:	08009c31 	.word	0x08009c31
 8009d14:	08009e2b 	.word	0x08009e2b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d18:	4b7b      	ldr	r3, [pc, #492]	; (8009f08 <HAL_UART_Init+0x388>)
 8009d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	2b05      	cmp	r3, #5
 8009d22:	d885      	bhi.n	8009c30 <HAL_UART_Init+0xb0>
 8009d24:	4a7b      	ldr	r2, [pc, #492]	; (8009f14 <HAL_UART_Init+0x394>)
 8009d26:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d28:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009d2c:	f000 80fe 	beq.w	8009f2c <HAL_UART_Init+0x3ac>
    switch (clocksource)
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	f200 80ba 	bhi.w	8009eaa <HAL_UART_Init+0x32a>
 8009d36:	2b20      	cmp	r3, #32
 8009d38:	f63f af7a 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
 8009d3c:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <HAL_UART_Init+0x1c4>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	0800a05f 	.word	0x0800a05f
 8009d48:	0800a059 	.word	0x0800a059
 8009d4c:	08009c31 	.word	0x08009c31
 8009d50:	08009c31 	.word	0x08009c31
 8009d54:	0800a04f 	.word	0x0800a04f
 8009d58:	08009c31 	.word	0x08009c31
 8009d5c:	08009c31 	.word	0x08009c31
 8009d60:	08009c31 	.word	0x08009c31
 8009d64:	0800a035 	.word	0x0800a035
 8009d68:	08009c31 	.word	0x08009c31
 8009d6c:	08009c31 	.word	0x08009c31
 8009d70:	08009c31 	.word	0x08009c31
 8009d74:	08009c31 	.word	0x08009c31
 8009d78:	08009c31 	.word	0x08009c31
 8009d7c:	08009c31 	.word	0x08009c31
 8009d80:	08009c31 	.word	0x08009c31
 8009d84:	0800a021 	.word	0x0800a021
 8009d88:	08009c31 	.word	0x08009c31
 8009d8c:	08009c31 	.word	0x08009c31
 8009d90:	08009c31 	.word	0x08009c31
 8009d94:	08009c31 	.word	0x08009c31
 8009d98:	08009c31 	.word	0x08009c31
 8009d9c:	08009c31 	.word	0x08009c31
 8009da0:	08009c31 	.word	0x08009c31
 8009da4:	08009c31 	.word	0x08009c31
 8009da8:	08009c31 	.word	0x08009c31
 8009dac:	08009c31 	.word	0x08009c31
 8009db0:	08009c31 	.word	0x08009c31
 8009db4:	08009c31 	.word	0x08009c31
 8009db8:	08009c31 	.word	0x08009c31
 8009dbc:	08009c31 	.word	0x08009c31
 8009dc0:	08009c31 	.word	0x08009c31
 8009dc4:	08009dc9 	.word	0x08009dc9
        pclk = (uint32_t) CSI_VALUE;
 8009dc8:	4853      	ldr	r0, [pc, #332]	; (8009f18 <HAL_UART_Init+0x398>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dca:	4b54      	ldr	r3, [pc, #336]	; (8009f1c <HAL_UART_Init+0x39c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dcc:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dd0:	6862      	ldr	r2, [r4, #4]
 8009dd2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8009dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dda:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8009de2:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009de4:	f1a3 0210 	sub.w	r2, r3, #16
 8009de8:	428a      	cmp	r2, r1
 8009dea:	f63f af21 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
        huart->Instance->BRR = usartdiv;
 8009dee:	6820      	ldr	r0, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8009df0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->RxISR = NULL;
 8009df4:	2200      	movs	r2, #0
        huart->Instance->BRR = usartdiv;
 8009df6:	60c3      	str	r3, [r0, #12]
  huart->NbRxDataToProcess = 1;
 8009df8:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8009dfa:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d14e      	bne.n	8009ea2 <HAL_UART_Init+0x322>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e04:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8009e06:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e10:	689a      	ldr	r2, [r3, #8]
 8009e12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e16:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	f042 0201 	orr.w	r2, r2, #1
 8009e1e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8009e20:	f7ff fe4a 	bl	8009ab8 <UART_CheckIdleState>
}
 8009e24:	b006      	add	sp, #24
 8009e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = (uint32_t) CSI_VALUE;
 8009e2a:	483b      	ldr	r0, [pc, #236]	; (8009f18 <HAL_UART_Init+0x398>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e2c:	4b3b      	ldr	r3, [pc, #236]	; (8009f1c <HAL_UART_Init+0x39c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e2e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e30:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e34:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e38:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	f4ff aef7 	bcc.w	8009c30 <HAL_UART_Init+0xb0>
 8009e42:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8009e46:	f63f aef3 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e4a:	f04f 0800 	mov.w	r8, #0
 8009e4e:	2300      	movs	r3, #0
 8009e50:	4641      	mov	r1, r8
 8009e52:	f7f6 fafd 	bl	8000450 <__aeabi_uldivmod>
 8009e56:	462a      	mov	r2, r5
 8009e58:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8009e5c:	4643      	mov	r3, r8
 8009e5e:	020f      	lsls	r7, r1, #8
 8009e60:	0206      	lsls	r6, r0, #8
 8009e62:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8009e66:	eb16 000c 	adds.w	r0, r6, ip
 8009e6a:	f147 0100 	adc.w	r1, r7, #0
 8009e6e:	f7f6 faef 	bl	8000450 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e72:	4b2b      	ldr	r3, [pc, #172]	; (8009f20 <HAL_UART_Init+0x3a0>)
 8009e74:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	f63f aed9 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
          huart->Instance->BRR = usartdiv;
 8009e7e:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8009e80:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8009e84:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 8009e86:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8009e88:	e9c4 881c 	strd	r8, r8, [r4, #112]	; 0x70
 8009e8c:	e7b7      	b.n	8009dfe <HAL_UART_Init+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e8e:	4b1e      	ldr	r3, [pc, #120]	; (8009f08 <HAL_UART_Init+0x388>)
 8009e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	2b05      	cmp	r3, #5
 8009e98:	f63f aeca 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
 8009e9c:	4a21      	ldr	r2, [pc, #132]	; (8009f24 <HAL_UART_Init+0x3a4>)
 8009e9e:	5cd3      	ldrb	r3, [r2, r3]
 8009ea0:	e742      	b.n	8009d28 <HAL_UART_Init+0x1a8>
    UART_AdvFeatureConfig(huart);
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f7ff fdb0 	bl	8009a08 <UART_AdvFeatureConfig>
 8009ea8:	e7ac      	b.n	8009e04 <HAL_UART_Init+0x284>
    switch (clocksource)
 8009eaa:	2b40      	cmp	r3, #64	; 0x40
 8009eac:	f47f aec0 	bne.w	8009c30 <HAL_UART_Init+0xb0>
 8009eb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009eb4:	e789      	b.n	8009dca <HAL_UART_Init+0x24a>
    return HAL_ERROR;
 8009eb6:	2001      	movs	r0, #1
}
 8009eb8:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009eba:	4b13      	ldr	r3, [pc, #76]	; (8009f08 <HAL_UART_Init+0x388>)
 8009ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ebe:	f003 0307 	and.w	r3, r3, #7
 8009ec2:	2b05      	cmp	r3, #5
 8009ec4:	f63f aeb4 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
 8009ec8:	4a17      	ldr	r2, [pc, #92]	; (8009f28 <HAL_UART_Init+0x3a8>)
 8009eca:	5cd3      	ldrb	r3, [r2, r3]
 8009ecc:	e72c      	b.n	8009d28 <HAL_UART_Init+0x1a8>
    switch (clocksource)
 8009ece:	2b40      	cmp	r3, #64	; 0x40
 8009ed0:	f47f aeae 	bne.w	8009c30 <HAL_UART_Init+0xb0>
 8009ed4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009ed8:	e7a8      	b.n	8009e2c <HAL_UART_Init+0x2ac>
 8009eda:	bf00      	nop
 8009edc:	cfff69f3 	.word	0xcfff69f3
 8009ee0:	58000c00 	.word	0x58000c00
 8009ee4:	11fff4ff 	.word	0x11fff4ff
 8009ee8:	40011000 	.word	0x40011000
 8009eec:	40004400 	.word	0x40004400
 8009ef0:	40004800 	.word	0x40004800
 8009ef4:	40004c00 	.word	0x40004c00
 8009ef8:	40005000 	.word	0x40005000
 8009efc:	40011400 	.word	0x40011400
 8009f00:	40007800 	.word	0x40007800
 8009f04:	40007c00 	.word	0x40007c00
 8009f08:	58024400 	.word	0x58024400
 8009f0c:	0801735c 	.word	0x0801735c
 8009f10:	08017390 	.word	0x08017390
 8009f14:	08017388 	.word	0x08017388
 8009f18:	003d0900 	.word	0x003d0900
 8009f1c:	08017398 	.word	0x08017398
 8009f20:	000ffcff 	.word	0x000ffcff
 8009f24:	08017388 	.word	0x08017388
 8009f28:	08017388 	.word	0x08017388
    switch (clocksource)
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	d86a      	bhi.n	800a006 <HAL_UART_Init+0x486>
 8009f30:	2b20      	cmp	r3, #32
 8009f32:	f63f ae7d 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
 8009f36:	a201      	add	r2, pc, #4	; (adr r2, 8009f3c <HAL_UART_Init+0x3bc>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	0800a0a5 	.word	0x0800a0a5
 8009f40:	0800a099 	.word	0x0800a099
 8009f44:	08009c31 	.word	0x08009c31
 8009f48:	08009c31 	.word	0x08009c31
 8009f4c:	0800a0c9 	.word	0x0800a0c9
 8009f50:	08009c31 	.word	0x08009c31
 8009f54:	08009c31 	.word	0x08009c31
 8009f58:	08009c31 	.word	0x08009c31
 8009f5c:	0800a0bf 	.word	0x0800a0bf
 8009f60:	08009c31 	.word	0x08009c31
 8009f64:	08009c31 	.word	0x08009c31
 8009f68:	08009c31 	.word	0x08009c31
 8009f6c:	08009c31 	.word	0x08009c31
 8009f70:	08009c31 	.word	0x08009c31
 8009f74:	08009c31 	.word	0x08009c31
 8009f78:	08009c31 	.word	0x08009c31
 8009f7c:	0800a0ab 	.word	0x0800a0ab
 8009f80:	08009c31 	.word	0x08009c31
 8009f84:	08009c31 	.word	0x08009c31
 8009f88:	08009c31 	.word	0x08009c31
 8009f8c:	08009c31 	.word	0x08009c31
 8009f90:	08009c31 	.word	0x08009c31
 8009f94:	08009c31 	.word	0x08009c31
 8009f98:	08009c31 	.word	0x08009c31
 8009f9c:	08009c31 	.word	0x08009c31
 8009fa0:	08009c31 	.word	0x08009c31
 8009fa4:	08009c31 	.word	0x08009c31
 8009fa8:	08009c31 	.word	0x08009c31
 8009fac:	08009c31 	.word	0x08009c31
 8009fb0:	08009c31 	.word	0x08009c31
 8009fb4:	08009c31 	.word	0x08009c31
 8009fb8:	08009c31 	.word	0x08009c31
 8009fbc:	08009fc1 	.word	0x08009fc1
        pclk = (uint32_t) CSI_VALUE;
 8009fc0:	4857      	ldr	r0, [pc, #348]	; (800a120 <HAL_UART_Init+0x5a0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fc2:	4b58      	ldr	r3, [pc, #352]	; (800a124 <HAL_UART_Init+0x5a4>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fc4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fc8:	6862      	ldr	r2, [r4, #4]
 8009fca:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 8009fce:	0853      	lsrs	r3, r2, #1
 8009fd0:	fbb0 f0f5 	udiv	r0, r0, r5
 8009fd4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8009fd8:	fbb0 f0f2 	udiv	r0, r0, r2
 8009fdc:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fde:	f1a2 0310 	sub.w	r3, r2, #16
 8009fe2:	428b      	cmp	r3, r1
 8009fe4:	f63f ae24 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fe8:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fec:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8009ff0:	6825      	ldr	r5, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8009ff2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ff6:	b29b      	uxth	r3, r3
  huart->RxISR = NULL;
 8009ff8:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60eb      	str	r3, [r5, #12]
  huart->NbRxDataToProcess = 1;
 8009ffe:	66a0      	str	r0, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800a000:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  return ret;
 800a004:	e6fb      	b.n	8009dfe <HAL_UART_Init+0x27e>
    switch (clocksource)
 800a006:	2b40      	cmp	r3, #64	; 0x40
 800a008:	d0db      	beq.n	8009fc2 <HAL_UART_Init+0x442>
 800a00a:	e611      	b.n	8009c30 <HAL_UART_Init+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a00c:	4b46      	ldr	r3, [pc, #280]	; (800a128 <HAL_UART_Init+0x5a8>)
 800a00e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	2b05      	cmp	r3, #5
 800a016:	f63f ae0b 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
 800a01a:	4a44      	ldr	r2, [pc, #272]	; (800a12c <HAL_UART_Init+0x5ac>)
 800a01c:	5cd3      	ldrb	r3, [r2, r3]
 800a01e:	e683      	b.n	8009d28 <HAL_UART_Init+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a020:	4b41      	ldr	r3, [pc, #260]	; (800a128 <HAL_UART_Init+0x5a8>)
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	0692      	lsls	r2, r2, #26
 800a026:	d574      	bpl.n	800a112 <HAL_UART_Init+0x592>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4841      	ldr	r0, [pc, #260]	; (800a130 <HAL_UART_Init+0x5b0>)
 800a02c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a030:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800a032:	e6ca      	b.n	8009dca <HAL_UART_Init+0x24a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a034:	a803      	add	r0, sp, #12
 800a036:	f7fe fe7d 	bl	8008d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a03a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d152      	bne.n	800a0e6 <HAL_UART_Init+0x566>
  huart->NbRxDataToProcess = 1;
 800a040:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800a044:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800a046:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800a048:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  return ret;
 800a04c:	e6d7      	b.n	8009dfe <HAL_UART_Init+0x27e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a04e:	4668      	mov	r0, sp
 800a050:	f7fe fdc4 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a054:	9801      	ldr	r0, [sp, #4]
        break;
 800a056:	e7f1      	b.n	800a03c <HAL_UART_Init+0x4bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a058:	f7fd ff18 	bl	8007e8c <HAL_RCC_GetPCLK2Freq>
        break;
 800a05c:	e7ee      	b.n	800a03c <HAL_UART_Init+0x4bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a05e:	f7fd fecd 	bl	8007dfc <HAL_RCC_GetPCLK1Freq>
        break;
 800a062:	e7eb      	b.n	800a03c <HAL_UART_Init+0x4bc>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a064:	4b30      	ldr	r3, [pc, #192]	; (800a128 <HAL_UART_Init+0x5a8>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	0690      	lsls	r0, r2, #26
 800a06a:	d554      	bpl.n	800a116 <HAL_UART_Init+0x596>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4830      	ldr	r0, [pc, #192]	; (800a130 <HAL_UART_Init+0x5b0>)
 800a070:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a074:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800a076:	e6d9      	b.n	8009e2c <HAL_UART_Init+0x2ac>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a078:	a803      	add	r0, sp, #12
 800a07a:	f7fe fe5b 	bl	8008d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a07e:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800a080:	2800      	cmp	r0, #0
 800a082:	d0dd      	beq.n	800a040 <HAL_UART_Init+0x4c0>
 800a084:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a086:	e6d1      	b.n	8009e2c <HAL_UART_Init+0x2ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a088:	4668      	mov	r0, sp
 800a08a:	f7fe fda7 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a08e:	9801      	ldr	r0, [sp, #4]
        break;
 800a090:	e7f6      	b.n	800a080 <HAL_UART_Init+0x500>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a092:	f7fe fd91 	bl	8008bb8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800a096:	e7f3      	b.n	800a080 <HAL_UART_Init+0x500>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a098:	f7fd fef8 	bl	8007e8c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d0cf      	beq.n	800a040 <HAL_UART_Init+0x4c0>
 800a0a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a0a2:	e78e      	b.n	8009fc2 <HAL_UART_Init+0x442>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0a4:	f7fd feaa 	bl	8007dfc <HAL_RCC_GetPCLK1Freq>
        break;
 800a0a8:	e7f8      	b.n	800a09c <HAL_UART_Init+0x51c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0aa:	4b1f      	ldr	r3, [pc, #124]	; (800a128 <HAL_UART_Init+0x5a8>)
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	0691      	lsls	r1, r2, #26
 800a0b0:	d533      	bpl.n	800a11a <HAL_UART_Init+0x59a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	481e      	ldr	r0, [pc, #120]	; (800a130 <HAL_UART_Init+0x5b0>)
 800a0b6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a0ba:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800a0bc:	e781      	b.n	8009fc2 <HAL_UART_Init+0x442>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0be:	a803      	add	r0, sp, #12
 800a0c0:	f7fe fe38 	bl	8008d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0c4:	9804      	ldr	r0, [sp, #16]
        break;
 800a0c6:	e7e9      	b.n	800a09c <HAL_UART_Init+0x51c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0c8:	4668      	mov	r0, sp
 800a0ca:	f7fe fd87 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0ce:	9801      	ldr	r0, [sp, #4]
        break;
 800a0d0:	e7e4      	b.n	800a09c <HAL_UART_Init+0x51c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0d2:	4b15      	ldr	r3, [pc, #84]	; (800a128 <HAL_UART_Init+0x5a8>)
 800a0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	2b05      	cmp	r3, #5
 800a0dc:	f63f ada8 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
 800a0e0:	4a14      	ldr	r2, [pc, #80]	; (800a134 <HAL_UART_Init+0x5b4>)
 800a0e2:	5cd3      	ldrb	r3, [r2, r3]
 800a0e4:	e620      	b.n	8009d28 <HAL_UART_Init+0x1a8>
 800a0e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a0e8:	e66f      	b.n	8009dca <HAL_UART_Init+0x24a>
 800a0ea:	4b0f      	ldr	r3, [pc, #60]	; (800a128 <HAL_UART_Init+0x5a8>)
 800a0ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0f2:	2b28      	cmp	r3, #40	; 0x28
 800a0f4:	f63f ad9c 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
 800a0f8:	4a0f      	ldr	r2, [pc, #60]	; (800a138 <HAL_UART_Init+0x5b8>)
 800a0fa:	5cd3      	ldrb	r3, [r2, r3]
 800a0fc:	e614      	b.n	8009d28 <HAL_UART_Init+0x1a8>
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <HAL_UART_Init+0x5a8>)
 800a100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	2b05      	cmp	r3, #5
 800a108:	f63f ad92 	bhi.w	8009c30 <HAL_UART_Init+0xb0>
 800a10c:	4a0b      	ldr	r2, [pc, #44]	; (800a13c <HAL_UART_Init+0x5bc>)
 800a10e:	5cd3      	ldrb	r3, [r2, r3]
 800a110:	e60a      	b.n	8009d28 <HAL_UART_Init+0x1a8>
          pclk = (uint32_t) HSI_VALUE;
 800a112:	4807      	ldr	r0, [pc, #28]	; (800a130 <HAL_UART_Init+0x5b0>)
 800a114:	e659      	b.n	8009dca <HAL_UART_Init+0x24a>
          pclk = (uint32_t) HSI_VALUE;
 800a116:	4806      	ldr	r0, [pc, #24]	; (800a130 <HAL_UART_Init+0x5b0>)
 800a118:	e688      	b.n	8009e2c <HAL_UART_Init+0x2ac>
          pclk = (uint32_t) HSI_VALUE;
 800a11a:	4805      	ldr	r0, [pc, #20]	; (800a130 <HAL_UART_Init+0x5b0>)
 800a11c:	e751      	b.n	8009fc2 <HAL_UART_Init+0x442>
 800a11e:	bf00      	nop
 800a120:	003d0900 	.word	0x003d0900
 800a124:	08017398 	.word	0x08017398
 800a128:	58024400 	.word	0x58024400
 800a12c:	08017388 	.word	0x08017388
 800a130:	03d09000 	.word	0x03d09000
 800a134:	08017388 	.word	0x08017388
 800a138:	0801735c 	.word	0x0801735c
 800a13c:	08017388 	.word	0x08017388

0800a140 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop

0800a144 <HAL_UARTEx_RxFifoFullCallback>:
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop

0800a148 <HAL_UARTEx_TxFifoEmptyCallback>:
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop

0800a14c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a14c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800a150:	2a01      	cmp	r2, #1
 800a152:	d017      	beq.n	800a184 <HAL_UARTEx_DisableFifoMode+0x38>
 800a154:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 800a156:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a158:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a15a:	681a      	ldr	r2, [r3, #0]
{
 800a15c:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 800a15e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800a162:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a164:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800a166:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 800a168:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a16a:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800a16e:	f025 0501 	bic.w	r5, r5, #1
 800a172:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a174:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a176:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a178:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800a17c:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
}
 800a180:	bc70      	pop	{r4, r5, r6}
 800a182:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a184:	2002      	movs	r0, #2
}
 800a186:	4770      	bx	lr

0800a188 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a188:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800a18c:	2a01      	cmp	r2, #1
 800a18e:	d033      	beq.n	800a1f8 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 800a190:	4603      	mov	r3, r0
 800a192:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a194:	681a      	ldr	r2, [r3, #0]
{
 800a196:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800a198:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a19c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a19e:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1a0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800a1a2:	f020 0001 	bic.w	r0, r0, #1
 800a1a6:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1a8:	6890      	ldr	r0, [r2, #8]
 800a1aa:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800a1ae:	4301      	orrs	r1, r0
 800a1b0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1b2:	b1f5      	cbz	r5, 800a1f2 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1b4:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1b6:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1b8:	f3c6 6642 	ubfx	r6, r6, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1bc:	480f      	ldr	r0, [pc, #60]	; (800a1fc <HAL_UARTEx_SetTxFifoThreshold+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1be:	0f6d      	lsrs	r5, r5, #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1c0:	4f0f      	ldr	r7, [pc, #60]	; (800a200 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1c2:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1c4:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1c6:	0109      	lsls	r1, r1, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1c8:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1ca:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1cc:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1ce:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1d2:	fbb0 f0f5 	udiv	r0, r0, r5
  huart->gState = HAL_UART_STATE_READY;
 800a1d6:	2520      	movs	r5, #32
 800a1d8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a1dc:	2100      	movs	r1, #0
 800a1de:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1e2:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800a1e4:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a1e6:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a1ea:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800a1ee:	bcf0      	pop	{r4, r5, r6, r7}
 800a1f0:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800a1f2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	e7ee      	b.n	800a1d6 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800a1f8:	2002      	movs	r0, #2
}
 800a1fa:	4770      	bx	lr
 800a1fc:	080173b8 	.word	0x080173b8
 800a200:	080173b0 	.word	0x080173b0

0800a204 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800a204:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800a208:	2a01      	cmp	r2, #1
 800a20a:	d033      	beq.n	800a274 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 800a20c:	4603      	mov	r3, r0
 800a20e:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a210:	681a      	ldr	r2, [r3, #0]
{
 800a212:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800a214:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a218:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800a21a:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a21c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800a21e:	f020 0001 	bic.w	r0, r0, #1
 800a222:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a224:	6890      	ldr	r0, [r2, #8]
 800a226:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800a22a:	4301      	orrs	r1, r0
 800a22c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a22e:	b1f5      	cbz	r5, 800a26e <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a230:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a232:	6895      	ldr	r5, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a234:	f3c6 6642 	ubfx	r6, r6, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a238:	480f      	ldr	r0, [pc, #60]	; (800a278 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a23a:	0f6d      	lsrs	r5, r5, #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800a23c:	4f0f      	ldr	r7, [pc, #60]	; (800a27c <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a23e:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a240:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a242:	0109      	lsls	r1, r1, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800a244:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a246:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800a248:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a24a:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a24e:	fbb0 f0f5 	udiv	r0, r0, r5
  huart->gState = HAL_UART_STATE_READY;
 800a252:	2520      	movs	r5, #32
 800a254:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a258:	2100      	movs	r1, #0
 800a25a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a25e:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800a260:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a262:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a266:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800a26a:	bcf0      	pop	{r4, r5, r6, r7}
 800a26c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800a26e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a270:	4608      	mov	r0, r1
 800a272:	e7ee      	b.n	800a252 <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800a274:	2002      	movs	r0, #2
}
 800a276:	4770      	bx	lr
 800a278:	080173b8 	.word	0x080173b8
 800a27c:	080173b0 	.word	0x080173b0

0800a280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a280:	b084      	sub	sp, #16
 800a282:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a284:	9e09      	ldr	r6, [sp, #36]	; 0x24
{
 800a286:	ad04      	add	r5, sp, #16
 800a288:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a28a:	2e01      	cmp	r6, #1
{
 800a28c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a290:	d137      	bne.n	800a302 <USB_CoreInit+0x82>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a292:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a294:	4b31      	ldr	r3, [pc, #196]	; (800a35c <USB_CoreInit+0xdc>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a296:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800a29a:	9910      	ldr	r1, [sp, #64]	; 0x40
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a29c:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800a29e:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a2a0:	68c2      	ldr	r2, [r0, #12]
 800a2a2:	ea03 0302 	and.w	r3, r3, r2
 800a2a6:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a2a8:	68c3      	ldr	r3, [r0, #12]
 800a2aa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a2ae:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800a2b0:	d04a      	beq.n	800a348 <USB_CoreInit+0xc8>
{
 800a2b2:	4b2b      	ldr	r3, [pc, #172]	; (800a360 <USB_CoreInit+0xe0>)
 800a2b4:	e001      	b.n	800a2ba <USB_CoreInit+0x3a>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	d04b      	beq.n	800a352 <USB_CoreInit+0xd2>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2ba:	6922      	ldr	r2, [r4, #16]
 800a2bc:	2a00      	cmp	r2, #0
 800a2be:	dafa      	bge.n	800a2b6 <USB_CoreInit+0x36>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a2c0:	6922      	ldr	r2, [r4, #16]
 800a2c2:	4b27      	ldr	r3, [pc, #156]	; (800a360 <USB_CoreInit+0xe0>)
 800a2c4:	f042 0201 	orr.w	r2, r2, #1
 800a2c8:	6122      	str	r2, [r4, #16]

  do
  {
    if (++count > 200000U)
 800a2ca:	e001      	b.n	800a2d0 <USB_CoreInit+0x50>
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	d040      	beq.n	800a352 <USB_CoreInit+0xd2>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2d0:	6920      	ldr	r0, [r4, #16]
 800a2d2:	f010 0001 	ands.w	r0, r0, #1
 800a2d6:	d1f9      	bne.n	800a2cc <USB_CoreInit+0x4c>
  if (cfg.dma_enable == 1U)
 800a2d8:	9b07      	ldr	r3, [sp, #28]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d10e      	bne.n	800a2fc <USB_CoreInit+0x7c>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a2de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a2e0:	4b20      	ldr	r3, [pc, #128]	; (800a364 <USB_CoreInit+0xe4>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a2e2:	b292      	uxth	r2, r2
 800a2e4:	65e2      	str	r2, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a2e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a2ec:	68a3      	ldr	r3, [r4, #8]
 800a2ee:	f043 0306 	orr.w	r3, r3, #6
 800a2f2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2f4:	68a3      	ldr	r3, [r4, #8]
 800a2f6:	f043 0320 	orr.w	r3, r3, #32
 800a2fa:	60a3      	str	r3, [r4, #8]
}
 800a2fc:	bc70      	pop	{r4, r5, r6}
 800a2fe:	b004      	add	sp, #16
 800a300:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a302:	68c2      	ldr	r2, [r0, #12]
 800a304:	4b16      	ldr	r3, [pc, #88]	; (800a360 <USB_CoreInit+0xe0>)
 800a306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a30a:	60c2      	str	r2, [r0, #12]
    if (++count > 200000U)
 800a30c:	e001      	b.n	800a312 <USB_CoreInit+0x92>
 800a30e:	3b01      	subs	r3, #1
 800a310:	d021      	beq.n	800a356 <USB_CoreInit+0xd6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a312:	6922      	ldr	r2, [r4, #16]
 800a314:	2a00      	cmp	r2, #0
 800a316:	dafa      	bge.n	800a30e <USB_CoreInit+0x8e>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a318:	6922      	ldr	r2, [r4, #16]
 800a31a:	4b11      	ldr	r3, [pc, #68]	; (800a360 <USB_CoreInit+0xe0>)
 800a31c:	f042 0201 	orr.w	r2, r2, #1
 800a320:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800a322:	e001      	b.n	800a328 <USB_CoreInit+0xa8>
 800a324:	3b01      	subs	r3, #1
 800a326:	d016      	beq.n	800a356 <USB_CoreInit+0xd6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a328:	6920      	ldr	r0, [r4, #16]
 800a32a:	f010 0001 	ands.w	r0, r0, #1
 800a32e:	d1f9      	bne.n	800a324 <USB_CoreInit+0xa4>
    if (cfg.battery_charging_enable == 0U)
 800a330:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a332:	b923      	cbnz	r3, 800a33e <USB_CoreInit+0xbe>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a334:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a33a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a33c:	e7cc      	b.n	800a2d8 <USB_CoreInit+0x58>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a33e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a344:	63a3      	str	r3, [r4, #56]	; 0x38
 800a346:	e7c7      	b.n	800a2d8 <USB_CoreInit+0x58>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a348:	68c3      	ldr	r3, [r0, #12]
 800a34a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a34e:	60c3      	str	r3, [r0, #12]
 800a350:	e7af      	b.n	800a2b2 <USB_CoreInit+0x32>
      return HAL_TIMEOUT;
 800a352:	2003      	movs	r0, #3
 800a354:	e7c0      	b.n	800a2d8 <USB_CoreInit+0x58>
 800a356:	2003      	movs	r0, #3
 800a358:	e7ea      	b.n	800a330 <USB_CoreInit+0xb0>
 800a35a:	bf00      	nop
 800a35c:	ffbdffbf 	.word	0xffbdffbf
 800a360:	00030d40 	.word	0x00030d40
 800a364:	03ee0000 	.word	0x03ee0000

0800a368 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800a368:	2a02      	cmp	r2, #2
{
 800a36a:	4603      	mov	r3, r0
 800a36c:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 800a36e:	d00c      	beq.n	800a38a <USB_SetTurnaroundTime+0x22>
 800a370:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a374:	68d9      	ldr	r1, [r3, #12]
}
 800a376:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a378:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800a37c:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	4322      	orrs	r2, r4
}
 800a382:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a386:	60da      	str	r2, [r3, #12]
}
 800a388:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a38a:	4a23      	ldr	r2, [pc, #140]	; (800a418 <USB_SetTurnaroundTime+0xb0>)
 800a38c:	4823      	ldr	r0, [pc, #140]	; (800a41c <USB_SetTurnaroundTime+0xb4>)
 800a38e:	440a      	add	r2, r1
 800a390:	4282      	cmp	r2, r0
 800a392:	d92c      	bls.n	800a3ee <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a394:	4a22      	ldr	r2, [pc, #136]	; (800a420 <USB_SetTurnaroundTime+0xb8>)
 800a396:	4823      	ldr	r0, [pc, #140]	; (800a424 <USB_SetTurnaroundTime+0xbc>)
 800a398:	440a      	add	r2, r1
 800a39a:	4282      	cmp	r2, r0
 800a39c:	d92a      	bls.n	800a3f4 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a39e:	4a22      	ldr	r2, [pc, #136]	; (800a428 <USB_SetTurnaroundTime+0xc0>)
 800a3a0:	4822      	ldr	r0, [pc, #136]	; (800a42c <USB_SetTurnaroundTime+0xc4>)
 800a3a2:	440a      	add	r2, r1
 800a3a4:	4282      	cmp	r2, r0
 800a3a6:	d928      	bls.n	800a3fa <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a3a8:	4a21      	ldr	r2, [pc, #132]	; (800a430 <USB_SetTurnaroundTime+0xc8>)
 800a3aa:	4822      	ldr	r0, [pc, #136]	; (800a434 <USB_SetTurnaroundTime+0xcc>)
 800a3ac:	440a      	add	r2, r1
 800a3ae:	4282      	cmp	r2, r0
 800a3b0:	d326      	bcc.n	800a400 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a3b2:	4a21      	ldr	r2, [pc, #132]	; (800a438 <USB_SetTurnaroundTime+0xd0>)
 800a3b4:	4821      	ldr	r0, [pc, #132]	; (800a43c <USB_SetTurnaroundTime+0xd4>)
 800a3b6:	440a      	add	r2, r1
 800a3b8:	4282      	cmp	r2, r0
 800a3ba:	d924      	bls.n	800a406 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a3bc:	4a20      	ldr	r2, [pc, #128]	; (800a440 <USB_SetTurnaroundTime+0xd8>)
 800a3be:	4821      	ldr	r0, [pc, #132]	; (800a444 <USB_SetTurnaroundTime+0xdc>)
 800a3c0:	440a      	add	r2, r1
 800a3c2:	4282      	cmp	r2, r0
 800a3c4:	d322      	bcc.n	800a40c <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a3c6:	4a20      	ldr	r2, [pc, #128]	; (800a448 <USB_SetTurnaroundTime+0xe0>)
 800a3c8:	4820      	ldr	r0, [pc, #128]	; (800a44c <USB_SetTurnaroundTime+0xe4>)
 800a3ca:	440a      	add	r2, r1
 800a3cc:	4282      	cmp	r2, r0
 800a3ce:	d3cf      	bcc.n	800a370 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a3d0:	4a1f      	ldr	r2, [pc, #124]	; (800a450 <USB_SetTurnaroundTime+0xe8>)
 800a3d2:	4820      	ldr	r0, [pc, #128]	; (800a454 <USB_SetTurnaroundTime+0xec>)
 800a3d4:	440a      	add	r2, r1
 800a3d6:	4282      	cmp	r2, r0
 800a3d8:	d31b      	bcc.n	800a412 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a3da:	4a1f      	ldr	r2, [pc, #124]	; (800a458 <USB_SetTurnaroundTime+0xf0>)
 800a3dc:	4c1f      	ldr	r4, [pc, #124]	; (800a45c <USB_SetTurnaroundTime+0xf4>)
 800a3de:	440a      	add	r2, r1
 800a3e0:	42a2      	cmp	r2, r4
 800a3e2:	bf34      	ite	cc
 800a3e4:	f44f 54e0 	movcc.w	r4, #7168	; 0x1c00
 800a3e8:	f44f 54c0 	movcs.w	r4, #6144	; 0x1800
 800a3ec:	e7c2      	b.n	800a374 <USB_SetTurnaroundTime+0xc>
 800a3ee:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 800a3f2:	e7bf      	b.n	800a374 <USB_SetTurnaroundTime+0xc>
 800a3f4:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800a3f8:	e7bc      	b.n	800a374 <USB_SetTurnaroundTime+0xc>
 800a3fa:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 800a3fe:	e7b9      	b.n	800a374 <USB_SetTurnaroundTime+0xc>
 800a400:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800a404:	e7b6      	b.n	800a374 <USB_SetTurnaroundTime+0xc>
 800a406:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 800a40a:	e7b3      	b.n	800a374 <USB_SetTurnaroundTime+0xc>
 800a40c:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800a410:	e7b0      	b.n	800a374 <USB_SetTurnaroundTime+0xc>
 800a412:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800a416:	e7ad      	b.n	800a374 <USB_SetTurnaroundTime+0xc>
 800a418:	ff275340 	.word	0xff275340
 800a41c:	000c34ff 	.word	0x000c34ff
 800a420:	ff1b1e40 	.word	0xff1b1e40
 800a424:	000f423f 	.word	0x000f423f
 800a428:	ff0bdc00 	.word	0xff0bdc00
 800a42c:	00124f7f 	.word	0x00124f7f
 800a430:	fef98c80 	.word	0xfef98c80
 800a434:	0013d620 	.word	0x0013d620
 800a438:	fee5b660 	.word	0xfee5b660
 800a43c:	0016e35f 	.word	0x0016e35f
 800a440:	feced300 	.word	0xfeced300
 800a444:	001b7740 	.word	0x001b7740
 800a448:	feb35bc0 	.word	0xfeb35bc0
 800a44c:	002191c0 	.word	0x002191c0
 800a450:	fe91ca00 	.word	0xfe91ca00
 800a454:	00387520 	.word	0x00387520
 800a458:	fe5954e0 	.word	0xfe5954e0
 800a45c:	00419ce0 	.word	0x00419ce0

0800a460 <USB_EnableGlobalInt>:
{
 800a460:	4603      	mov	r3, r0
}
 800a462:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	f042 0201 	orr.w	r2, r2, #1
 800a46a:	609a      	str	r2, [r3, #8]
}
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop

0800a470 <USB_DisableGlobalInt>:
{
 800a470:	4603      	mov	r3, r0
}
 800a472:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a474:	689a      	ldr	r2, [r3, #8]
 800a476:	f022 0201 	bic.w	r2, r2, #1
 800a47a:	609a      	str	r2, [r3, #8]
}
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop

0800a480 <USB_SetCurrentMode>:
{
 800a480:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a482:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800a484:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a486:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a48a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800a48c:	d00b      	beq.n	800a4a6 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800a48e:	b941      	cbnz	r1, 800a4a2 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a490:	68c3      	ldr	r3, [r0, #12]
 800a492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a496:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800a498:	2032      	movs	r0, #50	; 0x32
 800a49a:	f7f9 f8df 	bl	800365c <HAL_Delay>
  return HAL_OK;
 800a49e:	2000      	movs	r0, #0
}
 800a4a0:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800a4a2:	2001      	movs	r0, #1
}
 800a4a4:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a4a6:	68c3      	ldr	r3, [r0, #12]
 800a4a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4ac:	60c3      	str	r3, [r0, #12]
 800a4ae:	e7f3      	b.n	800a498 <USB_SetCurrentMode+0x18>

0800a4b0 <USB_DevInit>:
{
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
    USBx->DIEPTXF[i] = 0U;
 800a4b8:	2600      	movs	r6, #0
{
 800a4ba:	af08      	add	r7, sp, #32
 800a4bc:	4604      	mov	r4, r0
    USBx->DIEPTXF[i] = 0U;
 800a4be:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
 800a4c2:	f8c0 6108 	str.w	r6, [r0, #264]	; 0x108
 800a4c6:	f8c0 610c 	str.w	r6, [r0, #268]	; 0x10c
 800a4ca:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
 800a4ce:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
 800a4d2:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
 800a4d6:	f8c0 611c 	str.w	r6, [r0, #284]	; 0x11c
 800a4da:	f8c0 6120 	str.w	r6, [r0, #288]	; 0x120
 800a4de:	f8c0 6124 	str.w	r6, [r0, #292]	; 0x124
 800a4e2:	f8c0 6128 	str.w	r6, [r0, #296]	; 0x128
 800a4e6:	f8c0 612c 	str.w	r6, [r0, #300]	; 0x12c
 800a4ea:	f8c0 6130 	str.w	r6, [r0, #304]	; 0x130
 800a4ee:	f8c0 6134 	str.w	r6, [r0, #308]	; 0x134
 800a4f2:	f8c0 6138 	str.w	r6, [r0, #312]	; 0x138
 800a4f6:	f8c0 613c 	str.w	r6, [r0, #316]	; 0x13c
{
 800a4fa:	e887 000e 	stmia.w	r7, {r1, r2, r3}
  if (cfg.vbus_sensing_enable == 0U)
 800a4fe:	2d00      	cmp	r5, #0
 800a500:	f040 809a 	bne.w	800a638 <USB_DevInit+0x188>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a504:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a508:	f500 6600 	add.w	r6, r0, #2048	; 0x800
 800a50c:	f043 0302 	orr.w	r3, r3, #2
 800a510:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a512:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a514:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a518:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a51a:	6803      	ldr	r3, [r0, #0]
 800a51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a520:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a522:	6803      	ldr	r3, [r0, #0]
 800a524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a528:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800a52a:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a52c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_PCGCCTL = 0U;
 800a52e:	f8c4 2e00 	str.w	r2, [r4, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a532:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a534:	6832      	ldr	r2, [r6, #0]
 800a536:	6032      	str	r2, [r6, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a538:	f000 8085 	beq.w	800a646 <USB_DevInit+0x196>
  USBx_DEVICE->DCFG |= speed;
 800a53c:	6833      	ldr	r3, [r6, #0]
 800a53e:	f043 0303 	orr.w	r3, r3, #3
 800a542:	6033      	str	r3, [r6, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a544:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800a548:	4b46      	ldr	r3, [pc, #280]	; (800a664 <USB_DevInit+0x1b4>)
 800a54a:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800a54c:	e002      	b.n	800a554 <USB_DevInit+0xa4>
 800a54e:	3b01      	subs	r3, #1
 800a550:	f000 8083 	beq.w	800a65a <USB_DevInit+0x1aa>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a554:	6920      	ldr	r0, [r4, #16]
 800a556:	f010 0020 	ands.w	r0, r0, #32
 800a55a:	d1f8      	bne.n	800a54e <USB_DevInit+0x9e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a55c:	2210      	movs	r2, #16
 800a55e:	4b41      	ldr	r3, [pc, #260]	; (800a664 <USB_DevInit+0x1b4>)
 800a560:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800a562:	e001      	b.n	800a568 <USB_DevInit+0xb8>
 800a564:	3b01      	subs	r3, #1
 800a566:	d07a      	beq.n	800a65e <USB_DevInit+0x1ae>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a568:	6922      	ldr	r2, [r4, #16]
 800a56a:	06d2      	lsls	r2, r2, #27
 800a56c:	d4fa      	bmi.n	800a564 <USB_DevInit+0xb4>
  USBx_DEVICE->DIEPMSK = 0U;
 800a56e:	2200      	movs	r2, #0
 800a570:	6132      	str	r2, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a572:	6172      	str	r2, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a574:	61f2      	str	r2, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a576:	b1e9      	cbz	r1, 800a5b4 <USB_DevInit+0x104>
 800a578:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a57c:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a580:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800a584:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a586:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800a58a:	e009      	b.n	800a5a0 <USB_DevInit+0xf0>
      USBx_INEP(i)->DIEPCTL = 0U;
 800a58c:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a590:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a592:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a596:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a59a:	3320      	adds	r3, #32
 800a59c:	428a      	cmp	r2, r1
 800a59e:	d02c      	beq.n	800a5fa <USB_DevInit+0x14a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5a0:	681f      	ldr	r7, [r3, #0]
 800a5a2:	2f00      	cmp	r7, #0
 800a5a4:	daf2      	bge.n	800a58c <USB_DevInit+0xdc>
      if (i == 0U)
 800a5a6:	b112      	cbz	r2, 800a5ae <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a5a8:	f8c3 8000 	str.w	r8, [r3]
 800a5ac:	e7f0      	b.n	800a590 <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a5ae:	f8c3 9000 	str.w	r9, [r3]
 800a5b2:	e7ed      	b.n	800a590 <USB_DevInit+0xe0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5b4:	6933      	ldr	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800a5b6:	2700      	movs	r7, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5b8:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 800a5bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5c2:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800a5c4:	61a7      	str	r7, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5c6:	6161      	str	r1, [r4, #20]
  if (cfg.dma_enable == 0U)
 800a5c8:	b91a      	cbnz	r2, 800a5d2 <USB_DevInit+0x122>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5ca:	69a3      	ldr	r3, [r4, #24]
 800a5cc:	f043 0310 	orr.w	r3, r3, #16
 800a5d0:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5d2:	69a1      	ldr	r1, [r4, #24]
 800a5d4:	4b24      	ldr	r3, [pc, #144]	; (800a668 <USB_DevInit+0x1b8>)
  if (cfg.Sof_enable != 0U)
 800a5d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800a5dc:	b11a      	cbz	r2, 800a5e6 <USB_DevInit+0x136>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5de:	69a3      	ldr	r3, [r4, #24]
 800a5e0:	f043 0308 	orr.w	r3, r3, #8
 800a5e4:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800a5e6:	2d01      	cmp	r5, #1
 800a5e8:	d103      	bne.n	800a5f2 <USB_DevInit+0x142>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5ea:	69a2      	ldr	r2, [r4, #24]
 800a5ec:	4b1f      	ldr	r3, [pc, #124]	; (800a66c <USB_DevInit+0x1bc>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	61a3      	str	r3, [r4, #24]
}
 800a5f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5f6:	b004      	add	sp, #16
 800a5f8:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a600:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a604:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a608:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a60a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800a60e:	e009      	b.n	800a624 <USB_DevInit+0x174>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a610:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a614:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a616:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a61a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a61e:	3320      	adds	r3, #32
 800a620:	428a      	cmp	r2, r1
 800a622:	d0c7      	beq.n	800a5b4 <USB_DevInit+0x104>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a624:	681f      	ldr	r7, [r3, #0]
 800a626:	2f00      	cmp	r7, #0
 800a628:	daf2      	bge.n	800a610 <USB_DevInit+0x160>
      if (i == 0U)
 800a62a:	b112      	cbz	r2, 800a632 <USB_DevInit+0x182>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a62c:	f8c3 8000 	str.w	r8, [r3]
 800a630:	e7f0      	b.n	800a614 <USB_DevInit+0x164>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a632:	f8c3 9000 	str.w	r9, [r3]
 800a636:	e7ed      	b.n	800a614 <USB_DevInit+0x164>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a638:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a63a:	f500 6600 	add.w	r6, r0, #2048	; 0x800
 800a63e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a642:	6383      	str	r3, [r0, #56]	; 0x38
 800a644:	e771      	b.n	800a52a <USB_DevInit+0x7a>
    if (cfg.speed == USBD_HS_SPEED)
 800a646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a648:	b913      	cbnz	r3, 800a650 <USB_DevInit+0x1a0>
  USBx_DEVICE->DCFG |= speed;
 800a64a:	6833      	ldr	r3, [r6, #0]
 800a64c:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 800a64e:	e779      	b.n	800a544 <USB_DevInit+0x94>
  USBx_DEVICE->DCFG |= speed;
 800a650:	6833      	ldr	r3, [r6, #0]
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 800a658:	e774      	b.n	800a544 <USB_DevInit+0x94>
    ret = HAL_ERROR;
 800a65a:	2001      	movs	r0, #1
 800a65c:	e77e      	b.n	800a55c <USB_DevInit+0xac>
    ret = HAL_ERROR;
 800a65e:	2001      	movs	r0, #1
 800a660:	e785      	b.n	800a56e <USB_DevInit+0xbe>
 800a662:	bf00      	nop
 800a664:	00030d40 	.word	0x00030d40
 800a668:	803c3800 	.word	0x803c3800
 800a66c:	40000004 	.word	0x40000004

0800a670 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a670:	0189      	lsls	r1, r1, #6
 800a672:	4a07      	ldr	r2, [pc, #28]	; (800a690 <USB_FlushTxFifo+0x20>)
 800a674:	f041 0120 	orr.w	r1, r1, #32
 800a678:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800a67a:	e001      	b.n	800a680 <USB_FlushTxFifo+0x10>
 800a67c:	3a01      	subs	r2, #1
 800a67e:	d005      	beq.n	800a68c <USB_FlushTxFifo+0x1c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a680:	6903      	ldr	r3, [r0, #16]
 800a682:	f013 0320 	ands.w	r3, r3, #32
 800a686:	d1f9      	bne.n	800a67c <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800a688:	4618      	mov	r0, r3
 800a68a:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a68c:	2003      	movs	r0, #3
}
 800a68e:	4770      	bx	lr
 800a690:	00030d40 	.word	0x00030d40

0800a694 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a694:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a698:	f013 0006 	ands.w	r0, r3, #6
 800a69c:	d004      	beq.n	800a6a8 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a69e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800a6a2:	bf14      	ite	ne
 800a6a4:	2002      	movne	r0, #2
 800a6a6:	200f      	moveq	r0, #15
}
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop

0800a6ac <USB_ActivateEndpoint>:
{
 800a6ac:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 800a6ae:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800a6b0:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d01f      	beq.n	800a6f6 <USB_ActivateEndpoint+0x4a>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a6b6:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800a6ba:	f002 050f 	and.w	r5, r2, #15
 800a6be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a6c2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a6c6:	69e2      	ldr	r2, [r4, #28]
 800a6c8:	40ab      	lsls	r3, r5
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a6ce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a6d2:	041b      	lsls	r3, r3, #16
 800a6d4:	d40c      	bmi.n	800a6f0 <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a6d6:	688b      	ldr	r3, [r1, #8]
 800a6d8:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800a6dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a6e0:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a6e2:	4a15      	ldr	r2, [pc, #84]	; (800a738 <USB_ActivateEndpoint+0x8c>)
 800a6e4:	4323      	orrs	r3, r4
 800a6e6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	bc70      	pop	{r4, r5, r6}
 800a6f4:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a6f6:	f002 040f 	and.w	r4, r2, #15
 800a6fa:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800a6fe:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a702:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a706:	40a3      	lsls	r3, r4
 800a708:	4333      	orrs	r3, r6
 800a70a:	61eb      	str	r3, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a70c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a710:	041c      	lsls	r4, r3, #16
 800a712:	d4ed      	bmi.n	800a6f0 <USB_ActivateEndpoint+0x44>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a714:	688b      	ldr	r3, [r1, #8]
 800a716:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800a71a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a71e:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a720:	4905      	ldr	r1, [pc, #20]	; (800a738 <USB_ActivateEndpoint+0x8c>)
 800a722:	432b      	orrs	r3, r5
 800a724:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800a728:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800a72c:	4311      	orrs	r1, r2
}
 800a72e:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a730:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800a734:	2000      	movs	r0, #0
 800a736:	4770      	bx	lr
 800a738:	10008000 	.word	0x10008000

0800a73c <USB_DeactivateEndpoint>:
{
 800a73c:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800a73e:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800a740:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a742:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a744:	eb00 1543 	add.w	r5, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800a748:	d02b      	beq.n	800a7a2 <USB_DeactivateEndpoint+0x66>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a74a:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800a74e:	2a00      	cmp	r2, #0
 800a750:	db1a      	blt.n	800a788 <USB_DeactivateEndpoint+0x4c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a752:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800a75e:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a762:	4925      	ldr	r1, [pc, #148]	; (800a7f8 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a764:	ea24 0403 	bic.w	r4, r4, r3
 800a768:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a76c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a770:	ea22 0303 	bic.w	r3, r2, r3
 800a774:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800a778:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a77a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800a77e:	4019      	ands	r1, r3
 800a780:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
}
 800a784:	bc30      	pop	{r4, r5}
 800a786:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a788:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800a78c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a790:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a794:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800a798:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a79c:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
 800a7a0:	e7d7      	b.n	800a752 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7a2:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800a7a6:	2a00      	cmp	r2, #0
 800a7a8:	da0b      	bge.n	800a7c2 <USB_DeactivateEndpoint+0x86>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a7aa:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800a7ae:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a7b2:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a7b6:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800a7ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a7be:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f003 030f 	and.w	r3, r3, #15
 800a7c8:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800a7cc:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a7d0:	490a      	ldr	r1, [pc, #40]	; (800a7fc <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7d2:	ea24 0403 	bic.w	r4, r4, r3
 800a7d6:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7da:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a7de:	ea22 0303 	bic.w	r3, r2, r3
 800a7e2:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800a7e6:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a7e8:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800a7ec:	4019      	ands	r1, r3
 800a7ee:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
}
 800a7f2:	bc30      	pop	{r4, r5}
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	eff37800 	.word	0xeff37800
 800a7fc:	ec337800 	.word	0xec337800

0800a800 <USB_EPStartXfer>:
{
 800a800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800a804:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800a806:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800a808:	2d01      	cmp	r5, #1
 800a80a:	d054      	beq.n	800a8b6 <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a80c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800a810:	4f82      	ldr	r7, [pc, #520]	; (800aa1c <USB_EPStartXfer+0x21c>)
    if (ep->xfer_len == 0U)
 800a812:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a814:	f8d4 cb10 	ldr.w	ip, [r4, #2832]	; 0xb10
 800a818:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a81c:	4e80      	ldr	r6, [pc, #512]	; (800aa20 <USB_EPStartXfer+0x220>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a81e:	ea0c 0707 	and.w	r7, ip, r7
 800a822:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a824:	691f      	ldr	r7, [r3, #16]
 800a826:	403e      	ands	r6, r7
 800a828:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 800a82a:	b395      	cbz	r5, 800a892 <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a82c:	688e      	ldr	r6, [r1, #8]
    if (dma == 1U)
 800a82e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a830:	4f7c      	ldr	r7, [pc, #496]	; (800aa24 <USB_EPStartXfer+0x224>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a832:	4435      	add	r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a834:	f8d3 c010 	ldr.w	ip, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a838:	f105 35ff 	add.w	r5, r5, #4294967295
 800a83c:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a840:	fa1f fe85 	uxth.w	lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a844:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a848:	fb06 f60e 	mul.w	r6, r6, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a84c:	ea45 050c 	orr.w	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a850:	f3c6 0612 	ubfx	r6, r6, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a854:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a856:	691d      	ldr	r5, [r3, #16]
 800a858:	ea46 0605 	orr.w	r6, r6, r5
 800a85c:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 800a85e:	d025      	beq.n	800a8ac <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 800a860:	78cb      	ldrb	r3, [r1, #3]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d10c      	bne.n	800a880 <USB_EPStartXfer+0x80>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a866:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800a86a:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a86e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800a872:	bf0c      	ite	eq
 800a874:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a878:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800a87c:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a880:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800a884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a888:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800a88c:	2000      	movs	r0, #0
 800a88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a892:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800a894:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a896:	691e      	ldr	r6, [r3, #16]
 800a898:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a89c:	ea45 0506 	orr.w	r5, r5, r6
 800a8a0:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8a2:	691d      	ldr	r5, [r3, #16]
 800a8a4:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a8a8:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800a8aa:	d1d9      	bne.n	800a860 <USB_EPStartXfer+0x60>
      if ((uint32_t)ep->xfer_buff != 0U)
 800a8ac:	68ca      	ldr	r2, [r1, #12]
 800a8ae:	2a00      	cmp	r2, #0
 800a8b0:	d0d6      	beq.n	800a860 <USB_EPStartXfer+0x60>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a8b2:	615a      	str	r2, [r3, #20]
 800a8b4:	e7d4      	b.n	800a860 <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 800a8b6:	694e      	ldr	r6, [r1, #20]
 800a8b8:	2e00      	cmp	r6, #0
 800a8ba:	d040      	beq.n	800a93e <USB_EPStartXfer+0x13e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8bc:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a8c0:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8c4:	f8df a154 	ldr.w	sl, [pc, #340]	; 800aa1c <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a8c8:	f3c6 0712 	ubfx	r7, r6, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8cc:	f8de 9910 	ldr.w	r9, [lr, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a8d0:	eb06 0c08 	add.w	ip, r6, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8d4:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
 800a8d8:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a8dc:	f10c 3cff 	add.w	ip, ip, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8e0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800aa20 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8e4:	f8c3 a010 	str.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8e8:	f8d3 a010 	ldr.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a8ec:	fbbc f8f8 	udiv	r8, ip, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8f0:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a8f4:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800aa24 <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8f8:	f8c3 9010 	str.w	r9, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a8fc:	ea0c 4cc8 	and.w	ip, ip, r8, lsl #19
 800a900:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800a904:	ea4c 0c08 	orr.w	ip, ip, r8
 800a908:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a90c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800a910:	ea47 070c 	orr.w	r7, r7, ip
 800a914:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 800a916:	78cf      	ldrb	r7, [r1, #3]
 800a918:	2f01      	cmp	r7, #1
 800a91a:	d04e      	beq.n	800a9ba <USB_EPStartXfer+0x1ba>
    if (dma == 1U)
 800a91c:	2a01      	cmp	r2, #1
 800a91e:	d068      	beq.n	800a9f2 <USB_EPStartXfer+0x1f2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a920:	f8de 3900 	ldr.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a924:	f004 040f 	and.w	r4, r4, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a928:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a92c:	40a5      	lsls	r5, r4
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a92e:	f8ce 3900 	str.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a932:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800a936:	4325      	orrs	r5, r4
 800a938:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 800a93c:	e7a6      	b.n	800a88c <USB_EPStartXfer+0x8c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a93e:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 800a942:	4f37      	ldr	r7, [pc, #220]	; (800aa20 <USB_EPStartXfer+0x220>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a944:	4d35      	ldr	r5, [pc, #212]	; (800aa1c <USB_EPStartXfer+0x21c>)
    if (dma == 1U)
 800a946:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a948:	f8dc e910 	ldr.w	lr, [ip, #2320]	; 0x910
 800a94c:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 800a950:	ea0e 0707 	and.w	r7, lr, r7
 800a954:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a956:	691f      	ldr	r7, [r3, #16]
 800a958:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800a95c:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a95e:	691f      	ldr	r7, [r3, #16]
 800a960:	ea05 0507 	and.w	r5, r5, r7
 800a964:	611d      	str	r5, [r3, #16]
 800a966:	78cf      	ldrb	r7, [r1, #3]
    if (dma == 1U)
 800a968:	d038      	beq.n	800a9dc <USB_EPStartXfer+0x1dc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a96a:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a96e:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a970:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800a974:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a978:	d188      	bne.n	800a88c <USB_EPStartXfer+0x8c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a97a:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800a97e:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a982:	681d      	ldr	r5, [r3, #0]
 800a984:	bf0c      	ite	eq
 800a986:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a98a:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800a98e:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 800a990:	2a00      	cmp	r2, #0
 800a992:	f47f af7b 	bne.w	800a88c <USB_EPStartXfer+0x8c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800a996:	b2b6      	uxth	r6, r6
 800a998:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 800a99a:	08b6      	lsrs	r6, r6, #2
 800a99c:	f43f af76 	beq.w	800a88c <USB_EPStartXfer+0x8c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a9a0:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9a2:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800a9a6:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 800a9aa:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800a9ae:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800a9b2:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9b4:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800a9b6:	d1fa      	bne.n	800a9ae <USB_EPStartXfer+0x1ae>
 800a9b8:	e768      	b.n	800a88c <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a9ba:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 800a9bc:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a9be:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800a9c2:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a9c4:	691d      	ldr	r5, [r3, #16]
 800a9c6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a9ca:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800a9cc:	d016      	beq.n	800a9fc <USB_EPStartXfer+0x1fc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9ce:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
 800a9d2:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800a9d6:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a9da:	e7ce      	b.n	800a97a <USB_EPStartXfer+0x17a>
      if ((uint32_t)ep->dma_addr != 0U)
 800a9dc:	690a      	ldr	r2, [r1, #16]
 800a9de:	b95a      	cbnz	r2, 800a9f8 <USB_EPStartXfer+0x1f8>
      if (ep->type == EP_TYPE_ISOC)
 800a9e0:	2f01      	cmp	r7, #1
 800a9e2:	d00e      	beq.n	800aa02 <USB_EPStartXfer+0x202>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9e4:	681a      	ldr	r2, [r3, #0]
}
 800a9e6:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9e8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a9ec:	601a      	str	r2, [r3, #0]
}
 800a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800a9f2:	690a      	ldr	r2, [r1, #16]
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	d0f5      	beq.n	800a9e4 <USB_EPStartXfer+0x1e4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a9f8:	615a      	str	r2, [r3, #20]
 800a9fa:	e7f1      	b.n	800a9e0 <USB_EPStartXfer+0x1e0>
      if ((uint32_t)ep->dma_addr != 0U)
 800a9fc:	690a      	ldr	r2, [r1, #16]
 800a9fe:	2a00      	cmp	r2, #0
 800aa00:	d1fa      	bne.n	800a9f8 <USB_EPStartXfer+0x1f8>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa02:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800aa06:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	bf0c      	ite	eq
 800aa0e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa12:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	e7e4      	b.n	800a9e4 <USB_EPStartXfer+0x1e4>
 800aa1a:	bf00      	nop
 800aa1c:	fff80000 	.word	0xfff80000
 800aa20:	e007ffff 	.word	0xe007ffff
 800aa24:	1ff80000 	.word	0x1ff80000

0800aa28 <USB_EP0StartXfer>:
{
 800aa28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800aa2c:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800aa2e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800aa30:	2c01      	cmp	r4, #1
 800aa32:	d02a      	beq.n	800aa8a <USB_EP0StartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa34:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800aa38:	4d4d      	ldr	r5, [pc, #308]	; (800ab70 <USB_EP0StartXfer+0x148>)
    if (ep->xfer_len > 0U)
 800aa3a:	694e      	ldr	r6, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa3c:	f8d0 7b10 	ldr.w	r7, [r0, #2832]	; 0xb10
 800aa40:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa44:	4c4b      	ldr	r4, [pc, #300]	; (800ab74 <USB_EP0StartXfer+0x14c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa46:	403d      	ands	r5, r7
 800aa48:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa4a:	691d      	ldr	r5, [r3, #16]
 800aa4c:	402c      	ands	r4, r5
 800aa4e:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 800aa50:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 800aa52:	b106      	cbz	r6, 800aa56 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800aa54:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa56:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aa58:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800aa5c:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa5e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800aa62:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aa64:	691d      	ldr	r5, [r3, #16]
 800aa66:	ea44 0405 	orr.w	r4, r4, r5
 800aa6a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800aa6c:	d008      	beq.n	800aa80 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa6e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800aa72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa76:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa80:	68ca      	ldr	r2, [r1, #12]
 800aa82:	2a00      	cmp	r2, #0
 800aa84:	d0f3      	beq.n	800aa6e <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aa86:	615a      	str	r2, [r3, #20]
 800aa88:	e7f1      	b.n	800aa6e <USB_EP0StartXfer+0x46>
    if (ep->xfer_len == 0U)
 800aa8a:	694d      	ldr	r5, [r1, #20]
 800aa8c:	b3ad      	cbz	r5, 800aafa <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa8e:	eb00 1e43 	add.w	lr, r0, r3, lsl #5
 800aa92:	4f37      	ldr	r7, [pc, #220]	; (800ab70 <USB_EP0StartXfer+0x148>)
      if (ep->xfer_len > ep->maxpacket)
 800aa94:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa98:	f8de 8910 	ldr.w	r8, [lr, #2320]	; 0x910
 800aa9c:	f50e 6410 	add.w	r4, lr, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaa0:	4e34      	ldr	r6, [pc, #208]	; (800ab74 <USB_EP0StartXfer+0x14c>)
      if (ep->xfer_len > ep->maxpacket)
 800aaa2:	4565      	cmp	r5, ip
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aaa4:	ea08 0707 	and.w	r7, r8, r7
 800aaa8:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaaa:	6927      	ldr	r7, [r4, #16]
 800aaac:	ea06 0607 	and.w	r6, r6, r7
 800aab0:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aab2:	6926      	ldr	r6, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800aab4:	d94a      	bls.n	800ab4c <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aab6:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 800aaba:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aabe:	f3cc 0512 	ubfx	r5, ip, #0, #19
    if (dma == 1U)
 800aac2:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aac4:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aac6:	6926      	ldr	r6, [r4, #16]
 800aac8:	ea45 0506 	orr.w	r5, r5, r6
 800aacc:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800aace:	d033      	beq.n	800ab38 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aad0:	f8de 2900 	ldr.w	r2, [lr, #2304]	; 0x900
 800aad4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800aad8:	f8ce 2900 	str.w	r2, [lr, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800aadc:	f1bc 0f00 	cmp.w	ip, #0
 800aae0:	d0cb      	beq.n	800aa7a <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aae2:	f003 010f 	and.w	r1, r3, #15
 800aae6:	2301      	movs	r3, #1
 800aae8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800aaec:	408b      	lsls	r3, r1
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aafa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800aafe:	4e1d      	ldr	r6, [pc, #116]	; (800ab74 <USB_EP0StartXfer+0x14c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab00:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
    if (dma == 1U)
 800ab04:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab06:	f8d0 3910 	ldr.w	r3, [r0, #2320]	; 0x910
 800ab0a:	f500 6410 	add.w	r4, r0, #2304	; 0x900
 800ab0e:	ea06 0603 	and.w	r6, r6, r3
 800ab12:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab14:	6926      	ldr	r6, [r4, #16]
 800ab16:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800ab1a:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab1c:	6923      	ldr	r3, [r4, #16]
 800ab1e:	ea05 0503 	and.w	r5, r5, r3
 800ab22:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800ab24:	d008      	beq.n	800ab38 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab26:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ab2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab2e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800ab32:	2000      	movs	r0, #0
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800ab38:	690b      	ldr	r3, [r1, #16]
 800ab3a:	b103      	cbz	r3, 800ab3e <USB_EP0StartXfer+0x116>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab3c:	6163      	str	r3, [r4, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab3e:	6823      	ldr	r3, [r4, #0]
}
 800ab40:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab46:	6023      	str	r3, [r4, #0]
}
 800ab48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab4c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab50:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 800ab54:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab56:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab58:	6926      	ldr	r6, [r4, #16]
 800ab5a:	ea45 0506 	orr.w	r5, r5, r6
 800ab5e:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800ab60:	d0ea      	beq.n	800ab38 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab62:	f8de 2900 	ldr.w	r2, [lr, #2304]	; 0x900
 800ab66:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ab6a:	f8ce 2900 	str.w	r2, [lr, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800ab6e:	e7b8      	b.n	800aae2 <USB_EP0StartXfer+0xba>
 800ab70:	fff80000 	.word	0xfff80000
 800ab74:	e007ffff 	.word	0xe007ffff

0800ab78 <USB_WritePacket>:
{
 800ab78:	b410      	push	{r4}
 800ab7a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800ab7e:	b964      	cbnz	r4, 800ab9a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab80:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800ab82:	089b      	lsrs	r3, r3, #2
 800ab84:	d009      	beq.n	800ab9a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab86:	3201      	adds	r2, #1
 800ab88:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ab8c:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800ab90:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800ab94:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab96:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800ab98:	d1fa      	bne.n	800ab90 <USB_WritePacket+0x18>
}
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop

0800aba4 <USB_ReadPacket>:
{
 800aba4:	b4f0      	push	{r4, r5, r6, r7}
  for (i = 0U; i < count32b; i++)
 800aba6:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 800aba8:	f002 0703 	and.w	r7, r2, #3
  for (i = 0U; i < count32b; i++)
 800abac:	d00b      	beq.n	800abc6 <USB_ReadPacket+0x22>
 800abae:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800abb2:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800abb4:	2300      	movs	r3, #0
 800abb6:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800abb8:	6834      	ldr	r4, [r6, #0]
  for (i = 0U; i < count32b; i++)
 800abba:	429d      	cmp	r5, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800abbc:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800abc0:	d1f9      	bne.n	800abb6 <USB_ReadPacket+0x12>
 800abc2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  if (remaining_bytes != 0U)
 800abc6:	b177      	cbz	r7, 800abe6 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800abc8:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 800abcc:	3f01      	subs	r7, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800abce:	6803      	ldr	r3, [r0, #0]
      remaining_bytes--;
 800abd0:	b2bf      	uxth	r7, r7
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800abd2:	700b      	strb	r3, [r1, #0]
    } while (remaining_bytes != 0U);
 800abd4:	b12f      	cbz	r7, 800abe2 <USB_ReadPacket+0x3e>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800abd6:	0a1a      	lsrs	r2, r3, #8
    } while (remaining_bytes != 0U);
 800abd8:	2f01      	cmp	r7, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800abda:	704a      	strb	r2, [r1, #1]
    } while (remaining_bytes != 0U);
 800abdc:	d001      	beq.n	800abe2 <USB_ReadPacket+0x3e>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800abde:	0c1b      	lsrs	r3, r3, #16
 800abe0:	708b      	strb	r3, [r1, #2]
    } while (remaining_bytes != 0U);
 800abe2:	3701      	adds	r7, #1
 800abe4:	4439      	add	r1, r7
}
 800abe6:	4608      	mov	r0, r1
 800abe8:	bcf0      	pop	{r4, r5, r6, r7}
 800abea:	4770      	bx	lr

0800abec <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800abec:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800abee:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800abf0:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abf2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800abf6:	d00c      	beq.n	800ac12 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abf8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800abfc:	b10b      	cbz	r3, 800ac02 <USB_EPSetStall+0x16>
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	da14      	bge.n	800ac2c <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ac02:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ac06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac0a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800ac0e:	2000      	movs	r0, #0
 800ac10:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac12:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	db00      	blt.n	800ac1c <USB_EPSetStall+0x30>
 800ac1a:	b973      	cbnz	r3, 800ac3a <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac1c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ac20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac24:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800ac28:	2000      	movs	r0, #0
 800ac2a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ac2c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ac30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac34:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800ac38:	e7e3      	b.n	800ac02 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ac3a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ac3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac42:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac46:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ac4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac4e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800ac52:	e7e9      	b.n	800ac28 <USB_EPSetStall+0x3c>

0800ac54 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800ac54:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ac56:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ac58:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ac5a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800ac5e:	d013      	beq.n	800ac88 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac60:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ac64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac68:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac6c:	78cb      	ldrb	r3, [r1, #3]
 800ac6e:	3b02      	subs	r3, #2
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d901      	bls.n	800ac78 <USB_EPClearStall+0x24>
}
 800ac74:	2000      	movs	r0, #0
 800ac76:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac78:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ac7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac80:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800ac84:	2000      	movs	r0, #0
 800ac86:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ac88:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ac8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac90:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac94:	78cb      	ldrb	r3, [r1, #3]
 800ac96:	3b02      	subs	r3, #2
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d8eb      	bhi.n	800ac74 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac9c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800aca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aca4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800aca8:	2000      	movs	r0, #0
 800acaa:	4770      	bx	lr

0800acac <USB_SetDevAddress>:
{
 800acac:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800acae:	0109      	lsls	r1, r1, #4
}
 800acb0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800acb2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800acb6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800acba:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800acbe:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800acc2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800acc6:	4311      	orrs	r1, r2
 800acc8:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop

0800acd0 <USB_DevConnect>:
{
 800acd0:	4603      	mov	r3, r0
}
 800acd2:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acd4:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800acd8:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acdc:	f022 0203 	bic.w	r2, r2, #3
 800ace0:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ace4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800ace8:	f023 0302 	bic.w	r3, r3, #2
 800acec:	604b      	str	r3, [r1, #4]
}
 800acee:	4770      	bx	lr

0800acf0 <USB_DevDisconnect>:
{
 800acf0:	4603      	mov	r3, r0
}
 800acf2:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acf4:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acf8:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acfc:	f022 0203 	bic.w	r2, r2, #3
 800ad00:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad04:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800ad08:	f043 0302 	orr.w	r3, r3, #2
 800ad0c:	604b      	str	r3, [r1, #4]
}
 800ad0e:	4770      	bx	lr

0800ad10 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800ad10:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800ad12:	6980      	ldr	r0, [r0, #24]
}
 800ad14:	4010      	ands	r0, r2
 800ad16:	4770      	bx	lr

0800ad18 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800ad18:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800ad1c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad20:	69c0      	ldr	r0, [r0, #28]
 800ad22:	4018      	ands	r0, r3
}
 800ad24:	0c00      	lsrs	r0, r0, #16
 800ad26:	4770      	bx	lr

0800ad28 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800ad28:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800ad2c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad30:	69c0      	ldr	r0, [r0, #28]
 800ad32:	4018      	ands	r0, r3
}
 800ad34:	b280      	uxth	r0, r0
 800ad36:	4770      	bx	lr

0800ad38 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad38:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad3c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad40:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad44:	6940      	ldr	r0, [r0, #20]
}
 800ad46:	4010      	ands	r0, r2
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop

0800ad4c <USB_ReadDevInEPInterrupt>:
{
 800ad4c:	b430      	push	{r4, r5}
  msk = USBx_DEVICE->DIEPMSK;
 800ad4e:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad52:	f001 050f 	and.w	r5, r1, #15
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad56:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad5a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad5e:	40eb      	lsrs	r3, r5
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad60:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad64:	01db      	lsls	r3, r3, #7
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	4323      	orrs	r3, r4
}
 800ad6a:	bc30      	pop	{r4, r5}
 800ad6c:	4018      	ands	r0, r3
 800ad6e:	4770      	bx	lr

0800ad70 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800ad70:	6940      	ldr	r0, [r0, #20]
}
 800ad72:	f000 0001 	and.w	r0, r0, #1
 800ad76:	4770      	bx	lr

0800ad78 <USB_ActivateSetup>:
{
 800ad78:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad7a:	4a09      	ldr	r2, [pc, #36]	; (800ada0 <USB_ActivateSetup+0x28>)
}
 800ad7c:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad7e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800ad82:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad84:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800ad88:	4022      	ands	r2, r4
}
 800ad8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad8e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad92:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800ad96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad9a:	604b      	str	r3, [r1, #4]
}
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	fffff800 	.word	0xfffff800

0800ada4 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ada4:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <USB_EP0_OutStart+0x54>)
{
 800ada6:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ada8:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800adaa:	429c      	cmp	r4, r3
 800adac:	d81a      	bhi.n	800ade4 <USB_EP0_OutStart+0x40>
 800adae:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800adb2:	2300      	movs	r3, #0
  if (dma == 1U)
 800adb4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800adb6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adb8:	6903      	ldr	r3, [r0, #16]
 800adba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adbe:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800adc0:	6903      	ldr	r3, [r0, #16]
 800adc2:	f043 0318 	orr.w	r3, r3, #24
 800adc6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800adc8:	6903      	ldr	r3, [r0, #16]
 800adca:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800adce:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800add0:	d104      	bne.n	800addc <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800add2:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800add4:	6803      	ldr	r3, [r0, #0]
 800add6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800adda:	6003      	str	r3, [r0, #0]
}
 800addc:	2000      	movs	r0, #0
 800adde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade2:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ade4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ade8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800adec:	2b00      	cmp	r3, #0
 800adee:	dae0      	bge.n	800adb2 <USB_EP0_OutStart+0xe>
}
 800adf0:	2000      	movs	r0, #0
 800adf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	4f54300a 	.word	0x4f54300a

0800adfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800adfc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adfe:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800ae02:	b194      	cbz	r4, 800ae2a <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae04:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800ae08:	b16b      	cbz	r3, 800ae26 <USBD_CDC_EP0_RxReady+0x2a>
 800ae0a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800ae0e:	28ff      	cmp	r0, #255	; 0xff
 800ae10:	d009      	beq.n	800ae26 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	4621      	mov	r1, r4
 800ae16:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800ae1a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800ae1c:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800ae1e:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800ae20:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800ae24:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800ae26:	2000      	movs	r0, #0
}
 800ae28:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800ae2a:	2003      	movs	r0, #3
}
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	bf00      	nop

0800ae30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae30:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ae32:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ae36:	801a      	strh	r2, [r3, #0]
}
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	2400023c 	.word	0x2400023c

0800ae40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae40:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ae42:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 800ae44:	4801      	ldr	r0, [pc, #4]	; (800ae4c <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ae46:	801a      	strh	r2, [r3, #0]
}
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	24000280 	.word	0x24000280

0800ae50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae50:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ae52:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800ae54:	4801      	ldr	r0, [pc, #4]	; (800ae5c <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ae56:	801a      	strh	r2, [r3, #0]
}
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	240002d0 	.word	0x240002d0

0800ae60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae60:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae62:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800ae64:	4801      	ldr	r0, [pc, #4]	; (800ae6c <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae66:	801a      	strh	r2, [r3, #0]
}
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	240002c4 	.word	0x240002c4

0800ae70 <USBD_CDC_DataOut>:
{
 800ae70:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae72:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800ae76:	b175      	cbz	r5, 800ae96 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae78:	4604      	mov	r4, r0
 800ae7a:	f001 f915 	bl	800c0a8 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae7e:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800ae82:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae86:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800ae90:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800ae92:	2000      	movs	r0, #0
}
 800ae94:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800ae96:	2003      	movs	r0, #3
}
 800ae98:	bd38      	pop	{r3, r4, r5, pc}
 800ae9a:	bf00      	nop

0800ae9c <USBD_CDC_DataIn>:
{
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800ae9e:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 800aea2:	b367      	cbz	r7, 800aefe <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aea4:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 800aea8:	4605      	mov	r5, r0
 800aeaa:	460a      	mov	r2, r1
 800aeac:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800aeb0:	69b3      	ldr	r3, [r6, #24]
 800aeb2:	b96b      	cbnz	r3, 800aed0 <USBD_CDC_DataIn+0x34>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aeb4:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800aeb8:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aeba:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800aebc:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aec0:	b1db      	cbz	r3, 800aefa <USBD_CDC_DataIn+0x5e>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aec2:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800aec6:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800aeca:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800aecc:	4620      	mov	r0, r4
}
 800aece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aed0:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800aed4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800aed8:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800aedc:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800aee0:	fbb3 f4fc 	udiv	r4, r3, ip
 800aee4:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aee8:	2c00      	cmp	r4, #0
 800aeea:	d1e3      	bne.n	800aeb4 <USBD_CDC_DataIn+0x18>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aeec:	4623      	mov	r3, r4
 800aeee:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800aef0:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aef2:	f001 f8bd 	bl	800c070 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800aef6:	4620      	mov	r0, r4
}
 800aef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint8_t)USBD_OK;
 800aefa:	4618      	mov	r0, r3
}
 800aefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800aefe:	2003      	movs	r0, #3
}
 800af00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af02:	bf00      	nop

0800af04 <USBD_CDC_Setup>:
{
 800af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800af08:	2300      	movs	r3, #0
{
 800af0a:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af0c:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800af10:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800af14:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800af18:	2f00      	cmp	r7, #0
 800af1a:	d067      	beq.n	800afec <USBD_CDC_Setup+0xe8>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af1c:	780e      	ldrb	r6, [r1, #0]
 800af1e:	4680      	mov	r8, r0
 800af20:	460c      	mov	r4, r1
 800af22:	f016 0560 	ands.w	r5, r6, #96	; 0x60
 800af26:	d01e      	beq.n	800af66 <USBD_CDC_Setup+0x62>
 800af28:	2d20      	cmp	r5, #32
 800af2a:	d008      	beq.n	800af3e <USBD_CDC_Setup+0x3a>
          ret = USBD_FAIL;
 800af2c:	2503      	movs	r5, #3
          USBD_CtlError(pdev, req);
 800af2e:	4621      	mov	r1, r4
 800af30:	4640      	mov	r0, r8
 800af32:	f000 fd4f 	bl	800b9d4 <USBD_CtlError>
}
 800af36:	4628      	mov	r0, r5
 800af38:	b002      	add	sp, #8
 800af3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 800af3e:	88ca      	ldrh	r2, [r1, #6]
 800af40:	b382      	cbz	r2, 800afa4 <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800af42:	0631      	lsls	r1, r6, #24
 800af44:	d557      	bpl.n	800aff6 <USBD_CDC_Setup+0xf2>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af46:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
 800af4a:	4639      	mov	r1, r7
 800af4c:	7860      	ldrb	r0, [r4, #1]
 800af4e:	68ae      	ldr	r6, [r5, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800af50:	461d      	mov	r5, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af52:	47b0      	blx	r6
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af54:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af56:	4639      	mov	r1, r7
 800af58:	4640      	mov	r0, r8
 800af5a:	2a07      	cmp	r2, #7
 800af5c:	bf28      	it	cs
 800af5e:	2207      	movcs	r2, #7
 800af60:	f000 fd6a 	bl	800ba38 <USBD_CtlSendData>
 800af64:	e7e7      	b.n	800af36 <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800af66:	784b      	ldrb	r3, [r1, #1]
 800af68:	2b0b      	cmp	r3, #11
 800af6a:	d8df      	bhi.n	800af2c <USBD_CDC_Setup+0x28>
 800af6c:	a201      	add	r2, pc, #4	; (adr r2, 800af74 <USBD_CDC_Setup+0x70>)
 800af6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af72:	bf00      	nop
 800af74:	0800afd7 	.word	0x0800afd7
 800af78:	0800af37 	.word	0x0800af37
 800af7c:	0800af2d 	.word	0x0800af2d
 800af80:	0800af2d 	.word	0x0800af2d
 800af84:	0800af2d 	.word	0x0800af2d
 800af88:	0800af2d 	.word	0x0800af2d
 800af8c:	0800af2d 	.word	0x0800af2d
 800af90:	0800af2d 	.word	0x0800af2d
 800af94:	0800af2d 	.word	0x0800af2d
 800af98:	0800af2d 	.word	0x0800af2d
 800af9c:	0800afc3 	.word	0x0800afc3
 800afa0:	0800afb9 	.word	0x0800afb9
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afa4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 800afa8:	4615      	mov	r5, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afaa:	7848      	ldrb	r0, [r1, #1]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	4798      	blx	r3
}
 800afb0:	4628      	mov	r0, r5
 800afb2:	b002      	add	sp, #8
 800afb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afb8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d0ba      	beq.n	800af36 <USBD_CDC_Setup+0x32>
 800afc0:	e7b4      	b.n	800af2c <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d1b0      	bne.n	800af2c <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afca:	2201      	movs	r2, #1
 800afcc:	f10d 0105 	add.w	r1, sp, #5
 800afd0:	f000 fd32 	bl	800ba38 <USBD_CtlSendData>
 800afd4:	e7af      	b.n	800af36 <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800afda:	2a03      	cmp	r2, #3
 800afdc:	d1a6      	bne.n	800af2c <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afde:	2202      	movs	r2, #2
 800afe0:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 800afe4:	461d      	mov	r5, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afe6:	f000 fd27 	bl	800ba38 <USBD_CtlSendData>
 800afea:	e7a4      	b.n	800af36 <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800afec:	2503      	movs	r5, #3
}
 800afee:	4628      	mov	r0, r5
 800aff0:	b002      	add	sp, #8
 800aff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 800aff6:	7864      	ldrb	r4, [r4, #1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800aff8:	4639      	mov	r1, r7
          hcdc->CmdLength = (uint8_t)req->wLength;
 800affa:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 800affe:	461d      	mov	r5, r3
          hcdc->CmdOpCode = req->bRequest;
 800b000:	f887 4200 	strb.w	r4, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b004:	f000 fd30 	bl	800ba68 <USBD_CtlPrepareRx>
 800b008:	e795      	b.n	800af36 <USBD_CDC_Setup+0x32>
 800b00a:	bf00      	nop

0800b00c <USBD_CDC_DeInit>:
{
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b010:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b012:	2181      	movs	r1, #129	; 0x81
 800b014:	f000 ffe0 	bl	800bfd8 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b018:	2101      	movs	r1, #1
 800b01a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b01c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b01e:	f000 ffdb 	bl	800bfd8 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b022:	4620      	mov	r0, r4
 800b024:	2182      	movs	r1, #130	; 0x82
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b026:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b02a:	f000 ffd5 	bl	800bfd8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800b02e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b032:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800b034:	b14b      	cbz	r3, 800b04a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b036:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b03e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800b042:	f001 f839 	bl	800c0b8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b046:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800b04a:	2000      	movs	r0, #0
 800b04c:	bd38      	pop	{r3, r4, r5, pc}
 800b04e:	bf00      	nop

0800b050 <USBD_CDC_Init>:
{
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b056:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b05a:	f001 f829 	bl	800c0b0 <USBD_static_malloc>
  if (hcdc == NULL)
 800b05e:	4605      	mov	r5, r0
 800b060:	2800      	cmp	r0, #0
 800b062:	d04d      	beq.n	800b100 <USBD_CDC_Init+0xb0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b064:	7c23      	ldrb	r3, [r4, #16]
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b066:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 800b068:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b06c:	b38b      	cbz	r3, 800b0d2 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b06e:	2340      	movs	r3, #64	; 0x40
 800b070:	2181      	movs	r1, #129	; 0x81
 800b072:	2202      	movs	r2, #2
 800b074:	4620      	mov	r0, r4
 800b076:	f000 ff9d 	bl	800bfb4 <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b07a:	4631      	mov	r1, r6
 800b07c:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b07e:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b080:	2202      	movs	r2, #2
 800b082:	4620      	mov	r0, r4
 800b084:	f000 ff96 	bl	800bfb4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b088:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b08a:	2203      	movs	r2, #3
 800b08c:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b08e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b092:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b094:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b098:	2308      	movs	r3, #8
 800b09a:	f000 ff8b 	bl	800bfb4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b09e:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b0a2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800b0a6:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b0a8:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4798      	blx	r3
  hcdc->TxState = 0U;
 800b0b0:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800b0b4:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0b8:	7c26      	ldrb	r6, [r4, #16]
 800b0ba:	b9b6      	cbnz	r6, 800b0ea <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0bc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b0c0:	4641      	mov	r1, r8
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0c8:	f000 ffe0 	bl	800c08c <USBD_LL_PrepareReceive>
}
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0d6:	2181      	movs	r1, #129	; 0x81
 800b0d8:	2202      	movs	r2, #2
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 ff6a 	bl	800bfb4 <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b0e6:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b0e8:	e7ca      	b.n	800b080 <USBD_CDC_Init+0x30>
  return (uint8_t)USBD_OK;
 800b0ea:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0ec:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800b0f0:	4641      	mov	r1, r8
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	2340      	movs	r3, #64	; 0x40
 800b0f6:	f000 ffc9 	bl	800c08c <USBD_LL_PrepareReceive>
}
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800b100:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800b102:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800b106:	4630      	mov	r0, r6
 800b108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b10c <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800b10c:	b119      	cbz	r1, 800b116 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800b10e:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b112:	2000      	movs	r0, #0
 800b114:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800b116:	2003      	movs	r0, #3
}
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop

0800b11c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b11c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800b120:	b12b      	cbz	r3, 800b12e <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800b122:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800b124:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b128:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800b12c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800b12e:	2003      	movs	r0, #3
}
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop

0800b134 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b134:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800b138:	b11b      	cbz	r3, 800b142 <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800b13a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800b13c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800b140:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800b142:	2003      	movs	r0, #3
}
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop

0800b148 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b148:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b14a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800b14e:	b18d      	cbz	r5, 800b174 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800b150:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800b154:	b10c      	cbz	r4, 800b15a <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b156:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800b158:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b15a:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    hcdc->TxState = 1U;
 800b15e:	2101      	movs	r1, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b160:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    hcdc->TxState = 1U;
 800b164:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b168:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b16a:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b16c:	f000 ff80 	bl	800c070 <USBD_LL_Transmit>
    ret = USBD_OK;
 800b170:	4620      	mov	r0, r4
}
 800b172:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800b174:	2003      	movs	r0, #3
}
 800b176:	bd38      	pop	{r3, r4, r5, pc}

0800b178 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b178:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800b17c:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800b17e:	b18a      	cbz	r2, 800b1a4 <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b180:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b182:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b186:	b134      	cbz	r4, 800b196 <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b188:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b18a:	2340      	movs	r3, #64	; 0x40
 800b18c:	2101      	movs	r1, #1
 800b18e:	f000 ff7d 	bl	800c08c <USBD_LL_PrepareReceive>
}
 800b192:	4620      	mov	r0, r4
 800b194:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b19a:	2101      	movs	r1, #1
 800b19c:	f000 ff76 	bl	800c08c <USBD_LL_PrepareReceive>
}
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800b1a4:	2403      	movs	r4, #3
}
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	bd10      	pop	{r4, pc}
 800b1aa:	bf00      	nop

0800b1ac <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1ac:	b178      	cbz	r0, 800b1ce <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b1b4:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b1b8:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b1bc:	b109      	cbz	r1, 800b1c2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800b1be:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1c2:	2301      	movs	r3, #1
  pdev->id = id;
 800b1c4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1c6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b1ca:	f000 beb1 	b.w	800bf30 <USBD_LL_Init>

  return ret;
}
 800b1ce:	2003      	movs	r0, #3
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop

0800b1d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b1d4:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800b1d6:	2400      	movs	r4, #0
{
 800b1d8:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800b1da:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800b1de:	b181      	cbz	r1, 800b202 <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b1e0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800b1e2:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 800b1e4:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b1e8:	b143      	cbz	r3, 800b1fc <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b1ea:	f10d 0006 	add.w	r0, sp, #6
 800b1ee:	4798      	blx	r3
 800b1f0:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b1f2:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b1f4:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 800b1f8:	b003      	add	sp, #12
 800b1fa:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800b1fc:	4618      	mov	r0, r3
}
 800b1fe:	b003      	add	sp, #12
 800b200:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800b202:	2003      	movs	r0, #3
}
 800b204:	b003      	add	sp, #12
 800b206:	bd30      	pop	{r4, r5, pc}

0800b208 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b208:	f000 bec6 	b.w	800bf98 <USBD_LL_Start>

0800b20c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800b20c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b210:	b10b      	cbz	r3, 800b216 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4718      	bx	r3
  }

  return ret;
}
 800b216:	2003      	movs	r0, #3
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop

0800b21c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b21c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b21e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b222:	b10b      	cbz	r3, 800b228 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	4798      	blx	r3
  }

  return USBD_OK;
}
 800b228:	2000      	movs	r0, #0
 800b22a:	bd08      	pop	{r3, pc}

0800b22c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b22c:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b22e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800b232:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b234:	4628      	mov	r0, r5
 800b236:	f000 fbb9 	bl	800b9ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800b23a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800b23e:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800b240:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 800b244:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800b248:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800b24c:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 800b24e:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800b252:	d009      	beq.n	800b268 <USBD_LL_SetupStage+0x3c>
 800b254:	2b02      	cmp	r3, #2
 800b256:	d013      	beq.n	800b280 <USBD_LL_SetupStage+0x54>
 800b258:	b163      	cbz	r3, 800b274 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b25a:	4620      	mov	r0, r4
 800b25c:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800b260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b264:	f000 bec6 	b.w	800bff4 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b268:	4629      	mov	r1, r5
 800b26a:	4620      	mov	r0, r4
}
 800b26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b270:	f000 bac8 	b.w	800b804 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b274:	4629      	mov	r1, r5
 800b276:	4620      	mov	r0, r4
}
 800b278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b27c:	f000 b924 	b.w	800b4c8 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b280:	4629      	mov	r1, r5
 800b282:	4620      	mov	r0, r4
}
 800b284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b288:	f000 baf4 	b.w	800b874 <USBD_StdEPReq>

0800b28c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b290:	b929      	cbnz	r1, 800b29e <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b292:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b296:	2b03      	cmp	r3, #3
 800b298:	d00d      	beq.n	800b2b6 <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800b29a:	2000      	movs	r0, #0
 800b29c:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b29e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d1f9      	bne.n	800b29a <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800b2a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d0f4      	beq.n	800b29a <USBD_LL_DataOutStage+0xe>
}
 800b2b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b2b4:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800b2b6:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 800b2ba:	42ab      	cmp	r3, r5
 800b2bc:	d808      	bhi.n	800b2d0 <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d00f      	beq.n	800b2e6 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f000 fbe6 	bl	800ba98 <USBD_CtlSendStatus>
}
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800b2d0:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	462a      	mov	r2, r5
 800b2d6:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800b2d8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2dc:	bf28      	it	cs
 800b2de:	461a      	movcs	r2, r3
 800b2e0:	f000 fbd0 	bl	800ba84 <USBD_CtlContinueRx>
 800b2e4:	e7d9      	b.n	800b29a <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800b2e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0ea      	beq.n	800b2c6 <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 800b2f0:	4798      	blx	r3
 800b2f2:	e7e8      	b.n	800b2c6 <USBD_LL_DataOutStage+0x3a>

0800b2f4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b2f8:	b949      	cbnz	r1, 800b30e <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b2fa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d011      	beq.n	800b326 <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b302:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800b306:	2b01      	cmp	r3, #1
 800b308:	d022      	beq.n	800b350 <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 800b30a:	2000      	movs	r0, #0
 800b30c:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b30e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b312:	2b03      	cmp	r3, #3
 800b314:	d1f9      	bne.n	800b30a <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 800b316:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0f4      	beq.n	800b30a <USBD_LL_DataInStage+0x16>
}
 800b320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b324:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800b326:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800b32a:	460d      	mov	r5, r1
 800b32c:	42b3      	cmp	r3, r6
 800b32e:	d814      	bhi.n	800b35a <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 800b330:	d020      	beq.n	800b374 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b332:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800b336:	2b03      	cmp	r3, #3
 800b338:	d029      	beq.n	800b38e <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b33a:	2180      	movs	r1, #128	; 0x80
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 fe59 	bl	800bff4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b342:	4620      	mov	r0, r4
 800b344:	f000 fbb4 	bl	800bab0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800b348:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d1dc      	bne.n	800b30a <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 800b350:	2300      	movs	r3, #0
}
 800b352:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 800b354:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800b358:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800b35a:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b35c:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800b35e:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b360:	461a      	mov	r2, r3
 800b362:	f000 fb77 	bl	800ba54 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b366:	462b      	mov	r3, r5
 800b368:	462a      	mov	r2, r5
 800b36a:	4629      	mov	r1, r5
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 fe8d 	bl	800c08c <USBD_LL_PrepareReceive>
 800b372:	e7c6      	b.n	800b302 <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800b374:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800b376:	4293      	cmp	r3, r2
 800b378:	d8db      	bhi.n	800b332 <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 800b37a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800b37e:	429a      	cmp	r2, r3
 800b380:	d2d7      	bcs.n	800b332 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b382:	460a      	mov	r2, r1
 800b384:	f000 fb66 	bl	800ba54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b388:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800b38c:	e7eb      	b.n	800b366 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800b38e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d0d0      	beq.n	800b33a <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 800b398:	4620      	mov	r0, r4
 800b39a:	4798      	blx	r3
 800b39c:	e7cd      	b.n	800b33a <USBD_LL_DataInStage+0x46>
 800b39e:	bf00      	nop

0800b3a0 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800b3a0:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3a2:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800b3a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3a8:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800b3ac:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b3ae:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800b3b2:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800b3b6:	b1eb      	cbz	r3, 800b3f4 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800b3b8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800b3c0:	b112      	cbz	r2, 800b3c8 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	b103      	cbz	r3, 800b3c8 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b3c6:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3c8:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3ca:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b3cc:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	462b      	mov	r3, r5
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	f000 fdee 	bl	800bfb4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3d8:	462b      	mov	r3, r5
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2180      	movs	r1, #128	; 0x80
 800b3de:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b3e0:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3e4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3e8:	f000 fde4 	bl	800bfb4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800b3ec:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b3ee:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3f0:	6225      	str	r5, [r4, #32]
}
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800b3f4:	2003      	movs	r0, #3
}
 800b3f6:	4770      	bx	lr

0800b3f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b3f8:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800b3fa:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800b3fc:	7419      	strb	r1, [r3, #16]
}
 800b3fe:	4770      	bx	lr

0800b400 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b400:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b402:	2104      	movs	r1, #4

  return USBD_OK;
}
 800b404:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800b406:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b410:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop

0800b418 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b418:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b41c:	2b04      	cmp	r3, #4
 800b41e:	d104      	bne.n	800b42a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b420:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800b424:	b2db      	uxtb	r3, r3
 800b426:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800b42a:	2000      	movs	r0, #0
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop

0800b430 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800b430:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800b434:	b15a      	cbz	r2, 800b44e <USBD_LL_SOF+0x1e>
{
 800b436:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b438:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b43c:	2b03      	cmp	r3, #3
 800b43e:	d001      	beq.n	800b444 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800b440:	2000      	movs	r0, #0
}
 800b442:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800b444:	69d3      	ldr	r3, [r2, #28]
 800b446:	b123      	cbz	r3, 800b452 <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800b448:	4798      	blx	r3
  return USBD_OK;
 800b44a:	2000      	movs	r0, #0
}
 800b44c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800b44e:	2003      	movs	r0, #3
}
 800b450:	4770      	bx	lr
  return USBD_OK;
 800b452:	4618      	mov	r0, r3
}
 800b454:	bd08      	pop	{r3, pc}
 800b456:	bf00      	nop

0800b458 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800b458:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800b45c:	b15a      	cbz	r2, 800b476 <USBD_LL_IsoINIncomplete+0x1e>
{
 800b45e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b460:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b464:	2b03      	cmp	r3, #3
 800b466:	d001      	beq.n	800b46c <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800b468:	2000      	movs	r0, #0
}
 800b46a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b46c:	6a13      	ldr	r3, [r2, #32]
 800b46e:	b123      	cbz	r3, 800b47a <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b470:	4798      	blx	r3
  return USBD_OK;
 800b472:	2000      	movs	r0, #0
}
 800b474:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800b476:	2003      	movs	r0, #3
}
 800b478:	4770      	bx	lr
  return USBD_OK;
 800b47a:	4618      	mov	r0, r3
}
 800b47c:	bd08      	pop	{r3, pc}
 800b47e:	bf00      	nop

0800b480 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800b480:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800b484:	b15a      	cbz	r2, 800b49e <USBD_LL_IsoOUTIncomplete+0x1e>
{
 800b486:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b488:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b48c:	2b03      	cmp	r3, #3
 800b48e:	d001      	beq.n	800b494 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800b490:	2000      	movs	r0, #0
}
 800b492:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b494:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b496:	b123      	cbz	r3, 800b4a2 <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b498:	4798      	blx	r3
  return USBD_OK;
 800b49a:	2000      	movs	r0, #0
}
 800b49c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800b49e:	2003      	movs	r0, #3
}
 800b4a0:	4770      	bx	lr
  return USBD_OK;
 800b4a2:	4618      	mov	r0, r3
}
 800b4a4:	bd08      	pop	{r3, pc}
 800b4a6:	bf00      	nop

0800b4a8 <USBD_LL_DevConnected>:
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	4770      	bx	lr

0800b4ac <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4ac:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800b4ae:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b2:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800b4b6:	b12a      	cbz	r2, 800b4c4 <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b4b8:	6852      	ldr	r2, [r2, #4]
 800b4ba:	7901      	ldrb	r1, [r0, #4]
{
 800b4bc:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b4be:	4790      	blx	r2
  }

  return USBD_OK;
}
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	bd08      	pop	{r3, pc}
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	4770      	bx	lr

0800b4c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	780c      	ldrb	r4, [r1, #0]
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	460e      	mov	r6, r1
 800b4d0:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4d2:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800b4d6:	2c20      	cmp	r4, #32
 800b4d8:	d00e      	beq.n	800b4f8 <USBD_StdDevReq+0x30>
 800b4da:	2c40      	cmp	r4, #64	; 0x40
 800b4dc:	d00c      	beq.n	800b4f8 <USBD_StdDevReq+0x30>
 800b4de:	b1ac      	cbz	r4, 800b50c <USBD_StdDevReq+0x44>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4e0:	2180      	movs	r1, #128	; 0x80
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	f000 fd86 	bl	800bff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ec:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800b4ee:	f000 fd81 	bl	800bff4 <USBD_LL_StallEP>
}
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	b002      	add	sp, #8
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4f8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4628      	mov	r0, r5
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	4798      	blx	r3
 800b504:	4604      	mov	r4, r0
}
 800b506:	4620      	mov	r0, r4
 800b508:	b002      	add	sp, #8
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800b50c:	784b      	ldrb	r3, [r1, #1]
 800b50e:	2b09      	cmp	r3, #9
 800b510:	d8e6      	bhi.n	800b4e0 <USBD_StdDevReq+0x18>
 800b512:	a201      	add	r2, pc, #4	; (adr r2, 800b518 <USBD_StdDevReq+0x50>)
 800b514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b518:	0800b579 	.word	0x0800b579
 800b51c:	0800b5a7 	.word	0x0800b5a7
 800b520:	0800b4e1 	.word	0x0800b4e1
 800b524:	0800b5c3 	.word	0x0800b5c3
 800b528:	0800b4e1 	.word	0x0800b4e1
 800b52c:	0800b5d5 	.word	0x0800b5d5
 800b530:	0800b60d 	.word	0x0800b60d
 800b534:	0800b4e1 	.word	0x0800b4e1
 800b538:	0800b629 	.word	0x0800b629
 800b53c:	0800b541 	.word	0x0800b541
  cfgidx = (uint8_t)(req->wValue);
 800b540:	7889      	ldrb	r1, [r1, #2]
 800b542:	4eaf      	ldr	r6, [pc, #700]	; (800b800 <USBD_StdDevReq+0x338>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b544:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800b546:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b548:	f200 813d 	bhi.w	800b7c6 <USBD_StdDevReq+0x2fe>
  switch (pdev->dev_state)
 800b54c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b550:	2b02      	cmp	r3, #2
 800b552:	b2da      	uxtb	r2, r3
 800b554:	f000 8125 	beq.w	800b7a2 <USBD_StdDevReq+0x2da>
 800b558:	2a03      	cmp	r2, #3
 800b55a:	f000 80ff 	beq.w	800b75c <USBD_StdDevReq+0x294>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b55e:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800b560:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b562:	f000 fd47 	bl	800bff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b566:	2100      	movs	r1, #0
 800b568:	4628      	mov	r0, r5
 800b56a:	f000 fd43 	bl	800bff4 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b56e:	7831      	ldrb	r1, [r6, #0]
 800b570:	4628      	mov	r0, r5
 800b572:	f7ff fe53 	bl	800b21c <USBD_ClrClassConfig>
      break;
 800b576:	e7bc      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800b578:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b57c:	3a01      	subs	r2, #1
 800b57e:	2a02      	cmp	r2, #2
 800b580:	d86a      	bhi.n	800b658 <USBD_StdDevReq+0x190>
      if (req->wLength != 0x2U)
 800b582:	88ca      	ldrh	r2, [r1, #6]
 800b584:	2a02      	cmp	r2, #2
 800b586:	d167      	bne.n	800b658 <USBD_StdDevReq+0x190>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b588:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800b58a:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b58e:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800b590:	b10a      	cbz	r2, 800b596 <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b592:	2203      	movs	r2, #3
 800b594:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b596:	2202      	movs	r2, #2
 800b598:	f105 010c 	add.w	r1, r5, #12
 800b59c:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800b59e:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5a0:	f000 fa4a 	bl	800ba38 <USBD_CtlSendData>
      break;
 800b5a4:	e7a5      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800b5a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d853      	bhi.n	800b658 <USBD_StdDevReq+0x190>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5b0:	884b      	ldrh	r3, [r1, #2]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d19d      	bne.n	800b4f2 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b5bc:	f000 fa6c 	bl	800ba98 <USBD_CtlSendStatus>
 800b5c0:	e797      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5c2:	884b      	ldrh	r3, [r1, #2]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d194      	bne.n	800b4f2 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 800b5c8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f000 fa63 	bl	800ba98 <USBD_CtlSendStatus>
 800b5d2:	e78e      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5d4:	888b      	ldrh	r3, [r1, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d13e      	bne.n	800b658 <USBD_StdDevReq+0x190>
 800b5da:	88cb      	ldrh	r3, [r1, #6]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d13b      	bne.n	800b658 <USBD_StdDevReq+0x190>
 800b5e0:	884e      	ldrh	r6, [r1, #2]
 800b5e2:	2e7f      	cmp	r6, #127	; 0x7f
 800b5e4:	d838      	bhi.n	800b658 <USBD_StdDevReq+0x190>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d034      	beq.n	800b658 <USBD_StdDevReq+0x190>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5ee:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800b5f0:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5f4:	f000 fd2e 	bl	800c054 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f000 fa4d 	bl	800ba98 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800b5fe:	2e00      	cmp	r6, #0
 800b600:	f040 80cb 	bne.w	800b79a <USBD_StdDevReq+0x2d2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b604:	2301      	movs	r3, #1
 800b606:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800b60a:	e772      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
          USBD_GetDescriptor(pdev, req);
 800b60c:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800b60e:	2100      	movs	r1, #0
 800b610:	0a13      	lsrs	r3, r2, #8
 800b612:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800b616:	3b01      	subs	r3, #1
 800b618:	2b06      	cmp	r3, #6
 800b61a:	d81d      	bhi.n	800b658 <USBD_StdDevReq+0x190>
 800b61c:	e8df f003 	tbb	[pc, r3]
 800b620:	1c4d606d 	.word	0x1c4d606d
 800b624:	431c      	.short	0x431c
 800b626:	27          	.byte	0x27
 800b627:	00          	.byte	0x00
  if (req->wLength != 1U)
 800b628:	88ca      	ldrh	r2, [r1, #6]
 800b62a:	2a01      	cmp	r2, #1
 800b62c:	d114      	bne.n	800b658 <USBD_StdDevReq+0x190>
    switch (pdev->dev_state)
 800b62e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800b632:	2902      	cmp	r1, #2
 800b634:	b2cb      	uxtb	r3, r1
 800b636:	f200 808a 	bhi.w	800b74e <USBD_StdDevReq+0x286>
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f43f af50 	beq.w	800b4e0 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800b640:	2300      	movs	r3, #0
 800b642:	4601      	mov	r1, r0
 800b644:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b648:	f000 f9f6 	bl	800ba38 <USBD_CtlSendData>
        break;
 800b64c:	e751      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b64e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d15d      	bne.n	800b714 <USBD_StdDevReq+0x24c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b658:	2180      	movs	r1, #128	; 0x80
 800b65a:	4628      	mov	r0, r5
 800b65c:	f000 fcca 	bl	800bff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b660:	4628      	mov	r0, r5
 800b662:	2100      	movs	r1, #0
 800b664:	f000 fcc6 	bl	800bff4 <USBD_LL_StallEP>
}
 800b668:	4620      	mov	r0, r4
 800b66a:	b002      	add	sp, #8
 800b66c:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b66e:	7c03      	ldrb	r3, [r0, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1f1      	bne.n	800b658 <USBD_StdDevReq+0x190>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b674:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b678:	f10d 0006 	add.w	r0, sp, #6
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b680:	2307      	movs	r3, #7
 800b682:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800b684:	88f2      	ldrh	r2, [r6, #6]
 800b686:	2a00      	cmp	r2, #0
 800b688:	d0a0      	beq.n	800b5cc <USBD_StdDevReq+0x104>
    if (len != 0U)
 800b68a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0e2      	beq.n	800b658 <USBD_StdDevReq+0x190>
      len = MIN(len, req->wLength);
 800b692:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b694:	4601      	mov	r1, r0
 800b696:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800b698:	bf28      	it	cs
 800b69a:	461a      	movcs	r2, r3
 800b69c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6a0:	f000 f9ca 	bl	800ba38 <USBD_CtlSendData>
 800b6a4:	e725      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6a6:	7c03      	ldrb	r3, [r0, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1d5      	bne.n	800b658 <USBD_StdDevReq+0x190>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b6ac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b6b0:	f10d 0006 	add.w	r0, sp, #6
 800b6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b6:	4798      	blx	r3
  if (err != 0U)
 800b6b8:	e7e4      	b.n	800b684 <USBD_StdDevReq+0x1bc>
      switch ((uint8_t)(req->wValue))
 800b6ba:	b2d2      	uxtb	r2, r2
 800b6bc:	2a05      	cmp	r2, #5
 800b6be:	d8cb      	bhi.n	800b658 <USBD_StdDevReq+0x190>
 800b6c0:	a301      	add	r3, pc, #4	; (adr r3, 800b6c8 <USBD_StdDevReq+0x200>)
 800b6c2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800b6c6:	bf00      	nop
 800b6c8:	0800b64f 	.word	0x0800b64f
 800b6cc:	0800b743 	.word	0x0800b743
 800b6d0:	0800b737 	.word	0x0800b737
 800b6d4:	0800b72b 	.word	0x0800b72b
 800b6d8:	0800b71f 	.word	0x0800b71f
 800b6dc:	0800b70b 	.word	0x0800b70b
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6e0:	7c03      	ldrb	r3, [r0, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f040 8083 	bne.w	800b7ee <USBD_StdDevReq+0x326>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b6e8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b6ec:	f10d 0006 	add.w	r0, sp, #6
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b6f8:	e7c4      	b.n	800b684 <USBD_StdDevReq+0x1bc>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b6fe:	f10d 0106 	add.w	r1, sp, #6
 800b702:	7c00      	ldrb	r0, [r0, #16]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4798      	blx	r3
  if (err != 0U)
 800b708:	e7bc      	b.n	800b684 <USBD_StdDevReq+0x1bc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b70a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d0a1      	beq.n	800b658 <USBD_StdDevReq+0x190>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b714:	f10d 0106 	add.w	r1, sp, #6
 800b718:	7c28      	ldrb	r0, [r5, #16]
 800b71a:	4798      	blx	r3
  if (err != 0U)
 800b71c:	e7b2      	b.n	800b684 <USBD_StdDevReq+0x1bc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b71e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1f5      	bne.n	800b714 <USBD_StdDevReq+0x24c>
 800b728:	e796      	b.n	800b658 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b72a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1ef      	bne.n	800b714 <USBD_StdDevReq+0x24c>
 800b734:	e790      	b.n	800b658 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b736:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1e9      	bne.n	800b714 <USBD_StdDevReq+0x24c>
 800b740:	e78a      	b.n	800b658 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b742:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e3      	bne.n	800b714 <USBD_StdDevReq+0x24c>
 800b74c:	e784      	b.n	800b658 <USBD_StdDevReq+0x190>
    switch (pdev->dev_state)
 800b74e:	2b03      	cmp	r3, #3
 800b750:	f47f aec6 	bne.w	800b4e0 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b754:	1d01      	adds	r1, r0, #4
 800b756:	f000 f96f 	bl	800ba38 <USBD_CtlSendData>
        break;
 800b75a:	e6ca      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800b75c:	2900      	cmp	r1, #0
 800b75e:	d03b      	beq.n	800b7d8 <USBD_StdDevReq+0x310>
      else if (cfgidx != pdev->dev_config)
 800b760:	6841      	ldr	r1, [r0, #4]
 800b762:	2901      	cmp	r1, #1
 800b764:	f43f af32 	beq.w	800b5cc <USBD_StdDevReq+0x104>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b768:	b2c9      	uxtb	r1, r1
 800b76a:	f7ff fd57 	bl	800b21c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b76e:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b770:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800b772:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b774:	f7ff fd4a 	bl	800b20c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800b778:	4606      	mov	r6, r0
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f43f af26 	beq.w	800b5cc <USBD_StdDevReq+0x104>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b780:	2180      	movs	r1, #128	; 0x80
 800b782:	4628      	mov	r0, r5
 800b784:	f000 fc36 	bl	800bff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b788:	2100      	movs	r1, #0
 800b78a:	4628      	mov	r0, r5
 800b78c:	4634      	mov	r4, r6
 800b78e:	f000 fc31 	bl	800bff4 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b792:	7929      	ldrb	r1, [r5, #4]
 800b794:	4628      	mov	r0, r5
 800b796:	f7ff fd41 	bl	800b21c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b79a:	2302      	movs	r3, #2
 800b79c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800b7a0:	e6a7      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800b7a2:	2900      	cmp	r1, #0
 800b7a4:	f43f af12 	beq.w	800b5cc <USBD_StdDevReq+0x104>
        pdev->dev_config = cfgidx;
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7ac:	f7ff fd2e 	bl	800b20c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	f47f af50 	bne.w	800b658 <USBD_StdDevReq+0x190>
          (void)USBD_CtlSendStatus(pdev);
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	f000 f96d 	bl	800ba98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800b7c4:	e695      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7c6:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800b7c8:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7ca:	f000 fc13 	bl	800bff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	f000 fc0f 	bl	800bff4 <USBD_LL_StallEP>
    return USBD_FAIL;
 800b7d6:	e68c      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7d8:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800b7da:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7dc:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7de:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7e2:	f7ff fd1b 	bl	800b21c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f000 f956 	bl	800ba98 <USBD_CtlSendStatus>
 800b7ec:	e681      	b.n	800b4f2 <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b7ee:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b7f2:	f10d 0006 	add.w	r0, sp, #6
 800b7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b7fe:	e741      	b.n	800b684 <USBD_StdDevReq+0x1bc>
 800b800:	24000674 	.word	0x24000674

0800b804 <USBD_StdItfReq>:
{
 800b804:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b806:	780b      	ldrb	r3, [r1, #0]
{
 800b808:	460d      	mov	r5, r1
 800b80a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b80c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800b810:	2a40      	cmp	r2, #64	; 0x40
 800b812:	d00b      	beq.n	800b82c <USBD_StdItfReq+0x28>
 800b814:	065b      	lsls	r3, r3, #25
 800b816:	d509      	bpl.n	800b82c <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800b818:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b81a:	2180      	movs	r1, #128	; 0x80
 800b81c:	f000 fbea 	bl	800bff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b820:	4620      	mov	r0, r4
 800b822:	4629      	mov	r1, r5
 800b824:	f000 fbe6 	bl	800bff4 <USBD_LL_StallEP>
}
 800b828:	4628      	mov	r0, r5
 800b82a:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800b82c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800b830:	3b01      	subs	r3, #1
 800b832:	2b02      	cmp	r3, #2
 800b834:	d812      	bhi.n	800b85c <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b836:	792b      	ldrb	r3, [r5, #4]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d80f      	bhi.n	800b85c <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b83c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b840:	4629      	mov	r1, r5
 800b842:	4620      	mov	r0, r4
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b848:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b84a:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1eb      	bne.n	800b828 <USBD_StdItfReq+0x24>
 800b850:	2800      	cmp	r0, #0
 800b852:	d1e9      	bne.n	800b828 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800b854:	4620      	mov	r0, r4
 800b856:	f000 f91f 	bl	800ba98 <USBD_CtlSendStatus>
 800b85a:	e7e5      	b.n	800b828 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b85c:	2180      	movs	r1, #128	; 0x80
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 fbc8 	bl	800bff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b864:	2100      	movs	r1, #0
 800b866:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800b868:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800b86a:	f000 fbc3 	bl	800bff4 <USBD_LL_StallEP>
}
 800b86e:	4628      	mov	r0, r5
 800b870:	bd38      	pop	{r3, r4, r5, pc}
 800b872:	bf00      	nop

0800b874 <USBD_StdEPReq>:
{
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	780b      	ldrb	r3, [r1, #0]
 800b878:	460d      	mov	r5, r1
 800b87a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b87c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b880:	2b20      	cmp	r3, #32
 800b882:	d01b      	beq.n	800b8bc <USBD_StdEPReq+0x48>
 800b884:	2b40      	cmp	r3, #64	; 0x40
 800b886:	d019      	beq.n	800b8bc <USBD_StdEPReq+0x48>
 800b888:	b303      	cbz	r3, 800b8cc <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b88a:	2180      	movs	r1, #128	; 0x80
 800b88c:	4620      	mov	r0, r4
 800b88e:	f000 fbb1 	bl	800bff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b892:	4620      	mov	r0, r4
 800b894:	2100      	movs	r1, #0
 800b896:	f000 fbad 	bl	800bff4 <USBD_LL_StallEP>
}
 800b89a:	2000      	movs	r0, #0
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800b89e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	d04e      	beq.n	800b946 <USBD_StdEPReq+0xd2>
 800b8a8:	2a03      	cmp	r2, #3
 800b8aa:	d1ee      	bne.n	800b88a <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8ac:	886b      	ldrh	r3, [r5, #2]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1f3      	bne.n	800b89a <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800b8b2:	064e      	lsls	r6, r1, #25
 800b8b4:	d172      	bne.n	800b99c <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f000 f8ee 	bl	800ba98 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8bc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	689b      	ldr	r3, [r3, #8]
}
 800b8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8ca:	4718      	bx	r3
      switch (req->bRequest)
 800b8cc:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 800b8ce:	888a      	ldrh	r2, [r1, #4]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800b8d4:	d0e3      	beq.n	800b89e <USBD_StdEPReq+0x2a>
 800b8d6:	2b03      	cmp	r3, #3
 800b8d8:	d024      	beq.n	800b924 <USBD_StdEPReq+0xb0>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1d5      	bne.n	800b88a <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800b8de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	b2d8      	uxtb	r0, r3
 800b8e6:	d037      	beq.n	800b958 <USBD_StdEPReq+0xe4>
 800b8e8:	2803      	cmp	r0, #3
 800b8ea:	d1ce      	bne.n	800b88a <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b8ec:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800b8f0:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b8f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b8f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800b8fa:	d43e      	bmi.n	800b97a <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b8fc:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800b900:	2b00      	cmp	r3, #0
 800b902:	d0c2      	beq.n	800b88a <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b904:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800b908:	2514      	movs	r5, #20
 800b90a:	fb05 4503 	mla	r5, r5, r3, r4
 800b90e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b912:	2b00      	cmp	r3, #0
 800b914:	d13c      	bne.n	800b990 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800b916:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b918:	4629      	mov	r1, r5
 800b91a:	4620      	mov	r0, r4
 800b91c:	2202      	movs	r2, #2
 800b91e:	f000 f88b 	bl	800ba38 <USBD_CtlSendData>
              break;
 800b922:	e7ba      	b.n	800b89a <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800b924:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b928:	2b02      	cmp	r3, #2
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	d00b      	beq.n	800b946 <USBD_StdEPReq+0xd2>
 800b92e:	2a03      	cmp	r2, #3
 800b930:	d1ab      	bne.n	800b88a <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b932:	886b      	ldrh	r3, [r5, #2]
 800b934:	b91b      	cbnz	r3, 800b93e <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b936:	064a      	lsls	r2, r1, #25
 800b938:	d001      	beq.n	800b93e <USBD_StdEPReq+0xca>
 800b93a:	88eb      	ldrh	r3, [r5, #6]
 800b93c:	b39b      	cbz	r3, 800b9a6 <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800b93e:	4620      	mov	r0, r4
 800b940:	f000 f8aa 	bl	800ba98 <USBD_CtlSendStatus>
              break;
 800b944:	e7a9      	b.n	800b89a <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b946:	064b      	lsls	r3, r1, #25
 800b948:	d09f      	beq.n	800b88a <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b94a:	f000 fb53 	bl	800bff4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b94e:	4620      	mov	r0, r4
 800b950:	2180      	movs	r1, #128	; 0x80
 800b952:	f000 fb4f 	bl	800bff4 <USBD_LL_StallEP>
 800b956:	e7a0      	b.n	800b89a <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b958:	0648      	lsls	r0, r1, #25
 800b95a:	d196      	bne.n	800b88a <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b95c:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800b95e:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b962:	4620      	mov	r0, r4
 800b964:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b968:	bf4c      	ite	mi
 800b96a:	f104 0114 	addmi.w	r1, r4, #20
 800b96e:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800b972:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b974:	f000 f860 	bl	800ba38 <USBD_CtlSendData>
              break;
 800b978:	e78f      	b.n	800b89a <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b97a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d084      	beq.n	800b88a <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b980:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800b984:	1c5d      	adds	r5, r3, #1
 800b986:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b98a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b98e:	e7c0      	b.n	800b912 <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b990:	4620      	mov	r0, r4
 800b992:	f000 fb4b 	bl	800c02c <USBD_LL_IsStallEP>
 800b996:	b120      	cbz	r0, 800b9a2 <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 800b998:	2301      	movs	r3, #1
 800b99a:	e7bc      	b.n	800b916 <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b99c:	f000 fb38 	bl	800c010 <USBD_LL_ClearStallEP>
 800b9a0:	e789      	b.n	800b8b6 <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800b9a2:	6028      	str	r0, [r5, #0]
 800b9a4:	e7b8      	b.n	800b918 <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9a6:	f000 fb25 	bl	800bff4 <USBD_LL_StallEP>
 800b9aa:	e7c8      	b.n	800b93e <USBD_StdEPReq+0xca>

0800b9ac <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800b9ac:	780b      	ldrb	r3, [r1, #0]
 800b9ae:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800b9b0:	784b      	ldrb	r3, [r1, #1]
 800b9b2:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b9b4:	78ca      	ldrb	r2, [r1, #3]
 800b9b6:	788b      	ldrb	r3, [r1, #2]
 800b9b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800b9bc:	8043      	strh	r3, [r0, #2]
 800b9be:	794a      	ldrb	r2, [r1, #5]
 800b9c0:	790b      	ldrb	r3, [r1, #4]
 800b9c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800b9c6:	8083      	strh	r3, [r0, #4]
 800b9c8:	79ca      	ldrb	r2, [r1, #7]
 800b9ca:	798b      	ldrb	r3, [r1, #6]
 800b9cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800b9d0:	80c3      	strh	r3, [r0, #6]
}
 800b9d2:	4770      	bx	lr

0800b9d4 <USBD_CtlError>:
{
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9d8:	2180      	movs	r1, #128	; 0x80
 800b9da:	f000 fb0b 	bl	800bff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4620      	mov	r0, r4
}
 800b9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9e6:	f000 bb05 	b.w	800bff4 <USBD_LL_StallEP>
 800b9ea:	bf00      	nop

0800b9ec <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800b9ec:	b308      	cbz	r0, 800ba32 <USBD_GetString+0x46>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800b9ee:	7803      	ldrb	r3, [r0, #0]
{
 800b9f0:	b470      	push	{r4, r5, r6}
  while (*pbuff != (uint8_t)'\0')
 800b9f2:	b1fb      	cbz	r3, 800ba34 <USBD_GetString+0x48>
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 800b9fa:	19a3      	adds	r3, r4, r6
  while (*pbuff != (uint8_t)'\0')
 800b9fc:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2d00      	cmp	r5, #0
 800ba04:	d1f9      	bne.n	800b9fa <USBD_GetString+0xe>
 800ba06:	3301      	adds	r3, #1
 800ba08:	005b      	lsls	r3, r3, #1
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba0a:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba0c:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800ba0e:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba10:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800ba12:	7804      	ldrb	r4, [r0, #0]
 800ba14:	b15c      	cbz	r4, 800ba2e <USBD_GetString+0x42>
  idx++;
 800ba16:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800ba18:	2500      	movs	r5, #0
    idx++;
 800ba1a:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800ba1c:	54cc      	strb	r4, [r1, r3]
    idx++;
 800ba1e:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800ba20:	b2d2      	uxtb	r2, r2
    idx++;
 800ba22:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800ba24:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800ba26:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800ba2a:	2c00      	cmp	r4, #0
 800ba2c:	d1f5      	bne.n	800ba1a <USBD_GetString+0x2e>
}
 800ba2e:	bc70      	pop	{r4, r5, r6}
 800ba30:	4770      	bx	lr
 800ba32:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800ba34:	2302      	movs	r3, #2
 800ba36:	e7e8      	b.n	800ba0a <USBD_GetString+0x1e>

0800ba38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba3c:	2502      	movs	r5, #2
{
 800ba3e:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba40:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba42:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800ba46:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba4a:	f000 fb11 	bl	800c070 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ba4e:	2000      	movs	r0, #0
 800ba50:	bd38      	pop	{r3, r4, r5, pc}
 800ba52:	bf00      	nop

0800ba54 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba54:	b510      	push	{r4, lr}
 800ba56:	460c      	mov	r4, r1
 800ba58:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	4622      	mov	r2, r4
 800ba5e:	f000 fb07 	bl	800c070 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ba62:	2000      	movs	r0, #0
 800ba64:	bd10      	pop	{r4, pc}
 800ba66:	bf00      	nop

0800ba68 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba6c:	2503      	movs	r5, #3
{
 800ba6e:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba70:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba72:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800ba76:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba7a:	f000 fb07 	bl	800c08c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ba7e:	2000      	movs	r0, #0
 800ba80:	bd38      	pop	{r3, r4, r5, pc}
 800ba82:	bf00      	nop

0800ba84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba84:	b510      	push	{r4, lr}
 800ba86:	460c      	mov	r4, r1
 800ba88:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	f000 fafd 	bl	800c08c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ba92:	2000      	movs	r0, #0
 800ba94:	bd10      	pop	{r4, pc}
 800ba96:	bf00      	nop

0800ba98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba98:	b538      	push	{r3, r4, r5, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba9a:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba9c:	2504      	movs	r5, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800baa2:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800baa6:	f000 fae3 	bl	800c070 <USBD_LL_Transmit>

  return USBD_OK;
}
 800baaa:	2000      	movs	r0, #0
 800baac:	bd38      	pop	{r3, r4, r5, pc}
 800baae:	bf00      	nop

0800bab0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bab0:	b538      	push	{r3, r4, r5, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bab2:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bab4:	2505      	movs	r5, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bab6:	461a      	mov	r2, r3
 800bab8:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800baba:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800babe:	f000 fae5 	bl	800c08c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800bac2:	2000      	movs	r0, #0
 800bac4:	bd38      	pop	{r3, r4, r5, pc}
 800bac6:	bf00      	nop

0800bac8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800baca:	2200      	movs	r2, #0
 800bacc:	4919      	ldr	r1, [pc, #100]	; (800bb34 <MX_USB_DEVICE_Init+0x6c>)
 800bace:	481a      	ldr	r0, [pc, #104]	; (800bb38 <MX_USB_DEVICE_Init+0x70>)
 800bad0:	f7ff fb6c 	bl	800b1ac <USBD_Init>
 800bad4:	b988      	cbnz	r0, 800bafa <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bad6:	4919      	ldr	r1, [pc, #100]	; (800bb3c <MX_USB_DEVICE_Init+0x74>)
 800bad8:	4817      	ldr	r0, [pc, #92]	; (800bb38 <MX_USB_DEVICE_Init+0x70>)
 800bada:	f7ff fb7b 	bl	800b1d4 <USBD_RegisterClass>
 800bade:	b9a0      	cbnz	r0, 800bb0a <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bae0:	4917      	ldr	r1, [pc, #92]	; (800bb40 <MX_USB_DEVICE_Init+0x78>)
 800bae2:	4815      	ldr	r0, [pc, #84]	; (800bb38 <MX_USB_DEVICE_Init+0x70>)
 800bae4:	f7ff fb12 	bl	800b10c <USBD_CDC_RegisterInterface>
 800bae8:	b9b8      	cbnz	r0, 800bb1a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800baea:	4813      	ldr	r0, [pc, #76]	; (800bb38 <MX_USB_DEVICE_Init+0x70>)
 800baec:	f7ff fb8c 	bl	800b208 <USBD_Start>
 800baf0:	b9d0      	cbnz	r0, 800bb28 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800baf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800baf6:	f7fb bb99 	b.w	800722c <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800bafa:	f7f6 fd2f 	bl	800255c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bafe:	490f      	ldr	r1, [pc, #60]	; (800bb3c <MX_USB_DEVICE_Init+0x74>)
 800bb00:	480d      	ldr	r0, [pc, #52]	; (800bb38 <MX_USB_DEVICE_Init+0x70>)
 800bb02:	f7ff fb67 	bl	800b1d4 <USBD_RegisterClass>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d0ea      	beq.n	800bae0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800bb0a:	f7f6 fd27 	bl	800255c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb0e:	490c      	ldr	r1, [pc, #48]	; (800bb40 <MX_USB_DEVICE_Init+0x78>)
 800bb10:	4809      	ldr	r0, [pc, #36]	; (800bb38 <MX_USB_DEVICE_Init+0x70>)
 800bb12:	f7ff fafb 	bl	800b10c <USBD_CDC_RegisterInterface>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d0e7      	beq.n	800baea <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800bb1a:	f7f6 fd1f 	bl	800255c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb1e:	4806      	ldr	r0, [pc, #24]	; (800bb38 <MX_USB_DEVICE_Init+0x70>)
 800bb20:	f7ff fb72 	bl	800b208 <USBD_Start>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d0e4      	beq.n	800baf2 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800bb28:	f7f6 fd18 	bl	800255c <Error_Handler>
}
 800bb2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800bb30:	f7fb bb7c 	b.w	800722c <HAL_PWREx_EnableUSBVoltageDetector>
 800bb34:	24000330 	.word	0x24000330
 800bb38:	2400da04 	.word	0x2400da04
 800bb3c:	24000204 	.word	0x24000204
 800bb40:	24000314 	.word	0x24000314

0800bb44 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800bb44:	2000      	movs	r0, #0
 800bb46:	4770      	bx	lr

0800bb48 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800bb48:	2000      	movs	r0, #0
 800bb4a:	4770      	bx	lr

0800bb4c <CDC_Receive_FS>:
{
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb50:	4e08      	ldr	r6, [pc, #32]	; (800bb74 <CDC_Receive_FS+0x28>)
{
 800bb52:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb54:	4630      	mov	r0, r6
 800bb56:	4621      	mov	r1, r4
 800bb58:	f7ff faec 	bl	800b134 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f7ff fb0b 	bl	800b178 <USBD_CDC_ReceivePacket>
 800bb62:	682a      	ldr	r2, [r5, #0]
 800bb64:	4b04      	ldr	r3, [pc, #16]	; (800bb78 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800bb66:	4621      	mov	r1, r4
 800bb68:	4804      	ldr	r0, [pc, #16]	; (800bb7c <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800bb6a:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800bb6c:	f001 fbdc 	bl	800d328 <memcpy>
}
 800bb70:	2000      	movs	r0, #0
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	2400da04 	.word	0x2400da04
 800bb78:	240078c0 	.word	0x240078c0
 800bb7c:	240046b4 	.word	0x240046b4

0800bb80 <CDC_Init_FS>:
{
 800bb80:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb82:	4c06      	ldr	r4, [pc, #24]	; (800bb9c <CDC_Init_FS+0x1c>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	4906      	ldr	r1, [pc, #24]	; (800bba0 <CDC_Init_FS+0x20>)
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f7ff fac7 	bl	800b11c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb8e:	4620      	mov	r0, r4
 800bb90:	4904      	ldr	r1, [pc, #16]	; (800bba4 <CDC_Init_FS+0x24>)
 800bb92:	f7ff facf 	bl	800b134 <USBD_CDC_SetRxBuffer>
}
 800bb96:	2000      	movs	r0, #0
 800bb98:	bd10      	pop	{r4, pc}
 800bb9a:	bf00      	nop
 800bb9c:	2400da04 	.word	0x2400da04
 800bba0:	2400e4d4 	.word	0x2400e4d4
 800bba4:	2400dcd4 	.word	0x2400dcd4

0800bba8 <CDC_Control_FS>:
  switch(cmd)
 800bba8:	2820      	cmp	r0, #32
 800bbaa:	d00a      	beq.n	800bbc2 <CDC_Control_FS+0x1a>
 800bbac:	2821      	cmp	r0, #33	; 0x21
 800bbae:	d106      	bne.n	800bbbe <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	; (800bbdc <CDC_Control_FS+0x34>)
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	889a      	ldrh	r2, [r3, #4]
 800bbb6:	799b      	ldrb	r3, [r3, #6]
 800bbb8:	6008      	str	r0, [r1, #0]
 800bbba:	808a      	strh	r2, [r1, #4]
 800bbbc:	718b      	strb	r3, [r1, #6]
}
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	4770      	bx	lr
{
 800bbc2:	b410      	push	{r4}
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800bbc4:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <CDC_Control_FS+0x34>)
 800bbc6:	6808      	ldr	r0, [r1, #0]
 800bbc8:	888c      	ldrh	r4, [r1, #4]
 800bbca:	798a      	ldrb	r2, [r1, #6]
 800bbcc:	6018      	str	r0, [r3, #0]
}
 800bbce:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800bbd0:	809c      	strh	r4, [r3, #4]
 800bbd2:	719a      	strb	r2, [r3, #6]
}
 800bbd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	24000328 	.word	0x24000328

0800bbe0 <CDC_Transmit_FS>:
{
 800bbe0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bbe2:	4c09      	ldr	r4, [pc, #36]	; (800bc08 <CDC_Transmit_FS+0x28>)
 800bbe4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800bbe8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bbec:	b10b      	cbz	r3, 800bbf2 <CDC_Transmit_FS+0x12>
}
 800bbee:	2001      	movs	r0, #1
 800bbf0:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bbf2:	460a      	mov	r2, r1
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f7ff fa90 	bl	800b11c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bbfc:	4620      	mov	r0, r4
}
 800bbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc02:	f7ff baa1 	b.w	800b148 <USBD_CDC_TransmitPacket>
 800bc06:	bf00      	nop
 800bc08:	2400da04 	.word	0x2400da04

0800bc0c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc0c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800bc0e:	4801      	ldr	r0, [pc, #4]	; (800bc14 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc10:	800b      	strh	r3, [r1, #0]
}
 800bc12:	4770      	bx	lr
 800bc14:	2400034c 	.word	0x2400034c

0800bc18 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc18:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800bc1a:	4801      	ldr	r0, [pc, #4]	; (800bc20 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800bc1c:	800b      	strh	r3, [r1, #0]
}
 800bc1e:	4770      	bx	lr
 800bc20:	24000360 	.word	0x24000360

0800bc24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc24:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc26:	4c04      	ldr	r4, [pc, #16]	; (800bc38 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800bc28:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc2a:	4804      	ldr	r0, [pc, #16]	; (800bc3c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	f7ff fedd 	bl	800b9ec <USBD_GetString>
  return USBD_StrDesc;
}
 800bc32:	4620      	mov	r0, r4
 800bc34:	bd10      	pop	{r4, pc}
 800bc36:	bf00      	nop
 800bc38:	2400ecd4 	.word	0x2400ecd4
 800bc3c:	080173c0 	.word	0x080173c0

0800bc40 <USBD_FS_ProductStrDescriptor>:
{
 800bc40:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc42:	4c04      	ldr	r4, [pc, #16]	; (800bc54 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800bc44:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc46:	4804      	ldr	r0, [pc, #16]	; (800bc58 <USBD_FS_ProductStrDescriptor+0x18>)
 800bc48:	4621      	mov	r1, r4
 800bc4a:	f7ff fecf 	bl	800b9ec <USBD_GetString>
}
 800bc4e:	4620      	mov	r0, r4
 800bc50:	bd10      	pop	{r4, pc}
 800bc52:	bf00      	nop
 800bc54:	2400ecd4 	.word	0x2400ecd4
 800bc58:	080173d4 	.word	0x080173d4

0800bc5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc5c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc5e:	4c04      	ldr	r4, [pc, #16]	; (800bc70 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800bc60:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc62:	4804      	ldr	r0, [pc, #16]	; (800bc74 <USBD_FS_ConfigStrDescriptor+0x18>)
 800bc64:	4621      	mov	r1, r4
 800bc66:	f7ff fec1 	bl	800b9ec <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	bd10      	pop	{r4, pc}
 800bc6e:	bf00      	nop
 800bc70:	2400ecd4 	.word	0x2400ecd4
 800bc74:	080173ec 	.word	0x080173ec

0800bc78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc78:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc7a:	4c04      	ldr	r4, [pc, #16]	; (800bc8c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800bc7c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc7e:	4804      	ldr	r0, [pc, #16]	; (800bc90 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800bc80:	4621      	mov	r1, r4
 800bc82:	f7ff feb3 	bl	800b9ec <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800bc86:	4620      	mov	r0, r4
 800bc88:	bd10      	pop	{r4, pc}
 800bc8a:	bf00      	nop
 800bc8c:	2400ecd4 	.word	0x2400ecd4
 800bc90:	080173f8 	.word	0x080173f8

0800bc94 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc94:	4a42      	ldr	r2, [pc, #264]	; (800bda0 <USBD_FS_SerialStrDescriptor+0x10c>)
  *length = USB_SIZ_STRING_SERIAL;
 800bc96:	201a      	movs	r0, #26
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc98:	4b42      	ldr	r3, [pc, #264]	; (800bda4 <USBD_FS_SerialStrDescriptor+0x110>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc9a:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 800bc9c:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800bc9e:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 800bca0:	18d3      	adds	r3, r2, r3
 800bca2:	d101      	bne.n	800bca8 <USBD_FS_SerialStrDescriptor+0x14>
}
 800bca4:	4840      	ldr	r0, [pc, #256]	; (800bda8 <USBD_FS_SerialStrDescriptor+0x114>)
 800bca6:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800bca8:	0f1a      	lsrs	r2, r3, #28
 800bcaa:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bcae:	493f      	ldr	r1, [pc, #252]	; (800bdac <USBD_FS_SerialStrDescriptor+0x118>)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcb0:	bf2c      	ite	cs
 800bcb2:	f102 0037 	addcs.w	r0, r2, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcb6:	f102 0030 	addcc.w	r0, r2, #48	; 0x30
 800bcba:	4a3b      	ldr	r2, [pc, #236]	; (800bda8 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bcbc:	6809      	ldr	r1, [r1, #0]
{
 800bcbe:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcc0:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800bcc2:	f3c3 6003 	ubfx	r0, r3, #24, #4
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800bcc6:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800bcc8:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800bcca:	70d4      	strb	r4, [r2, #3]
 800bccc:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcd0:	bf8c      	ite	hi
 800bcd2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcd4:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800bcd6:	7154      	strb	r4, [r2, #5]
 800bcd8:	2400      	movs	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcda:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800bcdc:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800bce0:	71d4      	strb	r4, [r2, #7]
 800bce2:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800bce4:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800bce6:	7254      	strb	r4, [r2, #9]
 800bce8:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcec:	bf8c      	ite	hi
 800bcee:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcf0:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800bcf2:	72d4      	strb	r4, [r2, #11]
 800bcf4:	2400      	movs	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcf6:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800bcf8:	f3c3 4003 	ubfx	r0, r3, #16, #4
    pbuf[2 * idx + 1] = 0;
 800bcfc:	7354      	strb	r4, [r2, #13]
    if (((value >> 28)) < 0xA)
 800bcfe:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd00:	bf8c      	ite	hi
 800bd02:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd04:	3030      	addls	r0, #48	; 0x30
 800bd06:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800bd08:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800bd0c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd0e:	bf8c      	ite	hi
 800bd10:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd12:	3030      	addls	r0, #48	; 0x30
 800bd14:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800bd16:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800bd1a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd1c:	bf8c      	ite	hi
 800bd1e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd20:	3030      	addls	r0, #48	; 0x30
 800bd22:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800bd24:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800bd28:	f003 030f 	and.w	r3, r3, #15
 800bd2c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd2e:	bf8c      	ite	hi
 800bd30:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd32:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800bd34:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd36:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800bd38:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd3c:	bf94      	ite	ls
 800bd3e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd40:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800bd42:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800bd46:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd48:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800bd4a:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800bd4e:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd52:	bf2c      	ite	cs
 800bd54:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd56:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800bd58:	7450      	strb	r0, [r2, #17]
 800bd5a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd5c:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800bd5e:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800bd62:	74d0      	strb	r0, [r2, #19]
 800bd64:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800bd66:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800bd68:	7550      	strb	r0, [r2, #21]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd6a:	bf8c      	ite	hi
 800bd6c:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd6e:	3330      	addls	r3, #48	; 0x30
}
 800bd70:	480d      	ldr	r0, [pc, #52]	; (800bda8 <USBD_FS_SerialStrDescriptor+0x114>)
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd72:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800bd74:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800bd78:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd7a:	bf8c      	ite	hi
 800bd7c:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd7e:	3330      	addls	r3, #48	; 0x30
 800bd80:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800bd82:	f3c1 4303 	ubfx	r3, r1, #16, #4
    pbuf[2 * idx + 1] = 0;
 800bd86:	2100      	movs	r1, #0
    if (((value >> 28)) < 0xA)
 800bd88:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800bd8a:	75d1      	strb	r1, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd8c:	bf94      	ite	ls
 800bd8e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd90:	3337      	addhi	r3, #55	; 0x37
 800bd92:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	7653      	strb	r3, [r2, #25]
}
 800bd98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	1ff1e800 	.word	0x1ff1e800
 800bda4:	1ff1e808 	.word	0x1ff1e808
 800bda8:	24000364 	.word	0x24000364
 800bdac:	1ff1e804 	.word	0x1ff1e804

0800bdb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bdb0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 800bdb4:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdb6:	2100      	movs	r1, #0
{
 800bdb8:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bdba:	22bc      	movs	r2, #188	; 0xbc
 800bdbc:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdbe:	9106      	str	r1, [sp, #24]
 800bdc0:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800bdc4:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bdc8:	f001 fabc 	bl	800d344 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bdcc:	6822      	ldr	r2, [r4, #0]
 800bdce:	4b25      	ldr	r3, [pc, #148]	; (800be64 <HAL_PCD_MspInit+0xb4>)
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d002      	beq.n	800bdda <HAL_PCD_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bdd4:	b036      	add	sp, #216	; 0xd8
 800bdd6:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bdda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bdde:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bde2:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bde4:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bde6:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bde8:	f7fc f990 	bl	800810c <HAL_RCCEx_PeriphCLKConfig>
 800bdec:	bbb0      	cbnz	r0, 800be5c <HAL_PCD_MspInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdee:	4c1e      	ldr	r4, [pc, #120]	; (800be68 <HAL_PCD_MspInit+0xb8>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800bdf0:	f7fb fa1c 	bl	800722c <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bdf4:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bdf8:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdfa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bdfe:	2702      	movs	r7, #2
 800be00:	f04f 0800 	mov.w	r8, #0
 800be04:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be08:	f043 0301 	orr.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be0c:	a902      	add	r1, sp, #8
 800be0e:	4817      	ldr	r0, [pc, #92]	; (800be6c <HAL_PCD_MspInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be10:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800be14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800be18:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800be22:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800be26:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be2a:	f7fa fab7 	bl	800639c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be2e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800be32:	2200      	movs	r2, #0
 800be34:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800be3a:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be3c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800be40:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800be44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be48:	9301      	str	r3, [sp, #4]
 800be4a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800be4c:	f7f8 fd86 	bl	800495c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800be50:	2065      	movs	r0, #101	; 0x65
 800be52:	f7f8 fdbd 	bl	80049d0 <HAL_NVIC_EnableIRQ>
}
 800be56:	b036      	add	sp, #216	; 0xd8
 800be58:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
      Error_Handler();
 800be5c:	f7f6 fb7e 	bl	800255c <Error_Handler>
 800be60:	e7c5      	b.n	800bdee <HAL_PCD_MspInit+0x3e>
 800be62:	bf00      	nop
 800be64:	40080000 	.word	0x40080000
 800be68:	58024400 	.word	0x58024400
 800be6c:	58020000 	.word	0x58020000

0800be70 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be70:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800be74:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800be78:	f7ff b9d8 	b.w	800b22c <USBD_LL_SetupStage>

0800be7c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be7c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800be80:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800be84:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800be88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800be8c:	f7ff b9fe 	b.w	800b28c <USBD_LL_DataOutStage>

0800be90 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be90:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800be94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800be98:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800be9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be9e:	f7ff ba29 	b.w	800b2f4 <USBD_LL_DataInStage>
 800bea2:	bf00      	nop

0800bea4 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bea4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800bea8:	f7ff bac2 	b.w	800b430 <USBD_LL_SOF>

0800beac <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800beac:	68c1      	ldr	r1, [r0, #12]
{
 800beae:	b510      	push	{r4, lr}
 800beb0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800beb2:	b111      	cbz	r1, 800beba <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800beb4:	2902      	cmp	r1, #2
 800beb6:	d10a      	bne.n	800bece <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800beb8:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800beba:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800bebe:	f7ff fa9b 	bl	800b3f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bec2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800bec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800beca:	f7ff ba69 	b.w	800b3a0 <USBD_LL_Reset>
    Error_Handler();
 800bece:	f7f6 fb45 	bl	800255c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bed2:	2101      	movs	r1, #1
 800bed4:	e7f1      	b.n	800beba <HAL_PCD_ResetCallback+0xe>
 800bed6:	bf00      	nop

0800bed8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed8:	b510      	push	{r4, lr}
 800beda:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bedc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800bee0:	f7ff fa8e 	bl	800b400 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bee4:	6822      	ldr	r2, [r4, #0]
 800bee6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800beea:	f043 0301 	orr.w	r3, r3, #1
 800beee:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bef2:	6a23      	ldr	r3, [r4, #32]
 800bef4:	b123      	cbz	r3, 800bf00 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bef6:	4a03      	ldr	r2, [pc, #12]	; (800bf04 <HAL_PCD_SuspendCallback+0x2c>)
 800bef8:	6913      	ldr	r3, [r2, #16]
 800befa:	f043 0306 	orr.w	r3, r3, #6
 800befe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf00:	bd10      	pop	{r4, pc}
 800bf02:	bf00      	nop
 800bf04:	e000ed00 	.word	0xe000ed00

0800bf08 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf08:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800bf0c:	f7ff ba84 	b.w	800b418 <USBD_LL_Resume>

0800bf10 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf10:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800bf14:	f7ff bab4 	b.w	800b480 <USBD_LL_IsoOUTIncomplete>

0800bf18 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf18:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800bf1c:	f7ff ba9c 	b.w	800b458 <USBD_LL_IsoINIncomplete>

0800bf20 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf20:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800bf24:	f7ff bac0 	b.w	800b4a8 <USBD_LL_DevConnected>

0800bf28 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf28:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800bf2c:	f7ff babe 	b.w	800b4ac <USBD_LL_DevDisconnected>

0800bf30 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bf30:	7802      	ldrb	r2, [r0, #0]
 800bf32:	b10a      	cbz	r2, 800bf38 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800bf34:	2000      	movs	r0, #0
 800bf36:	4770      	bx	lr
{
 800bf38:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800bf3a:	4b15      	ldr	r3, [pc, #84]	; (800bf90 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bf3c:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800bf3e:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bf40:	4d14      	ldr	r5, [pc, #80]	; (800bf94 <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_FS.pData = pdev;
 800bf42:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bf46:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bf4a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bf4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bf4e:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf50:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bf52:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bf56:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bf5a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800bf5e:	e9c3 5400 	strd	r5, r4, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bf62:	f7fa fbc1 	bl	80066e8 <HAL_PCD_Init>
 800bf66:	b978      	cbnz	r0, 800bf88 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bf68:	2180      	movs	r1, #128	; 0x80
 800bf6a:	4809      	ldr	r0, [pc, #36]	; (800bf90 <USBD_LL_Init+0x60>)
 800bf6c:	f7fb f91a 	bl	80071a4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bf70:	2240      	movs	r2, #64	; 0x40
 800bf72:	2100      	movs	r1, #0
 800bf74:	4806      	ldr	r0, [pc, #24]	; (800bf90 <USBD_LL_Init+0x60>)
 800bf76:	f7fb f8f1 	bl	800715c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bf7a:	2280      	movs	r2, #128	; 0x80
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	4804      	ldr	r0, [pc, #16]	; (800bf90 <USBD_LL_Init+0x60>)
 800bf80:	f7fb f8ec 	bl	800715c <HAL_PCDEx_SetTxFiFo>
}
 800bf84:	2000      	movs	r0, #0
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 800bf88:	f7f6 fae8 	bl	800255c <Error_Handler>
 800bf8c:	e7ec      	b.n	800bf68 <USBD_LL_Init+0x38>
 800bf8e:	bf00      	nop
 800bf90:	2400eed4 	.word	0x2400eed4
 800bf94:	40080000 	.word	0x40080000

0800bf98 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf98:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800bf9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800bf9e:	f7fa fc39 	bl	8006814 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800bfa2:	2803      	cmp	r0, #3
 800bfa4:	d802      	bhi.n	800bfac <USBD_LL_Start+0x14>
 800bfa6:	4b02      	ldr	r3, [pc, #8]	; (800bfb0 <USBD_LL_Start+0x18>)
 800bfa8:	5c18      	ldrb	r0, [r3, r0]
}
 800bfaa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800bfac:	2003      	movs	r0, #3
}
 800bfae:	bd08      	pop	{r3, pc}
 800bfb0:	08017408 	.word	0x08017408

0800bfb4 <USBD_LL_OpenEP>:
{
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfb8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800bfbc:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfbe:	4623      	mov	r3, r4
 800bfc0:	f7fa ff88 	bl	8006ed4 <HAL_PCD_EP_Open>
  switch (hal_status)
 800bfc4:	2803      	cmp	r0, #3
 800bfc6:	d802      	bhi.n	800bfce <USBD_LL_OpenEP+0x1a>
 800bfc8:	4b02      	ldr	r3, [pc, #8]	; (800bfd4 <USBD_LL_OpenEP+0x20>)
 800bfca:	5c18      	ldrb	r0, [r3, r0]
}
 800bfcc:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfce:	2003      	movs	r0, #3
}
 800bfd0:	bd10      	pop	{r4, pc}
 800bfd2:	bf00      	nop
 800bfd4:	08017408 	.word	0x08017408

0800bfd8 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfd8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800bfdc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfde:	f7fa ffb3 	bl	8006f48 <HAL_PCD_EP_Close>
  switch (hal_status)
 800bfe2:	2803      	cmp	r0, #3
 800bfe4:	d802      	bhi.n	800bfec <USBD_LL_CloseEP+0x14>
 800bfe6:	4b02      	ldr	r3, [pc, #8]	; (800bff0 <USBD_LL_CloseEP+0x18>)
 800bfe8:	5c18      	ldrb	r0, [r3, r0]
}
 800bfea:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfec:	2003      	movs	r0, #3
}
 800bfee:	bd08      	pop	{r3, pc}
 800bff0:	08017408 	.word	0x08017408

0800bff4 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bff4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800bff8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bffa:	f7fb f82f 	bl	800705c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800bffe:	2803      	cmp	r0, #3
 800c000:	d802      	bhi.n	800c008 <USBD_LL_StallEP+0x14>
 800c002:	4b02      	ldr	r3, [pc, #8]	; (800c00c <USBD_LL_StallEP+0x18>)
 800c004:	5c18      	ldrb	r0, [r3, r0]
}
 800c006:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c008:	2003      	movs	r0, #3
}
 800c00a:	bd08      	pop	{r3, pc}
 800c00c:	08017408 	.word	0x08017408

0800c010 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c010:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800c014:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c016:	f7fb f865 	bl	80070e4 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800c01a:	2803      	cmp	r0, #3
 800c01c:	d802      	bhi.n	800c024 <USBD_LL_ClearStallEP+0x14>
 800c01e:	4b02      	ldr	r3, [pc, #8]	; (800c028 <USBD_LL_ClearStallEP+0x18>)
 800c020:	5c18      	ldrb	r0, [r3, r0]
}
 800c022:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c024:	2003      	movs	r0, #3
}
 800c026:	bd08      	pop	{r3, pc}
 800c028:	08017408 	.word	0x08017408

0800c02c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800c02c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c02e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800c032:	d406      	bmi.n	800c042 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c034:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c038:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c03c:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800c040:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c042:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800c046:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c04a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c04e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800c052:	4770      	bx	lr

0800c054 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c054:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800c058:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c05a:	f7fa ff27 	bl	8006eac <HAL_PCD_SetAddress>
  switch (hal_status)
 800c05e:	2803      	cmp	r0, #3
 800c060:	d802      	bhi.n	800c068 <USBD_LL_SetUSBAddress+0x14>
 800c062:	4b02      	ldr	r3, [pc, #8]	; (800c06c <USBD_LL_SetUSBAddress+0x18>)
 800c064:	5c18      	ldrb	r0, [r3, r0]
}
 800c066:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c068:	2003      	movs	r0, #3
}
 800c06a:	bd08      	pop	{r3, pc}
 800c06c:	08017408 	.word	0x08017408

0800c070 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c070:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800c074:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c076:	f7fa ffcd 	bl	8007014 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800c07a:	2803      	cmp	r0, #3
 800c07c:	d802      	bhi.n	800c084 <USBD_LL_Transmit+0x14>
 800c07e:	4b02      	ldr	r3, [pc, #8]	; (800c088 <USBD_LL_Transmit+0x18>)
 800c080:	5c18      	ldrb	r0, [r3, r0]
}
 800c082:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c084:	2003      	movs	r0, #3
}
 800c086:	bd08      	pop	{r3, pc}
 800c088:	08017408 	.word	0x08017408

0800c08c <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c08c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800c090:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c092:	f7fa ff8d 	bl	8006fb0 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800c096:	2803      	cmp	r0, #3
 800c098:	d802      	bhi.n	800c0a0 <USBD_LL_PrepareReceive+0x14>
 800c09a:	4b02      	ldr	r3, [pc, #8]	; (800c0a4 <USBD_LL_PrepareReceive+0x18>)
 800c09c:	5c18      	ldrb	r0, [r3, r0]
}
 800c09e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0a0:	2003      	movs	r0, #3
}
 800c0a2:	bd08      	pop	{r3, pc}
 800c0a4:	08017408 	.word	0x08017408

0800c0a8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0a8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800c0ac:	f7fa bfa8 	b.w	8007000 <HAL_PCD_EP_GetRxCount>

0800c0b0 <USBD_static_malloc>:
}
 800c0b0:	4800      	ldr	r0, [pc, #0]	; (800c0b4 <USBD_static_malloc+0x4>)
 800c0b2:	4770      	bx	lr
 800c0b4:	24000678 	.word	0x24000678

0800c0b8 <USBD_static_free>:
}
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop

0800c0bc <arm_cfft_radix8by2_f32>:
 800c0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c0:	4607      	mov	r7, r0
 800c0c2:	4608      	mov	r0, r1
 800c0c4:	ed2d 8b06 	vpush	{d8-d10}
 800c0c8:	f8b7 e000 	ldrh.w	lr, [r7]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800c0d2:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800c0d6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800c0da:	f000 80b0 	beq.w	800c23e <arm_cfft_radix8by2_f32+0x182>
 800c0de:	008b      	lsls	r3, r1, #2
 800c0e0:	3210      	adds	r2, #16
 800c0e2:	f100 0610 	add.w	r6, r0, #16
 800c0e6:	f108 0510 	add.w	r5, r8, #16
 800c0ea:	3310      	adds	r3, #16
 800c0ec:	18c4      	adds	r4, r0, r3
 800c0ee:	4443      	add	r3, r8
 800c0f0:	ed55 6a04 	vldr	s13, [r5, #-16]
 800c0f4:	f1be 0e01 	subs.w	lr, lr, #1
 800c0f8:	ed56 4a04 	vldr	s9, [r6, #-16]
 800c0fc:	f104 0410 	add.w	r4, r4, #16
 800c100:	ed15 7a03 	vldr	s14, [r5, #-12]
 800c104:	f106 0610 	add.w	r6, r6, #16
 800c108:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800c10c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800c110:	ed55 2a01 	vldr	s5, [r5, #-4]
 800c114:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c118:	ed53 0a04 	vldr	s1, [r3, #-16]
 800c11c:	f102 0210 	add.w	r2, r2, #16
 800c120:	ed13 5a03 	vldr	s10, [r3, #-12]
 800c124:	f105 0510 	add.w	r5, r5, #16
 800c128:	ed13 3a02 	vldr	s6, [r3, #-8]
 800c12c:	f103 0310 	add.w	r3, r3, #16
 800c130:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800c134:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800c138:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800c13c:	ee33 8a83 	vadd.f32	s16, s7, s6
 800c140:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800c144:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800c148:	ee34 0a06 	vadd.f32	s0, s8, s12
 800c14c:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800c150:	ee76 aa87 	vadd.f32	s21, s13, s14
 800c154:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800c158:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c15c:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800c160:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800c164:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800c168:	ee71 8a05 	vadd.f32	s17, s2, s10
 800c16c:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800c170:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800c174:	ee72 9a22 	vadd.f32	s19, s4, s5
 800c178:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c17c:	ee35 5a41 	vsub.f32	s10, s10, s2
 800c180:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800c184:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800c188:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c18c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800c190:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800c194:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800c198:	ee72 7a62 	vsub.f32	s15, s4, s5
 800c19c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800c1a0:	ee73 2a63 	vsub.f32	s5, s6, s7
 800c1a4:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800c1a8:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800c1ac:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800c1b0:	ee24 3a84 	vmul.f32	s6, s9, s8
 800c1b4:	ee27 2a26 	vmul.f32	s4, s14, s13
 800c1b8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800c1bc:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800c1c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c1c4:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c1c8:	ee65 6a26 	vmul.f32	s13, s10, s13
 800c1cc:	ee25 5a04 	vmul.f32	s10, s10, s8
 800c1d0:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c1d4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c1d8:	ee33 4a02 	vadd.f32	s8, s6, s4
 800c1dc:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800c1e0:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800c1e4:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800c1e8:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800c1ec:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800c1f0:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800c1f4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c1f8:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800c1fc:	ee27 4a87 	vmul.f32	s8, s15, s14
 800c200:	ee61 5a87 	vmul.f32	s11, s3, s14
 800c204:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c208:	ee22 5a87 	vmul.f32	s10, s5, s14
 800c20c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c210:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c214:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800c218:	ee74 4a84 	vadd.f32	s9, s9, s8
 800c21c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c220:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c224:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c228:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800c22c:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800c230:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800c234:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800c238:	f47f af5a 	bne.w	800c0f0 <arm_cfft_radix8by2_f32+0x34>
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	b28c      	uxth	r4, r1
 800c240:	2302      	movs	r3, #2
 800c242:	4621      	mov	r1, r4
 800c244:	f000 fd54 	bl	800ccf0 <arm_radix8_butterfly_f32>
 800c248:	4621      	mov	r1, r4
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	4640      	mov	r0, r8
 800c24e:	2302      	movs	r3, #2
 800c250:	ecbd 8b06 	vpop	{d8-d10}
 800c254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c258:	f000 bd4a 	b.w	800ccf0 <arm_radix8_butterfly_f32>

0800c25c <arm_cfft_radix8by4_f32>:
 800c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	ed2d 8b06 	vpush	{d8-d10}
 800c264:	8804      	ldrh	r4, [r0, #0]
 800c266:	b08f      	sub	sp, #60	; 0x3c
 800c268:	ed91 6a00 	vldr	s12, [r1]
 800c26c:	460a      	mov	r2, r1
 800c26e:	0864      	lsrs	r4, r4, #1
 800c270:	ed91 7a01 	vldr	s14, [r1, #4]
 800c274:	9101      	str	r1, [sp, #4]
 800c276:	00a3      	lsls	r3, r4, #2
 800c278:	6841      	ldr	r1, [r0, #4]
 800c27a:	0864      	lsrs	r4, r4, #1
 800c27c:	900c      	str	r0, [sp, #48]	; 0x30
 800c27e:	9205      	str	r2, [sp, #20]
 800c280:	f101 0610 	add.w	r6, r1, #16
 800c284:	4625      	mov	r5, r4
 800c286:	940b      	str	r4, [sp, #44]	; 0x2c
 800c288:	f101 0408 	add.w	r4, r1, #8
 800c28c:	9602      	str	r6, [sp, #8]
 800c28e:	9407      	str	r4, [sp, #28]
 800c290:	18d4      	adds	r4, r2, r3
 800c292:	1eaa      	subs	r2, r5, #2
 800c294:	f101 0518 	add.w	r5, r1, #24
 800c298:	18e0      	adds	r0, r4, r3
 800c29a:	edd4 4a00 	vldr	s9, [r4]
 800c29e:	ed94 4a01 	vldr	s8, [r4, #4]
 800c2a2:	46a6      	mov	lr, r4
 800c2a4:	edd0 6a00 	vldr	s13, [r0]
 800c2a8:	18c7      	adds	r7, r0, r3
 800c2aa:	edd0 7a01 	vldr	s15, [r0, #4]
 800c2ae:	46a0      	mov	r8, r4
 800c2b0:	ee76 5a26 	vadd.f32	s11, s12, s13
 800c2b4:	ed97 5a00 	vldr	s10, [r7]
 800c2b8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c2bc:	4604      	mov	r4, r0
 800c2be:	9506      	str	r5, [sp, #24]
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800c2c6:	900a      	str	r0, [sp, #40]	; 0x28
 800c2c8:	9801      	ldr	r0, [sp, #4]
 800c2ca:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c2ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2d2:	ed97 3a01 	vldr	s6, [r7, #4]
 800c2d6:	ee72 2a85 	vadd.f32	s5, s5, s10
 800c2da:	46bc      	mov	ip, r7
 800c2dc:	ee76 3a84 	vadd.f32	s7, s13, s8
 800c2e0:	9704      	str	r7, [sp, #16]
 800c2e2:	ee36 7a44 	vsub.f32	s14, s12, s8
 800c2e6:	f8cd e00c 	str.w	lr, [sp, #12]
 800c2ea:	ee12 9a90 	vmov	r9, s5
 800c2ee:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800c2f2:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c2f6:	1f3e      	subs	r6, r7, #4
 800c2f8:	f840 9b08 	str.w	r9, [r0], #8
 800c2fc:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800c300:	edde 2a01 	vldr	s5, [lr, #4]
 800c304:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c308:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c30c:	eddc 4a01 	vldr	s9, [ip, #4]
 800c310:	ee36 6a22 	vadd.f32	s12, s12, s5
 800c314:	9001      	str	r0, [sp, #4]
 800c316:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c31a:	9805      	ldr	r0, [sp, #20]
 800c31c:	ee13 9a90 	vmov	r9, s7
 800c320:	ee37 7a43 	vsub.f32	s14, s14, s6
 800c324:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c328:	f1ae 0704 	sub.w	r7, lr, #4
 800c32c:	ee74 4a05 	vadd.f32	s9, s8, s10
 800c330:	ee76 6a83 	vadd.f32	s13, s13, s6
 800c334:	ed80 6a01 	vstr	s12, [r0, #4]
 800c338:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c33c:	f848 9b08 	str.w	r9, [r8], #8
 800c340:	edce 4a01 	vstr	s9, [lr, #4]
 800c344:	ee15 ea90 	vmov	lr, s11
 800c348:	f844 eb08 	str.w	lr, [r4], #8
 800c34c:	ee16 ea90 	vmov	lr, s13
 800c350:	9408      	str	r4, [sp, #32]
 800c352:	462c      	mov	r4, r5
 800c354:	ed85 7a01 	vstr	s14, [r5, #4]
 800c358:	9d04      	ldr	r5, [sp, #16]
 800c35a:	f84c eb08 	str.w	lr, [ip], #8
 800c35e:	edc5 7a01 	vstr	s15, [r5, #4]
 800c362:	0855      	lsrs	r5, r2, #1
 800c364:	9509      	str	r5, [sp, #36]	; 0x24
 800c366:	f000 8130 	beq.w	800c5ca <arm_cfft_radix8by4_f32+0x36e>
 800c36a:	9805      	ldr	r0, [sp, #20]
 800c36c:	3b08      	subs	r3, #8
 800c36e:	46ab      	mov	fp, r5
 800c370:	f1a4 020c 	sub.w	r2, r4, #12
 800c374:	f100 0510 	add.w	r5, r0, #16
 800c378:	f101 0920 	add.w	r9, r1, #32
 800c37c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800c380:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c384:	4433      	add	r3, r6
 800c386:	3410      	adds	r4, #16
 800c388:	4660      	mov	r0, ip
 800c38a:	4641      	mov	r1, r8
 800c38c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800c390:	ed54 6a02 	vldr	s13, [r4, #-8]
 800c394:	f1bb 0b01 	subs.w	fp, fp, #1
 800c398:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c39c:	f10a 0a08 	add.w	sl, sl, #8
 800c3a0:	edd1 7a00 	vldr	s15, [r1]
 800c3a4:	f105 0508 	add.w	r5, r5, #8
 800c3a8:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800c3ac:	edd0 2a00 	vldr	s5, [r0]
 800c3b0:	ed14 7a01 	vldr	s14, [r4, #-4]
 800c3b4:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800c3b8:	ed55 6a03 	vldr	s13, [r5, #-12]
 800c3bc:	f1a2 0208 	sub.w	r2, r2, #8
 800c3c0:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800c3c4:	ed90 2a01 	vldr	s4, [r0, #4]
 800c3c8:	ee36 5a87 	vadd.f32	s10, s13, s14
 800c3cc:	ed91 6a01 	vldr	s12, [r1, #4]
 800c3d0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c3d4:	f109 0910 	add.w	r9, r9, #16
 800c3d8:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800c3dc:	f104 0408 	add.w	r4, r4, #8
 800c3e0:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800c3e4:	f10e 0e18 	add.w	lr, lr, #24
 800c3e8:	ee37 3a67 	vsub.f32	s6, s14, s15
 800c3ec:	f1a3 0308 	sub.w	r3, r3, #8
 800c3f0:	ed45 6a04 	vstr	s13, [r5, #-16]
 800c3f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3f8:	edd1 6a01 	vldr	s13, [r1, #4]
 800c3fc:	ee75 1a86 	vadd.f32	s3, s11, s12
 800c400:	edd0 4a01 	vldr	s9, [r0, #4]
 800c404:	ee33 3a22 	vadd.f32	s6, s6, s5
 800c408:	ee75 6a26 	vadd.f32	s13, s10, s13
 800c40c:	ee35 5a46 	vsub.f32	s10, s10, s12
 800c410:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c414:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c418:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800c41c:	ee35 5a42 	vsub.f32	s10, s10, s4
 800c420:	ed45 6a03 	vstr	s13, [r5, #-12]
 800c424:	ee36 2a02 	vadd.f32	s4, s12, s4
 800c428:	edd6 7a00 	vldr	s15, [r6]
 800c42c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800c430:	ed97 1a00 	vldr	s2, [r7]
 800c434:	ee77 2a62 	vsub.f32	s5, s14, s5
 800c438:	ed92 8a04 	vldr	s16, [r2, #16]
 800c43c:	ee71 8a27 	vadd.f32	s17, s2, s15
 800c440:	ed93 aa04 	vldr	s20, [r3, #16]
 800c444:	ed16 7a01 	vldr	s14, [r6, #-4]
 800c448:	ee71 7a67 	vsub.f32	s15, s2, s15
 800c44c:	ed57 0a01 	vldr	s1, [r7, #-4]
 800c450:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800c454:	ee38 6a88 	vadd.f32	s12, s17, s16
 800c458:	edd3 9a03 	vldr	s19, [r3, #12]
 800c45c:	ee30 0a87 	vadd.f32	s0, s1, s14
 800c460:	ed92 9a03 	vldr	s18, [r2, #12]
 800c464:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800c468:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800c46c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800c470:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800c474:	ee16 ca10 	vmov	ip, s12
 800c478:	ee30 6a49 	vsub.f32	s12, s0, s18
 800c47c:	ee77 4a01 	vadd.f32	s9, s14, s2
 800c480:	f847 c908 	str.w	ip, [r7], #-8
 800c484:	ee34 4a29 	vadd.f32	s8, s8, s19
 800c488:	edd2 8a03 	vldr	s17, [r2, #12]
 800c48c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800c490:	ed93 8a03 	vldr	s16, [r3, #12]
 800c494:	ee71 0a47 	vsub.f32	s1, s2, s14
 800c498:	ee30 0a28 	vadd.f32	s0, s0, s17
 800c49c:	ee39 1a67 	vsub.f32	s2, s18, s15
 800c4a0:	ee36 6a69 	vsub.f32	s12, s12, s19
 800c4a4:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c4a8:	ee75 5aca 	vsub.f32	s11, s11, s20
 800c4ac:	ed87 0a01 	vstr	s0, [r7, #4]
 800c4b0:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800c4b4:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800c4b8:	ee21 8a80 	vmul.f32	s16, s3, s0
 800c4bc:	ee23 7a26 	vmul.f32	s14, s6, s13
 800c4c0:	ee64 7a26 	vmul.f32	s15, s8, s13
 800c4c4:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800c4c8:	ee24 4a00 	vmul.f32	s8, s8, s0
 800c4cc:	ee23 3a00 	vmul.f32	s6, s6, s0
 800c4d0:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800c4d4:	ee24 0a80 	vmul.f32	s0, s9, s0
 800c4d8:	ee38 7a07 	vadd.f32	s14, s16, s14
 800c4dc:	ee76 6a84 	vadd.f32	s13, s13, s8
 800c4e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c4e4:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c4e8:	ee17 ca10 	vmov	ip, s14
 800c4ec:	f841 cb08 	str.w	ip, [r1], #8
 800c4f0:	ed01 3a01 	vstr	s6, [r1, #-4]
 800c4f4:	ed82 0a04 	vstr	s0, [r2, #16]
 800c4f8:	edc2 6a03 	vstr	s13, [r2, #12]
 800c4fc:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800c500:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800c504:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800c508:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800c50c:	ee65 4a27 	vmul.f32	s9, s10, s15
 800c510:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c514:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800c518:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c51c:	ee25 5a26 	vmul.f32	s10, s10, s13
 800c520:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c524:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c528:	ee34 6a24 	vadd.f32	s12, s8, s9
 800c52c:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800c530:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c534:	ee17 ca90 	vmov	ip, s15
 800c538:	ed04 6a04 	vstr	s12, [r4, #-16]
 800c53c:	ed04 5a03 	vstr	s10, [r4, #-12]
 800c540:	f846 c908 	str.w	ip, [r6], #-8
 800c544:	edc6 6a01 	vstr	s13, [r6, #4]
 800c548:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800c54c:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800c550:	ee62 5a27 	vmul.f32	s11, s4, s15
 800c554:	ee22 6a87 	vmul.f32	s12, s5, s14
 800c558:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c55c:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800c560:	ee61 6a07 	vmul.f32	s13, s2, s14
 800c564:	ee20 7a87 	vmul.f32	s14, s1, s14
 800c568:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c56c:	ee61 7a27 	vmul.f32	s15, s2, s15
 800c570:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c574:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800c578:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800c57c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c580:	ee16 ca10 	vmov	ip, s12
 800c584:	f840 cb08 	str.w	ip, [r0], #8
 800c588:	ed40 2a01 	vstr	s5, [r0, #-4]
 800c58c:	edc3 0a04 	vstr	s1, [r3, #16]
 800c590:	edc3 7a03 	vstr	s15, [r3, #12]
 800c594:	f47f aefc 	bne.w	800c390 <arm_cfft_radix8by4_f32+0x134>
 800c598:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c59a:	9802      	ldr	r0, [sp, #8]
 800c59c:	00cb      	lsls	r3, r1, #3
 800c59e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800c5a2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c5a6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c5aa:	4498      	add	r8, r3
 800c5ac:	449c      	add	ip, r3
 800c5ae:	9102      	str	r1, [sp, #8]
 800c5b0:	9901      	ldr	r1, [sp, #4]
 800c5b2:	4419      	add	r1, r3
 800c5b4:	9101      	str	r1, [sp, #4]
 800c5b6:	9907      	ldr	r1, [sp, #28]
 800c5b8:	4419      	add	r1, r3
 800c5ba:	9107      	str	r1, [sp, #28]
 800c5bc:	9908      	ldr	r1, [sp, #32]
 800c5be:	4419      	add	r1, r3
 800c5c0:	9b06      	ldr	r3, [sp, #24]
 800c5c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5c6:	9108      	str	r1, [sp, #32]
 800c5c8:	9306      	str	r3, [sp, #24]
 800c5ca:	9a01      	ldr	r2, [sp, #4]
 800c5cc:	2304      	movs	r3, #4
 800c5ce:	9e08      	ldr	r6, [sp, #32]
 800c5d0:	edd2 7a00 	vldr	s15, [r2]
 800c5d4:	ed96 7a00 	vldr	s14, [r6]
 800c5d8:	edd8 2a00 	vldr	s5, [r8]
 800c5dc:	ee77 5a87 	vadd.f32	s11, s15, s14
 800c5e0:	ed9c 3a00 	vldr	s6, [ip]
 800c5e4:	ed92 6a01 	vldr	s12, [r2, #4]
 800c5e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c5ec:	edd6 6a01 	vldr	s13, [r6, #4]
 800c5f0:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800c5f4:	ed9c 2a01 	vldr	s4, [ip, #4]
 800c5f8:	ee36 5a26 	vadd.f32	s10, s12, s13
 800c5fc:	edd8 7a01 	vldr	s15, [r8, #4]
 800c600:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c604:	9d02      	ldr	r5, [sp, #8]
 800c606:	ee34 6a83 	vadd.f32	s12, s9, s6
 800c60a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800c60e:	ee37 4a27 	vadd.f32	s8, s14, s15
 800c612:	9805      	ldr	r0, [sp, #20]
 800c614:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800c618:	4621      	mov	r1, r4
 800c61a:	ed82 6a00 	vstr	s12, [r2]
 800c61e:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800c622:	edd8 3a01 	vldr	s7, [r8, #4]
 800c626:	ee75 5a67 	vsub.f32	s11, s10, s15
 800c62a:	eddc 1a01 	vldr	s3, [ip, #4]
 800c62e:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c632:	ee75 3a23 	vadd.f32	s7, s10, s7
 800c636:	ee74 4a83 	vadd.f32	s9, s9, s6
 800c63a:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800c63e:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800c642:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c646:	ee36 6a43 	vsub.f32	s12, s12, s6
 800c64a:	ed82 5a01 	vstr	s10, [r2, #4]
 800c64e:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800c652:	9a07      	ldr	r2, [sp, #28]
 800c654:	ee77 7a02 	vadd.f32	s15, s14, s4
 800c658:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800c65c:	edd2 2a00 	vldr	s5, [r2]
 800c660:	ed92 5a01 	vldr	s10, [r2, #4]
 800c664:	ee64 3a22 	vmul.f32	s7, s8, s5
 800c668:	ee24 4a05 	vmul.f32	s8, s8, s10
 800c66c:	ee24 5a85 	vmul.f32	s10, s9, s10
 800c670:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800c674:	ee33 5a85 	vadd.f32	s10, s7, s10
 800c678:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800c67c:	ed88 5a00 	vstr	s10, [r8]
 800c680:	edc8 4a01 	vstr	s9, [r8, #4]
 800c684:	edd5 4a01 	vldr	s9, [r5, #4]
 800c688:	edd5 6a00 	vldr	s13, [r5]
 800c68c:	9d06      	ldr	r5, [sp, #24]
 800c68e:	ee26 5a26 	vmul.f32	s10, s12, s13
 800c692:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c696:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800c69a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800c69e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800c6a2:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c6a6:	ed86 6a01 	vstr	s12, [r6, #4]
 800c6aa:	edc6 5a00 	vstr	s11, [r6]
 800c6ae:	edd5 5a01 	vldr	s11, [r5, #4]
 800c6b2:	edd5 6a00 	vldr	s13, [r5]
 800c6b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c6b8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c6bc:	ee67 6a26 	vmul.f32	s13, s14, s13
 800c6c0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c6c4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c6c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c6cc:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c6d0:	edcc 7a01 	vstr	s15, [ip, #4]
 800c6d4:	ed8c 7a00 	vstr	s14, [ip]
 800c6d8:	6872      	ldr	r2, [r6, #4]
 800c6da:	f000 fb09 	bl	800ccf0 <arm_radix8_butterfly_f32>
 800c6de:	9803      	ldr	r0, [sp, #12]
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	6872      	ldr	r2, [r6, #4]
 800c6e4:	2304      	movs	r3, #4
 800c6e6:	f000 fb03 	bl	800ccf0 <arm_radix8_butterfly_f32>
 800c6ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	6872      	ldr	r2, [r6, #4]
 800c6f0:	2304      	movs	r3, #4
 800c6f2:	f000 fafd 	bl	800ccf0 <arm_radix8_butterfly_f32>
 800c6f6:	4621      	mov	r1, r4
 800c6f8:	6872      	ldr	r2, [r6, #4]
 800c6fa:	2304      	movs	r3, #4
 800c6fc:	9804      	ldr	r0, [sp, #16]
 800c6fe:	b00f      	add	sp, #60	; 0x3c
 800c700:	ecbd 8b06 	vpop	{d8-d10}
 800c704:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	f000 baf2 	b.w	800ccf0 <arm_radix8_butterfly_f32>

0800c70c <arm_cfft_f32>:
 800c70c:	2a01      	cmp	r2, #1
 800c70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c712:	4606      	mov	r6, r0
 800c714:	4617      	mov	r7, r2
 800c716:	460c      	mov	r4, r1
 800c718:	4698      	mov	r8, r3
 800c71a:	8805      	ldrh	r5, [r0, #0]
 800c71c:	d053      	beq.n	800c7c6 <arm_cfft_f32+0xba>
 800c71e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c722:	d04b      	beq.n	800c7bc <arm_cfft_f32+0xb0>
 800c724:	d916      	bls.n	800c754 <arm_cfft_f32+0x48>
 800c726:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c72a:	d01a      	beq.n	800c762 <arm_cfft_f32+0x56>
 800c72c:	d95a      	bls.n	800c7e4 <arm_cfft_f32+0xd8>
 800c72e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c732:	d043      	beq.n	800c7bc <arm_cfft_f32+0xb0>
 800c734:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c738:	d105      	bne.n	800c746 <arm_cfft_f32+0x3a>
 800c73a:	2301      	movs	r3, #1
 800c73c:	6872      	ldr	r2, [r6, #4]
 800c73e:	4629      	mov	r1, r5
 800c740:	4620      	mov	r0, r4
 800c742:	f000 fad5 	bl	800ccf0 <arm_radix8_butterfly_f32>
 800c746:	f1b8 0f00 	cmp.w	r8, #0
 800c74a:	d111      	bne.n	800c770 <arm_cfft_f32+0x64>
 800c74c:	2f01      	cmp	r7, #1
 800c74e:	d016      	beq.n	800c77e <arm_cfft_f32+0x72>
 800c750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c754:	2d20      	cmp	r5, #32
 800c756:	d031      	beq.n	800c7bc <arm_cfft_f32+0xb0>
 800c758:	d948      	bls.n	800c7ec <arm_cfft_f32+0xe0>
 800c75a:	2d40      	cmp	r5, #64	; 0x40
 800c75c:	d0ed      	beq.n	800c73a <arm_cfft_f32+0x2e>
 800c75e:	2d80      	cmp	r5, #128	; 0x80
 800c760:	d1f1      	bne.n	800c746 <arm_cfft_f32+0x3a>
 800c762:	4621      	mov	r1, r4
 800c764:	4630      	mov	r0, r6
 800c766:	f7ff fca9 	bl	800c0bc <arm_cfft_radix8by2_f32>
 800c76a:	f1b8 0f00 	cmp.w	r8, #0
 800c76e:	d0ed      	beq.n	800c74c <arm_cfft_f32+0x40>
 800c770:	68b2      	ldr	r2, [r6, #8]
 800c772:	4620      	mov	r0, r4
 800c774:	89b1      	ldrh	r1, [r6, #12]
 800c776:	f7f3 fdb3 	bl	80002e0 <arm_bitreversal_32>
 800c77a:	2f01      	cmp	r7, #1
 800c77c:	d1e8      	bne.n	800c750 <arm_cfft_f32+0x44>
 800c77e:	ee07 5a90 	vmov	s15, r5
 800c782:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c78e:	2d00      	cmp	r5, #0
 800c790:	d0de      	beq.n	800c750 <arm_cfft_f32+0x44>
 800c792:	f104 0108 	add.w	r1, r4, #8
 800c796:	2300      	movs	r3, #0
 800c798:	ed11 7a02 	vldr	s14, [r1, #-8]
 800c79c:	3301      	adds	r3, #1
 800c79e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c7a2:	3108      	adds	r1, #8
 800c7a4:	429d      	cmp	r5, r3
 800c7a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c7aa:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c7ae:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c7b2:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c7b6:	d1ef      	bne.n	800c798 <arm_cfft_f32+0x8c>
 800c7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7bc:	4621      	mov	r1, r4
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7ff fd4c 	bl	800c25c <arm_cfft_radix8by4_f32>
 800c7c4:	e7bf      	b.n	800c746 <arm_cfft_f32+0x3a>
 800c7c6:	b1a5      	cbz	r5, 800c7f2 <arm_cfft_f32+0xe6>
 800c7c8:	f101 030c 	add.w	r3, r1, #12
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c7d2:	3201      	adds	r2, #1
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	eef1 7a67 	vneg.f32	s15, s15
 800c7da:	4295      	cmp	r5, r2
 800c7dc:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c7e0:	d1f5      	bne.n	800c7ce <arm_cfft_f32+0xc2>
 800c7e2:	e79c      	b.n	800c71e <arm_cfft_f32+0x12>
 800c7e4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c7e8:	d0a7      	beq.n	800c73a <arm_cfft_f32+0x2e>
 800c7ea:	e7ac      	b.n	800c746 <arm_cfft_f32+0x3a>
 800c7ec:	2d10      	cmp	r5, #16
 800c7ee:	d0b8      	beq.n	800c762 <arm_cfft_f32+0x56>
 800c7f0:	e7a9      	b.n	800c746 <arm_cfft_f32+0x3a>
 800c7f2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c7f6:	d896      	bhi.n	800c726 <arm_cfft_f32+0x1a>
 800c7f8:	e7ac      	b.n	800c754 <arm_cfft_f32+0x48>
 800c7fa:	bf00      	nop

0800c7fc <arm_fir_decimate_init_f32>:
 800c7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fe:	9f07      	ldr	r7, [sp, #28]
 800c800:	fbb7 f4f2 	udiv	r4, r7, r2
 800c804:	fb02 7414 	mls	r4, r2, r4, r7
 800c808:	b994      	cbnz	r4, 800c830 <arm_fir_decimate_init_f32+0x34>
 800c80a:	468e      	mov	lr, r1
 800c80c:	4616      	mov	r6, r2
 800c80e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800c812:	4605      	mov	r5, r0
 800c814:	4472      	add	r2, lr
 800c816:	8069      	strh	r1, [r5, #2]
 800c818:	6043      	str	r3, [r0, #4]
 800c81a:	4621      	mov	r1, r4
 800c81c:	443a      	add	r2, r7
 800c81e:	9806      	ldr	r0, [sp, #24]
 800c820:	0092      	lsls	r2, r2, #2
 800c822:	f000 fd8f 	bl	800d344 <memset>
 800c826:	9b06      	ldr	r3, [sp, #24]
 800c828:	702e      	strb	r6, [r5, #0]
 800c82a:	4620      	mov	r0, r4
 800c82c:	60ab      	str	r3, [r5, #8]
 800c82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c830:	f06f 0001 	mvn.w	r0, #1
 800c834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c836:	bf00      	nop

0800c838 <arm_fir_decimate_f32>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	7804      	ldrb	r4, [r0, #0]
 800c83e:	4683      	mov	fp, r0
 800c840:	b08d      	sub	sp, #52	; 0x34
 800c842:	8840      	ldrh	r0, [r0, #2]
 800c844:	f8db 5004 	ldr.w	r5, [fp, #4]
 800c848:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 800c84c:	4696      	mov	lr, r2
 800c84e:	9208      	str	r2, [sp, #32]
 800c850:	9502      	str	r5, [sp, #8]
 800c852:	462a      	mov	r2, r5
 800c854:	f8db 6008 	ldr.w	r6, [fp, #8]
 800c858:	4481      	add	r9, r0
 800c85a:	9009      	str	r0, [sp, #36]	; 0x24
 800c85c:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800c860:	fbb3 f3f4 	udiv	r3, r3, r4
 800c864:	089d      	lsrs	r5, r3, #2
 800c866:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
 800c86a:	950a      	str	r5, [sp, #40]	; 0x28
 800c86c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c86e:	2d00      	cmp	r5, #0
 800c870:	f000 80f8 	beq.w	800ca64 <arm_fir_decimate_f32+0x22c>
 800c874:	0883      	lsrs	r3, r0, #2
 800c876:	f000 0003 	and.w	r0, r0, #3
 800c87a:	462f      	mov	r7, r5
 800c87c:	f8cd b010 	str.w	fp, [sp, #16]
 800c880:	9305      	str	r3, [sp, #20]
 800c882:	011b      	lsls	r3, r3, #4
 800c884:	9006      	str	r0, [sp, #24]
 800c886:	f10e 0a10 	add.w	sl, lr, #16
 800c88a:	441a      	add	r2, r3
 800c88c:	469b      	mov	fp, r3
 800c88e:	4648      	mov	r0, r9
 800c890:	9703      	str	r7, [sp, #12]
 800c892:	9207      	str	r2, [sp, #28]
 800c894:	f8cd 9004 	str.w	r9, [sp, #4]
 800c898:	00a4      	lsls	r4, r4, #2
 800c89a:	460a      	mov	r2, r1
 800c89c:	4623      	mov	r3, r4
 800c89e:	f852 5b04 	ldr.w	r5, [r2], #4
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	f840 5b04 	str.w	r5, [r0], #4
 800c8a8:	d1f9      	bne.n	800c89e <arm_fir_decimate_f32+0x66>
 800c8aa:	9b04      	ldr	r3, [sp, #16]
 800c8ac:	00a4      	lsls	r4, r4, #2
 800c8ae:	9f05      	ldr	r7, [sp, #20]
 800c8b0:	f893 8000 	ldrb.w	r8, [r3]
 800c8b4:	4421      	add	r1, r4
 800c8b6:	9b01      	ldr	r3, [sp, #4]
 800c8b8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800c8bc:	ed9f 1abb 	vldr	s2, [pc, #748]	; 800cbac <arm_fir_decimate_f32+0x374>
 800c8c0:	4423      	add	r3, r4
 800c8c2:	eb06 0e08 	add.w	lr, r6, r8
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	eb0e 0c08 	add.w	ip, lr, r8
 800c8cc:	eb0c 0908 	add.w	r9, ip, r8
 800c8d0:	2f00      	cmp	r7, #0
 800c8d2:	f000 8161 	beq.w	800cb98 <arm_fir_decimate_f32+0x360>
 800c8d6:	9b02      	ldr	r3, [sp, #8]
 800c8d8:	eef0 5a41 	vmov.f32	s11, s2
 800c8dc:	eeb0 5a41 	vmov.f32	s10, s2
 800c8e0:	f106 0410 	add.w	r4, r6, #16
 800c8e4:	eef0 4a41 	vmov.f32	s9, s2
 800c8e8:	f103 0510 	add.w	r5, r3, #16
 800c8ec:	f10e 0010 	add.w	r0, lr, #16
 800c8f0:	f10c 0210 	add.w	r2, ip, #16
 800c8f4:	f109 0310 	add.w	r3, r9, #16
 800c8f8:	ed55 6a04 	vldr	s13, [r5, #-16]
 800c8fc:	3f01      	subs	r7, #1
 800c8fe:	ed13 6a04 	vldr	s12, [r3, #-16]
 800c902:	f105 0510 	add.w	r5, r5, #16
 800c906:	ed14 4a04 	vldr	s8, [r4, #-16]
 800c90a:	f100 0010 	add.w	r0, r0, #16
 800c90e:	ed50 1a08 	vldr	s3, [r0, #-32]	; 0xffffffe0
 800c912:	f104 0410 	add.w	r4, r4, #16
 800c916:	ed52 2a04 	vldr	s5, [r2, #-16]
 800c91a:	ee26 4a84 	vmul.f32	s8, s13, s8
 800c91e:	ee66 1aa1 	vmul.f32	s3, s13, s3
 800c922:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800c926:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800c92a:	ed54 3a07 	vldr	s7, [r4, #-28]	; 0xffffffe4
 800c92e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c932:	ed10 2a07 	vldr	s4, [r0, #-28]	; 0xffffffe4
 800c936:	ed13 6a03 	vldr	s12, [r3, #-12]
 800c93a:	ee74 4a24 	vadd.f32	s9, s8, s9
 800c93e:	ed12 3a03 	vldr	s6, [r2, #-12]
 800c942:	ee31 5a85 	vadd.f32	s10, s3, s10
 800c946:	ee72 5aa5 	vadd.f32	s11, s5, s11
 800c94a:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 800c94e:	ee67 3a23 	vmul.f32	s7, s14, s7
 800c952:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800c956:	ee27 2a02 	vmul.f32	s4, s14, s4
 800c95a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800c95e:	ee27 3a03 	vmul.f32	s6, s14, s6
 800c962:	ed52 2a02 	vldr	s5, [r2, #-8]
 800c966:	ee76 6a81 	vadd.f32	s13, s13, s2
 800c96a:	ed10 0a05 	vldr	s0, [r0, #-20]	; 0xffffffec
 800c96e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c972:	ed13 6a02 	vldr	s12, [r3, #-8]
 800c976:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800c97a:	ed15 1a05 	vldr	s2, [r5, #-20]	; 0xffffffec
 800c97e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800c982:	ed52 0a01 	vldr	s1, [r2, #-4]
 800c986:	ee32 2a05 	vadd.f32	s4, s4, s10
 800c98a:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800c98e:	ee27 5aa1 	vmul.f32	s10, s15, s3
 800c992:	ed53 1a01 	vldr	s3, [r3, #-4]
 800c996:	ee33 3a25 	vadd.f32	s6, s6, s11
 800c99a:	f102 0210 	add.w	r2, r2, #16
 800c99e:	ee67 5aa2 	vmul.f32	s11, s15, s5
 800c9a2:	f103 0310 	add.w	r3, r3, #16
 800c9a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c9aa:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c9ae:	ee34 6aa3 	vadd.f32	s12, s9, s7
 800c9b2:	ee61 4a04 	vmul.f32	s9, s2, s8
 800c9b6:	ee75 3a02 	vadd.f32	s7, s10, s4
 800c9ba:	ee35 4a83 	vadd.f32	s8, s11, s6
 800c9be:	ee21 5a00 	vmul.f32	s10, s2, s0
 800c9c2:	ee61 5a20 	vmul.f32	s11, s2, s1
 800c9c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9ca:	ee21 1a21 	vmul.f32	s2, s2, s3
 800c9ce:	ee74 4a86 	vadd.f32	s9, s9, s12
 800c9d2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800c9d6:	ee75 5a84 	vadd.f32	s11, s11, s8
 800c9da:	ee31 1a27 	vadd.f32	s2, s2, s15
 800c9de:	d18b      	bne.n	800c8f8 <arm_fir_decimate_f32+0xc0>
 800c9e0:	445e      	add	r6, fp
 800c9e2:	44de      	add	lr, fp
 800c9e4:	44dc      	add	ip, fp
 800c9e6:	eb09 000b 	add.w	r0, r9, fp
 800c9ea:	9a07      	ldr	r2, [sp, #28]
 800c9ec:	9b06      	ldr	r3, [sp, #24]
 800c9ee:	b1db      	cbz	r3, 800ca28 <arm_fir_decimate_f32+0x1f0>
 800c9f0:	ecb2 6a01 	vldmia	r2!, {s12}
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	ecf6 6a01 	vldmia	r6!, {s13}
 800c9fa:	ecbe 7a01 	vldmia	lr!, {s14}
 800c9fe:	ecfc 7a01 	vldmia	ip!, {s15}
 800ca02:	ee66 6a26 	vmul.f32	s13, s12, s13
 800ca06:	ecb0 4a01 	vldmia	r0!, {s8}
 800ca0a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ca0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ca12:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ca16:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800ca1a:	ee35 5a07 	vadd.f32	s10, s10, s14
 800ca1e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800ca22:	ee31 1a06 	vadd.f32	s2, s2, s12
 800ca26:	d1e3      	bne.n	800c9f0 <arm_fir_decimate_f32+0x1b8>
 800ca28:	9b03      	ldr	r3, [sp, #12]
 800ca2a:	eb09 0608 	add.w	r6, r9, r8
 800ca2e:	ed4a 4a04 	vstr	s9, [sl, #-16]
 800ca32:	f10a 0a10 	add.w	sl, sl, #16
 800ca36:	3b01      	subs	r3, #1
 800ca38:	ed0a 5a07 	vstr	s10, [sl, #-28]	; 0xffffffe4
 800ca3c:	ed4a 5a06 	vstr	s11, [sl, #-24]	; 0xffffffe8
 800ca40:	ed0a 1a05 	vstr	s2, [sl, #-20]	; 0xffffffec
 800ca44:	9303      	str	r3, [sp, #12]
 800ca46:	d003      	beq.n	800ca50 <arm_fir_decimate_f32+0x218>
 800ca48:	9b04      	ldr	r3, [sp, #16]
 800ca4a:	9801      	ldr	r0, [sp, #4]
 800ca4c:	781c      	ldrb	r4, [r3, #0]
 800ca4e:	e723      	b.n	800c898 <arm_fir_decimate_f32+0x60>
 800ca50:	9b08      	ldr	r3, [sp, #32]
 800ca52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca54:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ca58:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800ca5c:	f8dd b010 	ldr.w	fp, [sp, #16]
 800ca60:	9308      	str	r3, [sp, #32]
 800ca62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d061      	beq.n	800cb2c <arm_fir_decimate_f32+0x2f4>
 800ca68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca6a:	4698      	mov	r8, r3
 800ca6c:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ca70:	0895      	lsrs	r5, r2, #2
 800ca72:	f002 0703 	and.w	r7, r2, #3
 800ca76:	9a02      	ldr	r2, [sp, #8]
 800ca78:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800ca7c:	eb02 0c0e 	add.w	ip, r2, lr
 800ca80:	f89b 4000 	ldrb.w	r4, [fp]
 800ca84:	4648      	mov	r0, r9
 800ca86:	460a      	mov	r2, r1
 800ca88:	4623      	mov	r3, r4
 800ca8a:	ecf2 7a01 	vldmia	r2!, {s15}
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	ece0 7a01 	vstmia	r0!, {s15}
 800ca94:	d1f9      	bne.n	800ca8a <arm_fir_decimate_f32+0x252>
 800ca96:	00a4      	lsls	r4, r4, #2
 800ca98:	44a1      	add	r9, r4
 800ca9a:	4421      	add	r1, r4
 800ca9c:	2d00      	cmp	r5, #0
 800ca9e:	d076      	beq.n	800cb8e <arm_fir_decimate_f32+0x356>
 800caa0:	9b02      	ldr	r3, [sp, #8]
 800caa2:	4628      	mov	r0, r5
 800caa4:	eddf 7a41 	vldr	s15, [pc, #260]	; 800cbac <arm_fir_decimate_f32+0x374>
 800caa8:	f103 0210 	add.w	r2, r3, #16
 800caac:	f106 0310 	add.w	r3, r6, #16
 800cab0:	ed52 6a04 	vldr	s13, [r2, #-16]
 800cab4:	3801      	subs	r0, #1
 800cab6:	ed13 7a04 	vldr	s14, [r3, #-16]
 800caba:	f102 0210 	add.w	r2, r2, #16
 800cabe:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 800cac2:	f103 0310 	add.w	r3, r3, #16
 800cac6:	ee66 5a87 	vmul.f32	s11, s13, s14
 800caca:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800cace:	ed12 6a06 	vldr	s12, [r2, #-24]	; 0xffffffe8
 800cad2:	ee25 5a07 	vmul.f32	s10, s10, s14
 800cad6:	ed13 7a06 	vldr	s14, [r3, #-24]	; 0xffffffe8
 800cada:	ee75 6aa7 	vadd.f32	s13, s11, s15
 800cade:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 800cae2:	ee26 6a07 	vmul.f32	s12, s12, s14
 800cae6:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800caea:	ee75 6a26 	vadd.f32	s13, s10, s13
 800caee:	ee25 7a87 	vmul.f32	s14, s11, s14
 800caf2:	ee76 7a26 	vadd.f32	s15, s12, s13
 800caf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cafa:	d1d9      	bne.n	800cab0 <arm_fir_decimate_f32+0x278>
 800cafc:	eb06 020e 	add.w	r2, r6, lr
 800cb00:	4660      	mov	r0, ip
 800cb02:	b157      	cbz	r7, 800cb1a <arm_fir_decimate_f32+0x2e2>
 800cb04:	463b      	mov	r3, r7
 800cb06:	ecf0 6a01 	vldmia	r0!, {s13}
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	ecb2 7a01 	vldmia	r2!, {s14}
 800cb10:	ee26 7a87 	vmul.f32	s14, s13, s14
 800cb14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb18:	d1f5      	bne.n	800cb06 <arm_fir_decimate_f32+0x2ce>
 800cb1a:	f89b 3000 	ldrb.w	r3, [fp]
 800cb1e:	f1b8 0801 	subs.w	r8, r8, #1
 800cb22:	ecea 7a01 	vstmia	sl!, {s15}
 800cb26:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800cb2a:	d1a9      	bne.n	800ca80 <arm_fir_decimate_f32+0x248>
 800cb2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2e:	f8db 4008 	ldr.w	r4, [fp, #8]
 800cb32:	1e59      	subs	r1, r3, #1
 800cb34:	088f      	lsrs	r7, r1, #2
 800cb36:	d01d      	beq.n	800cb74 <arm_fir_decimate_f32+0x33c>
 800cb38:	f104 0210 	add.w	r2, r4, #16
 800cb3c:	f106 0310 	add.w	r3, r6, #16
 800cb40:	4638      	mov	r0, r7
 800cb42:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800cb46:	3801      	subs	r0, #1
 800cb48:	f103 0310 	add.w	r3, r3, #16
 800cb4c:	f102 0210 	add.w	r2, r2, #16
 800cb50:	f842 5c20 	str.w	r5, [r2, #-32]
 800cb54:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 800cb58:	f842 5c1c 	str.w	r5, [r2, #-28]
 800cb5c:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800cb60:	f842 5c18 	str.w	r5, [r2, #-24]
 800cb64:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800cb68:	f842 5c14 	str.w	r5, [r2, #-20]
 800cb6c:	d1e9      	bne.n	800cb42 <arm_fir_decimate_f32+0x30a>
 800cb6e:	013b      	lsls	r3, r7, #4
 800cb70:	441c      	add	r4, r3
 800cb72:	441e      	add	r6, r3
 800cb74:	f011 0303 	ands.w	r3, r1, #3
 800cb78:	d006      	beq.n	800cb88 <arm_fir_decimate_f32+0x350>
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	f856 1b04 	ldr.w	r1, [r6], #4
 800cb80:	3b01      	subs	r3, #1
 800cb82:	f842 1b04 	str.w	r1, [r2], #4
 800cb86:	d1f9      	bne.n	800cb7c <arm_fir_decimate_f32+0x344>
 800cb88:	b00d      	add	sp, #52	; 0x34
 800cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8e:	9802      	ldr	r0, [sp, #8]
 800cb90:	4632      	mov	r2, r6
 800cb92:	eddf 7a06 	vldr	s15, [pc, #24]	; 800cbac <arm_fir_decimate_f32+0x374>
 800cb96:	e7b4      	b.n	800cb02 <arm_fir_decimate_f32+0x2ca>
 800cb98:	4648      	mov	r0, r9
 800cb9a:	9a02      	ldr	r2, [sp, #8]
 800cb9c:	eef0 5a41 	vmov.f32	s11, s2
 800cba0:	eeb0 5a41 	vmov.f32	s10, s2
 800cba4:	eef0 4a41 	vmov.f32	s9, s2
 800cba8:	e720      	b.n	800c9ec <arm_fir_decimate_f32+0x1b4>
 800cbaa:	bf00      	nop
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <arm_cmplx_mult_cmplx_f32>:
 800cbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbb2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800cbb6:	d073      	beq.n	800cca0 <arm_cmplx_mult_cmplx_f32+0xf0>
 800cbb8:	f100 0620 	add.w	r6, r0, #32
 800cbbc:	f101 0520 	add.w	r5, r1, #32
 800cbc0:	f102 0420 	add.w	r4, r2, #32
 800cbc4:	4677      	mov	r7, lr
 800cbc6:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 800cbca:	3f01      	subs	r7, #1
 800cbcc:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 800cbd0:	f106 0620 	add.w	r6, r6, #32
 800cbd4:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 800cbd8:	f105 0520 	add.w	r5, r5, #32
 800cbdc:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 800cbe0:	ee27 3a27 	vmul.f32	s6, s14, s15
 800cbe4:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800cbe8:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 800cbec:	ee25 4aa6 	vmul.f32	s8, s11, s13
 800cbf0:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 800cbf4:	ee67 6a26 	vmul.f32	s13, s14, s13
 800cbf8:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 800cbfc:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 800cc00:	ee66 3a27 	vmul.f32	s7, s12, s15
 800cc04:	ee66 5a05 	vmul.f32	s11, s12, s10
 800cc08:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 800cc0c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cc10:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 800cc14:	ee25 5a22 	vmul.f32	s10, s10, s5
 800cc18:	f104 0420 	add.w	r4, r4, #32
 800cc1c:	ee33 4a44 	vsub.f32	s8, s6, s8
 800cc20:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800cc24:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800cc28:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 800cc2c:	ee67 4a06 	vmul.f32	s9, s14, s12
 800cc30:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 800cc34:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800cc38:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 800cc3c:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 800cc40:	ee66 5a05 	vmul.f32	s11, s12, s10
 800cc44:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 800cc48:	ee25 5a26 	vmul.f32	s10, s10, s13
 800cc4c:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800cc50:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc54:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800cc58:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 800cc5c:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 800cc60:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800cc64:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 800cc68:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800cc6c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cc70:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cc74:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 800cc78:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cc7c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800cc80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc84:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800cc88:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 800cc8c:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800cc90:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 800cc94:	d197      	bne.n	800cbc6 <arm_cmplx_mult_cmplx_f32+0x16>
 800cc96:	ea4f 144e 	mov.w	r4, lr, lsl #5
 800cc9a:	4420      	add	r0, r4
 800cc9c:	4421      	add	r1, r4
 800cc9e:	4422      	add	r2, r4
 800cca0:	f013 0303 	ands.w	r3, r3, #3
 800cca4:	d022      	beq.n	800ccec <arm_cmplx_mult_cmplx_f32+0x13c>
 800cca6:	3008      	adds	r0, #8
 800cca8:	3108      	adds	r1, #8
 800ccaa:	3208      	adds	r2, #8
 800ccac:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	ed11 7a02 	vldr	s14, [r1, #-8]
 800ccb6:	f100 0008 	add.w	r0, r0, #8
 800ccba:	ed50 6a03 	vldr	s13, [r0, #-12]
 800ccbe:	f101 0108 	add.w	r1, r1, #8
 800ccc2:	ed51 5a03 	vldr	s11, [r1, #-12]
 800ccc6:	ee27 6a87 	vmul.f32	s12, s15, s14
 800ccca:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ccce:	f102 0208 	add.w	r2, r2, #8
 800ccd2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ccd6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ccda:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ccde:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cce2:	ed42 6a04 	vstr	s13, [r2, #-16]
 800cce6:	ed42 7a03 	vstr	s15, [r2, #-12]
 800ccea:	d1df      	bne.n	800ccac <arm_cmplx_mult_cmplx_f32+0xfc>
 800ccec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccee:	bf00      	nop

0800ccf0 <arm_radix8_butterfly_f32>:
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	468a      	mov	sl, r1
 800ccfa:	468b      	mov	fp, r1
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	ed2d 8b10 	vpush	{d8-d15}
 800cd02:	469c      	mov	ip, r3
 800cd04:	b09d      	sub	sp, #116	; 0x74
 800cd06:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800d014 <arm_radix8_butterfly_f32+0x324>
 800cd0a:	9019      	str	r0, [sp, #100]	; 0x64
 800cd0c:	921a      	str	r2, [sp, #104]	; 0x68
 800cd0e:	931b      	str	r3, [sp, #108]	; 0x6c
 800cd10:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800cd14:	f04f 0800 	mov.w	r8, #0
 800cd18:	461a      	mov	r2, r3
 800cd1a:	9311      	str	r3, [sp, #68]	; 0x44
 800cd1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cd20:	4611      	mov	r1, r2
 800cd22:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	0053      	lsls	r3, r2, #1
 800cd2a:	18d5      	adds	r5, r2, r3
 800cd2c:	9301      	str	r3, [sp, #4]
 800cd2e:	0113      	lsls	r3, r2, #4
 800cd30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cd32:	194c      	adds	r4, r1, r5
 800cd34:	eb02 0609 	add.w	r6, r2, r9
 800cd38:	9302      	str	r3, [sp, #8]
 800cd3a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800cd3e:	4613      	mov	r3, r2
 800cd40:	190a      	adds	r2, r1, r4
 800cd42:	eb06 0709 	add.w	r7, r6, r9
 800cd46:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800cd4a:	1888      	adds	r0, r1, r2
 800cd4c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800cd50:	4401      	add	r1, r0
 800cd52:	3204      	adds	r2, #4
 800cd54:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800cd58:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cd5c:	9b00      	ldr	r3, [sp, #0]
 800cd5e:	3104      	adds	r1, #4
 800cd60:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800cd64:	44d8      	add	r8, fp
 800cd66:	ed90 7a00 	vldr	s14, [r0]
 800cd6a:	ed94 5a00 	vldr	s10, [r4]
 800cd6e:	45c2      	cmp	sl, r8
 800cd70:	edd7 3a00 	vldr	s7, [r7]
 800cd74:	ed96 6a00 	vldr	s12, [r6]
 800cd78:	ee37 1a85 	vadd.f32	s2, s15, s10
 800cd7c:	ed52 6a01 	vldr	s13, [r2, #-4]
 800cd80:	ee73 4a87 	vadd.f32	s9, s7, s14
 800cd84:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800cd88:	edd5 7a00 	vldr	s15, [r5]
 800cd8c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800cd90:	ed11 7a01 	vldr	s14, [r1, #-4]
 800cd94:	ee36 2a26 	vadd.f32	s4, s12, s13
 800cd98:	ee37 4a87 	vadd.f32	s8, s15, s14
 800cd9c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800cda0:	ee71 5a24 	vadd.f32	s11, s2, s9
 800cda4:	ee32 6a04 	vadd.f32	s12, s4, s8
 800cda8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800cdac:	ee31 1a64 	vsub.f32	s2, s2, s9
 800cdb0:	ee75 4a86 	vadd.f32	s9, s11, s12
 800cdb4:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800cdb8:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800cdbc:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800cdc0:	ee32 2a44 	vsub.f32	s4, s4, s8
 800cdc4:	ee67 7a89 	vmul.f32	s15, s15, s18
 800cdc8:	ed94 0a01 	vldr	s0, [r4, #4]
 800cdcc:	edc4 5a00 	vstr	s11, [r4]
 800cdd0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cdd4:	edd6 5a01 	vldr	s11, [r6, #4]
 800cdd8:	edd5 2a01 	vldr	s5, [r5, #4]
 800cddc:	ee75 1a27 	vadd.f32	s3, s10, s15
 800cde0:	ed92 4a00 	vldr	s8, [r2]
 800cde4:	ee75 7a67 	vsub.f32	s15, s10, s15
 800cde8:	edd1 4a00 	vldr	s9, [r1]
 800cdec:	ee27 7a09 	vmul.f32	s14, s14, s18
 800cdf0:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800cdf4:	ed9c 6a00 	vldr	s12, [ip]
 800cdf8:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800cdfc:	edd0 0a01 	vldr	s1, [r0, #4]
 800ce00:	ed97 5a01 	vldr	s10, [r7, #4]
 800ce04:	ee35 4a84 	vadd.f32	s8, s11, s8
 800ce08:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800ce0c:	ee73 5a26 	vadd.f32	s11, s6, s13
 800ce10:	ee76 2a00 	vadd.f32	s5, s12, s0
 800ce14:	ee73 6a66 	vsub.f32	s13, s6, s13
 800ce18:	ee36 6a40 	vsub.f32	s12, s12, s0
 800ce1c:	ee35 0a20 	vadd.f32	s0, s10, s1
 800ce20:	ee65 5a89 	vmul.f32	s11, s11, s18
 800ce24:	ee35 5a60 	vsub.f32	s10, s10, s1
 800ce28:	ee32 3a80 	vadd.f32	s6, s5, s0
 800ce2c:	ee74 0a24 	vadd.f32	s1, s8, s9
 800ce30:	ee66 6a89 	vmul.f32	s13, s13, s18
 800ce34:	ee74 4a64 	vsub.f32	s9, s8, s9
 800ce38:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800ce3c:	ee75 2a25 	vadd.f32	s5, s10, s11
 800ce40:	ee33 0a20 	vadd.f32	s0, s6, s1
 800ce44:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ce48:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ce4c:	ee36 5a26 	vadd.f32	s10, s12, s13
 800ce50:	ed8c 0a00 	vstr	s0, [ip]
 800ce54:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ce58:	449c      	add	ip, r3
 800ce5a:	ee33 6a87 	vadd.f32	s12, s7, s14
 800ce5e:	ed84 3a01 	vstr	s6, [r4, #4]
 800ce62:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800ce66:	441c      	add	r4, r3
 800ce68:	ee71 3a24 	vadd.f32	s7, s2, s9
 800ce6c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ce70:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800ce74:	edc7 3a00 	vstr	s7, [r7]
 800ce78:	ee34 1a42 	vsub.f32	s2, s8, s4
 800ce7c:	edc0 4a00 	vstr	s9, [r0]
 800ce80:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800ce84:	ee75 4a46 	vsub.f32	s9, s10, s12
 800ce88:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ce8c:	ed87 1a01 	vstr	s2, [r7, #4]
 800ce90:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800ce94:	441f      	add	r7, r3
 800ce96:	ee32 4a04 	vadd.f32	s8, s4, s8
 800ce9a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800ce9e:	ee36 6a05 	vadd.f32	s12, s12, s10
 800cea2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cea6:	ed80 4a01 	vstr	s8, [r0, #4]
 800ceaa:	ed86 3a00 	vstr	s6, [r6]
 800ceae:	4418      	add	r0, r3
 800ceb0:	ed41 1a01 	vstr	s3, [r1, #-4]
 800ceb4:	ed42 3a01 	vstr	s7, [r2, #-4]
 800ceb8:	edc5 7a00 	vstr	s15, [r5]
 800cebc:	edc6 4a01 	vstr	s9, [r6, #4]
 800cec0:	441e      	add	r6, r3
 800cec2:	ed81 6a00 	vstr	s12, [r1]
 800cec6:	4419      	add	r1, r3
 800cec8:	edc2 5a00 	vstr	s11, [r2]
 800cecc:	441a      	add	r2, r3
 800cece:	ed85 7a01 	vstr	s14, [r5, #4]
 800ced2:	441d      	add	r5, r3
 800ced4:	f63f af44 	bhi.w	800cd60 <arm_radix8_butterfly_f32+0x70>
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cedc:	2b07      	cmp	r3, #7
 800cede:	f240 81f4 	bls.w	800d2ca <arm_radix8_butterfly_f32+0x5da>
 800cee2:	9901      	ldr	r1, [sp, #4]
 800cee4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800cee8:	9d02      	ldr	r5, [sp, #8]
 800ceea:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800ceee:	3101      	adds	r1, #1
 800cef0:	eb04 000e 	add.w	r0, r4, lr
 800cef4:	00e4      	lsls	r4, r4, #3
 800cef6:	3508      	adds	r5, #8
 800cef8:	4419      	add	r1, r3
 800cefa:	eb00 0c0e 	add.w	ip, r0, lr
 800cefe:	9413      	str	r4, [sp, #76]	; 0x4c
 800cf00:	00c0      	lsls	r0, r0, #3
 800cf02:	185e      	adds	r6, r3, r1
 800cf04:	4617      	mov	r7, r2
 800cf06:	9218      	str	r2, [sp, #96]	; 0x60
 800cf08:	f109 0908 	add.w	r9, r9, #8
 800cf0c:	199c      	adds	r4, r3, r6
 800cf0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cf12:	9012      	str	r0, [sp, #72]	; 0x48
 800cf14:	195d      	adds	r5, r3, r5
 800cf16:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cf18:	443a      	add	r2, r7
 800cf1a:	950c      	str	r5, [sp, #48]	; 0x30
 800cf1c:	4698      	mov	r8, r3
 800cf1e:	4420      	add	r0, r4
 800cf20:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800cf22:	19d7      	adds	r7, r2, r7
 800cf24:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800cf28:	4405      	add	r5, r0
 800cf2a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800cf2e:	9710      	str	r7, [sp, #64]	; 0x40
 800cf30:	eb0c 070e 	add.w	r7, ip, lr
 800cf34:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800cf38:	3404      	adds	r4, #4
 800cf3a:	3004      	adds	r0, #4
 800cf3c:	44c8      	add	r8, r9
 800cf3e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800cf42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf44:	940a      	str	r4, [sp, #40]	; 0x28
 800cf46:	9009      	str	r0, [sp, #36]	; 0x24
 800cf48:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cf4c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800cf4e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cf52:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cf54:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800cf58:	eb07 080e 	add.w	r8, r7, lr
 800cf5c:	eb04 0900 	add.w	r9, r4, r0
 800cf60:	00f8      	lsls	r0, r7, #3
 800cf62:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800cf66:	3504      	adds	r5, #4
 800cf68:	4607      	mov	r7, r0
 800cf6a:	9017      	str	r0, [sp, #92]	; 0x5c
 800cf6c:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf6e:	4618      	mov	r0, r3
 800cf70:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800cf74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf76:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800cf7a:	18e3      	adds	r3, r4, r3
 800cf7c:	9508      	str	r5, [sp, #32]
 800cf7e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800cf80:	910e      	str	r1, [sp, #56]	; 0x38
 800cf82:	4621      	mov	r1, r4
 800cf84:	eb04 0805 	add.w	r8, r4, r5
 800cf88:	9304      	str	r3, [sp, #16]
 800cf8a:	19e5      	adds	r5, r4, r7
 800cf8c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800cf90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800cf92:	9316      	str	r3, [sp, #88]	; 0x58
 800cf94:	190b      	adds	r3, r1, r4
 800cf96:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800cf98:	9505      	str	r5, [sp, #20]
 800cf9a:	9303      	str	r3, [sp, #12]
 800cf9c:	f100 0308 	add.w	r3, r0, #8
 800cfa0:	9707      	str	r7, [sp, #28]
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	9306      	str	r3, [sp, #24]
 800cfaa:	9b00      	ldr	r3, [sp, #0]
 800cfac:	ed90 fa00 	vldr	s30, [r0]
 800cfb0:	edd0 ba01 	vldr	s23, [r0, #4]
 800cfb4:	9803      	ldr	r0, [sp, #12]
 800cfb6:	9903      	ldr	r1, [sp, #12]
 800cfb8:	ed90 ba01 	vldr	s22, [r0, #4]
 800cfbc:	9804      	ldr	r0, [sp, #16]
 800cfbe:	edd1 ea00 	vldr	s29, [r1]
 800cfc2:	edd0 aa01 	vldr	s21, [r0, #4]
 800cfc6:	9805      	ldr	r0, [sp, #20]
 800cfc8:	9905      	ldr	r1, [sp, #20]
 800cfca:	edd0 7a01 	vldr	s15, [r0, #4]
 800cfce:	ed91 da00 	vldr	s26, [r1]
 800cfd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cfd4:	9c04      	ldr	r4, [sp, #16]
 800cfd6:	edcd 7a01 	vstr	s15, [sp, #4]
 800cfda:	edd8 7a01 	vldr	s15, [r8, #4]
 800cfde:	9100      	str	r1, [sp, #0]
 800cfe0:	edd2 fa00 	vldr	s31, [r2]
 800cfe4:	ed94 ea00 	vldr	s28, [r4]
 800cfe8:	ed92 ca01 	vldr	s24, [r2, #4]
 800cfec:	f8dd e020 	ldr.w	lr, [sp, #32]
 800cff0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cff2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cff4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cff6:	edd9 da00 	vldr	s27, [r9]
 800cffa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cffc:	edd8 ca00 	vldr	s25, [r8]
 800d000:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d002:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d004:	f8dd c018 	ldr.w	ip, [sp, #24]
 800d008:	ed99 aa01 	vldr	s20, [r9, #4]
 800d00c:	edcd 7a02 	vstr	s15, [sp, #8]
 800d010:	9800      	ldr	r0, [sp, #0]
 800d012:	e001      	b.n	800d018 <arm_radix8_butterfly_f32+0x328>
 800d014:	3f3504f3 	.word	0x3f3504f3
 800d018:	edd5 3a00 	vldr	s7, [r5]
 800d01c:	44dc      	add	ip, fp
 800d01e:	ed91 7a00 	vldr	s14, [r1]
 800d022:	edd4 8a00 	vldr	s17, [r4]
 800d026:	45e2      	cmp	sl, ip
 800d028:	ed57 7a01 	vldr	s15, [r7, #-4]
 800d02c:	ed90 5a00 	vldr	s10, [r0]
 800d030:	ed56 5a01 	vldr	s11, [r6, #-4]
 800d034:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800d038:	ed92 1a00 	vldr	s2, [r2]
 800d03c:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800d040:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800d044:	ee75 9a25 	vadd.f32	s19, s10, s11
 800d048:	ee31 3a07 	vadd.f32	s6, s2, s14
 800d04c:	ed92 8a01 	vldr	s16, [r2, #4]
 800d050:	ee73 6a84 	vadd.f32	s13, s7, s8
 800d054:	ee75 5a65 	vsub.f32	s11, s10, s11
 800d058:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d05c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800d060:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800d064:	ee75 7a84 	vadd.f32	s15, s11, s8
 800d068:	ee31 1a47 	vsub.f32	s2, s2, s14
 800d06c:	ee31 7a85 	vadd.f32	s14, s3, s10
 800d070:	ee67 7a89 	vmul.f32	s15, s15, s18
 800d074:	ee33 3a46 	vsub.f32	s6, s6, s12
 800d078:	ed82 7a00 	vstr	s14, [r2]
 800d07c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800d080:	ed96 6a00 	vldr	s12, [r6]
 800d084:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800d088:	edd5 3a01 	vldr	s7, [r5, #4]
 800d08c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800d090:	ed90 7a01 	vldr	s14, [r0, #4]
 800d094:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800d098:	edde 4a00 	vldr	s9, [lr]
 800d09c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800d0a0:	ee77 2a46 	vsub.f32	s5, s14, s12
 800d0a4:	edd1 6a01 	vldr	s13, [r1, #4]
 800d0a8:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800d0ac:	edd7 0a00 	vldr	s1, [r7]
 800d0b0:	ee77 5a06 	vadd.f32	s11, s14, s12
 800d0b4:	ed94 7a01 	vldr	s14, [r4, #4]
 800d0b8:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800d0bc:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800d0c0:	ee78 4a66 	vsub.f32	s9, s16, s13
 800d0c4:	ee78 3a26 	vadd.f32	s7, s16, s13
 800d0c8:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800d0cc:	ee77 6a20 	vadd.f32	s13, s14, s1
 800d0d0:	ee24 4a09 	vmul.f32	s8, s8, s18
 800d0d4:	ee37 7a60 	vsub.f32	s14, s14, s1
 800d0d8:	ee20 8a09 	vmul.f32	s16, s0, s18
 800d0dc:	ee75 0a86 	vadd.f32	s1, s11, s12
 800d0e0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800d0e4:	ee62 2a89 	vmul.f32	s5, s5, s18
 800d0e8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800d0ec:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800d0f0:	ee77 7a62 	vsub.f32	s15, s14, s5
 800d0f4:	ee74 5a88 	vadd.f32	s11, s9, s16
 800d0f8:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800d0fc:	ee77 4a22 	vadd.f32	s9, s14, s5
 800d100:	ee71 2a04 	vadd.f32	s5, s2, s8
 800d104:	ee31 7a44 	vsub.f32	s14, s2, s8
 800d108:	ee30 1a60 	vsub.f32	s2, s0, s1
 800d10c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800d110:	ee33 6a46 	vsub.f32	s12, s6, s12
 800d114:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800d118:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800d11c:	ee38 4a68 	vsub.f32	s8, s16, s17
 800d120:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800d124:	ee72 5a25 	vadd.f32	s11, s4, s11
 800d128:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800d12c:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800d130:	ee77 2a27 	vadd.f32	s5, s14, s15
 800d134:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d138:	ee78 7a88 	vadd.f32	s15, s17, s16
 800d13c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800d140:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800d144:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800d148:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800d14c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800d150:	ee70 0a20 	vadd.f32	s1, s0, s1
 800d154:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800d158:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800d15c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800d160:	edc2 0a01 	vstr	s1, [r2, #4]
 800d164:	ee38 8a88 	vadd.f32	s16, s17, s16
 800d168:	441a      	add	r2, r3
 800d16a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800d16e:	ee31 5a45 	vsub.f32	s10, s2, s10
 800d172:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800d176:	ed81 8a00 	vstr	s16, [r1]
 800d17a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800d17e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d182:	ed81 5a01 	vstr	s10, [r1, #4]
 800d186:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800d18a:	edcd 3a00 	vstr	s7, [sp]
 800d18e:	ed9d 5a02 	vldr	s10, [sp, #8]
 800d192:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800d196:	eddd 3a01 	vldr	s7, [sp, #4]
 800d19a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800d19e:	ed84 0a00 	vstr	s0, [r4]
 800d1a2:	ee65 4a24 	vmul.f32	s9, s10, s9
 800d1a6:	ed84 3a01 	vstr	s6, [r4, #4]
 800d1aa:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800d1ae:	ee23 6a86 	vmul.f32	s12, s7, s12
 800d1b2:	eddd 3a00 	vldr	s7, [sp]
 800d1b6:	ee25 5a25 	vmul.f32	s10, s10, s11
 800d1ba:	4419      	add	r1, r3
 800d1bc:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800d1c0:	441c      	add	r4, r3
 800d1c2:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800d1c6:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800d1ca:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800d1ce:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800d1d2:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800d1d6:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800d1da:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800d1de:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800d1e2:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800d1e6:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800d1ea:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800d1ee:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800d1f2:	ee38 8a01 	vadd.f32	s16, s16, s2
 800d1f6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800d1fa:	ee39 5a85 	vadd.f32	s10, s19, s10
 800d1fe:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800d202:	ed07 8a01 	vstr	s16, [r7, #-4]
 800d206:	ee30 0a21 	vadd.f32	s0, s0, s3
 800d20a:	ed87 6a00 	vstr	s12, [r7]
 800d20e:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d212:	edc0 0a00 	vstr	s1, [r0]
 800d216:	ee33 3a28 	vadd.f32	s6, s6, s17
 800d21a:	edc0 3a01 	vstr	s7, [r0, #4]
 800d21e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d222:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800d226:	edce 4a00 	vstr	s9, [lr]
 800d22a:	4418      	add	r0, r3
 800d22c:	ed06 0a01 	vstr	s0, [r6, #-4]
 800d230:	441f      	add	r7, r3
 800d232:	edc6 2a00 	vstr	s5, [r6]
 800d236:	449e      	add	lr, r3
 800d238:	ed85 3a00 	vstr	s6, [r5]
 800d23c:	441e      	add	r6, r3
 800d23e:	ed85 7a01 	vstr	s14, [r5, #4]
 800d242:	441d      	add	r5, r3
 800d244:	f63f aee8 	bhi.w	800d018 <arm_radix8_butterfly_f32+0x328>
 800d248:	9a06      	ldr	r2, [sp, #24]
 800d24a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d24c:	3201      	adds	r2, #1
 800d24e:	4611      	mov	r1, r2
 800d250:	9206      	str	r2, [sp, #24]
 800d252:	9a07      	ldr	r2, [sp, #28]
 800d254:	4402      	add	r2, r0
 800d256:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d258:	9207      	str	r2, [sp, #28]
 800d25a:	9a03      	ldr	r2, [sp, #12]
 800d25c:	4402      	add	r2, r0
 800d25e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d260:	9203      	str	r2, [sp, #12]
 800d262:	9a04      	ldr	r2, [sp, #16]
 800d264:	4402      	add	r2, r0
 800d266:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d268:	9204      	str	r2, [sp, #16]
 800d26a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d26c:	4491      	add	r9, r2
 800d26e:	9a05      	ldr	r2, [sp, #20]
 800d270:	4402      	add	r2, r0
 800d272:	9205      	str	r2, [sp, #20]
 800d274:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d276:	4490      	add	r8, r2
 800d278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d27a:	3208      	adds	r2, #8
 800d27c:	920f      	str	r2, [sp, #60]	; 0x3c
 800d27e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d280:	3208      	adds	r2, #8
 800d282:	920e      	str	r2, [sp, #56]	; 0x38
 800d284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d286:	3208      	adds	r2, #8
 800d288:	920d      	str	r2, [sp, #52]	; 0x34
 800d28a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d28c:	3208      	adds	r2, #8
 800d28e:	920c      	str	r2, [sp, #48]	; 0x30
 800d290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d292:	3208      	adds	r2, #8
 800d294:	920b      	str	r2, [sp, #44]	; 0x2c
 800d296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d298:	3208      	adds	r2, #8
 800d29a:	920a      	str	r2, [sp, #40]	; 0x28
 800d29c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d29e:	3208      	adds	r2, #8
 800d2a0:	9209      	str	r2, [sp, #36]	; 0x24
 800d2a2:	9a08      	ldr	r2, [sp, #32]
 800d2a4:	3208      	adds	r2, #8
 800d2a6:	9208      	str	r2, [sp, #32]
 800d2a8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d2aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d2ac:	4622      	mov	r2, r4
 800d2ae:	4288      	cmp	r0, r1
 800d2b0:	d005      	beq.n	800d2be <arm_radix8_butterfly_f32+0x5ce>
 800d2b2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4401      	add	r1, r0
 800d2b8:	9807      	ldr	r0, [sp, #28]
 800d2ba:	9110      	str	r1, [sp, #64]	; 0x40
 800d2bc:	e676      	b.n	800cfac <arm_radix8_butterfly_f32+0x2bc>
 800d2be:	4683      	mov	fp, r0
 800d2c0:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800d2c4:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800d2c8:	e522      	b.n	800cd10 <arm_radix8_butterfly_f32+0x20>
 800d2ca:	b01d      	add	sp, #116	; 0x74
 800d2cc:	ecbd 8b10 	vpop	{d8-d15}
 800d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d2d4 <__errno>:
 800d2d4:	4b01      	ldr	r3, [pc, #4]	; (800d2dc <__errno+0x8>)
 800d2d6:	6818      	ldr	r0, [r3, #0]
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	24000380 	.word	0x24000380

0800d2e0 <__libc_init_array>:
 800d2e0:	b570      	push	{r4, r5, r6, lr}
 800d2e2:	4d0d      	ldr	r5, [pc, #52]	; (800d318 <__libc_init_array+0x38>)
 800d2e4:	4c0d      	ldr	r4, [pc, #52]	; (800d31c <__libc_init_array+0x3c>)
 800d2e6:	1b64      	subs	r4, r4, r5
 800d2e8:	10a4      	asrs	r4, r4, #2
 800d2ea:	2600      	movs	r6, #0
 800d2ec:	42a6      	cmp	r6, r4
 800d2ee:	d109      	bne.n	800d304 <__libc_init_array+0x24>
 800d2f0:	4d0b      	ldr	r5, [pc, #44]	; (800d320 <__libc_init_array+0x40>)
 800d2f2:	4c0c      	ldr	r4, [pc, #48]	; (800d324 <__libc_init_array+0x44>)
 800d2f4:	f003 ff86 	bl	8011204 <_init>
 800d2f8:	1b64      	subs	r4, r4, r5
 800d2fa:	10a4      	asrs	r4, r4, #2
 800d2fc:	2600      	movs	r6, #0
 800d2fe:	42a6      	cmp	r6, r4
 800d300:	d105      	bne.n	800d30e <__libc_init_array+0x2e>
 800d302:	bd70      	pop	{r4, r5, r6, pc}
 800d304:	f855 3b04 	ldr.w	r3, [r5], #4
 800d308:	4798      	blx	r3
 800d30a:	3601      	adds	r6, #1
 800d30c:	e7ee      	b.n	800d2ec <__libc_init_array+0xc>
 800d30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d312:	4798      	blx	r3
 800d314:	3601      	adds	r6, #1
 800d316:	e7f2      	b.n	800d2fe <__libc_init_array+0x1e>
 800d318:	0801b8f0 	.word	0x0801b8f0
 800d31c:	0801b8f0 	.word	0x0801b8f0
 800d320:	0801b8f0 	.word	0x0801b8f0
 800d324:	0801b8f4 	.word	0x0801b8f4

0800d328 <memcpy>:
 800d328:	440a      	add	r2, r1
 800d32a:	4291      	cmp	r1, r2
 800d32c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d330:	d100      	bne.n	800d334 <memcpy+0xc>
 800d332:	4770      	bx	lr
 800d334:	b510      	push	{r4, lr}
 800d336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d33a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d33e:	4291      	cmp	r1, r2
 800d340:	d1f9      	bne.n	800d336 <memcpy+0xe>
 800d342:	bd10      	pop	{r4, pc}

0800d344 <memset>:
 800d344:	4402      	add	r2, r0
 800d346:	4603      	mov	r3, r0
 800d348:	4293      	cmp	r3, r2
 800d34a:	d100      	bne.n	800d34e <memset+0xa>
 800d34c:	4770      	bx	lr
 800d34e:	f803 1b01 	strb.w	r1, [r3], #1
 800d352:	e7f9      	b.n	800d348 <memset+0x4>

0800d354 <__cvt>:
 800d354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d356:	ed2d 8b02 	vpush	{d8}
 800d35a:	eeb0 8b40 	vmov.f64	d8, d0
 800d35e:	b085      	sub	sp, #20
 800d360:	4617      	mov	r7, r2
 800d362:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d364:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d366:	ee18 2a90 	vmov	r2, s17
 800d36a:	f025 0520 	bic.w	r5, r5, #32
 800d36e:	2a00      	cmp	r2, #0
 800d370:	bfb6      	itet	lt
 800d372:	222d      	movlt	r2, #45	; 0x2d
 800d374:	2200      	movge	r2, #0
 800d376:	eeb1 8b40 	vneglt.f64	d8, d0
 800d37a:	2d46      	cmp	r5, #70	; 0x46
 800d37c:	460c      	mov	r4, r1
 800d37e:	701a      	strb	r2, [r3, #0]
 800d380:	d004      	beq.n	800d38c <__cvt+0x38>
 800d382:	2d45      	cmp	r5, #69	; 0x45
 800d384:	d100      	bne.n	800d388 <__cvt+0x34>
 800d386:	3401      	adds	r4, #1
 800d388:	2102      	movs	r1, #2
 800d38a:	e000      	b.n	800d38e <__cvt+0x3a>
 800d38c:	2103      	movs	r1, #3
 800d38e:	ab03      	add	r3, sp, #12
 800d390:	9301      	str	r3, [sp, #4]
 800d392:	ab02      	add	r3, sp, #8
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	4622      	mov	r2, r4
 800d398:	4633      	mov	r3, r6
 800d39a:	eeb0 0b48 	vmov.f64	d0, d8
 800d39e:	f000 fcd3 	bl	800dd48 <_dtoa_r>
 800d3a2:	2d47      	cmp	r5, #71	; 0x47
 800d3a4:	d109      	bne.n	800d3ba <__cvt+0x66>
 800d3a6:	07fb      	lsls	r3, r7, #31
 800d3a8:	d407      	bmi.n	800d3ba <__cvt+0x66>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3ae:	1a1b      	subs	r3, r3, r0
 800d3b0:	6013      	str	r3, [r2, #0]
 800d3b2:	b005      	add	sp, #20
 800d3b4:	ecbd 8b02 	vpop	{d8}
 800d3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3ba:	2d46      	cmp	r5, #70	; 0x46
 800d3bc:	eb00 0204 	add.w	r2, r0, r4
 800d3c0:	d10c      	bne.n	800d3dc <__cvt+0x88>
 800d3c2:	7803      	ldrb	r3, [r0, #0]
 800d3c4:	2b30      	cmp	r3, #48	; 0x30
 800d3c6:	d107      	bne.n	800d3d8 <__cvt+0x84>
 800d3c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d0:	bf1c      	itt	ne
 800d3d2:	f1c4 0401 	rsbne	r4, r4, #1
 800d3d6:	6034      	strne	r4, [r6, #0]
 800d3d8:	6833      	ldr	r3, [r6, #0]
 800d3da:	441a      	add	r2, r3
 800d3dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e4:	bf08      	it	eq
 800d3e6:	9203      	streq	r2, [sp, #12]
 800d3e8:	2130      	movs	r1, #48	; 0x30
 800d3ea:	9b03      	ldr	r3, [sp, #12]
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d2dc      	bcs.n	800d3aa <__cvt+0x56>
 800d3f0:	1c5c      	adds	r4, r3, #1
 800d3f2:	9403      	str	r4, [sp, #12]
 800d3f4:	7019      	strb	r1, [r3, #0]
 800d3f6:	e7f8      	b.n	800d3ea <__cvt+0x96>

0800d3f8 <__exponent>:
 800d3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2900      	cmp	r1, #0
 800d3fe:	bfb8      	it	lt
 800d400:	4249      	neglt	r1, r1
 800d402:	f803 2b02 	strb.w	r2, [r3], #2
 800d406:	bfb4      	ite	lt
 800d408:	222d      	movlt	r2, #45	; 0x2d
 800d40a:	222b      	movge	r2, #43	; 0x2b
 800d40c:	2909      	cmp	r1, #9
 800d40e:	7042      	strb	r2, [r0, #1]
 800d410:	dd2a      	ble.n	800d468 <__exponent+0x70>
 800d412:	f10d 0407 	add.w	r4, sp, #7
 800d416:	46a4      	mov	ip, r4
 800d418:	270a      	movs	r7, #10
 800d41a:	46a6      	mov	lr, r4
 800d41c:	460a      	mov	r2, r1
 800d41e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d422:	fb07 1516 	mls	r5, r7, r6, r1
 800d426:	3530      	adds	r5, #48	; 0x30
 800d428:	2a63      	cmp	r2, #99	; 0x63
 800d42a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d42e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d432:	4631      	mov	r1, r6
 800d434:	dcf1      	bgt.n	800d41a <__exponent+0x22>
 800d436:	3130      	adds	r1, #48	; 0x30
 800d438:	f1ae 0502 	sub.w	r5, lr, #2
 800d43c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d440:	1c44      	adds	r4, r0, #1
 800d442:	4629      	mov	r1, r5
 800d444:	4561      	cmp	r1, ip
 800d446:	d30a      	bcc.n	800d45e <__exponent+0x66>
 800d448:	f10d 0209 	add.w	r2, sp, #9
 800d44c:	eba2 020e 	sub.w	r2, r2, lr
 800d450:	4565      	cmp	r5, ip
 800d452:	bf88      	it	hi
 800d454:	2200      	movhi	r2, #0
 800d456:	4413      	add	r3, r2
 800d458:	1a18      	subs	r0, r3, r0
 800d45a:	b003      	add	sp, #12
 800d45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d45e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d462:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d466:	e7ed      	b.n	800d444 <__exponent+0x4c>
 800d468:	2330      	movs	r3, #48	; 0x30
 800d46a:	3130      	adds	r1, #48	; 0x30
 800d46c:	7083      	strb	r3, [r0, #2]
 800d46e:	70c1      	strb	r1, [r0, #3]
 800d470:	1d03      	adds	r3, r0, #4
 800d472:	e7f1      	b.n	800d458 <__exponent+0x60>
 800d474:	0000      	movs	r0, r0
	...

0800d478 <_printf_float>:
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	b08b      	sub	sp, #44	; 0x2c
 800d47e:	460c      	mov	r4, r1
 800d480:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d484:	4616      	mov	r6, r2
 800d486:	461f      	mov	r7, r3
 800d488:	4605      	mov	r5, r0
 800d48a:	f001 f9df 	bl	800e84c <_localeconv_r>
 800d48e:	f8d0 b000 	ldr.w	fp, [r0]
 800d492:	4658      	mov	r0, fp
 800d494:	f7f2 ff84 	bl	80003a0 <strlen>
 800d498:	2300      	movs	r3, #0
 800d49a:	9308      	str	r3, [sp, #32]
 800d49c:	f8d8 3000 	ldr.w	r3, [r8]
 800d4a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d4a4:	6822      	ldr	r2, [r4, #0]
 800d4a6:	3307      	adds	r3, #7
 800d4a8:	f023 0307 	bic.w	r3, r3, #7
 800d4ac:	f103 0108 	add.w	r1, r3, #8
 800d4b0:	f8c8 1000 	str.w	r1, [r8]
 800d4b4:	4682      	mov	sl, r0
 800d4b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d4be:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d720 <_printf_float+0x2a8>
 800d4c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d4c6:	eeb0 6bc0 	vabs.f64	d6, d0
 800d4ca:	eeb4 6b47 	vcmp.f64	d6, d7
 800d4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d2:	dd24      	ble.n	800d51e <_printf_float+0xa6>
 800d4d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4dc:	d502      	bpl.n	800d4e4 <_printf_float+0x6c>
 800d4de:	232d      	movs	r3, #45	; 0x2d
 800d4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4e4:	4b90      	ldr	r3, [pc, #576]	; (800d728 <_printf_float+0x2b0>)
 800d4e6:	4891      	ldr	r0, [pc, #580]	; (800d72c <_printf_float+0x2b4>)
 800d4e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d4ec:	bf94      	ite	ls
 800d4ee:	4698      	movls	r8, r3
 800d4f0:	4680      	movhi	r8, r0
 800d4f2:	2303      	movs	r3, #3
 800d4f4:	6123      	str	r3, [r4, #16]
 800d4f6:	f022 0204 	bic.w	r2, r2, #4
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	6022      	str	r2, [r4, #0]
 800d4fe:	9304      	str	r3, [sp, #16]
 800d500:	9700      	str	r7, [sp, #0]
 800d502:	4633      	mov	r3, r6
 800d504:	aa09      	add	r2, sp, #36	; 0x24
 800d506:	4621      	mov	r1, r4
 800d508:	4628      	mov	r0, r5
 800d50a:	f000 f9d3 	bl	800d8b4 <_printf_common>
 800d50e:	3001      	adds	r0, #1
 800d510:	f040 808a 	bne.w	800d628 <_printf_float+0x1b0>
 800d514:	f04f 30ff 	mov.w	r0, #4294967295
 800d518:	b00b      	add	sp, #44	; 0x2c
 800d51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d526:	d709      	bvc.n	800d53c <_printf_float+0xc4>
 800d528:	ee10 3a90 	vmov	r3, s1
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	bfbc      	itt	lt
 800d530:	232d      	movlt	r3, #45	; 0x2d
 800d532:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d536:	487e      	ldr	r0, [pc, #504]	; (800d730 <_printf_float+0x2b8>)
 800d538:	4b7e      	ldr	r3, [pc, #504]	; (800d734 <_printf_float+0x2bc>)
 800d53a:	e7d5      	b.n	800d4e8 <_printf_float+0x70>
 800d53c:	6863      	ldr	r3, [r4, #4]
 800d53e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d542:	9104      	str	r1, [sp, #16]
 800d544:	1c59      	adds	r1, r3, #1
 800d546:	d13c      	bne.n	800d5c2 <_printf_float+0x14a>
 800d548:	2306      	movs	r3, #6
 800d54a:	6063      	str	r3, [r4, #4]
 800d54c:	2300      	movs	r3, #0
 800d54e:	9303      	str	r3, [sp, #12]
 800d550:	ab08      	add	r3, sp, #32
 800d552:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d55a:	ab07      	add	r3, sp, #28
 800d55c:	6861      	ldr	r1, [r4, #4]
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	6022      	str	r2, [r4, #0]
 800d562:	f10d 031b 	add.w	r3, sp, #27
 800d566:	4628      	mov	r0, r5
 800d568:	f7ff fef4 	bl	800d354 <__cvt>
 800d56c:	9b04      	ldr	r3, [sp, #16]
 800d56e:	9907      	ldr	r1, [sp, #28]
 800d570:	2b47      	cmp	r3, #71	; 0x47
 800d572:	4680      	mov	r8, r0
 800d574:	d108      	bne.n	800d588 <_printf_float+0x110>
 800d576:	1cc8      	adds	r0, r1, #3
 800d578:	db02      	blt.n	800d580 <_printf_float+0x108>
 800d57a:	6863      	ldr	r3, [r4, #4]
 800d57c:	4299      	cmp	r1, r3
 800d57e:	dd41      	ble.n	800d604 <_printf_float+0x18c>
 800d580:	f1a9 0902 	sub.w	r9, r9, #2
 800d584:	fa5f f989 	uxtb.w	r9, r9
 800d588:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d58c:	d820      	bhi.n	800d5d0 <_printf_float+0x158>
 800d58e:	3901      	subs	r1, #1
 800d590:	464a      	mov	r2, r9
 800d592:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d596:	9107      	str	r1, [sp, #28]
 800d598:	f7ff ff2e 	bl	800d3f8 <__exponent>
 800d59c:	9a08      	ldr	r2, [sp, #32]
 800d59e:	9004      	str	r0, [sp, #16]
 800d5a0:	1813      	adds	r3, r2, r0
 800d5a2:	2a01      	cmp	r2, #1
 800d5a4:	6123      	str	r3, [r4, #16]
 800d5a6:	dc02      	bgt.n	800d5ae <_printf_float+0x136>
 800d5a8:	6822      	ldr	r2, [r4, #0]
 800d5aa:	07d2      	lsls	r2, r2, #31
 800d5ac:	d501      	bpl.n	800d5b2 <_printf_float+0x13a>
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	6123      	str	r3, [r4, #16]
 800d5b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d0a2      	beq.n	800d500 <_printf_float+0x88>
 800d5ba:	232d      	movs	r3, #45	; 0x2d
 800d5bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c0:	e79e      	b.n	800d500 <_printf_float+0x88>
 800d5c2:	9904      	ldr	r1, [sp, #16]
 800d5c4:	2947      	cmp	r1, #71	; 0x47
 800d5c6:	d1c1      	bne.n	800d54c <_printf_float+0xd4>
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d1bf      	bne.n	800d54c <_printf_float+0xd4>
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e7bc      	b.n	800d54a <_printf_float+0xd2>
 800d5d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d5d4:	d118      	bne.n	800d608 <_printf_float+0x190>
 800d5d6:	2900      	cmp	r1, #0
 800d5d8:	6863      	ldr	r3, [r4, #4]
 800d5da:	dd0b      	ble.n	800d5f4 <_printf_float+0x17c>
 800d5dc:	6121      	str	r1, [r4, #16]
 800d5de:	b913      	cbnz	r3, 800d5e6 <_printf_float+0x16e>
 800d5e0:	6822      	ldr	r2, [r4, #0]
 800d5e2:	07d0      	lsls	r0, r2, #31
 800d5e4:	d502      	bpl.n	800d5ec <_printf_float+0x174>
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	440b      	add	r3, r1
 800d5ea:	6123      	str	r3, [r4, #16]
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800d5f0:	9304      	str	r3, [sp, #16]
 800d5f2:	e7de      	b.n	800d5b2 <_printf_float+0x13a>
 800d5f4:	b913      	cbnz	r3, 800d5fc <_printf_float+0x184>
 800d5f6:	6822      	ldr	r2, [r4, #0]
 800d5f8:	07d2      	lsls	r2, r2, #31
 800d5fa:	d501      	bpl.n	800d600 <_printf_float+0x188>
 800d5fc:	3302      	adds	r3, #2
 800d5fe:	e7f4      	b.n	800d5ea <_printf_float+0x172>
 800d600:	2301      	movs	r3, #1
 800d602:	e7f2      	b.n	800d5ea <_printf_float+0x172>
 800d604:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d608:	9b08      	ldr	r3, [sp, #32]
 800d60a:	4299      	cmp	r1, r3
 800d60c:	db05      	blt.n	800d61a <_printf_float+0x1a2>
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	6121      	str	r1, [r4, #16]
 800d612:	07d8      	lsls	r0, r3, #31
 800d614:	d5ea      	bpl.n	800d5ec <_printf_float+0x174>
 800d616:	1c4b      	adds	r3, r1, #1
 800d618:	e7e7      	b.n	800d5ea <_printf_float+0x172>
 800d61a:	2900      	cmp	r1, #0
 800d61c:	bfd4      	ite	le
 800d61e:	f1c1 0202 	rsble	r2, r1, #2
 800d622:	2201      	movgt	r2, #1
 800d624:	4413      	add	r3, r2
 800d626:	e7e0      	b.n	800d5ea <_printf_float+0x172>
 800d628:	6823      	ldr	r3, [r4, #0]
 800d62a:	055a      	lsls	r2, r3, #21
 800d62c:	d407      	bmi.n	800d63e <_printf_float+0x1c6>
 800d62e:	6923      	ldr	r3, [r4, #16]
 800d630:	4642      	mov	r2, r8
 800d632:	4631      	mov	r1, r6
 800d634:	4628      	mov	r0, r5
 800d636:	47b8      	blx	r7
 800d638:	3001      	adds	r0, #1
 800d63a:	d12a      	bne.n	800d692 <_printf_float+0x21a>
 800d63c:	e76a      	b.n	800d514 <_printf_float+0x9c>
 800d63e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d642:	f240 80e2 	bls.w	800d80a <_printf_float+0x392>
 800d646:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d64a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d652:	d133      	bne.n	800d6bc <_printf_float+0x244>
 800d654:	4a38      	ldr	r2, [pc, #224]	; (800d738 <_printf_float+0x2c0>)
 800d656:	2301      	movs	r3, #1
 800d658:	4631      	mov	r1, r6
 800d65a:	4628      	mov	r0, r5
 800d65c:	47b8      	blx	r7
 800d65e:	3001      	adds	r0, #1
 800d660:	f43f af58 	beq.w	800d514 <_printf_float+0x9c>
 800d664:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d668:	429a      	cmp	r2, r3
 800d66a:	db02      	blt.n	800d672 <_printf_float+0x1fa>
 800d66c:	6823      	ldr	r3, [r4, #0]
 800d66e:	07d8      	lsls	r0, r3, #31
 800d670:	d50f      	bpl.n	800d692 <_printf_float+0x21a>
 800d672:	4653      	mov	r3, sl
 800d674:	465a      	mov	r2, fp
 800d676:	4631      	mov	r1, r6
 800d678:	4628      	mov	r0, r5
 800d67a:	47b8      	blx	r7
 800d67c:	3001      	adds	r0, #1
 800d67e:	f43f af49 	beq.w	800d514 <_printf_float+0x9c>
 800d682:	f04f 0800 	mov.w	r8, #0
 800d686:	f104 091a 	add.w	r9, r4, #26
 800d68a:	9b08      	ldr	r3, [sp, #32]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	4543      	cmp	r3, r8
 800d690:	dc09      	bgt.n	800d6a6 <_printf_float+0x22e>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	079b      	lsls	r3, r3, #30
 800d696:	f100 8108 	bmi.w	800d8aa <_printf_float+0x432>
 800d69a:	68e0      	ldr	r0, [r4, #12]
 800d69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69e:	4298      	cmp	r0, r3
 800d6a0:	bfb8      	it	lt
 800d6a2:	4618      	movlt	r0, r3
 800d6a4:	e738      	b.n	800d518 <_printf_float+0xa0>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	464a      	mov	r2, r9
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	47b8      	blx	r7
 800d6b0:	3001      	adds	r0, #1
 800d6b2:	f43f af2f 	beq.w	800d514 <_printf_float+0x9c>
 800d6b6:	f108 0801 	add.w	r8, r8, #1
 800d6ba:	e7e6      	b.n	800d68a <_printf_float+0x212>
 800d6bc:	9b07      	ldr	r3, [sp, #28]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	dc3c      	bgt.n	800d73c <_printf_float+0x2c4>
 800d6c2:	4a1d      	ldr	r2, [pc, #116]	; (800d738 <_printf_float+0x2c0>)
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	47b8      	blx	r7
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	f43f af21 	beq.w	800d514 <_printf_float+0x9c>
 800d6d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	d102      	bne.n	800d6e0 <_printf_float+0x268>
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	07d9      	lsls	r1, r3, #31
 800d6de:	d5d8      	bpl.n	800d692 <_printf_float+0x21a>
 800d6e0:	4653      	mov	r3, sl
 800d6e2:	465a      	mov	r2, fp
 800d6e4:	4631      	mov	r1, r6
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	47b8      	blx	r7
 800d6ea:	3001      	adds	r0, #1
 800d6ec:	f43f af12 	beq.w	800d514 <_printf_float+0x9c>
 800d6f0:	f04f 0900 	mov.w	r9, #0
 800d6f4:	f104 0a1a 	add.w	sl, r4, #26
 800d6f8:	9b07      	ldr	r3, [sp, #28]
 800d6fa:	425b      	negs	r3, r3
 800d6fc:	454b      	cmp	r3, r9
 800d6fe:	dc01      	bgt.n	800d704 <_printf_float+0x28c>
 800d700:	9b08      	ldr	r3, [sp, #32]
 800d702:	e795      	b.n	800d630 <_printf_float+0x1b8>
 800d704:	2301      	movs	r3, #1
 800d706:	4652      	mov	r2, sl
 800d708:	4631      	mov	r1, r6
 800d70a:	4628      	mov	r0, r5
 800d70c:	47b8      	blx	r7
 800d70e:	3001      	adds	r0, #1
 800d710:	f43f af00 	beq.w	800d514 <_printf_float+0x9c>
 800d714:	f109 0901 	add.w	r9, r9, #1
 800d718:	e7ee      	b.n	800d6f8 <_printf_float+0x280>
 800d71a:	bf00      	nop
 800d71c:	f3af 8000 	nop.w
 800d720:	ffffffff 	.word	0xffffffff
 800d724:	7fefffff 	.word	0x7fefffff
 800d728:	0801a230 	.word	0x0801a230
 800d72c:	0801a234 	.word	0x0801a234
 800d730:	0801a23c 	.word	0x0801a23c
 800d734:	0801a238 	.word	0x0801a238
 800d738:	0801a240 	.word	0x0801a240
 800d73c:	9a08      	ldr	r2, [sp, #32]
 800d73e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d740:	429a      	cmp	r2, r3
 800d742:	bfa8      	it	ge
 800d744:	461a      	movge	r2, r3
 800d746:	2a00      	cmp	r2, #0
 800d748:	4691      	mov	r9, r2
 800d74a:	dc38      	bgt.n	800d7be <_printf_float+0x346>
 800d74c:	2300      	movs	r3, #0
 800d74e:	9305      	str	r3, [sp, #20]
 800d750:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d754:	f104 021a 	add.w	r2, r4, #26
 800d758:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d75a:	9905      	ldr	r1, [sp, #20]
 800d75c:	9304      	str	r3, [sp, #16]
 800d75e:	eba3 0309 	sub.w	r3, r3, r9
 800d762:	428b      	cmp	r3, r1
 800d764:	dc33      	bgt.n	800d7ce <_printf_float+0x356>
 800d766:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	db3c      	blt.n	800d7e8 <_printf_float+0x370>
 800d76e:	6823      	ldr	r3, [r4, #0]
 800d770:	07da      	lsls	r2, r3, #31
 800d772:	d439      	bmi.n	800d7e8 <_printf_float+0x370>
 800d774:	9a08      	ldr	r2, [sp, #32]
 800d776:	9b04      	ldr	r3, [sp, #16]
 800d778:	9907      	ldr	r1, [sp, #28]
 800d77a:	1ad3      	subs	r3, r2, r3
 800d77c:	eba2 0901 	sub.w	r9, r2, r1
 800d780:	4599      	cmp	r9, r3
 800d782:	bfa8      	it	ge
 800d784:	4699      	movge	r9, r3
 800d786:	f1b9 0f00 	cmp.w	r9, #0
 800d78a:	dc35      	bgt.n	800d7f8 <_printf_float+0x380>
 800d78c:	f04f 0800 	mov.w	r8, #0
 800d790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d794:	f104 0a1a 	add.w	sl, r4, #26
 800d798:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d79c:	1a9b      	subs	r3, r3, r2
 800d79e:	eba3 0309 	sub.w	r3, r3, r9
 800d7a2:	4543      	cmp	r3, r8
 800d7a4:	f77f af75 	ble.w	800d692 <_printf_float+0x21a>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	4652      	mov	r2, sl
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	47b8      	blx	r7
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	f43f aeae 	beq.w	800d514 <_printf_float+0x9c>
 800d7b8:	f108 0801 	add.w	r8, r8, #1
 800d7bc:	e7ec      	b.n	800d798 <_printf_float+0x320>
 800d7be:	4613      	mov	r3, r2
 800d7c0:	4631      	mov	r1, r6
 800d7c2:	4642      	mov	r2, r8
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	47b8      	blx	r7
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	d1bf      	bne.n	800d74c <_printf_float+0x2d4>
 800d7cc:	e6a2      	b.n	800d514 <_printf_float+0x9c>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	4631      	mov	r1, r6
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	9204      	str	r2, [sp, #16]
 800d7d6:	47b8      	blx	r7
 800d7d8:	3001      	adds	r0, #1
 800d7da:	f43f ae9b 	beq.w	800d514 <_printf_float+0x9c>
 800d7de:	9b05      	ldr	r3, [sp, #20]
 800d7e0:	9a04      	ldr	r2, [sp, #16]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	9305      	str	r3, [sp, #20]
 800d7e6:	e7b7      	b.n	800d758 <_printf_float+0x2e0>
 800d7e8:	4653      	mov	r3, sl
 800d7ea:	465a      	mov	r2, fp
 800d7ec:	4631      	mov	r1, r6
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	47b8      	blx	r7
 800d7f2:	3001      	adds	r0, #1
 800d7f4:	d1be      	bne.n	800d774 <_printf_float+0x2fc>
 800d7f6:	e68d      	b.n	800d514 <_printf_float+0x9c>
 800d7f8:	9a04      	ldr	r2, [sp, #16]
 800d7fa:	464b      	mov	r3, r9
 800d7fc:	4442      	add	r2, r8
 800d7fe:	4631      	mov	r1, r6
 800d800:	4628      	mov	r0, r5
 800d802:	47b8      	blx	r7
 800d804:	3001      	adds	r0, #1
 800d806:	d1c1      	bne.n	800d78c <_printf_float+0x314>
 800d808:	e684      	b.n	800d514 <_printf_float+0x9c>
 800d80a:	9a08      	ldr	r2, [sp, #32]
 800d80c:	2a01      	cmp	r2, #1
 800d80e:	dc01      	bgt.n	800d814 <_printf_float+0x39c>
 800d810:	07db      	lsls	r3, r3, #31
 800d812:	d537      	bpl.n	800d884 <_printf_float+0x40c>
 800d814:	2301      	movs	r3, #1
 800d816:	4642      	mov	r2, r8
 800d818:	4631      	mov	r1, r6
 800d81a:	4628      	mov	r0, r5
 800d81c:	47b8      	blx	r7
 800d81e:	3001      	adds	r0, #1
 800d820:	f43f ae78 	beq.w	800d514 <_printf_float+0x9c>
 800d824:	4653      	mov	r3, sl
 800d826:	465a      	mov	r2, fp
 800d828:	4631      	mov	r1, r6
 800d82a:	4628      	mov	r0, r5
 800d82c:	47b8      	blx	r7
 800d82e:	3001      	adds	r0, #1
 800d830:	f43f ae70 	beq.w	800d514 <_printf_float+0x9c>
 800d834:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d838:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d840:	d01b      	beq.n	800d87a <_printf_float+0x402>
 800d842:	9b08      	ldr	r3, [sp, #32]
 800d844:	f108 0201 	add.w	r2, r8, #1
 800d848:	3b01      	subs	r3, #1
 800d84a:	4631      	mov	r1, r6
 800d84c:	4628      	mov	r0, r5
 800d84e:	47b8      	blx	r7
 800d850:	3001      	adds	r0, #1
 800d852:	d10e      	bne.n	800d872 <_printf_float+0x3fa>
 800d854:	e65e      	b.n	800d514 <_printf_float+0x9c>
 800d856:	2301      	movs	r3, #1
 800d858:	464a      	mov	r2, r9
 800d85a:	4631      	mov	r1, r6
 800d85c:	4628      	mov	r0, r5
 800d85e:	47b8      	blx	r7
 800d860:	3001      	adds	r0, #1
 800d862:	f43f ae57 	beq.w	800d514 <_printf_float+0x9c>
 800d866:	f108 0801 	add.w	r8, r8, #1
 800d86a:	9b08      	ldr	r3, [sp, #32]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	4543      	cmp	r3, r8
 800d870:	dcf1      	bgt.n	800d856 <_printf_float+0x3de>
 800d872:	9b04      	ldr	r3, [sp, #16]
 800d874:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d878:	e6db      	b.n	800d632 <_printf_float+0x1ba>
 800d87a:	f04f 0800 	mov.w	r8, #0
 800d87e:	f104 091a 	add.w	r9, r4, #26
 800d882:	e7f2      	b.n	800d86a <_printf_float+0x3f2>
 800d884:	2301      	movs	r3, #1
 800d886:	4642      	mov	r2, r8
 800d888:	e7df      	b.n	800d84a <_printf_float+0x3d2>
 800d88a:	2301      	movs	r3, #1
 800d88c:	464a      	mov	r2, r9
 800d88e:	4631      	mov	r1, r6
 800d890:	4628      	mov	r0, r5
 800d892:	47b8      	blx	r7
 800d894:	3001      	adds	r0, #1
 800d896:	f43f ae3d 	beq.w	800d514 <_printf_float+0x9c>
 800d89a:	f108 0801 	add.w	r8, r8, #1
 800d89e:	68e3      	ldr	r3, [r4, #12]
 800d8a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8a2:	1a5b      	subs	r3, r3, r1
 800d8a4:	4543      	cmp	r3, r8
 800d8a6:	dcf0      	bgt.n	800d88a <_printf_float+0x412>
 800d8a8:	e6f7      	b.n	800d69a <_printf_float+0x222>
 800d8aa:	f04f 0800 	mov.w	r8, #0
 800d8ae:	f104 0919 	add.w	r9, r4, #25
 800d8b2:	e7f4      	b.n	800d89e <_printf_float+0x426>

0800d8b4 <_printf_common>:
 800d8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b8:	4616      	mov	r6, r2
 800d8ba:	4699      	mov	r9, r3
 800d8bc:	688a      	ldr	r2, [r1, #8]
 800d8be:	690b      	ldr	r3, [r1, #16]
 800d8c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	bfb8      	it	lt
 800d8c8:	4613      	movlt	r3, r2
 800d8ca:	6033      	str	r3, [r6, #0]
 800d8cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8d0:	4607      	mov	r7, r0
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	b10a      	cbz	r2, 800d8da <_printf_common+0x26>
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	6033      	str	r3, [r6, #0]
 800d8da:	6823      	ldr	r3, [r4, #0]
 800d8dc:	0699      	lsls	r1, r3, #26
 800d8de:	bf42      	ittt	mi
 800d8e0:	6833      	ldrmi	r3, [r6, #0]
 800d8e2:	3302      	addmi	r3, #2
 800d8e4:	6033      	strmi	r3, [r6, #0]
 800d8e6:	6825      	ldr	r5, [r4, #0]
 800d8e8:	f015 0506 	ands.w	r5, r5, #6
 800d8ec:	d106      	bne.n	800d8fc <_printf_common+0x48>
 800d8ee:	f104 0a19 	add.w	sl, r4, #25
 800d8f2:	68e3      	ldr	r3, [r4, #12]
 800d8f4:	6832      	ldr	r2, [r6, #0]
 800d8f6:	1a9b      	subs	r3, r3, r2
 800d8f8:	42ab      	cmp	r3, r5
 800d8fa:	dc26      	bgt.n	800d94a <_printf_common+0x96>
 800d8fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d900:	1e13      	subs	r3, r2, #0
 800d902:	6822      	ldr	r2, [r4, #0]
 800d904:	bf18      	it	ne
 800d906:	2301      	movne	r3, #1
 800d908:	0692      	lsls	r2, r2, #26
 800d90a:	d42b      	bmi.n	800d964 <_printf_common+0xb0>
 800d90c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d910:	4649      	mov	r1, r9
 800d912:	4638      	mov	r0, r7
 800d914:	47c0      	blx	r8
 800d916:	3001      	adds	r0, #1
 800d918:	d01e      	beq.n	800d958 <_printf_common+0xa4>
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	68e5      	ldr	r5, [r4, #12]
 800d91e:	6832      	ldr	r2, [r6, #0]
 800d920:	f003 0306 	and.w	r3, r3, #6
 800d924:	2b04      	cmp	r3, #4
 800d926:	bf08      	it	eq
 800d928:	1aad      	subeq	r5, r5, r2
 800d92a:	68a3      	ldr	r3, [r4, #8]
 800d92c:	6922      	ldr	r2, [r4, #16]
 800d92e:	bf0c      	ite	eq
 800d930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d934:	2500      	movne	r5, #0
 800d936:	4293      	cmp	r3, r2
 800d938:	bfc4      	itt	gt
 800d93a:	1a9b      	subgt	r3, r3, r2
 800d93c:	18ed      	addgt	r5, r5, r3
 800d93e:	2600      	movs	r6, #0
 800d940:	341a      	adds	r4, #26
 800d942:	42b5      	cmp	r5, r6
 800d944:	d11a      	bne.n	800d97c <_printf_common+0xc8>
 800d946:	2000      	movs	r0, #0
 800d948:	e008      	b.n	800d95c <_printf_common+0xa8>
 800d94a:	2301      	movs	r3, #1
 800d94c:	4652      	mov	r2, sl
 800d94e:	4649      	mov	r1, r9
 800d950:	4638      	mov	r0, r7
 800d952:	47c0      	blx	r8
 800d954:	3001      	adds	r0, #1
 800d956:	d103      	bne.n	800d960 <_printf_common+0xac>
 800d958:	f04f 30ff 	mov.w	r0, #4294967295
 800d95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d960:	3501      	adds	r5, #1
 800d962:	e7c6      	b.n	800d8f2 <_printf_common+0x3e>
 800d964:	18e1      	adds	r1, r4, r3
 800d966:	1c5a      	adds	r2, r3, #1
 800d968:	2030      	movs	r0, #48	; 0x30
 800d96a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d96e:	4422      	add	r2, r4
 800d970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d978:	3302      	adds	r3, #2
 800d97a:	e7c7      	b.n	800d90c <_printf_common+0x58>
 800d97c:	2301      	movs	r3, #1
 800d97e:	4622      	mov	r2, r4
 800d980:	4649      	mov	r1, r9
 800d982:	4638      	mov	r0, r7
 800d984:	47c0      	blx	r8
 800d986:	3001      	adds	r0, #1
 800d988:	d0e6      	beq.n	800d958 <_printf_common+0xa4>
 800d98a:	3601      	adds	r6, #1
 800d98c:	e7d9      	b.n	800d942 <_printf_common+0x8e>
	...

0800d990 <_printf_i>:
 800d990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d994:	460c      	mov	r4, r1
 800d996:	4691      	mov	r9, r2
 800d998:	7e27      	ldrb	r7, [r4, #24]
 800d99a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d99c:	2f78      	cmp	r7, #120	; 0x78
 800d99e:	4680      	mov	r8, r0
 800d9a0:	469a      	mov	sl, r3
 800d9a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9a6:	d807      	bhi.n	800d9b8 <_printf_i+0x28>
 800d9a8:	2f62      	cmp	r7, #98	; 0x62
 800d9aa:	d80a      	bhi.n	800d9c2 <_printf_i+0x32>
 800d9ac:	2f00      	cmp	r7, #0
 800d9ae:	f000 80d8 	beq.w	800db62 <_printf_i+0x1d2>
 800d9b2:	2f58      	cmp	r7, #88	; 0x58
 800d9b4:	f000 80a3 	beq.w	800dafe <_printf_i+0x16e>
 800d9b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d9bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9c0:	e03a      	b.n	800da38 <_printf_i+0xa8>
 800d9c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9c6:	2b15      	cmp	r3, #21
 800d9c8:	d8f6      	bhi.n	800d9b8 <_printf_i+0x28>
 800d9ca:	a001      	add	r0, pc, #4	; (adr r0, 800d9d0 <_printf_i+0x40>)
 800d9cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d9d0:	0800da29 	.word	0x0800da29
 800d9d4:	0800da3d 	.word	0x0800da3d
 800d9d8:	0800d9b9 	.word	0x0800d9b9
 800d9dc:	0800d9b9 	.word	0x0800d9b9
 800d9e0:	0800d9b9 	.word	0x0800d9b9
 800d9e4:	0800d9b9 	.word	0x0800d9b9
 800d9e8:	0800da3d 	.word	0x0800da3d
 800d9ec:	0800d9b9 	.word	0x0800d9b9
 800d9f0:	0800d9b9 	.word	0x0800d9b9
 800d9f4:	0800d9b9 	.word	0x0800d9b9
 800d9f8:	0800d9b9 	.word	0x0800d9b9
 800d9fc:	0800db49 	.word	0x0800db49
 800da00:	0800da6d 	.word	0x0800da6d
 800da04:	0800db2b 	.word	0x0800db2b
 800da08:	0800d9b9 	.word	0x0800d9b9
 800da0c:	0800d9b9 	.word	0x0800d9b9
 800da10:	0800db6b 	.word	0x0800db6b
 800da14:	0800d9b9 	.word	0x0800d9b9
 800da18:	0800da6d 	.word	0x0800da6d
 800da1c:	0800d9b9 	.word	0x0800d9b9
 800da20:	0800d9b9 	.word	0x0800d9b9
 800da24:	0800db33 	.word	0x0800db33
 800da28:	680b      	ldr	r3, [r1, #0]
 800da2a:	1d1a      	adds	r2, r3, #4
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	600a      	str	r2, [r1, #0]
 800da30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800da34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da38:	2301      	movs	r3, #1
 800da3a:	e0a3      	b.n	800db84 <_printf_i+0x1f4>
 800da3c:	6825      	ldr	r5, [r4, #0]
 800da3e:	6808      	ldr	r0, [r1, #0]
 800da40:	062e      	lsls	r6, r5, #24
 800da42:	f100 0304 	add.w	r3, r0, #4
 800da46:	d50a      	bpl.n	800da5e <_printf_i+0xce>
 800da48:	6805      	ldr	r5, [r0, #0]
 800da4a:	600b      	str	r3, [r1, #0]
 800da4c:	2d00      	cmp	r5, #0
 800da4e:	da03      	bge.n	800da58 <_printf_i+0xc8>
 800da50:	232d      	movs	r3, #45	; 0x2d
 800da52:	426d      	negs	r5, r5
 800da54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da58:	485e      	ldr	r0, [pc, #376]	; (800dbd4 <_printf_i+0x244>)
 800da5a:	230a      	movs	r3, #10
 800da5c:	e019      	b.n	800da92 <_printf_i+0x102>
 800da5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800da62:	6805      	ldr	r5, [r0, #0]
 800da64:	600b      	str	r3, [r1, #0]
 800da66:	bf18      	it	ne
 800da68:	b22d      	sxthne	r5, r5
 800da6a:	e7ef      	b.n	800da4c <_printf_i+0xbc>
 800da6c:	680b      	ldr	r3, [r1, #0]
 800da6e:	6825      	ldr	r5, [r4, #0]
 800da70:	1d18      	adds	r0, r3, #4
 800da72:	6008      	str	r0, [r1, #0]
 800da74:	0628      	lsls	r0, r5, #24
 800da76:	d501      	bpl.n	800da7c <_printf_i+0xec>
 800da78:	681d      	ldr	r5, [r3, #0]
 800da7a:	e002      	b.n	800da82 <_printf_i+0xf2>
 800da7c:	0669      	lsls	r1, r5, #25
 800da7e:	d5fb      	bpl.n	800da78 <_printf_i+0xe8>
 800da80:	881d      	ldrh	r5, [r3, #0]
 800da82:	4854      	ldr	r0, [pc, #336]	; (800dbd4 <_printf_i+0x244>)
 800da84:	2f6f      	cmp	r7, #111	; 0x6f
 800da86:	bf0c      	ite	eq
 800da88:	2308      	moveq	r3, #8
 800da8a:	230a      	movne	r3, #10
 800da8c:	2100      	movs	r1, #0
 800da8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da92:	6866      	ldr	r6, [r4, #4]
 800da94:	60a6      	str	r6, [r4, #8]
 800da96:	2e00      	cmp	r6, #0
 800da98:	bfa2      	ittt	ge
 800da9a:	6821      	ldrge	r1, [r4, #0]
 800da9c:	f021 0104 	bicge.w	r1, r1, #4
 800daa0:	6021      	strge	r1, [r4, #0]
 800daa2:	b90d      	cbnz	r5, 800daa8 <_printf_i+0x118>
 800daa4:	2e00      	cmp	r6, #0
 800daa6:	d04d      	beq.n	800db44 <_printf_i+0x1b4>
 800daa8:	4616      	mov	r6, r2
 800daaa:	fbb5 f1f3 	udiv	r1, r5, r3
 800daae:	fb03 5711 	mls	r7, r3, r1, r5
 800dab2:	5dc7      	ldrb	r7, [r0, r7]
 800dab4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dab8:	462f      	mov	r7, r5
 800daba:	42bb      	cmp	r3, r7
 800dabc:	460d      	mov	r5, r1
 800dabe:	d9f4      	bls.n	800daaa <_printf_i+0x11a>
 800dac0:	2b08      	cmp	r3, #8
 800dac2:	d10b      	bne.n	800dadc <_printf_i+0x14c>
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	07df      	lsls	r7, r3, #31
 800dac8:	d508      	bpl.n	800dadc <_printf_i+0x14c>
 800daca:	6923      	ldr	r3, [r4, #16]
 800dacc:	6861      	ldr	r1, [r4, #4]
 800dace:	4299      	cmp	r1, r3
 800dad0:	bfde      	ittt	le
 800dad2:	2330      	movle	r3, #48	; 0x30
 800dad4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dad8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dadc:	1b92      	subs	r2, r2, r6
 800dade:	6122      	str	r2, [r4, #16]
 800dae0:	f8cd a000 	str.w	sl, [sp]
 800dae4:	464b      	mov	r3, r9
 800dae6:	aa03      	add	r2, sp, #12
 800dae8:	4621      	mov	r1, r4
 800daea:	4640      	mov	r0, r8
 800daec:	f7ff fee2 	bl	800d8b4 <_printf_common>
 800daf0:	3001      	adds	r0, #1
 800daf2:	d14c      	bne.n	800db8e <_printf_i+0x1fe>
 800daf4:	f04f 30ff 	mov.w	r0, #4294967295
 800daf8:	b004      	add	sp, #16
 800dafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dafe:	4835      	ldr	r0, [pc, #212]	; (800dbd4 <_printf_i+0x244>)
 800db00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db04:	6823      	ldr	r3, [r4, #0]
 800db06:	680e      	ldr	r6, [r1, #0]
 800db08:	061f      	lsls	r7, r3, #24
 800db0a:	f856 5b04 	ldr.w	r5, [r6], #4
 800db0e:	600e      	str	r6, [r1, #0]
 800db10:	d514      	bpl.n	800db3c <_printf_i+0x1ac>
 800db12:	07d9      	lsls	r1, r3, #31
 800db14:	bf44      	itt	mi
 800db16:	f043 0320 	orrmi.w	r3, r3, #32
 800db1a:	6023      	strmi	r3, [r4, #0]
 800db1c:	b91d      	cbnz	r5, 800db26 <_printf_i+0x196>
 800db1e:	6823      	ldr	r3, [r4, #0]
 800db20:	f023 0320 	bic.w	r3, r3, #32
 800db24:	6023      	str	r3, [r4, #0]
 800db26:	2310      	movs	r3, #16
 800db28:	e7b0      	b.n	800da8c <_printf_i+0xfc>
 800db2a:	6823      	ldr	r3, [r4, #0]
 800db2c:	f043 0320 	orr.w	r3, r3, #32
 800db30:	6023      	str	r3, [r4, #0]
 800db32:	2378      	movs	r3, #120	; 0x78
 800db34:	4828      	ldr	r0, [pc, #160]	; (800dbd8 <_printf_i+0x248>)
 800db36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db3a:	e7e3      	b.n	800db04 <_printf_i+0x174>
 800db3c:	065e      	lsls	r6, r3, #25
 800db3e:	bf48      	it	mi
 800db40:	b2ad      	uxthmi	r5, r5
 800db42:	e7e6      	b.n	800db12 <_printf_i+0x182>
 800db44:	4616      	mov	r6, r2
 800db46:	e7bb      	b.n	800dac0 <_printf_i+0x130>
 800db48:	680b      	ldr	r3, [r1, #0]
 800db4a:	6826      	ldr	r6, [r4, #0]
 800db4c:	6960      	ldr	r0, [r4, #20]
 800db4e:	1d1d      	adds	r5, r3, #4
 800db50:	600d      	str	r5, [r1, #0]
 800db52:	0635      	lsls	r5, r6, #24
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	d501      	bpl.n	800db5c <_printf_i+0x1cc>
 800db58:	6018      	str	r0, [r3, #0]
 800db5a:	e002      	b.n	800db62 <_printf_i+0x1d2>
 800db5c:	0671      	lsls	r1, r6, #25
 800db5e:	d5fb      	bpl.n	800db58 <_printf_i+0x1c8>
 800db60:	8018      	strh	r0, [r3, #0]
 800db62:	2300      	movs	r3, #0
 800db64:	6123      	str	r3, [r4, #16]
 800db66:	4616      	mov	r6, r2
 800db68:	e7ba      	b.n	800dae0 <_printf_i+0x150>
 800db6a:	680b      	ldr	r3, [r1, #0]
 800db6c:	1d1a      	adds	r2, r3, #4
 800db6e:	600a      	str	r2, [r1, #0]
 800db70:	681e      	ldr	r6, [r3, #0]
 800db72:	6862      	ldr	r2, [r4, #4]
 800db74:	2100      	movs	r1, #0
 800db76:	4630      	mov	r0, r6
 800db78:	f7f2 fc1a 	bl	80003b0 <memchr>
 800db7c:	b108      	cbz	r0, 800db82 <_printf_i+0x1f2>
 800db7e:	1b80      	subs	r0, r0, r6
 800db80:	6060      	str	r0, [r4, #4]
 800db82:	6863      	ldr	r3, [r4, #4]
 800db84:	6123      	str	r3, [r4, #16]
 800db86:	2300      	movs	r3, #0
 800db88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db8c:	e7a8      	b.n	800dae0 <_printf_i+0x150>
 800db8e:	6923      	ldr	r3, [r4, #16]
 800db90:	4632      	mov	r2, r6
 800db92:	4649      	mov	r1, r9
 800db94:	4640      	mov	r0, r8
 800db96:	47d0      	blx	sl
 800db98:	3001      	adds	r0, #1
 800db9a:	d0ab      	beq.n	800daf4 <_printf_i+0x164>
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	079b      	lsls	r3, r3, #30
 800dba0:	d413      	bmi.n	800dbca <_printf_i+0x23a>
 800dba2:	68e0      	ldr	r0, [r4, #12]
 800dba4:	9b03      	ldr	r3, [sp, #12]
 800dba6:	4298      	cmp	r0, r3
 800dba8:	bfb8      	it	lt
 800dbaa:	4618      	movlt	r0, r3
 800dbac:	e7a4      	b.n	800daf8 <_printf_i+0x168>
 800dbae:	2301      	movs	r3, #1
 800dbb0:	4632      	mov	r2, r6
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	4640      	mov	r0, r8
 800dbb6:	47d0      	blx	sl
 800dbb8:	3001      	adds	r0, #1
 800dbba:	d09b      	beq.n	800daf4 <_printf_i+0x164>
 800dbbc:	3501      	adds	r5, #1
 800dbbe:	68e3      	ldr	r3, [r4, #12]
 800dbc0:	9903      	ldr	r1, [sp, #12]
 800dbc2:	1a5b      	subs	r3, r3, r1
 800dbc4:	42ab      	cmp	r3, r5
 800dbc6:	dcf2      	bgt.n	800dbae <_printf_i+0x21e>
 800dbc8:	e7eb      	b.n	800dba2 <_printf_i+0x212>
 800dbca:	2500      	movs	r5, #0
 800dbcc:	f104 0619 	add.w	r6, r4, #25
 800dbd0:	e7f5      	b.n	800dbbe <_printf_i+0x22e>
 800dbd2:	bf00      	nop
 800dbd4:	0801a242 	.word	0x0801a242
 800dbd8:	0801a253 	.word	0x0801a253

0800dbdc <siprintf>:
 800dbdc:	b40e      	push	{r1, r2, r3}
 800dbde:	b500      	push	{lr}
 800dbe0:	b09c      	sub	sp, #112	; 0x70
 800dbe2:	ab1d      	add	r3, sp, #116	; 0x74
 800dbe4:	9002      	str	r0, [sp, #8]
 800dbe6:	9006      	str	r0, [sp, #24]
 800dbe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbec:	4809      	ldr	r0, [pc, #36]	; (800dc14 <siprintf+0x38>)
 800dbee:	9107      	str	r1, [sp, #28]
 800dbf0:	9104      	str	r1, [sp, #16]
 800dbf2:	4909      	ldr	r1, [pc, #36]	; (800dc18 <siprintf+0x3c>)
 800dbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbf8:	9105      	str	r1, [sp, #20]
 800dbfa:	6800      	ldr	r0, [r0, #0]
 800dbfc:	9301      	str	r3, [sp, #4]
 800dbfe:	a902      	add	r1, sp, #8
 800dc00:	f001 fac4 	bl	800f18c <_svfiprintf_r>
 800dc04:	9b02      	ldr	r3, [sp, #8]
 800dc06:	2200      	movs	r2, #0
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	b01c      	add	sp, #112	; 0x70
 800dc0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc10:	b003      	add	sp, #12
 800dc12:	4770      	bx	lr
 800dc14:	24000380 	.word	0x24000380
 800dc18:	ffff0208 	.word	0xffff0208

0800dc1c <strcpy>:
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc22:	f803 2b01 	strb.w	r2, [r3], #1
 800dc26:	2a00      	cmp	r2, #0
 800dc28:	d1f9      	bne.n	800dc1e <strcpy+0x2>
 800dc2a:	4770      	bx	lr

0800dc2c <quorem>:
 800dc2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc30:	6903      	ldr	r3, [r0, #16]
 800dc32:	690c      	ldr	r4, [r1, #16]
 800dc34:	42a3      	cmp	r3, r4
 800dc36:	4607      	mov	r7, r0
 800dc38:	f2c0 8081 	blt.w	800dd3e <quorem+0x112>
 800dc3c:	3c01      	subs	r4, #1
 800dc3e:	f101 0814 	add.w	r8, r1, #20
 800dc42:	f100 0514 	add.w	r5, r0, #20
 800dc46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc54:	3301      	adds	r3, #1
 800dc56:	429a      	cmp	r2, r3
 800dc58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc60:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc64:	d331      	bcc.n	800dcca <quorem+0x9e>
 800dc66:	f04f 0e00 	mov.w	lr, #0
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	46ac      	mov	ip, r5
 800dc6e:	46f2      	mov	sl, lr
 800dc70:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc74:	b293      	uxth	r3, r2
 800dc76:	fb06 e303 	mla	r3, r6, r3, lr
 800dc7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	ebaa 0303 	sub.w	r3, sl, r3
 800dc84:	0c12      	lsrs	r2, r2, #16
 800dc86:	f8dc a000 	ldr.w	sl, [ip]
 800dc8a:	fb06 e202 	mla	r2, r6, r2, lr
 800dc8e:	fa13 f38a 	uxtah	r3, r3, sl
 800dc92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc96:	fa1f fa82 	uxth.w	sl, r2
 800dc9a:	f8dc 2000 	ldr.w	r2, [ip]
 800dc9e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800dca2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcac:	4581      	cmp	r9, r0
 800dcae:	f84c 3b04 	str.w	r3, [ip], #4
 800dcb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dcb6:	d2db      	bcs.n	800dc70 <quorem+0x44>
 800dcb8:	f855 300b 	ldr.w	r3, [r5, fp]
 800dcbc:	b92b      	cbnz	r3, 800dcca <quorem+0x9e>
 800dcbe:	9b01      	ldr	r3, [sp, #4]
 800dcc0:	3b04      	subs	r3, #4
 800dcc2:	429d      	cmp	r5, r3
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	d32e      	bcc.n	800dd26 <quorem+0xfa>
 800dcc8:	613c      	str	r4, [r7, #16]
 800dcca:	4638      	mov	r0, r7
 800dccc:	f001 f848 	bl	800ed60 <__mcmp>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	db24      	blt.n	800dd1e <quorem+0xf2>
 800dcd4:	3601      	adds	r6, #1
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	f04f 0c00 	mov.w	ip, #0
 800dcdc:	f858 2b04 	ldr.w	r2, [r8], #4
 800dce0:	f8d0 e000 	ldr.w	lr, [r0]
 800dce4:	b293      	uxth	r3, r2
 800dce6:	ebac 0303 	sub.w	r3, ip, r3
 800dcea:	0c12      	lsrs	r2, r2, #16
 800dcec:	fa13 f38e 	uxtah	r3, r3, lr
 800dcf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dcf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcfe:	45c1      	cmp	r9, r8
 800dd00:	f840 3b04 	str.w	r3, [r0], #4
 800dd04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd08:	d2e8      	bcs.n	800dcdc <quorem+0xb0>
 800dd0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd12:	b922      	cbnz	r2, 800dd1e <quorem+0xf2>
 800dd14:	3b04      	subs	r3, #4
 800dd16:	429d      	cmp	r5, r3
 800dd18:	461a      	mov	r2, r3
 800dd1a:	d30a      	bcc.n	800dd32 <quorem+0x106>
 800dd1c:	613c      	str	r4, [r7, #16]
 800dd1e:	4630      	mov	r0, r6
 800dd20:	b003      	add	sp, #12
 800dd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd26:	6812      	ldr	r2, [r2, #0]
 800dd28:	3b04      	subs	r3, #4
 800dd2a:	2a00      	cmp	r2, #0
 800dd2c:	d1cc      	bne.n	800dcc8 <quorem+0x9c>
 800dd2e:	3c01      	subs	r4, #1
 800dd30:	e7c7      	b.n	800dcc2 <quorem+0x96>
 800dd32:	6812      	ldr	r2, [r2, #0]
 800dd34:	3b04      	subs	r3, #4
 800dd36:	2a00      	cmp	r2, #0
 800dd38:	d1f0      	bne.n	800dd1c <quorem+0xf0>
 800dd3a:	3c01      	subs	r4, #1
 800dd3c:	e7eb      	b.n	800dd16 <quorem+0xea>
 800dd3e:	2000      	movs	r0, #0
 800dd40:	e7ee      	b.n	800dd20 <quorem+0xf4>
 800dd42:	0000      	movs	r0, r0
 800dd44:	0000      	movs	r0, r0
	...

0800dd48 <_dtoa_r>:
 800dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4c:	ec59 8b10 	vmov	r8, r9, d0
 800dd50:	b095      	sub	sp, #84	; 0x54
 800dd52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd54:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800dd56:	9107      	str	r1, [sp, #28]
 800dd58:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd60:	9310      	str	r3, [sp, #64]	; 0x40
 800dd62:	b975      	cbnz	r5, 800dd82 <_dtoa_r+0x3a>
 800dd64:	2010      	movs	r0, #16
 800dd66:	f000 fd75 	bl	800e854 <malloc>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	6270      	str	r0, [r6, #36]	; 0x24
 800dd6e:	b920      	cbnz	r0, 800dd7a <_dtoa_r+0x32>
 800dd70:	4bab      	ldr	r3, [pc, #684]	; (800e020 <_dtoa_r+0x2d8>)
 800dd72:	21ea      	movs	r1, #234	; 0xea
 800dd74:	48ab      	ldr	r0, [pc, #684]	; (800e024 <_dtoa_r+0x2dc>)
 800dd76:	f001 fb19 	bl	800f3ac <__assert_func>
 800dd7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd7e:	6005      	str	r5, [r0, #0]
 800dd80:	60c5      	str	r5, [r0, #12]
 800dd82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd84:	6819      	ldr	r1, [r3, #0]
 800dd86:	b151      	cbz	r1, 800dd9e <_dtoa_r+0x56>
 800dd88:	685a      	ldr	r2, [r3, #4]
 800dd8a:	604a      	str	r2, [r1, #4]
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	4093      	lsls	r3, r2
 800dd90:	608b      	str	r3, [r1, #8]
 800dd92:	4630      	mov	r0, r6
 800dd94:	f000 fda6 	bl	800e8e4 <_Bfree>
 800dd98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	f1b9 0300 	subs.w	r3, r9, #0
 800dda2:	bfbb      	ittet	lt
 800dda4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dda8:	9303      	strlt	r3, [sp, #12]
 800ddaa:	2300      	movge	r3, #0
 800ddac:	2201      	movlt	r2, #1
 800ddae:	bfac      	ite	ge
 800ddb0:	6023      	strge	r3, [r4, #0]
 800ddb2:	6022      	strlt	r2, [r4, #0]
 800ddb4:	4b9c      	ldr	r3, [pc, #624]	; (800e028 <_dtoa_r+0x2e0>)
 800ddb6:	9c03      	ldr	r4, [sp, #12]
 800ddb8:	43a3      	bics	r3, r4
 800ddba:	d11a      	bne.n	800ddf2 <_dtoa_r+0xaa>
 800ddbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ddbe:	f242 730f 	movw	r3, #9999	; 0x270f
 800ddc2:	6013      	str	r3, [r2, #0]
 800ddc4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ddc8:	ea53 0308 	orrs.w	r3, r3, r8
 800ddcc:	f000 8512 	beq.w	800e7f4 <_dtoa_r+0xaac>
 800ddd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ddd2:	b953      	cbnz	r3, 800ddea <_dtoa_r+0xa2>
 800ddd4:	4b95      	ldr	r3, [pc, #596]	; (800e02c <_dtoa_r+0x2e4>)
 800ddd6:	e01f      	b.n	800de18 <_dtoa_r+0xd0>
 800ddd8:	4b95      	ldr	r3, [pc, #596]	; (800e030 <_dtoa_r+0x2e8>)
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	3308      	adds	r3, #8
 800ddde:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dde0:	6013      	str	r3, [r2, #0]
 800dde2:	9800      	ldr	r0, [sp, #0]
 800dde4:	b015      	add	sp, #84	; 0x54
 800dde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddea:	4b90      	ldr	r3, [pc, #576]	; (800e02c <_dtoa_r+0x2e4>)
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	3303      	adds	r3, #3
 800ddf0:	e7f5      	b.n	800ddde <_dtoa_r+0x96>
 800ddf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ddf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ddfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800de02:	d10b      	bne.n	800de1c <_dtoa_r+0xd4>
 800de04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de06:	2301      	movs	r3, #1
 800de08:	6013      	str	r3, [r2, #0]
 800de0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f000 84ee 	beq.w	800e7ee <_dtoa_r+0xaa6>
 800de12:	4888      	ldr	r0, [pc, #544]	; (800e034 <_dtoa_r+0x2ec>)
 800de14:	6018      	str	r0, [r3, #0]
 800de16:	1e43      	subs	r3, r0, #1
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	e7e2      	b.n	800dde2 <_dtoa_r+0x9a>
 800de1c:	a913      	add	r1, sp, #76	; 0x4c
 800de1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800de22:	aa12      	add	r2, sp, #72	; 0x48
 800de24:	4630      	mov	r0, r6
 800de26:	f001 f83f 	bl	800eea8 <__d2b>
 800de2a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800de2e:	4605      	mov	r5, r0
 800de30:	9812      	ldr	r0, [sp, #72]	; 0x48
 800de32:	2900      	cmp	r1, #0
 800de34:	d047      	beq.n	800dec6 <_dtoa_r+0x17e>
 800de36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800de38:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800de3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de40:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800de44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800de48:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800de4c:	2400      	movs	r4, #0
 800de4e:	ec43 2b16 	vmov	d6, r2, r3
 800de52:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800de56:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e008 <_dtoa_r+0x2c0>
 800de5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800de5e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e010 <_dtoa_r+0x2c8>
 800de62:	eea7 6b05 	vfma.f64	d6, d7, d5
 800de66:	eeb0 7b46 	vmov.f64	d7, d6
 800de6a:	ee06 1a90 	vmov	s13, r1
 800de6e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800de72:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e018 <_dtoa_r+0x2d0>
 800de76:	eea5 7b06 	vfma.f64	d7, d5, d6
 800de7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800de7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800de82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de86:	ee16 ba90 	vmov	fp, s13
 800de8a:	9411      	str	r4, [sp, #68]	; 0x44
 800de8c:	d508      	bpl.n	800dea0 <_dtoa_r+0x158>
 800de8e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800de92:	eeb4 6b47 	vcmp.f64	d6, d7
 800de96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9a:	bf18      	it	ne
 800de9c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800dea0:	f1bb 0f16 	cmp.w	fp, #22
 800dea4:	d832      	bhi.n	800df0c <_dtoa_r+0x1c4>
 800dea6:	4b64      	ldr	r3, [pc, #400]	; (800e038 <_dtoa_r+0x2f0>)
 800dea8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800deac:	ed93 7b00 	vldr	d7, [r3]
 800deb0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800deb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800deb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800debc:	d501      	bpl.n	800dec2 <_dtoa_r+0x17a>
 800debe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dec2:	2300      	movs	r3, #0
 800dec4:	e023      	b.n	800df0e <_dtoa_r+0x1c6>
 800dec6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dec8:	4401      	add	r1, r0
 800deca:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800dece:	2b20      	cmp	r3, #32
 800ded0:	bfc3      	ittte	gt
 800ded2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ded6:	fa04 f303 	lslgt.w	r3, r4, r3
 800deda:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800dede:	f1c3 0320 	rsble	r3, r3, #32
 800dee2:	bfc6      	itte	gt
 800dee4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800dee8:	ea43 0308 	orrgt.w	r3, r3, r8
 800deec:	fa08 f303 	lslle.w	r3, r8, r3
 800def0:	ee07 3a90 	vmov	s15, r3
 800def4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800def8:	3901      	subs	r1, #1
 800defa:	ed8d 7b00 	vstr	d7, [sp]
 800defe:	9c01      	ldr	r4, [sp, #4]
 800df00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df04:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800df08:	2401      	movs	r4, #1
 800df0a:	e7a0      	b.n	800de4e <_dtoa_r+0x106>
 800df0c:	2301      	movs	r3, #1
 800df0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df10:	1a43      	subs	r3, r0, r1
 800df12:	1e5a      	subs	r2, r3, #1
 800df14:	bf45      	ittet	mi
 800df16:	f1c3 0301 	rsbmi	r3, r3, #1
 800df1a:	9305      	strmi	r3, [sp, #20]
 800df1c:	2300      	movpl	r3, #0
 800df1e:	2300      	movmi	r3, #0
 800df20:	9206      	str	r2, [sp, #24]
 800df22:	bf54      	ite	pl
 800df24:	9305      	strpl	r3, [sp, #20]
 800df26:	9306      	strmi	r3, [sp, #24]
 800df28:	f1bb 0f00 	cmp.w	fp, #0
 800df2c:	db18      	blt.n	800df60 <_dtoa_r+0x218>
 800df2e:	9b06      	ldr	r3, [sp, #24]
 800df30:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800df34:	445b      	add	r3, fp
 800df36:	9306      	str	r3, [sp, #24]
 800df38:	2300      	movs	r3, #0
 800df3a:	9a07      	ldr	r2, [sp, #28]
 800df3c:	2a09      	cmp	r2, #9
 800df3e:	d849      	bhi.n	800dfd4 <_dtoa_r+0x28c>
 800df40:	2a05      	cmp	r2, #5
 800df42:	bfc4      	itt	gt
 800df44:	3a04      	subgt	r2, #4
 800df46:	9207      	strgt	r2, [sp, #28]
 800df48:	9a07      	ldr	r2, [sp, #28]
 800df4a:	f1a2 0202 	sub.w	r2, r2, #2
 800df4e:	bfcc      	ite	gt
 800df50:	2400      	movgt	r4, #0
 800df52:	2401      	movle	r4, #1
 800df54:	2a03      	cmp	r2, #3
 800df56:	d848      	bhi.n	800dfea <_dtoa_r+0x2a2>
 800df58:	e8df f002 	tbb	[pc, r2]
 800df5c:	3a2c2e0b 	.word	0x3a2c2e0b
 800df60:	9b05      	ldr	r3, [sp, #20]
 800df62:	2200      	movs	r2, #0
 800df64:	eba3 030b 	sub.w	r3, r3, fp
 800df68:	9305      	str	r3, [sp, #20]
 800df6a:	920e      	str	r2, [sp, #56]	; 0x38
 800df6c:	f1cb 0300 	rsb	r3, fp, #0
 800df70:	e7e3      	b.n	800df3a <_dtoa_r+0x1f2>
 800df72:	2200      	movs	r2, #0
 800df74:	9208      	str	r2, [sp, #32]
 800df76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df78:	2a00      	cmp	r2, #0
 800df7a:	dc39      	bgt.n	800dff0 <_dtoa_r+0x2a8>
 800df7c:	f04f 0a01 	mov.w	sl, #1
 800df80:	46d1      	mov	r9, sl
 800df82:	4652      	mov	r2, sl
 800df84:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800df88:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800df8a:	2100      	movs	r1, #0
 800df8c:	6079      	str	r1, [r7, #4]
 800df8e:	2004      	movs	r0, #4
 800df90:	f100 0c14 	add.w	ip, r0, #20
 800df94:	4594      	cmp	ip, r2
 800df96:	6879      	ldr	r1, [r7, #4]
 800df98:	d92f      	bls.n	800dffa <_dtoa_r+0x2b2>
 800df9a:	4630      	mov	r0, r6
 800df9c:	930c      	str	r3, [sp, #48]	; 0x30
 800df9e:	f000 fc61 	bl	800e864 <_Balloc>
 800dfa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfa4:	9000      	str	r0, [sp, #0]
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d149      	bne.n	800e040 <_dtoa_r+0x2f8>
 800dfac:	4b23      	ldr	r3, [pc, #140]	; (800e03c <_dtoa_r+0x2f4>)
 800dfae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dfb2:	e6df      	b.n	800dd74 <_dtoa_r+0x2c>
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	e7dd      	b.n	800df74 <_dtoa_r+0x22c>
 800dfb8:	2200      	movs	r2, #0
 800dfba:	9208      	str	r2, [sp, #32]
 800dfbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfbe:	eb0b 0a02 	add.w	sl, fp, r2
 800dfc2:	f10a 0901 	add.w	r9, sl, #1
 800dfc6:	464a      	mov	r2, r9
 800dfc8:	2a01      	cmp	r2, #1
 800dfca:	bfb8      	it	lt
 800dfcc:	2201      	movlt	r2, #1
 800dfce:	e7db      	b.n	800df88 <_dtoa_r+0x240>
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	e7f2      	b.n	800dfba <_dtoa_r+0x272>
 800dfd4:	2401      	movs	r4, #1
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800dfdc:	f04f 3aff 	mov.w	sl, #4294967295
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	46d1      	mov	r9, sl
 800dfe4:	2212      	movs	r2, #18
 800dfe6:	9109      	str	r1, [sp, #36]	; 0x24
 800dfe8:	e7ce      	b.n	800df88 <_dtoa_r+0x240>
 800dfea:	2201      	movs	r2, #1
 800dfec:	9208      	str	r2, [sp, #32]
 800dfee:	e7f5      	b.n	800dfdc <_dtoa_r+0x294>
 800dff0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800dff4:	46d1      	mov	r9, sl
 800dff6:	4652      	mov	r2, sl
 800dff8:	e7c6      	b.n	800df88 <_dtoa_r+0x240>
 800dffa:	3101      	adds	r1, #1
 800dffc:	6079      	str	r1, [r7, #4]
 800dffe:	0040      	lsls	r0, r0, #1
 800e000:	e7c6      	b.n	800df90 <_dtoa_r+0x248>
 800e002:	bf00      	nop
 800e004:	f3af 8000 	nop.w
 800e008:	636f4361 	.word	0x636f4361
 800e00c:	3fd287a7 	.word	0x3fd287a7
 800e010:	8b60c8b3 	.word	0x8b60c8b3
 800e014:	3fc68a28 	.word	0x3fc68a28
 800e018:	509f79fb 	.word	0x509f79fb
 800e01c:	3fd34413 	.word	0x3fd34413
 800e020:	0801a271 	.word	0x0801a271
 800e024:	0801a288 	.word	0x0801a288
 800e028:	7ff00000 	.word	0x7ff00000
 800e02c:	0801a26d 	.word	0x0801a26d
 800e030:	0801a264 	.word	0x0801a264
 800e034:	0801a241 	.word	0x0801a241
 800e038:	0801a380 	.word	0x0801a380
 800e03c:	0801a2e7 	.word	0x0801a2e7
 800e040:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e042:	9900      	ldr	r1, [sp, #0]
 800e044:	6011      	str	r1, [r2, #0]
 800e046:	f1b9 0f0e 	cmp.w	r9, #14
 800e04a:	d872      	bhi.n	800e132 <_dtoa_r+0x3ea>
 800e04c:	2c00      	cmp	r4, #0
 800e04e:	d070      	beq.n	800e132 <_dtoa_r+0x3ea>
 800e050:	f1bb 0f00 	cmp.w	fp, #0
 800e054:	f340 80a6 	ble.w	800e1a4 <_dtoa_r+0x45c>
 800e058:	49ca      	ldr	r1, [pc, #808]	; (800e384 <_dtoa_r+0x63c>)
 800e05a:	f00b 020f 	and.w	r2, fp, #15
 800e05e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e062:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e066:	ed92 7b00 	vldr	d7, [r2]
 800e06a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e06e:	f000 808d 	beq.w	800e18c <_dtoa_r+0x444>
 800e072:	4ac5      	ldr	r2, [pc, #788]	; (800e388 <_dtoa_r+0x640>)
 800e074:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e078:	ed92 6b08 	vldr	d6, [r2, #32]
 800e07c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e080:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e084:	f001 010f 	and.w	r1, r1, #15
 800e088:	2203      	movs	r2, #3
 800e08a:	48bf      	ldr	r0, [pc, #764]	; (800e388 <_dtoa_r+0x640>)
 800e08c:	2900      	cmp	r1, #0
 800e08e:	d17f      	bne.n	800e190 <_dtoa_r+0x448>
 800e090:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e094:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e098:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e09c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e09e:	2900      	cmp	r1, #0
 800e0a0:	f000 80b2 	beq.w	800e208 <_dtoa_r+0x4c0>
 800e0a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e0a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b4:	f140 80a8 	bpl.w	800e208 <_dtoa_r+0x4c0>
 800e0b8:	f1b9 0f00 	cmp.w	r9, #0
 800e0bc:	f000 80a4 	beq.w	800e208 <_dtoa_r+0x4c0>
 800e0c0:	f1ba 0f00 	cmp.w	sl, #0
 800e0c4:	dd31      	ble.n	800e12a <_dtoa_r+0x3e2>
 800e0c6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e0ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e0d2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e0d6:	3201      	adds	r2, #1
 800e0d8:	4650      	mov	r0, sl
 800e0da:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e0de:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e0e2:	ee07 2a90 	vmov	s15, r2
 800e0e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e0ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e0ee:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e0f2:	9c03      	ldr	r4, [sp, #12]
 800e0f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e0f8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	f040 8086 	bne.w	800e20e <_dtoa_r+0x4c6>
 800e102:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e106:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e10a:	ec42 1b17 	vmov	d7, r1, r2
 800e10e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e116:	f300 8272 	bgt.w	800e5fe <_dtoa_r+0x8b6>
 800e11a:	eeb1 7b47 	vneg.f64	d7, d7
 800e11e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e126:	f100 8267 	bmi.w	800e5f8 <_dtoa_r+0x8b0>
 800e12a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e12e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e132:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e134:	2a00      	cmp	r2, #0
 800e136:	f2c0 8129 	blt.w	800e38c <_dtoa_r+0x644>
 800e13a:	f1bb 0f0e 	cmp.w	fp, #14
 800e13e:	f300 8125 	bgt.w	800e38c <_dtoa_r+0x644>
 800e142:	4b90      	ldr	r3, [pc, #576]	; (800e384 <_dtoa_r+0x63c>)
 800e144:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e148:	ed93 6b00 	vldr	d6, [r3]
 800e14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e14e:	2b00      	cmp	r3, #0
 800e150:	f280 80c3 	bge.w	800e2da <_dtoa_r+0x592>
 800e154:	f1b9 0f00 	cmp.w	r9, #0
 800e158:	f300 80bf 	bgt.w	800e2da <_dtoa_r+0x592>
 800e15c:	f040 824c 	bne.w	800e5f8 <_dtoa_r+0x8b0>
 800e160:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e164:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e168:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e16c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e174:	464c      	mov	r4, r9
 800e176:	464f      	mov	r7, r9
 800e178:	f280 8222 	bge.w	800e5c0 <_dtoa_r+0x878>
 800e17c:	f8dd 8000 	ldr.w	r8, [sp]
 800e180:	2331      	movs	r3, #49	; 0x31
 800e182:	f808 3b01 	strb.w	r3, [r8], #1
 800e186:	f10b 0b01 	add.w	fp, fp, #1
 800e18a:	e21e      	b.n	800e5ca <_dtoa_r+0x882>
 800e18c:	2202      	movs	r2, #2
 800e18e:	e77c      	b.n	800e08a <_dtoa_r+0x342>
 800e190:	07cc      	lsls	r4, r1, #31
 800e192:	d504      	bpl.n	800e19e <_dtoa_r+0x456>
 800e194:	ed90 6b00 	vldr	d6, [r0]
 800e198:	3201      	adds	r2, #1
 800e19a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e19e:	1049      	asrs	r1, r1, #1
 800e1a0:	3008      	adds	r0, #8
 800e1a2:	e773      	b.n	800e08c <_dtoa_r+0x344>
 800e1a4:	d02e      	beq.n	800e204 <_dtoa_r+0x4bc>
 800e1a6:	f1cb 0100 	rsb	r1, fp, #0
 800e1aa:	4a76      	ldr	r2, [pc, #472]	; (800e384 <_dtoa_r+0x63c>)
 800e1ac:	f001 000f 	and.w	r0, r1, #15
 800e1b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e1b4:	ed92 7b00 	vldr	d7, [r2]
 800e1b8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e1bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e1c0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e1c4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e1c8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e1cc:	486e      	ldr	r0, [pc, #440]	; (800e388 <_dtoa_r+0x640>)
 800e1ce:	1109      	asrs	r1, r1, #4
 800e1d0:	2400      	movs	r4, #0
 800e1d2:	2202      	movs	r2, #2
 800e1d4:	b939      	cbnz	r1, 800e1e6 <_dtoa_r+0x49e>
 800e1d6:	2c00      	cmp	r4, #0
 800e1d8:	f43f af60 	beq.w	800e09c <_dtoa_r+0x354>
 800e1dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1e4:	e75a      	b.n	800e09c <_dtoa_r+0x354>
 800e1e6:	07cf      	lsls	r7, r1, #31
 800e1e8:	d509      	bpl.n	800e1fe <_dtoa_r+0x4b6>
 800e1ea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e1ee:	ed90 7b00 	vldr	d7, [r0]
 800e1f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e1f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e1fa:	3201      	adds	r2, #1
 800e1fc:	2401      	movs	r4, #1
 800e1fe:	1049      	asrs	r1, r1, #1
 800e200:	3008      	adds	r0, #8
 800e202:	e7e7      	b.n	800e1d4 <_dtoa_r+0x48c>
 800e204:	2202      	movs	r2, #2
 800e206:	e749      	b.n	800e09c <_dtoa_r+0x354>
 800e208:	465f      	mov	r7, fp
 800e20a:	4648      	mov	r0, r9
 800e20c:	e765      	b.n	800e0da <_dtoa_r+0x392>
 800e20e:	ec42 1b17 	vmov	d7, r1, r2
 800e212:	4a5c      	ldr	r2, [pc, #368]	; (800e384 <_dtoa_r+0x63c>)
 800e214:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e218:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e21c:	9a00      	ldr	r2, [sp, #0]
 800e21e:	1814      	adds	r4, r2, r0
 800e220:	9a08      	ldr	r2, [sp, #32]
 800e222:	b352      	cbz	r2, 800e27a <_dtoa_r+0x532>
 800e224:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e228:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e22c:	f8dd 8000 	ldr.w	r8, [sp]
 800e230:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e234:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e238:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e23c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e240:	ee14 2a90 	vmov	r2, s9
 800e244:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e248:	3230      	adds	r2, #48	; 0x30
 800e24a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e24e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e256:	f808 2b01 	strb.w	r2, [r8], #1
 800e25a:	d439      	bmi.n	800e2d0 <_dtoa_r+0x588>
 800e25c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e260:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e268:	d472      	bmi.n	800e350 <_dtoa_r+0x608>
 800e26a:	45a0      	cmp	r8, r4
 800e26c:	f43f af5d 	beq.w	800e12a <_dtoa_r+0x3e2>
 800e270:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e274:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e278:	e7e0      	b.n	800e23c <_dtoa_r+0x4f4>
 800e27a:	f8dd 8000 	ldr.w	r8, [sp]
 800e27e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e282:	4621      	mov	r1, r4
 800e284:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e288:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e28c:	ee14 2a90 	vmov	r2, s9
 800e290:	3230      	adds	r2, #48	; 0x30
 800e292:	f808 2b01 	strb.w	r2, [r8], #1
 800e296:	45a0      	cmp	r8, r4
 800e298:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e29c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e2a0:	d118      	bne.n	800e2d4 <_dtoa_r+0x58c>
 800e2a2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e2a6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e2aa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b2:	dc4d      	bgt.n	800e350 <_dtoa_r+0x608>
 800e2b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e2b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c0:	f57f af33 	bpl.w	800e12a <_dtoa_r+0x3e2>
 800e2c4:	4688      	mov	r8, r1
 800e2c6:	3901      	subs	r1, #1
 800e2c8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e2cc:	2b30      	cmp	r3, #48	; 0x30
 800e2ce:	d0f9      	beq.n	800e2c4 <_dtoa_r+0x57c>
 800e2d0:	46bb      	mov	fp, r7
 800e2d2:	e02a      	b.n	800e32a <_dtoa_r+0x5e2>
 800e2d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e2d8:	e7d6      	b.n	800e288 <_dtoa_r+0x540>
 800e2da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2de:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e2e2:	f8dd 8000 	ldr.w	r8, [sp]
 800e2e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e2ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e2ee:	ee15 3a10 	vmov	r3, s10
 800e2f2:	3330      	adds	r3, #48	; 0x30
 800e2f4:	f808 3b01 	strb.w	r3, [r8], #1
 800e2f8:	9b00      	ldr	r3, [sp, #0]
 800e2fa:	eba8 0303 	sub.w	r3, r8, r3
 800e2fe:	4599      	cmp	r9, r3
 800e300:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e304:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e308:	d133      	bne.n	800e372 <_dtoa_r+0x62a>
 800e30a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e30e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e316:	dc1a      	bgt.n	800e34e <_dtoa_r+0x606>
 800e318:	eeb4 7b46 	vcmp.f64	d7, d6
 800e31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e320:	d103      	bne.n	800e32a <_dtoa_r+0x5e2>
 800e322:	ee15 3a10 	vmov	r3, s10
 800e326:	07d9      	lsls	r1, r3, #31
 800e328:	d411      	bmi.n	800e34e <_dtoa_r+0x606>
 800e32a:	4629      	mov	r1, r5
 800e32c:	4630      	mov	r0, r6
 800e32e:	f000 fad9 	bl	800e8e4 <_Bfree>
 800e332:	2300      	movs	r3, #0
 800e334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e336:	f888 3000 	strb.w	r3, [r8]
 800e33a:	f10b 0301 	add.w	r3, fp, #1
 800e33e:	6013      	str	r3, [r2, #0]
 800e340:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e342:	2b00      	cmp	r3, #0
 800e344:	f43f ad4d 	beq.w	800dde2 <_dtoa_r+0x9a>
 800e348:	f8c3 8000 	str.w	r8, [r3]
 800e34c:	e549      	b.n	800dde2 <_dtoa_r+0x9a>
 800e34e:	465f      	mov	r7, fp
 800e350:	4643      	mov	r3, r8
 800e352:	4698      	mov	r8, r3
 800e354:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e358:	2a39      	cmp	r2, #57	; 0x39
 800e35a:	d106      	bne.n	800e36a <_dtoa_r+0x622>
 800e35c:	9a00      	ldr	r2, [sp, #0]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d1f7      	bne.n	800e352 <_dtoa_r+0x60a>
 800e362:	9900      	ldr	r1, [sp, #0]
 800e364:	2230      	movs	r2, #48	; 0x30
 800e366:	3701      	adds	r7, #1
 800e368:	700a      	strb	r2, [r1, #0]
 800e36a:	781a      	ldrb	r2, [r3, #0]
 800e36c:	3201      	adds	r2, #1
 800e36e:	701a      	strb	r2, [r3, #0]
 800e370:	e7ae      	b.n	800e2d0 <_dtoa_r+0x588>
 800e372:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e376:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37e:	d1b2      	bne.n	800e2e6 <_dtoa_r+0x59e>
 800e380:	e7d3      	b.n	800e32a <_dtoa_r+0x5e2>
 800e382:	bf00      	nop
 800e384:	0801a380 	.word	0x0801a380
 800e388:	0801a358 	.word	0x0801a358
 800e38c:	9908      	ldr	r1, [sp, #32]
 800e38e:	2900      	cmp	r1, #0
 800e390:	f000 80d1 	beq.w	800e536 <_dtoa_r+0x7ee>
 800e394:	9907      	ldr	r1, [sp, #28]
 800e396:	2901      	cmp	r1, #1
 800e398:	f300 80b4 	bgt.w	800e504 <_dtoa_r+0x7bc>
 800e39c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e39e:	2900      	cmp	r1, #0
 800e3a0:	f000 80ac 	beq.w	800e4fc <_dtoa_r+0x7b4>
 800e3a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e3a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e3ac:	461c      	mov	r4, r3
 800e3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800e3b0:	9b05      	ldr	r3, [sp, #20]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	9305      	str	r3, [sp, #20]
 800e3b6:	9b06      	ldr	r3, [sp, #24]
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	4413      	add	r3, r2
 800e3bc:	4630      	mov	r0, r6
 800e3be:	9306      	str	r3, [sp, #24]
 800e3c0:	f000 fb4c 	bl	800ea5c <__i2b>
 800e3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3c6:	4607      	mov	r7, r0
 800e3c8:	f1b8 0f00 	cmp.w	r8, #0
 800e3cc:	dd0d      	ble.n	800e3ea <_dtoa_r+0x6a2>
 800e3ce:	9a06      	ldr	r2, [sp, #24]
 800e3d0:	2a00      	cmp	r2, #0
 800e3d2:	dd0a      	ble.n	800e3ea <_dtoa_r+0x6a2>
 800e3d4:	4542      	cmp	r2, r8
 800e3d6:	9905      	ldr	r1, [sp, #20]
 800e3d8:	bfa8      	it	ge
 800e3da:	4642      	movge	r2, r8
 800e3dc:	1a89      	subs	r1, r1, r2
 800e3de:	9105      	str	r1, [sp, #20]
 800e3e0:	9906      	ldr	r1, [sp, #24]
 800e3e2:	eba8 0802 	sub.w	r8, r8, r2
 800e3e6:	1a8a      	subs	r2, r1, r2
 800e3e8:	9206      	str	r2, [sp, #24]
 800e3ea:	b303      	cbz	r3, 800e42e <_dtoa_r+0x6e6>
 800e3ec:	9a08      	ldr	r2, [sp, #32]
 800e3ee:	2a00      	cmp	r2, #0
 800e3f0:	f000 80a6 	beq.w	800e540 <_dtoa_r+0x7f8>
 800e3f4:	2c00      	cmp	r4, #0
 800e3f6:	dd13      	ble.n	800e420 <_dtoa_r+0x6d8>
 800e3f8:	4639      	mov	r1, r7
 800e3fa:	4622      	mov	r2, r4
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	930c      	str	r3, [sp, #48]	; 0x30
 800e400:	f000 fbe8 	bl	800ebd4 <__pow5mult>
 800e404:	462a      	mov	r2, r5
 800e406:	4601      	mov	r1, r0
 800e408:	4607      	mov	r7, r0
 800e40a:	4630      	mov	r0, r6
 800e40c:	f000 fb3c 	bl	800ea88 <__multiply>
 800e410:	4629      	mov	r1, r5
 800e412:	900a      	str	r0, [sp, #40]	; 0x28
 800e414:	4630      	mov	r0, r6
 800e416:	f000 fa65 	bl	800e8e4 <_Bfree>
 800e41a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e41c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e41e:	4615      	mov	r5, r2
 800e420:	1b1a      	subs	r2, r3, r4
 800e422:	d004      	beq.n	800e42e <_dtoa_r+0x6e6>
 800e424:	4629      	mov	r1, r5
 800e426:	4630      	mov	r0, r6
 800e428:	f000 fbd4 	bl	800ebd4 <__pow5mult>
 800e42c:	4605      	mov	r5, r0
 800e42e:	2101      	movs	r1, #1
 800e430:	4630      	mov	r0, r6
 800e432:	f000 fb13 	bl	800ea5c <__i2b>
 800e436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e438:	2b00      	cmp	r3, #0
 800e43a:	4604      	mov	r4, r0
 800e43c:	f340 8082 	ble.w	800e544 <_dtoa_r+0x7fc>
 800e440:	461a      	mov	r2, r3
 800e442:	4601      	mov	r1, r0
 800e444:	4630      	mov	r0, r6
 800e446:	f000 fbc5 	bl	800ebd4 <__pow5mult>
 800e44a:	9b07      	ldr	r3, [sp, #28]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	4604      	mov	r4, r0
 800e450:	dd7b      	ble.n	800e54a <_dtoa_r+0x802>
 800e452:	2300      	movs	r3, #0
 800e454:	930a      	str	r3, [sp, #40]	; 0x28
 800e456:	6922      	ldr	r2, [r4, #16]
 800e458:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e45c:	6910      	ldr	r0, [r2, #16]
 800e45e:	f000 faad 	bl	800e9bc <__hi0bits>
 800e462:	f1c0 0020 	rsb	r0, r0, #32
 800e466:	9b06      	ldr	r3, [sp, #24]
 800e468:	4418      	add	r0, r3
 800e46a:	f010 001f 	ands.w	r0, r0, #31
 800e46e:	f000 808d 	beq.w	800e58c <_dtoa_r+0x844>
 800e472:	f1c0 0220 	rsb	r2, r0, #32
 800e476:	2a04      	cmp	r2, #4
 800e478:	f340 8086 	ble.w	800e588 <_dtoa_r+0x840>
 800e47c:	f1c0 001c 	rsb	r0, r0, #28
 800e480:	9b05      	ldr	r3, [sp, #20]
 800e482:	4403      	add	r3, r0
 800e484:	9305      	str	r3, [sp, #20]
 800e486:	9b06      	ldr	r3, [sp, #24]
 800e488:	4403      	add	r3, r0
 800e48a:	4480      	add	r8, r0
 800e48c:	9306      	str	r3, [sp, #24]
 800e48e:	9b05      	ldr	r3, [sp, #20]
 800e490:	2b00      	cmp	r3, #0
 800e492:	dd05      	ble.n	800e4a0 <_dtoa_r+0x758>
 800e494:	4629      	mov	r1, r5
 800e496:	461a      	mov	r2, r3
 800e498:	4630      	mov	r0, r6
 800e49a:	f000 fbf5 	bl	800ec88 <__lshift>
 800e49e:	4605      	mov	r5, r0
 800e4a0:	9b06      	ldr	r3, [sp, #24]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	dd05      	ble.n	800e4b2 <_dtoa_r+0x76a>
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	f000 fbec 	bl	800ec88 <__lshift>
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d06b      	beq.n	800e590 <_dtoa_r+0x848>
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f000 fc50 	bl	800ed60 <__mcmp>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	da65      	bge.n	800e590 <_dtoa_r+0x848>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	220a      	movs	r2, #10
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f000 fa2c 	bl	800e928 <__multadd>
 800e4d0:	9b08      	ldr	r3, [sp, #32]
 800e4d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4d6:	4605      	mov	r5, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 8192 	beq.w	800e802 <_dtoa_r+0xaba>
 800e4de:	4639      	mov	r1, r7
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	220a      	movs	r2, #10
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f000 fa1f 	bl	800e928 <__multadd>
 800e4ea:	f1ba 0f00 	cmp.w	sl, #0
 800e4ee:	4607      	mov	r7, r0
 800e4f0:	f300 808e 	bgt.w	800e610 <_dtoa_r+0x8c8>
 800e4f4:	9b07      	ldr	r3, [sp, #28]
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	dc51      	bgt.n	800e59e <_dtoa_r+0x856>
 800e4fa:	e089      	b.n	800e610 <_dtoa_r+0x8c8>
 800e4fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e4fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e502:	e751      	b.n	800e3a8 <_dtoa_r+0x660>
 800e504:	f109 34ff 	add.w	r4, r9, #4294967295
 800e508:	42a3      	cmp	r3, r4
 800e50a:	bfbf      	itttt	lt
 800e50c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e50e:	1ae3      	sublt	r3, r4, r3
 800e510:	18d2      	addlt	r2, r2, r3
 800e512:	4613      	movlt	r3, r2
 800e514:	bfb7      	itett	lt
 800e516:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e518:	1b1c      	subge	r4, r3, r4
 800e51a:	4623      	movlt	r3, r4
 800e51c:	2400      	movlt	r4, #0
 800e51e:	f1b9 0f00 	cmp.w	r9, #0
 800e522:	bfb5      	itete	lt
 800e524:	9a05      	ldrlt	r2, [sp, #20]
 800e526:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800e52a:	eba2 0809 	sublt.w	r8, r2, r9
 800e52e:	464a      	movge	r2, r9
 800e530:	bfb8      	it	lt
 800e532:	2200      	movlt	r2, #0
 800e534:	e73b      	b.n	800e3ae <_dtoa_r+0x666>
 800e536:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e53a:	9f08      	ldr	r7, [sp, #32]
 800e53c:	461c      	mov	r4, r3
 800e53e:	e743      	b.n	800e3c8 <_dtoa_r+0x680>
 800e540:	461a      	mov	r2, r3
 800e542:	e76f      	b.n	800e424 <_dtoa_r+0x6dc>
 800e544:	9b07      	ldr	r3, [sp, #28]
 800e546:	2b01      	cmp	r3, #1
 800e548:	dc18      	bgt.n	800e57c <_dtoa_r+0x834>
 800e54a:	9b02      	ldr	r3, [sp, #8]
 800e54c:	b9b3      	cbnz	r3, 800e57c <_dtoa_r+0x834>
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e554:	b9a2      	cbnz	r2, 800e580 <_dtoa_r+0x838>
 800e556:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e55a:	0d12      	lsrs	r2, r2, #20
 800e55c:	0512      	lsls	r2, r2, #20
 800e55e:	b18a      	cbz	r2, 800e584 <_dtoa_r+0x83c>
 800e560:	9b05      	ldr	r3, [sp, #20]
 800e562:	3301      	adds	r3, #1
 800e564:	9305      	str	r3, [sp, #20]
 800e566:	9b06      	ldr	r3, [sp, #24]
 800e568:	3301      	adds	r3, #1
 800e56a:	9306      	str	r3, [sp, #24]
 800e56c:	2301      	movs	r3, #1
 800e56e:	930a      	str	r3, [sp, #40]	; 0x28
 800e570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e572:	2b00      	cmp	r3, #0
 800e574:	f47f af6f 	bne.w	800e456 <_dtoa_r+0x70e>
 800e578:	2001      	movs	r0, #1
 800e57a:	e774      	b.n	800e466 <_dtoa_r+0x71e>
 800e57c:	2300      	movs	r3, #0
 800e57e:	e7f6      	b.n	800e56e <_dtoa_r+0x826>
 800e580:	9b02      	ldr	r3, [sp, #8]
 800e582:	e7f4      	b.n	800e56e <_dtoa_r+0x826>
 800e584:	920a      	str	r2, [sp, #40]	; 0x28
 800e586:	e7f3      	b.n	800e570 <_dtoa_r+0x828>
 800e588:	d081      	beq.n	800e48e <_dtoa_r+0x746>
 800e58a:	4610      	mov	r0, r2
 800e58c:	301c      	adds	r0, #28
 800e58e:	e777      	b.n	800e480 <_dtoa_r+0x738>
 800e590:	f1b9 0f00 	cmp.w	r9, #0
 800e594:	dc37      	bgt.n	800e606 <_dtoa_r+0x8be>
 800e596:	9b07      	ldr	r3, [sp, #28]
 800e598:	2b02      	cmp	r3, #2
 800e59a:	dd34      	ble.n	800e606 <_dtoa_r+0x8be>
 800e59c:	46ca      	mov	sl, r9
 800e59e:	f1ba 0f00 	cmp.w	sl, #0
 800e5a2:	d10d      	bne.n	800e5c0 <_dtoa_r+0x878>
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	4653      	mov	r3, sl
 800e5a8:	2205      	movs	r2, #5
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f000 f9bc 	bl	800e928 <__multadd>
 800e5b0:	4601      	mov	r1, r0
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	f000 fbd3 	bl	800ed60 <__mcmp>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	f73f adde 	bgt.w	800e17c <_dtoa_r+0x434>
 800e5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c2:	f8dd 8000 	ldr.w	r8, [sp]
 800e5c6:	ea6f 0b03 	mvn.w	fp, r3
 800e5ca:	f04f 0900 	mov.w	r9, #0
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	f000 f987 	bl	800e8e4 <_Bfree>
 800e5d6:	2f00      	cmp	r7, #0
 800e5d8:	f43f aea7 	beq.w	800e32a <_dtoa_r+0x5e2>
 800e5dc:	f1b9 0f00 	cmp.w	r9, #0
 800e5e0:	d005      	beq.n	800e5ee <_dtoa_r+0x8a6>
 800e5e2:	45b9      	cmp	r9, r7
 800e5e4:	d003      	beq.n	800e5ee <_dtoa_r+0x8a6>
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	f000 f97b 	bl	800e8e4 <_Bfree>
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	f000 f977 	bl	800e8e4 <_Bfree>
 800e5f6:	e698      	b.n	800e32a <_dtoa_r+0x5e2>
 800e5f8:	2400      	movs	r4, #0
 800e5fa:	4627      	mov	r7, r4
 800e5fc:	e7e0      	b.n	800e5c0 <_dtoa_r+0x878>
 800e5fe:	46bb      	mov	fp, r7
 800e600:	4604      	mov	r4, r0
 800e602:	4607      	mov	r7, r0
 800e604:	e5ba      	b.n	800e17c <_dtoa_r+0x434>
 800e606:	9b08      	ldr	r3, [sp, #32]
 800e608:	46ca      	mov	sl, r9
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f000 8100 	beq.w	800e810 <_dtoa_r+0xac8>
 800e610:	f1b8 0f00 	cmp.w	r8, #0
 800e614:	dd05      	ble.n	800e622 <_dtoa_r+0x8da>
 800e616:	4639      	mov	r1, r7
 800e618:	4642      	mov	r2, r8
 800e61a:	4630      	mov	r0, r6
 800e61c:	f000 fb34 	bl	800ec88 <__lshift>
 800e620:	4607      	mov	r7, r0
 800e622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e624:	2b00      	cmp	r3, #0
 800e626:	d05d      	beq.n	800e6e4 <_dtoa_r+0x99c>
 800e628:	6879      	ldr	r1, [r7, #4]
 800e62a:	4630      	mov	r0, r6
 800e62c:	f000 f91a 	bl	800e864 <_Balloc>
 800e630:	4680      	mov	r8, r0
 800e632:	b928      	cbnz	r0, 800e640 <_dtoa_r+0x8f8>
 800e634:	4b82      	ldr	r3, [pc, #520]	; (800e840 <_dtoa_r+0xaf8>)
 800e636:	4602      	mov	r2, r0
 800e638:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e63c:	f7ff bb9a 	b.w	800dd74 <_dtoa_r+0x2c>
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	3202      	adds	r2, #2
 800e644:	0092      	lsls	r2, r2, #2
 800e646:	f107 010c 	add.w	r1, r7, #12
 800e64a:	300c      	adds	r0, #12
 800e64c:	f7fe fe6c 	bl	800d328 <memcpy>
 800e650:	2201      	movs	r2, #1
 800e652:	4641      	mov	r1, r8
 800e654:	4630      	mov	r0, r6
 800e656:	f000 fb17 	bl	800ec88 <__lshift>
 800e65a:	9b00      	ldr	r3, [sp, #0]
 800e65c:	3301      	adds	r3, #1
 800e65e:	9305      	str	r3, [sp, #20]
 800e660:	9b00      	ldr	r3, [sp, #0]
 800e662:	4453      	add	r3, sl
 800e664:	9309      	str	r3, [sp, #36]	; 0x24
 800e666:	9b02      	ldr	r3, [sp, #8]
 800e668:	f003 0301 	and.w	r3, r3, #1
 800e66c:	46b9      	mov	r9, r7
 800e66e:	9308      	str	r3, [sp, #32]
 800e670:	4607      	mov	r7, r0
 800e672:	9b05      	ldr	r3, [sp, #20]
 800e674:	4621      	mov	r1, r4
 800e676:	3b01      	subs	r3, #1
 800e678:	4628      	mov	r0, r5
 800e67a:	9302      	str	r3, [sp, #8]
 800e67c:	f7ff fad6 	bl	800dc2c <quorem>
 800e680:	4603      	mov	r3, r0
 800e682:	3330      	adds	r3, #48	; 0x30
 800e684:	9006      	str	r0, [sp, #24]
 800e686:	4649      	mov	r1, r9
 800e688:	4628      	mov	r0, r5
 800e68a:	930a      	str	r3, [sp, #40]	; 0x28
 800e68c:	f000 fb68 	bl	800ed60 <__mcmp>
 800e690:	463a      	mov	r2, r7
 800e692:	4682      	mov	sl, r0
 800e694:	4621      	mov	r1, r4
 800e696:	4630      	mov	r0, r6
 800e698:	f000 fb7e 	bl	800ed98 <__mdiff>
 800e69c:	68c2      	ldr	r2, [r0, #12]
 800e69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a0:	4680      	mov	r8, r0
 800e6a2:	bb0a      	cbnz	r2, 800e6e8 <_dtoa_r+0x9a0>
 800e6a4:	4601      	mov	r1, r0
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f000 fb5a 	bl	800ed60 <__mcmp>
 800e6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	4641      	mov	r1, r8
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	920e      	str	r2, [sp, #56]	; 0x38
 800e6b6:	930a      	str	r3, [sp, #40]	; 0x28
 800e6b8:	f000 f914 	bl	800e8e4 <_Bfree>
 800e6bc:	9b07      	ldr	r3, [sp, #28]
 800e6be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e6c4:	ea43 0102 	orr.w	r1, r3, r2
 800e6c8:	9b08      	ldr	r3, [sp, #32]
 800e6ca:	430b      	orrs	r3, r1
 800e6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ce:	d10d      	bne.n	800e6ec <_dtoa_r+0x9a4>
 800e6d0:	2b39      	cmp	r3, #57	; 0x39
 800e6d2:	d029      	beq.n	800e728 <_dtoa_r+0x9e0>
 800e6d4:	f1ba 0f00 	cmp.w	sl, #0
 800e6d8:	dd01      	ble.n	800e6de <_dtoa_r+0x996>
 800e6da:	9b06      	ldr	r3, [sp, #24]
 800e6dc:	3331      	adds	r3, #49	; 0x31
 800e6de:	9a02      	ldr	r2, [sp, #8]
 800e6e0:	7013      	strb	r3, [r2, #0]
 800e6e2:	e774      	b.n	800e5ce <_dtoa_r+0x886>
 800e6e4:	4638      	mov	r0, r7
 800e6e6:	e7b8      	b.n	800e65a <_dtoa_r+0x912>
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	e7e1      	b.n	800e6b0 <_dtoa_r+0x968>
 800e6ec:	f1ba 0f00 	cmp.w	sl, #0
 800e6f0:	db06      	blt.n	800e700 <_dtoa_r+0x9b8>
 800e6f2:	9907      	ldr	r1, [sp, #28]
 800e6f4:	ea41 0a0a 	orr.w	sl, r1, sl
 800e6f8:	9908      	ldr	r1, [sp, #32]
 800e6fa:	ea5a 0101 	orrs.w	r1, sl, r1
 800e6fe:	d120      	bne.n	800e742 <_dtoa_r+0x9fa>
 800e700:	2a00      	cmp	r2, #0
 800e702:	ddec      	ble.n	800e6de <_dtoa_r+0x996>
 800e704:	4629      	mov	r1, r5
 800e706:	2201      	movs	r2, #1
 800e708:	4630      	mov	r0, r6
 800e70a:	9305      	str	r3, [sp, #20]
 800e70c:	f000 fabc 	bl	800ec88 <__lshift>
 800e710:	4621      	mov	r1, r4
 800e712:	4605      	mov	r5, r0
 800e714:	f000 fb24 	bl	800ed60 <__mcmp>
 800e718:	2800      	cmp	r0, #0
 800e71a:	9b05      	ldr	r3, [sp, #20]
 800e71c:	dc02      	bgt.n	800e724 <_dtoa_r+0x9dc>
 800e71e:	d1de      	bne.n	800e6de <_dtoa_r+0x996>
 800e720:	07da      	lsls	r2, r3, #31
 800e722:	d5dc      	bpl.n	800e6de <_dtoa_r+0x996>
 800e724:	2b39      	cmp	r3, #57	; 0x39
 800e726:	d1d8      	bne.n	800e6da <_dtoa_r+0x992>
 800e728:	9a02      	ldr	r2, [sp, #8]
 800e72a:	2339      	movs	r3, #57	; 0x39
 800e72c:	7013      	strb	r3, [r2, #0]
 800e72e:	4643      	mov	r3, r8
 800e730:	4698      	mov	r8, r3
 800e732:	3b01      	subs	r3, #1
 800e734:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e738:	2a39      	cmp	r2, #57	; 0x39
 800e73a:	d051      	beq.n	800e7e0 <_dtoa_r+0xa98>
 800e73c:	3201      	adds	r2, #1
 800e73e:	701a      	strb	r2, [r3, #0]
 800e740:	e745      	b.n	800e5ce <_dtoa_r+0x886>
 800e742:	2a00      	cmp	r2, #0
 800e744:	dd03      	ble.n	800e74e <_dtoa_r+0xa06>
 800e746:	2b39      	cmp	r3, #57	; 0x39
 800e748:	d0ee      	beq.n	800e728 <_dtoa_r+0x9e0>
 800e74a:	3301      	adds	r3, #1
 800e74c:	e7c7      	b.n	800e6de <_dtoa_r+0x996>
 800e74e:	9a05      	ldr	r2, [sp, #20]
 800e750:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e752:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e756:	428a      	cmp	r2, r1
 800e758:	d02b      	beq.n	800e7b2 <_dtoa_r+0xa6a>
 800e75a:	4629      	mov	r1, r5
 800e75c:	2300      	movs	r3, #0
 800e75e:	220a      	movs	r2, #10
 800e760:	4630      	mov	r0, r6
 800e762:	f000 f8e1 	bl	800e928 <__multadd>
 800e766:	45b9      	cmp	r9, r7
 800e768:	4605      	mov	r5, r0
 800e76a:	f04f 0300 	mov.w	r3, #0
 800e76e:	f04f 020a 	mov.w	r2, #10
 800e772:	4649      	mov	r1, r9
 800e774:	4630      	mov	r0, r6
 800e776:	d107      	bne.n	800e788 <_dtoa_r+0xa40>
 800e778:	f000 f8d6 	bl	800e928 <__multadd>
 800e77c:	4681      	mov	r9, r0
 800e77e:	4607      	mov	r7, r0
 800e780:	9b05      	ldr	r3, [sp, #20]
 800e782:	3301      	adds	r3, #1
 800e784:	9305      	str	r3, [sp, #20]
 800e786:	e774      	b.n	800e672 <_dtoa_r+0x92a>
 800e788:	f000 f8ce 	bl	800e928 <__multadd>
 800e78c:	4639      	mov	r1, r7
 800e78e:	4681      	mov	r9, r0
 800e790:	2300      	movs	r3, #0
 800e792:	220a      	movs	r2, #10
 800e794:	4630      	mov	r0, r6
 800e796:	f000 f8c7 	bl	800e928 <__multadd>
 800e79a:	4607      	mov	r7, r0
 800e79c:	e7f0      	b.n	800e780 <_dtoa_r+0xa38>
 800e79e:	f1ba 0f00 	cmp.w	sl, #0
 800e7a2:	9a00      	ldr	r2, [sp, #0]
 800e7a4:	bfcc      	ite	gt
 800e7a6:	46d0      	movgt	r8, sl
 800e7a8:	f04f 0801 	movle.w	r8, #1
 800e7ac:	4490      	add	r8, r2
 800e7ae:	f04f 0900 	mov.w	r9, #0
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	9302      	str	r3, [sp, #8]
 800e7ba:	f000 fa65 	bl	800ec88 <__lshift>
 800e7be:	4621      	mov	r1, r4
 800e7c0:	4605      	mov	r5, r0
 800e7c2:	f000 facd 	bl	800ed60 <__mcmp>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	dcb1      	bgt.n	800e72e <_dtoa_r+0x9e6>
 800e7ca:	d102      	bne.n	800e7d2 <_dtoa_r+0xa8a>
 800e7cc:	9b02      	ldr	r3, [sp, #8]
 800e7ce:	07db      	lsls	r3, r3, #31
 800e7d0:	d4ad      	bmi.n	800e72e <_dtoa_r+0x9e6>
 800e7d2:	4643      	mov	r3, r8
 800e7d4:	4698      	mov	r8, r3
 800e7d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7da:	2a30      	cmp	r2, #48	; 0x30
 800e7dc:	d0fa      	beq.n	800e7d4 <_dtoa_r+0xa8c>
 800e7de:	e6f6      	b.n	800e5ce <_dtoa_r+0x886>
 800e7e0:	9a00      	ldr	r2, [sp, #0]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d1a4      	bne.n	800e730 <_dtoa_r+0x9e8>
 800e7e6:	f10b 0b01 	add.w	fp, fp, #1
 800e7ea:	2331      	movs	r3, #49	; 0x31
 800e7ec:	e778      	b.n	800e6e0 <_dtoa_r+0x998>
 800e7ee:	4b15      	ldr	r3, [pc, #84]	; (800e844 <_dtoa_r+0xafc>)
 800e7f0:	f7ff bb12 	b.w	800de18 <_dtoa_r+0xd0>
 800e7f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f47f aaee 	bne.w	800ddd8 <_dtoa_r+0x90>
 800e7fc:	4b12      	ldr	r3, [pc, #72]	; (800e848 <_dtoa_r+0xb00>)
 800e7fe:	f7ff bb0b 	b.w	800de18 <_dtoa_r+0xd0>
 800e802:	f1ba 0f00 	cmp.w	sl, #0
 800e806:	dc03      	bgt.n	800e810 <_dtoa_r+0xac8>
 800e808:	9b07      	ldr	r3, [sp, #28]
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	f73f aec7 	bgt.w	800e59e <_dtoa_r+0x856>
 800e810:	f8dd 8000 	ldr.w	r8, [sp]
 800e814:	4621      	mov	r1, r4
 800e816:	4628      	mov	r0, r5
 800e818:	f7ff fa08 	bl	800dc2c <quorem>
 800e81c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e820:	f808 3b01 	strb.w	r3, [r8], #1
 800e824:	9a00      	ldr	r2, [sp, #0]
 800e826:	eba8 0202 	sub.w	r2, r8, r2
 800e82a:	4592      	cmp	sl, r2
 800e82c:	ddb7      	ble.n	800e79e <_dtoa_r+0xa56>
 800e82e:	4629      	mov	r1, r5
 800e830:	2300      	movs	r3, #0
 800e832:	220a      	movs	r2, #10
 800e834:	4630      	mov	r0, r6
 800e836:	f000 f877 	bl	800e928 <__multadd>
 800e83a:	4605      	mov	r5, r0
 800e83c:	e7ea      	b.n	800e814 <_dtoa_r+0xacc>
 800e83e:	bf00      	nop
 800e840:	0801a2e7 	.word	0x0801a2e7
 800e844:	0801a240 	.word	0x0801a240
 800e848:	0801a264 	.word	0x0801a264

0800e84c <_localeconv_r>:
 800e84c:	4800      	ldr	r0, [pc, #0]	; (800e850 <_localeconv_r+0x4>)
 800e84e:	4770      	bx	lr
 800e850:	240004d4 	.word	0x240004d4

0800e854 <malloc>:
 800e854:	4b02      	ldr	r3, [pc, #8]	; (800e860 <malloc+0xc>)
 800e856:	4601      	mov	r1, r0
 800e858:	6818      	ldr	r0, [r3, #0]
 800e85a:	f000 bbe1 	b.w	800f020 <_malloc_r>
 800e85e:	bf00      	nop
 800e860:	24000380 	.word	0x24000380

0800e864 <_Balloc>:
 800e864:	b570      	push	{r4, r5, r6, lr}
 800e866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e868:	4604      	mov	r4, r0
 800e86a:	460d      	mov	r5, r1
 800e86c:	b976      	cbnz	r6, 800e88c <_Balloc+0x28>
 800e86e:	2010      	movs	r0, #16
 800e870:	f7ff fff0 	bl	800e854 <malloc>
 800e874:	4602      	mov	r2, r0
 800e876:	6260      	str	r0, [r4, #36]	; 0x24
 800e878:	b920      	cbnz	r0, 800e884 <_Balloc+0x20>
 800e87a:	4b18      	ldr	r3, [pc, #96]	; (800e8dc <_Balloc+0x78>)
 800e87c:	4818      	ldr	r0, [pc, #96]	; (800e8e0 <_Balloc+0x7c>)
 800e87e:	2166      	movs	r1, #102	; 0x66
 800e880:	f000 fd94 	bl	800f3ac <__assert_func>
 800e884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e888:	6006      	str	r6, [r0, #0]
 800e88a:	60c6      	str	r6, [r0, #12]
 800e88c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e88e:	68f3      	ldr	r3, [r6, #12]
 800e890:	b183      	cbz	r3, 800e8b4 <_Balloc+0x50>
 800e892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e89a:	b9b8      	cbnz	r0, 800e8cc <_Balloc+0x68>
 800e89c:	2101      	movs	r1, #1
 800e89e:	fa01 f605 	lsl.w	r6, r1, r5
 800e8a2:	1d72      	adds	r2, r6, #5
 800e8a4:	0092      	lsls	r2, r2, #2
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f000 fb5a 	bl	800ef60 <_calloc_r>
 800e8ac:	b160      	cbz	r0, 800e8c8 <_Balloc+0x64>
 800e8ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e8b2:	e00e      	b.n	800e8d2 <_Balloc+0x6e>
 800e8b4:	2221      	movs	r2, #33	; 0x21
 800e8b6:	2104      	movs	r1, #4
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f000 fb51 	bl	800ef60 <_calloc_r>
 800e8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8c0:	60f0      	str	r0, [r6, #12]
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1e4      	bne.n	800e892 <_Balloc+0x2e>
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	bd70      	pop	{r4, r5, r6, pc}
 800e8cc:	6802      	ldr	r2, [r0, #0]
 800e8ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8d8:	e7f7      	b.n	800e8ca <_Balloc+0x66>
 800e8da:	bf00      	nop
 800e8dc:	0801a271 	.word	0x0801a271
 800e8e0:	0801a2f8 	.word	0x0801a2f8

0800e8e4 <_Bfree>:
 800e8e4:	b570      	push	{r4, r5, r6, lr}
 800e8e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e8e8:	4605      	mov	r5, r0
 800e8ea:	460c      	mov	r4, r1
 800e8ec:	b976      	cbnz	r6, 800e90c <_Bfree+0x28>
 800e8ee:	2010      	movs	r0, #16
 800e8f0:	f7ff ffb0 	bl	800e854 <malloc>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	6268      	str	r0, [r5, #36]	; 0x24
 800e8f8:	b920      	cbnz	r0, 800e904 <_Bfree+0x20>
 800e8fa:	4b09      	ldr	r3, [pc, #36]	; (800e920 <_Bfree+0x3c>)
 800e8fc:	4809      	ldr	r0, [pc, #36]	; (800e924 <_Bfree+0x40>)
 800e8fe:	218a      	movs	r1, #138	; 0x8a
 800e900:	f000 fd54 	bl	800f3ac <__assert_func>
 800e904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e908:	6006      	str	r6, [r0, #0]
 800e90a:	60c6      	str	r6, [r0, #12]
 800e90c:	b13c      	cbz	r4, 800e91e <_Bfree+0x3a>
 800e90e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e910:	6862      	ldr	r2, [r4, #4]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e918:	6021      	str	r1, [r4, #0]
 800e91a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e91e:	bd70      	pop	{r4, r5, r6, pc}
 800e920:	0801a271 	.word	0x0801a271
 800e924:	0801a2f8 	.word	0x0801a2f8

0800e928 <__multadd>:
 800e928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92c:	690e      	ldr	r6, [r1, #16]
 800e92e:	4607      	mov	r7, r0
 800e930:	4698      	mov	r8, r3
 800e932:	460c      	mov	r4, r1
 800e934:	f101 0014 	add.w	r0, r1, #20
 800e938:	2300      	movs	r3, #0
 800e93a:	6805      	ldr	r5, [r0, #0]
 800e93c:	b2a9      	uxth	r1, r5
 800e93e:	fb02 8101 	mla	r1, r2, r1, r8
 800e942:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e946:	0c2d      	lsrs	r5, r5, #16
 800e948:	fb02 c505 	mla	r5, r2, r5, ip
 800e94c:	b289      	uxth	r1, r1
 800e94e:	3301      	adds	r3, #1
 800e950:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e954:	429e      	cmp	r6, r3
 800e956:	f840 1b04 	str.w	r1, [r0], #4
 800e95a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e95e:	dcec      	bgt.n	800e93a <__multadd+0x12>
 800e960:	f1b8 0f00 	cmp.w	r8, #0
 800e964:	d022      	beq.n	800e9ac <__multadd+0x84>
 800e966:	68a3      	ldr	r3, [r4, #8]
 800e968:	42b3      	cmp	r3, r6
 800e96a:	dc19      	bgt.n	800e9a0 <__multadd+0x78>
 800e96c:	6861      	ldr	r1, [r4, #4]
 800e96e:	4638      	mov	r0, r7
 800e970:	3101      	adds	r1, #1
 800e972:	f7ff ff77 	bl	800e864 <_Balloc>
 800e976:	4605      	mov	r5, r0
 800e978:	b928      	cbnz	r0, 800e986 <__multadd+0x5e>
 800e97a:	4602      	mov	r2, r0
 800e97c:	4b0d      	ldr	r3, [pc, #52]	; (800e9b4 <__multadd+0x8c>)
 800e97e:	480e      	ldr	r0, [pc, #56]	; (800e9b8 <__multadd+0x90>)
 800e980:	21b5      	movs	r1, #181	; 0xb5
 800e982:	f000 fd13 	bl	800f3ac <__assert_func>
 800e986:	6922      	ldr	r2, [r4, #16]
 800e988:	3202      	adds	r2, #2
 800e98a:	f104 010c 	add.w	r1, r4, #12
 800e98e:	0092      	lsls	r2, r2, #2
 800e990:	300c      	adds	r0, #12
 800e992:	f7fe fcc9 	bl	800d328 <memcpy>
 800e996:	4621      	mov	r1, r4
 800e998:	4638      	mov	r0, r7
 800e99a:	f7ff ffa3 	bl	800e8e4 <_Bfree>
 800e99e:	462c      	mov	r4, r5
 800e9a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e9a4:	3601      	adds	r6, #1
 800e9a6:	f8c3 8014 	str.w	r8, [r3, #20]
 800e9aa:	6126      	str	r6, [r4, #16]
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b2:	bf00      	nop
 800e9b4:	0801a2e7 	.word	0x0801a2e7
 800e9b8:	0801a2f8 	.word	0x0801a2f8

0800e9bc <__hi0bits>:
 800e9bc:	0c03      	lsrs	r3, r0, #16
 800e9be:	041b      	lsls	r3, r3, #16
 800e9c0:	b9d3      	cbnz	r3, 800e9f8 <__hi0bits+0x3c>
 800e9c2:	0400      	lsls	r0, r0, #16
 800e9c4:	2310      	movs	r3, #16
 800e9c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e9ca:	bf04      	itt	eq
 800e9cc:	0200      	lsleq	r0, r0, #8
 800e9ce:	3308      	addeq	r3, #8
 800e9d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e9d4:	bf04      	itt	eq
 800e9d6:	0100      	lsleq	r0, r0, #4
 800e9d8:	3304      	addeq	r3, #4
 800e9da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e9de:	bf04      	itt	eq
 800e9e0:	0080      	lsleq	r0, r0, #2
 800e9e2:	3302      	addeq	r3, #2
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	db05      	blt.n	800e9f4 <__hi0bits+0x38>
 800e9e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e9ec:	f103 0301 	add.w	r3, r3, #1
 800e9f0:	bf08      	it	eq
 800e9f2:	2320      	moveq	r3, #32
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	4770      	bx	lr
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	e7e4      	b.n	800e9c6 <__hi0bits+0xa>

0800e9fc <__lo0bits>:
 800e9fc:	6803      	ldr	r3, [r0, #0]
 800e9fe:	f013 0207 	ands.w	r2, r3, #7
 800ea02:	4601      	mov	r1, r0
 800ea04:	d00b      	beq.n	800ea1e <__lo0bits+0x22>
 800ea06:	07da      	lsls	r2, r3, #31
 800ea08:	d424      	bmi.n	800ea54 <__lo0bits+0x58>
 800ea0a:	0798      	lsls	r0, r3, #30
 800ea0c:	bf49      	itett	mi
 800ea0e:	085b      	lsrmi	r3, r3, #1
 800ea10:	089b      	lsrpl	r3, r3, #2
 800ea12:	2001      	movmi	r0, #1
 800ea14:	600b      	strmi	r3, [r1, #0]
 800ea16:	bf5c      	itt	pl
 800ea18:	600b      	strpl	r3, [r1, #0]
 800ea1a:	2002      	movpl	r0, #2
 800ea1c:	4770      	bx	lr
 800ea1e:	b298      	uxth	r0, r3
 800ea20:	b9b0      	cbnz	r0, 800ea50 <__lo0bits+0x54>
 800ea22:	0c1b      	lsrs	r3, r3, #16
 800ea24:	2010      	movs	r0, #16
 800ea26:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ea2a:	bf04      	itt	eq
 800ea2c:	0a1b      	lsreq	r3, r3, #8
 800ea2e:	3008      	addeq	r0, #8
 800ea30:	071a      	lsls	r2, r3, #28
 800ea32:	bf04      	itt	eq
 800ea34:	091b      	lsreq	r3, r3, #4
 800ea36:	3004      	addeq	r0, #4
 800ea38:	079a      	lsls	r2, r3, #30
 800ea3a:	bf04      	itt	eq
 800ea3c:	089b      	lsreq	r3, r3, #2
 800ea3e:	3002      	addeq	r0, #2
 800ea40:	07da      	lsls	r2, r3, #31
 800ea42:	d403      	bmi.n	800ea4c <__lo0bits+0x50>
 800ea44:	085b      	lsrs	r3, r3, #1
 800ea46:	f100 0001 	add.w	r0, r0, #1
 800ea4a:	d005      	beq.n	800ea58 <__lo0bits+0x5c>
 800ea4c:	600b      	str	r3, [r1, #0]
 800ea4e:	4770      	bx	lr
 800ea50:	4610      	mov	r0, r2
 800ea52:	e7e8      	b.n	800ea26 <__lo0bits+0x2a>
 800ea54:	2000      	movs	r0, #0
 800ea56:	4770      	bx	lr
 800ea58:	2020      	movs	r0, #32
 800ea5a:	4770      	bx	lr

0800ea5c <__i2b>:
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	460c      	mov	r4, r1
 800ea60:	2101      	movs	r1, #1
 800ea62:	f7ff feff 	bl	800e864 <_Balloc>
 800ea66:	4602      	mov	r2, r0
 800ea68:	b928      	cbnz	r0, 800ea76 <__i2b+0x1a>
 800ea6a:	4b05      	ldr	r3, [pc, #20]	; (800ea80 <__i2b+0x24>)
 800ea6c:	4805      	ldr	r0, [pc, #20]	; (800ea84 <__i2b+0x28>)
 800ea6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ea72:	f000 fc9b 	bl	800f3ac <__assert_func>
 800ea76:	2301      	movs	r3, #1
 800ea78:	6144      	str	r4, [r0, #20]
 800ea7a:	6103      	str	r3, [r0, #16]
 800ea7c:	bd10      	pop	{r4, pc}
 800ea7e:	bf00      	nop
 800ea80:	0801a2e7 	.word	0x0801a2e7
 800ea84:	0801a2f8 	.word	0x0801a2f8

0800ea88 <__multiply>:
 800ea88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8c:	4614      	mov	r4, r2
 800ea8e:	690a      	ldr	r2, [r1, #16]
 800ea90:	6923      	ldr	r3, [r4, #16]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	bfb8      	it	lt
 800ea96:	460b      	movlt	r3, r1
 800ea98:	460d      	mov	r5, r1
 800ea9a:	bfbc      	itt	lt
 800ea9c:	4625      	movlt	r5, r4
 800ea9e:	461c      	movlt	r4, r3
 800eaa0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800eaa4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eaa8:	68ab      	ldr	r3, [r5, #8]
 800eaaa:	6869      	ldr	r1, [r5, #4]
 800eaac:	eb0a 0709 	add.w	r7, sl, r9
 800eab0:	42bb      	cmp	r3, r7
 800eab2:	b085      	sub	sp, #20
 800eab4:	bfb8      	it	lt
 800eab6:	3101      	addlt	r1, #1
 800eab8:	f7ff fed4 	bl	800e864 <_Balloc>
 800eabc:	b930      	cbnz	r0, 800eacc <__multiply+0x44>
 800eabe:	4602      	mov	r2, r0
 800eac0:	4b42      	ldr	r3, [pc, #264]	; (800ebcc <__multiply+0x144>)
 800eac2:	4843      	ldr	r0, [pc, #268]	; (800ebd0 <__multiply+0x148>)
 800eac4:	f240 115d 	movw	r1, #349	; 0x15d
 800eac8:	f000 fc70 	bl	800f3ac <__assert_func>
 800eacc:	f100 0614 	add.w	r6, r0, #20
 800ead0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ead4:	4633      	mov	r3, r6
 800ead6:	2200      	movs	r2, #0
 800ead8:	4543      	cmp	r3, r8
 800eada:	d31e      	bcc.n	800eb1a <__multiply+0x92>
 800eadc:	f105 0c14 	add.w	ip, r5, #20
 800eae0:	f104 0314 	add.w	r3, r4, #20
 800eae4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800eae8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800eaec:	9202      	str	r2, [sp, #8]
 800eaee:	ebac 0205 	sub.w	r2, ip, r5
 800eaf2:	3a15      	subs	r2, #21
 800eaf4:	f022 0203 	bic.w	r2, r2, #3
 800eaf8:	3204      	adds	r2, #4
 800eafa:	f105 0115 	add.w	r1, r5, #21
 800eafe:	458c      	cmp	ip, r1
 800eb00:	bf38      	it	cc
 800eb02:	2204      	movcc	r2, #4
 800eb04:	9201      	str	r2, [sp, #4]
 800eb06:	9a02      	ldr	r2, [sp, #8]
 800eb08:	9303      	str	r3, [sp, #12]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d808      	bhi.n	800eb20 <__multiply+0x98>
 800eb0e:	2f00      	cmp	r7, #0
 800eb10:	dc55      	bgt.n	800ebbe <__multiply+0x136>
 800eb12:	6107      	str	r7, [r0, #16]
 800eb14:	b005      	add	sp, #20
 800eb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb1a:	f843 2b04 	str.w	r2, [r3], #4
 800eb1e:	e7db      	b.n	800ead8 <__multiply+0x50>
 800eb20:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb24:	f1ba 0f00 	cmp.w	sl, #0
 800eb28:	d020      	beq.n	800eb6c <__multiply+0xe4>
 800eb2a:	f105 0e14 	add.w	lr, r5, #20
 800eb2e:	46b1      	mov	r9, r6
 800eb30:	2200      	movs	r2, #0
 800eb32:	f85e 4b04 	ldr.w	r4, [lr], #4
 800eb36:	f8d9 b000 	ldr.w	fp, [r9]
 800eb3a:	b2a1      	uxth	r1, r4
 800eb3c:	fa1f fb8b 	uxth.w	fp, fp
 800eb40:	fb0a b101 	mla	r1, sl, r1, fp
 800eb44:	4411      	add	r1, r2
 800eb46:	f8d9 2000 	ldr.w	r2, [r9]
 800eb4a:	0c24      	lsrs	r4, r4, #16
 800eb4c:	0c12      	lsrs	r2, r2, #16
 800eb4e:	fb0a 2404 	mla	r4, sl, r4, r2
 800eb52:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800eb56:	b289      	uxth	r1, r1
 800eb58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800eb5c:	45f4      	cmp	ip, lr
 800eb5e:	f849 1b04 	str.w	r1, [r9], #4
 800eb62:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800eb66:	d8e4      	bhi.n	800eb32 <__multiply+0xaa>
 800eb68:	9901      	ldr	r1, [sp, #4]
 800eb6a:	5072      	str	r2, [r6, r1]
 800eb6c:	9a03      	ldr	r2, [sp, #12]
 800eb6e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb72:	3304      	adds	r3, #4
 800eb74:	f1b9 0f00 	cmp.w	r9, #0
 800eb78:	d01f      	beq.n	800ebba <__multiply+0x132>
 800eb7a:	6834      	ldr	r4, [r6, #0]
 800eb7c:	f105 0114 	add.w	r1, r5, #20
 800eb80:	46b6      	mov	lr, r6
 800eb82:	f04f 0a00 	mov.w	sl, #0
 800eb86:	880a      	ldrh	r2, [r1, #0]
 800eb88:	f8be b002 	ldrh.w	fp, [lr, #2]
 800eb8c:	fb09 b202 	mla	r2, r9, r2, fp
 800eb90:	4492      	add	sl, r2
 800eb92:	b2a4      	uxth	r4, r4
 800eb94:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800eb98:	f84e 4b04 	str.w	r4, [lr], #4
 800eb9c:	f851 4b04 	ldr.w	r4, [r1], #4
 800eba0:	f8be 2000 	ldrh.w	r2, [lr]
 800eba4:	0c24      	lsrs	r4, r4, #16
 800eba6:	fb09 2404 	mla	r4, r9, r4, r2
 800ebaa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ebae:	458c      	cmp	ip, r1
 800ebb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ebb4:	d8e7      	bhi.n	800eb86 <__multiply+0xfe>
 800ebb6:	9a01      	ldr	r2, [sp, #4]
 800ebb8:	50b4      	str	r4, [r6, r2]
 800ebba:	3604      	adds	r6, #4
 800ebbc:	e7a3      	b.n	800eb06 <__multiply+0x7e>
 800ebbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1a5      	bne.n	800eb12 <__multiply+0x8a>
 800ebc6:	3f01      	subs	r7, #1
 800ebc8:	e7a1      	b.n	800eb0e <__multiply+0x86>
 800ebca:	bf00      	nop
 800ebcc:	0801a2e7 	.word	0x0801a2e7
 800ebd0:	0801a2f8 	.word	0x0801a2f8

0800ebd4 <__pow5mult>:
 800ebd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebd8:	4615      	mov	r5, r2
 800ebda:	f012 0203 	ands.w	r2, r2, #3
 800ebde:	4606      	mov	r6, r0
 800ebe0:	460f      	mov	r7, r1
 800ebe2:	d007      	beq.n	800ebf4 <__pow5mult+0x20>
 800ebe4:	4c25      	ldr	r4, [pc, #148]	; (800ec7c <__pow5mult+0xa8>)
 800ebe6:	3a01      	subs	r2, #1
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebee:	f7ff fe9b 	bl	800e928 <__multadd>
 800ebf2:	4607      	mov	r7, r0
 800ebf4:	10ad      	asrs	r5, r5, #2
 800ebf6:	d03d      	beq.n	800ec74 <__pow5mult+0xa0>
 800ebf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ebfa:	b97c      	cbnz	r4, 800ec1c <__pow5mult+0x48>
 800ebfc:	2010      	movs	r0, #16
 800ebfe:	f7ff fe29 	bl	800e854 <malloc>
 800ec02:	4602      	mov	r2, r0
 800ec04:	6270      	str	r0, [r6, #36]	; 0x24
 800ec06:	b928      	cbnz	r0, 800ec14 <__pow5mult+0x40>
 800ec08:	4b1d      	ldr	r3, [pc, #116]	; (800ec80 <__pow5mult+0xac>)
 800ec0a:	481e      	ldr	r0, [pc, #120]	; (800ec84 <__pow5mult+0xb0>)
 800ec0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ec10:	f000 fbcc 	bl	800f3ac <__assert_func>
 800ec14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec18:	6004      	str	r4, [r0, #0]
 800ec1a:	60c4      	str	r4, [r0, #12]
 800ec1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec24:	b94c      	cbnz	r4, 800ec3a <__pow5mult+0x66>
 800ec26:	f240 2171 	movw	r1, #625	; 0x271
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f7ff ff16 	bl	800ea5c <__i2b>
 800ec30:	2300      	movs	r3, #0
 800ec32:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec36:	4604      	mov	r4, r0
 800ec38:	6003      	str	r3, [r0, #0]
 800ec3a:	f04f 0900 	mov.w	r9, #0
 800ec3e:	07eb      	lsls	r3, r5, #31
 800ec40:	d50a      	bpl.n	800ec58 <__pow5mult+0x84>
 800ec42:	4639      	mov	r1, r7
 800ec44:	4622      	mov	r2, r4
 800ec46:	4630      	mov	r0, r6
 800ec48:	f7ff ff1e 	bl	800ea88 <__multiply>
 800ec4c:	4639      	mov	r1, r7
 800ec4e:	4680      	mov	r8, r0
 800ec50:	4630      	mov	r0, r6
 800ec52:	f7ff fe47 	bl	800e8e4 <_Bfree>
 800ec56:	4647      	mov	r7, r8
 800ec58:	106d      	asrs	r5, r5, #1
 800ec5a:	d00b      	beq.n	800ec74 <__pow5mult+0xa0>
 800ec5c:	6820      	ldr	r0, [r4, #0]
 800ec5e:	b938      	cbnz	r0, 800ec70 <__pow5mult+0x9c>
 800ec60:	4622      	mov	r2, r4
 800ec62:	4621      	mov	r1, r4
 800ec64:	4630      	mov	r0, r6
 800ec66:	f7ff ff0f 	bl	800ea88 <__multiply>
 800ec6a:	6020      	str	r0, [r4, #0]
 800ec6c:	f8c0 9000 	str.w	r9, [r0]
 800ec70:	4604      	mov	r4, r0
 800ec72:	e7e4      	b.n	800ec3e <__pow5mult+0x6a>
 800ec74:	4638      	mov	r0, r7
 800ec76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec7a:	bf00      	nop
 800ec7c:	0801a448 	.word	0x0801a448
 800ec80:	0801a271 	.word	0x0801a271
 800ec84:	0801a2f8 	.word	0x0801a2f8

0800ec88 <__lshift>:
 800ec88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec8c:	460c      	mov	r4, r1
 800ec8e:	6849      	ldr	r1, [r1, #4]
 800ec90:	6923      	ldr	r3, [r4, #16]
 800ec92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec96:	68a3      	ldr	r3, [r4, #8]
 800ec98:	4607      	mov	r7, r0
 800ec9a:	4691      	mov	r9, r2
 800ec9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eca0:	f108 0601 	add.w	r6, r8, #1
 800eca4:	42b3      	cmp	r3, r6
 800eca6:	db0b      	blt.n	800ecc0 <__lshift+0x38>
 800eca8:	4638      	mov	r0, r7
 800ecaa:	f7ff fddb 	bl	800e864 <_Balloc>
 800ecae:	4605      	mov	r5, r0
 800ecb0:	b948      	cbnz	r0, 800ecc6 <__lshift+0x3e>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	4b28      	ldr	r3, [pc, #160]	; (800ed58 <__lshift+0xd0>)
 800ecb6:	4829      	ldr	r0, [pc, #164]	; (800ed5c <__lshift+0xd4>)
 800ecb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ecbc:	f000 fb76 	bl	800f3ac <__assert_func>
 800ecc0:	3101      	adds	r1, #1
 800ecc2:	005b      	lsls	r3, r3, #1
 800ecc4:	e7ee      	b.n	800eca4 <__lshift+0x1c>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	f100 0114 	add.w	r1, r0, #20
 800eccc:	f100 0210 	add.w	r2, r0, #16
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	4553      	cmp	r3, sl
 800ecd4:	db33      	blt.n	800ed3e <__lshift+0xb6>
 800ecd6:	6920      	ldr	r0, [r4, #16]
 800ecd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecdc:	f104 0314 	add.w	r3, r4, #20
 800ece0:	f019 091f 	ands.w	r9, r9, #31
 800ece4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ece8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ecec:	d02b      	beq.n	800ed46 <__lshift+0xbe>
 800ecee:	f1c9 0e20 	rsb	lr, r9, #32
 800ecf2:	468a      	mov	sl, r1
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	6818      	ldr	r0, [r3, #0]
 800ecf8:	fa00 f009 	lsl.w	r0, r0, r9
 800ecfc:	4302      	orrs	r2, r0
 800ecfe:	f84a 2b04 	str.w	r2, [sl], #4
 800ed02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed06:	459c      	cmp	ip, r3
 800ed08:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed0c:	d8f3      	bhi.n	800ecf6 <__lshift+0x6e>
 800ed0e:	ebac 0304 	sub.w	r3, ip, r4
 800ed12:	3b15      	subs	r3, #21
 800ed14:	f023 0303 	bic.w	r3, r3, #3
 800ed18:	3304      	adds	r3, #4
 800ed1a:	f104 0015 	add.w	r0, r4, #21
 800ed1e:	4584      	cmp	ip, r0
 800ed20:	bf38      	it	cc
 800ed22:	2304      	movcc	r3, #4
 800ed24:	50ca      	str	r2, [r1, r3]
 800ed26:	b10a      	cbz	r2, 800ed2c <__lshift+0xa4>
 800ed28:	f108 0602 	add.w	r6, r8, #2
 800ed2c:	3e01      	subs	r6, #1
 800ed2e:	4638      	mov	r0, r7
 800ed30:	612e      	str	r6, [r5, #16]
 800ed32:	4621      	mov	r1, r4
 800ed34:	f7ff fdd6 	bl	800e8e4 <_Bfree>
 800ed38:	4628      	mov	r0, r5
 800ed3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed42:	3301      	adds	r3, #1
 800ed44:	e7c5      	b.n	800ecd2 <__lshift+0x4a>
 800ed46:	3904      	subs	r1, #4
 800ed48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed50:	459c      	cmp	ip, r3
 800ed52:	d8f9      	bhi.n	800ed48 <__lshift+0xc0>
 800ed54:	e7ea      	b.n	800ed2c <__lshift+0xa4>
 800ed56:	bf00      	nop
 800ed58:	0801a2e7 	.word	0x0801a2e7
 800ed5c:	0801a2f8 	.word	0x0801a2f8

0800ed60 <__mcmp>:
 800ed60:	b530      	push	{r4, r5, lr}
 800ed62:	6902      	ldr	r2, [r0, #16]
 800ed64:	690c      	ldr	r4, [r1, #16]
 800ed66:	1b12      	subs	r2, r2, r4
 800ed68:	d10e      	bne.n	800ed88 <__mcmp+0x28>
 800ed6a:	f100 0314 	add.w	r3, r0, #20
 800ed6e:	3114      	adds	r1, #20
 800ed70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed80:	42a5      	cmp	r5, r4
 800ed82:	d003      	beq.n	800ed8c <__mcmp+0x2c>
 800ed84:	d305      	bcc.n	800ed92 <__mcmp+0x32>
 800ed86:	2201      	movs	r2, #1
 800ed88:	4610      	mov	r0, r2
 800ed8a:	bd30      	pop	{r4, r5, pc}
 800ed8c:	4283      	cmp	r3, r0
 800ed8e:	d3f3      	bcc.n	800ed78 <__mcmp+0x18>
 800ed90:	e7fa      	b.n	800ed88 <__mcmp+0x28>
 800ed92:	f04f 32ff 	mov.w	r2, #4294967295
 800ed96:	e7f7      	b.n	800ed88 <__mcmp+0x28>

0800ed98 <__mdiff>:
 800ed98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9c:	460c      	mov	r4, r1
 800ed9e:	4606      	mov	r6, r0
 800eda0:	4611      	mov	r1, r2
 800eda2:	4620      	mov	r0, r4
 800eda4:	4617      	mov	r7, r2
 800eda6:	f7ff ffdb 	bl	800ed60 <__mcmp>
 800edaa:	1e05      	subs	r5, r0, #0
 800edac:	d110      	bne.n	800edd0 <__mdiff+0x38>
 800edae:	4629      	mov	r1, r5
 800edb0:	4630      	mov	r0, r6
 800edb2:	f7ff fd57 	bl	800e864 <_Balloc>
 800edb6:	b930      	cbnz	r0, 800edc6 <__mdiff+0x2e>
 800edb8:	4b39      	ldr	r3, [pc, #228]	; (800eea0 <__mdiff+0x108>)
 800edba:	4602      	mov	r2, r0
 800edbc:	f240 2132 	movw	r1, #562	; 0x232
 800edc0:	4838      	ldr	r0, [pc, #224]	; (800eea4 <__mdiff+0x10c>)
 800edc2:	f000 faf3 	bl	800f3ac <__assert_func>
 800edc6:	2301      	movs	r3, #1
 800edc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800edcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd0:	bfa4      	itt	ge
 800edd2:	463b      	movge	r3, r7
 800edd4:	4627      	movge	r7, r4
 800edd6:	4630      	mov	r0, r6
 800edd8:	6879      	ldr	r1, [r7, #4]
 800edda:	bfa6      	itte	ge
 800eddc:	461c      	movge	r4, r3
 800edde:	2500      	movge	r5, #0
 800ede0:	2501      	movlt	r5, #1
 800ede2:	f7ff fd3f 	bl	800e864 <_Balloc>
 800ede6:	b920      	cbnz	r0, 800edf2 <__mdiff+0x5a>
 800ede8:	4b2d      	ldr	r3, [pc, #180]	; (800eea0 <__mdiff+0x108>)
 800edea:	4602      	mov	r2, r0
 800edec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800edf0:	e7e6      	b.n	800edc0 <__mdiff+0x28>
 800edf2:	693e      	ldr	r6, [r7, #16]
 800edf4:	60c5      	str	r5, [r0, #12]
 800edf6:	6925      	ldr	r5, [r4, #16]
 800edf8:	f107 0114 	add.w	r1, r7, #20
 800edfc:	f104 0914 	add.w	r9, r4, #20
 800ee00:	f100 0e14 	add.w	lr, r0, #20
 800ee04:	f107 0210 	add.w	r2, r7, #16
 800ee08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ee0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ee10:	46f2      	mov	sl, lr
 800ee12:	2700      	movs	r7, #0
 800ee14:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ee1c:	fa1f f883 	uxth.w	r8, r3
 800ee20:	fa17 f78b 	uxtah	r7, r7, fp
 800ee24:	0c1b      	lsrs	r3, r3, #16
 800ee26:	eba7 0808 	sub.w	r8, r7, r8
 800ee2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ee32:	fa1f f888 	uxth.w	r8, r8
 800ee36:	141f      	asrs	r7, r3, #16
 800ee38:	454d      	cmp	r5, r9
 800ee3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ee3e:	f84a 3b04 	str.w	r3, [sl], #4
 800ee42:	d8e7      	bhi.n	800ee14 <__mdiff+0x7c>
 800ee44:	1b2b      	subs	r3, r5, r4
 800ee46:	3b15      	subs	r3, #21
 800ee48:	f023 0303 	bic.w	r3, r3, #3
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	3415      	adds	r4, #21
 800ee50:	42a5      	cmp	r5, r4
 800ee52:	bf38      	it	cc
 800ee54:	2304      	movcc	r3, #4
 800ee56:	4419      	add	r1, r3
 800ee58:	4473      	add	r3, lr
 800ee5a:	469e      	mov	lr, r3
 800ee5c:	460d      	mov	r5, r1
 800ee5e:	4565      	cmp	r5, ip
 800ee60:	d30e      	bcc.n	800ee80 <__mdiff+0xe8>
 800ee62:	f10c 0203 	add.w	r2, ip, #3
 800ee66:	1a52      	subs	r2, r2, r1
 800ee68:	f022 0203 	bic.w	r2, r2, #3
 800ee6c:	3903      	subs	r1, #3
 800ee6e:	458c      	cmp	ip, r1
 800ee70:	bf38      	it	cc
 800ee72:	2200      	movcc	r2, #0
 800ee74:	441a      	add	r2, r3
 800ee76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ee7a:	b17b      	cbz	r3, 800ee9c <__mdiff+0x104>
 800ee7c:	6106      	str	r6, [r0, #16]
 800ee7e:	e7a5      	b.n	800edcc <__mdiff+0x34>
 800ee80:	f855 8b04 	ldr.w	r8, [r5], #4
 800ee84:	fa17 f488 	uxtah	r4, r7, r8
 800ee88:	1422      	asrs	r2, r4, #16
 800ee8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ee8e:	b2a4      	uxth	r4, r4
 800ee90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ee94:	f84e 4b04 	str.w	r4, [lr], #4
 800ee98:	1417      	asrs	r7, r2, #16
 800ee9a:	e7e0      	b.n	800ee5e <__mdiff+0xc6>
 800ee9c:	3e01      	subs	r6, #1
 800ee9e:	e7ea      	b.n	800ee76 <__mdiff+0xde>
 800eea0:	0801a2e7 	.word	0x0801a2e7
 800eea4:	0801a2f8 	.word	0x0801a2f8

0800eea8 <__d2b>:
 800eea8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eeac:	4689      	mov	r9, r1
 800eeae:	2101      	movs	r1, #1
 800eeb0:	ec57 6b10 	vmov	r6, r7, d0
 800eeb4:	4690      	mov	r8, r2
 800eeb6:	f7ff fcd5 	bl	800e864 <_Balloc>
 800eeba:	4604      	mov	r4, r0
 800eebc:	b930      	cbnz	r0, 800eecc <__d2b+0x24>
 800eebe:	4602      	mov	r2, r0
 800eec0:	4b25      	ldr	r3, [pc, #148]	; (800ef58 <__d2b+0xb0>)
 800eec2:	4826      	ldr	r0, [pc, #152]	; (800ef5c <__d2b+0xb4>)
 800eec4:	f240 310a 	movw	r1, #778	; 0x30a
 800eec8:	f000 fa70 	bl	800f3ac <__assert_func>
 800eecc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eed0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eed4:	bb35      	cbnz	r5, 800ef24 <__d2b+0x7c>
 800eed6:	2e00      	cmp	r6, #0
 800eed8:	9301      	str	r3, [sp, #4]
 800eeda:	d028      	beq.n	800ef2e <__d2b+0x86>
 800eedc:	4668      	mov	r0, sp
 800eede:	9600      	str	r6, [sp, #0]
 800eee0:	f7ff fd8c 	bl	800e9fc <__lo0bits>
 800eee4:	9900      	ldr	r1, [sp, #0]
 800eee6:	b300      	cbz	r0, 800ef2a <__d2b+0x82>
 800eee8:	9a01      	ldr	r2, [sp, #4]
 800eeea:	f1c0 0320 	rsb	r3, r0, #32
 800eeee:	fa02 f303 	lsl.w	r3, r2, r3
 800eef2:	430b      	orrs	r3, r1
 800eef4:	40c2      	lsrs	r2, r0
 800eef6:	6163      	str	r3, [r4, #20]
 800eef8:	9201      	str	r2, [sp, #4]
 800eefa:	9b01      	ldr	r3, [sp, #4]
 800eefc:	61a3      	str	r3, [r4, #24]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	bf14      	ite	ne
 800ef02:	2202      	movne	r2, #2
 800ef04:	2201      	moveq	r2, #1
 800ef06:	6122      	str	r2, [r4, #16]
 800ef08:	b1d5      	cbz	r5, 800ef40 <__d2b+0x98>
 800ef0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ef0e:	4405      	add	r5, r0
 800ef10:	f8c9 5000 	str.w	r5, [r9]
 800ef14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ef18:	f8c8 0000 	str.w	r0, [r8]
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	b003      	add	sp, #12
 800ef20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef28:	e7d5      	b.n	800eed6 <__d2b+0x2e>
 800ef2a:	6161      	str	r1, [r4, #20]
 800ef2c:	e7e5      	b.n	800eefa <__d2b+0x52>
 800ef2e:	a801      	add	r0, sp, #4
 800ef30:	f7ff fd64 	bl	800e9fc <__lo0bits>
 800ef34:	9b01      	ldr	r3, [sp, #4]
 800ef36:	6163      	str	r3, [r4, #20]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	6122      	str	r2, [r4, #16]
 800ef3c:	3020      	adds	r0, #32
 800ef3e:	e7e3      	b.n	800ef08 <__d2b+0x60>
 800ef40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ef44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ef48:	f8c9 0000 	str.w	r0, [r9]
 800ef4c:	6918      	ldr	r0, [r3, #16]
 800ef4e:	f7ff fd35 	bl	800e9bc <__hi0bits>
 800ef52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ef56:	e7df      	b.n	800ef18 <__d2b+0x70>
 800ef58:	0801a2e7 	.word	0x0801a2e7
 800ef5c:	0801a2f8 	.word	0x0801a2f8

0800ef60 <_calloc_r>:
 800ef60:	b513      	push	{r0, r1, r4, lr}
 800ef62:	434a      	muls	r2, r1
 800ef64:	4611      	mov	r1, r2
 800ef66:	9201      	str	r2, [sp, #4]
 800ef68:	f000 f85a 	bl	800f020 <_malloc_r>
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	b118      	cbz	r0, 800ef78 <_calloc_r+0x18>
 800ef70:	9a01      	ldr	r2, [sp, #4]
 800ef72:	2100      	movs	r1, #0
 800ef74:	f7fe f9e6 	bl	800d344 <memset>
 800ef78:	4620      	mov	r0, r4
 800ef7a:	b002      	add	sp, #8
 800ef7c:	bd10      	pop	{r4, pc}
	...

0800ef80 <_free_r>:
 800ef80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef82:	2900      	cmp	r1, #0
 800ef84:	d048      	beq.n	800f018 <_free_r+0x98>
 800ef86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef8a:	9001      	str	r0, [sp, #4]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f1a1 0404 	sub.w	r4, r1, #4
 800ef92:	bfb8      	it	lt
 800ef94:	18e4      	addlt	r4, r4, r3
 800ef96:	f000 fa65 	bl	800f464 <__malloc_lock>
 800ef9a:	4a20      	ldr	r2, [pc, #128]	; (800f01c <_free_r+0x9c>)
 800ef9c:	9801      	ldr	r0, [sp, #4]
 800ef9e:	6813      	ldr	r3, [r2, #0]
 800efa0:	4615      	mov	r5, r2
 800efa2:	b933      	cbnz	r3, 800efb2 <_free_r+0x32>
 800efa4:	6063      	str	r3, [r4, #4]
 800efa6:	6014      	str	r4, [r2, #0]
 800efa8:	b003      	add	sp, #12
 800efaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efae:	f000 ba5f 	b.w	800f470 <__malloc_unlock>
 800efb2:	42a3      	cmp	r3, r4
 800efb4:	d90b      	bls.n	800efce <_free_r+0x4e>
 800efb6:	6821      	ldr	r1, [r4, #0]
 800efb8:	1862      	adds	r2, r4, r1
 800efba:	4293      	cmp	r3, r2
 800efbc:	bf04      	itt	eq
 800efbe:	681a      	ldreq	r2, [r3, #0]
 800efc0:	685b      	ldreq	r3, [r3, #4]
 800efc2:	6063      	str	r3, [r4, #4]
 800efc4:	bf04      	itt	eq
 800efc6:	1852      	addeq	r2, r2, r1
 800efc8:	6022      	streq	r2, [r4, #0]
 800efca:	602c      	str	r4, [r5, #0]
 800efcc:	e7ec      	b.n	800efa8 <_free_r+0x28>
 800efce:	461a      	mov	r2, r3
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	b10b      	cbz	r3, 800efd8 <_free_r+0x58>
 800efd4:	42a3      	cmp	r3, r4
 800efd6:	d9fa      	bls.n	800efce <_free_r+0x4e>
 800efd8:	6811      	ldr	r1, [r2, #0]
 800efda:	1855      	adds	r5, r2, r1
 800efdc:	42a5      	cmp	r5, r4
 800efde:	d10b      	bne.n	800eff8 <_free_r+0x78>
 800efe0:	6824      	ldr	r4, [r4, #0]
 800efe2:	4421      	add	r1, r4
 800efe4:	1854      	adds	r4, r2, r1
 800efe6:	42a3      	cmp	r3, r4
 800efe8:	6011      	str	r1, [r2, #0]
 800efea:	d1dd      	bne.n	800efa8 <_free_r+0x28>
 800efec:	681c      	ldr	r4, [r3, #0]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	6053      	str	r3, [r2, #4]
 800eff2:	4421      	add	r1, r4
 800eff4:	6011      	str	r1, [r2, #0]
 800eff6:	e7d7      	b.n	800efa8 <_free_r+0x28>
 800eff8:	d902      	bls.n	800f000 <_free_r+0x80>
 800effa:	230c      	movs	r3, #12
 800effc:	6003      	str	r3, [r0, #0]
 800effe:	e7d3      	b.n	800efa8 <_free_r+0x28>
 800f000:	6825      	ldr	r5, [r4, #0]
 800f002:	1961      	adds	r1, r4, r5
 800f004:	428b      	cmp	r3, r1
 800f006:	bf04      	itt	eq
 800f008:	6819      	ldreq	r1, [r3, #0]
 800f00a:	685b      	ldreq	r3, [r3, #4]
 800f00c:	6063      	str	r3, [r4, #4]
 800f00e:	bf04      	itt	eq
 800f010:	1949      	addeq	r1, r1, r5
 800f012:	6021      	streq	r1, [r4, #0]
 800f014:	6054      	str	r4, [r2, #4]
 800f016:	e7c7      	b.n	800efa8 <_free_r+0x28>
 800f018:	b003      	add	sp, #12
 800f01a:	bd30      	pop	{r4, r5, pc}
 800f01c:	24000898 	.word	0x24000898

0800f020 <_malloc_r>:
 800f020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f022:	1ccd      	adds	r5, r1, #3
 800f024:	f025 0503 	bic.w	r5, r5, #3
 800f028:	3508      	adds	r5, #8
 800f02a:	2d0c      	cmp	r5, #12
 800f02c:	bf38      	it	cc
 800f02e:	250c      	movcc	r5, #12
 800f030:	2d00      	cmp	r5, #0
 800f032:	4606      	mov	r6, r0
 800f034:	db01      	blt.n	800f03a <_malloc_r+0x1a>
 800f036:	42a9      	cmp	r1, r5
 800f038:	d903      	bls.n	800f042 <_malloc_r+0x22>
 800f03a:	230c      	movs	r3, #12
 800f03c:	6033      	str	r3, [r6, #0]
 800f03e:	2000      	movs	r0, #0
 800f040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f042:	f000 fa0f 	bl	800f464 <__malloc_lock>
 800f046:	4921      	ldr	r1, [pc, #132]	; (800f0cc <_malloc_r+0xac>)
 800f048:	680a      	ldr	r2, [r1, #0]
 800f04a:	4614      	mov	r4, r2
 800f04c:	b99c      	cbnz	r4, 800f076 <_malloc_r+0x56>
 800f04e:	4f20      	ldr	r7, [pc, #128]	; (800f0d0 <_malloc_r+0xb0>)
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	b923      	cbnz	r3, 800f05e <_malloc_r+0x3e>
 800f054:	4621      	mov	r1, r4
 800f056:	4630      	mov	r0, r6
 800f058:	f000 f998 	bl	800f38c <_sbrk_r>
 800f05c:	6038      	str	r0, [r7, #0]
 800f05e:	4629      	mov	r1, r5
 800f060:	4630      	mov	r0, r6
 800f062:	f000 f993 	bl	800f38c <_sbrk_r>
 800f066:	1c43      	adds	r3, r0, #1
 800f068:	d123      	bne.n	800f0b2 <_malloc_r+0x92>
 800f06a:	230c      	movs	r3, #12
 800f06c:	6033      	str	r3, [r6, #0]
 800f06e:	4630      	mov	r0, r6
 800f070:	f000 f9fe 	bl	800f470 <__malloc_unlock>
 800f074:	e7e3      	b.n	800f03e <_malloc_r+0x1e>
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	1b5b      	subs	r3, r3, r5
 800f07a:	d417      	bmi.n	800f0ac <_malloc_r+0x8c>
 800f07c:	2b0b      	cmp	r3, #11
 800f07e:	d903      	bls.n	800f088 <_malloc_r+0x68>
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	441c      	add	r4, r3
 800f084:	6025      	str	r5, [r4, #0]
 800f086:	e004      	b.n	800f092 <_malloc_r+0x72>
 800f088:	6863      	ldr	r3, [r4, #4]
 800f08a:	42a2      	cmp	r2, r4
 800f08c:	bf0c      	ite	eq
 800f08e:	600b      	streq	r3, [r1, #0]
 800f090:	6053      	strne	r3, [r2, #4]
 800f092:	4630      	mov	r0, r6
 800f094:	f000 f9ec 	bl	800f470 <__malloc_unlock>
 800f098:	f104 000b 	add.w	r0, r4, #11
 800f09c:	1d23      	adds	r3, r4, #4
 800f09e:	f020 0007 	bic.w	r0, r0, #7
 800f0a2:	1ac2      	subs	r2, r0, r3
 800f0a4:	d0cc      	beq.n	800f040 <_malloc_r+0x20>
 800f0a6:	1a1b      	subs	r3, r3, r0
 800f0a8:	50a3      	str	r3, [r4, r2]
 800f0aa:	e7c9      	b.n	800f040 <_malloc_r+0x20>
 800f0ac:	4622      	mov	r2, r4
 800f0ae:	6864      	ldr	r4, [r4, #4]
 800f0b0:	e7cc      	b.n	800f04c <_malloc_r+0x2c>
 800f0b2:	1cc4      	adds	r4, r0, #3
 800f0b4:	f024 0403 	bic.w	r4, r4, #3
 800f0b8:	42a0      	cmp	r0, r4
 800f0ba:	d0e3      	beq.n	800f084 <_malloc_r+0x64>
 800f0bc:	1a21      	subs	r1, r4, r0
 800f0be:	4630      	mov	r0, r6
 800f0c0:	f000 f964 	bl	800f38c <_sbrk_r>
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	d1dd      	bne.n	800f084 <_malloc_r+0x64>
 800f0c8:	e7cf      	b.n	800f06a <_malloc_r+0x4a>
 800f0ca:	bf00      	nop
 800f0cc:	24000898 	.word	0x24000898
 800f0d0:	2400089c 	.word	0x2400089c

0800f0d4 <__ssputs_r>:
 800f0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d8:	688e      	ldr	r6, [r1, #8]
 800f0da:	429e      	cmp	r6, r3
 800f0dc:	4682      	mov	sl, r0
 800f0de:	460c      	mov	r4, r1
 800f0e0:	4690      	mov	r8, r2
 800f0e2:	461f      	mov	r7, r3
 800f0e4:	d838      	bhi.n	800f158 <__ssputs_r+0x84>
 800f0e6:	898a      	ldrh	r2, [r1, #12]
 800f0e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0ec:	d032      	beq.n	800f154 <__ssputs_r+0x80>
 800f0ee:	6825      	ldr	r5, [r4, #0]
 800f0f0:	6909      	ldr	r1, [r1, #16]
 800f0f2:	eba5 0901 	sub.w	r9, r5, r1
 800f0f6:	6965      	ldr	r5, [r4, #20]
 800f0f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f100:	3301      	adds	r3, #1
 800f102:	444b      	add	r3, r9
 800f104:	106d      	asrs	r5, r5, #1
 800f106:	429d      	cmp	r5, r3
 800f108:	bf38      	it	cc
 800f10a:	461d      	movcc	r5, r3
 800f10c:	0553      	lsls	r3, r2, #21
 800f10e:	d531      	bpl.n	800f174 <__ssputs_r+0xa0>
 800f110:	4629      	mov	r1, r5
 800f112:	f7ff ff85 	bl	800f020 <_malloc_r>
 800f116:	4606      	mov	r6, r0
 800f118:	b950      	cbnz	r0, 800f130 <__ssputs_r+0x5c>
 800f11a:	230c      	movs	r3, #12
 800f11c:	f8ca 3000 	str.w	r3, [sl]
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f126:	81a3      	strh	r3, [r4, #12]
 800f128:	f04f 30ff 	mov.w	r0, #4294967295
 800f12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f130:	6921      	ldr	r1, [r4, #16]
 800f132:	464a      	mov	r2, r9
 800f134:	f7fe f8f8 	bl	800d328 <memcpy>
 800f138:	89a3      	ldrh	r3, [r4, #12]
 800f13a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f142:	81a3      	strh	r3, [r4, #12]
 800f144:	6126      	str	r6, [r4, #16]
 800f146:	6165      	str	r5, [r4, #20]
 800f148:	444e      	add	r6, r9
 800f14a:	eba5 0509 	sub.w	r5, r5, r9
 800f14e:	6026      	str	r6, [r4, #0]
 800f150:	60a5      	str	r5, [r4, #8]
 800f152:	463e      	mov	r6, r7
 800f154:	42be      	cmp	r6, r7
 800f156:	d900      	bls.n	800f15a <__ssputs_r+0x86>
 800f158:	463e      	mov	r6, r7
 800f15a:	4632      	mov	r2, r6
 800f15c:	6820      	ldr	r0, [r4, #0]
 800f15e:	4641      	mov	r1, r8
 800f160:	f000 f966 	bl	800f430 <memmove>
 800f164:	68a3      	ldr	r3, [r4, #8]
 800f166:	6822      	ldr	r2, [r4, #0]
 800f168:	1b9b      	subs	r3, r3, r6
 800f16a:	4432      	add	r2, r6
 800f16c:	60a3      	str	r3, [r4, #8]
 800f16e:	6022      	str	r2, [r4, #0]
 800f170:	2000      	movs	r0, #0
 800f172:	e7db      	b.n	800f12c <__ssputs_r+0x58>
 800f174:	462a      	mov	r2, r5
 800f176:	f000 f981 	bl	800f47c <_realloc_r>
 800f17a:	4606      	mov	r6, r0
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d1e1      	bne.n	800f144 <__ssputs_r+0x70>
 800f180:	6921      	ldr	r1, [r4, #16]
 800f182:	4650      	mov	r0, sl
 800f184:	f7ff fefc 	bl	800ef80 <_free_r>
 800f188:	e7c7      	b.n	800f11a <__ssputs_r+0x46>
	...

0800f18c <_svfiprintf_r>:
 800f18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f190:	4698      	mov	r8, r3
 800f192:	898b      	ldrh	r3, [r1, #12]
 800f194:	061b      	lsls	r3, r3, #24
 800f196:	b09d      	sub	sp, #116	; 0x74
 800f198:	4607      	mov	r7, r0
 800f19a:	460d      	mov	r5, r1
 800f19c:	4614      	mov	r4, r2
 800f19e:	d50e      	bpl.n	800f1be <_svfiprintf_r+0x32>
 800f1a0:	690b      	ldr	r3, [r1, #16]
 800f1a2:	b963      	cbnz	r3, 800f1be <_svfiprintf_r+0x32>
 800f1a4:	2140      	movs	r1, #64	; 0x40
 800f1a6:	f7ff ff3b 	bl	800f020 <_malloc_r>
 800f1aa:	6028      	str	r0, [r5, #0]
 800f1ac:	6128      	str	r0, [r5, #16]
 800f1ae:	b920      	cbnz	r0, 800f1ba <_svfiprintf_r+0x2e>
 800f1b0:	230c      	movs	r3, #12
 800f1b2:	603b      	str	r3, [r7, #0]
 800f1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b8:	e0d1      	b.n	800f35e <_svfiprintf_r+0x1d2>
 800f1ba:	2340      	movs	r3, #64	; 0x40
 800f1bc:	616b      	str	r3, [r5, #20]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1c2:	2320      	movs	r3, #32
 800f1c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1cc:	2330      	movs	r3, #48	; 0x30
 800f1ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f378 <_svfiprintf_r+0x1ec>
 800f1d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1d6:	f04f 0901 	mov.w	r9, #1
 800f1da:	4623      	mov	r3, r4
 800f1dc:	469a      	mov	sl, r3
 800f1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1e2:	b10a      	cbz	r2, 800f1e8 <_svfiprintf_r+0x5c>
 800f1e4:	2a25      	cmp	r2, #37	; 0x25
 800f1e6:	d1f9      	bne.n	800f1dc <_svfiprintf_r+0x50>
 800f1e8:	ebba 0b04 	subs.w	fp, sl, r4
 800f1ec:	d00b      	beq.n	800f206 <_svfiprintf_r+0x7a>
 800f1ee:	465b      	mov	r3, fp
 800f1f0:	4622      	mov	r2, r4
 800f1f2:	4629      	mov	r1, r5
 800f1f4:	4638      	mov	r0, r7
 800f1f6:	f7ff ff6d 	bl	800f0d4 <__ssputs_r>
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	f000 80aa 	beq.w	800f354 <_svfiprintf_r+0x1c8>
 800f200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f202:	445a      	add	r2, fp
 800f204:	9209      	str	r2, [sp, #36]	; 0x24
 800f206:	f89a 3000 	ldrb.w	r3, [sl]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f000 80a2 	beq.w	800f354 <_svfiprintf_r+0x1c8>
 800f210:	2300      	movs	r3, #0
 800f212:	f04f 32ff 	mov.w	r2, #4294967295
 800f216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f21a:	f10a 0a01 	add.w	sl, sl, #1
 800f21e:	9304      	str	r3, [sp, #16]
 800f220:	9307      	str	r3, [sp, #28]
 800f222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f226:	931a      	str	r3, [sp, #104]	; 0x68
 800f228:	4654      	mov	r4, sl
 800f22a:	2205      	movs	r2, #5
 800f22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f230:	4851      	ldr	r0, [pc, #324]	; (800f378 <_svfiprintf_r+0x1ec>)
 800f232:	f7f1 f8bd 	bl	80003b0 <memchr>
 800f236:	9a04      	ldr	r2, [sp, #16]
 800f238:	b9d8      	cbnz	r0, 800f272 <_svfiprintf_r+0xe6>
 800f23a:	06d0      	lsls	r0, r2, #27
 800f23c:	bf44      	itt	mi
 800f23e:	2320      	movmi	r3, #32
 800f240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f244:	0711      	lsls	r1, r2, #28
 800f246:	bf44      	itt	mi
 800f248:	232b      	movmi	r3, #43	; 0x2b
 800f24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f24e:	f89a 3000 	ldrb.w	r3, [sl]
 800f252:	2b2a      	cmp	r3, #42	; 0x2a
 800f254:	d015      	beq.n	800f282 <_svfiprintf_r+0xf6>
 800f256:	9a07      	ldr	r2, [sp, #28]
 800f258:	4654      	mov	r4, sl
 800f25a:	2000      	movs	r0, #0
 800f25c:	f04f 0c0a 	mov.w	ip, #10
 800f260:	4621      	mov	r1, r4
 800f262:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f266:	3b30      	subs	r3, #48	; 0x30
 800f268:	2b09      	cmp	r3, #9
 800f26a:	d94e      	bls.n	800f30a <_svfiprintf_r+0x17e>
 800f26c:	b1b0      	cbz	r0, 800f29c <_svfiprintf_r+0x110>
 800f26e:	9207      	str	r2, [sp, #28]
 800f270:	e014      	b.n	800f29c <_svfiprintf_r+0x110>
 800f272:	eba0 0308 	sub.w	r3, r0, r8
 800f276:	fa09 f303 	lsl.w	r3, r9, r3
 800f27a:	4313      	orrs	r3, r2
 800f27c:	9304      	str	r3, [sp, #16]
 800f27e:	46a2      	mov	sl, r4
 800f280:	e7d2      	b.n	800f228 <_svfiprintf_r+0x9c>
 800f282:	9b03      	ldr	r3, [sp, #12]
 800f284:	1d19      	adds	r1, r3, #4
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	9103      	str	r1, [sp, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	bfbb      	ittet	lt
 800f28e:	425b      	neglt	r3, r3
 800f290:	f042 0202 	orrlt.w	r2, r2, #2
 800f294:	9307      	strge	r3, [sp, #28]
 800f296:	9307      	strlt	r3, [sp, #28]
 800f298:	bfb8      	it	lt
 800f29a:	9204      	strlt	r2, [sp, #16]
 800f29c:	7823      	ldrb	r3, [r4, #0]
 800f29e:	2b2e      	cmp	r3, #46	; 0x2e
 800f2a0:	d10c      	bne.n	800f2bc <_svfiprintf_r+0x130>
 800f2a2:	7863      	ldrb	r3, [r4, #1]
 800f2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a6:	d135      	bne.n	800f314 <_svfiprintf_r+0x188>
 800f2a8:	9b03      	ldr	r3, [sp, #12]
 800f2aa:	1d1a      	adds	r2, r3, #4
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	9203      	str	r2, [sp, #12]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	bfb8      	it	lt
 800f2b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2b8:	3402      	adds	r4, #2
 800f2ba:	9305      	str	r3, [sp, #20]
 800f2bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f388 <_svfiprintf_r+0x1fc>
 800f2c0:	7821      	ldrb	r1, [r4, #0]
 800f2c2:	2203      	movs	r2, #3
 800f2c4:	4650      	mov	r0, sl
 800f2c6:	f7f1 f873 	bl	80003b0 <memchr>
 800f2ca:	b140      	cbz	r0, 800f2de <_svfiprintf_r+0x152>
 800f2cc:	2340      	movs	r3, #64	; 0x40
 800f2ce:	eba0 000a 	sub.w	r0, r0, sl
 800f2d2:	fa03 f000 	lsl.w	r0, r3, r0
 800f2d6:	9b04      	ldr	r3, [sp, #16]
 800f2d8:	4303      	orrs	r3, r0
 800f2da:	3401      	adds	r4, #1
 800f2dc:	9304      	str	r3, [sp, #16]
 800f2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e2:	4826      	ldr	r0, [pc, #152]	; (800f37c <_svfiprintf_r+0x1f0>)
 800f2e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2e8:	2206      	movs	r2, #6
 800f2ea:	f7f1 f861 	bl	80003b0 <memchr>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d038      	beq.n	800f364 <_svfiprintf_r+0x1d8>
 800f2f2:	4b23      	ldr	r3, [pc, #140]	; (800f380 <_svfiprintf_r+0x1f4>)
 800f2f4:	bb1b      	cbnz	r3, 800f33e <_svfiprintf_r+0x1b2>
 800f2f6:	9b03      	ldr	r3, [sp, #12]
 800f2f8:	3307      	adds	r3, #7
 800f2fa:	f023 0307 	bic.w	r3, r3, #7
 800f2fe:	3308      	adds	r3, #8
 800f300:	9303      	str	r3, [sp, #12]
 800f302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f304:	4433      	add	r3, r6
 800f306:	9309      	str	r3, [sp, #36]	; 0x24
 800f308:	e767      	b.n	800f1da <_svfiprintf_r+0x4e>
 800f30a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f30e:	460c      	mov	r4, r1
 800f310:	2001      	movs	r0, #1
 800f312:	e7a5      	b.n	800f260 <_svfiprintf_r+0xd4>
 800f314:	2300      	movs	r3, #0
 800f316:	3401      	adds	r4, #1
 800f318:	9305      	str	r3, [sp, #20]
 800f31a:	4619      	mov	r1, r3
 800f31c:	f04f 0c0a 	mov.w	ip, #10
 800f320:	4620      	mov	r0, r4
 800f322:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f326:	3a30      	subs	r2, #48	; 0x30
 800f328:	2a09      	cmp	r2, #9
 800f32a:	d903      	bls.n	800f334 <_svfiprintf_r+0x1a8>
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d0c5      	beq.n	800f2bc <_svfiprintf_r+0x130>
 800f330:	9105      	str	r1, [sp, #20]
 800f332:	e7c3      	b.n	800f2bc <_svfiprintf_r+0x130>
 800f334:	fb0c 2101 	mla	r1, ip, r1, r2
 800f338:	4604      	mov	r4, r0
 800f33a:	2301      	movs	r3, #1
 800f33c:	e7f0      	b.n	800f320 <_svfiprintf_r+0x194>
 800f33e:	ab03      	add	r3, sp, #12
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	462a      	mov	r2, r5
 800f344:	4b0f      	ldr	r3, [pc, #60]	; (800f384 <_svfiprintf_r+0x1f8>)
 800f346:	a904      	add	r1, sp, #16
 800f348:	4638      	mov	r0, r7
 800f34a:	f7fe f895 	bl	800d478 <_printf_float>
 800f34e:	1c42      	adds	r2, r0, #1
 800f350:	4606      	mov	r6, r0
 800f352:	d1d6      	bne.n	800f302 <_svfiprintf_r+0x176>
 800f354:	89ab      	ldrh	r3, [r5, #12]
 800f356:	065b      	lsls	r3, r3, #25
 800f358:	f53f af2c 	bmi.w	800f1b4 <_svfiprintf_r+0x28>
 800f35c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f35e:	b01d      	add	sp, #116	; 0x74
 800f360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f364:	ab03      	add	r3, sp, #12
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	462a      	mov	r2, r5
 800f36a:	4b06      	ldr	r3, [pc, #24]	; (800f384 <_svfiprintf_r+0x1f8>)
 800f36c:	a904      	add	r1, sp, #16
 800f36e:	4638      	mov	r0, r7
 800f370:	f7fe fb0e 	bl	800d990 <_printf_i>
 800f374:	e7eb      	b.n	800f34e <_svfiprintf_r+0x1c2>
 800f376:	bf00      	nop
 800f378:	0801a454 	.word	0x0801a454
 800f37c:	0801a45e 	.word	0x0801a45e
 800f380:	0800d479 	.word	0x0800d479
 800f384:	0800f0d5 	.word	0x0800f0d5
 800f388:	0801a45a 	.word	0x0801a45a

0800f38c <_sbrk_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4d06      	ldr	r5, [pc, #24]	; (800f3a8 <_sbrk_r+0x1c>)
 800f390:	2300      	movs	r3, #0
 800f392:	4604      	mov	r4, r0
 800f394:	4608      	mov	r0, r1
 800f396:	602b      	str	r3, [r5, #0]
 800f398:	f7f4 f840 	bl	800341c <_sbrk>
 800f39c:	1c43      	adds	r3, r0, #1
 800f39e:	d102      	bne.n	800f3a6 <_sbrk_r+0x1a>
 800f3a0:	682b      	ldr	r3, [r5, #0]
 800f3a2:	b103      	cbz	r3, 800f3a6 <_sbrk_r+0x1a>
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	bd38      	pop	{r3, r4, r5, pc}
 800f3a8:	2400f2dc 	.word	0x2400f2dc

0800f3ac <__assert_func>:
 800f3ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3ae:	4614      	mov	r4, r2
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	4b09      	ldr	r3, [pc, #36]	; (800f3d8 <__assert_func+0x2c>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	68d8      	ldr	r0, [r3, #12]
 800f3ba:	b14c      	cbz	r4, 800f3d0 <__assert_func+0x24>
 800f3bc:	4b07      	ldr	r3, [pc, #28]	; (800f3dc <__assert_func+0x30>)
 800f3be:	9100      	str	r1, [sp, #0]
 800f3c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3c4:	4906      	ldr	r1, [pc, #24]	; (800f3e0 <__assert_func+0x34>)
 800f3c6:	462b      	mov	r3, r5
 800f3c8:	f000 f80e 	bl	800f3e8 <fiprintf>
 800f3cc:	f000 faa4 	bl	800f918 <abort>
 800f3d0:	4b04      	ldr	r3, [pc, #16]	; (800f3e4 <__assert_func+0x38>)
 800f3d2:	461c      	mov	r4, r3
 800f3d4:	e7f3      	b.n	800f3be <__assert_func+0x12>
 800f3d6:	bf00      	nop
 800f3d8:	24000380 	.word	0x24000380
 800f3dc:	0801a465 	.word	0x0801a465
 800f3e0:	0801a472 	.word	0x0801a472
 800f3e4:	0801a4a0 	.word	0x0801a4a0

0800f3e8 <fiprintf>:
 800f3e8:	b40e      	push	{r1, r2, r3}
 800f3ea:	b503      	push	{r0, r1, lr}
 800f3ec:	4601      	mov	r1, r0
 800f3ee:	ab03      	add	r3, sp, #12
 800f3f0:	4805      	ldr	r0, [pc, #20]	; (800f408 <fiprintf+0x20>)
 800f3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3f6:	6800      	ldr	r0, [r0, #0]
 800f3f8:	9301      	str	r3, [sp, #4]
 800f3fa:	f000 f88f 	bl	800f51c <_vfiprintf_r>
 800f3fe:	b002      	add	sp, #8
 800f400:	f85d eb04 	ldr.w	lr, [sp], #4
 800f404:	b003      	add	sp, #12
 800f406:	4770      	bx	lr
 800f408:	24000380 	.word	0x24000380

0800f40c <__ascii_mbtowc>:
 800f40c:	b082      	sub	sp, #8
 800f40e:	b901      	cbnz	r1, 800f412 <__ascii_mbtowc+0x6>
 800f410:	a901      	add	r1, sp, #4
 800f412:	b142      	cbz	r2, 800f426 <__ascii_mbtowc+0x1a>
 800f414:	b14b      	cbz	r3, 800f42a <__ascii_mbtowc+0x1e>
 800f416:	7813      	ldrb	r3, [r2, #0]
 800f418:	600b      	str	r3, [r1, #0]
 800f41a:	7812      	ldrb	r2, [r2, #0]
 800f41c:	1e10      	subs	r0, r2, #0
 800f41e:	bf18      	it	ne
 800f420:	2001      	movne	r0, #1
 800f422:	b002      	add	sp, #8
 800f424:	4770      	bx	lr
 800f426:	4610      	mov	r0, r2
 800f428:	e7fb      	b.n	800f422 <__ascii_mbtowc+0x16>
 800f42a:	f06f 0001 	mvn.w	r0, #1
 800f42e:	e7f8      	b.n	800f422 <__ascii_mbtowc+0x16>

0800f430 <memmove>:
 800f430:	4288      	cmp	r0, r1
 800f432:	b510      	push	{r4, lr}
 800f434:	eb01 0402 	add.w	r4, r1, r2
 800f438:	d902      	bls.n	800f440 <memmove+0x10>
 800f43a:	4284      	cmp	r4, r0
 800f43c:	4623      	mov	r3, r4
 800f43e:	d807      	bhi.n	800f450 <memmove+0x20>
 800f440:	1e43      	subs	r3, r0, #1
 800f442:	42a1      	cmp	r1, r4
 800f444:	d008      	beq.n	800f458 <memmove+0x28>
 800f446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f44a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f44e:	e7f8      	b.n	800f442 <memmove+0x12>
 800f450:	4402      	add	r2, r0
 800f452:	4601      	mov	r1, r0
 800f454:	428a      	cmp	r2, r1
 800f456:	d100      	bne.n	800f45a <memmove+0x2a>
 800f458:	bd10      	pop	{r4, pc}
 800f45a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f45e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f462:	e7f7      	b.n	800f454 <memmove+0x24>

0800f464 <__malloc_lock>:
 800f464:	4801      	ldr	r0, [pc, #4]	; (800f46c <__malloc_lock+0x8>)
 800f466:	f000 bc17 	b.w	800fc98 <__retarget_lock_acquire_recursive>
 800f46a:	bf00      	nop
 800f46c:	2400f2e4 	.word	0x2400f2e4

0800f470 <__malloc_unlock>:
 800f470:	4801      	ldr	r0, [pc, #4]	; (800f478 <__malloc_unlock+0x8>)
 800f472:	f000 bc12 	b.w	800fc9a <__retarget_lock_release_recursive>
 800f476:	bf00      	nop
 800f478:	2400f2e4 	.word	0x2400f2e4

0800f47c <_realloc_r>:
 800f47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47e:	4607      	mov	r7, r0
 800f480:	4614      	mov	r4, r2
 800f482:	460e      	mov	r6, r1
 800f484:	b921      	cbnz	r1, 800f490 <_realloc_r+0x14>
 800f486:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f48a:	4611      	mov	r1, r2
 800f48c:	f7ff bdc8 	b.w	800f020 <_malloc_r>
 800f490:	b922      	cbnz	r2, 800f49c <_realloc_r+0x20>
 800f492:	f7ff fd75 	bl	800ef80 <_free_r>
 800f496:	4625      	mov	r5, r4
 800f498:	4628      	mov	r0, r5
 800f49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f49c:	f000 fc62 	bl	800fd64 <_malloc_usable_size_r>
 800f4a0:	42a0      	cmp	r0, r4
 800f4a2:	d20f      	bcs.n	800f4c4 <_realloc_r+0x48>
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	f7ff fdba 	bl	800f020 <_malloc_r>
 800f4ac:	4605      	mov	r5, r0
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	d0f2      	beq.n	800f498 <_realloc_r+0x1c>
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4622      	mov	r2, r4
 800f4b6:	f7fd ff37 	bl	800d328 <memcpy>
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	4638      	mov	r0, r7
 800f4be:	f7ff fd5f 	bl	800ef80 <_free_r>
 800f4c2:	e7e9      	b.n	800f498 <_realloc_r+0x1c>
 800f4c4:	4635      	mov	r5, r6
 800f4c6:	e7e7      	b.n	800f498 <_realloc_r+0x1c>

0800f4c8 <__sfputc_r>:
 800f4c8:	6893      	ldr	r3, [r2, #8]
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	b410      	push	{r4}
 800f4d0:	6093      	str	r3, [r2, #8]
 800f4d2:	da08      	bge.n	800f4e6 <__sfputc_r+0x1e>
 800f4d4:	6994      	ldr	r4, [r2, #24]
 800f4d6:	42a3      	cmp	r3, r4
 800f4d8:	db01      	blt.n	800f4de <__sfputc_r+0x16>
 800f4da:	290a      	cmp	r1, #10
 800f4dc:	d103      	bne.n	800f4e6 <__sfputc_r+0x1e>
 800f4de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4e2:	f000 b94b 	b.w	800f77c <__swbuf_r>
 800f4e6:	6813      	ldr	r3, [r2, #0]
 800f4e8:	1c58      	adds	r0, r3, #1
 800f4ea:	6010      	str	r0, [r2, #0]
 800f4ec:	7019      	strb	r1, [r3, #0]
 800f4ee:	4608      	mov	r0, r1
 800f4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4f4:	4770      	bx	lr

0800f4f6 <__sfputs_r>:
 800f4f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f8:	4606      	mov	r6, r0
 800f4fa:	460f      	mov	r7, r1
 800f4fc:	4614      	mov	r4, r2
 800f4fe:	18d5      	adds	r5, r2, r3
 800f500:	42ac      	cmp	r4, r5
 800f502:	d101      	bne.n	800f508 <__sfputs_r+0x12>
 800f504:	2000      	movs	r0, #0
 800f506:	e007      	b.n	800f518 <__sfputs_r+0x22>
 800f508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f50c:	463a      	mov	r2, r7
 800f50e:	4630      	mov	r0, r6
 800f510:	f7ff ffda 	bl	800f4c8 <__sfputc_r>
 800f514:	1c43      	adds	r3, r0, #1
 800f516:	d1f3      	bne.n	800f500 <__sfputs_r+0xa>
 800f518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f51c <_vfiprintf_r>:
 800f51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f520:	460d      	mov	r5, r1
 800f522:	b09d      	sub	sp, #116	; 0x74
 800f524:	4614      	mov	r4, r2
 800f526:	4698      	mov	r8, r3
 800f528:	4606      	mov	r6, r0
 800f52a:	b118      	cbz	r0, 800f534 <_vfiprintf_r+0x18>
 800f52c:	6983      	ldr	r3, [r0, #24]
 800f52e:	b90b      	cbnz	r3, 800f534 <_vfiprintf_r+0x18>
 800f530:	f000 fb14 	bl	800fb5c <__sinit>
 800f534:	4b89      	ldr	r3, [pc, #548]	; (800f75c <_vfiprintf_r+0x240>)
 800f536:	429d      	cmp	r5, r3
 800f538:	d11b      	bne.n	800f572 <_vfiprintf_r+0x56>
 800f53a:	6875      	ldr	r5, [r6, #4]
 800f53c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f53e:	07d9      	lsls	r1, r3, #31
 800f540:	d405      	bmi.n	800f54e <_vfiprintf_r+0x32>
 800f542:	89ab      	ldrh	r3, [r5, #12]
 800f544:	059a      	lsls	r2, r3, #22
 800f546:	d402      	bmi.n	800f54e <_vfiprintf_r+0x32>
 800f548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f54a:	f000 fba5 	bl	800fc98 <__retarget_lock_acquire_recursive>
 800f54e:	89ab      	ldrh	r3, [r5, #12]
 800f550:	071b      	lsls	r3, r3, #28
 800f552:	d501      	bpl.n	800f558 <_vfiprintf_r+0x3c>
 800f554:	692b      	ldr	r3, [r5, #16]
 800f556:	b9eb      	cbnz	r3, 800f594 <_vfiprintf_r+0x78>
 800f558:	4629      	mov	r1, r5
 800f55a:	4630      	mov	r0, r6
 800f55c:	f000 f96e 	bl	800f83c <__swsetup_r>
 800f560:	b1c0      	cbz	r0, 800f594 <_vfiprintf_r+0x78>
 800f562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f564:	07dc      	lsls	r4, r3, #31
 800f566:	d50e      	bpl.n	800f586 <_vfiprintf_r+0x6a>
 800f568:	f04f 30ff 	mov.w	r0, #4294967295
 800f56c:	b01d      	add	sp, #116	; 0x74
 800f56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f572:	4b7b      	ldr	r3, [pc, #492]	; (800f760 <_vfiprintf_r+0x244>)
 800f574:	429d      	cmp	r5, r3
 800f576:	d101      	bne.n	800f57c <_vfiprintf_r+0x60>
 800f578:	68b5      	ldr	r5, [r6, #8]
 800f57a:	e7df      	b.n	800f53c <_vfiprintf_r+0x20>
 800f57c:	4b79      	ldr	r3, [pc, #484]	; (800f764 <_vfiprintf_r+0x248>)
 800f57e:	429d      	cmp	r5, r3
 800f580:	bf08      	it	eq
 800f582:	68f5      	ldreq	r5, [r6, #12]
 800f584:	e7da      	b.n	800f53c <_vfiprintf_r+0x20>
 800f586:	89ab      	ldrh	r3, [r5, #12]
 800f588:	0598      	lsls	r0, r3, #22
 800f58a:	d4ed      	bmi.n	800f568 <_vfiprintf_r+0x4c>
 800f58c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f58e:	f000 fb84 	bl	800fc9a <__retarget_lock_release_recursive>
 800f592:	e7e9      	b.n	800f568 <_vfiprintf_r+0x4c>
 800f594:	2300      	movs	r3, #0
 800f596:	9309      	str	r3, [sp, #36]	; 0x24
 800f598:	2320      	movs	r3, #32
 800f59a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f59e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5a2:	2330      	movs	r3, #48	; 0x30
 800f5a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f768 <_vfiprintf_r+0x24c>
 800f5a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5ac:	f04f 0901 	mov.w	r9, #1
 800f5b0:	4623      	mov	r3, r4
 800f5b2:	469a      	mov	sl, r3
 800f5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5b8:	b10a      	cbz	r2, 800f5be <_vfiprintf_r+0xa2>
 800f5ba:	2a25      	cmp	r2, #37	; 0x25
 800f5bc:	d1f9      	bne.n	800f5b2 <_vfiprintf_r+0x96>
 800f5be:	ebba 0b04 	subs.w	fp, sl, r4
 800f5c2:	d00b      	beq.n	800f5dc <_vfiprintf_r+0xc0>
 800f5c4:	465b      	mov	r3, fp
 800f5c6:	4622      	mov	r2, r4
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	4630      	mov	r0, r6
 800f5cc:	f7ff ff93 	bl	800f4f6 <__sfputs_r>
 800f5d0:	3001      	adds	r0, #1
 800f5d2:	f000 80aa 	beq.w	800f72a <_vfiprintf_r+0x20e>
 800f5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5d8:	445a      	add	r2, fp
 800f5da:	9209      	str	r2, [sp, #36]	; 0x24
 800f5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	f000 80a2 	beq.w	800f72a <_vfiprintf_r+0x20e>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5f0:	f10a 0a01 	add.w	sl, sl, #1
 800f5f4:	9304      	str	r3, [sp, #16]
 800f5f6:	9307      	str	r3, [sp, #28]
 800f5f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5fc:	931a      	str	r3, [sp, #104]	; 0x68
 800f5fe:	4654      	mov	r4, sl
 800f600:	2205      	movs	r2, #5
 800f602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f606:	4858      	ldr	r0, [pc, #352]	; (800f768 <_vfiprintf_r+0x24c>)
 800f608:	f7f0 fed2 	bl	80003b0 <memchr>
 800f60c:	9a04      	ldr	r2, [sp, #16]
 800f60e:	b9d8      	cbnz	r0, 800f648 <_vfiprintf_r+0x12c>
 800f610:	06d1      	lsls	r1, r2, #27
 800f612:	bf44      	itt	mi
 800f614:	2320      	movmi	r3, #32
 800f616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f61a:	0713      	lsls	r3, r2, #28
 800f61c:	bf44      	itt	mi
 800f61e:	232b      	movmi	r3, #43	; 0x2b
 800f620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f624:	f89a 3000 	ldrb.w	r3, [sl]
 800f628:	2b2a      	cmp	r3, #42	; 0x2a
 800f62a:	d015      	beq.n	800f658 <_vfiprintf_r+0x13c>
 800f62c:	9a07      	ldr	r2, [sp, #28]
 800f62e:	4654      	mov	r4, sl
 800f630:	2000      	movs	r0, #0
 800f632:	f04f 0c0a 	mov.w	ip, #10
 800f636:	4621      	mov	r1, r4
 800f638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f63c:	3b30      	subs	r3, #48	; 0x30
 800f63e:	2b09      	cmp	r3, #9
 800f640:	d94e      	bls.n	800f6e0 <_vfiprintf_r+0x1c4>
 800f642:	b1b0      	cbz	r0, 800f672 <_vfiprintf_r+0x156>
 800f644:	9207      	str	r2, [sp, #28]
 800f646:	e014      	b.n	800f672 <_vfiprintf_r+0x156>
 800f648:	eba0 0308 	sub.w	r3, r0, r8
 800f64c:	fa09 f303 	lsl.w	r3, r9, r3
 800f650:	4313      	orrs	r3, r2
 800f652:	9304      	str	r3, [sp, #16]
 800f654:	46a2      	mov	sl, r4
 800f656:	e7d2      	b.n	800f5fe <_vfiprintf_r+0xe2>
 800f658:	9b03      	ldr	r3, [sp, #12]
 800f65a:	1d19      	adds	r1, r3, #4
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	9103      	str	r1, [sp, #12]
 800f660:	2b00      	cmp	r3, #0
 800f662:	bfbb      	ittet	lt
 800f664:	425b      	neglt	r3, r3
 800f666:	f042 0202 	orrlt.w	r2, r2, #2
 800f66a:	9307      	strge	r3, [sp, #28]
 800f66c:	9307      	strlt	r3, [sp, #28]
 800f66e:	bfb8      	it	lt
 800f670:	9204      	strlt	r2, [sp, #16]
 800f672:	7823      	ldrb	r3, [r4, #0]
 800f674:	2b2e      	cmp	r3, #46	; 0x2e
 800f676:	d10c      	bne.n	800f692 <_vfiprintf_r+0x176>
 800f678:	7863      	ldrb	r3, [r4, #1]
 800f67a:	2b2a      	cmp	r3, #42	; 0x2a
 800f67c:	d135      	bne.n	800f6ea <_vfiprintf_r+0x1ce>
 800f67e:	9b03      	ldr	r3, [sp, #12]
 800f680:	1d1a      	adds	r2, r3, #4
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	9203      	str	r2, [sp, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	bfb8      	it	lt
 800f68a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f68e:	3402      	adds	r4, #2
 800f690:	9305      	str	r3, [sp, #20]
 800f692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f778 <_vfiprintf_r+0x25c>
 800f696:	7821      	ldrb	r1, [r4, #0]
 800f698:	2203      	movs	r2, #3
 800f69a:	4650      	mov	r0, sl
 800f69c:	f7f0 fe88 	bl	80003b0 <memchr>
 800f6a0:	b140      	cbz	r0, 800f6b4 <_vfiprintf_r+0x198>
 800f6a2:	2340      	movs	r3, #64	; 0x40
 800f6a4:	eba0 000a 	sub.w	r0, r0, sl
 800f6a8:	fa03 f000 	lsl.w	r0, r3, r0
 800f6ac:	9b04      	ldr	r3, [sp, #16]
 800f6ae:	4303      	orrs	r3, r0
 800f6b0:	3401      	adds	r4, #1
 800f6b2:	9304      	str	r3, [sp, #16]
 800f6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6b8:	482c      	ldr	r0, [pc, #176]	; (800f76c <_vfiprintf_r+0x250>)
 800f6ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6be:	2206      	movs	r2, #6
 800f6c0:	f7f0 fe76 	bl	80003b0 <memchr>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	d03f      	beq.n	800f748 <_vfiprintf_r+0x22c>
 800f6c8:	4b29      	ldr	r3, [pc, #164]	; (800f770 <_vfiprintf_r+0x254>)
 800f6ca:	bb1b      	cbnz	r3, 800f714 <_vfiprintf_r+0x1f8>
 800f6cc:	9b03      	ldr	r3, [sp, #12]
 800f6ce:	3307      	adds	r3, #7
 800f6d0:	f023 0307 	bic.w	r3, r3, #7
 800f6d4:	3308      	adds	r3, #8
 800f6d6:	9303      	str	r3, [sp, #12]
 800f6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6da:	443b      	add	r3, r7
 800f6dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f6de:	e767      	b.n	800f5b0 <_vfiprintf_r+0x94>
 800f6e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6e4:	460c      	mov	r4, r1
 800f6e6:	2001      	movs	r0, #1
 800f6e8:	e7a5      	b.n	800f636 <_vfiprintf_r+0x11a>
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	3401      	adds	r4, #1
 800f6ee:	9305      	str	r3, [sp, #20]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	f04f 0c0a 	mov.w	ip, #10
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6fc:	3a30      	subs	r2, #48	; 0x30
 800f6fe:	2a09      	cmp	r2, #9
 800f700:	d903      	bls.n	800f70a <_vfiprintf_r+0x1ee>
 800f702:	2b00      	cmp	r3, #0
 800f704:	d0c5      	beq.n	800f692 <_vfiprintf_r+0x176>
 800f706:	9105      	str	r1, [sp, #20]
 800f708:	e7c3      	b.n	800f692 <_vfiprintf_r+0x176>
 800f70a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f70e:	4604      	mov	r4, r0
 800f710:	2301      	movs	r3, #1
 800f712:	e7f0      	b.n	800f6f6 <_vfiprintf_r+0x1da>
 800f714:	ab03      	add	r3, sp, #12
 800f716:	9300      	str	r3, [sp, #0]
 800f718:	462a      	mov	r2, r5
 800f71a:	4b16      	ldr	r3, [pc, #88]	; (800f774 <_vfiprintf_r+0x258>)
 800f71c:	a904      	add	r1, sp, #16
 800f71e:	4630      	mov	r0, r6
 800f720:	f7fd feaa 	bl	800d478 <_printf_float>
 800f724:	4607      	mov	r7, r0
 800f726:	1c78      	adds	r0, r7, #1
 800f728:	d1d6      	bne.n	800f6d8 <_vfiprintf_r+0x1bc>
 800f72a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f72c:	07d9      	lsls	r1, r3, #31
 800f72e:	d405      	bmi.n	800f73c <_vfiprintf_r+0x220>
 800f730:	89ab      	ldrh	r3, [r5, #12]
 800f732:	059a      	lsls	r2, r3, #22
 800f734:	d402      	bmi.n	800f73c <_vfiprintf_r+0x220>
 800f736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f738:	f000 faaf 	bl	800fc9a <__retarget_lock_release_recursive>
 800f73c:	89ab      	ldrh	r3, [r5, #12]
 800f73e:	065b      	lsls	r3, r3, #25
 800f740:	f53f af12 	bmi.w	800f568 <_vfiprintf_r+0x4c>
 800f744:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f746:	e711      	b.n	800f56c <_vfiprintf_r+0x50>
 800f748:	ab03      	add	r3, sp, #12
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	462a      	mov	r2, r5
 800f74e:	4b09      	ldr	r3, [pc, #36]	; (800f774 <_vfiprintf_r+0x258>)
 800f750:	a904      	add	r1, sp, #16
 800f752:	4630      	mov	r0, r6
 800f754:	f7fe f91c 	bl	800d990 <_printf_i>
 800f758:	e7e4      	b.n	800f724 <_vfiprintf_r+0x208>
 800f75a:	bf00      	nop
 800f75c:	0801a5cc 	.word	0x0801a5cc
 800f760:	0801a5ec 	.word	0x0801a5ec
 800f764:	0801a5ac 	.word	0x0801a5ac
 800f768:	0801a454 	.word	0x0801a454
 800f76c:	0801a45e 	.word	0x0801a45e
 800f770:	0800d479 	.word	0x0800d479
 800f774:	0800f4f7 	.word	0x0800f4f7
 800f778:	0801a45a 	.word	0x0801a45a

0800f77c <__swbuf_r>:
 800f77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77e:	460e      	mov	r6, r1
 800f780:	4614      	mov	r4, r2
 800f782:	4605      	mov	r5, r0
 800f784:	b118      	cbz	r0, 800f78e <__swbuf_r+0x12>
 800f786:	6983      	ldr	r3, [r0, #24]
 800f788:	b90b      	cbnz	r3, 800f78e <__swbuf_r+0x12>
 800f78a:	f000 f9e7 	bl	800fb5c <__sinit>
 800f78e:	4b21      	ldr	r3, [pc, #132]	; (800f814 <__swbuf_r+0x98>)
 800f790:	429c      	cmp	r4, r3
 800f792:	d12b      	bne.n	800f7ec <__swbuf_r+0x70>
 800f794:	686c      	ldr	r4, [r5, #4]
 800f796:	69a3      	ldr	r3, [r4, #24]
 800f798:	60a3      	str	r3, [r4, #8]
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	071a      	lsls	r2, r3, #28
 800f79e:	d52f      	bpl.n	800f800 <__swbuf_r+0x84>
 800f7a0:	6923      	ldr	r3, [r4, #16]
 800f7a2:	b36b      	cbz	r3, 800f800 <__swbuf_r+0x84>
 800f7a4:	6923      	ldr	r3, [r4, #16]
 800f7a6:	6820      	ldr	r0, [r4, #0]
 800f7a8:	1ac0      	subs	r0, r0, r3
 800f7aa:	6963      	ldr	r3, [r4, #20]
 800f7ac:	b2f6      	uxtb	r6, r6
 800f7ae:	4283      	cmp	r3, r0
 800f7b0:	4637      	mov	r7, r6
 800f7b2:	dc04      	bgt.n	800f7be <__swbuf_r+0x42>
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	f000 f93c 	bl	800fa34 <_fflush_r>
 800f7bc:	bb30      	cbnz	r0, 800f80c <__swbuf_r+0x90>
 800f7be:	68a3      	ldr	r3, [r4, #8]
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	60a3      	str	r3, [r4, #8]
 800f7c4:	6823      	ldr	r3, [r4, #0]
 800f7c6:	1c5a      	adds	r2, r3, #1
 800f7c8:	6022      	str	r2, [r4, #0]
 800f7ca:	701e      	strb	r6, [r3, #0]
 800f7cc:	6963      	ldr	r3, [r4, #20]
 800f7ce:	3001      	adds	r0, #1
 800f7d0:	4283      	cmp	r3, r0
 800f7d2:	d004      	beq.n	800f7de <__swbuf_r+0x62>
 800f7d4:	89a3      	ldrh	r3, [r4, #12]
 800f7d6:	07db      	lsls	r3, r3, #31
 800f7d8:	d506      	bpl.n	800f7e8 <__swbuf_r+0x6c>
 800f7da:	2e0a      	cmp	r6, #10
 800f7dc:	d104      	bne.n	800f7e8 <__swbuf_r+0x6c>
 800f7de:	4621      	mov	r1, r4
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	f000 f927 	bl	800fa34 <_fflush_r>
 800f7e6:	b988      	cbnz	r0, 800f80c <__swbuf_r+0x90>
 800f7e8:	4638      	mov	r0, r7
 800f7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ec:	4b0a      	ldr	r3, [pc, #40]	; (800f818 <__swbuf_r+0x9c>)
 800f7ee:	429c      	cmp	r4, r3
 800f7f0:	d101      	bne.n	800f7f6 <__swbuf_r+0x7a>
 800f7f2:	68ac      	ldr	r4, [r5, #8]
 800f7f4:	e7cf      	b.n	800f796 <__swbuf_r+0x1a>
 800f7f6:	4b09      	ldr	r3, [pc, #36]	; (800f81c <__swbuf_r+0xa0>)
 800f7f8:	429c      	cmp	r4, r3
 800f7fa:	bf08      	it	eq
 800f7fc:	68ec      	ldreq	r4, [r5, #12]
 800f7fe:	e7ca      	b.n	800f796 <__swbuf_r+0x1a>
 800f800:	4621      	mov	r1, r4
 800f802:	4628      	mov	r0, r5
 800f804:	f000 f81a 	bl	800f83c <__swsetup_r>
 800f808:	2800      	cmp	r0, #0
 800f80a:	d0cb      	beq.n	800f7a4 <__swbuf_r+0x28>
 800f80c:	f04f 37ff 	mov.w	r7, #4294967295
 800f810:	e7ea      	b.n	800f7e8 <__swbuf_r+0x6c>
 800f812:	bf00      	nop
 800f814:	0801a5cc 	.word	0x0801a5cc
 800f818:	0801a5ec 	.word	0x0801a5ec
 800f81c:	0801a5ac 	.word	0x0801a5ac

0800f820 <__ascii_wctomb>:
 800f820:	b149      	cbz	r1, 800f836 <__ascii_wctomb+0x16>
 800f822:	2aff      	cmp	r2, #255	; 0xff
 800f824:	bf85      	ittet	hi
 800f826:	238a      	movhi	r3, #138	; 0x8a
 800f828:	6003      	strhi	r3, [r0, #0]
 800f82a:	700a      	strbls	r2, [r1, #0]
 800f82c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f830:	bf98      	it	ls
 800f832:	2001      	movls	r0, #1
 800f834:	4770      	bx	lr
 800f836:	4608      	mov	r0, r1
 800f838:	4770      	bx	lr
	...

0800f83c <__swsetup_r>:
 800f83c:	4b32      	ldr	r3, [pc, #200]	; (800f908 <__swsetup_r+0xcc>)
 800f83e:	b570      	push	{r4, r5, r6, lr}
 800f840:	681d      	ldr	r5, [r3, #0]
 800f842:	4606      	mov	r6, r0
 800f844:	460c      	mov	r4, r1
 800f846:	b125      	cbz	r5, 800f852 <__swsetup_r+0x16>
 800f848:	69ab      	ldr	r3, [r5, #24]
 800f84a:	b913      	cbnz	r3, 800f852 <__swsetup_r+0x16>
 800f84c:	4628      	mov	r0, r5
 800f84e:	f000 f985 	bl	800fb5c <__sinit>
 800f852:	4b2e      	ldr	r3, [pc, #184]	; (800f90c <__swsetup_r+0xd0>)
 800f854:	429c      	cmp	r4, r3
 800f856:	d10f      	bne.n	800f878 <__swsetup_r+0x3c>
 800f858:	686c      	ldr	r4, [r5, #4]
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f860:	0719      	lsls	r1, r3, #28
 800f862:	d42c      	bmi.n	800f8be <__swsetup_r+0x82>
 800f864:	06dd      	lsls	r5, r3, #27
 800f866:	d411      	bmi.n	800f88c <__swsetup_r+0x50>
 800f868:	2309      	movs	r3, #9
 800f86a:	6033      	str	r3, [r6, #0]
 800f86c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	f04f 30ff 	mov.w	r0, #4294967295
 800f876:	e03e      	b.n	800f8f6 <__swsetup_r+0xba>
 800f878:	4b25      	ldr	r3, [pc, #148]	; (800f910 <__swsetup_r+0xd4>)
 800f87a:	429c      	cmp	r4, r3
 800f87c:	d101      	bne.n	800f882 <__swsetup_r+0x46>
 800f87e:	68ac      	ldr	r4, [r5, #8]
 800f880:	e7eb      	b.n	800f85a <__swsetup_r+0x1e>
 800f882:	4b24      	ldr	r3, [pc, #144]	; (800f914 <__swsetup_r+0xd8>)
 800f884:	429c      	cmp	r4, r3
 800f886:	bf08      	it	eq
 800f888:	68ec      	ldreq	r4, [r5, #12]
 800f88a:	e7e6      	b.n	800f85a <__swsetup_r+0x1e>
 800f88c:	0758      	lsls	r0, r3, #29
 800f88e:	d512      	bpl.n	800f8b6 <__swsetup_r+0x7a>
 800f890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f892:	b141      	cbz	r1, 800f8a6 <__swsetup_r+0x6a>
 800f894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f898:	4299      	cmp	r1, r3
 800f89a:	d002      	beq.n	800f8a2 <__swsetup_r+0x66>
 800f89c:	4630      	mov	r0, r6
 800f89e:	f7ff fb6f 	bl	800ef80 <_free_r>
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	6363      	str	r3, [r4, #52]	; 0x34
 800f8a6:	89a3      	ldrh	r3, [r4, #12]
 800f8a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f8ac:	81a3      	strh	r3, [r4, #12]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	6063      	str	r3, [r4, #4]
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	f043 0308 	orr.w	r3, r3, #8
 800f8bc:	81a3      	strh	r3, [r4, #12]
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	b94b      	cbnz	r3, 800f8d6 <__swsetup_r+0x9a>
 800f8c2:	89a3      	ldrh	r3, [r4, #12]
 800f8c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8cc:	d003      	beq.n	800f8d6 <__swsetup_r+0x9a>
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f000 fa07 	bl	800fce4 <__smakebuf_r>
 800f8d6:	89a0      	ldrh	r0, [r4, #12]
 800f8d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8dc:	f010 0301 	ands.w	r3, r0, #1
 800f8e0:	d00a      	beq.n	800f8f8 <__swsetup_r+0xbc>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	60a3      	str	r3, [r4, #8]
 800f8e6:	6963      	ldr	r3, [r4, #20]
 800f8e8:	425b      	negs	r3, r3
 800f8ea:	61a3      	str	r3, [r4, #24]
 800f8ec:	6923      	ldr	r3, [r4, #16]
 800f8ee:	b943      	cbnz	r3, 800f902 <__swsetup_r+0xc6>
 800f8f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f8f4:	d1ba      	bne.n	800f86c <__swsetup_r+0x30>
 800f8f6:	bd70      	pop	{r4, r5, r6, pc}
 800f8f8:	0781      	lsls	r1, r0, #30
 800f8fa:	bf58      	it	pl
 800f8fc:	6963      	ldrpl	r3, [r4, #20]
 800f8fe:	60a3      	str	r3, [r4, #8]
 800f900:	e7f4      	b.n	800f8ec <__swsetup_r+0xb0>
 800f902:	2000      	movs	r0, #0
 800f904:	e7f7      	b.n	800f8f6 <__swsetup_r+0xba>
 800f906:	bf00      	nop
 800f908:	24000380 	.word	0x24000380
 800f90c:	0801a5cc 	.word	0x0801a5cc
 800f910:	0801a5ec 	.word	0x0801a5ec
 800f914:	0801a5ac 	.word	0x0801a5ac

0800f918 <abort>:
 800f918:	b508      	push	{r3, lr}
 800f91a:	2006      	movs	r0, #6
 800f91c:	f000 fa52 	bl	800fdc4 <raise>
 800f920:	2001      	movs	r0, #1
 800f922:	f7f3 fd4b 	bl	80033bc <_exit>
	...

0800f928 <__sflush_r>:
 800f928:	898a      	ldrh	r2, [r1, #12]
 800f92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f92e:	4605      	mov	r5, r0
 800f930:	0710      	lsls	r0, r2, #28
 800f932:	460c      	mov	r4, r1
 800f934:	d458      	bmi.n	800f9e8 <__sflush_r+0xc0>
 800f936:	684b      	ldr	r3, [r1, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	dc05      	bgt.n	800f948 <__sflush_r+0x20>
 800f93c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f93e:	2b00      	cmp	r3, #0
 800f940:	dc02      	bgt.n	800f948 <__sflush_r+0x20>
 800f942:	2000      	movs	r0, #0
 800f944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f94a:	2e00      	cmp	r6, #0
 800f94c:	d0f9      	beq.n	800f942 <__sflush_r+0x1a>
 800f94e:	2300      	movs	r3, #0
 800f950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f954:	682f      	ldr	r7, [r5, #0]
 800f956:	602b      	str	r3, [r5, #0]
 800f958:	d032      	beq.n	800f9c0 <__sflush_r+0x98>
 800f95a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	075a      	lsls	r2, r3, #29
 800f960:	d505      	bpl.n	800f96e <__sflush_r+0x46>
 800f962:	6863      	ldr	r3, [r4, #4]
 800f964:	1ac0      	subs	r0, r0, r3
 800f966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f968:	b10b      	cbz	r3, 800f96e <__sflush_r+0x46>
 800f96a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f96c:	1ac0      	subs	r0, r0, r3
 800f96e:	2300      	movs	r3, #0
 800f970:	4602      	mov	r2, r0
 800f972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f974:	6a21      	ldr	r1, [r4, #32]
 800f976:	4628      	mov	r0, r5
 800f978:	47b0      	blx	r6
 800f97a:	1c43      	adds	r3, r0, #1
 800f97c:	89a3      	ldrh	r3, [r4, #12]
 800f97e:	d106      	bne.n	800f98e <__sflush_r+0x66>
 800f980:	6829      	ldr	r1, [r5, #0]
 800f982:	291d      	cmp	r1, #29
 800f984:	d82c      	bhi.n	800f9e0 <__sflush_r+0xb8>
 800f986:	4a2a      	ldr	r2, [pc, #168]	; (800fa30 <__sflush_r+0x108>)
 800f988:	40ca      	lsrs	r2, r1
 800f98a:	07d6      	lsls	r6, r2, #31
 800f98c:	d528      	bpl.n	800f9e0 <__sflush_r+0xb8>
 800f98e:	2200      	movs	r2, #0
 800f990:	6062      	str	r2, [r4, #4]
 800f992:	04d9      	lsls	r1, r3, #19
 800f994:	6922      	ldr	r2, [r4, #16]
 800f996:	6022      	str	r2, [r4, #0]
 800f998:	d504      	bpl.n	800f9a4 <__sflush_r+0x7c>
 800f99a:	1c42      	adds	r2, r0, #1
 800f99c:	d101      	bne.n	800f9a2 <__sflush_r+0x7a>
 800f99e:	682b      	ldr	r3, [r5, #0]
 800f9a0:	b903      	cbnz	r3, 800f9a4 <__sflush_r+0x7c>
 800f9a2:	6560      	str	r0, [r4, #84]	; 0x54
 800f9a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9a6:	602f      	str	r7, [r5, #0]
 800f9a8:	2900      	cmp	r1, #0
 800f9aa:	d0ca      	beq.n	800f942 <__sflush_r+0x1a>
 800f9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9b0:	4299      	cmp	r1, r3
 800f9b2:	d002      	beq.n	800f9ba <__sflush_r+0x92>
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	f7ff fae3 	bl	800ef80 <_free_r>
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	6360      	str	r0, [r4, #52]	; 0x34
 800f9be:	e7c1      	b.n	800f944 <__sflush_r+0x1c>
 800f9c0:	6a21      	ldr	r1, [r4, #32]
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	47b0      	blx	r6
 800f9c8:	1c41      	adds	r1, r0, #1
 800f9ca:	d1c7      	bne.n	800f95c <__sflush_r+0x34>
 800f9cc:	682b      	ldr	r3, [r5, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d0c4      	beq.n	800f95c <__sflush_r+0x34>
 800f9d2:	2b1d      	cmp	r3, #29
 800f9d4:	d001      	beq.n	800f9da <__sflush_r+0xb2>
 800f9d6:	2b16      	cmp	r3, #22
 800f9d8:	d101      	bne.n	800f9de <__sflush_r+0xb6>
 800f9da:	602f      	str	r7, [r5, #0]
 800f9dc:	e7b1      	b.n	800f942 <__sflush_r+0x1a>
 800f9de:	89a3      	ldrh	r3, [r4, #12]
 800f9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e4:	81a3      	strh	r3, [r4, #12]
 800f9e6:	e7ad      	b.n	800f944 <__sflush_r+0x1c>
 800f9e8:	690f      	ldr	r7, [r1, #16]
 800f9ea:	2f00      	cmp	r7, #0
 800f9ec:	d0a9      	beq.n	800f942 <__sflush_r+0x1a>
 800f9ee:	0793      	lsls	r3, r2, #30
 800f9f0:	680e      	ldr	r6, [r1, #0]
 800f9f2:	bf08      	it	eq
 800f9f4:	694b      	ldreq	r3, [r1, #20]
 800f9f6:	600f      	str	r7, [r1, #0]
 800f9f8:	bf18      	it	ne
 800f9fa:	2300      	movne	r3, #0
 800f9fc:	eba6 0807 	sub.w	r8, r6, r7
 800fa00:	608b      	str	r3, [r1, #8]
 800fa02:	f1b8 0f00 	cmp.w	r8, #0
 800fa06:	dd9c      	ble.n	800f942 <__sflush_r+0x1a>
 800fa08:	6a21      	ldr	r1, [r4, #32]
 800fa0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa0c:	4643      	mov	r3, r8
 800fa0e:	463a      	mov	r2, r7
 800fa10:	4628      	mov	r0, r5
 800fa12:	47b0      	blx	r6
 800fa14:	2800      	cmp	r0, #0
 800fa16:	dc06      	bgt.n	800fa26 <__sflush_r+0xfe>
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa1e:	81a3      	strh	r3, [r4, #12]
 800fa20:	f04f 30ff 	mov.w	r0, #4294967295
 800fa24:	e78e      	b.n	800f944 <__sflush_r+0x1c>
 800fa26:	4407      	add	r7, r0
 800fa28:	eba8 0800 	sub.w	r8, r8, r0
 800fa2c:	e7e9      	b.n	800fa02 <__sflush_r+0xda>
 800fa2e:	bf00      	nop
 800fa30:	20400001 	.word	0x20400001

0800fa34 <_fflush_r>:
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	690b      	ldr	r3, [r1, #16]
 800fa38:	4605      	mov	r5, r0
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	b913      	cbnz	r3, 800fa44 <_fflush_r+0x10>
 800fa3e:	2500      	movs	r5, #0
 800fa40:	4628      	mov	r0, r5
 800fa42:	bd38      	pop	{r3, r4, r5, pc}
 800fa44:	b118      	cbz	r0, 800fa4e <_fflush_r+0x1a>
 800fa46:	6983      	ldr	r3, [r0, #24]
 800fa48:	b90b      	cbnz	r3, 800fa4e <_fflush_r+0x1a>
 800fa4a:	f000 f887 	bl	800fb5c <__sinit>
 800fa4e:	4b14      	ldr	r3, [pc, #80]	; (800faa0 <_fflush_r+0x6c>)
 800fa50:	429c      	cmp	r4, r3
 800fa52:	d11b      	bne.n	800fa8c <_fflush_r+0x58>
 800fa54:	686c      	ldr	r4, [r5, #4]
 800fa56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d0ef      	beq.n	800fa3e <_fflush_r+0xa>
 800fa5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa60:	07d0      	lsls	r0, r2, #31
 800fa62:	d404      	bmi.n	800fa6e <_fflush_r+0x3a>
 800fa64:	0599      	lsls	r1, r3, #22
 800fa66:	d402      	bmi.n	800fa6e <_fflush_r+0x3a>
 800fa68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa6a:	f000 f915 	bl	800fc98 <__retarget_lock_acquire_recursive>
 800fa6e:	4628      	mov	r0, r5
 800fa70:	4621      	mov	r1, r4
 800fa72:	f7ff ff59 	bl	800f928 <__sflush_r>
 800fa76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa78:	07da      	lsls	r2, r3, #31
 800fa7a:	4605      	mov	r5, r0
 800fa7c:	d4e0      	bmi.n	800fa40 <_fflush_r+0xc>
 800fa7e:	89a3      	ldrh	r3, [r4, #12]
 800fa80:	059b      	lsls	r3, r3, #22
 800fa82:	d4dd      	bmi.n	800fa40 <_fflush_r+0xc>
 800fa84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa86:	f000 f908 	bl	800fc9a <__retarget_lock_release_recursive>
 800fa8a:	e7d9      	b.n	800fa40 <_fflush_r+0xc>
 800fa8c:	4b05      	ldr	r3, [pc, #20]	; (800faa4 <_fflush_r+0x70>)
 800fa8e:	429c      	cmp	r4, r3
 800fa90:	d101      	bne.n	800fa96 <_fflush_r+0x62>
 800fa92:	68ac      	ldr	r4, [r5, #8]
 800fa94:	e7df      	b.n	800fa56 <_fflush_r+0x22>
 800fa96:	4b04      	ldr	r3, [pc, #16]	; (800faa8 <_fflush_r+0x74>)
 800fa98:	429c      	cmp	r4, r3
 800fa9a:	bf08      	it	eq
 800fa9c:	68ec      	ldreq	r4, [r5, #12]
 800fa9e:	e7da      	b.n	800fa56 <_fflush_r+0x22>
 800faa0:	0801a5cc 	.word	0x0801a5cc
 800faa4:	0801a5ec 	.word	0x0801a5ec
 800faa8:	0801a5ac 	.word	0x0801a5ac

0800faac <std>:
 800faac:	2300      	movs	r3, #0
 800faae:	b510      	push	{r4, lr}
 800fab0:	4604      	mov	r4, r0
 800fab2:	e9c0 3300 	strd	r3, r3, [r0]
 800fab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800faba:	6083      	str	r3, [r0, #8]
 800fabc:	8181      	strh	r1, [r0, #12]
 800fabe:	6643      	str	r3, [r0, #100]	; 0x64
 800fac0:	81c2      	strh	r2, [r0, #14]
 800fac2:	6183      	str	r3, [r0, #24]
 800fac4:	4619      	mov	r1, r3
 800fac6:	2208      	movs	r2, #8
 800fac8:	305c      	adds	r0, #92	; 0x5c
 800faca:	f7fd fc3b 	bl	800d344 <memset>
 800face:	4b05      	ldr	r3, [pc, #20]	; (800fae4 <std+0x38>)
 800fad0:	6263      	str	r3, [r4, #36]	; 0x24
 800fad2:	4b05      	ldr	r3, [pc, #20]	; (800fae8 <std+0x3c>)
 800fad4:	62a3      	str	r3, [r4, #40]	; 0x28
 800fad6:	4b05      	ldr	r3, [pc, #20]	; (800faec <std+0x40>)
 800fad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fada:	4b05      	ldr	r3, [pc, #20]	; (800faf0 <std+0x44>)
 800fadc:	6224      	str	r4, [r4, #32]
 800fade:	6323      	str	r3, [r4, #48]	; 0x30
 800fae0:	bd10      	pop	{r4, pc}
 800fae2:	bf00      	nop
 800fae4:	0800fdfd 	.word	0x0800fdfd
 800fae8:	0800fe1f 	.word	0x0800fe1f
 800faec:	0800fe57 	.word	0x0800fe57
 800faf0:	0800fe7b 	.word	0x0800fe7b

0800faf4 <_cleanup_r>:
 800faf4:	4901      	ldr	r1, [pc, #4]	; (800fafc <_cleanup_r+0x8>)
 800faf6:	f000 b8af 	b.w	800fc58 <_fwalk_reent>
 800fafa:	bf00      	nop
 800fafc:	0800fa35 	.word	0x0800fa35

0800fb00 <__sfmoreglue>:
 800fb00:	b570      	push	{r4, r5, r6, lr}
 800fb02:	1e4a      	subs	r2, r1, #1
 800fb04:	2568      	movs	r5, #104	; 0x68
 800fb06:	4355      	muls	r5, r2
 800fb08:	460e      	mov	r6, r1
 800fb0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fb0e:	f7ff fa87 	bl	800f020 <_malloc_r>
 800fb12:	4604      	mov	r4, r0
 800fb14:	b140      	cbz	r0, 800fb28 <__sfmoreglue+0x28>
 800fb16:	2100      	movs	r1, #0
 800fb18:	e9c0 1600 	strd	r1, r6, [r0]
 800fb1c:	300c      	adds	r0, #12
 800fb1e:	60a0      	str	r0, [r4, #8]
 800fb20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fb24:	f7fd fc0e 	bl	800d344 <memset>
 800fb28:	4620      	mov	r0, r4
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}

0800fb2c <__sfp_lock_acquire>:
 800fb2c:	4801      	ldr	r0, [pc, #4]	; (800fb34 <__sfp_lock_acquire+0x8>)
 800fb2e:	f000 b8b3 	b.w	800fc98 <__retarget_lock_acquire_recursive>
 800fb32:	bf00      	nop
 800fb34:	2400f2e8 	.word	0x2400f2e8

0800fb38 <__sfp_lock_release>:
 800fb38:	4801      	ldr	r0, [pc, #4]	; (800fb40 <__sfp_lock_release+0x8>)
 800fb3a:	f000 b8ae 	b.w	800fc9a <__retarget_lock_release_recursive>
 800fb3e:	bf00      	nop
 800fb40:	2400f2e8 	.word	0x2400f2e8

0800fb44 <__sinit_lock_acquire>:
 800fb44:	4801      	ldr	r0, [pc, #4]	; (800fb4c <__sinit_lock_acquire+0x8>)
 800fb46:	f000 b8a7 	b.w	800fc98 <__retarget_lock_acquire_recursive>
 800fb4a:	bf00      	nop
 800fb4c:	2400f2e3 	.word	0x2400f2e3

0800fb50 <__sinit_lock_release>:
 800fb50:	4801      	ldr	r0, [pc, #4]	; (800fb58 <__sinit_lock_release+0x8>)
 800fb52:	f000 b8a2 	b.w	800fc9a <__retarget_lock_release_recursive>
 800fb56:	bf00      	nop
 800fb58:	2400f2e3 	.word	0x2400f2e3

0800fb5c <__sinit>:
 800fb5c:	b510      	push	{r4, lr}
 800fb5e:	4604      	mov	r4, r0
 800fb60:	f7ff fff0 	bl	800fb44 <__sinit_lock_acquire>
 800fb64:	69a3      	ldr	r3, [r4, #24]
 800fb66:	b11b      	cbz	r3, 800fb70 <__sinit+0x14>
 800fb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb6c:	f7ff bff0 	b.w	800fb50 <__sinit_lock_release>
 800fb70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fb74:	6523      	str	r3, [r4, #80]	; 0x50
 800fb76:	4b13      	ldr	r3, [pc, #76]	; (800fbc4 <__sinit+0x68>)
 800fb78:	4a13      	ldr	r2, [pc, #76]	; (800fbc8 <__sinit+0x6c>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800fb7e:	42a3      	cmp	r3, r4
 800fb80:	bf04      	itt	eq
 800fb82:	2301      	moveq	r3, #1
 800fb84:	61a3      	streq	r3, [r4, #24]
 800fb86:	4620      	mov	r0, r4
 800fb88:	f000 f820 	bl	800fbcc <__sfp>
 800fb8c:	6060      	str	r0, [r4, #4]
 800fb8e:	4620      	mov	r0, r4
 800fb90:	f000 f81c 	bl	800fbcc <__sfp>
 800fb94:	60a0      	str	r0, [r4, #8]
 800fb96:	4620      	mov	r0, r4
 800fb98:	f000 f818 	bl	800fbcc <__sfp>
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	60e0      	str	r0, [r4, #12]
 800fba0:	2104      	movs	r1, #4
 800fba2:	6860      	ldr	r0, [r4, #4]
 800fba4:	f7ff ff82 	bl	800faac <std>
 800fba8:	68a0      	ldr	r0, [r4, #8]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	2109      	movs	r1, #9
 800fbae:	f7ff ff7d 	bl	800faac <std>
 800fbb2:	68e0      	ldr	r0, [r4, #12]
 800fbb4:	2202      	movs	r2, #2
 800fbb6:	2112      	movs	r1, #18
 800fbb8:	f7ff ff78 	bl	800faac <std>
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	61a3      	str	r3, [r4, #24]
 800fbc0:	e7d2      	b.n	800fb68 <__sinit+0xc>
 800fbc2:	bf00      	nop
 800fbc4:	0801a22c 	.word	0x0801a22c
 800fbc8:	0800faf5 	.word	0x0800faf5

0800fbcc <__sfp>:
 800fbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbce:	4607      	mov	r7, r0
 800fbd0:	f7ff ffac 	bl	800fb2c <__sfp_lock_acquire>
 800fbd4:	4b1e      	ldr	r3, [pc, #120]	; (800fc50 <__sfp+0x84>)
 800fbd6:	681e      	ldr	r6, [r3, #0]
 800fbd8:	69b3      	ldr	r3, [r6, #24]
 800fbda:	b913      	cbnz	r3, 800fbe2 <__sfp+0x16>
 800fbdc:	4630      	mov	r0, r6
 800fbde:	f7ff ffbd 	bl	800fb5c <__sinit>
 800fbe2:	3648      	adds	r6, #72	; 0x48
 800fbe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	d503      	bpl.n	800fbf4 <__sfp+0x28>
 800fbec:	6833      	ldr	r3, [r6, #0]
 800fbee:	b30b      	cbz	r3, 800fc34 <__sfp+0x68>
 800fbf0:	6836      	ldr	r6, [r6, #0]
 800fbf2:	e7f7      	b.n	800fbe4 <__sfp+0x18>
 800fbf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fbf8:	b9d5      	cbnz	r5, 800fc30 <__sfp+0x64>
 800fbfa:	4b16      	ldr	r3, [pc, #88]	; (800fc54 <__sfp+0x88>)
 800fbfc:	60e3      	str	r3, [r4, #12]
 800fbfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fc02:	6665      	str	r5, [r4, #100]	; 0x64
 800fc04:	f000 f847 	bl	800fc96 <__retarget_lock_init_recursive>
 800fc08:	f7ff ff96 	bl	800fb38 <__sfp_lock_release>
 800fc0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fc10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fc14:	6025      	str	r5, [r4, #0]
 800fc16:	61a5      	str	r5, [r4, #24]
 800fc18:	2208      	movs	r2, #8
 800fc1a:	4629      	mov	r1, r5
 800fc1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fc20:	f7fd fb90 	bl	800d344 <memset>
 800fc24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fc28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc30:	3468      	adds	r4, #104	; 0x68
 800fc32:	e7d9      	b.n	800fbe8 <__sfp+0x1c>
 800fc34:	2104      	movs	r1, #4
 800fc36:	4638      	mov	r0, r7
 800fc38:	f7ff ff62 	bl	800fb00 <__sfmoreglue>
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	6030      	str	r0, [r6, #0]
 800fc40:	2800      	cmp	r0, #0
 800fc42:	d1d5      	bne.n	800fbf0 <__sfp+0x24>
 800fc44:	f7ff ff78 	bl	800fb38 <__sfp_lock_release>
 800fc48:	230c      	movs	r3, #12
 800fc4a:	603b      	str	r3, [r7, #0]
 800fc4c:	e7ee      	b.n	800fc2c <__sfp+0x60>
 800fc4e:	bf00      	nop
 800fc50:	0801a22c 	.word	0x0801a22c
 800fc54:	ffff0001 	.word	0xffff0001

0800fc58 <_fwalk_reent>:
 800fc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc5c:	4606      	mov	r6, r0
 800fc5e:	4688      	mov	r8, r1
 800fc60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fc64:	2700      	movs	r7, #0
 800fc66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc6a:	f1b9 0901 	subs.w	r9, r9, #1
 800fc6e:	d505      	bpl.n	800fc7c <_fwalk_reent+0x24>
 800fc70:	6824      	ldr	r4, [r4, #0]
 800fc72:	2c00      	cmp	r4, #0
 800fc74:	d1f7      	bne.n	800fc66 <_fwalk_reent+0xe>
 800fc76:	4638      	mov	r0, r7
 800fc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc7c:	89ab      	ldrh	r3, [r5, #12]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d907      	bls.n	800fc92 <_fwalk_reent+0x3a>
 800fc82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc86:	3301      	adds	r3, #1
 800fc88:	d003      	beq.n	800fc92 <_fwalk_reent+0x3a>
 800fc8a:	4629      	mov	r1, r5
 800fc8c:	4630      	mov	r0, r6
 800fc8e:	47c0      	blx	r8
 800fc90:	4307      	orrs	r7, r0
 800fc92:	3568      	adds	r5, #104	; 0x68
 800fc94:	e7e9      	b.n	800fc6a <_fwalk_reent+0x12>

0800fc96 <__retarget_lock_init_recursive>:
 800fc96:	4770      	bx	lr

0800fc98 <__retarget_lock_acquire_recursive>:
 800fc98:	4770      	bx	lr

0800fc9a <__retarget_lock_release_recursive>:
 800fc9a:	4770      	bx	lr

0800fc9c <__swhatbuf_r>:
 800fc9c:	b570      	push	{r4, r5, r6, lr}
 800fc9e:	460e      	mov	r6, r1
 800fca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fca4:	2900      	cmp	r1, #0
 800fca6:	b096      	sub	sp, #88	; 0x58
 800fca8:	4614      	mov	r4, r2
 800fcaa:	461d      	mov	r5, r3
 800fcac:	da07      	bge.n	800fcbe <__swhatbuf_r+0x22>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	602b      	str	r3, [r5, #0]
 800fcb2:	89b3      	ldrh	r3, [r6, #12]
 800fcb4:	061a      	lsls	r2, r3, #24
 800fcb6:	d410      	bmi.n	800fcda <__swhatbuf_r+0x3e>
 800fcb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcbc:	e00e      	b.n	800fcdc <__swhatbuf_r+0x40>
 800fcbe:	466a      	mov	r2, sp
 800fcc0:	f000 f902 	bl	800fec8 <_fstat_r>
 800fcc4:	2800      	cmp	r0, #0
 800fcc6:	dbf2      	blt.n	800fcae <__swhatbuf_r+0x12>
 800fcc8:	9a01      	ldr	r2, [sp, #4]
 800fcca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fcce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fcd2:	425a      	negs	r2, r3
 800fcd4:	415a      	adcs	r2, r3
 800fcd6:	602a      	str	r2, [r5, #0]
 800fcd8:	e7ee      	b.n	800fcb8 <__swhatbuf_r+0x1c>
 800fcda:	2340      	movs	r3, #64	; 0x40
 800fcdc:	2000      	movs	r0, #0
 800fcde:	6023      	str	r3, [r4, #0]
 800fce0:	b016      	add	sp, #88	; 0x58
 800fce2:	bd70      	pop	{r4, r5, r6, pc}

0800fce4 <__smakebuf_r>:
 800fce4:	898b      	ldrh	r3, [r1, #12]
 800fce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fce8:	079d      	lsls	r5, r3, #30
 800fcea:	4606      	mov	r6, r0
 800fcec:	460c      	mov	r4, r1
 800fcee:	d507      	bpl.n	800fd00 <__smakebuf_r+0x1c>
 800fcf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	6123      	str	r3, [r4, #16]
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	6163      	str	r3, [r4, #20]
 800fcfc:	b002      	add	sp, #8
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}
 800fd00:	ab01      	add	r3, sp, #4
 800fd02:	466a      	mov	r2, sp
 800fd04:	f7ff ffca 	bl	800fc9c <__swhatbuf_r>
 800fd08:	9900      	ldr	r1, [sp, #0]
 800fd0a:	4605      	mov	r5, r0
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	f7ff f987 	bl	800f020 <_malloc_r>
 800fd12:	b948      	cbnz	r0, 800fd28 <__smakebuf_r+0x44>
 800fd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd18:	059a      	lsls	r2, r3, #22
 800fd1a:	d4ef      	bmi.n	800fcfc <__smakebuf_r+0x18>
 800fd1c:	f023 0303 	bic.w	r3, r3, #3
 800fd20:	f043 0302 	orr.w	r3, r3, #2
 800fd24:	81a3      	strh	r3, [r4, #12]
 800fd26:	e7e3      	b.n	800fcf0 <__smakebuf_r+0xc>
 800fd28:	4b0d      	ldr	r3, [pc, #52]	; (800fd60 <__smakebuf_r+0x7c>)
 800fd2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fd2c:	89a3      	ldrh	r3, [r4, #12]
 800fd2e:	6020      	str	r0, [r4, #0]
 800fd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd34:	81a3      	strh	r3, [r4, #12]
 800fd36:	9b00      	ldr	r3, [sp, #0]
 800fd38:	6163      	str	r3, [r4, #20]
 800fd3a:	9b01      	ldr	r3, [sp, #4]
 800fd3c:	6120      	str	r0, [r4, #16]
 800fd3e:	b15b      	cbz	r3, 800fd58 <__smakebuf_r+0x74>
 800fd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd44:	4630      	mov	r0, r6
 800fd46:	f000 f8d1 	bl	800feec <_isatty_r>
 800fd4a:	b128      	cbz	r0, 800fd58 <__smakebuf_r+0x74>
 800fd4c:	89a3      	ldrh	r3, [r4, #12]
 800fd4e:	f023 0303 	bic.w	r3, r3, #3
 800fd52:	f043 0301 	orr.w	r3, r3, #1
 800fd56:	81a3      	strh	r3, [r4, #12]
 800fd58:	89a0      	ldrh	r0, [r4, #12]
 800fd5a:	4305      	orrs	r5, r0
 800fd5c:	81a5      	strh	r5, [r4, #12]
 800fd5e:	e7cd      	b.n	800fcfc <__smakebuf_r+0x18>
 800fd60:	0800faf5 	.word	0x0800faf5

0800fd64 <_malloc_usable_size_r>:
 800fd64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd68:	1f18      	subs	r0, r3, #4
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	bfbc      	itt	lt
 800fd6e:	580b      	ldrlt	r3, [r1, r0]
 800fd70:	18c0      	addlt	r0, r0, r3
 800fd72:	4770      	bx	lr

0800fd74 <_raise_r>:
 800fd74:	291f      	cmp	r1, #31
 800fd76:	b538      	push	{r3, r4, r5, lr}
 800fd78:	4604      	mov	r4, r0
 800fd7a:	460d      	mov	r5, r1
 800fd7c:	d904      	bls.n	800fd88 <_raise_r+0x14>
 800fd7e:	2316      	movs	r3, #22
 800fd80:	6003      	str	r3, [r0, #0]
 800fd82:	f04f 30ff 	mov.w	r0, #4294967295
 800fd86:	bd38      	pop	{r3, r4, r5, pc}
 800fd88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd8a:	b112      	cbz	r2, 800fd92 <_raise_r+0x1e>
 800fd8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd90:	b94b      	cbnz	r3, 800fda6 <_raise_r+0x32>
 800fd92:	4620      	mov	r0, r4
 800fd94:	f000 f830 	bl	800fdf8 <_getpid_r>
 800fd98:	462a      	mov	r2, r5
 800fd9a:	4601      	mov	r1, r0
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fda2:	f000 b817 	b.w	800fdd4 <_kill_r>
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d00a      	beq.n	800fdc0 <_raise_r+0x4c>
 800fdaa:	1c59      	adds	r1, r3, #1
 800fdac:	d103      	bne.n	800fdb6 <_raise_r+0x42>
 800fdae:	2316      	movs	r3, #22
 800fdb0:	6003      	str	r3, [r0, #0]
 800fdb2:	2001      	movs	r0, #1
 800fdb4:	e7e7      	b.n	800fd86 <_raise_r+0x12>
 800fdb6:	2400      	movs	r4, #0
 800fdb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	4798      	blx	r3
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	e7e0      	b.n	800fd86 <_raise_r+0x12>

0800fdc4 <raise>:
 800fdc4:	4b02      	ldr	r3, [pc, #8]	; (800fdd0 <raise+0xc>)
 800fdc6:	4601      	mov	r1, r0
 800fdc8:	6818      	ldr	r0, [r3, #0]
 800fdca:	f7ff bfd3 	b.w	800fd74 <_raise_r>
 800fdce:	bf00      	nop
 800fdd0:	24000380 	.word	0x24000380

0800fdd4 <_kill_r>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	4d07      	ldr	r5, [pc, #28]	; (800fdf4 <_kill_r+0x20>)
 800fdd8:	2300      	movs	r3, #0
 800fdda:	4604      	mov	r4, r0
 800fddc:	4608      	mov	r0, r1
 800fdde:	4611      	mov	r1, r2
 800fde0:	602b      	str	r3, [r5, #0]
 800fde2:	f7f3 fae1 	bl	80033a8 <_kill>
 800fde6:	1c43      	adds	r3, r0, #1
 800fde8:	d102      	bne.n	800fdf0 <_kill_r+0x1c>
 800fdea:	682b      	ldr	r3, [r5, #0]
 800fdec:	b103      	cbz	r3, 800fdf0 <_kill_r+0x1c>
 800fdee:	6023      	str	r3, [r4, #0]
 800fdf0:	bd38      	pop	{r3, r4, r5, pc}
 800fdf2:	bf00      	nop
 800fdf4:	2400f2dc 	.word	0x2400f2dc

0800fdf8 <_getpid_r>:
 800fdf8:	f7f3 bad4 	b.w	80033a4 <_getpid>

0800fdfc <__sread>:
 800fdfc:	b510      	push	{r4, lr}
 800fdfe:	460c      	mov	r4, r1
 800fe00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe04:	f000 f894 	bl	800ff30 <_read_r>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	bfab      	itete	ge
 800fe0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe0e:	89a3      	ldrhlt	r3, [r4, #12]
 800fe10:	181b      	addge	r3, r3, r0
 800fe12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe16:	bfac      	ite	ge
 800fe18:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe1a:	81a3      	strhlt	r3, [r4, #12]
 800fe1c:	bd10      	pop	{r4, pc}

0800fe1e <__swrite>:
 800fe1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe22:	461f      	mov	r7, r3
 800fe24:	898b      	ldrh	r3, [r1, #12]
 800fe26:	05db      	lsls	r3, r3, #23
 800fe28:	4605      	mov	r5, r0
 800fe2a:	460c      	mov	r4, r1
 800fe2c:	4616      	mov	r6, r2
 800fe2e:	d505      	bpl.n	800fe3c <__swrite+0x1e>
 800fe30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe34:	2302      	movs	r3, #2
 800fe36:	2200      	movs	r2, #0
 800fe38:	f000 f868 	bl	800ff0c <_lseek_r>
 800fe3c:	89a3      	ldrh	r3, [r4, #12]
 800fe3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe46:	81a3      	strh	r3, [r4, #12]
 800fe48:	4632      	mov	r2, r6
 800fe4a:	463b      	mov	r3, r7
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe52:	f000 b817 	b.w	800fe84 <_write_r>

0800fe56 <__sseek>:
 800fe56:	b510      	push	{r4, lr}
 800fe58:	460c      	mov	r4, r1
 800fe5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe5e:	f000 f855 	bl	800ff0c <_lseek_r>
 800fe62:	1c43      	adds	r3, r0, #1
 800fe64:	89a3      	ldrh	r3, [r4, #12]
 800fe66:	bf15      	itete	ne
 800fe68:	6560      	strne	r0, [r4, #84]	; 0x54
 800fe6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fe6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fe72:	81a3      	strheq	r3, [r4, #12]
 800fe74:	bf18      	it	ne
 800fe76:	81a3      	strhne	r3, [r4, #12]
 800fe78:	bd10      	pop	{r4, pc}

0800fe7a <__sclose>:
 800fe7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe7e:	f000 b813 	b.w	800fea8 <_close_r>
	...

0800fe84 <_write_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4d07      	ldr	r5, [pc, #28]	; (800fea4 <_write_r+0x20>)
 800fe88:	4604      	mov	r4, r0
 800fe8a:	4608      	mov	r0, r1
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	2200      	movs	r2, #0
 800fe90:	602a      	str	r2, [r5, #0]
 800fe92:	461a      	mov	r2, r3
 800fe94:	f7f3 faa6 	bl	80033e4 <_write>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	d102      	bne.n	800fea2 <_write_r+0x1e>
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	b103      	cbz	r3, 800fea2 <_write_r+0x1e>
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	2400f2dc 	.word	0x2400f2dc

0800fea8 <_close_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	4d06      	ldr	r5, [pc, #24]	; (800fec4 <_close_r+0x1c>)
 800feac:	2300      	movs	r3, #0
 800feae:	4604      	mov	r4, r0
 800feb0:	4608      	mov	r0, r1
 800feb2:	602b      	str	r3, [r5, #0]
 800feb4:	f7f3 faa4 	bl	8003400 <_close>
 800feb8:	1c43      	adds	r3, r0, #1
 800feba:	d102      	bne.n	800fec2 <_close_r+0x1a>
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	b103      	cbz	r3, 800fec2 <_close_r+0x1a>
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
 800fec4:	2400f2dc 	.word	0x2400f2dc

0800fec8 <_fstat_r>:
 800fec8:	b538      	push	{r3, r4, r5, lr}
 800feca:	4d07      	ldr	r5, [pc, #28]	; (800fee8 <_fstat_r+0x20>)
 800fecc:	2300      	movs	r3, #0
 800fece:	4604      	mov	r4, r0
 800fed0:	4608      	mov	r0, r1
 800fed2:	4611      	mov	r1, r2
 800fed4:	602b      	str	r3, [r5, #0]
 800fed6:	f7f3 fa97 	bl	8003408 <_fstat>
 800feda:	1c43      	adds	r3, r0, #1
 800fedc:	d102      	bne.n	800fee4 <_fstat_r+0x1c>
 800fede:	682b      	ldr	r3, [r5, #0]
 800fee0:	b103      	cbz	r3, 800fee4 <_fstat_r+0x1c>
 800fee2:	6023      	str	r3, [r4, #0]
 800fee4:	bd38      	pop	{r3, r4, r5, pc}
 800fee6:	bf00      	nop
 800fee8:	2400f2dc 	.word	0x2400f2dc

0800feec <_isatty_r>:
 800feec:	b538      	push	{r3, r4, r5, lr}
 800feee:	4d06      	ldr	r5, [pc, #24]	; (800ff08 <_isatty_r+0x1c>)
 800fef0:	2300      	movs	r3, #0
 800fef2:	4604      	mov	r4, r0
 800fef4:	4608      	mov	r0, r1
 800fef6:	602b      	str	r3, [r5, #0]
 800fef8:	f7f3 fa8c 	bl	8003414 <_isatty>
 800fefc:	1c43      	adds	r3, r0, #1
 800fefe:	d102      	bne.n	800ff06 <_isatty_r+0x1a>
 800ff00:	682b      	ldr	r3, [r5, #0]
 800ff02:	b103      	cbz	r3, 800ff06 <_isatty_r+0x1a>
 800ff04:	6023      	str	r3, [r4, #0]
 800ff06:	bd38      	pop	{r3, r4, r5, pc}
 800ff08:	2400f2dc 	.word	0x2400f2dc

0800ff0c <_lseek_r>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	4d07      	ldr	r5, [pc, #28]	; (800ff2c <_lseek_r+0x20>)
 800ff10:	4604      	mov	r4, r0
 800ff12:	4608      	mov	r0, r1
 800ff14:	4611      	mov	r1, r2
 800ff16:	2200      	movs	r2, #0
 800ff18:	602a      	str	r2, [r5, #0]
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	f7f3 fa7c 	bl	8003418 <_lseek>
 800ff20:	1c43      	adds	r3, r0, #1
 800ff22:	d102      	bne.n	800ff2a <_lseek_r+0x1e>
 800ff24:	682b      	ldr	r3, [r5, #0]
 800ff26:	b103      	cbz	r3, 800ff2a <_lseek_r+0x1e>
 800ff28:	6023      	str	r3, [r4, #0]
 800ff2a:	bd38      	pop	{r3, r4, r5, pc}
 800ff2c:	2400f2dc 	.word	0x2400f2dc

0800ff30 <_read_r>:
 800ff30:	b538      	push	{r3, r4, r5, lr}
 800ff32:	4d07      	ldr	r5, [pc, #28]	; (800ff50 <_read_r+0x20>)
 800ff34:	4604      	mov	r4, r0
 800ff36:	4608      	mov	r0, r1
 800ff38:	4611      	mov	r1, r2
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	602a      	str	r2, [r5, #0]
 800ff3e:	461a      	mov	r2, r3
 800ff40:	f7f3 fa42 	bl	80033c8 <_read>
 800ff44:	1c43      	adds	r3, r0, #1
 800ff46:	d102      	bne.n	800ff4e <_read_r+0x1e>
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	b103      	cbz	r3, 800ff4e <_read_r+0x1e>
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	bd38      	pop	{r3, r4, r5, pc}
 800ff50:	2400f2dc 	.word	0x2400f2dc
 800ff54:	00000000 	.word	0x00000000

0800ff58 <exp>:
 800ff58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5c:	b087      	sub	sp, #28
 800ff5e:	ed8d 0b00 	vstr	d0, [sp]
 800ff62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff66:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
 800ff6a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ff6e:	18f7      	adds	r7, r6, r3
 800ff70:	2f3e      	cmp	r7, #62	; 0x3e
 800ff72:	d929      	bls.n	800ffc8 <exp+0x70>
 800ff74:	2f00      	cmp	r7, #0
 800ff76:	da08      	bge.n	800ff8a <exp+0x32>
 800ff78:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ff7c:	ed9d 7b00 	vldr	d7, [sp]
 800ff80:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ff84:	b007      	add	sp, #28
 800ff86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff8a:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800ff8e:	d91a      	bls.n	800ffc6 <exp+0x6e>
 800ff90:	4b65      	ldr	r3, [pc, #404]	; (8010128 <exp+0x1d0>)
 800ff92:	2200      	movs	r2, #0
 800ff94:	4299      	cmp	r1, r3
 800ff96:	bf08      	it	eq
 800ff98:	4290      	cmpeq	r0, r2
 800ff9a:	f000 80b6 	beq.w	801010a <exp+0x1b2>
 800ff9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ffa2:	429e      	cmp	r6, r3
 800ffa4:	d0e8      	beq.n	800ff78 <exp+0x20>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	f171 0300 	sbcs.w	r3, r1, #0
 800ffac:	f04f 0000 	mov.w	r0, #0
 800ffb0:	da04      	bge.n	800ffbc <exp+0x64>
 800ffb2:	b007      	add	sp, #28
 800ffb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb8:	f000 b8da 	b.w	8010170 <__math_uflow>
 800ffbc:	b007      	add	sp, #28
 800ffbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc2:	f000 b8dd 	b.w	8010180 <__math_oflow>
 800ffc6:	2600      	movs	r6, #0
 800ffc8:	4858      	ldr	r0, [pc, #352]	; (801012c <exp+0x1d4>)
 800ffca:	ed9d 3b00 	vldr	d3, [sp]
 800ffce:	ed90 6b02 	vldr	d6, [r0, #8]
 800ffd2:	ed90 7b00 	vldr	d7, [r0]
 800ffd6:	eeb0 4b46 	vmov.f64	d4, d6
 800ffda:	eea7 4b03 	vfma.f64	d4, d7, d3
 800ffde:	ee34 7b46 	vsub.f64	d7, d4, d6
 800ffe2:	ed90 6b04 	vldr	d6, [r0, #16]
 800ffe6:	ee14 ca10 	vmov	ip, s8
 800ffea:	eeb0 4b43 	vmov.f64	d4, d3
 800ffee:	f00c 017f 	and.w	r1, ip, #127	; 0x7f
 800fff2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fff6:	eeb0 6b44 	vmov.f64	d6, d4
 800fffa:	ed90 4b06 	vldr	d4, [r0, #24]
 800fffe:	1849      	adds	r1, r1, r1
 8010000:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
 8010004:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010008:	eea4 6b07 	vfma.f64	d6, d4, d7
 801000c:	ed90 3b0a 	vldr	d3, [r0, #40]	; 0x28
 8010010:	ee26 2b06 	vmul.f64	d2, d6, d6
 8010014:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8010018:	ed90 4b08 	vldr	d4, [r0, #32]
 801001c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010020:	e9d9 891e 	ldrd	r8, r9, [r9, #120]	; 0x78
 8010024:	eea3 4b06 	vfma.f64	d4, d3, d6
 8010028:	eea4 7b02 	vfma.f64	d7, d4, d2
 801002c:	ed90 3b0e 	vldr	d3, [r0, #56]	; 0x38
 8010030:	ee22 2b02 	vmul.f64	d2, d2, d2
 8010034:	ed90 4b0c 	vldr	d4, [r0, #48]	; 0x30
 8010038:	2700      	movs	r7, #0
 801003a:	ea4f 3e4c 	mov.w	lr, ip, lsl #13
 801003e:	eb17 0a08 	adds.w	sl, r7, r8
 8010042:	eea3 4b06 	vfma.f64	d4, d3, d6
 8010046:	eb4e 0b09 	adc.w	fp, lr, r9
 801004a:	eea2 7b04 	vfma.f64	d7, d2, d4
 801004e:	2e00      	cmp	r6, #0
 8010050:	d156      	bne.n	8010100 <exp+0x1a8>
 8010052:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8010056:	4631      	mov	r1, r6
 8010058:	ea50 0301 	orrs.w	r3, r0, r1
 801005c:	d113      	bne.n	8010086 <exp+0x12e>
 801005e:	4a34      	ldr	r2, [pc, #208]	; (8010130 <exp+0x1d8>)
 8010060:	eb1a 0407 	adds.w	r4, sl, r7
 8010064:	eb4b 0502 	adc.w	r5, fp, r2
 8010068:	ec45 4b10 	vmov	d0, r4, r5
 801006c:	ec45 4b16 	vmov	d6, r4, r5
 8010070:	eea7 0b06 	vfma.f64	d0, d7, d6
 8010074:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8010110 <exp+0x1b8>
 8010078:	ee20 0b07 	vmul.f64	d0, d0, d7
 801007c:	b007      	add	sp, #28
 801007e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010082:	f000 b8b5 	b.w	80101f0 <__math_check_oflow>
 8010086:	4a2b      	ldr	r2, [pc, #172]	; (8010134 <exp+0x1dc>)
 8010088:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801008c:	2100      	movs	r1, #0
 801008e:	eb1a 0301 	adds.w	r3, sl, r1
 8010092:	ee05 3a10 	vmov	s10, r3
 8010096:	eb4b 0302 	adc.w	r3, fp, r2
 801009a:	ee05 3a90 	vmov	s11, r3
 801009e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80100a2:	ee35 6b07 	vadd.f64	d6, d5, d7
 80100a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80100aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ae:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010118 <exp+0x1c0>
 80100b2:	d51e      	bpl.n	80100f2 <exp+0x19a>
 80100b4:	ee35 5b46 	vsub.f64	d5, d5, d6
 80100b8:	ee36 3b04 	vadd.f64	d3, d6, d4
 80100bc:	ee35 7b07 	vadd.f64	d7, d5, d7
 80100c0:	ee34 5b43 	vsub.f64	d5, d4, d3
 80100c4:	ee35 6b06 	vadd.f64	d6, d5, d6
 80100c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80100cc:	ee36 6b03 	vadd.f64	d6, d6, d3
 80100d0:	ee36 6b44 	vsub.f64	d6, d6, d4
 80100d4:	eeb5 6b40 	vcmp.f64	d6, #0.0
 80100d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100dc:	d101      	bne.n	80100e2 <exp+0x18a>
 80100de:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8010120 <exp+0x1c8>
 80100e2:	ed8d 0b02 	vstr	d0, [sp, #8]
 80100e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80100ea:	ee27 7b00 	vmul.f64	d7, d7, d0
 80100ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80100f2:	ee26 0b00 	vmul.f64	d0, d6, d0
 80100f6:	b007      	add	sp, #28
 80100f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fc:	f000 b86f 	b.w	80101de <__math_check_uflow>
 8010100:	ec4b ab10 	vmov	d0, sl, fp
 8010104:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010108:	e73c      	b.n	800ff84 <exp+0x2c>
 801010a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010120 <exp+0x1c8>
 801010e:	e739      	b.n	800ff84 <exp+0x2c>
 8010110:	00000000 	.word	0x00000000
 8010114:	7f000000 	.word	0x7f000000
 8010118:	00000000 	.word	0x00000000
 801011c:	00100000 	.word	0x00100000
	...
 8010128:	fff00000 	.word	0xfff00000
 801012c:	0801a610 	.word	0x0801a610
 8010130:	c0f00000 	.word	0xc0f00000
 8010134:	3fe00000 	.word	0x3fe00000

08010138 <with_errno>:
 8010138:	b513      	push	{r0, r1, r4, lr}
 801013a:	4604      	mov	r4, r0
 801013c:	ed8d 0b00 	vstr	d0, [sp]
 8010140:	f7fd f8c8 	bl	800d2d4 <__errno>
 8010144:	ed9d 0b00 	vldr	d0, [sp]
 8010148:	6004      	str	r4, [r0, #0]
 801014a:	b002      	add	sp, #8
 801014c:	bd10      	pop	{r4, pc}

0801014e <xflow>:
 801014e:	b082      	sub	sp, #8
 8010150:	b158      	cbz	r0, 801016a <xflow+0x1c>
 8010152:	eeb1 7b40 	vneg.f64	d7, d0
 8010156:	ed8d 7b00 	vstr	d7, [sp]
 801015a:	ed9d 7b00 	vldr	d7, [sp]
 801015e:	2022      	movs	r0, #34	; 0x22
 8010160:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010164:	b002      	add	sp, #8
 8010166:	f7ff bfe7 	b.w	8010138 <with_errno>
 801016a:	eeb0 7b40 	vmov.f64	d7, d0
 801016e:	e7f2      	b.n	8010156 <xflow+0x8>

08010170 <__math_uflow>:
 8010170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010178 <__math_uflow+0x8>
 8010174:	f7ff bfeb 	b.w	801014e <xflow>
 8010178:	00000000 	.word	0x00000000
 801017c:	10000000 	.word	0x10000000

08010180 <__math_oflow>:
 8010180:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010188 <__math_oflow+0x8>
 8010184:	f7ff bfe3 	b.w	801014e <xflow>
 8010188:	00000000 	.word	0x00000000
 801018c:	70000000 	.word	0x70000000

08010190 <__math_divzero>:
 8010190:	b082      	sub	sp, #8
 8010192:	2800      	cmp	r0, #0
 8010194:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010198:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801019c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80101a0:	ed8d 7b00 	vstr	d7, [sp]
 80101a4:	ed9d 0b00 	vldr	d0, [sp]
 80101a8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80101b8 <__math_divzero+0x28>
 80101ac:	2022      	movs	r0, #34	; 0x22
 80101ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80101b2:	b002      	add	sp, #8
 80101b4:	f7ff bfc0 	b.w	8010138 <with_errno>
	...

080101c0 <__math_invalid>:
 80101c0:	eeb0 7b40 	vmov.f64	d7, d0
 80101c4:	eeb4 7b47 	vcmp.f64	d7, d7
 80101c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 80101d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80101d4:	d602      	bvs.n	80101dc <__math_invalid+0x1c>
 80101d6:	2021      	movs	r0, #33	; 0x21
 80101d8:	f7ff bfae 	b.w	8010138 <with_errno>
 80101dc:	4770      	bx	lr

080101de <__math_check_uflow>:
 80101de:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80101e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e6:	d102      	bne.n	80101ee <__math_check_uflow+0x10>
 80101e8:	2022      	movs	r0, #34	; 0x22
 80101ea:	f7ff bfa5 	b.w	8010138 <with_errno>
 80101ee:	4770      	bx	lr

080101f0 <__math_check_oflow>:
 80101f0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010210 <__math_check_oflow+0x20>
 80101f4:	eeb0 7bc0 	vabs.f64	d7, d0
 80101f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80101fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010200:	dd02      	ble.n	8010208 <__math_check_oflow+0x18>
 8010202:	2022      	movs	r0, #34	; 0x22
 8010204:	f7ff bf98 	b.w	8010138 <with_errno>
 8010208:	4770      	bx	lr
 801020a:	bf00      	nop
 801020c:	f3af 8000 	nop.w
 8010210:	ffffffff 	.word	0xffffffff
 8010214:	7fefffff 	.word	0x7fefffff

08010218 <cos>:
 8010218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801021a:	eeb0 7b40 	vmov.f64	d7, d0
 801021e:	ee17 3a90 	vmov	r3, s15
 8010222:	4a1f      	ldr	r2, [pc, #124]	; (80102a0 <cos+0x88>)
 8010224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010228:	4293      	cmp	r3, r2
 801022a:	dc04      	bgt.n	8010236 <cos+0x1e>
 801022c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010298 <cos+0x80>
 8010230:	f000 fa72 	bl	8010718 <__kernel_cos>
 8010234:	e004      	b.n	8010240 <cos+0x28>
 8010236:	4a1b      	ldr	r2, [pc, #108]	; (80102a4 <cos+0x8c>)
 8010238:	4293      	cmp	r3, r2
 801023a:	dd04      	ble.n	8010246 <cos+0x2e>
 801023c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010240:	b005      	add	sp, #20
 8010242:	f85d fb04 	ldr.w	pc, [sp], #4
 8010246:	4668      	mov	r0, sp
 8010248:	f000 f926 	bl	8010498 <__ieee754_rem_pio2>
 801024c:	f000 0003 	and.w	r0, r0, #3
 8010250:	2801      	cmp	r0, #1
 8010252:	d007      	beq.n	8010264 <cos+0x4c>
 8010254:	2802      	cmp	r0, #2
 8010256:	d00e      	beq.n	8010276 <cos+0x5e>
 8010258:	b9a0      	cbnz	r0, 8010284 <cos+0x6c>
 801025a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801025e:	ed9d 0b00 	vldr	d0, [sp]
 8010262:	e7e5      	b.n	8010230 <cos+0x18>
 8010264:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010268:	ed9d 0b00 	vldr	d0, [sp]
 801026c:	f000 fd40 	bl	8010cf0 <__kernel_sin>
 8010270:	eeb1 0b40 	vneg.f64	d0, d0
 8010274:	e7e4      	b.n	8010240 <cos+0x28>
 8010276:	ed9d 1b02 	vldr	d1, [sp, #8]
 801027a:	ed9d 0b00 	vldr	d0, [sp]
 801027e:	f000 fa4b 	bl	8010718 <__kernel_cos>
 8010282:	e7f5      	b.n	8010270 <cos+0x58>
 8010284:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010288:	ed9d 0b00 	vldr	d0, [sp]
 801028c:	2001      	movs	r0, #1
 801028e:	f000 fd2f 	bl	8010cf0 <__kernel_sin>
 8010292:	e7d5      	b.n	8010240 <cos+0x28>
 8010294:	f3af 8000 	nop.w
	...
 80102a0:	3fe921fb 	.word	0x3fe921fb
 80102a4:	7fefffff 	.word	0x7fefffff

080102a8 <sin>:
 80102a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102aa:	eeb0 7b40 	vmov.f64	d7, d0
 80102ae:	ee17 3a90 	vmov	r3, s15
 80102b2:	4a1f      	ldr	r2, [pc, #124]	; (8010330 <sin+0x88>)
 80102b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102b8:	4293      	cmp	r3, r2
 80102ba:	dc05      	bgt.n	80102c8 <sin+0x20>
 80102bc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010328 <sin+0x80>
 80102c0:	2000      	movs	r0, #0
 80102c2:	f000 fd15 	bl	8010cf0 <__kernel_sin>
 80102c6:	e004      	b.n	80102d2 <sin+0x2a>
 80102c8:	4a1a      	ldr	r2, [pc, #104]	; (8010334 <sin+0x8c>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	dd04      	ble.n	80102d8 <sin+0x30>
 80102ce:	ee30 0b40 	vsub.f64	d0, d0, d0
 80102d2:	b005      	add	sp, #20
 80102d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80102d8:	4668      	mov	r0, sp
 80102da:	f000 f8dd 	bl	8010498 <__ieee754_rem_pio2>
 80102de:	f000 0003 	and.w	r0, r0, #3
 80102e2:	2801      	cmp	r0, #1
 80102e4:	d008      	beq.n	80102f8 <sin+0x50>
 80102e6:	2802      	cmp	r0, #2
 80102e8:	d00d      	beq.n	8010306 <sin+0x5e>
 80102ea:	b9b0      	cbnz	r0, 801031a <sin+0x72>
 80102ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102f0:	ed9d 0b00 	vldr	d0, [sp]
 80102f4:	2001      	movs	r0, #1
 80102f6:	e7e4      	b.n	80102c2 <sin+0x1a>
 80102f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102fc:	ed9d 0b00 	vldr	d0, [sp]
 8010300:	f000 fa0a 	bl	8010718 <__kernel_cos>
 8010304:	e7e5      	b.n	80102d2 <sin+0x2a>
 8010306:	ed9d 1b02 	vldr	d1, [sp, #8]
 801030a:	ed9d 0b00 	vldr	d0, [sp]
 801030e:	2001      	movs	r0, #1
 8010310:	f000 fcee 	bl	8010cf0 <__kernel_sin>
 8010314:	eeb1 0b40 	vneg.f64	d0, d0
 8010318:	e7db      	b.n	80102d2 <sin+0x2a>
 801031a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801031e:	ed9d 0b00 	vldr	d0, [sp]
 8010322:	f000 f9f9 	bl	8010718 <__kernel_cos>
 8010326:	e7f5      	b.n	8010314 <sin+0x6c>
	...
 8010330:	3fe921fb 	.word	0x3fe921fb
 8010334:	7fefffff 	.word	0x7fefffff

08010338 <log10>:
 8010338:	b508      	push	{r3, lr}
 801033a:	ed2d 8b02 	vpush	{d8}
 801033e:	eeb0 8b40 	vmov.f64	d8, d0
 8010342:	f000 f831 	bl	80103a8 <__ieee754_log10>
 8010346:	4b16      	ldr	r3, [pc, #88]	; (80103a0 <log10+0x68>)
 8010348:	f993 3000 	ldrsb.w	r3, [r3]
 801034c:	3301      	adds	r3, #1
 801034e:	d014      	beq.n	801037a <log10+0x42>
 8010350:	eeb4 8b48 	vcmp.f64	d8, d8
 8010354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010358:	d60f      	bvs.n	801037a <log10+0x42>
 801035a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801035e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010362:	d80a      	bhi.n	801037a <log10+0x42>
 8010364:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036c:	d108      	bne.n	8010380 <log10+0x48>
 801036e:	f7fc ffb1 	bl	800d2d4 <__errno>
 8010372:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8010398 <log10+0x60>
 8010376:	2322      	movs	r3, #34	; 0x22
 8010378:	6003      	str	r3, [r0, #0]
 801037a:	ecbd 8b02 	vpop	{d8}
 801037e:	bd08      	pop	{r3, pc}
 8010380:	f7fc ffa8 	bl	800d2d4 <__errno>
 8010384:	ecbd 8b02 	vpop	{d8}
 8010388:	2321      	movs	r3, #33	; 0x21
 801038a:	6003      	str	r3, [r0, #0]
 801038c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010390:	4804      	ldr	r0, [pc, #16]	; (80103a4 <log10+0x6c>)
 8010392:	f000 be9d 	b.w	80110d0 <nan>
 8010396:	bf00      	nop
 8010398:	00000000 	.word	0x00000000
 801039c:	fff00000 	.word	0xfff00000
 80103a0:	24000550 	.word	0x24000550
 80103a4:	0801a4a0 	.word	0x0801a4a0

080103a8 <__ieee754_log10>:
 80103a8:	b510      	push	{r4, lr}
 80103aa:	ed2d 8b02 	vpush	{d8}
 80103ae:	b082      	sub	sp, #8
 80103b0:	ed8d 0b00 	vstr	d0, [sp]
 80103b4:	9b01      	ldr	r3, [sp, #4]
 80103b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80103ba:	da28      	bge.n	801040e <__ieee754_log10+0x66>
 80103bc:	9900      	ldr	r1, [sp, #0]
 80103be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80103c2:	430a      	orrs	r2, r1
 80103c4:	d109      	bne.n	80103da <__ieee754_log10+0x32>
 80103c6:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8010460 <__ieee754_log10+0xb8>
 80103ca:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8010468 <__ieee754_log10+0xc0>
 80103ce:	ee86 0b07 	vdiv.f64	d0, d6, d7
 80103d2:	b002      	add	sp, #8
 80103d4:	ecbd 8b02 	vpop	{d8}
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	2b00      	cmp	r3, #0
 80103dc:	da04      	bge.n	80103e8 <__ieee754_log10+0x40>
 80103de:	ed9d 7b00 	vldr	d7, [sp]
 80103e2:	ee37 6b47 	vsub.f64	d6, d7, d7
 80103e6:	e7f0      	b.n	80103ca <__ieee754_log10+0x22>
 80103e8:	ed9d 6b00 	vldr	d6, [sp]
 80103ec:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010470 <__ieee754_log10+0xc8>
 80103f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80103f4:	ed8d 7b00 	vstr	d7, [sp]
 80103f8:	9b01      	ldr	r3, [sp, #4]
 80103fa:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80103fe:	4924      	ldr	r1, [pc, #144]	; (8010490 <__ieee754_log10+0xe8>)
 8010400:	428b      	cmp	r3, r1
 8010402:	dd06      	ble.n	8010412 <__ieee754_log10+0x6a>
 8010404:	ed9d 7b00 	vldr	d7, [sp]
 8010408:	ee37 0b07 	vadd.f64	d0, d7, d7
 801040c:	e7e1      	b.n	80103d2 <__ieee754_log10+0x2a>
 801040e:	2200      	movs	r2, #0
 8010410:	e7f5      	b.n	80103fe <__ieee754_log10+0x56>
 8010412:	1518      	asrs	r0, r3, #20
 8010414:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8010418:	4410      	add	r0, r2
 801041a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 801041e:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8010422:	ee08 3a10 	vmov	s16, r3
 8010426:	f240 34ff 	movw	r4, #1023	; 0x3ff
 801042a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801042e:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8010432:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8010436:	ec43 2b10 	vmov	d0, r2, r3
 801043a:	f000 fcb1 	bl	8010da0 <log>
 801043e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010478 <__ieee754_log10+0xd0>
 8010442:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010446:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010480 <__ieee754_log10+0xd8>
 801044a:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 801044e:	eea8 0b07 	vfma.f64	d0, d8, d7
 8010452:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010488 <__ieee754_log10+0xe0>
 8010456:	eea8 0b07 	vfma.f64	d0, d8, d7
 801045a:	e7ba      	b.n	80103d2 <__ieee754_log10+0x2a>
 801045c:	f3af 8000 	nop.w
 8010460:	00000000 	.word	0x00000000
 8010464:	c3500000 	.word	0xc3500000
	...
 8010474:	43500000 	.word	0x43500000
 8010478:	1526e50e 	.word	0x1526e50e
 801047c:	3fdbcb7b 	.word	0x3fdbcb7b
 8010480:	11f12b36 	.word	0x11f12b36
 8010484:	3d59fef3 	.word	0x3d59fef3
 8010488:	509f6000 	.word	0x509f6000
 801048c:	3fd34413 	.word	0x3fd34413
 8010490:	7fefffff 	.word	0x7fefffff
 8010494:	00000000 	.word	0x00000000

08010498 <__ieee754_rem_pio2>:
 8010498:	b570      	push	{r4, r5, r6, lr}
 801049a:	eeb0 7b40 	vmov.f64	d7, d0
 801049e:	ee17 5a90 	vmov	r5, s15
 80104a2:	4b97      	ldr	r3, [pc, #604]	; (8010700 <__ieee754_rem_pio2+0x268>)
 80104a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80104a8:	429e      	cmp	r6, r3
 80104aa:	b088      	sub	sp, #32
 80104ac:	4604      	mov	r4, r0
 80104ae:	dc07      	bgt.n	80104c0 <__ieee754_rem_pio2+0x28>
 80104b0:	2200      	movs	r2, #0
 80104b2:	2300      	movs	r3, #0
 80104b4:	ed84 0b00 	vstr	d0, [r4]
 80104b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80104bc:	2000      	movs	r0, #0
 80104be:	e01b      	b.n	80104f8 <__ieee754_rem_pio2+0x60>
 80104c0:	4b90      	ldr	r3, [pc, #576]	; (8010704 <__ieee754_rem_pio2+0x26c>)
 80104c2:	429e      	cmp	r6, r3
 80104c4:	dc3b      	bgt.n	801053e <__ieee754_rem_pio2+0xa6>
 80104c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80104ca:	2d00      	cmp	r5, #0
 80104cc:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80106c0 <__ieee754_rem_pio2+0x228>
 80104d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80104d4:	dd19      	ble.n	801050a <__ieee754_rem_pio2+0x72>
 80104d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80104da:	429e      	cmp	r6, r3
 80104dc:	d00e      	beq.n	80104fc <__ieee754_rem_pio2+0x64>
 80104de:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80106c8 <__ieee754_rem_pio2+0x230>
 80104e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80104e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80104ea:	ed84 5b00 	vstr	d5, [r4]
 80104ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80104f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80104f6:	2001      	movs	r0, #1
 80104f8:	b008      	add	sp, #32
 80104fa:	bd70      	pop	{r4, r5, r6, pc}
 80104fc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80106d0 <__ieee754_rem_pio2+0x238>
 8010500:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010504:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80106d8 <__ieee754_rem_pio2+0x240>
 8010508:	e7eb      	b.n	80104e2 <__ieee754_rem_pio2+0x4a>
 801050a:	429e      	cmp	r6, r3
 801050c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010510:	d00e      	beq.n	8010530 <__ieee754_rem_pio2+0x98>
 8010512:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80106c8 <__ieee754_rem_pio2+0x230>
 8010516:	ee37 5b06 	vadd.f64	d5, d7, d6
 801051a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801051e:	ed84 5b00 	vstr	d5, [r4]
 8010522:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010526:	f04f 30ff 	mov.w	r0, #4294967295
 801052a:	ed84 7b02 	vstr	d7, [r4, #8]
 801052e:	e7e3      	b.n	80104f8 <__ieee754_rem_pio2+0x60>
 8010530:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80106d0 <__ieee754_rem_pio2+0x238>
 8010534:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010538:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80106d8 <__ieee754_rem_pio2+0x240>
 801053c:	e7eb      	b.n	8010516 <__ieee754_rem_pio2+0x7e>
 801053e:	4b72      	ldr	r3, [pc, #456]	; (8010708 <__ieee754_rem_pio2+0x270>)
 8010540:	429e      	cmp	r6, r3
 8010542:	dc6e      	bgt.n	8010622 <__ieee754_rem_pio2+0x18a>
 8010544:	f000 fd46 	bl	8010fd4 <fabs>
 8010548:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801054c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80106e0 <__ieee754_rem_pio2+0x248>
 8010550:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010554:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010558:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801055c:	ee17 0a90 	vmov	r0, s15
 8010560:	eeb1 4b45 	vneg.f64	d4, d5
 8010564:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80106c0 <__ieee754_rem_pio2+0x228>
 8010568:	eea5 0b47 	vfms.f64	d0, d5, d7
 801056c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80106c8 <__ieee754_rem_pio2+0x230>
 8010570:	281f      	cmp	r0, #31
 8010572:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010576:	ee30 6b47 	vsub.f64	d6, d0, d7
 801057a:	dc08      	bgt.n	801058e <__ieee754_rem_pio2+0xf6>
 801057c:	4b63      	ldr	r3, [pc, #396]	; (801070c <__ieee754_rem_pio2+0x274>)
 801057e:	1e42      	subs	r2, r0, #1
 8010580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010584:	42b3      	cmp	r3, r6
 8010586:	d002      	beq.n	801058e <__ieee754_rem_pio2+0xf6>
 8010588:	ed84 6b00 	vstr	d6, [r4]
 801058c:	e024      	b.n	80105d8 <__ieee754_rem_pio2+0x140>
 801058e:	ee16 3a90 	vmov	r3, s13
 8010592:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010596:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801059a:	2b10      	cmp	r3, #16
 801059c:	ea4f 5226 	mov.w	r2, r6, asr #20
 80105a0:	ddf2      	ble.n	8010588 <__ieee754_rem_pio2+0xf0>
 80105a2:	eeb0 6b40 	vmov.f64	d6, d0
 80105a6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80106d0 <__ieee754_rem_pio2+0x238>
 80105aa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80105ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 80105b2:	eea4 7b03 	vfma.f64	d7, d4, d3
 80105b6:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80106d8 <__ieee754_rem_pio2+0x240>
 80105ba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80105be:	ee36 3b47 	vsub.f64	d3, d6, d7
 80105c2:	ee13 3a90 	vmov	r3, s7
 80105c6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	2b31      	cmp	r3, #49	; 0x31
 80105ce:	dc17      	bgt.n	8010600 <__ieee754_rem_pio2+0x168>
 80105d0:	eeb0 0b46 	vmov.f64	d0, d6
 80105d4:	ed84 3b00 	vstr	d3, [r4]
 80105d8:	ed94 6b00 	vldr	d6, [r4]
 80105dc:	2d00      	cmp	r5, #0
 80105de:	ee30 0b46 	vsub.f64	d0, d0, d6
 80105e2:	ee30 7b47 	vsub.f64	d7, d0, d7
 80105e6:	ed84 7b02 	vstr	d7, [r4, #8]
 80105ea:	da85      	bge.n	80104f8 <__ieee754_rem_pio2+0x60>
 80105ec:	eeb1 6b46 	vneg.f64	d6, d6
 80105f0:	ed84 6b00 	vstr	d6, [r4]
 80105f4:	eeb1 7b47 	vneg.f64	d7, d7
 80105f8:	4240      	negs	r0, r0
 80105fa:	ed84 7b02 	vstr	d7, [r4, #8]
 80105fe:	e77b      	b.n	80104f8 <__ieee754_rem_pio2+0x60>
 8010600:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80106e8 <__ieee754_rem_pio2+0x250>
 8010604:	eeb0 0b46 	vmov.f64	d0, d6
 8010608:	eea4 0b03 	vfma.f64	d0, d4, d3
 801060c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010610:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80106f0 <__ieee754_rem_pio2+0x258>
 8010614:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010618:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801061c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010620:	e7b2      	b.n	8010588 <__ieee754_rem_pio2+0xf0>
 8010622:	4b3b      	ldr	r3, [pc, #236]	; (8010710 <__ieee754_rem_pio2+0x278>)
 8010624:	429e      	cmp	r6, r3
 8010626:	dd06      	ble.n	8010636 <__ieee754_rem_pio2+0x19e>
 8010628:	ee30 7b40 	vsub.f64	d7, d0, d0
 801062c:	ed80 7b02 	vstr	d7, [r0, #8]
 8010630:	ed80 7b00 	vstr	d7, [r0]
 8010634:	e742      	b.n	80104bc <__ieee754_rem_pio2+0x24>
 8010636:	1532      	asrs	r2, r6, #20
 8010638:	ee10 0a10 	vmov	r0, s0
 801063c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010640:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010644:	ec41 0b17 	vmov	d7, r0, r1
 8010648:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801064c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80106f8 <__ieee754_rem_pio2+0x260>
 8010650:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010654:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010658:	ed8d 6b02 	vstr	d6, [sp, #8]
 801065c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010660:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010664:	a902      	add	r1, sp, #8
 8010666:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801066a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801066e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010672:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010676:	ed8d 7b06 	vstr	d7, [sp, #24]
 801067a:	2603      	movs	r6, #3
 801067c:	4608      	mov	r0, r1
 801067e:	ed91 7b04 	vldr	d7, [r1, #16]
 8010682:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801068a:	4633      	mov	r3, r6
 801068c:	f1a1 0108 	sub.w	r1, r1, #8
 8010690:	f106 36ff 	add.w	r6, r6, #4294967295
 8010694:	d0f3      	beq.n	801067e <__ieee754_rem_pio2+0x1e6>
 8010696:	491f      	ldr	r1, [pc, #124]	; (8010714 <__ieee754_rem_pio2+0x27c>)
 8010698:	9101      	str	r1, [sp, #4]
 801069a:	2102      	movs	r1, #2
 801069c:	9100      	str	r1, [sp, #0]
 801069e:	4621      	mov	r1, r4
 80106a0:	f000 f8a6 	bl	80107f0 <__kernel_rem_pio2>
 80106a4:	2d00      	cmp	r5, #0
 80106a6:	f6bf af27 	bge.w	80104f8 <__ieee754_rem_pio2+0x60>
 80106aa:	ed94 7b00 	vldr	d7, [r4]
 80106ae:	eeb1 7b47 	vneg.f64	d7, d7
 80106b2:	ed84 7b00 	vstr	d7, [r4]
 80106b6:	ed94 7b02 	vldr	d7, [r4, #8]
 80106ba:	e79b      	b.n	80105f4 <__ieee754_rem_pio2+0x15c>
 80106bc:	f3af 8000 	nop.w
 80106c0:	54400000 	.word	0x54400000
 80106c4:	3ff921fb 	.word	0x3ff921fb
 80106c8:	1a626331 	.word	0x1a626331
 80106cc:	3dd0b461 	.word	0x3dd0b461
 80106d0:	1a600000 	.word	0x1a600000
 80106d4:	3dd0b461 	.word	0x3dd0b461
 80106d8:	2e037073 	.word	0x2e037073
 80106dc:	3ba3198a 	.word	0x3ba3198a
 80106e0:	6dc9c883 	.word	0x6dc9c883
 80106e4:	3fe45f30 	.word	0x3fe45f30
 80106e8:	2e000000 	.word	0x2e000000
 80106ec:	3ba3198a 	.word	0x3ba3198a
 80106f0:	252049c1 	.word	0x252049c1
 80106f4:	397b839a 	.word	0x397b839a
 80106f8:	00000000 	.word	0x00000000
 80106fc:	41700000 	.word	0x41700000
 8010700:	3fe921fb 	.word	0x3fe921fb
 8010704:	4002d97b 	.word	0x4002d97b
 8010708:	413921fb 	.word	0x413921fb
 801070c:	0801ae80 	.word	0x0801ae80
 8010710:	7fefffff 	.word	0x7fefffff
 8010714:	0801af00 	.word	0x0801af00

08010718 <__kernel_cos>:
 8010718:	ee10 1a90 	vmov	r1, s1
 801071c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010724:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010728:	da05      	bge.n	8010736 <__kernel_cos+0x1e>
 801072a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801072e:	ee17 3a90 	vmov	r3, s15
 8010732:	2b00      	cmp	r3, #0
 8010734:	d03d      	beq.n	80107b2 <__kernel_cos+0x9a>
 8010736:	ee20 3b00 	vmul.f64	d3, d0, d0
 801073a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80107b8 <__kernel_cos+0xa0>
 801073e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80107c0 <__kernel_cos+0xa8>
 8010742:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010746:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80107c8 <__kernel_cos+0xb0>
 801074a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801074e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80107d0 <__kernel_cos+0xb8>
 8010752:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010756:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80107d8 <__kernel_cos+0xc0>
 801075a:	4b23      	ldr	r3, [pc, #140]	; (80107e8 <__kernel_cos+0xd0>)
 801075c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010760:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80107e0 <__kernel_cos+0xc8>
 8010764:	4299      	cmp	r1, r3
 8010766:	eea7 6b03 	vfma.f64	d6, d7, d3
 801076a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801076e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010772:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010776:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801077a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801077e:	dc04      	bgt.n	801078a <__kernel_cos+0x72>
 8010780:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010784:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010788:	4770      	bx	lr
 801078a:	4b18      	ldr	r3, [pc, #96]	; (80107ec <__kernel_cos+0xd4>)
 801078c:	4299      	cmp	r1, r3
 801078e:	dc0d      	bgt.n	80107ac <__kernel_cos+0x94>
 8010790:	2200      	movs	r2, #0
 8010792:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010796:	ec43 2b15 	vmov	d5, r2, r3
 801079a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801079e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80107a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80107a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80107aa:	4770      	bx	lr
 80107ac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80107b0:	e7f3      	b.n	801079a <__kernel_cos+0x82>
 80107b2:	eeb0 0b44 	vmov.f64	d0, d4
 80107b6:	4770      	bx	lr
 80107b8:	be8838d4 	.word	0xbe8838d4
 80107bc:	bda8fae9 	.word	0xbda8fae9
 80107c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80107c4:	3e21ee9e 	.word	0x3e21ee9e
 80107c8:	809c52ad 	.word	0x809c52ad
 80107cc:	be927e4f 	.word	0xbe927e4f
 80107d0:	19cb1590 	.word	0x19cb1590
 80107d4:	3efa01a0 	.word	0x3efa01a0
 80107d8:	16c15177 	.word	0x16c15177
 80107dc:	bf56c16c 	.word	0xbf56c16c
 80107e0:	5555554c 	.word	0x5555554c
 80107e4:	3fa55555 	.word	0x3fa55555
 80107e8:	3fd33332 	.word	0x3fd33332
 80107ec:	3fe90000 	.word	0x3fe90000

080107f0 <__kernel_rem_pio2>:
 80107f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	ed2d 8b06 	vpush	{d8-d10}
 80107f8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80107fc:	469b      	mov	fp, r3
 80107fe:	460f      	mov	r7, r1
 8010800:	4bcf      	ldr	r3, [pc, #828]	; (8010b40 <__kernel_rem_pio2+0x350>)
 8010802:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8010804:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8010808:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801080c:	9000      	str	r0, [sp, #0]
 801080e:	f112 0f14 	cmn.w	r2, #20
 8010812:	bfa8      	it	ge
 8010814:	2318      	movge	r3, #24
 8010816:	f10b 31ff 	add.w	r1, fp, #4294967295
 801081a:	bfb8      	it	lt
 801081c:	2300      	movlt	r3, #0
 801081e:	f06f 0417 	mvn.w	r4, #23
 8010822:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010b28 <__kernel_rem_pio2+0x338>
 8010826:	bfa4      	itt	ge
 8010828:	f1a2 0a03 	subge.w	sl, r2, #3
 801082c:	fb9a f3f3 	sdivge	r3, sl, r3
 8010830:	fb03 4404 	mla	r4, r3, r4, r4
 8010834:	1a5d      	subs	r5, r3, r1
 8010836:	4414      	add	r4, r2
 8010838:	eb09 0601 	add.w	r6, r9, r1
 801083c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8010840:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8010844:	2200      	movs	r2, #0
 8010846:	42b2      	cmp	r2, r6
 8010848:	dd12      	ble.n	8010870 <__kernel_rem_pio2+0x80>
 801084a:	aa18      	add	r2, sp, #96	; 0x60
 801084c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010850:	460e      	mov	r6, r1
 8010852:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8010856:	f1cb 0a01 	rsb	sl, fp, #1
 801085a:	eb0a 0006 	add.w	r0, sl, r6
 801085e:	4581      	cmp	r9, r0
 8010860:	db25      	blt.n	80108ae <__kernel_rem_pio2+0xbe>
 8010862:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010b28 <__kernel_rem_pio2+0x338>
 8010866:	f8dd e000 	ldr.w	lr, [sp]
 801086a:	4615      	mov	r5, r2
 801086c:	2000      	movs	r0, #0
 801086e:	e015      	b.n	801089c <__kernel_rem_pio2+0xac>
 8010870:	42d5      	cmn	r5, r2
 8010872:	d409      	bmi.n	8010888 <__kernel_rem_pio2+0x98>
 8010874:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010878:	ee07 0a90 	vmov	s15, r0
 801087c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010880:	eca8 7b02 	vstmia	r8!, {d7}
 8010884:	3201      	adds	r2, #1
 8010886:	e7de      	b.n	8010846 <__kernel_rem_pio2+0x56>
 8010888:	eeb0 7b46 	vmov.f64	d7, d6
 801088c:	e7f8      	b.n	8010880 <__kernel_rem_pio2+0x90>
 801088e:	ecbe 5b02 	vldmia	lr!, {d5}
 8010892:	ed95 6b00 	vldr	d6, [r5]
 8010896:	3001      	adds	r0, #1
 8010898:	eea5 7b06 	vfma.f64	d7, d5, d6
 801089c:	4288      	cmp	r0, r1
 801089e:	f1a5 0508 	sub.w	r5, r5, #8
 80108a2:	ddf4      	ble.n	801088e <__kernel_rem_pio2+0x9e>
 80108a4:	eca8 7b02 	vstmia	r8!, {d7}
 80108a8:	3208      	adds	r2, #8
 80108aa:	3601      	adds	r6, #1
 80108ac:	e7d5      	b.n	801085a <__kernel_rem_pio2+0x6a>
 80108ae:	aa04      	add	r2, sp, #16
 80108b0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010b30 <__kernel_rem_pio2+0x340>
 80108b4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010b38 <__kernel_rem_pio2+0x348>
 80108b8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80108bc:	9201      	str	r2, [sp, #4]
 80108be:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80108c2:	464e      	mov	r6, r9
 80108c4:	ab90      	add	r3, sp, #576	; 0x240
 80108c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80108ca:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80108ce:	ab04      	add	r3, sp, #16
 80108d0:	4618      	mov	r0, r3
 80108d2:	4632      	mov	r2, r6
 80108d4:	2a00      	cmp	r2, #0
 80108d6:	dc4e      	bgt.n	8010976 <__kernel_rem_pio2+0x186>
 80108d8:	4620      	mov	r0, r4
 80108da:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80108de:	f000 fbff 	bl	80110e0 <scalbn>
 80108e2:	eeb0 8b40 	vmov.f64	d8, d0
 80108e6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80108ea:	ee28 0b00 	vmul.f64	d0, d8, d0
 80108ee:	f000 fb7b 	bl	8010fe8 <floor>
 80108f2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80108f6:	eea0 8b47 	vfms.f64	d8, d0, d7
 80108fa:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80108fe:	2c00      	cmp	r4, #0
 8010900:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010904:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010908:	ee38 8b40 	vsub.f64	d8, d8, d0
 801090c:	ee17 8a90 	vmov	r8, s15
 8010910:	dd46      	ble.n	80109a0 <__kernel_rem_pio2+0x1b0>
 8010912:	1e70      	subs	r0, r6, #1
 8010914:	aa04      	add	r2, sp, #16
 8010916:	f1c4 0c18 	rsb	ip, r4, #24
 801091a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 801091e:	fa45 f20c 	asr.w	r2, r5, ip
 8010922:	4490      	add	r8, r2
 8010924:	fa02 f20c 	lsl.w	r2, r2, ip
 8010928:	1aad      	subs	r5, r5, r2
 801092a:	aa04      	add	r2, sp, #16
 801092c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010930:	f1c4 0217 	rsb	r2, r4, #23
 8010934:	4115      	asrs	r5, r2
 8010936:	2d00      	cmp	r5, #0
 8010938:	dd41      	ble.n	80109be <__kernel_rem_pio2+0x1ce>
 801093a:	f04f 0c00 	mov.w	ip, #0
 801093e:	f108 0801 	add.w	r8, r8, #1
 8010942:	4660      	mov	r0, ip
 8010944:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010948:	4566      	cmp	r6, ip
 801094a:	dc69      	bgt.n	8010a20 <__kernel_rem_pio2+0x230>
 801094c:	2c00      	cmp	r4, #0
 801094e:	dd03      	ble.n	8010958 <__kernel_rem_pio2+0x168>
 8010950:	2c01      	cmp	r4, #1
 8010952:	d076      	beq.n	8010a42 <__kernel_rem_pio2+0x252>
 8010954:	2c02      	cmp	r4, #2
 8010956:	d07f      	beq.n	8010a58 <__kernel_rem_pio2+0x268>
 8010958:	2d02      	cmp	r5, #2
 801095a:	d130      	bne.n	80109be <__kernel_rem_pio2+0x1ce>
 801095c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010960:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010964:	b358      	cbz	r0, 80109be <__kernel_rem_pio2+0x1ce>
 8010966:	4620      	mov	r0, r4
 8010968:	9102      	str	r1, [sp, #8]
 801096a:	f000 fbb9 	bl	80110e0 <scalbn>
 801096e:	9902      	ldr	r1, [sp, #8]
 8010970:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010974:	e023      	b.n	80109be <__kernel_rem_pio2+0x1ce>
 8010976:	ee20 7b09 	vmul.f64	d7, d0, d9
 801097a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801097e:	3a01      	subs	r2, #1
 8010980:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010984:	ad68      	add	r5, sp, #416	; 0x1a0
 8010986:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801098a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801098e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010992:	eca0 0a01 	vstmia	r0!, {s0}
 8010996:	ed95 0b00 	vldr	d0, [r5]
 801099a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801099e:	e799      	b.n	80108d4 <__kernel_rem_pio2+0xe4>
 80109a0:	d105      	bne.n	80109ae <__kernel_rem_pio2+0x1be>
 80109a2:	1e72      	subs	r2, r6, #1
 80109a4:	a804      	add	r0, sp, #16
 80109a6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80109aa:	15ed      	asrs	r5, r5, #23
 80109ac:	e7c3      	b.n	8010936 <__kernel_rem_pio2+0x146>
 80109ae:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80109b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80109b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ba:	da2f      	bge.n	8010a1c <__kernel_rem_pio2+0x22c>
 80109bc:	2500      	movs	r5, #0
 80109be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80109c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c6:	f040 8087 	bne.w	8010ad8 <__kernel_rem_pio2+0x2e8>
 80109ca:	1e73      	subs	r3, r6, #1
 80109cc:	4618      	mov	r0, r3
 80109ce:	f04f 0c00 	mov.w	ip, #0
 80109d2:	4548      	cmp	r0, r9
 80109d4:	da47      	bge.n	8010a66 <__kernel_rem_pio2+0x276>
 80109d6:	f1bc 0f00 	cmp.w	ip, #0
 80109da:	d070      	beq.n	8010abe <__kernel_rem_pio2+0x2ce>
 80109dc:	aa04      	add	r2, sp, #16
 80109de:	3c18      	subs	r4, #24
 80109e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80109e4:	2a00      	cmp	r2, #0
 80109e6:	d075      	beq.n	8010ad4 <__kernel_rem_pio2+0x2e4>
 80109e8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80109ec:	4620      	mov	r0, r4
 80109ee:	9300      	str	r3, [sp, #0]
 80109f0:	f000 fb76 	bl	80110e0 <scalbn>
 80109f4:	9b00      	ldr	r3, [sp, #0]
 80109f6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010b30 <__kernel_rem_pio2+0x340>
 80109fa:	461a      	mov	r2, r3
 80109fc:	2a00      	cmp	r2, #0
 80109fe:	f280 80ac 	bge.w	8010b5a <__kernel_rem_pio2+0x36a>
 8010a02:	4619      	mov	r1, r3
 8010a04:	2000      	movs	r0, #0
 8010a06:	2900      	cmp	r1, #0
 8010a08:	f2c0 80cd 	blt.w	8010ba6 <__kernel_rem_pio2+0x3b6>
 8010a0c:	aa68      	add	r2, sp, #416	; 0x1a0
 8010a0e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010a12:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010b28 <__kernel_rem_pio2+0x338>
 8010a16:	4e4b      	ldr	r6, [pc, #300]	; (8010b44 <__kernel_rem_pio2+0x354>)
 8010a18:	2200      	movs	r2, #0
 8010a1a:	e0b8      	b.n	8010b8e <__kernel_rem_pio2+0x39e>
 8010a1c:	2502      	movs	r5, #2
 8010a1e:	e78c      	b.n	801093a <__kernel_rem_pio2+0x14a>
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	b948      	cbnz	r0, 8010a38 <__kernel_rem_pio2+0x248>
 8010a24:	b11a      	cbz	r2, 8010a2e <__kernel_rem_pio2+0x23e>
 8010a26:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010a2a:	601a      	str	r2, [r3, #0]
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	f10c 0c01 	add.w	ip, ip, #1
 8010a32:	3304      	adds	r3, #4
 8010a34:	4610      	mov	r0, r2
 8010a36:	e787      	b.n	8010948 <__kernel_rem_pio2+0x158>
 8010a38:	ebae 0202 	sub.w	r2, lr, r2
 8010a3c:	601a      	str	r2, [r3, #0]
 8010a3e:	4602      	mov	r2, r0
 8010a40:	e7f5      	b.n	8010a2e <__kernel_rem_pio2+0x23e>
 8010a42:	1e72      	subs	r2, r6, #1
 8010a44:	ab04      	add	r3, sp, #16
 8010a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010a4e:	f10d 0c10 	add.w	ip, sp, #16
 8010a52:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010a56:	e77f      	b.n	8010958 <__kernel_rem_pio2+0x168>
 8010a58:	1e72      	subs	r2, r6, #1
 8010a5a:	ab04      	add	r3, sp, #16
 8010a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010a64:	e7f3      	b.n	8010a4e <__kernel_rem_pio2+0x25e>
 8010a66:	aa04      	add	r2, sp, #16
 8010a68:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010a6c:	3801      	subs	r0, #1
 8010a6e:	ea4c 0c02 	orr.w	ip, ip, r2
 8010a72:	e7ae      	b.n	80109d2 <__kernel_rem_pio2+0x1e2>
 8010a74:	3001      	adds	r0, #1
 8010a76:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010a7a:	2a00      	cmp	r2, #0
 8010a7c:	d0fa      	beq.n	8010a74 <__kernel_rem_pio2+0x284>
 8010a7e:	eb06 020b 	add.w	r2, r6, fp
 8010a82:	ad18      	add	r5, sp, #96	; 0x60
 8010a84:	1c73      	adds	r3, r6, #1
 8010a86:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010a8a:	4406      	add	r6, r0
 8010a8c:	429e      	cmp	r6, r3
 8010a8e:	f6ff af19 	blt.w	80108c4 <__kernel_rem_pio2+0xd4>
 8010a92:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010a96:	9d00      	ldr	r5, [sp, #0]
 8010a98:	ee07 0a90 	vmov	s15, r0
 8010a9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010aa0:	2000      	movs	r0, #0
 8010aa2:	eca2 7b02 	vstmia	r2!, {d7}
 8010aa6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010b28 <__kernel_rem_pio2+0x338>
 8010aaa:	4694      	mov	ip, r2
 8010aac:	4288      	cmp	r0, r1
 8010aae:	dd09      	ble.n	8010ac4 <__kernel_rem_pio2+0x2d4>
 8010ab0:	a868      	add	r0, sp, #416	; 0x1a0
 8010ab2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8010ab6:	ed80 7b00 	vstr	d7, [r0]
 8010aba:	3301      	adds	r3, #1
 8010abc:	e7e6      	b.n	8010a8c <__kernel_rem_pio2+0x29c>
 8010abe:	9b01      	ldr	r3, [sp, #4]
 8010ac0:	2001      	movs	r0, #1
 8010ac2:	e7d8      	b.n	8010a76 <__kernel_rem_pio2+0x286>
 8010ac4:	ecb5 5b02 	vldmia	r5!, {d5}
 8010ac8:	ed3c 6b02 	vldmdb	ip!, {d6}
 8010acc:	3001      	adds	r0, #1
 8010ace:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010ad2:	e7eb      	b.n	8010aac <__kernel_rem_pio2+0x2bc>
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	e781      	b.n	80109dc <__kernel_rem_pio2+0x1ec>
 8010ad8:	4260      	negs	r0, r4
 8010ada:	eeb0 0b48 	vmov.f64	d0, d8
 8010ade:	f000 faff 	bl	80110e0 <scalbn>
 8010ae2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010b38 <__kernel_rem_pio2+0x348>
 8010ae6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aee:	db2b      	blt.n	8010b48 <__kernel_rem_pio2+0x358>
 8010af0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010b30 <__kernel_rem_pio2+0x340>
 8010af4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010af8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010afc:	aa04      	add	r2, sp, #16
 8010afe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010b02:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010b06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010b0a:	a904      	add	r1, sp, #16
 8010b0c:	ee10 3a10 	vmov	r3, s0
 8010b10:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010b14:	ee17 2a10 	vmov	r2, s14
 8010b18:	1c73      	adds	r3, r6, #1
 8010b1a:	3418      	adds	r4, #24
 8010b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010b20:	e762      	b.n	80109e8 <__kernel_rem_pio2+0x1f8>
 8010b22:	bf00      	nop
 8010b24:	f3af 8000 	nop.w
	...
 8010b34:	3e700000 	.word	0x3e700000
 8010b38:	00000000 	.word	0x00000000
 8010b3c:	41700000 	.word	0x41700000
 8010b40:	0801b048 	.word	0x0801b048
 8010b44:	0801b008 	.word	0x0801b008
 8010b48:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010b4c:	aa04      	add	r2, sp, #16
 8010b4e:	ee10 3a10 	vmov	r3, s0
 8010b52:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010b56:	4633      	mov	r3, r6
 8010b58:	e746      	b.n	80109e8 <__kernel_rem_pio2+0x1f8>
 8010b5a:	a804      	add	r0, sp, #16
 8010b5c:	a968      	add	r1, sp, #416	; 0x1a0
 8010b5e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010b62:	9000      	str	r0, [sp, #0]
 8010b64:	ee07 0a90 	vmov	s15, r0
 8010b68:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010b6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010b70:	3a01      	subs	r2, #1
 8010b72:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010b76:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010b7a:	ed81 7b00 	vstr	d7, [r1]
 8010b7e:	e73d      	b.n	80109fc <__kernel_rem_pio2+0x20c>
 8010b80:	ecb6 5b02 	vldmia	r6!, {d5}
 8010b84:	ecb4 6b02 	vldmia	r4!, {d6}
 8010b88:	3201      	adds	r2, #1
 8010b8a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010b8e:	454a      	cmp	r2, r9
 8010b90:	dc01      	bgt.n	8010b96 <__kernel_rem_pio2+0x3a6>
 8010b92:	4290      	cmp	r0, r2
 8010b94:	daf4      	bge.n	8010b80 <__kernel_rem_pio2+0x390>
 8010b96:	aa40      	add	r2, sp, #256	; 0x100
 8010b98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010b9c:	ed82 7b00 	vstr	d7, [r2]
 8010ba0:	3901      	subs	r1, #1
 8010ba2:	3001      	adds	r0, #1
 8010ba4:	e72f      	b.n	8010a06 <__kernel_rem_pio2+0x216>
 8010ba6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010ba8:	2a02      	cmp	r2, #2
 8010baa:	dc0a      	bgt.n	8010bc2 <__kernel_rem_pio2+0x3d2>
 8010bac:	2a00      	cmp	r2, #0
 8010bae:	dc5a      	bgt.n	8010c66 <__kernel_rem_pio2+0x476>
 8010bb0:	d039      	beq.n	8010c26 <__kernel_rem_pio2+0x436>
 8010bb2:	f008 0007 	and.w	r0, r8, #7
 8010bb6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010bba:	ecbd 8b06 	vpop	{d8-d10}
 8010bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010bc4:	2a03      	cmp	r2, #3
 8010bc6:	d1f4      	bne.n	8010bb2 <__kernel_rem_pio2+0x3c2>
 8010bc8:	aa40      	add	r2, sp, #256	; 0x100
 8010bca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010bce:	4611      	mov	r1, r2
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	2800      	cmp	r0, #0
 8010bd4:	f1a1 0108 	sub.w	r1, r1, #8
 8010bd8:	dc52      	bgt.n	8010c80 <__kernel_rem_pio2+0x490>
 8010bda:	4619      	mov	r1, r3
 8010bdc:	2901      	cmp	r1, #1
 8010bde:	f1a2 0208 	sub.w	r2, r2, #8
 8010be2:	dc5d      	bgt.n	8010ca0 <__kernel_rem_pio2+0x4b0>
 8010be4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8010ce8 <__kernel_rem_pio2+0x4f8>
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	dc69      	bgt.n	8010cc0 <__kernel_rem_pio2+0x4d0>
 8010bec:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8010bf0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8010bf4:	2d00      	cmp	r5, #0
 8010bf6:	d16c      	bne.n	8010cd2 <__kernel_rem_pio2+0x4e2>
 8010bf8:	ed87 5b00 	vstr	d5, [r7]
 8010bfc:	ed87 6b02 	vstr	d6, [r7, #8]
 8010c00:	ed87 7b04 	vstr	d7, [r7, #16]
 8010c04:	e7d5      	b.n	8010bb2 <__kernel_rem_pio2+0x3c2>
 8010c06:	aa40      	add	r2, sp, #256	; 0x100
 8010c08:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010c0c:	ed92 6b00 	vldr	d6, [r2]
 8010c10:	3b01      	subs	r3, #1
 8010c12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	daf5      	bge.n	8010c06 <__kernel_rem_pio2+0x416>
 8010c1a:	b10d      	cbz	r5, 8010c20 <__kernel_rem_pio2+0x430>
 8010c1c:	eeb1 7b47 	vneg.f64	d7, d7
 8010c20:	ed87 7b00 	vstr	d7, [r7]
 8010c24:	e7c5      	b.n	8010bb2 <__kernel_rem_pio2+0x3c2>
 8010c26:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010ce8 <__kernel_rem_pio2+0x4f8>
 8010c2a:	e7f4      	b.n	8010c16 <__kernel_rem_pio2+0x426>
 8010c2c:	a940      	add	r1, sp, #256	; 0x100
 8010c2e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010c32:	ed91 7b00 	vldr	d7, [r1]
 8010c36:	3a01      	subs	r2, #1
 8010c38:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010c3c:	2a00      	cmp	r2, #0
 8010c3e:	daf5      	bge.n	8010c2c <__kernel_rem_pio2+0x43c>
 8010c40:	b1ad      	cbz	r5, 8010c6e <__kernel_rem_pio2+0x47e>
 8010c42:	eeb1 7b46 	vneg.f64	d7, d6
 8010c46:	ed87 7b00 	vstr	d7, [r7]
 8010c4a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8010c4e:	a942      	add	r1, sp, #264	; 0x108
 8010c50:	2201      	movs	r2, #1
 8010c52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010c56:	4293      	cmp	r3, r2
 8010c58:	da0c      	bge.n	8010c74 <__kernel_rem_pio2+0x484>
 8010c5a:	b10d      	cbz	r5, 8010c60 <__kernel_rem_pio2+0x470>
 8010c5c:	eeb1 7b47 	vneg.f64	d7, d7
 8010c60:	ed87 7b02 	vstr	d7, [r7, #8]
 8010c64:	e7a5      	b.n	8010bb2 <__kernel_rem_pio2+0x3c2>
 8010c66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010ce8 <__kernel_rem_pio2+0x4f8>
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	e7e6      	b.n	8010c3c <__kernel_rem_pio2+0x44c>
 8010c6e:	eeb0 7b46 	vmov.f64	d7, d6
 8010c72:	e7e8      	b.n	8010c46 <__kernel_rem_pio2+0x456>
 8010c74:	ecb1 6b02 	vldmia	r1!, {d6}
 8010c78:	3201      	adds	r2, #1
 8010c7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010c7e:	e7ea      	b.n	8010c56 <__kernel_rem_pio2+0x466>
 8010c80:	ed91 7b00 	vldr	d7, [r1]
 8010c84:	ed91 5b02 	vldr	d5, [r1, #8]
 8010c88:	3801      	subs	r0, #1
 8010c8a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010c8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010c92:	ed81 6b00 	vstr	d6, [r1]
 8010c96:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010c9a:	ed81 7b02 	vstr	d7, [r1, #8]
 8010c9e:	e798      	b.n	8010bd2 <__kernel_rem_pio2+0x3e2>
 8010ca0:	ed92 7b00 	vldr	d7, [r2]
 8010ca4:	ed92 5b02 	vldr	d5, [r2, #8]
 8010ca8:	3901      	subs	r1, #1
 8010caa:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010cae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010cb2:	ed82 6b00 	vstr	d6, [r2]
 8010cb6:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010cba:	ed82 7b02 	vstr	d7, [r2, #8]
 8010cbe:	e78d      	b.n	8010bdc <__kernel_rem_pio2+0x3ec>
 8010cc0:	aa40      	add	r2, sp, #256	; 0x100
 8010cc2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010cc6:	ed92 6b00 	vldr	d6, [r2]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010cd0:	e78a      	b.n	8010be8 <__kernel_rem_pio2+0x3f8>
 8010cd2:	eeb1 5b45 	vneg.f64	d5, d5
 8010cd6:	eeb1 6b46 	vneg.f64	d6, d6
 8010cda:	ed87 5b00 	vstr	d5, [r7]
 8010cde:	eeb1 7b47 	vneg.f64	d7, d7
 8010ce2:	ed87 6b02 	vstr	d6, [r7, #8]
 8010ce6:	e78b      	b.n	8010c00 <__kernel_rem_pio2+0x410>
	...

08010cf0 <__kernel_sin>:
 8010cf0:	ee10 3a90 	vmov	r3, s1
 8010cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010cf8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010cfc:	da04      	bge.n	8010d08 <__kernel_sin+0x18>
 8010cfe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010d02:	ee17 3a90 	vmov	r3, s15
 8010d06:	b35b      	cbz	r3, 8010d60 <__kernel_sin+0x70>
 8010d08:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010d0c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010d10:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010d68 <__kernel_sin+0x78>
 8010d14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010d70 <__kernel_sin+0x80>
 8010d18:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010d1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010d78 <__kernel_sin+0x88>
 8010d20:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010d24:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010d80 <__kernel_sin+0x90>
 8010d28:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010d2c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010d88 <__kernel_sin+0x98>
 8010d30:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010d34:	b930      	cbnz	r0, 8010d44 <__kernel_sin+0x54>
 8010d36:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010d90 <__kernel_sin+0xa0>
 8010d3a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010d3e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010d42:	4770      	bx	lr
 8010d44:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010d48:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010d4c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010d50:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010d54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010d98 <__kernel_sin+0xa8>
 8010d58:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010d5c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010d60:	4770      	bx	lr
 8010d62:	bf00      	nop
 8010d64:	f3af 8000 	nop.w
 8010d68:	5acfd57c 	.word	0x5acfd57c
 8010d6c:	3de5d93a 	.word	0x3de5d93a
 8010d70:	8a2b9ceb 	.word	0x8a2b9ceb
 8010d74:	be5ae5e6 	.word	0xbe5ae5e6
 8010d78:	57b1fe7d 	.word	0x57b1fe7d
 8010d7c:	3ec71de3 	.word	0x3ec71de3
 8010d80:	19c161d5 	.word	0x19c161d5
 8010d84:	bf2a01a0 	.word	0xbf2a01a0
 8010d88:	1110f8a6 	.word	0x1110f8a6
 8010d8c:	3f811111 	.word	0x3f811111
 8010d90:	55555549 	.word	0x55555549
 8010d94:	bfc55555 	.word	0xbfc55555
 8010d98:	55555549 	.word	0x55555549
 8010d9c:	3fc55555 	.word	0x3fc55555

08010da0 <log>:
 8010da0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8010da4:	ed2d 8b02 	vpush	{d8}
 8010da8:	b082      	sub	sp, #8
 8010daa:	ed8d 0b00 	vstr	d0, [sp]
 8010dae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010db2:	2600      	movs	r6, #0
 8010db4:	1994      	adds	r4, r2, r6
 8010db6:	4e80      	ldr	r6, [pc, #512]	; (8010fb8 <log+0x218>)
 8010db8:	4f80      	ldr	r7, [pc, #512]	; (8010fbc <log+0x21c>)
 8010dba:	eb43 0506 	adc.w	r5, r3, r6
 8010dbe:	42af      	cmp	r7, r5
 8010dc0:	f04f 36ff 	mov.w	r6, #4294967295
 8010dc4:	bf08      	it	eq
 8010dc6:	42a6      	cmpeq	r6, r4
 8010dc8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8010dcc:	d363      	bcc.n	8010e96 <log+0xf6>
 8010dce:	497c      	ldr	r1, [pc, #496]	; (8010fc0 <log+0x220>)
 8010dd0:	2000      	movs	r0, #0
 8010dd2:	428b      	cmp	r3, r1
 8010dd4:	bf08      	it	eq
 8010dd6:	4282      	cmpeq	r2, r0
 8010dd8:	f000 80de 	beq.w	8010f98 <log+0x1f8>
 8010ddc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010de0:	ee30 7b47 	vsub.f64	d7, d0, d7
 8010de4:	4b77      	ldr	r3, [pc, #476]	; (8010fc4 <log+0x224>)
 8010de6:	ee27 1b07 	vmul.f64	d1, d7, d7
 8010dea:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8010dee:	ee27 3b01 	vmul.f64	d3, d7, d1
 8010df2:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8010df6:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010dfa:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8010dfe:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8010e02:	eea6 4b01 	vfma.f64	d4, d6, d1
 8010e06:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8010e0a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010e0e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8010e12:	eea5 6b01 	vfma.f64	d6, d5, d1
 8010e16:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8010e1a:	eeb0 2b46 	vmov.f64	d2, d6
 8010e1e:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8010e22:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010e26:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 8010e2a:	eea5 6b01 	vfma.f64	d6, d5, d1
 8010e2e:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 8010e32:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 8010e36:	eea5 6b03 	vfma.f64	d6, d5, d3
 8010e3a:	eea6 2b03 	vfma.f64	d2, d6, d3
 8010e3e:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8010fa0 <log+0x200>
 8010e42:	eea2 4b03 	vfma.f64	d4, d2, d3
 8010e46:	eeb0 2b47 	vmov.f64	d2, d7
 8010e4a:	eea7 2b06 	vfma.f64	d2, d7, d6
 8010e4e:	eea7 2b46 	vfms.f64	d2, d7, d6
 8010e52:	eeb0 6b47 	vmov.f64	d6, d7
 8010e56:	ee37 8b42 	vsub.f64	d8, d7, d2
 8010e5a:	ee22 0b02 	vmul.f64	d0, d2, d2
 8010e5e:	eea0 6b01 	vfma.f64	d6, d0, d1
 8010e62:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010e66:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010e6a:	eea0 5b01 	vfma.f64	d5, d0, d1
 8010e6e:	ee21 1b08 	vmul.f64	d1, d1, d8
 8010e72:	eea1 5b07 	vfma.f64	d5, d1, d7
 8010e76:	eeb0 7b45 	vmov.f64	d7, d5
 8010e7a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010e7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010e82:	ed8d 7b00 	vstr	d7, [sp]
 8010e86:	ed9d 0b00 	vldr	d0, [sp]
 8010e8a:	b002      	add	sp, #8
 8010e8c:	ecbd 8b02 	vpop	{d8}
 8010e90:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8010e94:	4770      	bx	lr
 8010e96:	f1ac 0510 	sub.w	r5, ip, #16
 8010e9a:	f647 74df 	movw	r4, #32735	; 0x7fdf
 8010e9e:	42a5      	cmp	r5, r4
 8010ea0:	d930      	bls.n	8010f04 <log+0x164>
 8010ea2:	1890      	adds	r0, r2, r2
 8010ea4:	eb43 0103 	adc.w	r1, r3, r3
 8010ea8:	4301      	orrs	r1, r0
 8010eaa:	d107      	bne.n	8010ebc <log+0x11c>
 8010eac:	2001      	movs	r0, #1
 8010eae:	b002      	add	sp, #8
 8010eb0:	ecbd 8b02 	vpop	{d8}
 8010eb4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8010eb8:	f7ff b96a 	b.w	8010190 <__math_divzero>
 8010ebc:	4942      	ldr	r1, [pc, #264]	; (8010fc8 <log+0x228>)
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	428b      	cmp	r3, r1
 8010ec2:	bf08      	it	eq
 8010ec4:	4282      	cmpeq	r2, r0
 8010ec6:	d0de      	beq.n	8010e86 <log+0xe6>
 8010ec8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8010ecc:	d104      	bne.n	8010ed8 <log+0x138>
 8010ece:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8010ed2:	ea31 010c 	bics.w	r1, r1, ip
 8010ed6:	d108      	bne.n	8010eea <log+0x14a>
 8010ed8:	ed9d 0b00 	vldr	d0, [sp]
 8010edc:	b002      	add	sp, #8
 8010ede:	ecbd 8b02 	vpop	{d8}
 8010ee2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8010ee6:	f7ff b96b 	b.w	80101c0 <__math_invalid>
 8010eea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8010fa8 <log+0x208>
 8010eee:	ed9d 6b00 	vldr	d6, [sp]
 8010ef2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010ef6:	ec56 5b17 	vmov	r5, r6, d7
 8010efa:	4834      	ldr	r0, [pc, #208]	; (8010fcc <log+0x22c>)
 8010efc:	2400      	movs	r4, #0
 8010efe:	192a      	adds	r2, r5, r4
 8010f00:	eb46 0300 	adc.w	r3, r6, r0
 8010f04:	2100      	movs	r1, #0
 8010f06:	1851      	adds	r1, r2, r1
 8010f08:	4931      	ldr	r1, [pc, #196]	; (8010fd0 <log+0x230>)
 8010f0a:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8010f0e:	eb43 0101 	adc.w	r1, r3, r1
 8010f12:	0d0c      	lsrs	r4, r1, #20
 8010f14:	2500      	movs	r5, #0
 8010f16:	ebb2 0805 	subs.w	r8, r2, r5
 8010f1a:	ea4f 5404 	mov.w	r4, r4, lsl #20
 8010f1e:	eb63 0904 	sbc.w	r9, r3, r4
 8010f22:	4b28      	ldr	r3, [pc, #160]	; (8010fc4 <log+0x224>)
 8010f24:	f3c1 3046 	ubfx	r0, r1, #13, #7
 8010f28:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 8010f2c:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 8010f30:	ec49 8b16 	vmov	d6, r8, r9
 8010f34:	1509      	asrs	r1, r1, #20
 8010f36:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010f3a:	ee07 1a90 	vmov	s15, r1
 8010f3e:	ee24 1b04 	vmul.f64	d1, d4, d4
 8010f42:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010f46:	ed93 5b00 	vldr	d5, [r3]
 8010f4a:	ee24 0b01 	vmul.f64	d0, d4, d1
 8010f4e:	ed93 3b02 	vldr	d3, [r3, #8]
 8010f52:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 8010f56:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010f5a:	ee34 5b07 	vadd.f64	d5, d4, d7
 8010f5e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010f62:	ee37 7b04 	vadd.f64	d7, d7, d4
 8010f66:	eea3 7b06 	vfma.f64	d7, d3, d6
 8010f6a:	ed93 6b04 	vldr	d6, [r3, #16]
 8010f6e:	ed93 3b08 	vldr	d3, [r3, #32]
 8010f72:	eea6 7b01 	vfma.f64	d7, d6, d1
 8010f76:	ed93 6b06 	vldr	d6, [r3, #24]
 8010f7a:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8010f7e:	eea3 6b04 	vfma.f64	d6, d3, d4
 8010f82:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8010f86:	eea2 3b04 	vfma.f64	d3, d2, d4
 8010f8a:	eea3 6b01 	vfma.f64	d6, d3, d1
 8010f8e:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010f92:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010f96:	e774      	b.n	8010e82 <log+0xe2>
 8010f98:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8010fb0 <log+0x210>
 8010f9c:	e771      	b.n	8010e82 <log+0xe2>
 8010f9e:	bf00      	nop
 8010fa0:	00000000 	.word	0x00000000
 8010fa4:	41a00000 	.word	0x41a00000
 8010fa8:	00000000 	.word	0x00000000
 8010fac:	43300000 	.word	0x43300000
	...
 8010fb8:	c0120000 	.word	0xc0120000
 8010fbc:	000308ff 	.word	0x000308ff
 8010fc0:	3ff00000 	.word	0x3ff00000
 8010fc4:	0801b058 	.word	0x0801b058
 8010fc8:	7ff00000 	.word	0x7ff00000
 8010fcc:	fcc00000 	.word	0xfcc00000
 8010fd0:	c01a0000 	.word	0xc01a0000

08010fd4 <fabs>:
 8010fd4:	ec51 0b10 	vmov	r0, r1, d0
 8010fd8:	ee10 2a10 	vmov	r2, s0
 8010fdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010fe0:	ec43 2b10 	vmov	d0, r2, r3
 8010fe4:	4770      	bx	lr
	...

08010fe8 <floor>:
 8010fe8:	ee10 1a90 	vmov	r1, s1
 8010fec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010ff0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8010ff4:	2b13      	cmp	r3, #19
 8010ff6:	b530      	push	{r4, r5, lr}
 8010ff8:	ee10 0a10 	vmov	r0, s0
 8010ffc:	ee10 5a10 	vmov	r5, s0
 8011000:	dc31      	bgt.n	8011066 <floor+0x7e>
 8011002:	2b00      	cmp	r3, #0
 8011004:	da15      	bge.n	8011032 <floor+0x4a>
 8011006:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80110c0 <floor+0xd8>
 801100a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801100e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011016:	dd07      	ble.n	8011028 <floor+0x40>
 8011018:	2900      	cmp	r1, #0
 801101a:	da4e      	bge.n	80110ba <floor+0xd2>
 801101c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011020:	4318      	orrs	r0, r3
 8011022:	d001      	beq.n	8011028 <floor+0x40>
 8011024:	4928      	ldr	r1, [pc, #160]	; (80110c8 <floor+0xe0>)
 8011026:	2000      	movs	r0, #0
 8011028:	460b      	mov	r3, r1
 801102a:	4602      	mov	r2, r0
 801102c:	ec43 2b10 	vmov	d0, r2, r3
 8011030:	e020      	b.n	8011074 <floor+0x8c>
 8011032:	4a26      	ldr	r2, [pc, #152]	; (80110cc <floor+0xe4>)
 8011034:	411a      	asrs	r2, r3
 8011036:	ea01 0402 	and.w	r4, r1, r2
 801103a:	4304      	orrs	r4, r0
 801103c:	d01a      	beq.n	8011074 <floor+0x8c>
 801103e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80110c0 <floor+0xd8>
 8011042:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011046:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801104e:	ddeb      	ble.n	8011028 <floor+0x40>
 8011050:	2900      	cmp	r1, #0
 8011052:	bfbe      	ittt	lt
 8011054:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011058:	fa40 f303 	asrlt.w	r3, r0, r3
 801105c:	18c9      	addlt	r1, r1, r3
 801105e:	ea21 0102 	bic.w	r1, r1, r2
 8011062:	2000      	movs	r0, #0
 8011064:	e7e0      	b.n	8011028 <floor+0x40>
 8011066:	2b33      	cmp	r3, #51	; 0x33
 8011068:	dd05      	ble.n	8011076 <floor+0x8e>
 801106a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801106e:	d101      	bne.n	8011074 <floor+0x8c>
 8011070:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011074:	bd30      	pop	{r4, r5, pc}
 8011076:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801107a:	f04f 32ff 	mov.w	r2, #4294967295
 801107e:	40e2      	lsrs	r2, r4
 8011080:	4202      	tst	r2, r0
 8011082:	d0f7      	beq.n	8011074 <floor+0x8c>
 8011084:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80110c0 <floor+0xd8>
 8011088:	ee30 0b07 	vadd.f64	d0, d0, d7
 801108c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011094:	ddc8      	ble.n	8011028 <floor+0x40>
 8011096:	2900      	cmp	r1, #0
 8011098:	da02      	bge.n	80110a0 <floor+0xb8>
 801109a:	2b14      	cmp	r3, #20
 801109c:	d103      	bne.n	80110a6 <floor+0xbe>
 801109e:	3101      	adds	r1, #1
 80110a0:	ea20 0002 	bic.w	r0, r0, r2
 80110a4:	e7c0      	b.n	8011028 <floor+0x40>
 80110a6:	2401      	movs	r4, #1
 80110a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80110ac:	fa04 f303 	lsl.w	r3, r4, r3
 80110b0:	4418      	add	r0, r3
 80110b2:	42a8      	cmp	r0, r5
 80110b4:	bf38      	it	cc
 80110b6:	1909      	addcc	r1, r1, r4
 80110b8:	e7f2      	b.n	80110a0 <floor+0xb8>
 80110ba:	2000      	movs	r0, #0
 80110bc:	4601      	mov	r1, r0
 80110be:	e7b3      	b.n	8011028 <floor+0x40>
 80110c0:	8800759c 	.word	0x8800759c
 80110c4:	7e37e43c 	.word	0x7e37e43c
 80110c8:	bff00000 	.word	0xbff00000
 80110cc:	000fffff 	.word	0x000fffff

080110d0 <nan>:
 80110d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80110d8 <nan+0x8>
 80110d4:	4770      	bx	lr
 80110d6:	bf00      	nop
 80110d8:	00000000 	.word	0x00000000
 80110dc:	7ff80000 	.word	0x7ff80000

080110e0 <scalbn>:
 80110e0:	b082      	sub	sp, #8
 80110e2:	ed8d 0b00 	vstr	d0, [sp]
 80110e6:	9b01      	ldr	r3, [sp, #4]
 80110e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80110ec:	b9a2      	cbnz	r2, 8011118 <scalbn+0x38>
 80110ee:	9a00      	ldr	r2, [sp, #0]
 80110f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80110f4:	4313      	orrs	r3, r2
 80110f6:	d03a      	beq.n	801116e <scalbn+0x8e>
 80110f8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80111d0 <scalbn+0xf0>
 80110fc:	4b40      	ldr	r3, [pc, #256]	; (8011200 <scalbn+0x120>)
 80110fe:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011102:	4298      	cmp	r0, r3
 8011104:	ed8d 7b00 	vstr	d7, [sp]
 8011108:	da11      	bge.n	801112e <scalbn+0x4e>
 801110a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80111d8 <scalbn+0xf8>
 801110e:	ed9d 6b00 	vldr	d6, [sp]
 8011112:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011116:	e007      	b.n	8011128 <scalbn+0x48>
 8011118:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801111c:	428a      	cmp	r2, r1
 801111e:	d10a      	bne.n	8011136 <scalbn+0x56>
 8011120:	ed9d 7b00 	vldr	d7, [sp]
 8011124:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011128:	ed8d 7b00 	vstr	d7, [sp]
 801112c:	e01f      	b.n	801116e <scalbn+0x8e>
 801112e:	9b01      	ldr	r3, [sp, #4]
 8011130:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011134:	3a36      	subs	r2, #54	; 0x36
 8011136:	4402      	add	r2, r0
 8011138:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801113c:	428a      	cmp	r2, r1
 801113e:	dd0a      	ble.n	8011156 <scalbn+0x76>
 8011140:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80111e0 <scalbn+0x100>
 8011144:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80111e8 <scalbn+0x108>
 8011148:	eeb0 6b47 	vmov.f64	d6, d7
 801114c:	9b01      	ldr	r3, [sp, #4]
 801114e:	2b00      	cmp	r3, #0
 8011150:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011154:	e7dd      	b.n	8011112 <scalbn+0x32>
 8011156:	2a00      	cmp	r2, #0
 8011158:	dd0d      	ble.n	8011176 <scalbn+0x96>
 801115a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801115e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011162:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011166:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801116a:	e9cd 0100 	strd	r0, r1, [sp]
 801116e:	ed9d 0b00 	vldr	d0, [sp]
 8011172:	b002      	add	sp, #8
 8011174:	4770      	bx	lr
 8011176:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801117a:	da18      	bge.n	80111ae <scalbn+0xce>
 801117c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011180:	4298      	cmp	r0, r3
 8011182:	9b01      	ldr	r3, [sp, #4]
 8011184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011188:	dd09      	ble.n	801119e <scalbn+0xbe>
 801118a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80111e0 <scalbn+0x100>
 801118e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80111e8 <scalbn+0x108>
 8011192:	eeb0 6b47 	vmov.f64	d6, d7
 8011196:	2b00      	cmp	r3, #0
 8011198:	fe07 7b05 	vseleq.f64	d7, d7, d5
 801119c:	e7b9      	b.n	8011112 <scalbn+0x32>
 801119e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80111d8 <scalbn+0xf8>
 80111a2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80111f0 <scalbn+0x110>
 80111a6:	eeb0 6b47 	vmov.f64	d6, d7
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	e7f4      	b.n	8011198 <scalbn+0xb8>
 80111ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80111b6:	3236      	adds	r2, #54	; 0x36
 80111b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80111bc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80111c0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80111f8 <scalbn+0x118>
 80111c4:	ec41 0b17 	vmov	d7, r0, r1
 80111c8:	e7a3      	b.n	8011112 <scalbn+0x32>
 80111ca:	bf00      	nop
 80111cc:	f3af 8000 	nop.w
 80111d0:	00000000 	.word	0x00000000
 80111d4:	43500000 	.word	0x43500000
 80111d8:	c2f8f359 	.word	0xc2f8f359
 80111dc:	01a56e1f 	.word	0x01a56e1f
 80111e0:	8800759c 	.word	0x8800759c
 80111e4:	7e37e43c 	.word	0x7e37e43c
 80111e8:	8800759c 	.word	0x8800759c
 80111ec:	fe37e43c 	.word	0xfe37e43c
 80111f0:	c2f8f359 	.word	0xc2f8f359
 80111f4:	81a56e1f 	.word	0x81a56e1f
 80111f8:	00000000 	.word	0x00000000
 80111fc:	3c900000 	.word	0x3c900000
 8011200:	ffff3cb0 	.word	0xffff3cb0

08011204 <_init>:
 8011204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011206:	bf00      	nop
 8011208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801120a:	bc08      	pop	{r3}
 801120c:	469e      	mov	lr, r3
 801120e:	4770      	bx	lr

08011210 <_fini>:
 8011210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011212:	bf00      	nop
 8011214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011216:	bc08      	pop	{r3}
 8011218:	469e      	mov	lr, r3
 801121a:	4770      	bx	lr
