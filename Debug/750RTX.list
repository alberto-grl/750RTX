
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffe4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009468  08010288  08010288  00020288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080196f0  080196f0  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  080196f0  080196f0  000296f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080196f8  080196f8  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080196f8  080196f8  000296f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080196fc  080196fc  000296fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000554  24000000  08019700  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eb60  24000560  08019c54  00030560  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400f0c0  08019c54  0003f0c0  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   000493af  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000793e  00000000  00000000  000983dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002301d  00000000  00000000  0009fd1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001980  00000000  00000000  000c2d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00004d38  00000000  00000000  000c46b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003eaeb  00000000  00000000  000c93f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00023d3e  00000000  00000000  00107edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00181ba6  00000000  00000000  0012bc19  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000e9  00000000  00000000  002ad7bf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000066f4  00000000  00000000  002ad8a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000560 	.word	0x24000560
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801026c 	.word	0x0801026c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000564 	.word	0x24000564
 80002dc:	0801026c 	.word	0x0801026c

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <Load_Presets>:



// Load from the Presets table
void Load_Presets(void)
{
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <Load_Presets+0x40>)
 8000752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000756:	4c0f      	ldr	r4, [pc, #60]	; (8000794 <Load_Presets+0x44>)
 8000758:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 800075c:	4f0e      	ldr	r7, [pc, #56]	; (8000798 <Load_Presets+0x48>)
 800075e:	4e0f      	ldr	r6, [pc, #60]	; (800079c <Load_Presets+0x4c>)
 8000760:	4d0f      	ldr	r5, [pc, #60]	; (80007a0 <Load_Presets+0x50>)
	int k;

	for(k=0; k<MAXPRESETS; k++)
	{
		strcpy(psets[k].name, pNames[k]);
 8000762:	4621      	mov	r1, r4
 8000764:	4618      	mov	r0, r3
 8000766:	f00c fd67 	bl	800d238 <strcpy>
		psets[k].freq = pFreqs[k];
		psets[k].mode = pModes[k];
 800076a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		strcpy(psets[k].name, pNames[k]);
 800076e:	4603      	mov	r3, r0
		psets[k].bw   = pBws[k];
 8000770:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		psets[k].freq = pFreqs[k];
 8000774:	f857 0b04 	ldr.w	r0, [r7], #4
 8000778:	3410      	adds	r4, #16
		psets[k].mode = pModes[k];
 800077a:	7519      	strb	r1, [r3, #20]
 800077c:	3318      	adds	r3, #24
		psets[k].freq = pFreqs[k];
 800077e:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000782:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000786:	4543      	cmp	r3, r8
 8000788:	d1eb      	bne.n	8000762 <Load_Presets+0x12>
	}
}
 800078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800078e:	bf00      	nop
 8000790:	240088e4 	.word	0x240088e4
 8000794:	24000000 	.word	0x24000000
 8000798:	08016298 	.word	0x08016298
 800079c:	080162cf 	.word	0x080162cf
 80007a0:	08016287 	.word	0x08016287

080007a4 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SetBW+0x8c>)
	CurrentBW = newbw;
 80007a6:	4a23      	ldr	r2, [pc, #140]	; (8000834 <SetBW+0x90>)
	switch(CurrentMode)
 80007a8:	781b      	ldrb	r3, [r3, #0]
{
 80007aa:	b470      	push	{r4, r5, r6}
	CurrentBW = newbw;
 80007ac:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d83c      	bhi.n	800082c <SetBW+0x88>
 80007b2:	e8df f003 	tbb	[pc, r3]
 80007b6:	222e      	.short	0x222e
 80007b8:	020f      	.short	0x020f

		break;

	case CW  :

		bw[CW] = newbw;
 80007ba:	491f      	ldr	r1, [pc, #124]	; (8000838 <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 80007bc:	2500      	movs	r5, #0
 80007be:	4c1f      	ldr	r4, [pc, #124]	; (800083c <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80007c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 80007c4:	70c8      	strb	r0, [r1, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <SetBW+0x9c>)
		CWindex = 0; // TODO toglimi
 80007c8:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80007ca:	491e      	ldr	r1, [pc, #120]	; (8000844 <SetBW+0xa0>)
 80007cc:	481e      	ldr	r0, [pc, #120]	; (8000848 <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 80007ce:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80007d0:	f001 bafc 	b.w	8001dcc <SDR_2R_toC_f32>
		USBindex = (newbw == Narrow) ? 0 : 1;
 80007d4:	1c06      	adds	r6, r0, #0
		bw[USB] = newbw;
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 80007d8:	491c      	ldr	r1, [pc, #112]	; (800084c <SetBW+0xa8>)
		USBindex = 0; // TODO toglimi
 80007da:	f04f 0500 	mov.w	r5, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 80007de:	bf18      	it	ne
 80007e0:	2601      	movne	r6, #1
		USBindex = 0; // TODO toglimi
 80007e2:	4c1b      	ldr	r4, [pc, #108]	; (8000850 <SetBW+0xac>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80007e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[USB] = newbw;
 80007e8:	7090      	strb	r0, [r2, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 80007ea:	800e      	strh	r6, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <SetBW+0x9c>)
		USBindex = 0; // TODO toglimi
 80007ee:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80007f0:	4918      	ldr	r1, [pc, #96]	; (8000854 <SetBW+0xb0>)
 80007f2:	4819      	ldr	r0, [pc, #100]	; (8000858 <SetBW+0xb4>)
}	
 80007f4:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80007f6:	f001 bae9 	b.w	8001dcc <SDR_2R_toC_f32>
		bw[LSB] = newbw;
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <SetBW+0x94>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80007fc:	1c06      	adds	r6, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 80007fe:	4913      	ldr	r1, [pc, #76]	; (800084c <SetBW+0xa8>)
		LSBindex = 0; // TODO toglimi
 8000800:	f04f 0500 	mov.w	r5, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000804:	bf18      	it	ne
 8000806:	2601      	movne	r6, #1
		LSBindex = 0; // TODO toglimi
 8000808:	4c14      	ldr	r4, [pc, #80]	; (800085c <SetBW+0xb8>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 800080a:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[LSB] = newbw;
 800080e:	7050      	strb	r0, [r2, #1]
 8000810:	e7eb      	b.n	80007ea <SetBW+0x46>
		bw[AM] = newbw;
 8000812:	4909      	ldr	r1, [pc, #36]	; (8000838 <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000814:	2500      	movs	r5, #0
 8000816:	4c0d      	ldr	r4, [pc, #52]	; (800084c <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000818:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 800081c:	7008      	strb	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <SetBW+0x9c>)
		AMindex = 0; // TODO toglimi
 8000820:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000822:	490f      	ldr	r1, [pc, #60]	; (8000860 <SetBW+0xbc>)
 8000824:	480f      	ldr	r0, [pc, #60]	; (8000864 <SetBW+0xc0>)
}	
 8000826:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000828:	f001 bad0 	b.w	8001dcc <SDR_2R_toC_f32>
}	
 800082c:	bc70      	pop	{r4, r5, r6}
 800082e:	4770      	bx	lr
 8000830:	2400c3dc 	.word	0x2400c3dc
 8000834:	24000a90 	.word	0x24000a90
 8000838:	24008e98 	.word	0x24008e98
 800083c:	24008e94 	.word	0x24008e94
 8000840:	20004000 	.word	0x20004000
 8000844:	08012288 	.word	0x08012288
 8000848:	08013288 	.word	0x08013288
 800084c:	2400d7e2 	.word	0x2400d7e2
 8000850:	24008058 	.word	0x24008058
 8000854:	08014288 	.word	0x08014288
 8000858:	08015288 	.word	0x08015288
 800085c:	2400d7e0 	.word	0x2400d7e0
 8000860:	08010288 	.word	0x08010288
 8000864:	08011288 	.word	0x08011288

08000868 <Tune_Preset>:
{
 8000868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 800086c:	0045      	lsls	r5, r0, #1
 800086e:	4e89      	ldr	r6, [pc, #548]	; (8000a94 <Tune_Preset+0x22c>)
 8000870:	4a89      	ldr	r2, [pc, #548]	; (8000a98 <Tune_Preset+0x230>)
{
 8000872:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8000874:	182b      	adds	r3, r5, r0
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000876:	4f89      	ldr	r7, [pc, #548]	; (8000a9c <Tune_Preset+0x234>)
	LOfreq = psets[Idx].freq;
 8000878:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800087c:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 800087e:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8000880:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000882:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8000884:	2b03      	cmp	r3, #3
 8000886:	d849      	bhi.n	800091c <Tune_Preset+0xb4>
 8000888:	e8df f003 	tbb	[pc, r3]
 800088c:	02152637 	.word	0x02152637
		//     ChangeColor(ptr, hUSB, GUI_RED);
		//     ChangeColor(ptr, hCW,  GUI_BLACK);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000890:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8000aec <Tune_Preset+0x284>
 8000894:	f898 0003 	ldrb.w	r0, [r8, #3]
 8000898:	f7ff ff84 	bl	80007a4 <SetBW>
 800089c:	4b80      	ldr	r3, [pc, #512]	; (8000aa0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 800089e:	4881      	ldr	r0, [pc, #516]	; (8000aa4 <Tune_Preset+0x23c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80008a0:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 80008a2:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 80008a4:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80008a6:	2903      	cmp	r1, #3
 80008a8:	d838      	bhi.n	800091c <Tune_Preset+0xb4>
 80008aa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80008ae:	00a3      	.short	0x00a3
 80008b0:	00650089 	.word	0x00650089
 80008b4:	00e6      	.short	0x00e6
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80008b6:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8000aec <Tune_Preset+0x284>
 80008ba:	f898 0002 	ldrb.w	r0, [r8, #2]
 80008be:	f7ff ff71 	bl	80007a4 <SetBW>
 80008c2:	4b77      	ldr	r3, [pc, #476]	; (8000aa0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 80008c4:	4877      	ldr	r0, [pc, #476]	; (8000aa4 <Tune_Preset+0x23c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80008c6:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 80008c8:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 80008ca:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80008cc:	2903      	cmp	r1, #3
 80008ce:	d825      	bhi.n	800091c <Tune_Preset+0xb4>
 80008d0:	e8df f001 	tbb	[pc, r1]
 80008d4:	33af7690 	.word	0x33af7690
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80008d8:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8000aec <Tune_Preset+0x284>
 80008dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80008e0:	f7ff ff60 	bl	80007a4 <SetBW>
 80008e4:	4b6e      	ldr	r3, [pc, #440]	; (8000aa0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 80008e6:	486f      	ldr	r0, [pc, #444]	; (8000aa4 <Tune_Preset+0x23c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80008e8:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 80008ea:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 80008ec:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80008ee:	2903      	cmp	r1, #3
 80008f0:	d814      	bhi.n	800091c <Tune_Preset+0xb4>
 80008f2:	e8df f001 	tbb	[pc, r1]
 80008f6:	aa7f      	.short	0xaa7f
 80008f8:	2241      	.short	0x2241
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80008fa:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8000aec <Tune_Preset+0x284>
 80008fe:	f898 0000 	ldrb.w	r0, [r8]
 8000902:	f7ff ff4f 	bl	80007a4 <SetBW>
 8000906:	4b66      	ldr	r3, [pc, #408]	; (8000aa0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 8000908:	4866      	ldr	r0, [pc, #408]	; (8000aa4 <Tune_Preset+0x23c>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800090a:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 800090c:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 800090e:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000910:	2903      	cmp	r1, #3
 8000912:	d803      	bhi.n	800091c <Tune_Preset+0xb4>
 8000914:	e8df f001 	tbb	[pc, r1]
 8000918:	113054a5 	.word	0x113054a5
	SetBW( psets[Idx].bw);
 800091c:	4425      	add	r5, r4
	CurrentBW = newbw;
 800091e:	4b62      	ldr	r3, [pc, #392]	; (8000aa8 <Tune_Preset+0x240>)
	SetBW( psets[Idx].bw);
 8000920:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 8000924:	7d6a      	ldrb	r2, [r5, #21]
 8000926:	701a      	strb	r2, [r3, #0]
	strcpy(msg, psets[Idx].name);
 8000928:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800092c:	485f      	ldr	r0, [pc, #380]	; (8000aac <Tune_Preset+0x244>)
 800092e:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000936:	f00c bc7f 	b.w	800d238 <strcpy>
	Decay[CW]   = AGC_decay[newAGC];
 800093a:	495d      	ldr	r1, [pc, #372]	; (8000ab0 <Tune_Preset+0x248>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 800093c:	4f5d      	ldr	r7, [pc, #372]	; (8000ab4 <Tune_Preset+0x24c>)
	Decay[CW]   = AGC_decay[newAGC];
 800093e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case CW :       agc[CW] = newAGC;
 8000942:	70da      	strb	r2, [r3, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000944:	485c      	ldr	r0, [pc, #368]	; (8000ab8 <Tune_Preset+0x250>)
 8000946:	6809      	ldr	r1, [r1, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000948:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800094c:	4b5b      	ldr	r3, [pc, #364]	; (8000abc <Tune_Preset+0x254>)
	Decay[CW]   = AGC_decay[newAGC];
 800094e:	60c1      	str	r1, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000950:	80da      	strh	r2, [r3, #6]
	SetBW( psets[Idx].bw);
 8000952:	4425      	add	r5, r4
	CurrentBW = newbw;
 8000954:	4f54      	ldr	r7, [pc, #336]	; (8000aa8 <Tune_Preset+0x240>)
		CWindex = 0; // TODO toglimi
 8000956:	4a5a      	ldr	r2, [pc, #360]	; (8000ac0 <Tune_Preset+0x258>)
 8000958:	2100      	movs	r1, #0
	SetBW( psets[Idx].bw);
 800095a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8000962:	8011      	strh	r1, [r2, #0]
	SetBW( psets[Idx].bw);
 8000964:	7d68      	ldrb	r0, [r5, #21]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000966:	4a57      	ldr	r2, [pc, #348]	; (8000ac4 <Tune_Preset+0x25c>)
		bw[CW] = newbw;
 8000968:	f888 0003 	strb.w	r0, [r8, #3]
	CurrentBW = newbw;
 800096c:	7038      	strb	r0, [r7, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 800096e:	4956      	ldr	r1, [pc, #344]	; (8000ac8 <Tune_Preset+0x260>)
 8000970:	4856      	ldr	r0, [pc, #344]	; (8000acc <Tune_Preset+0x264>)
 8000972:	f001 fa2b 	bl	8001dcc <SDR_2R_toC_f32>
 8000976:	e7d7      	b.n	8000928 <Tune_Preset+0xc0>
	Decay[USB]  = AGC_decay[newAGC];
 8000978:	494d      	ldr	r1, [pc, #308]	; (8000ab0 <Tune_Preset+0x248>)
	Hcount[USB] = Hangcount[newAGC]; break;
 800097a:	4f4e      	ldr	r7, [pc, #312]	; (8000ab4 <Tune_Preset+0x24c>)
	Decay[USB]  = AGC_decay[newAGC];
 800097c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case USB :      agc[USB] = newAGC;
 8000980:	709a      	strb	r2, [r3, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000982:	484d      	ldr	r0, [pc, #308]	; (8000ab8 <Tune_Preset+0x250>)
 8000984:	6809      	ldr	r1, [r1, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000986:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800098a:	4b4c      	ldr	r3, [pc, #304]	; (8000abc <Tune_Preset+0x254>)
	Decay[USB]  = AGC_decay[newAGC];
 800098c:	6081      	str	r1, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 800098e:	809a      	strh	r2, [r3, #4]
	SetBW( psets[Idx].bw);
 8000990:	4425      	add	r5, r4
		USBindex = 0; // TODO toglimi
 8000992:	4b4f      	ldr	r3, [pc, #316]	; (8000ad0 <Tune_Preset+0x268>)
 8000994:	2700      	movs	r7, #0
	CurrentBW = newbw;
 8000996:	4944      	ldr	r1, [pc, #272]	; (8000aa8 <Tune_Preset+0x240>)
	SetBW( psets[Idx].bw);
 8000998:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
		AMindex = (newbw == Narrow) ? 0 : 1;
 800099c:	484d      	ldr	r0, [pc, #308]	; (8000ad4 <Tune_Preset+0x26c>)
		USBindex = 0; // TODO toglimi
 800099e:	801f      	strh	r7, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80009a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	SetBW( psets[Idx].bw);
 80009a4:	7d6a      	ldrb	r2, [r5, #21]
		bw[USB] = newbw;
 80009a6:	f888 2002 	strb.w	r2, [r8, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 80009aa:	1bd5      	subs	r5, r2, r7
	CurrentBW = newbw;
 80009ac:	700a      	strb	r2, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80009ae:	4a45      	ldr	r2, [pc, #276]	; (8000ac4 <Tune_Preset+0x25c>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 80009b0:	bf18      	it	ne
 80009b2:	2501      	movne	r5, #1
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80009b4:	4948      	ldr	r1, [pc, #288]	; (8000ad8 <Tune_Preset+0x270>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 80009b6:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80009b8:	4848      	ldr	r0, [pc, #288]	; (8000adc <Tune_Preset+0x274>)
 80009ba:	f001 fa07 	bl	8001dcc <SDR_2R_toC_f32>
 80009be:	e7b3      	b.n	8000928 <Tune_Preset+0xc0>
	Decay[LSB]  = AGC_decay[newAGC];
 80009c0:	493b      	ldr	r1, [pc, #236]	; (8000ab0 <Tune_Preset+0x248>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 80009c2:	4f3c      	ldr	r7, [pc, #240]	; (8000ab4 <Tune_Preset+0x24c>)
	Decay[LSB]  = AGC_decay[newAGC];
 80009c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case LSB :      agc[LSB] = newAGC;
 80009c8:	705a      	strb	r2, [r3, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 80009ca:	483b      	ldr	r0, [pc, #236]	; (8000ab8 <Tune_Preset+0x250>)
 80009cc:	6809      	ldr	r1, [r1, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80009ce:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <Tune_Preset+0x254>)
	Decay[LSB]  = AGC_decay[newAGC];
 80009d4:	6041      	str	r1, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80009d6:	805a      	strh	r2, [r3, #2]
	SetBW( psets[Idx].bw);
 80009d8:	4425      	add	r5, r4
		LSBindex = 0; // TODO toglimi
 80009da:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <Tune_Preset+0x278>)
 80009dc:	2700      	movs	r7, #0
	CurrentBW = newbw;
 80009de:	4932      	ldr	r1, [pc, #200]	; (8000aa8 <Tune_Preset+0x240>)
	SetBW( psets[Idx].bw);
 80009e0:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
		AMindex = (newbw == Narrow) ? 0 : 1;
 80009e4:	483b      	ldr	r0, [pc, #236]	; (8000ad4 <Tune_Preset+0x26c>)
		LSBindex = 0; // TODO toglimi
 80009e6:	801f      	strh	r7, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 80009e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	SetBW( psets[Idx].bw);
 80009ec:	7d6a      	ldrb	r2, [r5, #21]
		bw[LSB] = newbw;
 80009ee:	f888 2001 	strb.w	r2, [r8, #1]
 80009f2:	e7da      	b.n	80009aa <Tune_Preset+0x142>
	Decay[AM]   = AGC_decay[newAGC];
 80009f4:	492e      	ldr	r1, [pc, #184]	; (8000ab0 <Tune_Preset+0x248>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 80009f6:	4f2f      	ldr	r7, [pc, #188]	; (8000ab4 <Tune_Preset+0x24c>)
	Decay[AM]   = AGC_decay[newAGC];
 80009f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case AM :       agc[AM] = newAGC;
 80009fc:	701a      	strb	r2, [r3, #0]
	Decay[AM]   = AGC_decay[newAGC];
 80009fe:	482e      	ldr	r0, [pc, #184]	; (8000ab8 <Tune_Preset+0x250>)
 8000a00:	6809      	ldr	r1, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a02:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <Tune_Preset+0x254>)
	Decay[AM]   = AGC_decay[newAGC];
 8000a08:	6001      	str	r1, [r0, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a0a:	801a      	strh	r2, [r3, #0]
	SetBW( psets[Idx].bw);
 8000a0c:	4425      	add	r5, r4
	CurrentBW = newbw;
 8000a0e:	4f26      	ldr	r7, [pc, #152]	; (8000aa8 <Tune_Preset+0x240>)
		AMindex = 0; // TODO toglimi
 8000a10:	4a30      	ldr	r2, [pc, #192]	; (8000ad4 <Tune_Preset+0x26c>)
 8000a12:	2100      	movs	r1, #0
	SetBW( psets[Idx].bw);
 8000a14:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000a1c:	8011      	strh	r1, [r2, #0]
	SetBW( psets[Idx].bw);
 8000a1e:	7d68      	ldrb	r0, [r5, #21]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000a20:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <Tune_Preset+0x25c>)
		bw[AM] = newbw;
 8000a22:	f888 0000 	strb.w	r0, [r8]
	CurrentBW = newbw;
 8000a26:	7038      	strb	r0, [r7, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000a28:	492e      	ldr	r1, [pc, #184]	; (8000ae4 <Tune_Preset+0x27c>)
 8000a2a:	482f      	ldr	r0, [pc, #188]	; (8000ae8 <Tune_Preset+0x280>)
 8000a2c:	f001 f9ce 	bl	8001dcc <SDR_2R_toC_f32>
 8000a30:	e77a      	b.n	8000928 <Tune_Preset+0xc0>
	Decay[USB]  = AGC_decay[newAGC];
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <Tune_Preset+0x248>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000a34:	481f      	ldr	r0, [pc, #124]	; (8000ab4 <Tune_Preset+0x24c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000a36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a3a:	491f      	ldr	r1, [pc, #124]	; (8000ab8 <Tune_Preset+0x250>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000a3c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000a40:	6818      	ldr	r0, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <Tune_Preset+0x254>)
	Decay[USB]  = AGC_decay[newAGC];
 8000a44:	6088      	str	r0, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000a46:	809a      	strh	r2, [r3, #4]
 8000a48:	e7a2      	b.n	8000990 <Tune_Preset+0x128>
	Decay[LSB]  = AGC_decay[newAGC];
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <Tune_Preset+0x248>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a4c:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <Tune_Preset+0x24c>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000a4e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a52:	4919      	ldr	r1, [pc, #100]	; (8000ab8 <Tune_Preset+0x250>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a54:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000a58:	6818      	ldr	r0, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <Tune_Preset+0x254>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000a5c:	6048      	str	r0, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a5e:	805a      	strh	r2, [r3, #2]
 8000a60:	e7ba      	b.n	80009d8 <Tune_Preset+0x170>
	Decay[AM]   = AGC_decay[newAGC];
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <Tune_Preset+0x248>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a64:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <Tune_Preset+0x24c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000a66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a6a:	4913      	ldr	r1, [pc, #76]	; (8000ab8 <Tune_Preset+0x250>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a6c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000a70:	6818      	ldr	r0, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <Tune_Preset+0x254>)
	Decay[AM]   = AGC_decay[newAGC];
 8000a74:	6008      	str	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a76:	801a      	strh	r2, [r3, #0]
 8000a78:	e7c8      	b.n	8000a0c <Tune_Preset+0x1a4>
	Decay[CW]   = AGC_decay[newAGC];
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <Tune_Preset+0x248>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <Tune_Preset+0x24c>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a82:	490d      	ldr	r1, [pc, #52]	; (8000ab8 <Tune_Preset+0x250>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a84:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000a88:	6818      	ldr	r0, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <Tune_Preset+0x254>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a8c:	60c8      	str	r0, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a8e:	80da      	strh	r2, [r3, #6]
 8000a90:	e75f      	b.n	8000952 <Tune_Preset+0xea>
 8000a92:	bf00      	nop
 8000a94:	240088e4 	.word	0x240088e4
 8000a98:	24009ea8 	.word	0x24009ea8
 8000a9c:	2400c3dc 	.word	0x2400c3dc
 8000aa0:	2400780c 	.word	0x2400780c
 8000aa4:	24000680 	.word	0x24000680
 8000aa8:	24000a90 	.word	0x24000a90
 8000aac:	2400445c 	.word	0x2400445c
 8000ab0:	2400c3cc 	.word	0x2400c3cc
 8000ab4:	24009ea4 	.word	0x24009ea4
 8000ab8:	24002a98 	.word	0x24002a98
 8000abc:	2400804c 	.word	0x2400804c
 8000ac0:	24008e94 	.word	0x24008e94
 8000ac4:	20004000 	.word	0x20004000
 8000ac8:	08012288 	.word	0x08012288
 8000acc:	08013288 	.word	0x08013288
 8000ad0:	24008058 	.word	0x24008058
 8000ad4:	2400d7e2 	.word	0x2400d7e2
 8000ad8:	08014288 	.word	0x08014288
 8000adc:	08015288 	.word	0x08015288
 8000ae0:	2400d7e0 	.word	0x2400d7e0
 8000ae4:	08010288 	.word	0x08010288
 8000ae8:	08011288 	.word	0x08011288
 8000aec:	24008e98 	.word	0x24008e98

08000af0 <SetAGC>:
	switch(CurrentMode)
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 8000af2:	4a24      	ldr	r2, [pc, #144]	; (8000b84 <SetAGC+0x94>)
	switch(CurrentMode)
 8000af4:	781b      	ldrb	r3, [r3, #0]
{
 8000af6:	b430      	push	{r4, r5}
	CurrentAGC =newAGC;
 8000af8:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d810      	bhi.n	8000b20 <SetAGC+0x30>
 8000afe:	e8df f003 	tbb	[pc, r3]
 8000b02:	202f      	.short	0x202f
 8000b04:	0211      	.short	0x0211
	Decay[CW]   = AGC_decay[newAGC];
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <SetAGC+0x98>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b08:	4a20      	ldr	r2, [pc, #128]	; (8000b8c <SetAGC+0x9c>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b0a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b0e:	4c20      	ldr	r4, [pc, #128]	; (8000b90 <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b10:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000b14:	681d      	ldr	r5, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <SetAGC+0xa4>)
	case CW :       agc[CW] = newAGC;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b1a:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b1c:	80d1      	strh	r1, [r2, #6]
	case CW :       agc[CW] = newAGC;
 8000b1e:	70d8      	strb	r0, [r3, #3]
}	
 8000b20:	bc30      	pop	{r4, r5}
 8000b22:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <SetAGC+0x98>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b26:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <SetAGC+0x9c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000b28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b2c:	4c18      	ldr	r4, [pc, #96]	; (8000b90 <SetAGC+0xa0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b2e:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000b32:	681d      	ldr	r5, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <SetAGC+0xa4>)
	case USB :      agc[USB] = newAGC;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000b38:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b3a:	8091      	strh	r1, [r2, #4]
	case USB :      agc[USB] = newAGC;
 8000b3c:	7098      	strb	r0, [r3, #2]
}	
 8000b3e:	bc30      	pop	{r4, r5}
 8000b40:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <SetAGC+0x98>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b44:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <SetAGC+0x9c>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000b46:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b4a:	4c11      	ldr	r4, [pc, #68]	; (8000b90 <SetAGC+0xa0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b4c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000b50:	681d      	ldr	r5, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <SetAGC+0xa4>)
	case LSB :      agc[LSB] = newAGC;
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000b56:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b58:	8051      	strh	r1, [r2, #2]
	case LSB :      agc[LSB] = newAGC;
 8000b5a:	7058      	strb	r0, [r3, #1]
}	
 8000b5c:	bc30      	pop	{r4, r5}
 8000b5e:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <SetAGC+0x98>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SetAGC+0x9c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b64:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b68:	4c09      	ldr	r4, [pc, #36]	; (8000b90 <SetAGC+0xa0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b6a:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000b6e:	681d      	ldr	r5, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <SetAGC+0xa4>)
	case AM :       agc[AM] = newAGC;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b74:	6025      	str	r5, [r4, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b76:	8011      	strh	r1, [r2, #0]
	case AM :       agc[AM] = newAGC;
 8000b78:	7018      	strb	r0, [r3, #0]
}	
 8000b7a:	bc30      	pop	{r4, r5}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2400c3dc 	.word	0x2400c3dc
 8000b84:	24000680 	.word	0x24000680
 8000b88:	2400c3cc 	.word	0x2400c3cc
 8000b8c:	24009ea4 	.word	0x24009ea4
 8000b90:	24002a98 	.word	0x24002a98
 8000b94:	2400804c 	.word	0x2400804c
 8000b98:	2400780c 	.word	0x2400780c

08000b9c <SetMode>:
{
 8000b9c:	b538      	push	{r3, r4, r5, lr}
	CurrentMode = newmode;
 8000b9e:	4c64      	ldr	r4, [pc, #400]	; (8000d30 <SetMode+0x194>)
 8000ba0:	7020      	strb	r0, [r4, #0]
	switch(CurrentMode)
 8000ba2:	2803      	cmp	r0, #3
 8000ba4:	d80e      	bhi.n	8000bc4 <SetMode+0x28>
 8000ba6:	e8df f000 	tbb	[pc, r0]
 8000baa:	3e5c      	.short	0x3e5c
 8000bac:	0e2f      	.short	0x0e2f
	Decay[CW]   = AGC_decay[newAGC];
 8000bae:	4b61      	ldr	r3, [pc, #388]	; (8000d34 <SetMode+0x198>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000bb0:	4861      	ldr	r0, [pc, #388]	; (8000d38 <SetMode+0x19c>)
	Decay[CW]   = AGC_decay[newAGC];
 8000bb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000bb6:	4961      	ldr	r1, [pc, #388]	; (8000d3c <SetMode+0x1a0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000bb8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000bbc:	6818      	ldr	r0, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000bbe:	4b60      	ldr	r3, [pc, #384]	; (8000d40 <SetMode+0x1a4>)
	Decay[CW]   = AGC_decay[newAGC];
 8000bc0:	60c8      	str	r0, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000bc2:	80da      	strh	r2, [r3, #6]
		break;

	default :
		break;
	}
}	
 8000bc4:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000bc6:	495f      	ldr	r1, [pc, #380]	; (8000d44 <SetMode+0x1a8>)
		CWindex = 0; // TODO toglimi
 8000bc8:	2500      	movs	r5, #0
	CurrentBW = newbw;
 8000bca:	4a5f      	ldr	r2, [pc, #380]	; (8000d48 <SetMode+0x1ac>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 8000bd0:	78c9      	ldrb	r1, [r1, #3]
		CWindex = 0; // TODO toglimi
 8000bd2:	485e      	ldr	r0, [pc, #376]	; (8000d4c <SetMode+0x1b0>)
	CurrentBW = newbw;
 8000bd4:	7011      	strb	r1, [r2, #0]
		CWindex = 0; // TODO toglimi
 8000bd6:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000bd8:	4a5d      	ldr	r2, [pc, #372]	; (8000d50 <SetMode+0x1b4>)
 8000bda:	495e      	ldr	r1, [pc, #376]	; (8000d54 <SetMode+0x1b8>)
 8000bdc:	485e      	ldr	r0, [pc, #376]	; (8000d58 <SetMode+0x1bc>)
 8000bde:	f001 f8f5 	bl	8001dcc <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000be2:	4b5e      	ldr	r3, [pc, #376]	; (8000d5c <SetMode+0x1c0>)
	CurrentAGC =newAGC;
 8000be4:	485e      	ldr	r0, [pc, #376]	; (8000d60 <SetMode+0x1c4>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000be6:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8000be8:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000bea:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000bec:	2903      	cmp	r1, #3
 8000bee:	d8e9      	bhi.n	8000bc4 <SetMode+0x28>
 8000bf0:	a001      	add	r0, pc, #4	; (adr r0, 8000bf8 <SetMode+0x5c>)
 8000bf2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000bf6:	bf00      	nop
 8000bf8:	08000ccf 	.word	0x08000ccf
 8000bfc:	08000cb5 	.word	0x08000cb5
 8000c00:	08000c9b 	.word	0x08000c9b
 8000c04:	08000baf 	.word	0x08000baf
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c08:	4b4e      	ldr	r3, [pc, #312]	; (8000d44 <SetMode+0x1a8>)
 8000c0a:	7898      	ldrb	r0, [r3, #2]
 8000c0c:	f7ff fdca 	bl	80007a4 <SetBW>
 8000c10:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <SetMode+0x1c0>)
	CurrentAGC =newAGC;
 8000c12:	4853      	ldr	r0, [pc, #332]	; (8000d60 <SetMode+0x1c4>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c14:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8000c16:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c18:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c1a:	2903      	cmp	r1, #3
 8000c1c:	d8d2      	bhi.n	8000bc4 <SetMode+0x28>
 8000c1e:	e8df f001 	tbb	[pc, r1]
 8000c22:	4956      	.short	0x4956
 8000c24:	2f63      	.short	0x2f63
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c26:	4a47      	ldr	r2, [pc, #284]	; (8000d44 <SetMode+0x1a8>)
		LSBindex = 0; // TODO toglimi
 8000c28:	2500      	movs	r5, #0
	CurrentBW = newbw;
 8000c2a:	4847      	ldr	r0, [pc, #284]	; (8000d48 <SetMode+0x1ac>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 8000c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c30:	7852      	ldrb	r2, [r2, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c32:	494c      	ldr	r1, [pc, #304]	; (8000d64 <SetMode+0x1c8>)
	CurrentBW = newbw;
 8000c34:	7002      	strb	r2, [r0, #0]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c36:	1b52      	subs	r2, r2, r5
		LSBindex = 0; // TODO toglimi
 8000c38:	484b      	ldr	r0, [pc, #300]	; (8000d68 <SetMode+0x1cc>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c3a:	bf18      	it	ne
 8000c3c:	2201      	movne	r2, #1
		LSBindex = 0; // TODO toglimi
 8000c3e:	8005      	strh	r5, [r0, #0]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c40:	800a      	strh	r2, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 8000c42:	484a      	ldr	r0, [pc, #296]	; (8000d6c <SetMode+0x1d0>)
 8000c44:	4a42      	ldr	r2, [pc, #264]	; (8000d50 <SetMode+0x1b4>)
 8000c46:	494a      	ldr	r1, [pc, #296]	; (8000d70 <SetMode+0x1d4>)
 8000c48:	f001 f8c0 	bl	8001dcc <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <SetMode+0x1c0>)
	CurrentAGC =newAGC;
 8000c4e:	4844      	ldr	r0, [pc, #272]	; (8000d60 <SetMode+0x1c4>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c50:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 8000c52:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c54:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c56:	2903      	cmp	r1, #3
 8000c58:	d8b4      	bhi.n	8000bc4 <SetMode+0x28>
 8000c5a:	e8df f001 	tbb	[pc, r1]
 8000c5e:	5138      	.short	0x5138
 8000c60:	111e      	.short	0x111e
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c62:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <SetMode+0x1a8>)
 8000c64:	7818      	ldrb	r0, [r3, #0]
 8000c66:	f7ff fd9d 	bl	80007a4 <SetBW>
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <SetMode+0x1c0>)
	CurrentAGC =newAGC;
 8000c6c:	483c      	ldr	r0, [pc, #240]	; (8000d60 <SetMode+0x1c4>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c6e:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 8000c70:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c72:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c74:	2903      	cmp	r1, #3
 8000c76:	d8a5      	bhi.n	8000bc4 <SetMode+0x28>
 8000c78:	e8df f001 	tbb	[pc, r1]
 8000c7c:	020f1c4e 	.word	0x020f1c4e
	Decay[CW]   = AGC_decay[newAGC];
 8000c80:	492c      	ldr	r1, [pc, #176]	; (8000d34 <SetMode+0x198>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c82:	482d      	ldr	r0, [pc, #180]	; (8000d38 <SetMode+0x19c>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000c88:	4c2c      	ldr	r4, [pc, #176]	; (8000d3c <SetMode+0x1a0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c8a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000c8e:	680d      	ldr	r5, [r1, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c90:	492b      	ldr	r1, [pc, #172]	; (8000d40 <SetMode+0x1a4>)
	case CW :       agc[CW] = newAGC;
 8000c92:	70da      	strb	r2, [r3, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000c94:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c96:	80c8      	strh	r0, [r1, #6]
}	
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
	Decay[USB]  = AGC_decay[newAGC];
 8000c9a:	4926      	ldr	r1, [pc, #152]	; (8000d34 <SetMode+0x198>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c9c:	4826      	ldr	r0, [pc, #152]	; (8000d38 <SetMode+0x19c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000c9e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000ca2:	4c26      	ldr	r4, [pc, #152]	; (8000d3c <SetMode+0x1a0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ca4:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000ca8:	680d      	ldr	r5, [r1, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000caa:	4925      	ldr	r1, [pc, #148]	; (8000d40 <SetMode+0x1a4>)
	case USB :      agc[USB] = newAGC;
 8000cac:	709a      	strb	r2, [r3, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000cae:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000cb0:	8088      	strh	r0, [r1, #4]
}	
 8000cb2:	bd38      	pop	{r3, r4, r5, pc}
	Decay[LSB]  = AGC_decay[newAGC];
 8000cb4:	491f      	ldr	r1, [pc, #124]	; (8000d34 <SetMode+0x198>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000cb6:	4820      	ldr	r0, [pc, #128]	; (8000d38 <SetMode+0x19c>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000cb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000cbc:	4c1f      	ldr	r4, [pc, #124]	; (8000d3c <SetMode+0x1a0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000cbe:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000cc2:	680d      	ldr	r5, [r1, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000cc4:	491e      	ldr	r1, [pc, #120]	; (8000d40 <SetMode+0x1a4>)
	case LSB :      agc[LSB] = newAGC;
 8000cc6:	705a      	strb	r2, [r3, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000cc8:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000cca:	8048      	strh	r0, [r1, #2]
}	
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}
	Decay[AM]   = AGC_decay[newAGC];
 8000cce:	4919      	ldr	r1, [pc, #100]	; (8000d34 <SetMode+0x198>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000cd0:	4819      	ldr	r0, [pc, #100]	; (8000d38 <SetMode+0x19c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000cd2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000cd6:	4c19      	ldr	r4, [pc, #100]	; (8000d3c <SetMode+0x1a0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000cd8:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000cdc:	680d      	ldr	r5, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000cde:	4918      	ldr	r1, [pc, #96]	; (8000d40 <SetMode+0x1a4>)
	case AM :       agc[AM] = newAGC;
 8000ce0:	701a      	strb	r2, [r3, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000ce2:	6025      	str	r5, [r4, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000ce4:	8008      	strh	r0, [r1, #0]
}	
 8000ce6:	bd38      	pop	{r3, r4, r5, pc}
	Decay[USB]  = AGC_decay[newAGC];
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <SetMode+0x198>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000cea:	4813      	ldr	r0, [pc, #76]	; (8000d38 <SetMode+0x19c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000cec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000cf0:	4912      	ldr	r1, [pc, #72]	; (8000d3c <SetMode+0x1a0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000cf2:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000cf6:	6818      	ldr	r0, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <SetMode+0x1a4>)
	Decay[USB]  = AGC_decay[newAGC];
 8000cfa:	6088      	str	r0, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000cfc:	809a      	strh	r2, [r3, #4]
}	
 8000cfe:	bd38      	pop	{r3, r4, r5, pc}
	Decay[LSB]  = AGC_decay[newAGC];
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <SetMode+0x198>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <SetMode+0x19c>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <SetMode+0x1a0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d0a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d0e:	6818      	ldr	r0, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <SetMode+0x1a4>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d12:	6048      	str	r0, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d14:	805a      	strh	r2, [r3, #2]
}	
 8000d16:	bd38      	pop	{r3, r4, r5, pc}
	Decay[AM]   = AGC_decay[newAGC];
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SetMode+0x198>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d1a:	4807      	ldr	r0, [pc, #28]	; (8000d38 <SetMode+0x19c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000d1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d20:	4906      	ldr	r1, [pc, #24]	; (8000d3c <SetMode+0x1a0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d22:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000d26:	6818      	ldr	r0, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SetMode+0x1a4>)
	Decay[AM]   = AGC_decay[newAGC];
 8000d2a:	6008      	str	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d2c:	801a      	strh	r2, [r3, #0]
}	
 8000d2e:	bd38      	pop	{r3, r4, r5, pc}
 8000d30:	2400c3dc 	.word	0x2400c3dc
 8000d34:	2400c3cc 	.word	0x2400c3cc
 8000d38:	24009ea4 	.word	0x24009ea4
 8000d3c:	24002a98 	.word	0x24002a98
 8000d40:	2400804c 	.word	0x2400804c
 8000d44:	24008e98 	.word	0x24008e98
 8000d48:	24000a90 	.word	0x24000a90
 8000d4c:	24008e94 	.word	0x24008e94
 8000d50:	20004000 	.word	0x20004000
 8000d54:	08012288 	.word	0x08012288
 8000d58:	08013288 	.word	0x08013288
 8000d5c:	2400780c 	.word	0x2400780c
 8000d60:	24000680 	.word	0x24000680
 8000d64:	2400d7e2 	.word	0x2400d7e2
 8000d68:	2400d7e0 	.word	0x2400d7e0
 8000d6c:	08015288 	.word	0x08015288
 8000d70:	08014288 	.word	0x08014288

08000d74 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8000d74:	2809      	cmp	r0, #9
{
 8000d76:	b508      	push	{r3, lr}
	if (idx == 9)
 8000d78:	d010      	beq.n	8000d9c <SetFstep+0x28>
		Fstep = 9000;  // MW Channel for Europe
	else
	    Fstep = pow(10, 5 - idx);
 8000d7a:	f1c0 0305 	rsb	r3, r0, #5
 8000d7e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000d82:	ee01 3a10 	vmov	s2, r3
 8000d86:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
 8000d8a:	f00d fdd1 	bl	800e930 <pow>
 8000d8e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SetFstep+0x34>)
 8000d94:	ee17 2a90 	vmov	r2, s15
 8000d98:	601a      	str	r2, [r3, #0]
}	
 8000d9a:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8000d9c:	f242 3228 	movw	r2, #9000	; 0x2328
 8000da0:	4b01      	ldr	r3, [pc, #4]	; (8000da8 <SetFstep+0x34>)
 8000da2:	601a      	str	r2, [r3, #0]
}	
 8000da4:	bd08      	pop	{r3, pc}
 8000da6:	bf00      	nop
 8000da8:	2400c3d4 	.word	0x2400c3d4

08000dac <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked()
{	
 8000dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOfreq += Fstep;
 8000dae:	4b8c      	ldr	r3, [pc, #560]	; (8000fe0 <FplusClicked+0x234>)
 8000db0:	4a8c      	ldr	r2, [pc, #560]	; (8000fe4 <FplusClicked+0x238>)
 8000db2:	edd3 7a00 	vldr	s15, [r3]
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000db6:	4e8c      	ldr	r6, [pc, #560]	; (8000fe8 <FplusClicked+0x23c>)
	LOfreq += Fstep;
 8000db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dbc:	ed92 7a00 	vldr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dc0:	7833      	ldrb	r3, [r6, #0]
	psets[0].bw = bw[CurrentMode];
 8000dc2:	4d8a      	ldr	r5, [pc, #552]	; (8000fec <FplusClicked+0x240>)
	LOfreq += Fstep;
 8000dc4:	ee77 7a87 	vadd.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dc8:	4c89      	ldr	r4, [pc, #548]	; (8000ff0 <FplusClicked+0x244>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000dca:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8000ff4 <FplusClicked+0x248>
	psets[0].bw = bw[CurrentMode];
 8000dce:	5ce9      	ldrb	r1, [r5, r3]
	LOfreq  = min(LOfreq, 50000000.f);
 8000dd0:	fec7 7ac7 	vminnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dd4:	7523      	strb	r3, [r4, #20]
	LOfreq  = min(LOfreq, 50000000.f);
 8000dd6:	edc2 7a00 	vstr	s15, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dda:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8000dde:	7561      	strb	r1, [r4, #21]
	switch(CurrentMode)
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d840      	bhi.n	8000e66 <FplusClicked+0xba>
 8000de4:	e8df f003 	tbb	[pc, r3]
 8000de8:	02122230 	.word	0x02122230
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000dec:	78e8      	ldrb	r0, [r5, #3]
 8000dee:	f7ff fcd9 	bl	80007a4 <SetBW>
 8000df2:	4b81      	ldr	r3, [pc, #516]	; (8000ff8 <FplusClicked+0x24c>)
	CurrentAGC =newAGC;
 8000df4:	4881      	ldr	r0, [pc, #516]	; (8000ffc <FplusClicked+0x250>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000df6:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8000df8:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000dfa:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000dfc:	2903      	cmp	r1, #3
 8000dfe:	d831      	bhi.n	8000e64 <FplusClicked+0xb8>
 8000e00:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000e04:	007f0099 	.word	0x007f0099
 8000e08:	00e00059 	.word	0x00e00059
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e0c:	78a8      	ldrb	r0, [r5, #2]
 8000e0e:	f7ff fcc9 	bl	80007a4 <SetBW>
 8000e12:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <FplusClicked+0x24c>)
	CurrentAGC =newAGC;
 8000e14:	4879      	ldr	r0, [pc, #484]	; (8000ffc <FplusClicked+0x250>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e16:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8000e18:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e1a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e1c:	2903      	cmp	r1, #3
 8000e1e:	d821      	bhi.n	8000e64 <FplusClicked+0xb8>
 8000e20:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000e24:	006f0089 	.word	0x006f0089
 8000e28:	002900a9 	.word	0x002900a9
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e2c:	7868      	ldrb	r0, [r5, #1]
 8000e2e:	f7ff fcb9 	bl	80007a4 <SetBW>
 8000e32:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <FplusClicked+0x24c>)
	CurrentAGC =newAGC;
 8000e34:	4871      	ldr	r0, [pc, #452]	; (8000ffc <FplusClicked+0x250>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e36:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 8000e38:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e3a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e3c:	2903      	cmp	r1, #3
 8000e3e:	d811      	bhi.n	8000e64 <FplusClicked+0xb8>
 8000e40:	e8df f001 	tbb	[pc, r1]
 8000e44:	1939a679 	.word	0x1939a679
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e48:	7828      	ldrb	r0, [r5, #0]
 8000e4a:	f7ff fcab 	bl	80007a4 <SetBW>
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <FplusClicked+0x24c>)
	CurrentAGC =newAGC;
 8000e50:	486a      	ldr	r0, [pc, #424]	; (8000ffc <FplusClicked+0x250>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e52:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 8000e54:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e56:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e58:	2903      	cmp	r1, #3
 8000e5a:	d803      	bhi.n	8000e64 <FplusClicked+0xb8>
 8000e5c:	e8df f001 	tbb	[pc, r1]
 8000e60:	0b2b51a5 	.word	0x0b2b51a5
 8000e64:	7d61      	ldrb	r1, [r4, #21]
	CurrentBW = newbw;
 8000e66:	4b66      	ldr	r3, [pc, #408]	; (8001000 <FplusClicked+0x254>)
	strcpy(msg, psets[Idx].name);
 8000e68:	4866      	ldr	r0, [pc, #408]	; (8001004 <FplusClicked+0x258>)
	CurrentBW = newbw;
 8000e6a:	7019      	strb	r1, [r3, #0]
	strcpy(msg, psets[Idx].name);
 8000e6c:	4960      	ldr	r1, [pc, #384]	; (8000ff0 <FplusClicked+0x244>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000e72:	f00c b9e1 	b.w	800d238 <strcpy>
	Decay[CW]   = AGC_decay[newAGC];
 8000e76:	4964      	ldr	r1, [pc, #400]	; (8001008 <FplusClicked+0x25c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000e78:	4f64      	ldr	r7, [pc, #400]	; (800100c <FplusClicked+0x260>)
	Decay[CW]   = AGC_decay[newAGC];
 8000e7a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case CW :       agc[CW] = newAGC;
 8000e7e:	70da      	strb	r2, [r3, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000e80:	4863      	ldr	r0, [pc, #396]	; (8001010 <FplusClicked+0x264>)
 8000e82:	680e      	ldr	r6, [r1, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000e84:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8000e88:	4b62      	ldr	r3, [pc, #392]	; (8001014 <FplusClicked+0x268>)
 8000e8a:	7d61      	ldrb	r1, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8000e8c:	60c6      	str	r6, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000e8e:	80da      	strh	r2, [r3, #6]
	CurrentBW = newbw;
 8000e90:	485b      	ldr	r0, [pc, #364]	; (8001000 <FplusClicked+0x254>)
		CWindex = 0; // TODO toglimi
 8000e92:	2600      	movs	r6, #0
 8000e94:	4c60      	ldr	r4, [pc, #384]	; (8001018 <FplusClicked+0x26c>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8000e9a:	70e9      	strb	r1, [r5, #3]
	CurrentBW = newbw;
 8000e9c:	7001      	strb	r1, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000e9e:	4a5f      	ldr	r2, [pc, #380]	; (800101c <FplusClicked+0x270>)
 8000ea0:	495f      	ldr	r1, [pc, #380]	; (8001020 <FplusClicked+0x274>)
 8000ea2:	4860      	ldr	r0, [pc, #384]	; (8001024 <FplusClicked+0x278>)
		CWindex = 0; // TODO toglimi
 8000ea4:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000ea6:	f000 ff91 	bl	8001dcc <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000eaa:	4951      	ldr	r1, [pc, #324]	; (8000ff0 <FplusClicked+0x244>)
 8000eac:	4855      	ldr	r0, [pc, #340]	; (8001004 <FplusClicked+0x258>)
}	
 8000eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000eb2:	f00c b9c1 	b.w	800d238 <strcpy>
	Decay[USB]  = AGC_decay[newAGC];
 8000eb6:	4954      	ldr	r1, [pc, #336]	; (8001008 <FplusClicked+0x25c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000eb8:	4f54      	ldr	r7, [pc, #336]	; (800100c <FplusClicked+0x260>)
	Decay[USB]  = AGC_decay[newAGC];
 8000eba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case USB :      agc[USB] = newAGC;
 8000ebe:	709a      	strb	r2, [r3, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000ec0:	4853      	ldr	r0, [pc, #332]	; (8001010 <FplusClicked+0x264>)
 8000ec2:	680e      	ldr	r6, [r1, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ec4:	4b53      	ldr	r3, [pc, #332]	; (8001014 <FplusClicked+0x268>)
 8000ec6:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8000eca:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8000ecc:	6086      	str	r6, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ece:	8099      	strh	r1, [r3, #4]
	CurrentBW = newbw;
 8000ed0:	4c4b      	ldr	r4, [pc, #300]	; (8001000 <FplusClicked+0x254>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000ed2:	1c10      	adds	r0, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000ed4:	4954      	ldr	r1, [pc, #336]	; (8001028 <FplusClicked+0x27c>)
		USBindex = 0; // TODO toglimi
 8000ed6:	f04f 0600 	mov.w	r6, #0
	CurrentBW = newbw;
 8000eda:	7022      	strb	r2, [r4, #0]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000edc:	bf18      	it	ne
 8000ede:	2001      	movne	r0, #1
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8000ee4:	4c51      	ldr	r4, [pc, #324]	; (800102c <FplusClicked+0x280>)
		bw[USB] = newbw;
 8000ee6:	70aa      	strb	r2, [r5, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000ee8:	8008      	strh	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000eea:	4a4c      	ldr	r2, [pc, #304]	; (800101c <FplusClicked+0x270>)
 8000eec:	4950      	ldr	r1, [pc, #320]	; (8001030 <FplusClicked+0x284>)
 8000eee:	4851      	ldr	r0, [pc, #324]	; (8001034 <FplusClicked+0x288>)
		USBindex = 0; // TODO toglimi
 8000ef0:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000ef2:	f000 ff6b 	bl	8001dcc <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000ef6:	493e      	ldr	r1, [pc, #248]	; (8000ff0 <FplusClicked+0x244>)
 8000ef8:	4842      	ldr	r0, [pc, #264]	; (8001004 <FplusClicked+0x258>)
}	
 8000efa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000efe:	f00c b99b 	b.w	800d238 <strcpy>
	Decay[LSB]  = AGC_decay[newAGC];
 8000f02:	4941      	ldr	r1, [pc, #260]	; (8001008 <FplusClicked+0x25c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000f04:	4f41      	ldr	r7, [pc, #260]	; (800100c <FplusClicked+0x260>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000f06:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000f0a:	705a      	strb	r2, [r3, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000f0c:	4840      	ldr	r0, [pc, #256]	; (8001010 <FplusClicked+0x264>)
 8000f0e:	680e      	ldr	r6, [r1, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000f10:	4b40      	ldr	r3, [pc, #256]	; (8001014 <FplusClicked+0x268>)
 8000f12:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8000f16:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 8000f18:	6046      	str	r6, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000f1a:	8059      	strh	r1, [r3, #2]
	CurrentBW = newbw;
 8000f1c:	4c38      	ldr	r4, [pc, #224]	; (8001000 <FplusClicked+0x254>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f1e:	1c10      	adds	r0, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000f20:	4941      	ldr	r1, [pc, #260]	; (8001028 <FplusClicked+0x27c>)
		LSBindex = 0; // TODO toglimi
 8000f22:	f04f 0600 	mov.w	r6, #0
	CurrentBW = newbw;
 8000f26:	7022      	strb	r2, [r4, #0]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f28:	bf18      	it	ne
 8000f2a:	2001      	movne	r0, #1
		bw[LSB] = newbw;
 8000f2c:	706a      	strb	r2, [r5, #1]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		LSBindex = 0; // TODO toglimi
 8000f32:	4c41      	ldr	r4, [pc, #260]	; (8001038 <FplusClicked+0x28c>)
 8000f34:	e7d8      	b.n	8000ee8 <FplusClicked+0x13c>
	Decay[AM]   = AGC_decay[newAGC];
 8000f36:	4934      	ldr	r1, [pc, #208]	; (8001008 <FplusClicked+0x25c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000f38:	4f34      	ldr	r7, [pc, #208]	; (800100c <FplusClicked+0x260>)
	Decay[AM]   = AGC_decay[newAGC];
 8000f3a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case AM :       agc[AM] = newAGC;
 8000f3e:	701a      	strb	r2, [r3, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000f40:	4833      	ldr	r0, [pc, #204]	; (8001010 <FplusClicked+0x264>)
 8000f42:	680e      	ldr	r6, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000f44:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8000f48:	4b32      	ldr	r3, [pc, #200]	; (8001014 <FplusClicked+0x268>)
 8000f4a:	7d61      	ldrb	r1, [r4, #21]
	Decay[AM]   = AGC_decay[newAGC];
 8000f4c:	6006      	str	r6, [r0, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000f4e:	801a      	strh	r2, [r3, #0]
	CurrentBW = newbw;
 8000f50:	482b      	ldr	r0, [pc, #172]	; (8001000 <FplusClicked+0x254>)
		AMindex = 0; // TODO toglimi
 8000f52:	2600      	movs	r6, #0
 8000f54:	4c34      	ldr	r4, [pc, #208]	; (8001028 <FplusClicked+0x27c>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000f5a:	7029      	strb	r1, [r5, #0]
	CurrentBW = newbw;
 8000f5c:	7001      	strb	r1, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000f5e:	4a2f      	ldr	r2, [pc, #188]	; (800101c <FplusClicked+0x270>)
 8000f60:	4936      	ldr	r1, [pc, #216]	; (800103c <FplusClicked+0x290>)
 8000f62:	4837      	ldr	r0, [pc, #220]	; (8001040 <FplusClicked+0x294>)
		AMindex = 0; // TODO toglimi
 8000f64:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000f66:	f000 ff31 	bl	8001dcc <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000f6a:	4921      	ldr	r1, [pc, #132]	; (8000ff0 <FplusClicked+0x244>)
 8000f6c:	4825      	ldr	r0, [pc, #148]	; (8001004 <FplusClicked+0x258>)
}	
 8000f6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8000f72:	f00c b961 	b.w	800d238 <strcpy>
	Decay[USB]  = AGC_decay[newAGC];
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <FplusClicked+0x25c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000f78:	4924      	ldr	r1, [pc, #144]	; (800100c <FplusClicked+0x260>)
	Decay[USB]  = AGC_decay[newAGC];
 8000f7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f7e:	4824      	ldr	r0, [pc, #144]	; (8001010 <FplusClicked+0x264>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000f80:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000f84:	681e      	ldr	r6, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <FplusClicked+0x268>)
 8000f88:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8000f8a:	6086      	str	r6, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000f8c:	8099      	strh	r1, [r3, #4]
 8000f8e:	e79f      	b.n	8000ed0 <FplusClicked+0x124>
	Decay[LSB]  = AGC_decay[newAGC];
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <FplusClicked+0x25c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000f92:	491e      	ldr	r1, [pc, #120]	; (800100c <FplusClicked+0x260>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000f94:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f98:	481d      	ldr	r0, [pc, #116]	; (8001010 <FplusClicked+0x264>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000f9a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000f9e:	681e      	ldr	r6, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <FplusClicked+0x268>)
 8000fa2:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 8000fa4:	6046      	str	r6, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000fa6:	8059      	strh	r1, [r3, #2]
 8000fa8:	e7b8      	b.n	8000f1c <FplusClicked+0x170>
	Decay[AM]   = AGC_decay[newAGC];
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <FplusClicked+0x25c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000fac:	4917      	ldr	r1, [pc, #92]	; (800100c <FplusClicked+0x260>)
	Decay[AM]   = AGC_decay[newAGC];
 8000fae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <FplusClicked+0x264>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000fb4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000fb8:	681e      	ldr	r6, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <FplusClicked+0x268>)
 8000fbc:	7d61      	ldrb	r1, [r4, #21]
	Decay[AM]   = AGC_decay[newAGC];
 8000fbe:	6006      	str	r6, [r0, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000fc0:	801a      	strh	r2, [r3, #0]
 8000fc2:	e7c5      	b.n	8000f50 <FplusClicked+0x1a4>
	Decay[CW]   = AGC_decay[newAGC];
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <FplusClicked+0x25c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000fc6:	4911      	ldr	r1, [pc, #68]	; (800100c <FplusClicked+0x260>)
	Decay[CW]   = AGC_decay[newAGC];
 8000fc8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <FplusClicked+0x264>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000fce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000fd2:	681e      	ldr	r6, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <FplusClicked+0x268>)
 8000fd6:	7d61      	ldrb	r1, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8000fd8:	60c6      	str	r6, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000fda:	80da      	strh	r2, [r3, #6]
 8000fdc:	e758      	b.n	8000e90 <FplusClicked+0xe4>
 8000fde:	bf00      	nop
 8000fe0:	2400c3d4 	.word	0x2400c3d4
 8000fe4:	24009ea8 	.word	0x24009ea8
 8000fe8:	2400c3dc 	.word	0x2400c3dc
 8000fec:	24008e98 	.word	0x24008e98
 8000ff0:	240088e4 	.word	0x240088e4
 8000ff4:	4c3ebc20 	.word	0x4c3ebc20
 8000ff8:	2400780c 	.word	0x2400780c
 8000ffc:	24000680 	.word	0x24000680
 8001000:	24000a90 	.word	0x24000a90
 8001004:	2400445c 	.word	0x2400445c
 8001008:	2400c3cc 	.word	0x2400c3cc
 800100c:	24009ea4 	.word	0x24009ea4
 8001010:	24002a98 	.word	0x24002a98
 8001014:	2400804c 	.word	0x2400804c
 8001018:	24008e94 	.word	0x24008e94
 800101c:	20004000 	.word	0x20004000
 8001020:	08012288 	.word	0x08012288
 8001024:	08013288 	.word	0x08013288
 8001028:	2400d7e2 	.word	0x2400d7e2
 800102c:	24008058 	.word	0x24008058
 8001030:	08014288 	.word	0x08014288
 8001034:	08015288 	.word	0x08015288
 8001038:	2400d7e0 	.word	0x2400d7e0
 800103c:	08010288 	.word	0x08010288
 8001040:	08011288 	.word	0x08011288

08001044 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked()
{	
 8001044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOfreq -= Fstep;
 8001046:	4b8c      	ldr	r3, [pc, #560]	; (8001278 <FminusClicked+0x234>)
 8001048:	4a8c      	ldr	r2, [pc, #560]	; (800127c <FminusClicked+0x238>)
 800104a:	ed93 7a00 	vldr	s14, [r3]
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800104e:	4e8c      	ldr	r6, [pc, #560]	; (8001280 <FminusClicked+0x23c>)
	LOfreq -= Fstep;
 8001050:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001054:	edd2 7a00 	vldr	s15, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001058:	7833      	ldrb	r3, [r6, #0]
	psets[0].bw = bw[CurrentMode];
 800105a:	4d8a      	ldr	r5, [pc, #552]	; (8001284 <FminusClicked+0x240>)
	LOfreq -= Fstep;
 800105c:	ee77 7ac7 	vsub.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001060:	4c89      	ldr	r4, [pc, #548]	; (8001288 <FminusClicked+0x244>)
	LOfreq  = max(LOfreq, 8000.f);
 8001062:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800128c <FminusClicked+0x248>
	psets[0].bw = bw[CurrentMode];
 8001066:	5ce9      	ldrb	r1, [r5, r3]
	LOfreq  = max(LOfreq, 8000.f);
 8001068:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800106c:	7523      	strb	r3, [r4, #20]
	LOfreq  = max(LOfreq, 8000.f);
 800106e:	edc2 7a00 	vstr	s15, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001072:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8001076:	7561      	strb	r1, [r4, #21]
	switch(CurrentMode)
 8001078:	2b03      	cmp	r3, #3
 800107a:	d840      	bhi.n	80010fe <FminusClicked+0xba>
 800107c:	e8df f003 	tbb	[pc, r3]
 8001080:	02122230 	.word	0x02122230
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001084:	78e8      	ldrb	r0, [r5, #3]
 8001086:	f7ff fb8d 	bl	80007a4 <SetBW>
 800108a:	4b81      	ldr	r3, [pc, #516]	; (8001290 <FminusClicked+0x24c>)
	CurrentAGC =newAGC;
 800108c:	4881      	ldr	r0, [pc, #516]	; (8001294 <FminusClicked+0x250>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 800108e:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8001090:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8001092:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8001094:	2903      	cmp	r1, #3
 8001096:	d831      	bhi.n	80010fc <FminusClicked+0xb8>
 8001098:	e8df f011 	tbh	[pc, r1, lsl #1]
 800109c:	007f0099 	.word	0x007f0099
 80010a0:	00e00059 	.word	0x00e00059
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80010a4:	78a8      	ldrb	r0, [r5, #2]
 80010a6:	f7ff fb7d 	bl	80007a4 <SetBW>
 80010aa:	4b79      	ldr	r3, [pc, #484]	; (8001290 <FminusClicked+0x24c>)
	CurrentAGC =newAGC;
 80010ac:	4879      	ldr	r0, [pc, #484]	; (8001294 <FminusClicked+0x250>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80010ae:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 80010b0:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 80010b2:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80010b4:	2903      	cmp	r1, #3
 80010b6:	d821      	bhi.n	80010fc <FminusClicked+0xb8>
 80010b8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80010bc:	006f0089 	.word	0x006f0089
 80010c0:	002900a9 	.word	0x002900a9
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80010c4:	7868      	ldrb	r0, [r5, #1]
 80010c6:	f7ff fb6d 	bl	80007a4 <SetBW>
 80010ca:	4b71      	ldr	r3, [pc, #452]	; (8001290 <FminusClicked+0x24c>)
	CurrentAGC =newAGC;
 80010cc:	4871      	ldr	r0, [pc, #452]	; (8001294 <FminusClicked+0x250>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80010ce:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 80010d0:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 80010d2:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80010d4:	2903      	cmp	r1, #3
 80010d6:	d811      	bhi.n	80010fc <FminusClicked+0xb8>
 80010d8:	e8df f001 	tbb	[pc, r1]
 80010dc:	1939a679 	.word	0x1939a679
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80010e0:	7828      	ldrb	r0, [r5, #0]
 80010e2:	f7ff fb5f 	bl	80007a4 <SetBW>
 80010e6:	4b6a      	ldr	r3, [pc, #424]	; (8001290 <FminusClicked+0x24c>)
	CurrentAGC =newAGC;
 80010e8:	486a      	ldr	r0, [pc, #424]	; (8001294 <FminusClicked+0x250>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80010ea:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 80010ec:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 80010ee:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80010f0:	2903      	cmp	r1, #3
 80010f2:	d803      	bhi.n	80010fc <FminusClicked+0xb8>
 80010f4:	e8df f001 	tbb	[pc, r1]
 80010f8:	0b2b51a5 	.word	0x0b2b51a5
 80010fc:	7d61      	ldrb	r1, [r4, #21]
	CurrentBW = newbw;
 80010fe:	4b66      	ldr	r3, [pc, #408]	; (8001298 <FminusClicked+0x254>)
	strcpy(msg, psets[Idx].name);
 8001100:	4866      	ldr	r0, [pc, #408]	; (800129c <FminusClicked+0x258>)
	CurrentBW = newbw;
 8001102:	7019      	strb	r1, [r3, #0]
	strcpy(msg, psets[Idx].name);
 8001104:	4960      	ldr	r1, [pc, #384]	; (8001288 <FminusClicked+0x244>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8001106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 800110a:	f00c b895 	b.w	800d238 <strcpy>
	Decay[CW]   = AGC_decay[newAGC];
 800110e:	4964      	ldr	r1, [pc, #400]	; (80012a0 <FminusClicked+0x25c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001110:	4f64      	ldr	r7, [pc, #400]	; (80012a4 <FminusClicked+0x260>)
	Decay[CW]   = AGC_decay[newAGC];
 8001112:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case CW :       agc[CW] = newAGC;
 8001116:	70da      	strb	r2, [r3, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8001118:	4863      	ldr	r0, [pc, #396]	; (80012a8 <FminusClicked+0x264>)
 800111a:	680e      	ldr	r6, [r1, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 800111c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8001120:	4b62      	ldr	r3, [pc, #392]	; (80012ac <FminusClicked+0x268>)
 8001122:	7d61      	ldrb	r1, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8001124:	60c6      	str	r6, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001126:	80da      	strh	r2, [r3, #6]
	CurrentBW = newbw;
 8001128:	485b      	ldr	r0, [pc, #364]	; (8001298 <FminusClicked+0x254>)
		CWindex = 0; // TODO toglimi
 800112a:	2600      	movs	r6, #0
 800112c:	4c60      	ldr	r4, [pc, #384]	; (80012b0 <FminusClicked+0x26c>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 800112e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8001132:	70e9      	strb	r1, [r5, #3]
	CurrentBW = newbw;
 8001134:	7001      	strb	r1, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001136:	4a5f      	ldr	r2, [pc, #380]	; (80012b4 <FminusClicked+0x270>)
 8001138:	495f      	ldr	r1, [pc, #380]	; (80012b8 <FminusClicked+0x274>)
 800113a:	4860      	ldr	r0, [pc, #384]	; (80012bc <FminusClicked+0x278>)
		CWindex = 0; // TODO toglimi
 800113c:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 800113e:	f000 fe45 	bl	8001dcc <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8001142:	4951      	ldr	r1, [pc, #324]	; (8001288 <FminusClicked+0x244>)
 8001144:	4855      	ldr	r0, [pc, #340]	; (800129c <FminusClicked+0x258>)
}
 8001146:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 800114a:	f00c b875 	b.w	800d238 <strcpy>
	Decay[USB]  = AGC_decay[newAGC];
 800114e:	4954      	ldr	r1, [pc, #336]	; (80012a0 <FminusClicked+0x25c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001150:	4f54      	ldr	r7, [pc, #336]	; (80012a4 <FminusClicked+0x260>)
	Decay[USB]  = AGC_decay[newAGC];
 8001152:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case USB :      agc[USB] = newAGC;
 8001156:	709a      	strb	r2, [r3, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8001158:	4853      	ldr	r0, [pc, #332]	; (80012a8 <FminusClicked+0x264>)
 800115a:	680e      	ldr	r6, [r1, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <FminusClicked+0x268>)
 800115e:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8001162:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8001164:	6086      	str	r6, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001166:	8099      	strh	r1, [r3, #4]
	CurrentBW = newbw;
 8001168:	4c4b      	ldr	r4, [pc, #300]	; (8001298 <FminusClicked+0x254>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 800116a:	1c10      	adds	r0, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 800116c:	4954      	ldr	r1, [pc, #336]	; (80012c0 <FminusClicked+0x27c>)
		USBindex = 0; // TODO toglimi
 800116e:	f04f 0600 	mov.w	r6, #0
	CurrentBW = newbw;
 8001172:	7022      	strb	r2, [r4, #0]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001174:	bf18      	it	ne
 8001176:	2001      	movne	r0, #1
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001178:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 800117c:	4c51      	ldr	r4, [pc, #324]	; (80012c4 <FminusClicked+0x280>)
		bw[USB] = newbw;
 800117e:	70aa      	strb	r2, [r5, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001180:	8008      	strh	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001182:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <FminusClicked+0x270>)
 8001184:	4950      	ldr	r1, [pc, #320]	; (80012c8 <FminusClicked+0x284>)
 8001186:	4851      	ldr	r0, [pc, #324]	; (80012cc <FminusClicked+0x288>)
		USBindex = 0; // TODO toglimi
 8001188:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 800118a:	f000 fe1f 	bl	8001dcc <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 800118e:	493e      	ldr	r1, [pc, #248]	; (8001288 <FminusClicked+0x244>)
 8001190:	4842      	ldr	r0, [pc, #264]	; (800129c <FminusClicked+0x258>)
}
 8001192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8001196:	f00c b84f 	b.w	800d238 <strcpy>
	Decay[LSB]  = AGC_decay[newAGC];
 800119a:	4941      	ldr	r1, [pc, #260]	; (80012a0 <FminusClicked+0x25c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 800119c:	4f41      	ldr	r7, [pc, #260]	; (80012a4 <FminusClicked+0x260>)
	Decay[LSB]  = AGC_decay[newAGC];
 800119e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case LSB :      agc[LSB] = newAGC;
 80011a2:	705a      	strb	r2, [r3, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 80011a4:	4840      	ldr	r0, [pc, #256]	; (80012a8 <FminusClicked+0x264>)
 80011a6:	680e      	ldr	r6, [r1, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80011a8:	4b40      	ldr	r3, [pc, #256]	; (80012ac <FminusClicked+0x268>)
 80011aa:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 80011ae:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 80011b0:	6046      	str	r6, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80011b2:	8059      	strh	r1, [r3, #2]
	CurrentBW = newbw;
 80011b4:	4c38      	ldr	r4, [pc, #224]	; (8001298 <FminusClicked+0x254>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80011b6:	1c10      	adds	r0, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 80011b8:	4941      	ldr	r1, [pc, #260]	; (80012c0 <FminusClicked+0x27c>)
		LSBindex = 0; // TODO toglimi
 80011ba:	f04f 0600 	mov.w	r6, #0
	CurrentBW = newbw;
 80011be:	7022      	strb	r2, [r4, #0]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80011c0:	bf18      	it	ne
 80011c2:	2001      	movne	r0, #1
		bw[LSB] = newbw;
 80011c4:	706a      	strb	r2, [r5, #1]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
		LSBindex = 0; // TODO toglimi
 80011ca:	4c41      	ldr	r4, [pc, #260]	; (80012d0 <FminusClicked+0x28c>)
 80011cc:	e7d8      	b.n	8001180 <FminusClicked+0x13c>
	Decay[AM]   = AGC_decay[newAGC];
 80011ce:	4934      	ldr	r1, [pc, #208]	; (80012a0 <FminusClicked+0x25c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 80011d0:	4f34      	ldr	r7, [pc, #208]	; (80012a4 <FminusClicked+0x260>)
	Decay[AM]   = AGC_decay[newAGC];
 80011d2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	case AM :       agc[AM] = newAGC;
 80011d6:	701a      	strb	r2, [r3, #0]
	Decay[AM]   = AGC_decay[newAGC];
 80011d8:	4833      	ldr	r0, [pc, #204]	; (80012a8 <FminusClicked+0x264>)
 80011da:	680e      	ldr	r6, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 80011dc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <FminusClicked+0x268>)
 80011e2:	7d61      	ldrb	r1, [r4, #21]
	Decay[AM]   = AGC_decay[newAGC];
 80011e4:	6006      	str	r6, [r0, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 80011e6:	801a      	strh	r2, [r3, #0]
	CurrentBW = newbw;
 80011e8:	482b      	ldr	r0, [pc, #172]	; (8001298 <FminusClicked+0x254>)
		AMindex = 0; // TODO toglimi
 80011ea:	2600      	movs	r6, #0
 80011ec:	4c34      	ldr	r4, [pc, #208]	; (80012c0 <FminusClicked+0x27c>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80011ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 80011f2:	7029      	strb	r1, [r5, #0]
	CurrentBW = newbw;
 80011f4:	7001      	strb	r1, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80011f6:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <FminusClicked+0x270>)
 80011f8:	4936      	ldr	r1, [pc, #216]	; (80012d4 <FminusClicked+0x290>)
 80011fa:	4837      	ldr	r0, [pc, #220]	; (80012d8 <FminusClicked+0x294>)
		AMindex = 0; // TODO toglimi
 80011fc:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80011fe:	f000 fde5 	bl	8001dcc <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8001202:	4921      	ldr	r1, [pc, #132]	; (8001288 <FminusClicked+0x244>)
 8001204:	4825      	ldr	r0, [pc, #148]	; (800129c <FminusClicked+0x258>)
}
 8001206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 800120a:	f00c b815 	b.w	800d238 <strcpy>
	Decay[USB]  = AGC_decay[newAGC];
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <FminusClicked+0x25c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001210:	4924      	ldr	r1, [pc, #144]	; (80012a4 <FminusClicked+0x260>)
	Decay[USB]  = AGC_decay[newAGC];
 8001212:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001216:	4824      	ldr	r0, [pc, #144]	; (80012a8 <FminusClicked+0x264>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001218:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 800121c:	681e      	ldr	r6, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <FminusClicked+0x268>)
 8001220:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8001222:	6086      	str	r6, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001224:	8099      	strh	r1, [r3, #4]
 8001226:	e79f      	b.n	8001168 <FminusClicked+0x124>
	Decay[LSB]  = AGC_decay[newAGC];
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <FminusClicked+0x25c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 800122a:	491e      	ldr	r1, [pc, #120]	; (80012a4 <FminusClicked+0x260>)
	Decay[LSB]  = AGC_decay[newAGC];
 800122c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001230:	481d      	ldr	r0, [pc, #116]	; (80012a8 <FminusClicked+0x264>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001232:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8001236:	681e      	ldr	r6, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <FminusClicked+0x268>)
 800123a:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 800123c:	6046      	str	r6, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 800123e:	8059      	strh	r1, [r3, #2]
 8001240:	e7b8      	b.n	80011b4 <FminusClicked+0x170>
	Decay[AM]   = AGC_decay[newAGC];
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <FminusClicked+0x25c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001244:	4917      	ldr	r1, [pc, #92]	; (80012a4 <FminusClicked+0x260>)
	Decay[AM]   = AGC_decay[newAGC];
 8001246:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800124a:	4817      	ldr	r0, [pc, #92]	; (80012a8 <FminusClicked+0x264>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 800124c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8001250:	681e      	ldr	r6, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <FminusClicked+0x268>)
 8001254:	7d61      	ldrb	r1, [r4, #21]
	Decay[AM]   = AGC_decay[newAGC];
 8001256:	6006      	str	r6, [r0, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	e7c5      	b.n	80011e8 <FminusClicked+0x1a4>
	Decay[CW]   = AGC_decay[newAGC];
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <FminusClicked+0x25c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 800125e:	4911      	ldr	r1, [pc, #68]	; (80012a4 <FminusClicked+0x260>)
	Decay[CW]   = AGC_decay[newAGC];
 8001260:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001264:	4810      	ldr	r0, [pc, #64]	; (80012a8 <FminusClicked+0x264>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001266:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 800126a:	681e      	ldr	r6, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <FminusClicked+0x268>)
 800126e:	7d61      	ldrb	r1, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8001270:	60c6      	str	r6, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001272:	80da      	strh	r2, [r3, #6]
 8001274:	e758      	b.n	8001128 <FminusClicked+0xe4>
 8001276:	bf00      	nop
 8001278:	2400c3d4 	.word	0x2400c3d4
 800127c:	24009ea8 	.word	0x24009ea8
 8001280:	2400c3dc 	.word	0x2400c3dc
 8001284:	24008e98 	.word	0x24008e98
 8001288:	240088e4 	.word	0x240088e4
 800128c:	45fa0000 	.word	0x45fa0000
 8001290:	2400780c 	.word	0x2400780c
 8001294:	24000680 	.word	0x24000680
 8001298:	24000a90 	.word	0x24000a90
 800129c:	2400445c 	.word	0x2400445c
 80012a0:	2400c3cc 	.word	0x2400c3cc
 80012a4:	24009ea4 	.word	0x24009ea4
 80012a8:	24002a98 	.word	0x24002a98
 80012ac:	2400804c 	.word	0x2400804c
 80012b0:	24008e94 	.word	0x24008e94
 80012b4:	20004000 	.word	0x20004000
 80012b8:	08012288 	.word	0x08012288
 80012bc:	08013288 	.word	0x08013288
 80012c0:	2400d7e2 	.word	0x2400d7e2
 80012c4:	24008058 	.word	0x24008058
 80012c8:	08014288 	.word	0x08014288
 80012cc:	08015288 	.word	0x08015288
 80012d0:	2400d7e0 	.word	0x2400d7e0
 80012d4:	08010288 	.word	0x08010288
 80012d8:	08011288 	.word	0x08011288

080012dc <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80012e0:	b510      	push	{r4, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 80012e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e6:	493b      	ldr	r1, [pc, #236]	; (80013d4 <HAL_GPIO_EXTI_Callback+0xf4>)
 80012e8:	483b      	ldr	r0, [pc, #236]	; (80013d8 <HAL_GPIO_EXTI_Callback+0xf8>)
 80012ea:	f000 fe7d 	bl	8001fe8 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 80012ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f2:	493a      	ldr	r1, [pc, #232]	; (80013dc <HAL_GPIO_EXTI_Callback+0xfc>)
 80012f4:	483a      	ldr	r0, [pc, #232]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x100>)
 80012f6:	f000 fe77 	bl	8001fe8 <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 80012fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012fe:	4a39      	ldr	r2, [pc, #228]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001300:	4935      	ldr	r1, [pc, #212]	; (80013d8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001302:	4839      	ldr	r0, [pc, #228]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x108>)
 8001304:	f00a fce8 	bl	800bcd8 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8001308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800130c:	4a37      	ldr	r2, [pc, #220]	; (80013ec <HAL_GPIO_EXTI_Callback+0x10c>)
 800130e:	4934      	ldr	r1, [pc, #208]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x100>)
 8001310:	4837      	ldr	r0, [pc, #220]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001312:	f00a fce1 	bl	800bcd8 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8001316:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x114>)
 8001318:	f44f 6280 	mov.w	r2, #1024	; 0x400

	// compute the direct FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);

	// if LSB, copy the LSB in the lower half (USB)
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800131c:	4c36      	ldr	r4, [pc, #216]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x118>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 800131e:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8001322:	f000 fe61 	bl	8001fe8 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 8001326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132a:	4a32      	ldr	r2, [pc, #200]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x114>)
 800132c:	492f      	ldr	r1, [pc, #188]	; (80013ec <HAL_GPIO_EXTI_Callback+0x10c>)
 800132e:	482d      	ldr	r0, [pc, #180]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001330:	f000 fd4c 	bl	8001dcc <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8001334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001338:	4930      	ldr	r1, [pc, #192]	; (80013fc <HAL_GPIO_EXTI_Callback+0x11c>)
 800133a:	4831      	ldr	r0, [pc, #196]	; (8001400 <HAL_GPIO_EXTI_Callback+0x120>)
 800133c:	f000 fe54 	bl	8001fe8 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8001340:	2301      	movs	r3, #1
 8001342:	2200      	movs	r2, #0
 8001344:	492e      	ldr	r1, [pc, #184]	; (8001400 <HAL_GPIO_EXTI_Callback+0x120>)
 8001346:	482f      	ldr	r0, [pc, #188]	; (8001404 <HAL_GPIO_EXTI_Callback+0x124>)
 8001348:	f00a fc30 	bl	800bbac <arm_cfft_f32>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800134c:	7823      	ldrb	r3, [r4, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d039      	beq.n	80013c6 <HAL_GPIO_EXTI_Callback+0xe6>
	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8001352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001356:	4a2c      	ldr	r2, [pc, #176]	; (8001408 <HAL_GPIO_EXTI_Callback+0x128>)
 8001358:	492c      	ldr	r1, [pc, #176]	; (800140c <HAL_GPIO_EXTI_Callback+0x12c>)
 800135a:	4829      	ldr	r0, [pc, #164]	; (8001400 <HAL_GPIO_EXTI_Callback+0x120>)
 800135c:	f00a fe78 	bl	800c050 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8001360:	2301      	movs	r3, #1
 8001362:	4929      	ldr	r1, [pc, #164]	; (8001408 <HAL_GPIO_EXTI_Callback+0x128>)
 8001364:	461a      	mov	r2, r3
 8001366:	4827      	ldr	r0, [pc, #156]	; (8001404 <HAL_GPIO_EXTI_Callback+0x124>)
 8001368:	f00a fc20 	bl	800bbac <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 800136c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001370:	4927      	ldr	r1, [pc, #156]	; (8001410 <HAL_GPIO_EXTI_Callback+0x130>)
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <HAL_GPIO_EXTI_Callback+0x134>)
 8001374:	f000 fe38 	bl	8001fe8 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8001378:	7823      	ldrb	r3, [r4, #0]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d807      	bhi.n	800138e <HAL_GPIO_EXTI_Callback+0xae>
 800137e:	e8df f003 	tbb	[pc, r3]
 8001382:	1d02      	.short	0x1d02
 8001384:	0f1d      	.short	0x0f1d
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 8001386:	4924      	ldr	r1, [pc, #144]	; (8001418 <HAL_GPIO_EXTI_Callback+0x138>)
 8001388:	4822      	ldr	r0, [pc, #136]	; (8001414 <HAL_GPIO_EXTI_Callback+0x134>)
 800138a:	f000 ff7d 	bl	8002288 <SDR_demodAM_AGC>


	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <HAL_GPIO_EXTI_Callback+0x13c>)
 8001390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001394:	4820      	ldr	r0, [pc, #128]	; (8001418 <HAL_GPIO_EXTI_Callback+0x138>)
 8001396:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8001398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 800139c:	f000 bdba 	b.w	8001f14 <SDR_float_to_DAC_audio>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 80013a0:	491d      	ldr	r1, [pc, #116]	; (8001418 <HAL_GPIO_EXTI_Callback+0x138>)
 80013a2:	481c      	ldr	r0, [pc, #112]	; (8001414 <HAL_GPIO_EXTI_Callback+0x134>)
 80013a4:	f000 ffec 	bl	8002380 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_GPIO_EXTI_Callback+0x140>)
 80013aa:	78db      	ldrb	r3, [r3, #3]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ee      	bne.n	800138e <HAL_GPIO_EXTI_Callback+0xae>
			SDR_CWPeak(fAudio, BSIZE);
 80013b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b4:	4818      	ldr	r0, [pc, #96]	; (8001418 <HAL_GPIO_EXTI_Callback+0x138>)
 80013b6:	f000 fedd 	bl	8002174 <SDR_CWPeak>
 80013ba:	e7e8      	b.n	800138e <HAL_GPIO_EXTI_Callback+0xae>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 80013bc:	4916      	ldr	r1, [pc, #88]	; (8001418 <HAL_GPIO_EXTI_Callback+0x138>)
 80013be:	4815      	ldr	r0, [pc, #84]	; (8001414 <HAL_GPIO_EXTI_Callback+0x134>)
 80013c0:	f000 ffde 	bl	8002380 <SDR_demodSSB_CW_AGC>
 80013c4:	e7e3      	b.n	800138e <HAL_GPIO_EXTI_Callback+0xae>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80013c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <HAL_GPIO_EXTI_Callback+0x120>)
 80013cc:	f000 fe28 	bl	8002020 <SDR_mirror_LSB>
 80013d0:	e7bf      	b.n	8001352 <HAL_GPIO_EXTI_Callback+0x72>
 80013d2:	bf00      	nop
 80013d4:	2000d000 	.word	0x2000d000
 80013d8:	20009000 	.word	0x20009000
 80013dc:	2000b000 	.word	0x2000b000
 80013e0:	20007000 	.word	0x20007000
 80013e4:	20006800 	.word	0x20006800
 80013e8:	24000684 	.word	0x24000684
 80013ec:	20006000 	.word	0x20006000
 80013f0:	240088d8 	.word	0x240088d8
 80013f4:	24001a98 	.word	0x24001a98
 80013f8:	2400c3dc 	.word	0x2400c3dc
 80013fc:	24000a98 	.word	0x24000a98
 8001400:	20002000 	.word	0x20002000
 8001404:	0801644c 	.word	0x0801644c
 8001408:	20000000 	.word	0x20000000
 800140c:	20004000 	.word	0x20004000
 8001410:	20001000 	.word	0x20001000
 8001414:	24002bac 	.word	0x24002bac
 8001418:	2400c3e0 	.word	0x2400c3e0
 800141c:	24004488 	.word	0x24004488
 8001420:	24008e98 	.word	0x24008e98

08001424 <ADC_Stream0_Handler>:

//-----------------------------------------------------------------------------  
// This the handler of the highest priority task interrupts, those generated
// by DMA2 Stream when a new ADC buffer is just filled
void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8001424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}
#endif


// compute the new NCO buffer, with the CWpitch offset if receiving CW  
if(CurrentMode == CW)
 8001428:	4b7c      	ldr	r3, [pc, #496]	; (800161c <ADC_Stream0_Handler+0x1f8>)
	pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 800142a:	4c7d      	ldr	r4, [pc, #500]	; (8001620 <ADC_Stream0_Handler+0x1fc>)
if(CurrentMode == CW)
 800142c:	781b      	ldrb	r3, [r3, #0]
	pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 800142e:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 8001432:	4a7c      	ldr	r2, [pc, #496]	; (8001624 <ADC_Stream0_Handler+0x200>)
 8001434:	2800      	cmp	r0, #0
 8001436:	bf18      	it	ne
 8001438:	460c      	movne	r4, r1
if(CurrentMode == CW)
 800143a:	2b03      	cmp	r3, #3
 800143c:	ed92 0a00 	vldr	s0, [r2]
{
 8001440:	ed2d 8b10 	vpush	{d8-d15}
 8001444:	b095      	sub	sp, #84	; 0x54
if(CurrentMode == CW)
 8001446:	f000 837c 	beq.w	8001b42 <ADC_Stream0_Handler+0x71e>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
else
	SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 800144a:	f000 fc03 	bl	8001c54 <SDR_ComputeLO>
 800144e:	f204 33fe 	addw	r3, r4, #1022	; 0x3fe
 8001452:	1ea2      	subs	r2, r4, #2

// compute the smoothed average value of the buffer, to be used as offset
// in the short words to floating point conversion routine  
sum = 0; k = BSIZE;
 8001454:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8001628 <ADC_Stream0_Handler+0x204>
while(k)
{
	sum += pR[k-1];
 8001458:	8819      	ldrh	r1, [r3, #0]
 800145a:	3b08      	subs	r3, #8
 800145c:	ee07 1a90 	vmov	s15, r1
	sum += pR[k-2];
 8001460:	88d9      	ldrh	r1, [r3, #6]
 8001462:	ee07 1a10 	vmov	s14, r1
	sum += pR[k-3];
 8001466:	8899      	ldrh	r1, [r3, #4]
	sum += pR[k-1];
 8001468:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	sum += pR[k-4];
 800146c:	8858      	ldrh	r0, [r3, #2]
	sum += pR[k-3];
 800146e:	ee07 1a90 	vmov	s15, r1
	sum += pR[k-2];
 8001472:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	sum += pR[k-4];
 8001476:	ee06 0a90 	vmov	s13, r0
while(k)
 800147a:	429a      	cmp	r2, r3
	sum += pR[k-3];
 800147c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sum += pR[k-4];
 8001480:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	ee77 7a86 	vadd.f32	s15, s15, s12
 800148c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001490:	ee35 5a27 	vadd.f32	s10, s10, s15
while(k)
 8001494:	d1e0      	bne.n	8001458 <ADC_Stream0_Handler+0x34>
	k-=4;
}

TestSampledValue=pR[BSIZE/2];
 8001496:	f8b4 2200 	ldrh.w	r2, [r4, #512]	; 0x200
 800149a:	2300      	movs	r3, #0

meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 800149c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800162c <ADC_Stream0_Handler+0x208>

// downconvert to zero IF, by multiplication by the exp(-jwt) signal
// generated by the NCO, and at the same time convert to floating point  
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80014a0:	4620      	mov	r0, r4
TestSampledValue=pR[BSIZE/2];
 80014a2:	ee07 2a90 	vmov	s15, r2
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80014a6:	4e62      	ldr	r6, [pc, #392]	; (8001630 <ADC_Stream0_Handler+0x20c>)
 80014a8:	ee25 5a07 	vmul.f32	s10, s10, s14
TestSampledValue=pR[BSIZE/2];
 80014ac:	4c61      	ldr	r4, [pc, #388]	; (8001634 <ADC_Stream0_Handler+0x210>)
 80014ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b2:	4d61      	ldr	r5, [pc, #388]	; (8001638 <ADC_Stream0_Handler+0x214>)
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80014b4:	4a61      	ldr	r2, [pc, #388]	; (800163c <ADC_Stream0_Handler+0x218>)
 80014b6:	eeb0 0a45 	vmov.f32	s0, s10
 80014ba:	4961      	ldr	r1, [pc, #388]	; (8001640 <ADC_Stream0_Handler+0x21c>)
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80014bc:	ed86 5a00 	vstr	s10, [r6]
TestSampledValue=pR[BSIZE/2];
 80014c0:	edc4 7a00 	vstr	s15, [r4]
 80014c4:	802b      	strh	r3, [r5, #0]
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80014c6:	f000 fcb3 	bl	8001e30 <SDR_downconvert_f32>
// A dividing by 16, order 4, CIC is used. Then a 4096-entry buffer is filled, and
// passed to the baseband interrupt routine, where it is additionally filtered with a
// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
//-------------------------------------------------------------------------

k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
 80014ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ce:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80016c8 <ADC_Stream0_Handler+0x2a4>
 80014d2:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 80016cc <ADC_Stream0_Handler+0x2a8>
while(k--)
 80014d6:	23ff      	movs	r3, #255	; 0xff
k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
 80014d8:	8029      	strh	r1, [r5, #0]
	//        which being separated in even and odd samples in advance becomes
	// (1 + 6z^-1 + z^-2) for odd samples and (4 + 4z^-1) for even samples, which, when summed, give :
	// odd + 6odd_old + odd_old2 + 4even + 4even_old =	odd + 6odd_old + odd_old2 + 4(even + even_old)

	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80014da:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
 80014de:	4959      	ldr	r1, [pc, #356]	; (8001644 <ADC_Stream0_Handler+0x220>)
 80014e0:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 80014e4:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 80016d0 <ADC_Stream0_Handler+0x2ac>
 80014e8:	ed91 4a00 	vldr	s8, [r1]
 80014ec:	4956      	ldr	r1, [pc, #344]	; (8001648 <ADC_Stream0_Handler+0x224>)
 80014ee:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 80016d4 <ADC_Stream0_Handler+0x2b0>
 80014f2:	edd1 4a00 	vldr	s9, [r1]
 80014f6:	4955      	ldr	r1, [pc, #340]	; (800164c <ADC_Stream0_Handler+0x228>)
 80014f8:	ed9c fa00 	vldr	s30, [ip]
 80014fc:	ed91 7a00 	vldr	s14, [r1]
 8001500:	4953      	ldr	r1, [pc, #332]	; (8001650 <ADC_Stream0_Handler+0x22c>)
 8001502:	edde ea00 	vldr	s29, [lr]
 8001506:	ed91 2a00 	vldr	s4, [r1]
 800150a:	4952      	ldr	r1, [pc, #328]	; (8001654 <ADC_Stream0_Handler+0x230>)
 800150c:	edd8 9a00 	vldr	s19, [r8]
 8001510:	edd1 7a00 	vldr	s15, [r1]
 8001514:	4950      	ldr	r1, [pc, #320]	; (8001658 <ADC_Stream0_Handler+0x234>)
 8001516:	edd9 fa00 	vldr	s31, [r9]
 800151a:	edd1 2a00 	vldr	s5, [r1]
 800151e:	494f      	ldr	r1, [pc, #316]	; (800165c <ADC_Stream0_Handler+0x238>)
 8001520:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 80016d8 <ADC_Stream0_Handler+0x2b4>
 8001524:	ed91 1a00 	vldr	s2, [r1]
 8001528:	494d      	ldr	r1, [pc, #308]	; (8001660 <ADC_Stream0_Handler+0x23c>)
 800152a:	4c4e      	ldr	r4, [pc, #312]	; (8001664 <ADC_Stream0_Handler+0x240>)
 800152c:	edd1 1a00 	vldr	s3, [r1]
 8001530:	494d      	ldr	r1, [pc, #308]	; (8001668 <ADC_Stream0_Handler+0x244>)
 8001532:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 80016dc <ADC_Stream0_Handler+0x2b8>
 8001536:	ed91 6a00 	vldr	s12, [r1]
 800153a:	494c      	ldr	r1, [pc, #304]	; (800166c <ADC_Stream0_Handler+0x248>)
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <ADC_Stream0_Handler+0x24c>)
 800153e:	edd1 aa00 	vldr	s21, [r1]
 8001542:	494c      	ldr	r1, [pc, #304]	; (8001674 <ADC_Stream0_Handler+0x250>)
 8001544:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 8001548:	edd1 6a00 	vldr	s13, [r1]
 800154c:	494a      	ldr	r1, [pc, #296]	; (8001678 <ADC_Stream0_Handler+0x254>)
 800154e:	ed91 aa00 	vldr	s20, [r1]
 8001552:	494a      	ldr	r1, [pc, #296]	; (800167c <ADC_Stream0_Handler+0x258>)
 8001554:	edd1 ba00 	vldr	s23, [r1]
 8001558:	4949      	ldr	r1, [pc, #292]	; (8001680 <ADC_Stream0_Handler+0x25c>)
 800155a:	ed91 ba00 	vldr	s22, [r1]
 800155e:	4949      	ldr	r1, [pc, #292]	; (8001684 <ADC_Stream0_Handler+0x260>)
 8001560:	ed91 3a00 	vldr	s6, [r1]
 8001564:	4948      	ldr	r1, [pc, #288]	; (8001688 <ADC_Stream0_Handler+0x264>)
 8001566:	edd1 ca00 	vldr	s25, [r1]
 800156a:	4948      	ldr	r1, [pc, #288]	; (800168c <ADC_Stream0_Handler+0x268>)
 800156c:	edd1 3a00 	vldr	s7, [r1]
 8001570:	4947      	ldr	r1, [pc, #284]	; (8001690 <ADC_Stream0_Handler+0x26c>)
 8001572:	ed91 ca00 	vldr	s24, [r1]
 8001576:	4947      	ldr	r1, [pc, #284]	; (8001694 <ADC_Stream0_Handler+0x270>)
 8001578:	ed91 ea00 	vldr	s28, [r1]
 800157c:	4946      	ldr	r1, [pc, #280]	; (8001698 <ADC_Stream0_Handler+0x274>)
 800157e:	ed91 9a00 	vldr	s18, [r1]
 8001582:	4946      	ldr	r1, [pc, #280]	; (800169c <ADC_Stream0_Handler+0x278>)
 8001584:	edd1 0a00 	vldr	s1, [r1]
 8001588:	4945      	ldr	r1, [pc, #276]	; (80016a0 <ADC_Stream0_Handler+0x27c>)
 800158a:	edcd 0a05 	vstr	s1, [sp, #20]
 800158e:	edd1 0a00 	vldr	s1, [r1]
 8001592:	4944      	ldr	r1, [pc, #272]	; (80016a4 <ADC_Stream0_Handler+0x280>)
 8001594:	edcd 0a07 	vstr	s1, [sp, #28]
 8001598:	edd1 0a00 	vldr	s1, [r1]
 800159c:	4942      	ldr	r1, [pc, #264]	; (80016a8 <ADC_Stream0_Handler+0x284>)
 800159e:	edcd 0a04 	vstr	s1, [sp, #16]
 80015a2:	edd1 0a00 	vldr	s1, [r1]
 80015a6:	4941      	ldr	r1, [pc, #260]	; (80016ac <ADC_Stream0_Handler+0x288>)
 80015a8:	edcd 0a02 	vstr	s1, [sp, #8]
 80015ac:	edd1 0a00 	vldr	s1, [r1]
 80015b0:	493f      	ldr	r1, [pc, #252]	; (80016b0 <ADC_Stream0_Handler+0x28c>)
 80015b2:	edcd 0a06 	vstr	s1, [sp, #24]
 80015b6:	edd1 0a00 	vldr	s1, [r1]
 80015ba:	493e      	ldr	r1, [pc, #248]	; (80016b4 <ADC_Stream0_Handler+0x290>)
 80015bc:	edcd 0a03 	vstr	s1, [sp, #12]
 80015c0:	edd1 0a00 	vldr	s1, [r1]
 80015c4:	493c      	ldr	r1, [pc, #240]	; (80016b8 <ADC_Stream0_Handler+0x294>)
 80015c6:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 80015ca:	edda 0a00 	vldr	s1, [sl]
 80015ce:	edcd 0a0f 	vstr	s1, [sp, #60]	; 0x3c
 80015d2:	edd4 0a00 	vldr	s1, [r4]
 80015d6:	4c39      	ldr	r4, [pc, #228]	; (80016bc <ADC_Stream0_Handler+0x298>)
 80015d8:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 80015dc:	edd4 0a00 	vldr	s1, [r4]
 80015e0:	4c37      	ldr	r4, [pc, #220]	; (80016c0 <ADC_Stream0_Handler+0x29c>)
 80015e2:	edcd 0a08 	vstr	s1, [sp, #32]
 80015e6:	edd4 0a00 	vldr	s1, [r4]
 80015ea:	4c36      	ldr	r4, [pc, #216]	; (80016c4 <ADC_Stream0_Handler+0x2a0>)
 80015ec:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 80015f0:	edd4 0a00 	vldr	s1, [r4]
 80015f4:	f9bb 4000 	ldrsh.w	r4, [fp]
 80015f8:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 80015fc:	eef0 0a64 	vmov.f32	s1, s9
 8001600:	4626      	mov	r6, r4
 8001602:	eef0 4a61 	vmov.f32	s9, s3
 8001606:	460c      	mov	r4, r1
 8001608:	eef0 1a4f 	vmov.f32	s3, s30
 800160c:	eeb0 fa4c 	vmov.f32	s30, s24
 8001610:	eeb0 ca6d 	vmov.f32	s24, s27
 8001614:	eef0 da4d 	vmov.f32	s27, s26
while(k--)
 8001618:	e160      	b.n	80018dc <ADC_Stream0_Handler+0x4b8>
 800161a:	bf00      	nop
 800161c:	2400c3dc 	.word	0x2400c3dc
 8001620:	2400cbe0 	.word	0x2400cbe0
 8001624:	24009ea8 	.word	0x24009ea8
 8001628:	00000000 	.word	0x00000000
 800162c:	3b000000 	.word	0x3b000000
 8001630:	2400c3c0 	.word	0x2400c3c0
 8001634:	2400c3d8 	.word	0x2400c3d8
 8001638:	24000610 	.word	0x24000610
 800163c:	2400805c 	.word	0x2400805c
 8001640:	2400784c 	.word	0x2400784c
 8001644:	24000584 	.word	0x24000584
 8001648:	24000580 	.word	0x24000580
 800164c:	240005bc 	.word	0x240005bc
 8001650:	240005b8 	.word	0x240005b8
 8001654:	240005b4 	.word	0x240005b4
 8001658:	240005b0 	.word	0x240005b0
 800165c:	2400058c 	.word	0x2400058c
 8001660:	24000588 	.word	0x24000588
 8001664:	2400060c 	.word	0x2400060c
 8001668:	240005cc 	.word	0x240005cc
 800166c:	240005c8 	.word	0x240005c8
 8001670:	24007854 	.word	0x24007854
 8001674:	240005c4 	.word	0x240005c4
 8001678:	240005c0 	.word	0x240005c0
 800167c:	24000594 	.word	0x24000594
 8001680:	24000590 	.word	0x24000590
 8001684:	240005dc 	.word	0x240005dc
 8001688:	240005d8 	.word	0x240005d8
 800168c:	240005d4 	.word	0x240005d4
 8001690:	240005d0 	.word	0x240005d0
 8001694:	24000598 	.word	0x24000598
 8001698:	240005e4 	.word	0x240005e4
 800169c:	240005a4 	.word	0x240005a4
 80016a0:	240005a0 	.word	0x240005a0
 80016a4:	240005fc 	.word	0x240005fc
 80016a8:	240005f8 	.word	0x240005f8
 80016ac:	240005f4 	.word	0x240005f4
 80016b0:	240005f0 	.word	0x240005f0
 80016b4:	240005ac 	.word	0x240005ac
 80016b8:	24008064 	.word	0x24008064
 80016bc:	24000608 	.word	0x24000608
 80016c0:	24000604 	.word	0x24000604
 80016c4:	24000600 	.word	0x24000600
 80016c8:	2400059c 	.word	0x2400059c
 80016cc:	240005ec 	.word	0x240005ec
 80016d0:	240005e8 	.word	0x240005e8
 80016d4:	240005e0 	.word	0x240005e0
 80016d8:	240005a8 	.word	0x240005a8
 80016dc:	2400057c 	.word	0x2400057c
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 2
	// now compute the couple of elements for the next step

	inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80016e0:	eeaa 6a85 	vfma.f32	s12, s21, s10

	inE2Rold = inER;                           inE2Iold = inEI;
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80016e4:	0799      	lsls	r1, r3, #30
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80016e6:	eeea 6a05 	vfma.f32	s13, s20, s10
 80016ea:	ee3d 4aa4 	vadd.f32	s8, s27, s9
 80016ee:	ee31 1a0c 	vadd.f32	s2, s2, s24
 80016f2:	eea1 6a25 	vfma.f32	s12, s2, s11
 80016f6:	eee4 6a25 	vfma.f32	s13, s8, s11
 80016fa:	ee76 4a07 	vadd.f32	s9, s12, s14
 80016fe:	ee36 4aa7 	vadd.f32	s8, s13, s15
	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001702:	f100 810d 	bmi.w	8001920 <ADC_Stream0_Handler+0x4fc>
	// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001706:	eeac 3a85 	vfma.f32	s6, s25, s10
 800170a:	eddd 6a00 	vldr	s13, [sp]
 800170e:	eeef 3a05 	vfma.f32	s7, s30, s10
 8001712:	ed9d 6a01 	vldr	s12, [sp, #4]
 8001716:	ee76 baab 	vadd.f32	s23, s13, s23

	inE3Rold  = inER;                          inE3Iold  = inEI;
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 800171a:	075f      	lsls	r7, r3, #29
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 800171c:	ee36 ba0b 	vadd.f32	s22, s12, s22
 8001720:	eeab 3aa5 	vfma.f32	s6, s23, s11
 8001724:	eeeb 3a25 	vfma.f32	s7, s22, s11
 8001728:	ee33 1a24 	vadd.f32	s2, s6, s9
 800172c:	ee73 0a84 	vadd.f32	s1, s7, s8
	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001730:	f100 8196 	bmi.w	8001a60 <ADC_Stream0_Handler+0x63c>
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 8
	// now compute the couple of elements for the next step

	inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 8001734:	eeef 9a85 	vfma.f32	s19, s31, s10
 8001738:	eddd 3a0b 	vldr	s7, [sp, #44]	; 0x2c
 800173c:	eea1 9a85 	vfma.f32	s18, s3, s10
 8001740:	ed9d 3a0a 	vldr	s6, [sp, #40]	; 0x28
 8001744:	ee7e eaa3 	vadd.f32	s29, s29, s7

	inE4Rold = inER;                           inE4Iold = inEI;
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001748:	0719      	lsls	r1, r3, #28
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800174a:	ee3e ea03 	vadd.f32	s28, s28, s6
 800174e:	eeee 9aa5 	vfma.f32	s19, s29, s11
 8001752:	eeae 9a25 	vfma.f32	s18, s28, s11
 8001756:	ee39 ba81 	vadd.f32	s22, s19, s2
 800175a:	ee79 ba20 	vadd.f32	s23, s18, s1
	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 800175e:	f100 819c 	bmi.w	8001a9a <ADC_Stream0_Handler+0x676>
	// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001762:	ed9d ea04 	vldr	s28, [sp, #16]

	inE5Rold  = inER;                          inE5Iold  = inEI;
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;

	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001766:	f013 0110 	ands.w	r1, r3, #16
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800176a:	ed9d 9a02 	vldr	s18, [sp, #8]
 800176e:	eddd ea06 	vldr	s29, [sp, #24]
 8001772:	eddd 9a03 	vldr	s19, [sp, #12]
 8001776:	eea9 ea05 	vfma.f32	s28, s18, s10
 800177a:	ed9d 3a05 	vldr	s6, [sp, #20]
 800177e:	eddd 3a11 	vldr	s7, [sp, #68]	; 0x44
 8001782:	eee9 ea85 	vfma.f32	s29, s19, s10
 8001786:	eddd 6a07 	vldr	s13, [sp, #28]
 800178a:	ee33 6a83 	vadd.f32	s12, s7, s6
 800178e:	ed9d 3a10 	vldr	s6, [sp, #64]	; 0x40
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001792:	9105      	str	r1, [sp, #20]
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001794:	ee73 6a26 	vadd.f32	s13, s6, s13
 8001798:	eea6 ea25 	vfma.f32	s28, s12, s11
 800179c:	eee6 eaa5 	vfma.f32	s29, s13, s11
 80017a0:	ee3e ea0b 	vadd.f32	s28, s28, s22
 80017a4:	ee7e eaab 	vadd.f32	s29, s29, s23
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80017a8:	f040 81a0 	bne.w	8001aec <ADC_Stream0_Handler+0x6c8>
	// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
	// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
	// a decimation by 16. Now compute the couple of elements for the next step

	inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80017ac:	ed9d 6a08 	vldr	s12, [sp, #32]
	// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
	// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

	// create a block of BSIZE*4 entries, which will be then decimated by 4

	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80017b0:	00b1      	lsls	r1, r6, #2
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80017b2:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80017b6:	3601      	adds	r6, #1
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80017b8:	eddd 3a09 	vldr	s7, [sp, #36]	; 0x24
 80017bc:	eee6 6a05 	vfma.f32	s13, s12, s10
 80017c0:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 80017c4:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80017c8:	b236      	sxth	r6, r6
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80017ca:	eea3 6a85 	vfma.f32	s12, s7, s10
 80017ce:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 80017d2:	ed9d 9a0f 	vldr	s18, [sp, #60]	; 0x3c
	//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

	if(idx < BSIZE*4)
 80017d6:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80017da:	ee73 3a23 	vadd.f32	s7, s6, s7
 80017de:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80017e2:	4fdc      	ldr	r7, [pc, #880]	; (8001b54 <ADC_Stream0_Handler+0x730>)
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80017e4:	ee33 3a09 	vadd.f32	s6, s6, s18
 80017e8:	eee3 6aa5 	vfma.f32	s13, s7, s11
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80017ec:	440f      	add	r7, r1
 80017ee:	eddf 3ada 	vldr	s7, [pc, #872]	; 8001b58 <ADC_Stream0_Handler+0x734>
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80017f2:	eea3 6a25 	vfma.f32	s12, s6, s11
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80017f6:	9704      	str	r7, [sp, #16]
 80017f8:	4fd8      	ldr	r7, [pc, #864]	; (8001b5c <ADC_Stream0_Handler+0x738>)
 80017fa:	4439      	add	r1, r7
 80017fc:	9f04      	ldr	r7, [sp, #16]
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80017fe:	ee76 6a8e 	vadd.f32	s13, s13, s28
 8001802:	ee36 6a2e 	vadd.f32	s12, s12, s29
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001806:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800180a:	ee26 6a23 	vmul.f32	s12, s12, s7
 800180e:	edc7 6a00 	vstr	s13, [r7]
 8001812:	ed81 6a00 	vstr	s12, [r1]
	if(idx < BSIZE*4)
 8001816:	f2c0 81e3 	blt.w	8001be0 <ADC_Stream0_Handler+0x7bc>

#endif

		// generate now an interrupt to signal the base band processing routine that it has a new buffer

		EXTI->SWIER1 |= GPIO_PIN_14;
 800181a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800181e:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8001822:	ed9d 9a02 	vldr	s18, [sp, #8]
 8001826:	eef0 3a4f 	vmov.f32	s7, s30
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	eeb0 3a6c 	vmov.f32	s6, s25
 8001830:	ed9d 6a08 	vldr	s12, [sp, #32]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001834:	eeb0 fa44 	vmov.f32	s30, s8
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001838:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800183c:	eef0 6a4a 	vmov.f32	s13, s20
 8001840:	edcd 9a06 	vstr	s19, [sp, #24]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001844:	eeb0 aa67 	vmov.f32	s20, s15
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001848:	ed8d 9a04 	vstr	s18, [sp, #16]
 800184c:	eef0 9a6f 	vmov.f32	s19, s31
 8001850:	eeb0 9a61 	vmov.f32	s18, s3
 8001854:	ed8d 6a0c 	vstr	s12, [sp, #48]	; 0x30
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001858:	eef0 1a60 	vmov.f32	s3, s1
		EXTI->SWIER1 |= GPIO_PIN_14;
 800185c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001860:	eef0 fa41 	vmov.f32	s31, s2
	inE6Rold = inER;                           inE6Iold = inEI;
 8001864:	ed9d 4a13 	vldr	s8, [sp, #76]	; 0x4c
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001868:	eeb0 6a6a 	vmov.f32	s12, s21
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800186c:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001870:	eef0 ca64 	vmov.f32	s25, s9
	inE6Rold = inER;                           inE6Iold = inEI;
 8001874:	eddd 4a12 	vldr	s9, [sp, #72]	; 0x48
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001878:	eef0 aa47 	vmov.f32	s21, s14
	inE5Rold  = inER;                          inE5Iold  = inEI;
 800187c:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001880:	ed8d ea08 	vstr	s28, [sp, #32]
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001884:	edcd ba03 	vstr	s23, [sp, #12]
 8001888:	ed8d ba02 	vstr	s22, [sp, #8]
	idx = 0;
 800188c:	9e05      	ldr	r6, [sp, #20]
		EXTI->SWIER1 |= GPIO_PIN_14;
 800188e:	60b9      	str	r1, [r7, #8]
	inE6Rold = inER;                           inE6Iold = inEI;
 8001890:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 8001894:	edcd 4a0d 	vstr	s9, [sp, #52]	; 0x34
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001898:	ed8d 7a07 	vstr	s14, [sp, #28]
	inE2Rold = inER;                           inE2Iold = inEI;
 800189c:	eef0 4a6d 	vmov.f32	s9, s27
	inE5Rold  = inER;                          inE5Iold  = inEI;
 80018a0:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
	inE2Rold = inER;                           inE2Iold = inEI;
 80018a4:	eeb0 1a4c 	vmov.f32	s2, s24
	inE3Rold  = inER;                          inE3Iold  = inEI;
 80018a8:	ed9d ba01 	vldr	s22, [sp, #4]
 80018ac:	eddd ba00 	vldr	s23, [sp]
	inE4Rold = inER;                           inE4Iold = inEI;
 80018b0:	ed9d ea0a 	vldr	s28, [sp, #40]	; 0x28
 80018b4:	eddd ea0b 	vldr	s29, [sp, #44]	; 0x2c
	inE5Rold  = inER;                          inE5Iold  = inEI;
 80018b8:	edcd 7a05 	vstr	s15, [sp, #20]
 80018bc:	3b01      	subs	r3, #1
	inE1Rold = inER;                           inE1Iold = inEI;
 80018be:	eef0 7a62 	vmov.f32	s15, s5
 80018c2:	eeb0 7a42 	vmov.f32	s14, s4
 80018c6:	3208      	adds	r2, #8
 80018c8:	eef0 0a4d 	vmov.f32	s1, s26
 80018cc:	b29b      	uxth	r3, r3
	inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 80018ce:	eef0 2a68 	vmov.f32	s5, s17
 80018d2:	3408      	adds	r4, #8
	inE1Rold = inER;                           inE1Iold = inEI;
 80018d4:	eeb0 4a48 	vmov.f32	s8, s16
	inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 80018d8:	eeb0 2a40 	vmov.f32	s4, s0
while(k--)
 80018dc:	4290      	cmp	r0, r2
 80018de:	d030      	beq.n	8001942 <ADC_Stream0_Handler+0x51e>
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80018e0:	eea2 7a05 	vfma.f32	s14, s4, s10
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80018e4:	ed12 0a01 	vldr	s0, [r2, #-4]
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80018e8:	eee2 7a85 	vfma.f32	s15, s5, s10
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80018ec:	ed12 8a02 	vldr	s16, [r2, #-8]
 80018f0:	ed54 8a01 	vldr	s17, [r4, #-4]
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 80018f4:	07df      	lsls	r7, r3, #31
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80018f6:	ed14 da02 	vldr	s26, [r4, #-8]
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80018fa:	ee34 4a08 	vadd.f32	s8, s8, s16
 80018fe:	ee70 0a8d 	vadd.f32	s1, s1, s26
 8001902:	ee37 7a00 	vadd.f32	s14, s14, s0
 8001906:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800190a:	eea4 7a25 	vfma.f32	s14, s8, s11
 800190e:	eee0 7aa5 	vfma.f32	s15, s1, s11
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001912:	f57f aee5 	bpl.w	80016e0 <ADC_Stream0_Handler+0x2bc>
		tmp1R = outR; tmp1I = outI;  // save the even element produced
 8001916:	eef0 da67 	vmov.f32	s27, s15
 800191a:	eeb0 ca47 	vmov.f32	s24, s14
 800191e:	e7cd      	b.n	80018bc <ADC_Stream0_Handler+0x498>
 8001920:	eef0 6a4a 	vmov.f32	s13, s20
		tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001924:	edcd 4a00 	vstr	s9, [sp]
 8001928:	eeb0 6a6a 	vmov.f32	s12, s21
 800192c:	ed8d 4a01 	vstr	s8, [sp, #4]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001930:	eeb0 aa67 	vmov.f32	s20, s15
 8001934:	eef0 aa47 	vmov.f32	s21, s14
	inE2Rold = inER;                           inE2Iold = inEI;
 8001938:	eef0 4a6d 	vmov.f32	s9, s27
 800193c:	eeb0 1a4c 	vmov.f32	s2, s24
 8001940:	e7bc      	b.n	80018bc <ADC_Stream0_Handler+0x498>
 8001942:	4a87      	ldr	r2, [pc, #540]	; (8001b60 <ADC_Stream0_Handler+0x73c>)
 8001944:	eeb0 ca4f 	vmov.f32	s24, s30
 8001948:	eeb0 fa61 	vmov.f32	s30, s3
 800194c:	edc9 fa00 	vstr	s31, [r9]
 8001950:	ed82 9a00 	vstr	s18, [r2]
 8001954:	eef0 1a64 	vmov.f32	s3, s9
 8001958:	4a82      	ldr	r2, [pc, #520]	; (8001b64 <ADC_Stream0_Handler+0x740>)
 800195a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195e:	edc8 9a00 	vstr	s19, [r8]
 8001962:	ed82 ea00 	vstr	s28, [r2]
 8001966:	4a80      	ldr	r2, [pc, #512]	; (8001b68 <ADC_Stream0_Handler+0x744>)
 8001968:	edce ea00 	vstr	s29, [lr]
 800196c:	ed82 2a00 	vstr	s4, [r2]
 8001970:	4a7e      	ldr	r2, [pc, #504]	; (8001b6c <ADC_Stream0_Handler+0x748>)
 8001972:	ed8c fa00 	vstr	s30, [ip]
 8001976:	ed82 7a00 	vstr	s14, [r2]
 800197a:	4a7d      	ldr	r2, [pc, #500]	; (8001b70 <ADC_Stream0_Handler+0x74c>)
 800197c:	ed82 4a00 	vstr	s8, [r2]
 8001980:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <ADC_Stream0_Handler+0x750>)
 8001982:	edc2 2a00 	vstr	s5, [r2]
 8001986:	4a7c      	ldr	r2, [pc, #496]	; (8001b78 <ADC_Stream0_Handler+0x754>)
 8001988:	edc2 7a00 	vstr	s15, [r2]
 800198c:	4a7b      	ldr	r2, [pc, #492]	; (8001b7c <ADC_Stream0_Handler+0x758>)
 800198e:	eddd 7a02 	vldr	s15, [sp, #8]
 8001992:	edc2 0a00 	vstr	s1, [r2]
 8001996:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <ADC_Stream0_Handler+0x75c>)
 8001998:	edc2 aa00 	vstr	s21, [r2]
 800199c:	4a79      	ldr	r2, [pc, #484]	; (8001b84 <ADC_Stream0_Handler+0x760>)
 800199e:	ed82 6a00 	vstr	s12, [r2]
 80019a2:	4a79      	ldr	r2, [pc, #484]	; (8001b88 <ADC_Stream0_Handler+0x764>)
 80019a4:	ed82 1a00 	vstr	s2, [r2]
 80019a8:	4a78      	ldr	r2, [pc, #480]	; (8001b8c <ADC_Stream0_Handler+0x768>)
 80019aa:	ed82 aa00 	vstr	s20, [r2]
 80019ae:	4a78      	ldr	r2, [pc, #480]	; (8001b90 <ADC_Stream0_Handler+0x76c>)
 80019b0:	edc2 6a00 	vstr	s13, [r2]
 80019b4:	4a77      	ldr	r2, [pc, #476]	; (8001b94 <ADC_Stream0_Handler+0x770>)
 80019b6:	edc2 1a00 	vstr	s3, [r2]
 80019ba:	4a77      	ldr	r2, [pc, #476]	; (8001b98 <ADC_Stream0_Handler+0x774>)
 80019bc:	edc2 ca00 	vstr	s25, [r2]
 80019c0:	4a76      	ldr	r2, [pc, #472]	; (8001b9c <ADC_Stream0_Handler+0x778>)
 80019c2:	ed82 3a00 	vstr	s6, [r2]
 80019c6:	4a76      	ldr	r2, [pc, #472]	; (8001ba0 <ADC_Stream0_Handler+0x77c>)
 80019c8:	edc2 ba00 	vstr	s23, [r2]
 80019cc:	4a75      	ldr	r2, [pc, #468]	; (8001ba4 <ADC_Stream0_Handler+0x780>)
 80019ce:	ed82 ca00 	vstr	s24, [r2]
 80019d2:	4a75      	ldr	r2, [pc, #468]	; (8001ba8 <ADC_Stream0_Handler+0x784>)
 80019d4:	edc2 3a00 	vstr	s7, [r2]
 80019d8:	4a74      	ldr	r2, [pc, #464]	; (8001bac <ADC_Stream0_Handler+0x788>)
 80019da:	ed82 ba00 	vstr	s22, [r2]
 80019de:	4a74      	ldr	r2, [pc, #464]	; (8001bb0 <ADC_Stream0_Handler+0x78c>)
 80019e0:	edc2 7a00 	vstr	s15, [r2]
 80019e4:	eddd 7a04 	vldr	s15, [sp, #16]
 80019e8:	4a72      	ldr	r2, [pc, #456]	; (8001bb4 <ADC_Stream0_Handler+0x790>)
 80019ea:	edc2 7a00 	vstr	s15, [r2]
 80019ee:	eddd 7a05 	vldr	s15, [sp, #20]
 80019f2:	4a71      	ldr	r2, [pc, #452]	; (8001bb8 <ADC_Stream0_Handler+0x794>)
 80019f4:	edc2 7a00 	vstr	s15, [r2]
 80019f8:	eddd 7a03 	vldr	s15, [sp, #12]
 80019fc:	4a6f      	ldr	r2, [pc, #444]	; (8001bbc <ADC_Stream0_Handler+0x798>)
 80019fe:	edc2 7a00 	vstr	s15, [r2]
 8001a02:	eddd 7a06 	vldr	s15, [sp, #24]
 8001a06:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <ADC_Stream0_Handler+0x79c>)
 8001a08:	802b      	strh	r3, [r5, #0]
 8001a0a:	edc2 7a00 	vstr	s15, [r2]
 8001a0e:	eddd 7a07 	vldr	s15, [sp, #28]
 8001a12:	4a6c      	ldr	r2, [pc, #432]	; (8001bc4 <ADC_Stream0_Handler+0x7a0>)
 8001a14:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <ADC_Stream0_Handler+0x7a4>)
 8001a16:	edc2 7a00 	vstr	s15, [r2]
 8001a1a:	eddd 7a08 	vldr	s15, [sp, #32]
 8001a1e:	4a6b      	ldr	r2, [pc, #428]	; (8001bcc <ADC_Stream0_Handler+0x7a8>)
 8001a20:	f8ab 6000 	strh.w	r6, [fp]
 8001a24:	edc2 7a00 	vstr	s15, [r2]
 8001a28:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
 8001a30:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <ADC_Stream0_Handler+0x7ac>)
 8001a36:	edc3 7a00 	vstr	s15, [r3]
 8001a3a:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <ADC_Stream0_Handler+0x7b0>)
 8001a40:	edc3 7a00 	vstr	s15, [r3]
 8001a44:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8001a48:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <ADC_Stream0_Handler+0x7b4>)
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
 8001a4e:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8001a52:	edca 7a00 	vstr	s15, [sl]
	}

	// LED_YELLOW_OFF;

}
 8001a56:	b015      	add	sp, #84	; 0x54
 8001a58:	ecbd 8b10 	vpop	{d8-d15}
 8001a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a60:	eeb0 ba46 	vmov.f32	s22, s12
		tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001a64:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 8001a68:	eef0 ba66 	vmov.f32	s23, s13
 8001a6c:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 8001a70:	eef0 3a4f 	vmov.f32	s7, s30
 8001a74:	eeb0 3a6c 	vmov.f32	s6, s25
 8001a78:	eef0 6a4a 	vmov.f32	s13, s20
 8001a7c:	eeb0 6a6a 	vmov.f32	s12, s21
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a80:	eef0 ca64 	vmov.f32	s25, s9
 8001a84:	eeb0 fa44 	vmov.f32	s30, s8
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a88:	eeb0 aa67 	vmov.f32	s20, s15
 8001a8c:	eef0 aa47 	vmov.f32	s21, s14
	inE2Rold = inER;                           inE2Iold = inEI;
 8001a90:	eef0 4a6d 	vmov.f32	s9, s27
 8001a94:	eeb0 1a4c 	vmov.f32	s2, s24
 8001a98:	e710      	b.n	80018bc <ADC_Stream0_Handler+0x498>
 8001a9a:	eeb0 ea43 	vmov.f32	s28, s6
		tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001a9e:	edcd ba10 	vstr	s23, [sp, #64]	; 0x40
 8001aa2:	eef0 ea63 	vmov.f32	s29, s7
 8001aa6:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 8001aaa:	eef0 3a4f 	vmov.f32	s7, s30
	inE3Rold  = inER;                          inE3Iold  = inEI;
 8001aae:	ed9d ba01 	vldr	s22, [sp, #4]
 8001ab2:	eeb0 3a6c 	vmov.f32	s6, s25
 8001ab6:	eddd ba00 	vldr	s23, [sp]
 8001aba:	eef0 6a4a 	vmov.f32	s13, s20
 8001abe:	eeb0 6a6a 	vmov.f32	s12, s21
 8001ac2:	eeb0 9a61 	vmov.f32	s18, s3
 8001ac6:	eef0 9a6f 	vmov.f32	s19, s31
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001aca:	eef0 ca64 	vmov.f32	s25, s9
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001ace:	eef0 fa41 	vmov.f32	s31, s2
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001ad2:	eeb0 fa44 	vmov.f32	s30, s8
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001ad6:	eeb0 aa67 	vmov.f32	s20, s15
 8001ada:	eef0 aa47 	vmov.f32	s21, s14
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001ade:	eef0 1a60 	vmov.f32	s3, s1
	inE2Rold = inER;                           inE2Iold = inEI;
 8001ae2:	eef0 4a6d 	vmov.f32	s9, s27
 8001ae6:	eeb0 1a4c 	vmov.f32	s2, s24
 8001aea:	e6e7      	b.n	80018bc <ADC_Stream0_Handler+0x498>
 8001aec:	eddd 6a02 	vldr	s13, [sp, #8]
 8001af0:	eef0 3a4f 	vmov.f32	s7, s30
 8001af4:	edcd 9a06 	vstr	s19, [sp, #24]
 8001af8:	eeb0 3a6c 	vmov.f32	s6, s25
 8001afc:	edcd 6a04 	vstr	s13, [sp, #16]
 8001b00:	eeb0 6a6a 	vmov.f32	s12, s21
 8001b04:	eef0 6a4a 	vmov.f32	s13, s20
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b08:	edcd ba03 	vstr	s23, [sp, #12]
 8001b0c:	eeb0 9a61 	vmov.f32	s18, s3
 8001b10:	ed8d ba02 	vstr	s22, [sp, #8]
 8001b14:	eef0 9a6f 	vmov.f32	s19, s31
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001b18:	edcd ea13 	vstr	s29, [sp, #76]	; 0x4c
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b1c:	eeb0 fa44 	vmov.f32	s30, s8
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001b20:	ed8d ea12 	vstr	s28, [sp, #72]	; 0x48
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b24:	eef0 ca64 	vmov.f32	s25, s9
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b28:	eeb0 aa67 	vmov.f32	s20, s15
 8001b2c:	eef0 aa47 	vmov.f32	s21, s14
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b30:	eef0 1a60 	vmov.f32	s3, s1
 8001b34:	eef0 fa41 	vmov.f32	s31, s2
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001b38:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8001b3c:	edcd 7a07 	vstr	s15, [sp, #28]
 8001b40:	e6ac      	b.n	800189c <ADC_Stream0_Handler+0x478>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <ADC_Stream0_Handler+0x7b8>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001b4c:	f000 f882 	bl	8001c54 <SDR_ComputeLO>
 8001b50:	e47d      	b.n	800144e <ADC_Stream0_Handler+0x2a>
 8001b52:	bf00      	nop
 8001b54:	2000d000 	.word	0x2000d000
 8001b58:	34000000 	.word	0x34000000
 8001b5c:	2000b000 	.word	0x2000b000
 8001b60:	240005e4 	.word	0x240005e4
 8001b64:	24000598 	.word	0x24000598
 8001b68:	240005b8 	.word	0x240005b8
 8001b6c:	240005bc 	.word	0x240005bc
 8001b70:	24000584 	.word	0x24000584
 8001b74:	240005b0 	.word	0x240005b0
 8001b78:	240005b4 	.word	0x240005b4
 8001b7c:	24000580 	.word	0x24000580
 8001b80:	240005c8 	.word	0x240005c8
 8001b84:	240005cc 	.word	0x240005cc
 8001b88:	2400058c 	.word	0x2400058c
 8001b8c:	240005c0 	.word	0x240005c0
 8001b90:	240005c4 	.word	0x240005c4
 8001b94:	24000588 	.word	0x24000588
 8001b98:	240005d8 	.word	0x240005d8
 8001b9c:	240005dc 	.word	0x240005dc
 8001ba0:	24000594 	.word	0x24000594
 8001ba4:	240005d0 	.word	0x240005d0
 8001ba8:	240005d4 	.word	0x240005d4
 8001bac:	24000590 	.word	0x24000590
 8001bb0:	240005f8 	.word	0x240005f8
 8001bb4:	240005fc 	.word	0x240005fc
 8001bb8:	240005a4 	.word	0x240005a4
 8001bbc:	240005f0 	.word	0x240005f0
 8001bc0:	240005f4 	.word	0x240005f4
 8001bc4:	240005a0 	.word	0x240005a0
 8001bc8:	2400060c 	.word	0x2400060c
 8001bcc:	24000608 	.word	0x24000608
 8001bd0:	240005ac 	.word	0x240005ac
 8001bd4:	24000600 	.word	0x24000600
 8001bd8:	24000604 	.word	0x24000604
 8001bdc:	24009ea0 	.word	0x24009ea0
 8001be0:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8001be4:	eef0 3a4f 	vmov.f32	s7, s30
 8001be8:	eeb0 3a6c 	vmov.f32	s6, s25
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001bec:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
 8001bf0:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001bf4:	eeb0 6a6a 	vmov.f32	s12, s21
 8001bf8:	eddd 6a08 	vldr	s13, [sp, #32]
 8001bfc:	eeb0 9a61 	vmov.f32	s18, s3
 8001c00:	eef0 9a6f 	vmov.f32	s19, s31
 8001c04:	ed8d ea08 	vstr	s28, [sp, #32]
 8001c08:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001c0c:	eeb0 fa44 	vmov.f32	s30, s8
 8001c10:	eddd 6a03 	vldr	s13, [sp, #12]
 8001c14:	eef0 ca64 	vmov.f32	s25, s9
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001c18:	edcd ba03 	vstr	s23, [sp, #12]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001c1c:	eef0 aa47 	vmov.f32	s21, s14
 8001c20:	edcd 6a06 	vstr	s13, [sp, #24]
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001c24:	eef0 1a60 	vmov.f32	s3, s1
 8001c28:	eddd 6a02 	vldr	s13, [sp, #8]
 8001c2c:	eef0 fa41 	vmov.f32	s31, s2
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001c30:	ed8d ba02 	vstr	s22, [sp, #8]
 8001c34:	edcd 6a04 	vstr	s13, [sp, #16]
 8001c38:	eef0 6a4a 	vmov.f32	s13, s20
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001c3c:	eeb0 aa67 	vmov.f32	s20, s15
	inE6Rold = inER;                           inE6Iold = inEI;
 8001c40:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8001c44:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8001c48:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8001c4c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001c50:	e772      	b.n	8001b38 <ADC_Stream0_Handler+0x714>
 8001c52:	bf00      	nop

08001c54 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001c54:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001c56:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <SDR_ComputeLO+0x140>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001c60:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	d171      	bne.n	8001d4e <SDR_ComputeLO+0xfa>
 8001c6a:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <SDR_ComputeLO+0x144>)
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <SDR_ComputeLO+0x148>)
 8001c6e:	ed92 8a00 	vldr	s16, [r2]
 8001c72:	ed93 6a00 	vldr	s12, [r3]
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c76:	484a      	ldr	r0, [pc, #296]	; (8001da0 <SDR_ComputeLO+0x14c>)
 8001c78:	4c4a      	ldr	r4, [pc, #296]	; (8001da4 <SDR_ComputeLO+0x150>)
 8001c7a:	4d4b      	ldr	r5, [pc, #300]	; (8001da8 <SDR_ComputeLO+0x154>)
 8001c7c:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <SDR_ComputeLO+0x158>)
 8001c7e:	edd0 5a00 	vldr	s11, [r0]
 8001c82:	edd4 7a00 	vldr	s15, [r4]
 8001c86:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001c8a:	ed95 5a00 	vldr	s10, [r5]
 8001c8e:	4a48      	ldr	r2, [pc, #288]	; (8001db0 <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c90:	ee27 7a88 	vmul.f32	s14, s15, s16
 8001c94:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c96:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8001c9a:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c9c:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ca0:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ca4:	ee27 7a25 	vmul.f32	s14, s14, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ca8:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cac:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cb0:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cb4:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cb8:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cbc:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cc0:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cc4:	ee67 7aa5 	vmul.f32	s15, s15, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cc8:	ee27 7a25 	vmul.f32	s14, s14, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ccc:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cd0:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cd4:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cd8:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cdc:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ce0:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ce4:	ee26 7aa5 	vmul.f32	s14, s13, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ce8:	ee67 7aa5 	vmul.f32	s15, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cec:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cf0:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cf4:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cf8:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cfc:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d00:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001d04:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d08:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001d0c:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 8001d10:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d12:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001d16:	d1bb      	bne.n	8001c90 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001d18:	ee67 5a07 	vmul.f32	s11, s14, s14
 8001d1c:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8001db4 <SDR_ComputeLO+0x160>
 8001d20:	edc4 7a00 	vstr	s15, [r4]
 8001d24:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001db8 <SDR_ComputeLO+0x164>
 8001d28:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <SDR_ComputeLO+0x168>)
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <SDR_ComputeLO+0x16c>)
 8001d30:	ed85 5a00 	vstr	s10, [r5]
 8001d34:	edc2 6a00 	vstr	s13, [r2]
 8001d38:	ed83 7a00 	vstr	s14, [r3]
 8001d3c:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 8001d40:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001d44:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001d48:	edc0 7a00 	vstr	s15, [r0]
}	
 8001d4c:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001d4e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001dc4 <SDR_ComputeLO+0x170>
 8001d52:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <SDR_ComputeLO+0x174>)
 8001d54:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001d58:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001d5c:	ed92 7a00 	vldr	s14, [r2]
 8001d60:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001d64:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001d68:	eeb0 0b49 	vmov.f64	d0, d9
 8001d6c:	f00c fcf8 	bl	800e760 <cos>
 8001d70:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001d76:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001d7a:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001d7e:	f00c fd2b 	bl	800e7d8 <sin>
 8001d82:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <SDR_ComputeLO+0x148>)
 8001d88:	eeb1 6a46 	vneg.f32	s12, s12
 8001d8c:	ed83 6a00 	vstr	s12, [r3]
 8001d90:	e771      	b.n	8001c76 <SDR_ComputeLO+0x22>
 8001d92:	bf00      	nop
 8001d94:	240000e4 	.word	0x240000e4
 8001d98:	24000614 	.word	0x24000614
 8001d9c:	24000624 	.word	0x24000624
 8001da0:	240000e0 	.word	0x240000e0
 8001da4:	2400063c 	.word	0x2400063c
 8001da8:	240000f0 	.word	0x240000f0
 8001dac:	24003bec 	.word	0x24003bec
 8001db0:	2400459c 	.word	0x2400459c
 8001db4:	46000200 	.word	0x46000200
 8001db8:	39000000 	.word	0x39000000
 8001dbc:	24000640 	.word	0x24000640
 8001dc0:	24000644 	.word	0x24000644
 8001dc4:	40c90fdb 	.word	0x40c90fdb
 8001dc8:	24004484 	.word	0x24004484

08001dcc <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	d02e      	beq.n	8001e2e <SDR_2R_toC_f32+0x62>
 8001dd0:	3010      	adds	r0, #16
 8001dd2:	3110      	adds	r1, #16
 8001dd4:	3220      	adds	r2, #32
{
 8001dd6:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001dd8:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	f100 0010 	add.w	r0, r0, #16
 8001de2:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001de6:	f842 4c20 	str.w	r4, [r2, #-32]
 8001dea:	f102 0220 	add.w	r2, r2, #32
 8001dee:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8001df2:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001df6:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 8001dfa:	f842 4c38 	str.w	r4, [r2, #-56]
 8001dfe:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8001e02:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001e06:	f850 4c18 	ldr.w	r4, [r0, #-24]
 8001e0a:	f842 4c30 	str.w	r4, [r2, #-48]
 8001e0e:	f851 4c18 	ldr.w	r4, [r1, #-24]
 8001e12:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001e16:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8001e1a:	f842 4c28 	str.w	r4, [r2, #-40]
 8001e1e:	f851 4c14 	ldr.w	r4, [r1, #-20]
 8001e22:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 8001e26:	d1d7      	bne.n	8001dd8 <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 8001e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	4770      	bx	lr

08001e30 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001e30:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <SDR_downconvert_f32+0xd8>)
 8001e32:	3110      	adds	r1, #16
 8001e34:	3210      	adds	r2, #16
 8001e36:	3008      	adds	r0, #8
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e38:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001f0c <SDR_downconvert_f32+0xdc>
{
 8001e3c:	b430      	push	{r4, r5}
 8001e3e:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 8001e42:	4c33      	ldr	r4, [pc, #204]	; (8001f10 <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e44:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8001e48:	3310      	adds	r3, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001e4a:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 8001e4e:	3008      	adds	r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e50:	ee06 ca10 	vmov	s12, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e54:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 8001e58:	3110      	adds	r1, #16
 8001e5a:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e5c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e60:	ee06 ca90 	vmov	s13, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001e64:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 8001e68:	3210      	adds	r2, #16
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e6e:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001e72:	ee07 ca90 	vmov	s15, ip
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001e76:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e7a:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e7e:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001e82:	ee07 ca10 	vmov	s14, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e8a:	ee66 6aa5 	vmul.f32	s13, s13, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001e8e:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001e92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001e96:	ee77 7ac0 	vsub.f32	s15, s15, s0
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001e9a:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001e9e:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001ea2:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001ea6:	ee67 7aa5 	vmul.f32	s15, s15, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001eaa:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001eae:	ee27 7a25 	vmul.f32	s14, s14, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001eb2:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001eb6:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001eba:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001ebe:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001ec2:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001ec6:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001eca:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001ece:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001ed2:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001ed6:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001eda:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001ede:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001ee2:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001ee6:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 8001eea:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef0:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001ef4:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efc:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001f00:	d1a0      	bne.n	8001e44 <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001f02:	bc30      	pop	{r4, r5}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	24003bec 	.word	0x24003bec
 8001f0c:	3a000000 	.word	0x3a000000
 8001f10:	2400459c 	.word	0x2400459c

08001f14 <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 8001f14:	b470      	push	{r4, r5, r6}
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001f16:	0894      	lsrs	r4, r2, #2
  while(blkCnt--)
 8001f18:	2c00      	cmp	r4, #0
 8001f1a:	d04a      	beq.n	8001fb2 <SDR_float_to_DAC_audio+0x9e>
 8001f1c:	1e66      	subs	r6, r4, #1
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f1e:	4c30      	ldr	r4, [pc, #192]	; (8001fe0 <SDR_float_to_DAC_audio+0xcc>)
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f24:	b2b3      	uxth	r3, r6
 8001f26:	f100 0620 	add.w	r6, r0, #32
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f2a:	edd4 7a00 	vldr	s15, [r4]
 8001f2e:	3010      	adds	r0, #16
 8001f30:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 8001f34:	460b      	mov	r3, r1
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f36:	eeb0 5a47 	vmov.f32	s10, s14
 8001f3a:	ed10 6a02 	vldr	s12, [r0, #-8]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f3e:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f42:	ed50 6a04 	vldr	s13, [r0, #-16]
 8001f46:	eef0 5a47 	vmov.f32	s11, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f4a:	2500      	movs	r5, #0
 8001f4c:	eea7 5a86 	vfma.f32	s10, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f50:	ed10 6a01 	vldr	s12, [r0, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f54:	462c      	mov	r4, r5
 8001f56:	3010      	adds	r0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f58:	eee7 4a86 	vfma.f32	s9, s15, s12
 8001f5c:	3308      	adds	r3, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f5e:	eee6 5aa7 	vfma.f32	s11, s13, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f62:	ed50 6a07 	vldr	s13, [r0, #-28]	; 0xffffffe4
  while(blkCnt--)
 8001f66:	4286      	cmp	r6, r0
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f68:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f6c:	eeb0 6a64 	vmov.f32	s12, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f70:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f74:	ee15 ca10 	vmov	ip, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f78:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f7c:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f80:	f36c 050f 	bfi	r5, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f84:	eee7 4aa6 	vfma.f32	s9, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f88:	ee15 ca90 	vmov	ip, s11
 8001f8c:	f36c 040f 	bfi	r4, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f90:	ee16 ca10 	vmov	ip, s12
 8001f94:	f36c 451f 	bfi	r5, ip, #16, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f98:	eef0 6a64 	vmov.f32	s13, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f9c:	f843 5c04 	str.w	r5, [r3, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001fa0:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001fa4:	ee16 ca90 	vmov	ip, s13
 8001fa8:	f36c 441f 	bfi	r4, ip, #16, #16
 8001fac:	f843 4c08 	str.w	r4, [r3, #-8]
  while(blkCnt--)
 8001fb0:	d1c1      	bne.n	8001f36 <SDR_float_to_DAC_audio+0x22>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001fb2:	0092      	lsls	r2, r2, #2
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb4:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8001fb8:	b15a      	cbz	r2, 8001fd2 <SDR_float_to_DAC_audio+0xbe>
 8001fba:	3a01      	subs	r2, #1
 8001fbc:	f101 0320 	add.w	r3, r1, #32
      SCB->DCCMVAC = op_addr;
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <SDR_float_to_DAC_audio+0xd0>)
 8001fc2:	f022 021f 	bic.w	r2, r2, #31
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8001fcc:	3120      	adds	r1, #32
    while (op_size > 0) {
 8001fce:	4299      	cmp	r1, r3
 8001fd0:	d1fa      	bne.n	8001fc8 <SDR_float_to_DAC_audio+0xb4>
 8001fd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fd6:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001fda:	bc70      	pop	{r4, r5, r6}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	240043dc 	.word	0x240043dc
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001fe8:	0892      	lsrs	r2, r2, #2
 8001fea:	d017      	beq.n	800201c <SDR_memcpy_f32+0x34>
 8001fec:	3110      	adds	r1, #16
 8001fee:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001ff0:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001ff4:	3a01      	subs	r2, #1
 8001ff6:	f101 0110 	add.w	r1, r1, #16
 8001ffa:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001ffe:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8002002:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8002006:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 800200a:	f851 3c18 	ldr.w	r3, [r1, #-24]
 800200e:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8002012:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8002016:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 800201a:	d1e9      	bne.n	8001ff0 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8002020:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002022:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8002026:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002028:	440b      	add	r3, r1
	while(blkCnt--)
 800202a:	d037      	beq.n	800209c <SDR_mirror_LSB+0x7c>
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	1e91      	subs	r1, r2, #2
{
 8002030:	b410      	push	{r4}
 8002032:	f1a3 0220 	sub.w	r2, r3, #32
 8002036:	f1a3 041c 	sub.w	r4, r3, #28
 800203a:	f100 0328 	add.w	r3, r0, #40	; 0x28
 800203e:	4402      	add	r2, r0
 8002040:	4420      	add	r0, r4
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002042:	6a14      	ldr	r4, [r2, #32]
	while(blkCnt--)
 8002044:	3901      	subs	r1, #1
 8002046:	3a20      	subs	r2, #32
 8002048:	3820      	subs	r0, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800204a:	f843 4c20 	str.w	r4, [r3, #-32]
 800204e:	3320      	adds	r3, #32
 8002050:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8002054:	eef1 7a67 	vneg.f32	s15, s15
 8002058:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800205c:	6b94      	ldr	r4, [r2, #56]	; 0x38
 800205e:	f843 4c38 	str.w	r4, [r3, #-56]
 8002062:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8002066:	eef1 7a67 	vneg.f32	s15, s15
 800206a:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800206e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002070:	f843 4c30 	str.w	r4, [r3, #-48]
 8002074:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002078:	eef1 7a67 	vneg.f32	s15, s15
 800207c:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002080:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8002082:	f843 4c28 	str.w	r4, [r3, #-40]
	while(blkCnt--)
 8002086:	1c4c      	adds	r4, r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002088:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 800208c:	eef1 7a67 	vneg.f32	s15, s15
 8002090:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8002094:	d1d5      	bne.n	8002042 <SDR_mirror_LSB+0x22>
	}
}
 8002096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop

080020a0 <SDR_compute_IIR_parms>:
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 80020a0:	b508      	push	{r3, lr}

   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 80020a2:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <SDR_compute_IIR_parms+0xb0>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80020a4:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <SDR_compute_IIR_parms+0xb4>)
   wr = 2.f * cwpitch / rate * myPI;
 80020a6:	edd2 7a00 	vldr	s15, [r2]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80020aa:	ed93 7a00 	vldr	s14, [r3]
 80020ae:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002158 <SDR_compute_IIR_parms+0xb8>
   wr = 2.f * cwpitch / rate * myPI;
 80020b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
   r = Qfactor;
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <SDR_compute_IIR_parms+0xbc>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80020b8:	ee27 7a26 	vmul.f32	s14, s14, s13
   wr = 2.f * cwpitch / rate * myPI;
 80020bc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002160 <SDR_compute_IIR_parms+0xc0>
{
 80020c0:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 80020c4:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 80020c8:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80020cc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 80020d0:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80020d4:	ee39 aaa9 	vadd.f32	s20, s19, s19
 80020d8:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80020dc:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 80020e0:	ee68 8aa6 	vmul.f32	s17, s17, s13
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80020e4:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 80020e8:	f00c fb3a 	bl	800e760 <cos>
 80020ec:	ee8a 6a09 	vdiv.f32	s12, s20, s18
   a1 = -2.f * r * cosw0;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <SDR_compute_IIR_parms+0xc8>)
 80020f4:	edc2 aa00 	vstr	s21, [r2]
   a1 = -2.f * r * cosw0;
 80020f8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80020fc:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8002100:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8002104:	ee69 7aa7 	vmul.f32	s15, s19, s15
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002108:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800210c:	ee26 6b00 	vmul.f64	d6, d6, d0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002110:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002114:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8002118:	ee26 6a27 	vmul.f32	s12, s12, s15
 800211c:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002120:	f00c fb1e 	bl	800e760 <cos>
 8002124:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8002128:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800216c <SDR_compute_IIR_parms+0xcc>
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <SDR_compute_IIR_parms+0xd0>)
 800212e:	ee28 7a07 	vmul.f32	s14, s16, s14
 8002132:	eeaa 6b40 	vfms.f64	d6, d10, d0
 8002136:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 800213a:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 800213e:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8002142:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002146:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800214a:	ed83 7a00 	vstr	s14, [r3]
}
 800214e:	bd08      	pop	{r3, pc}
 8002150:	24009ea0 	.word	0x24009ea0
 8002154:	24004484 	.word	0x24004484
 8002158:	3b800000 	.word	0x3b800000
 800215c:	24008e90 	.word	0x24008e90
 8002160:	40490fdb 	.word	0x40490fdb
 8002164:	240043e0 	.word	0x240043e0
 8002168:	24008e8c 	.word	0x24008e8c
 800216c:	3f99999a 	.word	0x3f99999a
 8002170:	2400c3c8 	.word	0x2400c3c8

08002174 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8002174:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 8002176:	2900      	cmp	r1, #0
 8002178:	d076      	beq.n	8002268 <SDR_CWPeak+0xf4>
 800217a:	1e4b      	subs	r3, r1, #1
 800217c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8002284 <SDR_CWPeak+0x110>
 8002180:	493a      	ldr	r1, [pc, #232]	; (800226c <SDR_CWPeak+0xf8>)
 8002182:	3010      	adds	r0, #16
 8002184:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <SDR_CWPeak+0xfc>)
 8002186:	eddc 4a00 	vldr	s9, [ip]
 800218a:	edd1 2a00 	vldr	s5, [r1]
 800218e:	edd2 5a00 	vldr	s11, [r2]
{
 8002192:	b4f0      	push	{r4, r5, r6, r7}
 8002194:	4c37      	ldr	r4, [pc, #220]	; (8002274 <SDR_CWPeak+0x100>)
 8002196:	4f38      	ldr	r7, [pc, #224]	; (8002278 <SDR_CWPeak+0x104>)
 8002198:	edd4 7a00 	vldr	s15, [r4]
 800219c:	4d37      	ldr	r5, [pc, #220]	; (800227c <SDR_CWPeak+0x108>)
 800219e:	4e38      	ldr	r6, [pc, #224]	; (8002280 <SDR_CWPeak+0x10c>)
 80021a0:	eef1 7a67 	vneg.f32	s15, s15
 80021a4:	ed97 7a00 	vldr	s14, [r7]
 80021a8:	edd5 6a00 	vldr	s13, [r5]
 80021ac:	ed96 5a00 	vldr	s10, [r6]
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021b0:	ee62 3ac7 	vnmul.f32	s7, s5, s14
 80021b4:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80021b8:	ee22 4ae6 	vnmul.f32	s8, s5, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021bc:	ed10 6a03 	vldr	s12, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021c0:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 80021c4:	3b01      	subs	r3, #1
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021c6:	eee7 3aa4 	vfma.f32	s7, s15, s9
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021ca:	ed10 2a01 	vldr	s4, [r0, #-4]
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80021ce:	eea7 4a85 	vfma.f32	s8, s15, s10
	 while(blkCnt--)
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	f100 0010 	add.w	r0, r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021da:	eee7 3a25 	vfma.f32	s7, s14, s11
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80021de:	eea3 4aa5 	vfma.f32	s8, s7, s11
	   *buf++ = y0;
 80021e2:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021e6:	edd2 5a00 	vldr	s11, [r2]
 80021ea:	edd1 2a00 	vldr	s5, [r1]
 80021ee:	ee25 6a86 	vmul.f32	s12, s11, s12
 80021f2:	edd4 7a00 	vldr	s15, [r4]
 80021f6:	eeb1 3a62 	vneg.f32	s6, s5
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021fa:	ee25 7aa6 	vmul.f32	s14, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021fe:	eef0 6a46 	vmov.f32	s13, s12
 8002202:	eef1 7a67 	vneg.f32	s15, s15
 8002206:	eea3 7a23 	vfma.f32	s14, s6, s7
 800220a:	eee3 6a24 	vfma.f32	s13, s6, s9
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800220e:	ee65 4a82 	vmul.f32	s9, s11, s4
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002212:	eee7 6aa3 	vfma.f32	s13, s15, s7
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002216:	ee25 6aa6 	vmul.f32	s12, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800221a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800221e:	eee3 4a26 	vfma.f32	s9, s6, s13
 8002222:	eea7 6a84 	vfma.f32	s12, s15, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002226:	ee65 6a87 	vmul.f32	s13, s11, s14
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800222a:	eee7 4a87 	vfma.f32	s9, s15, s14
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800222e:	eea3 6a05 	vfma.f32	s12, s6, s10
 8002232:	eee3 6a04 	vfma.f32	s13, s6, s8
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002236:	ee25 5aa4 	vmul.f32	s10, s11, s9
	   *buf++ = y0;
 800223a:	ed00 6a07 	vstr	s12, [r0, #-28]	; 0xffffffe4
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800223e:	eee7 6a86 	vfma.f32	s13, s15, s12
 8002242:	eea3 5a06 	vfma.f32	s10, s6, s12
	   *buf++ = y0;
 8002246:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800224a:	eea7 5aa6 	vfma.f32	s10, s15, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 800224e:	ed00 5a05 	vstr	s10, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8002252:	d1ad      	bne.n	80021b0 <SDR_CWPeak+0x3c>
 8002254:	ed87 7a00 	vstr	s14, [r7]
 8002258:	ed86 5a00 	vstr	s10, [r6]
 800225c:	edc5 6a00 	vstr	s13, [r5]
 8002260:	edcc 4a00 	vstr	s9, [ip]
   }
}
 8002264:	bcf0      	pop	{r4, r5, r6, r7}
 8002266:	4770      	bx	lr
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	24008e8c 	.word	0x24008e8c
 8002270:	2400c3c8 	.word	0x2400c3c8
 8002274:	240043e0 	.word	0x240043e0
 8002278:	24000634 	.word	0x24000634
 800227c:	24000638 	.word	0x24000638
 8002280:	24000630 	.word	0x24000630
 8002284:	2400062c 	.word	0x2400062c

08002288 <SDR_demodAM_AGC>:
// ------------------------------------------------------
// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8002288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 800228c:	4b32      	ldr	r3, [pc, #200]	; (8002358 <SDR_demodAM_AGC+0xd0>)
{
 800228e:	b082      	sub	sp, #8
 8002290:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8002374 <SDR_demodAM_AGC+0xec>
 8002294:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 8002298:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8002378 <SDR_demodAM_AGC+0xf0>
 800229c:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 800237c <SDR_demodAM_AGC+0xf4>
		  hangcnt = Hcount[AM]; 
 80022a0:	881f      	ldrh	r7, [r3, #0]
 80022a2:	ed98 7a00 	vldr	s14, [r8]
 80022a6:	f8dc 3000 	ldr.w	r3, [ip]
 80022aa:	ed9e 6a00 	vldr	s12, [lr]
 80022ae:	4c2b      	ldr	r4, [pc, #172]	; (800235c <SDR_demodAM_AGC+0xd4>)
 80022b0:	4a2b      	ldr	r2, [pc, #172]	; (8002360 <SDR_demodAM_AGC+0xd8>)

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80022b2:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8002364 <SDR_demodAM_AGC+0xdc>
	  }

    audiotmp /= max(pk, AgcThreshold);  
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
 80022b6:	4e2c      	ldr	r6, [pc, #176]	; (8002368 <SDR_demodAM_AGC+0xe0>)
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80022b8:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 800236c <SDR_demodAM_AGC+0xe4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80022bc:	edd0 7a01 	vldr	s15, [r0, #4]
 80022c0:	3008      	adds	r0, #8
 80022c2:	ed50 6a02 	vldr	s13, [r0, #-8]
 80022c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022ca:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80022ce:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 80022d2:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 80022d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = __builtin_sqrtf(in);
 80022de:	bfa8      	it	ge
 80022e0:	eef1 6ae7 	vsqrtge.f32	s13, s15
    audiotmp /= max(pk, AgcThreshold);  
 80022e4:	edd4 7a00 	vldr	s15, [r4]
      *pOut = 0.0f;
 80022e8:	bfb8      	it	lt
 80022ea:	eef0 6a64 	vmovlt.f32	s13, s9
	  if(pk < audiotmp)
 80022ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	d502      	bpl.n	80022fe <SDR_demodAM_AGC+0x76>
 80022f8:	eeb0 7a66 	vmov.f32	s14, s13
		  hangcnt = Hcount[AM]; 
 80022fc:	463b      	mov	r3, r7
    audiotmp /= max(pk, AgcThreshold);  
 80022fe:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8002302:	eec6 5aa7 	vdiv.f32	s11, s13, s15
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002306:	eef0 7a65 	vmov.f32	s15, s11
    audiotmp /= max(pk, AgcThreshold);  
 800230a:	edc2 5a00 	vstr	s11, [r2]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800230e:	eee6 7a05 	vfma.f32	s15, s12, s10
	  if(hangcnt == 0)
 8002312:	b91b      	cbnz	r3, 800231c <SDR_demodAM_AGC+0x94>
		  pk  *= Decay[AM];
 8002314:	edd6 6a00 	vldr	s13, [r6]
 8002318:	ee27 7a26 	vmul.f32	s14, s14, s13
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800231c:	edcd 7a00 	vstr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002320:	4285      	cmp	r5, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002322:	eddd 7a00 	vldr	s15, [sp]
 8002326:	ee77 7ac6 	vsub.f32	s15, s15, s12
	  wold = w;
 800232a:	ed9d 6a00 	vldr	s12, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800232e:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8002332:	d1c3      	bne.n	80022bc <SDR_demodAM_AGC+0x34>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 8002334:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <SDR_demodAM_AGC+0xe8>)
	if(hangcnt > 0)  hangcnt--;
 8002336:	2b00      	cmp	r3, #0
 8002338:	ed88 7a00 	vstr	s14, [r8]
 800233c:	f8cc 3000 	str.w	r3, [ip]
 8002340:	ed8e 6a00 	vstr	s12, [lr]
    PeakAudioValue=pk;
 8002344:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8002348:	dd02      	ble.n	8002350 <SDR_demodAM_AGC+0xc8>
 800234a:	3b01      	subs	r3, #1
 800234c:	f8cc 3000 	str.w	r3, [ip]
}
 8002350:	b002      	add	sp, #8
 8002352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002356:	bf00      	nop
 8002358:	2400804c 	.word	0x2400804c
 800235c:	24009e9c 	.word	0x24009e9c
 8002360:	24000a94 	.word	0x24000a94
 8002364:	00000000 	.word	0x00000000
 8002368:	24002a98 	.word	0x24002a98
 800236c:	3f75c28f 	.word	0x3f75c28f
 8002370:	240088d4 	.word	0x240088d4
 8002374:	240000e8 	.word	0x240000e8
 8002378:	24000618 	.word	0x24000618
 800237c:	24000628 	.word	0x24000628

08002380 <SDR_demodSSB_CW_AGC>:
	  arm_sqrt_f32(tmp, &sav);  

	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002380:	4a4a      	ldr	r2, [pc, #296]	; (80024ac <SDR_demodSSB_CW_AGC+0x12c>)
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <SDR_demodSSB_CW_AGC+0x130>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002384:	7812      	ldrb	r2, [r2, #0]
 8002386:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 800238a:	2a01      	cmp	r2, #1
{
 800238c:	b4f0      	push	{r4, r5, r6, r7}
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800238e:	885c      	ldrh	r4, [r3, #2]
 8002390:	4e48      	ldr	r6, [pc, #288]	; (80024b4 <SDR_demodSSB_CW_AGC+0x134>)
 8002392:	4f49      	ldr	r7, [pc, #292]	; (80024b8 <SDR_demodSSB_CW_AGC+0x138>)
 8002394:	889d      	ldrh	r5, [r3, #4]
 8002396:	bf08      	it	eq
 8002398:	4625      	moveq	r5, r4
 800239a:	6833      	ldr	r3, [r6, #0]
 800239c:	ed97 7a00 	vldr	s14, [r7]
 80023a0:	d05b      	beq.n	800245a <SDR_demodSSB_CW_AGC+0xda>
 80023a2:	2a03      	cmp	r2, #3
 80023a4:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80023a8:	4a44      	ldr	r2, [pc, #272]	; (80024bc <SDR_demodSSB_CW_AGC+0x13c>)
 80023aa:	d032      	beq.n	8002412 <SDR_demodSSB_CW_AGC+0x92>
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80023ac:	f8df c118 	ldr.w	ip, [pc, #280]	; 80024c8 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80023b0:	edd0 7a01 	vldr	s15, [r0, #4]
 80023b4:	3008      	adds	r0, #8
 80023b6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80023ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023be:	eee6 7a06 	vfma.f32	s15, s12, s12
      *pOut = __builtin_sqrtf(in);
 80023c2:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 80023c6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	d502      	bpl.n	80023d6 <SDR_demodSSB_CW_AGC+0x56>
 80023d0:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80023d4:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80023d6:	edd2 7a00 	vldr	s15, [r2]
 80023da:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80023de:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80023e2:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 80023e6:	b91b      	cbnz	r3, 80023f0 <SDR_demodSSB_CW_AGC+0x70>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80023e8:	eddc 7a02 	vldr	s15, [ip, #8]
 80023ec:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 80023f0:	4284      	cmp	r4, r0
 80023f2:	d1dd      	bne.n	80023b0 <SDR_demodSSB_CW_AGC+0x30>
 80023f4:	4932      	ldr	r1, [pc, #200]	; (80024c0 <SDR_demodSSB_CW_AGC+0x140>)
    }  
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 80023f6:	2b00      	cmp	r3, #0
	PeakAudioValue=pk;
 80023f8:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <SDR_demodSSB_CW_AGC+0x144>)
 80023fa:	ed87 7a00 	vstr	s14, [r7]
 80023fe:	6033      	str	r3, [r6, #0]
 8002400:	edc1 6a00 	vstr	s13, [r1]
 8002404:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8002408:	dd01      	ble.n	800240e <SDR_demodSSB_CW_AGC+0x8e>
 800240a:	3b01      	subs	r3, #1
 800240c:	6033      	str	r3, [r6, #0]
}
 800240e:	bcf0      	pop	{r4, r5, r6, r7}
 8002410:	4770      	bx	lr
      if(CurrentMode == CW) pk  *= Decay[CW];
 8002412:	4d2d      	ldr	r5, [pc, #180]	; (80024c8 <SDR_demodSSB_CW_AGC+0x148>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002414:	edd0 7a01 	vldr	s15, [r0, #4]
 8002418:	3008      	adds	r0, #8
 800241a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800241e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002422:	eee6 7a06 	vfma.f32	s15, s12, s12
 8002426:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 800242a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	d502      	bpl.n	800243a <SDR_demodSSB_CW_AGC+0xba>
 8002434:	eeb0 7a66 	vmov.f32	s14, s13
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002438:	4663      	mov	r3, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800243a:	edd2 7a00 	vldr	s15, [r2]
 800243e:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8002442:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8002446:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 800244a:	b91b      	cbnz	r3, 8002454 <SDR_demodSSB_CW_AGC+0xd4>
      if(CurrentMode == CW) pk  *= Decay[CW];
 800244c:	edd5 7a03 	vldr	s15, [r5, #12]
 8002450:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 8002454:	4284      	cmp	r4, r0
 8002456:	d1dd      	bne.n	8002414 <SDR_demodSSB_CW_AGC+0x94>
 8002458:	e7cc      	b.n	80023f4 <SDR_demodSSB_CW_AGC+0x74>
 800245a:	4a18      	ldr	r2, [pc, #96]	; (80024bc <SDR_demodSSB_CW_AGC+0x13c>)
 800245c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002460:	f8df c064 	ldr.w	ip, [pc, #100]	; 80024c8 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002464:	edd0 7a01 	vldr	s15, [r0, #4]
 8002468:	3008      	adds	r0, #8
 800246a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800246e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002472:	eee6 7a06 	vfma.f32	s15, s12, s12
 8002476:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 800247a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002482:	d502      	bpl.n	800248a <SDR_demodSSB_CW_AGC+0x10a>
 8002484:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002488:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800248a:	edd2 7a00 	vldr	s15, [r2]
 800248e:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8002492:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8002496:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 800249a:	b91b      	cbnz	r3, 80024a4 <SDR_demodSSB_CW_AGC+0x124>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 800249c:	eddc 7a01 	vldr	s15, [ip, #4]
 80024a0:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 80024a4:	42a0      	cmp	r0, r4
 80024a6:	d1dd      	bne.n	8002464 <SDR_demodSSB_CW_AGC+0xe4>
 80024a8:	e7a4      	b.n	80023f4 <SDR_demodSSB_CW_AGC+0x74>
 80024aa:	bf00      	nop
 80024ac:	2400c3dc 	.word	0x2400c3dc
 80024b0:	2400804c 	.word	0x2400804c
 80024b4:	2400061c 	.word	0x2400061c
 80024b8:	240000ec 	.word	0x240000ec
 80024bc:	24009e9c 	.word	0x24009e9c
 80024c0:	24000620 	.word	0x24000620
 80024c4:	240088d4 	.word	0x240088d4
 80024c8:	24002a98 	.word	0x24002a98

080024cc <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 80024cc:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80024d0:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 80024d4:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_ADC_ConvCpltCallback+0x34>)
 80024d6:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80024da:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80024de:	3320      	adds	r3, #32
    while (op_size > 0) {
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d1fa      	bne.n	80024da <HAL_ADC_ConvCpltCallback+0xe>
 80024e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024e8:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(1);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7fe ff99 	bl	8001424 <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <HAL_ADC_ConvCpltCallback+0x38>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
}
 80024f8:	bd08      	pop	{r3, pc}
 80024fa:	bf00      	nop
 80024fc:	2400cfe0 	.word	0x2400cfe0
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	24000669 	.word	0x24000669

08002508 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002508:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 800250c:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 8002510:	490a      	ldr	r1, [pc, #40]	; (800253c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002512:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8002516:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800251a:	3320      	adds	r3, #32
    while (op_size > 0) {
 800251c:	4293      	cmp	r3, r2
 800251e:	d1fa      	bne.n	8002516 <HAL_ADC_ConvHalfCpltCallback+0xe>
 8002520:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002524:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(0);
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe ff7b 	bl	8001424 <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
}
 8002534:	bd08      	pop	{r3, pc}
 8002536:	bf00      	nop
 8002538:	2400cbe0 	.word	0x2400cbe0
 800253c:	e000ed00 	.word	0xe000ed00
 8002540:	24000669 	.word	0x24000669

08002544 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002544:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 8002548:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 800254a:	4c05      	ldr	r4, [pc, #20]	; (8002560 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 800254c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002550:	4804      	ldr	r0, [pc, #16]	; (8002564 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 8002552:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 8002554:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 8002558:	f003 bbfe 	b.w	8005d58 <HAL_GPIO_WritePin>
 800255c:	24004488 	.word	0x24004488
 8002560:	240072a0 	.word	0x240072a0
 8002564:	58020400 	.word	0x58020400

08002568 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002568:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 800256c:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 800256e:	4c05      	ldr	r4, [pc, #20]	; (8002584 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 8002570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002574:	4804      	ldr	r0, [pc, #16]	; (8002588 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 8002576:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 8002578:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 800257c:	f003 bbec 	b.w	8005d58 <HAL_GPIO_WritePin>
 8002580:	24004488 	.word	0x24004488
 8002584:	24006ea0 	.word	0x24006ea0
 8002588:	58020400 	.word	0x58020400

0800258c <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 800258c:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <DisplayStatus+0x174>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	b086      	sub	sp, #24
	switch(Fstep)
 8002598:	f000 80a9 	beq.w	80026ee <DisplayStatus+0x162>
 800259c:	d916      	bls.n	80025cc <DisplayStatus+0x40>
 800259e:	f242 7210 	movw	r2, #10000	; 0x2710
 80025a2:	4293      	cmp	r3, r2
 80025a4:	f000 808e 	beq.w	80026c4 <DisplayStatus+0x138>
 80025a8:	4a56      	ldr	r2, [pc, #344]	; (8002704 <DisplayStatus+0x178>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d06f      	beq.n	800268e <DisplayStatus+0x102>
 80025ae:	f242 3228 	movw	r2, #9000	; 0x2328
 80025b2:	4293      	cmp	r3, r2
 80025b4:	f000 808d 	beq.w	80026d2 <DisplayStatus+0x146>
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <DisplayStatus+0x17c>)
	case 9000: strcpy(StringStep,"   9K"); break;
	case 10000: strcpy(StringStep," 10K"); break;
	case 100000: strcpy(StringStep,"100K"); break;
	}

	switch(CurrentMode)
 80025ba:	4a54      	ldr	r2, [pc, #336]	; (800270c <DisplayStatus+0x180>)
 80025bc:	7812      	ldrb	r2, [r2, #0]
 80025be:	2a03      	cmp	r2, #3
 80025c0:	f200 809c 	bhi.w	80026fc <DisplayStatus+0x170>
 80025c4:	e8df f002 	tbb	[pc, r2]
 80025c8:	10445d61 	.word	0x10445d61
	switch(Fstep)
 80025cc:	2b0a      	cmp	r3, #10
 80025ce:	f000 8087 	beq.w	80026e0 <DisplayStatus+0x154>
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d062      	beq.n	800269c <DisplayStatus+0x110>
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d1ee      	bne.n	80025b8 <DisplayStatus+0x2c>
	case 1: strcpy(StringStep,"   1"); break;
 80025da:	4a4d      	ldr	r2, [pc, #308]	; (8002710 <DisplayStatus+0x184>)
 80025dc:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <DisplayStatus+0x17c>)
 80025de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025e2:	6018      	str	r0, [r3, #0]
 80025e4:	7119      	strb	r1, [r3, #4]
 80025e6:	e7e8      	b.n	80025ba <DisplayStatus+0x2e>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 80025e8:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <DisplayStatus+0x188>)
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	4d4a      	ldr	r5, [pc, #296]	; (8002718 <DisplayStatus+0x18c>)
 80025ee:	0c11      	lsrs	r1, r2, #16
 80025f0:	802a      	strh	r2, [r5, #0]
 80025f2:	70a9      	strb	r1, [r5, #2]
	}
	switch (CurrentAGC)
 80025f4:	4a49      	ldr	r2, [pc, #292]	; (800271c <DisplayStatus+0x190>)
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	2a00      	cmp	r2, #0
 80025fa:	d030      	beq.n	800265e <DisplayStatus+0xd2>
 80025fc:	2a01      	cmp	r2, #1
 80025fe:	d05a      	beq.n	80026b6 <DisplayStatus+0x12a>
 8002600:	4c47      	ldr	r4, [pc, #284]	; (8002720 <DisplayStatus+0x194>)
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
	}
	switch (CurrentBW)
 8002602:	4a48      	ldr	r2, [pc, #288]	; (8002724 <DisplayStatus+0x198>)
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	2a00      	cmp	r2, #0
 8002608:	d033      	beq.n	8002672 <DisplayStatus+0xe6>
 800260a:	2a01      	cmp	r2, #1
 800260c:	d04d      	beq.n	80026aa <DisplayStatus+0x11e>
 800260e:	4a46      	ldr	r2, [pc, #280]	; (8002728 <DisplayStatus+0x19c>)
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
	}
	sprintf(UartTXString, "\e[3;1HFreq %.0f Step %s\e[5;1HMode %s BW %s AGG %s Volume %1.1f   \r", LOfreq, StringStep, StringMode, StringWidth, StringAGC, volume);
 8002610:	4946      	ldr	r1, [pc, #280]	; (800272c <DisplayStatus+0x1a0>)
 8002612:	9403      	str	r4, [sp, #12]
 8002614:	ed91 7a00 	vldr	s14, [r1]
 8002618:	4945      	ldr	r1, [pc, #276]	; (8002730 <DisplayStatus+0x1a4>)
 800261a:	9202      	str	r2, [sp, #8]
 800261c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002620:	edd1 6a00 	vldr	s13, [r1]
 8002624:	4843      	ldr	r0, [pc, #268]	; (8002734 <DisplayStatus+0x1a8>)
 8002626:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800262a:	4943      	ldr	r1, [pc, #268]	; (8002738 <DisplayStatus+0x1ac>)
 800262c:	e9cd 3500 	strd	r3, r5, [sp]
 8002630:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002634:	ec53 2b16 	vmov	r2, r3, d6
 8002638:	f00a fdde 	bl	800d1f8 <siprintf>
#ifdef UART_UI
	//HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
#endif
#ifdef USB_UI
	CDC_Transmit_FS(UartTXString, strlen(UartTXString));
 800263c:	483d      	ldr	r0, [pc, #244]	; (8002734 <DisplayStatus+0x1a8>)
 800263e:	f7fd feaf 	bl	80003a0 <strlen>
 8002642:	b281      	uxth	r1, r0
 8002644:	483b      	ldr	r0, [pc, #236]	; (8002734 <DisplayStatus+0x1a8>)
#endif
}
 8002646:	b006      	add	sp, #24
 8002648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	CDC_Transmit_FS(UartTXString, strlen(UartTXString));
 800264c:	f008 bd2c 	b.w	800b0a8 <CDC_Transmit_FS>
	case USB: strcpy(StringMode,"USB"); break;
 8002650:	4a3a      	ldr	r2, [pc, #232]	; (800273c <DisplayStatus+0x1b0>)
 8002652:	4d31      	ldr	r5, [pc, #196]	; (8002718 <DisplayStatus+0x18c>)
 8002654:	602a      	str	r2, [r5, #0]
	switch (CurrentAGC)
 8002656:	4a31      	ldr	r2, [pc, #196]	; (800271c <DisplayStatus+0x190>)
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	2a00      	cmp	r2, #0
 800265c:	d1ce      	bne.n	80025fc <DisplayStatus+0x70>
	case Fast: strcpy(StringAGC,"Fast"); break;
 800265e:	4a38      	ldr	r2, [pc, #224]	; (8002740 <DisplayStatus+0x1b4>)
 8002660:	4c2f      	ldr	r4, [pc, #188]	; (8002720 <DisplayStatus+0x194>)
 8002662:	e892 0003 	ldmia.w	r2, {r0, r1}
	switch (CurrentBW)
 8002666:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <DisplayStatus+0x198>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002668:	6020      	str	r0, [r4, #0]
	switch (CurrentBW)
 800266a:	7812      	ldrb	r2, [r2, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 800266c:	7121      	strb	r1, [r4, #4]
	switch (CurrentBW)
 800266e:	2a00      	cmp	r2, #0
 8002670:	d1cb      	bne.n	800260a <DisplayStatus+0x7e>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8002672:	4934      	ldr	r1, [pc, #208]	; (8002744 <DisplayStatus+0x1b8>)
 8002674:	4a2c      	ldr	r2, [pc, #176]	; (8002728 <DisplayStatus+0x19c>)
 8002676:	c903      	ldmia	r1, {r0, r1}
 8002678:	0c0e      	lsrs	r6, r1, #16
 800267a:	6010      	str	r0, [r2, #0]
 800267c:	8091      	strh	r1, [r2, #4]
 800267e:	7196      	strb	r6, [r2, #6]
 8002680:	e7c6      	b.n	8002610 <DisplayStatus+0x84>
	case LSB: strcpy(StringMode,"LSB"); break;
 8002682:	4d25      	ldr	r5, [pc, #148]	; (8002718 <DisplayStatus+0x18c>)
 8002684:	4a30      	ldr	r2, [pc, #192]	; (8002748 <DisplayStatus+0x1bc>)
 8002686:	602a      	str	r2, [r5, #0]
 8002688:	e7b4      	b.n	80025f4 <DisplayStatus+0x68>
	case AM: strcpy(StringMode,"AM"); break;
 800268a:	4a30      	ldr	r2, [pc, #192]	; (800274c <DisplayStatus+0x1c0>)
 800268c:	e7ad      	b.n	80025ea <DisplayStatus+0x5e>
	case 100000: strcpy(StringStep,"100K"); break;
 800268e:	4a30      	ldr	r2, [pc, #192]	; (8002750 <DisplayStatus+0x1c4>)
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <DisplayStatus+0x17c>)
 8002692:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002696:	6018      	str	r0, [r3, #0]
 8002698:	7119      	strb	r1, [r3, #4]
 800269a:	e78e      	b.n	80025ba <DisplayStatus+0x2e>
	case 100: strcpy(StringStep," 100"); break;
 800269c:	4a2d      	ldr	r2, [pc, #180]	; (8002754 <DisplayStatus+0x1c8>)
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <DisplayStatus+0x17c>)
 80026a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026a4:	6018      	str	r0, [r3, #0]
 80026a6:	7119      	strb	r1, [r3, #4]
 80026a8:	e787      	b.n	80025ba <DisplayStatus+0x2e>
	case Wide: strcpy(StringWidth,"Wide"); break;
 80026aa:	492b      	ldr	r1, [pc, #172]	; (8002758 <DisplayStatus+0x1cc>)
 80026ac:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <DisplayStatus+0x19c>)
 80026ae:	c903      	ldmia	r1, {r0, r1}
 80026b0:	6010      	str	r0, [r2, #0]
 80026b2:	7111      	strb	r1, [r2, #4]
 80026b4:	e7ac      	b.n	8002610 <DisplayStatus+0x84>
	case Slow: strcpy(StringAGC,"Slow"); break;
 80026b6:	4a29      	ldr	r2, [pc, #164]	; (800275c <DisplayStatus+0x1d0>)
 80026b8:	4c19      	ldr	r4, [pc, #100]	; (8002720 <DisplayStatus+0x194>)
 80026ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026be:	6020      	str	r0, [r4, #0]
 80026c0:	7121      	strb	r1, [r4, #4]
 80026c2:	e79e      	b.n	8002602 <DisplayStatus+0x76>
	case 10000: strcpy(StringStep," 10K"); break;
 80026c4:	4a26      	ldr	r2, [pc, #152]	; (8002760 <DisplayStatus+0x1d4>)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <DisplayStatus+0x17c>)
 80026c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026cc:	6018      	str	r0, [r3, #0]
 80026ce:	7119      	strb	r1, [r3, #4]
 80026d0:	e773      	b.n	80025ba <DisplayStatus+0x2e>
	case 9000: strcpy(StringStep,"   9K"); break;
 80026d2:	4a24      	ldr	r2, [pc, #144]	; (8002764 <DisplayStatus+0x1d8>)
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <DisplayStatus+0x17c>)
 80026d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026da:	6018      	str	r0, [r3, #0]
 80026dc:	8099      	strh	r1, [r3, #4]
 80026de:	e76c      	b.n	80025ba <DisplayStatus+0x2e>
	case 10: strcpy(StringStep,"  10"); break;
 80026e0:	4a21      	ldr	r2, [pc, #132]	; (8002768 <DisplayStatus+0x1dc>)
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <DisplayStatus+0x17c>)
 80026e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026e8:	6018      	str	r0, [r3, #0]
 80026ea:	7119      	strb	r1, [r3, #4]
 80026ec:	e765      	b.n	80025ba <DisplayStatus+0x2e>
	case 1000: strcpy(StringStep,"  1K"); break;
 80026ee:	4a1f      	ldr	r2, [pc, #124]	; (800276c <DisplayStatus+0x1e0>)
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <DisplayStatus+0x17c>)
 80026f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026f6:	6018      	str	r0, [r3, #0]
 80026f8:	7119      	strb	r1, [r3, #4]
 80026fa:	e75e      	b.n	80025ba <DisplayStatus+0x2e>
 80026fc:	4d06      	ldr	r5, [pc, #24]	; (8002718 <DisplayStatus+0x18c>)
 80026fe:	e779      	b.n	80025f4 <DisplayStatus+0x68>
 8002700:	2400c3d4 	.word	0x2400c3d4
 8002704:	000186a0 	.word	0x000186a0
 8002708:	24000658 	.word	0x24000658
 800270c:	2400c3dc 	.word	0x2400c3dc
 8002710:	080162e0 	.word	0x080162e0
 8002714:	0801631c 	.word	0x0801631c
 8002718:	24000650 	.word	0x24000650
 800271c:	24000680 	.word	0x24000680
 8002720:	24000648 	.word	0x24000648
 8002724:	24000a90 	.word	0x24000a90
 8002728:	24000660 	.word	0x24000660
 800272c:	240043dc 	.word	0x240043dc
 8002730:	24009ea8 	.word	0x24009ea8
 8002734:	240076a4 	.word	0x240076a4
 8002738:	08016340 	.word	0x08016340
 800273c:	00425355 	.word	0x00425355
 8002740:	08016320 	.word	0x08016320
 8002744:	08016330 	.word	0x08016330
 8002748:	0042534c 	.word	0x0042534c
 800274c:	08016318 	.word	0x08016318
 8002750:	08016310 	.word	0x08016310
 8002754:	080162f0 	.word	0x080162f0
 8002758:	08016338 	.word	0x08016338
 800275c:	08016328 	.word	0x08016328
 8002760:	08016308 	.word	0x08016308
 8002764:	08016300 	.word	0x08016300
 8002768:	080162e8 	.word	0x080162e8
 800276c:	080162f8 	.word	0x080162f8

08002770 <SetFOutVHF>:
MCODIV = 1
	 */
	DivN2 = 291;
	FracN2 = 0;

	__HAL_RCC_PLL2_DISABLE();
 8002770:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <SetFOutVHF+0x3c>)
{
 8002772:	b082      	sub	sp, #8
	DivN2 = 291;
 8002774:	f240 1123 	movw	r1, #291	; 0x123
	FracN2 = 0;
 8002778:	2200      	movs	r2, #0
	DivN2 = 291;
 800277a:	9100      	str	r1, [sp, #0]
	FracN2 = 0;
 800277c:	9201      	str	r2, [sp, #4]
	__HAL_RCC_PLL2_DISABLE();
 800277e:	681a      	ldr	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(8, DivN2, 2, 2, 2);
 8002780:	490b      	ldr	r1, [pc, #44]	; (80027b0 <SetFOutVHF+0x40>)
	__HAL_RCC_PLL2_DISABLE();
 8002782:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002786:	601a      	str	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(8, DivN2, 2, 2, 2);
 8002788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800278a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800278e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
 8002794:	9a00      	ldr	r2, [sp, #0]
 8002796:	3a01      	subs	r2, #1
 8002798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800279c:	4311      	orrs	r1, r2
 800279e:	6399      	str	r1, [r3, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027a6:	601a      	str	r2, [r3, #0]


}
 80027a8:	b002      	add	sp, #8
 80027aa:	4770      	bx	lr
 80027ac:	58024400 	.word	0x58024400
 80027b0:	01010200 	.word	0x01010200

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	4e07      	ldr	r6, [pc, #28]	; (80027d4 <Error_Handler+0x20>)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80027b6:	2532      	movs	r5, #50	; 0x32
 80027b8:	4c07      	ldr	r4, [pc, #28]	; (80027d8 <Error_Handler+0x24>)
{
 80027ba:	b508      	push	{r3, lr}
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80027bc:	6832      	ldr	r2, [r6, #0]
 80027be:	fba4 1302 	umull	r1, r3, r4, r2
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	fb05 2313 	mls	r3, r5, r3, r2
 80027c8:	b103      	cbz	r3, 80027cc <Error_Handler+0x18>
 80027ca:	e7fe      	b.n	80027ca <Error_Handler+0x16>
			LED_switch();
 80027cc:	f7fe fd86 	bl	80012dc <LED_switch>
 80027d0:	e7f4      	b.n	80027bc <Error_Handler+0x8>
 80027d2:	bf00      	nop
 80027d4:	24009eac 	.word	0x24009eac
 80027d8:	51eb851f 	.word	0x51eb851f

080027dc <SystemClock_Config_For_OC>:
{
 80027dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e0:	b0cc      	sub	sp, #304	; 0x130
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027e2:	224c      	movs	r2, #76	; 0x4c
 80027e4:	2100      	movs	r1, #0
 80027e6:	a80a      	add	r0, sp, #40	; 0x28
 80027e8:	f00a f809 	bl	800c7fe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ec:	2220      	movs	r2, #32
 80027ee:	2100      	movs	r1, #0
 80027f0:	a802      	add	r0, sp, #8
 80027f2:	f00a f804 	bl	800c7fe <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f6:	22bc      	movs	r2, #188	; 0xbc
 80027f8:	2100      	movs	r1, #0
 80027fa:	a81d      	add	r0, sp, #116	; 0x74
 80027fc:	f009 ffff 	bl	800c7fe <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002800:	2002      	movs	r0, #2
 8002802:	f004 f8d1 	bl	80069a8 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002806:	4b41      	ldr	r3, [pc, #260]	; (800290c <SystemClock_Config_For_OC+0x130>)
 8002808:	2200      	movs	r2, #0
 800280a:	4941      	ldr	r1, [pc, #260]	; (8002910 <SystemClock_Config_For_OC+0x134>)
 800280c:	9201      	str	r2, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800280e:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002810:	6998      	ldr	r0, [r3, #24]
 8002812:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8002816:	6198      	str	r0, [r3, #24]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002828:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002832:	6993      	ldr	r3, [r2, #24]
 8002834:	049b      	lsls	r3, r3, #18
 8002836:	d5fc      	bpl.n	8002832 <SystemClock_Config_For_OC+0x56>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002838:	4936      	ldr	r1, [pc, #216]	; (8002914 <SystemClock_Config_For_OC+0x138>)
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800283a:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800283c:	2001      	movs	r0, #1
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800283e:	2504      	movs	r5, #4
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002840:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002842:	2200      	movs	r2, #0
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS; // External clock on pin 29 CN 11 (PF0/PH0)
 8002844:	f44f 2ca0 	mov.w	ip, #327680	; 0x50000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002848:	2721      	movs	r7, #33	; 0x21
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800284a:	f023 0303 	bic.w	r3, r3, #3
	RCC_OscInitStruct.PLL.PLLM = 5;
 800284e:	2605      	movs	r6, #5
	RCC_OscInitStruct.PLL.PLLN = 240;
 8002850:	f04f 08f0 	mov.w	r8, #240	; 0xf0
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002854:	4323      	orrs	r3, r4
 8002856:	628b      	str	r3, [r1, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002858:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285a:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLP = 2;
 800285c:	9417      	str	r4, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800285e:	9518      	str	r5, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002860:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002864:	e9cd 4519 	strd	r4, r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002868:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800286c:	e9cd 7c0a 	strd	r7, ip, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 240;
 8002870:	e9cd 6815 	strd	r6, r8, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002874:	f004 f8c6 	bl	8006a04 <HAL_RCC_OscConfig>
 8002878:	2800      	cmp	r0, #0
 800287a:	d144      	bne.n	8002906 <SystemClock_Config_For_OC+0x12a>
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800287c:	f04f 0908 	mov.w	r9, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002880:	2303      	movs	r3, #3
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002882:	223f      	movs	r2, #63	; 0x3f
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002884:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002886:	f44f 6780 	mov.w	r7, #1024	; 0x400
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800288a:	2540      	movs	r5, #64	; 0x40
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800288c:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800288e:	eb0d 0009 	add.w	r0, sp, r9
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002892:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002894:	9202      	str	r2, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002896:	9507      	str	r5, [sp, #28]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002898:	e9cd 9505 	strd	r9, r5, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800289c:	e9cd 7508 	strd	r7, r5, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028a0:	f004 fc34 	bl	800710c <HAL_RCC_ClockConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	bb70      	cbnz	r0, 8002906 <SystemClock_Config_For_OC+0x12a>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80028a8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8002918 <SystemClock_Config_For_OC+0x13c>
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 80028ac:	f04f 0e10 	mov.w	lr, #16
	PeriphClkInitStruct.PLL2.PLL2N = 240;
 80028b0:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLL2.PLL2M = 25;
 80028b4:	f04f 0c19 	mov.w	ip, #25
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80028b8:	f44f 1840 	mov.w	r8, #3145728	; 0x300000
	PeriphClkInitStruct.PLL3.PLL3N = 160;
 80028bc:	21a0      	movs	r1, #160	; 0xa0
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80028be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028c2:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80028c4:	9421      	str	r4, [sp, #132]	; 0x84
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80028c6:	9422      	str	r4, [sp, #136]	; 0x88
		PeriphClkInitStruct.PLL3.PLL3P = 2;
 80028c8:	9428      	str	r4, [sp, #160]	; 0xa0
		PeriphClkInitStruct.PLL3.PLL3Q = 8;
 80028ca:	f8cd 90a4 	str.w	r9, [sp, #164]	; 0xa4
	PeriphClkInitStruct.PLL3.PLL3M = 5;
 80028ce:	9626      	str	r6, [sp, #152]	; 0x98
	PeriphClkInitStruct.PLL3.PLL3R = 5;
 80028d0:	962a      	str	r6, [sp, #168]	; 0xa8
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80028d2:	9325      	str	r3, [sp, #148]	; 0x94
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80028d4:	932d      	str	r3, [sp, #180]	; 0xb4
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028d6:	933a      	str	r3, [sp, #232]	; 0xe8
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80028d8:	9743      	str	r7, [sp, #268]	; 0x10c
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80028da:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80028de:	f8cd 80f8 	str.w	r8, [sp, #248]	; 0xf8
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 80028e2:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
	PeriphClkInitStruct.PLL2.PLL2M = 25;
 80028e6:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL3.PLL3N = 160;
 80028ea:	9127      	str	r1, [sp, #156]	; 0x9c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80028ec:	9245      	str	r2, [sp, #276]	; 0x114
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80028ee:	e9cd 5323 	strd	r5, r3, [sp, #140]	; 0x8c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80028f2:	e9cd 732b 	strd	r7, r3, [sp, #172]	; 0xac
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028f6:	f005 f833 	bl	8007960 <HAL_RCCEx_PeriphCLKConfig>
 80028fa:	b920      	cbnz	r0, 8002906 <SystemClock_Config_For_OC+0x12a>
	HAL_PWREx_EnableUSBVoltageDetector();
 80028fc:	f004 f87a 	bl	80069f4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8002900:	b04c      	add	sp, #304	; 0x130
 8002902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Error_Handler();
 8002906:	f7ff ff55 	bl	80027b4 <Error_Handler>
 800290a:	bf00      	nop
 800290c:	58024800 	.word	0x58024800
 8002910:	58000400 	.word	0x58000400
 8002914:	58024400 	.word	0x58024400
 8002918:	000c0042 	.word	0x000c0042

0800291c <MX_TIM6_Init_Custom_Rate>:
{
 800291c:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 800291e:	4810      	ldr	r0, [pc, #64]	; (8002960 <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002920:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8002922:	4c10      	ldr	r4, [pc, #64]	; (8002964 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8002924:	b084      	sub	sp, #16
	htim6.Init.Period = 7679;
 8002926:	f641 51ff 	movw	r1, #7679	; 0x1dff
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800292a:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 800292c:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800292e:	4620      	mov	r0, r4
	htim6.Init.Period = 7679;
 8002930:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002932:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8002934:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002936:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800293a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800293e:	f006 f853 	bl	80089e8 <HAL_TIM_Base_Init>
 8002942:	b950      	cbnz	r0, 800295a <MX_TIM6_Init_Custom_Rate+0x3e>
 8002944:	4603      	mov	r3, r0
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002946:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002948:	a901      	add	r1, sp, #4
 800294a:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294c:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800294e:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002950:	f006 f9ba 	bl	8008cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002954:	b908      	cbnz	r0, 800295a <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8002956:	b004      	add	sp, #16
 8002958:	bd10      	pop	{r4, pc}
		Error_Handler();
 800295a:	f7ff ff2b 	bl	80027b4 <Error_Handler>
 800295e:	bf00      	nop
 8002960:	40001000 	.word	0x40001000
 8002964:	24008e40 	.word	0x24008e40

08002968 <main>:
{
 8002968:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800296c:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 800296e:	f000 ff07 	bl	8003780 <HAL_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 8002972:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002976:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800297a:	4bd0      	ldr	r3, [pc, #832]	; (8002cbc <main+0x354>)
 800297c:	2600      	movs	r6, #0
 800297e:	f8c3 6250 	str.w	r6, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002982:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002986:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002990:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002996:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	4dc9      	ldr	r5, [pc, #804]	; (8002cc0 <main+0x358>)
	SystemClock_Config_For_OC();
 800299c:	f7ff ff1e 	bl	80027dc <SystemClock_Config_For_OC>
	  HAL_Delay(20);  //needed for USB setup. USB somentimes (and almost always oh an Android phone) does not initialize
 80029a0:	2014      	movs	r0, #20
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029a2:	2401      	movs	r4, #1
	  HAL_Delay(20);  //needed for USB setup. USB somentimes (and almost always oh an Android phone) does not initialize
 80029a4:	f000 ff30 	bl	8003808 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	9621      	str	r6, [sp, #132]	; 0x84
 80029aa:	9622      	str	r6, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	f04f 0902 	mov.w	r9, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	9623      	str	r6, [sp, #140]	; 0x8c
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80029b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b6:	4632      	mov	r2, r6
 80029b8:	48c2      	ldr	r0, [pc, #776]	; (8002cc4 <main+0x35c>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80029ba:	4688      	mov	r8, r1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029bc:	2703      	movs	r7, #3
  hadc1.Instance = ADC1;
 80029be:	f8df a334 	ldr.w	sl, [pc, #820]	; 8002cf4 <main+0x38c>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80029c2:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c6:	e9cd 661f 	strd	r6, r6, [sp, #124]	; 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80029d6:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 80029da:	f00c 0c04 	and.w	ip, ip, #4
 80029de:	f8cd c018 	str.w	ip, [sp, #24]
 80029e2:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029e4:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 80029e8:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80029ec:	f8c5 c0e0 	str.w	ip, [r5, #224]	; 0xe0
 80029f0:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 80029f4:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 80029f8:	f8cd c01c 	str.w	ip, [sp, #28]
 80029fc:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 8002a02:	ea4c 0c04 	orr.w	ip, ip, r4
 8002a06:	f8c5 c0e0 	str.w	ip, [r5, #224]	; 0xe0
 8002a0a:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 8002a0e:	ea0c 0c04 	and.w	ip, ip, r4
 8002a12:	f8cd c020 	str.w	ip, [sp, #32]
 8002a16:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a18:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 8002a1c:	ea4c 0c09 	orr.w	ip, ip, r9
 8002a20:	f8c5 c0e0 	str.w	ip, [r5, #224]	; 0xe0
 8002a24:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 8002a28:	ea0c 0c09 	and.w	ip, ip, r9
 8002a2c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a32:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 8002a36:	f04c 0c08 	orr.w	ip, ip, #8
 8002a3a:	f8c5 c0e0 	str.w	ip, [r5, #224]	; 0xe0
 8002a3e:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 8002a42:	f00c 0c08 	and.w	ip, ip, #8
 8002a46:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8002a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002a4c:	f003 f984 	bl	8005d58 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8002a50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a54:	4a9c      	ldr	r2, [pc, #624]	; (8002cc8 <main+0x360>)
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002a56:	a91f      	add	r1, sp, #124	; 0x7c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a58:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8002a5a:	901f      	str	r0, [sp, #124]	; 0x7c
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002a5c:	489b      	ldr	r0, [pc, #620]	; (8002ccc <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a5e:	9220      	str	r2, [sp, #128]	; 0x80
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f003 f85c 	bl	8005b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a64:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a68:	a91f      	add	r1, sp, #124	; 0x7c
 8002a6a:	4898      	ldr	r0, [pc, #608]	; (8002ccc <main+0x364>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	9621      	str	r6, [sp, #132]	; 0x84
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002a6e:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	9722      	str	r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	e9cd 291f 	strd	r2, r9, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a76:	f003 f851 	bl	8005b1c <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	a91f      	add	r1, sp, #124	; 0x7c
 8002a7c:	4891      	ldr	r0, [pc, #580]	; (8002cc4 <main+0x35c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	9622      	str	r6, [sp, #136]	; 0x88
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002a80:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	e9cd 4620 	strd	r4, r6, [sp, #128]	; 0x80
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f003 f848 	bl	8005b1c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8002a8c:	4632      	mov	r2, r6
 8002a8e:	2104      	movs	r1, #4
 8002a90:	2028      	movs	r0, #40	; 0x28
 8002a92:	f001 fcf7 	bl	8004484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a96:	2028      	movs	r0, #40	; 0x28
 8002a98:	f001 fd2a 	bl	80044f0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a9c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002aa0:	4632      	mov	r2, r6
 8002aa2:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aa4:	4323      	orrs	r3, r4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002aa6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aa8:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8002aac:	f8d5 50d8 	ldr.w	r5, [r5, #216]	; 0xd8
 8002ab0:	4025      	ands	r5, r4
 8002ab2:	9505      	str	r5, [sp, #20]
 8002ab4:	9d05      	ldr	r5, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002ab6:	f001 fce5 	bl	8004484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002aba:	200b      	movs	r0, #11
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002abc:	2504      	movs	r5, #4
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002abe:	f001 fd17 	bl	80044f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8002ac2:	4632      	mov	r2, r6
 8002ac4:	4649      	mov	r1, r9
 8002ac6:	200c      	movs	r0, #12
 8002ac8:	f001 fcdc 	bl	8004484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002acc:	200c      	movs	r0, #12
 8002ace:	f001 fd0f 	bl	80044f0 <HAL_NVIC_EnableIRQ>
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002ad2:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  hadc1.Instance = ADC1;
 8002ad6:	4a7e      	ldr	r2, [pc, #504]	; (8002cd0 <main+0x368>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ad8:	2308      	movs	r3, #8
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ada:	4650      	mov	r0, sl
  ADC_MultiModeTypeDef multimode = {0};
 8002adc:	960e      	str	r6, [sp, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ade:	9618      	str	r6, [sp, #96]	; 0x60
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002ae0:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ae4:	f8ca 600c 	str.w	r6, [sl, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002ae8:	f88a 6014 	strb.w	r6, [sl, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002aec:	f88a 601c 	strb.w	r6, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002af0:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002af4:	f88a 6038 	strb.w	r6, [sl, #56]	; 0x38
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002af8:	f88a 4015 	strb.w	r4, [sl, #21]
  hadc1.Init.NbrOfConversion = 1;
 8002afc:	f8ca 4018 	str.w	r4, [sl, #24]
  hadc1.Instance = ADC1;
 8002b00:	f8ca 2000 	str.w	r2, [sl]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002b04:	f8ca b004 	str.w	fp, [sl, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b08:	f8ca 3008 	str.w	r3, [sl, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b0c:	f8ca 5010 	str.w	r5, [sl, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002b10:	f8ca 9030 	str.w	r9, [sl, #48]	; 0x30
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b14:	e9ca 6609 	strd	r6, r6, [sl, #36]	; 0x24
  ADC_MultiModeTypeDef multimode = {0};
 8002b18:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b1c:	e9cd 6619 	strd	r6, r6, [sp, #100]	; 0x64
 8002b20:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
 8002b24:	e9cd 661d 	strd	r6, r6, [sp, #116]	; 0x74
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b28:	f001 fa4c 	bl	8003fc4 <HAL_ADC_Init>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	f040 8135 	bne.w	8002d9c <main+0x434>
  multimode.Mode = ADC_DUALMODE_INTERL;
 8002b32:	2007      	movs	r0, #7
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002b34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b38:	a90e      	add	r1, sp, #56	; 0x38
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8002b3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  multimode.Mode = ADC_DUALMODE_INTERL;
 8002b3e:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b40:	4650      	mov	r0, sl
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002b42:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b44:	f001 fc2a 	bl	800439c <HAL_ADCEx_MultiModeConfigChannel>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	f040 8126 	bne.w	8002d9c <main+0x434>
  sConfig.Channel = ADC_CHANNEL_5;
 8002b50:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002cf8 <main+0x390>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b54:	2706      	movs	r7, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b56:	f240 76ff 	movw	r6, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b5a:	a918      	add	r1, sp, #96	; 0x60
 8002b5c:	4650      	mov	r0, sl
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b5e:	921a      	str	r2, [sp, #104]	; 0x68
  sConfig.OffsetSignedSaturation = DISABLE;
 8002b60:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b64:	961b      	str	r6, [sp, #108]	; 0x6c
  sConfig.Offset = 0;
 8002b66:	e9cd 521c 	strd	r5, r2, [sp, #112]	; 0x70
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b6a:	e9cd 8718 	strd	r8, r7, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b6e:	f000 fedb 	bl	8003928 <HAL_ADC_ConfigChannel>
 8002b72:	4602      	mov	r2, r0
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f040 8111 	bne.w	8002d9c <main+0x434>
  hadc2.Instance = ADC2;
 8002b7a:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <main+0x36c>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002b7c:	2108      	movs	r1, #8
  hadc2.Instance = ADC2;
 8002b7e:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8002cfc <main+0x394>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b82:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002b84:	4618      	mov	r0, r3
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002b86:	751a      	strb	r2, [r3, #20]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002b88:	771a      	strb	r2, [r3, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002b90:	f8c3 b004 	str.w	fp, [r3, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b94:	611d      	str	r5, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002b96:	755c      	strb	r4, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8002b98:	619c      	str	r4, [r3, #24]
  hadc2.Instance = ADC2;
 8002b9a:	f8c3 c000 	str.w	ip, [r3]
 8002b9e:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ba0:	e9c3 1202 	strd	r1, r2, [r3, #8]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002ba4:	e9c3 290b 	strd	r2, r9, [r3, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ba8:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
 8002bac:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 8002bb0:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002bb4:	f001 fa06 	bl	8003fc4 <HAL_ADC_Init>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	f040 80ee 	bne.w	8002d9c <main+0x434>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bc0:	9b03      	ldr	r3, [sp, #12]
 8002bc2:	a911      	add	r1, sp, #68	; 0x44
  sConfig.OffsetSignedSaturation = DISABLE;
 8002bc4:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bc8:	4618      	mov	r0, r3
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bca:	e9cd 8711 	strd	r8, r7, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bce:	e9cd 2613 	strd	r2, r6, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 8002bd2:	e9cd 5215 	strd	r5, r2, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bd6:	f000 fea7 	bl	8003928 <HAL_ADC_ConfigChannel>
 8002bda:	4601      	mov	r1, r0
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	f040 80dd 	bne.w	8002d9c <main+0x434>
  DAC_ChannelConfTypeDef sConfig = {0};
 8002be2:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8002be4:	4d3c      	ldr	r5, [pc, #240]	; (8002cd8 <main+0x370>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8002be6:	a81f      	add	r0, sp, #124	; 0x7c
 8002be8:	f009 fe09 	bl	800c7fe <memset>
  hdac1.Instance = DAC1;
 8002bec:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <main+0x374>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002bee:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 8002bf0:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002bf2:	f001 fca3 	bl	800453c <HAL_DAC_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	f040 80cf 	bne.w	8002d9c <main+0x434>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002bfe:	2616      	movs	r6, #22
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c00:	461a      	mov	r2, r3
 8002c02:	a91f      	add	r1, sp, #124	; 0x7c
 8002c04:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002c06:	931f      	str	r3, [sp, #124]	; 0x7c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002c08:	9323      	str	r3, [sp, #140]	; 0x8c
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002c0a:	9620      	str	r6, [sp, #128]	; 0x80
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002c0c:	e9cd 3421 	strd	r3, r4, [sp, #132]	; 0x84
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c10:	f001 fda8 	bl	8004764 <HAL_DAC_ConfigChannel>
 8002c14:	4602      	mov	r2, r0
 8002c16:	2800      	cmp	r0, #0
 8002c18:	f040 80c0 	bne.w	8002d9c <main+0x434>
  hlptim2.Instance = LPTIM2;
 8002c1c:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <main+0x378>)
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002c1e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002c22:	f64f 74ff 	movw	r4, #65535	; 0xffff
  hlptim2.Instance = LPTIM2;
 8002c26:	4d2f      	ldr	r5, [pc, #188]	; (8002ce4 <main+0x37c>)
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8002c28:	4618      	mov	r0, r3
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002c2a:	6299      	str	r1, [r3, #40]	; 0x28
  hlptim2.Instance = LPTIM2;
 8002c2c:	601d      	str	r5, [r3, #0]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002c2e:	615c      	str	r4, [r3, #20]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002c30:	e9c3 2201 	strd	r2, r2, [r3, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002c34:	e9c3 2203 	strd	r2, r2, [r3, #12]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002c38:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002c3c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8002c40:	f003 f89c 	bl	8005d7c <HAL_LPTIM_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2800      	cmp	r0, #0
 8002c48:	f040 80a8 	bne.w	8002d9c <main+0x434>
  htim6.Instance = TIM6;
 8002c4c:	4c26      	ldr	r4, [pc, #152]	; (8002ce8 <main+0x380>)
  htim6.Init.Period = 8191;
 8002c4e:	f641 71ff 	movw	r1, #8191	; 0x1fff
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c52:	2280      	movs	r2, #128	; 0x80
  htim6.Instance = TIM6;
 8002c54:	4d25      	ldr	r5, [pc, #148]	; (8002cec <main+0x384>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c56:	900b      	str	r0, [sp, #44]	; 0x2c
  htim6.Init.Prescaler = 0;
 8002c58:	6060      	str	r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c5a:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c5c:	60a3      	str	r3, [r4, #8]
  htim6.Instance = TIM6;
 8002c5e:	6025      	str	r5, [r4, #0]
  htim6.Init.Period = 8191;
 8002c60:	60e1      	str	r1, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c62:	61a2      	str	r2, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c64:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c68:	f005 febe 	bl	80089e8 <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	f040 8094 	bne.w	8002d9c <main+0x434>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c74:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c76:	a90b      	add	r1, sp, #44	; 0x2c
 8002c78:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7a:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c7c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c7e:	f006 f823 	bl	8008cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	f040 808a 	bne.w	8002d9c <main+0x434>
  huart3.Instance = USART3;
 8002c88:	4c19      	ldr	r4, [pc, #100]	; (8002cf0 <main+0x388>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8a:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 8002c8c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c90:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 8002c92:	f505 5560 	add.w	r5, r5, #14336	; 0x3800
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c96:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c98:	6162      	str	r2, [r4, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c9a:	6123      	str	r3, [r4, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c9c:	62a3      	str	r3, [r4, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 8002c9e:	e9c4 5100 	strd	r5, r1, [r4]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ca2:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca6:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002caa:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cae:	f006 f9cd 	bl	800904c <HAL_UART_Init>
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d171      	bne.n	8002d9c <main+0x434>
 8002cb8:	e022      	b.n	8002d00 <main+0x398>
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00
 8002cc0:	58024400 	.word	0x58024400
 8002cc4:	58020000 	.word	0x58020000
 8002cc8:	11110000 	.word	0x11110000
 8002ccc:	58020800 	.word	0x58020800
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	24002b48 	.word	0x24002b48
 8002cd8:	24002aa8 	.word	0x24002aa8
 8002cdc:	40007400 	.word	0x40007400
 8002ce0:	24007814 	.word	0x24007814
 8002ce4:	58002400 	.word	0x58002400
 8002ce8:	24008e40 	.word	0x24008e40
 8002cec:	40001000 	.word	0x40001000
 8002cf0:	24002abc 	.word	0x24002abc
 8002cf4:	240077a8 	.word	0x240077a8
 8002cf8:	14f00020 	.word	0x14f00020
 8002cfc:	40022100 	.word	0x40022100
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d00:	4620      	mov	r0, r4
 8002d02:	f006 fd07 	bl	8009714 <HAL_UARTEx_SetTxFifoThreshold>
 8002d06:	4601      	mov	r1, r0
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d147      	bne.n	8002d9c <main+0x434>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f006 fd53 	bl	80097b8 <HAL_UARTEx_SetRxFifoThreshold>
 8002d12:	2800      	cmp	r0, #0
 8002d14:	d142      	bne.n	8002d9c <main+0x434>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002d16:	4620      	mov	r0, r4
 8002d18:	f006 fcde 	bl	80096d8 <HAL_UARTEx_DisableFifoMode>
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d13c      	bne.n	8002d9c <main+0x434>
  MX_USB_DEVICE_Init();
 8002d22:	f008 f945 	bl	800afb0 <MX_USB_DEVICE_Init>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002d26:	48a2      	ldr	r0, [pc, #648]	; (8002fb0 <main+0x648>)
 8002d28:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002d2c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002d30:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002d34:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002d38:	f3c2 06c9 	ubfx	r6, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002d3c:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8002d40:	07b7      	lsls	r7, r6, #30
 8002d42:	0155      	lsls	r5, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002d44:	ea05 040c 	and.w	r4, r5, ip
 8002d48:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002d4a:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002d4c:	ea41 0304 	orr.w	r3, r1, r4
      } while (ways-- != 0U);
 8002d50:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002d52:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8002d56:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8002d5a:	1c53      	adds	r3, r2, #1
 8002d5c:	d1f6      	bne.n	8002d4c <main+0x3e4>
 8002d5e:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
 8002d60:	f115 0f20 	cmn.w	r5, #32
 8002d64:	d1ee      	bne.n	8002d44 <main+0x3dc>
 8002d66:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002d6a:	6943      	ldr	r3, [r0, #20]
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6143      	str	r3, [r0, #20]
 8002d72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d76:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8002d7a:	f7ff fdcf 	bl	800291c <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d84:	488b      	ldr	r0, [pc, #556]	; (8002fb4 <main+0x64c>)
 8002d86:	f001 fa35 	bl	80041f4 <HAL_ADCEx_Calibration_Start>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	b930      	cbnz	r0, 8002d9c <main+0x434>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8002d8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d92:	4889      	ldr	r0, [pc, #548]	; (8002fb8 <main+0x650>)
 8002d94:	f001 fa2e 	bl	80041f4 <HAL_ADCEx_Calibration_Start>
 8002d98:	4606      	mov	r6, r0
 8002d9a:	b108      	cbz	r0, 8002da0 <main+0x438>
    Error_Handler();
 8002d9c:	f7ff fd0a 	bl	80027b4 <Error_Handler>
	volume= 0.1;
 8002da0:	4b86      	ldr	r3, [pc, #536]	; (8002fbc <main+0x654>)
	SetFstep(2);
 8002da2:	2002      	movs	r0, #2
	volume= 0.1;
 8002da4:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 8003068 <main+0x700>
	AMindex  = LSBindex = 1;
 8002da8:	2401      	movs	r4, #1
	meanavg = 0.f;
 8002daa:	ed9f ba85 	vldr	s22, [pc, #532]	; 8002fc0 <main+0x658>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002dae:	f44f 6700 	mov.w	r7, #2048	; 0x800
	volume= 0.1;
 8002db2:	f8cb 3000 	str.w	r3, [fp]
	SetFstep(2);
 8002db6:	f7fd ffdd 	bl	8000d74 <SetFstep>
	cwpitch = CWPITCH;
 8002dba:	4b82      	ldr	r3, [pc, #520]	; (8002fc4 <main+0x65c>)
	bw[AM]   = bw[LSB]  = Wide;
 8002dbc:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	cwpitch = CWPITCH;
 8002dc0:	4881      	ldr	r0, [pc, #516]	; (8002fc8 <main+0x660>)
	os_time = 0;
 8002dc2:	4a82      	ldr	r2, [pc, #520]	; (8002fcc <main+0x664>)
	cwpitch = CWPITCH;
 8002dc4:	6018      	str	r0, [r3, #0]
	os_time = 0;
 8002dc6:	6016      	str	r6, [r2, #0]
	meanavg = 0.f;
 8002dc8:	4b81      	ldr	r3, [pc, #516]	; (8002fd0 <main+0x668>)
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8002dca:	4a82      	ldr	r2, [pc, #520]	; (8002fd4 <main+0x66c>)
 8002dcc:	4882      	ldr	r0, [pc, #520]	; (8002fd8 <main+0x670>)
	meanavg = 0.f;
 8002dce:	ed83 ba00 	vstr	s22, [r3]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8002dd2:	6010      	str	r0, [r2, #0]
	Muted   = false;
 8002dd4:	4b81      	ldr	r3, [pc, #516]	; (8002fdc <main+0x674>)
	AMindex  = LSBindex = 1;
 8002dd6:	4882      	ldr	r0, [pc, #520]	; (8002fe0 <main+0x678>)
	Muted   = false;
 8002dd8:	701e      	strb	r6, [r3, #0]
	AMindex  = LSBindex = 1;
 8002dda:	8004      	strh	r4, [r0, #0]
 8002ddc:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <main+0x67c>)
	USBindex = CWindex  = 1;
 8002dde:	4a82      	ldr	r2, [pc, #520]	; (8002fe8 <main+0x680>)
 8002de0:	4882      	ldr	r0, [pc, #520]	; (8002fec <main+0x684>)
	AMindex  = LSBindex = 1;
 8002de2:	801c      	strh	r4, [r3, #0]
	USBindex = CWindex  = 1;
 8002de4:	8014      	strh	r4, [r2, #0]
 8002de6:	8004      	strh	r4, [r0, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8002de8:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <main+0x688>)
	agc[AM]  = agc[LSB] = Slow;
 8002dea:	4a82      	ldr	r2, [pc, #520]	; (8002ff4 <main+0x68c>)
 8002dec:	4882      	ldr	r0, [pc, #520]	; (8002ff8 <main+0x690>)
	bw[AM]   = bw[LSB]  = Wide;
 8002dee:	6019      	str	r1, [r3, #0]
	agc[AM]  = agc[LSB] = Slow;
 8002df0:	6010      	str	r0, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8002df2:	4b82      	ldr	r3, [pc, #520]	; (8002ffc <main+0x694>)
 8002df4:	4982      	ldr	r1, [pc, #520]	; (8003000 <main+0x698>)
	AGC_decay[Slow] = 0.99995f;
 8002df6:	4a83      	ldr	r2, [pc, #524]	; (8003004 <main+0x69c>)
	Hangcount[Fast] = 2;
 8002df8:	4883      	ldr	r0, [pc, #524]	; (8003008 <main+0x6a0>)
 8002dfa:	4e84      	ldr	r6, [pc, #528]	; (800300c <main+0x6a4>)
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002dfc:	4d84      	ldr	r5, [pc, #528]	; (8003010 <main+0x6a8>)
	AGC_decay[Fast] = 0.9995f;
 8002dfe:	6019      	str	r1, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8002e00:	605a      	str	r2, [r3, #4]
	AgcThreshold    = 1.92e-4f;
 8002e02:	4984      	ldr	r1, [pc, #528]	; (8003014 <main+0x6ac>)
 8002e04:	4a84      	ldr	r2, [pc, #528]	; (8003018 <main+0x6b0>)
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002e06:	4b85      	ldr	r3, [pc, #532]	; (800301c <main+0x6b4>)
	Hangcount[Fast] = 2;
 8002e08:	6006      	str	r6, [r0, #0]
	SetFOutVHF(10000000);
 8002e0a:	4885      	ldr	r0, [pc, #532]	; (8003020 <main+0x6b8>)
	AgcThreshold    = 1.92e-4f;
 8002e0c:	6011      	str	r1, [r2, #0]
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002e0e:	602b      	str	r3, [r5, #0]
	SetFOutVHF(10000000);
 8002e10:	f7ff fcae 	bl	8002770 <SetFOutVHF>
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002e14:	edd5 7a00 	vldr	s15, [r5]
 8002e18:	eddf 6a82 	vldr	s13, [pc, #520]	; 8003024 <main+0x6bc>
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002e1c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003028 <main+0x6c0>
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002e20:	ee67 7aa6 	vmul.f32	s15, s15, s13
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002e24:	4b81      	ldr	r3, [pc, #516]	; (800302c <main+0x6c4>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002e26:	4e82      	ldr	r6, [pc, #520]	; (8003030 <main+0x6c8>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002e28:	ee27 7a87 	vmul.f32	s14, s15, s14
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002e2c:	edc5 7a00 	vstr	s15, [r5]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002e30:	ed83 7a00 	vstr	s14, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8002e34:	f7ff f934 	bl	80020a0 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002e38:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <main+0x6cc>)
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	9701      	str	r7, [sp, #4]
 8002e3e:	2140      	movs	r1, #64	; 0x40
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	487d      	ldr	r0, [pc, #500]	; (8003038 <main+0x6d0>)
 8002e44:	4b7d      	ldr	r3, [pc, #500]	; (800303c <main+0x6d4>)
 8002e46:	f008 ff29 	bl	800bc9c <arm_fir_decimate_init_f32>
 8002e4a:	7030      	strb	r0, [r6, #0]
	while(arc != ARM_MATH_SUCCESS)
 8002e4c:	b100      	cbz	r0, 8002e50 <main+0x4e8>
 8002e4e:	e7fe      	b.n	8002e4e <main+0x4e6>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8002e50:	4b7b      	ldr	r3, [pc, #492]	; (8003040 <main+0x6d8>)
 8002e52:	2204      	movs	r2, #4
 8002e54:	9701      	str	r7, [sp, #4]
 8002e56:	2140      	movs	r1, #64	; 0x40
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	487a      	ldr	r0, [pc, #488]	; (8003044 <main+0x6dc>)
 8002e5c:	4b77      	ldr	r3, [pc, #476]	; (800303c <main+0x6d4>)
 8002e5e:	f008 ff1d 	bl	800bc9c <arm_fir_decimate_init_f32>
 8002e62:	7030      	strb	r0, [r6, #0]
	while(arc != ARM_MATH_SUCCESS)
 8002e64:	b100      	cbz	r0, 8002e68 <main+0x500>
 8002e66:	e7fe      	b.n	8002e66 <main+0x4fe>
	Load_Presets();
 8002e68:	f7fd fc72 	bl	8000750 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7fd fcfb 	bl	8000868 <Tune_Preset>
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8002e72:	f7ff fb8b 	bl	800258c <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8002e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e7a:	4973      	ldr	r1, [pc, #460]	; (8003048 <main+0x6e0>)
 8002e7c:	484d      	ldr	r0, [pc, #308]	; (8002fb4 <main+0x64c>)
 8002e7e:	f001 fa0d 	bl	800429c <HAL_ADCEx_MultiModeStart_DMA>
 8002e82:	4604      	mov	r4, r0
 8002e84:	2800      	cmp	r0, #0
 8002e86:	d189      	bne.n	8002d9c <main+0x434>
	HAL_TIM_Base_Start(&htim6);
 8002e88:	4870      	ldr	r0, [pc, #448]	; (800304c <main+0x6e4>)
 8002e8a:	f005 fe3f 	bl	8008b0c <HAL_TIM_Base_Start>
 8002e8e:	4d70      	ldr	r5, [pc, #448]	; (8003050 <main+0x6e8>)
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002e90:	4621      	mov	r1, r4
 8002e92:	4870      	ldr	r0, [pc, #448]	; (8003054 <main+0x6ec>)
 8002e94:	f001 fb68 	bl	8004568 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8002e98:	4621      	mov	r1, r4
 8002e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e9e:	9400      	str	r4, [sp, #0]
 8002ea0:	4a6d      	ldr	r2, [pc, #436]	; (8003058 <main+0x6f0>)
 8002ea2:	486c      	ldr	r0, [pc, #432]	; (8003054 <main+0x6ec>)
 8002ea4:	f001 fb8e 	bl	80045c4 <HAL_DAC_Start_DMA>
	if (USBRXLength)
 8002ea8:	682b      	ldr	r3, [r5, #0]
 8002eaa:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800306c <main+0x704>
 8002eae:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8003070 <main+0x708>
 8002eb2:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003074 <main+0x70c>
 8002eb6:	4f69      	ldr	r7, [pc, #420]	; (800305c <main+0x6f4>)
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f\r", SValue);
 8002eb8:	4e69      	ldr	r6, [pc, #420]	; (8003060 <main+0x6f8>)
 8002eba:	4c6a      	ldr	r4, [pc, #424]	; (8003064 <main+0x6fc>)
			volume += 0.1;
 8002ebc:	ed9f ab36 	vldr	d10, [pc, #216]	; 8002f98 <main+0x630>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002ec0:	ed9f 9b37 	vldr	d9, [pc, #220]	; 8002fa0 <main+0x638>
 8002ec4:	ed9f 8b38 	vldr	d8, [pc, #224]	; 8002fa8 <main+0x640>
	if (USBRXLength)
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80fe 	beq.w	80030ca <main+0x762>
		result = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
		USBRXLength = 0;
 8002ed4:	602b      	str	r3, [r5, #0]
	if (result == HAL_OK)
 8002ed6:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8002eda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 80cf 	bne.w	8003082 <main+0x71a>
		switch (UartRXString[0])
 8002ee4:	f899 3000 	ldrb.w	r3, [r9]
		UartRXDataReady = RESET;
 8002ee8:	f88a 2000 	strb.w	r2, [sl]
		switch (UartRXString[0])
 8002eec:	3b2b      	subs	r3, #43	; 0x2b
 8002eee:	2b4c      	cmp	r3, #76	; 0x4c
 8002ef0:	f200 80c5 	bhi.w	800307e <main+0x716>
 8002ef4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ef8:	00c300f1 	.word	0x00c300f1
 8002efc:	00c3012a 	.word	0x00c3012a
 8002f00:	00c300c3 	.word	0x00c300c3
 8002f04:	01240127 	.word	0x01240127
 8002f08:	01460120 	.word	0x01460120
 8002f0c:	013e0142 	.word	0x013e0142
 8002f10:	011c013a 	.word	0x011c013a
 8002f14:	00c30118 	.word	0x00c30118
 8002f18:	00c300c3 	.word	0x00c300c3
 8002f1c:	00c300c3 	.word	0x00c300c3
 8002f20:	00c300c3 	.word	0x00c300c3
 8002f24:	00c300c3 	.word	0x00c300c3
 8002f28:	00c300c3 	.word	0x00c300c3
 8002f2c:	00c300c3 	.word	0x00c300c3
 8002f30:	00c300c3 	.word	0x00c300c3
 8002f34:	00c300c3 	.word	0x00c300c3
 8002f38:	00c300c3 	.word	0x00c300c3
 8002f3c:	00c300c3 	.word	0x00c300c3
 8002f40:	00c300c3 	.word	0x00c300c3
 8002f44:	00c300c3 	.word	0x00c300c3
 8002f48:	00c300c3 	.word	0x00c300c3
 8002f4c:	00c300c3 	.word	0x00c300c3
 8002f50:	00c300c3 	.word	0x00c300c3
 8002f54:	00c300c3 	.word	0x00c300c3
 8002f58:	00c300c3 	.word	0x00c300c3
 8002f5c:	00c300c3 	.word	0x00c300c3
 8002f60:	00c300c3 	.word	0x00c300c3
 8002f64:	00c30114 	.word	0x00c30114
 8002f68:	00c30110 	.word	0x00c30110
 8002f6c:	010c00c3 	.word	0x010c00c3
 8002f70:	00c300c3 	.word	0x00c300c3
 8002f74:	00c300c3 	.word	0x00c300c3
 8002f78:	010800c3 	.word	0x010800c3
 8002f7c:	010400c3 	.word	0x010400c3
 8002f80:	00c300c3 	.word	0x00c300c3
 8002f84:	00c300c3 	.word	0x00c300c3
 8002f88:	00c30100 	.word	0x00c30100
 8002f8c:	00c300ed 	.word	0x00c300ed
 8002f90:	00c0      	.short	0x00c0
 8002f92:	bf00      	nop
 8002f94:	f3af 8000 	nop.w
 8002f98:	9999999a 	.word	0x9999999a
 8002f9c:	3fb99999 	.word	0x3fb99999
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	409f4000 	.word	0x409f4000
 8002fa8:	9916f6a6 	.word	0x9916f6a6
 8002fac:	400a93fc 	.word	0x400a93fc
 8002fb0:	e000ed00 	.word	0xe000ed00
 8002fb4:	240077a8 	.word	0x240077a8
 8002fb8:	24002b48 	.word	0x24002b48
 8002fbc:	3dcccccd 	.word	0x3dcccccd
 8002fc0:	00000000 	.word	0x00000000
 8002fc4:	24009ea0 	.word	0x24009ea0
 8002fc8:	44228000 	.word	0x44228000
 8002fcc:	24009eac 	.word	0x24009eac
 8002fd0:	2400c3c0 	.word	0x2400c3c0
 8002fd4:	24008e90 	.word	0x24008e90
 8002fd8:	3f7cac08 	.word	0x3f7cac08
 8002fdc:	240077a4 	.word	0x240077a4
 8002fe0:	2400d7e0 	.word	0x2400d7e0
 8002fe4:	2400d7e2 	.word	0x2400d7e2
 8002fe8:	24008e94 	.word	0x24008e94
 8002fec:	24008058 	.word	0x24008058
 8002ff0:	24008e98 	.word	0x24008e98
 8002ff4:	2400780c 	.word	0x2400780c
 8002ff8:	00010101 	.word	0x00010101
 8002ffc:	2400c3cc 	.word	0x2400c3cc
 8003000:	3f7fdf3b 	.word	0x3f7fdf3b
 8003004:	3f7ffcb9 	.word	0x3f7ffcb9
 8003008:	24009ea4 	.word	0x24009ea4
 800300c:	001e0002 	.word	0x001e0002
 8003010:	24004484 	.word	0x24004484
 8003014:	3949539c 	.word	0x3949539c
 8003018:	24009e9c 	.word	0x24009e9c
 800301c:	4b189680 	.word	0x4b189680
 8003020:	00989680 	.word	0x00989680
 8003024:	3f8005bd 	.word	0x3f8005bd
 8003028:	3b800000 	.word	0x3b800000
 800302c:	24008054 	.word	0x24008054
 8003030:	2400c3c4 	.word	0x2400c3c4
 8003034:	24004d8c 	.word	0x24004d8c
 8003038:	24000684 	.word	0x24000684
 800303c:	240000f4 	.word	0x240000f4
 8003040:	24009eb0 	.word	0x24009eb0
 8003044:	240088d8 	.word	0x240088d8
 8003048:	2400cbe0 	.word	0x2400cbe0
 800304c:	24008e40 	.word	0x24008e40
 8003050:	240076a0 	.word	0x240076a0
 8003054:	24002aa8 	.word	0x24002aa8
 8003058:	24006ea0 	.word	0x24006ea0
 800305c:	2400447c 	.word	0x2400447c
 8003060:	08016384 	.word	0x08016384
 8003064:	240076a4 	.word	0x240076a4
 8003068:	240043dc 	.word	0x240043dc
 800306c:	24000668 	.word	0x24000668
 8003070:	2400448c 	.word	0x2400448c
 8003074:	240088d4 	.word	0x240088d4
			SetBW((Bwidth)Wide);  break;
 8003078:	2001      	movs	r0, #1
 800307a:	f7fd fb93 	bl	80007a4 <SetBW>
		DisplayStatus();
 800307e:	f7ff fa85 	bl	800258c <DisplayStatus>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003082:	ed98 0a00 	vldr	s0, [r8]
 8003086:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800308a:	ee20 0b09 	vmul.f64	d0, d0, d9
 800308e:	f00b fbdf 	bl	800e850 <log10>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f\r", SValue);
 8003092:	4631      	mov	r1, r6
 8003094:	4620      	mov	r0, r4
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003096:	ee20 0b08 	vmul.f64	d0, d0, d8
 800309a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f\r", SValue);
 800309e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80030a2:	ed87 0a00 	vstr	s0, [r7]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f\r", SValue);
 80030a6:	ec53 2b17 	vmov	r2, r3, d7
 80030aa:	f00a f8a5 	bl	800d1f8 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen(UartTXString));
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7fd f976 	bl	80003a0 <strlen>
 80030b4:	b281      	uxth	r1, r0
 80030b6:	4620      	mov	r0, r4
 80030b8:	f007 fff6 	bl	800b0a8 <CDC_Transmit_FS>
			  HAL_Delay(100);
 80030bc:	2064      	movs	r0, #100	; 0x64
 80030be:	f000 fba3 	bl	8003808 <HAL_Delay>
	if (USBRXLength)
 80030c2:	682b      	ldr	r3, [r5, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f47f af02 	bne.w	8002ece <main+0x566>
		result = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80030d0:	e701      	b.n	8002ed6 <main+0x56e>
			SetMode((Mode)USB); break;
 80030d2:	2002      	movs	r0, #2
 80030d4:	f7fd fd62 	bl	8000b9c <SetMode>
 80030d8:	e7d1      	b.n	800307e <main+0x716>
			volume += 0.1;
 80030da:	ed9b 7a00 	vldr	s14, [fp]
			if (volume > 1.0)
 80030de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 80030e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80030e6:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80030ea:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80030ee:	fe87 7a66 	vminnm.f32	s14, s14, s13
 80030f2:	ed8b 7a00 	vstr	s14, [fp]
 80030f6:	e7c2      	b.n	800307e <main+0x716>
			SetAGC((Agctype)Slow);  break;
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7fd fcf9 	bl	8000af0 <SetAGC>
 80030fe:	e7be      	b.n	800307e <main+0x716>
			SetBW((Bwidth)Narrow);  break;
 8003100:	2000      	movs	r0, #0
 8003102:	f7fd fb4f 	bl	80007a4 <SetBW>
 8003106:	e7ba      	b.n	800307e <main+0x716>
			SetMode((Mode)LSB); break;
 8003108:	2001      	movs	r0, #1
 800310a:	f7fd fd47 	bl	8000b9c <SetMode>
 800310e:	e7b6      	b.n	800307e <main+0x716>
			SetAGC((Agctype)Fast);  break;
 8003110:	2000      	movs	r0, #0
 8003112:	f7fd fced 	bl	8000af0 <SetAGC>
 8003116:	e7b2      	b.n	800307e <main+0x716>
			SetMode((Mode)CW); break;
 8003118:	2003      	movs	r0, #3
 800311a:	f7fd fd3f 	bl	8000b9c <SetMode>
 800311e:	e7ae      	b.n	800307e <main+0x716>
			SetMode((Mode)AM); break;
 8003120:	2000      	movs	r0, #0
 8003122:	f7fd fd3b 	bl	8000b9c <SetMode>
 8003126:	e7aa      	b.n	800307e <main+0x716>
			SetFstep(9); break;
 8003128:	2009      	movs	r0, #9
 800312a:	f7fd fe23 	bl	8000d74 <SetFstep>
 800312e:	e7a6      	b.n	800307e <main+0x716>
			SetFstep(0); break;
 8003130:	2000      	movs	r0, #0
 8003132:	f7fd fe1f 	bl	8000d74 <SetFstep>
 8003136:	e7a2      	b.n	800307e <main+0x716>
			SetFstep(5);  break;
 8003138:	2005      	movs	r0, #5
 800313a:	f7fd fe1b 	bl	8000d74 <SetFstep>
 800313e:	e79e      	b.n	800307e <main+0x716>
			FplusClicked(); break;
 8003140:	f7fd fe34 	bl	8000dac <FplusClicked>
 8003144:	e79b      	b.n	800307e <main+0x716>
			FminusClicked(); break;
 8003146:	f7fd ff7d 	bl	8001044 <FminusClicked>
 800314a:	e798      	b.n	800307e <main+0x716>
			volume -= 0.1;
 800314c:	ed9b 7a00 	vldr	s14, [fp]
 8003150:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003154:	ee37 7b4a 	vsub.f64	d7, d7, d10
 8003158:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 800315c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003164:	d5c5      	bpl.n	80030f2 <main+0x78a>
				volume = 0;
 8003166:	ed8b ba00 	vstr	s22, [fp]
 800316a:	e788      	b.n	800307e <main+0x716>
			SetFstep(1); break;
 800316c:	2001      	movs	r0, #1
 800316e:	f7fd fe01 	bl	8000d74 <SetFstep>
 8003172:	e784      	b.n	800307e <main+0x716>
			SetFstep(2);  break;
 8003174:	2002      	movs	r0, #2
 8003176:	f7fd fdfd 	bl	8000d74 <SetFstep>
 800317a:	e780      	b.n	800307e <main+0x716>
			SetFstep(3);  break;
 800317c:	2003      	movs	r0, #3
 800317e:	f7fd fdf9 	bl	8000d74 <SetFstep>
 8003182:	e77c      	b.n	800307e <main+0x716>
			SetFstep(4);  break;
 8003184:	2004      	movs	r0, #4
 8003186:	f7fd fdf5 	bl	8000d74 <SetFstep>
 800318a:	e778      	b.n	800307e <main+0x716>

0800318c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800318c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	4c14      	ldr	r4, [pc, #80]	; (80031e0 <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003190:	2102      	movs	r1, #2
{
 8003192:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003194:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003196:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800319a:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	430b      	orrs	r3, r1
 80031a0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80031a4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80031a8:	400b      	ands	r3, r1
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80031ae:	f001 f969 	bl	8004484 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80031b2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 80031b6:	2000      	movs	r0, #0
  __HAL_RCC_VREF_CLK_ENABLE();
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031bc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80031c0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80031c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 80031cc:	f000 fb34 	bl	8003838 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80031d0:	f000 fb46 	bl	8003860 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80031d4:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031d6:	b002      	add	sp, #8
 80031d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80031dc:	f000 bb36 	b.w	800384c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 80031e0:	58024400 	.word	0x58024400

080031e4 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80031e4:	4943      	ldr	r1, [pc, #268]	; (80032f4 <HAL_ADC_MspInit+0x110>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e6:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80031e8:	6802      	ldr	r2, [r0, #0]
{
 80031ea:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 80031ec:	428a      	cmp	r2, r1
{
 80031ee:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80031f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80031f8:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 80031fa:	d01f      	beq.n	800323c <HAL_ADC_MspInit+0x58>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <HAL_ADC_MspInit+0x114>)
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003202:	b00a      	add	sp, #40	; 0x28
 8003204:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <HAL_ADC_MspInit+0x118>)
 8003208:	6813      	ldr	r3, [r2, #0]
 800320a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800320c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800320e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003210:	d061      	beq.n	80032d6 <HAL_ADC_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003214:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003216:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003218:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321e:	4839      	ldr	r0, [pc, #228]	; (8003304 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003220:	432a      	orrs	r2, r5
 8003222:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800322a:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800322c:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800322e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003230:	9304      	str	r3, [sp, #16]
 8003232:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003234:	f002 fc72 	bl	8005b1c <HAL_GPIO_Init>
}
 8003238:	b00a      	add	sp, #40	; 0x28
 800323a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800323c:	4a2f      	ldr	r2, [pc, #188]	; (80032fc <HAL_ADC_MspInit+0x118>)
 800323e:	4605      	mov	r5, r0
 8003240:	6813      	ldr	r3, [r2, #0]
 8003242:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003244:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003246:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003248:	d037      	beq.n	80032ba <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800324c:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800324e:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003250:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003252:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003256:	482b      	ldr	r0, [pc, #172]	; (8003304 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003258:	4322      	orrs	r2, r4
 800325a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800325e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003262:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003264:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003266:	9606      	str	r6, [sp, #24]
    hdma_adc1.Instance = DMA1_Stream0;
 8003268:	4c27      	ldr	r4, [pc, #156]	; (8003308 <HAL_ADC_MspInit+0x124>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326a:	9302      	str	r3, [sp, #8]
 800326c:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326e:	f002 fc55 	bl	8005b1c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8003272:	4826      	ldr	r0, [pc, #152]	; (800330c <HAL_ADC_MspInit+0x128>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003274:	2109      	movs	r1, #9
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003276:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800327a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Instance = DMA1_Stream0;
 800327e:	6020      	str	r0, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003280:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003284:	6061      	str	r1, [r4, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003286:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800328a:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800328c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003290:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003292:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003294:	61a0      	str	r0, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003296:	4620      	mov	r0, r4
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003298:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800329a:	e9c4 1207 	strd	r1, r2, [r4, #28]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800329e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032a2:	f001 fba7 	bl	80049f4 <HAL_DMA_Init>
 80032a6:	b918      	cbnz	r0, 80032b0 <HAL_ADC_MspInit+0xcc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032a8:	64ec      	str	r4, [r5, #76]	; 0x4c
 80032aa:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80032ac:	b00a      	add	sp, #40	; 0x28
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80032b0:	f7ff fa80 	bl	80027b4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032b4:	64ec      	str	r4, [r5, #76]	; 0x4c
 80032b6:	63a5      	str	r5, [r4, #56]	; 0x38
 80032b8:	e7f8      	b.n	80032ac <HAL_ADC_MspInit+0xc8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80032ba:	4b11      	ldr	r3, [pc, #68]	; (8003300 <HAL_ADC_MspInit+0x11c>)
 80032bc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80032c0:	f042 0220 	orr.w	r2, r2, #32
 80032c4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80032c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	9b01      	ldr	r3, [sp, #4]
 80032d4:	e7b9      	b.n	800324a <HAL_ADC_MspInit+0x66>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_ADC_MspInit+0x11c>)
 80032d8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80032dc:	f042 0220 	orr.w	r2, r2, #32
 80032e0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80032e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	9303      	str	r3, [sp, #12]
 80032ee:	9b03      	ldr	r3, [sp, #12]
 80032f0:	e78f      	b.n	8003212 <HAL_ADC_MspInit+0x2e>
 80032f2:	bf00      	nop
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40022100 	.word	0x40022100
 80032fc:	2400066c 	.word	0x2400066c
 8003300:	58024400 	.word	0x58024400
 8003304:	58020400 	.word	0x58020400
 8003308:	2400885c 	.word	0x2400885c
 800330c:	40020010 	.word	0x40020010

08003310 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003310:	4b2d      	ldr	r3, [pc, #180]	; (80033c8 <HAL_DAC_MspInit+0xb8>)
 8003312:	6802      	ldr	r2, [r0, #0]
{
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC1)
 8003316:	429a      	cmp	r2, r3
{
 8003318:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331a:	f04f 0400 	mov.w	r4, #0
 800331e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003322:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003326:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC1)
 8003328:	d001      	beq.n	800332e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800332a:	b009      	add	sp, #36	; 0x24
 800332c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 800332e:	4b27      	ldr	r3, [pc, #156]	; (80033cc <HAL_DAC_MspInit+0xbc>)
 8003330:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003332:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003334:	2503      	movs	r5, #3
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003336:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	a903      	add	r1, sp, #12
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800333c:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003340:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003344:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003348:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800334c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003350:	9201      	str	r2, [sp, #4]
 8003352:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003354:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003364:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003366:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336a:	4819      	ldr	r0, [pc, #100]	; (80033d0 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336c:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336e:	9302      	str	r3, [sp, #8]
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003370:	4d18      	ldr	r5, [pc, #96]	; (80033d4 <HAL_DAC_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003374:	f002 fbd2 	bl	8005b1c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003378:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800337a:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800337c:	f04f 0c43 	mov.w	ip, #67	; 0x43
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003380:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003384:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003388:	602b      	str	r3, [r5, #0]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800338a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800338e:	60ec      	str	r4, [r5, #12]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003390:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003394:	4628      	mov	r0, r5
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003396:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800339a:	e9c5 7104 	strd	r7, r1, [r5, #16]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800339e:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80033a2:	f001 fb27 	bl	80049f4 <HAL_DMA_Init>
 80033a6:	b958      	cbnz	r0, 80033c0 <HAL_DAC_MspInit+0xb0>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80033a8:	60b5      	str	r5, [r6, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2101      	movs	r1, #1
 80033ae:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80033b0:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80033b2:	f001 f867 	bl	8004484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033b6:	2036      	movs	r0, #54	; 0x36
 80033b8:	f001 f89a 	bl	80044f0 <HAL_NVIC_EnableIRQ>
}
 80033bc:	b009      	add	sp, #36	; 0x24
 80033be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80033c0:	f7ff f9f8 	bl	80027b4 <Error_Handler>
 80033c4:	e7f0      	b.n	80033a8 <HAL_DAC_MspInit+0x98>
 80033c6:	bf00      	nop
 80033c8:	40007400 	.word	0x40007400
 80033cc:	58024400 	.word	0x58024400
 80033d0:	58020000 	.word	0x58020000
 80033d4:	240043e4 	.word	0x240043e4
 80033d8:	40020028 	.word	0x40020028

080033dc <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 80033dc:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033de:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 80033e0:	4a17      	ldr	r2, [pc, #92]	; (8003440 <HAL_LPTIM_MspInit+0x64>)
{
 80033e2:	b570      	push	{r4, r5, r6, lr}
  if(hlptim->Instance==LPTIM2)
 80033e4:	4291      	cmp	r1, r2
{
 80033e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80033ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80033f0:	9307      	str	r3, [sp, #28]
  if(hlptim->Instance==LPTIM2)
 80033f2:	d001      	beq.n	80033f8 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80033f4:	b008      	add	sp, #32
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80033f8:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_LPTIM_MspInit+0x68>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033fc:	f44f 6680 	mov.w	r6, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003400:	a903      	add	r1, sp, #12
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003402:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003406:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	480f      	ldr	r0, [pc, #60]	; (8003448 <HAL_LPTIM_MspInit+0x6c>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800340a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003412:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003416:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800341a:	9201      	str	r2, [sp, #4]
 800341c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003422:	432a      	orrs	r2, r5
 8003424:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800342c:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003432:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003434:	9302      	str	r3, [sp, #8]
 8003436:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003438:	f002 fb70 	bl	8005b1c <HAL_GPIO_Init>
}
 800343c:	b008      	add	sp, #32
 800343e:	bd70      	pop	{r4, r5, r6, pc}
 8003440:	58002400 	.word	0x58002400
 8003444:	58024400 	.word	0x58024400
 8003448:	58020400 	.word	0x58020400

0800344c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 800344c:	6802      	ldr	r2, [r0, #0]
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_TIM_Base_MspInit+0x40>)
 8003450:	429a      	cmp	r2, r3
 8003452:	d000      	beq.n	8003456 <HAL_TIM_Base_MspInit+0xa>
 8003454:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003458:	2200      	movs	r2, #0
 800345a:	2101      	movs	r1, #1
 800345c:	2036      	movs	r0, #54	; 0x36
{
 800345e:	b510      	push	{r4, lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003460:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 8003464:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003466:	f044 0410 	orr.w	r4, r4, #16
 800346a:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800346e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800347a:	f001 f803 	bl	8004484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800347e:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003480:	b002      	add	sp, #8
 8003482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003486:	f001 b833 	b.w	80044f0 <HAL_NVIC_EnableIRQ>
 800348a:	bf00      	nop
 800348c:	40001000 	.word	0x40001000
 8003490:	58024400 	.word	0x58024400

08003494 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8003494:	6802      	ldr	r2, [r0, #0]
 8003496:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_UART_MspInit+0xa4>)
{
 8003498:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART3)
 800349a:	429a      	cmp	r2, r3
{
 800349c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349e:	f04f 0400 	mov.w	r4, #0
 80034a2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80034a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80034aa:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 80034ac:	d001      	beq.n	80034b2 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034ae:	b008      	add	sp, #32
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034ba:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80034bc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c0:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 80034c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80034c6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80034ca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80034ce:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80034d2:	9200      	str	r2, [sp, #0]
 80034d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034da:	4332      	orrs	r2, r6
 80034dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034e4:	4032      	ands	r2, r6
 80034e6:	9201      	str	r2, [sp, #4]
 80034e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034ee:	f042 0208 	orr.w	r2, r2, #8
 80034f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034fa:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034fc:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003500:	480f      	ldr	r0, [pc, #60]	; (8003540 <HAL_UART_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003504:	9302      	str	r3, [sp, #8]
 8003506:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003508:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350a:	f002 fb07 	bl	8005b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800350e:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003512:	a903      	add	r1, sp, #12
 8003514:	480b      	ldr	r0, [pc, #44]	; (8003544 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003516:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800351a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003520:	f002 fafc 	bl	8005b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003524:	4622      	mov	r2, r4
 8003526:	2101      	movs	r1, #1
 8003528:	2027      	movs	r0, #39	; 0x27
 800352a:	f000 ffab 	bl	8004484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800352e:	2027      	movs	r0, #39	; 0x27
 8003530:	f000 ffde 	bl	80044f0 <HAL_NVIC_EnableIRQ>
}
 8003534:	b008      	add	sp, #32
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	40004800 	.word	0x40004800
 800353c:	58024400 	.word	0x58024400
 8003540:	58020400 	.word	0x58020400
 8003544:	58020c00 	.word	0x58020c00

08003548 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop

0800354c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800354c:	e7fe      	b.n	800354c <HardFault_Handler>
 800354e:	bf00      	nop

08003550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003550:	e7fe      	b.n	8003550 <MemManage_Handler>
 8003552:	bf00      	nop

08003554 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003554:	e7fe      	b.n	8003554 <BusFault_Handler>
 8003556:	bf00      	nop

08003558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003558:	e7fe      	b.n	8003558 <UsageFault_Handler>
 800355a:	bf00      	nop

0800355c <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 800355c:	f000 b8e8 	b.w	8003730 <ADC3_IRQHandler>

08003560 <DebugMon_Handler>:
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop

08003564 <PendSV_Handler>:
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003568:	f000 b93c 	b.w	80037e4 <HAL_IncTick>

0800356c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800356c:	4801      	ldr	r0, [pc, #4]	; (8003574 <DMA1_Stream0_IRQHandler+0x8>)
 800356e:	f001 bf99 	b.w	80054a4 <HAL_DMA_IRQHandler>
 8003572:	bf00      	nop
 8003574:	2400885c 	.word	0x2400885c

08003578 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003578:	4801      	ldr	r0, [pc, #4]	; (8003580 <DMA1_Stream1_IRQHandler+0x8>)
 800357a:	f001 bf93 	b.w	80054a4 <HAL_DMA_IRQHandler>
 800357e:	bf00      	nop
 8003580:	240043e4 	.word	0x240043e4

08003584 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003584:	4801      	ldr	r0, [pc, #4]	; (800358c <USART3_IRQHandler+0x8>)
 8003586:	f005 bc03 	b.w	8008d90 <HAL_UART_IRQHandler>
 800358a:	bf00      	nop
 800358c:	24002abc 	.word	0x24002abc

08003590 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003590:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003594:	f002 bbe4 	b.w	8005d60 <HAL_GPIO_EXTI_IRQHandler>

08003598 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003598:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800359a:	4804      	ldr	r0, [pc, #16]	; (80035ac <TIM6_DAC_IRQHandler+0x14>)
 800359c:	f001 f8ae 	bl	80046fc <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80035a0:	4803      	ldr	r0, [pc, #12]	; (80035b0 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80035a6:	f005 bad7 	b.w	8008b58 <HAL_TIM_IRQHandler>
 80035aa:	bf00      	nop
 80035ac:	24002aa8 	.word	0x24002aa8
 80035b0:	24008e40 	.word	0x24008e40

080035b4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80035b4:	4801      	ldr	r0, [pc, #4]	; (80035bc <OTG_FS_IRQHandler+0x8>)
 80035b6:	f002 bd27 	b.w	8006008 <HAL_PCD_IRQHandler>
 80035ba:	bf00      	nop
 80035bc:	2400ecb4 	.word	0x2400ecb4

080035c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035c0:	490d      	ldr	r1, [pc, #52]	; (80035f8 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80035c4:	680b      	ldr	r3, [r1, #0]
{
 80035c6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c8:	4c0d      	ldr	r4, [pc, #52]	; (8003600 <_sbrk+0x40>)
 80035ca:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80035cc:	b12b      	cbz	r3, 80035da <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ce:	4418      	add	r0, r3
 80035d0:	4290      	cmp	r0, r2
 80035d2:	d808      	bhi.n	80035e6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80035d4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80035da:	4c0a      	ldr	r4, [pc, #40]	; (8003604 <_sbrk+0x44>)
 80035dc:	4623      	mov	r3, r4
 80035de:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80035e0:	4418      	add	r0, r3
 80035e2:	4290      	cmp	r0, r2
 80035e4:	d9f6      	bls.n	80035d4 <_sbrk+0x14>
    errno = ENOMEM;
 80035e6:	f009 f8c5 	bl	800c774 <__errno>
 80035ea:	220c      	movs	r2, #12
    return (void *)-1;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 80035f0:	6002      	str	r2, [r0, #0]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	bd10      	pop	{r4, pc}
 80035f6:	bf00      	nop
 80035f8:	24000670 	.word	0x24000670
 80035fc:	24080000 	.word	0x24080000
 8003600:	00000400 	.word	0x00000400
 8003604:	2400f0c0 	.word	0x2400f0c0

08003608 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003608:	492a      	ldr	r1, [pc, #168]	; (80036b4 <SystemInit+0xac>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800360a:	4a2b      	ldr	r2, [pc, #172]	; (80036b8 <SystemInit+0xb0>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800360c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8003614:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	2b06      	cmp	r3, #6
 8003622:	d805      	bhi.n	8003630 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	f023 030f 	bic.w	r3, r3, #15
 800362a:	f043 0307 	orr.w	r3, r3, #7
 800362e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <SystemInit+0xb4>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003632:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003634:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <SystemInit+0xb8>)
  RCC->CR |= RCC_CR_HSION;
 8003636:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003638:	481f      	ldr	r0, [pc, #124]	; (80036b8 <SystemInit+0xb0>)
  RCC->CR |= RCC_CR_HSION;
 800363a:	f041 0101 	orr.w	r1, r1, #1
 800363e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003640:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	400a      	ands	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003648:	6803      	ldr	r3, [r0, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	2b07      	cmp	r3, #7
 8003650:	d905      	bls.n	800365e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003652:	6803      	ldr	r3, [r0, #0]
 8003654:	f023 030f 	bic.w	r3, r3, #15
 8003658:	f043 0307 	orr.w	r3, r3, #7
 800365c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <SystemInit+0xb4>)
 8003660:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003662:	4918      	ldr	r1, [pc, #96]	; (80036c4 <SystemInit+0xbc>)
  RCC->PLLCKSELR = 0x02020200;
 8003664:	4c18      	ldr	r4, [pc, #96]	; (80036c8 <SystemInit+0xc0>)
  RCC->PLLCFGR = 0x01FF0000;
 8003666:	4819      	ldr	r0, [pc, #100]	; (80036cc <SystemInit+0xc4>)
  RCC->D1CFGR = 0x00000000;
 8003668:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800366a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800366c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800366e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8003670:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8003672:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003674:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003676:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003678:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800367a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800367c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800367e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003680:	4c13      	ldr	r4, [pc, #76]	; (80036d0 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8003682:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003686:	4913      	ldr	r1, [pc, #76]	; (80036d4 <SystemInit+0xcc>)
  RCC->CR &= 0xFFFBFFFFU;
 8003688:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800368a:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	4019      	ands	r1, r3
 8003690:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003694:	d202      	bcs.n	800369c <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003696:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <SystemInit+0xd0>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800369c:	490f      	ldr	r1, [pc, #60]	; (80036dc <SystemInit+0xd4>)
 800369e:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <SystemInit+0xac>)
 80036a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80036a8:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80036aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00
 80036b8:	52002000 	.word	0x52002000
 80036bc:	58024400 	.word	0x58024400
 80036c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80036c4:	01010280 	.word	0x01010280
 80036c8:	02020200 	.word	0x02020200
 80036cc:	01ff0000 	.word	0x01ff0000
 80036d0:	5c001000 	.word	0x5c001000
 80036d4:	ffff0000 	.word	0xffff0000
 80036d8:	51008108 	.word	0x51008108
 80036dc:	52004000 	.word	0x52004000

080036e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003718 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80036e4:	f7ff ff90 	bl	8003608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036ea:	e003      	b.n	80036f4 <LoopCopyDataInit>

080036ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80036ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036f2:	3104      	adds	r1, #4

080036f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036f4:	480a      	ldr	r0, [pc, #40]	; (8003720 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80036f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036fc:	d3f6      	bcc.n	80036ec <CopyDataInit>
  ldr  r2, =_sbss
 80036fe:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003700:	e002      	b.n	8003708 <LoopFillZerobss>

08003702 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003702:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003704:	f842 3b04 	str.w	r3, [r2], #4

08003708 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800370a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800370c:	d3f9      	bcc.n	8003702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800370e:	f009 f837 	bl	800c780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003712:	f7ff f929 	bl	8002968 <main>
  bx  lr    
 8003716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003718:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800371c:	08019700 	.word	0x08019700
  ldr  r0, =_sdata
 8003720:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003724:	24000554 	.word	0x24000554
  ldr  r2, =_sbss
 8003728:	24000560 	.word	0x24000560
  ldr  r3, = _ebss
 800372c:	2400f0c0 	.word	0x2400f0c0

08003730 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003730:	e7fe      	b.n	8003730 <ADC3_IRQHandler>
	...

08003734 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_InitTick+0x40>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b90b      	cbnz	r3, 800373e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800373a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800373c:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800373e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003742:	490d      	ldr	r1, [pc, #52]	; (8003778 <HAL_InitTick+0x44>)
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
{
 8003748:	b510      	push	{r4, lr}
 800374a:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800374c:	6808      	ldr	r0, [r1, #0]
 800374e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003752:	f000 fedb 	bl	800450c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003756:	2c0f      	cmp	r4, #15
 8003758:	d800      	bhi.n	800375c <HAL_InitTick+0x28>
 800375a:	b108      	cbz	r0, 8003760 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800375c:	2001      	movs	r0, #1
}
 800375e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003760:	2200      	movs	r2, #0
 8003762:	4621      	mov	r1, r4
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	f000 fe8c 	bl	8004484 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_InitTick+0x48>)
 800376e:	2000      	movs	r0, #0
 8003770:	601c      	str	r4, [r3, #0]
}
 8003772:	bd10      	pop	{r4, pc}
 8003774:	240001fc 	.word	0x240001fc
 8003778:	240001f4 	.word	0x240001f4
 800377c:	24000200 	.word	0x24000200

08003780 <HAL_Init>:
{
 8003780:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003782:	2003      	movs	r0, #3
{
 8003784:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003786:	f000 fe69 	bl	800445c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800378a:	4c12      	ldr	r4, [pc, #72]	; (80037d4 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800378c:	f003 fc32 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 8003790:	4a11      	ldr	r2, [pc, #68]	; (80037d8 <HAL_Init+0x58>)
 8003792:	4912      	ldr	r1, [pc, #72]	; (80037dc <HAL_Init+0x5c>)
 8003794:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003796:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003798:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800379c:	4d10      	ldr	r5, [pc, #64]	; (80037e0 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800379e:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a4:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037a6:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037aa:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037ae:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037b2:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037b4:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 80037b8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037ba:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037bc:	f7ff ffba 	bl	8003734 <HAL_InitTick>
 80037c0:	b110      	cbz	r0, 80037c8 <HAL_Init+0x48>
    return HAL_ERROR;
 80037c2:	2001      	movs	r0, #1
}
 80037c4:	b003      	add	sp, #12
 80037c6:	bd30      	pop	{r4, r5, pc}
 80037c8:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 80037ca:	f7ff fcdf 	bl	800318c <HAL_MspInit>
  return HAL_OK;
 80037ce:	9801      	ldr	r0, [sp, #4]
}
 80037d0:	b003      	add	sp, #12
 80037d2:	bd30      	pop	{r4, r5, pc}
 80037d4:	240001f8 	.word	0x240001f8
 80037d8:	58024400 	.word	0x58024400
 80037dc:	08016394 	.word	0x08016394
 80037e0:	240001f4 	.word	0x240001f4

080037e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80037e4:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <HAL_IncTick+0x10>)
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <HAL_IncTick+0x14>)
 80037e8:	6811      	ldr	r1, [r2, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	440b      	add	r3, r1
 80037ee:	6013      	str	r3, [r2, #0]
}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	24004480 	.word	0x24004480
 80037f8:	240001fc 	.word	0x240001fc

080037fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037fc:	4b01      	ldr	r3, [pc, #4]	; (8003804 <HAL_GetTick+0x8>)
 80037fe:	6818      	ldr	r0, [r3, #0]
}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	24004480 	.word	0x24004480

08003808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800380c:	f7ff fff6 	bl	80037fc <HAL_GetTick>
 8003810:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003812:	1c63      	adds	r3, r4, #1
 8003814:	d002      	beq.n	800381c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_Delay+0x20>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800381c:	f7ff ffee 	bl	80037fc <HAL_GetTick>
 8003820:	1b40      	subs	r0, r0, r5
 8003822:	42a0      	cmp	r0, r4
 8003824:	d3fa      	bcc.n	800381c <HAL_Delay+0x14>
  {
  }
}
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	240001fc 	.word	0x240001fc

0800382c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800382c:	4b01      	ldr	r3, [pc, #4]	; (8003834 <HAL_GetREVID+0x8>)
 800382e:	6818      	ldr	r0, [r3, #0]
}
 8003830:	0c00      	lsrs	r0, r0, #16
 8003832:	4770      	bx	lr
 8003834:	5c001000 	.word	0x5c001000

08003838 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8003838:	4a03      	ldr	r2, [pc, #12]	; (8003848 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	4318      	orrs	r0, r3
 8003842:	6010      	str	r0, [r2, #0]
}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	58003c00 	.word	0x58003c00

0800384c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800384c:	4a03      	ldr	r2, [pc, #12]	; (800385c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 800384e:	6813      	ldr	r3, [r2, #0]
 8003850:	f023 0302 	bic.w	r3, r3, #2
 8003854:	4318      	orrs	r0, r3
 8003856:	6010      	str	r0, [r2, #0]
}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	58003c00 	.word	0x58003c00

08003860 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8003860:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 8003864:	681a      	ldr	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8003866:	461c      	mov	r4, r3
  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800386e:	f7ff ffc5 	bl	80037fc <HAL_GetTick>
 8003872:	4605      	mov	r5, r0
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8003874:	e004      	b.n	8003880 <HAL_SYSCFG_EnableVREFBUF+0x20>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8003876:	f7ff ffc1 	bl	80037fc <HAL_GetTick>
 800387a:	1b40      	subs	r0, r0, r5
 800387c:	280a      	cmp	r0, #10
 800387e:	d804      	bhi.n	800388a <HAL_SYSCFG_EnableVREFBUF+0x2a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	071b      	lsls	r3, r3, #28
 8003884:	d5f7      	bpl.n	8003876 <HAL_SYSCFG_EnableVREFBUF+0x16>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003886:	2000      	movs	r0, #0
}
 8003888:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800388a:	2003      	movs	r0, #3
}
 800388c:	bd38      	pop	{r3, r4, r5, pc}
 800388e:	bf00      	nop
 8003890:	58003c00 	.word	0x58003c00

08003894 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003894:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003896:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003898:	f7fe fe36 	bl	8002508 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800389c:	bd08      	pop	{r3, pc}
 800389e:	bf00      	nop

080038a0 <HAL_ADC_ErrorCallback>:
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop

080038a4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038a8:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 80038ae:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038b0:	d11d      	bne.n	80038ee <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038b2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038ba:	680a      	ldr	r2, [r1, #0]
 80038bc:	f012 0f08 	tst.w	r2, #8
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038c0:	68ca      	ldr	r2, [r1, #12]
 80038c2:	d01b      	beq.n	80038fc <ADC_DMAConvCplt+0x58>
 80038c4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80038c8:	d10d      	bne.n	80038e6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038ca:	68ca      	ldr	r2, [r1, #12]
 80038cc:	0494      	lsls	r4, r2, #18
 80038ce:	d40a      	bmi.n	80038e6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038da:	04d1      	lsls	r1, r2, #19
 80038dc:	d403      	bmi.n	80038e6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fdf0 	bl	80024cc <HAL_ADC_ConvCpltCallback>
}
 80038ec:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038ee:	06d2      	lsls	r2, r2, #27
 80038f0:	d407      	bmi.n	8003902 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80038f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80038fc:	0790      	lsls	r0, r2, #30
 80038fe:	d1f2      	bne.n	80038e6 <ADC_DMAConvCplt+0x42>
 8003900:	e7e6      	b.n	80038d0 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ffcc 	bl	80038a0 <HAL_ADC_ErrorCallback>
}
 8003908:	bd10      	pop	{r4, pc}
 800390a:	bf00      	nop

0800390c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800390c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800390e:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003910:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003912:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800391a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800391c:	f042 0204 	orr.w	r2, r2, #4
 8003920:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8003922:	f7ff ffbd 	bl	80038a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003926:	bd08      	pop	{r3, pc}

08003928 <HAL_ADC_ConfigChannel>:
{
 8003928:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0;
 800392a:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 800392c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
{
 8003930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8003934:	2b01      	cmp	r3, #1
{
 8003936:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003938:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800393a:	f000 8134 	beq.w	8003ba6 <HAL_ADC_ConfigChannel+0x27e>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800393e:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hadc);
 8003940:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003942:	689c      	ldr	r4, [r3, #8]
 8003944:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8003948:	0767      	lsls	r7, r4, #29
 800394a:	d443      	bmi.n	80039d4 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800394c:	680c      	ldr	r4, [r1, #0]
 800394e:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8003952:	f3c4 6784 	ubfx	r7, r4, #26, #5
 8003956:	2d00      	cmp	r5, #0
 8003958:	f040 80a5 	bne.w	8003aa6 <HAL_ADC_ConfigChannel+0x17e>
 800395c:	40b8      	lsls	r0, r7
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800395e:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8003960:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003964:	69dd      	ldr	r5, [r3, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003966:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8003968:	ea04 040c 	and.w	r4, r4, ip
 800396c:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800396e:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8003972:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8003976:	fa0c fc04 	lsl.w	ip, ip, r4
 800397a:	61d8      	str	r0, [r3, #28]
 800397c:	fa07 f404 	lsl.w	r4, r7, r4
 8003980:	5970      	ldr	r0, [r6, r5]
 8003982:	ea20 000c 	bic.w	r0, r0, ip
 8003986:	4320      	orrs	r0, r4
 8003988:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800398a:	6898      	ldr	r0, [r3, #8]
 800398c:	0746      	lsls	r6, r0, #29
 800398e:	f100 8088 	bmi.w	8003aa2 <HAL_ADC_ConfigChannel+0x17a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003992:	689d      	ldr	r5, [r3, #8]
 8003994:	f015 0508 	ands.w	r5, r5, #8
 8003998:	d026      	beq.n	80039e8 <HAL_ADC_ConfigChannel+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800399a:	6898      	ldr	r0, [r3, #8]
 800399c:	07c5      	lsls	r5, r0, #31
 800399e:	d417      	bmi.n	80039d0 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039a0:	68ce      	ldr	r6, [r1, #12]
 80039a2:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80039a4:	f006 0718 	and.w	r7, r6, #24
 80039a8:	48bc      	ldr	r0, [pc, #752]	; (8003c9c <HAL_ADC_ConfigChannel+0x374>)
 80039aa:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 80039ae:	40f8      	lsrs	r0, r7
 80039b0:	f3c4 0713 	ubfx	r7, r4, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039b4:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8003cc4 <HAL_ADC_ConfigChannel+0x39c>
 80039b8:	4020      	ands	r0, r4
 80039ba:	ea25 0507 	bic.w	r5, r5, r7
 80039be:	4566      	cmp	r6, ip
 80039c0:	ea40 0005 	orr.w	r0, r0, r5
 80039c4:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 80039c8:	f000 80a6 	beq.w	8003b18 <HAL_ADC_ConfigChannel+0x1f0>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039cc:	2c00      	cmp	r4, #0
 80039ce:	db72      	blt.n	8003ab6 <HAL_ADC_ConfigChannel+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d0:	2000      	movs	r0, #0
 80039d2:	e003      	b.n	80039dc <HAL_ADC_ConfigChannel+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80039d6:	f043 0320 	orr.w	r3, r3, #32
 80039da:	6553      	str	r3, [r2, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80039dc:	2300      	movs	r3, #0
 80039de:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 80039e2:	b002      	add	sp, #8
 80039e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039e8:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039ea:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80039ee:	2007      	movs	r0, #7
 80039f0:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039f2:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 80039f6:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039fa:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 80039fe:	fa00 fe04 	lsl.w	lr, r0, r4
 8003a02:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a06:	4fa6      	ldr	r7, [pc, #664]	; (8003ca0 <HAL_ADC_ConfigChannel+0x378>)
 8003a08:	f85c 0006 	ldr.w	r0, [ip, r6]
 8003a0c:	ea20 000e 	bic.w	r0, r0, lr
 8003a10:	4320      	orrs	r0, r4
 8003a12:	f84c 0006 	str.w	r0, [ip, r6]
 8003a16:	6838      	ldr	r0, [r7, #0]
 8003a18:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8003a1c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8003a20:	f000 80b8 	beq.w	8003b94 <HAL_ADC_ConfigChannel+0x26c>
 8003a24:	68dc      	ldr	r4, [r3, #12]
 8003a26:	6948      	ldr	r0, [r1, #20]
 8003a28:	f014 0f10 	tst.w	r4, #16
 8003a2c:	68dc      	ldr	r4, [r3, #12]
 8003a2e:	f040 80d9 	bne.w	8003be4 <HAL_ADC_ConfigChannel+0x2bc>
 8003a32:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8003a36:	0064      	lsls	r4, r4, #1
 8003a38:	fa00 fc04 	lsl.w	ip, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a3c:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8003a40:	6808      	ldr	r0, [r1, #0]
 8003a42:	f1be 0f04 	cmp.w	lr, #4
 8003a46:	f000 80b2 	beq.w	8003bae <HAL_ADC_ConfigChannel+0x286>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a4a:	f103 0660 	add.w	r6, r3, #96	; 0x60
    MODIFY_REG(*preg,
 8003a4e:	f000 44f8 	and.w	r4, r0, #2080374784	; 0x7c000000
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a52:	7e4f      	ldrb	r7, [r1, #25]
 8003a54:	f856 002e 	ldr.w	r0, [r6, lr, lsl #2]
 8003a58:	2f01      	cmp	r7, #1
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a5a:	7e0f      	ldrb	r7, [r1, #24]
 8003a5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a60:	bf14      	ite	ne
 8003a62:	f04f 0800 	movne.w	r8, #0
 8003a66:	f04f 4800 	moveq.w	r8, #2147483648	; 0x80000000
 8003a6a:	4320      	orrs	r0, r4
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a6c:	2f01      	cmp	r7, #1
 8003a6e:	ea40 000c 	orr.w	r0, r0, ip
 8003a72:	f846 002e 	str.w	r0, [r6, lr, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a76:	690c      	ldr	r4, [r1, #16]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a78:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003a80:	ea40 0008 	orr.w	r0, r0, r8
 8003a84:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a88:	6908      	ldr	r0, [r1, #16]
 8003a8a:	d104      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x16e>
 8003a8c:	f000 001f 	and.w	r0, r0, #31
 8003a90:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003a94:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a96:	6918      	ldr	r0, [r3, #16]
 8003a98:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8003a9c:	4305      	orrs	r5, r0
 8003a9e:	611d      	str	r5, [r3, #16]
 8003aa0:	e77b      	b.n	800399a <HAL_ADC_ConfigChannel+0x72>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003aa2:	6898      	ldr	r0, [r3, #8]
 8003aa4:	e779      	b.n	800399a <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	fa94 f4a4 	rbit	r4, r4
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003aaa:	fab4 f484 	clz	r4, r4
 8003aae:	f004 041f 	and.w	r4, r4, #31
 8003ab2:	40a0      	lsls	r0, r4
 8003ab4:	e753      	b.n	800395e <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab6:	497b      	ldr	r1, [pc, #492]	; (8003ca4 <HAL_ADC_ConfigChannel+0x37c>)
 8003ab8:	428b      	cmp	r3, r1
 8003aba:	f000 80bd 	beq.w	8003c38 <HAL_ADC_ConfigChannel+0x310>
 8003abe:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8003ac2:	428b      	cmp	r3, r1
 8003ac4:	f000 80b8 	beq.w	8003c38 <HAL_ADC_ConfigChannel+0x310>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac8:	4e77      	ldr	r6, [pc, #476]	; (8003ca8 <HAL_ADC_ConfigChannel+0x380>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003aca:	4d78      	ldr	r5, [pc, #480]	; (8003cac <HAL_ADC_ConfigChannel+0x384>)
 8003acc:	68a8      	ldr	r0, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ace:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ad0:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003ad4:	43c9      	mvns	r1, r1
 8003ad6:	f001 0101 	and.w	r1, r1, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ada:	2900      	cmp	r1, #0
 8003adc:	f000 80ba 	beq.w	8003c54 <HAL_ADC_ConfigChannel+0x32c>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ae0:	4973      	ldr	r1, [pc, #460]	; (8003cb0 <HAL_ADC_ConfigChannel+0x388>)
 8003ae2:	428c      	cmp	r4, r1
 8003ae4:	f000 80f0 	beq.w	8003cc8 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ae8:	4972      	ldr	r1, [pc, #456]	; (8003cb4 <HAL_ADC_ConfigChannel+0x38c>)
 8003aea:	428c      	cmp	r4, r1
 8003aec:	f000 810e 	beq.w	8003d0c <HAL_ADC_ConfigChannel+0x3e4>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003af0:	4971      	ldr	r1, [pc, #452]	; (8003cb8 <HAL_ADC_ConfigChannel+0x390>)
 8003af2:	428c      	cmp	r4, r1
 8003af4:	f47f af6c 	bne.w	80039d0 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003af8:	0241      	lsls	r1, r0, #9
 8003afa:	f53f af69 	bmi.w	80039d0 <HAL_ADC_ConfigChannel+0xa8>
 8003afe:	496a      	ldr	r1, [pc, #424]	; (8003ca8 <HAL_ADC_ConfigChannel+0x380>)
 8003b00:	428b      	cmp	r3, r1
 8003b02:	f47f af65 	bne.w	80039d0 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b06:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b08:	f446 0380 	orr.w	r3, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003b12:	430b      	orrs	r3, r1
 8003b14:	60ab      	str	r3, [r5, #8]
 8003b16:	e761      	b.n	80039dc <HAL_ADC_ConfigChannel+0xb4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b18:	2f00      	cmp	r7, #0
 8003b1a:	d069      	beq.n	8003bf0 <HAL_ADC_ConfigChannel+0x2c8>
 8003b1c:	fa94 f0a4 	rbit	r0, r4
 8003b20:	fab0 f080 	clz	r0, r0
 8003b24:	3001      	adds	r0, #1
 8003b26:	f000 001f 	and.w	r0, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b2a:	2809      	cmp	r0, #9
 8003b2c:	f200 8098 	bhi.w	8003c60 <HAL_ADC_ConfigChannel+0x338>
 8003b30:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b34:	fab0 f080 	clz	r0, r0
 8003b38:	fa94 f5a4 	rbit	r5, r4
 8003b3c:	2601      	movs	r6, #1
 8003b3e:	fab5 f585 	clz	r5, r5
 8003b42:	3001      	adds	r0, #1
 8003b44:	4435      	add	r5, r6
 8003b46:	0680      	lsls	r0, r0, #26
 8003b48:	f005 051f 	and.w	r5, r5, #31
 8003b4c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003b50:	fa06 f505 	lsl.w	r5, r6, r5
 8003b54:	4328      	orrs	r0, r5
 8003b56:	fa94 f4a4 	rbit	r4, r4
 8003b5a:	fab4 f484 	clz	r4, r4
 8003b5e:	4434      	add	r4, r6
 8003b60:	f004 041f 	and.w	r4, r4, #31
 8003b64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003b68:	0524      	lsls	r4, r4, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b6a:	4304      	orrs	r4, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b6c:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8003b70:	f04f 0c07 	mov.w	ip, #7
 8003b74:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b76:	0de7      	lsrs	r7, r4, #23
  MODIFY_REG(*preg,
 8003b78:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b7c:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8003b80:	fa0c fc04 	lsl.w	ip, ip, r4
 8003b84:	40a0      	lsls	r0, r4
 8003b86:	59bd      	ldr	r5, [r7, r6]
 8003b88:	ea25 040c 	bic.w	r4, r5, ip
 8003b8c:	4304      	orrs	r4, r0
 8003b8e:	51bc      	str	r4, [r7, r6]
 8003b90:	680c      	ldr	r4, [r1, #0]
 8003b92:	e71b      	b.n	80039cc <HAL_ADC_ConfigChannel+0xa4>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b94:	68dc      	ldr	r4, [r3, #12]
 8003b96:	6948      	ldr	r0, [r1, #20]
 8003b98:	f3c4 0c82 	ubfx	ip, r4, #2, #3
 8003b9c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003ba0:	fa00 fc0c 	lsl.w	ip, r0, ip
 8003ba4:	e74a      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x114>
  __HAL_LOCK(hadc);
 8003ba6:	2002      	movs	r0, #2
}
 8003ba8:	b002      	add	sp, #8
 8003baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bae:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003bb0:	0680      	lsls	r0, r0, #26
 8003bb2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003bb6:	4284      	cmp	r4, r0
 8003bb8:	d039      	beq.n	8003c2e <HAL_ADC_ConfigChannel+0x306>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bba:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003bbc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003bc0:	42a0      	cmp	r0, r4
 8003bc2:	d02f      	beq.n	8003c24 <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bc4:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8003bc6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003bca:	42a0      	cmp	r0, r4
 8003bcc:	d025      	beq.n	8003c1a <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bce:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8003bd0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003bd4:	42a0      	cmp	r0, r4
 8003bd6:	f47f aee0 	bne.w	800399a <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003bda:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003bdc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003be0:	66d8      	str	r0, [r3, #108]	; 0x6c
 8003be2:	e6da      	b.n	800399a <HAL_ADC_ConfigChannel+0x72>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003be4:	0864      	lsrs	r4, r4, #1
 8003be6:	f004 0408 	and.w	r4, r4, #8
 8003bea:	fa00 fc04 	lsl.w	ip, r0, r4
 8003bee:	e725      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x114>
 8003bf0:	2001      	movs	r0, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bf2:	0ea4      	lsrs	r4, r4, #26
 8003bf4:	4404      	add	r4, r0
 8003bf6:	f004 051f 	and.w	r5, r4, #31
 8003bfa:	06a4      	lsls	r4, r4, #26
 8003bfc:	fa00 f605 	lsl.w	r6, r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c00:	2d09      	cmp	r5, #9
 8003c02:	f004 40f8 	and.w	r0, r4, #2080374784	; 0x7c000000
 8003c06:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8003c0a:	ea40 0006 	orr.w	r0, r0, r6
 8003c0e:	d9ab      	bls.n	8003b68 <HAL_ADC_ConfigChannel+0x240>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c10:	3c1e      	subs	r4, #30
 8003c12:	0524      	lsls	r4, r4, #20
 8003c14:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8003c18:	e7a7      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x242>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c1a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8003c1c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003c20:	669c      	str	r4, [r3, #104]	; 0x68
 8003c22:	e7d4      	b.n	8003bce <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c24:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003c26:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003c2a:	665c      	str	r4, [r3, #100]	; 0x64
 8003c2c:	e7ca      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c2e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003c30:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003c34:	661c      	str	r4, [r3, #96]	; 0x60
 8003c36:	e7c0      	b.n	8003bba <HAL_ADC_ConfigChannel+0x292>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c38:	4920      	ldr	r1, [pc, #128]	; (8003cbc <HAL_ADC_ConfigChannel+0x394>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c3a:	4e21      	ldr	r6, [pc, #132]	; (8003cc0 <HAL_ADC_ConfigChannel+0x398>)
 8003c3c:	4f19      	ldr	r7, [pc, #100]	; (8003ca4 <HAL_ADC_ConfigChannel+0x37c>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c3e:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c40:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c42:	68bf      	ldr	r7, [r7, #8]
 8003c44:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c46:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003c4a:	4339      	orrs	r1, r7
 8003c4c:	43c9      	mvns	r1, r1
 8003c4e:	f001 0101 	and.w	r1, r1, #1
 8003c52:	e742      	b.n	8003ada <HAL_ADC_ConfigChannel+0x1b2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c54:	6d53      	ldr	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003c56:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	6553      	str	r3, [r2, #84]	; 0x54
 8003c5e:	e6bd      	b.n	80039dc <HAL_ADC_ConfigChannel+0xb4>
 8003c60:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c64:	fab0 f080 	clz	r0, r0
 8003c68:	fa94 f5a4 	rbit	r5, r4
 8003c6c:	2601      	movs	r6, #1
 8003c6e:	fab5 f585 	clz	r5, r5
 8003c72:	3001      	adds	r0, #1
 8003c74:	4435      	add	r5, r6
 8003c76:	0680      	lsls	r0, r0, #26
 8003c78:	f005 051f 	and.w	r5, r5, #31
 8003c7c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003c80:	fa06 f505 	lsl.w	r5, r6, r5
 8003c84:	4328      	orrs	r0, r5
 8003c86:	fa94 f4a4 	rbit	r4, r4
 8003c8a:	fab4 f484 	clz	r4, r4
 8003c8e:	4434      	add	r4, r6
 8003c90:	f004 041f 	and.w	r4, r4, #31
 8003c94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003c98:	e7ba      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x2e8>
 8003c9a:	bf00      	nop
 8003c9c:	000fffff 	.word	0x000fffff
 8003ca0:	5c001000 	.word	0x5c001000
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	58026000 	.word	0x58026000
 8003cac:	58026300 	.word	0x58026300
 8003cb0:	cb840000 	.word	0xcb840000
 8003cb4:	c7520000 	.word	0xc7520000
 8003cb8:	cfb80000 	.word	0xcfb80000
 8003cbc:	40022300 	.word	0x40022300
 8003cc0:	40022100 	.word	0x40022100
 8003cc4:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cc8:	0204      	lsls	r4, r0, #8
 8003cca:	f53f ae81 	bmi.w	80039d0 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cce:	4917      	ldr	r1, [pc, #92]	; (8003d2c <HAL_ADC_ConfigChannel+0x404>)
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	f47f ae7d 	bne.w	80039d0 <HAL_ADC_ConfigChannel+0xa8>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003cd6:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <HAL_ADC_ConfigChannel+0x408>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003cd8:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cdc:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 8003ce4:	4c13      	ldr	r4, [pc, #76]	; (8003d34 <HAL_ADC_ConfigChannel+0x40c>)
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	4301      	orrs	r1, r0
 8003cea:	fba4 0303 	umull	r0, r3, r4, r3
 8003cee:	60a9      	str	r1, [r5, #8]
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003cf6:	9b01      	ldr	r3, [sp, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f43f ae69 	beq.w	80039d0 <HAL_ADC_ConfigChannel+0xa8>
                wait_loop_index--;
 8003cfe:	9b01      	ldr	r3, [sp, #4]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003d04:	9b01      	ldr	r3, [sp, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f9      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x3d6>
 8003d0a:	e661      	b.n	80039d0 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d0c:	01c0      	lsls	r0, r0, #7
 8003d0e:	f53f ae5f 	bmi.w	80039d0 <HAL_ADC_ConfigChannel+0xa8>
 8003d12:	4906      	ldr	r1, [pc, #24]	; (8003d2c <HAL_ADC_ConfigChannel+0x404>)
 8003d14:	428b      	cmp	r3, r1
 8003d16:	f47f ae5b 	bne.w	80039d0 <HAL_ADC_ConfigChannel+0xa8>
 8003d1a:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d1c:	f046 7380 	orr.w	r3, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d20:	2000      	movs	r0, #0
 8003d22:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003d26:	430b      	orrs	r3, r1
 8003d28:	60ab      	str	r3, [r5, #8]
 8003d2a:	e657      	b.n	80039dc <HAL_ADC_ConfigChannel+0xb4>
 8003d2c:	58026000 	.word	0x58026000
 8003d30:	240001f4 	.word	0x240001f4
 8003d34:	053e2d63 	.word	0x053e2d63

08003d38 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d38:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d3a:	6891      	ldr	r1, [r2, #8]
 8003d3c:	07cb      	lsls	r3, r1, #31
 8003d3e:	d40e      	bmi.n	8003d5e <ADC_Enable+0x26>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d40:	4926      	ldr	r1, [pc, #152]	; (8003ddc <ADC_Enable+0xa4>)
{
 8003d42:	b570      	push	{r4, r5, r6, lr}
 8003d44:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d46:	6890      	ldr	r0, [r2, #8]
 8003d48:	4208      	tst	r0, r1
 8003d4a:	d00a      	beq.n	8003d62 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_ERROR;
 8003d4e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d50:	f042 0210 	orr.w	r2, r2, #16
 8003d54:	6562      	str	r2, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d56:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003d58:	4302      	orrs	r2, r0
 8003d5a:	65a2      	str	r2, [r4, #88]	; 0x58
}
 8003d5c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003d5e:	2000      	movs	r0, #0
}
 8003d60:	4770      	bx	lr
  MODIFY_REG(ADCx->CR,
 8003d62:	6891      	ldr	r1, [r2, #8]
 8003d64:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <ADC_Enable+0xa8>)
 8003d66:	400b      	ands	r3, r1
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003d6e:	f7ff fd45 	bl	80037fc <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <ADC_Enable+0xac>)
    tickstart = HAL_GetTick();
 8003d76:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d026      	beq.n	8003dca <ADC_Enable+0x92>
 8003d7c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d022      	beq.n	8003dca <ADC_Enable+0x92>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <ADC_Enable+0xb0>)
 8003d86:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8003d88:	4e15      	ldr	r6, [pc, #84]	; (8003de0 <ADC_Enable+0xa8>)
 8003d8a:	e00a      	b.n	8003da2 <ADC_Enable+0x6a>
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	4032      	ands	r2, r6
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d96:	f7ff fd31 	bl	80037fc <HAL_GetTick>
 8003d9a:	1b40      	subs	r0, r0, r5
 8003d9c:	2802      	cmp	r0, #2
 8003d9e:	d80b      	bhi.n	8003db8 <ADC_Enable+0x80>
 8003da0:	6823      	ldr	r3, [r4, #0]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	07d2      	lsls	r2, r2, #31
 8003da6:	d417      	bmi.n	8003dd8 <ADC_Enable+0xa0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	07d1      	lsls	r1, r2, #31
 8003dac:	d5ee      	bpl.n	8003d8c <ADC_Enable+0x54>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dae:	f7ff fd25 	bl	80037fc <HAL_GetTick>
 8003db2:	1b40      	subs	r0, r0, r5
 8003db4:	2802      	cmp	r0, #2
 8003db6:	d9f3      	bls.n	8003da0 <ADC_Enable+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db8:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003dba:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dbc:	f043 0310 	orr.w	r3, r3, #16
 8003dc0:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dc4:	4303      	orrs	r3, r0
 8003dc6:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <ADC_Enable+0xb4>)
 8003dcc:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dce:	06d0      	lsls	r0, r2, #27
 8003dd0:	d0da      	beq.n	8003d88 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dd2:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <ADC_Enable+0xb8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d1d7      	bne.n	8003d88 <ADC_Enable+0x50>
  return HAL_OK;
 8003dd8:	2000      	movs	r0, #0
}
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	8000003f 	.word	0x8000003f
 8003de0:	7fffffc0 	.word	0x7fffffc0
 8003de4:	40022000 	.word	0x40022000
 8003de8:	58026300 	.word	0x58026300
 8003dec:	40022300 	.word	0x40022300
 8003df0:	40022100 	.word	0x40022100

08003df4 <ADC_Disable>:
{
 8003df4:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003df6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	0789      	lsls	r1, r1, #30
 8003dfc:	d502      	bpl.n	8003e04 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dfe:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003e00:	2000      	movs	r0, #0
}
 8003e02:	bd38      	pop	{r3, r4, r5, pc}
 8003e04:	6899      	ldr	r1, [r3, #8]
 8003e06:	07ca      	lsls	r2, r1, #31
 8003e08:	d523      	bpl.n	8003e52 <ADC_Disable+0x5e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e0a:	6899      	ldr	r1, [r3, #8]
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	f001 010d 	and.w	r1, r1, #13
 8003e12:	2901      	cmp	r1, #1
 8003e14:	d008      	beq.n	8003e28 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e16:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003e18:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1a:	f043 0310 	orr.w	r3, r3, #16
 8003e1e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e22:	4303      	orrs	r3, r0
 8003e24:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003e28:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <ADC_Disable+0x64>)
 8003e2e:	4002      	ands	r2, r0
 8003e30:	f042 0202 	orr.w	r2, r2, #2
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003e38:	f7ff fce0 	bl	80037fc <HAL_GetTick>
 8003e3c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e3e:	e004      	b.n	8003e4a <ADC_Disable+0x56>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e40:	f7ff fcdc 	bl	80037fc <HAL_GetTick>
 8003e44:	1b40      	subs	r0, r0, r5
 8003e46:	2802      	cmp	r0, #2
 8003e48:	d8e5      	bhi.n	8003e16 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	07db      	lsls	r3, r3, #31
 8003e50:	d4f6      	bmi.n	8003e40 <ADC_Disable+0x4c>
  return HAL_OK;
 8003e52:	2000      	movs	r0, #0
}
 8003e54:	bd38      	pop	{r3, r4, r5, pc}
 8003e56:	bf00      	nop
 8003e58:	7fffffc0 	.word	0x7fffffc0

08003e5c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e5e:	4a52      	ldr	r2, [pc, #328]	; (8003fa8 <ADC_ConfigureBoostMode+0x14c>)
{
 8003e60:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e62:	6803      	ldr	r3, [r0, #0]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d027      	beq.n	8003eb8 <ADC_ConfigureBoostMode+0x5c>
 8003e68:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d023      	beq.n	8003eb8 <ADC_ConfigureBoostMode+0x5c>
 8003e70:	4b4e      	ldr	r3, [pc, #312]	; (8003fac <ADC_ConfigureBoostMode+0x150>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003e78:	bf14      	ite	ne
 8003e7a:	2301      	movne	r3, #1
 8003e7c:	2300      	moveq	r3, #0
 8003e7e:	b323      	cbz	r3, 8003eca <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e80:	f003 fa6e 	bl	8007360 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003e84:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8003e86:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8003e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e8c:	d062      	beq.n	8003f54 <ADC_ConfigureBoostMode+0xf8>
 8003e8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e92:	d072      	beq.n	8003f7a <ADC_ConfigureBoostMode+0x11e>
 8003e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e98:	d05c      	beq.n	8003f54 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e9a:	f7ff fcc7 	bl	800382c <HAL_GetREVID>
 8003e9e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ea2:	4298      	cmp	r0, r3
 8003ea4:	d832      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0xb0>
  {
    if (freq > 20000000UL)
 8003ea6:	4a42      	ldr	r2, [pc, #264]	; (8003fb0 <ADC_ConfigureBoostMode+0x154>)
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	4294      	cmp	r4, r2
 8003eac:	d928      	bls.n	8003f00 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003eb8:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <ADC_ConfigureBoostMode+0x158>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003ec0:	bf14      	ite	ne
 8003ec2:	2301      	movne	r3, #1
 8003ec4:	2300      	moveq	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1da      	bne.n	8003e80 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003eca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ece:	f004 fc7d 	bl	80087cc <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003ed2:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ed4:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8003ed6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003eda:	d049      	beq.n	8003f70 <ADC_ConfigureBoostMode+0x114>
 8003edc:	d93e      	bls.n	8003f5c <ADC_ConfigureBoostMode+0x100>
 8003ede:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ee2:	d04e      	beq.n	8003f82 <ADC_ConfigureBoostMode+0x126>
 8003ee4:	d927      	bls.n	8003f36 <ADC_ConfigureBoostMode+0xda>
 8003ee6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003eea:	d048      	beq.n	8003f7e <ADC_ConfigureBoostMode+0x122>
 8003eec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ef0:	d1d3      	bne.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ef2:	f7ff fc9b 	bl	800382c <HAL_GetREVID>
 8003ef6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003efa:	4298      	cmp	r0, r3
 8003efc:	d805      	bhi.n	8003f0a <ADC_ConfigureBoostMode+0xae>
 8003efe:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8003f0a:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f0c:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8003f0e:	4a2a      	ldr	r2, [pc, #168]	; (8003fb8 <ADC_ConfigureBoostMode+0x15c>)
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	4294      	cmp	r4, r2
 8003f14:	d90a      	bls.n	8003f2c <ADC_ConfigureBoostMode+0xd0>
    else if (freq <= 12500000UL)
 8003f16:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <ADC_ConfigureBoostMode+0x160>)
 8003f18:	4294      	cmp	r4, r2
 8003f1a:	d914      	bls.n	8003f46 <ADC_ConfigureBoostMode+0xea>
    else if (freq <= 25000000UL)
 8003f1c:	4a28      	ldr	r2, [pc, #160]	; (8003fc0 <ADC_ConfigureBoostMode+0x164>)
 8003f1e:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f20:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8003f22:	d932      	bls.n	8003f8a <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f24:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f28:	609a      	str	r2, [r3, #8]
}
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f32:	609a      	str	r2, [r3, #8]
}
 8003f34:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8003f36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f3a:	d024      	beq.n	8003f86 <ADC_ConfigureBoostMode+0x12a>
 8003f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f40:	d1ab      	bne.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8003f42:	0944      	lsrs	r4, r0, #5
        break;
 8003f44:	e7a9      	b.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f50:	609a      	str	r2, [r3, #8]
}
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8003f5a:	e79e      	b.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
    switch (hadc->Init.ClockPrescaler)
 8003f5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f60:	d006      	beq.n	8003f70 <ADC_ConfigureBoostMode+0x114>
 8003f62:	d818      	bhi.n	8003f96 <ADC_ConfigureBoostMode+0x13a>
 8003f64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f68:	d002      	beq.n	8003f70 <ADC_ConfigureBoostMode+0x114>
 8003f6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f6e:	d194      	bne.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f70:	0c9b      	lsrs	r3, r3, #18
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8003f78:	e78f      	b.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8003f7a:	0884      	lsrs	r4, r0, #2
        break;
 8003f7c:	e78d      	b.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8003f7e:	09c4      	lsrs	r4, r0, #7
        break;
 8003f80:	e78b      	b.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8003f82:	0984      	lsrs	r4, r0, #6
        break;
 8003f84:	e789      	b.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8003f86:	0904      	lsrs	r4, r0, #4
        break;
 8003f88:	e787      	b.n	8003e9a <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8003f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f9a:	d0e9      	beq.n	8003f70 <ADC_ConfigureBoostMode+0x114>
 8003f9c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003fa0:	f47f af7b 	bne.w	8003e9a <ADC_ConfigureBoostMode+0x3e>
 8003fa4:	e7e4      	b.n	8003f70 <ADC_ConfigureBoostMode+0x114>
 8003fa6:	bf00      	nop
 8003fa8:	40022000 	.word	0x40022000
 8003fac:	58026300 	.word	0x58026300
 8003fb0:	01312d00 	.word	0x01312d00
 8003fb4:	40022300 	.word	0x40022300
 8003fb8:	005f5e10 	.word	0x005f5e10
 8003fbc:	00bebc20 	.word	0x00bebc20
 8003fc0:	017d7840 	.word	0x017d7840

08003fc4 <HAL_ADC_Init>:
{
 8003fc4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8003fc6:	2300      	movs	r3, #0
{
 8003fc8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003fca:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	f000 80aa 	beq.w	8004126 <HAL_ADC_Init+0x162>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fd2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	2d00      	cmp	r5, #0
 8003fd8:	f000 809a 	beq.w	8004110 <HAL_ADC_Init+0x14c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fdc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fde:	6893      	ldr	r3, [r2, #8]
 8003fe0:	009d      	lsls	r5, r3, #2
 8003fe2:	d503      	bpl.n	8003fec <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fe4:	6891      	ldr	r1, [r2, #8]
 8003fe6:	4b77      	ldr	r3, [pc, #476]	; (80041c4 <HAL_ADC_Init+0x200>)
 8003fe8:	400b      	ands	r3, r1
 8003fea:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fec:	6893      	ldr	r3, [r2, #8]
 8003fee:	00d8      	lsls	r0, r3, #3
 8003ff0:	d415      	bmi.n	800401e <HAL_ADC_Init+0x5a>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ff2:	4b75      	ldr	r3, [pc, #468]	; (80041c8 <HAL_ADC_Init+0x204>)
  MODIFY_REG(ADCx->CR,
 8003ff4:	6890      	ldr	r0, [r2, #8]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4d74      	ldr	r5, [pc, #464]	; (80041cc <HAL_ADC_Init+0x208>)
 8003ffa:	099b      	lsrs	r3, r3, #6
 8003ffc:	4974      	ldr	r1, [pc, #464]	; (80041d0 <HAL_ADC_Init+0x20c>)
 8003ffe:	fba5 5303 	umull	r5, r3, r5, r3
 8004002:	4001      	ands	r1, r0
 8004004:	099b      	lsrs	r3, r3, #6
 8004006:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800400a:	6091      	str	r1, [r2, #8]
 800400c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800400e:	9b01      	ldr	r3, [sp, #4]
 8004010:	b12b      	cbz	r3, 800401e <HAL_ADC_Init+0x5a>
      wait_loop_index--;
 8004012:	9b01      	ldr	r3, [sp, #4]
 8004014:	3b01      	subs	r3, #1
 8004016:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004018:	9b01      	ldr	r3, [sp, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f9      	bne.n	8004012 <HAL_ADC_Init+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800401e:	6893      	ldr	r3, [r2, #8]
 8004020:	00d9      	lsls	r1, r3, #3
 8004022:	d467      	bmi.n	80040f4 <HAL_ADC_Init+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004024:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004026:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004028:	f043 0310 	orr.w	r3, r3, #16
 800402c:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004030:	432b      	orrs	r3, r5
 8004032:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004034:	6893      	ldr	r3, [r2, #8]
 8004036:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800403a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800403c:	d160      	bne.n	8004100 <HAL_ADC_Init+0x13c>
 800403e:	06db      	lsls	r3, r3, #27
 8004040:	d45e      	bmi.n	8004100 <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 8004042:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004044:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800404e:	6893      	ldr	r3, [r2, #8]
 8004050:	07de      	lsls	r6, r3, #31
 8004052:	d413      	bmi.n	800407c <HAL_ADC_Init+0xb8>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004054:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_ADC_Init+0x210>)
 8004056:	429a      	cmp	r2, r3
 8004058:	f000 8092 	beq.w	8004180 <HAL_ADC_Init+0x1bc>
 800405c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004060:	429a      	cmp	r2, r3
 8004062:	f000 808d 	beq.w	8004180 <HAL_ADC_Init+0x1bc>
 8004066:	4b5c      	ldr	r3, [pc, #368]	; (80041d8 <HAL_ADC_Init+0x214>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	07d9      	lsls	r1, r3, #31
 800406c:	d406      	bmi.n	800407c <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800406e:	4a5b      	ldr	r2, [pc, #364]	; (80041dc <HAL_ADC_Init+0x218>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004070:	6893      	ldr	r3, [r2, #8]
 8004072:	6861      	ldr	r1, [r4, #4]
 8004074:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004078:	430b      	orrs	r3, r1
 800407a:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800407c:	f7ff fbd6 	bl	800382c <HAL_GetREVID>
 8004080:	f241 0303 	movw	r3, #4099	; 0x1003
 8004084:	7d62      	ldrb	r2, [r4, #21]
 8004086:	4298      	cmp	r0, r3
 8004088:	7f21      	ldrb	r1, [r4, #28]
 800408a:	d96c      	bls.n	8004166 <HAL_ADC_Init+0x1a2>
 800408c:	68a3      	ldr	r3, [r4, #8]
 800408e:	0352      	lsls	r2, r2, #13
 8004090:	040e      	lsls	r6, r1, #16
 8004092:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004094:	2b10      	cmp	r3, #16
 8004096:	f000 808e 	beq.w	80041b6 <HAL_ADC_Init+0x1f2>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800409a:	431a      	orrs	r2, r3
 800409c:	4332      	orrs	r2, r6
 800409e:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040a0:	2901      	cmp	r1, #1
 80040a2:	d103      	bne.n	80040ac <HAL_ADC_Init+0xe8>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040a4:	6a23      	ldr	r3, [r4, #32]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040ae:	b123      	cbz	r3, 80040ba <HAL_ADC_Init+0xf6>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040b0:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80040b6:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040b8:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	4948      	ldr	r1, [pc, #288]	; (80041e0 <HAL_ADC_Init+0x21c>)
 80040be:	68d8      	ldr	r0, [r3, #12]
 80040c0:	4001      	ands	r1, r0
 80040c2:	430a      	orrs	r2, r1
 80040c4:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040cc:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_Init+0x110>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040d0:	0712      	lsls	r2, r2, #28
 80040d2:	d52c      	bpl.n	800412e <HAL_ADC_Init+0x16a>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040d4:	68e2      	ldr	r2, [r4, #12]
 80040d6:	2a01      	cmp	r2, #1
 80040d8:	d04a      	beq.n	8004170 <HAL_ADC_Init+0x1ac>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040dc:	f022 020f 	bic.w	r2, r2, #15
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 80040e4:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6563      	str	r3, [r4, #84]	; 0x54
}
 80040f0:	b002      	add	sp, #8
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040f4:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f6:	2500      	movs	r5, #0
 80040f8:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80040fe:	d09e      	beq.n	800403e <HAL_ADC_Init+0x7a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004100:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004102:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004104:	f043 0310 	orr.w	r3, r3, #16
}
 8004108:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800410a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800410c:	b002      	add	sp, #8
 800410e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004110:	f7ff f868 	bl	80031e4 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004114:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8004116:	65a5      	str	r5, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004118:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 800411a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800411e:	009d      	lsls	r5, r3, #2
 8004120:	f57f af64 	bpl.w	8003fec <HAL_ADC_Init+0x28>
 8004124:	e75e      	b.n	8003fe4 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8004126:	2501      	movs	r5, #1
}
 8004128:	4628      	mov	r0, r5
 800412a:	b002      	add	sp, #8
 800412c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800412e:	68d8      	ldr	r0, [r3, #12]
 8004130:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <HAL_ADC_Init+0x220>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004132:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004134:	4002      	ands	r2, r0
 8004136:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004138:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
      if (hadc->Init.OversamplingMode == ENABLE)
 800413c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004140:	4302      	orrs	r2, r0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004142:	2901      	cmp	r1, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004144:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8004146:	d025      	beq.n	8004194 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004150:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8004152:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004156:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800415a:	430a      	orrs	r2, r1
 800415c:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800415e:	f7ff fe7d 	bl	8003e5c <ADC_ConfigureBoostMode>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	e7b6      	b.n	80040d4 <HAL_ADC_Init+0x110>
 8004166:	0352      	lsls	r2, r2, #13
 8004168:	68a3      	ldr	r3, [r4, #8]
 800416a:	040e      	lsls	r6, r1, #16
 800416c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800416e:	e794      	b.n	800409a <HAL_ADC_Init+0xd6>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004170:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004172:	69a2      	ldr	r2, [r4, #24]
 8004174:	f021 010f 	bic.w	r1, r1, #15
 8004178:	3a01      	subs	r2, #1
 800417a:	430a      	orrs	r2, r1
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
 800417e:	e7b0      	b.n	80040e2 <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_ADC_Init+0x210>)
 8004182:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_ADC_Init+0x224>)
 8004184:	6892      	ldr	r2, [r2, #8]
 8004186:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004188:	4313      	orrs	r3, r2
 800418a:	07d8      	lsls	r0, r3, #31
 800418c:	f53f af76 	bmi.w	800407c <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004190:	4a16      	ldr	r2, [pc, #88]	; (80041ec <HAL_ADC_Init+0x228>)
 8004192:	e76d      	b.n	8004070 <HAL_ADC_Init+0xac>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004194:	e9d4 2110 	ldrd	r2, r1, [r4, #64]	; 0x40
 8004198:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800419a:	430a      	orrs	r2, r1
 800419c:	4e14      	ldr	r6, [pc, #80]	; (80041f0 <HAL_ADC_Init+0x22c>)
 800419e:	6919      	ldr	r1, [r3, #16]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	400e      	ands	r6, r1
 80041a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80041a8:	4302      	orrs	r2, r0
 80041aa:	3901      	subs	r1, #1
 80041ac:	4332      	orrs	r2, r6
 80041ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80041b2:	611a      	str	r2, [r3, #16]
 80041b4:	e7cc      	b.n	8004150 <HAL_ADC_Init+0x18c>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041b6:	f040 031c 	orr.w	r3, r0, #28
 80041ba:	4313      	orrs	r3, r2
 80041bc:	ea43 0206 	orr.w	r2, r3, r6
 80041c0:	e76e      	b.n	80040a0 <HAL_ADC_Init+0xdc>
 80041c2:	bf00      	nop
 80041c4:	5fffffc0 	.word	0x5fffffc0
 80041c8:	240001f4 	.word	0x240001f4
 80041cc:	053e2d63 	.word	0x053e2d63
 80041d0:	6fffffc0 	.word	0x6fffffc0
 80041d4:	40022000 	.word	0x40022000
 80041d8:	58026000 	.word	0x58026000
 80041dc:	58026300 	.word	0x58026300
 80041e0:	fff0c003 	.word	0xfff0c003
 80041e4:	ffffbffc 	.word	0xffffbffc
 80041e8:	40022100 	.word	0x40022100
 80041ec:	40022300 	.word	0x40022300
 80041f0:	fc00f81e 	.word	0xfc00f81e

080041f4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80041f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041f6:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
{
 80041fa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80041fc:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 80041fe:	2d01      	cmp	r5, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004200:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 8004202:	d036      	beq.n	8004272 <HAL_ADCEx_Calibration_Start+0x7e>
 8004204:	2301      	movs	r3, #1
 8004206:	4604      	mov	r4, r0
 8004208:	4615      	mov	r5, r2
 800420a:	460e      	mov	r6, r1
 800420c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004210:	f7ff fdf0 	bl	8003df4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004214:	bb20      	cbnz	r0, 8004260 <HAL_ADCEx_Calibration_Start+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004216:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8004218:	f005 4380 	and.w	r3, r5, #1073741824	; 0x40000000
 800421c:	4d1c      	ldr	r5, [pc, #112]	; (8004290 <HAL_ADCEx_Calibration_Start+0x9c>)
 800421e:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004222:	6822      	ldr	r2, [r4, #0]
 8004224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ADC_STATE_CLR_SET(hadc->State,
 8004228:	403d      	ands	r5, r7
 800422a:	4e1a      	ldr	r6, [pc, #104]	; (8004294 <HAL_ADCEx_Calibration_Start+0xa0>)
 800422c:	430b      	orrs	r3, r1

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800422e:	491a      	ldr	r1, [pc, #104]	; (8004298 <HAL_ADCEx_Calibration_Start+0xa4>)
    ADC_STATE_CLR_SET(hadc->State,
 8004230:	f045 0502 	orr.w	r5, r5, #2
 8004234:	6565      	str	r5, [r4, #84]	; 0x54
 8004236:	6895      	ldr	r5, [r2, #8]
 8004238:	402e      	ands	r6, r5
 800423a:	4333      	orrs	r3, r6
 800423c:	6093      	str	r3, [r2, #8]
 800423e:	e005      	b.n	800424c <HAL_ADCEx_Calibration_Start+0x58>
      wait_loop_index++;
 8004240:	9b01      	ldr	r3, [sp, #4]
 8004242:	3301      	adds	r3, #1
 8004244:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004246:	9b01      	ldr	r3, [sp, #4]
 8004248:	428b      	cmp	r3, r1
 800424a:	d815      	bhi.n	8004278 <HAL_ADCEx_Calibration_Start+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800424c:	6893      	ldr	r3, [r2, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	dbf6      	blt.n	8004240 <HAL_ADCEx_Calibration_Start+0x4c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004252:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004254:	f023 0303 	bic.w	r3, r3, #3
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6563      	str	r3, [r4, #84]	; 0x54
 800425e:	e003      	b.n	8004268 <HAL_ADCEx_Calibration_Start+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004260:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004262:	f043 0310 	orr.w	r3, r3, #16
 8004266:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004268:	2300      	movs	r3, #0
 800426a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800426e:	b003      	add	sp, #12
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8004272:	2002      	movs	r0, #2
}
 8004274:	b003      	add	sp, #12
 8004276:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8004278:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800427a:	2200      	movs	r2, #0
        return HAL_ERROR;
 800427c:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800427e:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8004282:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8004286:	f043 0310 	orr.w	r3, r3, #16
 800428a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800428c:	b003      	add	sp, #12
 800428e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004290:	ffffeefd 	.word	0xffffeefd
 8004294:	3ffeffc0 	.word	0x3ffeffc0
 8004298:	25c3f7ff 	.word	0x25c3f7ff

0800429c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80042a0:	6807      	ldr	r7, [r0, #0]
{
 80042a2:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042a4:	68bd      	ldr	r5, [r7, #8]
 80042a6:	f015 0504 	ands.w	r5, r5, #4
 80042aa:	d123      	bne.n	80042f4 <HAL_ADCEx_MultiModeStart_DMA+0x58>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042ac:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 80042b0:	4604      	mov	r4, r0
 80042b2:	2e01      	cmp	r6, #1
 80042b4:	d01e      	beq.n	80042f4 <HAL_ADCEx_MultiModeStart_DMA+0x58>

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042b6:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
    __HAL_LOCK(hadc);
 80042b8:	2601      	movs	r6, #1
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042ba:	429f      	cmp	r7, r3
    __HAL_LOCK(hadc);
 80042bc:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042c0:	d009      	beq.n	80042d6 <HAL_ADCEx_MultiModeStart_DMA+0x3a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042c2:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80042c4:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 80042c6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ca:	f043 0320 	orr.w	r3, r3, #32
 80042ce:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 80042d0:	b01a      	add	sp, #104	; 0x68
 80042d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8004390 <HAL_ADCEx_MultiModeStart_DMA+0xf4>
 80042da:	4616      	mov	r6, r2
 80042dc:	460d      	mov	r5, r1
 80042de:	f8cd 8004 	str.w	r8, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 80042e2:	f7ff fd29 	bl	8003d38 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80042e6:	b148      	cbz	r0, 80042fc <HAL_ADCEx_MultiModeStart_DMA+0x60>
      __HAL_UNLOCK(hadc);
 80042e8:	2300      	movs	r3, #0
 80042ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80042ee:	b01a      	add	sp, #104	; 0x68
 80042f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80042f4:	2002      	movs	r0, #2
}
 80042f6:	b01a      	add	sp, #104	; 0x68
 80042f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80042fc:	a801      	add	r0, sp, #4
 80042fe:	f7ff fd1b 	bl	8003d38 <ADC_Enable>
 8004302:	4602      	mov	r2, r0
    if (tmp_hal_status == HAL_OK)
 8004304:	2800      	cmp	r0, #0
 8004306:	d1ef      	bne.n	80042e8 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 8004308:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800430a:	4b1c      	ldr	r3, [pc, #112]	; (800437c <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800430c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 800430e:	400b      	ands	r3, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004310:	f8df c080 	ldr.w	ip, [pc, #128]	; 8004394 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004314:	f8df e080 	ldr.w	lr, [pc, #128]	; 8004398 <HAL_ADCEx_MultiModeStart_DMA+0xfc>
      ADC_STATE_CLR_SET(hadc->State,
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800431c:	4918      	ldr	r1, [pc, #96]	; (8004380 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      ADC_STATE_CLR_SET(hadc->State,
 800431e:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8004320:	65a2      	str	r2, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004322:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004326:	f8d4 c000 	ldr.w	ip, [r4]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800432a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800432e:	45bc      	cmp	ip, r7
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004330:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004332:	d01e      	beq.n	8004372 <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8004334:	45c4      	cmp	ip, r8
 8004336:	d01c      	beq.n	8004372 <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8004338:	4912      	ldr	r1, [pc, #72]	; (8004384 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800433a:	f04f 0e1c 	mov.w	lr, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800433e:	462a      	mov	r2, r5
      __HAL_UNLOCK(hadc);
 8004340:	2700      	movs	r7, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004342:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004344:	f8cc e000 	str.w	lr, [ip]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004348:	310c      	adds	r1, #12
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800434a:	f8dc 5004 	ldr.w	r5, [ip, #4]
      __HAL_UNLOCK(hadc);
 800434e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004352:	f045 0510 	orr.w	r5, r5, #16
 8004356:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800435a:	f000 fe17 	bl	8004f8c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 800435e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 8004362:	6891      	ldr	r1, [r2, #8]
 8004364:	400b      	ands	r3, r1
 8004366:	f043 0304 	orr.w	r3, r3, #4
 800436a:	6093      	str	r3, [r2, #8]
}
 800436c:	b01a      	add	sp, #104	; 0x68
 800436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004372:	4906      	ldr	r1, [pc, #24]	; (800438c <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8004374:	e7e1      	b.n	800433a <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 8004376:	bf00      	nop
 8004378:	40022000 	.word	0x40022000
 800437c:	fffff0fe 	.word	0xfffff0fe
 8004380:	0800390d 	.word	0x0800390d
 8004384:	58026300 	.word	0x58026300
 8004388:	7fffffc0 	.word	0x7fffffc0
 800438c:	40022300 	.word	0x40022300
 8004390:	40022100 	.word	0x40022100
 8004394:	080038a5 	.word	0x080038a5
 8004398:	08003895 	.word	0x08003895

0800439c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800439c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80043a0:	2a01      	cmp	r2, #1
 80043a2:	d04b      	beq.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80043a4:	4603      	mov	r3, r0

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043a6:	4a29      	ldr	r2, [pc, #164]	; (800444c <HAL_ADCEx_MultiModeConfigChannel+0xb0>)
  __HAL_LOCK(hadc);
 80043a8:	2001      	movs	r0, #1
{
 80043aa:	b4f0      	push	{r4, r5, r6, r7}
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043ac:	681c      	ldr	r4, [r3, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043ae:	680e      	ldr	r6, [r1, #0]
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043b0:	4294      	cmp	r4, r2
  __HAL_LOCK(hadc);
 80043b2:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043b6:	d008      	beq.n	80043ca <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043ba:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043bc:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 80043c0:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80043c6:	bcf0      	pop	{r4, r5, r6, r7}
 80043c8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043ca:	4d21      	ldr	r5, [pc, #132]	; (8004450 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
 80043cc:	68aa      	ldr	r2, [r5, #8]
 80043ce:	0752      	lsls	r2, r2, #29
 80043d0:	d50a      	bpl.n	80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
 80043d2:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80043d6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d8:	f042 0220 	orr.w	r2, r2, #32
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80043e4:	bcf0      	pop	{r4, r5, r6, r7}
 80043e6:	4770      	bx	lr
 80043e8:	68a0      	ldr	r0, [r4, #8]
 80043ea:	f010 0004 	ands.w	r0, r0, #4
 80043ee:	d1f1      	bne.n	80043d4 <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043f0:	b1c6      	cbz	r6, 8004424 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80043f2:	f8df c064 	ldr.w	ip, [pc, #100]	; 8004458 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 80043f6:	684f      	ldr	r7, [r1, #4]
 80043f8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80043fc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004400:	433a      	orrs	r2, r7
 8004402:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004406:	68a4      	ldr	r4, [r4, #8]
 8004408:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800440a:	4322      	orrs	r2, r4
 800440c:	07d4      	lsls	r4, r2, #31
 800440e:	d413      	bmi.n	8004438 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
        MODIFY_REG(tmpADC_Common->CCR,
 8004410:	688a      	ldr	r2, [r1, #8]
 8004412:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8004416:	490f      	ldr	r1, [pc, #60]	; (8004454 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004418:	4316      	orrs	r6, r2
 800441a:	4021      	ands	r1, r4
 800441c:	430e      	orrs	r6, r1
 800441e:	f8cc 6008 	str.w	r6, [ip, #8]
 8004422:	e7dc      	b.n	80043de <HAL_ADCEx_MultiModeConfigChannel+0x42>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004424:	490c      	ldr	r1, [pc, #48]	; (8004458 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8004426:	688a      	ldr	r2, [r1, #8]
 8004428:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800442c:	608a      	str	r2, [r1, #8]
 800442e:	68a0      	ldr	r0, [r4, #8]
 8004430:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004432:	4302      	orrs	r2, r0
 8004434:	07d0      	lsls	r0, r2, #31
 8004436:	d503      	bpl.n	8004440 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004438:	2000      	movs	r0, #0
 800443a:	e7d0      	b.n	80043de <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 800443c:	2002      	movs	r0, #2
}
 800443e:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004440:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004442:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004444:	4a03      	ldr	r2, [pc, #12]	; (8004454 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004446:	4022      	ands	r2, r4
 8004448:	608a      	str	r2, [r1, #8]
 800444a:	e7c8      	b.n	80043de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800444c:	40022000 	.word	0x40022000
 8004450:	40022100 	.word	0x40022100
 8004454:	fffff0e0 	.word	0xfffff0e0
 8004458:	40022300 	.word	0x40022300

0800445c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800445c:	4907      	ldr	r1, [pc, #28]	; (800447c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800445e:	0200      	lsls	r0, r0, #8
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004462:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004464:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004468:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800446a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800446e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004474:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004476:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8004478:	60c8      	str	r0, [r1, #12]
 800447a:	4770      	bx	lr
 800447c:	e000ed00 	.word	0xe000ed00
 8004480:	05fa0000 	.word	0x05fa0000

08004484 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004484:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <HAL_NVIC_SetPriority+0x60>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800448c:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800448e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004492:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004494:	2d04      	cmp	r5, #4
 8004496:	bf28      	it	cs
 8004498:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800449a:	2c06      	cmp	r4, #6
 800449c:	d918      	bls.n	80044d0 <HAL_NVIC_SetPriority+0x4c>
 800449e:	3b03      	subs	r3, #3
 80044a0:	f04f 34ff 	mov.w	r4, #4294967295
 80044a4:	409c      	lsls	r4, r3
 80044a6:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044aa:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80044ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b0:	fa02 f205 	lsl.w	r2, r2, r5
 80044b4:	ea21 0102 	bic.w	r1, r1, r2
 80044b8:	fa01 f203 	lsl.w	r2, r1, r3
 80044bc:	ea42 0204 	orr.w	r2, r2, r4
 80044c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80044c4:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80044c6:	db06      	blt.n	80044d6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <HAL_NVIC_SetPriority+0x64>)
 80044ca:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80044cc:	bc30      	pop	{r4, r5}
 80044ce:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044d0:	2400      	movs	r4, #0
 80044d2:	4623      	mov	r3, r4
 80044d4:	e7e9      	b.n	80044aa <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d6:	f000 000f 	and.w	r0, r0, #15
 80044da:	4b04      	ldr	r3, [pc, #16]	; (80044ec <HAL_NVIC_SetPriority+0x68>)
 80044dc:	541a      	strb	r2, [r3, r0]
 80044de:	bc30      	pop	{r4, r5}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	e000ed00 	.word	0xe000ed00
 80044e8:	e000e400 	.word	0xe000e400
 80044ec:	e000ed14 	.word	0xe000ed14

080044f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044f0:	2800      	cmp	r0, #0
 80044f2:	db07      	blt.n	8004504 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044f4:	f000 011f 	and.w	r1, r0, #31
 80044f8:	2301      	movs	r3, #1
 80044fa:	0940      	lsrs	r0, r0, #5
 80044fc:	4a02      	ldr	r2, [pc, #8]	; (8004508 <HAL_NVIC_EnableIRQ+0x18>)
 80044fe:	408b      	lsls	r3, r1
 8004500:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	e000e100 	.word	0xe000e100

0800450c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800450c:	3801      	subs	r0, #1
 800450e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004512:	d20d      	bcs.n	8004530 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004514:	4b07      	ldr	r3, [pc, #28]	; (8004534 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004516:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004518:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800451a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451c:	25f0      	movs	r5, #240	; 0xf0
 800451e:	4c06      	ldr	r4, [pc, #24]	; (8004538 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004520:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004522:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004524:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800452a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800452c:	bc30      	pop	{r4, r5}
 800452e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004530:	2001      	movs	r0, #1
 8004532:	4770      	bx	lr
 8004534:	e000e010 	.word	0xe000e010
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800453c:	b188      	cbz	r0, 8004562 <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800453e:	7903      	ldrb	r3, [r0, #4]
{
 8004540:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 8004542:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004546:	4604      	mov	r4, r0
 8004548:	b13b      	cbz	r3, 800455a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800454a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800454c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800454e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004550:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004552:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004554:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004556:	7122      	strb	r2, [r4, #4]
}
 8004558:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800455a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800455c:	f7fe fed8 	bl	8003310 <HAL_DAC_MspInit>
 8004560:	e7f3      	b.n	800454a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004562:	2001      	movs	r0, #1
}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop

08004568 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004568:	7942      	ldrb	r2, [r0, #5]
 800456a:	2a01      	cmp	r2, #1
 800456c:	d028      	beq.n	80045c0 <HAL_DAC_Start+0x58>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800456e:	6802      	ldr	r2, [r0, #0]
 8004570:	4603      	mov	r3, r0
{
 8004572:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdac);
 8004574:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004576:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 8004578:	f001 0610 	and.w	r6, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 800457c:	7104      	strb	r4, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800457e:	fa05 f006 	lsl.w	r0, r5, r6
 8004582:	6817      	ldr	r7, [r2, #0]
  __HAL_LOCK(hdac);
 8004584:	715d      	strb	r5, [r3, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8004586:	4338      	orrs	r0, r7
 8004588:	6010      	str	r0, [r2, #0]

  if (Channel == DAC_CHANNEL_1)
 800458a:	b971      	cbnz	r1, 80045aa <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800458c:	6811      	ldr	r1, [r2, #0]
 800458e:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 8004592:	42a1      	cmp	r1, r4
 8004594:	d102      	bne.n	800459c <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004596:	6851      	ldr	r1, [r2, #4]
 8004598:	4329      	orrs	r1, r5
 800459a:	6051      	str	r1, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800459c:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 800459e:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 80045a0:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80045a2:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 80045a4:	715a      	strb	r2, [r3, #5]
}
 80045a6:	bcf0      	pop	{r4, r5, r6, r7}
 80045a8:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80045aa:	6811      	ldr	r1, [r2, #0]
 80045ac:	40b4      	lsls	r4, r6
 80045ae:	f401 1178 	and.w	r1, r1, #4063232	; 0x3e0000
 80045b2:	42a1      	cmp	r1, r4
 80045b4:	d1f2      	bne.n	800459c <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80045b6:	6851      	ldr	r1, [r2, #4]
 80045b8:	f041 0102 	orr.w	r1, r1, #2
 80045bc:	6051      	str	r1, [r2, #4]
 80045be:	e7ed      	b.n	800459c <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 80045c0:	2002      	movs	r0, #2
}
 80045c2:	4770      	bx	lr

080045c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045c6:	7944      	ldrb	r4, [r0, #5]
{
 80045c8:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 80045ca:	2c01      	cmp	r4, #1
 80045cc:	d05e      	beq.n	800468c <HAL_DAC_Start_DMA+0xc8>
 80045ce:	4604      	mov	r4, r0
 80045d0:	460e      	mov	r6, r1
 80045d2:	2001      	movs	r0, #1
 80045d4:	4611      	mov	r1, r2
 80045d6:	6825      	ldr	r5, [r4, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045d8:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 80045da:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80045dc:	7122      	strb	r2, [r4, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80045de:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 80045e0:	bb4e      	cbnz	r6, 8004636 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80045e2:	68a0      	ldr	r0, [r4, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80045e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80045e8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80046a8 <HAL_DAC_Start_DMA+0xe4>

    /* Case of use of channel 1 */
    switch (Alignment)
 80045ec:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80045ee:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 80046ac <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80045f2:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80045f6:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80046b0 <HAL_DAC_Start_DMA+0xec>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80045fa:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80045fe:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004602:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8004604:	d04d      	beq.n	80046a2 <HAL_DAC_Start_DMA+0xde>
 8004606:	2f08      	cmp	r7, #8
 8004608:	d048      	beq.n	800469c <HAL_DAC_Start_DMA+0xd8>
 800460a:	2f00      	cmp	r7, #0
 800460c:	d038      	beq.n	8004680 <HAL_DAC_Start_DMA+0xbc>
        break;
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800460e:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004610:	682f      	ldr	r7, [r5, #0]
 8004612:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8004616:	602f      	str	r7, [r5, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004618:	f000 fcb8 	bl	8004f8c <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800461c:	2300      	movs	r3, #0
 800461e:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8004620:	bb48      	cbnz	r0, 8004676 <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	2101      	movs	r1, #1
 8004626:	f006 0610 	and.w	r6, r6, #16
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	fa01 f606 	lsl.w	r6, r1, r6
 8004630:	4316      	orrs	r6, r2
 8004632:	601e      	str	r6, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8004634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004636:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004638:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800463c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80046b4 <HAL_DAC_Start_DMA+0xf0>
    switch (Alignment)
 8004640:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004642:	f8df e074 	ldr.w	lr, [pc, #116]	; 80046b8 <HAL_DAC_Start_DMA+0xf4>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004646:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800464a:	f8df c070 	ldr.w	ip, [pc, #112]	; 80046bc <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800464e:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004652:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004656:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8004658:	d01d      	beq.n	8004696 <HAL_DAC_Start_DMA+0xd2>
 800465a:	2f08      	cmp	r7, #8
 800465c:	d018      	beq.n	8004690 <HAL_DAC_Start_DMA+0xcc>
 800465e:	b197      	cbz	r7, 8004686 <HAL_DAC_Start_DMA+0xc2>
  if (Channel == DAC_CHANNEL_1)
 8004660:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004662:	682f      	ldr	r7, [r5, #0]
 8004664:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8004668:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800466a:	f000 fc8f 	bl	8004f8c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 800466e:	2300      	movs	r3, #0
 8004670:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8004672:	2800      	cmp	r0, #0
 8004674:	d0d5      	beq.n	8004622 <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	6123      	str	r3, [r4, #16]
}
 800467e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004680:	f105 0208 	add.w	r2, r5, #8
        break;
 8004684:	e7c4      	b.n	8004610 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004686:	f105 0214 	add.w	r2, r5, #20
        break;
 800468a:	e7ea      	b.n	8004662 <HAL_DAC_Start_DMA+0x9e>
  __HAL_LOCK(hdac);
 800468c:	2002      	movs	r0, #2
}
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004690:	f105 021c 	add.w	r2, r5, #28
        break;
 8004694:	e7e5      	b.n	8004662 <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004696:	f105 0218 	add.w	r2, r5, #24
        break;
 800469a:	e7e2      	b.n	8004662 <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800469c:	f105 0210 	add.w	r2, r5, #16
        break;
 80046a0:	e7b6      	b.n	8004610 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80046a2:	f105 020c 	add.w	r2, r5, #12
        break;
 80046a6:	e7b3      	b.n	8004610 <HAL_DAC_Start_DMA+0x4c>
 80046a8:	080046c1 	.word	0x080046c1
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046e1 	.word	0x080046e1
 80046b4:	080048bd 	.word	0x080048bd
 80046b8:	080048d1 	.word	0x080048d1
 80046bc:	080048e1 	.word	0x080048e1

080046c0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80046c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80046c4:	4620      	mov	r0, r4
 80046c6:	f7fd ff3d 	bl	8002544 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046ca:	2301      	movs	r3, #1
 80046cc:	7123      	strb	r3, [r4, #4]
}
 80046ce:	bd10      	pop	{r4, pc}

080046d0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80046d0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80046d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80046d4:	f7fd ff48 	bl	8002568 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80046d8:	bd08      	pop	{r3, pc}
 80046da:	bf00      	nop

080046dc <HAL_DAC_ErrorCallbackCh1>:
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80046e0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80046e4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80046e6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80046ee:	f7ff fff5 	bl	80046dc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046f2:	2301      	movs	r3, #1
 80046f4:	7123      	strb	r3, [r4, #4]
}
 80046f6:	bd10      	pop	{r4, pc}

080046f8 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop

080046fc <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80046fc:	6803      	ldr	r3, [r0, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	0491      	lsls	r1, r2, #18
{
 8004702:	b510      	push	{r4, lr}
 8004704:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004706:	d502      	bpl.n	800470e <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470a:	0492      	lsls	r2, r2, #18
 800470c:	d418      	bmi.n	8004740 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	0091      	lsls	r1, r2, #2
 8004712:	d502      	bpl.n	800471a <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004716:	0092      	lsls	r2, r2, #2
 8004718:	d400      	bmi.n	800471c <HAL_DAC_IRQHandler+0x20>
}
 800471a:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 800471c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800471e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004722:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8004724:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004726:	6922      	ldr	r2, [r4, #16]
 8004728:	f042 0202 	orr.w	r2, r2, #2
 800472c:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800472e:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8004736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800473a:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800473c:	f000 b8dc 	b.w	80048f8 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8004740:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8004746:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004748:	6902      	ldr	r2, [r0, #16]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004750:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004758:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800475a:	f7ff ffcd 	bl	80046f8 <HAL_DAC_DMAUnderrunCallbackCh1>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	e7d5      	b.n	800470e <HAL_DAC_IRQHandler+0x12>
 8004762:	bf00      	nop

08004764 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8004764:	7943      	ldrb	r3, [r0, #5]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d057      	beq.n	800481a <HAL_DAC_ConfigChannel+0xb6>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800476a:	680b      	ldr	r3, [r1, #0]
{
 800476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004770:	2b04      	cmp	r3, #4
 8004772:	4617      	mov	r7, r2
 8004774:	460e      	mov	r6, r1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004776:	f04f 0202 	mov.w	r2, #2
  __HAL_LOCK(hdac);
 800477a:	f04f 0101 	mov.w	r1, #1
 800477e:	4604      	mov	r4, r0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004780:	7102      	strb	r2, [r0, #4]
  __HAL_LOCK(hdac);
 8004782:	7141      	strb	r1, [r0, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004784:	d04d      	beq.n	8004822 <HAL_DAC_ConfigChannel+0xbe>
 8004786:	f007 0210 	and.w	r2, r7, #16
 800478a:	6805      	ldr	r5, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800478c:	6931      	ldr	r1, [r6, #16]
 800478e:	2901      	cmp	r1, #1
 8004790:	d039      	beq.n	8004806 <HAL_DAC_ConfigChannel+0xa2>
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004792:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004794:	68f0      	ldr	r0, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 8004796:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800479a:	4091      	lsls	r1, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800479c:	2801      	cmp	r0, #1
 800479e:	68b7      	ldr	r7, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047a0:	ea2c 0101 	bic.w	r1, ip, r1
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80047a4:	d02d      	beq.n	8004802 <HAL_DAC_ConfigChannel+0x9e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80047a6:	2802      	cmp	r0, #2
 80047a8:	d039      	beq.n	800481e <HAL_DAC_ConfigChannel+0xba>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80047aa:	fab7 f087 	clz	r0, r7
 80047ae:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80047b0:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047b2:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047b6:	6876      	ldr	r6, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80047b8:	f640 77fe 	movw	r7, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80047bc:	4303      	orrs	r3, r0
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047be:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80047c2:	4097      	lsls	r7, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047c4:	4096      	lsls	r6, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047c6:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80047c8:	20c0      	movs	r0, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 80047ca:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 80047ce:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047d2:	430b      	orrs	r3, r1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80047d4:	fa00 f102 	lsl.w	r1, r0, r2
  return HAL_OK;
 80047d8:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 80047da:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	ea23 0308 	bic.w	r3, r3, r8
 80047e2:	602b      	str	r3, [r5, #0]
  tmpreg1 = hdac->Instance->CR;
 80047e4:	682b      	ldr	r3, [r5, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80047e6:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047ea:	4333      	orrs	r3, r6
  hdac->Instance->CR = tmpreg1;
 80047ec:	602b      	str	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80047ee:	682a      	ldr	r2, [r5, #0]
 80047f0:	ea22 0201 	bic.w	r2, r2, r1
 80047f4:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80047f6:	f884 e004 	strb.w	lr, [r4, #4]
  __HAL_UNLOCK(hdac);
 80047fa:	f884 c005 	strb.w	ip, [r4, #5]
}
 80047fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8004802:	2000      	movs	r0, #0
 8004804:	e7d4      	b.n	80047b0 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004806:	271f      	movs	r7, #31
    tmpreg1 = hdac->Instance->CCR;
 8004808:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800480a:	6971      	ldr	r1, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800480c:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800480e:	4091      	lsls	r1, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004810:	ea20 0007 	bic.w	r0, r0, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004814:	4301      	orrs	r1, r0
    hdac->Instance->CCR = tmpreg1;
 8004816:	63a9      	str	r1, [r5, #56]	; 0x38
 8004818:	e7bb      	b.n	8004792 <HAL_DAC_ConfigChannel+0x2e>
  __HAL_LOCK(hdac);
 800481a:	2002      	movs	r0, #2
}
 800481c:	4770      	bx	lr
    connectOnChip = DAC_MCR_MODE1_0;
 800481e:	2001      	movs	r0, #1
 8004820:	e7c6      	b.n	80047b0 <HAL_DAC_ConfigChannel+0x4c>
    tickstart = HAL_GetTick();
 8004822:	f7fe ffeb 	bl	80037fc <HAL_GetTick>
 8004826:	4605      	mov	r5, r0
    if (Channel == DAC_CHANNEL_1)
 8004828:	b9c7      	cbnz	r7, 800485c <HAL_DAC_ConfigChannel+0xf8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800482a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80048b4 <HAL_DAC_ConfigChannel+0x150>
 800482e:	e004      	b.n	800483a <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004830:	f7fe ffe4 	bl	80037fc <HAL_GetTick>
 8004834:	1b40      	subs	r0, r0, r5
 8004836:	2801      	cmp	r0, #1
 8004838:	d833      	bhi.n	80048a2 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	ea13 0f08 	tst.w	r3, r8
 8004842:	d1f5      	bne.n	8004830 <HAL_DAC_ConfigChannel+0xcc>
      HAL_Delay(1);
 8004844:	2001      	movs	r0, #1
 8004846:	f7fe ffdf 	bl	8003808 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800484a:	6825      	ldr	r5, [r4, #0]
 800484c:	69b3      	ldr	r3, [r6, #24]
 800484e:	642b      	str	r3, [r5, #64]	; 0x40
 8004850:	e00e      	b.n	8004870 <HAL_DAC_ConfigChannel+0x10c>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004852:	f7fe ffd3 	bl	80037fc <HAL_GetTick>
 8004856:	1b40      	subs	r0, r0, r5
 8004858:	2801      	cmp	r0, #1
 800485a:	d822      	bhi.n	80048a2 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	2b00      	cmp	r3, #0
 8004862:	dbf6      	blt.n	8004852 <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 8004864:	2001      	movs	r0, #1
 8004866:	f7fe ffcf 	bl	8003808 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800486a:	6825      	ldr	r5, [r4, #0]
 800486c:	69b3      	ldr	r3, [r6, #24]
 800486e:	646b      	str	r3, [r5, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004870:	f007 0210 	and.w	r2, r7, #16
 8004874:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8004878:	6cab      	ldr	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800487a:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800487c:	69f0      	ldr	r0, [r6, #28]
 800487e:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004882:	fa01 f702 	lsl.w	r7, r1, r2
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004886:	4090      	lsls	r0, r2
 8004888:	ea23 030c 	bic.w	r3, r3, ip
 800488c:	4303      	orrs	r3, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800488e:	6a30      	ldr	r0, [r6, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004890:	64ab      	str	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004892:	4090      	lsls	r0, r2
 8004894:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8004896:	6833      	ldr	r3, [r6, #0]
 8004898:	ea21 0107 	bic.w	r1, r1, r7
 800489c:	4301      	orrs	r1, r0
 800489e:	64e9      	str	r1, [r5, #76]	; 0x4c
 80048a0:	e774      	b.n	800478c <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048a2:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048a4:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048a6:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 80048aa:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048ac:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048ae:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 80048b0:	e7a5      	b.n	80047fe <HAL_DAC_ConfigChannel+0x9a>
 80048b2:	bf00      	nop
 80048b4:	20008000 	.word	0x20008000

080048b8 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop

080048bc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048bc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048be:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7ff fff9 	bl	80048b8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048c6:	2301      	movs	r3, #1
 80048c8:	7123      	strb	r3, [r4, #4]
}
 80048ca:	bd10      	pop	{r4, pc}

080048cc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop

080048d0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048d0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80048d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80048d4:	f7ff fffa 	bl	80048cc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048d8:	bd08      	pop	{r3, pc}
 80048da:	bf00      	nop

080048dc <HAL_DACEx_ErrorCallbackCh2>:
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop

080048e0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80048e0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048e4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80048e6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80048ee:	f7ff fff5 	bl	80048dc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048f2:	2301      	movs	r3, #1
 80048f4:	7123      	strb	r3, [r4, #4]
}
 80048f6:	bd10      	pop	{r4, pc}

080048f8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop

080048fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048fc:	6802      	ldr	r2, [r0, #0]
{
 80048fe:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004900:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <DMA_CalcBaseAndBitshift+0xd8>)
 8004902:	4835      	ldr	r0, [pc, #212]	; (80049d8 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8004904:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004906:	4c35      	ldr	r4, [pc, #212]	; (80049dc <DMA_CalcBaseAndBitshift+0xe0>)
 8004908:	4d35      	ldr	r5, [pc, #212]	; (80049e0 <DMA_CalcBaseAndBitshift+0xe4>)
 800490a:	42a2      	cmp	r2, r4
 800490c:	bf18      	it	ne
 800490e:	429a      	cmpne	r2, r3
 8004910:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	4282      	cmp	r2, r0
 800491c:	bf08      	it	eq
 800491e:	f043 0301 	orreq.w	r3, r3, #1
 8004922:	3048      	adds	r0, #72	; 0x48
 8004924:	42aa      	cmp	r2, r5
 8004926:	bf08      	it	eq
 8004928:	f043 0301 	orreq.w	r3, r3, #1
 800492c:	3548      	adds	r5, #72	; 0x48
 800492e:	42a2      	cmp	r2, r4
 8004930:	bf08      	it	eq
 8004932:	f043 0301 	orreq.w	r3, r3, #1
 8004936:	3448      	adds	r4, #72	; 0x48
 8004938:	4282      	cmp	r2, r0
 800493a:	bf08      	it	eq
 800493c:	f043 0301 	orreq.w	r3, r3, #1
 8004940:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8004944:	42aa      	cmp	r2, r5
 8004946:	bf08      	it	eq
 8004948:	f043 0301 	orreq.w	r3, r3, #1
 800494c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004950:	42a2      	cmp	r2, r4
 8004952:	bf08      	it	eq
 8004954:	f043 0301 	orreq.w	r3, r3, #1
 8004958:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800495c:	4282      	cmp	r2, r0
 800495e:	bf08      	it	eq
 8004960:	f043 0301 	orreq.w	r3, r3, #1
 8004964:	3048      	adds	r0, #72	; 0x48
 8004966:	42aa      	cmp	r2, r5
 8004968:	bf08      	it	eq
 800496a:	f043 0301 	orreq.w	r3, r3, #1
 800496e:	3548      	adds	r5, #72	; 0x48
 8004970:	42a2      	cmp	r2, r4
 8004972:	bf08      	it	eq
 8004974:	f043 0301 	orreq.w	r3, r3, #1
 8004978:	3448      	adds	r4, #72	; 0x48
 800497a:	4282      	cmp	r2, r0
 800497c:	bf08      	it	eq
 800497e:	f043 0301 	orreq.w	r3, r3, #1
 8004982:	3048      	adds	r0, #72	; 0x48
 8004984:	42aa      	cmp	r2, r5
 8004986:	bf08      	it	eq
 8004988:	f043 0301 	orreq.w	r3, r3, #1
 800498c:	42a2      	cmp	r2, r4
 800498e:	bf08      	it	eq
 8004990:	f043 0301 	orreq.w	r3, r3, #1
 8004994:	4282      	cmp	r2, r0
 8004996:	bf08      	it	eq
 8004998:	f043 0301 	orreq.w	r3, r3, #1
 800499c:	b913      	cbnz	r3, 80049a4 <DMA_CalcBaseAndBitshift+0xa8>
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <DMA_CalcBaseAndBitshift+0xe8>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d112      	bne.n	80049ca <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049a4:	b2d3      	uxtb	r3, r2
 80049a6:	4d10      	ldr	r5, [pc, #64]	; (80049e8 <DMA_CalcBaseAndBitshift+0xec>)
 80049a8:	4810      	ldr	r0, [pc, #64]	; (80049ec <DMA_CalcBaseAndBitshift+0xf0>)
 80049aa:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049ac:	4c10      	ldr	r4, [pc, #64]	; (80049f0 <DMA_CalcBaseAndBitshift+0xf4>)
 80049ae:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049b0:	fba5 5303 	umull	r5, r3, r5, r3
 80049b4:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049b6:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 80049ba:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049bc:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049be:	bf88      	it	hi
 80049c0:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049c2:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049c4:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80049c6:	bc30      	pop	{r4, r5}
 80049c8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049ca:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80049ce:	6588      	str	r0, [r1, #88]	; 0x58
 80049d0:	e7f9      	b.n	80049c6 <DMA_CalcBaseAndBitshift+0xca>
 80049d2:	bf00      	nop
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020028 	.word	0x40020028
 80049e0:	40020058 	.word	0x40020058
 80049e4:	400204b8 	.word	0x400204b8
 80049e8:	aaaaaaab 	.word	0xaaaaaaab
 80049ec:	fffffc00 	.word	0xfffffc00
 80049f0:	080163a4 	.word	0x080163a4

080049f4 <HAL_DMA_Init>:
{
 80049f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80049fa:	f7fe feff 	bl	80037fc <HAL_GetTick>
  if(hdma == NULL)
 80049fe:	2c00      	cmp	r4, #0
 8004a00:	f000 8182 	beq.w	8004d08 <HAL_DMA_Init+0x314>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	4605      	mov	r5, r0
 8004a08:	4a2b      	ldr	r2, [pc, #172]	; (8004ab8 <HAL_DMA_Init+0xc4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d049      	beq.n	8004aa2 <HAL_DMA_Init+0xae>
 8004a0e:	3218      	adds	r2, #24
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d046      	beq.n	8004aa2 <HAL_DMA_Init+0xae>
 8004a14:	3230      	adds	r2, #48	; 0x30
 8004a16:	4829      	ldr	r0, [pc, #164]	; (8004abc <HAL_DMA_Init+0xc8>)
 8004a18:	4929      	ldr	r1, [pc, #164]	; (8004ac0 <HAL_DMA_Init+0xcc>)
 8004a1a:	4283      	cmp	r3, r0
 8004a1c:	bf18      	it	ne
 8004a1e:	4293      	cmpne	r3, r2
 8004a20:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8004a24:	bf0c      	ite	eq
 8004a26:	2201      	moveq	r2, #1
 8004a28:	2200      	movne	r2, #0
 8004a2a:	428b      	cmp	r3, r1
 8004a2c:	bf08      	it	eq
 8004a2e:	f042 0201 	orreq.w	r2, r2, #1
 8004a32:	3130      	adds	r1, #48	; 0x30
 8004a34:	4283      	cmp	r3, r0
 8004a36:	bf08      	it	eq
 8004a38:	f042 0201 	orreq.w	r2, r2, #1
 8004a3c:	3030      	adds	r0, #48	; 0x30
 8004a3e:	428b      	cmp	r3, r1
 8004a40:	bf08      	it	eq
 8004a42:	f042 0201 	orreq.w	r2, r2, #1
 8004a46:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004a4a:	4283      	cmp	r3, r0
 8004a4c:	bf08      	it	eq
 8004a4e:	f042 0201 	orreq.w	r2, r2, #1
 8004a52:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004a56:	428b      	cmp	r3, r1
 8004a58:	bf08      	it	eq
 8004a5a:	f042 0201 	orreq.w	r2, r2, #1
 8004a5e:	3130      	adds	r1, #48	; 0x30
 8004a60:	4283      	cmp	r3, r0
 8004a62:	bf08      	it	eq
 8004a64:	f042 0201 	orreq.w	r2, r2, #1
 8004a68:	3030      	adds	r0, #48	; 0x30
 8004a6a:	428b      	cmp	r3, r1
 8004a6c:	bf08      	it	eq
 8004a6e:	f042 0201 	orreq.w	r2, r2, #1
 8004a72:	3130      	adds	r1, #48	; 0x30
 8004a74:	4283      	cmp	r3, r0
 8004a76:	bf08      	it	eq
 8004a78:	f042 0201 	orreq.w	r2, r2, #1
 8004a7c:	3030      	adds	r0, #48	; 0x30
 8004a7e:	428b      	cmp	r3, r1
 8004a80:	bf08      	it	eq
 8004a82:	f042 0201 	orreq.w	r2, r2, #1
 8004a86:	3130      	adds	r1, #48	; 0x30
 8004a88:	4283      	cmp	r3, r0
 8004a8a:	bf08      	it	eq
 8004a8c:	f042 0201 	orreq.w	r2, r2, #1
 8004a90:	428b      	cmp	r3, r1
 8004a92:	bf08      	it	eq
 8004a94:	f042 0201 	orreq.w	r2, r2, #1
 8004a98:	b91a      	cbnz	r2, 8004aa2 <HAL_DMA_Init+0xae>
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <HAL_DMA_Init+0xd0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	f040 81bf 	bne.w	8004e20 <HAL_DMA_Init+0x42c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aa2:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004aa4:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aa6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004aaa:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8004aac:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e00e      	b.n	8004ad6 <HAL_DMA_Init+0xe2>
 8004ab8:	40020010 	.word	0x40020010
 8004abc:	40020040 	.word	0x40020040
 8004ac0:	40020070 	.word	0x40020070
 8004ac4:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ac8:	f7fe fe98 	bl	80037fc <HAL_GetTick>
 8004acc:	1b40      	subs	r0, r0, r5
 8004ace:	2805      	cmp	r0, #5
 8004ad0:	f200 8112 	bhi.w	8004cf8 <HAL_DMA_Init+0x304>
 8004ad4:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	07d6      	lsls	r6, r2, #31
 8004ada:	d4f5      	bmi.n	8004ac8 <HAL_DMA_Init+0xd4>
    registerValue |=  hdma->Init.Direction           |
 8004adc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae0:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8004ae2:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ae4:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ae6:	e9d4 6105 	ldrd	r6, r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aea:	4302      	orrs	r2, r0
 8004aec:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004aee:	4eb5      	ldr	r6, [pc, #724]	; (8004dc4 <HAL_DMA_Init+0x3d0>)
            hdma->Init.Mode                | hdma->Init.Priority;
 8004af0:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af4:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004af6:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af8:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004afa:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8004afc:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004afe:	2d04      	cmp	r5, #4
    registerValue |=  hdma->Init.Direction           |
 8004b00:	ea42 0206 	orr.w	r2, r2, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b04:	f000 8103 	beq.w	8004d0e <HAL_DMA_Init+0x31a>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b08:	4eaf      	ldr	r6, [pc, #700]	; (8004dc8 <HAL_DMA_Init+0x3d4>)
 8004b0a:	48b0      	ldr	r0, [pc, #704]	; (8004dcc <HAL_DMA_Init+0x3d8>)
 8004b0c:	6836      	ldr	r6, [r6, #0]
 8004b0e:	4030      	ands	r0, r6
 8004b10:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8004b14:	f080 8108 	bcs.w	8004d28 <HAL_DMA_Init+0x334>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b18:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b1a:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b1c:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004b20:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b22:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7ff fee9 	bl	80048fc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004b2c:	233f      	movs	r3, #63	; 0x3f
 8004b2e:	f002 021f 	and.w	r2, r2, #31
 8004b32:	4093      	lsls	r3, r2
 8004b34:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	4ba5      	ldr	r3, [pc, #660]	; (8004dd0 <HAL_DMA_Init+0x3dc>)
 8004b3a:	48a6      	ldr	r0, [pc, #664]	; (8004dd4 <HAL_DMA_Init+0x3e0>)
 8004b3c:	49a6      	ldr	r1, [pc, #664]	; (8004dd8 <HAL_DMA_Init+0x3e4>)
 8004b3e:	4282      	cmp	r2, r0
 8004b40:	bf18      	it	ne
 8004b42:	429a      	cmpne	r2, r3
 8004b44:	4ea5      	ldr	r6, [pc, #660]	; (8004ddc <HAL_DMA_Init+0x3e8>)
 8004b46:	4da6      	ldr	r5, [pc, #664]	; (8004de0 <HAL_DMA_Init+0x3ec>)
 8004b48:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8004b4c:	bf0c      	ite	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	2300      	movne	r3, #0
 8004b52:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8004e0c <HAL_DMA_Init+0x418>
 8004b56:	428a      	cmp	r2, r1
 8004b58:	bf08      	it	eq
 8004b5a:	f043 0301 	orreq.w	r3, r3, #1
 8004b5e:	3160      	adds	r1, #96	; 0x60
 8004b60:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8004e10 <HAL_DMA_Init+0x41c>
 8004b64:	42b2      	cmp	r2, r6
 8004b66:	bf08      	it	eq
 8004b68:	f043 0301 	orreq.w	r3, r3, #1
 8004b6c:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8004e14 <HAL_DMA_Init+0x420>
 8004b70:	4f9c      	ldr	r7, [pc, #624]	; (8004de4 <HAL_DMA_Init+0x3f0>)
 8004b72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004b76:	42aa      	cmp	r2, r5
 8004b78:	bf08      	it	eq
 8004b7a:	f043 0301 	orreq.w	r3, r3, #1
 8004b7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b82:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004e08 <HAL_DMA_Init+0x414>
 8004b86:	4282      	cmp	r2, r0
 8004b88:	bf08      	it	eq
 8004b8a:	f043 0301 	orreq.w	r3, r3, #1
 8004b8e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004b92:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8004e18 <HAL_DMA_Init+0x424>
 8004b96:	428a      	cmp	r2, r1
 8004b98:	bf08      	it	eq
 8004b9a:	f043 0301 	orreq.w	r3, r3, #1
 8004b9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ba2:	4562      	cmp	r2, ip
 8004ba4:	bf08      	it	eq
 8004ba6:	f043 0301 	orreq.w	r3, r3, #1
 8004baa:	f8df c254 	ldr.w	ip, [pc, #596]	; 8004e00 <HAL_DMA_Init+0x40c>
 8004bae:	4542      	cmp	r2, r8
 8004bb0:	bf08      	it	eq
 8004bb2:	f043 0301 	orreq.w	r3, r3, #1
 8004bb6:	eba2 0c0c 	sub.w	ip, r2, ip
 8004bba:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8004e04 <HAL_DMA_Init+0x410>
 8004bbe:	4572      	cmp	r2, lr
 8004bc0:	bf08      	it	eq
 8004bc2:	f043 0301 	orreq.w	r3, r3, #1
 8004bc6:	fabc fc8c 	clz	ip, ip
 8004bca:	eba2 0808 	sub.w	r8, r2, r8
 8004bce:	f8df e24c 	ldr.w	lr, [pc, #588]	; 8004e1c <HAL_DMA_Init+0x428>
 8004bd2:	42ba      	cmp	r2, r7
 8004bd4:	bf08      	it	eq
 8004bd6:	f043 0301 	orreq.w	r3, r3, #1
 8004bda:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004bde:	eba2 070a 	sub.w	r7, r2, sl
 8004be2:	fab8 f888 	clz	r8, r8
 8004be6:	42b2      	cmp	r2, r6
 8004be8:	bf08      	it	eq
 8004bea:	f043 0301 	orreq.w	r3, r3, #1
 8004bee:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8004bf2:	eba2 060e 	sub.w	r6, r2, lr
 8004bf6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004bfa:	42aa      	cmp	r2, r5
 8004bfc:	bf08      	it	eq
 8004bfe:	f043 0301 	orreq.w	r3, r3, #1
 8004c02:	fab7 f787 	clz	r7, r7
 8004c06:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004c0a:	eba2 050a 	sub.w	r5, r2, sl
 8004c0e:	4282      	cmp	r2, r0
 8004c10:	bf08      	it	eq
 8004c12:	f043 0301 	orreq.w	r3, r3, #1
 8004c16:	097f      	lsrs	r7, r7, #5
 8004c18:	fab6 f686 	clz	r6, r6
 8004c1c:	eba2 000e 	sub.w	r0, r2, lr
 8004c20:	428a      	cmp	r2, r1
 8004c22:	bf08      	it	eq
 8004c24:	f043 0301 	orreq.w	r3, r3, #1
 8004c28:	fab5 f585 	clz	r5, r5
 8004c2c:	0976      	lsrs	r6, r6, #5
 8004c2e:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8004c32:	454a      	cmp	r2, r9
 8004c34:	bf08      	it	eq
 8004c36:	f043 0301 	orreq.w	r3, r3, #1
 8004c3a:	096d      	lsrs	r5, r5, #5
 8004c3c:	fab0 f080 	clz	r0, r0
 8004c40:	eba2 010a 	sub.w	r1, r2, sl
 8004c44:	ea4c 0303 	orr.w	r3, ip, r3
 8004c48:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004c4c:	0940      	lsrs	r0, r0, #5
 8004c4e:	fab1 f181 	clz	r1, r1
 8004c52:	ea48 0303 	orr.w	r3, r8, r3
 8004c56:	eba2 0e0e 	sub.w	lr, r2, lr
 8004c5a:	0949      	lsrs	r1, r1, #5
 8004c5c:	433b      	orrs	r3, r7
 8004c5e:	fabe fe8e 	clz	lr, lr
 8004c62:	4333      	orrs	r3, r6
 8004c64:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004c68:	432b      	orrs	r3, r5
 8004c6a:	4303      	orrs	r3, r0
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	d102      	bne.n	8004c76 <HAL_DMA_Init+0x282>
 8004c70:	f1be 0f00 	cmp.w	lr, #0
 8004c74:	d039      	beq.n	8004cea <HAL_DMA_Init+0x2f6>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c76:	ea4c 0c08 	orr.w	ip, ip, r8
 8004c7a:	b2d3      	uxtb	r3, r2
 8004c7c:	ea47 070c 	orr.w	r7, r7, ip
 8004c80:	433e      	orrs	r6, r7
 8004c82:	4335      	orrs	r5, r6
 8004c84:	4328      	orrs	r0, r5
 8004c86:	4301      	orrs	r1, r0
 8004c88:	ea5e 0101 	orrs.w	r1, lr, r1
 8004c8c:	f000 8127 	beq.w	8004ede <HAL_DMA_Init+0x4ea>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c90:	4d55      	ldr	r5, [pc, #340]	; (8004de8 <HAL_DMA_Init+0x3f4>)
 8004c92:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c94:	4a55      	ldr	r2, [pc, #340]	; (8004dec <HAL_DMA_Init+0x3f8>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c96:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c98:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c9c:	4d54      	ldr	r5, [pc, #336]	; (8004df0 <HAL_DMA_Init+0x3fc>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c9e:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ca0:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ca2:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ca4:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ca8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004caa:	fa00 f303 	lsl.w	r3, r0, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cae:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cb0:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cb2:	68a0      	ldr	r0, [r4, #8]
 8004cb4:	2880      	cmp	r0, #128	; 0x80
 8004cb6:	d069      	beq.n	8004d8c <HAL_DMA_Init+0x398>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cb8:	6860      	ldr	r0, [r4, #4]
 8004cba:	b2c6      	uxtb	r6, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004cbc:	3801      	subs	r0, #1
 8004cbe:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cc0:	6016      	str	r6, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cc2:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004cc4:	d866      	bhi.n	8004d94 <HAL_DMA_Init+0x3a0>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cc6:	1e70      	subs	r0, r6, #1
 8004cc8:	2807      	cmp	r0, #7
 8004cca:	d868      	bhi.n	8004d9e <HAL_DMA_Init+0x3aa>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	f000 8133 	beq.w	8004f38 <HAL_DMA_Init+0x544>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd2:	4b48      	ldr	r3, [pc, #288]	; (8004df4 <HAL_DMA_Init+0x400>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004cd4:	4948      	ldr	r1, [pc, #288]	; (8004df8 <HAL_DMA_Init+0x404>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd6:	4433      	add	r3, r6
 8004cd8:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4082      	lsls	r2, r0
 8004cde:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8004ce2:	6762      	str	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ce8:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cea:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004cec:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cee:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004cf0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cf8:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cfa:	2303      	movs	r3, #3
        return HAL_ERROR;
 8004cfc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cfe:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8004d08:	2001      	movs	r0, #1
}
 8004d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d0e:	482e      	ldr	r0, [pc, #184]	; (8004dc8 <HAL_DMA_Init+0x3d4>)
 8004d10:	4e2e      	ldr	r6, [pc, #184]	; (8004dcc <HAL_DMA_Init+0x3d8>)
 8004d12:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d16:	403e      	ands	r6, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d18:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d1a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d1e:	ea40 0707 	orr.w	r7, r0, r7
 8004d22:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d26:	d346      	bcc.n	8004db6 <HAL_DMA_Init+0x3c2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d28:	6866      	ldr	r6, [r4, #4]
 8004d2a:	f1a6 0729 	sub.w	r7, r6, #41	; 0x29
 8004d2e:	2f1f      	cmp	r7, #31
 8004d30:	d925      	bls.n	8004d7e <HAL_DMA_Init+0x38a>
 8004d32:	3e4f      	subs	r6, #79	; 0x4f
 8004d34:	2e03      	cmp	r6, #3
 8004d36:	d926      	bls.n	8004d86 <HAL_DMA_Init+0x392>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d38:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d3a:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d3c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d3e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004d42:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d46:	f47f aeec 	bne.w	8004b22 <HAL_DMA_Init+0x12e>
 8004d4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8004d4c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004d4e:	432a      	orrs	r2, r5
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d50:	2800      	cmp	r0, #0
 8004d52:	f43f aee6 	beq.w	8004b22 <HAL_DMA_Init+0x12e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d56:	b331      	cbz	r1, 8004da6 <HAL_DMA_Init+0x3b2>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d58:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004d5c:	f000 80dd 	beq.w	8004f1a <HAL_DMA_Init+0x526>
    switch (hdma->Init.FIFOThreshold)
 8004d60:	2d02      	cmp	r5, #2
 8004d62:	d905      	bls.n	8004d70 <HAL_DMA_Init+0x37c>
 8004d64:	2d03      	cmp	r5, #3
 8004d66:	f47f aedc 	bne.w	8004b22 <HAL_DMA_Init+0x12e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d6a:	01c1      	lsls	r1, r0, #7
 8004d6c:	f57f aed9 	bpl.w	8004b22 <HAL_DMA_Init+0x12e>
          hdma->State = HAL_DMA_STATE_READY;
 8004d70:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d72:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8004d74:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d76:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004d78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 8004d7c:	e7c2      	b.n	8004d04 <HAL_DMA_Init+0x310>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d7e:	481f      	ldr	r0, [pc, #124]	; (8004dfc <HAL_DMA_Init+0x408>)
 8004d80:	40f8      	lsrs	r0, r7
 8004d82:	07c0      	lsls	r0, r0, #31
 8004d84:	d5d5      	bpl.n	8004d32 <HAL_DMA_Init+0x33e>
        registerValue |= DMA_SxCR_TRBUFF;
 8004d86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d8a:	e7d5      	b.n	8004d38 <HAL_DMA_Init+0x344>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	6061      	str	r1, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d90:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d92:	606b      	str	r3, [r5, #4]
      hdma->DMAmuxRequestGen = 0U;
 8004d94:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d96:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d9a:	6763      	str	r3, [r4, #116]	; 0x74
 8004d9c:	e7a5      	b.n	8004cea <HAL_DMA_Init+0x2f6>
 8004d9e:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 8004da2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004da4:	e79e      	b.n	8004ce4 <HAL_DMA_Init+0x2f0>
    switch (hdma->Init.FIFOThreshold)
 8004da6:	2d01      	cmp	r5, #1
 8004da8:	f000 80b2 	beq.w	8004f10 <HAL_DMA_Init+0x51c>
 8004dac:	d3dd      	bcc.n	8004d6a <HAL_DMA_Init+0x376>
 8004dae:	2d02      	cmp	r5, #2
 8004db0:	f47f aeb7 	bne.w	8004b22 <HAL_DMA_Init+0x12e>
 8004db4:	e7d9      	b.n	8004d6a <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004db6:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004db8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dba:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004dbe:	f042 0204 	orr.w	r2, r2, #4
 8004dc2:	e7c3      	b.n	8004d4c <HAL_DMA_Init+0x358>
 8004dc4:	fe10803f 	.word	0xfe10803f
 8004dc8:	5c001000 	.word	0x5c001000
 8004dcc:	ffff0000 	.word	0xffff0000
 8004dd0:	40020010 	.word	0x40020010
 8004dd4:	40020028 	.word	0x40020028
 8004dd8:	40020040 	.word	0x40020040
 8004ddc:	40020058 	.word	0x40020058
 8004de0:	40020070 	.word	0x40020070
 8004de4:	40020440 	.word	0x40020440
 8004de8:	cccccccd 	.word	0xcccccccd
 8004dec:	16009600 	.word	0x16009600
 8004df0:	58025880 	.word	0x58025880
 8004df4:	1600963f 	.word	0x1600963f
 8004df8:	58025940 	.word	0x58025940
 8004dfc:	c3c0003f 	.word	0xc3c0003f
 8004e00:	58025408 	.word	0x58025408
 8004e04:	5802541c 	.word	0x5802541c
 8004e08:	58025430 	.word	0x58025430
 8004e0c:	400200b8 	.word	0x400200b8
 8004e10:	40020410 	.word	0x40020410
 8004e14:	40020428 	.word	0x40020428
 8004e18:	400204b8 	.word	0x400204b8
 8004e1c:	58025444 	.word	0x58025444
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e20:	4a4c      	ldr	r2, [pc, #304]	; (8004f54 <HAL_DMA_Init+0x560>)
 8004e22:	494d      	ldr	r1, [pc, #308]	; (8004f58 <HAL_DMA_Init+0x564>)
 8004e24:	484d      	ldr	r0, [pc, #308]	; (8004f5c <HAL_DMA_Init+0x568>)
 8004e26:	428b      	cmp	r3, r1
 8004e28:	bf18      	it	ne
 8004e2a:	4293      	cmpne	r3, r2
 8004e2c:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8004e30:	4d4b      	ldr	r5, [pc, #300]	; (8004f60 <HAL_DMA_Init+0x56c>)
 8004e32:	bf0c      	ite	eq
 8004e34:	2201      	moveq	r2, #1
 8004e36:	2200      	movne	r2, #0
 8004e38:	4283      	cmp	r3, r0
 8004e3a:	bf08      	it	eq
 8004e3c:	f042 0201 	orreq.w	r2, r2, #1
 8004e40:	303c      	adds	r0, #60	; 0x3c
 8004e42:	428b      	cmp	r3, r1
 8004e44:	bf08      	it	eq
 8004e46:	f042 0201 	orreq.w	r2, r2, #1
 8004e4a:	313c      	adds	r1, #60	; 0x3c
 8004e4c:	42ab      	cmp	r3, r5
 8004e4e:	bf08      	it	eq
 8004e50:	f042 0201 	orreq.w	r2, r2, #1
 8004e54:	4283      	cmp	r3, r0
 8004e56:	bf08      	it	eq
 8004e58:	f042 0201 	orreq.w	r2, r2, #1
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	bf08      	it	eq
 8004e60:	f042 0201 	orreq.w	r2, r2, #1
 8004e64:	b912      	cbnz	r2, 8004e6c <HAL_DMA_Init+0x478>
 8004e66:	4a3f      	ldr	r2, [pc, #252]	; (8004f64 <HAL_DMA_Init+0x570>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d16c      	bne.n	8004f46 <HAL_DMA_Init+0x552>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e6c:	2002      	movs	r0, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e6e:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e70:	493d      	ldr	r1, [pc, #244]	; (8004f68 <HAL_DMA_Init+0x574>)
    __HAL_UNLOCK(hdma);
 8004e72:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e74:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e78:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e7a:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 8004e7c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e80:	ea01 0100 	and.w	r1, r1, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e84:	d05d      	beq.n	8004f42 <HAL_DMA_Init+0x54e>
 8004e86:	2a80      	cmp	r2, #128	; 0x80
 8004e88:	bf14      	ite	ne
 8004e8a:	462f      	movne	r7, r5
 8004e8c:	f44f 4780 	moveq.w	r7, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e90:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e92:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e94:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e96:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e98:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e9a:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8004f88 <HAL_DMA_Init+0x594>
 8004e9e:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ea2:	69a6      	ldr	r6, [r4, #24]
 8004ea4:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ea8:	69e5      	ldr	r5, [r4, #28]
 8004eaa:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004eae:	4e2f      	ldr	r6, [pc, #188]	; (8004f6c <HAL_DMA_Init+0x578>)
 8004eb0:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8004eb4:	441e      	add	r6, r3
 8004eb6:	6a25      	ldr	r5, [r4, #32]
 8004eb8:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8004ebc:	fbac 5606 	umull	r5, r6, ip, r6
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	0931      	lsrs	r1, r6, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ec4:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ec6:	0089      	lsls	r1, r1, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ec8:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004eca:	65e1      	str	r1, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ecc:	f7ff fd16 	bl	80048fc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ed0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f002 021f 	and.w	r2, r2, #31
 8004ed8:	4093      	lsls	r3, r2
 8004eda:	6043      	str	r3, [r0, #4]
 8004edc:	e62b      	b.n	8004b36 <HAL_DMA_Init+0x142>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ede:	f1a3 0010 	sub.w	r0, r3, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ee2:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <HAL_DMA_Init+0x57c>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ee4:	4d23      	ldr	r5, [pc, #140]	; (8004f74 <HAL_DMA_Init+0x580>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ee6:	4413      	add	r3, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ee8:	fba5 5000 	umull	r5, r0, r5, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004eec:	2ba8      	cmp	r3, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eee:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ef2:	d800      	bhi.n	8004ef6 <HAL_DMA_Init+0x502>
      stream_number += 8U;
 8004ef4:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ef6:	4a20      	ldr	r2, [pc, #128]	; (8004f78 <HAL_DMA_Init+0x584>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ef8:	f000 051f 	and.w	r5, r0, #31
 8004efc:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004efe:	4402      	add	r2, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f00:	481e      	ldr	r0, [pc, #120]	; (8004f7c <HAL_DMA_Init+0x588>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f02:	40ab      	lsls	r3, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f04:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f06:	4605      	mov	r5, r0
 8004f08:	66a3      	str	r3, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f0a:	e9c4 2018 	strd	r2, r0, [r4, #96]	; 0x60
 8004f0e:	e6d0      	b.n	8004cb2 <HAL_DMA_Init+0x2be>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f10:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004f14:	f47f ae05 	bne.w	8004b22 <HAL_DMA_Init+0x12e>
 8004f18:	e72a      	b.n	8004d70 <HAL_DMA_Init+0x37c>
    switch (hdma->Init.FIFOThreshold)
 8004f1a:	2d03      	cmp	r5, #3
 8004f1c:	f63f ae01 	bhi.w	8004b22 <HAL_DMA_Init+0x12e>
 8004f20:	a101      	add	r1, pc, #4	; (adr r1, 8004f28 <HAL_DMA_Init+0x534>)
 8004f22:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004d71 	.word	0x08004d71
 8004f2c:	08004d6b 	.word	0x08004d6b
 8004f30:	08004d71 	.word	0x08004d71
 8004f34:	08004f11 	.word	0x08004f11
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_DMA_Init+0x58c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f3a:	4912      	ldr	r1, [pc, #72]	; (8004f84 <HAL_DMA_Init+0x590>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f3c:	4433      	add	r3, r6
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	e6cb      	b.n	8004cda <HAL_DMA_Init+0x2e6>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f42:	2710      	movs	r7, #16
 8004f44:	e7a4      	b.n	8004e90 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f46:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f48:	2303      	movs	r3, #3
    return HAL_ERROR;
 8004f4a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f4c:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8004f52:	e6d7      	b.n	8004d04 <HAL_DMA_Init+0x310>
 8004f54:	58025408 	.word	0x58025408
 8004f58:	5802541c 	.word	0x5802541c
 8004f5c:	58025430 	.word	0x58025430
 8004f60:	58025458 	.word	0x58025458
 8004f64:	58025494 	.word	0x58025494
 8004f68:	fffe000f 	.word	0xfffe000f
 8004f6c:	a7fdabf8 	.word	0xa7fdabf8
 8004f70:	bffdfbf0 	.word	0xbffdfbf0
 8004f74:	aaaaaaab 	.word	0xaaaaaaab
 8004f78:	10008200 	.word	0x10008200
 8004f7c:	40020880 	.word	0x40020880
 8004f80:	1000823f 	.word	0x1000823f
 8004f84:	40020940 	.word	0x40020940
 8004f88:	cccccccd 	.word	0xcccccccd

08004f8c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f000 8104 	beq.w	800519a <HAL_DMA_Start_IT+0x20e>
{
 8004f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f96:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8004f98:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004f9c:	2801      	cmp	r0, #1
 8004f9e:	f000 8138 	beq.w	8005212 <HAL_DMA_Start_IT+0x286>
 8004fa2:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fa4:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 8004fa8:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8004faa:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fae:	d007      	beq.n	8004fc0 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8004fb0:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8004fb6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fba:	656b      	str	r3, [r5, #84]	; 0x54
}
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 8004fc0:	682c      	ldr	r4, [r5, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fc2:	f04f 0e02 	mov.w	lr, #2
    __HAL_DMA_DISABLE(hdma);
 8004fc6:	489b      	ldr	r0, [pc, #620]	; (8005234 <HAL_DMA_Start_IT+0x2a8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc8:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE(hdma);
 8004fcc:	4f9a      	ldr	r7, [pc, #616]	; (8005238 <HAL_DMA_Start_IT+0x2ac>)
 8004fce:	4e9b      	ldr	r6, [pc, #620]	; (800523c <HAL_DMA_Start_IT+0x2b0>)
 8004fd0:	42bc      	cmp	r4, r7
 8004fd2:	bf18      	it	ne
 8004fd4:	4284      	cmpne	r4, r0
 8004fd6:	f107 0748 	add.w	r7, r7, #72	; 0x48
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fda:	f885 e035 	strb.w	lr, [r5, #53]	; 0x35
 8004fde:	bf0c      	ite	eq
 8004fe0:	2001      	moveq	r0, #1
 8004fe2:	2000      	movne	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004fe4:	f8df e264 	ldr.w	lr, [pc, #612]	; 800524c <HAL_DMA_Start_IT+0x2c0>
 8004fe8:	42b4      	cmp	r4, r6
 8004fea:	bf08      	it	eq
 8004fec:	f040 0001 	orreq.w	r0, r0, #1
 8004ff0:	3630      	adds	r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ff2:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
 8004ff6:	42bc      	cmp	r4, r7
 8004ff8:	bf08      	it	eq
 8004ffa:	f040 0001 	orreq.w	r0, r0, #1
    __HAL_DMA_DISABLE(hdma);
 8004ffe:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8005002:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8005250 <HAL_DMA_Start_IT+0x2c4>
 8005006:	42b4      	cmp	r4, r6
 8005008:	bf08      	it	eq
 800500a:	f040 0001 	orreq.w	r0, r0, #1
 800500e:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8005012:	4574      	cmp	r4, lr
 8005014:	bf08      	it	eq
 8005016:	f040 0001 	orreq.w	r0, r0, #1
 800501a:	f50e 7e68 	add.w	lr, lr, #928	; 0x3a0
 800501e:	42bc      	cmp	r4, r7
 8005020:	bf08      	it	eq
 8005022:	f040 0001 	orreq.w	r0, r0, #1
 8005026:	3760      	adds	r7, #96	; 0x60
 8005028:	42b4      	cmp	r4, r6
 800502a:	bf08      	it	eq
 800502c:	f040 0001 	orreq.w	r0, r0, #1
 8005030:	3660      	adds	r6, #96	; 0x60
 8005032:	4564      	cmp	r4, ip
 8005034:	bf08      	it	eq
 8005036:	f040 0001 	orreq.w	r0, r0, #1
 800503a:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
 800503e:	4574      	cmp	r4, lr
 8005040:	bf08      	it	eq
 8005042:	f040 0001 	orreq.w	r0, r0, #1
 8005046:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
 800504a:	42bc      	cmp	r4, r7
 800504c:	bf08      	it	eq
 800504e:	f040 0001 	orreq.w	r0, r0, #1
 8005052:	f5a7 678c 	sub.w	r7, r7, #1120	; 0x460
 8005056:	42b4      	cmp	r4, r6
 8005058:	bf08      	it	eq
 800505a:	f040 0001 	orreq.w	r0, r0, #1
 800505e:	f5a6 668c 	sub.w	r6, r6, #1120	; 0x460
 8005062:	4564      	cmp	r4, ip
 8005064:	bf08      	it	eq
 8005066:	f040 0001 	orreq.w	r0, r0, #1
 800506a:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
 800506e:	4574      	cmp	r4, lr
 8005070:	bf14      	ite	ne
 8005072:	4682      	movne	sl, r0
 8005074:	f040 0a01 	orreq.w	sl, r0, #1
 8005078:	42b4      	cmp	r4, r6
 800507a:	bf18      	it	ne
 800507c:	42bc      	cmpne	r4, r7
 800507e:	6827      	ldr	r7, [r4, #0]
 8005080:	bf0c      	ite	eq
 8005082:	2601      	moveq	r6, #1
 8005084:	2600      	movne	r6, #0
 8005086:	f027 0701 	bic.w	r7, r7, #1
 800508a:	6027      	str	r7, [r4, #0]
 800508c:	d003      	beq.n	8005096 <HAL_DMA_Start_IT+0x10a>
 800508e:	f1ba 0f00 	cmp.w	sl, #0
 8005092:	f000 8084 	beq.w	800519e <HAL_DMA_Start_IT+0x212>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005096:	2e00      	cmp	r6, #0
 8005098:	f000 8081 	beq.w	800519e <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800509c:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 800509e:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 80050a2:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80050a4:	f1be 0f00 	cmp.w	lr, #0
 80050a8:	d007      	beq.n	80050ba <HAL_DMA_Start_IT+0x12e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050aa:	e9d5 701c 	ldrd	r7, r0, [r5, #112]	; 0x70
 80050ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050b0:	b91e      	cbnz	r6, 80050ba <HAL_DMA_Start_IT+0x12e>
 80050b2:	f1ba 0f00 	cmp.w	sl, #0
 80050b6:	f000 80cd 	beq.w	8005254 <HAL_DMA_Start_IT+0x2c8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050ba:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80050bc:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050c0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050c4:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050c8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050cc:	fa09 f707 	lsl.w	r7, r9, r7
 80050d0:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050d4:	6827      	ldr	r7, [r4, #0]
 80050d6:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 80050da:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80050dc:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050de:	f000 80a5 	beq.w	800522c <HAL_DMA_Start_IT+0x2a0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80050e2:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80050e4:	60e2      	str	r2, [r4, #12]
 80050e6:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050e8:	2e00      	cmp	r6, #0
 80050ea:	f040 8095 	bne.w	8005218 <HAL_DMA_Start_IT+0x28c>
 80050ee:	f1ba 0f00 	cmp.w	sl, #0
 80050f2:	f000 80ee 	beq.w	80052d2 <HAL_DMA_Start_IT+0x346>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f023 031e 	bic.w	r3, r3, #30
 80050fc:	f043 0316 	orr.w	r3, r3, #22
 8005100:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005102:	b12f      	cbz	r7, 8005110 <HAL_DMA_Start_IT+0x184>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	f043 0308 	orr.w	r3, r3, #8
 800510a:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800510c:	2e00      	cmp	r6, #0
 800510e:	d12c      	bne.n	800516a <HAL_DMA_Start_IT+0x1de>
 8005110:	4b4b      	ldr	r3, [pc, #300]	; (8005240 <HAL_DMA_Start_IT+0x2b4>)
 8005112:	4a4c      	ldr	r2, [pc, #304]	; (8005244 <HAL_DMA_Start_IT+0x2b8>)
 8005114:	494c      	ldr	r1, [pc, #304]	; (8005248 <HAL_DMA_Start_IT+0x2bc>)
 8005116:	4294      	cmp	r4, r2
 8005118:	bf18      	it	ne
 800511a:	429c      	cmpne	r4, r3
 800511c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8005120:	bf0c      	ite	eq
 8005122:	2301      	moveq	r3, #1
 8005124:	2300      	movne	r3, #0
 8005126:	428c      	cmp	r4, r1
 8005128:	bf08      	it	eq
 800512a:	f043 0301 	orreq.w	r3, r3, #1
 800512e:	3128      	adds	r1, #40	; 0x28
 8005130:	4294      	cmp	r4, r2
 8005132:	bf08      	it	eq
 8005134:	f043 0301 	orreq.w	r3, r3, #1
 8005138:	3228      	adds	r2, #40	; 0x28
 800513a:	428c      	cmp	r4, r1
 800513c:	bf08      	it	eq
 800513e:	f043 0301 	orreq.w	r3, r3, #1
 8005142:	3128      	adds	r1, #40	; 0x28
 8005144:	4294      	cmp	r4, r2
 8005146:	bf08      	it	eq
 8005148:	f043 0301 	orreq.w	r3, r3, #1
 800514c:	3228      	adds	r2, #40	; 0x28
 800514e:	428c      	cmp	r4, r1
 8005150:	bf08      	it	eq
 8005152:	f043 0301 	orreq.w	r3, r3, #1
 8005156:	4294      	cmp	r4, r2
 8005158:	bf08      	it	eq
 800515a:	f043 0301 	orreq.w	r3, r3, #1
 800515e:	b913      	cbnz	r3, 8005166 <HAL_DMA_Start_IT+0x1da>
 8005160:	f1ba 0f00 	cmp.w	sl, #0
 8005164:	d012      	beq.n	800518c <HAL_DMA_Start_IT+0x200>
 8005166:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800516a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	03d2      	lsls	r2, r2, #15
 8005170:	d503      	bpl.n	800517a <HAL_DMA_Start_IT+0x1ee>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005178:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800517a:	f1be 0f00 	cmp.w	lr, #0
 800517e:	d005      	beq.n	800518c <HAL_DMA_Start_IT+0x200>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005180:	f8de 3000 	ldr.w	r3, [lr]
 8005184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005188:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 800518c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6023      	str	r3, [r4, #0]
}
 8005196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 800519a:	2001      	movs	r0, #1
}
 800519c:	4770      	bx	lr
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800519e:	4f28      	ldr	r7, [pc, #160]	; (8005240 <HAL_DMA_Start_IT+0x2b4>)
 80051a0:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8005244 <HAL_DMA_Start_IT+0x2b8>
 80051a4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005248 <HAL_DMA_Start_IT+0x2bc>
 80051a8:	4574      	cmp	r4, lr
 80051aa:	bf18      	it	ne
 80051ac:	42bc      	cmpne	r4, r7
 80051ae:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 80051b2:	bf0c      	ite	eq
 80051b4:	2701      	moveq	r7, #1
 80051b6:	2700      	movne	r7, #0
 80051b8:	4544      	cmp	r4, r8
 80051ba:	bf08      	it	eq
 80051bc:	f047 0701 	orreq.w	r7, r7, #1
 80051c0:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80051c4:	4574      	cmp	r4, lr
 80051c6:	bf08      	it	eq
 80051c8:	f047 0701 	orreq.w	r7, r7, #1
 80051cc:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80051d0:	4544      	cmp	r4, r8
 80051d2:	bf08      	it	eq
 80051d4:	f047 0701 	orreq.w	r7, r7, #1
 80051d8:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80051dc:	4574      	cmp	r4, lr
 80051de:	bf08      	it	eq
 80051e0:	f047 0701 	orreq.w	r7, r7, #1
 80051e4:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80051e8:	4544      	cmp	r4, r8
 80051ea:	bf08      	it	eq
 80051ec:	f047 0701 	orreq.w	r7, r7, #1
 80051f0:	4574      	cmp	r4, lr
 80051f2:	bf08      	it	eq
 80051f4:	f047 0701 	orreq.w	r7, r7, #1
 80051f8:	b917      	cbnz	r7, 8005200 <HAL_DMA_Start_IT+0x274>
 80051fa:	f1ba 0f00 	cmp.w	sl, #0
 80051fe:	d029      	beq.n	8005254 <HAL_DMA_Start_IT+0x2c8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005200:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8005202:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 8005206:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005208:	f1be 0f00 	cmp.w	lr, #0
 800520c:	f47f af4d 	bne.w	80050aa <HAL_DMA_Start_IT+0x11e>
 8005210:	e74f      	b.n	80050b2 <HAL_DMA_Start_IT+0x126>
  __HAL_LOCK(hdma);
 8005212:	2002      	movs	r0, #2
}
 8005214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	f023 031e 	bic.w	r3, r3, #30
 800521e:	f043 0316 	orr.w	r3, r3, #22
 8005222:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005224:	2f00      	cmp	r7, #0
 8005226:	f47f af6d 	bne.w	8005104 <HAL_DMA_Start_IT+0x178>
 800522a:	e79e      	b.n	800516a <HAL_DMA_Start_IT+0x1de>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800522c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800522e:	60e1      	str	r1, [r4, #12]
 8005230:	e759      	b.n	80050e6 <HAL_DMA_Start_IT+0x15a>
 8005232:	bf00      	nop
 8005234:	40020058 	.word	0x40020058
 8005238:	40020040 	.word	0x40020040
 800523c:	40020070 	.word	0x40020070
 8005240:	5802541c 	.word	0x5802541c
 8005244:	58025408 	.word	0x58025408
 8005248:	58025430 	.word	0x58025430
 800524c:	400200b8 	.word	0x400200b8
 8005250:	40020440 	.word	0x40020440
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005254:	4f28      	ldr	r7, [pc, #160]	; (80052f8 <HAL_DMA_Start_IT+0x36c>)
 8005256:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005300 <HAL_DMA_Start_IT+0x374>
 800525a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8005304 <HAL_DMA_Start_IT+0x378>
 800525e:	4544      	cmp	r4, r8
 8005260:	bf18      	it	ne
 8005262:	42bc      	cmpne	r4, r7
 8005264:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8005268:	bf0c      	ite	eq
 800526a:	2701      	moveq	r7, #1
 800526c:	2700      	movne	r7, #0
 800526e:	4574      	cmp	r4, lr
 8005270:	bf08      	it	eq
 8005272:	f047 0701 	orreq.w	r7, r7, #1
 8005276:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800527a:	4544      	cmp	r4, r8
 800527c:	bf08      	it	eq
 800527e:	f047 0701 	orreq.w	r7, r7, #1
 8005282:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8005286:	4574      	cmp	r4, lr
 8005288:	bf08      	it	eq
 800528a:	f047 0701 	orreq.w	r7, r7, #1
 800528e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8005292:	4544      	cmp	r4, r8
 8005294:	bf08      	it	eq
 8005296:	f047 0701 	orreq.w	r7, r7, #1
 800529a:	4574      	cmp	r4, lr
 800529c:	bf08      	it	eq
 800529e:	f047 0701 	orreq.w	r7, r7, #1
 80052a2:	b927      	cbnz	r7, 80052ae <HAL_DMA_Start_IT+0x322>
 80052a4:	4f15      	ldr	r7, [pc, #84]	; (80052fc <HAL_DMA_Start_IT+0x370>)
 80052a6:	42bc      	cmp	r4, r7
 80052a8:	bf18      	it	ne
 80052aa:	6c2f      	ldrne	r7, [r5, #64]	; 0x40
 80052ac:	d111      	bne.n	80052d2 <HAL_DMA_Start_IT+0x346>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052ae:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80052b0:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052b8:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052bc:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052c0:	fa0e f707 	lsl.w	r7, lr, r7
 80052c4:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80052c8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ca:	d010      	beq.n	80052ee <HAL_DMA_Start_IT+0x362>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80052cc:	60a1      	str	r1, [r4, #8]
 80052ce:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80052d0:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	f023 030e 	bic.w	r3, r3, #14
 80052d8:	f043 030a 	orr.w	r3, r3, #10
 80052dc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80052de:	2f00      	cmp	r7, #0
 80052e0:	f43f af16 	beq.w	8005110 <HAL_DMA_Start_IT+0x184>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	6023      	str	r3, [r4, #0]
 80052ec:	e710      	b.n	8005110 <HAL_DMA_Start_IT+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80052ee:	60a2      	str	r2, [r4, #8]
 80052f0:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80052f2:	60e1      	str	r1, [r4, #12]
 80052f4:	e7ed      	b.n	80052d2 <HAL_DMA_Start_IT+0x346>
 80052f6:	bf00      	nop
 80052f8:	58025408 	.word	0x58025408
 80052fc:	58025494 	.word	0x58025494
 8005300:	5802541c 	.word	0x5802541c
 8005304:	58025430 	.word	0x58025430

08005308 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005308:	2800      	cmp	r0, #0
 800530a:	d060      	beq.n	80053ce <HAL_DMA_Abort_IT+0xc6>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800530c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8005310:	2a02      	cmp	r2, #2
{
 8005312:	b538      	push	{r3, r4, r5, lr}
 8005314:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005316:	d003      	beq.n	8005320 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005318:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800531a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800531c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800531e:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005320:	6801      	ldr	r1, [r0, #0]
 8005322:	4a57      	ldr	r2, [pc, #348]	; (8005480 <HAL_DMA_Abort_IT+0x178>)
 8005324:	4291      	cmp	r1, r2
 8005326:	d049      	beq.n	80053bc <HAL_DMA_Abort_IT+0xb4>
 8005328:	3218      	adds	r2, #24
 800532a:	4291      	cmp	r1, r2
 800532c:	d046      	beq.n	80053bc <HAL_DMA_Abort_IT+0xb4>
 800532e:	3230      	adds	r2, #48	; 0x30
 8005330:	4854      	ldr	r0, [pc, #336]	; (8005484 <HAL_DMA_Abort_IT+0x17c>)
 8005332:	4c55      	ldr	r4, [pc, #340]	; (8005488 <HAL_DMA_Abort_IT+0x180>)
 8005334:	4281      	cmp	r1, r0
 8005336:	bf18      	it	ne
 8005338:	4291      	cmpne	r1, r2
 800533a:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800533e:	4d53      	ldr	r5, [pc, #332]	; (800548c <HAL_DMA_Abort_IT+0x184>)
 8005340:	bf0c      	ite	eq
 8005342:	2201      	moveq	r2, #1
 8005344:	2200      	movne	r2, #0
 8005346:	42a1      	cmp	r1, r4
 8005348:	bf08      	it	eq
 800534a:	f042 0201 	orreq.w	r2, r2, #1
 800534e:	3448      	adds	r4, #72	; 0x48
 8005350:	4281      	cmp	r1, r0
 8005352:	bf08      	it	eq
 8005354:	f042 0201 	orreq.w	r2, r2, #1
 8005358:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800535c:	42a9      	cmp	r1, r5
 800535e:	bf08      	it	eq
 8005360:	f042 0201 	orreq.w	r2, r2, #1
 8005364:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005368:	42a1      	cmp	r1, r4
 800536a:	bf08      	it	eq
 800536c:	f042 0201 	orreq.w	r2, r2, #1
 8005370:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8005374:	4281      	cmp	r1, r0
 8005376:	bf08      	it	eq
 8005378:	f042 0201 	orreq.w	r2, r2, #1
 800537c:	3048      	adds	r0, #72	; 0x48
 800537e:	42a9      	cmp	r1, r5
 8005380:	bf08      	it	eq
 8005382:	f042 0201 	orreq.w	r2, r2, #1
 8005386:	3548      	adds	r5, #72	; 0x48
 8005388:	42a1      	cmp	r1, r4
 800538a:	bf08      	it	eq
 800538c:	f042 0201 	orreq.w	r2, r2, #1
 8005390:	3448      	adds	r4, #72	; 0x48
 8005392:	4281      	cmp	r1, r0
 8005394:	bf08      	it	eq
 8005396:	f042 0201 	orreq.w	r2, r2, #1
 800539a:	3048      	adds	r0, #72	; 0x48
 800539c:	42a9      	cmp	r1, r5
 800539e:	bf08      	it	eq
 80053a0:	f042 0201 	orreq.w	r2, r2, #1
 80053a4:	42a1      	cmp	r1, r4
 80053a6:	bf08      	it	eq
 80053a8:	f042 0201 	orreq.w	r2, r2, #1
 80053ac:	4281      	cmp	r1, r0
 80053ae:	bf08      	it	eq
 80053b0:	f042 0201 	orreq.w	r2, r2, #1
 80053b4:	b912      	cbnz	r2, 80053bc <HAL_DMA_Abort_IT+0xb4>
 80053b6:	4a36      	ldr	r2, [pc, #216]	; (8005490 <HAL_DMA_Abort_IT+0x188>)
 80053b8:	4291      	cmp	r1, r2
 80053ba:	d10a      	bne.n	80053d2 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 80053bc:	2204      	movs	r2, #4
  return HAL_OK;
 80053be:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80053c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80053c4:	680b      	ldr	r3, [r1, #0]
 80053c6:	f023 0301 	bic.w	r3, r3, #1
 80053ca:	600b      	str	r3, [r1, #0]
}
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80053ce:	2001      	movs	r0, #1
}
 80053d0:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053d2:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 80053d6:	4a2f      	ldr	r2, [pc, #188]	; (8005494 <HAL_DMA_Abort_IT+0x18c>)
 80053d8:	482f      	ldr	r0, [pc, #188]	; (8005498 <HAL_DMA_Abort_IT+0x190>)
 80053da:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 80053de:	4d2f      	ldr	r5, [pc, #188]	; (800549c <HAL_DMA_Abort_IT+0x194>)
 80053e0:	42a1      	cmp	r1, r4
 80053e2:	bf18      	it	ne
 80053e4:	4291      	cmpne	r1, r2
 80053e6:	f104 0450 	add.w	r4, r4, #80	; 0x50
 80053ea:	bf0c      	ite	eq
 80053ec:	2201      	moveq	r2, #1
 80053ee:	2200      	movne	r2, #0
 80053f0:	4281      	cmp	r1, r0
 80053f2:	bf08      	it	eq
 80053f4:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053f8:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053fa:	42a9      	cmp	r1, r5
 80053fc:	bf08      	it	eq
 80053fe:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005402:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005406:	3528      	adds	r5, #40	; 0x28
 8005408:	42a1      	cmp	r1, r4
 800540a:	bf08      	it	eq
 800540c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005410:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005412:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8005414:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005416:	42a9      	cmp	r1, r5
 8005418:	bf08      	it	eq
 800541a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800541e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005422:	42a1      	cmp	r1, r4
 8005424:	bf08      	it	eq
 8005426:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800542a:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800542c:	b912      	cbnz	r2, 8005434 <HAL_DMA_Abort_IT+0x12c>
 800542e:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <HAL_DMA_Abort_IT+0x198>)
 8005430:	4291      	cmp	r1, r2
 8005432:	d117      	bne.n	8005464 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005434:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005436:	2101      	movs	r1, #1
 8005438:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800543a:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800543c:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005440:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005446:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005448:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800544a:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800544c:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005450:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005452:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005454:	b132      	cbz	r2, 8005464 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005456:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005458:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800545a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800545c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005460:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005462:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8005464:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005466:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8005468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800546a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800546e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8005472:	b11a      	cbz	r2, 800547c <HAL_DMA_Abort_IT+0x174>
 8005474:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8005476:	4790      	blx	r2
  return HAL_OK;
 8005478:	4620      	mov	r0, r4
}
 800547a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800547c:	4610      	mov	r0, r2
}
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	40020010 	.word	0x40020010
 8005484:	40020040 	.word	0x40020040
 8005488:	40020070 	.word	0x40020070
 800548c:	400200a0 	.word	0x400200a0
 8005490:	400204b8 	.word	0x400204b8
 8005494:	5802541c 	.word	0x5802541c
 8005498:	58025430 	.word	0x58025430
 800549c:	58025444 	.word	0x58025444
 80054a0:	58025494 	.word	0x58025494

080054a4 <HAL_DMA_IRQHandler>:
{
 80054a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 80054a8:	49a4      	ldr	r1, [pc, #656]	; (800573c <HAL_DMA_IRQHandler+0x298>)
{
 80054aa:	b085      	sub	sp, #20
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054ac:	4ea4      	ldr	r6, [pc, #656]	; (8005740 <HAL_DMA_IRQHandler+0x29c>)
  __IO uint32_t count = 0U;
 80054ae:	2400      	movs	r4, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054b0:	6803      	ldr	r3, [r0, #0]
 80054b2:	4aa4      	ldr	r2, [pc, #656]	; (8005744 <HAL_DMA_IRQHandler+0x2a0>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054b4:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80054b8:	6809      	ldr	r1, [r1, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bf18      	it	ne
 80054be:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 80054c0:	9403      	str	r4, [sp, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054c2:	9101      	str	r1, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054c4:	bf08      	it	eq
 80054c6:	2601      	moveq	r6, #1
  tmpisr_dma  = regs_dma->ISR;
 80054c8:	f8d8 5000 	ldr.w	r5, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054cc:	bf18      	it	ne
 80054ce:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 80054d0:	f8d8 1000 	ldr.w	r1, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054d4:	d046      	beq.n	8005564 <HAL_DMA_IRQHandler+0xc0>
 80054d6:	3218      	adds	r2, #24
 80054d8:	4f9b      	ldr	r7, [pc, #620]	; (8005748 <HAL_DMA_IRQHandler+0x2a4>)
 80054da:	4c9c      	ldr	r4, [pc, #624]	; (800574c <HAL_DMA_IRQHandler+0x2a8>)
 80054dc:	42bb      	cmp	r3, r7
 80054de:	bf18      	it	ne
 80054e0:	4293      	cmpne	r3, r2
 80054e2:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80054e6:	bf0c      	ite	eq
 80054e8:	2201      	moveq	r2, #1
 80054ea:	2200      	movne	r2, #0
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	bf08      	it	eq
 80054f0:	f042 0201 	orreq.w	r2, r2, #1
 80054f4:	3430      	adds	r4, #48	; 0x30
 80054f6:	42bb      	cmp	r3, r7
 80054f8:	bf08      	it	eq
 80054fa:	f042 0201 	orreq.w	r2, r2, #1
 80054fe:	3730      	adds	r7, #48	; 0x30
 8005500:	42a3      	cmp	r3, r4
 8005502:	bf08      	it	eq
 8005504:	f042 0201 	orreq.w	r2, r2, #1
 8005508:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800550c:	42bb      	cmp	r3, r7
 800550e:	bf08      	it	eq
 8005510:	f042 0201 	orreq.w	r2, r2, #1
 8005514:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005518:	42a3      	cmp	r3, r4
 800551a:	bf08      	it	eq
 800551c:	f042 0201 	orreq.w	r2, r2, #1
 8005520:	3430      	adds	r4, #48	; 0x30
 8005522:	42bb      	cmp	r3, r7
 8005524:	bf08      	it	eq
 8005526:	f042 0201 	orreq.w	r2, r2, #1
 800552a:	3730      	adds	r7, #48	; 0x30
 800552c:	42a3      	cmp	r3, r4
 800552e:	bf08      	it	eq
 8005530:	f042 0201 	orreq.w	r2, r2, #1
 8005534:	3430      	adds	r4, #48	; 0x30
 8005536:	42bb      	cmp	r3, r7
 8005538:	bf08      	it	eq
 800553a:	f042 0201 	orreq.w	r2, r2, #1
 800553e:	3730      	adds	r7, #48	; 0x30
 8005540:	42a3      	cmp	r3, r4
 8005542:	bf08      	it	eq
 8005544:	f042 0201 	orreq.w	r2, r2, #1
 8005548:	3430      	adds	r4, #48	; 0x30
 800554a:	42bb      	cmp	r3, r7
 800554c:	bf08      	it	eq
 800554e:	f042 0201 	orreq.w	r2, r2, #1
 8005552:	42a3      	cmp	r3, r4
 8005554:	bf08      	it	eq
 8005556:	f042 0201 	orreq.w	r2, r2, #1
 800555a:	b91a      	cbnz	r2, 8005564 <HAL_DMA_IRQHandler+0xc0>
 800555c:	4a7c      	ldr	r2, [pc, #496]	; (8005750 <HAL_DMA_IRQHandler+0x2ac>)
 800555e:	4293      	cmp	r3, r2
 8005560:	f040 81ef 	bne.w	8005942 <HAL_DMA_IRQHandler+0x49e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005564:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8005566:	2208      	movs	r2, #8
 8005568:	f001 071f 	and.w	r7, r1, #31
 800556c:	40ba      	lsls	r2, r7
 800556e:	422a      	tst	r2, r5
 8005570:	f040 81d8 	bne.w	8005924 <HAL_DMA_IRQHandler+0x480>
 8005574:	4604      	mov	r4, r0
 8005576:	f04f 0c04 	mov.w	ip, #4
 800557a:	2010      	movs	r0, #16
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800557c:	fa25 f207 	lsr.w	r2, r5, r7
 8005580:	fa0c fc07 	lsl.w	ip, ip, r7
 8005584:	40b8      	lsls	r0, r7
 8005586:	07d2      	lsls	r2, r2, #31
 8005588:	ea05 090c 	and.w	r9, r5, ip
 800558c:	ea05 0e00 	and.w	lr, r5, r0
 8005590:	d560      	bpl.n	8005654 <HAL_DMA_IRQHandler+0x1b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005592:	4a70      	ldr	r2, [pc, #448]	; (8005754 <HAL_DMA_IRQHandler+0x2b0>)
 8005594:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8005748 <HAL_DMA_IRQHandler+0x2a4>
 8005598:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800574c <HAL_DMA_IRQHandler+0x2a8>
 800559c:	4293      	cmp	r3, r2
 800559e:	bf18      	it	ne
 80055a0:	455b      	cmpne	r3, fp
 80055a2:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80055a6:	bf0c      	ite	eq
 80055a8:	2201      	moveq	r2, #1
 80055aa:	2200      	movne	r2, #0
 80055ac:	4553      	cmp	r3, sl
 80055ae:	bf08      	it	eq
 80055b0:	f042 0201 	orreq.w	r2, r2, #1
 80055b4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80055b8:	455b      	cmp	r3, fp
 80055ba:	bf08      	it	eq
 80055bc:	f042 0201 	orreq.w	r2, r2, #1
 80055c0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80055c4:	4553      	cmp	r3, sl
 80055c6:	bf08      	it	eq
 80055c8:	f042 0201 	orreq.w	r2, r2, #1
 80055cc:	f50a 7a5c 	add.w	sl, sl, #880	; 0x370
 80055d0:	455b      	cmp	r3, fp
 80055d2:	bf08      	it	eq
 80055d4:	f042 0201 	orreq.w	r2, r2, #1
 80055d8:	f50b 7b5c 	add.w	fp, fp, #880	; 0x370
 80055dc:	4553      	cmp	r3, sl
 80055de:	bf08      	it	eq
 80055e0:	f042 0201 	orreq.w	r2, r2, #1
 80055e4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80055e8:	455b      	cmp	r3, fp
 80055ea:	bf08      	it	eq
 80055ec:	f042 0201 	orreq.w	r2, r2, #1
 80055f0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80055f4:	4553      	cmp	r3, sl
 80055f6:	bf08      	it	eq
 80055f8:	f042 0201 	orreq.w	r2, r2, #1
 80055fc:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8005600:	455b      	cmp	r3, fp
 8005602:	bf08      	it	eq
 8005604:	f042 0201 	orreq.w	r2, r2, #1
 8005608:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800560c:	4553      	cmp	r3, sl
 800560e:	bf08      	it	eq
 8005610:	f042 0201 	orreq.w	r2, r2, #1
 8005614:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8005618:	455b      	cmp	r3, fp
 800561a:	bf08      	it	eq
 800561c:	f042 0201 	orreq.w	r2, r2, #1
 8005620:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005624:	4553      	cmp	r3, sl
 8005626:	bf08      	it	eq
 8005628:	f042 0201 	orreq.w	r2, r2, #1
 800562c:	455b      	cmp	r3, fp
 800562e:	bf08      	it	eq
 8005630:	f042 0201 	orreq.w	r2, r2, #1
 8005634:	b912      	cbnz	r2, 800563c <HAL_DMA_IRQHandler+0x198>
 8005636:	2e00      	cmp	r6, #0
 8005638:	f000 8245 	beq.w	8005ac6 <HAL_DMA_IRQHandler+0x622>
 800563c:	695a      	ldr	r2, [r3, #20]
 800563e:	0612      	lsls	r2, r2, #24
 8005640:	d508      	bpl.n	8005654 <HAL_DMA_IRQHandler+0x1b0>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005642:	2201      	movs	r2, #1
 8005644:	fa02 f707 	lsl.w	r7, r2, r7
 8005648:	f8c8 7008 	str.w	r7, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800564c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800564e:	f042 0202 	orr.w	r2, r2, #2
 8005652:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005654:	f1b9 0f00 	cmp.w	r9, #0
 8005658:	d055      	beq.n	8005706 <HAL_DMA_IRQHandler+0x262>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800565a:	2e00      	cmp	r6, #0
 800565c:	d14a      	bne.n	80056f4 <HAL_DMA_IRQHandler+0x250>
 800565e:	4a3d      	ldr	r2, [pc, #244]	; (8005754 <HAL_DMA_IRQHandler+0x2b0>)
 8005660:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8005748 <HAL_DMA_IRQHandler+0x2a4>
 8005664:	4f39      	ldr	r7, [pc, #228]	; (800574c <HAL_DMA_IRQHandler+0x2a8>)
 8005666:	454b      	cmp	r3, r9
 8005668:	bf18      	it	ne
 800566a:	4293      	cmpne	r3, r2
 800566c:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8005670:	bf0c      	ite	eq
 8005672:	2201      	moveq	r2, #1
 8005674:	2200      	movne	r2, #0
 8005676:	42bb      	cmp	r3, r7
 8005678:	bf08      	it	eq
 800567a:	f042 0201 	orreq.w	r2, r2, #1
 800567e:	3730      	adds	r7, #48	; 0x30
 8005680:	454b      	cmp	r3, r9
 8005682:	bf08      	it	eq
 8005684:	f042 0201 	orreq.w	r2, r2, #1
 8005688:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800568c:	42bb      	cmp	r3, r7
 800568e:	bf08      	it	eq
 8005690:	f042 0201 	orreq.w	r2, r2, #1
 8005694:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005698:	454b      	cmp	r3, r9
 800569a:	bf08      	it	eq
 800569c:	f042 0201 	orreq.w	r2, r2, #1
 80056a0:	f509 795c 	add.w	r9, r9, #880	; 0x370
 80056a4:	42bb      	cmp	r3, r7
 80056a6:	bf08      	it	eq
 80056a8:	f042 0201 	orreq.w	r2, r2, #1
 80056ac:	3730      	adds	r7, #48	; 0x30
 80056ae:	454b      	cmp	r3, r9
 80056b0:	bf08      	it	eq
 80056b2:	f042 0201 	orreq.w	r2, r2, #1
 80056b6:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80056ba:	42bb      	cmp	r3, r7
 80056bc:	bf08      	it	eq
 80056be:	f042 0201 	orreq.w	r2, r2, #1
 80056c2:	3730      	adds	r7, #48	; 0x30
 80056c4:	454b      	cmp	r3, r9
 80056c6:	bf08      	it	eq
 80056c8:	f042 0201 	orreq.w	r2, r2, #1
 80056cc:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80056d0:	42bb      	cmp	r3, r7
 80056d2:	bf08      	it	eq
 80056d4:	f042 0201 	orreq.w	r2, r2, #1
 80056d8:	3730      	adds	r7, #48	; 0x30
 80056da:	454b      	cmp	r3, r9
 80056dc:	bf08      	it	eq
 80056de:	f042 0201 	orreq.w	r2, r2, #1
 80056e2:	42bb      	cmp	r3, r7
 80056e4:	bf08      	it	eq
 80056e6:	f042 0201 	orreq.w	r2, r2, #1
 80056ea:	b91a      	cbnz	r2, 80056f4 <HAL_DMA_IRQHandler+0x250>
 80056ec:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_DMA_IRQHandler+0x2ac>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	f040 81b4 	bne.w	8005a5c <HAL_DMA_IRQHandler+0x5b8>
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	0792      	lsls	r2, r2, #30
 80056f8:	d505      	bpl.n	8005706 <HAL_DMA_IRQHandler+0x262>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056fa:	f8c8 c008 	str.w	ip, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005700:	f042 0204 	orr.w	r2, r2, #4
 8005704:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005706:	f1be 0f00 	cmp.w	lr, #0
 800570a:	d06d      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x344>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800570c:	2e00      	cmp	r6, #0
 800570e:	d155      	bne.n	80057bc <HAL_DMA_IRQHandler+0x318>
 8005710:	4a10      	ldr	r2, [pc, #64]	; (8005754 <HAL_DMA_IRQHandler+0x2b0>)
 8005712:	4f0d      	ldr	r7, [pc, #52]	; (8005748 <HAL_DMA_IRQHandler+0x2a4>)
 8005714:	4e0d      	ldr	r6, [pc, #52]	; (800574c <HAL_DMA_IRQHandler+0x2a8>)
 8005716:	42bb      	cmp	r3, r7
 8005718:	bf18      	it	ne
 800571a:	4293      	cmpne	r3, r2
 800571c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8005720:	bf0c      	ite	eq
 8005722:	2201      	moveq	r2, #1
 8005724:	2200      	movne	r2, #0
 8005726:	42b3      	cmp	r3, r6
 8005728:	bf08      	it	eq
 800572a:	f042 0201 	orreq.w	r2, r2, #1
 800572e:	3630      	adds	r6, #48	; 0x30
 8005730:	42bb      	cmp	r3, r7
 8005732:	bf08      	it	eq
 8005734:	f042 0201 	orreq.w	r2, r2, #1
 8005738:	3730      	adds	r7, #48	; 0x30
 800573a:	e00d      	b.n	8005758 <HAL_DMA_IRQHandler+0x2b4>
 800573c:	240001f4 	.word	0x240001f4
 8005740:	40020010 	.word	0x40020010
 8005744:	40020028 	.word	0x40020028
 8005748:	40020058 	.word	0x40020058
 800574c:	40020070 	.word	0x40020070
 8005750:	400204b8 	.word	0x400204b8
 8005754:	40020040 	.word	0x40020040
 8005758:	42b3      	cmp	r3, r6
 800575a:	bf08      	it	eq
 800575c:	f042 0201 	orreq.w	r2, r2, #1
 8005760:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8005764:	42bb      	cmp	r3, r7
 8005766:	bf08      	it	eq
 8005768:	f042 0201 	orreq.w	r2, r2, #1
 800576c:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005770:	42b3      	cmp	r3, r6
 8005772:	bf08      	it	eq
 8005774:	f042 0201 	orreq.w	r2, r2, #1
 8005778:	3630      	adds	r6, #48	; 0x30
 800577a:	42bb      	cmp	r3, r7
 800577c:	bf08      	it	eq
 800577e:	f042 0201 	orreq.w	r2, r2, #1
 8005782:	3730      	adds	r7, #48	; 0x30
 8005784:	42b3      	cmp	r3, r6
 8005786:	bf08      	it	eq
 8005788:	f042 0201 	orreq.w	r2, r2, #1
 800578c:	3630      	adds	r6, #48	; 0x30
 800578e:	42bb      	cmp	r3, r7
 8005790:	bf08      	it	eq
 8005792:	f042 0201 	orreq.w	r2, r2, #1
 8005796:	3730      	adds	r7, #48	; 0x30
 8005798:	42b3      	cmp	r3, r6
 800579a:	bf08      	it	eq
 800579c:	f042 0201 	orreq.w	r2, r2, #1
 80057a0:	3630      	adds	r6, #48	; 0x30
 80057a2:	42bb      	cmp	r3, r7
 80057a4:	bf08      	it	eq
 80057a6:	f042 0201 	orreq.w	r2, r2, #1
 80057aa:	42b3      	cmp	r3, r6
 80057ac:	bf08      	it	eq
 80057ae:	f042 0201 	orreq.w	r2, r2, #1
 80057b2:	b91a      	cbnz	r2, 80057bc <HAL_DMA_IRQHandler+0x318>
 80057b4:	4aa0      	ldr	r2, [pc, #640]	; (8005a38 <HAL_DMA_IRQHandler+0x594>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f040 813a 	bne.w	8005a30 <HAL_DMA_IRQHandler+0x58c>
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80057c2:	b18a      	cbz	r2, 80057e8 <HAL_DMA_IRQHandler+0x344>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057c4:	f8c8 0008 	str.w	r0, [r8, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	0357      	lsls	r7, r2, #13
 80057cc:	f100 80f7 	bmi.w	80059be <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	05d0      	lsls	r0, r2, #23
 80057d4:	d403      	bmi.n	80057de <HAL_DMA_IRQHandler+0x33a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	f022 0208 	bic.w	r2, r2, #8
 80057dc:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80057de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057e0:	b113      	cbz	r3, 80057e8 <HAL_DMA_IRQHandler+0x344>
            hdma->XferHalfCpltCallback(hdma);
 80057e2:	4620      	mov	r0, r4
 80057e4:	4798      	blx	r3
 80057e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057e8:	f001 011f 	and.w	r1, r1, #31
 80057ec:	2220      	movs	r2, #32
 80057ee:	408a      	lsls	r2, r1
 80057f0:	422a      	tst	r2, r5
 80057f2:	d069      	beq.n	80058c8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	4b91      	ldr	r3, [pc, #580]	; (8005a3c <HAL_DMA_IRQHandler+0x598>)
 80057f8:	4e91      	ldr	r6, [pc, #580]	; (8005a40 <HAL_DMA_IRQHandler+0x59c>)
 80057fa:	4d92      	ldr	r5, [pc, #584]	; (8005a44 <HAL_DMA_IRQHandler+0x5a0>)
 80057fc:	42b0      	cmp	r0, r6
 80057fe:	bf18      	it	ne
 8005800:	4298      	cmpne	r0, r3
 8005802:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	42a8      	cmp	r0, r5
 800580e:	bf08      	it	eq
 8005810:	f043 0301 	orreq.w	r3, r3, #1
 8005814:	3530      	adds	r5, #48	; 0x30
 8005816:	42b0      	cmp	r0, r6
 8005818:	bf08      	it	eq
 800581a:	f043 0301 	orreq.w	r3, r3, #1
 800581e:	3630      	adds	r6, #48	; 0x30
 8005820:	42a8      	cmp	r0, r5
 8005822:	bf08      	it	eq
 8005824:	f043 0301 	orreq.w	r3, r3, #1
 8005828:	3530      	adds	r5, #48	; 0x30
 800582a:	42b0      	cmp	r0, r6
 800582c:	bf08      	it	eq
 800582e:	f043 0301 	orreq.w	r3, r3, #1
 8005832:	3630      	adds	r6, #48	; 0x30
 8005834:	42a8      	cmp	r0, r5
 8005836:	bf08      	it	eq
 8005838:	f043 0301 	orreq.w	r3, r3, #1
 800583c:	f505 755c 	add.w	r5, r5, #880	; 0x370
 8005840:	42b0      	cmp	r0, r6
 8005842:	bf08      	it	eq
 8005844:	f043 0301 	orreq.w	r3, r3, #1
 8005848:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800584c:	42a8      	cmp	r0, r5
 800584e:	bf08      	it	eq
 8005850:	f043 0301 	orreq.w	r3, r3, #1
 8005854:	3530      	adds	r5, #48	; 0x30
 8005856:	42b0      	cmp	r0, r6
 8005858:	bf08      	it	eq
 800585a:	f043 0301 	orreq.w	r3, r3, #1
 800585e:	3630      	adds	r6, #48	; 0x30
 8005860:	42a8      	cmp	r0, r5
 8005862:	bf08      	it	eq
 8005864:	f043 0301 	orreq.w	r3, r3, #1
 8005868:	3530      	adds	r5, #48	; 0x30
 800586a:	42b0      	cmp	r0, r6
 800586c:	bf08      	it	eq
 800586e:	f043 0301 	orreq.w	r3, r3, #1
 8005872:	3630      	adds	r6, #48	; 0x30
 8005874:	42a8      	cmp	r0, r5
 8005876:	bf08      	it	eq
 8005878:	f043 0301 	orreq.w	r3, r3, #1
 800587c:	3530      	adds	r5, #48	; 0x30
 800587e:	42b0      	cmp	r0, r6
 8005880:	bf08      	it	eq
 8005882:	f043 0301 	orreq.w	r3, r3, #1
 8005886:	42a8      	cmp	r0, r5
 8005888:	bf08      	it	eq
 800588a:	f043 0301 	orreq.w	r3, r3, #1
 800588e:	b91b      	cbnz	r3, 8005898 <HAL_DMA_IRQHandler+0x3f4>
 8005890:	4b69      	ldr	r3, [pc, #420]	; (8005a38 <HAL_DMA_IRQHandler+0x594>)
 8005892:	4298      	cmp	r0, r3
 8005894:	f040 8121 	bne.w	8005ada <HAL_DMA_IRQHandler+0x636>
 8005898:	6803      	ldr	r3, [r0, #0]
 800589a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800589e:	b19b      	cbz	r3, 80058c8 <HAL_DMA_IRQHandler+0x424>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058a0:	f8c8 2008 	str.w	r2, [r8, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80058a4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80058a8:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058aa:	6803      	ldr	r3, [r0, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80058ac:	f000 8090 	beq.w	80059d0 <HAL_DMA_IRQHandler+0x52c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058b0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058b4:	6803      	ldr	r3, [r0, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058b6:	f000 80a8 	beq.w	8005a0a <HAL_DMA_IRQHandler+0x566>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058ba:	0319      	lsls	r1, r3, #12
 80058bc:	f140 80b3 	bpl.w	8005a26 <HAL_DMA_IRQHandler+0x582>
          if(hdma->XferCpltCallback != NULL)
 80058c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058c2:	b10b      	cbz	r3, 80058c8 <HAL_DMA_IRQHandler+0x424>
            hdma->XferCpltCallback(hdma);
 80058c4:	4620      	mov	r0, r4
 80058c6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d074      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x514>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80058ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058d0:	07da      	lsls	r2, r3, #31
 80058d2:	d51f      	bpl.n	8005914 <HAL_DMA_IRQHandler+0x470>
        __HAL_DMA_DISABLE(hdma);
 80058d4:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80058d6:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 80058d8:	495b      	ldr	r1, [pc, #364]	; (8005a48 <HAL_DMA_IRQHandler+0x5a4>)
        hdma->State = HAL_DMA_STATE_ABORT;
 80058da:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80058de:	6813      	ldr	r3, [r2, #0]
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058e6:	9b01      	ldr	r3, [sp, #4]
 80058e8:	fba1 3103 	umull	r3, r1, r1, r3
 80058ec:	0a89      	lsrs	r1, r1, #10
 80058ee:	e002      	b.n	80058f6 <HAL_DMA_IRQHandler+0x452>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80058f0:	6813      	ldr	r3, [r2, #0]
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d504      	bpl.n	8005900 <HAL_DMA_IRQHandler+0x45c>
          if (++count > timeout)
 80058f6:	9b03      	ldr	r3, [sp, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	428b      	cmp	r3, r1
 80058fc:	9303      	str	r3, [sp, #12]
 80058fe:	d9f7      	bls.n	80058f0 <HAL_DMA_IRQHandler+0x44c>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005900:	6813      	ldr	r3, [r2, #0]
        __HAL_UNLOCK(hdma);
 8005902:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005904:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 8005906:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 800590a:	bf4c      	ite	mi
 800590c:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800590e:	2301      	movpl	r3, #1
 8005910:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8005914:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d04e      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x514>
        hdma->XferErrorCallback(hdma);
 800591a:	4620      	mov	r0, r4
}
 800591c:	b005      	add	sp, #20
 800591e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        hdma->XferErrorCallback(hdma);
 8005922:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005924:	681c      	ldr	r4, [r3, #0]
 8005926:	0764      	lsls	r4, r4, #29
 8005928:	f57f ae24 	bpl.w	8005574 <HAL_DMA_IRQHandler+0xd0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800592c:	681c      	ldr	r4, [r3, #0]
 800592e:	f024 0404 	bic.w	r4, r4, #4
 8005932:	601c      	str	r4, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005934:	f8c8 2008 	str.w	r2, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005938:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	6542      	str	r2, [r0, #84]	; 0x54
 8005940:	e618      	b.n	8005574 <HAL_DMA_IRQHandler+0xd0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005942:	4a42      	ldr	r2, [pc, #264]	; (8005a4c <HAL_DMA_IRQHandler+0x5a8>)
 8005944:	4d42      	ldr	r5, [pc, #264]	; (8005a50 <HAL_DMA_IRQHandler+0x5ac>)
 8005946:	4c43      	ldr	r4, [pc, #268]	; (8005a54 <HAL_DMA_IRQHandler+0x5b0>)
 8005948:	42ab      	cmp	r3, r5
 800594a:	bf18      	it	ne
 800594c:	4293      	cmpne	r3, r2
 800594e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8005952:	bf0c      	ite	eq
 8005954:	2201      	moveq	r2, #1
 8005956:	2200      	movne	r2, #0
 8005958:	42a3      	cmp	r3, r4
 800595a:	bf08      	it	eq
 800595c:	f042 0201 	orreq.w	r2, r2, #1
 8005960:	3428      	adds	r4, #40	; 0x28
 8005962:	42ab      	cmp	r3, r5
 8005964:	bf08      	it	eq
 8005966:	f042 0201 	orreq.w	r2, r2, #1
 800596a:	3528      	adds	r5, #40	; 0x28
 800596c:	42a3      	cmp	r3, r4
 800596e:	bf08      	it	eq
 8005970:	f042 0201 	orreq.w	r2, r2, #1
 8005974:	3428      	adds	r4, #40	; 0x28
 8005976:	42ab      	cmp	r3, r5
 8005978:	bf08      	it	eq
 800597a:	f042 0201 	orreq.w	r2, r2, #1
 800597e:	42a3      	cmp	r3, r4
 8005980:	bf08      	it	eq
 8005982:	f042 0201 	orreq.w	r2, r2, #1
 8005986:	b912      	cbnz	r2, 800598e <HAL_DMA_IRQHandler+0x4ea>
 8005988:	4a33      	ldr	r2, [pc, #204]	; (8005a58 <HAL_DMA_IRQHandler+0x5b4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d114      	bne.n	80059b8 <HAL_DMA_IRQHandler+0x514>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800598e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8005990:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005992:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005994:	f004 041f 	and.w	r4, r4, #31
 8005998:	40a5      	lsls	r5, r4
 800599a:	420d      	tst	r5, r1
 800599c:	d068      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x5cc>
 800599e:	0756      	lsls	r6, r2, #29
 80059a0:	d566      	bpl.n	8005a70 <HAL_DMA_IRQHandler+0x5cc>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059a2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80059a4:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059a8:	f140 80ac 	bpl.w	8005b04 <HAL_DMA_IRQHandler+0x660>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059ac:	03d3      	lsls	r3, r2, #15
 80059ae:	f100 80af 	bmi.w	8005b10 <HAL_DMA_IRQHandler+0x66c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059b2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1b1      	bne.n	800591c <HAL_DMA_IRQHandler+0x478>
}
 80059b8:	b005      	add	sp, #20
 80059ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	031e      	lsls	r6, r3, #12
 80059c2:	f57f af0c 	bpl.w	80057de <HAL_DMA_IRQHandler+0x33a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80059c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f47f af0a 	bne.w	80057e2 <HAL_DMA_IRQHandler+0x33e>
 80059ce:	e70b      	b.n	80057e8 <HAL_DMA_IRQHandler+0x344>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059d0:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059d6:	6003      	str	r3, [r0, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059d8:	6943      	ldr	r3, [r0, #20]
 80059da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059de:	6143      	str	r3, [r0, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059e0:	2a00      	cmp	r2, #0
 80059e2:	d041      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x5c4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059e4:	6803      	ldr	r3, [r0, #0]
 80059e6:	f023 0308 	bic.w	r3, r3, #8
 80059ea:	6003      	str	r3, [r0, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059ec:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 80059ee:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 80059f0:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059f2:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 80059f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059f8:	f8c8 1008 	str.w	r1, [r8, #8]
          __HAL_UNLOCK(hdma);
 80059fc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005a00:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d188      	bne.n	800591a <HAL_DMA_IRQHandler+0x476>
 8005a08:	e7d6      	b.n	80059b8 <HAL_DMA_IRQHandler+0x514>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a0a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005a0e:	f47f af57 	bne.w	80058c0 <HAL_DMA_IRQHandler+0x41c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a12:	6802      	ldr	r2, [r0, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005a14:	2101      	movs	r1, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a16:	f022 0210 	bic.w	r2, r2, #16
 8005a1a:	6002      	str	r2, [r0, #0]
            __HAL_UNLOCK(hdma);
 8005a1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005a20:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8005a24:	e74c      	b.n	80058c0 <HAL_DMA_IRQHandler+0x41c>
            if(hdma->XferM1CpltCallback != NULL)
 8005a26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f af4b 	bne.w	80058c4 <HAL_DMA_IRQHandler+0x420>
 8005a2e:	e74b      	b.n	80058c8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8005a36:	e6c4      	b.n	80057c2 <HAL_DMA_IRQHandler+0x31e>
 8005a38:	400204b8 	.word	0x400204b8
 8005a3c:	40020010 	.word	0x40020010
 8005a40:	40020028 	.word	0x40020028
 8005a44:	40020040 	.word	0x40020040
 8005a48:	1b4e81b5 	.word	0x1b4e81b5
 8005a4c:	58025408 	.word	0x58025408
 8005a50:	5802541c 	.word	0x5802541c
 8005a54:	58025430 	.word	0x58025430
 8005a58:	58025494 	.word	0x58025494
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a5c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a5e:	f1be 0f00 	cmp.w	lr, #0
 8005a62:	f43f aec1 	beq.w	80057e8 <HAL_DMA_IRQHandler+0x344>
 8005a66:	e653      	b.n	8005710 <HAL_DMA_IRQHandler+0x26c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1ba      	bne.n	80059e4 <HAL_DMA_IRQHandler+0x540>
 8005a6e:	e7bd      	b.n	80059ec <HAL_DMA_IRQHandler+0x548>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a70:	2502      	movs	r5, #2
 8005a72:	40a5      	lsls	r5, r4
 8005a74:	420d      	tst	r5, r1
 8005a76:	d00c      	beq.n	8005a92 <HAL_DMA_IRQHandler+0x5ee>
 8005a78:	0796      	lsls	r6, r2, #30
 8005a7a:	d50a      	bpl.n	8005a92 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a7c:	0414      	lsls	r4, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a7e:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a82:	d52e      	bpl.n	8005ae2 <HAL_DMA_IRQHandler+0x63e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a84:	03d1      	lsls	r1, r2, #15
 8005a86:	d438      	bmi.n	8005afa <HAL_DMA_IRQHandler+0x656>
          if(hdma->XferM1CpltCallback != NULL)
 8005a88:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f47f af46 	bne.w	800591c <HAL_DMA_IRQHandler+0x478>
 8005a90:	e792      	b.n	80059b8 <HAL_DMA_IRQHandler+0x514>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005a92:	2508      	movs	r5, #8
 8005a94:	40a5      	lsls	r5, r4
 8005a96:	420d      	tst	r5, r1
 8005a98:	d08e      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x514>
 8005a9a:	0712      	lsls	r2, r2, #28
 8005a9c:	d58c      	bpl.n	80059b8 <HAL_DMA_IRQHandler+0x514>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a9e:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005aa0:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8005aa2:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aa4:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005aa8:	fa02 f404 	lsl.w	r4, r2, r4
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aac:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8005aae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ab0:	f8c8 4004 	str.w	r4, [r8, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ab4:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8005ab6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005aba:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f47f af2c 	bne.w	800591c <HAL_DMA_IRQHandler+0x478>
 8005ac4:	e778      	b.n	80059b8 <HAL_DMA_IRQHandler+0x514>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005ac6:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ac8:	f1b9 0f00 	cmp.w	r9, #0
 8005acc:	f47f adc7 	bne.w	800565e <HAL_DMA_IRQHandler+0x1ba>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ad0:	f1be 0f00 	cmp.w	lr, #0
 8005ad4:	f43f ae88 	beq.w	80057e8 <HAL_DMA_IRQHandler+0x344>
 8005ad8:	e618      	b.n	800570c <HAL_DMA_IRQHandler+0x268>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ada:	6803      	ldr	r3, [r0, #0]
 8005adc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ae0:	e6dd      	b.n	800589e <HAL_DMA_IRQHandler+0x3fa>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ae2:	f012 0220 	ands.w	r2, r2, #32
 8005ae6:	d108      	bne.n	8005afa <HAL_DMA_IRQHandler+0x656>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ae8:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005aea:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005aec:	f021 010a 	bic.w	r1, r1, #10
 8005af0:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005af2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005af6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005afa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f47f af0d 	bne.w	800591c <HAL_DMA_IRQHandler+0x478>
 8005b02:	e759      	b.n	80059b8 <HAL_DMA_IRQHandler+0x514>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b04:	0697      	lsls	r7, r2, #26
 8005b06:	d403      	bmi.n	8005b10 <HAL_DMA_IRQHandler+0x66c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	f022 0204 	bic.w	r2, r2, #4
 8005b0e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005b10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f47f af02 	bne.w	800591c <HAL_DMA_IRQHandler+0x478>
 8005b18:	e74e      	b.n	80059b8 <HAL_DMA_IRQHandler+0x514>
 8005b1a:	bf00      	nop

08005b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b22:	6809      	ldr	r1, [r1, #0]
{
 8005b24:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b26:	2900      	cmp	r1, #0
 8005b28:	f000 80cd 	beq.w	8005cc6 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 8005b2c:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b2e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8005d44 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b32:	2301      	movs	r3, #1
 8005b34:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 8005b36:	ea13 0501 	ands.w	r5, r3, r1
 8005b3a:	f000 80bf 	beq.w	8005cbc <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b3e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005b42:	0077      	lsls	r7, r6, #1
 8005b44:	f04f 0c03 	mov.w	ip, #3
 8005b48:	f022 0910 	bic.w	r9, r2, #16
 8005b4c:	fa0c fc07 	lsl.w	ip, ip, r7
 8005b50:	f109 34ff 	add.w	r4, r9, #4294967295
 8005b54:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b58:	2c01      	cmp	r4, #1
 8005b5a:	d812      	bhi.n	8005b82 <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8005b5c:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b5e:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b62:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b66:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b6a:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b6e:	40bc      	lsls	r4, r7
 8005b70:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 8005b74:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005b76:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b78:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b7c:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 8005b80:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8005b82:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b84:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b88:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b8c:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b90:	fa04 f407 	lsl.w	r4, r4, r7
 8005b94:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 8005b98:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b9a:	d115      	bne.n	8005bc8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 8005b9c:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b9e:	f006 0907 	and.w	r9, r6, #7
 8005ba2:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ba6:	f8de 4010 	ldr.w	r4, [lr, #16]
 8005baa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bae:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005bb2:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bb6:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bba:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bbe:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bc2:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005bc6:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 8005bc8:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bca:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bce:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bd2:	40bb      	lsls	r3, r7
 8005bd4:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 8005bd8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bda:	00d3      	lsls	r3, r2, #3
 8005bdc:	d56e      	bpl.n	8005cbc <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bde:	4b53      	ldr	r3, [pc, #332]	; (8005d2c <HAL_GPIO_Init+0x210>)
 8005be0:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005be4:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005be6:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bea:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bee:	f047 0c02 	orr.w	ip, r7, #2
 8005bf2:	4f4f      	ldr	r7, [pc, #316]	; (8005d30 <HAL_GPIO_Init+0x214>)
 8005bf4:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bf6:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	; (8005d2c <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bfc:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c00:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 8005c04:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c08:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0c:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c10:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c12:	f8cd c004 	str.w	ip, [sp, #4]
 8005c16:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005c1a:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c1e:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c22:	d026      	beq.n	8005c72 <HAL_GPIO_Init+0x156>
 8005c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c28:	4298      	cmp	r0, r3
 8005c2a:	d055      	beq.n	8005cd8 <HAL_GPIO_Init+0x1bc>
 8005c2c:	4b41      	ldr	r3, [pc, #260]	; (8005d34 <HAL_GPIO_Init+0x218>)
 8005c2e:	4298      	cmp	r0, r3
 8005c30:	d04c      	beq.n	8005ccc <HAL_GPIO_Init+0x1b0>
 8005c32:	4b41      	ldr	r3, [pc, #260]	; (8005d38 <HAL_GPIO_Init+0x21c>)
 8005c34:	4298      	cmp	r0, r3
 8005c36:	d05b      	beq.n	8005cf0 <HAL_GPIO_Init+0x1d4>
 8005c38:	4b40      	ldr	r3, [pc, #256]	; (8005d3c <HAL_GPIO_Init+0x220>)
 8005c3a:	4298      	cmp	r0, r3
 8005c3c:	d05e      	beq.n	8005cfc <HAL_GPIO_Init+0x1e0>
 8005c3e:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <HAL_GPIO_Init+0x224>)
 8005c40:	4298      	cmp	r0, r3
 8005c42:	d04f      	beq.n	8005ce4 <HAL_GPIO_Init+0x1c8>
 8005c44:	f8df c100 	ldr.w	ip, [pc, #256]	; 8005d48 <HAL_GPIO_Init+0x22c>
 8005c48:	4560      	cmp	r0, ip
 8005c4a:	d05d      	beq.n	8005d08 <HAL_GPIO_Init+0x1ec>
 8005c4c:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8005d4c <HAL_GPIO_Init+0x230>
 8005c50:	4560      	cmp	r0, ip
 8005c52:	d05f      	beq.n	8005d14 <HAL_GPIO_Init+0x1f8>
 8005c54:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8005d50 <HAL_GPIO_Init+0x234>
 8005c58:	4560      	cmp	r0, ip
 8005c5a:	d061      	beq.n	8005d20 <HAL_GPIO_Init+0x204>
 8005c5c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8005d54 <HAL_GPIO_Init+0x238>
 8005c60:	4560      	cmp	r0, ip
 8005c62:	bf0c      	ite	eq
 8005c64:	f04f 0c09 	moveq.w	ip, #9
 8005c68:	f04f 0c0a 	movne.w	ip, #10
 8005c6c:	fa0c f309 	lsl.w	r3, ip, r9
 8005c70:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c72:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 8005c74:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 8005c76:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c7a:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 8005c7c:	bf4c      	ite	mi
 8005c7e:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005c80:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c82:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c84:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 8005c88:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 8005c8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 8005c90:	bf4c      	ite	mi
 8005c92:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005c94:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 8005c96:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 8005c9a:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c9c:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005c9e:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 8005ca2:	bf4c      	ite	mi
 8005ca4:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005ca6:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ca8:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8005caa:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 8005cac:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 8005cae:	bf54      	ite	pl
 8005cb0:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 8005cb4:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 8005cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cba:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 8005cbc:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cbe:	fa31 f306 	lsrs.w	r3, r1, r6
 8005cc2:	f47f af36 	bne.w	8005b32 <HAL_GPIO_Init+0x16>
  }
}
 8005cc6:	b003      	add	sp, #12
 8005cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ccc:	f04f 0c02 	mov.w	ip, #2
 8005cd0:	fa0c f309 	lsl.w	r3, ip, r9
 8005cd4:	431c      	orrs	r4, r3
 8005cd6:	e7cc      	b.n	8005c72 <HAL_GPIO_Init+0x156>
 8005cd8:	f04f 0c01 	mov.w	ip, #1
 8005cdc:	fa0c f309 	lsl.w	r3, ip, r9
 8005ce0:	431c      	orrs	r4, r3
 8005ce2:	e7c6      	b.n	8005c72 <HAL_GPIO_Init+0x156>
 8005ce4:	f04f 0c05 	mov.w	ip, #5
 8005ce8:	fa0c f309 	lsl.w	r3, ip, r9
 8005cec:	431c      	orrs	r4, r3
 8005cee:	e7c0      	b.n	8005c72 <HAL_GPIO_Init+0x156>
 8005cf0:	f04f 0c03 	mov.w	ip, #3
 8005cf4:	fa0c f309 	lsl.w	r3, ip, r9
 8005cf8:	431c      	orrs	r4, r3
 8005cfa:	e7ba      	b.n	8005c72 <HAL_GPIO_Init+0x156>
 8005cfc:	f04f 0c04 	mov.w	ip, #4
 8005d00:	fa0c f309 	lsl.w	r3, ip, r9
 8005d04:	431c      	orrs	r4, r3
 8005d06:	e7b4      	b.n	8005c72 <HAL_GPIO_Init+0x156>
 8005d08:	f04f 0c06 	mov.w	ip, #6
 8005d0c:	fa0c f309 	lsl.w	r3, ip, r9
 8005d10:	431c      	orrs	r4, r3
 8005d12:	e7ae      	b.n	8005c72 <HAL_GPIO_Init+0x156>
 8005d14:	f04f 0c07 	mov.w	ip, #7
 8005d18:	fa0c f309 	lsl.w	r3, ip, r9
 8005d1c:	431c      	orrs	r4, r3
 8005d1e:	e7a8      	b.n	8005c72 <HAL_GPIO_Init+0x156>
 8005d20:	f04f 0c08 	mov.w	ip, #8
 8005d24:	fa0c f309 	lsl.w	r3, ip, r9
 8005d28:	431c      	orrs	r4, r3
 8005d2a:	e7a2      	b.n	8005c72 <HAL_GPIO_Init+0x156>
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	58000400 	.word	0x58000400
 8005d34:	58020800 	.word	0x58020800
 8005d38:	58020c00 	.word	0x58020c00
 8005d3c:	58021000 	.word	0x58021000
 8005d40:	58021400 	.word	0x58021400
 8005d44:	58000080 	.word	0x58000080
 8005d48:	58021800 	.word	0x58021800
 8005d4c:	58021c00 	.word	0x58021c00
 8005d50:	58022000 	.word	0x58022000
 8005d54:	58022400 	.word	0x58022400

08005d58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d58:	b902      	cbnz	r2, 8005d5c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d5a:	0409      	lsls	r1, r1, #16
 8005d5c:	6181      	str	r1, [r0, #24]
  }
}
 8005d5e:	4770      	bx	lr

08005d60 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d64:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005d68:	4201      	tst	r1, r0
 8005d6a:	d100      	bne.n	8005d6e <HAL_GPIO_EXTI_IRQHandler+0xe>
 8005d6c:	4770      	bx	lr
{
 8005d6e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d70:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d74:	f7fb fab4 	bl	80012e0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005d78:	bd08      	pop	{r3, pc}
 8005d7a:	bf00      	nop

08005d7c <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d066      	beq.n	8005e4e <HAL_LPTIM_Init+0xd2>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005d80:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
{
 8005d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005d88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d03c      	beq.n	8005e0c <HAL_LPTIM_Init+0x90>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005d92:	2302      	movs	r3, #2
 8005d94:	6960      	ldr	r0, [r4, #20]
 8005d96:	68a2      	ldr	r2, [r4, #8]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005d98:	f64f 7eff 	movw	lr, #65535	; 0xffff
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005d9c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8005da0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005da2:	e9d4 1500 	ldrd	r1, r5, [r4]
 8005da6:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8005daa:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8005dac:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005db0:	d026      	beq.n	8005e00 <HAL_LPTIM_Init+0x84>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005db2:	4570      	cmp	r0, lr
 8005db4:	d001      	beq.n	8005dba <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8005db6:	f42c 4c60 	bic.w	ip, ip, #57344	; 0xe000
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005dba:	bbb5      	cbnz	r5, 8005e2a <HAL_LPTIM_Init+0xae>
  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005dbc:	4332      	orrs	r2, r6
 8005dbe:	69e6      	ldr	r6, [r4, #28]
 8005dc0:	6925      	ldr	r5, [r4, #16]
 8005dc2:	4313      	orrs	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005dc4:	4a2e      	ldr	r2, [pc, #184]	; (8005e80 <HAL_LPTIM_Init+0x104>)
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005dc6:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005dc8:	ea0c 0202 	and.w	r2, ip, r2
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005dcc:	4333      	orrs	r3, r6
 8005dce:	432b      	orrs	r3, r5
 8005dd0:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd6:	4290      	cmp	r0, r2
 8005dd8:	d002      	beq.n	8005de0 <HAL_LPTIM_Init+0x64>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8005dda:	69a2      	ldr	r2, [r4, #24]
 8005ddc:	4310      	orrs	r0, r2
 8005dde:	4303      	orrs	r3, r0

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005de0:	4a28      	ldr	r2, [pc, #160]	; (8005e84 <HAL_LPTIM_Init+0x108>)
  hlptim->Instance->CFGR = tmpcfgr;
 8005de2:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005de4:	4291      	cmp	r1, r2
 8005de6:	d016      	beq.n	8005e16 <HAL_LPTIM_Init+0x9a>
 8005de8:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <HAL_LPTIM_Init+0x10c>)
 8005dea:	4299      	cmp	r1, r3
 8005dec:	d013      	beq.n	8005e16 <HAL_LPTIM_Init+0x9a>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8005dee:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <HAL_LPTIM_Init+0x110>)
 8005df0:	4299      	cmp	r1, r3
 8005df2:	d03c      	beq.n	8005e6e <HAL_LPTIM_Init+0xf2>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005df4:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8005df6:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005df8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005e00:	4570      	cmp	r0, lr
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8005e02:	f02c 0806 	bic.w	r8, ip, #6
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005e06:	d024      	beq.n	8005e52 <HAL_LPTIM_Init+0xd6>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8005e08:	46c4      	mov	ip, r8
 8005e0a:	e7d4      	b.n	8005db6 <HAL_LPTIM_Init+0x3a>
    hlptim->Lock = HAL_UNLOCKED;
 8005e0c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8005e10:	f7fd fae4 	bl	80033dc <HAL_LPTIM_MspInit>
 8005e14:	e7bd      	b.n	8005d92 <HAL_LPTIM_Init+0x16>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005e16:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 8005e1a:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005e20:	2301      	movs	r3, #1
 8005e22:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e2a:	432a      	orrs	r2, r5
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005e2c:	f8df e060 	ldr.w	lr, [pc, #96]	; 8005e90 <HAL_LPTIM_Init+0x114>
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005e30:	2d01      	cmp	r5, #1
              hlptim->Init.Clock.Prescaler |
 8005e32:	ea42 0206 	orr.w	r2, r2, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005e36:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 8005e3a:	ea43 0302 	orr.w	r3, r3, r2
              hlptim->Init.UpdateMode      |
 8005e3e:	ea43 0307 	orr.w	r3, r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e42:	ea43 030e 	orr.w	r3, r3, lr
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005e46:	d1c4      	bne.n	8005dd2 <HAL_LPTIM_Init+0x56>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8005e48:	68e2      	ldr	r2, [r4, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	e7c1      	b.n	8005dd2 <HAL_LPTIM_Init+0x56>
    return HAL_ERROR;
 8005e4e:	2001      	movs	r0, #1
}
 8005e50:	4770      	bx	lr
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e52:	f042 0501 	orr.w	r5, r2, #1
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005e56:	f8df e038 	ldr.w	lr, [pc, #56]	; 8005e90 <HAL_LPTIM_Init+0x114>
              hlptim->Init.Clock.Prescaler |
 8005e5a:	ea45 0206 	orr.w	r2, r5, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005e5e:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 8005e62:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005e64:	ea42 0307 	orr.w	r3, r2, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005e68:	ea43 030e 	orr.w	r3, r3, lr
 8005e6c:	e7ec      	b.n	8005e48 <HAL_LPTIM_Init+0xcc>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005e6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005e70:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005e72:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e7e:	bf00      	nop
 8005e80:	ff19f120 	.word	0xff19f120
 8005e84:	40002400 	.word	0x40002400
 8005e88:	58002400 	.word	0x58002400
 8005e8c:	58002800 	.word	0x58002800
 8005e90:	ff19f1f8 	.word	0xff19f1f8

08005e94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e96:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f000 808a 	beq.w	8005fb2 <HAL_PCD_Init+0x11e>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e9e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8005ea2:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8005ea4:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ea6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005eaa:	b343      	cbz	r3, 8005efe <HAL_PCD_Init+0x6a>
 8005eac:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005eae:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005eb0:	466f      	mov	r7, sp
 8005eb2:	1d26      	adds	r6, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005eb4:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005eb8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005eba:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005ebc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8005ec0:	bf08      	it	eq
 8005ec2:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8005ec4:	f003 fdbc 	bl	8009a40 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ec8:	f855 eb10 	ldr.w	lr, [r5], #16
 8005ecc:	46ac      	mov	ip, r5
 8005ece:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005ed2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005ed4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005ed8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005eda:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8005ede:	e887 0003 	stmia.w	r7, {r0, r1}
 8005ee2:	4670      	mov	r0, lr
 8005ee4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005ee8:	f003 fcb8 	bl	800985c <USB_CoreInit>
 8005eec:	4607      	mov	r7, r0
 8005eee:	b160      	cbz	r0, 8005f0a <HAL_PCD_Init+0x76>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8005ef0:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ef2:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8005ef4:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ef6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 8005efa:	b00b      	add	sp, #44	; 0x2c
 8005efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8005efe:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8005f02:	f005 f9c7 	bl	800b294 <HAL_PCD_MspInit>
 8005f06:	6820      	ldr	r0, [r4, #0]
 8005f08:	e7d1      	b.n	8005eae <HAL_PCD_Init+0x1a>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	f003 fd9f 	bl	8009a50 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f12:	6860      	ldr	r0, [r4, #4]
 8005f14:	b360      	cbz	r0, 8005f70 <HAL_PCD_Init+0xdc>
 8005f16:	4639      	mov	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8005f18:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f1c:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8005f1e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f22:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8005f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8005f28:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f2c:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f30:	b2f9      	uxtb	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8005f32:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f36:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f3c:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f3e:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f42:	d3ec      	bcc.n	8005f1e <HAL_PCD_Init+0x8a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f44:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8005f46:	4611      	mov	r1, r2
 8005f48:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f4c:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8005f4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8005f52:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f56:	b2fa      	uxtb	r2, r7
    hpcd->OUT_ep[i].is_in = 0U;
 8005f58:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f5c:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f5e:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f62:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f66:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f6a:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f6e:	d3eb      	bcc.n	8005f48 <HAL_PCD_Init+0xb4>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f70:	466f      	mov	r7, sp
 8005f72:	f8d4 c000 	ldr.w	ip, [r4]
 8005f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f78:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f7c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005f7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005f82:	e887 0003 	stmia.w	r7, {r0, r1}
 8005f86:	4660      	mov	r0, ip
 8005f88:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005f8c:	f003 fd78 	bl	8009a80 <USB_DevInit>
 8005f90:	4605      	mov	r5, r0
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d1ac      	bne.n	8005ef0 <HAL_PCD_Init+0x5c>
  hpcd->State = HAL_PCD_STATE_READY;
 8005f96:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8005f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8005f9a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8005f9e:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8005fa0:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8005fa4:	d009      	beq.n	8005fba <HAL_PCD_Init+0x126>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005fa6:	6820      	ldr	r0, [r4, #0]
 8005fa8:	f004 f958 	bl	800a25c <USB_DevDisconnect>
}
 8005fac:	4628      	mov	r0, r5
 8005fae:	b00b      	add	sp, #44	; 0x2c
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005fb2:	2501      	movs	r5, #1
}
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	b00b      	add	sp, #44	; 0x2c
 8005fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fcdc 	bl	8006978 <HAL_PCDEx_ActivateLPM>
 8005fc0:	e7f1      	b.n	8005fa6 <HAL_PCD_Init+0x112>
 8005fc2:	bf00      	nop

08005fc4 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005fc4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d01a      	beq.n	8006002 <HAL_PCD_Start+0x3e>
 8005fcc:	2101      	movs	r1, #1
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005fce:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fd0:	6803      	ldr	r3, [r0, #0]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005fd2:	428a      	cmp	r2, r1
{
 8005fd4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8005fd6:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005fda:	d00a      	beq.n	8005ff2 <HAL_PCD_Start+0x2e>
 8005fdc:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f004 f930 	bl	800a244 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	f003 fd23 	bl	8009a30 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005fea:	2000      	movs	r0, #0
 8005fec:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8005ff0:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ff2:	6982      	ldr	r2, [r0, #24]
 8005ff4:	428a      	cmp	r2, r1
 8005ff6:	d0f1      	beq.n	8005fdc <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8006000:	e7ec      	b.n	8005fdc <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 8006002:	2002      	movs	r0, #2
}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop

08006008 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800600c:	6806      	ldr	r6, [r0, #0]
{
 800600e:	b089      	sub	sp, #36	; 0x24
 8006010:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006012:	4630      	mov	r0, r6
 8006014:	f004 f960 	bl	800a2d8 <USB_GetMode>
 8006018:	b110      	cbz	r0, 8006020 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800601a:	b009      	add	sp, #36	; 0x24
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006022:	6820      	ldr	r0, [r4, #0]
 8006024:	f004 f926 	bl	800a274 <USB_ReadInterrupts>
 8006028:	2800      	cmp	r0, #0
 800602a:	d0f6      	beq.n	800601a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	f004 f921 	bl	800a274 <USB_ReadInterrupts>
 8006032:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006036:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006038:	d003      	beq.n	8006042 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800603a:	6943      	ldr	r3, [r0, #20]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006042:	f004 f917 	bl	800a274 <USB_ReadInterrupts>
 8006046:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800604a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800604c:	d011      	beq.n	8006072 <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800604e:	6983      	ldr	r3, [r0, #24]
 8006050:	f023 0310 	bic.w	r3, r3, #16
 8006054:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8006056:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006058:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800605c:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006060:	2b02      	cmp	r3, #2
 8006062:	d07d      	beq.n	8006160 <HAL_PCD_IRQHandler+0x158>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006064:	2b06      	cmp	r3, #6
 8006066:	f000 82ae 	beq.w	80065c6 <HAL_PCD_IRQHandler+0x5be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800606a:	6983      	ldr	r3, [r0, #24]
 800606c:	f043 0310 	orr.w	r3, r3, #16
 8006070:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006072:	f004 f8ff 	bl	800a274 <USB_ReadInterrupts>
 8006076:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800607a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800607c:	f040 8169 	bne.w	8006352 <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006080:	f004 f8f8 	bl	800a274 <USB_ReadInterrupts>
 8006084:	0347      	lsls	r7, r0, #13
 8006086:	f100 80a8 	bmi.w	80061da <HAL_PCD_IRQHandler+0x1d2>
 800608a:	f8d4 b000 	ldr.w	fp, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800608e:	4658      	mov	r0, fp
 8006090:	f004 f8f0 	bl	800a274 <USB_ReadInterrupts>
 8006094:	2800      	cmp	r0, #0
 8006096:	f2c0 8083 	blt.w	80061a0 <HAL_PCD_IRQHandler+0x198>
 800609a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800609c:	f004 f8ea 	bl	800a274 <USB_ReadInterrupts>
 80060a0:	0500      	lsls	r0, r0, #20
 80060a2:	d44a      	bmi.n	800613a <HAL_PCD_IRQHandler+0x132>
 80060a4:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80060a6:	f004 f8e5 	bl	800a274 <USB_ReadInterrupts>
 80060aa:	0102      	lsls	r2, r0, #4
 80060ac:	d513      	bpl.n	80060d6 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80060ae:	6822      	ldr	r2, [r4, #0]
      if (hpcd->LPM_State == LPM_L0)
 80060b0:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80060b4:	6953      	ldr	r3, [r2, #20]
 80060b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ba:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80060bc:	2900      	cmp	r1, #0
 80060be:	d146      	bne.n	800614e <HAL_PCD_IRQHandler+0x146>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80060c0:	6d53      	ldr	r3, [r2, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 80060c2:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80060c4:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80060c6:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 80060ca:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80060ce:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80060d2:	f000 fc67 	bl	80069a4 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80060d6:	6820      	ldr	r0, [r4, #0]
 80060d8:	f004 f8cc 	bl	800a274 <USB_ReadInterrupts>
 80060dc:	04c3      	lsls	r3, r0, #19
 80060de:	f100 8191 	bmi.w	8006404 <HAL_PCD_IRQHandler+0x3fc>
 80060e2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80060e4:	f004 f8c6 	bl	800a274 <USB_ReadInterrupts>
 80060e8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 80060ec:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80060ee:	f040 8172 	bne.w	80063d6 <HAL_PCD_IRQHandler+0x3ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80060f2:	f004 f8bf 	bl	800a274 <USB_ReadInterrupts>
 80060f6:	0707      	lsls	r7, r0, #28
 80060f8:	f100 8164 	bmi.w	80063c4 <HAL_PCD_IRQHandler+0x3bc>
 80060fc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80060fe:	f004 f8b9 	bl	800a274 <USB_ReadInterrupts>
 8006102:	02c6      	lsls	r6, r0, #11
 8006104:	f100 81d9 	bmi.w	80064ba <HAL_PCD_IRQHandler+0x4b2>
 8006108:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800610a:	f004 f8b3 	bl	800a274 <USB_ReadInterrupts>
 800610e:	0285      	lsls	r5, r0, #10
 8006110:	f100 81c9 	bmi.w	80064a6 <HAL_PCD_IRQHandler+0x49e>
 8006114:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006116:	f004 f8ad 	bl	800a274 <USB_ReadInterrupts>
 800611a:	0040      	lsls	r0, r0, #1
 800611c:	d454      	bmi.n	80061c8 <HAL_PCD_IRQHandler+0x1c0>
 800611e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006120:	f004 f8a8 	bl	800a274 <USB_ReadInterrupts>
 8006124:	0741      	lsls	r1, r0, #29
 8006126:	f57f af78 	bpl.w	800601a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800612e:	076a      	lsls	r2, r5, #29
 8006130:	d411      	bmi.n	8006156 <HAL_PCD_IRQHandler+0x14e>
      hpcd->Instance->GOTGINT |= temp;
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	432a      	orrs	r2, r5
 8006136:	605a      	str	r2, [r3, #4]
 8006138:	e76f      	b.n	800601a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800613a:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800613e:	07d9      	lsls	r1, r3, #31
 8006140:	d42a      	bmi.n	8006198 <HAL_PCD_IRQHandler+0x190>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	6943      	ldr	r3, [r0, #20]
 8006146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800614a:	6143      	str	r3, [r0, #20]
 800614c:	e7ab      	b.n	80060a6 <HAL_PCD_IRQHandler+0x9e>
        HAL_PCD_SuspendCallback(hpcd);
 800614e:	4620      	mov	r0, r4
 8006150:	f005 f918 	bl	800b384 <HAL_PCD_SuspendCallback>
 8006154:	e7bf      	b.n	80060d6 <HAL_PCD_IRQHandler+0xce>
        HAL_PCD_DisconnectCallback(hpcd);
 8006156:	4620      	mov	r0, r4
 8006158:	f005 f93c 	bl	800b3d4 <HAL_PCD_DisconnectCallback>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	e7e8      	b.n	8006132 <HAL_PCD_IRQHandler+0x12a>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006160:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006164:	421f      	tst	r7, r3
 8006166:	d080      	beq.n	800606a <HAL_PCD_IRQHandler+0x62>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006168:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800616c:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8006170:	4630      	mov	r0, r6
 8006172:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8006176:	463a      	mov	r2, r7
 8006178:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 800617c:	f003 ffe0 	bl	800a140 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006180:	f8d8 2208 	ldr.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006184:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006188:	443a      	add	r2, r7
 800618a:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800618c:	441f      	add	r7, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800618e:	f8c8 2208 	str.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006192:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
 8006196:	e768      	b.n	800606a <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_SuspendCallback(hpcd);
 8006198:	4620      	mov	r0, r4
 800619a:	f005 f8f3 	bl	800b384 <HAL_PCD_SuspendCallback>
 800619e:	e7d0      	b.n	8006142 <HAL_PCD_IRQHandler+0x13a>
      if (hpcd->LPM_State == LPM_L1)
 80061a0:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80061a4:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80061a8:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80061b2:	f000 81dc 	beq.w	800656e <HAL_PCD_IRQHandler+0x566>
        HAL_PCD_ResumeCallback(hpcd);
 80061b6:	4620      	mov	r0, r4
 80061b8:	f005 f8fc 	bl	800b3b4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	6943      	ldr	r3, [r0, #20]
 80061c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061c4:	6143      	str	r3, [r0, #20]
 80061c6:	e769      	b.n	800609c <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_ConnectCallback(hpcd);
 80061c8:	4620      	mov	r0, r4
 80061ca:	f005 f8ff 	bl	800b3cc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061ce:	6820      	ldr	r0, [r4, #0]
 80061d0:	6943      	ldr	r3, [r0, #20]
 80061d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061d6:	6143      	str	r3, [r0, #20]
 80061d8:	e7a2      	b.n	8006120 <HAL_PCD_IRQHandler+0x118>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	f004 f856 	bl	800a28c <USB_ReadDevAllInEpInterrupt>
 80061e0:	f8d4 b000 	ldr.w	fp, [r4]
      while (ep_intr != 0U)
 80061e4:	4681      	mov	r9, r0
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f43f af51 	beq.w	800608e <HAL_PCD_IRQHandler+0x86>
 80061ec:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 80061f0:	46a0      	mov	r8, r4
      epnum = 0U;
 80061f2:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80061f6:	9505      	str	r5, [sp, #20]
 80061f8:	e9cd 3603 	strd	r3, r6, [sp, #12]
 80061fc:	e007      	b.n	800620e <HAL_PCD_IRQHandler+0x206>
      while (ep_intr != 0U)
 80061fe:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8006202:	f10a 0a01 	add.w	sl, sl, #1
 8006206:	f108 081c 	add.w	r8, r8, #28
      while (ep_intr != 0U)
 800620a:	f000 8160 	beq.w	80064ce <HAL_PCD_IRQHandler+0x4c6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800620e:	f019 0f01 	tst.w	r9, #1
 8006212:	d0f4      	beq.n	80061fe <HAL_PCD_IRQHandler+0x1f6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006214:	fa5f f68a 	uxtb.w	r6, sl
 8006218:	4658      	mov	r0, fp
 800621a:	4631      	mov	r1, r6
 800621c:	f004 f848 	bl	800a2b0 <USB_ReadDevInEPInterrupt>
 8006220:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006222:	07e8      	lsls	r0, r5, #31
 8006224:	d518      	bpl.n	8006258 <HAL_PCD_IRQHandler+0x250>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006226:	9b04      	ldr	r3, [sp, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006228:	2701      	movs	r7, #1
 800622a:	f00a 010f 	and.w	r1, sl, #15
 800622e:	9a03      	ldr	r2, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006230:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006234:	fa07 f101 	lsl.w	r1, r7, r1
 8006238:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800623c:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 8006240:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006242:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8006246:	42b9      	cmp	r1, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006248:	4613      	mov	r3, r2
 800624a:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 800624c:	f000 8196 	beq.w	800657c <HAL_PCD_IRQHandler+0x574>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006250:	4631      	mov	r1, r6
 8006252:	4620      	mov	r0, r4
 8006254:	f005 f872 	bl	800b33c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006258:	0729      	lsls	r1, r5, #28
 800625a:	d504      	bpl.n	8006266 <HAL_PCD_IRQHandler+0x25e>
 800625c:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800625e:	2208      	movs	r2, #8
 8006260:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8006264:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006266:	06ea      	lsls	r2, r5, #27
 8006268:	d504      	bpl.n	8006274 <HAL_PCD_IRQHandler+0x26c>
 800626a:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800626c:	2210      	movs	r2, #16
 800626e:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8006272:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006274:	066b      	lsls	r3, r5, #25
 8006276:	d504      	bpl.n	8006282 <HAL_PCD_IRQHandler+0x27a>
 8006278:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800627a:	2240      	movs	r2, #64	; 0x40
 800627c:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8006280:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006282:	07af      	lsls	r7, r5, #30
 8006284:	d504      	bpl.n	8006290 <HAL_PCD_IRQHandler+0x288>
 8006286:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006288:	2202      	movs	r2, #2
 800628a:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800628e:	609a      	str	r2, [r3, #8]
 8006290:	6827      	ldr	r7, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006292:	062d      	lsls	r5, r5, #24
 8006294:	46bb      	mov	fp, r7
 8006296:	d5b2      	bpl.n	80061fe <HAL_PCD_IRQHandler+0x1f6>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8006298:	e9d8 2314 	ldrd	r2, r3, [r8, #80]	; 0x50
 800629c:	4293      	cmp	r3, r2
 800629e:	d8ae      	bhi.n	80061fe <HAL_PCD_IRQHandler+0x1f6>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80062a0:	1ad5      	subs	r5, r2, r3

  if (len > ep->maxpacket)
 80062a2:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062a6:	f507 6110 	add.w	r1, r7, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80062aa:	4285      	cmp	r5, r0
 80062ac:	46ac      	mov	ip, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062ae:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len32b = (len + 3U) / 4U;
 80062b2:	bf28      	it	cs
 80062b4:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062b6:	9106      	str	r1, [sp, #24]
 80062b8:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 80062ba:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062be:	b289      	uxth	r1, r1
 80062c0:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
 80062c4:	d335      	bcc.n	8006332 <HAL_PCD_IRQHandler+0x32a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062c6:	b3a2      	cbz	r2, 8006332 <HAL_PCD_IRQHandler+0x32a>
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d232      	bcs.n	8006332 <HAL_PCD_IRQHandler+0x32a>
 80062cc:	f8cd a01c 	str.w	sl, [sp, #28]
 80062d0:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 80062d4:	f8dd a018 	ldr.w	sl, [sp, #24]
 80062d8:	e00b      	b.n	80062f2 <HAL_PCD_IRQHandler+0x2ea>
 80062da:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80062de:	429a      	cmp	r2, r3
 80062e0:	eba2 0503 	sub.w	r5, r2, r3
 80062e4:	f240 8182 	bls.w	80065ec <HAL_PCD_IRQHandler+0x5e4>
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	f000 817f 	beq.w	80065ec <HAL_PCD_IRQHandler+0x5e4>
 80062ee:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 80062f2:	4285      	cmp	r5, r0
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062f4:	4632      	mov	r2, r6
 80062f6:	bf28      	it	cs
 80062f8:	4605      	movcs	r5, r0
 80062fa:	7c20      	ldrb	r0, [r4, #16]
 80062fc:	b2ab      	uxth	r3, r5
 80062fe:	9000      	str	r0, [sp, #0]
 8006300:	4638      	mov	r0, r7
 8006302:	f003 ff07 	bl	800a114 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006306:	f8da 2018 	ldr.w	r2, [sl, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800630a:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 800630e:	1ce8      	adds	r0, r5, #3
    ep->xfer_count += len;
 8006310:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006314:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8006316:	4429      	add	r1, r5
    ep->xfer_count += len;
 8006318:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800631a:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 800631e:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 8006322:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006326:	d2d8      	bcs.n	80062da <HAL_PCD_IRQHandler+0x2d2>
 8006328:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800632c:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8006330:	6827      	ldr	r7, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006332:	429a      	cmp	r2, r3
 8006334:	f200 815e 	bhi.w	80065f4 <HAL_PCD_IRQHandler+0x5ec>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006338:	f50b 6100 	add.w	r1, fp, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800633c:	f00a 020f 	and.w	r2, sl, #15
 8006340:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006342:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006344:	46bb      	mov	fp, r7
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006346:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800634a:	ea23 0302 	bic.w	r3, r3, r2
 800634e:	634b      	str	r3, [r1, #52]	; 0x34
 8006350:	e755      	b.n	80061fe <HAL_PCD_IRQHandler+0x1f6>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006352:	f003 ff93 	bl	800a27c <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8006356:	4607      	mov	r7, r0
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	2f00      	cmp	r7, #0
 800635c:	f43f ae90 	beq.w	8006080 <HAL_PCD_IRQHandler+0x78>
      epnum = 0U;
 8006360:	f04f 0800 	mov.w	r8, #0
 8006364:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
 8006368:	e004      	b.n	8006374 <HAL_PCD_IRQHandler+0x36c>
      while (ep_intr != 0U)
 800636a:	087f      	lsrs	r7, r7, #1
        epnum++;
 800636c:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 8006370:	f43f ae86 	beq.w	8006080 <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 8006374:	07f9      	lsls	r1, r7, #31
 8006376:	d5f8      	bpl.n	800636a <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006378:	fa5f fb88 	uxtb.w	fp, r8
 800637c:	4659      	mov	r1, fp
 800637e:	f003 ff8d 	bl	800a29c <USB_ReadDevOutEPInterrupt>
 8006382:	4681      	mov	r9, r0
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006384:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006386:	f019 0f01 	tst.w	r9, #1
 800638a:	f040 80a3 	bne.w	80064d4 <HAL_PCD_IRQHandler+0x4cc>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800638e:	f019 0f08 	tst.w	r9, #8
 8006392:	f040 80c4 	bne.w	800651e <HAL_PCD_IRQHandler+0x516>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006396:	f019 0f10 	tst.w	r9, #16
 800639a:	d003      	beq.n	80063a4 <HAL_PCD_IRQHandler+0x39c>
 800639c:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063a0:	2210      	movs	r2, #16
 80063a2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063a4:	f019 0f20 	tst.w	r9, #32
 80063a8:	d003      	beq.n	80063b2 <HAL_PCD_IRQHandler+0x3aa>
 80063aa:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063ae:	2220      	movs	r2, #32
 80063b0:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80063b2:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 80063b6:	d0d8      	beq.n	800636a <HAL_PCD_IRQHandler+0x362>
 80063b8:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80063bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063c0:	609a      	str	r2, [r3, #8]
 80063c2:	e7d2      	b.n	800636a <HAL_PCD_IRQHandler+0x362>
      HAL_PCD_SOFCallback(hpcd);
 80063c4:	4620      	mov	r0, r4
 80063c6:	f004 ffc3 	bl	800b350 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80063ca:	6820      	ldr	r0, [r4, #0]
 80063cc:	6943      	ldr	r3, [r0, #20]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	6143      	str	r3, [r0, #20]
 80063d4:	e693      	b.n	80060fe <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 80063d6:	f003 ff83 	bl	800a2e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80063da:	6820      	ldr	r0, [r4, #0]
 80063dc:	f003 fc46 	bl	8009c6c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063e0:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80063e2:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063e4:	f000 ffbc 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 80063e8:	7b22      	ldrb	r2, [r4, #12]
 80063ea:	4601      	mov	r1, r0
 80063ec:	4628      	mov	r0, r5
 80063ee:	f003 fa9f 	bl	8009930 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80063f2:	4620      	mov	r0, r4
 80063f4:	f004 ffb0 	bl	800b358 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	6943      	ldr	r3, [r0, #20]
 80063fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006400:	6143      	str	r3, [r0, #20]
 8006402:	e676      	b.n	80060f2 <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006404:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8006408:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800640a:	6820      	ldr	r0, [r4, #0]
 800640c:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006414:	f003 fc18 	bl	8009c48 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006418:	6860      	ldr	r0, [r4, #4]
 800641a:	b308      	cbz	r0, 8006460 <HAL_PCD_IRQHandler+0x458>
 800641c:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006420:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8006424:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006426:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800642c:	4285      	cmp	r5, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800642e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006432:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006436:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800643a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800643e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006442:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006446:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800644a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800644e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006452:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8006456:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800645a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800645e:	d1e1      	bne.n	8006424 <HAL_PCD_IRQHandler+0x41c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006460:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006462:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006464:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006468:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800646a:	2a00      	cmp	r2, #0
 800646c:	d075      	beq.n	800655a <HAL_PCD_IRQHandler+0x552>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800646e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006472:	f043 030b 	orr.w	r3, r3, #11
 8006476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800647a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800647c:	f043 030b 	orr.w	r3, r3, #11
 8006480:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006482:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006486:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800648a:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800648c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006490:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006492:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006496:	f003 ff39 	bl	800a30c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800649a:	6820      	ldr	r0, [r4, #0]
 800649c:	6943      	ldr	r3, [r0, #20]
 800649e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064a2:	6143      	str	r3, [r0, #20]
 80064a4:	e61e      	b.n	80060e4 <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80064a6:	4620      	mov	r0, r4
 80064a8:	2100      	movs	r1, #0
 80064aa:	f004 ff87 	bl	800b3bc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80064ae:	6820      	ldr	r0, [r4, #0]
 80064b0:	6943      	ldr	r3, [r0, #20]
 80064b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064b6:	6143      	str	r3, [r0, #20]
 80064b8:	e62d      	b.n	8006116 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80064ba:	4620      	mov	r0, r4
 80064bc:	2100      	movs	r1, #0
 80064be:	f004 ff81 	bl	800b3c4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80064c2:	6820      	ldr	r0, [r4, #0]
 80064c4:	6943      	ldr	r3, [r0, #20]
 80064c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ca:	6143      	str	r3, [r0, #20]
 80064cc:	e61d      	b.n	800610a <HAL_PCD_IRQHandler+0x102>
 80064ce:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 80064d2:	e5dc      	b.n	800608e <HAL_PCD_IRQHandler+0x86>
 80064d4:	ea4f 1348 	mov.w	r3, r8, lsl #5
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80064d8:	6922      	ldr	r2, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064da:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80064de:	f04f 0c01 	mov.w	ip, #1
 80064e2:	eb0a 0103 	add.w	r1, sl, r3
  if (hpcd->Init.dma_enable == 1U)
 80064e6:	2a01      	cmp	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064e8:	4473      	add	r3, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80064ea:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064ee:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064f2:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 80064f4:	d05a      	beq.n	80065ac <HAL_PCD_IRQHandler+0x5a4>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80064f6:	4a5e      	ldr	r2, [pc, #376]	; (8006670 <HAL_PCD_IRQHandler+0x668>)
 80064f8:	4594      	cmp	ip, r2
 80064fa:	d07d      	beq.n	80065f8 <HAL_PCD_IRQHandler+0x5f0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064fc:	f1b8 0f00 	cmp.w	r8, #0
 8006500:	d107      	bne.n	8006512 <HAL_PCD_IRQHandler+0x50a>
 8006502:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8006506:	b923      	cbnz	r3, 8006512 <HAL_PCD_IRQHandler+0x50a>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006508:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800650c:	4641      	mov	r1, r8
 800650e:	f003 fefd 	bl	800a30c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006512:	4620      	mov	r0, r4
 8006514:	4659      	mov	r1, fp
 8006516:	f004 ff07 	bl	800b328 <HAL_PCD_DataOutStageCallback>
 800651a:	6820      	ldr	r0, [r4, #0]
 800651c:	e737      	b.n	800638e <HAL_PCD_IRQHandler+0x386>
 800651e:	ea4f 1348 	mov.w	r3, r8, lsl #5
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006522:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006526:	f04f 0c08 	mov.w	ip, #8
 800652a:	eb0a 0103 	add.w	r1, sl, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800652e:	4413      	add	r3, r2
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006530:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006534:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006536:	484f      	ldr	r0, [pc, #316]	; (8006674 <HAL_PCD_IRQHandler+0x66c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006538:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800653a:	4282      	cmp	r2, r0
 800653c:	d931      	bls.n	80065a2 <HAL_PCD_IRQHandler+0x59a>
 800653e:	040a      	lsls	r2, r1, #16
 8006540:	d502      	bpl.n	8006548 <HAL_PCD_IRQHandler+0x540>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006542:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006546:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006548:	4620      	mov	r0, r4
 800654a:	f004 fee7 	bl	800b31c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800654e:	6921      	ldr	r1, [r4, #16]
 8006550:	2901      	cmp	r1, #1
 8006552:	f000 8084 	beq.w	800665e <HAL_PCD_IRQHandler+0x656>
 8006556:	6820      	ldr	r0, [r4, #0]
 8006558:	e71d      	b.n	8006396 <HAL_PCD_IRQHandler+0x38e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	f242 032b 	movw	r3, #8235	; 0x202b
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f043 030b 	orr.w	r3, r3, #11
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e789      	b.n	8006482 <HAL_PCD_IRQHandler+0x47a>
        hpcd->LPM_State = LPM_L0;
 800656e:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006570:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8006572:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006576:	f000 fa15 	bl	80069a4 <HAL_PCDEx_LPM_Callback>
 800657a:	e61f      	b.n	80061bc <HAL_PCD_IRQHandler+0x1b4>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800657c:	e9d8 2311 	ldrd	r2, r3, [r8, #68]	; 0x44
 8006580:	4413      	add	r3, r2
 8006582:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006586:	f1ba 0f00 	cmp.w	sl, #0
 800658a:	f47f ae61 	bne.w	8006250 <HAL_PCD_IRQHandler+0x248>
 800658e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006590:	2b00      	cmp	r3, #0
 8006592:	f47f ae5d 	bne.w	8006250 <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006596:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	f003 feb6 	bl	800a30c <USB_EP0_OutStart>
 80065a0:	e656      	b.n	8006250 <HAL_PCD_IRQHandler+0x248>
  HAL_PCD_SetupStageCallback(hpcd);
 80065a2:	4620      	mov	r0, r4
 80065a4:	f004 feba 	bl	800b31c <HAL_PCD_SetupStageCallback>
 80065a8:	6820      	ldr	r0, [r4, #0]
 80065aa:	e6f4      	b.n	8006396 <HAL_PCD_IRQHandler+0x38e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80065ac:	070a      	lsls	r2, r1, #28
 80065ae:	d52a      	bpl.n	8006606 <HAL_PCD_IRQHandler+0x5fe>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065b0:	4a30      	ldr	r2, [pc, #192]	; (8006674 <HAL_PCD_IRQHandler+0x66c>)
 80065b2:	4594      	cmp	ip, r2
 80065b4:	f67f aeeb 	bls.w	800638e <HAL_PCD_IRQHandler+0x386>
 80065b8:	0409      	lsls	r1, r1, #16
 80065ba:	f57f aee8 	bpl.w	800638e <HAL_PCD_IRQHandler+0x386>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065c2:	609a      	str	r2, [r3, #8]
 80065c4:	e6e3      	b.n	800638e <HAL_PCD_IRQHandler+0x386>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065c6:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80065ca:	2208      	movs	r2, #8
 80065cc:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80065d0:	4630      	mov	r0, r6
 80065d2:	f003 fdb5 	bl	800a140 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065d6:	f3c7 130a 	ubfx	r3, r7, #4, #11
 80065da:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 80065de:	6820      	ldr	r0, [r4, #0]
 80065e0:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 80065e4:	440b      	add	r3, r1
 80065e6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80065ea:	e53e      	b.n	800606a <HAL_PCD_IRQHandler+0x62>
 80065ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80065f0:	6827      	ldr	r7, [r4, #0]
 80065f2:	e69e      	b.n	8006332 <HAL_PCD_IRQHandler+0x32a>
 80065f4:	46bb      	mov	fp, r7
 80065f6:	e602      	b.n	80061fe <HAL_PCD_IRQHandler+0x1f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80065f8:	040a      	lsls	r2, r1, #16
 80065fa:	d4e0      	bmi.n	80065be <HAL_PCD_IRQHandler+0x5b6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065fc:	0689      	lsls	r1, r1, #26
 80065fe:	d588      	bpl.n	8006512 <HAL_PCD_IRQHandler+0x50a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006600:	2220      	movs	r2, #32
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	e785      	b.n	8006512 <HAL_PCD_IRQHandler+0x50a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006606:	068a      	lsls	r2, r1, #26
 8006608:	d42f      	bmi.n	800666a <HAL_PCD_IRQHandler+0x662>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800660a:	f011 0f28 	tst.w	r1, #40	; 0x28
 800660e:	f47f aebe 	bne.w	800638e <HAL_PCD_IRQHandler+0x386>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006612:	4a18      	ldr	r2, [pc, #96]	; (8006674 <HAL_PCD_IRQHandler+0x66c>)
 8006614:	4594      	cmp	ip, r2
 8006616:	d901      	bls.n	800661c <HAL_PCD_IRQHandler+0x614>
 8006618:	0409      	lsls	r1, r1, #16
 800661a:	d4d0      	bmi.n	80065be <HAL_PCD_IRQHandler+0x5b6>
 800661c:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006620:	6919      	ldr	r1, [r3, #16]
 8006622:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006626:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800662a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800662e:	eba2 0c01 	sub.w	ip, r2, r1
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006632:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8006636:	440a      	add	r2, r1
        hpcd->OUT_ep[epnum].xfer_count =
 8006638:	f8c3 c214 	str.w	ip, [r3, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800663c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006640:	f1b8 0f00 	cmp.w	r8, #0
 8006644:	f47f af65 	bne.w	8006512 <HAL_PCD_IRQHandler+0x50a>
 8006648:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800664c:	2b00      	cmp	r3, #0
 800664e:	f47f af60 	bne.w	8006512 <HAL_PCD_IRQHandler+0x50a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006652:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006656:	2101      	movs	r1, #1
 8006658:	f003 fe58 	bl	800a30c <USB_EP0_OutStart>
 800665c:	e759      	b.n	8006512 <HAL_PCD_IRQHandler+0x50a>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800665e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006662:	6820      	ldr	r0, [r4, #0]
 8006664:	f003 fe52 	bl	800a30c <USB_EP0_OutStart>
 8006668:	e775      	b.n	8006556 <HAL_PCD_IRQHandler+0x54e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800666a:	2220      	movs	r2, #32
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	e68e      	b.n	800638e <HAL_PCD_IRQHandler+0x386>
 8006670:	4f54310a 	.word	0x4f54310a
 8006674:	4f54300a 	.word	0x4f54300a

08006678 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8006678:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800667c:	2a01      	cmp	r2, #1
 800667e:	d00d      	beq.n	800669c <HAL_PCD_SetAddress+0x24>
 8006680:	2201      	movs	r2, #1
{
 8006682:	b510      	push	{r4, lr}
 8006684:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8006686:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800668a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800668c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006690:	f003 fdc6 	bl	800a220 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006694:	2000      	movs	r0, #0
 8006696:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800669a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800669c:	2002      	movs	r0, #2
}
 800669e:	4770      	bx	lr

080066a0 <HAL_PCD_EP_Open>:
{
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80066a6:	0609      	lsls	r1, r1, #24
 80066a8:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80066ac:	ea4f 0585 	mov.w	r5, r5, lsl #2
 80066b0:	d422      	bmi.n	80066f8 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066b2:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 80066b6:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80066ba:	2600      	movs	r6, #0
 80066bc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066c0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80066c2:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
  if (ep->is_in != 0U)
 80066c6:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066c8:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 80066ca:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80066cc:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80066ce:	b105      	cbz	r5, 80066d2 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80066d0:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d101      	bne.n	80066da <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80066da:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d015      	beq.n	800670e <HAL_PCD_EP_Open+0x6e>
 80066e2:	4604      	mov	r4, r0
 80066e4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80066e6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80066e8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80066ec:	f003 faca 	bl	8009c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066f0:	2000      	movs	r0, #0
 80066f2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80066f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 80066f8:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066fc:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 8006700:	2701      	movs	r7, #1
 8006702:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006706:	4401      	add	r1, r0
    ep->is_in = 1U;
 8006708:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 800670c:	e7db      	b.n	80066c6 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800670e:	2002      	movs	r0, #2
}
 8006710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006712:	bf00      	nop

08006714 <HAL_PCD_EP_Close>:
{
 8006714:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8006718:	0609      	lsls	r1, r1, #24
{
 800671a:	b538      	push	{r3, r4, r5, lr}
 800671c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8006720:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8006724:	d419      	bmi.n	800675a <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006726:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800672a:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800672e:	2400      	movs	r4, #0
 8006730:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006734:	4401      	add	r1, r0
    ep->is_in = 0U;
 8006736:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800673a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800673c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8006740:	2b01      	cmp	r3, #1
 8006742:	d019      	beq.n	8006778 <HAL_PCD_EP_Close+0x64>
 8006744:	4604      	mov	r4, r0
 8006746:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006748:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800674a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800674e:	f003 fadb 	bl	8009d08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006752:	2000      	movs	r0, #0
 8006754:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006758:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800675a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800675e:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8006762:	2501      	movs	r5, #1
 8006764:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006768:	4401      	add	r1, r0
    ep->is_in = 1U;
 800676a:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800676e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006770:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8006774:	2b01      	cmp	r3, #1
 8006776:	d1e5      	bne.n	8006744 <HAL_PCD_EP_Close+0x30>
 8006778:	2002      	movs	r0, #2
}
 800677a:	bd38      	pop	{r3, r4, r5, pc}

0800677c <HAL_PCD_EP_Receive>:
{
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8006782:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006784:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8006786:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800678a:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800678e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006792:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8006796:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 800679a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 800679e:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 80067a2:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80067a6:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 80067aa:	6903      	ldr	r3, [r0, #16]
 80067ac:	6800      	ldr	r0, [r0, #0]
 80067ae:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80067b0:	bf08      	it	eq
 80067b2:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80067b6:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067b8:	b11d      	cbz	r5, 80067c2 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067ba:	f003 fb05 	bl	8009dc8 <USB_EPStartXfer>
}
 80067be:	2000      	movs	r0, #0
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067c2:	f003 fc1d 	bl	800a000 <USB_EP0StartXfer>
}
 80067c6:	2000      	movs	r0, #0
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	bf00      	nop

080067cc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80067cc:	f001 010f 	and.w	r1, r1, #15
 80067d0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80067d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 80067d8:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop

080067e0 <HAL_PCD_EP_Transmit>:
{
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 80067e6:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 80067e8:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067ea:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 80067ec:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067f0:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 80067f4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067f8:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 80067fa:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 80067fc:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 80067fe:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8006802:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8006804:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8006808:	6903      	ldr	r3, [r0, #16]
 800680a:	6800      	ldr	r0, [r0, #0]
 800680c:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 800680e:	bf08      	it	eq
 8006810:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8006812:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006814:	b11d      	cbz	r5, 800681e <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006816:	f003 fad7 	bl	8009dc8 <USB_EPStartXfer>
}
 800681a:	2000      	movs	r0, #0
 800681c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800681e:	f003 fbef 	bl	800a000 <USB_EP0StartXfer>
}
 8006822:	2000      	movs	r0, #0
 8006824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006826:	bf00      	nop

08006828 <HAL_PCD_EP_SetStall>:
{
 8006828:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800682a:	6843      	ldr	r3, [r0, #4]
 800682c:	f001 050f 	and.w	r5, r1, #15
 8006830:	429d      	cmp	r5, r3
 8006832:	d81f      	bhi.n	8006874 <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8006834:	060b      	lsls	r3, r1, #24
 8006836:	d41f      	bmi.n	8006878 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8006838:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800683c:	241c      	movs	r4, #28
    ep->is_in = 0U;
 800683e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8006840:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8006844:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8006848:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800684c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8006850:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006852:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006854:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006856:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800685a:	429a      	cmp	r2, r3
 800685c:	d01e      	beq.n	800689c <HAL_PCD_EP_SetStall+0x74>
 800685e:	4604      	mov	r4, r0
 8006860:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006864:	6800      	ldr	r0, [r0, #0]
 8006866:	f003 fc7f 	bl	800a168 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800686a:	b1cd      	cbz	r5, 80068a0 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 800686c:	2000      	movs	r0, #0
 800686e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006872:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006874:	2001      	movs	r0, #1
}
 8006876:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006878:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800687a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800687e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006880:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8006884:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006888:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800688e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006890:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006892:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006894:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8006898:	429a      	cmp	r2, r3
 800689a:	d1e0      	bne.n	800685e <HAL_PCD_EP_SetStall+0x36>
 800689c:	2002      	movs	r0, #2
}
 800689e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80068a0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80068a4:	7c21      	ldrb	r1, [r4, #16]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	f003 fd30 	bl	800a30c <USB_EP0_OutStart>
 80068ac:	e7de      	b.n	800686c <HAL_PCD_EP_SetStall+0x44>
 80068ae:	bf00      	nop

080068b0 <HAL_PCD_EP_ClrStall>:
{
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80068b6:	6843      	ldr	r3, [r0, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d821      	bhi.n	8006900 <HAL_PCD_EP_ClrStall+0x50>
 80068bc:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80068c0:	0609      	lsls	r1, r1, #24
 80068c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80068c6:	d41d      	bmi.n	8006904 <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068c8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80068cc:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 80068d0:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068d2:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 80068d4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 80068d8:	f883 51fd 	strb.w	r5, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 80068dc:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80068de:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80068e0:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80068e2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d01c      	beq.n	8006924 <HAL_PCD_EP_ClrStall+0x74>
 80068ea:	4604      	mov	r4, r0
 80068ec:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068ee:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80068f0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068f4:	f003 fc68 	bl	800a1c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068f8:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 80068fc:	4628      	mov	r0, r5
}
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006900:	2001      	movs	r0, #1
}
 8006902:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8006904:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006908:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 800690a:	2501      	movs	r5, #1
 800690c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006910:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8006912:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8006916:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8006918:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800691a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800691c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8006920:	2b01      	cmp	r3, #1
 8006922:	d1e2      	bne.n	80068ea <HAL_PCD_EP_ClrStall+0x3a>
 8006924:	2002      	movs	r0, #2
}
 8006926:	bd38      	pop	{r3, r4, r5, pc}

08006928 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006928:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800692a:	6805      	ldr	r5, [r0, #0]
 800692c:	0412      	lsls	r2, r2, #16
 800692e:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8006930:	b1c1      	cbz	r1, 8006964 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006932:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8006934:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006936:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800693a:	d00b      	beq.n	8006954 <HAL_PCDEx_SetTxFiFo+0x2c>
 800693c:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800693e:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8006942:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006944:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8006948:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800694a:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800694c:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800694e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006952:	d3f4      	bcc.n	800693e <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006954:	3140      	adds	r1, #64	; 0x40
 8006956:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 8006958:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800695a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800695e:	604c      	str	r4, [r1, #4]
}
 8006960:	bc30      	pop	{r4, r5}
 8006962:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006964:	4314      	orrs	r4, r2
}
 8006966:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006968:	62ac      	str	r4, [r5, #40]	; 0x28
}
 800696a:	bc30      	pop	{r4, r5}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop

08006970 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8006970:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8006972:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8006974:	6259      	str	r1, [r3, #36]	; 0x24
}
 8006976:	4770      	bx	lr

08006978 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006978:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 800697a:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800697c:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <HAL_PCDEx_ActivateLPM+0x28>)
{
 800697e:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 8006980:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 8006984:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006986:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8006988:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800698a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 800698e:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 8006992:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006994:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006996:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006998:	430a      	orrs	r2, r1
}
 800699a:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800699c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800699e:	4770      	bx	lr
 80069a0:	10000003 	.word	0x10000003

080069a4 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop

080069a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069a8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80069aa:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <HAL_PWREx_ConfigSupply+0x48>)
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	0752      	lsls	r2, r2, #29
 80069b0:	d406      	bmi.n	80069c0 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069b8:	1a18      	subs	r0, r3, r0
 80069ba:	bf18      	it	ne
 80069bc:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80069be:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069c0:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069c2:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069c4:	f022 0207 	bic.w	r2, r2, #7
 80069c8:	4310      	orrs	r0, r2
 80069ca:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 80069cc:	f7fc ff16 	bl	80037fc <HAL_GetTick>
 80069d0:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069d2:	e005      	b.n	80069e0 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069d4:	f7fc ff12 	bl	80037fc <HAL_GetTick>
 80069d8:	1b40      	subs	r0, r0, r5
 80069da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80069de:	d804      	bhi.n	80069ea <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069e0:	6863      	ldr	r3, [r4, #4]
 80069e2:	049b      	lsls	r3, r3, #18
 80069e4:	d5f6      	bpl.n	80069d4 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 80069e6:	2000      	movs	r0, #0
}
 80069e8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80069ea:	2001      	movs	r0, #1
}
 80069ec:	bd38      	pop	{r3, r4, r5, pc}
 80069ee:	bf00      	nop
 80069f0:	58024800 	.word	0x58024800

080069f4 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80069f4:	4a02      	ldr	r2, [pc, #8]	; (8006a00 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 80069f6:	68d3      	ldr	r3, [r2, #12]
 80069f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069fc:	60d3      	str	r3, [r2, #12]
}
 80069fe:	4770      	bx	lr
 8006a00:	58024800 	.word	0x58024800

08006a04 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f000 819d 	beq.w	8006d44 <HAL_RCC_OscConfig+0x340>
{
 8006a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a0c:	6803      	ldr	r3, [r0, #0]
 8006a0e:	4604      	mov	r4, r0
 8006a10:	07d9      	lsls	r1, r3, #31
 8006a12:	d533      	bpl.n	8006a7c <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a14:	49a7      	ldr	r1, [pc, #668]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006a16:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a18:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a1a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a1e:	2a10      	cmp	r2, #16
 8006a20:	f000 8112 	beq.w	8006c48 <HAL_RCC_OscConfig+0x244>
 8006a24:	2a18      	cmp	r2, #24
 8006a26:	f000 810a 	beq.w	8006c3e <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a30:	d010      	beq.n	8006a54 <HAL_RCC_OscConfig+0x50>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 816f 	beq.w	8006d16 <HAL_RCC_OscConfig+0x312>
 8006a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a3c:	4b9d      	ldr	r3, [pc, #628]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	f000 81e4 	beq.w	8006e0c <HAL_RCC_OscConfig+0x408>
 8006a44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e004      	b.n	8006a5e <HAL_RCC_OscConfig+0x5a>
 8006a54:	4a97      	ldr	r2, [pc, #604]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006a56:	6813      	ldr	r3, [r2, #0]
 8006a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5e:	f7fc fecd 	bl	80037fc <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a62:	4d94      	ldr	r5, [pc, #592]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8006a64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a66:	e005      	b.n	8006a74 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a68:	f7fc fec8 	bl	80037fc <HAL_GetTick>
 8006a6c:	1b80      	subs	r0, r0, r6
 8006a6e:	2864      	cmp	r0, #100	; 0x64
 8006a70:	f200 814f 	bhi.w	8006d12 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	039f      	lsls	r7, r3, #14
 8006a78:	d5f6      	bpl.n	8006a68 <HAL_RCC_OscConfig+0x64>
 8006a7a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a7c:	0799      	lsls	r1, r3, #30
 8006a7e:	f100 808e 	bmi.w	8006b9e <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a82:	06d9      	lsls	r1, r3, #27
 8006a84:	d534      	bpl.n	8006af0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a86:	4a8b      	ldr	r2, [pc, #556]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006a88:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a8a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	f000 80e9 	beq.w	8006c68 <HAL_RCC_OscConfig+0x264>
 8006a96:	2b18      	cmp	r3, #24
 8006a98:	f000 80e1 	beq.w	8006c5e <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006a9c:	69e3      	ldr	r3, [r4, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8178 	beq.w	8006d94 <HAL_RCC_OscConfig+0x390>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006aa4:	4b83      	ldr	r3, [pc, #524]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006aa6:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aa8:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8006aaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006ab0:	f7fc fea4 	bl	80037fc <HAL_GetTick>
 8006ab4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ab6:	e005      	b.n	8006ac4 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ab8:	f7fc fea0 	bl	80037fc <HAL_GetTick>
 8006abc:	1b80      	subs	r0, r0, r6
 8006abe:	2802      	cmp	r0, #2
 8006ac0:	f200 8127 	bhi.w	8006d12 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	05db      	lsls	r3, r3, #23
 8006ac8:	d5f6      	bpl.n	8006ab8 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006aca:	f7fc feaf 	bl	800382c <HAL_GetREVID>
 8006ace:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ad2:	4298      	cmp	r0, r3
 8006ad4:	f200 825d 	bhi.w	8006f92 <HAL_RCC_OscConfig+0x58e>
 8006ad8:	6a22      	ldr	r2, [r4, #32]
 8006ada:	686b      	ldr	r3, [r5, #4]
 8006adc:	2a20      	cmp	r2, #32
 8006ade:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ae2:	bf0c      	ite	eq
 8006ae4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8006ae8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8006aec:	606b      	str	r3, [r5, #4]
 8006aee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006af0:	071d      	lsls	r5, r3, #28
 8006af2:	d517      	bpl.n	8006b24 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006af4:	6963      	ldr	r3, [r4, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8126 	beq.w	8006d48 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006afc:	4b6d      	ldr	r3, [pc, #436]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006afe:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b00:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006b08:	f7fc fe78 	bl	80037fc <HAL_GetTick>
 8006b0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b0e:	e005      	b.n	8006b1c <HAL_RCC_OscConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b10:	f7fc fe74 	bl	80037fc <HAL_GetTick>
 8006b14:	1b80      	subs	r0, r0, r6
 8006b16:	2802      	cmp	r0, #2
 8006b18:	f200 80fb 	bhi.w	8006d12 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b1c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006b1e:	0798      	lsls	r0, r3, #30
 8006b20:	d5f6      	bpl.n	8006b10 <HAL_RCC_OscConfig+0x10c>
 8006b22:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b24:	069a      	lsls	r2, r3, #26
 8006b26:	d517      	bpl.n	8006b58 <HAL_RCC_OscConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006b28:	69a3      	ldr	r3, [r4, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 811f 	beq.w	8006d6e <HAL_RCC_OscConfig+0x36a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b30:	4b60      	ldr	r3, [pc, #384]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006b32:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b34:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8006b36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b3a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006b3c:	f7fc fe5e 	bl	80037fc <HAL_GetTick>
 8006b40:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b42:	e005      	b.n	8006b50 <HAL_RCC_OscConfig+0x14c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006b44:	f7fc fe5a 	bl	80037fc <HAL_GetTick>
 8006b48:	1b80      	subs	r0, r0, r6
 8006b4a:	2802      	cmp	r0, #2
 8006b4c:	f200 80e1 	bhi.w	8006d12 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	049f      	lsls	r7, r3, #18
 8006b54:	d5f6      	bpl.n	8006b44 <HAL_RCC_OscConfig+0x140>
 8006b56:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b58:	0759      	lsls	r1, r3, #29
 8006b5a:	f100 80a0 	bmi.w	8006c9e <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b60:	b1d8      	cbz	r0, 8006b9a <HAL_RCC_OscConfig+0x196>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b62:	4b54      	ldr	r3, [pc, #336]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006b6a:	2a18      	cmp	r2, #24
 8006b6c:	f000 81c9 	beq.w	8006f02 <HAL_RCC_OscConfig+0x4fe>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b70:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b72:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b74:	f000 815b 	beq.w	8006e2e <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b78:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b7c:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8006b7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b80:	f7fc fe3c 	bl	80037fc <HAL_GetTick>
 8006b84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b86:	e005      	b.n	8006b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b88:	f7fc fe38 	bl	80037fc <HAL_GetTick>
 8006b8c:	1b40      	subs	r0, r0, r5
 8006b8e:	2802      	cmp	r0, #2
 8006b90:	f200 80bf 	bhi.w	8006d12 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	019b      	lsls	r3, r3, #6
 8006b98:	d4f6      	bmi.n	8006b88 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006b9a:	2000      	movs	r0, #0
}
 8006b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b9e:	4a45      	ldr	r2, [pc, #276]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006ba0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ba2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ba4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8006ba8:	d02f      	beq.n	8006c0a <HAL_RCC_OscConfig+0x206>
 8006baa:	2b18      	cmp	r3, #24
 8006bac:	d02b      	beq.n	8006c06 <HAL_RCC_OscConfig+0x202>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bae:	68e2      	ldr	r2, [r4, #12]
 8006bb0:	2a00      	cmp	r2, #0
 8006bb2:	f000 8103 	beq.w	8006dbc <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bb6:	493f      	ldr	r1, [pc, #252]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006bb8:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bba:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bbc:	f023 0319 	bic.w	r3, r3, #25
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8006bc4:	f7fc fe1a 	bl	80037fc <HAL_GetTick>
 8006bc8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bca:	e005      	b.n	8006bd8 <HAL_RCC_OscConfig+0x1d4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bcc:	f7fc fe16 	bl	80037fc <HAL_GetTick>
 8006bd0:	1b80      	subs	r0, r0, r6
 8006bd2:	2802      	cmp	r0, #2
 8006bd4:	f200 809d 	bhi.w	8006d12 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	075f      	lsls	r7, r3, #29
 8006bdc:	d5f6      	bpl.n	8006bcc <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bde:	f7fc fe25 	bl	800382c <HAL_GetREVID>
 8006be2:	f241 0303 	movw	r3, #4099	; 0x1003
 8006be6:	4298      	cmp	r0, r3
 8006be8:	f200 81e2 	bhi.w	8006fb0 <HAL_RCC_OscConfig+0x5ac>
 8006bec:	6922      	ldr	r2, [r4, #16]
 8006bee:	686b      	ldr	r3, [r5, #4]
 8006bf0:	2a40      	cmp	r2, #64	; 0x40
 8006bf2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006bf6:	bf0c      	ite	eq
 8006bf8:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8006bfc:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8006c00:	606b      	str	r3, [r5, #4]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	e73d      	b.n	8006a82 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c06:	0792      	lsls	r2, r2, #30
 8006c08:	d1d1      	bne.n	8006bae <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c0a:	4b2a      	ldr	r3, [pc, #168]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	075b      	lsls	r3, r3, #29
 8006c10:	d501      	bpl.n	8006c16 <HAL_RCC_OscConfig+0x212>
 8006c12:	68e3      	ldr	r3, [r4, #12]
 8006c14:	b30b      	cbz	r3, 8006c5a <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c16:	f7fc fe09 	bl	800382c <HAL_GetREVID>
 8006c1a:	f241 0303 	movw	r3, #4099	; 0x1003
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	f200 80e0 	bhi.w	8006de4 <HAL_RCC_OscConfig+0x3e0>
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	2a40      	cmp	r2, #64	; 0x40
 8006c28:	f000 80f8 	beq.w	8006e1c <HAL_RCC_OscConfig+0x418>
 8006c2c:	4921      	ldr	r1, [pc, #132]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006c2e:	684b      	ldr	r3, [r1, #4]
 8006c30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c34:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006c38:	604b      	str	r3, [r1, #4]
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	e721      	b.n	8006a82 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c3e:	f001 0103 	and.w	r1, r1, #3
 8006c42:	2902      	cmp	r1, #2
 8006c44:	f47f aef1 	bne.w	8006a2a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c48:	4a1a      	ldr	r2, [pc, #104]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	0392      	lsls	r2, r2, #14
 8006c4e:	f57f af15 	bpl.w	8006a7c <HAL_RCC_OscConfig+0x78>
 8006c52:	6862      	ldr	r2, [r4, #4]
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	f47f af11 	bne.w	8006a7c <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 8006c5a:	2001      	movs	r0, #1
}
 8006c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c5e:	f002 0203 	and.w	r2, r2, #3
 8006c62:	2a01      	cmp	r2, #1
 8006c64:	f47f af1a 	bne.w	8006a9c <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c68:	4b12      	ldr	r3, [pc, #72]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	05da      	lsls	r2, r3, #23
 8006c6e:	d502      	bpl.n	8006c76 <HAL_RCC_OscConfig+0x272>
 8006c70:	69e3      	ldr	r3, [r4, #28]
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d1f1      	bne.n	8006c5a <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c76:	f7fc fdd9 	bl	800382c <HAL_GetREVID>
 8006c7a:	f241 0303 	movw	r3, #4099	; 0x1003
 8006c7e:	4298      	cmp	r0, r3
 8006c80:	f200 80ba 	bhi.w	8006df8 <HAL_RCC_OscConfig+0x3f4>
 8006c84:	6a22      	ldr	r2, [r4, #32]
 8006c86:	2a20      	cmp	r2, #32
 8006c88:	f000 81a1 	beq.w	8006fce <HAL_RCC_OscConfig+0x5ca>
 8006c8c:	4909      	ldr	r1, [pc, #36]	; (8006cb4 <HAL_RCC_OscConfig+0x2b0>)
 8006c8e:	684b      	ldr	r3, [r1, #4]
 8006c90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c94:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006c98:	604b      	str	r3, [r1, #4]
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	e728      	b.n	8006af0 <HAL_RCC_OscConfig+0xec>
    PWR->CR1 |= PWR_CR1_DBP;
 8006c9e:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <HAL_RCC_OscConfig+0x2b4>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ca2:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8006ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ca8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006caa:	f7fc fda7 	bl	80037fc <HAL_GetTick>
 8006cae:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cb0:	e009      	b.n	8006cc6 <HAL_RCC_OscConfig+0x2c2>
 8006cb2:	bf00      	nop
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cbc:	f7fc fd9e 	bl	80037fc <HAL_GetTick>
 8006cc0:	1b80      	subs	r0, r0, r6
 8006cc2:	2864      	cmp	r0, #100	; 0x64
 8006cc4:	d825      	bhi.n	8006d12 <HAL_RCC_OscConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	05da      	lsls	r2, r3, #23
 8006cca:	d5f7      	bpl.n	8006cbc <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ccc:	68a3      	ldr	r3, [r4, #8]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	f000 8177 	beq.w	8006fc2 <HAL_RCC_OscConfig+0x5be>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 8142 	beq.w	8006f5e <HAL_RCC_OscConfig+0x55a>
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	4bb1      	ldr	r3, [pc, #708]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
 8006cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ce0:	f000 817e 	beq.w	8006fe0 <HAL_RCC_OscConfig+0x5dc>
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	671a      	str	r2, [r3, #112]	; 0x70
 8006cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cec:	f022 0204 	bic.w	r2, r2, #4
 8006cf0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006cf2:	f7fc fd83 	bl	80037fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cf6:	4dab      	ldr	r5, [pc, #684]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
      tickstart = HAL_GetTick();
 8006cf8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cfa:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cfe:	e004      	b.n	8006d0a <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d00:	f7fc fd7c 	bl	80037fc <HAL_GetTick>
 8006d04:	1bc0      	subs	r0, r0, r7
 8006d06:	42b0      	cmp	r0, r6
 8006d08:	d803      	bhi.n	8006d12 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d0a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006d0c:	079b      	lsls	r3, r3, #30
 8006d0e:	d5f7      	bpl.n	8006d00 <HAL_RCC_OscConfig+0x2fc>
 8006d10:	e725      	b.n	8006b5e <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8006d12:	2003      	movs	r0, #3
}
 8006d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d16:	4ba3      	ldr	r3, [pc, #652]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
 8006d18:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d1a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006d2a:	f7fc fd67 	bl	80037fc <HAL_GetTick>
 8006d2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d30:	e004      	b.n	8006d3c <HAL_RCC_OscConfig+0x338>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d32:	f7fc fd63 	bl	80037fc <HAL_GetTick>
 8006d36:	1b80      	subs	r0, r0, r6
 8006d38:	2864      	cmp	r0, #100	; 0x64
 8006d3a:	d8ea      	bhi.n	8006d12 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	0398      	lsls	r0, r3, #14
 8006d40:	d4f7      	bmi.n	8006d32 <HAL_RCC_OscConfig+0x32e>
 8006d42:	e69a      	b.n	8006a7a <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 8006d44:	2001      	movs	r0, #1
}
 8006d46:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8006d48:	4b96      	ldr	r3, [pc, #600]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
 8006d4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d4c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006d54:	f7fc fd52 	bl	80037fc <HAL_GetTick>
 8006d58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d5a:	e004      	b.n	8006d66 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d5c:	f7fc fd4e 	bl	80037fc <HAL_GetTick>
 8006d60:	1b80      	subs	r0, r0, r6
 8006d62:	2802      	cmp	r0, #2
 8006d64:	d8d5      	bhi.n	8006d12 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006d68:	0799      	lsls	r1, r3, #30
 8006d6a:	d4f7      	bmi.n	8006d5c <HAL_RCC_OscConfig+0x358>
 8006d6c:	e6d9      	b.n	8006b22 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSI48_DISABLE();
 8006d6e:	4b8d      	ldr	r3, [pc, #564]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
 8006d70:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d72:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8006d74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d78:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006d7a:	f7fc fd3f 	bl	80037fc <HAL_GetTick>
 8006d7e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d80:	e004      	b.n	8006d8c <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d82:	f7fc fd3b 	bl	80037fc <HAL_GetTick>
 8006d86:	1b80      	subs	r0, r0, r6
 8006d88:	2802      	cmp	r0, #2
 8006d8a:	d8c2      	bhi.n	8006d12 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	0498      	lsls	r0, r3, #18
 8006d90:	d4f7      	bmi.n	8006d82 <HAL_RCC_OscConfig+0x37e>
 8006d92:	e6e0      	b.n	8006b56 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_DISABLE();
 8006d94:	4b83      	ldr	r3, [pc, #524]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
 8006d96:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d98:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8006d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006da0:	f7fc fd2c 	bl	80037fc <HAL_GetTick>
 8006da4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006da6:	e004      	b.n	8006db2 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006da8:	f7fc fd28 	bl	80037fc <HAL_GetTick>
 8006dac:	1b80      	subs	r0, r0, r6
 8006dae:	2802      	cmp	r0, #2
 8006db0:	d8af      	bhi.n	8006d12 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	05df      	lsls	r7, r3, #23
 8006db6:	d4f7      	bmi.n	8006da8 <HAL_RCC_OscConfig+0x3a4>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	e699      	b.n	8006af0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8006dbc:	4b79      	ldr	r3, [pc, #484]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dc0:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006dc8:	f7fc fd18 	bl	80037fc <HAL_GetTick>
 8006dcc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dce:	e004      	b.n	8006dda <HAL_RCC_OscConfig+0x3d6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dd0:	f7fc fd14 	bl	80037fc <HAL_GetTick>
 8006dd4:	1b80      	subs	r0, r0, r6
 8006dd6:	2802      	cmp	r0, #2
 8006dd8:	d89b      	bhi.n	8006d12 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dda:	682b      	ldr	r3, [r5, #0]
 8006ddc:	0758      	lsls	r0, r3, #29
 8006dde:	d4f7      	bmi.n	8006dd0 <HAL_RCC_OscConfig+0x3cc>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	e64e      	b.n	8006a82 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de4:	4a6f      	ldr	r2, [pc, #444]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
 8006de6:	6921      	ldr	r1, [r4, #16]
 8006de8:	6853      	ldr	r3, [r2, #4]
 8006dea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006dee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006df2:	6053      	str	r3, [r2, #4]
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	e644      	b.n	8006a82 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006df8:	4a6a      	ldr	r2, [pc, #424]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
 8006dfa:	6a21      	ldr	r1, [r4, #32]
 8006dfc:	68d3      	ldr	r3, [r2, #12]
 8006dfe:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006e02:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006e06:	60d3      	str	r3, [r2, #12]
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	e671      	b.n	8006af0 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e0c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e620      	b.n	8006a5e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e1c:	4a61      	ldr	r2, [pc, #388]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
 8006e1e:	6853      	ldr	r3, [r2, #4]
 8006e20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e28:	6053      	str	r3, [r2, #4]
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	e629      	b.n	8006a82 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_PLL_DISABLE();
 8006e2e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e32:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8006e34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006e36:	f7fc fce1 	bl	80037fc <HAL_GetTick>
 8006e3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e3c:	e005      	b.n	8006e4a <HAL_RCC_OscConfig+0x446>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e3e:	f7fc fcdd 	bl	80037fc <HAL_GetTick>
 8006e42:	1b80      	subs	r0, r0, r6
 8006e44:	2802      	cmp	r0, #2
 8006e46:	f63f af64 	bhi.w	8006d12 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	0199      	lsls	r1, r3, #6
 8006e4e:	d4f6      	bmi.n	8006e3e <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006e52:	4b55      	ldr	r3, [pc, #340]	; (8006fa8 <HAL_RCC_OscConfig+0x5a4>)
 8006e54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006e56:	4013      	ands	r3, r2
 8006e58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e5a:	4954      	ldr	r1, [pc, #336]	; (8006fac <HAL_RCC_OscConfig+0x5a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e5c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e5e:	4e51      	ldr	r6, [pc, #324]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e60:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006e64:	62ab      	str	r3, [r5, #40]	; 0x28
 8006e66:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8006e68:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8006e6c:	3f01      	subs	r7, #1
 8006e6e:	1e50      	subs	r0, r2, #1
 8006e70:	3b01      	subs	r3, #1
 8006e72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006e74:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006e78:	025b      	lsls	r3, r3, #9
 8006e7a:	0400      	lsls	r0, r0, #16
 8006e7c:	3a01      	subs	r2, #1
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006e84:	0612      	lsls	r2, r2, #24
 8006e86:	4303      	orrs	r3, r0
 8006e88:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006e8c:	433b      	orrs	r3, r7
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006e92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006e94:	f023 0301 	bic.w	r3, r3, #1
 8006e98:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e9a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006e9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e9e:	4011      	ands	r1, r2
 8006ea0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006ea4:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ea6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ea8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006eaa:	f023 030c 	bic.w	r3, r3, #12
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006eb2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006eb4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006eb6:	f023 0302 	bic.w	r3, r3, #2
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ebe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ecc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ece:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ed4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006ed6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006ede:	682b      	ldr	r3, [r5, #0]
 8006ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ee4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ee6:	f7fc fc89 	bl	80037fc <HAL_GetTick>
 8006eea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eec:	e005      	b.n	8006efa <HAL_RCC_OscConfig+0x4f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eee:	f7fc fc85 	bl	80037fc <HAL_GetTick>
 8006ef2:	1b00      	subs	r0, r0, r4
 8006ef4:	2802      	cmp	r0, #2
 8006ef6:	f63f af0c 	bhi.w	8006d12 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006efa:	6833      	ldr	r3, [r6, #0]
 8006efc:	019a      	lsls	r2, r3, #6
 8006efe:	d5f6      	bpl.n	8006eee <HAL_RCC_OscConfig+0x4ea>
 8006f00:	e64b      	b.n	8006b9a <HAL_RCC_OscConfig+0x196>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f02:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f06:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f08:	f43f ae48 	beq.w	8006b9c <HAL_RCC_OscConfig+0x198>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f0c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006f12:	428b      	cmp	r3, r1
 8006f14:	f47f aea1 	bne.w	8006c5a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f18:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	f47f ae9b 	bne.w	8006c5a <HAL_RCC_OscConfig+0x256>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f26:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8006f2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	f47f ae94 	bne.w	8006c5a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f34:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8006f38:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	f47f ae8d 	bne.w	8006c5a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f42:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8006f46:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	f47f ae86 	bne.w	8006c5a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006f50:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8006f54:	3801      	subs	r0, #1
    return HAL_ERROR;
 8006f56:	1a28      	subs	r0, r5, r0
 8006f58:	bf18      	it	ne
 8006f5a:	2001      	movne	r0, #1
 8006f5c:	e61e      	b.n	8006b9c <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f5e:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <HAL_RCC_OscConfig+0x5a0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f60:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f66:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	671a      	str	r2, [r3, #112]	; 0x70
 8006f6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f70:	f022 0204 	bic.w	r2, r2, #4
 8006f74:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006f76:	f7fc fc41 	bl	80037fc <HAL_GetTick>
 8006f7a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f7c:	e005      	b.n	8006f8a <HAL_RCC_OscConfig+0x586>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f7e:	f7fc fc3d 	bl	80037fc <HAL_GetTick>
 8006f82:	1b80      	subs	r0, r0, r6
 8006f84:	42b8      	cmp	r0, r7
 8006f86:	f63f aec4 	bhi.w	8006d12 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006f8c:	0798      	lsls	r0, r3, #30
 8006f8e:	d4f6      	bmi.n	8006f7e <HAL_RCC_OscConfig+0x57a>
 8006f90:	e5e5      	b.n	8006b5e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f92:	68eb      	ldr	r3, [r5, #12]
 8006f94:	6a22      	ldr	r2, [r4, #32]
 8006f96:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006f9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f9e:	60eb      	str	r3, [r5, #12]
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	e5a5      	b.n	8006af0 <HAL_RCC_OscConfig+0xec>
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	fffffc0c 	.word	0xfffffc0c
 8006fac:	ffff0007 	.word	0xffff0007
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb0:	686b      	ldr	r3, [r5, #4]
 8006fb2:	6922      	ldr	r2, [r4, #16]
 8006fb4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006fb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006fbc:	606b      	str	r3, [r5, #4]
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	e55f      	b.n	8006a82 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fc2:	4a0b      	ldr	r2, [pc, #44]	; (8006ff0 <HAL_RCC_OscConfig+0x5ec>)
 8006fc4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	6713      	str	r3, [r2, #112]	; 0x70
 8006fcc:	e691      	b.n	8006cf2 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fce:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <HAL_RCC_OscConfig+0x5ec>)
 8006fd0:	6853      	ldr	r3, [r2, #4]
 8006fd2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006fd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fda:	6053      	str	r3, [r2, #4]
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	e587      	b.n	8006af0 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fe0:	f042 0204 	orr.w	r2, r2, #4
 8006fe4:	671a      	str	r2, [r3, #112]	; 0x70
 8006fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fe8:	f042 0201 	orr.w	r2, r2, #1
 8006fec:	671a      	str	r2, [r3, #112]	; 0x70
 8006fee:	e680      	b.n	8006cf2 <HAL_RCC_OscConfig+0x2ee>
 8006ff0:	58024400 	.word	0x58024400

08006ff4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ff4:	4a3e      	ldr	r2, [pc, #248]	; (80070f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006ff6:	6913      	ldr	r3, [r2, #16]
 8006ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d04f      	beq.n	80070a0 <HAL_RCC_GetSysClockFreq+0xac>
 8007000:	2b18      	cmp	r3, #24
 8007002:	d00b      	beq.n	800701c <HAL_RCC_GetSysClockFreq+0x28>
 8007004:	b10b      	cbz	r3, 800700a <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007006:	483b      	ldr	r0, [pc, #236]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8007008:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800700a:	6813      	ldr	r3, [r2, #0]
 800700c:	0699      	lsls	r1, r3, #26
 800700e:	d549      	bpl.n	80070a4 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007010:	6813      	ldr	r3, [r2, #0]
 8007012:	4839      	ldr	r0, [pc, #228]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8007014:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007018:	40d8      	lsrs	r0, r3
 800701a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800701c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800701e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007020:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007022:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8007026:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007028:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 800702a:	b3b0      	cbz	r0, 800709a <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800702c:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007030:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007034:	f001 0103 	and.w	r1, r1, #3
 8007038:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800703c:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8007040:	2901      	cmp	r1, #1
 8007042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007046:	ee07 3a10 	vmov	s14, r3
 800704a:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 800704e:	d002      	beq.n	8007056 <HAL_RCC_GetSysClockFreq+0x62>
 8007050:	d32d      	bcc.n	80070ae <HAL_RCC_GetSysClockFreq+0xba>
 8007052:	2902      	cmp	r1, #2
 8007054:	d028      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007056:	eddf 5a29 	vldr	s11, [pc, #164]	; 80070fc <HAL_RCC_GetSysClockFreq+0x108>
 800705a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800705e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007064:	ee07 3a90 	vmov	s15, r3
 8007068:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800706c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007070:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007078:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800707c:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007084:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800708e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007096:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800709a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800709e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80070a0:	4817      	ldr	r0, [pc, #92]	; (8007100 <HAL_RCC_GetSysClockFreq+0x10c>)
 80070a2:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070a4:	4814      	ldr	r0, [pc, #80]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80070a6:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070a8:	eddf 5a16 	vldr	s11, [pc, #88]	; 8007104 <HAL_RCC_GetSysClockFreq+0x110>
 80070ac:	e7d5      	b.n	800705a <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ae:	6813      	ldr	r3, [r2, #0]
 80070b0:	069b      	lsls	r3, r3, #26
 80070b2:	d51a      	bpl.n	80070ea <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070b4:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070b6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070ba:	490f      	ldr	r1, [pc, #60]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80070bc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070c2:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c8:	ee06 1a90 	vmov	s13, r1
 80070cc:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 80070d0:	ee06 3a90 	vmov	s13, r3
 80070d4:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80070d8:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80070dc:	ee76 7a05 	vadd.f32	s15, s12, s10
 80070e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070e4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80070e8:	e7c8      	b.n	800707c <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070ea:	eddf 5a07 	vldr	s11, [pc, #28]	; 8007108 <HAL_RCC_GetSysClockFreq+0x114>
 80070ee:	e7b4      	b.n	800705a <HAL_RCC_GetSysClockFreq+0x66>
 80070f0:	58024400 	.word	0x58024400
 80070f4:	003d0900 	.word	0x003d0900
 80070f8:	03d09000 	.word	0x03d09000
 80070fc:	4a742400 	.word	0x4a742400
 8007100:	017d7840 	.word	0x017d7840
 8007104:	4bbebc20 	.word	0x4bbebc20
 8007108:	4c742400 	.word	0x4c742400

0800710c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800710c:	b178      	cbz	r0, 800712e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800710e:	4a8e      	ldr	r2, [pc, #568]	; (8007348 <HAL_RCC_ClockConfig+0x23c>)
 8007110:	6813      	ldr	r3, [r2, #0]
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	428b      	cmp	r3, r1
 8007118:	d20b      	bcs.n	8007132 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	f023 030f 	bic.w	r3, r3, #15
 8007120:	430b      	orrs	r3, r1
 8007122:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007124:	6813      	ldr	r3, [r2, #0]
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	428b      	cmp	r3, r1
 800712c:	d001      	beq.n	8007132 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800712e:	2001      	movs	r0, #1
}
 8007130:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007132:	6803      	ldr	r3, [r0, #0]
{
 8007134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007138:	075d      	lsls	r5, r3, #29
 800713a:	d50b      	bpl.n	8007154 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800713c:	4c83      	ldr	r4, [pc, #524]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 800713e:	6905      	ldr	r5, [r0, #16]
 8007140:	69a2      	ldr	r2, [r4, #24]
 8007142:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007146:	4295      	cmp	r5, r2
 8007148:	d904      	bls.n	8007154 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800714a:	69a2      	ldr	r2, [r4, #24]
 800714c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007150:	432a      	orrs	r2, r5
 8007152:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007154:	071c      	lsls	r4, r3, #28
 8007156:	d50b      	bpl.n	8007170 <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007158:	4c7c      	ldr	r4, [pc, #496]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 800715a:	6945      	ldr	r5, [r0, #20]
 800715c:	69e2      	ldr	r2, [r4, #28]
 800715e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007162:	4295      	cmp	r5, r2
 8007164:	d904      	bls.n	8007170 <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007166:	69e2      	ldr	r2, [r4, #28]
 8007168:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800716c:	432a      	orrs	r2, r5
 800716e:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007170:	06da      	lsls	r2, r3, #27
 8007172:	d50b      	bpl.n	800718c <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007174:	4c75      	ldr	r4, [pc, #468]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 8007176:	6985      	ldr	r5, [r0, #24]
 8007178:	69e2      	ldr	r2, [r4, #28]
 800717a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800717e:	4295      	cmp	r5, r2
 8007180:	d904      	bls.n	800718c <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007182:	69e2      	ldr	r2, [r4, #28]
 8007184:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007188:	432a      	orrs	r2, r5
 800718a:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800718c:	069f      	lsls	r7, r3, #26
 800718e:	d50b      	bpl.n	80071a8 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007190:	4c6e      	ldr	r4, [pc, #440]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 8007192:	69c5      	ldr	r5, [r0, #28]
 8007194:	6a22      	ldr	r2, [r4, #32]
 8007196:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800719a:	4295      	cmp	r5, r2
 800719c:	d904      	bls.n	80071a8 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800719e:	6a22      	ldr	r2, [r4, #32]
 80071a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80071a4:	432a      	orrs	r2, r5
 80071a6:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071a8:	079e      	lsls	r6, r3, #30
 80071aa:	4604      	mov	r4, r0
 80071ac:	460d      	mov	r5, r1
 80071ae:	f003 0201 	and.w	r2, r3, #1
 80071b2:	d55d      	bpl.n	8007270 <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071b4:	4e65      	ldr	r6, [pc, #404]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 80071b6:	68c0      	ldr	r0, [r0, #12]
 80071b8:	69b1      	ldr	r1, [r6, #24]
 80071ba:	f001 010f 	and.w	r1, r1, #15
 80071be:	4288      	cmp	r0, r1
 80071c0:	d904      	bls.n	80071cc <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071c2:	69b1      	ldr	r1, [r6, #24]
 80071c4:	f021 010f 	bic.w	r1, r1, #15
 80071c8:	4301      	orrs	r1, r0
 80071ca:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	d031      	beq.n	8007234 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80071d0:	4a5e      	ldr	r2, [pc, #376]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 80071d2:	68a1      	ldr	r1, [r4, #8]
 80071d4:	6993      	ldr	r3, [r2, #24]
 80071d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071da:	430b      	orrs	r3, r1
 80071dc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071de:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071e0:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	f000 80a2 	beq.w	800732c <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	f000 80a5 	beq.w	8007338 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	f000 80a6 	beq.w	8007340 <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071f4:	0757      	lsls	r7, r2, #29
 80071f6:	d538      	bpl.n	800726a <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071f8:	4954      	ldr	r1, [pc, #336]	; (800734c <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071fa:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071fe:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007200:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007202:	f022 0207 	bic.w	r2, r2, #7
 8007206:	4313      	orrs	r3, r2
 8007208:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800720a:	f7fc faf7 	bl	80037fc <HAL_GetTick>
 800720e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007210:	e005      	b.n	800721e <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007212:	f7fc faf3 	bl	80037fc <HAL_GetTick>
 8007216:	1bc0      	subs	r0, r0, r7
 8007218:	4540      	cmp	r0, r8
 800721a:	f200 808b 	bhi.w	8007334 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721e:	6933      	ldr	r3, [r6, #16]
 8007220:	6862      	ldr	r2, [r4, #4]
 8007222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007226:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800722a:	d1f2      	bne.n	8007212 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	079e      	lsls	r6, r3, #30
 8007230:	d50b      	bpl.n	800724a <HAL_RCC_ClockConfig+0x13e>
 8007232:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007234:	4945      	ldr	r1, [pc, #276]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 8007236:	698a      	ldr	r2, [r1, #24]
 8007238:	f002 020f 	and.w	r2, r2, #15
 800723c:	4282      	cmp	r2, r0
 800723e:	d904      	bls.n	800724a <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007240:	698a      	ldr	r2, [r1, #24]
 8007242:	f022 020f 	bic.w	r2, r2, #15
 8007246:	4310      	orrs	r0, r2
 8007248:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800724a:	493f      	ldr	r1, [pc, #252]	; (8007348 <HAL_RCC_ClockConfig+0x23c>)
 800724c:	680a      	ldr	r2, [r1, #0]
 800724e:	f002 020f 	and.w	r2, r2, #15
 8007252:	42aa      	cmp	r2, r5
 8007254:	d914      	bls.n	8007280 <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007256:	680a      	ldr	r2, [r1, #0]
 8007258:	f022 020f 	bic.w	r2, r2, #15
 800725c:	432a      	orrs	r2, r5
 800725e:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007260:	680a      	ldr	r2, [r1, #0]
 8007262:	f002 020f 	and.w	r2, r2, #15
 8007266:	42aa      	cmp	r2, r5
 8007268:	d00a      	beq.n	8007280 <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 800726a:	2001      	movs	r0, #1
}
 800726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007270:	2a00      	cmp	r2, #0
 8007272:	d1ad      	bne.n	80071d0 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007274:	4934      	ldr	r1, [pc, #208]	; (8007348 <HAL_RCC_ClockConfig+0x23c>)
 8007276:	680a      	ldr	r2, [r1, #0]
 8007278:	f002 020f 	and.w	r2, r2, #15
 800727c:	42aa      	cmp	r2, r5
 800727e:	d8ea      	bhi.n	8007256 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007280:	0758      	lsls	r0, r3, #29
 8007282:	d50b      	bpl.n	800729c <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007284:	4931      	ldr	r1, [pc, #196]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 8007286:	6920      	ldr	r0, [r4, #16]
 8007288:	698a      	ldr	r2, [r1, #24]
 800728a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800728e:	4290      	cmp	r0, r2
 8007290:	d204      	bcs.n	800729c <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007292:	698a      	ldr	r2, [r1, #24]
 8007294:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007298:	4302      	orrs	r2, r0
 800729a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800729c:	0719      	lsls	r1, r3, #28
 800729e:	d50b      	bpl.n	80072b8 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072a0:	492a      	ldr	r1, [pc, #168]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 80072a2:	6960      	ldr	r0, [r4, #20]
 80072a4:	69ca      	ldr	r2, [r1, #28]
 80072a6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80072aa:	4290      	cmp	r0, r2
 80072ac:	d204      	bcs.n	80072b8 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072ae:	69ca      	ldr	r2, [r1, #28]
 80072b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072b4:	4302      	orrs	r2, r0
 80072b6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072b8:	06da      	lsls	r2, r3, #27
 80072ba:	d50b      	bpl.n	80072d4 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072bc:	4923      	ldr	r1, [pc, #140]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 80072be:	69a0      	ldr	r0, [r4, #24]
 80072c0:	69ca      	ldr	r2, [r1, #28]
 80072c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80072c6:	4290      	cmp	r0, r2
 80072c8:	d204      	bcs.n	80072d4 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072ca:	69ca      	ldr	r2, [r1, #28]
 80072cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072d0:	4302      	orrs	r2, r0
 80072d2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072d4:	069b      	lsls	r3, r3, #26
 80072d6:	d50b      	bpl.n	80072f0 <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072d8:	4a1c      	ldr	r2, [pc, #112]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 80072da:	69e1      	ldr	r1, [r4, #28]
 80072dc:	6a13      	ldr	r3, [r2, #32]
 80072de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072e2:	4299      	cmp	r1, r3
 80072e4:	d204      	bcs.n	80072f0 <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80072e6:	6a13      	ldr	r3, [r2, #32]
 80072e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ec:	430b      	orrs	r3, r1
 80072ee:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072f0:	f7ff fe80 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 80072f4:	4a15      	ldr	r2, [pc, #84]	; (800734c <HAL_RCC_ClockConfig+0x240>)
 80072f6:	4916      	ldr	r1, [pc, #88]	; (8007350 <HAL_RCC_ClockConfig+0x244>)
 80072f8:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072fa:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072fc:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8007300:	4d14      	ldr	r5, [pc, #80]	; (8007354 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007302:	f002 020f 	and.w	r2, r2, #15
 8007306:	4c14      	ldr	r4, [pc, #80]	; (8007358 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007308:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800730a:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800730c:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8007310:	4912      	ldr	r1, [pc, #72]	; (800735c <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007312:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007316:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 800731a:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800731c:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8007320:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007322:	6022      	str	r2, [r4, #0]
}
 8007324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8007328:	f7fc ba04 	b.w	8003734 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800732c:	0390      	lsls	r0, r2, #14
 800732e:	f53f af63 	bmi.w	80071f8 <HAL_RCC_ClockConfig+0xec>
 8007332:	e79a      	b.n	800726a <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 8007334:	2003      	movs	r0, #3
 8007336:	e799      	b.n	800726c <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007338:	0191      	lsls	r1, r2, #6
 800733a:	f53f af5d 	bmi.w	80071f8 <HAL_RCC_ClockConfig+0xec>
 800733e:	e794      	b.n	800726a <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007340:	05d2      	lsls	r2, r2, #23
 8007342:	f53f af59 	bmi.w	80071f8 <HAL_RCC_ClockConfig+0xec>
 8007346:	e790      	b.n	800726a <HAL_RCC_ClockConfig+0x15e>
 8007348:	52002000 	.word	0x52002000
 800734c:	58024400 	.word	0x58024400
 8007350:	08016394 	.word	0x08016394
 8007354:	24000200 	.word	0x24000200
 8007358:	240001f8 	.word	0x240001f8
 800735c:	240001f4 	.word	0x240001f4

08007360 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007360:	4a49      	ldr	r2, [pc, #292]	; (8007488 <HAL_RCC_GetHCLKFreq+0x128>)
 8007362:	6913      	ldr	r3, [r2, #16]
 8007364:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007368:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800736a:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800736c:	d064      	beq.n	8007438 <HAL_RCC_GetHCLKFreq+0xd8>
 800736e:	2b18      	cmp	r3, #24
 8007370:	d022      	beq.n	80073b8 <HAL_RCC_GetHCLKFreq+0x58>
 8007372:	b1bb      	cbz	r3, 80073a4 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8007374:	4b45      	ldr	r3, [pc, #276]	; (800748c <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007376:	4944      	ldr	r1, [pc, #272]	; (8007488 <HAL_RCC_GetHCLKFreq+0x128>)
 8007378:	4845      	ldr	r0, [pc, #276]	; (8007490 <HAL_RCC_GetHCLKFreq+0x130>)
 800737a:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800737c:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800737e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007382:	4c44      	ldr	r4, [pc, #272]	; (8007494 <HAL_RCC_GetHCLKFreq+0x134>)
 8007384:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007388:	4d43      	ldr	r5, [pc, #268]	; (8007498 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800738a:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800738c:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800738e:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007392:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007396:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007398:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 800739c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800739e:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80073a0:	bc30      	pop	{r4, r5}
 80073a2:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a4:	6813      	ldr	r3, [r2, #0]
 80073a6:	0699      	lsls	r1, r3, #26
 80073a8:	d548      	bpl.n	800743c <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	4a3b      	ldr	r2, [pc, #236]	; (800749c <HAL_RCC_GetHCLKFreq+0x13c>)
 80073ae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80073b2:	fa22 f303 	lsr.w	r3, r2, r3
 80073b6:	e7de      	b.n	8007376 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073b8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80073ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80073bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80073be:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073c2:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0d6      	beq.n	8007376 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073c8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80073cc:	f001 0101 	and.w	r1, r1, #1
 80073d0:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073d4:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073d8:	fb01 f304 	mul.w	r3, r1, r4
 80073dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80073e0:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80073ea:	d002      	beq.n	80073f2 <HAL_RCC_GetHCLKFreq+0x92>
 80073ec:	d32b      	bcc.n	8007446 <HAL_RCC_GetHCLKFreq+0xe6>
 80073ee:	2802      	cmp	r0, #2
 80073f0:	d026      	beq.n	8007440 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073f2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80074a0 <HAL_RCC_GetHCLKFreq+0x140>
 80073f6:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80073fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80073fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007400:	ee07 3a10 	vmov	s14, r3
 8007404:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800740c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007414:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007418:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <HAL_RCC_GetHCLKFreq+0x128>)
 800741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007420:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007422:	ee07 3a10 	vmov	s14, r3
 8007426:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800742a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800742e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8007432:	ee17 3a90 	vmov	r3, s15
 8007436:	e79e      	b.n	8007376 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8007438:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <HAL_RCC_GetHCLKFreq+0x144>)
 800743a:	e79c      	b.n	8007376 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800743c:	4b17      	ldr	r3, [pc, #92]	; (800749c <HAL_RCC_GetHCLKFreq+0x13c>)
 800743e:	e79a      	b.n	8007376 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007440:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80074a8 <HAL_RCC_GetHCLKFreq+0x148>
 8007444:	e7d7      	b.n	80073f6 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007446:	6813      	ldr	r3, [r2, #0]
 8007448:	069b      	lsls	r3, r3, #26
 800744a:	d51a      	bpl.n	8007482 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800744c:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800744e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007452:	4912      	ldr	r1, [pc, #72]	; (800749c <HAL_RCC_GetHCLKFreq+0x13c>)
 8007454:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007458:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800745a:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800745c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007460:	ee07 1a10 	vmov	s14, r1
 8007464:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007468:	ee07 3a10 	vmov	s14, r3
 800746c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8007470:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007474:	ee76 6a05 	vadd.f32	s13, s12, s10
 8007478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007480:	e7ca      	b.n	8007418 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007482:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80074ac <HAL_RCC_GetHCLKFreq+0x14c>
 8007486:	e7b6      	b.n	80073f6 <HAL_RCC_GetHCLKFreq+0x96>
 8007488:	58024400 	.word	0x58024400
 800748c:	003d0900 	.word	0x003d0900
 8007490:	08016394 	.word	0x08016394
 8007494:	240001f8 	.word	0x240001f8
 8007498:	240001f4 	.word	0x240001f4
 800749c:	03d09000 	.word	0x03d09000
 80074a0:	4a742400 	.word	0x4a742400
 80074a4:	017d7840 	.word	0x017d7840
 80074a8:	4bbebc20 	.word	0x4bbebc20
 80074ac:	4c742400 	.word	0x4c742400

080074b0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074b0:	494d      	ldr	r1, [pc, #308]	; (80075e8 <HAL_RCC_GetPCLK1Freq+0x138>)
 80074b2:	690b      	ldr	r3, [r1, #16]
 80074b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074b8:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074ba:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074bc:	d06b      	beq.n	8007596 <HAL_RCC_GetPCLK1Freq+0xe6>
 80074be:	2b18      	cmp	r3, #24
 80074c0:	d029      	beq.n	8007516 <HAL_RCC_GetPCLK1Freq+0x66>
 80074c2:	b1fb      	cbz	r3, 8007504 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 80074c4:	4a49      	ldr	r2, [pc, #292]	; (80075ec <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074c6:	4848      	ldr	r0, [pc, #288]	; (80075e8 <HAL_RCC_GetPCLK1Freq+0x138>)
 80074c8:	4949      	ldr	r1, [pc, #292]	; (80075f0 <HAL_RCC_GetPCLK1Freq+0x140>)
 80074ca:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074cc:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074ce:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 80074d2:	4d48      	ldr	r5, [pc, #288]	; (80075f4 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074d4:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074d8:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074da:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074dc:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074e0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074e4:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074e6:	4c44      	ldr	r4, [pc, #272]	; (80075f8 <HAL_RCC_GetPCLK1Freq+0x148>)
 80074e8:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80074ec:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074ee:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80074f0:	69c2      	ldr	r2, [r0, #28]
 80074f2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80074f6:	5c88      	ldrb	r0, [r1, r2]
 80074f8:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80074fc:	bc30      	pop	{r4, r5}
 80074fe:	fa23 f000 	lsr.w	r0, r3, r0
 8007502:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007504:	680b      	ldr	r3, [r1, #0]
 8007506:	069a      	lsls	r2, r3, #26
 8007508:	d547      	bpl.n	800759a <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800750a:	680b      	ldr	r3, [r1, #0]
 800750c:	4a3b      	ldr	r2, [pc, #236]	; (80075fc <HAL_RCC_GetPCLK1Freq+0x14c>)
 800750e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007512:	40da      	lsrs	r2, r3
 8007514:	e7d7      	b.n	80074c6 <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007516:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007518:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800751a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800751c:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007520:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 8007522:	2a00      	cmp	r2, #0
 8007524:	d0cf      	beq.n	80074c6 <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007526:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007532:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007536:	fb03 f304 	mul.w	r3, r3, r4
 800753a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800753e:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8007548:	d002      	beq.n	8007550 <HAL_RCC_GetPCLK1Freq+0xa0>
 800754a:	d32b      	bcc.n	80075a4 <HAL_RCC_GetPCLK1Freq+0xf4>
 800754c:	2802      	cmp	r0, #2
 800754e:	d026      	beq.n	800759e <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007550:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007600 <HAL_RCC_GetPCLK1Freq+0x150>
 8007554:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8007558:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a10 	vmov	s14, r3
 8007562:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007566:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800756a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800756e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007572:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007576:	4b1c      	ldr	r3, [pc, #112]	; (80075e8 <HAL_RCC_GetPCLK1Freq+0x138>)
 8007578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800757e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007580:	ee07 3a10 	vmov	s14, r3
 8007584:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007588:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800758c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8007590:	ee17 2a90 	vmov	r2, s15
 8007594:	e797      	b.n	80074c6 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8007596:	4a1b      	ldr	r2, [pc, #108]	; (8007604 <HAL_RCC_GetPCLK1Freq+0x154>)
 8007598:	e795      	b.n	80074c6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <HAL_RCC_GetPCLK1Freq+0x14c>)
 800759c:	e793      	b.n	80074c6 <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800759e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007608 <HAL_RCC_GetPCLK1Freq+0x158>
 80075a2:	e7d7      	b.n	8007554 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a4:	680b      	ldr	r3, [r1, #0]
 80075a6:	069b      	lsls	r3, r3, #26
 80075a8:	d51a      	bpl.n	80075e0 <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075aa:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075ac:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075b0:	4a12      	ldr	r2, [pc, #72]	; (80075fc <HAL_RCC_GetPCLK1Freq+0x14c>)
 80075b2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075b8:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075be:	ee07 2a10 	vmov	s14, r2
 80075c2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80075c6:	ee07 3a10 	vmov	s14, r3
 80075ca:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80075ce:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80075d2:	ee76 6a05 	vadd.f32	s13, s12, s10
 80075d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075de:	e7ca      	b.n	8007576 <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075e0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800760c <HAL_RCC_GetPCLK1Freq+0x15c>
 80075e4:	e7b6      	b.n	8007554 <HAL_RCC_GetPCLK1Freq+0xa4>
 80075e6:	bf00      	nop
 80075e8:	58024400 	.word	0x58024400
 80075ec:	003d0900 	.word	0x003d0900
 80075f0:	08016394 	.word	0x08016394
 80075f4:	240001f4 	.word	0x240001f4
 80075f8:	240001f8 	.word	0x240001f8
 80075fc:	03d09000 	.word	0x03d09000
 8007600:	4a742400 	.word	0x4a742400
 8007604:	017d7840 	.word	0x017d7840
 8007608:	4bbebc20 	.word	0x4bbebc20
 800760c:	4c742400 	.word	0x4c742400

08007610 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007610:	494d      	ldr	r1, [pc, #308]	; (8007748 <HAL_RCC_GetPCLK2Freq+0x138>)
 8007612:	690b      	ldr	r3, [r1, #16]
 8007614:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007618:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800761a:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800761c:	d06b      	beq.n	80076f6 <HAL_RCC_GetPCLK2Freq+0xe6>
 800761e:	2b18      	cmp	r3, #24
 8007620:	d029      	beq.n	8007676 <HAL_RCC_GetPCLK2Freq+0x66>
 8007622:	b1fb      	cbz	r3, 8007664 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8007624:	4a49      	ldr	r2, [pc, #292]	; (800774c <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007626:	4848      	ldr	r0, [pc, #288]	; (8007748 <HAL_RCC_GetPCLK2Freq+0x138>)
 8007628:	4949      	ldr	r1, [pc, #292]	; (8007750 <HAL_RCC_GetPCLK2Freq+0x140>)
 800762a:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800762c:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800762e:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8007632:	4d48      	ldr	r5, [pc, #288]	; (8007754 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007634:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007638:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800763a:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800763c:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007640:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007644:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007646:	4c44      	ldr	r4, [pc, #272]	; (8007758 <HAL_RCC_GetPCLK2Freq+0x148>)
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800764c:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800764e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007650:	69c2      	ldr	r2, [r0, #28]
 8007652:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8007656:	5c88      	ldrb	r0, [r1, r2]
 8007658:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800765c:	bc30      	pop	{r4, r5}
 800765e:	fa23 f000 	lsr.w	r0, r3, r0
 8007662:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007664:	680b      	ldr	r3, [r1, #0]
 8007666:	069a      	lsls	r2, r3, #26
 8007668:	d547      	bpl.n	80076fa <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800766a:	680b      	ldr	r3, [r1, #0]
 800766c:	4a3b      	ldr	r2, [pc, #236]	; (800775c <HAL_RCC_GetPCLK2Freq+0x14c>)
 800766e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007672:	40da      	lsrs	r2, r3
 8007674:	e7d7      	b.n	8007626 <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007676:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007678:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800767a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800767c:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007680:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 8007682:	2a00      	cmp	r2, #0
 8007684:	d0cf      	beq.n	8007626 <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007686:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007692:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007696:	fb03 f304 	mul.w	r3, r3, r4
 800769a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800769e:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80076a8:	d002      	beq.n	80076b0 <HAL_RCC_GetPCLK2Freq+0xa0>
 80076aa:	d32b      	bcc.n	8007704 <HAL_RCC_GetPCLK2Freq+0xf4>
 80076ac:	2802      	cmp	r0, #2
 80076ae:	d026      	beq.n	80076fe <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076b0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007760 <HAL_RCC_GetPCLK2Freq+0x150>
 80076b4:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80076b8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	ee07 3a10 	vmov	s14, r3
 80076c2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80076c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80076ca:	ee37 7a25 	vadd.f32	s14, s14, s11
 80076ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076d2:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80076d6:	4b1c      	ldr	r3, [pc, #112]	; (8007748 <HAL_RCC_GetPCLK2Freq+0x138>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80076de:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80076e0:	ee07 3a10 	vmov	s14, r3
 80076e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80076e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80076ec:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80076f0:	ee17 2a90 	vmov	r2, s15
 80076f4:	e797      	b.n	8007626 <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 80076f6:	4a1b      	ldr	r2, [pc, #108]	; (8007764 <HAL_RCC_GetPCLK2Freq+0x154>)
 80076f8:	e795      	b.n	8007626 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80076fa:	4a18      	ldr	r2, [pc, #96]	; (800775c <HAL_RCC_GetPCLK2Freq+0x14c>)
 80076fc:	e793      	b.n	8007626 <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076fe:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007768 <HAL_RCC_GetPCLK2Freq+0x158>
 8007702:	e7d7      	b.n	80076b4 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007704:	680b      	ldr	r3, [r1, #0]
 8007706:	069b      	lsls	r3, r3, #26
 8007708:	d51a      	bpl.n	8007740 <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800770a:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800770c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007710:	4a12      	ldr	r2, [pc, #72]	; (800775c <HAL_RCC_GetPCLK2Freq+0x14c>)
 8007712:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007716:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007718:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800771a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771e:	ee07 2a10 	vmov	s14, r2
 8007722:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007726:	ee07 3a10 	vmov	s14, r3
 800772a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800772e:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007732:	ee76 6a05 	vadd.f32	s13, s12, s10
 8007736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773e:	e7ca      	b.n	80076d6 <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007740:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800776c <HAL_RCC_GetPCLK2Freq+0x15c>
 8007744:	e7b6      	b.n	80076b4 <HAL_RCC_GetPCLK2Freq+0xa4>
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
 800774c:	003d0900 	.word	0x003d0900
 8007750:	08016394 	.word	0x08016394
 8007754:	240001f4 	.word	0x240001f4
 8007758:	240001f8 	.word	0x240001f8
 800775c:	03d09000 	.word	0x03d09000
 8007760:	4a742400 	.word	0x4a742400
 8007764:	017d7840 	.word	0x017d7840
 8007768:	4bbebc20 	.word	0x4bbebc20
 800776c:	4c742400 	.word	0x4c742400

08007770 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007770:	4a3b      	ldr	r2, [pc, #236]	; (8007860 <RCCEx_PLL2_Config+0xf0>)
{
 8007772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007774:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	2b03      	cmp	r3, #3
 800777c:	d067      	beq.n	800784e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800777e:	6813      	ldr	r3, [r2, #0]
 8007780:	460f      	mov	r7, r1
 8007782:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007784:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8007786:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800778a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800778c:	f7fc f836 	bl	80037fc <HAL_GetTick>
 8007790:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007792:	e004      	b.n	800779e <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007794:	f7fc f832 	bl	80037fc <HAL_GetTick>
 8007798:	1b80      	subs	r0, r0, r6
 800779a:	2802      	cmp	r0, #2
 800779c:	d859      	bhi.n	8007852 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	011a      	lsls	r2, r3, #4
 80077a2:	d4f7      	bmi.n	8007794 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077a6:	682a      	ldr	r2, [r5, #0]
 80077a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077ac:	492d      	ldr	r1, [pc, #180]	; (8007864 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077ae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80077b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80077b4:	686e      	ldr	r6, [r5, #4]
 80077b6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80077ba:	3e01      	subs	r6, #1
 80077bc:	1e50      	subs	r0, r2, #1
 80077be:	3b01      	subs	r3, #1
 80077c0:	692a      	ldr	r2, [r5, #16]
 80077c2:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80077c6:	025b      	lsls	r3, r3, #9
 80077c8:	0400      	lsls	r0, r0, #16
 80077ca:	3a01      	subs	r2, #1
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80077d2:	0612      	lsls	r2, r2, #24
 80077d4:	4303      	orrs	r3, r0
 80077d6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80077da:	4333      	orrs	r3, r6
 80077dc:	4313      	orrs	r3, r2
 80077de:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80077e2:	696a      	ldr	r2, [r5, #20]
 80077e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077e8:	4313      	orrs	r3, r2
 80077ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80077ee:	69aa      	ldr	r2, [r5, #24]
 80077f0:	f023 0320 	bic.w	r3, r3, #32
 80077f4:	4313      	orrs	r3, r2
 80077f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80077fa:	f023 0310 	bic.w	r3, r3, #16
 80077fe:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007800:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007802:	69eb      	ldr	r3, [r5, #28]
 8007804:	4011      	ands	r1, r2
 8007806:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800780a:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800780c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800780e:	f043 0310 	orr.w	r3, r3, #16
 8007812:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007814:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007816:	b1f7      	cbz	r7, 8007856 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007818:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800781a:	bf0c      	ite	eq
 800781c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007820:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8007824:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007826:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <RCCEx_PLL2_Config+0xf0>)
 8007828:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800782a:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 800782c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007830:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007832:	f7fb ffe3 	bl	80037fc <HAL_GetTick>
 8007836:	4605      	mov	r5, r0
 8007838:	e004      	b.n	8007844 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800783a:	f7fb ffdf 	bl	80037fc <HAL_GetTick>
 800783e:	1b40      	subs	r0, r0, r5
 8007840:	2802      	cmp	r0, #2
 8007842:	d806      	bhi.n	8007852 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	d5f7      	bpl.n	800783a <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800784a:	2000      	movs	r0, #0
}
 800784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800784e:	2001      	movs	r0, #1
}
 8007850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007852:	2003      	movs	r0, #3
}
 8007854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800785a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800785c:	e7e3      	b.n	8007826 <RCCEx_PLL2_Config+0xb6>
 800785e:	bf00      	nop
 8007860:	58024400 	.word	0x58024400
 8007864:	ffff0007 	.word	0xffff0007

08007868 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007868:	4a3b      	ldr	r2, [pc, #236]	; (8007958 <RCCEx_PLL3_Config+0xf0>)
{
 800786a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800786c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	2b03      	cmp	r3, #3
 8007874:	d067      	beq.n	8007946 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	460f      	mov	r7, r1
 800787a:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800787c:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800787e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007882:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007884:	f7fb ffba 	bl	80037fc <HAL_GetTick>
 8007888:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800788a:	e004      	b.n	8007896 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800788c:	f7fb ffb6 	bl	80037fc <HAL_GetTick>
 8007890:	1b80      	subs	r0, r0, r6
 8007892:	2802      	cmp	r0, #2
 8007894:	d859      	bhi.n	800794a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	009a      	lsls	r2, r3, #2
 800789a:	d4f7      	bmi.n	800788c <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800789c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800789e:	682a      	ldr	r2, [r5, #0]
 80078a0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078a4:	492d      	ldr	r1, [pc, #180]	; (800795c <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078a6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80078aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80078ac:	686e      	ldr	r6, [r5, #4]
 80078ae:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80078b2:	3e01      	subs	r6, #1
 80078b4:	1e50      	subs	r0, r2, #1
 80078b6:	3b01      	subs	r3, #1
 80078b8:	692a      	ldr	r2, [r5, #16]
 80078ba:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80078be:	025b      	lsls	r3, r3, #9
 80078c0:	0400      	lsls	r0, r0, #16
 80078c2:	3a01      	subs	r2, #1
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80078ca:	0612      	lsls	r2, r2, #24
 80078cc:	4303      	orrs	r3, r0
 80078ce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80078d2:	4333      	orrs	r3, r6
 80078d4:	4313      	orrs	r3, r2
 80078d6:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078da:	696a      	ldr	r2, [r5, #20]
 80078dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80078e0:	4313      	orrs	r3, r2
 80078e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078e6:	69aa      	ldr	r2, [r5, #24]
 80078e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078ec:	4313      	orrs	r3, r2
 80078ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078f8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80078fa:	69eb      	ldr	r3, [r5, #28]
 80078fc:	4011      	ands	r1, r2
 80078fe:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8007902:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007904:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800790a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800790c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800790e:	b1f7      	cbz	r7, 800794e <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007910:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007912:	bf0c      	ite	eq
 8007914:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007918:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800791c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800791e:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <RCCEx_PLL3_Config+0xf0>)
 8007920:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007922:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8007924:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007928:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800792a:	f7fb ff67 	bl	80037fc <HAL_GetTick>
 800792e:	4605      	mov	r5, r0
 8007930:	e004      	b.n	800793c <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007932:	f7fb ff63 	bl	80037fc <HAL_GetTick>
 8007936:	1b40      	subs	r0, r0, r5
 8007938:	2802      	cmp	r0, #2
 800793a:	d806      	bhi.n	800794a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	d5f7      	bpl.n	8007932 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8007942:	2000      	movs	r0, #0
}
 8007944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007946:	2001      	movs	r0, #1
}
 8007948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800794a:	2003      	movs	r0, #3
}
 800794c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800794e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007952:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007954:	e7e3      	b.n	800791e <RCCEx_PLL3_Config+0xb6>
 8007956:	bf00      	nop
 8007958:	58024400 	.word	0x58024400
 800795c:	ffff0007 	.word	0xffff0007

08007960 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007964:	6803      	ldr	r3, [r0, #0]
{
 8007966:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007968:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800796c:	d015      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800796e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8007970:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007974:	f000 844e 	beq.w	8008214 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8007978:	f240 8501 	bls.w	800837e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800797c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007980:	f000 8461 	beq.w	8008246 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8007984:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8007988:	f040 8512 	bne.w	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800798c:	48a2      	ldr	r0, [pc, #648]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800798e:	2600      	movs	r6, #0
 8007990:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8007992:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007996:	430a      	orrs	r2, r1
 8007998:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800799a:	05dd      	lsls	r5, r3, #23
 800799c:	d50a      	bpl.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 800799e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80079a0:	2a04      	cmp	r2, #4
 80079a2:	d806      	bhi.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80079a4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80079a8:	03e403dd 	.word	0x03e403dd
 80079ac:	039e03d2 	.word	0x039e03d2
 80079b0:	039e      	.short	0x039e
      ret = HAL_ERROR;
 80079b2:	2601      	movs	r6, #1
 80079b4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80079b6:	0598      	lsls	r0, r3, #22
 80079b8:	d51b      	bpl.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 80079ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80079bc:	2a80      	cmp	r2, #128	; 0x80
 80079be:	f000 8405 	beq.w	80081cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
 80079c2:	f200 84d1 	bhi.w	8008368 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	f000 8443 	beq.w	8008252 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80079cc:	2a40      	cmp	r2, #64	; 0x40
 80079ce:	f040 84d2 	bne.w	8008376 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079d2:	2100      	movs	r1, #0
 80079d4:	1d20      	adds	r0, r4, #4
 80079d6:	f7ff fecb 	bl	8007770 <RCCEx_PLL2_Config>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80079de:	2d00      	cmp	r5, #0
 80079e0:	f040 83fe 	bne.w	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80079e4:	498c      	ldr	r1, [pc, #560]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80079e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079e8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80079ea:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80079ee:	4302      	orrs	r2, r0
 80079f0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80079f2:	0559      	lsls	r1, r3, #21
 80079f4:	d51f      	bpl.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 80079f6:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80079fa:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80079fe:	f000 83d4 	beq.w	80081aa <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8007a02:	f200 8499 	bhi.w	8008338 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	f000 8410 	beq.w	800822c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8007a0c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007a10:	f040 849a 	bne.w	8008348 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a14:	2100      	movs	r1, #0
 8007a16:	1d20      	adds	r0, r4, #4
 8007a18:	f7ff feaa 	bl	8007770 <RCCEx_PLL2_Config>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	f040 83cc 	bne.w	80081be <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a26:	497c      	ldr	r1, [pc, #496]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007a28:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8007a2c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007a2e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8007a32:	4302      	orrs	r2, r0
 8007a34:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a36:	051a      	lsls	r2, r3, #20
 8007a38:	d51f      	bpl.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a3a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8007a3e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8007a42:	f000 83cf 	beq.w	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8007a46:	f200 8483 	bhi.w	8008350 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	f000 8408 	beq.w	8008260 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8007a50:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8007a54:	f040 8484 	bne.w	8008360 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a58:	2100      	movs	r1, #0
 8007a5a:	1d20      	adds	r0, r4, #4
 8007a5c:	f7ff fe88 	bl	8007770 <RCCEx_PLL2_Config>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007a64:	2d00      	cmp	r5, #0
 8007a66:	f040 83c7 	bne.w	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a6a:	496b      	ldr	r1, [pc, #428]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007a6c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8007a70:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007a72:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8007a76:	4302      	orrs	r2, r0
 8007a78:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a7a:	019f      	lsls	r7, r3, #6
 8007a7c:	d50d      	bpl.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 8007a7e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007a80:	2a10      	cmp	r2, #16
 8007a82:	f000 830c 	beq.w	800809e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007a86:	f240 848e 	bls.w	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8007a8a:	2a20      	cmp	r2, #32
 8007a8c:	f000 8349 	beq.w	8008122 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8007a90:	2a30      	cmp	r2, #48	; 0x30
 8007a92:	f000 8309 	beq.w	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      ret = HAL_ERROR;
 8007a96:	2601      	movs	r6, #1
 8007a98:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a9a:	04d8      	lsls	r0, r3, #19
 8007a9c:	d51d      	bpl.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007aa0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007aa4:	f000 83aa 	beq.w	80081fc <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8007aa8:	f200 8471 	bhi.w	800838e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	f000 83c4 	beq.w	800823a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8007ab2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007ab6:	f040 8472 	bne.w	800839e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aba:	2100      	movs	r1, #0
 8007abc:	1d20      	adds	r0, r4, #4
 8007abe:	f7ff fe57 	bl	8007770 <RCCEx_PLL2_Config>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	f040 83a2 	bne.w	8008210 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007acc:	4952      	ldr	r1, [pc, #328]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007ace:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8007ad0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007ad2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007ad6:	4302      	orrs	r2, r0
 8007ad8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007ada:	0499      	lsls	r1, r3, #18
 8007adc:	d51b      	bpl.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ade:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007ae0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8007ae4:	f000 8309 	beq.w	80080fa <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8007ae8:	f200 8407 	bhi.w	80082fa <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8007aec:	b14a      	cbz	r2, 8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007aee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007af2:	f040 840e 	bne.w	8008312 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007af6:	2101      	movs	r1, #1
 8007af8:	1d20      	adds	r0, r4, #4
 8007afa:	f7ff fe39 	bl	8007770 <RCCEx_PLL2_Config>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007b02:	2d00      	cmp	r5, #0
 8007b04:	f040 8271 	bne.w	8007fea <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b08:	4943      	ldr	r1, [pc, #268]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007b0a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007b0c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007b0e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8007b12:	4302      	orrs	r2, r0
 8007b14:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b16:	045a      	lsls	r2, r3, #17
 8007b18:	d51d      	bpl.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b1a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8007b1e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007b22:	f000 82b2 	beq.w	800808a <HAL_RCCEx_PeriphCLKConfig+0x72a>
 8007b26:	f200 83f8 	bhi.w	800831a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007b2a:	b14a      	cbz	r2, 8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007b2c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8007b30:	f040 83ff 	bne.w	8008332 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b34:	2101      	movs	r1, #1
 8007b36:	1d20      	adds	r0, r4, #4
 8007b38:	f7ff fe1a 	bl	8007770 <RCCEx_PLL2_Config>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	f040 8250 	bne.w	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b46:	4934      	ldr	r1, [pc, #208]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007b48:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8007b4c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007b4e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8007b52:	4302      	orrs	r2, r0
 8007b54:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b56:	041f      	lsls	r7, r3, #16
 8007b58:	d50d      	bpl.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 8007b5a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007b5c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8007b60:	f000 82d6 	beq.w	8008110 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8007b64:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007b68:	f000 81ad 	beq.w	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007b6c:	2a00      	cmp	r2, #0
 8007b6e:	f000 81b0 	beq.w	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      ret = HAL_ERROR;
 8007b72:	2601      	movs	r6, #1
 8007b74:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b76:	01d8      	lsls	r0, r3, #7
 8007b78:	d519      	bpl.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 8007b7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007b7c:	2a03      	cmp	r2, #3
 8007b7e:	f200 8442 	bhi.w	8008406 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 8007b82:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007b86:	000a      	.short	0x000a
 8007b88:	00040264 	.word	0x00040264
 8007b8c:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b8e:	2102      	movs	r1, #2
 8007b90:	1d20      	adds	r0, r4, #4
 8007b92:	f7ff fded 	bl	8007770 <RCCEx_PLL2_Config>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	f040 821b 	bne.w	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ba0:	491d      	ldr	r1, [pc, #116]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007ba2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007ba4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007ba6:	f022 0203 	bic.w	r2, r2, #3
 8007baa:	4302      	orrs	r2, r0
 8007bac:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bae:	0259      	lsls	r1, r3, #9
 8007bb0:	f100 81cb 	bmi.w	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bb4:	07df      	lsls	r7, r3, #31
 8007bb6:	d542      	bpl.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007bb8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8007bba:	2a28      	cmp	r2, #40	; 0x28
 8007bbc:	f200 8369 	bhi.w	8008292 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8007bc0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007bc4:	03670033 	.word	0x03670033
 8007bc8:	03670367 	.word	0x03670367
 8007bcc:	03670367 	.word	0x03670367
 8007bd0:	03670367 	.word	0x03670367
 8007bd4:	03670256 	.word	0x03670256
 8007bd8:	03670367 	.word	0x03670367
 8007bdc:	03670367 	.word	0x03670367
 8007be0:	03670367 	.word	0x03670367
 8007be4:	0367002c 	.word	0x0367002c
 8007be8:	03670367 	.word	0x03670367
 8007bec:	03670367 	.word	0x03670367
 8007bf0:	03670367 	.word	0x03670367
 8007bf4:	03670033 	.word	0x03670033
 8007bf8:	03670367 	.word	0x03670367
 8007bfc:	03670367 	.word	0x03670367
 8007c00:	03670367 	.word	0x03670367
 8007c04:	03670033 	.word	0x03670033
 8007c08:	03670367 	.word	0x03670367
 8007c0c:	03670367 	.word	0x03670367
 8007c10:	03670367 	.word	0x03670367
 8007c14:	0033      	.short	0x0033
 8007c16:	bf00      	nop
 8007c18:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c22:	f7ff fe21 	bl	8007868 <RCCEx_PLL3_Config>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007c2a:	2d00      	cmp	r5, #0
 8007c2c:	f040 81d1 	bne.w	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c30:	49ad      	ldr	r1, [pc, #692]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007c32:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007c34:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007c36:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8007c3a:	4302      	orrs	r2, r0
 8007c3c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c3e:	0798      	lsls	r0, r3, #30
 8007c40:	d51c      	bpl.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c42:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007c44:	2a05      	cmp	r2, #5
 8007c46:	f200 83d8 	bhi.w	80083fa <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8007c4a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007c4e:	000d      	.short	0x000d
 8007c50:	000601f7 	.word	0x000601f7
 8007c54:	000d000d 	.word	0x000d000d
 8007c58:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c60:	f7ff fe02 	bl	8007868 <RCCEx_PLL3_Config>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007c68:	2d00      	cmp	r5, #0
 8007c6a:	f040 81b6 	bne.w	8007fda <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c6e:	499e      	ldr	r1, [pc, #632]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007c70:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007c72:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007c74:	f022 0207 	bic.w	r2, r2, #7
 8007c78:	4302      	orrs	r2, r0
 8007c7a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c7c:	0759      	lsls	r1, r3, #29
 8007c7e:	d51e      	bpl.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c80:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8007c84:	2a05      	cmp	r2, #5
 8007c86:	f200 83bb 	bhi.w	8008400 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8007c8a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007c8e:	000d      	.short	0x000d
 8007c90:	000601e8 	.word	0x000601e8
 8007c94:	000d000d 	.word	0x000d000d
 8007c98:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ca0:	f7ff fde2 	bl	8007868 <RCCEx_PLL3_Config>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	f040 8198 	bne.w	8007fde <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cae:	498e      	ldr	r1, [pc, #568]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007cb0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8007cb4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007cb6:	f022 0207 	bic.w	r2, r2, #7
 8007cba:	4302      	orrs	r2, r0
 8007cbc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cbe:	069a      	lsls	r2, r3, #26
 8007cc0:	d51d      	bpl.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007cc2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007cc6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007cca:	f000 81f7 	beq.w	80080bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8007cce:	f200 82e7 	bhi.w	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8007cd2:	b14a      	cbz	r2, 8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007cd4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8007cd8:	f040 82ee 	bne.w	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x958>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cdc:	2100      	movs	r1, #0
 8007cde:	1d20      	adds	r0, r4, #4
 8007ce0:	f7ff fd46 	bl	8007770 <RCCEx_PLL2_Config>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	f040 817a 	bne.w	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x682>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cee:	497e      	ldr	r1, [pc, #504]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007cf0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8007cf4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007cf6:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8007cfa:	4302      	orrs	r2, r0
 8007cfc:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cfe:	065f      	lsls	r7, r3, #25
 8007d00:	d51d      	bpl.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d02:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8007d06:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007d0a:	f000 81e1 	beq.w	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8007d0e:	f200 82d6 	bhi.w	80082be <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8007d12:	b14a      	cbz	r2, 8007d28 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007d14:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007d18:	f040 82dd 	bne.w	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	1d20      	adds	r0, r4, #4
 8007d20:	f7ff fd26 	bl	8007770 <RCCEx_PLL2_Config>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	f040 8162 	bne.w	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x692>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d2e:	496e      	ldr	r1, [pc, #440]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007d30:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8007d34:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007d36:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007d3a:	4302      	orrs	r2, r0
 8007d3c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d3e:	0618      	lsls	r0, r3, #24
 8007d40:	d51d      	bpl.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d42:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8007d46:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007d4a:	f000 81f4 	beq.w	8008136 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8007d4e:	f200 82c5 	bhi.w	80082dc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007d52:	b14a      	cbz	r2, 8007d68 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007d54:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007d58:	f040 82cc 	bne.w	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x994>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	1d20      	adds	r0, r4, #4
 8007d60:	f7ff fd06 	bl	8007770 <RCCEx_PLL2_Config>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d68:	2d00      	cmp	r5, #0
 8007d6a:	f040 8144 	bne.w	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d6e:	495e      	ldr	r1, [pc, #376]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007d70:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8007d74:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007d76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007d7a:	4302      	orrs	r2, r0
 8007d7c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d7e:	0719      	lsls	r1, r3, #28
 8007d80:	d50b      	bpl.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007d82:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007d86:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007d8a:	f000 81f8 	beq.w	800817e <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d8e:	4856      	ldr	r0, [pc, #344]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007d90:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007d92:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007d96:	430a      	orrs	r2, r1
 8007d98:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d9a:	06da      	lsls	r2, r3, #27
 8007d9c:	d50b      	bpl.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007d9e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007da2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007da6:	f000 81f5 	beq.w	8008194 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007daa:	484f      	ldr	r0, [pc, #316]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007dac:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007dae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007db2:	430a      	orrs	r2, r1
 8007db4:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007db6:	031f      	lsls	r7, r3, #12
 8007db8:	d50e      	bpl.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 8007dba:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007dbe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007dc2:	f000 8093 	beq.w	8007eec <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8007dc6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007dca:	f000 8096 	beq.w	8007efa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	f000 824d 	beq.w	800826e <HAL_RCCEx_PeriphCLKConfig+0x90e>
      ret = HAL_ERROR;
 8007dd4:	2601      	movs	r6, #1
 8007dd6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dd8:	0358      	lsls	r0, r3, #13
 8007dda:	d50f      	bpl.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 8007ddc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007de0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007de4:	f000 8094 	beq.w	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8007de8:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8007dec:	f000 8097 	beq.w	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8007df0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007df4:	f000 8244 	beq.w	8008280 <HAL_RCCEx_PeriphCLKConfig+0x920>
      ret = HAL_ERROR;
 8007df8:	2601      	movs	r6, #1
 8007dfa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dfc:	03d9      	lsls	r1, r3, #15
 8007dfe:	d517      	bpl.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007e00:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	f000 8110 	beq.w	8008028 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8007e08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007e0c:	f040 80f7 	bne.w	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e10:	2102      	movs	r1, #2
 8007e12:	1d20      	adds	r0, r4, #4
 8007e14:	f7ff fcac 	bl	8007770 <RCCEx_PLL2_Config>
 8007e18:	4605      	mov	r5, r0
 8007e1a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007e1c:	2d00      	cmp	r5, #0
 8007e1e:	f040 810b 	bne.w	8008038 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e22:	4931      	ldr	r1, [pc, #196]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007e24:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007e26:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007e28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e2c:	4302      	orrs	r2, r0
 8007e2e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e30:	009a      	lsls	r2, r3, #2
 8007e32:	d47f      	bmi.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e34:	039f      	lsls	r7, r3, #14
 8007e36:	d435      	bmi.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8007e38:	1c30      	adds	r0, r6, #0
 8007e3a:	bf18      	it	ne
 8007e3c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e3e:	02de      	lsls	r6, r3, #11
 8007e40:	d506      	bpl.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e42:	4929      	ldr	r1, [pc, #164]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007e44:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007e46:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007e48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007e4c:	432a      	orrs	r2, r5
 8007e4e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e50:	00dd      	lsls	r5, r3, #3
 8007e52:	d507      	bpl.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e54:	4924      	ldr	r1, [pc, #144]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007e56:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8007e5a:	690a      	ldr	r2, [r1, #16]
 8007e5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e60:	432a      	orrs	r2, r5
 8007e62:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e64:	0299      	lsls	r1, r3, #10
 8007e66:	d506      	bpl.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x516>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e68:	491f      	ldr	r1, [pc, #124]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007e6a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8007e6c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007e6e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007e72:	432a      	orrs	r2, r5
 8007e74:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e76:	005a      	lsls	r2, r3, #1
 8007e78:	d509      	bpl.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e7a:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007e7c:	6911      	ldr	r1, [r2, #16]
 8007e7e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007e82:	6111      	str	r1, [r2, #16]
 8007e84:	6911      	ldr	r1, [r2, #16]
 8007e86:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8007e8a:	4329      	orrs	r1, r5
 8007e8c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	da06      	bge.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e92:	4a15      	ldr	r2, [pc, #84]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007e94:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007e96:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007e98:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8007ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8007ea4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007ea6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007eaa:	f000 80ab 	beq.w	8008004 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8007eae:	f240 80e8 	bls.w	8008082 <HAL_RCCEx_PeriphCLKConfig+0x722>
 8007eb2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007eb6:	f000 80aa 	beq.w	800800e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007eba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007ebe:	f000 80a6 	beq.w	800800e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007ec2:	2001      	movs	r0, #1
 8007ec4:	e7bb      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	1d20      	adds	r0, r4, #4
 8007eca:	f7ff fc51 	bl	8007770 <RCCEx_PLL2_Config>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007ed2:	2d00      	cmp	r5, #0
 8007ed4:	f040 808b 	bne.w	8007fee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ed8:	4903      	ldr	r1, [pc, #12]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007eda:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007edc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007ede:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ee2:	4302      	orrs	r2, r0
 8007ee4:	650a      	str	r2, [r1, #80]	; 0x50
 8007ee6:	e646      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8007ee8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eec:	2102      	movs	r1, #2
 8007eee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ef2:	f7ff fcb9 	bl	8007868 <RCCEx_PLL3_Config>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	d17d      	bne.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x69a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007efe:	49b1      	ldr	r1, [pc, #708]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007f00:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8007f04:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007f06:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007f0a:	4302      	orrs	r2, r0
 8007f0c:	658a      	str	r2, [r1, #88]	; 0x58
 8007f0e:	e763      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f10:	2101      	movs	r1, #1
 8007f12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f16:	f7ff fca7 	bl	8007868 <RCCEx_PLL3_Config>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f1e:	2d00      	cmp	r5, #0
 8007f20:	d155      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f22:	49a8      	ldr	r1, [pc, #672]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007f24:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007f28:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007f2a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007f2e:	4302      	orrs	r2, r0
 8007f30:	654a      	str	r2, [r1, #84]	; 0x54
 8007f32:	e763      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007f34:	2102      	movs	r1, #2
 8007f36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f3a:	f7ff fc95 	bl	8007868 <RCCEx_PLL3_Config>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	2800      	cmp	r0, #0
 8007f42:	f43f af77 	beq.w	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      status=HAL_ERROR;
 8007f46:	2601      	movs	r6, #1
 8007f48:	e774      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f4a:	4b9f      	ldr	r3, [pc, #636]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x868>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f4e:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f54:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007f56:	f7fb fc51 	bl	80037fc <HAL_GetTick>
 8007f5a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f5c:	e006      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f5e:	f7fb fc4d 	bl	80037fc <HAL_GetTick>
 8007f62:	eba0 0008 	sub.w	r0, r0, r8
 8007f66:	2864      	cmp	r0, #100	; 0x64
 8007f68:	f200 8196 	bhi.w	8008298 <HAL_RCCEx_PeriphCLKConfig+0x938>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	05da      	lsls	r2, r3, #23
 8007f70:	d5f5      	bpl.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    if(ret == HAL_OK)
 8007f72:	2d00      	cmp	r5, #0
 8007f74:	f040 823d 	bne.w	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f78:	4a92      	ldr	r2, [pc, #584]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007f7a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007f7e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007f80:	4059      	eors	r1, r3
 8007f82:	f411 7f40 	tst.w	r1, #768	; 0x300
 8007f86:	d00b      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x640>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f88:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f8a:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f8c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f90:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8007f94:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f96:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8007f98:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8007f9c:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007f9e:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa4:	f000 8207 	beq.w	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fa8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007fac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007fb0:	f000 8215 	beq.w	80083de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007fb4:	4983      	ldr	r1, [pc, #524]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007fb6:	690a      	ldr	r2, [r1, #16]
 8007fb8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007fbc:	610a      	str	r2, [r1, #16]
 8007fbe:	4a81      	ldr	r2, [pc, #516]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fc4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	e5f2      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007fce:	462e      	mov	r6, r5
 8007fd0:	e714      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007fd2:	462e      	mov	r6, r5
 8007fd4:	e633      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007fd6:	462e      	mov	r6, r5
 8007fd8:	e5e9      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007fda:	462e      	mov	r6, r5
 8007fdc:	e64e      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007fde:	462e      	mov	r6, r5
 8007fe0:	e66d      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007fe2:	462e      	mov	r6, r5
 8007fe4:	e68b      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8007fe6:	462e      	mov	r6, r5
 8007fe8:	e5b5      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007fea:	462e      	mov	r6, r5
 8007fec:	e593      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007fee:	462e      	mov	r6, r5
 8007ff0:	e5c1      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8007ff2:	462e      	mov	r6, r5
 8007ff4:	e6a3      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007ff6:	462e      	mov	r6, r5
 8007ff8:	e6c1      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8007ffa:	462e      	mov	r6, r5
 8007ffc:	e6ec      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 8007ffe:	2601      	movs	r6, #1
 8008000:	4635      	mov	r5, r6
 8008002:	e715      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008004:	486f      	ldr	r0, [pc, #444]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8008006:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008008:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800800c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800800e:	2d00      	cmp	r5, #0
 8008010:	f47f af57 	bne.w	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008014:	4d6b      	ldr	r5, [pc, #428]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8008016:	1c30      	adds	r0, r6, #0
 8008018:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800801a:	bf18      	it	ne
 800801c:	2001      	movne	r0, #1
 800801e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8008022:	430a      	orrs	r2, r1
 8008024:	656a      	str	r2, [r5, #84]	; 0x54
 8008026:	e70a      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008028:	4966      	ldr	r1, [pc, #408]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800802a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800802c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008030:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008032:	2d00      	cmp	r5, #0
 8008034:	f43f aef5 	beq.w	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008038:	462e      	mov	r6, r5
 800803a:	e6f9      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800803c:	2101      	movs	r1, #1
 800803e:	1d20      	adds	r0, r4, #4
 8008040:	f7ff fb96 	bl	8007770 <RCCEx_PLL2_Config>
 8008044:	4605      	mov	r5, r0
 8008046:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008048:	2d00      	cmp	r5, #0
 800804a:	d1c6      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800804c:	e60f      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804e:	495d      	ldr	r1, [pc, #372]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8008050:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008052:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008056:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008058:	2d00      	cmp	r5, #0
 800805a:	d1bc      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800805c:	e5a0      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800805e:	2101      	movs	r1, #1
 8008060:	1d20      	adds	r0, r4, #4
 8008062:	f7ff fb85 	bl	8007770 <RCCEx_PLL2_Config>
 8008066:	4605      	mov	r5, r0
 8008068:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800806a:	2d00      	cmp	r5, #0
 800806c:	d1b7      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800806e:	e61e      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008070:	2101      	movs	r1, #1
 8008072:	1d20      	adds	r0, r4, #4
 8008074:	f7ff fb7c 	bl	8007770 <RCCEx_PLL2_Config>
 8008078:	4605      	mov	r5, r0
 800807a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800807c:	2d00      	cmp	r5, #0
 800807e:	d1a8      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008080:	e5d6      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 8008082:	2a00      	cmp	r2, #0
 8008084:	f47f af1d 	bne.w	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8008088:	e7c1      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800808a:	2101      	movs	r1, #1
 800808c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008090:	f7ff fbea 	bl	8007868 <RCCEx_PLL3_Config>
 8008094:	4605      	mov	r5, r0
 8008096:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008098:	2d00      	cmp	r5, #0
 800809a:	d1a4      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x686>
 800809c:	e553      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800809e:	4949      	ldr	r1, [pc, #292]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80080a0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80080a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80080a6:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	d142      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80080ac:	4945      	ldr	r1, [pc, #276]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80080ae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80080b0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80080b2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80080b6:	4302      	orrs	r2, r0
 80080b8:	64ca      	str	r2, [r1, #76]	; 0x4c
 80080ba:	e4ee      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080bc:	2102      	movs	r1, #2
 80080be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080c2:	f7ff fbd1 	bl	8007868 <RCCEx_PLL3_Config>
 80080c6:	4605      	mov	r5, r0
 80080c8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80080ca:	2d00      	cmp	r5, #0
 80080cc:	d189      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80080ce:	e60e      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080d0:	2102      	movs	r1, #2
 80080d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080d6:	f7ff fbc7 	bl	8007868 <RCCEx_PLL3_Config>
 80080da:	4605      	mov	r5, r0
 80080dc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80080de:	2d00      	cmp	r5, #0
 80080e0:	d187      	bne.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x692>
 80080e2:	e624      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 80080e4:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	d139      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080ea:	4936      	ldr	r1, [pc, #216]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80080ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080ee:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80080f0:	f022 0207 	bic.w	r2, r2, #7
 80080f4:	4302      	orrs	r2, r0
 80080f6:	650a      	str	r2, [r1, #80]	; 0x50
 80080f8:	e45d      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080fa:	2101      	movs	r1, #1
 80080fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008100:	f7ff fbb2 	bl	8007868 <RCCEx_PLL3_Config>
 8008104:	4605      	mov	r5, r0
 8008106:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008108:	2d00      	cmp	r5, #0
 800810a:	f47f af6e 	bne.w	8007fea <HAL_RCCEx_PeriphCLKConfig+0x68a>
 800810e:	e4fb      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008110:	492c      	ldr	r1, [pc, #176]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8008112:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008114:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008118:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800811a:	2d00      	cmp	r5, #0
 800811c:	f47f af67 	bne.w	8007fee <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008120:	e6da      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008122:	2102      	movs	r1, #2
 8008124:	1d20      	adds	r0, r4, #4
 8008126:	f7ff fb23 	bl	8007770 <RCCEx_PLL2_Config>
 800812a:	4605      	mov	r5, r0
 800812c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800812e:	2d00      	cmp	r5, #0
 8008130:	d0bc      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8008132:	462e      	mov	r6, r5
 8008134:	e4b1      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008136:	2102      	movs	r1, #2
 8008138:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800813c:	f7ff fb94 	bl	8007868 <RCCEx_PLL3_Config>
 8008140:	4605      	mov	r5, r0
 8008142:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008144:	2d00      	cmp	r5, #0
 8008146:	f47f af56 	bne.w	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x696>
 800814a:	e610      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800814c:	2100      	movs	r1, #0
 800814e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008152:	f7ff fb89 	bl	8007868 <RCCEx_PLL3_Config>
 8008156:	4605      	mov	r5, r0
 8008158:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800815a:	2d00      	cmp	r5, #0
 800815c:	d0c5      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800815e:	462e      	mov	r6, r5
 8008160:	e429      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008162:	4918      	ldr	r1, [pc, #96]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
      break;
 8008164:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008166:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008168:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800816c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800816e:	e7ba      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x786>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008170:	2100      	movs	r1, #0
 8008172:	1d20      	adds	r0, r4, #4
 8008174:	f7ff fafc 	bl	8007770 <RCCEx_PLL2_Config>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	4605      	mov	r5, r0
      break;
 800817c:	e7b3      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x786>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800817e:	2102      	movs	r1, #2
 8008180:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008184:	f7ff fb70 	bl	8007868 <RCCEx_PLL3_Config>
 8008188:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800818c:	b100      	cbz	r0, 8008190 <HAL_RCCEx_PeriphCLKConfig+0x830>
          status = HAL_ERROR;
 800818e:	2601      	movs	r6, #1
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	e5fc      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008194:	2102      	movs	r1, #2
 8008196:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800819a:	f7ff fb65 	bl	8007868 <RCCEx_PLL3_Config>
 800819e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80081a2:	b100      	cbz	r0, 80081a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
        status = HAL_ERROR;
 80081a4:	2601      	movs	r6, #1
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	e5ff      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081aa:	2100      	movs	r1, #0
 80081ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80081b0:	f7ff fb5a 	bl	8007868 <RCCEx_PLL3_Config>
 80081b4:	4605      	mov	r5, r0
 80081b6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	f43f ac34 	beq.w	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80081be:	462e      	mov	r6, r5
 80081c0:	e439      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80081c2:	bf00      	nop
 80081c4:	58024400 	.word	0x58024400
 80081c8:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081cc:	2100      	movs	r1, #0
 80081ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80081d2:	f7ff fb49 	bl	8007868 <RCCEx_PLL3_Config>
 80081d6:	4605      	mov	r5, r0
 80081d8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80081da:	2d00      	cmp	r5, #0
 80081dc:	f43f ac02 	beq.w	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80081e0:	462e      	mov	r6, r5
 80081e2:	e406      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081e4:	2100      	movs	r1, #0
 80081e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80081ea:	f7ff fb3d 	bl	8007868 <RCCEx_PLL3_Config>
 80081ee:	4605      	mov	r5, r0
 80081f0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80081f2:	2d00      	cmp	r5, #0
 80081f4:	f43f ac39 	beq.w	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80081f8:	462e      	mov	r6, r5
 80081fa:	e43e      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081fc:	2100      	movs	r1, #0
 80081fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008202:	f7ff fb31 	bl	8007868 <RCCEx_PLL3_Config>
 8008206:	4605      	mov	r5, r0
 8008208:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800820a:	2d00      	cmp	r5, #0
 800820c:	f43f ac5e 	beq.w	8007acc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008210:	462e      	mov	r6, r5
 8008212:	e462      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008214:	2102      	movs	r1, #2
 8008216:	3004      	adds	r0, #4
 8008218:	f7ff faaa 	bl	8007770 <RCCEx_PLL2_Config>
 800821c:	4606      	mov	r6, r0
 800821e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008220:	2e00      	cmp	r6, #0
 8008222:	f47f abba 	bne.w	800799a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8008226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008228:	f7ff bbb0 	b.w	800798c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800822c:	4978      	ldr	r1, [pc, #480]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800822e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008230:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008234:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008236:	f7ff bbf3 	b.w	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800823a:	4975      	ldr	r1, [pc, #468]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800823c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800823e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008242:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008244:	e43f      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008246:	2102      	movs	r1, #2
 8008248:	3024      	adds	r0, #36	; 0x24
 800824a:	f7ff fb0d 	bl	8007868 <RCCEx_PLL3_Config>
 800824e:	4606      	mov	r6, r0
      break;
 8008250:	e7e5      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008252:	496f      	ldr	r1, [pc, #444]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8008254:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008256:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800825a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800825c:	f7ff bbbf 	b.w	80079de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008260:	496b      	ldr	r1, [pc, #428]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8008262:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008264:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008268:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800826a:	f7ff bbfb 	b.w	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800826e:	1d20      	adds	r0, r4, #4
 8008270:	f7ff fa7e 	bl	8007770 <RCCEx_PLL2_Config>
 8008274:	4605      	mov	r5, r0
 8008276:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008278:	2d00      	cmp	r5, #0
 800827a:	f47f aebe 	bne.w	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800827e:	e63e      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008280:	4963      	ldr	r1, [pc, #396]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8008282:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008284:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008288:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800828a:	2d00      	cmp	r5, #0
 800828c:	f47f ae9f 	bne.w	8007fce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008290:	e647      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      ret = HAL_ERROR;
 8008292:	2601      	movs	r6, #1
 8008294:	4635      	mov	r5, r6
 8008296:	e4d2      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 8008298:	2603      	movs	r6, #3
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	4635      	mov	r5, r6
 800829e:	e489      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80082a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80082a4:	f43f ad20 	beq.w	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80082a8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80082ac:	f43f ad1c 	beq.w	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80082b0:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80082b4:	f43f ad18 	beq.w	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 80082b8:	2601      	movs	r6, #1
 80082ba:	4635      	mov	r5, r6
 80082bc:	e51f      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80082be:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80082c2:	f43f ad31 	beq.w	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80082c6:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80082ca:	f43f ad2d 	beq.w	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80082ce:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80082d2:	f43f ad29 	beq.w	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 80082d6:	2601      	movs	r6, #1
 80082d8:	4635      	mov	r5, r6
 80082da:	e530      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80082dc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80082e0:	f43f ad42 	beq.w	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80082e4:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 80082e8:	f43f ad3e 	beq.w	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80082ec:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80082f0:	f43f ad3a 	beq.w	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 80082f4:	2601      	movs	r6, #1
 80082f6:	4635      	mov	r5, r6
 80082f8:	e541      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 80082fa:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80082fe:	f43f ac00 	beq.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8008302:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8008306:	f43f abfc 	beq.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800830a:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800830e:	f43f abf8 	beq.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 8008312:	2601      	movs	r6, #1
 8008314:	4635      	mov	r5, r6
 8008316:	f7ff bbfe 	b.w	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 800831a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800831e:	f43f ac0f 	beq.w	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8008322:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8008326:	f43f ac0b 	beq.w	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800832a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800832e:	f43f ac07 	beq.w	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 8008332:	2601      	movs	r6, #1
 8008334:	4635      	mov	r5, r6
 8008336:	e40e      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008338:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800833c:	f43f ab70 	beq.w	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8008340:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008344:	f43f ab6c 	beq.w	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 8008348:	2601      	movs	r6, #1
 800834a:	4635      	mov	r5, r6
 800834c:	f7ff bb73 	b.w	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008350:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8008354:	f43f ab86 	beq.w	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8008358:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800835c:	f43f ab82 	beq.w	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 8008360:	2601      	movs	r6, #1
 8008362:	4635      	mov	r5, r6
 8008364:	f7ff bb89 	b.w	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008368:	2ac0      	cmp	r2, #192	; 0xc0
 800836a:	f43f ab38 	beq.w	80079de <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800836e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008372:	f43f ab34 	beq.w	80079de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8008376:	2601      	movs	r6, #1
 8008378:	4635      	mov	r5, r6
 800837a:	f7ff bb3a 	b.w	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800837e:	b9ba      	cbnz	r2, 80083b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008380:	4823      	ldr	r0, [pc, #140]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8008382:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008384:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008388:	62c1      	str	r1, [r0, #44]	; 0x2c
 800838a:	f7ff baff 	b.w	800798c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800838e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8008392:	f43f ab98 	beq.w	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008396:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800839a:	f43f ab94 	beq.w	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 800839e:	2601      	movs	r6, #1
 80083a0:	4635      	mov	r5, r6
 80083a2:	f7ff bb9a 	b.w	8007ada <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	f43f ae7e 	beq.w	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80083ac:	f7ff bb73 	b.w	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 80083b0:	2601      	movs	r6, #1
 80083b2:	f7ff baf2 	b.w	800799a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80083b6:	f7fb fa21 	bl	80037fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ba:	4f15      	ldr	r7, [pc, #84]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
        tickstart = HAL_GetTick();
 80083bc:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083be:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083c2:	e006      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xa72>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083c4:	f7fb fa1a 	bl	80037fc <HAL_GetTick>
 80083c8:	eba0 0009 	sub.w	r0, r0, r9
 80083cc:	4540      	cmp	r0, r8
 80083ce:	f63f af63 	bhi.w	8008298 <HAL_RCCEx_PeriphCLKConfig+0x938>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083d4:	079b      	lsls	r3, r3, #30
 80083d6:	d5f5      	bpl.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
 80083d8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80083dc:	e5e4      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083de:	480c      	ldr	r0, [pc, #48]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80083e0:	4a0c      	ldr	r2, [pc, #48]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0xab4>)
 80083e2:	6901      	ldr	r1, [r0, #16]
 80083e4:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80083e8:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80083ec:	430a      	orrs	r2, r1
 80083ee:	6102      	str	r2, [r0, #16]
 80083f0:	e5e5      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80083f2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80083f4:	462e      	mov	r6, r5
 80083f6:	f7ff bbdd 	b.w	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 80083fa:	2601      	movs	r6, #1
 80083fc:	4635      	mov	r5, r6
 80083fe:	e43d      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 8008400:	2601      	movs	r6, #1
 8008402:	4635      	mov	r5, r6
 8008404:	e45b      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 8008406:	2601      	movs	r6, #1
 8008408:	4635      	mov	r5, r6
 800840a:	f7ff bbd0 	b.w	8007bae <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800840e:	bf00      	nop
 8008410:	58024400 	.word	0x58024400
 8008414:	00ffffcf 	.word	0x00ffffcf

08008418 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8008418:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800841a:	f7fe ffa1 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 800841e:	4b05      	ldr	r3, [pc, #20]	; (8008434 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8008420:	4a05      	ldr	r2, [pc, #20]	; (8008438 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008428:	5cd3      	ldrb	r3, [r2, r3]
 800842a:	f003 031f 	and.w	r3, r3, #31
}
 800842e:	40d8      	lsrs	r0, r3
 8008430:	bd08      	pop	{r3, pc}
 8008432:	bf00      	nop
 8008434:	58024400 	.word	0x58024400
 8008438:	08016394 	.word	0x08016394

0800843c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800843c:	4a46      	ldr	r2, [pc, #280]	; (8008558 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 800843e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008440:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008442:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008444:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008446:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800844a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800844c:	2b00      	cmp	r3, #0
 800844e:	d059      	beq.n	8008504 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008450:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008454:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008458:	f004 0403 	and.w	r4, r4, #3
 800845c:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008460:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8008464:	2c01      	cmp	r4, #1
 8008466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800846a:	ee06 1a90 	vmov	s13, r1
 800846e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8008472:	d002      	beq.n	800847a <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8008474:	d34e      	bcc.n	8008514 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8008476:	2c02      	cmp	r4, #2
 8008478:	d049      	beq.n	800850e <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800847a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800855c <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 800847e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008482:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008488:	ee07 3a10 	vmov	s14, r3
 800848c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008490:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008494:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008498:	ee77 7a26 	vadd.f32	s15, s14, s13
 800849c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80084a0:	4a2d      	ldr	r2, [pc, #180]	; (8008558 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 80084a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80084a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80084a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80084ac:	ee06 3a90 	vmov	s13, r3
 80084b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80084b4:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80084b6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80084ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80084be:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80084c2:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80084c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80084c8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80084cc:	ee06 3a90 	vmov	s13, r3
 80084d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80084d4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80084d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80084dc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80084e0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80084e4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80084e6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80084ea:	ee07 3a10 	vmov	s14, r3
 80084ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80084f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80084fa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80084fe:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008502:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008504:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008508:	6083      	str	r3, [r0, #8]
}
 800850a:	bc30      	pop	{r4, r5}
 800850c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800850e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008560 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8008512:	e7b4      	b.n	800847e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008514:	6813      	ldr	r3, [r2, #0]
 8008516:	069b      	lsls	r3, r3, #26
 8008518:	d51a      	bpl.n	8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800851a:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800851c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008520:	4910      	ldr	r1, [pc, #64]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8008522:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008526:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008528:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800852a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852e:	ee07 1a10 	vmov	s14, r1
 8008532:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008536:	ee07 3a10 	vmov	s14, r3
 800853a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800853e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8008542:	ee76 7a05 	vadd.f32	s15, s12, s10
 8008546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800854a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854e:	e7a7      	b.n	80084a0 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008550:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8008554:	e793      	b.n	800847e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8008556:	bf00      	nop
 8008558:	58024400 	.word	0x58024400
 800855c:	4a742400 	.word	0x4a742400
 8008560:	4bbebc20 	.word	0x4bbebc20
 8008564:	03d09000 	.word	0x03d09000
 8008568:	4c742400 	.word	0x4c742400

0800856c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800856c:	4a46      	ldr	r2, [pc, #280]	; (8008688 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 800856e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008570:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008572:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008574:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008576:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800857a:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800857c:	2b00      	cmp	r3, #0
 800857e:	d059      	beq.n	8008634 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008580:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008584:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008588:	f004 0403 	and.w	r4, r4, #3
 800858c:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008590:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8008594:	2c01      	cmp	r4, #1
 8008596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800859a:	ee06 1a90 	vmov	s13, r1
 800859e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80085a2:	d002      	beq.n	80085aa <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 80085a4:	d34e      	bcc.n	8008644 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80085a6:	2c02      	cmp	r4, #2
 80085a8:	d049      	beq.n	800863e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085aa:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800868c <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 80085ae:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80085b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80085b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b8:	ee07 3a10 	vmov	s14, r3
 80085bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80085c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80085c4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80085c8:	ee77 7a26 	vadd.f32	s15, s14, s13
 80085cc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80085d0:	4a2d      	ldr	r2, [pc, #180]	; (8008688 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 80085d2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80085d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80085d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80085dc:	ee06 3a90 	vmov	s13, r3
 80085e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80085e4:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80085e6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80085ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80085ee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80085f2:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80085f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80085f8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80085fc:	ee06 3a90 	vmov	s13, r3
 8008600:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008604:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008608:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800860c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008610:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008614:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008616:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800861a:	ee07 3a10 	vmov	s14, r3
 800861e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008622:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008626:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800862a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800862e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008632:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008634:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008638:	6083      	str	r3, [r0, #8]
}
 800863a:	bc30      	pop	{r4, r5}
 800863c:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800863e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8008642:	e7b4      	b.n	80085ae <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008644:	6813      	ldr	r3, [r2, #0]
 8008646:	069b      	lsls	r3, r3, #26
 8008648:	d51a      	bpl.n	8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800864a:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800864c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008650:	4910      	ldr	r1, [pc, #64]	; (8008694 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8008652:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008656:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008658:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800865a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865e:	ee07 1a10 	vmov	s14, r1
 8008662:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008666:	ee07 3a10 	vmov	s14, r3
 800866a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800866e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8008672:	ee76 7a05 	vadd.f32	s15, s12, s10
 8008676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867e:	e7a7      	b.n	80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008680:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8008684:	e793      	b.n	80085ae <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8008686:	bf00      	nop
 8008688:	58024400 	.word	0x58024400
 800868c:	4a742400 	.word	0x4a742400
 8008690:	4bbebc20 	.word	0x4bbebc20
 8008694:	03d09000 	.word	0x03d09000
 8008698:	4c742400 	.word	0x4c742400

0800869c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800869c:	4a46      	ldr	r2, [pc, #280]	; (80087b8 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 800869e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086a0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80086a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80086a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80086a6:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086aa:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d059      	beq.n	8008764 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086b0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80086b4:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086b8:	f004 0403 	and.w	r4, r4, #3
 80086bc:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086c0:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80086c4:	2c01      	cmp	r4, #1
 80086c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086ca:	ee06 1a90 	vmov	s13, r1
 80086ce:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80086d2:	d002      	beq.n	80086da <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 80086d4:	d34e      	bcc.n	8008774 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80086d6:	2c02      	cmp	r4, #2
 80086d8:	d049      	beq.n	800876e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086da:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80087bc <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 80086de:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80086e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80086e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e8:	ee07 3a10 	vmov	s14, r3
 80086ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80086f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80086f4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80086f8:	ee77 7a26 	vadd.f32	s15, s14, s13
 80086fc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008700:	4a2d      	ldr	r2, [pc, #180]	; (80087b8 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 8008702:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008706:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008708:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800870c:	ee06 3a90 	vmov	s13, r3
 8008710:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8008714:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008716:	ee76 6a86 	vadd.f32	s13, s13, s12
 800871a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800871e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008722:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008726:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008728:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800872c:	ee06 3a90 	vmov	s13, r3
 8008730:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008734:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008738:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800873c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008740:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008744:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008746:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800874a:	ee07 3a10 	vmov	s14, r3
 800874e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008752:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008756:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800875a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800875e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008762:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008764:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008768:	6083      	str	r3, [r0, #8]
}
 800876a:	bc30      	pop	{r4, r5}
 800876c:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800876e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80087c0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8008772:	e7b4      	b.n	80086de <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008774:	6813      	ldr	r3, [r2, #0]
 8008776:	069b      	lsls	r3, r3, #26
 8008778:	d51a      	bpl.n	80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800877a:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800877c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008780:	4910      	ldr	r1, [pc, #64]	; (80087c4 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8008782:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008786:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008788:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800878a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878e:	ee07 1a10 	vmov	s14, r1
 8008792:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008796:	ee07 3a10 	vmov	s14, r3
 800879a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800879e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80087a2:	ee76 7a05 	vadd.f32	s15, s12, s10
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	e7a7      	b.n	8008700 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087b0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80087c8 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 80087b4:	e793      	b.n	80086de <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 80087b6:	bf00      	nop
 80087b8:	58024400 	.word	0x58024400
 80087bc:	4a742400 	.word	0x4a742400
 80087c0:	4bbebc20 	.word	0x4bbebc20
 80087c4:	03d09000 	.word	0x03d09000
 80087c8:	4c742400 	.word	0x4c742400

080087cc <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80087cc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 80087d0:	b500      	push	{lr}
 80087d2:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80087d4:	d02d      	beq.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80087d6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80087da:	d018      	beq.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80087dc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80087e0:	d04e      	beq.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80087e2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80087e6:	d037      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80087e8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80087ec:	f000 808b 	beq.w	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80087f0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80087f4:	f000 80ac 	beq.w	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80087f8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80087fc:	f000 80b6 	beq.w	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008800:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8008804:	d062      	beq.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 8008806:	2000      	movs	r0, #0
}
 8008808:	b005      	add	sp, #20
 800880a:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800880e:	4a70      	ldr	r2, [pc, #448]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8008810:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008812:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8008816:	2b80      	cmp	r3, #128	; 0x80
 8008818:	d043      	beq.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800881a:	d86a      	bhi.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800881c:	2b00      	cmp	r3, #0
 800881e:	d039      	beq.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	d1f0      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008824:	a801      	add	r0, sp, #4
 8008826:	f7ff fe09 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800882a:	9801      	ldr	r0, [sp, #4]
}
 800882c:	b005      	add	sp, #20
 800882e:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008832:	4b67      	ldr	r3, [pc, #412]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8008834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008836:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800883a:	2b04      	cmp	r3, #4
 800883c:	d8e3      	bhi.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	08008895 	.word	0x08008895
 8008848:	08008825 	.word	0x08008825
 800884c:	080088a3 	.word	0x080088a3
 8008850:	08008879 	.word	0x08008879
 8008854:	080088b1 	.word	0x080088b1
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008858:	4a5d      	ldr	r2, [pc, #372]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800885a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800885c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8008860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008864:	d01d      	beq.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8008866:	d85c      	bhi.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8008868:	b1a3      	cbz	r3, 8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800886a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800886e:	d0d9      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8008870:	e7c9      	b.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8008872:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008876:	d15b      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 8008878:	4856      	ldr	r0, [pc, #344]	; (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 800887a:	b005      	add	sp, #20
 800887c:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008880:	4a53      	ldr	r2, [pc, #332]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8008882:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008884:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8008888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800888c:	d009      	beq.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800888e:	d8f0      	bhi.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008890:	2b00      	cmp	r3, #0
 8008892:	d151      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008894:	a801      	add	r0, sp, #4
 8008896:	f7ff ff01 	bl	800869c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800889a:	9802      	ldr	r0, [sp, #8]
}
 800889c:	b005      	add	sp, #20
 800889e:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088a2:	a801      	add	r0, sp, #4
 80088a4:	f7ff fe62 	bl	800856c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088a8:	9801      	ldr	r0, [sp, #4]
}
 80088aa:	b005      	add	sp, #20
 80088ac:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088b0:	4b47      	ldr	r3, [pc, #284]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80088b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80088b4:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80088b8:	d019      	beq.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80088ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088be:	d062      	beq.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 80088c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088c4:	4844      	ldr	r0, [pc, #272]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 80088c6:	bf18      	it	ne
 80088c8:	2000      	movne	r0, #0
 80088ca:	e79d      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80088cc:	4b40      	ldr	r3, [pc, #256]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80088ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80088d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d8:	d068      	beq.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80088da:	d95b      	bls.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 80088dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e0:	d051      	beq.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80088e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e6:	d05f      	beq.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80088e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088ec:	d18b      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 80088ee:	483b      	ldr	r0, [pc, #236]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 80088f0:	e78a      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 80088f2:	2bc0      	cmp	r3, #192	; 0xc0
 80088f4:	d0c0      	beq.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80088f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088fa:	d184      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088fc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80088fe:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8008902:	d1da      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8008904:	e7f3      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008906:	4a32      	ldr	r2, [pc, #200]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8008908:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800890a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800890e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008912:	d0c6      	beq.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8008914:	d815      	bhi.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0bc      	beq.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800891a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800891e:	d081      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8008920:	e771      	b.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8008922:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008926:	d0a7      	beq.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8008928:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800892c:	d0e6      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800892e:	e76a      	b.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8008930:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008934:	d0e2      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008936:	e766      	b.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800893c:	f43f af72 	beq.w	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8008940:	e761      	b.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 8008942:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008946:	d097      	beq.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8008948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800894c:	d0d6      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800894e:	e75a      	b.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008950:	4a1f      	ldr	r2, [pc, #124]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8008952:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8008958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800895c:	d015      	beq.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800895e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008962:	d0cb      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008964:	2b00      	cmp	r3, #0
 8008966:	f47f af4e 	bne.w	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800896a:	e75b      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800896c:	4b18      	ldr	r3, [pc, #96]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800896e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8008970:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8008974:	d08e      	beq.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8008976:	2b00      	cmp	r3, #0
 8008978:	f43f af45 	beq.w	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800897c:	a801      	add	r0, sp, #4
 800897e:	f7ff fd5d 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008982:	9803      	ldr	r0, [sp, #12]
          break;
 8008984:	e740      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8008986:	4816      	ldr	r0, [pc, #88]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8008988:	e73e      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800898a:	a801      	add	r0, sp, #4
 800898c:	f7ff fdee 	bl	800856c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008990:	9803      	ldr	r0, [sp, #12]
          break;
 8008992:	e739      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8008994:	b17b      	cbz	r3, 80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800899a:	f47f af34 	bne.w	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800899e:	a801      	add	r0, sp, #4
 80089a0:	f7ff fd4c 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089a4:	9802      	ldr	r0, [sp, #8]
          break;
 80089a6:	e72f      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 80089a8:	480b      	ldr	r0, [pc, #44]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 80089aa:	e72d      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ac:	a801      	add	r0, sp, #4
 80089ae:	f7ff fddd 	bl	800856c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089b2:	9802      	ldr	r0, [sp, #8]
          break;
 80089b4:	e728      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80089b6:	f7fe fcd3 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80089bc:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80089c4:	5cd3      	ldrb	r3, [r2, r3]
 80089c6:	f003 031f 	and.w	r3, r3, #31
 80089ca:	40d8      	lsrs	r0, r3
          break;
 80089cc:	e71c      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80089ce:	bf00      	nop
 80089d0:	58024400 	.word	0x58024400
 80089d4:	00bb8000 	.word	0x00bb8000
 80089d8:	017d7840 	.word	0x017d7840
 80089dc:	03d09000 	.word	0x03d09000
 80089e0:	003d0900 	.word	0x003d0900
 80089e4:	08016394 	.word	0x08016394

080089e8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d076      	beq.n	8008ada <HAL_TIM_Base_Init+0xf2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80089f0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80089f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80089f6:	4604      	mov	r4, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d069      	beq.n	8008ad0 <HAL_TIM_Base_Init+0xe8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089fc:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80089fe:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a00:	493c      	ldr	r1, [pc, #240]	; (8008af4 <HAL_TIM_Base_Init+0x10c>)
 8008a02:	4e3d      	ldr	r6, [pc, #244]	; (8008af8 <HAL_TIM_Base_Init+0x110>)
 8008a04:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008a08:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8008a0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8008a10:	eba2 0606 	sub.w	r6, r2, r6
  tmpcr1 = TIMx->CR1;
 8008a14:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a16:	fab1 f181 	clz	r1, r1
 8008a1a:	fab6 f686 	clz	r6, r6
 8008a1e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8008a22:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8008a26:	d018      	beq.n	8008a5a <HAL_TIM_Base_Init+0x72>
 8008a28:	b9b9      	cbnz	r1, 8008a5a <HAL_TIM_Base_Init+0x72>
 8008a2a:	4834      	ldr	r0, [pc, #208]	; (8008afc <HAL_TIM_Base_Init+0x114>)
 8008a2c:	4282      	cmp	r2, r0
 8008a2e:	d014      	beq.n	8008a5a <HAL_TIM_Base_Init+0x72>
 8008a30:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008a34:	4282      	cmp	r2, r0
 8008a36:	d010      	beq.n	8008a5a <HAL_TIM_Base_Init+0x72>
 8008a38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008a3c:	4282      	cmp	r2, r0
 8008a3e:	d04e      	beq.n	8008ade <HAL_TIM_Base_Init+0xf6>
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	d14c      	bne.n	8008ade <HAL_TIM_Base_Init+0xf6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a44:	4d2e      	ldr	r5, [pc, #184]	; (8008b00 <HAL_TIM_Base_Init+0x118>)
 8008a46:	482f      	ldr	r0, [pc, #188]	; (8008b04 <HAL_TIM_Base_Init+0x11c>)
 8008a48:	4282      	cmp	r2, r0
 8008a4a:	bf18      	it	ne
 8008a4c:	42aa      	cmpne	r2, r5
 8008a4e:	d008      	beq.n	8008a62 <HAL_TIM_Base_Init+0x7a>
 8008a50:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008a54:	4282      	cmp	r2, r0
 8008a56:	d108      	bne.n	8008a6a <HAL_TIM_Base_Init+0x82>
 8008a58:	e003      	b.n	8008a62 <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a5e:	68a0      	ldr	r0, [r4, #8]
 8008a60:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a66:	6920      	ldr	r0, [r4, #16]
 8008a68:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a6a:	69a0      	ldr	r0, [r4, #24]
 8008a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a70:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a72:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a74:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008a76:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a78:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008a7a:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a7c:	b951      	cbnz	r1, 8008a94 <HAL_TIM_Base_Init+0xac>
 8008a7e:	b94e      	cbnz	r6, 8008a94 <HAL_TIM_Base_Init+0xac>
 8008a80:	491f      	ldr	r1, [pc, #124]	; (8008b00 <HAL_TIM_Base_Init+0x118>)
 8008a82:	4b20      	ldr	r3, [pc, #128]	; (8008b04 <HAL_TIM_Base_Init+0x11c>)
 8008a84:	429a      	cmp	r2, r3
 8008a86:	bf18      	it	ne
 8008a88:	428a      	cmpne	r2, r1
 8008a8a:	d003      	beq.n	8008a94 <HAL_TIM_Base_Init+0xac>
 8008a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d101      	bne.n	8008a98 <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a94:	6963      	ldr	r3, [r4, #20]
 8008a96:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a98:	2301      	movs	r3, #1
  return HAL_OK;
 8008a9a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8008a9c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a9e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aa2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008aa6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008aaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008aae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ac2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008ac6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8008ad0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008ad4:	f7fa fcba 	bl	800344c <HAL_TIM_Base_MspInit>
 8008ad8:	e790      	b.n	80089fc <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8008ada:	2001      	movs	r0, #1
}
 8008adc:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ade:	480a      	ldr	r0, [pc, #40]	; (8008b08 <HAL_TIM_Base_Init+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008ae4:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ae6:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 8008ae8:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aec:	d0b9      	beq.n	8008a62 <HAL_TIM_Base_Init+0x7a>
 8008aee:	2e00      	cmp	r6, #0
 8008af0:	d1b7      	bne.n	8008a62 <HAL_TIM_Base_Init+0x7a>
 8008af2:	e7a7      	b.n	8008a44 <HAL_TIM_Base_Init+0x5c>
 8008af4:	40010000 	.word	0x40010000
 8008af8:	40010400 	.word	0x40010400
 8008afc:	40000400 	.word	0x40000400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	40014400 	.word	0x40014400
 8008b08:	40000c00 	.word	0x40000c00

08008b0c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008b0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d001      	beq.n	8008b18 <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 8008b14:	2001      	movs	r0, #1
 8008b16:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8008b18:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b1a:	6802      	ldr	r2, [r0, #0]
 8008b1c:	4b08      	ldr	r3, [pc, #32]	; (8008b40 <HAL_TIM_Base_Start+0x34>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b22:	6891      	ldr	r1, [r2, #8]
 8008b24:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b26:	2b06      	cmp	r3, #6
 8008b28:	d008      	beq.n	8008b3c <HAL_TIM_Base_Start+0x30>
 8008b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2e:	d005      	beq.n	8008b3c <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8008b30:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8008b32:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8008b34:	f043 0301 	orr.w	r3, r3, #1
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	4770      	bx	lr
  return HAL_OK;
 8008b3c:	2000      	movs	r0, #0
}
 8008b3e:	4770      	bx	lr
 8008b40:	00010007 	.word	0x00010007

08008b44 <HAL_TIM_PeriodElapsedCallback>:
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop

08008b48 <HAL_TIM_OC_DelayElapsedCallback>:
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop

08008b4c <HAL_TIM_IC_CaptureCallback>:
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop

08008b50 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop

08008b54 <HAL_TIM_TriggerCallback>:
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop

08008b58 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b58:	6803      	ldr	r3, [r0, #0]
 8008b5a:	691a      	ldr	r2, [r3, #16]
 8008b5c:	0791      	lsls	r1, r2, #30
{
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b62:	d502      	bpl.n	8008b6a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b64:	68da      	ldr	r2, [r3, #12]
 8008b66:	0792      	lsls	r2, r2, #30
 8008b68:	d468      	bmi.n	8008c3c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	0752      	lsls	r2, r2, #29
 8008b6e:	d502      	bpl.n	8008b76 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	0750      	lsls	r0, r2, #29
 8008b74:	d44f      	bmi.n	8008c16 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b76:	691a      	ldr	r2, [r3, #16]
 8008b78:	0711      	lsls	r1, r2, #28
 8008b7a:	d502      	bpl.n	8008b82 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	0712      	lsls	r2, r2, #28
 8008b80:	d437      	bmi.n	8008bf2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b82:	691a      	ldr	r2, [r3, #16]
 8008b84:	06d0      	lsls	r0, r2, #27
 8008b86:	d502      	bpl.n	8008b8e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	06d1      	lsls	r1, r2, #27
 8008b8c:	d41e      	bmi.n	8008bcc <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	07d2      	lsls	r2, r2, #31
 8008b92:	d502      	bpl.n	8008b9a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b94:	68da      	ldr	r2, [r3, #12]
 8008b96:	07d0      	lsls	r0, r2, #31
 8008b98:	d469      	bmi.n	8008c6e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	0611      	lsls	r1, r2, #24
 8008b9e:	d502      	bpl.n	8008ba6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	0612      	lsls	r2, r2, #24
 8008ba4:	d46b      	bmi.n	8008c7e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	05d0      	lsls	r0, r2, #23
 8008baa:	d502      	bpl.n	8008bb2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	0611      	lsls	r1, r2, #24
 8008bb0:	d46d      	bmi.n	8008c8e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	0652      	lsls	r2, r2, #25
 8008bb6:	d502      	bpl.n	8008bbe <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	0650      	lsls	r0, r2, #25
 8008bbc:	d46f      	bmi.n	8008c9e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bbe:	691a      	ldr	r2, [r3, #16]
 8008bc0:	0691      	lsls	r1, r2, #26
 8008bc2:	d502      	bpl.n	8008bca <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	0692      	lsls	r2, r2, #26
 8008bc8:	d449      	bmi.n	8008c5e <HAL_TIM_IRQHandler+0x106>
}
 8008bca:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bcc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bd0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8008bd2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bd4:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bd6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bd8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bda:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008bde:	d16f      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008be0:	f7ff ffb2 	bl	8008b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7ff ffb3 	bl	8008b50 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bea:	2200      	movs	r2, #0
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	7722      	strb	r2, [r4, #28]
 8008bf0:	e7cd      	b.n	8008b8e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bf2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bf6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bfa:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bfc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bfe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c00:	079b      	lsls	r3, r3, #30
 8008c02:	d15a      	bne.n	8008cba <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c04:	f7ff ffa0 	bl	8008b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f7ff ffa1 	bl	8008b50 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0e:	2200      	movs	r2, #0
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	7722      	strb	r2, [r4, #28]
 8008c14:	e7b5      	b.n	8008b82 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c16:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c1a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8008c1c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c1e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c20:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c22:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c24:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008c28:	d144      	bne.n	8008cb4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c2a:	f7ff ff8d 	bl	8008b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f7ff ff8e 	bl	8008b50 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c34:	2200      	movs	r2, #0
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	7722      	strb	r2, [r4, #28]
 8008c3a:	e79c      	b.n	8008b76 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c3c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c40:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c42:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c44:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c46:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c48:	0799      	lsls	r1, r3, #30
 8008c4a:	d130      	bne.n	8008cae <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4c:	f7ff ff7c 	bl	8008b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7ff ff7d 	bl	8008b50 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c56:	2200      	movs	r2, #0
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	7722      	strb	r2, [r4, #28]
 8008c5c:	e785      	b.n	8008b6a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c5e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8008c62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c64:	611a      	str	r2, [r3, #16]
}
 8008c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8008c6a:	f000 b887 	b.w	8008d7c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c6e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c74:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c76:	f7ff ff65 	bl	8008b44 <HAL_TIM_PeriodElapsedCallback>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	e78d      	b.n	8008b9a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8008c82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c84:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008c86:	f000 f87b 	bl	8008d80 <HAL_TIMEx_BreakCallback>
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	e78b      	b.n	8008ba6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8008c92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008c96:	f000 f875 	bl	8008d84 <HAL_TIMEx_Break2Callback>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	e789      	b.n	8008bb2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8008ca2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ca4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008ca6:	f7ff ff55 	bl	8008b54 <HAL_TIM_TriggerCallback>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	e787      	b.n	8008bbe <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8008cae:	f7ff ff4d 	bl	8008b4c <HAL_TIM_IC_CaptureCallback>
 8008cb2:	e7d0      	b.n	8008c56 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8008cb4:	f7ff ff4a 	bl	8008b4c <HAL_TIM_IC_CaptureCallback>
 8008cb8:	e7bc      	b.n	8008c34 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8008cba:	f7ff ff47 	bl	8008b4c <HAL_TIM_IC_CaptureCallback>
 8008cbe:	e7a6      	b.n	8008c0e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8008cc0:	f7ff ff44 	bl	8008b4c <HAL_TIM_IC_CaptureCallback>
 8008cc4:	e791      	b.n	8008bea <HAL_TIM_IRQHandler+0x92>
 8008cc6:	bf00      	nop

08008cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cc8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d045      	beq.n	8008d5c <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cd0:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cd2:	4a24      	ldr	r2, [pc, #144]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 8008cd4:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cd6:	4e24      	ldr	r6, [pc, #144]	; (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd8:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 8008cda:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	bf18      	it	ne
 8008ce0:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce2:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8008ce6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cea:	bf08      	it	eq
 8008cec:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8008cee:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cf0:	bf18      	it	ne
 8008cf2:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 8008cf4:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cf6:	d103      	bne.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cf8:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cfc:	684a      	ldr	r2, [r1, #4]
 8008cfe:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d00:	4a1a      	ldr	r2, [pc, #104]	; (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d02:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d06:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	bf18      	it	ne
 8008d0c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8008d10:	f8df c064 	ldr.w	ip, [pc, #100]	; 8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d14:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d18:	4f15      	ldr	r7, [pc, #84]	; (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008d1a:	bf0c      	ite	eq
 8008d1c:	2201      	moveq	r2, #1
 8008d1e:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8008d20:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d22:	4563      	cmp	r3, ip
 8008d24:	bf08      	it	eq
 8008d26:	f042 0201 	orreq.w	r2, r2, #1
 8008d2a:	4c12      	ldr	r4, [pc, #72]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8008d2c:	42bb      	cmp	r3, r7
 8008d2e:	bf08      	it	eq
 8008d30:	f042 0201 	orreq.w	r2, r2, #1
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	bf08      	it	eq
 8008d38:	f042 0201 	orreq.w	r2, r2, #1
 8008d3c:	b902      	cbnz	r2, 8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008d3e:	b126      	cbz	r6, 8008d4a <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d40:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d42:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d46:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d48:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008d4a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008d4c:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8008d4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8008d52:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	bcf0      	pop	{r4, r5, r6, r7}
 8008d5a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008d5c:	2202      	movs	r2, #2
}
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40010400 	.word	0x40010400
 8008d68:	40010000 	.word	0x40010000
 8008d6c:	40000400 	.word	0x40000400
 8008d70:	40000c00 	.word	0x40000c00
 8008d74:	40001800 	.word	0x40001800
 8008d78:	40000800 	.word	0x40000800

08008d7c <HAL_TIMEx_CommutCallback>:
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop

08008d80 <HAL_TIMEx_BreakCallback>:
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop

08008d84 <HAL_TIMEx_Break2Callback>:
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop

08008d88 <HAL_UART_TxCpltCallback>:
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop

08008d8c <HAL_UART_ErrorCallback>:
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop

08008d90 <HAL_UART_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d90:	6802      	ldr	r2, [r0, #0]
{
 8008d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d96:	69d3      	ldr	r3, [r2, #28]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d98:	f640 050f 	movw	r5, #2063	; 0x80f
{
 8008d9c:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d9e:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 8008da0:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008da2:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8008da4:	d070      	beq.n	8008e88 <HAL_UART_IRQHandler+0xf8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008da6:	4d73      	ldr	r5, [pc, #460]	; (8008f74 <HAL_UART_IRQHandler+0x1e4>)
 8008da8:	400d      	ands	r5, r1
 8008daa:	f000 808f 	beq.w	8008ecc <HAL_UART_IRQHandler+0x13c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dae:	07df      	lsls	r7, r3, #31
 8008db0:	d509      	bpl.n	8008dc6 <HAL_UART_IRQHandler+0x36>
 8008db2:	05c6      	lsls	r6, r0, #23
 8008db4:	d507      	bpl.n	8008dc6 <HAL_UART_IRQHandler+0x36>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008db6:	2601      	movs	r6, #1
 8008db8:	6216      	str	r6, [r2, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dba:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8008dbe:	f046 0601 	orr.w	r6, r6, #1
 8008dc2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dc6:	079f      	lsls	r7, r3, #30
 8008dc8:	f003 0604 	and.w	r6, r3, #4
 8008dcc:	f140 8093 	bpl.w	8008ef6 <HAL_UART_IRQHandler+0x166>
 8008dd0:	07cf      	lsls	r7, r1, #31
 8008dd2:	d50a      	bpl.n	8008dea <HAL_UART_IRQHandler+0x5a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008dd4:	2702      	movs	r7, #2
 8008dd6:	6217      	str	r7, [r2, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dd8:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 8008ddc:	f047 0704 	orr.w	r7, r7, #4
 8008de0:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008de4:	2e00      	cmp	r6, #0
 8008de6:	f040 808c 	bne.w	8008f02 <HAL_UART_IRQHandler+0x172>

      huart->ErrorCode |= HAL_UART_ERROR_NE;
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008dea:	071f      	lsls	r7, r3, #28
 8008dec:	d505      	bpl.n	8008dfa <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dee:	0686      	lsls	r6, r0, #26
 8008df0:	f100 8097 	bmi.w	8008f22 <HAL_UART_IRQHandler+0x192>
 8008df4:	2d00      	cmp	r5, #0
 8008df6:	f040 8094 	bne.w	8008f22 <HAL_UART_IRQHandler+0x192>

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dfa:	051f      	lsls	r7, r3, #20
 8008dfc:	d50a      	bpl.n	8008e14 <HAL_UART_IRQHandler+0x84>
 8008dfe:	0146      	lsls	r6, r0, #5
 8008e00:	d508      	bpl.n	8008e14 <HAL_UART_IRQHandler+0x84>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e02:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008e06:	6215      	str	r5, [r2, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e08:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8008e0c:	f045 0520 	orr.w	r5, r5, #32
 8008e10:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e14:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8008e18:	2d00      	cmp	r5, #0
 8008e1a:	d06a      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x162>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e1c:	069d      	lsls	r5, r3, #26
 8008e1e:	d507      	bpl.n	8008e30 <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e20:	0680      	lsls	r0, r0, #26
 8008e22:	f140 808b 	bpl.w	8008f3c <HAL_UART_IRQHandler+0x1ac>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
      {
        if (huart->RxISR != NULL)
 8008e26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008e28:	b113      	cbz	r3, 8008e30 <HAL_UART_IRQHandler+0xa0>
        {
          huart->RxISR(huart);
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	4798      	blx	r3
 8008e2e:	6822      	ldr	r2, [r4, #0]
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e30:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e34:	6891      	ldr	r1, [r2, #8]
 8008e36:	064f      	lsls	r7, r1, #25
 8008e38:	d403      	bmi.n	8008e42 <HAL_UART_IRQHandler+0xb2>
 8008e3a:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8008e3e:	f000 8093 	beq.w	8008f68 <HAL_UART_IRQHandler+0x1d8>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e42:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e44:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e46:	4b4c      	ldr	r3, [pc, #304]	; (8008f78 <HAL_UART_IRQHandler+0x1e8>)

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e48:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e4a:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8008e4e:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e50:	6891      	ldr	r1, [r2, #8]
 8008e52:	400b      	ands	r3, r1
 8008e54:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8008e56:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e5a:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8008e5c:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e5e:	065e      	lsls	r6, r3, #25
 8008e60:	d568      	bpl.n	8008f34 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e62:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008e64:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e6a:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	d061      	beq.n	8008f34 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e70:	4b42      	ldr	r3, [pc, #264]	; (8008f7c <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e72:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e74:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e76:	f7fc fa47 	bl	8005308 <HAL_DMA_Abort_IT>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d039      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e7e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8008e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e84:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008e86:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e88:	069f      	lsls	r7, r3, #26
 8008e8a:	d509      	bpl.n	8008ea0 <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e8c:	0686      	lsls	r6, r0, #26
 8008e8e:	d505      	bpl.n	8008e9c <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 8008e90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008e92:	b373      	cbz	r3, 8008ef2 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8008e94:	4620      	mov	r0, r4
}
 8008e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8008e9a:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e9c:	00cd      	lsls	r5, r1, #3
 8008e9e:	d4f7      	bmi.n	8008e90 <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ea0:	02dd      	lsls	r5, r3, #11
 8008ea2:	d409      	bmi.n	8008eb8 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ea4:	061e      	lsls	r6, r3, #24
 8008ea6:	d51a      	bpl.n	8008ede <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ea8:	0605      	lsls	r5, r0, #24
 8008eaa:	d516      	bpl.n	8008eda <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 8008eac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008eae:	b303      	cbz	r3, 8008ef2 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8008eb0:	4620      	mov	r0, r4
}
 8008eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8008eb6:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008eb8:	024f      	lsls	r7, r1, #9
 8008eba:	d5f3      	bpl.n	8008ea4 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ebc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008ec0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ec2:	6213      	str	r3, [r2, #32]
}
 8008ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008ec8:	f000 bc00 	b.w	80096cc <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ecc:	4e2c      	ldr	r6, [pc, #176]	; (8008f80 <HAL_UART_IRQHandler+0x1f0>)
 8008ece:	4230      	tst	r0, r6
 8008ed0:	d0e6      	beq.n	8008ea0 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ed2:	07df      	lsls	r7, r3, #31
 8008ed4:	f57f af77 	bpl.w	8008dc6 <HAL_UART_IRQHandler+0x36>
 8008ed8:	e76b      	b.n	8008db2 <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008eda:	020f      	lsls	r7, r1, #8
 8008edc:	d4e6      	bmi.n	8008eac <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ede:	065e      	lsls	r6, r3, #25
 8008ee0:	d501      	bpl.n	8008ee6 <HAL_UART_IRQHandler+0x156>
 8008ee2:	0645      	lsls	r5, r0, #25
 8008ee4:	d42e      	bmi.n	8008f44 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ee6:	0219      	lsls	r1, r3, #8
 8008ee8:	d414      	bmi.n	8008f14 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008eea:	01db      	lsls	r3, r3, #7
 8008eec:	d501      	bpl.n	8008ef2 <HAL_UART_IRQHandler+0x162>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	db35      	blt.n	8008f5e <HAL_UART_IRQHandler+0x1ce>
}
 8008ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ef6:	2e00      	cmp	r6, #0
 8008ef8:	f43f af77 	beq.w	8008dea <HAL_UART_IRQHandler+0x5a>
 8008efc:	07ce      	lsls	r6, r1, #31
 8008efe:	f57f af74 	bpl.w	8008dea <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f02:	2604      	movs	r6, #4
 8008f04:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f06:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8008f0a:	f046 0602 	orr.w	r6, r6, #2
 8008f0e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8008f12:	e76a      	b.n	8008dea <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008f14:	0042      	lsls	r2, r0, #1
 8008f16:	d5e8      	bpl.n	8008eea <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f18:	4620      	mov	r0, r4
}
 8008f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f1e:	f000 bbd9 	b.w	80096d4 <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f22:	2508      	movs	r5, #8
 8008f24:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f26:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8008f2a:	f045 0508 	orr.w	r5, r5, #8
 8008f2e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8008f32:	e762      	b.n	8008dfa <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8008f34:	4620      	mov	r0, r4
 8008f36:	f7ff ff29 	bl	8008d8c <HAL_UART_ErrorCallback>
 8008f3a:	e7da      	b.n	8008ef2 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f3c:	00cb      	lsls	r3, r1, #3
 8008f3e:	f57f af77 	bpl.w	8008e30 <HAL_UART_IRQHandler+0xa0>
 8008f42:	e770      	b.n	8008e26 <HAL_UART_IRQHandler+0x96>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f44:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f46:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f48:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f4a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f50:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008f52:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8008f56:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8008f58:	f7ff ff16 	bl	8008d88 <HAL_UART_TxCpltCallback>
 8008f5c:	e7c9      	b.n	8008ef2 <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f5e:	4620      	mov	r0, r4
}
 8008f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f64:	f000 bbb4 	b.w	80096d0 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f7ff ff0f 	bl	8008d8c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8008f72:	e7be      	b.n	8008ef2 <HAL_UART_IRQHandler+0x162>
 8008f74:	10000001 	.word	0x10000001
 8008f78:	effffffe 	.word	0xeffffffe
 8008f7c:	08008f85 	.word	0x08008f85
 8008f80:	04000120 	.word	0x04000120

08008f84 <UART_DMAAbortOnError>:
{
 8008f84:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8008f86:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f88:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8008f8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 8008f8e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8008f90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8008f94:	f7ff fefa 	bl	8008d8c <HAL_UART_ErrorCallback>
}
 8008f98:	bd08      	pop	{r3, pc}
 8008f9a:	bf00      	nop

08008f9c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008f9e:	07da      	lsls	r2, r3, #31
{
 8008fa0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fa2:	d506      	bpl.n	8008fb2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fa4:	6801      	ldr	r1, [r0, #0]
 8008fa6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008fa8:	684a      	ldr	r2, [r1, #4]
 8008faa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008fae:	4322      	orrs	r2, r4
 8008fb0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fb2:	079c      	lsls	r4, r3, #30
 8008fb4:	d506      	bpl.n	8008fc4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fb6:	6801      	ldr	r1, [r0, #0]
 8008fb8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008fba:	684a      	ldr	r2, [r1, #4]
 8008fbc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008fc0:	4322      	orrs	r2, r4
 8008fc2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fc4:	0759      	lsls	r1, r3, #29
 8008fc6:	d506      	bpl.n	8008fd6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fc8:	6801      	ldr	r1, [r0, #0]
 8008fca:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008fcc:	684a      	ldr	r2, [r1, #4]
 8008fce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008fd2:	4322      	orrs	r2, r4
 8008fd4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fd6:	071a      	lsls	r2, r3, #28
 8008fd8:	d506      	bpl.n	8008fe8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fda:	6801      	ldr	r1, [r0, #0]
 8008fdc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008fde:	684a      	ldr	r2, [r1, #4]
 8008fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fe4:	4322      	orrs	r2, r4
 8008fe6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fe8:	06dc      	lsls	r4, r3, #27
 8008fea:	d506      	bpl.n	8008ffa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fec:	6801      	ldr	r1, [r0, #0]
 8008fee:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008ff0:	688a      	ldr	r2, [r1, #8]
 8008ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ff6:	4322      	orrs	r2, r4
 8008ff8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ffa:	0699      	lsls	r1, r3, #26
 8008ffc:	d506      	bpl.n	800900c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ffe:	6801      	ldr	r1, [r0, #0]
 8009000:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009002:	688a      	ldr	r2, [r1, #8]
 8009004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009008:	4322      	orrs	r2, r4
 800900a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800900c:	065a      	lsls	r2, r3, #25
 800900e:	d50a      	bpl.n	8009026 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009010:	6801      	ldr	r1, [r0, #0]
 8009012:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009014:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009016:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800901a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800901e:	ea42 0204 	orr.w	r2, r2, r4
 8009022:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009024:	d00b      	beq.n	800903e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009026:	061b      	lsls	r3, r3, #24
 8009028:	d506      	bpl.n	8009038 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800902a:	6802      	ldr	r2, [r0, #0]
 800902c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800902e:	6853      	ldr	r3, [r2, #4]
 8009030:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009034:	430b      	orrs	r3, r1
 8009036:	6053      	str	r3, [r2, #4]
}
 8009038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800903c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800903e:	684a      	ldr	r2, [r1, #4]
 8009040:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009042:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009046:	4322      	orrs	r2, r4
 8009048:	604a      	str	r2, [r1, #4]
 800904a:	e7ec      	b.n	8009026 <UART_AdvFeatureConfig+0x8a>

0800904c <HAL_UART_Init>:
  if (huart == NULL)
 800904c:	2800      	cmp	r0, #0
 800904e:	f000 80d2 	beq.w	80091f6 <HAL_UART_Init+0x1aa>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009052:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8009056:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800905a:	4604      	mov	r4, r0
 800905c:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_RESET)
 800905e:	2b00      	cmp	r3, #0
 8009060:	d058      	beq.n	8009114 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 8009062:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009064:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009066:	6921      	ldr	r1, [r4, #16]
 8009068:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800906a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800906e:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 8009070:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009072:	6960      	ldr	r0, [r4, #20]
 8009074:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8009076:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800907a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800907c:	48a1      	ldr	r0, [pc, #644]	; (8009304 <HAL_UART_Init+0x2b8>)
  __HAL_UART_DISABLE(huart);
 800907e:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009080:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009082:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009084:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009086:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009088:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 800908a:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800908c:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009090:	4e9d      	ldr	r6, [pc, #628]	; (8009308 <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009092:	4302      	orrs	r2, r0
 8009094:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009096:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009098:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80090a0:	ea42 0207 	orr.w	r2, r2, r7
 80090a4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090a6:	f000 808b 	beq.w	80091c0 <HAL_UART_Init+0x174>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090aa:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80090ac:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090ae:	4897      	ldr	r0, [pc, #604]	; (800930c <HAL_UART_Init+0x2c0>)
    tmpreg |= huart->Init.OneBitSampling;
 80090b0:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090b4:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090b6:	4e96      	ldr	r6, [pc, #600]	; (8009310 <HAL_UART_Init+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090b8:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ba:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090bc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c0:	f022 020f 	bic.w	r2, r2, #15
 80090c4:	ea42 0205 	orr.w	r2, r2, r5
 80090c8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ca:	d028      	beq.n	800911e <HAL_UART_Init+0xd2>
 80090cc:	4a91      	ldr	r2, [pc, #580]	; (8009314 <HAL_UART_Init+0x2c8>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	f000 810e 	beq.w	80092f0 <HAL_UART_Init+0x2a4>
 80090d4:	4a90      	ldr	r2, [pc, #576]	; (8009318 <HAL_UART_Init+0x2cc>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	f000 8100 	beq.w	80092dc <HAL_UART_Init+0x290>
 80090dc:	4a8f      	ldr	r2, [pc, #572]	; (800931c <HAL_UART_Init+0x2d0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	f000 829e 	beq.w	8009620 <HAL_UART_Init+0x5d4>
 80090e4:	4a8e      	ldr	r2, [pc, #568]	; (8009320 <HAL_UART_Init+0x2d4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	f000 82a4 	beq.w	8009634 <HAL_UART_Init+0x5e8>
 80090ec:	4a8d      	ldr	r2, [pc, #564]	; (8009324 <HAL_UART_Init+0x2d8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	f000 82aa 	beq.w	8009648 <HAL_UART_Init+0x5fc>
 80090f4:	4a8c      	ldr	r2, [pc, #560]	; (8009328 <HAL_UART_Init+0x2dc>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	f000 82c5 	beq.w	8009686 <HAL_UART_Init+0x63a>
 80090fc:	4a8b      	ldr	r2, [pc, #556]	; (800932c <HAL_UART_Init+0x2e0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d16f      	bne.n	80091e2 <HAL_UART_Init+0x196>
 8009102:	4b8b      	ldr	r3, [pc, #556]	; (8009330 <HAL_UART_Init+0x2e4>)
 8009104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	2b05      	cmp	r3, #5
 800910c:	d869      	bhi.n	80091e2 <HAL_UART_Init+0x196>
 800910e:	4a89      	ldr	r2, [pc, #548]	; (8009334 <HAL_UART_Init+0x2e8>)
 8009110:	5cd3      	ldrb	r3, [r2, r3]
 8009112:	e00c      	b.n	800912e <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 8009114:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8009118:	f7fa f9bc 	bl	8003494 <HAL_UART_MspInit>
 800911c:	e7a1      	b.n	8009062 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800911e:	4b84      	ldr	r3, [pc, #528]	; (8009330 <HAL_UART_Init+0x2e4>)
 8009120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009126:	2b28      	cmp	r3, #40	; 0x28
 8009128:	d85b      	bhi.n	80091e2 <HAL_UART_Init+0x196>
 800912a:	4a83      	ldr	r2, [pc, #524]	; (8009338 <HAL_UART_Init+0x2ec>)
 800912c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800912e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009132:	f000 810f 	beq.w	8009354 <HAL_UART_Init+0x308>
    switch (clocksource)
 8009136:	2b40      	cmp	r3, #64	; 0x40
 8009138:	d853      	bhi.n	80091e2 <HAL_UART_Init+0x196>
 800913a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800913e:	0209      	.short	0x0209
 8009140:	0052020c 	.word	0x0052020c
 8009144:	02040052 	.word	0x02040052
 8009148:	00520052 	.word	0x00520052
 800914c:	01fc0052 	.word	0x01fc0052
 8009150:	00520052 	.word	0x00520052
 8009154:	00520052 	.word	0x00520052
 8009158:	00520052 	.word	0x00520052
 800915c:	01d00052 	.word	0x01d00052
 8009160:	00520052 	.word	0x00520052
 8009164:	00520052 	.word	0x00520052
 8009168:	00520052 	.word	0x00520052
 800916c:	00520052 	.word	0x00520052
 8009170:	00520052 	.word	0x00520052
 8009174:	00520052 	.word	0x00520052
 8009178:	00520052 	.word	0x00520052
 800917c:	02120052 	.word	0x02120052
 8009180:	00520052 	.word	0x00520052
 8009184:	00520052 	.word	0x00520052
 8009188:	00520052 	.word	0x00520052
 800918c:	00520052 	.word	0x00520052
 8009190:	00520052 	.word	0x00520052
 8009194:	00520052 	.word	0x00520052
 8009198:	00520052 	.word	0x00520052
 800919c:	00520052 	.word	0x00520052
 80091a0:	00520052 	.word	0x00520052
 80091a4:	00520052 	.word	0x00520052
 80091a8:	00520052 	.word	0x00520052
 80091ac:	00520052 	.word	0x00520052
 80091b0:	00520052 	.word	0x00520052
 80091b4:	00520052 	.word	0x00520052
 80091b8:	00520052 	.word	0x00520052
 80091bc:	020f0052 	.word	0x020f0052
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091c0:	6898      	ldr	r0, [r3, #8]
 80091c2:	4a52      	ldr	r2, [pc, #328]	; (800930c <HAL_UART_Init+0x2c0>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091c4:	495a      	ldr	r1, [pc, #360]	; (8009330 <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091c6:	4002      	ands	r2, r0
 80091c8:	ea42 020c 	orr.w	r2, r2, ip
 80091cc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d0:	f022 020f 	bic.w	r2, r2, #15
 80091d4:	432a      	orrs	r2, r5
 80091d6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091d8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	2b05      	cmp	r3, #5
 80091e0:	d90b      	bls.n	80091fa <HAL_UART_Init+0x1ae>
  huart->RxISR = NULL;
 80091e2:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80091e4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 80091e8:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 80091ea:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80091ec:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 80091f0:	b007      	add	sp, #28
 80091f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 80091f6:	2001      	movs	r0, #1
}
 80091f8:	4770      	bx	lr
    switch (clocksource)
 80091fa:	4a50      	ldr	r2, [pc, #320]	; (800933c <HAL_UART_Init+0x2f0>)
 80091fc:	5cd3      	ldrb	r3, [r2, r3]
 80091fe:	2b08      	cmp	r3, #8
 8009200:	f000 823c 	beq.w	800967c <HAL_UART_Init+0x630>
 8009204:	f240 822a 	bls.w	800965c <HAL_UART_Init+0x610>
 8009208:	2b20      	cmp	r3, #32
 800920a:	f000 81ac 	beq.w	8009566 <HAL_UART_Init+0x51a>
 800920e:	2b40      	cmp	r3, #64	; 0x40
 8009210:	f000 8245 	beq.w	800969e <HAL_UART_Init+0x652>
 8009214:	2b10      	cmp	r3, #16
 8009216:	d1e4      	bne.n	80091e2 <HAL_UART_Init+0x196>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009218:	680b      	ldr	r3, [r1, #0]
 800921a:	069f      	lsls	r7, r3, #26
 800921c:	f140 8242 	bpl.w	80096a4 <HAL_UART_Init+0x658>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009220:	680b      	ldr	r3, [r1, #0]
 8009222:	4847      	ldr	r0, [pc, #284]	; (8009340 <HAL_UART_Init+0x2f4>)
 8009224:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009228:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800922a:	4b46      	ldr	r3, [pc, #280]	; (8009344 <HAL_UART_Init+0x2f8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800922c:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800922e:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009232:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009236:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800923a:	428b      	cmp	r3, r1
 800923c:	d3d1      	bcc.n	80091e2 <HAL_UART_Init+0x196>
 800923e:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8009242:	d8ce      	bhi.n	80091e2 <HAL_UART_Init+0x196>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009244:	2500      	movs	r5, #0
 8009246:	2300      	movs	r3, #0
 8009248:	0877      	lsrs	r7, r6, #1
 800924a:	4629      	mov	r1, r5
 800924c:	f7f7 f900 	bl	8000450 <__aeabi_uldivmod>
 8009250:	4632      	mov	r2, r6
 8009252:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8009256:	462b      	mov	r3, r5
 8009258:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800925c:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8009260:	eb18 0007 	adds.w	r0, r8, r7
 8009264:	f149 0100 	adc.w	r1, r9, #0
 8009268:	f7f7 f8f2 	bl	8000450 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800926c:	4b36      	ldr	r3, [pc, #216]	; (8009348 <HAL_UART_Init+0x2fc>)
 800926e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009272:	429a      	cmp	r2, r3
 8009274:	d8b5      	bhi.n	80091e2 <HAL_UART_Init+0x196>
          huart->Instance->BRR = usartdiv;
 8009276:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8009278:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800927c:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 800927e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8009280:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 8151 	bne.w	800952e <HAL_UART_Init+0x4e2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800928c:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928e:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009298:	689a      	ldr	r2, [r3, #8]
 800929a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800929e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	f042 0201 	orr.w	r2, r2, #1
 80092a6:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a8:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 80092ac:	f7fa faa6 	bl	80037fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092b0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80092b2:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	0711      	lsls	r1, r2, #28
 80092b8:	f100 80d4 	bmi.w	8009464 <HAL_UART_Init+0x418>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	0750      	lsls	r0, r2, #29
 80092c0:	f100 80f9 	bmi.w	80094b6 <HAL_UART_Init+0x46a>
  __HAL_UNLOCK(huart);
 80092c4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80092c6:	2220      	movs	r2, #32
  return HAL_OK;
 80092c8:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80092ca:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80092ce:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80092d2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 80092d6:	b007      	add	sp, #28
 80092d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092dc:	4b14      	ldr	r3, [pc, #80]	; (8009330 <HAL_UART_Init+0x2e4>)
 80092de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	2b05      	cmp	r3, #5
 80092e6:	f63f af7c 	bhi.w	80091e2 <HAL_UART_Init+0x196>
 80092ea:	4a18      	ldr	r2, [pc, #96]	; (800934c <HAL_UART_Init+0x300>)
 80092ec:	5cd3      	ldrb	r3, [r2, r3]
 80092ee:	e71e      	b.n	800912e <HAL_UART_Init+0xe2>
 80092f0:	4b0f      	ldr	r3, [pc, #60]	; (8009330 <HAL_UART_Init+0x2e4>)
 80092f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f4:	f003 0307 	and.w	r3, r3, #7
 80092f8:	2b05      	cmp	r3, #5
 80092fa:	f63f af72 	bhi.w	80091e2 <HAL_UART_Init+0x196>
 80092fe:	4a14      	ldr	r2, [pc, #80]	; (8009350 <HAL_UART_Init+0x304>)
 8009300:	5cd3      	ldrb	r3, [r2, r3]
 8009302:	e714      	b.n	800912e <HAL_UART_Init+0xe2>
 8009304:	cfff69f3 	.word	0xcfff69f3
 8009308:	58000c00 	.word	0x58000c00
 800930c:	11fff4ff 	.word	0x11fff4ff
 8009310:	40011000 	.word	0x40011000
 8009314:	40004400 	.word	0x40004400
 8009318:	40004800 	.word	0x40004800
 800931c:	40004c00 	.word	0x40004c00
 8009320:	40005000 	.word	0x40005000
 8009324:	40011400 	.word	0x40011400
 8009328:	40007800 	.word	0x40007800
 800932c:	40007c00 	.word	0x40007c00
 8009330:	58024400 	.word	0x58024400
 8009334:	080163d8 	.word	0x080163d8
 8009338:	080163ac 	.word	0x080163ac
 800933c:	080163e0 	.word	0x080163e0
 8009340:	03d09000 	.word	0x03d09000
 8009344:	080163e8 	.word	0x080163e8
 8009348:	000ffcff 	.word	0x000ffcff
 800934c:	080163d8 	.word	0x080163d8
 8009350:	080163d8 	.word	0x080163d8
    switch (clocksource)
 8009354:	2b40      	cmp	r3, #64	; 0x40
 8009356:	f63f af44 	bhi.w	80091e2 <HAL_UART_Init+0x196>
 800935a:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <HAL_UART_Init+0x314>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	080095d7 	.word	0x080095d7
 8009364:	080095d1 	.word	0x080095d1
 8009368:	080091e3 	.word	0x080091e3
 800936c:	080091e3 	.word	0x080091e3
 8009370:	080095dd 	.word	0x080095dd
 8009374:	080091e3 	.word	0x080091e3
 8009378:	080091e3 	.word	0x080091e3
 800937c:	080091e3 	.word	0x080091e3
 8009380:	080095c3 	.word	0x080095c3
 8009384:	080091e3 	.word	0x080091e3
 8009388:	080091e3 	.word	0x080091e3
 800938c:	080091e3 	.word	0x080091e3
 8009390:	080091e3 	.word	0x080091e3
 8009394:	080091e3 	.word	0x080091e3
 8009398:	080091e3 	.word	0x080091e3
 800939c:	080091e3 	.word	0x080091e3
 80093a0:	0800956b 	.word	0x0800956b
 80093a4:	080091e3 	.word	0x080091e3
 80093a8:	080091e3 	.word	0x080091e3
 80093ac:	080091e3 	.word	0x080091e3
 80093b0:	080091e3 	.word	0x080091e3
 80093b4:	080091e3 	.word	0x080091e3
 80093b8:	080091e3 	.word	0x080091e3
 80093bc:	080091e3 	.word	0x080091e3
 80093c0:	080091e3 	.word	0x080091e3
 80093c4:	080091e3 	.word	0x080091e3
 80093c8:	080091e3 	.word	0x080091e3
 80093cc:	080091e3 	.word	0x080091e3
 80093d0:	080091e3 	.word	0x080091e3
 80093d4:	080091e3 	.word	0x080091e3
 80093d8:	080091e3 	.word	0x080091e3
 80093dc:	080091e3 	.word	0x080091e3
 80093e0:	080095e7 	.word	0x080095e7
 80093e4:	080091e3 	.word	0x080091e3
 80093e8:	080091e3 	.word	0x080091e3
 80093ec:	080091e3 	.word	0x080091e3
 80093f0:	080091e3 	.word	0x080091e3
 80093f4:	080091e3 	.word	0x080091e3
 80093f8:	080091e3 	.word	0x080091e3
 80093fc:	080091e3 	.word	0x080091e3
 8009400:	080091e3 	.word	0x080091e3
 8009404:	080091e3 	.word	0x080091e3
 8009408:	080091e3 	.word	0x080091e3
 800940c:	080091e3 	.word	0x080091e3
 8009410:	080091e3 	.word	0x080091e3
 8009414:	080091e3 	.word	0x080091e3
 8009418:	080091e3 	.word	0x080091e3
 800941c:	080091e3 	.word	0x080091e3
 8009420:	080091e3 	.word	0x080091e3
 8009424:	080091e3 	.word	0x080091e3
 8009428:	080091e3 	.word	0x080091e3
 800942c:	080091e3 	.word	0x080091e3
 8009430:	080091e3 	.word	0x080091e3
 8009434:	080091e3 	.word	0x080091e3
 8009438:	080091e3 	.word	0x080091e3
 800943c:	080091e3 	.word	0x080091e3
 8009440:	080091e3 	.word	0x080091e3
 8009444:	080091e3 	.word	0x080091e3
 8009448:	080091e3 	.word	0x080091e3
 800944c:	080091e3 	.word	0x080091e3
 8009450:	080091e3 	.word	0x080091e3
 8009454:	080091e3 	.word	0x080091e3
 8009458:	080091e3 	.word	0x080091e3
 800945c:	080091e3 	.word	0x080091e3
 8009460:	080095eb 	.word	0x080095eb
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009464:	69dd      	ldr	r5, [r3, #28]
 8009466:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800946a:	f47f af27 	bne.w	80092bc <HAL_UART_Init+0x270>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800946e:	f7fa f9c5 	bl	80037fc <HAL_GetTick>
 8009472:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009474:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009476:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800947a:	f080 80c0 	bcs.w	80095fe <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	0752      	lsls	r2, r2, #29
 8009482:	d5ef      	bpl.n	8009464 <HAL_UART_Init+0x418>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009484:	69da      	ldr	r2, [r3, #28]
 8009486:	0517      	lsls	r7, r2, #20
 8009488:	d5ec      	bpl.n	8009464 <HAL_UART_Init+0x418>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800948a:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800948e:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8009490:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009492:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009494:	6819      	ldr	r1, [r3, #0]
 8009496:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800949a:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949c:	6899      	ldr	r1, [r3, #8]
 800949e:	f021 0101 	bic.w	r1, r1, #1
 80094a2:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80094a4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 80094a8:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80094ac:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094b0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 80094b4:	e69c      	b.n	80091f0 <HAL_UART_Init+0x1a4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b6:	69dd      	ldr	r5, [r3, #28]
 80094b8:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 80094bc:	f47f af02 	bne.w	80092c4 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094c0:	f7fa f99c 	bl	80037fc <HAL_GetTick>
 80094c4:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094c6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094c8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80094cc:	f080 8097 	bcs.w	80095fe <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	0751      	lsls	r1, r2, #29
 80094d4:	d5ef      	bpl.n	80094b6 <HAL_UART_Init+0x46a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094d6:	69da      	ldr	r2, [r3, #28]
 80094d8:	0512      	lsls	r2, r2, #20
 80094da:	d5ec      	bpl.n	80094b6 <HAL_UART_Init+0x46a>
 80094dc:	e7d5      	b.n	800948a <HAL_UART_Init+0x43e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094de:	4b73      	ldr	r3, [pc, #460]	; (80096ac <HAL_UART_Init+0x660>)
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	0690      	lsls	r0, r2, #26
 80094e4:	f140 80d9 	bpl.w	800969a <HAL_UART_Init+0x64e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4871      	ldr	r0, [pc, #452]	; (80096b0 <HAL_UART_Init+0x664>)
 80094ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80094f0:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094f2:	4b70      	ldr	r3, [pc, #448]	; (80096b4 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094f4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094f8:	6862      	ldr	r2, [r4, #4]
 80094fa:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80094fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009502:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009506:	fbb3 f3f2 	udiv	r3, r3, r2
 800950a:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800950c:	f1a3 0210 	sub.w	r2, r3, #16
 8009510:	428a      	cmp	r2, r1
 8009512:	f63f ae66 	bhi.w	80091e2 <HAL_UART_Init+0x196>
        huart->Instance->BRR = usartdiv;
 8009516:	6820      	ldr	r0, [r4, #0]
  huart->NbTxDataToProcess = 1;
 8009518:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 800951a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 800951e:	60c3      	str	r3, [r0, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009520:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 8009522:	6722      	str	r2, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 8009524:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009528:	2b00      	cmp	r3, #0
 800952a:	f43f aeaf 	beq.w	800928c <HAL_UART_Init+0x240>
    UART_AdvFeatureConfig(huart);
 800952e:	4620      	mov	r0, r4
 8009530:	f7ff fd34 	bl	8008f9c <UART_AdvFeatureConfig>
 8009534:	e6aa      	b.n	800928c <HAL_UART_Init+0x240>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009536:	a803      	add	r0, sp, #12
 8009538:	f7ff f818 	bl	800856c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800953c:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800953e:	2800      	cmp	r0, #0
 8009540:	d056      	beq.n	80095f0 <HAL_UART_Init+0x5a4>
 8009542:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009544:	e7d5      	b.n	80094f2 <HAL_UART_Init+0x4a6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009546:	4668      	mov	r0, sp
 8009548:	f7fe ff78 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800954c:	9801      	ldr	r0, [sp, #4]
 800954e:	e7f6      	b.n	800953e <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009550:	f7fd ffae 	bl	80074b0 <HAL_RCC_GetPCLK1Freq>
 8009554:	e7f3      	b.n	800953e <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009556:	f7fe f85b 	bl	8007610 <HAL_RCC_GetPCLK2Freq>
 800955a:	e7f0      	b.n	800953e <HAL_UART_Init+0x4f2>
        pclk = (uint32_t) LSE_VALUE;
 800955c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009560:	e7c7      	b.n	80094f2 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8009562:	4855      	ldr	r0, [pc, #340]	; (80096b8 <HAL_UART_Init+0x66c>)
 8009564:	e7c5      	b.n	80094f2 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8009566:	4854      	ldr	r0, [pc, #336]	; (80096b8 <HAL_UART_Init+0x66c>)
 8009568:	e65f      	b.n	800922a <HAL_UART_Init+0x1de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800956a:	4b50      	ldr	r3, [pc, #320]	; (80096ac <HAL_UART_Init+0x660>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	0696      	lsls	r6, r2, #26
 8009570:	f140 809a 	bpl.w	80096a8 <HAL_UART_Init+0x65c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	484e      	ldr	r0, [pc, #312]	; (80096b0 <HAL_UART_Init+0x664>)
 8009578:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800957c:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800957e:	4b4d      	ldr	r3, [pc, #308]	; (80096b4 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009580:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009584:	6862      	ldr	r2, [r4, #4]
 8009586:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 800958a:	0853      	lsrs	r3, r2, #1
 800958c:	fbb0 f0f5 	udiv	r0, r0, r5
 8009590:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009594:	fbb3 f3f2 	udiv	r3, r3, r2
 8009598:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800959a:	f1a2 0010 	sub.w	r0, r2, #16
 800959e:	4288      	cmp	r0, r1
 80095a0:	f63f ae1f 	bhi.w	80091e2 <HAL_UART_Init+0x196>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095a4:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095a8:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->NbTxDataToProcess = 1;
 80095ac:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 80095ae:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095b0:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 80095b2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 80095b6:	4313      	orrs	r3, r2
 80095b8:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 80095ba:	6721      	str	r1, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 80095bc:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 80095c0:	e660      	b.n	8009284 <HAL_UART_Init+0x238>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095c2:	a803      	add	r0, sp, #12
 80095c4:	f7fe ffd2 	bl	800856c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095c8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80095ca:	b188      	cbz	r0, 80095f0 <HAL_UART_Init+0x5a4>
 80095cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80095ce:	e7d6      	b.n	800957e <HAL_UART_Init+0x532>
        pclk = HAL_RCC_GetPCLK2Freq();
 80095d0:	f7fe f81e 	bl	8007610 <HAL_RCC_GetPCLK2Freq>
 80095d4:	e7f9      	b.n	80095ca <HAL_UART_Init+0x57e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80095d6:	f7fd ff6b 	bl	80074b0 <HAL_RCC_GetPCLK1Freq>
 80095da:	e7f6      	b.n	80095ca <HAL_UART_Init+0x57e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095dc:	4668      	mov	r0, sp
 80095de:	f7fe ff2d 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095e2:	9801      	ldr	r0, [sp, #4]
 80095e4:	e7f1      	b.n	80095ca <HAL_UART_Init+0x57e>
        pclk = (uint32_t) CSI_VALUE;
 80095e6:	4834      	ldr	r0, [pc, #208]	; (80096b8 <HAL_UART_Init+0x66c>)
 80095e8:	e7c9      	b.n	800957e <HAL_UART_Init+0x532>
        pclk = (uint32_t) LSE_VALUE;
 80095ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80095ee:	e7c6      	b.n	800957e <HAL_UART_Init+0x532>
  huart->RxISR = NULL;
 80095f0:	2300      	movs	r3, #0
 80095f2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80095f6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80095f8:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 80095fc:	e642      	b.n	8009284 <HAL_UART_Init+0x238>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80095fe:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8009600:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8009602:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009608:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	f022 0201 	bic.w	r2, r2, #1
 8009610:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009612:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8009616:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800961a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800961e:	e5e7      	b.n	80091f0 <HAL_UART_Init+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009620:	4b22      	ldr	r3, [pc, #136]	; (80096ac <HAL_UART_Init+0x660>)
 8009622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009624:	f003 0307 	and.w	r3, r3, #7
 8009628:	2b05      	cmp	r3, #5
 800962a:	f63f adda 	bhi.w	80091e2 <HAL_UART_Init+0x196>
 800962e:	4a23      	ldr	r2, [pc, #140]	; (80096bc <HAL_UART_Init+0x670>)
 8009630:	5cd3      	ldrb	r3, [r2, r3]
 8009632:	e57c      	b.n	800912e <HAL_UART_Init+0xe2>
 8009634:	4b1d      	ldr	r3, [pc, #116]	; (80096ac <HAL_UART_Init+0x660>)
 8009636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	2b05      	cmp	r3, #5
 800963e:	f63f add0 	bhi.w	80091e2 <HAL_UART_Init+0x196>
 8009642:	4a1f      	ldr	r2, [pc, #124]	; (80096c0 <HAL_UART_Init+0x674>)
 8009644:	5cd3      	ldrb	r3, [r2, r3]
 8009646:	e572      	b.n	800912e <HAL_UART_Init+0xe2>
 8009648:	4b18      	ldr	r3, [pc, #96]	; (80096ac <HAL_UART_Init+0x660>)
 800964a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009650:	2b28      	cmp	r3, #40	; 0x28
 8009652:	f63f adc6 	bhi.w	80091e2 <HAL_UART_Init+0x196>
 8009656:	4a1b      	ldr	r2, [pc, #108]	; (80096c4 <HAL_UART_Init+0x678>)
 8009658:	5cd3      	ldrb	r3, [r2, r3]
 800965a:	e568      	b.n	800912e <HAL_UART_Init+0xe2>
    switch (clocksource)
 800965c:	2b02      	cmp	r3, #2
 800965e:	d00a      	beq.n	8009676 <HAL_UART_Init+0x62a>
 8009660:	2b04      	cmp	r3, #4
 8009662:	f47f adbe 	bne.w	80091e2 <HAL_UART_Init+0x196>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009666:	4668      	mov	r0, sp
 8009668:	f7fe fee8 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800966c:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800966e:	2800      	cmp	r0, #0
 8009670:	d0be      	beq.n	80095f0 <HAL_UART_Init+0x5a4>
 8009672:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009674:	e5d9      	b.n	800922a <HAL_UART_Init+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009676:	f7fe fecf 	bl	8008418 <HAL_RCCEx_GetD3PCLK1Freq>
 800967a:	e7f8      	b.n	800966e <HAL_UART_Init+0x622>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800967c:	a803      	add	r0, sp, #12
 800967e:	f7fe ff75 	bl	800856c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009682:	9804      	ldr	r0, [sp, #16]
 8009684:	e7f3      	b.n	800966e <HAL_UART_Init+0x622>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009686:	4b09      	ldr	r3, [pc, #36]	; (80096ac <HAL_UART_Init+0x660>)
 8009688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	2b05      	cmp	r3, #5
 8009690:	f63f ada7 	bhi.w	80091e2 <HAL_UART_Init+0x196>
 8009694:	4a0c      	ldr	r2, [pc, #48]	; (80096c8 <HAL_UART_Init+0x67c>)
 8009696:	5cd3      	ldrb	r3, [r2, r3]
 8009698:	e549      	b.n	800912e <HAL_UART_Init+0xe2>
          pclk = (uint32_t) HSI_VALUE;
 800969a:	4805      	ldr	r0, [pc, #20]	; (80096b0 <HAL_UART_Init+0x664>)
 800969c:	e729      	b.n	80094f2 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) LSE_VALUE;
 800969e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80096a2:	e5c2      	b.n	800922a <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 80096a4:	4802      	ldr	r0, [pc, #8]	; (80096b0 <HAL_UART_Init+0x664>)
 80096a6:	e5c0      	b.n	800922a <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 80096a8:	4801      	ldr	r0, [pc, #4]	; (80096b0 <HAL_UART_Init+0x664>)
 80096aa:	e768      	b.n	800957e <HAL_UART_Init+0x532>
 80096ac:	58024400 	.word	0x58024400
 80096b0:	03d09000 	.word	0x03d09000
 80096b4:	080163e8 	.word	0x080163e8
 80096b8:	003d0900 	.word	0x003d0900
 80096bc:	080163d8 	.word	0x080163d8
 80096c0:	080163d8 	.word	0x080163d8
 80096c4:	080163ac 	.word	0x080163ac
 80096c8:	080163d8 	.word	0x080163d8

080096cc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop

080096d0 <HAL_UARTEx_RxFifoFullCallback>:
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop

080096d4 <HAL_UARTEx_TxFifoEmptyCallback>:
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop

080096d8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096d8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80096dc:	2a01      	cmp	r2, #1
 80096de:	d017      	beq.n	8009710 <HAL_UARTEx_DisableFifoMode+0x38>
 80096e0:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 80096e2:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096e4:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096e6:	681a      	ldr	r2, [r3, #0]
{
 80096e8:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 80096ea:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80096ee:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f0:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 80096f2:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 80096f4:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096f6:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80096fa:	f025 0501 	bic.w	r5, r5, #1
 80096fe:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009700:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009702:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009704:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009708:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 800970c:	bc70      	pop	{r4, r5, r6}
 800970e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009710:	2002      	movs	r0, #2
}
 8009712:	4770      	bx	lr

08009714 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009714:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8009718:	2a01      	cmp	r2, #1
 800971a:	d046      	beq.n	80097aa <HAL_UARTEx_SetTxFifoThreshold+0x96>
 800971c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 800971e:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009720:	681a      	ldr	r2, [r3, #0]
{
 8009722:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009724:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8009728:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800972a:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800972c:	6810      	ldr	r0, [r2, #0]
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800972e:	4d20      	ldr	r5, [pc, #128]	; (80097b0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8009730:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009734:	4e1f      	ldr	r6, [pc, #124]	; (80097b4 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009736:	9500      	str	r5, [sp, #0]
 8009738:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 800973c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800973e:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009740:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009742:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009746:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800974a:	9602      	str	r6, [sp, #8]
 800974c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009750:	4301      	orrs	r1, r0

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009752:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009754:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009756:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009758:	b320      	cbz	r0, 80097a4 <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800975a:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800975c:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800975e:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009760:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009764:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009768:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800976a:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800976e:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8009772:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009776:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009778:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800977a:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800977e:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009782:	fb90 f0f5 	sdiv	r0, r0, r5
 8009786:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800978a:	2100      	movs	r1, #0
 800978c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009790:	2520      	movs	r5, #32
  return HAL_OK;
 8009792:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009794:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009796:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800979a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 800979e:	b004      	add	sp, #16
 80097a0:	bcf0      	pop	{r4, r5, r6, r7}
 80097a2:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80097a4:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80097a6:	4608      	mov	r0, r1
 80097a8:	e7ed      	b.n	8009786 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 80097aa:	2002      	movs	r0, #2
}
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	03010101 	.word	0x03010101
 80097b4:	04020408 	.word	0x04020408

080097b8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80097b8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80097bc:	2a01      	cmp	r2, #1
 80097be:	d046      	beq.n	800984e <HAL_UARTEx_SetRxFifoThreshold+0x96>
 80097c0:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80097c2:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097c4:	681a      	ldr	r2, [r3, #0]
{
 80097c6:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80097c8:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 80097cc:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ce:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80097d0:	6810      	ldr	r0, [r2, #0]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80097d2:	4d20      	ldr	r5, [pc, #128]	; (8009854 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 80097d4:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80097d8:	4e1f      	ldr	r6, [pc, #124]	; (8009858 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80097da:	9500      	str	r5, [sp, #0]
 80097dc:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 80097e0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097e2:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80097e4:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80097e6:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097ea:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80097ee:	9602      	str	r6, [sp, #8]
 80097f0:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097f4:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097f6:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80097f8:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097fa:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097fc:	b320      	cbz	r0, 8009848 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097fe:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009800:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009802:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009804:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009808:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800980c:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800980e:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009812:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8009816:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800981a:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800981c:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800981e:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009822:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009826:	fb90 f0f5 	sdiv	r0, r0, r5
 800982a:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800982e:	2100      	movs	r1, #0
 8009830:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009834:	2520      	movs	r5, #32
  return HAL_OK;
 8009836:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009838:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800983a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800983e:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8009842:	b004      	add	sp, #16
 8009844:	bcf0      	pop	{r4, r5, r6, r7}
 8009846:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8009848:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800984a:	4608      	mov	r0, r1
 800984c:	e7ed      	b.n	800982a <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 800984e:	2002      	movs	r0, #2
}
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	03010101 	.word	0x03010101
 8009858:	04020408 	.word	0x04020408

0800985c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800985c:	b084      	sub	sp, #16
 800985e:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009860:	9d08      	ldr	r5, [sp, #32]
{
 8009862:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009864:	2d01      	cmp	r5, #1
{
 8009866:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800986a:	d131      	bne.n	80098d0 <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800986c:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800986e:	4b2e      	ldr	r3, [pc, #184]	; (8009928 <USB_CoreInit+0xcc>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009870:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8009874:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009876:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8009878:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800987a:	68c2      	ldr	r2, [r0, #12]
 800987c:	ea03 0302 	and.w	r3, r3, r2
 8009880:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009882:	68c3      	ldr	r3, [r0, #12]
 8009884:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009888:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800988a:	d044      	beq.n	8009916 <USB_CoreInit+0xba>
{
 800988c:	4b27      	ldr	r3, [pc, #156]	; (800992c <USB_CoreInit+0xd0>)
 800988e:	e001      	b.n	8009894 <USB_CoreInit+0x38>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009890:	3b01      	subs	r3, #1
 8009892:	d045      	beq.n	8009920 <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009894:	6902      	ldr	r2, [r0, #16]
 8009896:	2a00      	cmp	r2, #0
 8009898:	dafa      	bge.n	8009890 <USB_CoreInit+0x34>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800989a:	6903      	ldr	r3, [r0, #16]
 800989c:	4a23      	ldr	r2, [pc, #140]	; (800992c <USB_CoreInit+0xd0>)
 800989e:	f043 0301 	orr.w	r3, r3, #1
 80098a2:	6103      	str	r3, [r0, #16]
 80098a4:	e001      	b.n	80098aa <USB_CoreInit+0x4e>

  do
  {
    if (++count > 200000U)
 80098a6:	3a01      	subs	r2, #1
 80098a8:	d03a      	beq.n	8009920 <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098aa:	6903      	ldr	r3, [r0, #16]
 80098ac:	f013 0301 	ands.w	r3, r3, #1
 80098b0:	d1f9      	bne.n	80098a6 <USB_CoreInit+0x4a>
  if (cfg.dma_enable == 1U)
 80098b2:	9a06      	ldr	r2, [sp, #24]
 80098b4:	2a01      	cmp	r2, #1
 80098b6:	d107      	bne.n	80098c8 <USB_CoreInit+0x6c>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098b8:	6882      	ldr	r2, [r0, #8]
 80098ba:	f042 0206 	orr.w	r2, r2, #6
 80098be:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098c0:	6882      	ldr	r2, [r0, #8]
 80098c2:	f042 0220 	orr.w	r2, r2, #32
 80098c6:	6082      	str	r2, [r0, #8]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	bc30      	pop	{r4, r5}
 80098cc:	b004      	add	sp, #16
 80098ce:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098d0:	68c2      	ldr	r2, [r0, #12]
 80098d2:	4b16      	ldr	r3, [pc, #88]	; (800992c <USB_CoreInit+0xd0>)
 80098d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098d8:	60c2      	str	r2, [r0, #12]
 80098da:	e001      	b.n	80098e0 <USB_CoreInit+0x84>
    if (++count > 200000U)
 80098dc:	3b01      	subs	r3, #1
 80098de:	d021      	beq.n	8009924 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098e0:	6902      	ldr	r2, [r0, #16]
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	dafa      	bge.n	80098dc <USB_CoreInit+0x80>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098e6:	6903      	ldr	r3, [r0, #16]
 80098e8:	4a10      	ldr	r2, [pc, #64]	; (800992c <USB_CoreInit+0xd0>)
 80098ea:	f043 0301 	orr.w	r3, r3, #1
 80098ee:	6103      	str	r3, [r0, #16]
 80098f0:	e001      	b.n	80098f6 <USB_CoreInit+0x9a>
    if (++count > 200000U)
 80098f2:	3a01      	subs	r2, #1
 80098f4:	d016      	beq.n	8009924 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098f6:	6903      	ldr	r3, [r0, #16]
 80098f8:	f013 0301 	ands.w	r3, r3, #1
 80098fc:	d1f9      	bne.n	80098f2 <USB_CoreInit+0x96>
    if (cfg.battery_charging_enable == 0U)
 80098fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009900:	b922      	cbnz	r2, 800990c <USB_CoreInit+0xb0>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009902:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009904:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009908:	6382      	str	r2, [r0, #56]	; 0x38
 800990a:	e7d2      	b.n	80098b2 <USB_CoreInit+0x56>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800990c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800990e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009912:	6382      	str	r2, [r0, #56]	; 0x38
 8009914:	e7cd      	b.n	80098b2 <USB_CoreInit+0x56>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009916:	68c3      	ldr	r3, [r0, #12]
 8009918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800991c:	60c3      	str	r3, [r0, #12]
 800991e:	e7b5      	b.n	800988c <USB_CoreInit+0x30>
      return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e7c6      	b.n	80098b2 <USB_CoreInit+0x56>
 8009924:	2303      	movs	r3, #3
 8009926:	e7ea      	b.n	80098fe <USB_CoreInit+0xa2>
 8009928:	ffbdffbf 	.word	0xffbdffbf
 800992c:	00030d40 	.word	0x00030d40

08009930 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8009930:	2a02      	cmp	r2, #2
{
 8009932:	4603      	mov	r3, r0
 8009934:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 8009936:	d00c      	beq.n	8009952 <USB_SetTurnaroundTime+0x22>
 8009938:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800993c:	68d9      	ldr	r1, [r3, #12]
}
 800993e:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009940:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8009944:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009946:	68da      	ldr	r2, [r3, #12]
 8009948:	4322      	orrs	r2, r4
}
 800994a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800994e:	60da      	str	r2, [r3, #12]
}
 8009950:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009952:	4a29      	ldr	r2, [pc, #164]	; (80099f8 <USB_SetTurnaroundTime+0xc8>)
 8009954:	4829      	ldr	r0, [pc, #164]	; (80099fc <USB_SetTurnaroundTime+0xcc>)
 8009956:	440a      	add	r2, r1
 8009958:	4282      	cmp	r2, r0
 800995a:	d93a      	bls.n	80099d2 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800995c:	4a28      	ldr	r2, [pc, #160]	; (8009a00 <USB_SetTurnaroundTime+0xd0>)
 800995e:	4829      	ldr	r0, [pc, #164]	; (8009a04 <USB_SetTurnaroundTime+0xd4>)
 8009960:	440a      	add	r2, r1
 8009962:	4282      	cmp	r2, r0
 8009964:	d932      	bls.n	80099cc <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009966:	4a28      	ldr	r2, [pc, #160]	; (8009a08 <USB_SetTurnaroundTime+0xd8>)
 8009968:	4828      	ldr	r0, [pc, #160]	; (8009a0c <USB_SetTurnaroundTime+0xdc>)
 800996a:	440a      	add	r2, r1
 800996c:	4282      	cmp	r2, r0
 800996e:	d933      	bls.n	80099d8 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009970:	4a27      	ldr	r2, [pc, #156]	; (8009a10 <USB_SetTurnaroundTime+0xe0>)
 8009972:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 8009976:	440a      	add	r2, r1
 8009978:	30a0      	adds	r0, #160	; 0xa0
 800997a:	4282      	cmp	r2, r0
 800997c:	d92f      	bls.n	80099de <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800997e:	4a25      	ldr	r2, [pc, #148]	; (8009a14 <USB_SetTurnaroundTime+0xe4>)
 8009980:	4825      	ldr	r0, [pc, #148]	; (8009a18 <USB_SetTurnaroundTime+0xe8>)
 8009982:	440a      	add	r2, r1
 8009984:	4282      	cmp	r2, r0
 8009986:	d92d      	bls.n	80099e4 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009988:	4a24      	ldr	r2, [pc, #144]	; (8009a1c <USB_SetTurnaroundTime+0xec>)
 800998a:	f500 2092 	add.w	r0, r0, #299008	; 0x49000
 800998e:	440a      	add	r2, r1
 8009990:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
 8009994:	4282      	cmp	r2, r0
 8009996:	d928      	bls.n	80099ea <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009998:	4a21      	ldr	r2, [pc, #132]	; (8009a20 <USB_SetTurnaroundTime+0xf0>)
 800999a:	f500 20c3 	add.w	r0, r0, #399360	; 0x61800
 800999e:	440a      	add	r2, r1
 80099a0:	f500 7020 	add.w	r0, r0, #640	; 0x280
 80099a4:	4282      	cmp	r2, r0
 80099a6:	d9c7      	bls.n	8009938 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80099a8:	4a1e      	ldr	r2, [pc, #120]	; (8009a24 <USB_SetTurnaroundTime+0xf4>)
 80099aa:	f500 10b7 	add.w	r0, r0, #1499136	; 0x16e000
 80099ae:	440a      	add	r2, r1
 80099b0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80099b4:	4282      	cmp	r2, r0
 80099b6:	d91b      	bls.n	80099f0 <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099b8:	4a1b      	ldr	r2, [pc, #108]	; (8009a28 <USB_SetTurnaroundTime+0xf8>)
 80099ba:	4c1c      	ldr	r4, [pc, #112]	; (8009a2c <USB_SetTurnaroundTime+0xfc>)
 80099bc:	440a      	add	r2, r1
 80099be:	42a2      	cmp	r2, r4
 80099c0:	bf8c      	ite	hi
 80099c2:	f44f 54c0 	movhi.w	r4, #6144	; 0x1800
 80099c6:	f44f 54e0 	movls.w	r4, #7168	; 0x1c00
 80099ca:	e7b7      	b.n	800993c <USB_SetTurnaroundTime+0xc>
 80099cc:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 80099d0:	e7b4      	b.n	800993c <USB_SetTurnaroundTime+0xc>
 80099d2:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 80099d6:	e7b1      	b.n	800993c <USB_SetTurnaroundTime+0xc>
 80099d8:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 80099dc:	e7ae      	b.n	800993c <USB_SetTurnaroundTime+0xc>
 80099de:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 80099e2:	e7ab      	b.n	800993c <USB_SetTurnaroundTime+0xc>
 80099e4:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 80099e8:	e7a8      	b.n	800993c <USB_SetTurnaroundTime+0xc>
 80099ea:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 80099ee:	e7a5      	b.n	800993c <USB_SetTurnaroundTime+0xc>
 80099f0:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 80099f4:	e7a2      	b.n	800993c <USB_SetTurnaroundTime+0xc>
 80099f6:	bf00      	nop
 80099f8:	ff275340 	.word	0xff275340
 80099fc:	000c34ff 	.word	0x000c34ff
 8009a00:	ff1b1e40 	.word	0xff1b1e40
 8009a04:	000f423f 	.word	0x000f423f
 8009a08:	ff0bdc00 	.word	0xff0bdc00
 8009a0c:	00124f7f 	.word	0x00124f7f
 8009a10:	fef98c80 	.word	0xfef98c80
 8009a14:	fee5b660 	.word	0xfee5b660
 8009a18:	0016e35f 	.word	0x0016e35f
 8009a1c:	feced300 	.word	0xfeced300
 8009a20:	feb35bc0 	.word	0xfeb35bc0
 8009a24:	fe91ca00 	.word	0xfe91ca00
 8009a28:	fe5954e0 	.word	0xfe5954e0
 8009a2c:	00419cdf 	.word	0x00419cdf

08009a30 <USB_EnableGlobalInt>:
{
 8009a30:	4602      	mov	r2, r0
}
 8009a32:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a34:	6893      	ldr	r3, [r2, #8]
 8009a36:	f043 0301 	orr.w	r3, r3, #1
 8009a3a:	6093      	str	r3, [r2, #8]
}
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop

08009a40 <USB_DisableGlobalInt>:
{
 8009a40:	4602      	mov	r2, r0
}
 8009a42:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a44:	6893      	ldr	r3, [r2, #8]
 8009a46:	f023 0301 	bic.w	r3, r3, #1
 8009a4a:	6093      	str	r3, [r2, #8]
}
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop

08009a50 <USB_SetCurrentMode>:
{
 8009a50:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a52:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009a54:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a56:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a5a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009a5c:	d00b      	beq.n	8009a76 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8009a5e:	b941      	cbnz	r1, 8009a72 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a60:	68c3      	ldr	r3, [r0, #12]
 8009a62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a66:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8009a68:	2032      	movs	r0, #50	; 0x32
 8009a6a:	f7f9 fecd 	bl	8003808 <HAL_Delay>
  return HAL_OK;
 8009a6e:	2000      	movs	r0, #0
}
 8009a70:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8009a72:	2001      	movs	r0, #1
}
 8009a74:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a76:	68c3      	ldr	r3, [r0, #12]
 8009a78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a7c:	60c3      	str	r3, [r0, #12]
 8009a7e:	e7f3      	b.n	8009a68 <USB_SetCurrentMode+0x18>

08009a80 <USB_DevInit>:
{
 8009a80:	b084      	sub	sp, #16
 8009a82:	468c      	mov	ip, r1
 8009a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a88:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	ae08      	add	r6, sp, #32
    USBx->DIEPTXF[i] = 0U;
 8009a8e:	2000      	movs	r0, #0
 8009a90:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8009a94:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
 8009a98:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8009a9c:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
 8009aa0:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
 8009aa4:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8009aa8:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
 8009aac:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
 8009ab0:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
 8009ab4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 8009ab8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8009abc:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8009ac0:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 8009ac4:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8009ac8:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8009acc:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
{
 8009ad0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  if (cfg.vbus_sensing_enable == 0U)
 8009ad4:	2d00      	cmp	r5, #0
 8009ad6:	f040 8094 	bne.w	8009c02 <USB_DevInit+0x182>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f043 0302 	orr.w	r3, r3, #2
 8009ae0:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009ae2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ae4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ae8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af0:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af8:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8009afa:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_PCGCCTL = 0U;
 8009afe:	f8c4 2e00 	str.w	r2, [r4, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b02:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b04:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
 8009b08:	f8c4 2800 	str.w	r2, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b0c:	d07e      	beq.n	8009c0c <USB_DevInit+0x18c>
  USBx_DEVICE->DCFG |= speed;
 8009b0e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8009b12:	f043 0303 	orr.w	r3, r3, #3
 8009b16:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b1a:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8009b1e:	4b47      	ldr	r3, [pc, #284]	; (8009c3c <USB_DevInit+0x1bc>)
 8009b20:	6122      	str	r2, [r4, #16]
 8009b22:	e001      	b.n	8009b28 <USB_DevInit+0xa8>
    if (++count > 200000U)
 8009b24:	3b01      	subs	r3, #1
 8009b26:	d07f      	beq.n	8009c28 <USB_DevInit+0x1a8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b28:	6920      	ldr	r0, [r4, #16]
 8009b2a:	f010 0020 	ands.w	r0, r0, #32
 8009b2e:	d1f9      	bne.n	8009b24 <USB_DevInit+0xa4>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b30:	2210      	movs	r2, #16
 8009b32:	4b42      	ldr	r3, [pc, #264]	; (8009c3c <USB_DevInit+0x1bc>)
 8009b34:	6122      	str	r2, [r4, #16]
 8009b36:	e001      	b.n	8009b3c <USB_DevInit+0xbc>
    if (++count > 200000U)
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	d077      	beq.n	8009c2c <USB_DevInit+0x1ac>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b3c:	6922      	ldr	r2, [r4, #16]
 8009b3e:	06d2      	lsls	r2, r2, #27
 8009b40:	d4fa      	bmi.n	8009b38 <USB_DevInit+0xb8>
  USBx_DEVICE->DIEPMSK = 0U;
 8009b42:	2200      	movs	r2, #0
 8009b44:	613a      	str	r2, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b46:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b48:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b4a:	f1bc 0f00 	cmp.w	ip, #0
 8009b4e:	d019      	beq.n	8009b84 <USB_DevInit+0x104>
 8009b50:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b54:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b58:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b5c:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b5e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8009b62:	e007      	b.n	8009b74 <USB_DevInit+0xf4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b64:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b66:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b68:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b6a:	f8c3 e008 	str.w	lr, [r3, #8]
 8009b6e:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b70:	4562      	cmp	r2, ip
 8009b72:	d02a      	beq.n	8009bca <USB_DevInit+0x14a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b74:	6819      	ldr	r1, [r3, #0]
 8009b76:	2900      	cmp	r1, #0
 8009b78:	daf4      	bge.n	8009b64 <USB_DevInit+0xe4>
      if (i == 0U)
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	d05b      	beq.n	8009c36 <USB_DevInit+0x1b6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b7e:	f8c3 8000 	str.w	r8, [r3]
 8009b82:	e7f0      	b.n	8009b66 <USB_DevInit+0xe6>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b84:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8009b86:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b88:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 8009b8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b92:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8009b94:	61a6      	str	r6, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b96:	6161      	str	r1, [r4, #20]
  if (cfg.dma_enable == 0U)
 8009b98:	b91a      	cbnz	r2, 8009ba2 <USB_DevInit+0x122>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b9a:	69a3      	ldr	r3, [r4, #24]
 8009b9c:	f043 0310 	orr.w	r3, r3, #16
 8009ba0:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ba2:	69a1      	ldr	r1, [r4, #24]
 8009ba4:	4b26      	ldr	r3, [pc, #152]	; (8009c40 <USB_DevInit+0x1c0>)
  if (cfg.Sof_enable != 0U)
 8009ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ba8:	430b      	orrs	r3, r1
 8009baa:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8009bac:	b11a      	cbz	r2, 8009bb6 <USB_DevInit+0x136>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bae:	69a3      	ldr	r3, [r4, #24]
 8009bb0:	f043 0308 	orr.w	r3, r3, #8
 8009bb4:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8009bb6:	2d01      	cmp	r5, #1
 8009bb8:	d103      	bne.n	8009bc2 <USB_DevInit+0x142>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009bba:	69a2      	ldr	r2, [r4, #24]
 8009bbc:	4b21      	ldr	r3, [pc, #132]	; (8009c44 <USB_DevInit+0x1c4>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	61a3      	str	r3, [r4, #24]
}
 8009bc2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bc6:	b004      	add	sp, #16
 8009bc8:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bca:	2100      	movs	r1, #0
 8009bcc:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009bd0:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009bd4:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009bd8:	468c      	mov	ip, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009bda:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8009bde:	e009      	b.n	8009bf4 <USB_DevInit+0x174>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009be0:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009be4:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009be6:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009bea:	f8c3 e008 	str.w	lr, [r3, #8]
 8009bee:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bf0:	4291      	cmp	r1, r2
 8009bf2:	d0c7      	beq.n	8009b84 <USB_DevInit+0x104>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bf4:	681e      	ldr	r6, [r3, #0]
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	daf2      	bge.n	8009be0 <USB_DevInit+0x160>
      if (i == 0U)
 8009bfa:	b1c9      	cbz	r1, 8009c30 <USB_DevInit+0x1b0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009bfc:	f8c3 8000 	str.w	r8, [r3]
 8009c00:	e7f0      	b.n	8009be4 <USB_DevInit+0x164>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009c02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c08:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c0a:	e776      	b.n	8009afa <USB_DevInit+0x7a>
    if (cfg.speed == USBD_HS_SPEED)
 8009c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c0e:	b923      	cbnz	r3, 8009c1a <USB_DevInit+0x19a>
  USBx_DEVICE->DCFG |= speed;
 8009c10:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8009c14:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8009c18:	e77f      	b.n	8009b1a <USB_DevInit+0x9a>
 8009c1a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8009c26:	e778      	b.n	8009b1a <USB_DevInit+0x9a>
    ret = HAL_ERROR;
 8009c28:	2001      	movs	r0, #1
 8009c2a:	e781      	b.n	8009b30 <USB_DevInit+0xb0>
    ret = HAL_ERROR;
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	e788      	b.n	8009b42 <USB_DevInit+0xc2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c30:	f8c3 9000 	str.w	r9, [r3]
 8009c34:	e7d6      	b.n	8009be4 <USB_DevInit+0x164>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c36:	f8c3 9000 	str.w	r9, [r3]
 8009c3a:	e794      	b.n	8009b66 <USB_DevInit+0xe6>
 8009c3c:	00030d40 	.word	0x00030d40
 8009c40:	803c3800 	.word	0x803c3800
 8009c44:	40000004 	.word	0x40000004

08009c48 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c48:	0189      	lsls	r1, r1, #6
 8009c4a:	4a07      	ldr	r2, [pc, #28]	; (8009c68 <USB_FlushTxFifo+0x20>)
 8009c4c:	f041 0120 	orr.w	r1, r1, #32
 8009c50:	6101      	str	r1, [r0, #16]
 8009c52:	e001      	b.n	8009c58 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 8009c54:	3a01      	subs	r2, #1
 8009c56:	d005      	beq.n	8009c64 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c58:	6903      	ldr	r3, [r0, #16]
 8009c5a:	f013 0320 	ands.w	r3, r3, #32
 8009c5e:	d1f9      	bne.n	8009c54 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8009c60:	4618      	mov	r0, r3
 8009c62:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009c64:	2003      	movs	r0, #3
}
 8009c66:	4770      	bx	lr
 8009c68:	00030d40 	.word	0x00030d40

08009c6c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c6c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009c70:	f013 0006 	ands.w	r0, r3, #6
 8009c74:	d004      	beq.n	8009c80 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c76:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8009c7a:	bf14      	ite	ne
 8009c7c:	2002      	movne	r0, #2
 8009c7e:	200f      	moveq	r0, #15
}
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop

08009c84 <USB_ActivateEndpoint>:
{
 8009c84:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8009c86:	780a      	ldrb	r2, [r1, #0]
 8009c88:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 8009c8a:	784d      	ldrb	r5, [r1, #1]
 8009c8c:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8009c90:	f002 060f 	and.w	r6, r2, #15
 8009c94:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8009c98:	2d01      	cmp	r5, #1
 8009c9a:	fa03 f306 	lsl.w	r3, r3, r6
 8009c9e:	d017      	beq.n	8009cd0 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ca0:	69e2      	ldr	r2, [r4, #28]
 8009ca2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009ca6:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ca8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8009cac:	041b      	lsls	r3, r3, #16
 8009cae:	d40c      	bmi.n	8009cca <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cb0:	688a      	ldr	r2, [r1, #8]
 8009cb2:	4b14      	ldr	r3, [pc, #80]	; (8009d04 <USB_ActivateEndpoint+0x80>)
 8009cb4:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009cb8:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cba:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8009cca:	2000      	movs	r0, #0
 8009ccc:	bc70      	pop	{r4, r5, r6}
 8009cce:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009cd0:	69e5      	ldr	r5, [r4, #28]
 8009cd2:	432b      	orrs	r3, r5
 8009cd4:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009cd6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8009cda:	041c      	lsls	r4, r3, #16
 8009cdc:	d4f5      	bmi.n	8009cca <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cde:	688c      	ldr	r4, [r1, #8]
 8009ce0:	4b08      	ldr	r3, [pc, #32]	; (8009d04 <USB_ActivateEndpoint+0x80>)
 8009ce2:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ce6:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ce8:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8009cec:	4323      	orrs	r3, r4
 8009cee:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8009cf2:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8009cf6:	430a      	orrs	r2, r1
}
 8009cf8:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cfa:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8009cfe:	2000      	movs	r0, #0
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	10008000 	.word	0x10008000

08009d08 <USB_DeactivateEndpoint>:
{
 8009d08:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8009d0a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8009d0c:	7849      	ldrb	r1, [r1, #1]
 8009d0e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8009d12:	2901      	cmp	r1, #1
 8009d14:	d02a      	beq.n	8009d6c <USB_DeactivateEndpoint+0x64>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d16:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	db19      	blt.n	8009d52 <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d1e:	f003 010f 	and.w	r1, r3, #15
 8009d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d26:	4c26      	ldr	r4, [pc, #152]	; (8009dc0 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d28:	408b      	lsls	r3, r1
 8009d2a:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8009d2e:	43db      	mvns	r3, r3
 8009d30:	4019      	ands	r1, r3
 8009d32:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d36:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8009d3a:	400b      	ands	r3, r1
 8009d3c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8009d40:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d42:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8009d46:	401c      	ands	r4, r3
 8009d48:	f8c2 4b00 	str.w	r4, [r2, #2816]	; 0xb00
}
 8009d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d50:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d52:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8009d56:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8009d5a:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d5e:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8009d62:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8009d66:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 8009d6a:	e7d8      	b.n	8009d1e <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d6c:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8009d70:	2900      	cmp	r1, #0
 8009d72:	da0b      	bge.n	8009d8c <USB_DeactivateEndpoint+0x84>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d74:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8009d78:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8009d7c:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d80:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8009d84:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8009d88:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d8c:	f003 040f 	and.w	r4, r3, #15
 8009d90:	2301      	movs	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d92:	490c      	ldr	r1, [pc, #48]	; (8009dc4 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d94:	40a3      	lsls	r3, r4
 8009d96:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8009d9a:	43db      	mvns	r3, r3
 8009d9c:	401c      	ands	r4, r3
 8009d9e:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009da2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8009da6:	4023      	ands	r3, r4
}
 8009da8:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dac:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8009db0:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009db2:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8009db6:	4019      	ands	r1, r3
 8009db8:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	eff37800 	.word	0xeff37800
 8009dc4:	ec337800 	.word	0xec337800

08009dc8 <USB_EPStartXfer>:
{
 8009dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (ep->is_in == 1U)
 8009dcc:	f891 c001 	ldrb.w	ip, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8009dd0:	780f      	ldrb	r7, [r1, #0]
  if (ep->is_in == 1U)
 8009dd2:	f1bc 0f01 	cmp.w	ip, #1
 8009dd6:	694b      	ldr	r3, [r1, #20]
 8009dd8:	eb00 1547 	add.w	r5, r0, r7, lsl #5
 8009ddc:	78ce      	ldrb	r6, [r1, #3]
 8009dde:	d055      	beq.n	8009e8c <USB_EPStartXfer+0xc4>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009de0:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 8009de4:	f8df e214 	ldr.w	lr, [pc, #532]	; 8009ffc <USB_EPStartXfer+0x234>
 8009de8:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009dec:	4c81      	ldr	r4, [pc, #516]	; (8009ff4 <USB_EPStartXfer+0x22c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009dee:	ea0c 0e0e 	and.w	lr, ip, lr
 8009df2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8009df6:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009dfa:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8009dfe:	ea0e 0404 	and.w	r4, lr, r4
 8009e02:	613c      	str	r4, [r7, #16]
    if (ep->xfer_len == 0U)
 8009e04:	b38b      	cbz	r3, 8009e6a <USB_EPStartXfer+0xa2>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e06:	eb03 040c 	add.w	r4, r3, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e0a:	4b7b      	ldr	r3, [pc, #492]	; (8009ff8 <USB_EPStartXfer+0x230>)
 8009e0c:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 8009e10:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e12:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e16:	fbb4 f4fc 	udiv	r4, r4, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e1a:	ea03 4ec4 	and.w	lr, r3, r4, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009e1e:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e20:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009e24:	fb0c f304 	mul.w	r3, ip, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e28:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009e2c:	693c      	ldr	r4, [r7, #16]
 8009e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e32:	ea43 0304 	orr.w	r3, r3, r4
 8009e36:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 8009e38:	d023      	beq.n	8009e82 <USB_EPStartXfer+0xba>
    if (ep->type == EP_TYPE_ISOC)
 8009e3a:	2e01      	cmp	r6, #1
 8009e3c:	d10c      	bne.n	8009e58 <USB_EPStartXfer+0x90>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e3e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8009e42:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e46:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8009e4a:	bf0c      	ite	eq
 8009e4c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e50:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8009e54:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e58:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8009e5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e60:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
}
 8009e64:	2000      	movs	r0, #0
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009e6a:	693c      	ldr	r4, [r7, #16]
 8009e6c:	f3cc 0312 	ubfx	r3, ip, #0, #19
    if (dma == 1U)
 8009e70:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009e72:	ea43 0304 	orr.w	r3, r3, r4
 8009e76:	613b      	str	r3, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e7e:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 8009e80:	d1db      	bne.n	8009e3a <USB_EPStartXfer+0x72>
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e82:	68cb      	ldr	r3, [r1, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0d8      	beq.n	8009e3a <USB_EPStartXfer+0x72>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e88:	617b      	str	r3, [r7, #20]
 8009e8a:	e7d6      	b.n	8009e3a <USB_EPStartXfer+0x72>
 8009e8c:	f505 6410 	add.w	r4, r5, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8009e90:	b3f3      	cbz	r3, 8009f10 <USB_EPStartXfer+0x148>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009e92:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e96:	f3c3 0e12 	ubfx	lr, r3, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e9a:	f8d4 a010 	ldr.w	sl, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8009e9e:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ea0:	eb09 0803 	add.w	r8, r9, r3
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ea4:	f8df b154 	ldr.w	fp, [pc, #340]	; 8009ffc <USB_EPStartXfer+0x234>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ea8:	f108 38ff 	add.w	r8, r8, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009eac:	ea0a 0b0b 	and.w	fp, sl, fp
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009eb0:	f8df a140 	ldr.w	sl, [pc, #320]	; 8009ff4 <USB_EPStartXfer+0x22c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009eb4:	f8c4 b010 	str.w	fp, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009eb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ebc:	fbb8 f9f9 	udiv	r9, r8, r9
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ec0:	ea0b 0a0a 	and.w	sl, fp, sl
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ec4:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8009ff8 <USB_EPStartXfer+0x230>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ec8:	f8c4 a010 	str.w	sl, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ecc:	ea08 48c9 	and.w	r8, r8, r9, lsl #19
 8009ed0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ed4:	ea48 0809 	orr.w	r8, r8, r9
 8009ed8:	f8c4 8010 	str.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009edc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8009ee0:	ea4e 0e08 	orr.w	lr, lr, r8
 8009ee4:	f8c4 e010 	str.w	lr, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8009ee8:	d054      	beq.n	8009f94 <USB_EPStartXfer+0x1cc>
    if (dma == 1U)
 8009eea:	2a01      	cmp	r2, #1
 8009eec:	d060      	beq.n	8009fb0 <USB_EPStartXfer+0x1e8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009eee:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ef2:	f007 070f 	and.w	r7, r7, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009efa:	fa0c fc07 	lsl.w	ip, ip, r7
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009efe:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f02:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8009f06:	ea4c 0707 	orr.w	r7, ip, r7
 8009f0a:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
  return HAL_OK;
 8009f0e:	e7a9      	b.n	8009e64 <USB_EPStartXfer+0x9c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f10:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (dma == 1U)
 8009f14:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f16:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8009ff4 <USB_EPStartXfer+0x22c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f1a:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8009ffc <USB_EPStartXfer+0x234>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f1e:	ea08 0e0e 	and.w	lr, r8, lr
 8009f22:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f26:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8009f2a:	f44e 2e00 	orr.w	lr, lr, #524288	; 0x80000
 8009f2e:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f32:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8009f36:	ea0e 0c0c 	and.w	ip, lr, ip
 8009f3a:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 8009f3e:	d037      	beq.n	8009fb0 <USB_EPStartXfer+0x1e8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f40:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8009f44:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f46:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8009f4a:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8009f4e:	d189      	bne.n	8009e64 <USB_EPStartXfer+0x9c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f50:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8009f54:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f58:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8009f5c:	bf0c      	ite	eq
 8009f5e:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f62:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8009f66:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
  if (dma == 0U)
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	f47f af7a 	bne.w	8009e64 <USB_EPStartXfer+0x9c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8009f74:	089a      	lsrs	r2, r3, #2
 8009f76:	f43f af75 	beq.w	8009e64 <USB_EPStartXfer+0x9c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009f7a:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f7c:	eb00 3007 	add.w	r0, r0, r7, lsl #12
 8009f80:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009f84:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8009f88:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 8009f8c:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f8e:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8009f90:	d1fa      	bne.n	8009f88 <USB_EPStartXfer+0x1c0>
 8009f92:	e767      	b.n	8009e64 <USB_EPStartXfer+0x9c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f94:	f8d4 c010 	ldr.w	ip, [r4, #16]
    if (dma == 1U)
 8009f98:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f9a:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8009f9e:	f8c4 c010 	str.w	ip, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009fa2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8009fa6:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8009faa:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 8009fae:	d11a      	bne.n	8009fe6 <USB_EPStartXfer+0x21e>
      if ((uint32_t)ep->dma_addr != 0U)
 8009fb0:	690b      	ldr	r3, [r1, #16]
 8009fb2:	b103      	cbz	r3, 8009fb6 <USB_EPStartXfer+0x1ee>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009fb4:	6163      	str	r3, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8009fb6:	2e01      	cmp	r6, #1
 8009fb8:	d10c      	bne.n	8009fd4 <USB_EPStartXfer+0x20c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fba:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8009fbe:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fc2:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8009fc6:	bf0c      	ite	eq
 8009fc8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fcc:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8009fd0:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fd4:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
}
 8009fd8:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fde:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
}
 8009fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fe6:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8009fea:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8009fee:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 8009ff2:	e7ad      	b.n	8009f50 <USB_EPStartXfer+0x188>
 8009ff4:	e007ffff 	.word	0xe007ffff
 8009ff8:	1ff80000 	.word	0x1ff80000
 8009ffc:	fff80000 	.word	0xfff80000

0800a000 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800a000:	784b      	ldrb	r3, [r1, #1]
{
 800a002:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800a004:	2b01      	cmp	r3, #1
  uint32_t epnum = (uint32_t)ep->num;
 800a006:	780d      	ldrb	r5, [r1, #0]
 800a008:	694f      	ldr	r7, [r1, #20]
 800a00a:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800a00e:	d025      	beq.n	800a05c <USB_EP0StartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a010:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800a014:	4e3d      	ldr	r6, [pc, #244]	; (800a10c <USB_EP0StartXfer+0x10c>)
 800a016:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a018:	4d3d      	ldr	r5, [pc, #244]	; (800a110 <USB_EP0StartXfer+0x110>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a01a:	4006      	ands	r6, r0
 800a01c:	6888      	ldr	r0, [r1, #8]
 800a01e:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a020:	691e      	ldr	r6, [r3, #16]
 800a022:	4035      	ands	r5, r6
 800a024:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 800a026:	b107      	cbz	r7, 800a02a <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800a028:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a02a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a02c:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800a030:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a032:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a036:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a038:	691d      	ldr	r5, [r3, #16]
 800a03a:	ea40 0005 	orr.w	r0, r0, r5
 800a03e:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800a040:	d007      	beq.n	800a052 <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a042:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800a046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a04a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800a04e:	2000      	movs	r0, #0
 800a050:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800a052:	68ca      	ldr	r2, [r1, #12]
 800a054:	2a00      	cmp	r2, #0
 800a056:	d0f4      	beq.n	800a042 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a058:	615a      	str	r2, [r3, #20]
 800a05a:	e7f2      	b.n	800a042 <USB_EP0StartXfer+0x42>
 800a05c:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800a060:	b3bf      	cbz	r7, 800a0d2 <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a062:	f8d3 e010 	ldr.w	lr, [r3, #16]
 800a066:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800a10c <USB_EP0StartXfer+0x10c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a06a:	4e29      	ldr	r6, [pc, #164]	; (800a110 <USB_EP0StartXfer+0x110>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a06c:	ea0e 0c0c 	and.w	ip, lr, ip
      if (ep->xfer_len > ep->maxpacket)
 800a070:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a074:	f8c3 c010 	str.w	ip, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800a078:	45be      	cmp	lr, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a07a:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800a07e:	ea0c 0606 	and.w	r6, ip, r6
 800a082:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800a084:	d202      	bcs.n	800a08c <USB_EP0StartXfer+0x8c>
        ep->xfer_len = ep->maxpacket;
 800a086:	4677      	mov	r7, lr
 800a088:	f8c1 e014 	str.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a08c:	f8d3 c010 	ldr.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a090:	f3c7 0612 	ubfx	r6, r7, #0, #19
    if (dma == 1U)
 800a094:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a096:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 800a09a:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a09e:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800a0a2:	ea46 060c 	orr.w	r6, r6, ip
 800a0a6:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 800a0a8:	d02b      	beq.n	800a102 <USB_EP0StartXfer+0x102>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0aa:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800a0ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0b2:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800a0b6:	2f00      	cmp	r7, #0
 800a0b8:	d0c9      	beq.n	800a04e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	f005 050f 	and.w	r5, r5, #15
 800a0c0:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800a0c4:	fa03 f505 	lsl.w	r5, r3, r5
 800a0c8:	4315      	orrs	r5, r2
 800a0ca:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
}
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0d2:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 800a0d4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0d6:	4d0e      	ldr	r5, [pc, #56]	; (800a110 <USB_EP0StartXfer+0x110>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0d8:	480c      	ldr	r0, [pc, #48]	; (800a10c <USB_EP0StartXfer+0x10c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0da:	ea05 0506 	and.w	r5, r5, r6
 800a0de:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0e0:	691d      	ldr	r5, [r3, #16]
 800a0e2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a0e6:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0e8:	691d      	ldr	r5, [r3, #16]
 800a0ea:	ea00 0005 	and.w	r0, r0, r5
 800a0ee:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800a0f0:	d007      	beq.n	800a102 <USB_EP0StartXfer+0x102>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0f2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 800a0f6:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0fc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800a100:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800a102:	690a      	ldr	r2, [r1, #16]
 800a104:	2a00      	cmp	r2, #0
 800a106:	d0f4      	beq.n	800a0f2 <USB_EP0StartXfer+0xf2>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a108:	615a      	str	r2, [r3, #20]
 800a10a:	e7f2      	b.n	800a0f2 <USB_EP0StartXfer+0xf2>
 800a10c:	fff80000 	.word	0xfff80000
 800a110:	e007ffff 	.word	0xe007ffff

0800a114 <USB_WritePacket>:
{
 800a114:	b410      	push	{r4}
 800a116:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800a11a:	b96c      	cbnz	r4, 800a138 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 800a11c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800a11e:	089b      	lsrs	r3, r3, #2
 800a120:	d00a      	beq.n	800a138 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a122:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800a126:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a12a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800a12e:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800a132:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a134:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800a136:	d1fa      	bne.n	800a12e <USB_WritePacket+0x1a>
}
 800a138:	2000      	movs	r0, #0
 800a13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a140:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800a142:	0892      	lsrs	r2, r2, #2
 800a144:	d00d      	beq.n	800a162 <USB_ReadPacket+0x22>
 800a146:	eb01 0282 	add.w	r2, r1, r2, lsl #2
{
 800a14a:	b410      	push	{r4}
 800a14c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint32_t *pDest = (uint32_t *)dest;
 800a150:	4608      	mov	r0, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 800a158:	4282      	cmp	r2, r0
 800a15a:	d1fa      	bne.n	800a152 <USB_ReadPacket+0x12>
}
 800a15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a160:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800a162:	4608      	mov	r0, r1
}
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop

0800a168 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a168:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a16a:	784a      	ldrb	r2, [r1, #1]
 800a16c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a170:	3300      	adds	r3, #0
 800a172:	bf18      	it	ne
 800a174:	2301      	movne	r3, #1
 800a176:	2a01      	cmp	r2, #1
 800a178:	d012      	beq.n	800a1a0 <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a17a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800a17e:	2a00      	cmp	r2, #0
 800a180:	db06      	blt.n	800a190 <USB_EPSetStall+0x28>
 800a182:	b12b      	cbz	r3, 800a190 <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a184:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a188:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a18c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a190:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a198:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a19c:	2000      	movs	r0, #0
 800a19e:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1a0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	db06      	blt.n	800a1b6 <USB_EPSetStall+0x4e>
 800a1a8:	b12b      	cbz	r3, 800a1b6 <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a1aa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a1ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1b2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a1b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a1ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1be:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop

0800a1c8 <USB_EPClearStall>:
{
 800a1c8:	78cb      	ldrb	r3, [r1, #3]
 800a1ca:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800a1cc:	7849      	ldrb	r1, [r1, #1]
 800a1ce:	3b02      	subs	r3, #2
 800a1d0:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800a1d4:	2901      	cmp	r1, #1
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	d011      	beq.n	800a1fe <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a1da:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a1de:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a1e0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a1e4:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a1e8:	d901      	bls.n	800a1ee <USB_EPClearStall+0x26>
}
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a1ee:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a1f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1f6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1fe:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a202:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a204:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a208:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a20c:	d8ed      	bhi.n	800a1ea <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a20e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a216:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800a21a:	2000      	movs	r0, #0
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop

0800a220 <USB_SetDevAddress>:
{
 800a220:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a222:	0109      	lsls	r1, r1, #4
}
 800a224:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a226:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a22a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a22e:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800a232:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a236:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800a23a:	4311      	orrs	r1, r2
 800a23c:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop

0800a244 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a244:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800a248:	2003      	movs	r0, #3
{
 800a24a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a24c:	6853      	ldr	r3, [r2, #4]
 800a24e:	f023 0302 	bic.w	r3, r3, #2
 800a252:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a254:	f7f9 fad8 	bl	8003808 <HAL_Delay>
}
 800a258:	2000      	movs	r0, #0
 800a25a:	bd08      	pop	{r3, pc}

0800a25c <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a25c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800a260:	2003      	movs	r0, #3
{
 800a262:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a264:	6853      	ldr	r3, [r2, #4]
 800a266:	f043 0302 	orr.w	r3, r3, #2
 800a26a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a26c:	f7f9 facc 	bl	8003808 <HAL_Delay>
}
 800a270:	2000      	movs	r0, #0
 800a272:	bd08      	pop	{r3, pc}

0800a274 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800a274:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800a276:	6980      	ldr	r0, [r0, #24]
}
 800a278:	4010      	ands	r0, r2
 800a27a:	4770      	bx	lr

0800a27c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a27c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a280:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a284:	69c0      	ldr	r0, [r0, #28]
 800a286:	4018      	ands	r0, r3
}
 800a288:	0c00      	lsrs	r0, r0, #16
 800a28a:	4770      	bx	lr

0800a28c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a28c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a290:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a294:	69c0      	ldr	r0, [r0, #28]
 800a296:	4018      	ands	r0, r3
}
 800a298:	b280      	uxth	r0, r0
 800a29a:	4770      	bx	lr

0800a29c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a29c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a2a0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a2a4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a2a8:	6940      	ldr	r0, [r0, #20]
}
 800a2aa:	4010      	ands	r0, r2
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop

0800a2b0 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800a2b0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2b4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 800a2b8:	b410      	push	{r4}
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2ba:	f001 040f 	and.w	r4, r1, #15
  msk = USBx_DEVICE->DIEPMSK;
 800a2be:	6911      	ldr	r1, [r2, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a2c0:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2c2:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2c6:	40e3      	lsrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2c8:	6880      	ldr	r0, [r0, #8]
}
 800a2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2ce:	01db      	lsls	r3, r3, #7
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	430b      	orrs	r3, r1
}
 800a2d4:	4018      	ands	r0, r3
 800a2d6:	4770      	bx	lr

0800a2d8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800a2d8:	6940      	ldr	r0, [r0, #20]
}
 800a2da:	f000 0001 	and.w	r0, r0, #1
 800a2de:	4770      	bx	lr

0800a2e0 <USB_ActivateSetup>:
{
 800a2e0:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2e2:	4a09      	ldr	r2, [pc, #36]	; (800a308 <USB_ActivateSetup+0x28>)
}
 800a2e4:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2e6:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800a2ea:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2ec:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800a2f0:	4022      	ands	r2, r4
}
 800a2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2f6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2fa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a2fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a302:	604b      	str	r3, [r1, #4]
}
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	fffff800 	.word	0xfffff800

0800a30c <USB_EP0_OutStart>:
{
 800a30c:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a30e:	4c12      	ldr	r4, [pc, #72]	; (800a358 <USB_EP0_OutStart+0x4c>)
 800a310:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a314:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a316:	42a5      	cmp	r5, r4
 800a318:	d903      	bls.n	800a322 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a31a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800a31e:	2c00      	cmp	r4, #0
 800a320:	db16      	blt.n	800a350 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a322:	2400      	movs	r4, #0
  if (dma == 1U)
 800a324:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a326:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a328:	691c      	ldr	r4, [r3, #16]
 800a32a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a32e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a330:	691c      	ldr	r4, [r3, #16]
 800a332:	f044 0418 	orr.w	r4, r4, #24
 800a336:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a338:	691c      	ldr	r4, [r3, #16]
 800a33a:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800a33e:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800a340:	d106      	bne.n	800a350 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a342:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a344:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a348:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a34c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a350:	2000      	movs	r0, #0
 800a352:	bc30      	pop	{r4, r5}
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	4f54300a 	.word	0x4f54300a

0800a35c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a35c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a360:	b183      	cbz	r3, 800a384 <USBD_CDC_EP0_RxReady+0x28>
{
 800a362:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a364:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a368:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800a36c:	28ff      	cmp	r0, #255	; 0xff
 800a36e:	d007      	beq.n	800a380 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	4621      	mov	r1, r4
 800a374:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800a378:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800a37a:	23ff      	movs	r3, #255	; 0xff
 800a37c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800a380:	2000      	movs	r0, #0
 800a382:	bd10      	pop	{r4, pc}
 800a384:	2000      	movs	r0, #0
 800a386:	4770      	bx	lr

0800a388 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a388:	2343      	movs	r3, #67	; 0x43
 800a38a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800a38c:	4800      	ldr	r0, [pc, #0]	; (800a390 <USBD_CDC_GetFSCfgDesc+0x8>)
 800a38e:	4770      	bx	lr
 800a390:	2400023c 	.word	0x2400023c

0800a394 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a394:	2343      	movs	r3, #67	; 0x43
 800a396:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800a398:	4800      	ldr	r0, [pc, #0]	; (800a39c <USBD_CDC_GetHSCfgDesc+0x8>)
 800a39a:	4770      	bx	lr
 800a39c:	24000280 	.word	0x24000280

0800a3a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a3a0:	2343      	movs	r3, #67	; 0x43
 800a3a2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800a3a4:	4800      	ldr	r0, [pc, #0]	; (800a3a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800a3a6:	4770      	bx	lr
 800a3a8:	240002d0 	.word	0x240002d0

0800a3ac <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3ac:	230a      	movs	r3, #10
 800a3ae:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800a3b0:	4800      	ldr	r0, [pc, #0]	; (800a3b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800a3b2:	4770      	bx	lr
 800a3b4:	240002c4 	.word	0x240002c4

0800a3b8 <USBD_CDC_DataOut>:
{
 800a3b8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3ba:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800a3be:	b174      	cbz	r4, 800a3de <USBD_CDC_DataOut+0x26>
 800a3c0:	4605      	mov	r5, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a3c2:	f001 f8c7 	bl	800b554 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a3c6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800a3ca:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a3ce:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800a3d8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800a3da:	2000      	movs	r0, #0
}
 800a3dc:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800a3de:	2003      	movs	r0, #3
}
 800a3e0:	bd38      	pop	{r3, r4, r5, pc}
 800a3e2:	bf00      	nop

0800a3e4 <USBD_CDC_DataIn>:
{
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800a3e6:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 800a3ea:	b1a7      	cbz	r7, 800a416 <USBD_CDC_DataIn+0x32>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3ec:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	460a      	mov	r2, r1
 800a3f4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a3f8:	69ae      	ldr	r6, [r5, #24]
 800a3fa:	b976      	cbnz	r6, 800a41a <USBD_CDC_DataIn+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a3fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800a400:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a402:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800a406:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800a40a:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800a40c:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a410:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800a412:	4620      	mov	r0, r4
}
 800a414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800a416:	2003      	movs	r0, #3
}
 800a418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a41a:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800a41e:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800a422:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800a426:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800a42a:	fbb6 f4fc 	udiv	r4, r6, ip
 800a42e:	fb0c 6414 	mls	r4, ip, r4, r6
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a432:	2c00      	cmp	r4, #0
 800a434:	d1e2      	bne.n	800a3fc <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 800a436:	61ac      	str	r4, [r5, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a438:	4623      	mov	r3, r4
 800a43a:	4622      	mov	r2, r4
 800a43c:	f001 f86e 	bl	800b51c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800a440:	4620      	mov	r0, r4
}
 800a442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a444 <USBD_CDC_Setup>:
{
 800a444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a448:	780b      	ldrb	r3, [r1, #0]
{
 800a44a:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800a44c:	2700      	movs	r7, #0
{
 800a44e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a450:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 800a454:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a456:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800a45a:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800a45e:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a462:	d01c      	beq.n	800a49e <USBD_CDC_Setup+0x5a>
 800a464:	2a20      	cmp	r2, #32
 800a466:	d112      	bne.n	800a48e <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 800a468:	88cd      	ldrh	r5, [r1, #6]
 800a46a:	f891 c001 	ldrb.w	ip, [r1, #1]
 800a46e:	2d00      	cmp	r5, #0
 800a470:	d147      	bne.n	800a502 <USBD_CDC_Setup+0xbe>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a472:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a476:	462a      	mov	r2, r5
 800a478:	4660      	mov	r0, ip
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800a47e:	4628      	mov	r0, r5
}
 800a480:	b002      	add	sp, #8
 800a482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a486:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d049      	beq.n	800a522 <USBD_CDC_Setup+0xde>
      USBD_CtlError(pdev, req);
 800a48e:	4630      	mov	r0, r6
 800a490:	4621      	mov	r1, r4
 800a492:	f000 fd15 	bl	800aec0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a496:	2003      	movs	r0, #3
}
 800a498:	b002      	add	sp, #8
 800a49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 800a49e:	784b      	ldrb	r3, [r1, #1]
 800a4a0:	2b0b      	cmp	r3, #11
 800a4a2:	d8f4      	bhi.n	800a48e <USBD_CDC_Setup+0x4a>
 800a4a4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <USBD_CDC_Setup+0x68>)
 800a4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4aa:	bf00      	nop
 800a4ac:	0800a487 	.word	0x0800a487
 800a4b0:	0800a4e5 	.word	0x0800a4e5
 800a4b4:	0800a48f 	.word	0x0800a48f
 800a4b8:	0800a48f 	.word	0x0800a48f
 800a4bc:	0800a48f 	.word	0x0800a48f
 800a4c0:	0800a48f 	.word	0x0800a48f
 800a4c4:	0800a48f 	.word	0x0800a48f
 800a4c8:	0800a48f 	.word	0x0800a48f
 800a4cc:	0800a48f 	.word	0x0800a48f
 800a4d0:	0800a48f 	.word	0x0800a48f
 800a4d4:	0800a4ed 	.word	0x0800a4ed
 800a4d8:	0800a4dd 	.word	0x0800a4dd
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a4dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d1d4      	bne.n	800a48e <USBD_CDC_Setup+0x4a>
  USBD_StatusTypeDef ret = USBD_OK;
 800a4e4:	2000      	movs	r0, #0
}
 800a4e6:	b002      	add	sp, #8
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d1cc      	bne.n	800a48e <USBD_CDC_Setup+0x4a>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f10d 0105 	add.w	r1, sp, #5
 800a4fa:	f000 fd13 	bl	800af24 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a4fe:	2000      	movs	r0, #0
 800a500:	e7ca      	b.n	800a498 <USBD_CDC_Setup+0x54>
      if ((req->bmRequest & 0x80U) != 0U)
 800a502:	061b      	lsls	r3, r3, #24
 800a504:	d514      	bpl.n	800a530 <USBD_CDC_Setup+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a506:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a50a:	462a      	mov	r2, r5
 800a50c:	4660      	mov	r0, ip
 800a50e:	4641      	mov	r1, r8
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a514:	88e2      	ldrh	r2, [r4, #6]
 800a516:	4641      	mov	r1, r8
 800a518:	4630      	mov	r0, r6
 800a51a:	f000 fd03 	bl	800af24 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a51e:	4638      	mov	r0, r7
 800a520:	e7ba      	b.n	800a498 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a522:	2202      	movs	r2, #2
 800a524:	f10d 0106 	add.w	r1, sp, #6
 800a528:	f000 fcfc 	bl	800af24 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a52c:	2000      	movs	r0, #0
 800a52e:	e7b3      	b.n	800a498 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800a530:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a534:	462a      	mov	r2, r5
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a536:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a53a:	4641      	mov	r1, r8
 800a53c:	f000 fd08 	bl	800af50 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800a540:	4638      	mov	r0, r7
 800a542:	e7a9      	b.n	800a498 <USBD_CDC_Setup+0x54>

0800a544 <USBD_CDC_DeInit>:
{
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a548:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a54a:	2181      	movs	r1, #129	; 0x81
 800a54c:	f000 ff9a 	bl	800b484 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a550:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a552:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a554:	4620      	mov	r0, r4
 800a556:	f000 ff95 	bl	800b484 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a55a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a55e:	4620      	mov	r0, r4
 800a560:	2182      	movs	r1, #130	; 0x82
 800a562:	f000 ff8f 	bl	800b484 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800a566:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a56a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800a56c:	b14b      	cbz	r3, 800a582 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a56e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a576:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800a57a:	f002 f92d 	bl	800c7d8 <free>
    pdev->pClassData = NULL;
 800a57e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800a582:	2000      	movs	r0, #0
 800a584:	bd38      	pop	{r3, r4, r5, pc}
 800a586:	bf00      	nop

0800a588 <USBD_CDC_Init>:
{
 800a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a58e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a592:	f002 f919 	bl	800c7c8 <malloc>
  if (hcdc == NULL)
 800a596:	4605      	mov	r5, r0
 800a598:	2800      	cmp	r0, #0
 800a59a:	d04a      	beq.n	800a632 <USBD_CDC_Init+0xaa>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a59c:	7c23      	ldrb	r3, [r4, #16]
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a59e:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 800a5a0:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a4:	b393      	cbz	r3, 800a60c <USBD_CDC_Init+0x84>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5a6:	2340      	movs	r3, #64	; 0x40
 800a5a8:	2181      	movs	r1, #129	; 0x81
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f000 ff57 	bl	800b460 <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5b6:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 ff50 	bl	800b460 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a5c0:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5c2:	2203      	movs	r2, #3
 800a5c4:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5c6:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5ca:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a5cc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	f000 ff45 	bl	800b460 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a5d6:	2701      	movs	r7, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5d8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800a5dc:	2600      	movs	r6, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a5de:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5e6:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 800a5ea:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5ee:	4639      	mov	r1, r7
  hcdc->RxState = 0U;
 800a5f0:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5fa:	f1b8 0f00 	cmp.w	r8, #0
 800a5fe:	d011      	beq.n	800a624 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a600:	2340      	movs	r3, #64	; 0x40
 800a602:	f000 ff99 	bl	800b538 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a606:	4630      	mov	r0, r6
}
 800a608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a60c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a610:	2181      	movs	r1, #129	; 0x81
 800a612:	2202      	movs	r2, #2
 800a614:	4620      	mov	r0, r4
 800a616:	f000 ff23 	bl	800b460 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a61a:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a61c:	4631      	mov	r1, r6
 800a61e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a622:	e7c9      	b.n	800a5b8 <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a624:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a628:	f000 ff86 	bl	800b538 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a62c:	4640      	mov	r0, r8
}
 800a62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 800a632:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a636:	2002      	movs	r0, #2
}
 800a638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a63c <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800a63c:	b119      	cbz	r1, 800a646 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800a63e:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a642:	2000      	movs	r0, #0
 800a644:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a646:	2003      	movs	r0, #3
}
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop

0800a64c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a64c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800a650:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800a652:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a656:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800a65a:	4770      	bx	lr

0800a65c <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800a65c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800a660:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800a662:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800a666:	4770      	bx	lr

0800a668 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a668:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800a66c:	b19a      	cbz	r2, 800a696 <USBD_CDC_TransmitPacket+0x2e>
{
 800a66e:	b538      	push	{r3, r4, r5, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800a670:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800a674:	b10c      	cbz	r4, 800a67a <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a676:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800a678:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a67a:	f8d2 5210 	ldr.w	r5, [r2, #528]	; 0x210
    hcdc->TxState = 1U;
 800a67e:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a680:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800a682:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a686:	462b      	mov	r3, r5
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a688:	62c5      	str	r5, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a68a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800a68e:	f000 ff45 	bl	800b51c <USBD_LL_Transmit>
    ret = USBD_OK;
 800a692:	4620      	mov	r0, r4
}
 800a694:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800a696:	2003      	movs	r0, #3
}
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop

0800a69c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a69c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800a6a0:	b18a      	cbz	r2, 800a6c6 <USBD_CDC_ReceivePacket+0x2a>
 800a6a2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{
 800a6a6:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6a8:	7c04      	ldrb	r4, [r0, #16]
 800a6aa:	b12c      	cbz	r4, 800a6b8 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6ac:	2340      	movs	r3, #64	; 0x40
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	f000 ff42 	bl	800b538 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6b4:	2000      	movs	r0, #0
}
 800a6b6:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6bc:	2101      	movs	r1, #1
 800a6be:	f000 ff3b 	bl	800b538 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a6c2:	4620      	mov	r0, r4
}
 800a6c4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800a6c6:	2003      	movs	r0, #3
}
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop

0800a6cc <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	b1a8      	cbz	r0, 800a6fc <USBD_Init+0x30>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a6d0:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 800a6d4:	b110      	cbz	r0, 800a6dc <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a6dc:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 800a6e0:	b110      	cbz	r0, 800a6e8 <USBD_Init+0x1c>
  {
    pdev->pConfDesc = NULL;
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6e8:	b109      	cbz	r1, 800a6ee <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 800a6ea:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6ee:	2101      	movs	r1, #1
  pdev->id = id;
 800a6f0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a6f2:	4618      	mov	r0, r3
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6f4:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  ret = USBD_LL_Init(pdev);
 800a6f8:	f000 be70 	b.w	800b3dc <USBD_LL_Init>

  return ret;
}
 800a6fc:	2003      	movs	r0, #3
 800a6fe:	4770      	bx	lr

0800a700 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a700:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800a702:	2400      	movs	r4, #0
{
 800a704:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800a706:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800a70a:	b159      	cbz	r1, 800a724 <USBD_RegisterClass+0x24>
 800a70c:	4605      	mov	r5, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a70e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a712:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a714:	f10d 0006 	add.w	r0, sp, #6
 800a718:	4798      	blx	r3
 800a71a:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 800a71e:	4620      	mov	r0, r4
 800a720:	b003      	add	sp, #12
 800a722:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800a724:	2403      	movs	r4, #3
 800a726:	e7fa      	b.n	800a71e <USBD_RegisterClass+0x1e>

0800a728 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a728:	f000 be8c 	b.w	800b444 <USBD_LL_Start>

0800a72c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800a72c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a730:	b10b      	cbz	r3, 800a736 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4718      	bx	r3
  }

  return ret;
}
 800a736:	2003      	movs	r0, #3
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop

0800a73c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a73c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a73e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a742:	b10b      	cbz	r3, 800a748 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	4798      	blx	r3
  }

  return USBD_OK;
}
 800a748:	2000      	movs	r0, #0
 800a74a:	bd08      	pop	{r3, pc}

0800a74c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a74c:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a74e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800a752:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a754:	4628      	mov	r0, r5
 800a756:	f000 fb9f 	bl	800ae98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800a75a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800a75e:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800a760:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
  switch (pdev->request.bmRequest & 0x1FU)
 800a764:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800a768:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800a76c:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 800a76e:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800a772:	d015      	beq.n	800a7a0 <USBD_LL_SetupStage+0x54>
 800a774:	d30e      	bcc.n	800a794 <USBD_LL_SetupStage+0x48>
 800a776:	2b02      	cmp	r3, #2
 800a778:	d105      	bne.n	800a786 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
      break;

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a77a:	4629      	mov	r1, r5
 800a77c:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800a77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a782:	f000 baeb 	b.w	800ad5c <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a786:	4620      	mov	r0, r4
 800a788:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 800a78c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a790:	f000 be86 	b.w	800b4a0 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a794:	4629      	mov	r1, r5
 800a796:	4620      	mov	r0, r4
}
 800a798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a79c:	f000 b8fe 	b.w	800a99c <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	4620      	mov	r0, r4
}
 800a7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a7a8:	f000 baa0 	b.w	800acec <USBD_StdItfReq>

0800a7ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a7b0:	b931      	cbnz	r1, 800a7c0 <USBD_LL_DataOutStage+0x14>
 800a7b2:	460d      	mov	r5, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7b4:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 800a7b8:	2903      	cmp	r1, #3
 800a7ba:	d00c      	beq.n	800a7d6 <USBD_LL_DataOutStage+0x2a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800a7bc:	2000      	movs	r0, #0
}
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 800a7c0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800a7c4:	6992      	ldr	r2, [r2, #24]
 800a7c6:	b1da      	cbz	r2, 800a800 <USBD_LL_DataOutStage+0x54>
 800a7c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d117      	bne.n	800a800 <USBD_LL_DataOutStage+0x54>
}
 800a7d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a7d4:	4710      	bx	r2
 800a7d6:	4611      	mov	r1, r2
      if (pep->rem_length > pep->maxpacket)
 800a7d8:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 800a7dc:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d80f      	bhi.n	800a804 <USBD_LL_DataOutStage+0x58>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7e4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	b123      	cbz	r3, 800a7f6 <USBD_LL_DataOutStage+0x4a>
 800a7ec:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a7f0:	2a03      	cmp	r2, #3
 800a7f2:	d100      	bne.n	800a7f6 <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 800a7f4:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 fbc2 	bl	800af80 <USBD_CtlSendStatus>
  return USBD_OK;
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	e7de      	b.n	800a7be <USBD_LL_DataOutStage+0x12>
    return USBD_FAIL;
 800a800:	2003      	movs	r0, #3
}
 800a802:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800a804:	1a9b      	subs	r3, r3, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a806:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800a808:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a80c:	bf28      	it	cs
 800a80e:	461a      	movcs	r2, r3
 800a810:	f000 fbae 	bl	800af70 <USBD_CtlContinueRx>
  return USBD_OK;
 800a814:	4628      	mov	r0, r5
}
 800a816:	bd70      	pop	{r4, r5, r6, pc}

0800a818 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	4604      	mov	r4, r0
 800a81c:	b082      	sub	sp, #8
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a81e:	b951      	cbnz	r1, 800a836 <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a820:	f8d0 5294 	ldr.w	r5, [r0, #660]	; 0x294
 800a824:	2d02      	cmp	r5, #2
 800a826:	d016      	beq.n	800a856 <USBD_LL_DataInStage+0x3e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a828:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800a82c:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d00d      	beq.n	800a84e <USBD_LL_DataInStage+0x36>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800a832:	b002      	add	sp, #8
 800a834:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 800a836:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	b33b      	cbz	r3, 800a88e <USBD_LL_DataInStage+0x76>
 800a83e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a842:	2a03      	cmp	r2, #3
 800a844:	d123      	bne.n	800a88e <USBD_LL_DataInStage+0x76>
}
 800a846:	b002      	add	sp, #8
 800a848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a84c:	4718      	bx	r3
      pdev->dev_test_mode = 0U;
 800a84e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 800a852:	b002      	add	sp, #8
 800a854:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 800a856:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 800a85a:	42b5      	cmp	r5, r6
 800a85c:	d81a      	bhi.n	800a894 <USBD_LL_DataInStage+0x7c>
        if ((pep->maxpacket == pep->rem_length) &&
 800a85e:	d027      	beq.n	800a8b0 <USBD_LL_DataInStage+0x98>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a860:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	b12b      	cbz	r3, 800a874 <USBD_LL_DataInStage+0x5c>
 800a868:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800a86c:	2a03      	cmp	r2, #3
 800a86e:	d101      	bne.n	800a874 <USBD_LL_DataInStage+0x5c>
            pdev->pClass->EP0_TxSent(pdev);
 800a870:	4620      	mov	r0, r4
 800a872:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a874:	2180      	movs	r1, #128	; 0x80
 800a876:	4620      	mov	r0, r4
 800a878:	f000 fe12 	bl	800b4a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 fb8b 	bl	800af98 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800a882:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 800a886:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d1d2      	bne.n	800a832 <USBD_LL_DataInStage+0x1a>
 800a88c:	e7df      	b.n	800a84e <USBD_LL_DataInStage+0x36>
    return USBD_FAIL;
 800a88e:	2003      	movs	r0, #3
}
 800a890:	b002      	add	sp, #8
 800a892:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800a894:	1bad      	subs	r5, r5, r6
 800a896:	9101      	str	r1, [sp, #4]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a898:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800a89a:	61c5      	str	r5, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a89c:	462a      	mov	r2, r5
 800a89e:	f000 fb4f 	bl	800af40 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8a2:	9b01      	ldr	r3, [sp, #4]
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	f000 fe45 	bl	800b538 <USBD_LL_PrepareReceive>
 800a8ae:	e7bb      	b.n	800a828 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800a8b0:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8b2:	4295      	cmp	r5, r2
 800a8b4:	d8d4      	bhi.n	800a860 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 800a8b6:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 800a8ba:	42aa      	cmp	r2, r5
 800a8bc:	d2d0      	bcs.n	800a860 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8be:	460a      	mov	r2, r1
 800a8c0:	9101      	str	r1, [sp, #4]
 800a8c2:	f000 fb3d 	bl	800af40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8c6:	9b01      	ldr	r3, [sp, #4]
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8c8:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800a8ca:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f000 fe31 	bl	800b538 <USBD_LL_PrepareReceive>
 800a8d6:	e7a7      	b.n	800a828 <USBD_LL_DataInStage+0x10>

0800a8d8 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8d8:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8da:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 800a8dc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8e4:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8e8:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800a8ec:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800a8ee:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 800a8f2:	b11b      	cbz	r3, 800a8fc <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a8f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8fc:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8fe:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a900:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a902:	4620      	mov	r0, r4
 800a904:	462b      	mov	r3, r5
 800a906:	4611      	mov	r1, r2
 800a908:	f000 fdaa 	bl	800b460 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a90c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a910:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a914:	462b      	mov	r3, r5
 800a916:	2200      	movs	r2, #0
 800a918:	2180      	movs	r1, #128	; 0x80
 800a91a:	4620      	mov	r0, r4
 800a91c:	f000 fda0 	bl	800b460 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a920:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a922:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800a924:	2000      	movs	r0, #0
 800a926:	bd70      	pop	{r4, r5, r6, pc}

0800a928 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a928:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a92a:	2000      	movs	r0, #0
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop

0800a930 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a930:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a932:	2104      	movs	r1, #4

  return USBD_OK;
}
 800a934:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800a936:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a93a:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 800a93e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 800a942:	4770      	bx	lr

0800a944 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a944:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a948:	2b04      	cmp	r3, #4
 800a94a:	d103      	bne.n	800a954 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a94c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800a950:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800a954:	2000      	movs	r0, #0
 800a956:	4770      	bx	lr

0800a958 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a958:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a95c:	2a03      	cmp	r2, #3
 800a95e:	d001      	beq.n	800a964 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800a960:	2000      	movs	r0, #0
 800a962:	4770      	bx	lr
{
 800a964:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 800a966:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	b103      	cbz	r3, 800a970 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800a96e:	4798      	blx	r3
}
 800a970:	2000      	movs	r0, #0
 800a972:	bd08      	pop	{r3, pc}

0800a974 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800a974:	2000      	movs	r0, #0
 800a976:	4770      	bx	lr

0800a978 <USBD_LL_IsoOUTIncomplete>:
 800a978:	2000      	movs	r0, #0
 800a97a:	4770      	bx	lr

0800a97c <USBD_LL_DevConnected>:
 800a97c:	2000      	movs	r0, #0
 800a97e:	4770      	bx	lr

0800a980 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a980:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800a982:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a986:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800a98a:	b12a      	cbz	r2, 800a998 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a98c:	6852      	ldr	r2, [r2, #4]
 800a98e:	7901      	ldrb	r1, [r0, #4]
{
 800a990:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a992:	4790      	blx	r2
  }

  return USBD_OK;
}
 800a994:	2000      	movs	r0, #0
 800a996:	bd08      	pop	{r3, pc}
 800a998:	2000      	movs	r0, #0
 800a99a:	4770      	bx	lr

0800a99c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a99c:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a99e:	780b      	ldrb	r3, [r1, #0]
{
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	460d      	mov	r5, r1
 800a9a4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	d028      	beq.n	800aa00 <USBD_StdDevReq+0x64>
 800a9ae:	2b40      	cmp	r3, #64	; 0x40
 800a9b0:	d026      	beq.n	800aa00 <USBD_StdDevReq+0x64>
 800a9b2:	b15b      	cbz	r3, 800a9cc <USBD_StdDevReq+0x30>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9b4:	2180      	movs	r1, #128	; 0x80
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fd72 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a9bc:	2100      	movs	r1, #0
 800a9be:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800a9c0:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800a9c2:	f000 fd6d 	bl	800b4a0 <USBD_LL_StallEP>
}
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	b002      	add	sp, #8
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 800a9cc:	784b      	ldrb	r3, [r1, #1]
 800a9ce:	2b09      	cmp	r3, #9
 800a9d0:	d8f0      	bhi.n	800a9b4 <USBD_StdDevReq+0x18>
 800a9d2:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <USBD_StdDevReq+0x3c>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800aa77 	.word	0x0800aa77
 800a9dc:	0800aaa5 	.word	0x0800aaa5
 800a9e0:	0800a9b5 	.word	0x0800a9b5
 800a9e4:	0800aac1 	.word	0x0800aac1
 800a9e8:	0800a9b5 	.word	0x0800a9b5
 800a9ec:	0800aacd 	.word	0x0800aacd
 800a9f0:	0800ab0f 	.word	0x0800ab0f
 800a9f4:	0800a9b5 	.word	0x0800a9b5
 800a9f8:	0800ab2b 	.word	0x0800ab2b
 800a9fc:	0800aa15 	.word	0x0800aa15
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa00:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800aa04:	4629      	mov	r1, r5
 800aa06:	4620      	mov	r0, r4
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	4798      	blx	r3
 800aa0c:	4605      	mov	r5, r0
}
 800aa0e:	4628      	mov	r0, r5
 800aa10:	b002      	add	sp, #8
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);
 800aa14:	7889      	ldrb	r1, [r1, #2]
 800aa16:	4eb4      	ldr	r6, [pc, #720]	; (800ace8 <USBD_StdDevReq+0x34c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa18:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800aa1a:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa1c:	f200 810a 	bhi.w	800ac34 <USBD_StdDevReq+0x298>
  switch (pdev->dev_state)
 800aa20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	f000 8112 	beq.w	800ac4e <USBD_StdDevReq+0x2b2>
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	f040 811f 	bne.w	800ac6e <USBD_StdDevReq+0x2d2>
    if (cfgidx == 0U)
 800aa30:	2900      	cmp	r1, #0
 800aa32:	f000 8142 	beq.w	800acba <USBD_StdDevReq+0x31e>
    else if (cfgidx != pdev->dev_config)
 800aa36:	6841      	ldr	r1, [r0, #4]
 800aa38:	2901      	cmp	r1, #1
 800aa3a:	f000 8125 	beq.w	800ac88 <USBD_StdDevReq+0x2ec>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa3e:	b2c9      	uxtb	r1, r1
 800aa40:	f7ff fe7c 	bl	800a73c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800aa44:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa46:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 800aa48:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa4a:	f7ff fe6f 	bl	800a72c <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800aa4e:	4605      	mov	r5, r0
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f000 8119 	beq.w	800ac88 <USBD_StdDevReq+0x2ec>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa56:	2180      	movs	r1, #128	; 0x80
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 fd21 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa5e:	2100      	movs	r1, #0
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 fd1d 	bl	800b4a0 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa66:	7921      	ldrb	r1, [r4, #4]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f7ff fe67 	bl	800a73c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa6e:	2302      	movs	r3, #2
 800aa70:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800aa74:	e7a7      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800aa76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aa7a:	2203      	movs	r2, #3
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d898      	bhi.n	800a9b4 <USBD_StdDevReq+0x18>
    if (req->wLength != 0x2U)
 800aa82:	88cb      	ldrh	r3, [r1, #6]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d195      	bne.n	800a9b4 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa88:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 800aa8a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa8e:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800aa90:	b103      	cbz	r3, 800aa94 <USBD_StdDevReq+0xf8>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa92:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa94:	2202      	movs	r2, #2
 800aa96:	f104 010c 	add.w	r1, r4, #12
 800aa9a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800aa9c:	2500      	movs	r5, #0
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa9e:	f000 fa41 	bl	800af24 <USBD_CtlSendData>
 800aaa2:	e790      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800aaa4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d882      	bhi.n	800a9b4 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aaae:	884b      	ldrh	r3, [r1, #2]
        pdev->dev_remote_wakeup = 0U;
 800aab0:	2500      	movs	r5, #0
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d187      	bne.n	800a9c6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800aab6:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aaba:	f000 fa61 	bl	800af80 <USBD_CtlSendStatus>
 800aabe:	e782      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aac0:	884b      	ldrh	r3, [r1, #2]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	f000 80e5 	beq.w	800ac92 <USBD_StdDevReq+0x2f6>
  USBD_StatusTypeDef ret = USBD_OK;
 800aac8:	2500      	movs	r5, #0
 800aaca:	e77c      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aacc:	888b      	ldrh	r3, [r1, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f47f af70 	bne.w	800a9b4 <USBD_StdDevReq+0x18>
 800aad4:	88ce      	ldrh	r6, [r1, #6]
 800aad6:	2e00      	cmp	r6, #0
 800aad8:	f47f af6c 	bne.w	800a9b4 <USBD_StdDevReq+0x18>
 800aadc:	884d      	ldrh	r5, [r1, #2]
 800aade:	2d7f      	cmp	r5, #127	; 0x7f
 800aae0:	f63f af68 	bhi.w	800a9b4 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aae4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	f43f af63 	beq.w	800a9b4 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aaee:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800aaf0:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aaf4:	f000 fd04 	bl	800b500 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 fa41 	bl	800af80 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800aafe:	2d00      	cmp	r5, #0
 800ab00:	f000 80ed 	beq.w	800acde <USBD_StdDevReq+0x342>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab04:	2302      	movs	r3, #2
  USBD_StatusTypeDef ret = USBD_OK;
 800ab06:	4635      	mov	r5, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab08:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ab0c:	e75b      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 800ab0e:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800ab10:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800ab12:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 800ab14:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	2b06      	cmp	r3, #6
 800ab1c:	d85f      	bhi.n	800abde <USBD_StdDevReq+0x242>
 800ab1e:	e8df f003 	tbb	[pc, r3]
 800ab22:	4e46      	.short	0x4e46
 800ab24:	3d5e5e35 	.word	0x3d5e5e35
 800ab28:	18          	.byte	0x18
 800ab29:	00          	.byte	0x00
  if (req->wLength != 1U)
 800ab2a:	88ca      	ldrh	r2, [r1, #6]
 800ab2c:	2a01      	cmp	r2, #1
 800ab2e:	f47f af41 	bne.w	800a9b4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800ab32:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f43f af3c 	beq.w	800a9b4 <USBD_StdDevReq+0x18>
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	f240 80ae 	bls.w	800ac9e <USBD_StdDevReq+0x302>
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	f47f af36 	bne.w	800a9b4 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab48:	1d01      	adds	r1, r0, #4
  USBD_StatusTypeDef ret = USBD_OK;
 800ab4a:	2500      	movs	r5, #0
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab4c:	f000 f9ea 	bl	800af24 <USBD_CtlSendData>
 800ab50:	e739      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab52:	7c03      	ldrb	r3, [r0, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d142      	bne.n	800abde <USBD_StdDevReq+0x242>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ab5c:	f10d 0006 	add.w	r0, sp, #6
 800ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab62:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab64:	2307      	movs	r3, #7
 800ab66:	7043      	strb	r3, [r0, #1]
    if (req->wLength != 0U)
 800ab68:	88eb      	ldrh	r3, [r5, #6]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d06b      	beq.n	800ac46 <USBD_StdDevReq+0x2aa>
      if (len != 0U)
 800ab6e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ab72:	2a00      	cmp	r2, #0
 800ab74:	d033      	beq.n	800abde <USBD_StdDevReq+0x242>
        len = MIN(len, req->wLength);
 800ab76:	4293      	cmp	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4620      	mov	r0, r4
        len = MIN(len, req->wLength);
 800ab7c:	bf28      	it	cs
 800ab7e:	4613      	movcs	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab80:	461a      	mov	r2, r3
        len = MIN(len, req->wLength);
 800ab82:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab86:	f000 f9cd 	bl	800af24 <USBD_CtlSendData>
 800ab8a:	e79d      	b.n	800aac8 <USBD_StdDevReq+0x12c>
    switch ((uint8_t)(req->wValue))
 800ab8c:	b2d2      	uxtb	r2, r2
 800ab8e:	2a05      	cmp	r2, #5
 800ab90:	d825      	bhi.n	800abde <USBD_StdDevReq+0x242>
 800ab92:	e8df f002 	tbb	[pc, r2]
 800ab96:	4920      	.short	0x4920
 800ab98:	2d373d43 	.word	0x2d373d43
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab9c:	7c03      	ldrb	r3, [r0, #16]
 800ab9e:	b9f3      	cbnz	r3, 800abde <USBD_StdDevReq+0x242>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aba0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aba4:	f10d 0006 	add.w	r0, sp, #6
 800aba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abaa:	4798      	blx	r3
 800abac:	e7dc      	b.n	800ab68 <USBD_StdDevReq+0x1cc>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800abb2:	f10d 0106 	add.w	r1, sp, #6
 800abb6:	7c00      	ldrb	r0, [r0, #16]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4798      	blx	r3
 800abbc:	e7d4      	b.n	800ab68 <USBD_StdDevReq+0x1cc>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abbe:	7c02      	ldrb	r2, [r0, #16]
 800abc0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800abc4:	2a00      	cmp	r2, #0
 800abc6:	d171      	bne.n	800acac <USBD_StdDevReq+0x310>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800abc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abca:	f10d 0006 	add.w	r0, sp, #6
 800abce:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abd0:	2302      	movs	r3, #2
 800abd2:	7043      	strb	r3, [r0, #1]
 800abd4:	e7c8      	b.n	800ab68 <USBD_StdDevReq+0x1cc>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abd6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	b96b      	cbnz	r3, 800abfa <USBD_StdDevReq+0x25e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800abde:	2180      	movs	r1, #128	; 0x80
 800abe0:	4620      	mov	r0, r4
 800abe2:	f000 fc5d 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800abe6:	4620      	mov	r0, r4
 800abe8:	2100      	movs	r1, #0
 800abea:	f000 fc59 	bl	800b4a0 <USBD_LL_StallEP>
 800abee:	e76b      	b.n	800aac8 <USBD_StdDevReq+0x12c>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abf0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0f1      	beq.n	800abde <USBD_StdDevReq+0x242>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abfa:	f10d 0106 	add.w	r1, sp, #6
 800abfe:	7c20      	ldrb	r0, [r4, #16]
 800ac00:	4798      	blx	r3
 800ac02:	e7b1      	b.n	800ab68 <USBD_StdDevReq+0x1cc>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1f5      	bne.n	800abfa <USBD_StdDevReq+0x25e>
 800ac0e:	e7e6      	b.n	800abde <USBD_StdDevReq+0x242>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac10:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1ef      	bne.n	800abfa <USBD_StdDevReq+0x25e>
 800ac1a:	e7e0      	b.n	800abde <USBD_StdDevReq+0x242>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac1c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1e9      	bne.n	800abfa <USBD_StdDevReq+0x25e>
 800ac26:	e7da      	b.n	800abde <USBD_StdDevReq+0x242>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac28:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e3      	bne.n	800abfa <USBD_StdDevReq+0x25e>
 800ac32:	e7d4      	b.n	800abde <USBD_StdDevReq+0x242>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac34:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800ac36:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac38:	f000 fc32 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	2100      	movs	r1, #0
 800ac40:	f000 fc2e 	bl	800b4a0 <USBD_LL_StallEP>
 800ac44:	e6bf      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f99a 	bl	800af80 <USBD_CtlSendStatus>
 800ac4c:	e73c      	b.n	800aac8 <USBD_StdDevReq+0x12c>
    if (cfgidx != 0U)
 800ac4e:	b1d9      	cbz	r1, 800ac88 <USBD_StdDevReq+0x2ec>
      pdev->dev_config = cfgidx;
 800ac50:	2101      	movs	r1, #1
 800ac52:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac54:	f7ff fd6a 	bl	800a72c <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800ac58:	4605      	mov	r5, r0
 800ac5a:	b3c8      	cbz	r0, 800acd0 <USBD_StdDevReq+0x334>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac5c:	2180      	movs	r1, #128	; 0x80
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 fc1e 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac64:	4620      	mov	r0, r4
 800ac66:	2100      	movs	r1, #0
 800ac68:	f000 fc1a 	bl	800b4a0 <USBD_LL_StallEP>
 800ac6c:	e6ab      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac6e:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 800ac70:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac72:	f000 fc15 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac76:	2100      	movs	r1, #0
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f000 fc11 	bl	800b4a0 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac7e:	7831      	ldrb	r1, [r6, #0]
 800ac80:	4620      	mov	r0, r4
 800ac82:	f7ff fd5b 	bl	800a73c <USBD_ClrClassConfig>
 800ac86:	e69e      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 800ac88:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800ac8a:	2500      	movs	r5, #0
      (void)USBD_CtlSendStatus(pdev);
 800ac8c:	f000 f978 	bl	800af80 <USBD_CtlSendStatus>
 800ac90:	e699      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 800ac92:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
  USBD_StatusTypeDef ret = USBD_OK;
 800ac96:	2500      	movs	r5, #0
    (void)USBD_CtlSendStatus(pdev);
 800ac98:	f000 f972 	bl	800af80 <USBD_CtlSendStatus>
 800ac9c:	e693      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
      pdev->dev_default_config = 0U;
 800ac9e:	2500      	movs	r5, #0
 800aca0:	4601      	mov	r1, r0
 800aca2:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aca6:	f000 f93d 	bl	800af24 <USBD_CtlSendData>
 800acaa:	e68c      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acae:	f10d 0006 	add.w	r0, sp, #6
 800acb2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acb4:	2302      	movs	r3, #2
 800acb6:	7043      	strb	r3, [r0, #1]
 800acb8:	e756      	b.n	800ab68 <USBD_StdDevReq+0x1cc>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800acba:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 800acbc:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800acbe:	460d      	mov	r5, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800acc0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800acc4:	f7ff fd3a 	bl	800a73c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 f959 	bl	800af80 <USBD_CtlSendStatus>
 800acce:	e67a      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
        (void)USBD_CtlSendStatus(pdev);
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 f955 	bl	800af80 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800acd6:	2303      	movs	r3, #3
 800acd8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800acdc:	e673      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800acde:	2301      	movs	r3, #1
 800ace0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ace4:	e66f      	b.n	800a9c6 <USBD_StdDevReq+0x2a>
 800ace6:	bf00      	nop
 800ace8:	24000674 	.word	0x24000674

0800acec <USBD_StdItfReq>:
{
 800acec:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acee:	780b      	ldrb	r3, [r1, #0]
{
 800acf0:	460d      	mov	r5, r1
 800acf2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	d00d      	beq.n	800ad18 <USBD_StdItfReq+0x2c>
 800acfc:	2b40      	cmp	r3, #64	; 0x40
 800acfe:	d00b      	beq.n	800ad18 <USBD_StdItfReq+0x2c>
 800ad00:	b153      	cbz	r3, 800ad18 <USBD_StdItfReq+0x2c>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad02:	2600      	movs	r6, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad04:	2180      	movs	r1, #128	; 0x80
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 fbca 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	4631      	mov	r1, r6
 800ad10:	f000 fbc6 	bl	800b4a0 <USBD_LL_StallEP>
}
 800ad14:	4630      	mov	r0, r6
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 800ad18:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d8ef      	bhi.n	800ad02 <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad22:	792b      	ldrb	r3, [r5, #4]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d80f      	bhi.n	800ad48 <USBD_StdItfReq+0x5c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad28:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	4620      	mov	r0, r4
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad34:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad36:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1eb      	bne.n	800ad14 <USBD_StdItfReq+0x28>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d1e9      	bne.n	800ad14 <USBD_StdItfReq+0x28>
          (void)USBD_CtlSendStatus(pdev);
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 f91d 	bl	800af80 <USBD_CtlSendStatus>
 800ad46:	e7e5      	b.n	800ad14 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad48:	2180      	movs	r1, #128	; 0x80
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fba8 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad50:	2100      	movs	r1, #0
 800ad52:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800ad54:	460e      	mov	r6, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad56:	f000 fba3 	bl	800b4a0 <USBD_LL_StallEP>
 800ad5a:	e7db      	b.n	800ad14 <USBD_StdItfReq+0x28>

0800ad5c <USBD_StdEPReq>:
{
 800ad5c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad5e:	780b      	ldrb	r3, [r1, #0]
{
 800ad60:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad66:	2b20      	cmp	r3, #32
 800ad68:	d027      	beq.n	800adba <USBD_StdEPReq+0x5e>
 800ad6a:	2b40      	cmp	r3, #64	; 0x40
 800ad6c:	d025      	beq.n	800adba <USBD_StdEPReq+0x5e>
 800ad6e:	460c      	mov	r4, r1
 800ad70:	b14b      	cbz	r3, 800ad86 <USBD_StdEPReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad72:	2180      	movs	r1, #128	; 0x80
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 fb93 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	f000 fb8f 	bl	800b4a0 <USBD_LL_StallEP>
}
 800ad82:	2000      	movs	r0, #0
 800ad84:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 800ad86:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 800ad88:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800ad8a:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 800ad8c:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 800ad8e:	d03d      	beq.n	800ae0c <USBD_StdEPReq+0xb0>
 800ad90:	d31a      	bcc.n	800adc8 <USBD_StdEPReq+0x6c>
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d1ed      	bne.n	800ad72 <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 800ad96:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d04d      	beq.n	800ae3a <USBD_StdEPReq+0xde>
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d1e7      	bne.n	800ad72 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ada2:	8863      	ldrh	r3, [r4, #2]
 800ada4:	b92b      	cbnz	r3, 800adb2 <USBD_StdEPReq+0x56>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ada6:	064a      	lsls	r2, r1, #25
 800ada8:	d003      	beq.n	800adb2 <USBD_StdEPReq+0x56>
 800adaa:	88e3      	ldrh	r3, [r4, #6]
 800adac:	b90b      	cbnz	r3, 800adb2 <USBD_StdEPReq+0x56>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800adae:	f000 fb77 	bl	800b4a0 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 800adb2:	4628      	mov	r0, r5
 800adb4:	f000 f8e4 	bl	800af80 <USBD_CtlSendStatus>
        break;
 800adb8:	e7e3      	b.n	800ad82 <USBD_StdEPReq+0x26>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adba:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800adbe:	4628      	mov	r0, r5
 800adc0:	689b      	ldr	r3, [r3, #8]
}
 800adc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adc6:	4718      	bx	r3
      switch (pdev->dev_state)
 800adc8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d03d      	beq.n	800ae4c <USBD_StdEPReq+0xf0>
 800add0:	2b03      	cmp	r3, #3
 800add2:	d1ce      	bne.n	800ad72 <USBD_StdEPReq+0x16>
 800add4:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 800add8:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800adda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800adde:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 800ade2:	d445      	bmi.n	800ae70 <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ade4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d0c2      	beq.n	800ad72 <USBD_StdEPReq+0x16>
 800adec:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adf0:	2414      	movs	r4, #20
 800adf2:	fb04 0403 	mla	r4, r4, r3, r0
 800adf6:	f504 74aa 	add.w	r4, r4, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d144      	bne.n	800ae88 <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 800adfe:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae00:	4621      	mov	r1, r4
 800ae02:	4628      	mov	r0, r5
 800ae04:	2202      	movs	r2, #2
 800ae06:	f000 f88d 	bl	800af24 <USBD_CtlSendData>
          break;
 800ae0a:	e7ba      	b.n	800ad82 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 800ae0c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d012      	beq.n	800ae3a <USBD_StdEPReq+0xde>
 800ae14:	2b03      	cmp	r3, #3
 800ae16:	d1ac      	bne.n	800ad72 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ae18:	8863      	ldrh	r3, [r4, #2]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1b1      	bne.n	800ad82 <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 800ae1e:	064e      	lsls	r6, r1, #25
 800ae20:	d001      	beq.n	800ae26 <USBD_StdEPReq+0xca>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae22:	f000 fb4b 	bl	800b4bc <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 800ae26:	4628      	mov	r0, r5
 800ae28:	f000 f8aa 	bl	800af80 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae2c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800ae30:	4621      	mov	r1, r4
 800ae32:	4628      	mov	r0, r5
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	4798      	blx	r3
 800ae38:	e7a3      	b.n	800ad82 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae3a:	064b      	lsls	r3, r1, #25
 800ae3c:	d099      	beq.n	800ad72 <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae3e:	f000 fb2f 	bl	800b4a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae42:	4628      	mov	r0, r5
 800ae44:	2180      	movs	r1, #128	; 0x80
 800ae46:	f000 fb2b 	bl	800b4a0 <USBD_LL_StallEP>
 800ae4a:	e79a      	b.n	800ad82 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae4c:	0648      	lsls	r0, r1, #25
 800ae4e:	d190      	bne.n	800ad72 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae50:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 800ae52:	f04f 0400 	mov.w	r4, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae56:	4628      	mov	r0, r5
 800ae58:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae5c:	bf4c      	ite	mi
 800ae5e:	f105 0314 	addmi.w	r3, r5, #20
 800ae62:	f505 73aa 	addpl.w	r3, r5, #340	; 0x154
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae66:	4619      	mov	r1, r3
        pep->status = 0x0000U;
 800ae68:	601c      	str	r4, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae6a:	f000 f85b 	bl	800af24 <USBD_CtlSendData>
        break;
 800ae6e:	e788      	b.n	800ad82 <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f43f af7d 	beq.w	800ad72 <USBD_StdEPReq+0x16>
 800ae78:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae7c:	1c5c      	adds	r4, r3, #1
 800ae7e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ae82:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800ae86:	e7b8      	b.n	800adfa <USBD_StdEPReq+0x9e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f000 fb25 	bl	800b4d8 <USBD_LL_IsStallEP>
 800ae8e:	b108      	cbz	r0, 800ae94 <USBD_StdEPReq+0x138>
            pep->status = 0x0001U;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e7b4      	b.n	800adfe <USBD_StdEPReq+0xa2>
            pep->status = 0x0000U;
 800ae94:	6020      	str	r0, [r4, #0]
 800ae96:	e7b3      	b.n	800ae00 <USBD_StdEPReq+0xa4>

0800ae98 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800ae98:	780b      	ldrb	r3, [r1, #0]
 800ae9a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae9c:	784b      	ldrb	r3, [r1, #1]
 800ae9e:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aea0:	78ca      	ldrb	r2, [r1, #3]
 800aea2:	788b      	ldrb	r3, [r1, #2]
 800aea4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800aea8:	8043      	strh	r3, [r0, #2]
 800aeaa:	794a      	ldrb	r2, [r1, #5]
 800aeac:	790b      	ldrb	r3, [r1, #4]
 800aeae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800aeb2:	8083      	strh	r3, [r0, #4]
 800aeb4:	79ca      	ldrb	r2, [r1, #7]
 800aeb6:	798b      	ldrb	r3, [r1, #6]
 800aeb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800aebc:	80c3      	strh	r3, [r0, #6]
}
 800aebe:	4770      	bx	lr

0800aec0 <USBD_CtlError>:
{
 800aec0:	b510      	push	{r4, lr}
 800aec2:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aec4:	2180      	movs	r1, #128	; 0x80
 800aec6:	f000 faeb 	bl	800b4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aeca:	2100      	movs	r1, #0
 800aecc:	4620      	mov	r0, r4
}
 800aece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800aed2:	f000 bae5 	b.w	800b4a0 <USBD_LL_StallEP>
 800aed6:	bf00      	nop

0800aed8 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800aed8:	b300      	cbz	r0, 800af1c <USBD_GetString+0x44>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800aeda:	7803      	ldrb	r3, [r0, #0]
{
 800aedc:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800aede:	b1f3      	cbz	r3, 800af1e <USBD_GetString+0x46>
 800aee0:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 800aee2:	2300      	movs	r3, #0
  {
    len++;
 800aee4:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800aee6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    len++;
 800aeea:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 800aeec:	2d00      	cmp	r5, #0
 800aeee:	d1f9      	bne.n	800aee4 <USBD_GetString+0xc>
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	3302      	adds	r3, #2
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aef4:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aef6:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800aef8:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aefa:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800aefc:	7804      	ldrb	r4, [r0, #0]
 800aefe:	b15c      	cbz	r4, 800af18 <USBD_GetString+0x40>
  idx++;
 800af00:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800af02:	2500      	movs	r5, #0
    idx++;
 800af04:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800af06:	54cc      	strb	r4, [r1, r3]
    idx++;
 800af08:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800af0a:	b2d2      	uxtb	r2, r2
    idx++;
 800af0c:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800af0e:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800af10:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800af14:	2c00      	cmp	r4, #0
 800af16:	d1f5      	bne.n	800af04 <USBD_GetString+0x2c>
}
 800af18:	bc30      	pop	{r4, r5}
 800af1a:	4770      	bx	lr
 800af1c:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800af1e:	2302      	movs	r3, #2
 800af20:	e7e8      	b.n	800aef4 <USBD_GetString+0x1c>
 800af22:	bf00      	nop

0800af24 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af28:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af2a:	460a      	mov	r2, r1
 800af2c:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 800af2e:	6185      	str	r5, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af30:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length = len;
 800af32:	61c5      	str	r5, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af34:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af38:	f000 faf0 	bl	800b51c <USBD_LL_Transmit>

  return USBD_OK;
}
 800af3c:	2000      	movs	r0, #0
 800af3e:	bd70      	pop	{r4, r5, r6, pc}

0800af40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af40:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af42:	4613      	mov	r3, r2
 800af44:	460a      	mov	r2, r1
 800af46:	2100      	movs	r1, #0
 800af48:	f000 fae8 	bl	800b51c <USBD_LL_Transmit>

  return USBD_OK;
}
 800af4c:	2000      	movs	r0, #0
 800af4e:	bd08      	pop	{r3, pc}

0800af50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af54:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af56:	460a      	mov	r2, r1
 800af58:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 800af5a:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af5e:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length = len;
 800af60:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af64:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af68:	f000 fae6 	bl	800b538 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800af6c:	2000      	movs	r0, #0
 800af6e:	bd70      	pop	{r4, r5, r6, pc}

0800af70 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af70:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af72:	4613      	mov	r3, r2
 800af74:	460a      	mov	r2, r1
 800af76:	2100      	movs	r1, #0
 800af78:	f000 fade 	bl	800b538 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800af7c:	2000      	movs	r0, #0
 800af7e:	bd08      	pop	{r3, pc}

0800af80 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af80:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af82:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af84:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af86:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af8a:	4619      	mov	r1, r3
 800af8c:	461a      	mov	r2, r3
 800af8e:	f000 fac5 	bl	800b51c <USBD_LL_Transmit>

  return USBD_OK;
}
 800af92:	2000      	movs	r0, #0
 800af94:	bd08      	pop	{r3, pc}
 800af96:	bf00      	nop

0800af98 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af98:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af9a:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af9c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af9e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afa2:	4619      	mov	r1, r3
 800afa4:	461a      	mov	r2, r3
 800afa6:	f000 fac7 	bl	800b538 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800afaa:	2000      	movs	r0, #0
 800afac:	bd08      	pop	{r3, pc}
 800afae:	bf00      	nop

0800afb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800afb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800afb2:	2200      	movs	r2, #0
 800afb4:	4910      	ldr	r1, [pc, #64]	; (800aff8 <MX_USB_DEVICE_Init+0x48>)
 800afb6:	4811      	ldr	r0, [pc, #68]	; (800affc <MX_USB_DEVICE_Init+0x4c>)
 800afb8:	f7ff fb88 	bl	800a6cc <USBD_Init>
 800afbc:	b9c8      	cbnz	r0, 800aff2 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800afbe:	4910      	ldr	r1, [pc, #64]	; (800b000 <MX_USB_DEVICE_Init+0x50>)
 800afc0:	480e      	ldr	r0, [pc, #56]	; (800affc <MX_USB_DEVICE_Init+0x4c>)
 800afc2:	f7ff fb9d 	bl	800a700 <USBD_RegisterClass>
 800afc6:	b988      	cbnz	r0, 800afec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800afc8:	490e      	ldr	r1, [pc, #56]	; (800b004 <MX_USB_DEVICE_Init+0x54>)
 800afca:	480c      	ldr	r0, [pc, #48]	; (800affc <MX_USB_DEVICE_Init+0x4c>)
 800afcc:	f7ff fb36 	bl	800a63c <USBD_CDC_RegisterInterface>
 800afd0:	b948      	cbnz	r0, 800afe6 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afd2:	480a      	ldr	r0, [pc, #40]	; (800affc <MX_USB_DEVICE_Init+0x4c>)
 800afd4:	f7ff fba8 	bl	800a728 <USBD_Start>
 800afd8:	b108      	cbz	r0, 800afde <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800afda:	f7f7 fbeb 	bl	80027b4 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800afe2:	f7fb bd07 	b.w	80069f4 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800afe6:	f7f7 fbe5 	bl	80027b4 <Error_Handler>
 800afea:	e7f2      	b.n	800afd2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800afec:	f7f7 fbe2 	bl	80027b4 <Error_Handler>
 800aff0:	e7ea      	b.n	800afc8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800aff2:	f7f7 fbdf 	bl	80027b4 <Error_Handler>
 800aff6:	e7e2      	b.n	800afbe <MX_USB_DEVICE_Init+0xe>
 800aff8:	24000330 	.word	0x24000330
 800affc:	2400d7e4 	.word	0x2400d7e4
 800b000:	24000204 	.word	0x24000204
 800b004:	24000314 	.word	0x24000314

0800b008 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800b008:	2000      	movs	r0, #0
 800b00a:	4770      	bx	lr

0800b00c <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800b00c:	2000      	movs	r0, #0
 800b00e:	4770      	bx	lr

0800b010 <CDC_Receive_FS>:
{
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b014:	4d09      	ldr	r5, [pc, #36]	; (800b03c <CDC_Receive_FS+0x2c>)
{
 800b016:	460e      	mov	r6, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b018:	4628      	mov	r0, r5
 800b01a:	4621      	mov	r1, r4
 800b01c:	f7ff fb1e 	bl	800a65c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800b020:	4628      	mov	r0, r5
 800b022:	f7ff fb3b 	bl	800a69c <USBD_CDC_ReceivePacket>
 800b026:	6833      	ldr	r3, [r6, #0]
 800b028:	4d05      	ldr	r5, [pc, #20]	; (800b040 <CDC_Receive_FS+0x30>)
  memcpy(UartRXString, Buf, USBRXLength);
 800b02a:	4621      	mov	r1, r4
 800b02c:	461a      	mov	r2, r3
 800b02e:	4805      	ldr	r0, [pc, #20]	; (800b044 <CDC_Receive_FS+0x34>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800b030:	602b      	str	r3, [r5, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800b032:	f001 fbd9 	bl	800c7e8 <memcpy>
}
 800b036:	2000      	movs	r0, #0
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	bf00      	nop
 800b03c:	2400d7e4 	.word	0x2400d7e4
 800b040:	240076a0 	.word	0x240076a0
 800b044:	2400448c 	.word	0x2400448c

0800b048 <CDC_Init_FS>:
{
 800b048:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b04a:	4c06      	ldr	r4, [pc, #24]	; (800b064 <CDC_Init_FS+0x1c>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	4906      	ldr	r1, [pc, #24]	; (800b068 <CDC_Init_FS+0x20>)
 800b050:	4620      	mov	r0, r4
 800b052:	f7ff fafb 	bl	800a64c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b056:	4620      	mov	r0, r4
 800b058:	4904      	ldr	r1, [pc, #16]	; (800b06c <CDC_Init_FS+0x24>)
 800b05a:	f7ff faff 	bl	800a65c <USBD_CDC_SetRxBuffer>
}
 800b05e:	2000      	movs	r0, #0
 800b060:	bd10      	pop	{r4, pc}
 800b062:	bf00      	nop
 800b064:	2400d7e4 	.word	0x2400d7e4
 800b068:	2400e2b4 	.word	0x2400e2b4
 800b06c:	2400dab4 	.word	0x2400dab4

0800b070 <CDC_Control_FS>:
  switch(cmd)
 800b070:	2820      	cmp	r0, #32
 800b072:	d00a      	beq.n	800b08a <CDC_Control_FS+0x1a>
 800b074:	2821      	cmp	r0, #33	; 0x21
 800b076:	d106      	bne.n	800b086 <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800b078:	4b0a      	ldr	r3, [pc, #40]	; (800b0a4 <CDC_Control_FS+0x34>)
 800b07a:	6818      	ldr	r0, [r3, #0]
 800b07c:	889a      	ldrh	r2, [r3, #4]
 800b07e:	799b      	ldrb	r3, [r3, #6]
 800b080:	6008      	str	r0, [r1, #0]
 800b082:	808a      	strh	r2, [r1, #4]
 800b084:	718b      	strb	r3, [r1, #6]
}
 800b086:	2000      	movs	r0, #0
 800b088:	4770      	bx	lr
{
 800b08a:	b410      	push	{r4}
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800b08c:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <CDC_Control_FS+0x34>)
 800b08e:	6808      	ldr	r0, [r1, #0]
 800b090:	888c      	ldrh	r4, [r1, #4]
 800b092:	798a      	ldrb	r2, [r1, #6]
 800b094:	6018      	str	r0, [r3, #0]
}
 800b096:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800b098:	809c      	strh	r4, [r3, #4]
 800b09a:	719a      	strb	r2, [r3, #6]
}
 800b09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	24000328 	.word	0x24000328

0800b0a8 <CDC_Transmit_FS>:
{
 800b0a8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b0aa:	4c09      	ldr	r4, [pc, #36]	; (800b0d0 <CDC_Transmit_FS+0x28>)
 800b0ac:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800b0b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b0b4:	b10b      	cbz	r3, 800b0ba <CDC_Transmit_FS+0x12>
}
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	bd10      	pop	{r4, pc}
 800b0ba:	460a      	mov	r2, r1
 800b0bc:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f7ff fac4 	bl	800a64c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b0c4:	4620      	mov	r0, r4
}
 800b0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b0ca:	f7ff bacd 	b.w	800a668 <USBD_CDC_TransmitPacket>
 800b0ce:	bf00      	nop
 800b0d0:	2400d7e4 	.word	0x2400d7e4

0800b0d4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b0d4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800b0d6:	4801      	ldr	r0, [pc, #4]	; (800b0dc <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800b0d8:	800b      	strh	r3, [r1, #0]
}
 800b0da:	4770      	bx	lr
 800b0dc:	2400034c 	.word	0x2400034c

0800b0e0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b0e0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800b0e2:	4801      	ldr	r0, [pc, #4]	; (800b0e8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800b0e4:	800b      	strh	r3, [r1, #0]
}
 800b0e6:	4770      	bx	lr
 800b0e8:	24000360 	.word	0x24000360

0800b0ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0ec:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0ee:	4c04      	ldr	r4, [pc, #16]	; (800b100 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800b0f0:	460a      	mov	r2, r1
 800b0f2:	4804      	ldr	r0, [pc, #16]	; (800b104 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	f7ff feef 	bl	800aed8 <USBD_GetString>
  return USBD_StrDesc;
}
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	bd10      	pop	{r4, pc}
 800b0fe:	bf00      	nop
 800b100:	2400eab4 	.word	0x2400eab4
 800b104:	0801641c 	.word	0x0801641c

0800b108 <USBD_FS_ProductStrDescriptor>:
{
 800b108:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b10a:	4c04      	ldr	r4, [pc, #16]	; (800b11c <USBD_FS_ProductStrDescriptor+0x14>)
 800b10c:	460a      	mov	r2, r1
 800b10e:	4804      	ldr	r0, [pc, #16]	; (800b120 <USBD_FS_ProductStrDescriptor+0x18>)
 800b110:	4621      	mov	r1, r4
 800b112:	f7ff fee1 	bl	800aed8 <USBD_GetString>
}
 800b116:	4620      	mov	r0, r4
 800b118:	bd10      	pop	{r4, pc}
 800b11a:	bf00      	nop
 800b11c:	2400eab4 	.word	0x2400eab4
 800b120:	08016430 	.word	0x08016430

0800b124 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b124:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b126:	4c04      	ldr	r4, [pc, #16]	; (800b138 <USBD_FS_ConfigStrDescriptor+0x14>)
 800b128:	460a      	mov	r2, r1
 800b12a:	4804      	ldr	r0, [pc, #16]	; (800b13c <USBD_FS_ConfigStrDescriptor+0x18>)
 800b12c:	4621      	mov	r1, r4
 800b12e:	f7ff fed3 	bl	800aed8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800b132:	4620      	mov	r0, r4
 800b134:	bd10      	pop	{r4, pc}
 800b136:	bf00      	nop
 800b138:	2400eab4 	.word	0x2400eab4
 800b13c:	08016400 	.word	0x08016400

0800b140 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b140:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b142:	4c04      	ldr	r4, [pc, #16]	; (800b154 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800b144:	460a      	mov	r2, r1
 800b146:	4804      	ldr	r0, [pc, #16]	; (800b158 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800b148:	4621      	mov	r1, r4
 800b14a:	f7ff fec5 	bl	800aed8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800b14e:	4620      	mov	r0, r4
 800b150:	bd10      	pop	{r4, pc}
 800b152:	bf00      	nop
 800b154:	2400eab4 	.word	0x2400eab4
 800b158:	0801640c 	.word	0x0801640c

0800b15c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b15c:	4a49      	ldr	r2, [pc, #292]	; (800b284 <USBD_FS_SerialStrDescriptor+0x128>)
  *length = USB_SIZ_STRING_SERIAL;
 800b15e:	201a      	movs	r0, #26
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b160:	4b49      	ldr	r3, [pc, #292]	; (800b288 <USBD_FS_SerialStrDescriptor+0x12c>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b162:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 800b164:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800b166:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 800b168:	18d2      	adds	r2, r2, r3
 800b16a:	d101      	bne.n	800b170 <USBD_FS_SerialStrDescriptor+0x14>
}
 800b16c:	4847      	ldr	r0, [pc, #284]	; (800b28c <USBD_FS_SerialStrDescriptor+0x130>)
 800b16e:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800b170:	0f13      	lsrs	r3, r2, #28
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b172:	4947      	ldr	r1, [pc, #284]	; (800b290 <USBD_FS_SerialStrDescriptor+0x134>)
 800b174:	b2d8      	uxtb	r0, r3
    if (((value >> 28)) < 0xA)
 800b176:	2b09      	cmp	r3, #9
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b178:	4b44      	ldr	r3, [pc, #272]	; (800b28c <USBD_FS_SerialStrDescriptor+0x130>)
      pbuf[2 * idx] = (value >> 28) + '0';
 800b17a:	bf94      	ite	ls
 800b17c:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b17e:	3037      	addhi	r0, #55	; 0x37
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b180:	6809      	ldr	r1, [r1, #0]
{
 800b182:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b184:	7098      	strb	r0, [r3, #2]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800b186:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800b188:	f3c2 6003 	ubfx	r0, r2, #24, #4
    pbuf[2 * idx + 1] = 0;
 800b18c:	70dc      	strb	r4, [r3, #3]
    if (((value >> 28)) < 0xA)
 800b18e:	2809      	cmp	r0, #9
 800b190:	b2c4      	uxtb	r4, r0
 800b192:	f3c2 5003 	ubfx	r0, r2, #20, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b196:	bf94      	ite	ls
 800b198:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b19a:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b19c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b19e:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 800b1a0:	f04f 0400 	mov.w	r4, #0
 800b1a4:	715c      	strb	r4, [r3, #5]
 800b1a6:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 800b1a8:	f3c2 4003 	ubfx	r0, r2, #16, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b1ac:	bf94      	ite	ls
 800b1ae:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1b0:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b1b2:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1b4:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 800b1b6:	f04f 0400 	mov.w	r4, #0
 800b1ba:	71dc      	strb	r4, [r3, #7]
 800b1bc:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 800b1be:	f3c2 3003 	ubfx	r0, r2, #12, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b1c2:	bf94      	ite	ls
 800b1c4:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1c6:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b1c8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1ca:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 800b1cc:	f04f 0400 	mov.w	r4, #0
 800b1d0:	725c      	strb	r4, [r3, #9]
 800b1d2:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 800b1d4:	f3c2 2003 	ubfx	r0, r2, #8, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b1d8:	bf94      	ite	ls
 800b1da:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1dc:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b1de:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1e0:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 800b1e2:	f04f 0400 	mov.w	r4, #0
 800b1e6:	72dc      	strb	r4, [r3, #11]
 800b1e8:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 800b1ea:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800b1ee:	f002 020f 	and.w	r2, r2, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 800b1f2:	bf94      	ite	ls
 800b1f4:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1f6:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b1f8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1fa:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 800b1fc:	f04f 0400 	mov.w	r4, #0
 800b200:	735c      	strb	r4, [r3, #13]
 800b202:	b2c4      	uxtb	r4, r0
 800b204:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 800b206:	bf94      	ite	ls
 800b208:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b20a:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b20c:	2a09      	cmp	r2, #9
 800b20e:	ea4f 7211 	mov.w	r2, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b212:	739c      	strb	r4, [r3, #14]
    pbuf[2 * idx + 1] = 0;
 800b214:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800b218:	bf94      	ite	ls
 800b21a:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b21c:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b21e:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 800b220:	73dc      	strb	r4, [r3, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b222:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 800b224:	f04f 0000 	mov.w	r0, #0
 800b228:	7458      	strb	r0, [r3, #17]
 800b22a:	b2d0      	uxtb	r0, r2
    if (((value >> 28)) < 0xA)
 800b22c:	f3c1 6203 	ubfx	r2, r1, #24, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b230:	bf94      	ite	ls
 800b232:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b234:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b236:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b238:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 800b23a:	f04f 0000 	mov.w	r0, #0
 800b23e:	74d8      	strb	r0, [r3, #19]
 800b240:	b2d0      	uxtb	r0, r2
    if (((value >> 28)) < 0xA)
 800b242:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800b246:	f3c1 4103 	ubfx	r1, r1, #16, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b24a:	bf94      	ite	ls
 800b24c:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b24e:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b250:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b252:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 800b254:	f04f 0000 	mov.w	r0, #0
 800b258:	7558      	strb	r0, [r3, #21]
 800b25a:	b2d0      	uxtb	r0, r2
 800b25c:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + '0';
 800b25e:	bf94      	ite	ls
 800b260:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b262:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b264:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b266:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 800b268:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800b26c:	bf94      	ite	ls
 800b26e:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b270:	3237      	addhi	r2, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800b272:	75d8      	strb	r0, [r3, #23]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b274:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 800b276:	2200      	movs	r2, #0
}
 800b278:	4804      	ldr	r0, [pc, #16]	; (800b28c <USBD_FS_SerialStrDescriptor+0x130>)
    pbuf[2 * idx + 1] = 0;
 800b27a:	765a      	strb	r2, [r3, #25]
}
 800b27c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	1ff1e800 	.word	0x1ff1e800
 800b288:	1ff1e808 	.word	0x1ff1e808
 800b28c:	24000364 	.word	0x24000364
 800b290:	1ff1e804 	.word	0x1ff1e804

0800b294 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 800b294:	6802      	ldr	r2, [r0, #0]
 800b296:	4b1e      	ldr	r3, [pc, #120]	; (800b310 <HAL_PCD_MspInit+0x7c>)
{
 800b298:	b570      	push	{r4, r5, r6, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 800b29a:	429a      	cmp	r2, r3
{
 800b29c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b29e:	f04f 0400 	mov.w	r4, #0
 800b2a2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800b2a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800b2aa:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b2ac:	d001      	beq.n	800b2b2 <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b2ae:	b008      	add	sp, #32
 800b2b0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2b2:	4d18      	ldr	r5, [pc, #96]	; (800b314 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2b4:	2002      	movs	r0, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b2b6:	220a      	movs	r2, #10
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b2b8:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2bc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2c0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2c2:	f043 0301 	orr.w	r3, r3, #1
 800b2c6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b2ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ce:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2d0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2d4:	4810      	ldr	r0, [pc, #64]	; (800b318 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b2d6:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b2dc:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2de:	f7fa fc1d 	bl	8005b1c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2e2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2f0:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 800b2f4:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800b2f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2fc:	9302      	str	r3, [sp, #8]
 800b2fe:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b300:	f7f9 f8c0 	bl	8004484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b304:	2065      	movs	r0, #101	; 0x65
 800b306:	f7f9 f8f3 	bl	80044f0 <HAL_NVIC_EnableIRQ>
}
 800b30a:	b008      	add	sp, #32
 800b30c:	bd70      	pop	{r4, r5, r6, pc}
 800b30e:	bf00      	nop
 800b310:	40080000 	.word	0x40080000
 800b314:	58024400 	.word	0x58024400
 800b318:	58020000 	.word	0x58020000

0800b31c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b31c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800b320:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b324:	f7ff ba12 	b.w	800a74c <USBD_LL_SetupStage>

0800b328 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b328:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800b32c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b330:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b334:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b338:	f7ff ba38 	b.w	800a7ac <USBD_LL_DataOutStage>

0800b33c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b33c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800b340:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b344:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b34a:	f7ff ba65 	b.w	800a818 <USBD_LL_DataInStage>
 800b34e:	bf00      	nop

0800b350 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b350:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b354:	f7ff bb00 	b.w	800a958 <USBD_LL_SOF>

0800b358 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b358:	68c1      	ldr	r1, [r0, #12]
{
 800b35a:	b510      	push	{r4, lr}
 800b35c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b35e:	b121      	cbz	r1, 800b36a <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b360:	2902      	cmp	r1, #2
 800b362:	d00c      	beq.n	800b37e <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 800b364:	f7f7 fa26 	bl	80027b4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b368:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b36a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800b36e:	f7ff fadb 	bl	800a928 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b372:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800b376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b37a:	f7ff baad 	b.w	800a8d8 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 800b37e:	2101      	movs	r1, #1
 800b380:	e7f3      	b.n	800b36a <HAL_PCD_ResetCallback+0x12>
 800b382:	bf00      	nop

0800b384 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b384:	b510      	push	{r4, lr}
 800b386:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b388:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b38c:	f7ff fad0 	bl	800a930 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b390:	6822      	ldr	r2, [r4, #0]
 800b392:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800b396:	f043 0301 	orr.w	r3, r3, #1
 800b39a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b39e:	6a23      	ldr	r3, [r4, #32]
 800b3a0:	b123      	cbz	r3, 800b3ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3a2:	4a03      	ldr	r2, [pc, #12]	; (800b3b0 <HAL_PCD_SuspendCallback+0x2c>)
 800b3a4:	6913      	ldr	r3, [r2, #16]
 800b3a6:	f043 0306 	orr.w	r3, r3, #6
 800b3aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	bf00      	nop
 800b3b0:	e000ed00 	.word	0xe000ed00

0800b3b4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b3b4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b3b8:	f7ff bac4 	b.w	800a944 <USBD_LL_Resume>

0800b3bc <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b3bc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b3c0:	f7ff bada 	b.w	800a978 <USBD_LL_IsoOUTIncomplete>

0800b3c4 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b3c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b3c8:	f7ff bad4 	b.w	800a974 <USBD_LL_IsoINIncomplete>

0800b3cc <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3cc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b3d0:	f7ff bad4 	b.w	800a97c <USBD_LL_DevConnected>

0800b3d4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3d4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b3d8:	f7ff bad2 	b.w	800a980 <USBD_LL_DevDisconnected>

0800b3dc <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b3dc:	7802      	ldrb	r2, [r0, #0]
 800b3de:	b10a      	cbz	r2, 800b3e4 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	4770      	bx	lr
{
 800b3e4:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800b3e6:	4b15      	ldr	r3, [pc, #84]	; (800b43c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b3e8:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800b3ea:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3ec:	4d14      	ldr	r5, [pc, #80]	; (800b440 <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_FS.pData = pdev;
 800b3ee:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b3f2:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b3f6:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b3fa:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b3fc:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b3fe:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b402:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b406:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800b40a:	e9c3 5400 	strd	r5, r4, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b40e:	f7fa fd41 	bl	8005e94 <HAL_PCD_Init>
 800b412:	b978      	cbnz	r0, 800b434 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b414:	2180      	movs	r1, #128	; 0x80
 800b416:	4809      	ldr	r0, [pc, #36]	; (800b43c <USBD_LL_Init+0x60>)
 800b418:	f7fb faaa 	bl	8006970 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b41c:	2240      	movs	r2, #64	; 0x40
 800b41e:	2100      	movs	r1, #0
 800b420:	4806      	ldr	r0, [pc, #24]	; (800b43c <USBD_LL_Init+0x60>)
 800b422:	f7fb fa81 	bl	8006928 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b426:	2280      	movs	r2, #128	; 0x80
 800b428:	2101      	movs	r1, #1
 800b42a:	4804      	ldr	r0, [pc, #16]	; (800b43c <USBD_LL_Init+0x60>)
 800b42c:	f7fb fa7c 	bl	8006928 <HAL_PCDEx_SetTxFiFo>
}
 800b430:	2000      	movs	r0, #0
 800b432:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 800b434:	f7f7 f9be 	bl	80027b4 <Error_Handler>
 800b438:	e7ec      	b.n	800b414 <USBD_LL_Init+0x38>
 800b43a:	bf00      	nop
 800b43c:	2400ecb4 	.word	0x2400ecb4
 800b440:	40080000 	.word	0x40080000

0800b444 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b444:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800b446:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b44a:	f7fa fdbb 	bl	8005fc4 <HAL_PCD_Start>
 800b44e:	2803      	cmp	r0, #3
 800b450:	d802      	bhi.n	800b458 <USBD_LL_Start+0x14>
 800b452:	4b02      	ldr	r3, [pc, #8]	; (800b45c <USBD_LL_Start+0x18>)
 800b454:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b456:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b458:	2003      	movs	r0, #3
}
 800b45a:	bd08      	pop	{r3, pc}
 800b45c:	08016448 	.word	0x08016448

0800b460 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b460:	b510      	push	{r4, lr}
 800b462:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b464:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b468:	4613      	mov	r3, r2
 800b46a:	4622      	mov	r2, r4
 800b46c:	f7fb f918 	bl	80066a0 <HAL_PCD_EP_Open>
 800b470:	2803      	cmp	r0, #3
 800b472:	d802      	bhi.n	800b47a <USBD_LL_OpenEP+0x1a>
 800b474:	4b02      	ldr	r3, [pc, #8]	; (800b480 <USBD_LL_OpenEP+0x20>)
 800b476:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b478:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b47a:	2003      	movs	r0, #3
}
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	bf00      	nop
 800b480:	08016448 	.word	0x08016448

0800b484 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b484:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b486:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b48a:	f7fb f943 	bl	8006714 <HAL_PCD_EP_Close>
 800b48e:	2803      	cmp	r0, #3
 800b490:	d802      	bhi.n	800b498 <USBD_LL_CloseEP+0x14>
 800b492:	4b02      	ldr	r3, [pc, #8]	; (800b49c <USBD_LL_CloseEP+0x18>)
 800b494:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b496:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b498:	2003      	movs	r0, #3
}
 800b49a:	bd08      	pop	{r3, pc}
 800b49c:	08016448 	.word	0x08016448

0800b4a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4a2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b4a6:	f7fb f9bf 	bl	8006828 <HAL_PCD_EP_SetStall>
 800b4aa:	2803      	cmp	r0, #3
 800b4ac:	d802      	bhi.n	800b4b4 <USBD_LL_StallEP+0x14>
 800b4ae:	4b02      	ldr	r3, [pc, #8]	; (800b4b8 <USBD_LL_StallEP+0x18>)
 800b4b0:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b4b2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4b4:	2003      	movs	r0, #3
}
 800b4b6:	bd08      	pop	{r3, pc}
 800b4b8:	08016448 	.word	0x08016448

0800b4bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4bc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b4be:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b4c2:	f7fb f9f5 	bl	80068b0 <HAL_PCD_EP_ClrStall>
 800b4c6:	2803      	cmp	r0, #3
 800b4c8:	d802      	bhi.n	800b4d0 <USBD_LL_ClearStallEP+0x14>
 800b4ca:	4b02      	ldr	r3, [pc, #8]	; (800b4d4 <USBD_LL_ClearStallEP+0x18>)
 800b4cc:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b4ce:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b4d0:	2003      	movs	r0, #3
}
 800b4d2:	bd08      	pop	{r3, pc}
 800b4d4:	08016448 	.word	0x08016448

0800b4d8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 800b4d8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b4da:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800b4de:	d406      	bmi.n	800b4ee <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b4e4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b4e8:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 800b4ec:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4ee:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b4f2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b4f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b4fa:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800b4fe:	4770      	bx	lr

0800b500 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b500:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b502:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b506:	f7fb f8b7 	bl	8006678 <HAL_PCD_SetAddress>
 800b50a:	2803      	cmp	r0, #3
 800b50c:	d802      	bhi.n	800b514 <USBD_LL_SetUSBAddress+0x14>
 800b50e:	4b02      	ldr	r3, [pc, #8]	; (800b518 <USBD_LL_SetUSBAddress+0x18>)
 800b510:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b512:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b514:	2003      	movs	r0, #3
}
 800b516:	bd08      	pop	{r3, pc}
 800b518:	08016448 	.word	0x08016448

0800b51c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b51c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b51e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b522:	f7fb f95d 	bl	80067e0 <HAL_PCD_EP_Transmit>
 800b526:	2803      	cmp	r0, #3
 800b528:	d802      	bhi.n	800b530 <USBD_LL_Transmit+0x14>
 800b52a:	4b02      	ldr	r3, [pc, #8]	; (800b534 <USBD_LL_Transmit+0x18>)
 800b52c:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b52e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b530:	2003      	movs	r0, #3
}
 800b532:	bd08      	pop	{r3, pc}
 800b534:	08016448 	.word	0x08016448

0800b538 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b538:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b53a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b53e:	f7fb f91d 	bl	800677c <HAL_PCD_EP_Receive>
 800b542:	2803      	cmp	r0, #3
 800b544:	d802      	bhi.n	800b54c <USBD_LL_PrepareReceive+0x14>
 800b546:	4b02      	ldr	r3, [pc, #8]	; (800b550 <USBD_LL_PrepareReceive+0x18>)
 800b548:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b54a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b54c:	2003      	movs	r0, #3
}
 800b54e:	bd08      	pop	{r3, pc}
 800b550:	08016448 	.word	0x08016448

0800b554 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b554:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b558:	f7fb b938 	b.w	80067cc <HAL_PCD_EP_GetRxCount>

0800b55c <arm_cfft_radix8by2_f32>:
 800b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	4607      	mov	r7, r0
 800b562:	4608      	mov	r0, r1
 800b564:	ed2d 8b06 	vpush	{d8-d10}
 800b568:	f8b7 e000 	ldrh.w	lr, [r7]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800b572:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800b576:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800b57a:	f000 80b0 	beq.w	800b6de <arm_cfft_radix8by2_f32+0x182>
 800b57e:	008b      	lsls	r3, r1, #2
 800b580:	3210      	adds	r2, #16
 800b582:	f100 0610 	add.w	r6, r0, #16
 800b586:	f108 0510 	add.w	r5, r8, #16
 800b58a:	3310      	adds	r3, #16
 800b58c:	18c4      	adds	r4, r0, r3
 800b58e:	4443      	add	r3, r8
 800b590:	ed55 6a04 	vldr	s13, [r5, #-16]
 800b594:	f1be 0e01 	subs.w	lr, lr, #1
 800b598:	ed56 4a04 	vldr	s9, [r6, #-16]
 800b59c:	f104 0410 	add.w	r4, r4, #16
 800b5a0:	ed15 7a03 	vldr	s14, [r5, #-12]
 800b5a4:	f106 0610 	add.w	r6, r6, #16
 800b5a8:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800b5ac:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b5b0:	ed55 2a01 	vldr	s5, [r5, #-4]
 800b5b4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b5b8:	ed53 0a04 	vldr	s1, [r3, #-16]
 800b5bc:	f102 0210 	add.w	r2, r2, #16
 800b5c0:	ed13 5a03 	vldr	s10, [r3, #-12]
 800b5c4:	f105 0510 	add.w	r5, r5, #16
 800b5c8:	ed13 3a02 	vldr	s6, [r3, #-8]
 800b5cc:	f103 0310 	add.w	r3, r3, #16
 800b5d0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800b5d4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800b5d8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800b5dc:	ee33 8a83 	vadd.f32	s16, s7, s6
 800b5e0:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800b5e4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800b5e8:	ee34 0a06 	vadd.f32	s0, s8, s12
 800b5ec:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800b5f0:	ee76 aa87 	vadd.f32	s21, s13, s14
 800b5f4:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800b5f8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b5fc:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800b600:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800b604:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800b608:	ee71 8a05 	vadd.f32	s17, s2, s10
 800b60c:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800b610:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800b614:	ee72 9a22 	vadd.f32	s19, s4, s5
 800b618:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b61c:	ee35 5a41 	vsub.f32	s10, s10, s2
 800b620:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800b624:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800b628:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b62c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800b630:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800b634:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800b638:	ee72 7a62 	vsub.f32	s15, s4, s5
 800b63c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800b640:	ee73 2a63 	vsub.f32	s5, s6, s7
 800b644:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800b648:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800b64c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800b650:	ee24 3a84 	vmul.f32	s6, s9, s8
 800b654:	ee27 2a26 	vmul.f32	s4, s14, s13
 800b658:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800b65c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800b660:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b664:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b668:	ee65 6a26 	vmul.f32	s13, s10, s13
 800b66c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800b670:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b674:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b678:	ee33 4a02 	vadd.f32	s8, s6, s4
 800b67c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800b680:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800b684:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800b688:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800b68c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800b690:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800b694:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b698:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800b69c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800b6a0:	ee61 5a87 	vmul.f32	s11, s3, s14
 800b6a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6a8:	ee22 5a87 	vmul.f32	s10, s5, s14
 800b6ac:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b6b0:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b6b4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800b6b8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b6bc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b6c0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b6c4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b6c8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800b6cc:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800b6d0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800b6d4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800b6d8:	f47f af5a 	bne.w	800b590 <arm_cfft_radix8by2_f32+0x34>
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	b28c      	uxth	r4, r1
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	f000 fd54 	bl	800c190 <arm_radix8_butterfly_f32>
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	4640      	mov	r0, r8
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	ecbd 8b06 	vpop	{d8-d10}
 800b6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	f000 bd4a 	b.w	800c190 <arm_radix8_butterfly_f32>

0800b6fc <arm_cfft_radix8by4_f32>:
 800b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b700:	ed2d 8b06 	vpush	{d8-d10}
 800b704:	8804      	ldrh	r4, [r0, #0]
 800b706:	b08f      	sub	sp, #60	; 0x3c
 800b708:	ed91 6a00 	vldr	s12, [r1]
 800b70c:	460a      	mov	r2, r1
 800b70e:	0864      	lsrs	r4, r4, #1
 800b710:	ed91 7a01 	vldr	s14, [r1, #4]
 800b714:	9101      	str	r1, [sp, #4]
 800b716:	00a3      	lsls	r3, r4, #2
 800b718:	6841      	ldr	r1, [r0, #4]
 800b71a:	0864      	lsrs	r4, r4, #1
 800b71c:	900c      	str	r0, [sp, #48]	; 0x30
 800b71e:	9205      	str	r2, [sp, #20]
 800b720:	f101 0610 	add.w	r6, r1, #16
 800b724:	4625      	mov	r5, r4
 800b726:	940b      	str	r4, [sp, #44]	; 0x2c
 800b728:	f101 0408 	add.w	r4, r1, #8
 800b72c:	9602      	str	r6, [sp, #8]
 800b72e:	9407      	str	r4, [sp, #28]
 800b730:	18d4      	adds	r4, r2, r3
 800b732:	1eaa      	subs	r2, r5, #2
 800b734:	f101 0518 	add.w	r5, r1, #24
 800b738:	18e0      	adds	r0, r4, r3
 800b73a:	edd4 4a00 	vldr	s9, [r4]
 800b73e:	ed94 4a01 	vldr	s8, [r4, #4]
 800b742:	46a6      	mov	lr, r4
 800b744:	edd0 6a00 	vldr	s13, [r0]
 800b748:	18c7      	adds	r7, r0, r3
 800b74a:	edd0 7a01 	vldr	s15, [r0, #4]
 800b74e:	46a0      	mov	r8, r4
 800b750:	ee76 5a26 	vadd.f32	s11, s12, s13
 800b754:	ed97 5a00 	vldr	s10, [r7]
 800b758:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b75c:	4604      	mov	r4, r0
 800b75e:	9506      	str	r5, [sp, #24]
 800b760:	4605      	mov	r5, r0
 800b762:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800b766:	900a      	str	r0, [sp, #40]	; 0x28
 800b768:	9801      	ldr	r0, [sp, #4]
 800b76a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b76e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b772:	ed97 3a01 	vldr	s6, [r7, #4]
 800b776:	ee72 2a85 	vadd.f32	s5, s5, s10
 800b77a:	46bc      	mov	ip, r7
 800b77c:	ee76 3a84 	vadd.f32	s7, s13, s8
 800b780:	9704      	str	r7, [sp, #16]
 800b782:	ee36 7a44 	vsub.f32	s14, s12, s8
 800b786:	f8cd e00c 	str.w	lr, [sp, #12]
 800b78a:	ee12 9a90 	vmov	r9, s5
 800b78e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800b792:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b796:	1f3e      	subs	r6, r7, #4
 800b798:	f840 9b08 	str.w	r9, [r0], #8
 800b79c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800b7a0:	edde 2a01 	vldr	s5, [lr, #4]
 800b7a4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800b7a8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b7ac:	eddc 4a01 	vldr	s9, [ip, #4]
 800b7b0:	ee36 6a22 	vadd.f32	s12, s12, s5
 800b7b4:	9001      	str	r0, [sp, #4]
 800b7b6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b7ba:	9805      	ldr	r0, [sp, #20]
 800b7bc:	ee13 9a90 	vmov	r9, s7
 800b7c0:	ee37 7a43 	vsub.f32	s14, s14, s6
 800b7c4:	ee36 6a24 	vadd.f32	s12, s12, s9
 800b7c8:	f1ae 0704 	sub.w	r7, lr, #4
 800b7cc:	ee74 4a05 	vadd.f32	s9, s8, s10
 800b7d0:	ee76 6a83 	vadd.f32	s13, s13, s6
 800b7d4:	ed80 6a01 	vstr	s12, [r0, #4]
 800b7d8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b7dc:	f848 9b08 	str.w	r9, [r8], #8
 800b7e0:	edce 4a01 	vstr	s9, [lr, #4]
 800b7e4:	ee15 ea90 	vmov	lr, s11
 800b7e8:	f844 eb08 	str.w	lr, [r4], #8
 800b7ec:	ee16 ea90 	vmov	lr, s13
 800b7f0:	9408      	str	r4, [sp, #32]
 800b7f2:	462c      	mov	r4, r5
 800b7f4:	ed85 7a01 	vstr	s14, [r5, #4]
 800b7f8:	9d04      	ldr	r5, [sp, #16]
 800b7fa:	f84c eb08 	str.w	lr, [ip], #8
 800b7fe:	edc5 7a01 	vstr	s15, [r5, #4]
 800b802:	0855      	lsrs	r5, r2, #1
 800b804:	9509      	str	r5, [sp, #36]	; 0x24
 800b806:	f000 8130 	beq.w	800ba6a <arm_cfft_radix8by4_f32+0x36e>
 800b80a:	9805      	ldr	r0, [sp, #20]
 800b80c:	3b08      	subs	r3, #8
 800b80e:	46ab      	mov	fp, r5
 800b810:	f1a4 020c 	sub.w	r2, r4, #12
 800b814:	f100 0510 	add.w	r5, r0, #16
 800b818:	f101 0920 	add.w	r9, r1, #32
 800b81c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800b820:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b824:	4433      	add	r3, r6
 800b826:	3410      	adds	r4, #16
 800b828:	4660      	mov	r0, ip
 800b82a:	4641      	mov	r1, r8
 800b82c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800b830:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b834:	f1bb 0b01 	subs.w	fp, fp, #1
 800b838:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b83c:	f10a 0a08 	add.w	sl, sl, #8
 800b840:	edd1 7a00 	vldr	s15, [r1]
 800b844:	f105 0508 	add.w	r5, r5, #8
 800b848:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800b84c:	edd0 2a00 	vldr	s5, [r0]
 800b850:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b854:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800b858:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b85c:	f1a2 0208 	sub.w	r2, r2, #8
 800b860:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800b864:	ed90 2a01 	vldr	s4, [r0, #4]
 800b868:	ee36 5a87 	vadd.f32	s10, s13, s14
 800b86c:	ed91 6a01 	vldr	s12, [r1, #4]
 800b870:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b874:	f109 0910 	add.w	r9, r9, #16
 800b878:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800b87c:	f104 0408 	add.w	r4, r4, #8
 800b880:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800b884:	f10e 0e18 	add.w	lr, lr, #24
 800b888:	ee37 3a67 	vsub.f32	s6, s14, s15
 800b88c:	f1a3 0308 	sub.w	r3, r3, #8
 800b890:	ed45 6a04 	vstr	s13, [r5, #-16]
 800b894:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b898:	edd1 6a01 	vldr	s13, [r1, #4]
 800b89c:	ee75 1a86 	vadd.f32	s3, s11, s12
 800b8a0:	edd0 4a01 	vldr	s9, [r0, #4]
 800b8a4:	ee33 3a22 	vadd.f32	s6, s6, s5
 800b8a8:	ee75 6a26 	vadd.f32	s13, s10, s13
 800b8ac:	ee35 5a46 	vsub.f32	s10, s10, s12
 800b8b0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b8b4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b8b8:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800b8bc:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b8c0:	ed45 6a03 	vstr	s13, [r5, #-12]
 800b8c4:	ee36 2a02 	vadd.f32	s4, s12, s4
 800b8c8:	edd6 7a00 	vldr	s15, [r6]
 800b8cc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800b8d0:	ed97 1a00 	vldr	s2, [r7]
 800b8d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 800b8d8:	ed92 8a04 	vldr	s16, [r2, #16]
 800b8dc:	ee71 8a27 	vadd.f32	s17, s2, s15
 800b8e0:	ed93 aa04 	vldr	s20, [r3, #16]
 800b8e4:	ed16 7a01 	vldr	s14, [r6, #-4]
 800b8e8:	ee71 7a67 	vsub.f32	s15, s2, s15
 800b8ec:	ed57 0a01 	vldr	s1, [r7, #-4]
 800b8f0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800b8f4:	ee38 6a88 	vadd.f32	s12, s17, s16
 800b8f8:	edd3 9a03 	vldr	s19, [r3, #12]
 800b8fc:	ee30 0a87 	vadd.f32	s0, s1, s14
 800b900:	ed92 9a03 	vldr	s18, [r2, #12]
 800b904:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800b908:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800b90c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800b910:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800b914:	ee16 ca10 	vmov	ip, s12
 800b918:	ee30 6a49 	vsub.f32	s12, s0, s18
 800b91c:	ee77 4a01 	vadd.f32	s9, s14, s2
 800b920:	f847 c908 	str.w	ip, [r7], #-8
 800b924:	ee34 4a29 	vadd.f32	s8, s8, s19
 800b928:	edd2 8a03 	vldr	s17, [r2, #12]
 800b92c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800b930:	ed93 8a03 	vldr	s16, [r3, #12]
 800b934:	ee71 0a47 	vsub.f32	s1, s2, s14
 800b938:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b93c:	ee39 1a67 	vsub.f32	s2, s18, s15
 800b940:	ee36 6a69 	vsub.f32	s12, s12, s19
 800b944:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b948:	ee75 5aca 	vsub.f32	s11, s11, s20
 800b94c:	ed87 0a01 	vstr	s0, [r7, #4]
 800b950:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800b954:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800b958:	ee21 8a80 	vmul.f32	s16, s3, s0
 800b95c:	ee23 7a26 	vmul.f32	s14, s6, s13
 800b960:	ee64 7a26 	vmul.f32	s15, s8, s13
 800b964:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800b968:	ee24 4a00 	vmul.f32	s8, s8, s0
 800b96c:	ee23 3a00 	vmul.f32	s6, s6, s0
 800b970:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b974:	ee24 0a80 	vmul.f32	s0, s9, s0
 800b978:	ee38 7a07 	vadd.f32	s14, s16, s14
 800b97c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800b980:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b984:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b988:	ee17 ca10 	vmov	ip, s14
 800b98c:	f841 cb08 	str.w	ip, [r1], #8
 800b990:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b994:	ed82 0a04 	vstr	s0, [r2, #16]
 800b998:	edc2 6a03 	vstr	s13, [r2, #12]
 800b99c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800b9a0:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800b9a4:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800b9a8:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800b9ac:	ee65 4a27 	vmul.f32	s9, s10, s15
 800b9b0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b9b4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800b9b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b9bc:	ee25 5a26 	vmul.f32	s10, s10, s13
 800b9c0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b9c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9c8:	ee34 6a24 	vadd.f32	s12, s8, s9
 800b9cc:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800b9d0:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b9d4:	ee17 ca90 	vmov	ip, s15
 800b9d8:	ed04 6a04 	vstr	s12, [r4, #-16]
 800b9dc:	ed04 5a03 	vstr	s10, [r4, #-12]
 800b9e0:	f846 c908 	str.w	ip, [r6], #-8
 800b9e4:	edc6 6a01 	vstr	s13, [r6, #4]
 800b9e8:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800b9ec:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800b9f0:	ee62 5a27 	vmul.f32	s11, s4, s15
 800b9f4:	ee22 6a87 	vmul.f32	s12, s5, s14
 800b9f8:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b9fc:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800ba00:	ee61 6a07 	vmul.f32	s13, s2, s14
 800ba04:	ee20 7a87 	vmul.f32	s14, s1, s14
 800ba08:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ba0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 800ba10:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ba14:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800ba18:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800ba1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba20:	ee16 ca10 	vmov	ip, s12
 800ba24:	f840 cb08 	str.w	ip, [r0], #8
 800ba28:	ed40 2a01 	vstr	s5, [r0, #-4]
 800ba2c:	edc3 0a04 	vstr	s1, [r3, #16]
 800ba30:	edc3 7a03 	vstr	s15, [r3, #12]
 800ba34:	f47f aefc 	bne.w	800b830 <arm_cfft_radix8by4_f32+0x134>
 800ba38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba3a:	9802      	ldr	r0, [sp, #8]
 800ba3c:	00cb      	lsls	r3, r1, #3
 800ba3e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800ba42:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ba46:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ba4a:	4498      	add	r8, r3
 800ba4c:	449c      	add	ip, r3
 800ba4e:	9102      	str	r1, [sp, #8]
 800ba50:	9901      	ldr	r1, [sp, #4]
 800ba52:	4419      	add	r1, r3
 800ba54:	9101      	str	r1, [sp, #4]
 800ba56:	9907      	ldr	r1, [sp, #28]
 800ba58:	4419      	add	r1, r3
 800ba5a:	9107      	str	r1, [sp, #28]
 800ba5c:	9908      	ldr	r1, [sp, #32]
 800ba5e:	4419      	add	r1, r3
 800ba60:	9b06      	ldr	r3, [sp, #24]
 800ba62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba66:	9108      	str	r1, [sp, #32]
 800ba68:	9306      	str	r3, [sp, #24]
 800ba6a:	9a01      	ldr	r2, [sp, #4]
 800ba6c:	2304      	movs	r3, #4
 800ba6e:	9e08      	ldr	r6, [sp, #32]
 800ba70:	edd2 7a00 	vldr	s15, [r2]
 800ba74:	ed96 7a00 	vldr	s14, [r6]
 800ba78:	edd8 2a00 	vldr	s5, [r8]
 800ba7c:	ee77 5a87 	vadd.f32	s11, s15, s14
 800ba80:	ed9c 3a00 	vldr	s6, [ip]
 800ba84:	ed92 6a01 	vldr	s12, [r2, #4]
 800ba88:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ba8c:	edd6 6a01 	vldr	s13, [r6, #4]
 800ba90:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800ba94:	ed9c 2a01 	vldr	s4, [ip, #4]
 800ba98:	ee36 5a26 	vadd.f32	s10, s12, s13
 800ba9c:	edd8 7a01 	vldr	s15, [r8, #4]
 800baa0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800baa4:	9d02      	ldr	r5, [sp, #8]
 800baa6:	ee34 6a83 	vadd.f32	s12, s9, s6
 800baaa:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800baae:	ee37 4a27 	vadd.f32	s8, s14, s15
 800bab2:	9805      	ldr	r0, [sp, #20]
 800bab4:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800bab8:	4621      	mov	r1, r4
 800baba:	ed82 6a00 	vstr	s12, [r2]
 800babe:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800bac2:	edd8 3a01 	vldr	s7, [r8, #4]
 800bac6:	ee75 5a67 	vsub.f32	s11, s10, s15
 800baca:	eddc 1a01 	vldr	s3, [ip, #4]
 800bace:	ee34 4a42 	vsub.f32	s8, s8, s4
 800bad2:	ee75 3a23 	vadd.f32	s7, s10, s7
 800bad6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800bada:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800bade:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800bae2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bae6:	ee36 6a43 	vsub.f32	s12, s12, s6
 800baea:	ed82 5a01 	vstr	s10, [r2, #4]
 800baee:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800baf2:	9a07      	ldr	r2, [sp, #28]
 800baf4:	ee77 7a02 	vadd.f32	s15, s14, s4
 800baf8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800bafc:	edd2 2a00 	vldr	s5, [r2]
 800bb00:	ed92 5a01 	vldr	s10, [r2, #4]
 800bb04:	ee64 3a22 	vmul.f32	s7, s8, s5
 800bb08:	ee24 4a05 	vmul.f32	s8, s8, s10
 800bb0c:	ee24 5a85 	vmul.f32	s10, s9, s10
 800bb10:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800bb14:	ee33 5a85 	vadd.f32	s10, s7, s10
 800bb18:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800bb1c:	ed88 5a00 	vstr	s10, [r8]
 800bb20:	edc8 4a01 	vstr	s9, [r8, #4]
 800bb24:	edd5 4a01 	vldr	s9, [r5, #4]
 800bb28:	edd5 6a00 	vldr	s13, [r5]
 800bb2c:	9d06      	ldr	r5, [sp, #24]
 800bb2e:	ee26 5a26 	vmul.f32	s10, s12, s13
 800bb32:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bb36:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800bb3a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800bb3e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800bb42:	ee75 5a25 	vadd.f32	s11, s10, s11
 800bb46:	ed86 6a01 	vstr	s12, [r6, #4]
 800bb4a:	edc6 5a00 	vstr	s11, [r6]
 800bb4e:	edd5 5a01 	vldr	s11, [r5, #4]
 800bb52:	edd5 6a00 	vldr	s13, [r5]
 800bb56:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bb58:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800bb5c:	ee67 6a26 	vmul.f32	s13, s14, s13
 800bb60:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bb64:	ee27 7a25 	vmul.f32	s14, s14, s11
 800bb68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bb6c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800bb70:	edcc 7a01 	vstr	s15, [ip, #4]
 800bb74:	ed8c 7a00 	vstr	s14, [ip]
 800bb78:	6872      	ldr	r2, [r6, #4]
 800bb7a:	f000 fb09 	bl	800c190 <arm_radix8_butterfly_f32>
 800bb7e:	9803      	ldr	r0, [sp, #12]
 800bb80:	4621      	mov	r1, r4
 800bb82:	6872      	ldr	r2, [r6, #4]
 800bb84:	2304      	movs	r3, #4
 800bb86:	f000 fb03 	bl	800c190 <arm_radix8_butterfly_f32>
 800bb8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	6872      	ldr	r2, [r6, #4]
 800bb90:	2304      	movs	r3, #4
 800bb92:	f000 fafd 	bl	800c190 <arm_radix8_butterfly_f32>
 800bb96:	4621      	mov	r1, r4
 800bb98:	6872      	ldr	r2, [r6, #4]
 800bb9a:	2304      	movs	r3, #4
 800bb9c:	9804      	ldr	r0, [sp, #16]
 800bb9e:	b00f      	add	sp, #60	; 0x3c
 800bba0:	ecbd 8b06 	vpop	{d8-d10}
 800bba4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba8:	f000 baf2 	b.w	800c190 <arm_radix8_butterfly_f32>

0800bbac <arm_cfft_f32>:
 800bbac:	2a01      	cmp	r2, #1
 800bbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	4617      	mov	r7, r2
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	4698      	mov	r8, r3
 800bbba:	8805      	ldrh	r5, [r0, #0]
 800bbbc:	d053      	beq.n	800bc66 <arm_cfft_f32+0xba>
 800bbbe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800bbc2:	d04b      	beq.n	800bc5c <arm_cfft_f32+0xb0>
 800bbc4:	d916      	bls.n	800bbf4 <arm_cfft_f32+0x48>
 800bbc6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800bbca:	d01a      	beq.n	800bc02 <arm_cfft_f32+0x56>
 800bbcc:	d95a      	bls.n	800bc84 <arm_cfft_f32+0xd8>
 800bbce:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800bbd2:	d043      	beq.n	800bc5c <arm_cfft_f32+0xb0>
 800bbd4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800bbd8:	d105      	bne.n	800bbe6 <arm_cfft_f32+0x3a>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	6872      	ldr	r2, [r6, #4]
 800bbde:	4629      	mov	r1, r5
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f000 fad5 	bl	800c190 <arm_radix8_butterfly_f32>
 800bbe6:	f1b8 0f00 	cmp.w	r8, #0
 800bbea:	d111      	bne.n	800bc10 <arm_cfft_f32+0x64>
 800bbec:	2f01      	cmp	r7, #1
 800bbee:	d016      	beq.n	800bc1e <arm_cfft_f32+0x72>
 800bbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf4:	2d20      	cmp	r5, #32
 800bbf6:	d031      	beq.n	800bc5c <arm_cfft_f32+0xb0>
 800bbf8:	d948      	bls.n	800bc8c <arm_cfft_f32+0xe0>
 800bbfa:	2d40      	cmp	r5, #64	; 0x40
 800bbfc:	d0ed      	beq.n	800bbda <arm_cfft_f32+0x2e>
 800bbfe:	2d80      	cmp	r5, #128	; 0x80
 800bc00:	d1f1      	bne.n	800bbe6 <arm_cfft_f32+0x3a>
 800bc02:	4621      	mov	r1, r4
 800bc04:	4630      	mov	r0, r6
 800bc06:	f7ff fca9 	bl	800b55c <arm_cfft_radix8by2_f32>
 800bc0a:	f1b8 0f00 	cmp.w	r8, #0
 800bc0e:	d0ed      	beq.n	800bbec <arm_cfft_f32+0x40>
 800bc10:	68b2      	ldr	r2, [r6, #8]
 800bc12:	4620      	mov	r0, r4
 800bc14:	89b1      	ldrh	r1, [r6, #12]
 800bc16:	f7f4 fb63 	bl	80002e0 <arm_bitreversal_32>
 800bc1a:	2f01      	cmp	r7, #1
 800bc1c:	d1e8      	bne.n	800bbf0 <arm_cfft_f32+0x44>
 800bc1e:	ee07 5a90 	vmov	s15, r5
 800bc22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	d0de      	beq.n	800bbf0 <arm_cfft_f32+0x44>
 800bc32:	f104 0108 	add.w	r1, r4, #8
 800bc36:	2300      	movs	r3, #0
 800bc38:	ed11 7a02 	vldr	s14, [r1, #-8]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bc42:	3108      	adds	r1, #8
 800bc44:	429d      	cmp	r5, r3
 800bc46:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bc4a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bc4e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800bc52:	ed41 7a03 	vstr	s15, [r1, #-12]
 800bc56:	d1ef      	bne.n	800bc38 <arm_cfft_f32+0x8c>
 800bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f7ff fd4c 	bl	800b6fc <arm_cfft_radix8by4_f32>
 800bc64:	e7bf      	b.n	800bbe6 <arm_cfft_f32+0x3a>
 800bc66:	b1a5      	cbz	r5, 800bc92 <arm_cfft_f32+0xe6>
 800bc68:	f101 030c 	add.w	r3, r1, #12
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800bc72:	3201      	adds	r2, #1
 800bc74:	3308      	adds	r3, #8
 800bc76:	eef1 7a67 	vneg.f32	s15, s15
 800bc7a:	4295      	cmp	r5, r2
 800bc7c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800bc80:	d1f5      	bne.n	800bc6e <arm_cfft_f32+0xc2>
 800bc82:	e79c      	b.n	800bbbe <arm_cfft_f32+0x12>
 800bc84:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800bc88:	d0a7      	beq.n	800bbda <arm_cfft_f32+0x2e>
 800bc8a:	e7ac      	b.n	800bbe6 <arm_cfft_f32+0x3a>
 800bc8c:	2d10      	cmp	r5, #16
 800bc8e:	d0b8      	beq.n	800bc02 <arm_cfft_f32+0x56>
 800bc90:	e7a9      	b.n	800bbe6 <arm_cfft_f32+0x3a>
 800bc92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800bc96:	d896      	bhi.n	800bbc6 <arm_cfft_f32+0x1a>
 800bc98:	e7ac      	b.n	800bbf4 <arm_cfft_f32+0x48>
 800bc9a:	bf00      	nop

0800bc9c <arm_fir_decimate_init_f32>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	9f07      	ldr	r7, [sp, #28]
 800bca0:	fbb7 f4f2 	udiv	r4, r7, r2
 800bca4:	fb02 7414 	mls	r4, r2, r4, r7
 800bca8:	b994      	cbnz	r4, 800bcd0 <arm_fir_decimate_init_f32+0x34>
 800bcaa:	468e      	mov	lr, r1
 800bcac:	4616      	mov	r6, r2
 800bcae:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	4472      	add	r2, lr
 800bcb6:	8069      	strh	r1, [r5, #2]
 800bcb8:	6043      	str	r3, [r0, #4]
 800bcba:	4621      	mov	r1, r4
 800bcbc:	443a      	add	r2, r7
 800bcbe:	9806      	ldr	r0, [sp, #24]
 800bcc0:	0092      	lsls	r2, r2, #2
 800bcc2:	f000 fd9c 	bl	800c7fe <memset>
 800bcc6:	9b06      	ldr	r3, [sp, #24]
 800bcc8:	702e      	strb	r6, [r5, #0]
 800bcca:	4620      	mov	r0, r4
 800bccc:	60ab      	str	r3, [r5, #8]
 800bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcd0:	f06f 0001 	mvn.w	r0, #1
 800bcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcd6:	bf00      	nop

0800bcd8 <arm_fir_decimate_f32>:
 800bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcdc:	7804      	ldrb	r4, [r0, #0]
 800bcde:	4683      	mov	fp, r0
 800bce0:	b08d      	sub	sp, #52	; 0x34
 800bce2:	8840      	ldrh	r0, [r0, #2]
 800bce4:	f8db 5004 	ldr.w	r5, [fp, #4]
 800bce8:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 800bcec:	4696      	mov	lr, r2
 800bcee:	9208      	str	r2, [sp, #32]
 800bcf0:	9502      	str	r5, [sp, #8]
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	f8db 6008 	ldr.w	r6, [fp, #8]
 800bcf8:	4481      	add	r9, r0
 800bcfa:	9009      	str	r0, [sp, #36]	; 0x24
 800bcfc:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800bd00:	fbb3 f3f4 	udiv	r3, r3, r4
 800bd04:	089d      	lsrs	r5, r3, #2
 800bd06:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
 800bd0a:	950a      	str	r5, [sp, #40]	; 0x28
 800bd0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd0e:	2d00      	cmp	r5, #0
 800bd10:	f000 80f8 	beq.w	800bf04 <arm_fir_decimate_f32+0x22c>
 800bd14:	0883      	lsrs	r3, r0, #2
 800bd16:	f000 0003 	and.w	r0, r0, #3
 800bd1a:	462f      	mov	r7, r5
 800bd1c:	f8cd b010 	str.w	fp, [sp, #16]
 800bd20:	9305      	str	r3, [sp, #20]
 800bd22:	011b      	lsls	r3, r3, #4
 800bd24:	9006      	str	r0, [sp, #24]
 800bd26:	f10e 0a10 	add.w	sl, lr, #16
 800bd2a:	441a      	add	r2, r3
 800bd2c:	469b      	mov	fp, r3
 800bd2e:	4648      	mov	r0, r9
 800bd30:	9703      	str	r7, [sp, #12]
 800bd32:	9207      	str	r2, [sp, #28]
 800bd34:	f8cd 9004 	str.w	r9, [sp, #4]
 800bd38:	00a4      	lsls	r4, r4, #2
 800bd3a:	460a      	mov	r2, r1
 800bd3c:	4623      	mov	r3, r4
 800bd3e:	f852 5b04 	ldr.w	r5, [r2], #4
 800bd42:	3b01      	subs	r3, #1
 800bd44:	f840 5b04 	str.w	r5, [r0], #4
 800bd48:	d1f9      	bne.n	800bd3e <arm_fir_decimate_f32+0x66>
 800bd4a:	9b04      	ldr	r3, [sp, #16]
 800bd4c:	00a4      	lsls	r4, r4, #2
 800bd4e:	9f05      	ldr	r7, [sp, #20]
 800bd50:	f893 8000 	ldrb.w	r8, [r3]
 800bd54:	4421      	add	r1, r4
 800bd56:	9b01      	ldr	r3, [sp, #4]
 800bd58:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800bd5c:	ed9f 1abb 	vldr	s2, [pc, #748]	; 800c04c <arm_fir_decimate_f32+0x374>
 800bd60:	4423      	add	r3, r4
 800bd62:	eb06 0e08 	add.w	lr, r6, r8
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	eb0e 0c08 	add.w	ip, lr, r8
 800bd6c:	eb0c 0908 	add.w	r9, ip, r8
 800bd70:	2f00      	cmp	r7, #0
 800bd72:	f000 8161 	beq.w	800c038 <arm_fir_decimate_f32+0x360>
 800bd76:	9b02      	ldr	r3, [sp, #8]
 800bd78:	eef0 5a41 	vmov.f32	s11, s2
 800bd7c:	eeb0 5a41 	vmov.f32	s10, s2
 800bd80:	f106 0410 	add.w	r4, r6, #16
 800bd84:	eef0 4a41 	vmov.f32	s9, s2
 800bd88:	f103 0510 	add.w	r5, r3, #16
 800bd8c:	f10e 0010 	add.w	r0, lr, #16
 800bd90:	f10c 0210 	add.w	r2, ip, #16
 800bd94:	f109 0310 	add.w	r3, r9, #16
 800bd98:	ed55 6a04 	vldr	s13, [r5, #-16]
 800bd9c:	3f01      	subs	r7, #1
 800bd9e:	ed13 6a04 	vldr	s12, [r3, #-16]
 800bda2:	f105 0510 	add.w	r5, r5, #16
 800bda6:	ed14 4a04 	vldr	s8, [r4, #-16]
 800bdaa:	f100 0010 	add.w	r0, r0, #16
 800bdae:	ed50 1a08 	vldr	s3, [r0, #-32]	; 0xffffffe0
 800bdb2:	f104 0410 	add.w	r4, r4, #16
 800bdb6:	ed52 2a04 	vldr	s5, [r2, #-16]
 800bdba:	ee26 4a84 	vmul.f32	s8, s13, s8
 800bdbe:	ee66 1aa1 	vmul.f32	s3, s13, s3
 800bdc2:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800bdc6:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800bdca:	ed54 3a07 	vldr	s7, [r4, #-28]	; 0xffffffe4
 800bdce:	ee66 6a86 	vmul.f32	s13, s13, s12
 800bdd2:	ed10 2a07 	vldr	s4, [r0, #-28]	; 0xffffffe4
 800bdd6:	ed13 6a03 	vldr	s12, [r3, #-12]
 800bdda:	ee74 4a24 	vadd.f32	s9, s8, s9
 800bdde:	ed12 3a03 	vldr	s6, [r2, #-12]
 800bde2:	ee31 5a85 	vadd.f32	s10, s3, s10
 800bde6:	ee72 5aa5 	vadd.f32	s11, s5, s11
 800bdea:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 800bdee:	ee67 3a23 	vmul.f32	s7, s14, s7
 800bdf2:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800bdf6:	ee27 2a02 	vmul.f32	s4, s14, s4
 800bdfa:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800bdfe:	ee27 3a03 	vmul.f32	s6, s14, s6
 800be02:	ed52 2a02 	vldr	s5, [r2, #-8]
 800be06:	ee76 6a81 	vadd.f32	s13, s13, s2
 800be0a:	ed10 0a05 	vldr	s0, [r0, #-20]	; 0xffffffec
 800be0e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800be12:	ed13 6a02 	vldr	s12, [r3, #-8]
 800be16:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800be1a:	ed15 1a05 	vldr	s2, [r5, #-20]	; 0xffffffec
 800be1e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800be22:	ed52 0a01 	vldr	s1, [r2, #-4]
 800be26:	ee32 2a05 	vadd.f32	s4, s4, s10
 800be2a:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800be2e:	ee27 5aa1 	vmul.f32	s10, s15, s3
 800be32:	ed53 1a01 	vldr	s3, [r3, #-4]
 800be36:	ee33 3a25 	vadd.f32	s6, s6, s11
 800be3a:	f102 0210 	add.w	r2, r2, #16
 800be3e:	ee67 5aa2 	vmul.f32	s11, s15, s5
 800be42:	f103 0310 	add.w	r3, r3, #16
 800be46:	ee67 7a86 	vmul.f32	s15, s15, s12
 800be4a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800be4e:	ee34 6aa3 	vadd.f32	s12, s9, s7
 800be52:	ee61 4a04 	vmul.f32	s9, s2, s8
 800be56:	ee75 3a02 	vadd.f32	s7, s10, s4
 800be5a:	ee35 4a83 	vadd.f32	s8, s11, s6
 800be5e:	ee21 5a00 	vmul.f32	s10, s2, s0
 800be62:	ee61 5a20 	vmul.f32	s11, s2, s1
 800be66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be6a:	ee21 1a21 	vmul.f32	s2, s2, s3
 800be6e:	ee74 4a86 	vadd.f32	s9, s9, s12
 800be72:	ee35 5a23 	vadd.f32	s10, s10, s7
 800be76:	ee75 5a84 	vadd.f32	s11, s11, s8
 800be7a:	ee31 1a27 	vadd.f32	s2, s2, s15
 800be7e:	d18b      	bne.n	800bd98 <arm_fir_decimate_f32+0xc0>
 800be80:	445e      	add	r6, fp
 800be82:	44de      	add	lr, fp
 800be84:	44dc      	add	ip, fp
 800be86:	eb09 000b 	add.w	r0, r9, fp
 800be8a:	9a07      	ldr	r2, [sp, #28]
 800be8c:	9b06      	ldr	r3, [sp, #24]
 800be8e:	b1db      	cbz	r3, 800bec8 <arm_fir_decimate_f32+0x1f0>
 800be90:	ecb2 6a01 	vldmia	r2!, {s12}
 800be94:	3b01      	subs	r3, #1
 800be96:	ecf6 6a01 	vldmia	r6!, {s13}
 800be9a:	ecbe 7a01 	vldmia	lr!, {s14}
 800be9e:	ecfc 7a01 	vldmia	ip!, {s15}
 800bea2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800bea6:	ecb0 4a01 	vldmia	r0!, {s8}
 800beaa:	ee26 7a07 	vmul.f32	s14, s12, s14
 800beae:	ee66 7a27 	vmul.f32	s15, s12, s15
 800beb2:	ee26 6a04 	vmul.f32	s12, s12, s8
 800beb6:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800beba:	ee35 5a07 	vadd.f32	s10, s10, s14
 800bebe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800bec2:	ee31 1a06 	vadd.f32	s2, s2, s12
 800bec6:	d1e3      	bne.n	800be90 <arm_fir_decimate_f32+0x1b8>
 800bec8:	9b03      	ldr	r3, [sp, #12]
 800beca:	eb09 0608 	add.w	r6, r9, r8
 800bece:	ed4a 4a04 	vstr	s9, [sl, #-16]
 800bed2:	f10a 0a10 	add.w	sl, sl, #16
 800bed6:	3b01      	subs	r3, #1
 800bed8:	ed0a 5a07 	vstr	s10, [sl, #-28]	; 0xffffffe4
 800bedc:	ed4a 5a06 	vstr	s11, [sl, #-24]	; 0xffffffe8
 800bee0:	ed0a 1a05 	vstr	s2, [sl, #-20]	; 0xffffffec
 800bee4:	9303      	str	r3, [sp, #12]
 800bee6:	d003      	beq.n	800bef0 <arm_fir_decimate_f32+0x218>
 800bee8:	9b04      	ldr	r3, [sp, #16]
 800beea:	9801      	ldr	r0, [sp, #4]
 800beec:	781c      	ldrb	r4, [r3, #0]
 800beee:	e723      	b.n	800bd38 <arm_fir_decimate_f32+0x60>
 800bef0:	9b08      	ldr	r3, [sp, #32]
 800bef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bef4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bef8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800befc:	f8dd b010 	ldr.w	fp, [sp, #16]
 800bf00:	9308      	str	r3, [sp, #32]
 800bf02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d061      	beq.n	800bfcc <arm_fir_decimate_f32+0x2f4>
 800bf08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf0a:	4698      	mov	r8, r3
 800bf0c:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bf10:	0895      	lsrs	r5, r2, #2
 800bf12:	f002 0703 	and.w	r7, r2, #3
 800bf16:	9a02      	ldr	r2, [sp, #8]
 800bf18:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800bf1c:	eb02 0c0e 	add.w	ip, r2, lr
 800bf20:	f89b 4000 	ldrb.w	r4, [fp]
 800bf24:	4648      	mov	r0, r9
 800bf26:	460a      	mov	r2, r1
 800bf28:	4623      	mov	r3, r4
 800bf2a:	ecf2 7a01 	vldmia	r2!, {s15}
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	ece0 7a01 	vstmia	r0!, {s15}
 800bf34:	d1f9      	bne.n	800bf2a <arm_fir_decimate_f32+0x252>
 800bf36:	00a4      	lsls	r4, r4, #2
 800bf38:	44a1      	add	r9, r4
 800bf3a:	4421      	add	r1, r4
 800bf3c:	2d00      	cmp	r5, #0
 800bf3e:	d076      	beq.n	800c02e <arm_fir_decimate_f32+0x356>
 800bf40:	9b02      	ldr	r3, [sp, #8]
 800bf42:	4628      	mov	r0, r5
 800bf44:	eddf 7a41 	vldr	s15, [pc, #260]	; 800c04c <arm_fir_decimate_f32+0x374>
 800bf48:	f103 0210 	add.w	r2, r3, #16
 800bf4c:	f106 0310 	add.w	r3, r6, #16
 800bf50:	ed52 6a04 	vldr	s13, [r2, #-16]
 800bf54:	3801      	subs	r0, #1
 800bf56:	ed13 7a04 	vldr	s14, [r3, #-16]
 800bf5a:	f102 0210 	add.w	r2, r2, #16
 800bf5e:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 800bf62:	f103 0310 	add.w	r3, r3, #16
 800bf66:	ee66 5a87 	vmul.f32	s11, s13, s14
 800bf6a:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800bf6e:	ed12 6a06 	vldr	s12, [r2, #-24]	; 0xffffffe8
 800bf72:	ee25 5a07 	vmul.f32	s10, s10, s14
 800bf76:	ed13 7a06 	vldr	s14, [r3, #-24]	; 0xffffffe8
 800bf7a:	ee75 6aa7 	vadd.f32	s13, s11, s15
 800bf7e:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 800bf82:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bf86:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800bf8a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800bf8e:	ee25 7a87 	vmul.f32	s14, s11, s14
 800bf92:	ee76 7a26 	vadd.f32	s15, s12, s13
 800bf96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf9a:	d1d9      	bne.n	800bf50 <arm_fir_decimate_f32+0x278>
 800bf9c:	eb06 020e 	add.w	r2, r6, lr
 800bfa0:	4660      	mov	r0, ip
 800bfa2:	b157      	cbz	r7, 800bfba <arm_fir_decimate_f32+0x2e2>
 800bfa4:	463b      	mov	r3, r7
 800bfa6:	ecf0 6a01 	vldmia	r0!, {s13}
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	ecb2 7a01 	vldmia	r2!, {s14}
 800bfb0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800bfb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bfb8:	d1f5      	bne.n	800bfa6 <arm_fir_decimate_f32+0x2ce>
 800bfba:	f89b 3000 	ldrb.w	r3, [fp]
 800bfbe:	f1b8 0801 	subs.w	r8, r8, #1
 800bfc2:	ecea 7a01 	vstmia	sl!, {s15}
 800bfc6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800bfca:	d1a9      	bne.n	800bf20 <arm_fir_decimate_f32+0x248>
 800bfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfce:	f8db 4008 	ldr.w	r4, [fp, #8]
 800bfd2:	1e59      	subs	r1, r3, #1
 800bfd4:	088f      	lsrs	r7, r1, #2
 800bfd6:	d01d      	beq.n	800c014 <arm_fir_decimate_f32+0x33c>
 800bfd8:	f104 0210 	add.w	r2, r4, #16
 800bfdc:	f106 0310 	add.w	r3, r6, #16
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800bfe6:	3801      	subs	r0, #1
 800bfe8:	f103 0310 	add.w	r3, r3, #16
 800bfec:	f102 0210 	add.w	r2, r2, #16
 800bff0:	f842 5c20 	str.w	r5, [r2, #-32]
 800bff4:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 800bff8:	f842 5c1c 	str.w	r5, [r2, #-28]
 800bffc:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800c000:	f842 5c18 	str.w	r5, [r2, #-24]
 800c004:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800c008:	f842 5c14 	str.w	r5, [r2, #-20]
 800c00c:	d1e9      	bne.n	800bfe2 <arm_fir_decimate_f32+0x30a>
 800c00e:	013b      	lsls	r3, r7, #4
 800c010:	441c      	add	r4, r3
 800c012:	441e      	add	r6, r3
 800c014:	f011 0303 	ands.w	r3, r1, #3
 800c018:	d006      	beq.n	800c028 <arm_fir_decimate_f32+0x350>
 800c01a:	4622      	mov	r2, r4
 800c01c:	f856 1b04 	ldr.w	r1, [r6], #4
 800c020:	3b01      	subs	r3, #1
 800c022:	f842 1b04 	str.w	r1, [r2], #4
 800c026:	d1f9      	bne.n	800c01c <arm_fir_decimate_f32+0x344>
 800c028:	b00d      	add	sp, #52	; 0x34
 800c02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c02e:	9802      	ldr	r0, [sp, #8]
 800c030:	4632      	mov	r2, r6
 800c032:	eddf 7a06 	vldr	s15, [pc, #24]	; 800c04c <arm_fir_decimate_f32+0x374>
 800c036:	e7b4      	b.n	800bfa2 <arm_fir_decimate_f32+0x2ca>
 800c038:	4648      	mov	r0, r9
 800c03a:	9a02      	ldr	r2, [sp, #8]
 800c03c:	eef0 5a41 	vmov.f32	s11, s2
 800c040:	eeb0 5a41 	vmov.f32	s10, s2
 800c044:	eef0 4a41 	vmov.f32	s9, s2
 800c048:	e720      	b.n	800be8c <arm_fir_decimate_f32+0x1b4>
 800c04a:	bf00      	nop
 800c04c:	00000000 	.word	0x00000000

0800c050 <arm_cmplx_mult_cmplx_f32>:
 800c050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c052:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800c056:	d073      	beq.n	800c140 <arm_cmplx_mult_cmplx_f32+0xf0>
 800c058:	f100 0620 	add.w	r6, r0, #32
 800c05c:	f101 0520 	add.w	r5, r1, #32
 800c060:	f102 0420 	add.w	r4, r2, #32
 800c064:	4677      	mov	r7, lr
 800c066:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 800c06a:	3f01      	subs	r7, #1
 800c06c:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 800c070:	f106 0620 	add.w	r6, r6, #32
 800c074:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 800c078:	f105 0520 	add.w	r5, r5, #32
 800c07c:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 800c080:	ee27 3a27 	vmul.f32	s6, s14, s15
 800c084:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800c088:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 800c08c:	ee25 4aa6 	vmul.f32	s8, s11, s13
 800c090:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 800c094:	ee67 6a26 	vmul.f32	s13, s14, s13
 800c098:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 800c09c:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 800c0a0:	ee66 3a27 	vmul.f32	s7, s12, s15
 800c0a4:	ee66 5a05 	vmul.f32	s11, s12, s10
 800c0a8:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 800c0ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c0b0:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 800c0b4:	ee25 5a22 	vmul.f32	s10, s10, s5
 800c0b8:	f104 0420 	add.w	r4, r4, #32
 800c0bc:	ee33 4a44 	vsub.f32	s8, s6, s8
 800c0c0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800c0c4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c0c8:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 800c0cc:	ee67 4a06 	vmul.f32	s9, s14, s12
 800c0d0:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 800c0d4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c0d8:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 800c0dc:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 800c0e0:	ee66 5a05 	vmul.f32	s11, s12, s10
 800c0e4:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 800c0e8:	ee25 5a26 	vmul.f32	s10, s10, s13
 800c0ec:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800c0f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c0f4:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800c0f8:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 800c0fc:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 800c100:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800c104:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 800c108:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c10c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c110:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c114:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 800c118:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c11c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c124:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800c128:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 800c12c:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800c130:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 800c134:	d197      	bne.n	800c066 <arm_cmplx_mult_cmplx_f32+0x16>
 800c136:	ea4f 144e 	mov.w	r4, lr, lsl #5
 800c13a:	4420      	add	r0, r4
 800c13c:	4421      	add	r1, r4
 800c13e:	4422      	add	r2, r4
 800c140:	f013 0303 	ands.w	r3, r3, #3
 800c144:	d022      	beq.n	800c18c <arm_cmplx_mult_cmplx_f32+0x13c>
 800c146:	3008      	adds	r0, #8
 800c148:	3108      	adds	r1, #8
 800c14a:	3208      	adds	r2, #8
 800c14c:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c150:	3b01      	subs	r3, #1
 800c152:	ed11 7a02 	vldr	s14, [r1, #-8]
 800c156:	f100 0008 	add.w	r0, r0, #8
 800c15a:	ed50 6a03 	vldr	s13, [r0, #-12]
 800c15e:	f101 0108 	add.w	r1, r1, #8
 800c162:	ed51 5a03 	vldr	s11, [r1, #-12]
 800c166:	ee27 6a87 	vmul.f32	s12, s15, s14
 800c16a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c16e:	f102 0208 	add.w	r2, r2, #8
 800c172:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c176:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c17a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c17e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c182:	ed42 6a04 	vstr	s13, [r2, #-16]
 800c186:	ed42 7a03 	vstr	s15, [r2, #-12]
 800c18a:	d1df      	bne.n	800c14c <arm_cmplx_mult_cmplx_f32+0xfc>
 800c18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c18e:	bf00      	nop

0800c190 <arm_radix8_butterfly_f32>:
 800c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	469e      	mov	lr, r3
 800c196:	4603      	mov	r3, r0
 800c198:	468a      	mov	sl, r1
 800c19a:	468b      	mov	fp, r1
 800c19c:	3304      	adds	r3, #4
 800c19e:	ed2d 8b10 	vpush	{d8-d15}
 800c1a2:	469c      	mov	ip, r3
 800c1a4:	b09d      	sub	sp, #116	; 0x74
 800c1a6:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800c4b4 <arm_radix8_butterfly_f32+0x324>
 800c1aa:	9019      	str	r0, [sp, #100]	; 0x64
 800c1ac:	921a      	str	r2, [sp, #104]	; 0x68
 800c1ae:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1b0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800c1b4:	f04f 0800 	mov.w	r8, #0
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	9311      	str	r3, [sp, #68]	; 0x44
 800c1bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	0053      	lsls	r3, r2, #1
 800c1ca:	18d5      	adds	r5, r2, r3
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	0113      	lsls	r3, r2, #4
 800c1d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c1d2:	194c      	adds	r4, r1, r5
 800c1d4:	eb02 0609 	add.w	r6, r2, r9
 800c1d8:	9302      	str	r3, [sp, #8]
 800c1da:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c1de:	4613      	mov	r3, r2
 800c1e0:	190a      	adds	r2, r1, r4
 800c1e2:	eb06 0709 	add.w	r7, r6, r9
 800c1e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c1ea:	1888      	adds	r0, r1, r2
 800c1ec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c1f0:	4401      	add	r1, r0
 800c1f2:	3204      	adds	r2, #4
 800c1f4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c1f8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c1fc:	9b00      	ldr	r3, [sp, #0]
 800c1fe:	3104      	adds	r1, #4
 800c200:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800c204:	44d8      	add	r8, fp
 800c206:	ed90 7a00 	vldr	s14, [r0]
 800c20a:	ed94 5a00 	vldr	s10, [r4]
 800c20e:	45c2      	cmp	sl, r8
 800c210:	edd7 3a00 	vldr	s7, [r7]
 800c214:	ed96 6a00 	vldr	s12, [r6]
 800c218:	ee37 1a85 	vadd.f32	s2, s15, s10
 800c21c:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c220:	ee73 4a87 	vadd.f32	s9, s7, s14
 800c224:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800c228:	edd5 7a00 	vldr	s15, [r5]
 800c22c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800c230:	ed11 7a01 	vldr	s14, [r1, #-4]
 800c234:	ee36 2a26 	vadd.f32	s4, s12, s13
 800c238:	ee37 4a87 	vadd.f32	s8, s15, s14
 800c23c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c240:	ee71 5a24 	vadd.f32	s11, s2, s9
 800c244:	ee32 6a04 	vadd.f32	s12, s4, s8
 800c248:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c24c:	ee31 1a64 	vsub.f32	s2, s2, s9
 800c250:	ee75 4a86 	vadd.f32	s9, s11, s12
 800c254:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800c258:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800c25c:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800c260:	ee32 2a44 	vsub.f32	s4, s4, s8
 800c264:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c268:	ed94 0a01 	vldr	s0, [r4, #4]
 800c26c:	edc4 5a00 	vstr	s11, [r4]
 800c270:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c274:	edd6 5a01 	vldr	s11, [r6, #4]
 800c278:	edd5 2a01 	vldr	s5, [r5, #4]
 800c27c:	ee75 1a27 	vadd.f32	s3, s10, s15
 800c280:	ed92 4a00 	vldr	s8, [r2]
 800c284:	ee75 7a67 	vsub.f32	s15, s10, s15
 800c288:	edd1 4a00 	vldr	s9, [r1]
 800c28c:	ee27 7a09 	vmul.f32	s14, s14, s18
 800c290:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800c294:	ed9c 6a00 	vldr	s12, [ip]
 800c298:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800c29c:	edd0 0a01 	vldr	s1, [r0, #4]
 800c2a0:	ed97 5a01 	vldr	s10, [r7, #4]
 800c2a4:	ee35 4a84 	vadd.f32	s8, s11, s8
 800c2a8:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800c2ac:	ee73 5a26 	vadd.f32	s11, s6, s13
 800c2b0:	ee76 2a00 	vadd.f32	s5, s12, s0
 800c2b4:	ee73 6a66 	vsub.f32	s13, s6, s13
 800c2b8:	ee36 6a40 	vsub.f32	s12, s12, s0
 800c2bc:	ee35 0a20 	vadd.f32	s0, s10, s1
 800c2c0:	ee65 5a89 	vmul.f32	s11, s11, s18
 800c2c4:	ee35 5a60 	vsub.f32	s10, s10, s1
 800c2c8:	ee32 3a80 	vadd.f32	s6, s5, s0
 800c2cc:	ee74 0a24 	vadd.f32	s1, s8, s9
 800c2d0:	ee66 6a89 	vmul.f32	s13, s13, s18
 800c2d4:	ee74 4a64 	vsub.f32	s9, s8, s9
 800c2d8:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800c2dc:	ee75 2a25 	vadd.f32	s5, s10, s11
 800c2e0:	ee33 0a20 	vadd.f32	s0, s6, s1
 800c2e4:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c2e8:	ee33 3a60 	vsub.f32	s6, s6, s1
 800c2ec:	ee36 5a26 	vadd.f32	s10, s12, s13
 800c2f0:	ed8c 0a00 	vstr	s0, [ip]
 800c2f4:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c2f8:	449c      	add	ip, r3
 800c2fa:	ee33 6a87 	vadd.f32	s12, s7, s14
 800c2fe:	ed84 3a01 	vstr	s6, [r4, #4]
 800c302:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800c306:	441c      	add	r4, r3
 800c308:	ee71 3a24 	vadd.f32	s7, s2, s9
 800c30c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c310:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800c314:	edc7 3a00 	vstr	s7, [r7]
 800c318:	ee34 1a42 	vsub.f32	s2, s8, s4
 800c31c:	edc0 4a00 	vstr	s9, [r0]
 800c320:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800c324:	ee75 4a46 	vsub.f32	s9, s10, s12
 800c328:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c32c:	ed87 1a01 	vstr	s2, [r7, #4]
 800c330:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800c334:	441f      	add	r7, r3
 800c336:	ee32 4a04 	vadd.f32	s8, s4, s8
 800c33a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800c33e:	ee36 6a05 	vadd.f32	s12, s12, s10
 800c342:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c346:	ed80 4a01 	vstr	s8, [r0, #4]
 800c34a:	ed86 3a00 	vstr	s6, [r6]
 800c34e:	4418      	add	r0, r3
 800c350:	ed41 1a01 	vstr	s3, [r1, #-4]
 800c354:	ed42 3a01 	vstr	s7, [r2, #-4]
 800c358:	edc5 7a00 	vstr	s15, [r5]
 800c35c:	edc6 4a01 	vstr	s9, [r6, #4]
 800c360:	441e      	add	r6, r3
 800c362:	ed81 6a00 	vstr	s12, [r1]
 800c366:	4419      	add	r1, r3
 800c368:	edc2 5a00 	vstr	s11, [r2]
 800c36c:	441a      	add	r2, r3
 800c36e:	ed85 7a01 	vstr	s14, [r5, #4]
 800c372:	441d      	add	r5, r3
 800c374:	f63f af44 	bhi.w	800c200 <arm_radix8_butterfly_f32+0x70>
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c37c:	2b07      	cmp	r3, #7
 800c37e:	f240 81f4 	bls.w	800c76a <arm_radix8_butterfly_f32+0x5da>
 800c382:	9901      	ldr	r1, [sp, #4]
 800c384:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800c388:	9d02      	ldr	r5, [sp, #8]
 800c38a:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800c38e:	3101      	adds	r1, #1
 800c390:	eb04 000e 	add.w	r0, r4, lr
 800c394:	00e4      	lsls	r4, r4, #3
 800c396:	3508      	adds	r5, #8
 800c398:	4419      	add	r1, r3
 800c39a:	eb00 0c0e 	add.w	ip, r0, lr
 800c39e:	9413      	str	r4, [sp, #76]	; 0x4c
 800c3a0:	00c0      	lsls	r0, r0, #3
 800c3a2:	185e      	adds	r6, r3, r1
 800c3a4:	4617      	mov	r7, r2
 800c3a6:	9218      	str	r2, [sp, #96]	; 0x60
 800c3a8:	f109 0908 	add.w	r9, r9, #8
 800c3ac:	199c      	adds	r4, r3, r6
 800c3ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c3b2:	9012      	str	r0, [sp, #72]	; 0x48
 800c3b4:	195d      	adds	r5, r3, r5
 800c3b6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c3b8:	443a      	add	r2, r7
 800c3ba:	950c      	str	r5, [sp, #48]	; 0x30
 800c3bc:	4698      	mov	r8, r3
 800c3be:	4420      	add	r0, r4
 800c3c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c3c2:	19d7      	adds	r7, r2, r7
 800c3c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c3c8:	4405      	add	r5, r0
 800c3ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c3ce:	9710      	str	r7, [sp, #64]	; 0x40
 800c3d0:	eb0c 070e 	add.w	r7, ip, lr
 800c3d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800c3d8:	3404      	adds	r4, #4
 800c3da:	3004      	adds	r0, #4
 800c3dc:	44c8      	add	r8, r9
 800c3de:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800c3e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3e4:	940a      	str	r4, [sp, #40]	; 0x28
 800c3e6:	9009      	str	r0, [sp, #36]	; 0x24
 800c3e8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c3ec:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800c3ee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c3f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c3f4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800c3f8:	eb07 080e 	add.w	r8, r7, lr
 800c3fc:	eb04 0900 	add.w	r9, r4, r0
 800c400:	00f8      	lsls	r0, r7, #3
 800c402:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800c406:	3504      	adds	r5, #4
 800c408:	4607      	mov	r7, r0
 800c40a:	9017      	str	r0, [sp, #92]	; 0x5c
 800c40c:	910b      	str	r1, [sp, #44]	; 0x2c
 800c40e:	4618      	mov	r0, r3
 800c410:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800c414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c416:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800c41a:	18e3      	adds	r3, r4, r3
 800c41c:	9508      	str	r5, [sp, #32]
 800c41e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c420:	910e      	str	r1, [sp, #56]	; 0x38
 800c422:	4621      	mov	r1, r4
 800c424:	eb04 0805 	add.w	r8, r4, r5
 800c428:	9304      	str	r3, [sp, #16]
 800c42a:	19e5      	adds	r5, r4, r7
 800c42c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800c430:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c432:	9316      	str	r3, [sp, #88]	; 0x58
 800c434:	190b      	adds	r3, r1, r4
 800c436:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c438:	9505      	str	r5, [sp, #20]
 800c43a:	9303      	str	r3, [sp, #12]
 800c43c:	f100 0308 	add.w	r3, r0, #8
 800c440:	9707      	str	r7, [sp, #28]
 800c442:	4638      	mov	r0, r7
 800c444:	930f      	str	r3, [sp, #60]	; 0x3c
 800c446:	2301      	movs	r3, #1
 800c448:	9306      	str	r3, [sp, #24]
 800c44a:	9b00      	ldr	r3, [sp, #0]
 800c44c:	ed90 fa00 	vldr	s30, [r0]
 800c450:	edd0 ba01 	vldr	s23, [r0, #4]
 800c454:	9803      	ldr	r0, [sp, #12]
 800c456:	9903      	ldr	r1, [sp, #12]
 800c458:	ed90 ba01 	vldr	s22, [r0, #4]
 800c45c:	9804      	ldr	r0, [sp, #16]
 800c45e:	edd1 ea00 	vldr	s29, [r1]
 800c462:	edd0 aa01 	vldr	s21, [r0, #4]
 800c466:	9805      	ldr	r0, [sp, #20]
 800c468:	9905      	ldr	r1, [sp, #20]
 800c46a:	edd0 7a01 	vldr	s15, [r0, #4]
 800c46e:	ed91 da00 	vldr	s26, [r1]
 800c472:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c474:	9c04      	ldr	r4, [sp, #16]
 800c476:	edcd 7a01 	vstr	s15, [sp, #4]
 800c47a:	edd8 7a01 	vldr	s15, [r8, #4]
 800c47e:	9100      	str	r1, [sp, #0]
 800c480:	edd2 fa00 	vldr	s31, [r2]
 800c484:	ed94 ea00 	vldr	s28, [r4]
 800c488:	ed92 ca01 	vldr	s24, [r2, #4]
 800c48c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c490:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c492:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c494:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c496:	edd9 da00 	vldr	s27, [r9]
 800c49a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c49c:	edd8 ca00 	vldr	s25, [r8]
 800c4a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c4a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4a4:	f8dd c018 	ldr.w	ip, [sp, #24]
 800c4a8:	ed99 aa01 	vldr	s20, [r9, #4]
 800c4ac:	edcd 7a02 	vstr	s15, [sp, #8]
 800c4b0:	9800      	ldr	r0, [sp, #0]
 800c4b2:	e001      	b.n	800c4b8 <arm_radix8_butterfly_f32+0x328>
 800c4b4:	3f3504f3 	.word	0x3f3504f3
 800c4b8:	edd5 3a00 	vldr	s7, [r5]
 800c4bc:	44dc      	add	ip, fp
 800c4be:	ed91 7a00 	vldr	s14, [r1]
 800c4c2:	edd4 8a00 	vldr	s17, [r4]
 800c4c6:	45e2      	cmp	sl, ip
 800c4c8:	ed57 7a01 	vldr	s15, [r7, #-4]
 800c4cc:	ed90 5a00 	vldr	s10, [r0]
 800c4d0:	ed56 5a01 	vldr	s11, [r6, #-4]
 800c4d4:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800c4d8:	ed92 1a00 	vldr	s2, [r2]
 800c4dc:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800c4e0:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800c4e4:	ee75 9a25 	vadd.f32	s19, s10, s11
 800c4e8:	ee31 3a07 	vadd.f32	s6, s2, s14
 800c4ec:	ed92 8a01 	vldr	s16, [r2, #4]
 800c4f0:	ee73 6a84 	vadd.f32	s13, s7, s8
 800c4f4:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c4f8:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800c4fc:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c500:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800c504:	ee75 7a84 	vadd.f32	s15, s11, s8
 800c508:	ee31 1a47 	vsub.f32	s2, s2, s14
 800c50c:	ee31 7a85 	vadd.f32	s14, s3, s10
 800c510:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c514:	ee33 3a46 	vsub.f32	s6, s6, s12
 800c518:	ed82 7a00 	vstr	s14, [r2]
 800c51c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800c520:	ed96 6a00 	vldr	s12, [r6]
 800c524:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800c528:	edd5 3a01 	vldr	s7, [r5, #4]
 800c52c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800c530:	ed90 7a01 	vldr	s14, [r0, #4]
 800c534:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800c538:	edde 4a00 	vldr	s9, [lr]
 800c53c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800c540:	ee77 2a46 	vsub.f32	s5, s14, s12
 800c544:	edd1 6a01 	vldr	s13, [r1, #4]
 800c548:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800c54c:	edd7 0a00 	vldr	s1, [r7]
 800c550:	ee77 5a06 	vadd.f32	s11, s14, s12
 800c554:	ed94 7a01 	vldr	s14, [r4, #4]
 800c558:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800c55c:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800c560:	ee78 4a66 	vsub.f32	s9, s16, s13
 800c564:	ee78 3a26 	vadd.f32	s7, s16, s13
 800c568:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800c56c:	ee77 6a20 	vadd.f32	s13, s14, s1
 800c570:	ee24 4a09 	vmul.f32	s8, s8, s18
 800c574:	ee37 7a60 	vsub.f32	s14, s14, s1
 800c578:	ee20 8a09 	vmul.f32	s16, s0, s18
 800c57c:	ee75 0a86 	vadd.f32	s1, s11, s12
 800c580:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800c584:	ee62 2a89 	vmul.f32	s5, s5, s18
 800c588:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c58c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800c590:	ee77 7a62 	vsub.f32	s15, s14, s5
 800c594:	ee74 5a88 	vadd.f32	s11, s9, s16
 800c598:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800c59c:	ee77 4a22 	vadd.f32	s9, s14, s5
 800c5a0:	ee71 2a04 	vadd.f32	s5, s2, s8
 800c5a4:	ee31 7a44 	vsub.f32	s14, s2, s8
 800c5a8:	ee30 1a60 	vsub.f32	s2, s0, s1
 800c5ac:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c5b0:	ee33 6a46 	vsub.f32	s12, s6, s12
 800c5b4:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800c5b8:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800c5bc:	ee38 4a68 	vsub.f32	s8, s16, s17
 800c5c0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800c5c4:	ee72 5a25 	vadd.f32	s11, s4, s11
 800c5c8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800c5cc:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800c5d0:	ee77 2a27 	vadd.f32	s5, s14, s15
 800c5d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c5d8:	ee78 7a88 	vadd.f32	s15, s17, s16
 800c5dc:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800c5e0:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800c5e4:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800c5e8:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800c5ec:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800c5f0:	ee70 0a20 	vadd.f32	s1, s0, s1
 800c5f4:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800c5f8:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800c5fc:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800c600:	edc2 0a01 	vstr	s1, [r2, #4]
 800c604:	ee38 8a88 	vadd.f32	s16, s17, s16
 800c608:	441a      	add	r2, r3
 800c60a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800c60e:	ee31 5a45 	vsub.f32	s10, s2, s10
 800c612:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800c616:	ed81 8a00 	vstr	s16, [r1]
 800c61a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800c61e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c622:	ed81 5a01 	vstr	s10, [r1, #4]
 800c626:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800c62a:	edcd 3a00 	vstr	s7, [sp]
 800c62e:	ed9d 5a02 	vldr	s10, [sp, #8]
 800c632:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800c636:	eddd 3a01 	vldr	s7, [sp, #4]
 800c63a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800c63e:	ed84 0a00 	vstr	s0, [r4]
 800c642:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c646:	ed84 3a01 	vstr	s6, [r4, #4]
 800c64a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800c64e:	ee23 6a86 	vmul.f32	s12, s7, s12
 800c652:	eddd 3a00 	vldr	s7, [sp]
 800c656:	ee25 5a25 	vmul.f32	s10, s10, s11
 800c65a:	4419      	add	r1, r3
 800c65c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800c660:	441c      	add	r4, r3
 800c662:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800c666:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800c66a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800c66e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800c672:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800c676:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800c67a:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800c67e:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800c682:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800c686:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800c68a:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800c68e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c692:	ee38 8a01 	vadd.f32	s16, s16, s2
 800c696:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800c69a:	ee39 5a85 	vadd.f32	s10, s19, s10
 800c69e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800c6a2:	ed07 8a01 	vstr	s16, [r7, #-4]
 800c6a6:	ee30 0a21 	vadd.f32	s0, s0, s3
 800c6aa:	ed87 6a00 	vstr	s12, [r7]
 800c6ae:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c6b2:	edc0 0a00 	vstr	s1, [r0]
 800c6b6:	ee33 3a28 	vadd.f32	s6, s6, s17
 800c6ba:	edc0 3a01 	vstr	s7, [r0, #4]
 800c6be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c6c2:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800c6c6:	edce 4a00 	vstr	s9, [lr]
 800c6ca:	4418      	add	r0, r3
 800c6cc:	ed06 0a01 	vstr	s0, [r6, #-4]
 800c6d0:	441f      	add	r7, r3
 800c6d2:	edc6 2a00 	vstr	s5, [r6]
 800c6d6:	449e      	add	lr, r3
 800c6d8:	ed85 3a00 	vstr	s6, [r5]
 800c6dc:	441e      	add	r6, r3
 800c6de:	ed85 7a01 	vstr	s14, [r5, #4]
 800c6e2:	441d      	add	r5, r3
 800c6e4:	f63f aee8 	bhi.w	800c4b8 <arm_radix8_butterfly_f32+0x328>
 800c6e8:	9a06      	ldr	r2, [sp, #24]
 800c6ea:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c6ec:	3201      	adds	r2, #1
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	9206      	str	r2, [sp, #24]
 800c6f2:	9a07      	ldr	r2, [sp, #28]
 800c6f4:	4402      	add	r2, r0
 800c6f6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c6f8:	9207      	str	r2, [sp, #28]
 800c6fa:	9a03      	ldr	r2, [sp, #12]
 800c6fc:	4402      	add	r2, r0
 800c6fe:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c700:	9203      	str	r2, [sp, #12]
 800c702:	9a04      	ldr	r2, [sp, #16]
 800c704:	4402      	add	r2, r0
 800c706:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c708:	9204      	str	r2, [sp, #16]
 800c70a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c70c:	4491      	add	r9, r2
 800c70e:	9a05      	ldr	r2, [sp, #20]
 800c710:	4402      	add	r2, r0
 800c712:	9205      	str	r2, [sp, #20]
 800c714:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c716:	4490      	add	r8, r2
 800c718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c71a:	3208      	adds	r2, #8
 800c71c:	920f      	str	r2, [sp, #60]	; 0x3c
 800c71e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c720:	3208      	adds	r2, #8
 800c722:	920e      	str	r2, [sp, #56]	; 0x38
 800c724:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c726:	3208      	adds	r2, #8
 800c728:	920d      	str	r2, [sp, #52]	; 0x34
 800c72a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c72c:	3208      	adds	r2, #8
 800c72e:	920c      	str	r2, [sp, #48]	; 0x30
 800c730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c732:	3208      	adds	r2, #8
 800c734:	920b      	str	r2, [sp, #44]	; 0x2c
 800c736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c738:	3208      	adds	r2, #8
 800c73a:	920a      	str	r2, [sp, #40]	; 0x28
 800c73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c73e:	3208      	adds	r2, #8
 800c740:	9209      	str	r2, [sp, #36]	; 0x24
 800c742:	9a08      	ldr	r2, [sp, #32]
 800c744:	3208      	adds	r2, #8
 800c746:	9208      	str	r2, [sp, #32]
 800c748:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800c74a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c74c:	4622      	mov	r2, r4
 800c74e:	4288      	cmp	r0, r1
 800c750:	d005      	beq.n	800c75e <arm_radix8_butterfly_f32+0x5ce>
 800c752:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c754:	4621      	mov	r1, r4
 800c756:	4401      	add	r1, r0
 800c758:	9807      	ldr	r0, [sp, #28]
 800c75a:	9110      	str	r1, [sp, #64]	; 0x40
 800c75c:	e676      	b.n	800c44c <arm_radix8_butterfly_f32+0x2bc>
 800c75e:	4683      	mov	fp, r0
 800c760:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800c764:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800c768:	e522      	b.n	800c1b0 <arm_radix8_butterfly_f32+0x20>
 800c76a:	b01d      	add	sp, #116	; 0x74
 800c76c:	ecbd 8b10 	vpop	{d8-d15}
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c774 <__errno>:
 800c774:	4b01      	ldr	r3, [pc, #4]	; (800c77c <__errno+0x8>)
 800c776:	6818      	ldr	r0, [r3, #0]
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	24000380 	.word	0x24000380

0800c780 <__libc_init_array>:
 800c780:	b570      	push	{r4, r5, r6, lr}
 800c782:	4e0d      	ldr	r6, [pc, #52]	; (800c7b8 <__libc_init_array+0x38>)
 800c784:	4c0d      	ldr	r4, [pc, #52]	; (800c7bc <__libc_init_array+0x3c>)
 800c786:	1ba4      	subs	r4, r4, r6
 800c788:	10a4      	asrs	r4, r4, #2
 800c78a:	2500      	movs	r5, #0
 800c78c:	42a5      	cmp	r5, r4
 800c78e:	d109      	bne.n	800c7a4 <__libc_init_array+0x24>
 800c790:	4e0b      	ldr	r6, [pc, #44]	; (800c7c0 <__libc_init_array+0x40>)
 800c792:	4c0c      	ldr	r4, [pc, #48]	; (800c7c4 <__libc_init_array+0x44>)
 800c794:	f003 fd6a 	bl	801026c <_init>
 800c798:	1ba4      	subs	r4, r4, r6
 800c79a:	10a4      	asrs	r4, r4, #2
 800c79c:	2500      	movs	r5, #0
 800c79e:	42a5      	cmp	r5, r4
 800c7a0:	d105      	bne.n	800c7ae <__libc_init_array+0x2e>
 800c7a2:	bd70      	pop	{r4, r5, r6, pc}
 800c7a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7a8:	4798      	blx	r3
 800c7aa:	3501      	adds	r5, #1
 800c7ac:	e7ee      	b.n	800c78c <__libc_init_array+0xc>
 800c7ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7b2:	4798      	blx	r3
 800c7b4:	3501      	adds	r5, #1
 800c7b6:	e7f2      	b.n	800c79e <__libc_init_array+0x1e>
 800c7b8:	080196f8 	.word	0x080196f8
 800c7bc:	080196f8 	.word	0x080196f8
 800c7c0:	080196f8 	.word	0x080196f8
 800c7c4:	080196fc 	.word	0x080196fc

0800c7c8 <malloc>:
 800c7c8:	4b02      	ldr	r3, [pc, #8]	; (800c7d4 <malloc+0xc>)
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	6818      	ldr	r0, [r3, #0]
 800c7ce:	f000 b86d 	b.w	800c8ac <_malloc_r>
 800c7d2:	bf00      	nop
 800c7d4:	24000380 	.word	0x24000380

0800c7d8 <free>:
 800c7d8:	4b02      	ldr	r3, [pc, #8]	; (800c7e4 <free+0xc>)
 800c7da:	4601      	mov	r1, r0
 800c7dc:	6818      	ldr	r0, [r3, #0]
 800c7de:	f000 b817 	b.w	800c810 <_free_r>
 800c7e2:	bf00      	nop
 800c7e4:	24000380 	.word	0x24000380

0800c7e8 <memcpy>:
 800c7e8:	b510      	push	{r4, lr}
 800c7ea:	1e43      	subs	r3, r0, #1
 800c7ec:	440a      	add	r2, r1
 800c7ee:	4291      	cmp	r1, r2
 800c7f0:	d100      	bne.n	800c7f4 <memcpy+0xc>
 800c7f2:	bd10      	pop	{r4, pc}
 800c7f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7fc:	e7f7      	b.n	800c7ee <memcpy+0x6>

0800c7fe <memset>:
 800c7fe:	4402      	add	r2, r0
 800c800:	4603      	mov	r3, r0
 800c802:	4293      	cmp	r3, r2
 800c804:	d100      	bne.n	800c808 <memset+0xa>
 800c806:	4770      	bx	lr
 800c808:	f803 1b01 	strb.w	r1, [r3], #1
 800c80c:	e7f9      	b.n	800c802 <memset+0x4>
	...

0800c810 <_free_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4605      	mov	r5, r0
 800c814:	2900      	cmp	r1, #0
 800c816:	d045      	beq.n	800c8a4 <_free_r+0x94>
 800c818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c81c:	1f0c      	subs	r4, r1, #4
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bfb8      	it	lt
 800c822:	18e4      	addlt	r4, r4, r3
 800c824:	f001 faf6 	bl	800de14 <__malloc_lock>
 800c828:	4a1f      	ldr	r2, [pc, #124]	; (800c8a8 <_free_r+0x98>)
 800c82a:	6813      	ldr	r3, [r2, #0]
 800c82c:	4610      	mov	r0, r2
 800c82e:	b933      	cbnz	r3, 800c83e <_free_r+0x2e>
 800c830:	6063      	str	r3, [r4, #4]
 800c832:	6014      	str	r4, [r2, #0]
 800c834:	4628      	mov	r0, r5
 800c836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c83a:	f001 baec 	b.w	800de16 <__malloc_unlock>
 800c83e:	42a3      	cmp	r3, r4
 800c840:	d90c      	bls.n	800c85c <_free_r+0x4c>
 800c842:	6821      	ldr	r1, [r4, #0]
 800c844:	1862      	adds	r2, r4, r1
 800c846:	4293      	cmp	r3, r2
 800c848:	bf04      	itt	eq
 800c84a:	681a      	ldreq	r2, [r3, #0]
 800c84c:	685b      	ldreq	r3, [r3, #4]
 800c84e:	6063      	str	r3, [r4, #4]
 800c850:	bf04      	itt	eq
 800c852:	1852      	addeq	r2, r2, r1
 800c854:	6022      	streq	r2, [r4, #0]
 800c856:	6004      	str	r4, [r0, #0]
 800c858:	e7ec      	b.n	800c834 <_free_r+0x24>
 800c85a:	4613      	mov	r3, r2
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	b10a      	cbz	r2, 800c864 <_free_r+0x54>
 800c860:	42a2      	cmp	r2, r4
 800c862:	d9fa      	bls.n	800c85a <_free_r+0x4a>
 800c864:	6819      	ldr	r1, [r3, #0]
 800c866:	1858      	adds	r0, r3, r1
 800c868:	42a0      	cmp	r0, r4
 800c86a:	d10b      	bne.n	800c884 <_free_r+0x74>
 800c86c:	6820      	ldr	r0, [r4, #0]
 800c86e:	4401      	add	r1, r0
 800c870:	1858      	adds	r0, r3, r1
 800c872:	4282      	cmp	r2, r0
 800c874:	6019      	str	r1, [r3, #0]
 800c876:	d1dd      	bne.n	800c834 <_free_r+0x24>
 800c878:	6810      	ldr	r0, [r2, #0]
 800c87a:	6852      	ldr	r2, [r2, #4]
 800c87c:	605a      	str	r2, [r3, #4]
 800c87e:	4401      	add	r1, r0
 800c880:	6019      	str	r1, [r3, #0]
 800c882:	e7d7      	b.n	800c834 <_free_r+0x24>
 800c884:	d902      	bls.n	800c88c <_free_r+0x7c>
 800c886:	230c      	movs	r3, #12
 800c888:	602b      	str	r3, [r5, #0]
 800c88a:	e7d3      	b.n	800c834 <_free_r+0x24>
 800c88c:	6820      	ldr	r0, [r4, #0]
 800c88e:	1821      	adds	r1, r4, r0
 800c890:	428a      	cmp	r2, r1
 800c892:	bf04      	itt	eq
 800c894:	6811      	ldreq	r1, [r2, #0]
 800c896:	6852      	ldreq	r2, [r2, #4]
 800c898:	6062      	str	r2, [r4, #4]
 800c89a:	bf04      	itt	eq
 800c89c:	1809      	addeq	r1, r1, r0
 800c89e:	6021      	streq	r1, [r4, #0]
 800c8a0:	605c      	str	r4, [r3, #4]
 800c8a2:	e7c7      	b.n	800c834 <_free_r+0x24>
 800c8a4:	bd38      	pop	{r3, r4, r5, pc}
 800c8a6:	bf00      	nop
 800c8a8:	24000678 	.word	0x24000678

0800c8ac <_malloc_r>:
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	1ccd      	adds	r5, r1, #3
 800c8b0:	f025 0503 	bic.w	r5, r5, #3
 800c8b4:	3508      	adds	r5, #8
 800c8b6:	2d0c      	cmp	r5, #12
 800c8b8:	bf38      	it	cc
 800c8ba:	250c      	movcc	r5, #12
 800c8bc:	2d00      	cmp	r5, #0
 800c8be:	4606      	mov	r6, r0
 800c8c0:	db01      	blt.n	800c8c6 <_malloc_r+0x1a>
 800c8c2:	42a9      	cmp	r1, r5
 800c8c4:	d903      	bls.n	800c8ce <_malloc_r+0x22>
 800c8c6:	230c      	movs	r3, #12
 800c8c8:	6033      	str	r3, [r6, #0]
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	bd70      	pop	{r4, r5, r6, pc}
 800c8ce:	f001 faa1 	bl	800de14 <__malloc_lock>
 800c8d2:	4a21      	ldr	r2, [pc, #132]	; (800c958 <_malloc_r+0xac>)
 800c8d4:	6814      	ldr	r4, [r2, #0]
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	b991      	cbnz	r1, 800c900 <_malloc_r+0x54>
 800c8da:	4c20      	ldr	r4, [pc, #128]	; (800c95c <_malloc_r+0xb0>)
 800c8dc:	6823      	ldr	r3, [r4, #0]
 800c8de:	b91b      	cbnz	r3, 800c8e8 <_malloc_r+0x3c>
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	f000 fc79 	bl	800d1d8 <_sbrk_r>
 800c8e6:	6020      	str	r0, [r4, #0]
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f000 fc74 	bl	800d1d8 <_sbrk_r>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d124      	bne.n	800c93e <_malloc_r+0x92>
 800c8f4:	230c      	movs	r3, #12
 800c8f6:	6033      	str	r3, [r6, #0]
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f001 fa8c 	bl	800de16 <__malloc_unlock>
 800c8fe:	e7e4      	b.n	800c8ca <_malloc_r+0x1e>
 800c900:	680b      	ldr	r3, [r1, #0]
 800c902:	1b5b      	subs	r3, r3, r5
 800c904:	d418      	bmi.n	800c938 <_malloc_r+0x8c>
 800c906:	2b0b      	cmp	r3, #11
 800c908:	d90f      	bls.n	800c92a <_malloc_r+0x7e>
 800c90a:	600b      	str	r3, [r1, #0]
 800c90c:	50cd      	str	r5, [r1, r3]
 800c90e:	18cc      	adds	r4, r1, r3
 800c910:	4630      	mov	r0, r6
 800c912:	f001 fa80 	bl	800de16 <__malloc_unlock>
 800c916:	f104 000b 	add.w	r0, r4, #11
 800c91a:	1d23      	adds	r3, r4, #4
 800c91c:	f020 0007 	bic.w	r0, r0, #7
 800c920:	1ac3      	subs	r3, r0, r3
 800c922:	d0d3      	beq.n	800c8cc <_malloc_r+0x20>
 800c924:	425a      	negs	r2, r3
 800c926:	50e2      	str	r2, [r4, r3]
 800c928:	e7d0      	b.n	800c8cc <_malloc_r+0x20>
 800c92a:	428c      	cmp	r4, r1
 800c92c:	684b      	ldr	r3, [r1, #4]
 800c92e:	bf16      	itet	ne
 800c930:	6063      	strne	r3, [r4, #4]
 800c932:	6013      	streq	r3, [r2, #0]
 800c934:	460c      	movne	r4, r1
 800c936:	e7eb      	b.n	800c910 <_malloc_r+0x64>
 800c938:	460c      	mov	r4, r1
 800c93a:	6849      	ldr	r1, [r1, #4]
 800c93c:	e7cc      	b.n	800c8d8 <_malloc_r+0x2c>
 800c93e:	1cc4      	adds	r4, r0, #3
 800c940:	f024 0403 	bic.w	r4, r4, #3
 800c944:	42a0      	cmp	r0, r4
 800c946:	d005      	beq.n	800c954 <_malloc_r+0xa8>
 800c948:	1a21      	subs	r1, r4, r0
 800c94a:	4630      	mov	r0, r6
 800c94c:	f000 fc44 	bl	800d1d8 <_sbrk_r>
 800c950:	3001      	adds	r0, #1
 800c952:	d0cf      	beq.n	800c8f4 <_malloc_r+0x48>
 800c954:	6025      	str	r5, [r4, #0]
 800c956:	e7db      	b.n	800c910 <_malloc_r+0x64>
 800c958:	24000678 	.word	0x24000678
 800c95c:	2400067c 	.word	0x2400067c

0800c960 <__cvt>:
 800c960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c962:	ed2d 8b02 	vpush	{d8}
 800c966:	eeb0 8b40 	vmov.f64	d8, d0
 800c96a:	b085      	sub	sp, #20
 800c96c:	4617      	mov	r7, r2
 800c96e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c970:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c972:	ee18 2a90 	vmov	r2, s17
 800c976:	f025 0520 	bic.w	r5, r5, #32
 800c97a:	2a00      	cmp	r2, #0
 800c97c:	bfb6      	itet	lt
 800c97e:	222d      	movlt	r2, #45	; 0x2d
 800c980:	2200      	movge	r2, #0
 800c982:	eeb1 8b40 	vneglt.f64	d8, d0
 800c986:	2d46      	cmp	r5, #70	; 0x46
 800c988:	460c      	mov	r4, r1
 800c98a:	701a      	strb	r2, [r3, #0]
 800c98c:	d004      	beq.n	800c998 <__cvt+0x38>
 800c98e:	2d45      	cmp	r5, #69	; 0x45
 800c990:	d100      	bne.n	800c994 <__cvt+0x34>
 800c992:	3401      	adds	r4, #1
 800c994:	2102      	movs	r1, #2
 800c996:	e000      	b.n	800c99a <__cvt+0x3a>
 800c998:	2103      	movs	r1, #3
 800c99a:	ab03      	add	r3, sp, #12
 800c99c:	9301      	str	r3, [sp, #4]
 800c99e:	ab02      	add	r3, sp, #8
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	4622      	mov	r2, r4
 800c9a4:	4633      	mov	r3, r6
 800c9a6:	eeb0 0b48 	vmov.f64	d0, d8
 800c9aa:	f000 fcd9 	bl	800d360 <_dtoa_r>
 800c9ae:	2d47      	cmp	r5, #71	; 0x47
 800c9b0:	d101      	bne.n	800c9b6 <__cvt+0x56>
 800c9b2:	07fb      	lsls	r3, r7, #31
 800c9b4:	d51e      	bpl.n	800c9f4 <__cvt+0x94>
 800c9b6:	2d46      	cmp	r5, #70	; 0x46
 800c9b8:	eb00 0304 	add.w	r3, r0, r4
 800c9bc:	d10c      	bne.n	800c9d8 <__cvt+0x78>
 800c9be:	7802      	ldrb	r2, [r0, #0]
 800c9c0:	2a30      	cmp	r2, #48	; 0x30
 800c9c2:	d107      	bne.n	800c9d4 <__cvt+0x74>
 800c9c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9cc:	bf1c      	itt	ne
 800c9ce:	f1c4 0401 	rsbne	r4, r4, #1
 800c9d2:	6034      	strne	r4, [r6, #0]
 800c9d4:	6832      	ldr	r2, [r6, #0]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e0:	d007      	beq.n	800c9f2 <__cvt+0x92>
 800c9e2:	2130      	movs	r1, #48	; 0x30
 800c9e4:	9a03      	ldr	r2, [sp, #12]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d204      	bcs.n	800c9f4 <__cvt+0x94>
 800c9ea:	1c54      	adds	r4, r2, #1
 800c9ec:	9403      	str	r4, [sp, #12]
 800c9ee:	7011      	strb	r1, [r2, #0]
 800c9f0:	e7f8      	b.n	800c9e4 <__cvt+0x84>
 800c9f2:	9303      	str	r3, [sp, #12]
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9f8:	1a1b      	subs	r3, r3, r0
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	b005      	add	sp, #20
 800c9fe:	ecbd 8b02 	vpop	{d8}
 800ca02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca04 <__exponent>:
 800ca04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca06:	2900      	cmp	r1, #0
 800ca08:	4604      	mov	r4, r0
 800ca0a:	bfba      	itte	lt
 800ca0c:	4249      	neglt	r1, r1
 800ca0e:	232d      	movlt	r3, #45	; 0x2d
 800ca10:	232b      	movge	r3, #43	; 0x2b
 800ca12:	2909      	cmp	r1, #9
 800ca14:	f804 2b02 	strb.w	r2, [r4], #2
 800ca18:	7043      	strb	r3, [r0, #1]
 800ca1a:	dd20      	ble.n	800ca5e <__exponent+0x5a>
 800ca1c:	f10d 0307 	add.w	r3, sp, #7
 800ca20:	461f      	mov	r7, r3
 800ca22:	260a      	movs	r6, #10
 800ca24:	fb91 f5f6 	sdiv	r5, r1, r6
 800ca28:	fb06 1115 	mls	r1, r6, r5, r1
 800ca2c:	3130      	adds	r1, #48	; 0x30
 800ca2e:	2d09      	cmp	r5, #9
 800ca30:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca34:	f103 32ff 	add.w	r2, r3, #4294967295
 800ca38:	4629      	mov	r1, r5
 800ca3a:	dc09      	bgt.n	800ca50 <__exponent+0x4c>
 800ca3c:	3130      	adds	r1, #48	; 0x30
 800ca3e:	3b02      	subs	r3, #2
 800ca40:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ca44:	42bb      	cmp	r3, r7
 800ca46:	4622      	mov	r2, r4
 800ca48:	d304      	bcc.n	800ca54 <__exponent+0x50>
 800ca4a:	1a10      	subs	r0, r2, r0
 800ca4c:	b003      	add	sp, #12
 800ca4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca50:	4613      	mov	r3, r2
 800ca52:	e7e7      	b.n	800ca24 <__exponent+0x20>
 800ca54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca58:	f804 2b01 	strb.w	r2, [r4], #1
 800ca5c:	e7f2      	b.n	800ca44 <__exponent+0x40>
 800ca5e:	2330      	movs	r3, #48	; 0x30
 800ca60:	4419      	add	r1, r3
 800ca62:	7083      	strb	r3, [r0, #2]
 800ca64:	1d02      	adds	r2, r0, #4
 800ca66:	70c1      	strb	r1, [r0, #3]
 800ca68:	e7ef      	b.n	800ca4a <__exponent+0x46>
 800ca6a:	0000      	movs	r0, r0
 800ca6c:	0000      	movs	r0, r0
	...

0800ca70 <_printf_float>:
 800ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca74:	b08d      	sub	sp, #52	; 0x34
 800ca76:	460c      	mov	r4, r1
 800ca78:	4616      	mov	r6, r2
 800ca7a:	461f      	mov	r7, r3
 800ca7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ca80:	4605      	mov	r5, r0
 800ca82:	f001 f9b9 	bl	800ddf8 <_localeconv_r>
 800ca86:	f8d0 b000 	ldr.w	fp, [r0]
 800ca8a:	4658      	mov	r0, fp
 800ca8c:	f7f3 fc88 	bl	80003a0 <strlen>
 800ca90:	2300      	movs	r3, #0
 800ca92:	930a      	str	r3, [sp, #40]	; 0x28
 800ca94:	f8d8 3000 	ldr.w	r3, [r8]
 800ca98:	9005      	str	r0, [sp, #20]
 800ca9a:	3307      	adds	r3, #7
 800ca9c:	f023 0307 	bic.w	r3, r3, #7
 800caa0:	f103 0108 	add.w	r1, r3, #8
 800caa4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800caa8:	6822      	ldr	r2, [r4, #0]
 800caaa:	f8c8 1000 	str.w	r1, [r8]
 800caae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cab2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cab6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800cd40 <_printf_float+0x2d0>
 800caba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cabe:	eeb0 6bc0 	vabs.f64	d6, d0
 800cac2:	eeb4 6b47 	vcmp.f64	d6, d7
 800cac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caca:	dd24      	ble.n	800cb16 <_printf_float+0xa6>
 800cacc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad4:	d502      	bpl.n	800cadc <_printf_float+0x6c>
 800cad6:	232d      	movs	r3, #45	; 0x2d
 800cad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cadc:	499a      	ldr	r1, [pc, #616]	; (800cd48 <_printf_float+0x2d8>)
 800cade:	4b9b      	ldr	r3, [pc, #620]	; (800cd4c <_printf_float+0x2dc>)
 800cae0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cae4:	bf8c      	ite	hi
 800cae6:	4688      	movhi	r8, r1
 800cae8:	4698      	movls	r8, r3
 800caea:	f022 0204 	bic.w	r2, r2, #4
 800caee:	2303      	movs	r3, #3
 800caf0:	6123      	str	r3, [r4, #16]
 800caf2:	6022      	str	r2, [r4, #0]
 800caf4:	f04f 0a00 	mov.w	sl, #0
 800caf8:	9700      	str	r7, [sp, #0]
 800cafa:	4633      	mov	r3, r6
 800cafc:	aa0b      	add	r2, sp, #44	; 0x2c
 800cafe:	4621      	mov	r1, r4
 800cb00:	4628      	mov	r0, r5
 800cb02:	f000 f9e1 	bl	800cec8 <_printf_common>
 800cb06:	3001      	adds	r0, #1
 800cb08:	f040 8089 	bne.w	800cc1e <_printf_float+0x1ae>
 800cb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb10:	b00d      	add	sp, #52	; 0x34
 800cb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb16:	eeb4 0b40 	vcmp.f64	d0, d0
 800cb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb1e:	d702      	bvc.n	800cb26 <_printf_float+0xb6>
 800cb20:	498b      	ldr	r1, [pc, #556]	; (800cd50 <_printf_float+0x2e0>)
 800cb22:	4b8c      	ldr	r3, [pc, #560]	; (800cd54 <_printf_float+0x2e4>)
 800cb24:	e7dc      	b.n	800cae0 <_printf_float+0x70>
 800cb26:	6861      	ldr	r1, [r4, #4]
 800cb28:	1c4b      	adds	r3, r1, #1
 800cb2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb2e:	ab0a      	add	r3, sp, #40	; 0x28
 800cb30:	a809      	add	r0, sp, #36	; 0x24
 800cb32:	d13b      	bne.n	800cbac <_printf_float+0x13c>
 800cb34:	2106      	movs	r1, #6
 800cb36:	6061      	str	r1, [r4, #4]
 800cb38:	f04f 0c00 	mov.w	ip, #0
 800cb3c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800cb40:	e9cd 0900 	strd	r0, r9, [sp]
 800cb44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb48:	6022      	str	r2, [r4, #0]
 800cb4a:	6861      	ldr	r1, [r4, #4]
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	f7ff ff07 	bl	800c960 <__cvt>
 800cb52:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800cb56:	2b47      	cmp	r3, #71	; 0x47
 800cb58:	4680      	mov	r8, r0
 800cb5a:	d109      	bne.n	800cb70 <_printf_float+0x100>
 800cb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5e:	1cd8      	adds	r0, r3, #3
 800cb60:	db02      	blt.n	800cb68 <_printf_float+0xf8>
 800cb62:	6862      	ldr	r2, [r4, #4]
 800cb64:	4293      	cmp	r3, r2
 800cb66:	dd47      	ble.n	800cbf8 <_printf_float+0x188>
 800cb68:	f1a9 0902 	sub.w	r9, r9, #2
 800cb6c:	fa5f f989 	uxtb.w	r9, r9
 800cb70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cb74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb76:	d824      	bhi.n	800cbc2 <_printf_float+0x152>
 800cb78:	3901      	subs	r1, #1
 800cb7a:	464a      	mov	r2, r9
 800cb7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb80:	9109      	str	r1, [sp, #36]	; 0x24
 800cb82:	f7ff ff3f 	bl	800ca04 <__exponent>
 800cb86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb88:	1813      	adds	r3, r2, r0
 800cb8a:	2a01      	cmp	r2, #1
 800cb8c:	4682      	mov	sl, r0
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	dc02      	bgt.n	800cb98 <_printf_float+0x128>
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	07d1      	lsls	r1, r2, #31
 800cb96:	d501      	bpl.n	800cb9c <_printf_float+0x12c>
 800cb98:	3301      	adds	r3, #1
 800cb9a:	6123      	str	r3, [r4, #16]
 800cb9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d0a9      	beq.n	800caf8 <_printf_float+0x88>
 800cba4:	232d      	movs	r3, #45	; 0x2d
 800cba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbaa:	e7a5      	b.n	800caf8 <_printf_float+0x88>
 800cbac:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800cbb0:	f000 8178 	beq.w	800cea4 <_printf_float+0x434>
 800cbb4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cbb8:	d1be      	bne.n	800cb38 <_printf_float+0xc8>
 800cbba:	2900      	cmp	r1, #0
 800cbbc:	d1bc      	bne.n	800cb38 <_printf_float+0xc8>
 800cbbe:	2101      	movs	r1, #1
 800cbc0:	e7b9      	b.n	800cb36 <_printf_float+0xc6>
 800cbc2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cbc6:	d119      	bne.n	800cbfc <_printf_float+0x18c>
 800cbc8:	2900      	cmp	r1, #0
 800cbca:	6863      	ldr	r3, [r4, #4]
 800cbcc:	dd0c      	ble.n	800cbe8 <_printf_float+0x178>
 800cbce:	6121      	str	r1, [r4, #16]
 800cbd0:	b913      	cbnz	r3, 800cbd8 <_printf_float+0x168>
 800cbd2:	6822      	ldr	r2, [r4, #0]
 800cbd4:	07d2      	lsls	r2, r2, #31
 800cbd6:	d502      	bpl.n	800cbde <_printf_float+0x16e>
 800cbd8:	3301      	adds	r3, #1
 800cbda:	440b      	add	r3, r1
 800cbdc:	6123      	str	r3, [r4, #16]
 800cbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe0:	65a3      	str	r3, [r4, #88]	; 0x58
 800cbe2:	f04f 0a00 	mov.w	sl, #0
 800cbe6:	e7d9      	b.n	800cb9c <_printf_float+0x12c>
 800cbe8:	b913      	cbnz	r3, 800cbf0 <_printf_float+0x180>
 800cbea:	6822      	ldr	r2, [r4, #0]
 800cbec:	07d0      	lsls	r0, r2, #31
 800cbee:	d501      	bpl.n	800cbf4 <_printf_float+0x184>
 800cbf0:	3302      	adds	r3, #2
 800cbf2:	e7f3      	b.n	800cbdc <_printf_float+0x16c>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e7f1      	b.n	800cbdc <_printf_float+0x16c>
 800cbf8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cbfc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cc00:	4293      	cmp	r3, r2
 800cc02:	db05      	blt.n	800cc10 <_printf_float+0x1a0>
 800cc04:	6822      	ldr	r2, [r4, #0]
 800cc06:	6123      	str	r3, [r4, #16]
 800cc08:	07d1      	lsls	r1, r2, #31
 800cc0a:	d5e8      	bpl.n	800cbde <_printf_float+0x16e>
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	e7e5      	b.n	800cbdc <_printf_float+0x16c>
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	bfd4      	ite	le
 800cc14:	f1c3 0302 	rsble	r3, r3, #2
 800cc18:	2301      	movgt	r3, #1
 800cc1a:	4413      	add	r3, r2
 800cc1c:	e7de      	b.n	800cbdc <_printf_float+0x16c>
 800cc1e:	6823      	ldr	r3, [r4, #0]
 800cc20:	055a      	lsls	r2, r3, #21
 800cc22:	d407      	bmi.n	800cc34 <_printf_float+0x1c4>
 800cc24:	6923      	ldr	r3, [r4, #16]
 800cc26:	4642      	mov	r2, r8
 800cc28:	4631      	mov	r1, r6
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	47b8      	blx	r7
 800cc2e:	3001      	adds	r0, #1
 800cc30:	d12a      	bne.n	800cc88 <_printf_float+0x218>
 800cc32:	e76b      	b.n	800cb0c <_printf_float+0x9c>
 800cc34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cc38:	f240 80de 	bls.w	800cdf8 <_printf_float+0x388>
 800cc3c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cc40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc48:	d133      	bne.n	800ccb2 <_printf_float+0x242>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	4a42      	ldr	r2, [pc, #264]	; (800cd58 <_printf_float+0x2e8>)
 800cc4e:	4631      	mov	r1, r6
 800cc50:	4628      	mov	r0, r5
 800cc52:	47b8      	blx	r7
 800cc54:	3001      	adds	r0, #1
 800cc56:	f43f af59 	beq.w	800cb0c <_printf_float+0x9c>
 800cc5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	db02      	blt.n	800cc68 <_printf_float+0x1f8>
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	07d8      	lsls	r0, r3, #31
 800cc66:	d50f      	bpl.n	800cc88 <_printf_float+0x218>
 800cc68:	9b05      	ldr	r3, [sp, #20]
 800cc6a:	465a      	mov	r2, fp
 800cc6c:	4631      	mov	r1, r6
 800cc6e:	4628      	mov	r0, r5
 800cc70:	47b8      	blx	r7
 800cc72:	3001      	adds	r0, #1
 800cc74:	f43f af4a 	beq.w	800cb0c <_printf_float+0x9c>
 800cc78:	f04f 0800 	mov.w	r8, #0
 800cc7c:	f104 091a 	add.w	r9, r4, #26
 800cc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc82:	3b01      	subs	r3, #1
 800cc84:	4543      	cmp	r3, r8
 800cc86:	dc09      	bgt.n	800cc9c <_printf_float+0x22c>
 800cc88:	6823      	ldr	r3, [r4, #0]
 800cc8a:	079b      	lsls	r3, r3, #30
 800cc8c:	f100 8105 	bmi.w	800ce9a <_printf_float+0x42a>
 800cc90:	68e0      	ldr	r0, [r4, #12]
 800cc92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc94:	4298      	cmp	r0, r3
 800cc96:	bfb8      	it	lt
 800cc98:	4618      	movlt	r0, r3
 800cc9a:	e739      	b.n	800cb10 <_printf_float+0xa0>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	464a      	mov	r2, r9
 800cca0:	4631      	mov	r1, r6
 800cca2:	4628      	mov	r0, r5
 800cca4:	47b8      	blx	r7
 800cca6:	3001      	adds	r0, #1
 800cca8:	f43f af30 	beq.w	800cb0c <_printf_float+0x9c>
 800ccac:	f108 0801 	add.w	r8, r8, #1
 800ccb0:	e7e6      	b.n	800cc80 <_printf_float+0x210>
 800ccb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	dc2b      	bgt.n	800cd10 <_printf_float+0x2a0>
 800ccb8:	2301      	movs	r3, #1
 800ccba:	4a27      	ldr	r2, [pc, #156]	; (800cd58 <_printf_float+0x2e8>)
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	47b8      	blx	r7
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	f43f af22 	beq.w	800cb0c <_printf_float+0x9c>
 800ccc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccca:	b923      	cbnz	r3, 800ccd6 <_printf_float+0x266>
 800cccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccce:	b913      	cbnz	r3, 800ccd6 <_printf_float+0x266>
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	07d9      	lsls	r1, r3, #31
 800ccd4:	d5d8      	bpl.n	800cc88 <_printf_float+0x218>
 800ccd6:	9b05      	ldr	r3, [sp, #20]
 800ccd8:	465a      	mov	r2, fp
 800ccda:	4631      	mov	r1, r6
 800ccdc:	4628      	mov	r0, r5
 800ccde:	47b8      	blx	r7
 800cce0:	3001      	adds	r0, #1
 800cce2:	f43f af13 	beq.w	800cb0c <_printf_float+0x9c>
 800cce6:	f04f 0900 	mov.w	r9, #0
 800ccea:	f104 0a1a 	add.w	sl, r4, #26
 800ccee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccf0:	425b      	negs	r3, r3
 800ccf2:	454b      	cmp	r3, r9
 800ccf4:	dc01      	bgt.n	800ccfa <_printf_float+0x28a>
 800ccf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf8:	e795      	b.n	800cc26 <_printf_float+0x1b6>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	4652      	mov	r2, sl
 800ccfe:	4631      	mov	r1, r6
 800cd00:	4628      	mov	r0, r5
 800cd02:	47b8      	blx	r7
 800cd04:	3001      	adds	r0, #1
 800cd06:	f43f af01 	beq.w	800cb0c <_printf_float+0x9c>
 800cd0a:	f109 0901 	add.w	r9, r9, #1
 800cd0e:	e7ee      	b.n	800ccee <_printf_float+0x27e>
 800cd10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd14:	429a      	cmp	r2, r3
 800cd16:	bfa8      	it	ge
 800cd18:	461a      	movge	r2, r3
 800cd1a:	2a00      	cmp	r2, #0
 800cd1c:	4691      	mov	r9, r2
 800cd1e:	dd07      	ble.n	800cd30 <_printf_float+0x2c0>
 800cd20:	4613      	mov	r3, r2
 800cd22:	4631      	mov	r1, r6
 800cd24:	4642      	mov	r2, r8
 800cd26:	4628      	mov	r0, r5
 800cd28:	47b8      	blx	r7
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	f43f aeee 	beq.w	800cb0c <_printf_float+0x9c>
 800cd30:	f104 031a 	add.w	r3, r4, #26
 800cd34:	f04f 0a00 	mov.w	sl, #0
 800cd38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd3c:	9307      	str	r3, [sp, #28]
 800cd3e:	e017      	b.n	800cd70 <_printf_float+0x300>
 800cd40:	ffffffff 	.word	0xffffffff
 800cd44:	7fefffff 	.word	0x7fefffff
 800cd48:	08019270 	.word	0x08019270
 800cd4c:	0801926c 	.word	0x0801926c
 800cd50:	08019278 	.word	0x08019278
 800cd54:	08019274 	.word	0x08019274
 800cd58:	080194cc 	.word	0x080194cc
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	9a07      	ldr	r2, [sp, #28]
 800cd60:	4631      	mov	r1, r6
 800cd62:	4628      	mov	r0, r5
 800cd64:	47b8      	blx	r7
 800cd66:	3001      	adds	r0, #1
 800cd68:	f43f aed0 	beq.w	800cb0c <_printf_float+0x9c>
 800cd6c:	f10a 0a01 	add.w	sl, sl, #1
 800cd70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd72:	9306      	str	r3, [sp, #24]
 800cd74:	eba3 0309 	sub.w	r3, r3, r9
 800cd78:	4553      	cmp	r3, sl
 800cd7a:	dcef      	bgt.n	800cd5c <_printf_float+0x2ec>
 800cd7c:	9b06      	ldr	r3, [sp, #24]
 800cd7e:	4498      	add	r8, r3
 800cd80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd84:	429a      	cmp	r2, r3
 800cd86:	db15      	blt.n	800cdb4 <_printf_float+0x344>
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	07da      	lsls	r2, r3, #31
 800cd8c:	d412      	bmi.n	800cdb4 <_printf_float+0x344>
 800cd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd90:	9a06      	ldr	r2, [sp, #24]
 800cd92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd94:	1a9a      	subs	r2, r3, r2
 800cd96:	eba3 0a01 	sub.w	sl, r3, r1
 800cd9a:	4592      	cmp	sl, r2
 800cd9c:	bfa8      	it	ge
 800cd9e:	4692      	movge	sl, r2
 800cda0:	f1ba 0f00 	cmp.w	sl, #0
 800cda4:	dc0e      	bgt.n	800cdc4 <_printf_float+0x354>
 800cda6:	f04f 0800 	mov.w	r8, #0
 800cdaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdae:	f104 091a 	add.w	r9, r4, #26
 800cdb2:	e019      	b.n	800cde8 <_printf_float+0x378>
 800cdb4:	9b05      	ldr	r3, [sp, #20]
 800cdb6:	465a      	mov	r2, fp
 800cdb8:	4631      	mov	r1, r6
 800cdba:	4628      	mov	r0, r5
 800cdbc:	47b8      	blx	r7
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	d1e5      	bne.n	800cd8e <_printf_float+0x31e>
 800cdc2:	e6a3      	b.n	800cb0c <_printf_float+0x9c>
 800cdc4:	4653      	mov	r3, sl
 800cdc6:	4642      	mov	r2, r8
 800cdc8:	4631      	mov	r1, r6
 800cdca:	4628      	mov	r0, r5
 800cdcc:	47b8      	blx	r7
 800cdce:	3001      	adds	r0, #1
 800cdd0:	d1e9      	bne.n	800cda6 <_printf_float+0x336>
 800cdd2:	e69b      	b.n	800cb0c <_printf_float+0x9c>
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	464a      	mov	r2, r9
 800cdd8:	4631      	mov	r1, r6
 800cdda:	4628      	mov	r0, r5
 800cddc:	47b8      	blx	r7
 800cdde:	3001      	adds	r0, #1
 800cde0:	f43f ae94 	beq.w	800cb0c <_printf_float+0x9c>
 800cde4:	f108 0801 	add.w	r8, r8, #1
 800cde8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdec:	1a9b      	subs	r3, r3, r2
 800cdee:	eba3 030a 	sub.w	r3, r3, sl
 800cdf2:	4543      	cmp	r3, r8
 800cdf4:	dcee      	bgt.n	800cdd4 <_printf_float+0x364>
 800cdf6:	e747      	b.n	800cc88 <_printf_float+0x218>
 800cdf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdfa:	2a01      	cmp	r2, #1
 800cdfc:	dc01      	bgt.n	800ce02 <_printf_float+0x392>
 800cdfe:	07db      	lsls	r3, r3, #31
 800ce00:	d539      	bpl.n	800ce76 <_printf_float+0x406>
 800ce02:	2301      	movs	r3, #1
 800ce04:	4642      	mov	r2, r8
 800ce06:	4631      	mov	r1, r6
 800ce08:	4628      	mov	r0, r5
 800ce0a:	47b8      	blx	r7
 800ce0c:	3001      	adds	r0, #1
 800ce0e:	f43f ae7d 	beq.w	800cb0c <_printf_float+0x9c>
 800ce12:	9b05      	ldr	r3, [sp, #20]
 800ce14:	465a      	mov	r2, fp
 800ce16:	4631      	mov	r1, r6
 800ce18:	4628      	mov	r0, r5
 800ce1a:	47b8      	blx	r7
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	f108 0801 	add.w	r8, r8, #1
 800ce22:	f43f ae73 	beq.w	800cb0c <_printf_float+0x9c>
 800ce26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ce2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce34:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce38:	d018      	beq.n	800ce6c <_printf_float+0x3fc>
 800ce3a:	4642      	mov	r2, r8
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	4628      	mov	r0, r5
 800ce40:	47b8      	blx	r7
 800ce42:	3001      	adds	r0, #1
 800ce44:	d10e      	bne.n	800ce64 <_printf_float+0x3f4>
 800ce46:	e661      	b.n	800cb0c <_printf_float+0x9c>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	464a      	mov	r2, r9
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4628      	mov	r0, r5
 800ce50:	47b8      	blx	r7
 800ce52:	3001      	adds	r0, #1
 800ce54:	f43f ae5a 	beq.w	800cb0c <_printf_float+0x9c>
 800ce58:	f108 0801 	add.w	r8, r8, #1
 800ce5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	4543      	cmp	r3, r8
 800ce62:	dcf1      	bgt.n	800ce48 <_printf_float+0x3d8>
 800ce64:	4653      	mov	r3, sl
 800ce66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce6a:	e6dd      	b.n	800cc28 <_printf_float+0x1b8>
 800ce6c:	f04f 0800 	mov.w	r8, #0
 800ce70:	f104 091a 	add.w	r9, r4, #26
 800ce74:	e7f2      	b.n	800ce5c <_printf_float+0x3ec>
 800ce76:	2301      	movs	r3, #1
 800ce78:	e7df      	b.n	800ce3a <_printf_float+0x3ca>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	464a      	mov	r2, r9
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4628      	mov	r0, r5
 800ce82:	47b8      	blx	r7
 800ce84:	3001      	adds	r0, #1
 800ce86:	f43f ae41 	beq.w	800cb0c <_printf_float+0x9c>
 800ce8a:	f108 0801 	add.w	r8, r8, #1
 800ce8e:	68e3      	ldr	r3, [r4, #12]
 800ce90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce92:	1a9b      	subs	r3, r3, r2
 800ce94:	4543      	cmp	r3, r8
 800ce96:	dcf0      	bgt.n	800ce7a <_printf_float+0x40a>
 800ce98:	e6fa      	b.n	800cc90 <_printf_float+0x220>
 800ce9a:	f04f 0800 	mov.w	r8, #0
 800ce9e:	f104 0919 	add.w	r9, r4, #25
 800cea2:	e7f4      	b.n	800ce8e <_printf_float+0x41e>
 800cea4:	2900      	cmp	r1, #0
 800cea6:	f43f ae8a 	beq.w	800cbbe <_printf_float+0x14e>
 800ceaa:	f04f 0c00 	mov.w	ip, #0
 800ceae:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800ceb2:	e9cd 0900 	strd	r0, r9, [sp]
 800ceb6:	6022      	str	r2, [r4, #0]
 800ceb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cebc:	4628      	mov	r0, r5
 800cebe:	f7ff fd4f 	bl	800c960 <__cvt>
 800cec2:	4680      	mov	r8, r0
 800cec4:	e64a      	b.n	800cb5c <_printf_float+0xec>
 800cec6:	bf00      	nop

0800cec8 <_printf_common>:
 800cec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cecc:	4691      	mov	r9, r2
 800cece:	461f      	mov	r7, r3
 800ced0:	688a      	ldr	r2, [r1, #8]
 800ced2:	690b      	ldr	r3, [r1, #16]
 800ced4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ced8:	4293      	cmp	r3, r2
 800ceda:	bfb8      	it	lt
 800cedc:	4613      	movlt	r3, r2
 800cede:	f8c9 3000 	str.w	r3, [r9]
 800cee2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cee6:	4606      	mov	r6, r0
 800cee8:	460c      	mov	r4, r1
 800ceea:	b112      	cbz	r2, 800cef2 <_printf_common+0x2a>
 800ceec:	3301      	adds	r3, #1
 800ceee:	f8c9 3000 	str.w	r3, [r9]
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	0699      	lsls	r1, r3, #26
 800cef6:	bf42      	ittt	mi
 800cef8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cefc:	3302      	addmi	r3, #2
 800cefe:	f8c9 3000 	strmi.w	r3, [r9]
 800cf02:	6825      	ldr	r5, [r4, #0]
 800cf04:	f015 0506 	ands.w	r5, r5, #6
 800cf08:	d107      	bne.n	800cf1a <_printf_common+0x52>
 800cf0a:	f104 0a19 	add.w	sl, r4, #25
 800cf0e:	68e3      	ldr	r3, [r4, #12]
 800cf10:	f8d9 2000 	ldr.w	r2, [r9]
 800cf14:	1a9b      	subs	r3, r3, r2
 800cf16:	42ab      	cmp	r3, r5
 800cf18:	dc28      	bgt.n	800cf6c <_printf_common+0xa4>
 800cf1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cf1e:	6822      	ldr	r2, [r4, #0]
 800cf20:	3300      	adds	r3, #0
 800cf22:	bf18      	it	ne
 800cf24:	2301      	movne	r3, #1
 800cf26:	0692      	lsls	r2, r2, #26
 800cf28:	d42d      	bmi.n	800cf86 <_printf_common+0xbe>
 800cf2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf2e:	4639      	mov	r1, r7
 800cf30:	4630      	mov	r0, r6
 800cf32:	47c0      	blx	r8
 800cf34:	3001      	adds	r0, #1
 800cf36:	d020      	beq.n	800cf7a <_printf_common+0xb2>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	68e5      	ldr	r5, [r4, #12]
 800cf3c:	f8d9 2000 	ldr.w	r2, [r9]
 800cf40:	f003 0306 	and.w	r3, r3, #6
 800cf44:	2b04      	cmp	r3, #4
 800cf46:	bf08      	it	eq
 800cf48:	1aad      	subeq	r5, r5, r2
 800cf4a:	68a3      	ldr	r3, [r4, #8]
 800cf4c:	6922      	ldr	r2, [r4, #16]
 800cf4e:	bf0c      	ite	eq
 800cf50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf54:	2500      	movne	r5, #0
 800cf56:	4293      	cmp	r3, r2
 800cf58:	bfc4      	itt	gt
 800cf5a:	1a9b      	subgt	r3, r3, r2
 800cf5c:	18ed      	addgt	r5, r5, r3
 800cf5e:	f04f 0900 	mov.w	r9, #0
 800cf62:	341a      	adds	r4, #26
 800cf64:	454d      	cmp	r5, r9
 800cf66:	d11a      	bne.n	800cf9e <_printf_common+0xd6>
 800cf68:	2000      	movs	r0, #0
 800cf6a:	e008      	b.n	800cf7e <_printf_common+0xb6>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	4652      	mov	r2, sl
 800cf70:	4639      	mov	r1, r7
 800cf72:	4630      	mov	r0, r6
 800cf74:	47c0      	blx	r8
 800cf76:	3001      	adds	r0, #1
 800cf78:	d103      	bne.n	800cf82 <_printf_common+0xba>
 800cf7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf82:	3501      	adds	r5, #1
 800cf84:	e7c3      	b.n	800cf0e <_printf_common+0x46>
 800cf86:	18e1      	adds	r1, r4, r3
 800cf88:	1c5a      	adds	r2, r3, #1
 800cf8a:	2030      	movs	r0, #48	; 0x30
 800cf8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf90:	4422      	add	r2, r4
 800cf92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf9a:	3302      	adds	r3, #2
 800cf9c:	e7c5      	b.n	800cf2a <_printf_common+0x62>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	4622      	mov	r2, r4
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	47c0      	blx	r8
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d0e6      	beq.n	800cf7a <_printf_common+0xb2>
 800cfac:	f109 0901 	add.w	r9, r9, #1
 800cfb0:	e7d8      	b.n	800cf64 <_printf_common+0x9c>
	...

0800cfb4 <_printf_i>:
 800cfb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	7e09      	ldrb	r1, [r1, #24]
 800cfc0:	b085      	sub	sp, #20
 800cfc2:	296e      	cmp	r1, #110	; 0x6e
 800cfc4:	4617      	mov	r7, r2
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	4698      	mov	r8, r3
 800cfca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfcc:	f000 80b3 	beq.w	800d136 <_printf_i+0x182>
 800cfd0:	d822      	bhi.n	800d018 <_printf_i+0x64>
 800cfd2:	2963      	cmp	r1, #99	; 0x63
 800cfd4:	d036      	beq.n	800d044 <_printf_i+0x90>
 800cfd6:	d80a      	bhi.n	800cfee <_printf_i+0x3a>
 800cfd8:	2900      	cmp	r1, #0
 800cfda:	f000 80b9 	beq.w	800d150 <_printf_i+0x19c>
 800cfde:	2958      	cmp	r1, #88	; 0x58
 800cfe0:	f000 8083 	beq.w	800d0ea <_printf_i+0x136>
 800cfe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfe8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cfec:	e032      	b.n	800d054 <_printf_i+0xa0>
 800cfee:	2964      	cmp	r1, #100	; 0x64
 800cff0:	d001      	beq.n	800cff6 <_printf_i+0x42>
 800cff2:	2969      	cmp	r1, #105	; 0x69
 800cff4:	d1f6      	bne.n	800cfe4 <_printf_i+0x30>
 800cff6:	6820      	ldr	r0, [r4, #0]
 800cff8:	6813      	ldr	r3, [r2, #0]
 800cffa:	0605      	lsls	r5, r0, #24
 800cffc:	f103 0104 	add.w	r1, r3, #4
 800d000:	d52a      	bpl.n	800d058 <_printf_i+0xa4>
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6011      	str	r1, [r2, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	da03      	bge.n	800d012 <_printf_i+0x5e>
 800d00a:	222d      	movs	r2, #45	; 0x2d
 800d00c:	425b      	negs	r3, r3
 800d00e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d012:	486f      	ldr	r0, [pc, #444]	; (800d1d0 <_printf_i+0x21c>)
 800d014:	220a      	movs	r2, #10
 800d016:	e039      	b.n	800d08c <_printf_i+0xd8>
 800d018:	2973      	cmp	r1, #115	; 0x73
 800d01a:	f000 809d 	beq.w	800d158 <_printf_i+0x1a4>
 800d01e:	d808      	bhi.n	800d032 <_printf_i+0x7e>
 800d020:	296f      	cmp	r1, #111	; 0x6f
 800d022:	d020      	beq.n	800d066 <_printf_i+0xb2>
 800d024:	2970      	cmp	r1, #112	; 0x70
 800d026:	d1dd      	bne.n	800cfe4 <_printf_i+0x30>
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	f043 0320 	orr.w	r3, r3, #32
 800d02e:	6023      	str	r3, [r4, #0]
 800d030:	e003      	b.n	800d03a <_printf_i+0x86>
 800d032:	2975      	cmp	r1, #117	; 0x75
 800d034:	d017      	beq.n	800d066 <_printf_i+0xb2>
 800d036:	2978      	cmp	r1, #120	; 0x78
 800d038:	d1d4      	bne.n	800cfe4 <_printf_i+0x30>
 800d03a:	2378      	movs	r3, #120	; 0x78
 800d03c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d040:	4864      	ldr	r0, [pc, #400]	; (800d1d4 <_printf_i+0x220>)
 800d042:	e055      	b.n	800d0f0 <_printf_i+0x13c>
 800d044:	6813      	ldr	r3, [r2, #0]
 800d046:	1d19      	adds	r1, r3, #4
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6011      	str	r1, [r2, #0]
 800d04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d054:	2301      	movs	r3, #1
 800d056:	e08c      	b.n	800d172 <_printf_i+0x1be>
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	6011      	str	r1, [r2, #0]
 800d05c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d060:	bf18      	it	ne
 800d062:	b21b      	sxthne	r3, r3
 800d064:	e7cf      	b.n	800d006 <_printf_i+0x52>
 800d066:	6813      	ldr	r3, [r2, #0]
 800d068:	6825      	ldr	r5, [r4, #0]
 800d06a:	1d18      	adds	r0, r3, #4
 800d06c:	6010      	str	r0, [r2, #0]
 800d06e:	0628      	lsls	r0, r5, #24
 800d070:	d501      	bpl.n	800d076 <_printf_i+0xc2>
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	e002      	b.n	800d07c <_printf_i+0xc8>
 800d076:	0668      	lsls	r0, r5, #25
 800d078:	d5fb      	bpl.n	800d072 <_printf_i+0xbe>
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	4854      	ldr	r0, [pc, #336]	; (800d1d0 <_printf_i+0x21c>)
 800d07e:	296f      	cmp	r1, #111	; 0x6f
 800d080:	bf14      	ite	ne
 800d082:	220a      	movne	r2, #10
 800d084:	2208      	moveq	r2, #8
 800d086:	2100      	movs	r1, #0
 800d088:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d08c:	6865      	ldr	r5, [r4, #4]
 800d08e:	60a5      	str	r5, [r4, #8]
 800d090:	2d00      	cmp	r5, #0
 800d092:	f2c0 8095 	blt.w	800d1c0 <_printf_i+0x20c>
 800d096:	6821      	ldr	r1, [r4, #0]
 800d098:	f021 0104 	bic.w	r1, r1, #4
 800d09c:	6021      	str	r1, [r4, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d13d      	bne.n	800d11e <_printf_i+0x16a>
 800d0a2:	2d00      	cmp	r5, #0
 800d0a4:	f040 808e 	bne.w	800d1c4 <_printf_i+0x210>
 800d0a8:	4665      	mov	r5, ip
 800d0aa:	2a08      	cmp	r2, #8
 800d0ac:	d10b      	bne.n	800d0c6 <_printf_i+0x112>
 800d0ae:	6823      	ldr	r3, [r4, #0]
 800d0b0:	07db      	lsls	r3, r3, #31
 800d0b2:	d508      	bpl.n	800d0c6 <_printf_i+0x112>
 800d0b4:	6923      	ldr	r3, [r4, #16]
 800d0b6:	6862      	ldr	r2, [r4, #4]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	bfde      	ittt	le
 800d0bc:	2330      	movle	r3, #48	; 0x30
 800d0be:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0c6:	ebac 0305 	sub.w	r3, ip, r5
 800d0ca:	6123      	str	r3, [r4, #16]
 800d0cc:	f8cd 8000 	str.w	r8, [sp]
 800d0d0:	463b      	mov	r3, r7
 800d0d2:	aa03      	add	r2, sp, #12
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f7ff fef6 	bl	800cec8 <_printf_common>
 800d0dc:	3001      	adds	r0, #1
 800d0de:	d14d      	bne.n	800d17c <_printf_i+0x1c8>
 800d0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e4:	b005      	add	sp, #20
 800d0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0ea:	4839      	ldr	r0, [pc, #228]	; (800d1d0 <_printf_i+0x21c>)
 800d0ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d0f0:	6813      	ldr	r3, [r2, #0]
 800d0f2:	6821      	ldr	r1, [r4, #0]
 800d0f4:	1d1d      	adds	r5, r3, #4
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6015      	str	r5, [r2, #0]
 800d0fa:	060a      	lsls	r2, r1, #24
 800d0fc:	d50b      	bpl.n	800d116 <_printf_i+0x162>
 800d0fe:	07ca      	lsls	r2, r1, #31
 800d100:	bf44      	itt	mi
 800d102:	f041 0120 	orrmi.w	r1, r1, #32
 800d106:	6021      	strmi	r1, [r4, #0]
 800d108:	b91b      	cbnz	r3, 800d112 <_printf_i+0x15e>
 800d10a:	6822      	ldr	r2, [r4, #0]
 800d10c:	f022 0220 	bic.w	r2, r2, #32
 800d110:	6022      	str	r2, [r4, #0]
 800d112:	2210      	movs	r2, #16
 800d114:	e7b7      	b.n	800d086 <_printf_i+0xd2>
 800d116:	064d      	lsls	r5, r1, #25
 800d118:	bf48      	it	mi
 800d11a:	b29b      	uxthmi	r3, r3
 800d11c:	e7ef      	b.n	800d0fe <_printf_i+0x14a>
 800d11e:	4665      	mov	r5, ip
 800d120:	fbb3 f1f2 	udiv	r1, r3, r2
 800d124:	fb02 3311 	mls	r3, r2, r1, r3
 800d128:	5cc3      	ldrb	r3, [r0, r3]
 800d12a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d12e:	460b      	mov	r3, r1
 800d130:	2900      	cmp	r1, #0
 800d132:	d1f5      	bne.n	800d120 <_printf_i+0x16c>
 800d134:	e7b9      	b.n	800d0aa <_printf_i+0xf6>
 800d136:	6813      	ldr	r3, [r2, #0]
 800d138:	6825      	ldr	r5, [r4, #0]
 800d13a:	6961      	ldr	r1, [r4, #20]
 800d13c:	1d18      	adds	r0, r3, #4
 800d13e:	6010      	str	r0, [r2, #0]
 800d140:	0628      	lsls	r0, r5, #24
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	d501      	bpl.n	800d14a <_printf_i+0x196>
 800d146:	6019      	str	r1, [r3, #0]
 800d148:	e002      	b.n	800d150 <_printf_i+0x19c>
 800d14a:	066a      	lsls	r2, r5, #25
 800d14c:	d5fb      	bpl.n	800d146 <_printf_i+0x192>
 800d14e:	8019      	strh	r1, [r3, #0]
 800d150:	2300      	movs	r3, #0
 800d152:	6123      	str	r3, [r4, #16]
 800d154:	4665      	mov	r5, ip
 800d156:	e7b9      	b.n	800d0cc <_printf_i+0x118>
 800d158:	6813      	ldr	r3, [r2, #0]
 800d15a:	1d19      	adds	r1, r3, #4
 800d15c:	6011      	str	r1, [r2, #0]
 800d15e:	681d      	ldr	r5, [r3, #0]
 800d160:	6862      	ldr	r2, [r4, #4]
 800d162:	2100      	movs	r1, #0
 800d164:	4628      	mov	r0, r5
 800d166:	f7f3 f923 	bl	80003b0 <memchr>
 800d16a:	b108      	cbz	r0, 800d170 <_printf_i+0x1bc>
 800d16c:	1b40      	subs	r0, r0, r5
 800d16e:	6060      	str	r0, [r4, #4]
 800d170:	6863      	ldr	r3, [r4, #4]
 800d172:	6123      	str	r3, [r4, #16]
 800d174:	2300      	movs	r3, #0
 800d176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d17a:	e7a7      	b.n	800d0cc <_printf_i+0x118>
 800d17c:	6923      	ldr	r3, [r4, #16]
 800d17e:	462a      	mov	r2, r5
 800d180:	4639      	mov	r1, r7
 800d182:	4630      	mov	r0, r6
 800d184:	47c0      	blx	r8
 800d186:	3001      	adds	r0, #1
 800d188:	d0aa      	beq.n	800d0e0 <_printf_i+0x12c>
 800d18a:	6823      	ldr	r3, [r4, #0]
 800d18c:	079b      	lsls	r3, r3, #30
 800d18e:	d413      	bmi.n	800d1b8 <_printf_i+0x204>
 800d190:	68e0      	ldr	r0, [r4, #12]
 800d192:	9b03      	ldr	r3, [sp, #12]
 800d194:	4298      	cmp	r0, r3
 800d196:	bfb8      	it	lt
 800d198:	4618      	movlt	r0, r3
 800d19a:	e7a3      	b.n	800d0e4 <_printf_i+0x130>
 800d19c:	2301      	movs	r3, #1
 800d19e:	464a      	mov	r2, r9
 800d1a0:	4639      	mov	r1, r7
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	47c0      	blx	r8
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	d09a      	beq.n	800d0e0 <_printf_i+0x12c>
 800d1aa:	3501      	adds	r5, #1
 800d1ac:	68e3      	ldr	r3, [r4, #12]
 800d1ae:	9a03      	ldr	r2, [sp, #12]
 800d1b0:	1a9b      	subs	r3, r3, r2
 800d1b2:	42ab      	cmp	r3, r5
 800d1b4:	dcf2      	bgt.n	800d19c <_printf_i+0x1e8>
 800d1b6:	e7eb      	b.n	800d190 <_printf_i+0x1dc>
 800d1b8:	2500      	movs	r5, #0
 800d1ba:	f104 0919 	add.w	r9, r4, #25
 800d1be:	e7f5      	b.n	800d1ac <_printf_i+0x1f8>
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1ac      	bne.n	800d11e <_printf_i+0x16a>
 800d1c4:	7803      	ldrb	r3, [r0, #0]
 800d1c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1ce:	e76c      	b.n	800d0aa <_printf_i+0xf6>
 800d1d0:	0801927c 	.word	0x0801927c
 800d1d4:	0801928d 	.word	0x0801928d

0800d1d8 <_sbrk_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4c06      	ldr	r4, [pc, #24]	; (800d1f4 <_sbrk_r+0x1c>)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4605      	mov	r5, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	6023      	str	r3, [r4, #0]
 800d1e4:	f7f6 f9ec 	bl	80035c0 <_sbrk>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_sbrk_r+0x1a>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_sbrk_r+0x1a>
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	2400f0bc 	.word	0x2400f0bc

0800d1f8 <siprintf>:
 800d1f8:	b40e      	push	{r1, r2, r3}
 800d1fa:	b500      	push	{lr}
 800d1fc:	b09c      	sub	sp, #112	; 0x70
 800d1fe:	ab1d      	add	r3, sp, #116	; 0x74
 800d200:	9002      	str	r0, [sp, #8]
 800d202:	9006      	str	r0, [sp, #24]
 800d204:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d208:	4809      	ldr	r0, [pc, #36]	; (800d230 <siprintf+0x38>)
 800d20a:	9107      	str	r1, [sp, #28]
 800d20c:	9104      	str	r1, [sp, #16]
 800d20e:	4909      	ldr	r1, [pc, #36]	; (800d234 <siprintf+0x3c>)
 800d210:	f853 2b04 	ldr.w	r2, [r3], #4
 800d214:	9105      	str	r1, [sp, #20]
 800d216:	6800      	ldr	r0, [r0, #0]
 800d218:	9301      	str	r3, [sp, #4]
 800d21a:	a902      	add	r1, sp, #8
 800d21c:	f001 f940 	bl	800e4a0 <_svfiprintf_r>
 800d220:	9b02      	ldr	r3, [sp, #8]
 800d222:	2200      	movs	r2, #0
 800d224:	701a      	strb	r2, [r3, #0]
 800d226:	b01c      	add	sp, #112	; 0x70
 800d228:	f85d eb04 	ldr.w	lr, [sp], #4
 800d22c:	b003      	add	sp, #12
 800d22e:	4770      	bx	lr
 800d230:	24000380 	.word	0x24000380
 800d234:	ffff0208 	.word	0xffff0208

0800d238 <strcpy>:
 800d238:	4603      	mov	r3, r0
 800d23a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d23e:	f803 2b01 	strb.w	r2, [r3], #1
 800d242:	2a00      	cmp	r2, #0
 800d244:	d1f9      	bne.n	800d23a <strcpy+0x2>
 800d246:	4770      	bx	lr

0800d248 <quorem>:
 800d248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	6903      	ldr	r3, [r0, #16]
 800d24e:	690c      	ldr	r4, [r1, #16]
 800d250:	42a3      	cmp	r3, r4
 800d252:	4680      	mov	r8, r0
 800d254:	f2c0 8082 	blt.w	800d35c <quorem+0x114>
 800d258:	3c01      	subs	r4, #1
 800d25a:	f101 0714 	add.w	r7, r1, #20
 800d25e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d262:	f100 0614 	add.w	r6, r0, #20
 800d266:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d26a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d26e:	eb06 030c 	add.w	r3, r6, ip
 800d272:	3501      	adds	r5, #1
 800d274:	eb07 090c 	add.w	r9, r7, ip
 800d278:	9301      	str	r3, [sp, #4]
 800d27a:	fbb0 f5f5 	udiv	r5, r0, r5
 800d27e:	b395      	cbz	r5, 800d2e6 <quorem+0x9e>
 800d280:	f04f 0a00 	mov.w	sl, #0
 800d284:	4638      	mov	r0, r7
 800d286:	46b6      	mov	lr, r6
 800d288:	46d3      	mov	fp, sl
 800d28a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d28e:	b293      	uxth	r3, r2
 800d290:	fb05 a303 	mla	r3, r5, r3, sl
 800d294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d298:	b29b      	uxth	r3, r3
 800d29a:	ebab 0303 	sub.w	r3, fp, r3
 800d29e:	0c12      	lsrs	r2, r2, #16
 800d2a0:	f8de b000 	ldr.w	fp, [lr]
 800d2a4:	fb05 a202 	mla	r2, r5, r2, sl
 800d2a8:	fa13 f38b 	uxtah	r3, r3, fp
 800d2ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d2b0:	fa1f fb82 	uxth.w	fp, r2
 800d2b4:	f8de 2000 	ldr.w	r2, [lr]
 800d2b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d2bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2c6:	4581      	cmp	r9, r0
 800d2c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d2cc:	f84e 3b04 	str.w	r3, [lr], #4
 800d2d0:	d2db      	bcs.n	800d28a <quorem+0x42>
 800d2d2:	f856 300c 	ldr.w	r3, [r6, ip]
 800d2d6:	b933      	cbnz	r3, 800d2e6 <quorem+0x9e>
 800d2d8:	9b01      	ldr	r3, [sp, #4]
 800d2da:	3b04      	subs	r3, #4
 800d2dc:	429e      	cmp	r6, r3
 800d2de:	461a      	mov	r2, r3
 800d2e0:	d330      	bcc.n	800d344 <quorem+0xfc>
 800d2e2:	f8c8 4010 	str.w	r4, [r8, #16]
 800d2e6:	4640      	mov	r0, r8
 800d2e8:	f000 ffac 	bl	800e244 <__mcmp>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	db25      	blt.n	800d33c <quorem+0xf4>
 800d2f0:	3501      	adds	r5, #1
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f04f 0c00 	mov.w	ip, #0
 800d2f8:	f857 2b04 	ldr.w	r2, [r7], #4
 800d2fc:	f8d0 e000 	ldr.w	lr, [r0]
 800d300:	b293      	uxth	r3, r2
 800d302:	ebac 0303 	sub.w	r3, ip, r3
 800d306:	0c12      	lsrs	r2, r2, #16
 800d308:	fa13 f38e 	uxtah	r3, r3, lr
 800d30c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d314:	b29b      	uxth	r3, r3
 800d316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d31a:	45b9      	cmp	r9, r7
 800d31c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d320:	f840 3b04 	str.w	r3, [r0], #4
 800d324:	d2e8      	bcs.n	800d2f8 <quorem+0xb0>
 800d326:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d32a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d32e:	b92a      	cbnz	r2, 800d33c <quorem+0xf4>
 800d330:	3b04      	subs	r3, #4
 800d332:	429e      	cmp	r6, r3
 800d334:	461a      	mov	r2, r3
 800d336:	d30b      	bcc.n	800d350 <quorem+0x108>
 800d338:	f8c8 4010 	str.w	r4, [r8, #16]
 800d33c:	4628      	mov	r0, r5
 800d33e:	b003      	add	sp, #12
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d344:	6812      	ldr	r2, [r2, #0]
 800d346:	3b04      	subs	r3, #4
 800d348:	2a00      	cmp	r2, #0
 800d34a:	d1ca      	bne.n	800d2e2 <quorem+0x9a>
 800d34c:	3c01      	subs	r4, #1
 800d34e:	e7c5      	b.n	800d2dc <quorem+0x94>
 800d350:	6812      	ldr	r2, [r2, #0]
 800d352:	3b04      	subs	r3, #4
 800d354:	2a00      	cmp	r2, #0
 800d356:	d1ef      	bne.n	800d338 <quorem+0xf0>
 800d358:	3c01      	subs	r4, #1
 800d35a:	e7ea      	b.n	800d332 <quorem+0xea>
 800d35c:	2000      	movs	r0, #0
 800d35e:	e7ee      	b.n	800d33e <quorem+0xf6>

0800d360 <_dtoa_r>:
 800d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	ec57 6b10 	vmov	r6, r7, d0
 800d368:	b095      	sub	sp, #84	; 0x54
 800d36a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d36c:	9108      	str	r1, [sp, #32]
 800d36e:	4604      	mov	r4, r0
 800d370:	920a      	str	r2, [sp, #40]	; 0x28
 800d372:	9311      	str	r3, [sp, #68]	; 0x44
 800d374:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d378:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d37c:	b93d      	cbnz	r5, 800d38e <_dtoa_r+0x2e>
 800d37e:	2010      	movs	r0, #16
 800d380:	f7ff fa22 	bl	800c7c8 <malloc>
 800d384:	6260      	str	r0, [r4, #36]	; 0x24
 800d386:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d38a:	6005      	str	r5, [r0, #0]
 800d38c:	60c5      	str	r5, [r0, #12]
 800d38e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d390:	6819      	ldr	r1, [r3, #0]
 800d392:	b151      	cbz	r1, 800d3aa <_dtoa_r+0x4a>
 800d394:	685a      	ldr	r2, [r3, #4]
 800d396:	604a      	str	r2, [r1, #4]
 800d398:	2301      	movs	r3, #1
 800d39a:	4093      	lsls	r3, r2
 800d39c:	608b      	str	r3, [r1, #8]
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f000 fd6e 	bl	800de80 <_Bfree>
 800d3a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	1e3b      	subs	r3, r7, #0
 800d3ac:	bfb9      	ittee	lt
 800d3ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d3b2:	9303      	strlt	r3, [sp, #12]
 800d3b4:	2300      	movge	r3, #0
 800d3b6:	f8c8 3000 	strge.w	r3, [r8]
 800d3ba:	9d03      	ldr	r5, [sp, #12]
 800d3bc:	4bac      	ldr	r3, [pc, #688]	; (800d670 <_dtoa_r+0x310>)
 800d3be:	bfbc      	itt	lt
 800d3c0:	2201      	movlt	r2, #1
 800d3c2:	f8c8 2000 	strlt.w	r2, [r8]
 800d3c6:	43ab      	bics	r3, r5
 800d3c8:	d11b      	bne.n	800d402 <_dtoa_r+0xa2>
 800d3ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d3cc:	f242 730f 	movw	r3, #9999	; 0x270f
 800d3d0:	6013      	str	r3, [r2, #0]
 800d3d2:	9b02      	ldr	r3, [sp, #8]
 800d3d4:	b923      	cbnz	r3, 800d3e0 <_dtoa_r+0x80>
 800d3d6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d3da:	2d00      	cmp	r5, #0
 800d3dc:	f000 84dd 	beq.w	800dd9a <_dtoa_r+0xa3a>
 800d3e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3e2:	b953      	cbnz	r3, 800d3fa <_dtoa_r+0x9a>
 800d3e4:	4ba3      	ldr	r3, [pc, #652]	; (800d674 <_dtoa_r+0x314>)
 800d3e6:	e020      	b.n	800d42a <_dtoa_r+0xca>
 800d3e8:	4ba3      	ldr	r3, [pc, #652]	; (800d678 <_dtoa_r+0x318>)
 800d3ea:	9304      	str	r3, [sp, #16]
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d3f0:	6013      	str	r3, [r2, #0]
 800d3f2:	9804      	ldr	r0, [sp, #16]
 800d3f4:	b015      	add	sp, #84	; 0x54
 800d3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3fa:	4b9e      	ldr	r3, [pc, #632]	; (800d674 <_dtoa_r+0x314>)
 800d3fc:	9304      	str	r3, [sp, #16]
 800d3fe:	3303      	adds	r3, #3
 800d400:	e7f5      	b.n	800d3ee <_dtoa_r+0x8e>
 800d402:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d406:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d412:	d10c      	bne.n	800d42e <_dtoa_r+0xce>
 800d414:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d416:	2301      	movs	r3, #1
 800d418:	6013      	str	r3, [r2, #0]
 800d41a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 84b9 	beq.w	800dd94 <_dtoa_r+0xa34>
 800d422:	4b96      	ldr	r3, [pc, #600]	; (800d67c <_dtoa_r+0x31c>)
 800d424:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	3b01      	subs	r3, #1
 800d42a:	9304      	str	r3, [sp, #16]
 800d42c:	e7e1      	b.n	800d3f2 <_dtoa_r+0x92>
 800d42e:	a913      	add	r1, sp, #76	; 0x4c
 800d430:	aa12      	add	r2, sp, #72	; 0x48
 800d432:	ed9d 0b04 	vldr	d0, [sp, #16]
 800d436:	4620      	mov	r0, r4
 800d438:	f000 ff7b 	bl	800e332 <__d2b>
 800d43c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d440:	9001      	str	r0, [sp, #4]
 800d442:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d444:	2e00      	cmp	r6, #0
 800d446:	d046      	beq.n	800d4d6 <_dtoa_r+0x176>
 800d448:	9805      	ldr	r0, [sp, #20]
 800d44a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d44e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d452:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800d456:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d45a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800d45e:	2700      	movs	r7, #0
 800d460:	ee07 aa90 	vmov	s15, sl
 800d464:	ec43 2b16 	vmov	d6, r2, r3
 800d468:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d46c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800d658 <_dtoa_r+0x2f8>
 800d470:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d474:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d478:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d660 <_dtoa_r+0x300>
 800d47c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d480:	eeb0 7b46 	vmov.f64	d7, d6
 800d484:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d668 <_dtoa_r+0x308>
 800d488:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d48c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d490:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d498:	ee16 ba90 	vmov	fp, s13
 800d49c:	d508      	bpl.n	800d4b0 <_dtoa_r+0x150>
 800d49e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d4a2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4aa:	bf18      	it	ne
 800d4ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d4b0:	f1bb 0f16 	cmp.w	fp, #22
 800d4b4:	d834      	bhi.n	800d520 <_dtoa_r+0x1c0>
 800d4b6:	4b72      	ldr	r3, [pc, #456]	; (800d680 <_dtoa_r+0x320>)
 800d4b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d4bc:	ed93 7b00 	vldr	d7, [r3]
 800d4c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d4c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4cc:	dd01      	ble.n	800d4d2 <_dtoa_r+0x172>
 800d4ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	e025      	b.n	800d522 <_dtoa_r+0x1c2>
 800d4d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4d8:	eb01 0a03 	add.w	sl, r1, r3
 800d4dc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800d4e0:	2b20      	cmp	r3, #32
 800d4e2:	dd17      	ble.n	800d514 <_dtoa_r+0x1b4>
 800d4e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d4e8:	9a02      	ldr	r2, [sp, #8]
 800d4ea:	409d      	lsls	r5, r3
 800d4ec:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800d4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d4f4:	432b      	orrs	r3, r5
 800d4f6:	ee07 3a90 	vmov	s15, r3
 800d4fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d4fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d502:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d506:	9805      	ldr	r0, [sp, #20]
 800d508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d50c:	2701      	movs	r7, #1
 800d50e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800d512:	e7a5      	b.n	800d460 <_dtoa_r+0x100>
 800d514:	9a02      	ldr	r2, [sp, #8]
 800d516:	f1c3 0320 	rsb	r3, r3, #32
 800d51a:	fa02 f303 	lsl.w	r3, r2, r3
 800d51e:	e7ea      	b.n	800d4f6 <_dtoa_r+0x196>
 800d520:	2301      	movs	r3, #1
 800d522:	eba1 0a0a 	sub.w	sl, r1, sl
 800d526:	9310      	str	r3, [sp, #64]	; 0x40
 800d528:	f1ba 0301 	subs.w	r3, sl, #1
 800d52c:	9307      	str	r3, [sp, #28]
 800d52e:	bf43      	ittte	mi
 800d530:	2300      	movmi	r3, #0
 800d532:	f1ca 0a01 	rsbmi	sl, sl, #1
 800d536:	9307      	strmi	r3, [sp, #28]
 800d538:	f04f 0a00 	movpl.w	sl, #0
 800d53c:	f1bb 0f00 	cmp.w	fp, #0
 800d540:	db19      	blt.n	800d576 <_dtoa_r+0x216>
 800d542:	9b07      	ldr	r3, [sp, #28]
 800d544:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d548:	445b      	add	r3, fp
 800d54a:	9307      	str	r3, [sp, #28]
 800d54c:	f04f 0800 	mov.w	r8, #0
 800d550:	9b08      	ldr	r3, [sp, #32]
 800d552:	2b09      	cmp	r3, #9
 800d554:	d866      	bhi.n	800d624 <_dtoa_r+0x2c4>
 800d556:	2b05      	cmp	r3, #5
 800d558:	bfc4      	itt	gt
 800d55a:	3b04      	subgt	r3, #4
 800d55c:	9308      	strgt	r3, [sp, #32]
 800d55e:	9b08      	ldr	r3, [sp, #32]
 800d560:	f1a3 0302 	sub.w	r3, r3, #2
 800d564:	bfcc      	ite	gt
 800d566:	2500      	movgt	r5, #0
 800d568:	2501      	movle	r5, #1
 800d56a:	2b03      	cmp	r3, #3
 800d56c:	d866      	bhi.n	800d63c <_dtoa_r+0x2dc>
 800d56e:	e8df f003 	tbb	[pc, r3]
 800d572:	5755      	.short	0x5755
 800d574:	4909      	.short	0x4909
 800d576:	2300      	movs	r3, #0
 800d578:	ebaa 0a0b 	sub.w	sl, sl, fp
 800d57c:	f1cb 0800 	rsb	r8, fp, #0
 800d580:	930b      	str	r3, [sp, #44]	; 0x2c
 800d582:	e7e5      	b.n	800d550 <_dtoa_r+0x1f0>
 800d584:	2301      	movs	r3, #1
 800d586:	9309      	str	r3, [sp, #36]	; 0x24
 800d588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	dd59      	ble.n	800d642 <_dtoa_r+0x2e2>
 800d58e:	9306      	str	r3, [sp, #24]
 800d590:	4699      	mov	r9, r3
 800d592:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d594:	2200      	movs	r2, #0
 800d596:	6072      	str	r2, [r6, #4]
 800d598:	2204      	movs	r2, #4
 800d59a:	f102 0014 	add.w	r0, r2, #20
 800d59e:	4298      	cmp	r0, r3
 800d5a0:	6871      	ldr	r1, [r6, #4]
 800d5a2:	d953      	bls.n	800d64c <_dtoa_r+0x2ec>
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f000 fc37 	bl	800de18 <_Balloc>
 800d5aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ac:	6030      	str	r0, [r6, #0]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	9304      	str	r3, [sp, #16]
 800d5b2:	f1b9 0f0e 	cmp.w	r9, #14
 800d5b6:	f200 80c2 	bhi.w	800d73e <_dtoa_r+0x3de>
 800d5ba:	2d00      	cmp	r5, #0
 800d5bc:	f000 80bf 	beq.w	800d73e <_dtoa_r+0x3de>
 800d5c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5c4:	f1bb 0f00 	cmp.w	fp, #0
 800d5c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d5cc:	f340 80e6 	ble.w	800d79c <_dtoa_r+0x43c>
 800d5d0:	4a2b      	ldr	r2, [pc, #172]	; (800d680 <_dtoa_r+0x320>)
 800d5d2:	f00b 030f 	and.w	r3, fp, #15
 800d5d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5da:	ed93 7b00 	vldr	d7, [r3]
 800d5de:	ea4f 132b 	mov.w	r3, fp, asr #4
 800d5e2:	06da      	lsls	r2, r3, #27
 800d5e4:	f140 80d8 	bpl.w	800d798 <_dtoa_r+0x438>
 800d5e8:	4a26      	ldr	r2, [pc, #152]	; (800d684 <_dtoa_r+0x324>)
 800d5ea:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800d5ee:	ed92 6b08 	vldr	d6, [r2, #32]
 800d5f2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d5f6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d5fa:	f003 030f 	and.w	r3, r3, #15
 800d5fe:	2203      	movs	r2, #3
 800d600:	4920      	ldr	r1, [pc, #128]	; (800d684 <_dtoa_r+0x324>)
 800d602:	e04a      	b.n	800d69a <_dtoa_r+0x33a>
 800d604:	2301      	movs	r3, #1
 800d606:	9309      	str	r3, [sp, #36]	; 0x24
 800d608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d60a:	445b      	add	r3, fp
 800d60c:	f103 0901 	add.w	r9, r3, #1
 800d610:	9306      	str	r3, [sp, #24]
 800d612:	464b      	mov	r3, r9
 800d614:	2b01      	cmp	r3, #1
 800d616:	bfb8      	it	lt
 800d618:	2301      	movlt	r3, #1
 800d61a:	e7ba      	b.n	800d592 <_dtoa_r+0x232>
 800d61c:	2300      	movs	r3, #0
 800d61e:	e7b2      	b.n	800d586 <_dtoa_r+0x226>
 800d620:	2300      	movs	r3, #0
 800d622:	e7f0      	b.n	800d606 <_dtoa_r+0x2a6>
 800d624:	2501      	movs	r5, #1
 800d626:	2300      	movs	r3, #0
 800d628:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800d62c:	f04f 33ff 	mov.w	r3, #4294967295
 800d630:	9306      	str	r3, [sp, #24]
 800d632:	4699      	mov	r9, r3
 800d634:	2200      	movs	r2, #0
 800d636:	2312      	movs	r3, #18
 800d638:	920a      	str	r2, [sp, #40]	; 0x28
 800d63a:	e7aa      	b.n	800d592 <_dtoa_r+0x232>
 800d63c:	2301      	movs	r3, #1
 800d63e:	9309      	str	r3, [sp, #36]	; 0x24
 800d640:	e7f4      	b.n	800d62c <_dtoa_r+0x2cc>
 800d642:	2301      	movs	r3, #1
 800d644:	9306      	str	r3, [sp, #24]
 800d646:	4699      	mov	r9, r3
 800d648:	461a      	mov	r2, r3
 800d64a:	e7f5      	b.n	800d638 <_dtoa_r+0x2d8>
 800d64c:	3101      	adds	r1, #1
 800d64e:	6071      	str	r1, [r6, #4]
 800d650:	0052      	lsls	r2, r2, #1
 800d652:	e7a2      	b.n	800d59a <_dtoa_r+0x23a>
 800d654:	f3af 8000 	nop.w
 800d658:	636f4361 	.word	0x636f4361
 800d65c:	3fd287a7 	.word	0x3fd287a7
 800d660:	8b60c8b3 	.word	0x8b60c8b3
 800d664:	3fc68a28 	.word	0x3fc68a28
 800d668:	509f79fb 	.word	0x509f79fb
 800d66c:	3fd34413 	.word	0x3fd34413
 800d670:	7ff00000 	.word	0x7ff00000
 800d674:	080192a7 	.word	0x080192a7
 800d678:	0801929e 	.word	0x0801929e
 800d67c:	080194cd 	.word	0x080194cd
 800d680:	080192d8 	.word	0x080192d8
 800d684:	080192b0 	.word	0x080192b0
 800d688:	07de      	lsls	r6, r3, #31
 800d68a:	d504      	bpl.n	800d696 <_dtoa_r+0x336>
 800d68c:	ed91 6b00 	vldr	d6, [r1]
 800d690:	3201      	adds	r2, #1
 800d692:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d696:	105b      	asrs	r3, r3, #1
 800d698:	3108      	adds	r1, #8
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1f4      	bne.n	800d688 <_dtoa_r+0x328>
 800d69e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d6a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f000 80a7 	beq.w	800d800 <_dtoa_r+0x4a0>
 800d6b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d6b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c2:	f140 809d 	bpl.w	800d800 <_dtoa_r+0x4a0>
 800d6c6:	f1b9 0f00 	cmp.w	r9, #0
 800d6ca:	f000 8099 	beq.w	800d800 <_dtoa_r+0x4a0>
 800d6ce:	9b06      	ldr	r3, [sp, #24]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	dd30      	ble.n	800d736 <_dtoa_r+0x3d6>
 800d6d4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d6d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6e0:	9d06      	ldr	r5, [sp, #24]
 800d6e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d6e6:	3201      	adds	r2, #1
 800d6e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6ec:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d6f0:	ee07 2a90 	vmov	s15, r2
 800d6f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d6fc:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d700:	9a03      	ldr	r2, [sp, #12]
 800d702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d706:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800d70a:	2d00      	cmp	r5, #0
 800d70c:	d17b      	bne.n	800d806 <_dtoa_r+0x4a6>
 800d70e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d712:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d716:	ec41 0b17 	vmov	d7, r0, r1
 800d71a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d722:	f300 8253 	bgt.w	800dbcc <_dtoa_r+0x86c>
 800d726:	eeb1 7b47 	vneg.f64	d7, d7
 800d72a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d732:	f100 8249 	bmi.w	800dbc8 <_dtoa_r+0x868>
 800d736:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d73a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d73e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d740:	2b00      	cmp	r3, #0
 800d742:	f2c0 8119 	blt.w	800d978 <_dtoa_r+0x618>
 800d746:	f1bb 0f0e 	cmp.w	fp, #14
 800d74a:	f300 8115 	bgt.w	800d978 <_dtoa_r+0x618>
 800d74e:	4bc3      	ldr	r3, [pc, #780]	; (800da5c <_dtoa_r+0x6fc>)
 800d750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d754:	ed93 6b00 	vldr	d6, [r3]
 800d758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f280 80ba 	bge.w	800d8d4 <_dtoa_r+0x574>
 800d760:	f1b9 0f00 	cmp.w	r9, #0
 800d764:	f300 80b6 	bgt.w	800d8d4 <_dtoa_r+0x574>
 800d768:	f040 822d 	bne.w	800dbc6 <_dtoa_r+0x866>
 800d76c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d770:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d774:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d778:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d780:	464d      	mov	r5, r9
 800d782:	464f      	mov	r7, r9
 800d784:	f280 8204 	bge.w	800db90 <_dtoa_r+0x830>
 800d788:	9b04      	ldr	r3, [sp, #16]
 800d78a:	9a04      	ldr	r2, [sp, #16]
 800d78c:	1c5e      	adds	r6, r3, #1
 800d78e:	2331      	movs	r3, #49	; 0x31
 800d790:	7013      	strb	r3, [r2, #0]
 800d792:	f10b 0b01 	add.w	fp, fp, #1
 800d796:	e1ff      	b.n	800db98 <_dtoa_r+0x838>
 800d798:	2202      	movs	r2, #2
 800d79a:	e731      	b.n	800d600 <_dtoa_r+0x2a0>
 800d79c:	d02e      	beq.n	800d7fc <_dtoa_r+0x49c>
 800d79e:	f1cb 0300 	rsb	r3, fp, #0
 800d7a2:	4aae      	ldr	r2, [pc, #696]	; (800da5c <_dtoa_r+0x6fc>)
 800d7a4:	f003 010f 	and.w	r1, r3, #15
 800d7a8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d7ac:	ed92 7b00 	vldr	d7, [r2]
 800d7b0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800d7b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d7b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d7bc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800d7c0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d7c4:	49a6      	ldr	r1, [pc, #664]	; (800da60 <_dtoa_r+0x700>)
 800d7c6:	111b      	asrs	r3, r3, #4
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	2202      	movs	r2, #2
 800d7cc:	b93b      	cbnz	r3, 800d7de <_dtoa_r+0x47e>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	f43f af6b 	beq.w	800d6aa <_dtoa_r+0x34a>
 800d7d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d7d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7dc:	e765      	b.n	800d6aa <_dtoa_r+0x34a>
 800d7de:	07dd      	lsls	r5, r3, #31
 800d7e0:	d509      	bpl.n	800d7f6 <_dtoa_r+0x496>
 800d7e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d7e6:	ed91 7b00 	vldr	d7, [r1]
 800d7ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d7ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d7f2:	3201      	adds	r2, #1
 800d7f4:	2001      	movs	r0, #1
 800d7f6:	105b      	asrs	r3, r3, #1
 800d7f8:	3108      	adds	r1, #8
 800d7fa:	e7e7      	b.n	800d7cc <_dtoa_r+0x46c>
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	e754      	b.n	800d6aa <_dtoa_r+0x34a>
 800d800:	465b      	mov	r3, fp
 800d802:	464d      	mov	r5, r9
 800d804:	e770      	b.n	800d6e8 <_dtoa_r+0x388>
 800d806:	4a95      	ldr	r2, [pc, #596]	; (800da5c <_dtoa_r+0x6fc>)
 800d808:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800d80c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d812:	ec41 0b17 	vmov	d7, r0, r1
 800d816:	b35a      	cbz	r2, 800d870 <_dtoa_r+0x510>
 800d818:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d81c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d820:	9e04      	ldr	r6, [sp, #16]
 800d822:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d826:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d82a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d82e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d832:	ee14 2a90 	vmov	r2, s9
 800d836:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d83a:	3230      	adds	r2, #48	; 0x30
 800d83c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d840:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d848:	f806 2b01 	strb.w	r2, [r6], #1
 800d84c:	d43b      	bmi.n	800d8c6 <_dtoa_r+0x566>
 800d84e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d852:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85a:	d472      	bmi.n	800d942 <_dtoa_r+0x5e2>
 800d85c:	9a04      	ldr	r2, [sp, #16]
 800d85e:	1ab2      	subs	r2, r6, r2
 800d860:	4295      	cmp	r5, r2
 800d862:	f77f af68 	ble.w	800d736 <_dtoa_r+0x3d6>
 800d866:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d86a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d86e:	e7de      	b.n	800d82e <_dtoa_r+0x4ce>
 800d870:	9a04      	ldr	r2, [sp, #16]
 800d872:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d876:	1956      	adds	r6, r2, r5
 800d878:	4611      	mov	r1, r2
 800d87a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d87e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d882:	ee14 2a90 	vmov	r2, s9
 800d886:	3230      	adds	r2, #48	; 0x30
 800d888:	f801 2b01 	strb.w	r2, [r1], #1
 800d88c:	42b1      	cmp	r1, r6
 800d88e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d892:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d896:	d11a      	bne.n	800d8ce <_dtoa_r+0x56e>
 800d898:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d89c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d8a0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a8:	dc4b      	bgt.n	800d942 <_dtoa_r+0x5e2>
 800d8aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d8ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b6:	f57f af3e 	bpl.w	800d736 <_dtoa_r+0x3d6>
 800d8ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d8be:	2a30      	cmp	r2, #48	; 0x30
 800d8c0:	f106 31ff 	add.w	r1, r6, #4294967295
 800d8c4:	d001      	beq.n	800d8ca <_dtoa_r+0x56a>
 800d8c6:	469b      	mov	fp, r3
 800d8c8:	e02a      	b.n	800d920 <_dtoa_r+0x5c0>
 800d8ca:	460e      	mov	r6, r1
 800d8cc:	e7f5      	b.n	800d8ba <_dtoa_r+0x55a>
 800d8ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d8d2:	e7d4      	b.n	800d87e <_dtoa_r+0x51e>
 800d8d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8d8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d8dc:	9e04      	ldr	r6, [sp, #16]
 800d8de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d8e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d8e6:	ee15 3a10 	vmov	r3, s10
 800d8ea:	3330      	adds	r3, #48	; 0x30
 800d8ec:	f806 3b01 	strb.w	r3, [r6], #1
 800d8f0:	9b04      	ldr	r3, [sp, #16]
 800d8f2:	1af3      	subs	r3, r6, r3
 800d8f4:	4599      	cmp	r9, r3
 800d8f6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d8fa:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d8fe:	d133      	bne.n	800d968 <_dtoa_r+0x608>
 800d900:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d904:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d90c:	dc18      	bgt.n	800d940 <_dtoa_r+0x5e0>
 800d90e:	eeb4 7b46 	vcmp.f64	d7, d6
 800d912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d916:	d103      	bne.n	800d920 <_dtoa_r+0x5c0>
 800d918:	ee15 3a10 	vmov	r3, s10
 800d91c:	07db      	lsls	r3, r3, #31
 800d91e:	d40f      	bmi.n	800d940 <_dtoa_r+0x5e0>
 800d920:	9901      	ldr	r1, [sp, #4]
 800d922:	4620      	mov	r0, r4
 800d924:	f000 faac 	bl	800de80 <_Bfree>
 800d928:	2300      	movs	r3, #0
 800d92a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d92c:	7033      	strb	r3, [r6, #0]
 800d92e:	f10b 0301 	add.w	r3, fp, #1
 800d932:	6013      	str	r3, [r2, #0]
 800d934:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d936:	2b00      	cmp	r3, #0
 800d938:	f43f ad5b 	beq.w	800d3f2 <_dtoa_r+0x92>
 800d93c:	601e      	str	r6, [r3, #0]
 800d93e:	e558      	b.n	800d3f2 <_dtoa_r+0x92>
 800d940:	465b      	mov	r3, fp
 800d942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d946:	2939      	cmp	r1, #57	; 0x39
 800d948:	f106 32ff 	add.w	r2, r6, #4294967295
 800d94c:	d106      	bne.n	800d95c <_dtoa_r+0x5fc>
 800d94e:	9904      	ldr	r1, [sp, #16]
 800d950:	4291      	cmp	r1, r2
 800d952:	d107      	bne.n	800d964 <_dtoa_r+0x604>
 800d954:	2230      	movs	r2, #48	; 0x30
 800d956:	700a      	strb	r2, [r1, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	460a      	mov	r2, r1
 800d95c:	7811      	ldrb	r1, [r2, #0]
 800d95e:	3101      	adds	r1, #1
 800d960:	7011      	strb	r1, [r2, #0]
 800d962:	e7b0      	b.n	800d8c6 <_dtoa_r+0x566>
 800d964:	4616      	mov	r6, r2
 800d966:	e7ec      	b.n	800d942 <_dtoa_r+0x5e2>
 800d968:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d96c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d974:	d1b3      	bne.n	800d8de <_dtoa_r+0x57e>
 800d976:	e7d3      	b.n	800d920 <_dtoa_r+0x5c0>
 800d978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	f000 808d 	beq.w	800da9a <_dtoa_r+0x73a>
 800d980:	9a08      	ldr	r2, [sp, #32]
 800d982:	2a01      	cmp	r2, #1
 800d984:	dc72      	bgt.n	800da6c <_dtoa_r+0x70c>
 800d986:	2f00      	cmp	r7, #0
 800d988:	d06c      	beq.n	800da64 <_dtoa_r+0x704>
 800d98a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d98e:	4645      	mov	r5, r8
 800d990:	4656      	mov	r6, sl
 800d992:	9a07      	ldr	r2, [sp, #28]
 800d994:	2101      	movs	r1, #1
 800d996:	441a      	add	r2, r3
 800d998:	4620      	mov	r0, r4
 800d99a:	449a      	add	sl, r3
 800d99c:	9207      	str	r2, [sp, #28]
 800d99e:	f000 fb0f 	bl	800dfc0 <__i2b>
 800d9a2:	4607      	mov	r7, r0
 800d9a4:	2e00      	cmp	r6, #0
 800d9a6:	dd0b      	ble.n	800d9c0 <_dtoa_r+0x660>
 800d9a8:	9b07      	ldr	r3, [sp, #28]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	dd08      	ble.n	800d9c0 <_dtoa_r+0x660>
 800d9ae:	42b3      	cmp	r3, r6
 800d9b0:	9a07      	ldr	r2, [sp, #28]
 800d9b2:	bfa8      	it	ge
 800d9b4:	4633      	movge	r3, r6
 800d9b6:	ebaa 0a03 	sub.w	sl, sl, r3
 800d9ba:	1af6      	subs	r6, r6, r3
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	9307      	str	r3, [sp, #28]
 800d9c0:	f1b8 0f00 	cmp.w	r8, #0
 800d9c4:	d01d      	beq.n	800da02 <_dtoa_r+0x6a2>
 800d9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d06a      	beq.n	800daa2 <_dtoa_r+0x742>
 800d9cc:	b18d      	cbz	r5, 800d9f2 <_dtoa_r+0x692>
 800d9ce:	4639      	mov	r1, r7
 800d9d0:	462a      	mov	r2, r5
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f000 fb94 	bl	800e100 <__pow5mult>
 800d9d8:	9a01      	ldr	r2, [sp, #4]
 800d9da:	4601      	mov	r1, r0
 800d9dc:	4607      	mov	r7, r0
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f000 faf7 	bl	800dfd2 <__multiply>
 800d9e4:	9901      	ldr	r1, [sp, #4]
 800d9e6:	900c      	str	r0, [sp, #48]	; 0x30
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f000 fa49 	bl	800de80 <_Bfree>
 800d9ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9f0:	9301      	str	r3, [sp, #4]
 800d9f2:	ebb8 0205 	subs.w	r2, r8, r5
 800d9f6:	d004      	beq.n	800da02 <_dtoa_r+0x6a2>
 800d9f8:	9901      	ldr	r1, [sp, #4]
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 fb80 	bl	800e100 <__pow5mult>
 800da00:	9001      	str	r0, [sp, #4]
 800da02:	2101      	movs	r1, #1
 800da04:	4620      	mov	r0, r4
 800da06:	f000 fadb 	bl	800dfc0 <__i2b>
 800da0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da0c:	4605      	mov	r5, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 81ca 	beq.w	800dda8 <_dtoa_r+0xa48>
 800da14:	461a      	mov	r2, r3
 800da16:	4601      	mov	r1, r0
 800da18:	4620      	mov	r0, r4
 800da1a:	f000 fb71 	bl	800e100 <__pow5mult>
 800da1e:	9b08      	ldr	r3, [sp, #32]
 800da20:	2b01      	cmp	r3, #1
 800da22:	4605      	mov	r5, r0
 800da24:	dc44      	bgt.n	800dab0 <_dtoa_r+0x750>
 800da26:	9b02      	ldr	r3, [sp, #8]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d13c      	bne.n	800daa6 <_dtoa_r+0x746>
 800da2c:	9b03      	ldr	r3, [sp, #12]
 800da2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da32:	2b00      	cmp	r3, #0
 800da34:	d137      	bne.n	800daa6 <_dtoa_r+0x746>
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da3c:	0d1b      	lsrs	r3, r3, #20
 800da3e:	051b      	lsls	r3, r3, #20
 800da40:	2b00      	cmp	r3, #0
 800da42:	d033      	beq.n	800daac <_dtoa_r+0x74c>
 800da44:	9b07      	ldr	r3, [sp, #28]
 800da46:	3301      	adds	r3, #1
 800da48:	f10a 0a01 	add.w	sl, sl, #1
 800da4c:	9307      	str	r3, [sp, #28]
 800da4e:	f04f 0801 	mov.w	r8, #1
 800da52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da54:	bb73      	cbnz	r3, 800dab4 <_dtoa_r+0x754>
 800da56:	2001      	movs	r0, #1
 800da58:	e034      	b.n	800dac4 <_dtoa_r+0x764>
 800da5a:	bf00      	nop
 800da5c:	080192d8 	.word	0x080192d8
 800da60:	080192b0 	.word	0x080192b0
 800da64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800da6a:	e790      	b.n	800d98e <_dtoa_r+0x62e>
 800da6c:	f109 35ff 	add.w	r5, r9, #4294967295
 800da70:	45a8      	cmp	r8, r5
 800da72:	bfbf      	itttt	lt
 800da74:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800da76:	eba5 0808 	sublt.w	r8, r5, r8
 800da7a:	4443      	addlt	r3, r8
 800da7c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800da7e:	bfb6      	itet	lt
 800da80:	46a8      	movlt	r8, r5
 800da82:	eba8 0505 	subge.w	r5, r8, r5
 800da86:	2500      	movlt	r5, #0
 800da88:	f1b9 0f00 	cmp.w	r9, #0
 800da8c:	bfb9      	ittee	lt
 800da8e:	ebaa 0609 	sublt.w	r6, sl, r9
 800da92:	2300      	movlt	r3, #0
 800da94:	4656      	movge	r6, sl
 800da96:	464b      	movge	r3, r9
 800da98:	e77b      	b.n	800d992 <_dtoa_r+0x632>
 800da9a:	4645      	mov	r5, r8
 800da9c:	4656      	mov	r6, sl
 800da9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800daa0:	e780      	b.n	800d9a4 <_dtoa_r+0x644>
 800daa2:	4642      	mov	r2, r8
 800daa4:	e7a8      	b.n	800d9f8 <_dtoa_r+0x698>
 800daa6:	f04f 0800 	mov.w	r8, #0
 800daaa:	e7d2      	b.n	800da52 <_dtoa_r+0x6f2>
 800daac:	4698      	mov	r8, r3
 800daae:	e7d0      	b.n	800da52 <_dtoa_r+0x6f2>
 800dab0:	f04f 0800 	mov.w	r8, #0
 800dab4:	692b      	ldr	r3, [r5, #16]
 800dab6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800daba:	6918      	ldr	r0, [r3, #16]
 800dabc:	f000 fa32 	bl	800df24 <__hi0bits>
 800dac0:	f1c0 0020 	rsb	r0, r0, #32
 800dac4:	9b07      	ldr	r3, [sp, #28]
 800dac6:	4418      	add	r0, r3
 800dac8:	f010 001f 	ands.w	r0, r0, #31
 800dacc:	d047      	beq.n	800db5e <_dtoa_r+0x7fe>
 800dace:	f1c0 0320 	rsb	r3, r0, #32
 800dad2:	2b04      	cmp	r3, #4
 800dad4:	dd3b      	ble.n	800db4e <_dtoa_r+0x7ee>
 800dad6:	9b07      	ldr	r3, [sp, #28]
 800dad8:	f1c0 001c 	rsb	r0, r0, #28
 800dadc:	4482      	add	sl, r0
 800dade:	4406      	add	r6, r0
 800dae0:	4403      	add	r3, r0
 800dae2:	9307      	str	r3, [sp, #28]
 800dae4:	f1ba 0f00 	cmp.w	sl, #0
 800dae8:	dd05      	ble.n	800daf6 <_dtoa_r+0x796>
 800daea:	4652      	mov	r2, sl
 800daec:	9901      	ldr	r1, [sp, #4]
 800daee:	4620      	mov	r0, r4
 800daf0:	f000 fb54 	bl	800e19c <__lshift>
 800daf4:	9001      	str	r0, [sp, #4]
 800daf6:	9b07      	ldr	r3, [sp, #28]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	dd05      	ble.n	800db08 <_dtoa_r+0x7a8>
 800dafc:	4629      	mov	r1, r5
 800dafe:	461a      	mov	r2, r3
 800db00:	4620      	mov	r0, r4
 800db02:	f000 fb4b 	bl	800e19c <__lshift>
 800db06:	4605      	mov	r5, r0
 800db08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db0a:	b353      	cbz	r3, 800db62 <_dtoa_r+0x802>
 800db0c:	4629      	mov	r1, r5
 800db0e:	9801      	ldr	r0, [sp, #4]
 800db10:	f000 fb98 	bl	800e244 <__mcmp>
 800db14:	2800      	cmp	r0, #0
 800db16:	da24      	bge.n	800db62 <_dtoa_r+0x802>
 800db18:	2300      	movs	r3, #0
 800db1a:	220a      	movs	r2, #10
 800db1c:	9901      	ldr	r1, [sp, #4]
 800db1e:	4620      	mov	r0, r4
 800db20:	f000 f9c5 	bl	800deae <__multadd>
 800db24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db26:	9001      	str	r0, [sp, #4]
 800db28:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f000 8142 	beq.w	800ddb6 <_dtoa_r+0xa56>
 800db32:	2300      	movs	r3, #0
 800db34:	4639      	mov	r1, r7
 800db36:	220a      	movs	r2, #10
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 f9b8 	bl	800deae <__multadd>
 800db3e:	9b06      	ldr	r3, [sp, #24]
 800db40:	2b00      	cmp	r3, #0
 800db42:	4607      	mov	r7, r0
 800db44:	dc4b      	bgt.n	800dbde <_dtoa_r+0x87e>
 800db46:	9b08      	ldr	r3, [sp, #32]
 800db48:	2b02      	cmp	r3, #2
 800db4a:	dd48      	ble.n	800dbde <_dtoa_r+0x87e>
 800db4c:	e011      	b.n	800db72 <_dtoa_r+0x812>
 800db4e:	d0c9      	beq.n	800dae4 <_dtoa_r+0x784>
 800db50:	9a07      	ldr	r2, [sp, #28]
 800db52:	331c      	adds	r3, #28
 800db54:	441a      	add	r2, r3
 800db56:	449a      	add	sl, r3
 800db58:	441e      	add	r6, r3
 800db5a:	4613      	mov	r3, r2
 800db5c:	e7c1      	b.n	800dae2 <_dtoa_r+0x782>
 800db5e:	4603      	mov	r3, r0
 800db60:	e7f6      	b.n	800db50 <_dtoa_r+0x7f0>
 800db62:	f1b9 0f00 	cmp.w	r9, #0
 800db66:	dc34      	bgt.n	800dbd2 <_dtoa_r+0x872>
 800db68:	9b08      	ldr	r3, [sp, #32]
 800db6a:	2b02      	cmp	r3, #2
 800db6c:	dd31      	ble.n	800dbd2 <_dtoa_r+0x872>
 800db6e:	f8cd 9018 	str.w	r9, [sp, #24]
 800db72:	9b06      	ldr	r3, [sp, #24]
 800db74:	b963      	cbnz	r3, 800db90 <_dtoa_r+0x830>
 800db76:	4629      	mov	r1, r5
 800db78:	2205      	movs	r2, #5
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 f997 	bl	800deae <__multadd>
 800db80:	4601      	mov	r1, r0
 800db82:	4605      	mov	r5, r0
 800db84:	9801      	ldr	r0, [sp, #4]
 800db86:	f000 fb5d 	bl	800e244 <__mcmp>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	f73f adfc 	bgt.w	800d788 <_dtoa_r+0x428>
 800db90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db92:	9e04      	ldr	r6, [sp, #16]
 800db94:	ea6f 0b03 	mvn.w	fp, r3
 800db98:	f04f 0900 	mov.w	r9, #0
 800db9c:	4629      	mov	r1, r5
 800db9e:	4620      	mov	r0, r4
 800dba0:	f000 f96e 	bl	800de80 <_Bfree>
 800dba4:	2f00      	cmp	r7, #0
 800dba6:	f43f aebb 	beq.w	800d920 <_dtoa_r+0x5c0>
 800dbaa:	f1b9 0f00 	cmp.w	r9, #0
 800dbae:	d005      	beq.n	800dbbc <_dtoa_r+0x85c>
 800dbb0:	45b9      	cmp	r9, r7
 800dbb2:	d003      	beq.n	800dbbc <_dtoa_r+0x85c>
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f000 f962 	bl	800de80 <_Bfree>
 800dbbc:	4639      	mov	r1, r7
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 f95e 	bl	800de80 <_Bfree>
 800dbc4:	e6ac      	b.n	800d920 <_dtoa_r+0x5c0>
 800dbc6:	2500      	movs	r5, #0
 800dbc8:	462f      	mov	r7, r5
 800dbca:	e7e1      	b.n	800db90 <_dtoa_r+0x830>
 800dbcc:	469b      	mov	fp, r3
 800dbce:	462f      	mov	r7, r5
 800dbd0:	e5da      	b.n	800d788 <_dtoa_r+0x428>
 800dbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd4:	f8cd 9018 	str.w	r9, [sp, #24]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f000 80f3 	beq.w	800ddc4 <_dtoa_r+0xa64>
 800dbde:	2e00      	cmp	r6, #0
 800dbe0:	dd05      	ble.n	800dbee <_dtoa_r+0x88e>
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f000 fad8 	bl	800e19c <__lshift>
 800dbec:	4607      	mov	r7, r0
 800dbee:	f1b8 0f00 	cmp.w	r8, #0
 800dbf2:	d04c      	beq.n	800dc8e <_dtoa_r+0x92e>
 800dbf4:	6879      	ldr	r1, [r7, #4]
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f000 f90e 	bl	800de18 <_Balloc>
 800dbfc:	693a      	ldr	r2, [r7, #16]
 800dbfe:	3202      	adds	r2, #2
 800dc00:	4606      	mov	r6, r0
 800dc02:	0092      	lsls	r2, r2, #2
 800dc04:	f107 010c 	add.w	r1, r7, #12
 800dc08:	300c      	adds	r0, #12
 800dc0a:	f7fe fded 	bl	800c7e8 <memcpy>
 800dc0e:	2201      	movs	r2, #1
 800dc10:	4631      	mov	r1, r6
 800dc12:	4620      	mov	r0, r4
 800dc14:	f000 fac2 	bl	800e19c <__lshift>
 800dc18:	9b02      	ldr	r3, [sp, #8]
 800dc1a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dc1e:	f003 0301 	and.w	r3, r3, #1
 800dc22:	46b9      	mov	r9, r7
 800dc24:	9307      	str	r3, [sp, #28]
 800dc26:	4607      	mov	r7, r0
 800dc28:	4629      	mov	r1, r5
 800dc2a:	9801      	ldr	r0, [sp, #4]
 800dc2c:	f7ff fb0c 	bl	800d248 <quorem>
 800dc30:	4649      	mov	r1, r9
 800dc32:	4606      	mov	r6, r0
 800dc34:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dc38:	9801      	ldr	r0, [sp, #4]
 800dc3a:	f000 fb03 	bl	800e244 <__mcmp>
 800dc3e:	463a      	mov	r2, r7
 800dc40:	9002      	str	r0, [sp, #8]
 800dc42:	4629      	mov	r1, r5
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 fb17 	bl	800e278 <__mdiff>
 800dc4a:	68c3      	ldr	r3, [r0, #12]
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	bb03      	cbnz	r3, 800dc92 <_dtoa_r+0x932>
 800dc50:	4601      	mov	r1, r0
 800dc52:	9009      	str	r0, [sp, #36]	; 0x24
 800dc54:	9801      	ldr	r0, [sp, #4]
 800dc56:	f000 faf5 	bl	800e244 <__mcmp>
 800dc5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	4611      	mov	r1, r2
 800dc60:	4620      	mov	r0, r4
 800dc62:	9309      	str	r3, [sp, #36]	; 0x24
 800dc64:	f000 f90c 	bl	800de80 <_Bfree>
 800dc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc6a:	b9a3      	cbnz	r3, 800dc96 <_dtoa_r+0x936>
 800dc6c:	9a08      	ldr	r2, [sp, #32]
 800dc6e:	b992      	cbnz	r2, 800dc96 <_dtoa_r+0x936>
 800dc70:	9a07      	ldr	r2, [sp, #28]
 800dc72:	b982      	cbnz	r2, 800dc96 <_dtoa_r+0x936>
 800dc74:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc78:	d029      	beq.n	800dcce <_dtoa_r+0x96e>
 800dc7a:	9b02      	ldr	r3, [sp, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	dd01      	ble.n	800dc84 <_dtoa_r+0x924>
 800dc80:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800dc84:	f10a 0601 	add.w	r6, sl, #1
 800dc88:	f88a 8000 	strb.w	r8, [sl]
 800dc8c:	e786      	b.n	800db9c <_dtoa_r+0x83c>
 800dc8e:	4638      	mov	r0, r7
 800dc90:	e7c2      	b.n	800dc18 <_dtoa_r+0x8b8>
 800dc92:	2301      	movs	r3, #1
 800dc94:	e7e3      	b.n	800dc5e <_dtoa_r+0x8fe>
 800dc96:	9a02      	ldr	r2, [sp, #8]
 800dc98:	2a00      	cmp	r2, #0
 800dc9a:	db04      	blt.n	800dca6 <_dtoa_r+0x946>
 800dc9c:	d124      	bne.n	800dce8 <_dtoa_r+0x988>
 800dc9e:	9a08      	ldr	r2, [sp, #32]
 800dca0:	bb12      	cbnz	r2, 800dce8 <_dtoa_r+0x988>
 800dca2:	9a07      	ldr	r2, [sp, #28]
 800dca4:	bb02      	cbnz	r2, 800dce8 <_dtoa_r+0x988>
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	ddec      	ble.n	800dc84 <_dtoa_r+0x924>
 800dcaa:	2201      	movs	r2, #1
 800dcac:	9901      	ldr	r1, [sp, #4]
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 fa74 	bl	800e19c <__lshift>
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	9001      	str	r0, [sp, #4]
 800dcb8:	f000 fac4 	bl	800e244 <__mcmp>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	dc03      	bgt.n	800dcc8 <_dtoa_r+0x968>
 800dcc0:	d1e0      	bne.n	800dc84 <_dtoa_r+0x924>
 800dcc2:	f018 0f01 	tst.w	r8, #1
 800dcc6:	d0dd      	beq.n	800dc84 <_dtoa_r+0x924>
 800dcc8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dccc:	d1d8      	bne.n	800dc80 <_dtoa_r+0x920>
 800dcce:	2339      	movs	r3, #57	; 0x39
 800dcd0:	f10a 0601 	add.w	r6, sl, #1
 800dcd4:	f88a 3000 	strb.w	r3, [sl]
 800dcd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dcdc:	2b39      	cmp	r3, #57	; 0x39
 800dcde:	f106 32ff 	add.w	r2, r6, #4294967295
 800dce2:	d04c      	beq.n	800dd7e <_dtoa_r+0xa1e>
 800dce4:	3301      	adds	r3, #1
 800dce6:	e051      	b.n	800dd8c <_dtoa_r+0xa2c>
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f10a 0601 	add.w	r6, sl, #1
 800dcee:	dd05      	ble.n	800dcfc <_dtoa_r+0x99c>
 800dcf0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dcf4:	d0eb      	beq.n	800dcce <_dtoa_r+0x96e>
 800dcf6:	f108 0801 	add.w	r8, r8, #1
 800dcfa:	e7c5      	b.n	800dc88 <_dtoa_r+0x928>
 800dcfc:	9b04      	ldr	r3, [sp, #16]
 800dcfe:	9a06      	ldr	r2, [sp, #24]
 800dd00:	f806 8c01 	strb.w	r8, [r6, #-1]
 800dd04:	1af3      	subs	r3, r6, r3
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d021      	beq.n	800dd4e <_dtoa_r+0x9ee>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	220a      	movs	r2, #10
 800dd0e:	9901      	ldr	r1, [sp, #4]
 800dd10:	4620      	mov	r0, r4
 800dd12:	f000 f8cc 	bl	800deae <__multadd>
 800dd16:	45b9      	cmp	r9, r7
 800dd18:	9001      	str	r0, [sp, #4]
 800dd1a:	f04f 0300 	mov.w	r3, #0
 800dd1e:	f04f 020a 	mov.w	r2, #10
 800dd22:	4649      	mov	r1, r9
 800dd24:	4620      	mov	r0, r4
 800dd26:	d105      	bne.n	800dd34 <_dtoa_r+0x9d4>
 800dd28:	f000 f8c1 	bl	800deae <__multadd>
 800dd2c:	4681      	mov	r9, r0
 800dd2e:	4607      	mov	r7, r0
 800dd30:	46b2      	mov	sl, r6
 800dd32:	e779      	b.n	800dc28 <_dtoa_r+0x8c8>
 800dd34:	f000 f8bb 	bl	800deae <__multadd>
 800dd38:	4639      	mov	r1, r7
 800dd3a:	4681      	mov	r9, r0
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	220a      	movs	r2, #10
 800dd40:	4620      	mov	r0, r4
 800dd42:	f000 f8b4 	bl	800deae <__multadd>
 800dd46:	4607      	mov	r7, r0
 800dd48:	e7f2      	b.n	800dd30 <_dtoa_r+0x9d0>
 800dd4a:	f04f 0900 	mov.w	r9, #0
 800dd4e:	2201      	movs	r2, #1
 800dd50:	9901      	ldr	r1, [sp, #4]
 800dd52:	4620      	mov	r0, r4
 800dd54:	f000 fa22 	bl	800e19c <__lshift>
 800dd58:	4629      	mov	r1, r5
 800dd5a:	9001      	str	r0, [sp, #4]
 800dd5c:	f000 fa72 	bl	800e244 <__mcmp>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	dcb9      	bgt.n	800dcd8 <_dtoa_r+0x978>
 800dd64:	d102      	bne.n	800dd6c <_dtoa_r+0xa0c>
 800dd66:	f018 0f01 	tst.w	r8, #1
 800dd6a:	d1b5      	bne.n	800dcd8 <_dtoa_r+0x978>
 800dd6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd70:	2b30      	cmp	r3, #48	; 0x30
 800dd72:	f106 32ff 	add.w	r2, r6, #4294967295
 800dd76:	f47f af11 	bne.w	800db9c <_dtoa_r+0x83c>
 800dd7a:	4616      	mov	r6, r2
 800dd7c:	e7f6      	b.n	800dd6c <_dtoa_r+0xa0c>
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d105      	bne.n	800dd90 <_dtoa_r+0xa30>
 800dd84:	9a04      	ldr	r2, [sp, #16]
 800dd86:	f10b 0b01 	add.w	fp, fp, #1
 800dd8a:	2331      	movs	r3, #49	; 0x31
 800dd8c:	7013      	strb	r3, [r2, #0]
 800dd8e:	e705      	b.n	800db9c <_dtoa_r+0x83c>
 800dd90:	4616      	mov	r6, r2
 800dd92:	e7a1      	b.n	800dcd8 <_dtoa_r+0x978>
 800dd94:	4b16      	ldr	r3, [pc, #88]	; (800ddf0 <_dtoa_r+0xa90>)
 800dd96:	f7ff bb48 	b.w	800d42a <_dtoa_r+0xca>
 800dd9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f47f ab23 	bne.w	800d3e8 <_dtoa_r+0x88>
 800dda2:	4b14      	ldr	r3, [pc, #80]	; (800ddf4 <_dtoa_r+0xa94>)
 800dda4:	f7ff bb41 	b.w	800d42a <_dtoa_r+0xca>
 800dda8:	9b08      	ldr	r3, [sp, #32]
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	f77f ae3b 	ble.w	800da26 <_dtoa_r+0x6c6>
 800ddb0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ddb4:	e64f      	b.n	800da56 <_dtoa_r+0x6f6>
 800ddb6:	9b06      	ldr	r3, [sp, #24]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	dc03      	bgt.n	800ddc4 <_dtoa_r+0xa64>
 800ddbc:	9b08      	ldr	r3, [sp, #32]
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	f73f aed7 	bgt.w	800db72 <_dtoa_r+0x812>
 800ddc4:	9e04      	ldr	r6, [sp, #16]
 800ddc6:	9801      	ldr	r0, [sp, #4]
 800ddc8:	4629      	mov	r1, r5
 800ddca:	f7ff fa3d 	bl	800d248 <quorem>
 800ddce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ddd2:	f806 8b01 	strb.w	r8, [r6], #1
 800ddd6:	9b04      	ldr	r3, [sp, #16]
 800ddd8:	9a06      	ldr	r2, [sp, #24]
 800ddda:	1af3      	subs	r3, r6, r3
 800dddc:	429a      	cmp	r2, r3
 800ddde:	ddb4      	ble.n	800dd4a <_dtoa_r+0x9ea>
 800dde0:	2300      	movs	r3, #0
 800dde2:	220a      	movs	r2, #10
 800dde4:	9901      	ldr	r1, [sp, #4]
 800dde6:	4620      	mov	r0, r4
 800dde8:	f000 f861 	bl	800deae <__multadd>
 800ddec:	9001      	str	r0, [sp, #4]
 800ddee:	e7ea      	b.n	800ddc6 <_dtoa_r+0xa66>
 800ddf0:	080194cc 	.word	0x080194cc
 800ddf4:	0801929e 	.word	0x0801929e

0800ddf8 <_localeconv_r>:
 800ddf8:	4b04      	ldr	r3, [pc, #16]	; (800de0c <_localeconv_r+0x14>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6a18      	ldr	r0, [r3, #32]
 800ddfe:	4b04      	ldr	r3, [pc, #16]	; (800de10 <_localeconv_r+0x18>)
 800de00:	2800      	cmp	r0, #0
 800de02:	bf08      	it	eq
 800de04:	4618      	moveq	r0, r3
 800de06:	30f0      	adds	r0, #240	; 0xf0
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	24000380 	.word	0x24000380
 800de10:	240003e4 	.word	0x240003e4

0800de14 <__malloc_lock>:
 800de14:	4770      	bx	lr

0800de16 <__malloc_unlock>:
 800de16:	4770      	bx	lr

0800de18 <_Balloc>:
 800de18:	b570      	push	{r4, r5, r6, lr}
 800de1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de1c:	4604      	mov	r4, r0
 800de1e:	460e      	mov	r6, r1
 800de20:	b93d      	cbnz	r5, 800de32 <_Balloc+0x1a>
 800de22:	2010      	movs	r0, #16
 800de24:	f7fe fcd0 	bl	800c7c8 <malloc>
 800de28:	6260      	str	r0, [r4, #36]	; 0x24
 800de2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de2e:	6005      	str	r5, [r0, #0]
 800de30:	60c5      	str	r5, [r0, #12]
 800de32:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800de34:	68eb      	ldr	r3, [r5, #12]
 800de36:	b183      	cbz	r3, 800de5a <_Balloc+0x42>
 800de38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800de40:	b9b8      	cbnz	r0, 800de72 <_Balloc+0x5a>
 800de42:	2101      	movs	r1, #1
 800de44:	fa01 f506 	lsl.w	r5, r1, r6
 800de48:	1d6a      	adds	r2, r5, #5
 800de4a:	0092      	lsls	r2, r2, #2
 800de4c:	4620      	mov	r0, r4
 800de4e:	f000 fabf 	bl	800e3d0 <_calloc_r>
 800de52:	b160      	cbz	r0, 800de6e <_Balloc+0x56>
 800de54:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800de58:	e00e      	b.n	800de78 <_Balloc+0x60>
 800de5a:	2221      	movs	r2, #33	; 0x21
 800de5c:	2104      	movs	r1, #4
 800de5e:	4620      	mov	r0, r4
 800de60:	f000 fab6 	bl	800e3d0 <_calloc_r>
 800de64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de66:	60e8      	str	r0, [r5, #12]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1e4      	bne.n	800de38 <_Balloc+0x20>
 800de6e:	2000      	movs	r0, #0
 800de70:	bd70      	pop	{r4, r5, r6, pc}
 800de72:	6802      	ldr	r2, [r0, #0]
 800de74:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800de78:	2300      	movs	r3, #0
 800de7a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de7e:	e7f7      	b.n	800de70 <_Balloc+0x58>

0800de80 <_Bfree>:
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800de84:	4606      	mov	r6, r0
 800de86:	460d      	mov	r5, r1
 800de88:	b93c      	cbnz	r4, 800de9a <_Bfree+0x1a>
 800de8a:	2010      	movs	r0, #16
 800de8c:	f7fe fc9c 	bl	800c7c8 <malloc>
 800de90:	6270      	str	r0, [r6, #36]	; 0x24
 800de92:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de96:	6004      	str	r4, [r0, #0]
 800de98:	60c4      	str	r4, [r0, #12]
 800de9a:	b13d      	cbz	r5, 800deac <_Bfree+0x2c>
 800de9c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800de9e:	686a      	ldr	r2, [r5, #4]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dea6:	6029      	str	r1, [r5, #0]
 800dea8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800deac:	bd70      	pop	{r4, r5, r6, pc}

0800deae <__multadd>:
 800deae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb2:	690d      	ldr	r5, [r1, #16]
 800deb4:	461f      	mov	r7, r3
 800deb6:	4606      	mov	r6, r0
 800deb8:	460c      	mov	r4, r1
 800deba:	f101 0c14 	add.w	ip, r1, #20
 800debe:	2300      	movs	r3, #0
 800dec0:	f8dc 0000 	ldr.w	r0, [ip]
 800dec4:	b281      	uxth	r1, r0
 800dec6:	fb02 7101 	mla	r1, r2, r1, r7
 800deca:	0c0f      	lsrs	r7, r1, #16
 800decc:	0c00      	lsrs	r0, r0, #16
 800dece:	fb02 7000 	mla	r0, r2, r0, r7
 800ded2:	b289      	uxth	r1, r1
 800ded4:	3301      	adds	r3, #1
 800ded6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800deda:	429d      	cmp	r5, r3
 800dedc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dee0:	f84c 1b04 	str.w	r1, [ip], #4
 800dee4:	dcec      	bgt.n	800dec0 <__multadd+0x12>
 800dee6:	b1d7      	cbz	r7, 800df1e <__multadd+0x70>
 800dee8:	68a3      	ldr	r3, [r4, #8]
 800deea:	42ab      	cmp	r3, r5
 800deec:	dc12      	bgt.n	800df14 <__multadd+0x66>
 800deee:	6861      	ldr	r1, [r4, #4]
 800def0:	4630      	mov	r0, r6
 800def2:	3101      	adds	r1, #1
 800def4:	f7ff ff90 	bl	800de18 <_Balloc>
 800def8:	6922      	ldr	r2, [r4, #16]
 800defa:	3202      	adds	r2, #2
 800defc:	f104 010c 	add.w	r1, r4, #12
 800df00:	4680      	mov	r8, r0
 800df02:	0092      	lsls	r2, r2, #2
 800df04:	300c      	adds	r0, #12
 800df06:	f7fe fc6f 	bl	800c7e8 <memcpy>
 800df0a:	4621      	mov	r1, r4
 800df0c:	4630      	mov	r0, r6
 800df0e:	f7ff ffb7 	bl	800de80 <_Bfree>
 800df12:	4644      	mov	r4, r8
 800df14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df18:	3501      	adds	r5, #1
 800df1a:	615f      	str	r7, [r3, #20]
 800df1c:	6125      	str	r5, [r4, #16]
 800df1e:	4620      	mov	r0, r4
 800df20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df24 <__hi0bits>:
 800df24:	0c02      	lsrs	r2, r0, #16
 800df26:	0412      	lsls	r2, r2, #16
 800df28:	4603      	mov	r3, r0
 800df2a:	b9b2      	cbnz	r2, 800df5a <__hi0bits+0x36>
 800df2c:	0403      	lsls	r3, r0, #16
 800df2e:	2010      	movs	r0, #16
 800df30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800df34:	bf04      	itt	eq
 800df36:	021b      	lsleq	r3, r3, #8
 800df38:	3008      	addeq	r0, #8
 800df3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800df3e:	bf04      	itt	eq
 800df40:	011b      	lsleq	r3, r3, #4
 800df42:	3004      	addeq	r0, #4
 800df44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800df48:	bf04      	itt	eq
 800df4a:	009b      	lsleq	r3, r3, #2
 800df4c:	3002      	addeq	r0, #2
 800df4e:	2b00      	cmp	r3, #0
 800df50:	db06      	blt.n	800df60 <__hi0bits+0x3c>
 800df52:	005b      	lsls	r3, r3, #1
 800df54:	d503      	bpl.n	800df5e <__hi0bits+0x3a>
 800df56:	3001      	adds	r0, #1
 800df58:	4770      	bx	lr
 800df5a:	2000      	movs	r0, #0
 800df5c:	e7e8      	b.n	800df30 <__hi0bits+0xc>
 800df5e:	2020      	movs	r0, #32
 800df60:	4770      	bx	lr

0800df62 <__lo0bits>:
 800df62:	6803      	ldr	r3, [r0, #0]
 800df64:	f013 0207 	ands.w	r2, r3, #7
 800df68:	4601      	mov	r1, r0
 800df6a:	d00b      	beq.n	800df84 <__lo0bits+0x22>
 800df6c:	07da      	lsls	r2, r3, #31
 800df6e:	d423      	bmi.n	800dfb8 <__lo0bits+0x56>
 800df70:	0798      	lsls	r0, r3, #30
 800df72:	bf49      	itett	mi
 800df74:	085b      	lsrmi	r3, r3, #1
 800df76:	089b      	lsrpl	r3, r3, #2
 800df78:	2001      	movmi	r0, #1
 800df7a:	600b      	strmi	r3, [r1, #0]
 800df7c:	bf5c      	itt	pl
 800df7e:	600b      	strpl	r3, [r1, #0]
 800df80:	2002      	movpl	r0, #2
 800df82:	4770      	bx	lr
 800df84:	b298      	uxth	r0, r3
 800df86:	b9a8      	cbnz	r0, 800dfb4 <__lo0bits+0x52>
 800df88:	0c1b      	lsrs	r3, r3, #16
 800df8a:	2010      	movs	r0, #16
 800df8c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df90:	bf04      	itt	eq
 800df92:	0a1b      	lsreq	r3, r3, #8
 800df94:	3008      	addeq	r0, #8
 800df96:	071a      	lsls	r2, r3, #28
 800df98:	bf04      	itt	eq
 800df9a:	091b      	lsreq	r3, r3, #4
 800df9c:	3004      	addeq	r0, #4
 800df9e:	079a      	lsls	r2, r3, #30
 800dfa0:	bf04      	itt	eq
 800dfa2:	089b      	lsreq	r3, r3, #2
 800dfa4:	3002      	addeq	r0, #2
 800dfa6:	07da      	lsls	r2, r3, #31
 800dfa8:	d402      	bmi.n	800dfb0 <__lo0bits+0x4e>
 800dfaa:	085b      	lsrs	r3, r3, #1
 800dfac:	d006      	beq.n	800dfbc <__lo0bits+0x5a>
 800dfae:	3001      	adds	r0, #1
 800dfb0:	600b      	str	r3, [r1, #0]
 800dfb2:	4770      	bx	lr
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	e7e9      	b.n	800df8c <__lo0bits+0x2a>
 800dfb8:	2000      	movs	r0, #0
 800dfba:	4770      	bx	lr
 800dfbc:	2020      	movs	r0, #32
 800dfbe:	4770      	bx	lr

0800dfc0 <__i2b>:
 800dfc0:	b510      	push	{r4, lr}
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	2101      	movs	r1, #1
 800dfc6:	f7ff ff27 	bl	800de18 <_Balloc>
 800dfca:	2201      	movs	r2, #1
 800dfcc:	6144      	str	r4, [r0, #20]
 800dfce:	6102      	str	r2, [r0, #16]
 800dfd0:	bd10      	pop	{r4, pc}

0800dfd2 <__multiply>:
 800dfd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd6:	4614      	mov	r4, r2
 800dfd8:	690a      	ldr	r2, [r1, #16]
 800dfda:	6923      	ldr	r3, [r4, #16]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	bfb8      	it	lt
 800dfe0:	460b      	movlt	r3, r1
 800dfe2:	4688      	mov	r8, r1
 800dfe4:	bfbc      	itt	lt
 800dfe6:	46a0      	movlt	r8, r4
 800dfe8:	461c      	movlt	r4, r3
 800dfea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dff6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dffa:	eb07 0609 	add.w	r6, r7, r9
 800dffe:	42b3      	cmp	r3, r6
 800e000:	bfb8      	it	lt
 800e002:	3101      	addlt	r1, #1
 800e004:	f7ff ff08 	bl	800de18 <_Balloc>
 800e008:	f100 0514 	add.w	r5, r0, #20
 800e00c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e010:	462b      	mov	r3, r5
 800e012:	2200      	movs	r2, #0
 800e014:	4573      	cmp	r3, lr
 800e016:	d316      	bcc.n	800e046 <__multiply+0x74>
 800e018:	f104 0214 	add.w	r2, r4, #20
 800e01c:	f108 0114 	add.w	r1, r8, #20
 800e020:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e024:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	9b00      	ldr	r3, [sp, #0]
 800e02c:	9201      	str	r2, [sp, #4]
 800e02e:	4293      	cmp	r3, r2
 800e030:	d80c      	bhi.n	800e04c <__multiply+0x7a>
 800e032:	2e00      	cmp	r6, #0
 800e034:	dd03      	ble.n	800e03e <__multiply+0x6c>
 800e036:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d05d      	beq.n	800e0fa <__multiply+0x128>
 800e03e:	6106      	str	r6, [r0, #16]
 800e040:	b003      	add	sp, #12
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	f843 2b04 	str.w	r2, [r3], #4
 800e04a:	e7e3      	b.n	800e014 <__multiply+0x42>
 800e04c:	f8b2 b000 	ldrh.w	fp, [r2]
 800e050:	f1bb 0f00 	cmp.w	fp, #0
 800e054:	d023      	beq.n	800e09e <__multiply+0xcc>
 800e056:	4689      	mov	r9, r1
 800e058:	46ac      	mov	ip, r5
 800e05a:	f04f 0800 	mov.w	r8, #0
 800e05e:	f859 4b04 	ldr.w	r4, [r9], #4
 800e062:	f8dc a000 	ldr.w	sl, [ip]
 800e066:	b2a3      	uxth	r3, r4
 800e068:	fa1f fa8a 	uxth.w	sl, sl
 800e06c:	fb0b a303 	mla	r3, fp, r3, sl
 800e070:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e074:	f8dc 4000 	ldr.w	r4, [ip]
 800e078:	4443      	add	r3, r8
 800e07a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e07e:	fb0b 840a 	mla	r4, fp, sl, r8
 800e082:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e086:	46e2      	mov	sl, ip
 800e088:	b29b      	uxth	r3, r3
 800e08a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e08e:	454f      	cmp	r7, r9
 800e090:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e094:	f84a 3b04 	str.w	r3, [sl], #4
 800e098:	d82b      	bhi.n	800e0f2 <__multiply+0x120>
 800e09a:	f8cc 8004 	str.w	r8, [ip, #4]
 800e09e:	9b01      	ldr	r3, [sp, #4]
 800e0a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e0a4:	3204      	adds	r2, #4
 800e0a6:	f1ba 0f00 	cmp.w	sl, #0
 800e0aa:	d020      	beq.n	800e0ee <__multiply+0x11c>
 800e0ac:	682b      	ldr	r3, [r5, #0]
 800e0ae:	4689      	mov	r9, r1
 800e0b0:	46a8      	mov	r8, r5
 800e0b2:	f04f 0b00 	mov.w	fp, #0
 800e0b6:	f8b9 c000 	ldrh.w	ip, [r9]
 800e0ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e0be:	fb0a 440c 	mla	r4, sl, ip, r4
 800e0c2:	445c      	add	r4, fp
 800e0c4:	46c4      	mov	ip, r8
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e0cc:	f84c 3b04 	str.w	r3, [ip], #4
 800e0d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e0d8:	0c1b      	lsrs	r3, r3, #16
 800e0da:	fb0a b303 	mla	r3, sl, r3, fp
 800e0de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e0e2:	454f      	cmp	r7, r9
 800e0e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e0e8:	d805      	bhi.n	800e0f6 <__multiply+0x124>
 800e0ea:	f8c8 3004 	str.w	r3, [r8, #4]
 800e0ee:	3504      	adds	r5, #4
 800e0f0:	e79b      	b.n	800e02a <__multiply+0x58>
 800e0f2:	46d4      	mov	ip, sl
 800e0f4:	e7b3      	b.n	800e05e <__multiply+0x8c>
 800e0f6:	46e0      	mov	r8, ip
 800e0f8:	e7dd      	b.n	800e0b6 <__multiply+0xe4>
 800e0fa:	3e01      	subs	r6, #1
 800e0fc:	e799      	b.n	800e032 <__multiply+0x60>
	...

0800e100 <__pow5mult>:
 800e100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e104:	4615      	mov	r5, r2
 800e106:	f012 0203 	ands.w	r2, r2, #3
 800e10a:	4606      	mov	r6, r0
 800e10c:	460f      	mov	r7, r1
 800e10e:	d007      	beq.n	800e120 <__pow5mult+0x20>
 800e110:	3a01      	subs	r2, #1
 800e112:	4c21      	ldr	r4, [pc, #132]	; (800e198 <__pow5mult+0x98>)
 800e114:	2300      	movs	r3, #0
 800e116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e11a:	f7ff fec8 	bl	800deae <__multadd>
 800e11e:	4607      	mov	r7, r0
 800e120:	10ad      	asrs	r5, r5, #2
 800e122:	d035      	beq.n	800e190 <__pow5mult+0x90>
 800e124:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e126:	b93c      	cbnz	r4, 800e138 <__pow5mult+0x38>
 800e128:	2010      	movs	r0, #16
 800e12a:	f7fe fb4d 	bl	800c7c8 <malloc>
 800e12e:	6270      	str	r0, [r6, #36]	; 0x24
 800e130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e134:	6004      	str	r4, [r0, #0]
 800e136:	60c4      	str	r4, [r0, #12]
 800e138:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e13c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e140:	b94c      	cbnz	r4, 800e156 <__pow5mult+0x56>
 800e142:	f240 2171 	movw	r1, #625	; 0x271
 800e146:	4630      	mov	r0, r6
 800e148:	f7ff ff3a 	bl	800dfc0 <__i2b>
 800e14c:	2300      	movs	r3, #0
 800e14e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e152:	4604      	mov	r4, r0
 800e154:	6003      	str	r3, [r0, #0]
 800e156:	f04f 0800 	mov.w	r8, #0
 800e15a:	07eb      	lsls	r3, r5, #31
 800e15c:	d50a      	bpl.n	800e174 <__pow5mult+0x74>
 800e15e:	4639      	mov	r1, r7
 800e160:	4622      	mov	r2, r4
 800e162:	4630      	mov	r0, r6
 800e164:	f7ff ff35 	bl	800dfd2 <__multiply>
 800e168:	4639      	mov	r1, r7
 800e16a:	4681      	mov	r9, r0
 800e16c:	4630      	mov	r0, r6
 800e16e:	f7ff fe87 	bl	800de80 <_Bfree>
 800e172:	464f      	mov	r7, r9
 800e174:	106d      	asrs	r5, r5, #1
 800e176:	d00b      	beq.n	800e190 <__pow5mult+0x90>
 800e178:	6820      	ldr	r0, [r4, #0]
 800e17a:	b938      	cbnz	r0, 800e18c <__pow5mult+0x8c>
 800e17c:	4622      	mov	r2, r4
 800e17e:	4621      	mov	r1, r4
 800e180:	4630      	mov	r0, r6
 800e182:	f7ff ff26 	bl	800dfd2 <__multiply>
 800e186:	6020      	str	r0, [r4, #0]
 800e188:	f8c0 8000 	str.w	r8, [r0]
 800e18c:	4604      	mov	r4, r0
 800e18e:	e7e4      	b.n	800e15a <__pow5mult+0x5a>
 800e190:	4638      	mov	r0, r7
 800e192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e196:	bf00      	nop
 800e198:	080193a0 	.word	0x080193a0

0800e19c <__lshift>:
 800e19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a0:	460c      	mov	r4, r1
 800e1a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	6849      	ldr	r1, [r1, #4]
 800e1aa:	eb0a 0903 	add.w	r9, sl, r3
 800e1ae:	68a3      	ldr	r3, [r4, #8]
 800e1b0:	4607      	mov	r7, r0
 800e1b2:	4616      	mov	r6, r2
 800e1b4:	f109 0501 	add.w	r5, r9, #1
 800e1b8:	42ab      	cmp	r3, r5
 800e1ba:	db32      	blt.n	800e222 <__lshift+0x86>
 800e1bc:	4638      	mov	r0, r7
 800e1be:	f7ff fe2b 	bl	800de18 <_Balloc>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	4680      	mov	r8, r0
 800e1c6:	f100 0114 	add.w	r1, r0, #20
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	4553      	cmp	r3, sl
 800e1ce:	db2b      	blt.n	800e228 <__lshift+0x8c>
 800e1d0:	6920      	ldr	r0, [r4, #16]
 800e1d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1d6:	f104 0314 	add.w	r3, r4, #20
 800e1da:	f016 021f 	ands.w	r2, r6, #31
 800e1de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1e6:	d025      	beq.n	800e234 <__lshift+0x98>
 800e1e8:	f1c2 0e20 	rsb	lr, r2, #32
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	681e      	ldr	r6, [r3, #0]
 800e1f0:	468a      	mov	sl, r1
 800e1f2:	4096      	lsls	r6, r2
 800e1f4:	4330      	orrs	r0, r6
 800e1f6:	f84a 0b04 	str.w	r0, [sl], #4
 800e1fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800e1fe:	459c      	cmp	ip, r3
 800e200:	fa20 f00e 	lsr.w	r0, r0, lr
 800e204:	d814      	bhi.n	800e230 <__lshift+0x94>
 800e206:	6048      	str	r0, [r1, #4]
 800e208:	b108      	cbz	r0, 800e20e <__lshift+0x72>
 800e20a:	f109 0502 	add.w	r5, r9, #2
 800e20e:	3d01      	subs	r5, #1
 800e210:	4638      	mov	r0, r7
 800e212:	f8c8 5010 	str.w	r5, [r8, #16]
 800e216:	4621      	mov	r1, r4
 800e218:	f7ff fe32 	bl	800de80 <_Bfree>
 800e21c:	4640      	mov	r0, r8
 800e21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e222:	3101      	adds	r1, #1
 800e224:	005b      	lsls	r3, r3, #1
 800e226:	e7c7      	b.n	800e1b8 <__lshift+0x1c>
 800e228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e22c:	3301      	adds	r3, #1
 800e22e:	e7cd      	b.n	800e1cc <__lshift+0x30>
 800e230:	4651      	mov	r1, sl
 800e232:	e7dc      	b.n	800e1ee <__lshift+0x52>
 800e234:	3904      	subs	r1, #4
 800e236:	f853 2b04 	ldr.w	r2, [r3], #4
 800e23a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e23e:	459c      	cmp	ip, r3
 800e240:	d8f9      	bhi.n	800e236 <__lshift+0x9a>
 800e242:	e7e4      	b.n	800e20e <__lshift+0x72>

0800e244 <__mcmp>:
 800e244:	6903      	ldr	r3, [r0, #16]
 800e246:	690a      	ldr	r2, [r1, #16]
 800e248:	1a9b      	subs	r3, r3, r2
 800e24a:	b530      	push	{r4, r5, lr}
 800e24c:	d10c      	bne.n	800e268 <__mcmp+0x24>
 800e24e:	0092      	lsls	r2, r2, #2
 800e250:	3014      	adds	r0, #20
 800e252:	3114      	adds	r1, #20
 800e254:	1884      	adds	r4, r0, r2
 800e256:	4411      	add	r1, r2
 800e258:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e25c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e260:	4295      	cmp	r5, r2
 800e262:	d003      	beq.n	800e26c <__mcmp+0x28>
 800e264:	d305      	bcc.n	800e272 <__mcmp+0x2e>
 800e266:	2301      	movs	r3, #1
 800e268:	4618      	mov	r0, r3
 800e26a:	bd30      	pop	{r4, r5, pc}
 800e26c:	42a0      	cmp	r0, r4
 800e26e:	d3f3      	bcc.n	800e258 <__mcmp+0x14>
 800e270:	e7fa      	b.n	800e268 <__mcmp+0x24>
 800e272:	f04f 33ff 	mov.w	r3, #4294967295
 800e276:	e7f7      	b.n	800e268 <__mcmp+0x24>

0800e278 <__mdiff>:
 800e278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e27c:	460d      	mov	r5, r1
 800e27e:	4607      	mov	r7, r0
 800e280:	4611      	mov	r1, r2
 800e282:	4628      	mov	r0, r5
 800e284:	4614      	mov	r4, r2
 800e286:	f7ff ffdd 	bl	800e244 <__mcmp>
 800e28a:	1e06      	subs	r6, r0, #0
 800e28c:	d108      	bne.n	800e2a0 <__mdiff+0x28>
 800e28e:	4631      	mov	r1, r6
 800e290:	4638      	mov	r0, r7
 800e292:	f7ff fdc1 	bl	800de18 <_Balloc>
 800e296:	2301      	movs	r3, #1
 800e298:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a0:	bfa4      	itt	ge
 800e2a2:	4623      	movge	r3, r4
 800e2a4:	462c      	movge	r4, r5
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	6861      	ldr	r1, [r4, #4]
 800e2aa:	bfa6      	itte	ge
 800e2ac:	461d      	movge	r5, r3
 800e2ae:	2600      	movge	r6, #0
 800e2b0:	2601      	movlt	r6, #1
 800e2b2:	f7ff fdb1 	bl	800de18 <_Balloc>
 800e2b6:	692b      	ldr	r3, [r5, #16]
 800e2b8:	60c6      	str	r6, [r0, #12]
 800e2ba:	6926      	ldr	r6, [r4, #16]
 800e2bc:	f105 0914 	add.w	r9, r5, #20
 800e2c0:	f104 0214 	add.w	r2, r4, #20
 800e2c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e2c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e2cc:	f100 0514 	add.w	r5, r0, #20
 800e2d0:	f04f 0e00 	mov.w	lr, #0
 800e2d4:	f852 ab04 	ldr.w	sl, [r2], #4
 800e2d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800e2dc:	fa1e f18a 	uxtah	r1, lr, sl
 800e2e0:	b2a3      	uxth	r3, r4
 800e2e2:	1ac9      	subs	r1, r1, r3
 800e2e4:	0c23      	lsrs	r3, r4, #16
 800e2e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e2ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e2ee:	b289      	uxth	r1, r1
 800e2f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e2f4:	45c8      	cmp	r8, r9
 800e2f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e2fa:	4694      	mov	ip, r2
 800e2fc:	f845 3b04 	str.w	r3, [r5], #4
 800e300:	d8e8      	bhi.n	800e2d4 <__mdiff+0x5c>
 800e302:	45bc      	cmp	ip, r7
 800e304:	d304      	bcc.n	800e310 <__mdiff+0x98>
 800e306:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e30a:	b183      	cbz	r3, 800e32e <__mdiff+0xb6>
 800e30c:	6106      	str	r6, [r0, #16]
 800e30e:	e7c5      	b.n	800e29c <__mdiff+0x24>
 800e310:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e314:	fa1e f381 	uxtah	r3, lr, r1
 800e318:	141a      	asrs	r2, r3, #16
 800e31a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e31e:	b29b      	uxth	r3, r3
 800e320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e324:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e328:	f845 3b04 	str.w	r3, [r5], #4
 800e32c:	e7e9      	b.n	800e302 <__mdiff+0x8a>
 800e32e:	3e01      	subs	r6, #1
 800e330:	e7e9      	b.n	800e306 <__mdiff+0x8e>

0800e332 <__d2b>:
 800e332:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e336:	460e      	mov	r6, r1
 800e338:	2101      	movs	r1, #1
 800e33a:	ec59 8b10 	vmov	r8, r9, d0
 800e33e:	4615      	mov	r5, r2
 800e340:	f7ff fd6a 	bl	800de18 <_Balloc>
 800e344:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e348:	4607      	mov	r7, r0
 800e34a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e34e:	bb34      	cbnz	r4, 800e39e <__d2b+0x6c>
 800e350:	9301      	str	r3, [sp, #4]
 800e352:	f1b8 0300 	subs.w	r3, r8, #0
 800e356:	d027      	beq.n	800e3a8 <__d2b+0x76>
 800e358:	a802      	add	r0, sp, #8
 800e35a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e35e:	f7ff fe00 	bl	800df62 <__lo0bits>
 800e362:	9900      	ldr	r1, [sp, #0]
 800e364:	b1f0      	cbz	r0, 800e3a4 <__d2b+0x72>
 800e366:	9a01      	ldr	r2, [sp, #4]
 800e368:	f1c0 0320 	rsb	r3, r0, #32
 800e36c:	fa02 f303 	lsl.w	r3, r2, r3
 800e370:	430b      	orrs	r3, r1
 800e372:	40c2      	lsrs	r2, r0
 800e374:	617b      	str	r3, [r7, #20]
 800e376:	9201      	str	r2, [sp, #4]
 800e378:	9b01      	ldr	r3, [sp, #4]
 800e37a:	61bb      	str	r3, [r7, #24]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	bf14      	ite	ne
 800e380:	2102      	movne	r1, #2
 800e382:	2101      	moveq	r1, #1
 800e384:	6139      	str	r1, [r7, #16]
 800e386:	b1c4      	cbz	r4, 800e3ba <__d2b+0x88>
 800e388:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e38c:	4404      	add	r4, r0
 800e38e:	6034      	str	r4, [r6, #0]
 800e390:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e394:	6028      	str	r0, [r5, #0]
 800e396:	4638      	mov	r0, r7
 800e398:	b003      	add	sp, #12
 800e39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e39e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3a2:	e7d5      	b.n	800e350 <__d2b+0x1e>
 800e3a4:	6179      	str	r1, [r7, #20]
 800e3a6:	e7e7      	b.n	800e378 <__d2b+0x46>
 800e3a8:	a801      	add	r0, sp, #4
 800e3aa:	f7ff fdda 	bl	800df62 <__lo0bits>
 800e3ae:	9b01      	ldr	r3, [sp, #4]
 800e3b0:	617b      	str	r3, [r7, #20]
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	6139      	str	r1, [r7, #16]
 800e3b6:	3020      	adds	r0, #32
 800e3b8:	e7e5      	b.n	800e386 <__d2b+0x54>
 800e3ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e3be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e3c2:	6030      	str	r0, [r6, #0]
 800e3c4:	6918      	ldr	r0, [r3, #16]
 800e3c6:	f7ff fdad 	bl	800df24 <__hi0bits>
 800e3ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e3ce:	e7e1      	b.n	800e394 <__d2b+0x62>

0800e3d0 <_calloc_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	fb02 f401 	mul.w	r4, r2, r1
 800e3d6:	4621      	mov	r1, r4
 800e3d8:	f7fe fa68 	bl	800c8ac <_malloc_r>
 800e3dc:	4605      	mov	r5, r0
 800e3de:	b118      	cbz	r0, 800e3e8 <_calloc_r+0x18>
 800e3e0:	4622      	mov	r2, r4
 800e3e2:	2100      	movs	r1, #0
 800e3e4:	f7fe fa0b 	bl	800c7fe <memset>
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}

0800e3ec <__ssputs_r>:
 800e3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f0:	688e      	ldr	r6, [r1, #8]
 800e3f2:	429e      	cmp	r6, r3
 800e3f4:	4682      	mov	sl, r0
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	4690      	mov	r8, r2
 800e3fa:	4699      	mov	r9, r3
 800e3fc:	d837      	bhi.n	800e46e <__ssputs_r+0x82>
 800e3fe:	898a      	ldrh	r2, [r1, #12]
 800e400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e404:	d031      	beq.n	800e46a <__ssputs_r+0x7e>
 800e406:	6825      	ldr	r5, [r4, #0]
 800e408:	6909      	ldr	r1, [r1, #16]
 800e40a:	1a6f      	subs	r7, r5, r1
 800e40c:	6965      	ldr	r5, [r4, #20]
 800e40e:	2302      	movs	r3, #2
 800e410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e414:	fb95 f5f3 	sdiv	r5, r5, r3
 800e418:	f109 0301 	add.w	r3, r9, #1
 800e41c:	443b      	add	r3, r7
 800e41e:	429d      	cmp	r5, r3
 800e420:	bf38      	it	cc
 800e422:	461d      	movcc	r5, r3
 800e424:	0553      	lsls	r3, r2, #21
 800e426:	d530      	bpl.n	800e48a <__ssputs_r+0x9e>
 800e428:	4629      	mov	r1, r5
 800e42a:	f7fe fa3f 	bl	800c8ac <_malloc_r>
 800e42e:	4606      	mov	r6, r0
 800e430:	b950      	cbnz	r0, 800e448 <__ssputs_r+0x5c>
 800e432:	230c      	movs	r3, #12
 800e434:	f8ca 3000 	str.w	r3, [sl]
 800e438:	89a3      	ldrh	r3, [r4, #12]
 800e43a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e43e:	81a3      	strh	r3, [r4, #12]
 800e440:	f04f 30ff 	mov.w	r0, #4294967295
 800e444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e448:	463a      	mov	r2, r7
 800e44a:	6921      	ldr	r1, [r4, #16]
 800e44c:	f7fe f9cc 	bl	800c7e8 <memcpy>
 800e450:	89a3      	ldrh	r3, [r4, #12]
 800e452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e45a:	81a3      	strh	r3, [r4, #12]
 800e45c:	6126      	str	r6, [r4, #16]
 800e45e:	6165      	str	r5, [r4, #20]
 800e460:	443e      	add	r6, r7
 800e462:	1bed      	subs	r5, r5, r7
 800e464:	6026      	str	r6, [r4, #0]
 800e466:	60a5      	str	r5, [r4, #8]
 800e468:	464e      	mov	r6, r9
 800e46a:	454e      	cmp	r6, r9
 800e46c:	d900      	bls.n	800e470 <__ssputs_r+0x84>
 800e46e:	464e      	mov	r6, r9
 800e470:	4632      	mov	r2, r6
 800e472:	4641      	mov	r1, r8
 800e474:	6820      	ldr	r0, [r4, #0]
 800e476:	f000 f91d 	bl	800e6b4 <memmove>
 800e47a:	68a3      	ldr	r3, [r4, #8]
 800e47c:	1b9b      	subs	r3, r3, r6
 800e47e:	60a3      	str	r3, [r4, #8]
 800e480:	6823      	ldr	r3, [r4, #0]
 800e482:	441e      	add	r6, r3
 800e484:	6026      	str	r6, [r4, #0]
 800e486:	2000      	movs	r0, #0
 800e488:	e7dc      	b.n	800e444 <__ssputs_r+0x58>
 800e48a:	462a      	mov	r2, r5
 800e48c:	f000 f92b 	bl	800e6e6 <_realloc_r>
 800e490:	4606      	mov	r6, r0
 800e492:	2800      	cmp	r0, #0
 800e494:	d1e2      	bne.n	800e45c <__ssputs_r+0x70>
 800e496:	6921      	ldr	r1, [r4, #16]
 800e498:	4650      	mov	r0, sl
 800e49a:	f7fe f9b9 	bl	800c810 <_free_r>
 800e49e:	e7c8      	b.n	800e432 <__ssputs_r+0x46>

0800e4a0 <_svfiprintf_r>:
 800e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	461d      	mov	r5, r3
 800e4a6:	898b      	ldrh	r3, [r1, #12]
 800e4a8:	061f      	lsls	r7, r3, #24
 800e4aa:	b09d      	sub	sp, #116	; 0x74
 800e4ac:	4680      	mov	r8, r0
 800e4ae:	460c      	mov	r4, r1
 800e4b0:	4616      	mov	r6, r2
 800e4b2:	d50f      	bpl.n	800e4d4 <_svfiprintf_r+0x34>
 800e4b4:	690b      	ldr	r3, [r1, #16]
 800e4b6:	b96b      	cbnz	r3, 800e4d4 <_svfiprintf_r+0x34>
 800e4b8:	2140      	movs	r1, #64	; 0x40
 800e4ba:	f7fe f9f7 	bl	800c8ac <_malloc_r>
 800e4be:	6020      	str	r0, [r4, #0]
 800e4c0:	6120      	str	r0, [r4, #16]
 800e4c2:	b928      	cbnz	r0, 800e4d0 <_svfiprintf_r+0x30>
 800e4c4:	230c      	movs	r3, #12
 800e4c6:	f8c8 3000 	str.w	r3, [r8]
 800e4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ce:	e0c8      	b.n	800e662 <_svfiprintf_r+0x1c2>
 800e4d0:	2340      	movs	r3, #64	; 0x40
 800e4d2:	6163      	str	r3, [r4, #20]
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e4d8:	2320      	movs	r3, #32
 800e4da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4de:	2330      	movs	r3, #48	; 0x30
 800e4e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4e4:	9503      	str	r5, [sp, #12]
 800e4e6:	f04f 0b01 	mov.w	fp, #1
 800e4ea:	4637      	mov	r7, r6
 800e4ec:	463d      	mov	r5, r7
 800e4ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e4f2:	b10b      	cbz	r3, 800e4f8 <_svfiprintf_r+0x58>
 800e4f4:	2b25      	cmp	r3, #37	; 0x25
 800e4f6:	d13e      	bne.n	800e576 <_svfiprintf_r+0xd6>
 800e4f8:	ebb7 0a06 	subs.w	sl, r7, r6
 800e4fc:	d00b      	beq.n	800e516 <_svfiprintf_r+0x76>
 800e4fe:	4653      	mov	r3, sl
 800e500:	4632      	mov	r2, r6
 800e502:	4621      	mov	r1, r4
 800e504:	4640      	mov	r0, r8
 800e506:	f7ff ff71 	bl	800e3ec <__ssputs_r>
 800e50a:	3001      	adds	r0, #1
 800e50c:	f000 80a4 	beq.w	800e658 <_svfiprintf_r+0x1b8>
 800e510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e512:	4453      	add	r3, sl
 800e514:	9309      	str	r3, [sp, #36]	; 0x24
 800e516:	783b      	ldrb	r3, [r7, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f000 809d 	beq.w	800e658 <_svfiprintf_r+0x1b8>
 800e51e:	2300      	movs	r3, #0
 800e520:	f04f 32ff 	mov.w	r2, #4294967295
 800e524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e528:	9304      	str	r3, [sp, #16]
 800e52a:	9307      	str	r3, [sp, #28]
 800e52c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e530:	931a      	str	r3, [sp, #104]	; 0x68
 800e532:	462f      	mov	r7, r5
 800e534:	2205      	movs	r2, #5
 800e536:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e53a:	4850      	ldr	r0, [pc, #320]	; (800e67c <_svfiprintf_r+0x1dc>)
 800e53c:	f7f1 ff38 	bl	80003b0 <memchr>
 800e540:	9b04      	ldr	r3, [sp, #16]
 800e542:	b9d0      	cbnz	r0, 800e57a <_svfiprintf_r+0xda>
 800e544:	06d9      	lsls	r1, r3, #27
 800e546:	bf44      	itt	mi
 800e548:	2220      	movmi	r2, #32
 800e54a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e54e:	071a      	lsls	r2, r3, #28
 800e550:	bf44      	itt	mi
 800e552:	222b      	movmi	r2, #43	; 0x2b
 800e554:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e558:	782a      	ldrb	r2, [r5, #0]
 800e55a:	2a2a      	cmp	r2, #42	; 0x2a
 800e55c:	d015      	beq.n	800e58a <_svfiprintf_r+0xea>
 800e55e:	9a07      	ldr	r2, [sp, #28]
 800e560:	462f      	mov	r7, r5
 800e562:	2000      	movs	r0, #0
 800e564:	250a      	movs	r5, #10
 800e566:	4639      	mov	r1, r7
 800e568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e56c:	3b30      	subs	r3, #48	; 0x30
 800e56e:	2b09      	cmp	r3, #9
 800e570:	d94d      	bls.n	800e60e <_svfiprintf_r+0x16e>
 800e572:	b1b8      	cbz	r0, 800e5a4 <_svfiprintf_r+0x104>
 800e574:	e00f      	b.n	800e596 <_svfiprintf_r+0xf6>
 800e576:	462f      	mov	r7, r5
 800e578:	e7b8      	b.n	800e4ec <_svfiprintf_r+0x4c>
 800e57a:	4a40      	ldr	r2, [pc, #256]	; (800e67c <_svfiprintf_r+0x1dc>)
 800e57c:	1a80      	subs	r0, r0, r2
 800e57e:	fa0b f000 	lsl.w	r0, fp, r0
 800e582:	4318      	orrs	r0, r3
 800e584:	9004      	str	r0, [sp, #16]
 800e586:	463d      	mov	r5, r7
 800e588:	e7d3      	b.n	800e532 <_svfiprintf_r+0x92>
 800e58a:	9a03      	ldr	r2, [sp, #12]
 800e58c:	1d11      	adds	r1, r2, #4
 800e58e:	6812      	ldr	r2, [r2, #0]
 800e590:	9103      	str	r1, [sp, #12]
 800e592:	2a00      	cmp	r2, #0
 800e594:	db01      	blt.n	800e59a <_svfiprintf_r+0xfa>
 800e596:	9207      	str	r2, [sp, #28]
 800e598:	e004      	b.n	800e5a4 <_svfiprintf_r+0x104>
 800e59a:	4252      	negs	r2, r2
 800e59c:	f043 0302 	orr.w	r3, r3, #2
 800e5a0:	9207      	str	r2, [sp, #28]
 800e5a2:	9304      	str	r3, [sp, #16]
 800e5a4:	783b      	ldrb	r3, [r7, #0]
 800e5a6:	2b2e      	cmp	r3, #46	; 0x2e
 800e5a8:	d10c      	bne.n	800e5c4 <_svfiprintf_r+0x124>
 800e5aa:	787b      	ldrb	r3, [r7, #1]
 800e5ac:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ae:	d133      	bne.n	800e618 <_svfiprintf_r+0x178>
 800e5b0:	9b03      	ldr	r3, [sp, #12]
 800e5b2:	1d1a      	adds	r2, r3, #4
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	9203      	str	r2, [sp, #12]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	bfb8      	it	lt
 800e5bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5c0:	3702      	adds	r7, #2
 800e5c2:	9305      	str	r3, [sp, #20]
 800e5c4:	4d2e      	ldr	r5, [pc, #184]	; (800e680 <_svfiprintf_r+0x1e0>)
 800e5c6:	7839      	ldrb	r1, [r7, #0]
 800e5c8:	2203      	movs	r2, #3
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f7f1 fef0 	bl	80003b0 <memchr>
 800e5d0:	b138      	cbz	r0, 800e5e2 <_svfiprintf_r+0x142>
 800e5d2:	2340      	movs	r3, #64	; 0x40
 800e5d4:	1b40      	subs	r0, r0, r5
 800e5d6:	fa03 f000 	lsl.w	r0, r3, r0
 800e5da:	9b04      	ldr	r3, [sp, #16]
 800e5dc:	4303      	orrs	r3, r0
 800e5de:	3701      	adds	r7, #1
 800e5e0:	9304      	str	r3, [sp, #16]
 800e5e2:	7839      	ldrb	r1, [r7, #0]
 800e5e4:	4827      	ldr	r0, [pc, #156]	; (800e684 <_svfiprintf_r+0x1e4>)
 800e5e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5ea:	2206      	movs	r2, #6
 800e5ec:	1c7e      	adds	r6, r7, #1
 800e5ee:	f7f1 fedf 	bl	80003b0 <memchr>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d038      	beq.n	800e668 <_svfiprintf_r+0x1c8>
 800e5f6:	4b24      	ldr	r3, [pc, #144]	; (800e688 <_svfiprintf_r+0x1e8>)
 800e5f8:	bb13      	cbnz	r3, 800e640 <_svfiprintf_r+0x1a0>
 800e5fa:	9b03      	ldr	r3, [sp, #12]
 800e5fc:	3307      	adds	r3, #7
 800e5fe:	f023 0307 	bic.w	r3, r3, #7
 800e602:	3308      	adds	r3, #8
 800e604:	9303      	str	r3, [sp, #12]
 800e606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e608:	444b      	add	r3, r9
 800e60a:	9309      	str	r3, [sp, #36]	; 0x24
 800e60c:	e76d      	b.n	800e4ea <_svfiprintf_r+0x4a>
 800e60e:	fb05 3202 	mla	r2, r5, r2, r3
 800e612:	2001      	movs	r0, #1
 800e614:	460f      	mov	r7, r1
 800e616:	e7a6      	b.n	800e566 <_svfiprintf_r+0xc6>
 800e618:	2300      	movs	r3, #0
 800e61a:	3701      	adds	r7, #1
 800e61c:	9305      	str	r3, [sp, #20]
 800e61e:	4619      	mov	r1, r3
 800e620:	250a      	movs	r5, #10
 800e622:	4638      	mov	r0, r7
 800e624:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e628:	3a30      	subs	r2, #48	; 0x30
 800e62a:	2a09      	cmp	r2, #9
 800e62c:	d903      	bls.n	800e636 <_svfiprintf_r+0x196>
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d0c8      	beq.n	800e5c4 <_svfiprintf_r+0x124>
 800e632:	9105      	str	r1, [sp, #20]
 800e634:	e7c6      	b.n	800e5c4 <_svfiprintf_r+0x124>
 800e636:	fb05 2101 	mla	r1, r5, r1, r2
 800e63a:	2301      	movs	r3, #1
 800e63c:	4607      	mov	r7, r0
 800e63e:	e7f0      	b.n	800e622 <_svfiprintf_r+0x182>
 800e640:	ab03      	add	r3, sp, #12
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	4622      	mov	r2, r4
 800e646:	4b11      	ldr	r3, [pc, #68]	; (800e68c <_svfiprintf_r+0x1ec>)
 800e648:	a904      	add	r1, sp, #16
 800e64a:	4640      	mov	r0, r8
 800e64c:	f7fe fa10 	bl	800ca70 <_printf_float>
 800e650:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e654:	4681      	mov	r9, r0
 800e656:	d1d6      	bne.n	800e606 <_svfiprintf_r+0x166>
 800e658:	89a3      	ldrh	r3, [r4, #12]
 800e65a:	065b      	lsls	r3, r3, #25
 800e65c:	f53f af35 	bmi.w	800e4ca <_svfiprintf_r+0x2a>
 800e660:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e662:	b01d      	add	sp, #116	; 0x74
 800e664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e668:	ab03      	add	r3, sp, #12
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	4622      	mov	r2, r4
 800e66e:	4b07      	ldr	r3, [pc, #28]	; (800e68c <_svfiprintf_r+0x1ec>)
 800e670:	a904      	add	r1, sp, #16
 800e672:	4640      	mov	r0, r8
 800e674:	f7fe fc9e 	bl	800cfb4 <_printf_i>
 800e678:	e7ea      	b.n	800e650 <_svfiprintf_r+0x1b0>
 800e67a:	bf00      	nop
 800e67c:	080193ac 	.word	0x080193ac
 800e680:	080193b2 	.word	0x080193b2
 800e684:	080193b6 	.word	0x080193b6
 800e688:	0800ca71 	.word	0x0800ca71
 800e68c:	0800e3ed 	.word	0x0800e3ed

0800e690 <__ascii_mbtowc>:
 800e690:	b082      	sub	sp, #8
 800e692:	b901      	cbnz	r1, 800e696 <__ascii_mbtowc+0x6>
 800e694:	a901      	add	r1, sp, #4
 800e696:	b142      	cbz	r2, 800e6aa <__ascii_mbtowc+0x1a>
 800e698:	b14b      	cbz	r3, 800e6ae <__ascii_mbtowc+0x1e>
 800e69a:	7813      	ldrb	r3, [r2, #0]
 800e69c:	600b      	str	r3, [r1, #0]
 800e69e:	7812      	ldrb	r2, [r2, #0]
 800e6a0:	1c10      	adds	r0, r2, #0
 800e6a2:	bf18      	it	ne
 800e6a4:	2001      	movne	r0, #1
 800e6a6:	b002      	add	sp, #8
 800e6a8:	4770      	bx	lr
 800e6aa:	4610      	mov	r0, r2
 800e6ac:	e7fb      	b.n	800e6a6 <__ascii_mbtowc+0x16>
 800e6ae:	f06f 0001 	mvn.w	r0, #1
 800e6b2:	e7f8      	b.n	800e6a6 <__ascii_mbtowc+0x16>

0800e6b4 <memmove>:
 800e6b4:	4288      	cmp	r0, r1
 800e6b6:	b510      	push	{r4, lr}
 800e6b8:	eb01 0302 	add.w	r3, r1, r2
 800e6bc:	d807      	bhi.n	800e6ce <memmove+0x1a>
 800e6be:	1e42      	subs	r2, r0, #1
 800e6c0:	4299      	cmp	r1, r3
 800e6c2:	d00a      	beq.n	800e6da <memmove+0x26>
 800e6c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e6cc:	e7f8      	b.n	800e6c0 <memmove+0xc>
 800e6ce:	4283      	cmp	r3, r0
 800e6d0:	d9f5      	bls.n	800e6be <memmove+0xa>
 800e6d2:	1881      	adds	r1, r0, r2
 800e6d4:	1ad2      	subs	r2, r2, r3
 800e6d6:	42d3      	cmn	r3, r2
 800e6d8:	d100      	bne.n	800e6dc <memmove+0x28>
 800e6da:	bd10      	pop	{r4, pc}
 800e6dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e6e4:	e7f7      	b.n	800e6d6 <memmove+0x22>

0800e6e6 <_realloc_r>:
 800e6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	4614      	mov	r4, r2
 800e6ec:	460e      	mov	r6, r1
 800e6ee:	b921      	cbnz	r1, 800e6fa <_realloc_r+0x14>
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e6f6:	f7fe b8d9 	b.w	800c8ac <_malloc_r>
 800e6fa:	b922      	cbnz	r2, 800e706 <_realloc_r+0x20>
 800e6fc:	f7fe f888 	bl	800c810 <_free_r>
 800e700:	4625      	mov	r5, r4
 800e702:	4628      	mov	r0, r5
 800e704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e706:	f000 f821 	bl	800e74c <_malloc_usable_size_r>
 800e70a:	42a0      	cmp	r0, r4
 800e70c:	d20f      	bcs.n	800e72e <_realloc_r+0x48>
 800e70e:	4621      	mov	r1, r4
 800e710:	4638      	mov	r0, r7
 800e712:	f7fe f8cb 	bl	800c8ac <_malloc_r>
 800e716:	4605      	mov	r5, r0
 800e718:	2800      	cmp	r0, #0
 800e71a:	d0f2      	beq.n	800e702 <_realloc_r+0x1c>
 800e71c:	4631      	mov	r1, r6
 800e71e:	4622      	mov	r2, r4
 800e720:	f7fe f862 	bl	800c7e8 <memcpy>
 800e724:	4631      	mov	r1, r6
 800e726:	4638      	mov	r0, r7
 800e728:	f7fe f872 	bl	800c810 <_free_r>
 800e72c:	e7e9      	b.n	800e702 <_realloc_r+0x1c>
 800e72e:	4635      	mov	r5, r6
 800e730:	e7e7      	b.n	800e702 <_realloc_r+0x1c>

0800e732 <__ascii_wctomb>:
 800e732:	b149      	cbz	r1, 800e748 <__ascii_wctomb+0x16>
 800e734:	2aff      	cmp	r2, #255	; 0xff
 800e736:	bf85      	ittet	hi
 800e738:	238a      	movhi	r3, #138	; 0x8a
 800e73a:	6003      	strhi	r3, [r0, #0]
 800e73c:	700a      	strbls	r2, [r1, #0]
 800e73e:	f04f 30ff 	movhi.w	r0, #4294967295
 800e742:	bf98      	it	ls
 800e744:	2001      	movls	r0, #1
 800e746:	4770      	bx	lr
 800e748:	4608      	mov	r0, r1
 800e74a:	4770      	bx	lr

0800e74c <_malloc_usable_size_r>:
 800e74c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e750:	1f18      	subs	r0, r3, #4
 800e752:	2b00      	cmp	r3, #0
 800e754:	bfbc      	itt	lt
 800e756:	580b      	ldrlt	r3, [r1, r0]
 800e758:	18c0      	addlt	r0, r0, r3
 800e75a:	4770      	bx	lr
 800e75c:	0000      	movs	r0, r0
	...

0800e760 <cos>:
 800e760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e762:	eeb0 7b40 	vmov.f64	d7, d0
 800e766:	ee17 3a90 	vmov	r3, s15
 800e76a:	4a19      	ldr	r2, [pc, #100]	; (800e7d0 <cos+0x70>)
 800e76c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e770:	4293      	cmp	r3, r2
 800e772:	dc04      	bgt.n	800e77e <cos+0x1e>
 800e774:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800e7c8 <cos+0x68>
 800e778:	f000 ff4a 	bl	800f610 <__kernel_cos>
 800e77c:	e004      	b.n	800e788 <cos+0x28>
 800e77e:	4a15      	ldr	r2, [pc, #84]	; (800e7d4 <cos+0x74>)
 800e780:	4293      	cmp	r3, r2
 800e782:	dd04      	ble.n	800e78e <cos+0x2e>
 800e784:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e788:	b005      	add	sp, #20
 800e78a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e78e:	4668      	mov	r0, sp
 800e790:	f000 fdfe 	bl	800f390 <__ieee754_rem_pio2>
 800e794:	f000 0003 	and.w	r0, r0, #3
 800e798:	2801      	cmp	r0, #1
 800e79a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e79e:	ed9d 0b00 	vldr	d0, [sp]
 800e7a2:	d007      	beq.n	800e7b4 <cos+0x54>
 800e7a4:	2802      	cmp	r0, #2
 800e7a6:	d00a      	beq.n	800e7be <cos+0x5e>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d0e5      	beq.n	800e778 <cos+0x18>
 800e7ac:	2001      	movs	r0, #1
 800e7ae:	f001 fa37 	bl	800fc20 <__kernel_sin>
 800e7b2:	e7e9      	b.n	800e788 <cos+0x28>
 800e7b4:	f001 fa34 	bl	800fc20 <__kernel_sin>
 800e7b8:	eeb1 0b40 	vneg.f64	d0, d0
 800e7bc:	e7e4      	b.n	800e788 <cos+0x28>
 800e7be:	f000 ff27 	bl	800f610 <__kernel_cos>
 800e7c2:	e7f9      	b.n	800e7b8 <cos+0x58>
 800e7c4:	f3af 8000 	nop.w
	...
 800e7d0:	3fe921fb 	.word	0x3fe921fb
 800e7d4:	7fefffff 	.word	0x7fefffff

0800e7d8 <sin>:
 800e7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7da:	eeb0 7b40 	vmov.f64	d7, d0
 800e7de:	ee17 3a90 	vmov	r3, s15
 800e7e2:	4a19      	ldr	r2, [pc, #100]	; (800e848 <sin+0x70>)
 800e7e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	dc05      	bgt.n	800e7f8 <sin+0x20>
 800e7ec:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800e840 <sin+0x68>
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	f001 fa15 	bl	800fc20 <__kernel_sin>
 800e7f6:	e004      	b.n	800e802 <sin+0x2a>
 800e7f8:	4a14      	ldr	r2, [pc, #80]	; (800e84c <sin+0x74>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	dd04      	ble.n	800e808 <sin+0x30>
 800e7fe:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e802:	b005      	add	sp, #20
 800e804:	f85d fb04 	ldr.w	pc, [sp], #4
 800e808:	4668      	mov	r0, sp
 800e80a:	f000 fdc1 	bl	800f390 <__ieee754_rem_pio2>
 800e80e:	f000 0003 	and.w	r0, r0, #3
 800e812:	2801      	cmp	r0, #1
 800e814:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e818:	ed9d 0b00 	vldr	d0, [sp]
 800e81c:	d004      	beq.n	800e828 <sin+0x50>
 800e81e:	2802      	cmp	r0, #2
 800e820:	d005      	beq.n	800e82e <sin+0x56>
 800e822:	b950      	cbnz	r0, 800e83a <sin+0x62>
 800e824:	2001      	movs	r0, #1
 800e826:	e7e4      	b.n	800e7f2 <sin+0x1a>
 800e828:	f000 fef2 	bl	800f610 <__kernel_cos>
 800e82c:	e7e9      	b.n	800e802 <sin+0x2a>
 800e82e:	2001      	movs	r0, #1
 800e830:	f001 f9f6 	bl	800fc20 <__kernel_sin>
 800e834:	eeb1 0b40 	vneg.f64	d0, d0
 800e838:	e7e3      	b.n	800e802 <sin+0x2a>
 800e83a:	f000 fee9 	bl	800f610 <__kernel_cos>
 800e83e:	e7f9      	b.n	800e834 <sin+0x5c>
	...
 800e848:	3fe921fb 	.word	0x3fe921fb
 800e84c:	7fefffff 	.word	0x7fefffff

0800e850 <log10>:
 800e850:	b500      	push	{lr}
 800e852:	ed2d 8b02 	vpush	{d8}
 800e856:	eeb0 8b40 	vmov.f64	d8, d0
 800e85a:	b08b      	sub	sp, #44	; 0x2c
 800e85c:	f000 f998 	bl	800eb90 <__ieee754_log10>
 800e860:	4b2d      	ldr	r3, [pc, #180]	; (800e918 <log10+0xc8>)
 800e862:	f993 3000 	ldrsb.w	r3, [r3]
 800e866:	1c5a      	adds	r2, r3, #1
 800e868:	d051      	beq.n	800e90e <log10+0xbe>
 800e86a:	eeb4 8b48 	vcmp.f64	d8, d8
 800e86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e872:	d64c      	bvs.n	800e90e <log10+0xbe>
 800e874:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800e878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e87c:	d847      	bhi.n	800e90e <log10+0xbe>
 800e87e:	4a27      	ldr	r2, [pc, #156]	; (800e91c <log10+0xcc>)
 800e880:	9201      	str	r2, [sp, #4]
 800e882:	2200      	movs	r2, #0
 800e884:	9208      	str	r2, [sp, #32]
 800e886:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e88a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e88e:	b993      	cbnz	r3, 800e8b6 <log10+0x66>
 800e890:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e894:	4922      	ldr	r1, [pc, #136]	; (800e920 <log10+0xd0>)
 800e896:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800e89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e89e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e8a2:	d025      	beq.n	800e8f0 <log10+0xa0>
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	9200      	str	r2, [sp, #0]
 800e8aa:	d116      	bne.n	800e8da <log10+0x8a>
 800e8ac:	f7fd ff62 	bl	800c774 <__errno>
 800e8b0:	2321      	movs	r3, #33	; 0x21
 800e8b2:	6003      	str	r3, [r0, #0]
 800e8b4:	e016      	b.n	800e8e4 <log10+0x94>
 800e8b6:	491b      	ldr	r1, [pc, #108]	; (800e924 <log10+0xd4>)
 800e8b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e8bc:	2000      	movs	r0, #0
 800e8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e8c6:	d1ed      	bne.n	800e8a4 <log10+0x54>
 800e8c8:	2202      	movs	r2, #2
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	9200      	str	r2, [sp, #0]
 800e8ce:	d111      	bne.n	800e8f4 <log10+0xa4>
 800e8d0:	f7fd ff50 	bl	800c774 <__errno>
 800e8d4:	2322      	movs	r3, #34	; 0x22
 800e8d6:	6003      	str	r3, [r0, #0]
 800e8d8:	e011      	b.n	800e8fe <log10+0xae>
 800e8da:	4668      	mov	r0, sp
 800e8dc:	f001 fa84 	bl	800fde8 <matherr>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d0e3      	beq.n	800e8ac <log10+0x5c>
 800e8e4:	4810      	ldr	r0, [pc, #64]	; (800e928 <log10+0xd8>)
 800e8e6:	f001 fa83 	bl	800fdf0 <nan>
 800e8ea:	ed8d 0b06 	vstr	d0, [sp, #24]
 800e8ee:	e006      	b.n	800e8fe <log10+0xae>
 800e8f0:	2302      	movs	r3, #2
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	4668      	mov	r0, sp
 800e8f6:	f001 fa77 	bl	800fde8 <matherr>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	d0e8      	beq.n	800e8d0 <log10+0x80>
 800e8fe:	9b08      	ldr	r3, [sp, #32]
 800e900:	b11b      	cbz	r3, 800e90a <log10+0xba>
 800e902:	f7fd ff37 	bl	800c774 <__errno>
 800e906:	9b08      	ldr	r3, [sp, #32]
 800e908:	6003      	str	r3, [r0, #0]
 800e90a:	ed9d 0b06 	vldr	d0, [sp, #24]
 800e90e:	b00b      	add	sp, #44	; 0x2c
 800e910:	ecbd 8b02 	vpop	{d8}
 800e914:	f85d fb04 	ldr.w	pc, [sp], #4
 800e918:	24000550 	.word	0x24000550
 800e91c:	080194c8 	.word	0x080194c8
 800e920:	c7efffff 	.word	0xc7efffff
 800e924:	fff00000 	.word	0xfff00000
 800e928:	080193b1 	.word	0x080193b1
 800e92c:	00000000 	.word	0x00000000

0800e930 <pow>:
 800e930:	b570      	push	{r4, r5, r6, lr}
 800e932:	ed2d 8b0a 	vpush	{d8-d12}
 800e936:	eeb0 9b40 	vmov.f64	d9, d0
 800e93a:	eeb0 8b41 	vmov.f64	d8, d1
 800e93e:	4c8c      	ldr	r4, [pc, #560]	; (800eb70 <pow+0x240>)
 800e940:	b08a      	sub	sp, #40	; 0x28
 800e942:	f000 f99d 	bl	800ec80 <__ieee754_pow>
 800e946:	f994 3000 	ldrsb.w	r3, [r4]
 800e94a:	eeb0 ab40 	vmov.f64	d10, d0
 800e94e:	1c5a      	adds	r2, r3, #1
 800e950:	4626      	mov	r6, r4
 800e952:	d04b      	beq.n	800e9ec <pow+0xbc>
 800e954:	eeb4 8b48 	vcmp.f64	d8, d8
 800e958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95c:	d646      	bvs.n	800e9ec <pow+0xbc>
 800e95e:	eeb4 9b49 	vcmp.f64	d9, d9
 800e962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e966:	d719      	bvc.n	800e99c <pow+0x6c>
 800e968:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e970:	d13c      	bne.n	800e9ec <pow+0xbc>
 800e972:	2201      	movs	r2, #1
 800e974:	9200      	str	r2, [sp, #0]
 800e976:	497f      	ldr	r1, [pc, #508]	; (800eb74 <pow+0x244>)
 800e978:	4a7f      	ldr	r2, [pc, #508]	; (800eb78 <pow+0x248>)
 800e97a:	9201      	str	r2, [sp, #4]
 800e97c:	2000      	movs	r0, #0
 800e97e:	2200      	movs	r2, #0
 800e980:	2b02      	cmp	r3, #2
 800e982:	9208      	str	r2, [sp, #32]
 800e984:	ed8d 9b02 	vstr	d9, [sp, #8]
 800e988:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e98c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e990:	d02a      	beq.n	800e9e8 <pow+0xb8>
 800e992:	4668      	mov	r0, sp
 800e994:	f001 fa28 	bl	800fde8 <matherr>
 800e998:	bb00      	cbnz	r0, 800e9dc <pow+0xac>
 800e99a:	e04e      	b.n	800ea3a <pow+0x10a>
 800e99c:	ed9f bb72 	vldr	d11, [pc, #456]	; 800eb68 <pow+0x238>
 800e9a0:	eeb4 9b4b 	vcmp.f64	d9, d11
 800e9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a8:	eeb0 cb4b 	vmov.f64	d12, d11
 800e9ac:	d14a      	bne.n	800ea44 <pow+0x114>
 800e9ae:	eeb4 8b4b 	vcmp.f64	d8, d11
 800e9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b6:	d11f      	bne.n	800e9f8 <pow+0xc8>
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	9200      	str	r2, [sp, #0]
 800e9bc:	4a6e      	ldr	r2, [pc, #440]	; (800eb78 <pow+0x248>)
 800e9be:	9201      	str	r2, [sp, #4]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	9208      	str	r2, [sp, #32]
 800e9c4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800e9c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e9cc:	ed8d bb06 	vstr	d11, [sp, #24]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d0de      	beq.n	800e992 <pow+0x62>
 800e9d4:	4b67      	ldr	r3, [pc, #412]	; (800eb74 <pow+0x244>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e9dc:	9b08      	ldr	r3, [sp, #32]
 800e9de:	b11b      	cbz	r3, 800e9e8 <pow+0xb8>
 800e9e0:	f7fd fec8 	bl	800c774 <__errno>
 800e9e4:	9b08      	ldr	r3, [sp, #32]
 800e9e6:	6003      	str	r3, [r0, #0]
 800e9e8:	ed9d ab06 	vldr	d10, [sp, #24]
 800e9ec:	eeb0 0b4a 	vmov.f64	d0, d10
 800e9f0:	b00a      	add	sp, #40	; 0x28
 800e9f2:	ecbd 8b0a 	vpop	{d8-d12}
 800e9f6:	bd70      	pop	{r4, r5, r6, pc}
 800e9f8:	eeb0 0b48 	vmov.f64	d0, d8
 800e9fc:	f001 f971 	bl	800fce2 <finite>
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d0f3      	beq.n	800e9ec <pow+0xbc>
 800ea04:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800ea08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0c:	d5ee      	bpl.n	800e9ec <pow+0xbc>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	4b59      	ldr	r3, [pc, #356]	; (800eb78 <pow+0x248>)
 800ea14:	9301      	str	r3, [sp, #4]
 800ea16:	2300      	movs	r3, #0
 800ea18:	9308      	str	r3, [sp, #32]
 800ea1a:	f994 3000 	ldrsb.w	r3, [r4]
 800ea1e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800ea22:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ea26:	b913      	cbnz	r3, 800ea2e <pow+0xfe>
 800ea28:	ed8d bb06 	vstr	d11, [sp, #24]
 800ea2c:	e7b1      	b.n	800e992 <pow+0x62>
 800ea2e:	4953      	ldr	r1, [pc, #332]	; (800eb7c <pow+0x24c>)
 800ea30:	2000      	movs	r0, #0
 800ea32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d1ab      	bne.n	800e992 <pow+0x62>
 800ea3a:	f7fd fe9b 	bl	800c774 <__errno>
 800ea3e:	2321      	movs	r3, #33	; 0x21
 800ea40:	6003      	str	r3, [r0, #0]
 800ea42:	e7cb      	b.n	800e9dc <pow+0xac>
 800ea44:	f001 f94d 	bl	800fce2 <finite>
 800ea48:	4605      	mov	r5, r0
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d164      	bne.n	800eb18 <pow+0x1e8>
 800ea4e:	eeb0 0b49 	vmov.f64	d0, d9
 800ea52:	f001 f946 	bl	800fce2 <finite>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d05e      	beq.n	800eb18 <pow+0x1e8>
 800ea5a:	eeb0 0b48 	vmov.f64	d0, d8
 800ea5e:	f001 f940 	bl	800fce2 <finite>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	d058      	beq.n	800eb18 <pow+0x1e8>
 800ea66:	eeb4 ab4a 	vcmp.f64	d10, d10
 800ea6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6e:	f994 3000 	ldrsb.w	r3, [r4]
 800ea72:	4a41      	ldr	r2, [pc, #260]	; (800eb78 <pow+0x248>)
 800ea74:	d70e      	bvc.n	800ea94 <pow+0x164>
 800ea76:	2101      	movs	r1, #1
 800ea78:	e9cd 1200 	strd	r1, r2, [sp]
 800ea7c:	9508      	str	r5, [sp, #32]
 800ea7e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800ea82:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d0ce      	beq.n	800ea28 <pow+0xf8>
 800ea8a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800ea8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ea92:	e7d0      	b.n	800ea36 <pow+0x106>
 800ea94:	2103      	movs	r1, #3
 800ea96:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ea9a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ea9e:	ee28 8b07 	vmul.f64	d8, d8, d7
 800eaa2:	e9cd 1200 	strd	r1, r2, [sp]
 800eaa6:	9508      	str	r5, [sp, #32]
 800eaa8:	ed8d 9b02 	vstr	d9, [sp, #8]
 800eaac:	b9fb      	cbnz	r3, 800eaee <pow+0x1be>
 800eaae:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800eab2:	4b33      	ldr	r3, [pc, #204]	; (800eb80 <pow+0x250>)
 800eab4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800eab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eabc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eac0:	d54b      	bpl.n	800eb5a <pow+0x22a>
 800eac2:	eeb0 0b48 	vmov.f64	d0, d8
 800eac6:	f001 f99b 	bl	800fe00 <rint>
 800eaca:	eeb4 0b48 	vcmp.f64	d0, d8
 800eace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead2:	d004      	beq.n	800eade <pow+0x1ae>
 800ead4:	4b2b      	ldr	r3, [pc, #172]	; (800eb84 <pow+0x254>)
 800ead6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800eada:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eade:	f996 3000 	ldrsb.w	r3, [r6]
 800eae2:	2b02      	cmp	r3, #2
 800eae4:	d139      	bne.n	800eb5a <pow+0x22a>
 800eae6:	f7fd fe45 	bl	800c774 <__errno>
 800eaea:	2322      	movs	r3, #34	; 0x22
 800eaec:	e7a8      	b.n	800ea40 <pow+0x110>
 800eaee:	4b26      	ldr	r3, [pc, #152]	; (800eb88 <pow+0x258>)
 800eaf0:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eafe:	d5ee      	bpl.n	800eade <pow+0x1ae>
 800eb00:	eeb0 0b48 	vmov.f64	d0, d8
 800eb04:	f001 f97c 	bl	800fe00 <rint>
 800eb08:	eeb4 0b48 	vcmp.f64	d0, d8
 800eb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb10:	d0e5      	beq.n	800eade <pow+0x1ae>
 800eb12:	2200      	movs	r2, #0
 800eb14:	4b19      	ldr	r3, [pc, #100]	; (800eb7c <pow+0x24c>)
 800eb16:	e7e0      	b.n	800eada <pow+0x1aa>
 800eb18:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800eb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb20:	f47f af64 	bne.w	800e9ec <pow+0xbc>
 800eb24:	eeb0 0b49 	vmov.f64	d0, d9
 800eb28:	f001 f8db 	bl	800fce2 <finite>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	f43f af5d 	beq.w	800e9ec <pow+0xbc>
 800eb32:	eeb0 0b48 	vmov.f64	d0, d8
 800eb36:	f001 f8d4 	bl	800fce2 <finite>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	f43f af56 	beq.w	800e9ec <pow+0xbc>
 800eb40:	2304      	movs	r3, #4
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	4b0c      	ldr	r3, [pc, #48]	; (800eb78 <pow+0x248>)
 800eb46:	9301      	str	r3, [sp, #4]
 800eb48:	2300      	movs	r3, #0
 800eb4a:	9308      	str	r3, [sp, #32]
 800eb4c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800eb50:	ed8d 8b04 	vstr	d8, [sp, #16]
 800eb54:	ed8d cb06 	vstr	d12, [sp, #24]
 800eb58:	e7c1      	b.n	800eade <pow+0x1ae>
 800eb5a:	4668      	mov	r0, sp
 800eb5c:	f001 f944 	bl	800fde8 <matherr>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	f47f af3b 	bne.w	800e9dc <pow+0xac>
 800eb66:	e7be      	b.n	800eae6 <pow+0x1b6>
	...
 800eb70:	24000550 	.word	0x24000550
 800eb74:	3ff00000 	.word	0x3ff00000
 800eb78:	080194ce 	.word	0x080194ce
 800eb7c:	fff00000 	.word	0xfff00000
 800eb80:	47efffff 	.word	0x47efffff
 800eb84:	c7efffff 	.word	0xc7efffff
 800eb88:	7ff00000 	.word	0x7ff00000
 800eb8c:	00000000 	.word	0x00000000

0800eb90 <__ieee754_log10>:
 800eb90:	b500      	push	{lr}
 800eb92:	ed2d 8b02 	vpush	{d8}
 800eb96:	b083      	sub	sp, #12
 800eb98:	ed8d 0b00 	vstr	d0, [sp]
 800eb9c:	9a01      	ldr	r2, [sp, #4]
 800eb9e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800eba2:	da29      	bge.n	800ebf8 <__ieee754_log10+0x68>
 800eba4:	9900      	ldr	r1, [sp, #0]
 800eba6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ebaa:	430b      	orrs	r3, r1
 800ebac:	d10a      	bne.n	800ebc4 <__ieee754_log10+0x34>
 800ebae:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800ec48 <__ieee754_log10+0xb8>
 800ebb2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800ec50 <__ieee754_log10+0xc0>
 800ebb6:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800ebba:	b003      	add	sp, #12
 800ebbc:	ecbd 8b02 	vpop	{d8}
 800ebc0:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebc4:	2a00      	cmp	r2, #0
 800ebc6:	da04      	bge.n	800ebd2 <__ieee754_log10+0x42>
 800ebc8:	ed9d 7b00 	vldr	d7, [sp]
 800ebcc:	ee37 6b47 	vsub.f64	d6, d7, d7
 800ebd0:	e7ef      	b.n	800ebb2 <__ieee754_log10+0x22>
 800ebd2:	ed9d 6b00 	vldr	d6, [sp]
 800ebd6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ec58 <__ieee754_log10+0xc8>
 800ebda:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ebde:	ed8d 7b00 	vstr	d7, [sp]
 800ebe2:	9a01      	ldr	r2, [sp, #4]
 800ebe4:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ebe8:	4b23      	ldr	r3, [pc, #140]	; (800ec78 <__ieee754_log10+0xe8>)
 800ebea:	429a      	cmp	r2, r3
 800ebec:	dd06      	ble.n	800ebfc <__ieee754_log10+0x6c>
 800ebee:	ed9d 7b00 	vldr	d7, [sp]
 800ebf2:	ee37 0b07 	vadd.f64	d0, d7, d7
 800ebf6:	e7e0      	b.n	800ebba <__ieee754_log10+0x2a>
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	e7f5      	b.n	800ebe8 <__ieee754_log10+0x58>
 800ebfc:	1513      	asrs	r3, r2, #20
 800ebfe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ec02:	440b      	add	r3, r1
 800ec04:	0fd8      	lsrs	r0, r3, #31
 800ec06:	4403      	add	r3, r0
 800ec08:	ee07 3a90 	vmov	s15, r3
 800ec0c:	f3c2 0113 	ubfx	r1, r2, #0, #20
 800ec10:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 800ec14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec18:	3003      	adds	r0, #3
 800ec1a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ec1e:	ec43 2b10 	vmov	d0, r2, r3
 800ec22:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800ec26:	f001 f9f7 	bl	8010018 <__ieee754_log>
 800ec2a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800ec60 <__ieee754_log10+0xd0>
 800ec2e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ec32:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800ec68 <__ieee754_log10+0xd8>
 800ec36:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ec3a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800ec70 <__ieee754_log10+0xe0>
 800ec3e:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ec42:	e7ba      	b.n	800ebba <__ieee754_log10+0x2a>
 800ec44:	f3af 8000 	nop.w
 800ec48:	00000000 	.word	0x00000000
 800ec4c:	c3500000 	.word	0xc3500000
	...
 800ec5c:	43500000 	.word	0x43500000
 800ec60:	1526e50e 	.word	0x1526e50e
 800ec64:	3fdbcb7b 	.word	0x3fdbcb7b
 800ec68:	11f12b36 	.word	0x11f12b36
 800ec6c:	3d59fef3 	.word	0x3d59fef3
 800ec70:	509f6000 	.word	0x509f6000
 800ec74:	3fd34413 	.word	0x3fd34413
 800ec78:	7fefffff 	.word	0x7fefffff
 800ec7c:	00000000 	.word	0x00000000

0800ec80 <__ieee754_pow>:
 800ec80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec84:	ec57 6b11 	vmov	r6, r7, d1
 800ec88:	ed2d 8b02 	vpush	{d8}
 800ec8c:	eeb0 8b40 	vmov.f64	d8, d0
 800ec90:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ec94:	ea58 0306 	orrs.w	r3, r8, r6
 800ec98:	b085      	sub	sp, #20
 800ec9a:	46b9      	mov	r9, r7
 800ec9c:	ee11 2a10 	vmov	r2, s2
 800eca0:	f000 8306 	beq.w	800f2b0 <__ieee754_pow+0x630>
 800eca4:	ee18 aa90 	vmov	sl, s17
 800eca8:	4bb9      	ldr	r3, [pc, #740]	; (800ef90 <__ieee754_pow+0x310>)
 800ecaa:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800ecae:	429c      	cmp	r4, r3
 800ecb0:	ee10 ba10 	vmov	fp, s0
 800ecb4:	dc0b      	bgt.n	800ecce <__ieee754_pow+0x4e>
 800ecb6:	d105      	bne.n	800ecc4 <__ieee754_pow+0x44>
 800ecb8:	f1bb 0f00 	cmp.w	fp, #0
 800ecbc:	d107      	bne.n	800ecce <__ieee754_pow+0x4e>
 800ecbe:	45a0      	cmp	r8, r4
 800ecc0:	dc0d      	bgt.n	800ecde <__ieee754_pow+0x5e>
 800ecc2:	e001      	b.n	800ecc8 <__ieee754_pow+0x48>
 800ecc4:	4598      	cmp	r8, r3
 800ecc6:	dc02      	bgt.n	800ecce <__ieee754_pow+0x4e>
 800ecc8:	4598      	cmp	r8, r3
 800ecca:	d110      	bne.n	800ecee <__ieee754_pow+0x6e>
 800eccc:	b17a      	cbz	r2, 800ecee <__ieee754_pow+0x6e>
 800ecce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ecd2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ecd6:	ea54 030b 	orrs.w	r3, r4, fp
 800ecda:	f000 82e9 	beq.w	800f2b0 <__ieee754_pow+0x630>
 800ecde:	48ad      	ldr	r0, [pc, #692]	; (800ef94 <__ieee754_pow+0x314>)
 800ece0:	b005      	add	sp, #20
 800ece2:	ecbd 8b02 	vpop	{d8}
 800ece6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecea:	f001 b881 	b.w	800fdf0 <nan>
 800ecee:	f1ba 0f00 	cmp.w	sl, #0
 800ecf2:	da4e      	bge.n	800ed92 <__ieee754_pow+0x112>
 800ecf4:	4ba8      	ldr	r3, [pc, #672]	; (800ef98 <__ieee754_pow+0x318>)
 800ecf6:	4598      	cmp	r8, r3
 800ecf8:	dc49      	bgt.n	800ed8e <__ieee754_pow+0x10e>
 800ecfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ecfe:	4598      	cmp	r8, r3
 800ed00:	dd47      	ble.n	800ed92 <__ieee754_pow+0x112>
 800ed02:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ed06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ed0a:	2b14      	cmp	r3, #20
 800ed0c:	dd24      	ble.n	800ed58 <__ieee754_pow+0xd8>
 800ed0e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ed12:	fa22 f503 	lsr.w	r5, r2, r3
 800ed16:	fa05 f303 	lsl.w	r3, r5, r3
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d139      	bne.n	800ed92 <__ieee754_pow+0x112>
 800ed1e:	f005 0501 	and.w	r5, r5, #1
 800ed22:	f1c5 0502 	rsb	r5, r5, #2
 800ed26:	2a00      	cmp	r2, #0
 800ed28:	d15a      	bne.n	800ede0 <__ieee754_pow+0x160>
 800ed2a:	4b99      	ldr	r3, [pc, #612]	; (800ef90 <__ieee754_pow+0x310>)
 800ed2c:	4598      	cmp	r8, r3
 800ed2e:	d122      	bne.n	800ed76 <__ieee754_pow+0xf6>
 800ed30:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ed34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ed38:	ea53 030b 	orrs.w	r3, r3, fp
 800ed3c:	f000 82b8 	beq.w	800f2b0 <__ieee754_pow+0x630>
 800ed40:	4b96      	ldr	r3, [pc, #600]	; (800ef9c <__ieee754_pow+0x31c>)
 800ed42:	429c      	cmp	r4, r3
 800ed44:	dd27      	ble.n	800ed96 <__ieee754_pow+0x116>
 800ed46:	f1b9 0f00 	cmp.w	r9, #0
 800ed4a:	f280 82b4 	bge.w	800f2b6 <__ieee754_pow+0x636>
 800ed4e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800ef60 <__ieee754_pow+0x2e0>
 800ed52:	ed8d 7b00 	vstr	d7, [sp]
 800ed56:	e026      	b.n	800eda6 <__ieee754_pow+0x126>
 800ed58:	2a00      	cmp	r2, #0
 800ed5a:	d140      	bne.n	800edde <__ieee754_pow+0x15e>
 800ed5c:	f1c3 0314 	rsb	r3, r3, #20
 800ed60:	fa48 f503 	asr.w	r5, r8, r3
 800ed64:	fa05 f303 	lsl.w	r3, r5, r3
 800ed68:	4543      	cmp	r3, r8
 800ed6a:	f040 82aa 	bne.w	800f2c2 <__ieee754_pow+0x642>
 800ed6e:	f005 0501 	and.w	r5, r5, #1
 800ed72:	f1c5 0502 	rsb	r5, r5, #2
 800ed76:	4b8a      	ldr	r3, [pc, #552]	; (800efa0 <__ieee754_pow+0x320>)
 800ed78:	4598      	cmp	r8, r3
 800ed7a:	d11b      	bne.n	800edb4 <__ieee754_pow+0x134>
 800ed7c:	f1b9 0f00 	cmp.w	r9, #0
 800ed80:	f280 829c 	bge.w	800f2bc <__ieee754_pow+0x63c>
 800ed84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ed88:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800ed8c:	e7e1      	b.n	800ed52 <__ieee754_pow+0xd2>
 800ed8e:	2502      	movs	r5, #2
 800ed90:	e7c9      	b.n	800ed26 <__ieee754_pow+0xa6>
 800ed92:	2500      	movs	r5, #0
 800ed94:	e7c7      	b.n	800ed26 <__ieee754_pow+0xa6>
 800ed96:	f1b9 0f00 	cmp.w	r9, #0
 800ed9a:	dad8      	bge.n	800ed4e <__ieee754_pow+0xce>
 800ed9c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800eda0:	4633      	mov	r3, r6
 800eda2:	e9cd 3400 	strd	r3, r4, [sp]
 800eda6:	ed9d 0b00 	vldr	d0, [sp]
 800edaa:	b005      	add	sp, #20
 800edac:	ecbd 8b02 	vpop	{d8}
 800edb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800edb8:	d102      	bne.n	800edc0 <__ieee754_pow+0x140>
 800edba:	ee28 7b08 	vmul.f64	d7, d8, d8
 800edbe:	e7c8      	b.n	800ed52 <__ieee754_pow+0xd2>
 800edc0:	4b78      	ldr	r3, [pc, #480]	; (800efa4 <__ieee754_pow+0x324>)
 800edc2:	4599      	cmp	r9, r3
 800edc4:	d10c      	bne.n	800ede0 <__ieee754_pow+0x160>
 800edc6:	f1ba 0f00 	cmp.w	sl, #0
 800edca:	db09      	blt.n	800ede0 <__ieee754_pow+0x160>
 800edcc:	eeb0 0b48 	vmov.f64	d0, d8
 800edd0:	b005      	add	sp, #20
 800edd2:	ecbd 8b02 	vpop	{d8}
 800edd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edda:	f000 bc15 	b.w	800f608 <__ieee754_sqrt>
 800edde:	2500      	movs	r5, #0
 800ede0:	eeb0 0b48 	vmov.f64	d0, d8
 800ede4:	f000 ff74 	bl	800fcd0 <fabs>
 800ede8:	ed8d 0b00 	vstr	d0, [sp]
 800edec:	f1bb 0f00 	cmp.w	fp, #0
 800edf0:	d128      	bne.n	800ee44 <__ieee754_pow+0x1c4>
 800edf2:	b124      	cbz	r4, 800edfe <__ieee754_pow+0x17e>
 800edf4:	4b6a      	ldr	r3, [pc, #424]	; (800efa0 <__ieee754_pow+0x320>)
 800edf6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d122      	bne.n	800ee44 <__ieee754_pow+0x1c4>
 800edfe:	f1b9 0f00 	cmp.w	r9, #0
 800ee02:	da07      	bge.n	800ee14 <__ieee754_pow+0x194>
 800ee04:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ee08:	ed9d 6b00 	vldr	d6, [sp]
 800ee0c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800ee10:	ed8d 7b00 	vstr	d7, [sp]
 800ee14:	f1ba 0f00 	cmp.w	sl, #0
 800ee18:	dac5      	bge.n	800eda6 <__ieee754_pow+0x126>
 800ee1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ee1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ee22:	ea54 0305 	orrs.w	r3, r4, r5
 800ee26:	d106      	bne.n	800ee36 <__ieee754_pow+0x1b6>
 800ee28:	ed9d 7b00 	vldr	d7, [sp]
 800ee2c:	ee37 7b47 	vsub.f64	d7, d7, d7
 800ee30:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800ee34:	e78d      	b.n	800ed52 <__ieee754_pow+0xd2>
 800ee36:	2d01      	cmp	r5, #1
 800ee38:	d1b5      	bne.n	800eda6 <__ieee754_pow+0x126>
 800ee3a:	ed9d 7b00 	vldr	d7, [sp]
 800ee3e:	eeb1 7b47 	vneg.f64	d7, d7
 800ee42:	e786      	b.n	800ed52 <__ieee754_pow+0xd2>
 800ee44:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800ee48:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee4c:	ea55 030a 	orrs.w	r3, r5, sl
 800ee50:	d104      	bne.n	800ee5c <__ieee754_pow+0x1dc>
 800ee52:	ee38 8b48 	vsub.f64	d8, d8, d8
 800ee56:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800ee5a:	e77a      	b.n	800ed52 <__ieee754_pow+0xd2>
 800ee5c:	4b52      	ldr	r3, [pc, #328]	; (800efa8 <__ieee754_pow+0x328>)
 800ee5e:	4598      	cmp	r8, r3
 800ee60:	f340 80a8 	ble.w	800efb4 <__ieee754_pow+0x334>
 800ee64:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ee68:	4598      	cmp	r8, r3
 800ee6a:	dd0b      	ble.n	800ee84 <__ieee754_pow+0x204>
 800ee6c:	4b4b      	ldr	r3, [pc, #300]	; (800ef9c <__ieee754_pow+0x31c>)
 800ee6e:	429c      	cmp	r4, r3
 800ee70:	dc0e      	bgt.n	800ee90 <__ieee754_pow+0x210>
 800ee72:	f1b9 0f00 	cmp.w	r9, #0
 800ee76:	f6bf af6a 	bge.w	800ed4e <__ieee754_pow+0xce>
 800ee7a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800ef68 <__ieee754_pow+0x2e8>
 800ee7e:	ee27 7b07 	vmul.f64	d7, d7, d7
 800ee82:	e766      	b.n	800ed52 <__ieee754_pow+0xd2>
 800ee84:	4b49      	ldr	r3, [pc, #292]	; (800efac <__ieee754_pow+0x32c>)
 800ee86:	429c      	cmp	r4, r3
 800ee88:	ddf3      	ble.n	800ee72 <__ieee754_pow+0x1f2>
 800ee8a:	4b45      	ldr	r3, [pc, #276]	; (800efa0 <__ieee754_pow+0x320>)
 800ee8c:	429c      	cmp	r4, r3
 800ee8e:	dd03      	ble.n	800ee98 <__ieee754_pow+0x218>
 800ee90:	f1b9 0f00 	cmp.w	r9, #0
 800ee94:	dcf1      	bgt.n	800ee7a <__ieee754_pow+0x1fa>
 800ee96:	e75a      	b.n	800ed4e <__ieee754_pow+0xce>
 800ee98:	ed9d 7b00 	vldr	d7, [sp]
 800ee9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800eea0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800ef70 <__ieee754_pow+0x2f0>
 800eea4:	ee37 6b46 	vsub.f64	d6, d7, d6
 800eea8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800eeac:	eeb1 3b46 	vneg.f64	d3, d6
 800eeb0:	eea3 5b07 	vfma.f64	d5, d3, d7
 800eeb4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800eeb8:	eea5 7b46 	vfms.f64	d7, d5, d6
 800eebc:	ee26 5b06 	vmul.f64	d5, d6, d6
 800eec0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800eec4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800ef78 <__ieee754_pow+0x2f8>
 800eec8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800eecc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800ef80 <__ieee754_pow+0x300>
 800eed0:	eea6 7b05 	vfma.f64	d7, d6, d5
 800eed4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800ef88 <__ieee754_pow+0x308>
 800eed8:	eeb0 4b47 	vmov.f64	d4, d7
 800eedc:	eea6 4b05 	vfma.f64	d4, d6, d5
 800eee0:	ec53 2b14 	vmov	r2, r3, d4
 800eee4:	2200      	movs	r2, #0
 800eee6:	ec43 2b14 	vmov	d4, r2, r3
 800eeea:	eeb0 6b44 	vmov.f64	d6, d4
 800eeee:	eea3 6b05 	vfma.f64	d6, d3, d5
 800eef2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eef6:	3d01      	subs	r5, #1
 800eef8:	ea55 030a 	orrs.w	r3, r5, sl
 800eefc:	f04f 0200 	mov.w	r2, #0
 800ef00:	463b      	mov	r3, r7
 800ef02:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ef06:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800ef0a:	ec47 6b15 	vmov	d5, r6, r7
 800ef0e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800ef12:	ec47 6b13 	vmov	d3, r6, r7
 800ef16:	ec43 2b16 	vmov	d6, r2, r3
 800ef1a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ef1e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800ef22:	4b23      	ldr	r3, [pc, #140]	; (800efb0 <__ieee754_pow+0x330>)
 800ef24:	eea5 7b04 	vfma.f64	d7, d5, d4
 800ef28:	ee24 6b06 	vmul.f64	d6, d4, d6
 800ef2c:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ef30:	ee15 1a90 	vmov	r1, s11
 800ef34:	4299      	cmp	r1, r3
 800ef36:	ee15 2a10 	vmov	r2, s10
 800ef3a:	f340 819b 	ble.w	800f274 <__ieee754_pow+0x5f4>
 800ef3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ef42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ef46:	4313      	orrs	r3, r2
 800ef48:	f000 810a 	beq.w	800f160 <__ieee754_pow+0x4e0>
 800ef4c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800ef68 <__ieee754_pow+0x2e8>
 800ef50:	ee28 8b07 	vmul.f64	d8, d8, d7
 800ef54:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ef58:	e6fb      	b.n	800ed52 <__ieee754_pow+0xd2>
 800ef5a:	bf00      	nop
 800ef5c:	f3af 8000 	nop.w
	...
 800ef68:	8800759c 	.word	0x8800759c
 800ef6c:	7e37e43c 	.word	0x7e37e43c
 800ef70:	55555555 	.word	0x55555555
 800ef74:	3fd55555 	.word	0x3fd55555
 800ef78:	652b82fe 	.word	0x652b82fe
 800ef7c:	3ff71547 	.word	0x3ff71547
 800ef80:	f85ddf44 	.word	0xf85ddf44
 800ef84:	3e54ae0b 	.word	0x3e54ae0b
 800ef88:	60000000 	.word	0x60000000
 800ef8c:	3ff71547 	.word	0x3ff71547
 800ef90:	7ff00000 	.word	0x7ff00000
 800ef94:	080193b1 	.word	0x080193b1
 800ef98:	433fffff 	.word	0x433fffff
 800ef9c:	3fefffff 	.word	0x3fefffff
 800efa0:	3ff00000 	.word	0x3ff00000
 800efa4:	3fe00000 	.word	0x3fe00000
 800efa8:	41e00000 	.word	0x41e00000
 800efac:	3feffffe 	.word	0x3feffffe
 800efb0:	408fffff 	.word	0x408fffff
 800efb4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800efb8:	f280 80ce 	bge.w	800f158 <__ieee754_pow+0x4d8>
 800efbc:	ed9d 6b00 	vldr	d6, [sp]
 800efc0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800f2c8 <__ieee754_pow+0x648>
 800efc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800efc8:	ed8d 7b00 	vstr	d7, [sp]
 800efcc:	9c01      	ldr	r4, [sp, #4]
 800efce:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800efd2:	1521      	asrs	r1, r4, #20
 800efd4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800efd8:	4419      	add	r1, r3
 800efda:	4be3      	ldr	r3, [pc, #908]	; (800f368 <__ieee754_pow+0x6e8>)
 800efdc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800efe0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800efe4:	429c      	cmp	r4, r3
 800efe6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800efea:	dd06      	ble.n	800effa <__ieee754_pow+0x37a>
 800efec:	4bdf      	ldr	r3, [pc, #892]	; (800f36c <__ieee754_pow+0x6ec>)
 800efee:	429c      	cmp	r4, r3
 800eff0:	f340 80b4 	ble.w	800f15c <__ieee754_pow+0x4dc>
 800eff4:	3101      	adds	r1, #1
 800eff6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800effa:	2400      	movs	r4, #0
 800effc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f000:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800f004:	4603      	mov	r3, r0
 800f006:	ec43 2b17 	vmov	d7, r2, r3
 800f00a:	4bd9      	ldr	r3, [pc, #868]	; (800f370 <__ieee754_pow+0x6f0>)
 800f00c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800f010:	4463      	add	r3, ip
 800f012:	ed93 5b00 	vldr	d5, [r3]
 800f016:	1040      	asrs	r0, r0, #1
 800f018:	ee37 2b45 	vsub.f64	d2, d7, d5
 800f01c:	ee35 6b07 	vadd.f64	d6, d5, d7
 800f020:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800f024:	ee22 6b01 	vmul.f64	d6, d2, d1
 800f028:	ed8d 6b00 	vstr	d6, [sp]
 800f02c:	e9dd 8900 	ldrd	r8, r9, [sp]
 800f030:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800f034:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800f038:	f04f 0800 	mov.w	r8, #0
 800f03c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800f040:	2200      	movs	r2, #0
 800f042:	ec49 8b14 	vmov	d4, r8, r9
 800f046:	ec43 2b16 	vmov	d6, r2, r3
 800f04a:	eeb1 3b44 	vneg.f64	d3, d4
 800f04e:	eea3 2b06 	vfma.f64	d2, d3, d6
 800f052:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f056:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f05a:	eea3 2b07 	vfma.f64	d2, d3, d7
 800f05e:	ed9d 7b00 	vldr	d7, [sp]
 800f062:	ee22 2b01 	vmul.f64	d2, d2, d1
 800f066:	ee27 5b07 	vmul.f64	d5, d7, d7
 800f06a:	ee37 6b04 	vadd.f64	d6, d7, d4
 800f06e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800f2d0 <__ieee754_pow+0x650>
 800f072:	ee25 0b05 	vmul.f64	d0, d5, d5
 800f076:	ee26 6b02 	vmul.f64	d6, d6, d2
 800f07a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800f2d8 <__ieee754_pow+0x658>
 800f07e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f082:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800f2e0 <__ieee754_pow+0x660>
 800f086:	eea7 1b05 	vfma.f64	d1, d7, d5
 800f08a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800f2e8 <__ieee754_pow+0x668>
 800f08e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f092:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800f2f0 <__ieee754_pow+0x670>
 800f096:	eea7 1b05 	vfma.f64	d1, d7, d5
 800f09a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800f2f8 <__ieee754_pow+0x678>
 800f09e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f0a2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f0a6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800f0aa:	eeb0 5b47 	vmov.f64	d5, d7
 800f0ae:	eea4 5b04 	vfma.f64	d5, d4, d4
 800f0b2:	ee35 5b06 	vadd.f64	d5, d5, d6
 800f0b6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800f0ba:	f8cd 8008 	str.w	r8, [sp, #8]
 800f0be:	ed9d 5b02 	vldr	d5, [sp, #8]
 800f0c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f0c6:	eea3 7b04 	vfma.f64	d7, d3, d4
 800f0ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f0ce:	ed9d 6b00 	vldr	d6, [sp]
 800f0d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f0d6:	eea2 7b05 	vfma.f64	d7, d2, d5
 800f0da:	eeb0 6b47 	vmov.f64	d6, d7
 800f0de:	eea4 6b05 	vfma.f64	d6, d4, d5
 800f0e2:	ed8d 6b00 	vstr	d6, [sp]
 800f0e6:	f8cd 8000 	str.w	r8, [sp]
 800f0ea:	ed9d 2b00 	vldr	d2, [sp]
 800f0ee:	eeb0 6b42 	vmov.f64	d6, d2
 800f0f2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f0f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f0fa:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800f300 <__ieee754_pow+0x680>
 800f0fe:	4b9d      	ldr	r3, [pc, #628]	; (800f374 <__ieee754_pow+0x6f4>)
 800f100:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f104:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800f308 <__ieee754_pow+0x688>
 800f108:	4463      	add	r3, ip
 800f10a:	eea2 7b06 	vfma.f64	d7, d2, d6
 800f10e:	ed93 6b00 	vldr	d6, [r3]
 800f112:	4b99      	ldr	r3, [pc, #612]	; (800f378 <__ieee754_pow+0x6f8>)
 800f114:	ee37 6b06 	vadd.f64	d6, d7, d6
 800f118:	449c      	add	ip, r3
 800f11a:	ed9c 1b00 	vldr	d1, [ip]
 800f11e:	eeb0 4b46 	vmov.f64	d4, d6
 800f122:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800f310 <__ieee754_pow+0x690>
 800f126:	ee07 1a90 	vmov	s15, r1
 800f12a:	eea2 4b03 	vfma.f64	d4, d2, d3
 800f12e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f132:	ee34 4b01 	vadd.f64	d4, d4, d1
 800f136:	ee34 5b07 	vadd.f64	d5, d4, d7
 800f13a:	ed8d 5b00 	vstr	d5, [sp]
 800f13e:	f8cd 8000 	str.w	r8, [sp]
 800f142:	ed9d 4b00 	vldr	d4, [sp]
 800f146:	ee34 7b47 	vsub.f64	d7, d4, d7
 800f14a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800f14e:	eea2 7b43 	vfms.f64	d7, d2, d3
 800f152:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f156:	e6ce      	b.n	800eef6 <__ieee754_pow+0x276>
 800f158:	2300      	movs	r3, #0
 800f15a:	e73a      	b.n	800efd2 <__ieee754_pow+0x352>
 800f15c:	2401      	movs	r4, #1
 800f15e:	e74d      	b.n	800effc <__ieee754_pow+0x37c>
 800f160:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800f318 <__ieee754_pow+0x698>
 800f164:	ee35 5b46 	vsub.f64	d5, d5, d6
 800f168:	ee37 4b04 	vadd.f64	d4, d7, d4
 800f16c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800f170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f174:	f73f aeea 	bgt.w	800ef4c <__ieee754_pow+0x2cc>
 800f178:	4a80      	ldr	r2, [pc, #512]	; (800f37c <__ieee754_pow+0x6fc>)
 800f17a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f17e:	4293      	cmp	r3, r2
 800f180:	f340 808e 	ble.w	800f2a0 <__ieee754_pow+0x620>
 800f184:	151b      	asrs	r3, r3, #20
 800f186:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800f18a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f18e:	4103      	asrs	r3, r0
 800f190:	440b      	add	r3, r1
 800f192:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f196:	487a      	ldr	r0, [pc, #488]	; (800f380 <__ieee754_pow+0x700>)
 800f198:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f19c:	4110      	asrs	r0, r2
 800f19e:	ea23 0500 	bic.w	r5, r3, r0
 800f1a2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800f1a6:	2400      	movs	r4, #0
 800f1a8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800f1ac:	f1c2 0214 	rsb	r2, r2, #20
 800f1b0:	ec45 4b15 	vmov	d5, r4, r5
 800f1b4:	4110      	asrs	r0, r2
 800f1b6:	2900      	cmp	r1, #0
 800f1b8:	bfb8      	it	lt
 800f1ba:	4240      	neglt	r0, r0
 800f1bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f1c0:	ee36 5b07 	vadd.f64	d5, d6, d7
 800f1c4:	ec53 2b15 	vmov	r2, r3, d5
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	ec43 2b15 	vmov	d5, r2, r3
 800f1ce:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800f320 <__ieee754_pow+0x6a0>
 800f1d2:	ee35 6b46 	vsub.f64	d6, d5, d6
 800f1d6:	ee37 6b46 	vsub.f64	d6, d7, d6
 800f1da:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800f328 <__ieee754_pow+0x6a8>
 800f1de:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f1e2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800f1e6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800f330 <__ieee754_pow+0x6b0>
 800f1ea:	eeb0 4b47 	vmov.f64	d4, d7
 800f1ee:	eea5 4b06 	vfma.f64	d4, d5, d6
 800f1f2:	eeb0 3b44 	vmov.f64	d3, d4
 800f1f6:	eea5 3b46 	vfms.f64	d3, d5, d6
 800f1fa:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800f338 <__ieee754_pow+0x6b8>
 800f1fe:	ee37 7b43 	vsub.f64	d7, d7, d3
 800f202:	ee24 6b04 	vmul.f64	d6, d4, d4
 800f206:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800f340 <__ieee754_pow+0x6c0>
 800f20a:	eea4 7b07 	vfma.f64	d7, d4, d7
 800f20e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f212:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800f348 <__ieee754_pow+0x6c8>
 800f216:	eea3 5b06 	vfma.f64	d5, d3, d6
 800f21a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800f350 <__ieee754_pow+0x6d0>
 800f21e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800f222:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800f358 <__ieee754_pow+0x6d8>
 800f226:	eea3 5b06 	vfma.f64	d5, d3, d6
 800f22a:	eeb0 3b44 	vmov.f64	d3, d4
 800f22e:	eea5 3b46 	vfms.f64	d3, d5, d6
 800f232:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f236:	eeb0 6b43 	vmov.f64	d6, d3
 800f23a:	ee24 3b03 	vmul.f64	d3, d4, d3
 800f23e:	ee36 5b45 	vsub.f64	d5, d6, d5
 800f242:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800f246:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f24a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f24e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f252:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f256:	ed8d 7b00 	vstr	d7, [sp]
 800f25a:	9901      	ldr	r1, [sp, #4]
 800f25c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800f260:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f264:	da1e      	bge.n	800f2a4 <__ieee754_pow+0x624>
 800f266:	eeb0 0b47 	vmov.f64	d0, d7
 800f26a:	f000 fe55 	bl	800ff18 <scalbn>
 800f26e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800f272:	e56e      	b.n	800ed52 <__ieee754_pow+0xd2>
 800f274:	4b43      	ldr	r3, [pc, #268]	; (800f384 <__ieee754_pow+0x704>)
 800f276:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800f27a:	4298      	cmp	r0, r3
 800f27c:	f77f af7c 	ble.w	800f178 <__ieee754_pow+0x4f8>
 800f280:	4b41      	ldr	r3, [pc, #260]	; (800f388 <__ieee754_pow+0x708>)
 800f282:	440b      	add	r3, r1
 800f284:	4313      	orrs	r3, r2
 800f286:	d002      	beq.n	800f28e <__ieee754_pow+0x60e>
 800f288:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f360 <__ieee754_pow+0x6e0>
 800f28c:	e660      	b.n	800ef50 <__ieee754_pow+0x2d0>
 800f28e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800f292:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f29a:	f6ff af6d 	blt.w	800f178 <__ieee754_pow+0x4f8>
 800f29e:	e7f3      	b.n	800f288 <__ieee754_pow+0x608>
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	e78d      	b.n	800f1c0 <__ieee754_pow+0x540>
 800f2a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	ec43 2b10 	vmov	d0, r2, r3
 800f2ae:	e7de      	b.n	800f26e <__ieee754_pow+0x5ee>
 800f2b0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f2b4:	e54d      	b.n	800ed52 <__ieee754_pow+0xd2>
 800f2b6:	e9cd 6700 	strd	r6, r7, [sp]
 800f2ba:	e574      	b.n	800eda6 <__ieee754_pow+0x126>
 800f2bc:	ed8d 8b00 	vstr	d8, [sp]
 800f2c0:	e571      	b.n	800eda6 <__ieee754_pow+0x126>
 800f2c2:	4615      	mov	r5, r2
 800f2c4:	e557      	b.n	800ed76 <__ieee754_pow+0xf6>
 800f2c6:	bf00      	nop
 800f2c8:	00000000 	.word	0x00000000
 800f2cc:	43400000 	.word	0x43400000
 800f2d0:	4a454eef 	.word	0x4a454eef
 800f2d4:	3fca7e28 	.word	0x3fca7e28
 800f2d8:	93c9db65 	.word	0x93c9db65
 800f2dc:	3fcd864a 	.word	0x3fcd864a
 800f2e0:	a91d4101 	.word	0xa91d4101
 800f2e4:	3fd17460 	.word	0x3fd17460
 800f2e8:	518f264d 	.word	0x518f264d
 800f2ec:	3fd55555 	.word	0x3fd55555
 800f2f0:	db6fabff 	.word	0xdb6fabff
 800f2f4:	3fdb6db6 	.word	0x3fdb6db6
 800f2f8:	33333303 	.word	0x33333303
 800f2fc:	3fe33333 	.word	0x3fe33333
 800f300:	dc3a03fd 	.word	0xdc3a03fd
 800f304:	3feec709 	.word	0x3feec709
 800f308:	145b01f5 	.word	0x145b01f5
 800f30c:	be3e2fe0 	.word	0xbe3e2fe0
 800f310:	e0000000 	.word	0xe0000000
 800f314:	3feec709 	.word	0x3feec709
 800f318:	652b82fe 	.word	0x652b82fe
 800f31c:	3c971547 	.word	0x3c971547
 800f320:	fefa39ef 	.word	0xfefa39ef
 800f324:	3fe62e42 	.word	0x3fe62e42
 800f328:	0ca86c39 	.word	0x0ca86c39
 800f32c:	be205c61 	.word	0xbe205c61
 800f330:	00000000 	.word	0x00000000
 800f334:	3fe62e43 	.word	0x3fe62e43
 800f338:	72bea4d0 	.word	0x72bea4d0
 800f33c:	3e663769 	.word	0x3e663769
 800f340:	c5d26bf1 	.word	0xc5d26bf1
 800f344:	bebbbd41 	.word	0xbebbbd41
 800f348:	af25de2c 	.word	0xaf25de2c
 800f34c:	3f11566a 	.word	0x3f11566a
 800f350:	16bebd93 	.word	0x16bebd93
 800f354:	bf66c16c 	.word	0xbf66c16c
 800f358:	5555553e 	.word	0x5555553e
 800f35c:	3fc55555 	.word	0x3fc55555
 800f360:	c2f8f359 	.word	0xc2f8f359
 800f364:	01a56e1f 	.word	0x01a56e1f
 800f368:	0003988e 	.word	0x0003988e
 800f36c:	000bb679 	.word	0x000bb679
 800f370:	080194d8 	.word	0x080194d8
 800f374:	080194f8 	.word	0x080194f8
 800f378:	080194e8 	.word	0x080194e8
 800f37c:	3fe00000 	.word	0x3fe00000
 800f380:	000fffff 	.word	0x000fffff
 800f384:	4090cbff 	.word	0x4090cbff
 800f388:	3f6f3400 	.word	0x3f6f3400
 800f38c:	00000000 	.word	0x00000000

0800f390 <__ieee754_rem_pio2>:
 800f390:	b570      	push	{r4, r5, r6, lr}
 800f392:	eeb0 7b40 	vmov.f64	d7, d0
 800f396:	ee17 5a90 	vmov	r5, s15
 800f39a:	4b95      	ldr	r3, [pc, #596]	; (800f5f0 <__ieee754_rem_pio2+0x260>)
 800f39c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f3a0:	429e      	cmp	r6, r3
 800f3a2:	b088      	sub	sp, #32
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	dc07      	bgt.n	800f3b8 <__ieee754_rem_pio2+0x28>
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	ed84 0b00 	vstr	d0, [r4]
 800f3b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	e01b      	b.n	800f3f0 <__ieee754_rem_pio2+0x60>
 800f3b8:	4b8e      	ldr	r3, [pc, #568]	; (800f5f4 <__ieee754_rem_pio2+0x264>)
 800f3ba:	429e      	cmp	r6, r3
 800f3bc:	dc3b      	bgt.n	800f436 <__ieee754_rem_pio2+0xa6>
 800f3be:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800f3c2:	2d00      	cmp	r5, #0
 800f3c4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800f5b0 <__ieee754_rem_pio2+0x220>
 800f3c8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800f3cc:	dd19      	ble.n	800f402 <__ieee754_rem_pio2+0x72>
 800f3ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f3d2:	429e      	cmp	r6, r3
 800f3d4:	d00e      	beq.n	800f3f4 <__ieee754_rem_pio2+0x64>
 800f3d6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800f5b8 <__ieee754_rem_pio2+0x228>
 800f3da:	ee37 5b46 	vsub.f64	d5, d7, d6
 800f3de:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f3e2:	ed84 5b00 	vstr	d5, [r4]
 800f3e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3ea:	ed84 7b02 	vstr	d7, [r4, #8]
 800f3ee:	2001      	movs	r0, #1
 800f3f0:	b008      	add	sp, #32
 800f3f2:	bd70      	pop	{r4, r5, r6, pc}
 800f3f4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800f5c0 <__ieee754_rem_pio2+0x230>
 800f3f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3fc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800f5c8 <__ieee754_rem_pio2+0x238>
 800f400:	e7eb      	b.n	800f3da <__ieee754_rem_pio2+0x4a>
 800f402:	429e      	cmp	r6, r3
 800f404:	ee30 7b06 	vadd.f64	d7, d0, d6
 800f408:	d00e      	beq.n	800f428 <__ieee754_rem_pio2+0x98>
 800f40a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800f5b8 <__ieee754_rem_pio2+0x228>
 800f40e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800f412:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f416:	ed84 5b00 	vstr	d5, [r4]
 800f41a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f41e:	f04f 30ff 	mov.w	r0, #4294967295
 800f422:	ed84 7b02 	vstr	d7, [r4, #8]
 800f426:	e7e3      	b.n	800f3f0 <__ieee754_rem_pio2+0x60>
 800f428:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800f5c0 <__ieee754_rem_pio2+0x230>
 800f42c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f430:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800f5c8 <__ieee754_rem_pio2+0x238>
 800f434:	e7eb      	b.n	800f40e <__ieee754_rem_pio2+0x7e>
 800f436:	4b70      	ldr	r3, [pc, #448]	; (800f5f8 <__ieee754_rem_pio2+0x268>)
 800f438:	429e      	cmp	r6, r3
 800f43a:	dc6c      	bgt.n	800f516 <__ieee754_rem_pio2+0x186>
 800f43c:	f000 fc48 	bl	800fcd0 <fabs>
 800f440:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f444:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800f5d0 <__ieee754_rem_pio2+0x240>
 800f448:	eea0 7b06 	vfma.f64	d7, d0, d6
 800f44c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f450:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f454:	ee17 0a90 	vmov	r0, s15
 800f458:	eeb1 5b44 	vneg.f64	d5, d4
 800f45c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800f5b0 <__ieee754_rem_pio2+0x220>
 800f460:	eea5 0b07 	vfma.f64	d0, d5, d7
 800f464:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800f5b8 <__ieee754_rem_pio2+0x228>
 800f468:	281f      	cmp	r0, #31
 800f46a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f46e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f472:	dc08      	bgt.n	800f486 <__ieee754_rem_pio2+0xf6>
 800f474:	1e42      	subs	r2, r0, #1
 800f476:	4b61      	ldr	r3, [pc, #388]	; (800f5fc <__ieee754_rem_pio2+0x26c>)
 800f478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f47c:	42b3      	cmp	r3, r6
 800f47e:	d002      	beq.n	800f486 <__ieee754_rem_pio2+0xf6>
 800f480:	ed84 6b00 	vstr	d6, [r4]
 800f484:	e022      	b.n	800f4cc <__ieee754_rem_pio2+0x13c>
 800f486:	ee16 3a90 	vmov	r3, s13
 800f48a:	1536      	asrs	r6, r6, #20
 800f48c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f490:	1af3      	subs	r3, r6, r3
 800f492:	2b10      	cmp	r3, #16
 800f494:	ddf4      	ble.n	800f480 <__ieee754_rem_pio2+0xf0>
 800f496:	eeb0 6b40 	vmov.f64	d6, d0
 800f49a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800f5c0 <__ieee754_rem_pio2+0x230>
 800f49e:	eea5 6b03 	vfma.f64	d6, d5, d3
 800f4a2:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f4a6:	eea5 7b03 	vfma.f64	d7, d5, d3
 800f4aa:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800f5c8 <__ieee754_rem_pio2+0x238>
 800f4ae:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800f4b2:	ee36 3b47 	vsub.f64	d3, d6, d7
 800f4b6:	ee13 3a90 	vmov	r3, s7
 800f4ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f4be:	1af6      	subs	r6, r6, r3
 800f4c0:	2e31      	cmp	r6, #49	; 0x31
 800f4c2:	dc17      	bgt.n	800f4f4 <__ieee754_rem_pio2+0x164>
 800f4c4:	eeb0 0b46 	vmov.f64	d0, d6
 800f4c8:	ed84 3b00 	vstr	d3, [r4]
 800f4cc:	ed94 6b00 	vldr	d6, [r4]
 800f4d0:	2d00      	cmp	r5, #0
 800f4d2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f4d6:	ee30 7b47 	vsub.f64	d7, d0, d7
 800f4da:	ed84 7b02 	vstr	d7, [r4, #8]
 800f4de:	da87      	bge.n	800f3f0 <__ieee754_rem_pio2+0x60>
 800f4e0:	eeb1 6b46 	vneg.f64	d6, d6
 800f4e4:	ed84 6b00 	vstr	d6, [r4]
 800f4e8:	eeb1 7b47 	vneg.f64	d7, d7
 800f4ec:	4240      	negs	r0, r0
 800f4ee:	ed84 7b02 	vstr	d7, [r4, #8]
 800f4f2:	e77d      	b.n	800f3f0 <__ieee754_rem_pio2+0x60>
 800f4f4:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800f5d8 <__ieee754_rem_pio2+0x248>
 800f4f8:	eeb0 0b46 	vmov.f64	d0, d6
 800f4fc:	eea5 0b03 	vfma.f64	d0, d5, d3
 800f500:	ee36 7b40 	vsub.f64	d7, d6, d0
 800f504:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800f5e0 <__ieee754_rem_pio2+0x250>
 800f508:	eea5 7b03 	vfma.f64	d7, d5, d3
 800f50c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800f510:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f514:	e7b4      	b.n	800f480 <__ieee754_rem_pio2+0xf0>
 800f516:	4b3a      	ldr	r3, [pc, #232]	; (800f600 <__ieee754_rem_pio2+0x270>)
 800f518:	429e      	cmp	r6, r3
 800f51a:	dd06      	ble.n	800f52a <__ieee754_rem_pio2+0x19a>
 800f51c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800f520:	ed80 7b02 	vstr	d7, [r0, #8]
 800f524:	ed80 7b00 	vstr	d7, [r0]
 800f528:	e744      	b.n	800f3b4 <__ieee754_rem_pio2+0x24>
 800f52a:	1532      	asrs	r2, r6, #20
 800f52c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800f530:	ee10 0a10 	vmov	r0, s0
 800f534:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800f538:	ec41 0b17 	vmov	d7, r0, r1
 800f53c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f540:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800f5e8 <__ieee754_rem_pio2+0x258>
 800f544:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f548:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f54c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f550:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f554:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f558:	a908      	add	r1, sp, #32
 800f55a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f55e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f562:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f566:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f56a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f56e:	2303      	movs	r3, #3
 800f570:	ed31 7b02 	vldmdb	r1!, {d7}
 800f574:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57c:	f103 30ff 	add.w	r0, r3, #4294967295
 800f580:	d013      	beq.n	800f5aa <__ieee754_rem_pio2+0x21a>
 800f582:	4920      	ldr	r1, [pc, #128]	; (800f604 <__ieee754_rem_pio2+0x274>)
 800f584:	9101      	str	r1, [sp, #4]
 800f586:	2102      	movs	r1, #2
 800f588:	9100      	str	r1, [sp, #0]
 800f58a:	a802      	add	r0, sp, #8
 800f58c:	4621      	mov	r1, r4
 800f58e:	f000 f8ab 	bl	800f6e8 <__kernel_rem_pio2>
 800f592:	2d00      	cmp	r5, #0
 800f594:	f6bf af2c 	bge.w	800f3f0 <__ieee754_rem_pio2+0x60>
 800f598:	ed94 7b00 	vldr	d7, [r4]
 800f59c:	eeb1 7b47 	vneg.f64	d7, d7
 800f5a0:	ed84 7b00 	vstr	d7, [r4]
 800f5a4:	ed94 7b02 	vldr	d7, [r4, #8]
 800f5a8:	e79e      	b.n	800f4e8 <__ieee754_rem_pio2+0x158>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	e7e0      	b.n	800f570 <__ieee754_rem_pio2+0x1e0>
 800f5ae:	bf00      	nop
 800f5b0:	54400000 	.word	0x54400000
 800f5b4:	3ff921fb 	.word	0x3ff921fb
 800f5b8:	1a626331 	.word	0x1a626331
 800f5bc:	3dd0b461 	.word	0x3dd0b461
 800f5c0:	1a600000 	.word	0x1a600000
 800f5c4:	3dd0b461 	.word	0x3dd0b461
 800f5c8:	2e037073 	.word	0x2e037073
 800f5cc:	3ba3198a 	.word	0x3ba3198a
 800f5d0:	6dc9c883 	.word	0x6dc9c883
 800f5d4:	3fe45f30 	.word	0x3fe45f30
 800f5d8:	2e000000 	.word	0x2e000000
 800f5dc:	3ba3198a 	.word	0x3ba3198a
 800f5e0:	252049c1 	.word	0x252049c1
 800f5e4:	397b839a 	.word	0x397b839a
 800f5e8:	00000000 	.word	0x00000000
 800f5ec:	41700000 	.word	0x41700000
 800f5f0:	3fe921fb 	.word	0x3fe921fb
 800f5f4:	4002d97b 	.word	0x4002d97b
 800f5f8:	413921fb 	.word	0x413921fb
 800f5fc:	08019508 	.word	0x08019508
 800f600:	7fefffff 	.word	0x7fefffff
 800f604:	08019588 	.word	0x08019588

0800f608 <__ieee754_sqrt>:
 800f608:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800f60c:	4770      	bx	lr
	...

0800f610 <__kernel_cos>:
 800f610:	ee10 1a90 	vmov	r1, s1
 800f614:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f61c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800f620:	da05      	bge.n	800f62e <__kernel_cos+0x1e>
 800f622:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800f626:	ee16 3a90 	vmov	r3, s13
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d03d      	beq.n	800f6aa <__kernel_cos+0x9a>
 800f62e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800f632:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f636:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800f6b0 <__kernel_cos+0xa0>
 800f63a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800f63e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800f642:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800f6b8 <__kernel_cos+0xa8>
 800f646:	eea4 5b03 	vfma.f64	d5, d4, d3
 800f64a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800f6c0 <__kernel_cos+0xb0>
 800f64e:	eea5 3b04 	vfma.f64	d3, d5, d4
 800f652:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800f6c8 <__kernel_cos+0xb8>
 800f656:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f65a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800f6d0 <__kernel_cos+0xc0>
 800f65e:	4b20      	ldr	r3, [pc, #128]	; (800f6e0 <__kernel_cos+0xd0>)
 800f660:	eea5 3b04 	vfma.f64	d3, d5, d4
 800f664:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800f6d8 <__kernel_cos+0xc8>
 800f668:	4299      	cmp	r1, r3
 800f66a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f66e:	ee25 5b04 	vmul.f64	d5, d5, d4
 800f672:	eea4 1b05 	vfma.f64	d1, d4, d5
 800f676:	dc04      	bgt.n	800f682 <__kernel_cos+0x72>
 800f678:	ee36 6b41 	vsub.f64	d6, d6, d1
 800f67c:	ee37 0b46 	vsub.f64	d0, d7, d6
 800f680:	4770      	bx	lr
 800f682:	4b18      	ldr	r3, [pc, #96]	; (800f6e4 <__kernel_cos+0xd4>)
 800f684:	4299      	cmp	r1, r3
 800f686:	dc0d      	bgt.n	800f6a4 <__kernel_cos+0x94>
 800f688:	2200      	movs	r2, #0
 800f68a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800f68e:	ec43 2b15 	vmov	d5, r2, r3
 800f692:	ee37 0b45 	vsub.f64	d0, d7, d5
 800f696:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f69a:	ee36 6b41 	vsub.f64	d6, d6, d1
 800f69e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f6a2:	4770      	bx	lr
 800f6a4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800f6a8:	e7f3      	b.n	800f692 <__kernel_cos+0x82>
 800f6aa:	eeb0 0b47 	vmov.f64	d0, d7
 800f6ae:	4770      	bx	lr
 800f6b0:	be8838d4 	.word	0xbe8838d4
 800f6b4:	bda8fae9 	.word	0xbda8fae9
 800f6b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f6bc:	3e21ee9e 	.word	0x3e21ee9e
 800f6c0:	809c52ad 	.word	0x809c52ad
 800f6c4:	be927e4f 	.word	0xbe927e4f
 800f6c8:	19cb1590 	.word	0x19cb1590
 800f6cc:	3efa01a0 	.word	0x3efa01a0
 800f6d0:	16c15177 	.word	0x16c15177
 800f6d4:	bf56c16c 	.word	0xbf56c16c
 800f6d8:	5555554c 	.word	0x5555554c
 800f6dc:	3fa55555 	.word	0x3fa55555
 800f6e0:	3fd33332 	.word	0x3fd33332
 800f6e4:	3fe90000 	.word	0x3fe90000

0800f6e8 <__kernel_rem_pio2>:
 800f6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ec:	ed2d 8b06 	vpush	{d8-d10}
 800f6f0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800f6f4:	469b      	mov	fp, r3
 800f6f6:	460e      	mov	r6, r1
 800f6f8:	4bc7      	ldr	r3, [pc, #796]	; (800fa18 <__kernel_rem_pio2+0x330>)
 800f6fa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800f6fc:	9002      	str	r0, [sp, #8]
 800f6fe:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800f702:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800f704:	1ed1      	subs	r1, r2, #3
 800f706:	2318      	movs	r3, #24
 800f708:	f06f 0417 	mvn.w	r4, #23
 800f70c:	fb91 f1f3 	sdiv	r1, r1, r3
 800f710:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800f714:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f718:	fb01 4404 	mla	r4, r1, r4, r4
 800f71c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800fa00 <__kernel_rem_pio2+0x318>
 800f720:	4414      	add	r4, r2
 800f722:	eba1 050a 	sub.w	r5, r1, sl
 800f726:	aa1a      	add	r2, sp, #104	; 0x68
 800f728:	eb09 070a 	add.w	r7, r9, sl
 800f72c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800f730:	4696      	mov	lr, r2
 800f732:	2300      	movs	r3, #0
 800f734:	42bb      	cmp	r3, r7
 800f736:	dd0f      	ble.n	800f758 <__kernel_rem_pio2+0x70>
 800f738:	af6a      	add	r7, sp, #424	; 0x1a8
 800f73a:	2200      	movs	r2, #0
 800f73c:	454a      	cmp	r2, r9
 800f73e:	dc28      	bgt.n	800f792 <__kernel_rem_pio2+0xaa>
 800f740:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800f744:	eb0b 0302 	add.w	r3, fp, r2
 800f748:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800f74c:	9d02      	ldr	r5, [sp, #8]
 800f74e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800fa00 <__kernel_rem_pio2+0x318>
 800f752:	f04f 0c00 	mov.w	ip, #0
 800f756:	e016      	b.n	800f786 <__kernel_rem_pio2+0x9e>
 800f758:	42dd      	cmn	r5, r3
 800f75a:	d409      	bmi.n	800f770 <__kernel_rem_pio2+0x88>
 800f75c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800f760:	ee07 2a90 	vmov	s15, r2
 800f764:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f768:	ecae 7b02 	vstmia	lr!, {d7}
 800f76c:	3301      	adds	r3, #1
 800f76e:	e7e1      	b.n	800f734 <__kernel_rem_pio2+0x4c>
 800f770:	eeb0 7b46 	vmov.f64	d7, d6
 800f774:	e7f8      	b.n	800f768 <__kernel_rem_pio2+0x80>
 800f776:	ecb5 5b02 	vldmia	r5!, {d5}
 800f77a:	ed33 6b02 	vldmdb	r3!, {d6}
 800f77e:	f10c 0c01 	add.w	ip, ip, #1
 800f782:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f786:	45d4      	cmp	ip, sl
 800f788:	ddf5      	ble.n	800f776 <__kernel_rem_pio2+0x8e>
 800f78a:	eca7 7b02 	vstmia	r7!, {d7}
 800f78e:	3201      	adds	r2, #1
 800f790:	e7d4      	b.n	800f73c <__kernel_rem_pio2+0x54>
 800f792:	ab06      	add	r3, sp, #24
 800f794:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f798:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800fa08 <__kernel_rem_pio2+0x320>
 800f79c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800fa10 <__kernel_rem_pio2+0x328>
 800f7a0:	9304      	str	r3, [sp, #16]
 800f7a2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800f7a6:	9303      	str	r3, [sp, #12]
 800f7a8:	464d      	mov	r5, r9
 800f7aa:	ab92      	add	r3, sp, #584	; 0x248
 800f7ac:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800f7b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f7b4:	3f01      	subs	r7, #1
 800f7b6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800f7ba:	00ff      	lsls	r7, r7, #3
 800f7bc:	ab92      	add	r3, sp, #584	; 0x248
 800f7be:	19da      	adds	r2, r3, r7
 800f7c0:	3a98      	subs	r2, #152	; 0x98
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	1ae9      	subs	r1, r5, r3
 800f7c6:	2900      	cmp	r1, #0
 800f7c8:	dc4e      	bgt.n	800f868 <__kernel_rem_pio2+0x180>
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f000 fba4 	bl	800ff18 <scalbn>
 800f7d0:	eeb0 8b40 	vmov.f64	d8, d0
 800f7d4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f7d8:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f7dc:	f000 fa8c 	bl	800fcf8 <floor>
 800f7e0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f7e4:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f7e8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f7ec:	2c00      	cmp	r4, #0
 800f7ee:	edcd 7a01 	vstr	s15, [sp, #4]
 800f7f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f7f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f7fa:	dd4a      	ble.n	800f892 <__kernel_rem_pio2+0x1aa>
 800f7fc:	1e69      	subs	r1, r5, #1
 800f7fe:	ab06      	add	r3, sp, #24
 800f800:	f1c4 0018 	rsb	r0, r4, #24
 800f804:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800f808:	9a01      	ldr	r2, [sp, #4]
 800f80a:	fa4c f300 	asr.w	r3, ip, r0
 800f80e:	441a      	add	r2, r3
 800f810:	4083      	lsls	r3, r0
 800f812:	9201      	str	r2, [sp, #4]
 800f814:	ebac 0203 	sub.w	r2, ip, r3
 800f818:	ab06      	add	r3, sp, #24
 800f81a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f81e:	f1c4 0317 	rsb	r3, r4, #23
 800f822:	fa42 f803 	asr.w	r8, r2, r3
 800f826:	f1b8 0f00 	cmp.w	r8, #0
 800f82a:	dd43      	ble.n	800f8b4 <__kernel_rem_pio2+0x1cc>
 800f82c:	9b01      	ldr	r3, [sp, #4]
 800f82e:	2000      	movs	r0, #0
 800f830:	3301      	adds	r3, #1
 800f832:	9301      	str	r3, [sp, #4]
 800f834:	4601      	mov	r1, r0
 800f836:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800f83a:	4285      	cmp	r5, r0
 800f83c:	dc6e      	bgt.n	800f91c <__kernel_rem_pio2+0x234>
 800f83e:	2c00      	cmp	r4, #0
 800f840:	dd04      	ble.n	800f84c <__kernel_rem_pio2+0x164>
 800f842:	2c01      	cmp	r4, #1
 800f844:	d07f      	beq.n	800f946 <__kernel_rem_pio2+0x25e>
 800f846:	2c02      	cmp	r4, #2
 800f848:	f000 8087 	beq.w	800f95a <__kernel_rem_pio2+0x272>
 800f84c:	f1b8 0f02 	cmp.w	r8, #2
 800f850:	d130      	bne.n	800f8b4 <__kernel_rem_pio2+0x1cc>
 800f852:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f856:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f85a:	b359      	cbz	r1, 800f8b4 <__kernel_rem_pio2+0x1cc>
 800f85c:	4620      	mov	r0, r4
 800f85e:	f000 fb5b 	bl	800ff18 <scalbn>
 800f862:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f866:	e025      	b.n	800f8b4 <__kernel_rem_pio2+0x1cc>
 800f868:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f86c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f870:	a806      	add	r0, sp, #24
 800f872:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f876:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f87a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f87e:	ee10 1a10 	vmov	r1, s0
 800f882:	ed32 0b02 	vldmdb	r2!, {d0}
 800f886:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800f88a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f88e:	3301      	adds	r3, #1
 800f890:	e798      	b.n	800f7c4 <__kernel_rem_pio2+0xdc>
 800f892:	d106      	bne.n	800f8a2 <__kernel_rem_pio2+0x1ba>
 800f894:	1e6b      	subs	r3, r5, #1
 800f896:	aa06      	add	r2, sp, #24
 800f898:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f89c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800f8a0:	e7c1      	b.n	800f826 <__kernel_rem_pio2+0x13e>
 800f8a2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f8a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ae:	da32      	bge.n	800f916 <__kernel_rem_pio2+0x22e>
 800f8b0:	f04f 0800 	mov.w	r8, #0
 800f8b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8bc:	f040 80b0 	bne.w	800fa20 <__kernel_rem_pio2+0x338>
 800f8c0:	1e6b      	subs	r3, r5, #1
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	4548      	cmp	r0, r9
 800f8c8:	da4e      	bge.n	800f968 <__kernel_rem_pio2+0x280>
 800f8ca:	2a00      	cmp	r2, #0
 800f8cc:	f000 8088 	beq.w	800f9e0 <__kernel_rem_pio2+0x2f8>
 800f8d0:	aa06      	add	r2, sp, #24
 800f8d2:	3c18      	subs	r4, #24
 800f8d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f8d8:	2900      	cmp	r1, #0
 800f8da:	f000 808e 	beq.w	800f9fa <__kernel_rem_pio2+0x312>
 800f8de:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	9302      	str	r3, [sp, #8]
 800f8e6:	f000 fb17 	bl	800ff18 <scalbn>
 800f8ea:	9b02      	ldr	r3, [sp, #8]
 800f8ec:	aa6a      	add	r2, sp, #424	; 0x1a8
 800f8ee:	00d9      	lsls	r1, r3, #3
 800f8f0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800fa08 <__kernel_rem_pio2+0x320>
 800f8f4:	1850      	adds	r0, r2, r1
 800f8f6:	f100 0508 	add.w	r5, r0, #8
 800f8fa:	461c      	mov	r4, r3
 800f8fc:	2c00      	cmp	r4, #0
 800f8fe:	f280 80bd 	bge.w	800fa7c <__kernel_rem_pio2+0x394>
 800f902:	2500      	movs	r5, #0
 800f904:	1b5c      	subs	r4, r3, r5
 800f906:	2c00      	cmp	r4, #0
 800f908:	f2c0 80dd 	blt.w	800fac6 <__kernel_rem_pio2+0x3de>
 800f90c:	4f43      	ldr	r7, [pc, #268]	; (800fa1c <__kernel_rem_pio2+0x334>)
 800f90e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800fa00 <__kernel_rem_pio2+0x318>
 800f912:	2400      	movs	r4, #0
 800f914:	e0cb      	b.n	800faae <__kernel_rem_pio2+0x3c6>
 800f916:	f04f 0802 	mov.w	r8, #2
 800f91a:	e787      	b.n	800f82c <__kernel_rem_pio2+0x144>
 800f91c:	ab06      	add	r3, sp, #24
 800f91e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f922:	b949      	cbnz	r1, 800f938 <__kernel_rem_pio2+0x250>
 800f924:	b12b      	cbz	r3, 800f932 <__kernel_rem_pio2+0x24a>
 800f926:	aa06      	add	r2, sp, #24
 800f928:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f92c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f930:	2301      	movs	r3, #1
 800f932:	3001      	adds	r0, #1
 800f934:	4619      	mov	r1, r3
 800f936:	e780      	b.n	800f83a <__kernel_rem_pio2+0x152>
 800f938:	aa06      	add	r2, sp, #24
 800f93a:	ebac 0303 	sub.w	r3, ip, r3
 800f93e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f942:	460b      	mov	r3, r1
 800f944:	e7f5      	b.n	800f932 <__kernel_rem_pio2+0x24a>
 800f946:	1e68      	subs	r0, r5, #1
 800f948:	ab06      	add	r3, sp, #24
 800f94a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f94e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f952:	aa06      	add	r2, sp, #24
 800f954:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f958:	e778      	b.n	800f84c <__kernel_rem_pio2+0x164>
 800f95a:	1e68      	subs	r0, r5, #1
 800f95c:	ab06      	add	r3, sp, #24
 800f95e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f962:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f966:	e7f4      	b.n	800f952 <__kernel_rem_pio2+0x26a>
 800f968:	a906      	add	r1, sp, #24
 800f96a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f96e:	3801      	subs	r0, #1
 800f970:	430a      	orrs	r2, r1
 800f972:	e7a8      	b.n	800f8c6 <__kernel_rem_pio2+0x1de>
 800f974:	f10c 0c01 	add.w	ip, ip, #1
 800f978:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f97c:	2a00      	cmp	r2, #0
 800f97e:	d0f9      	beq.n	800f974 <__kernel_rem_pio2+0x28c>
 800f980:	eb0b 0305 	add.w	r3, fp, r5
 800f984:	aa1a      	add	r2, sp, #104	; 0x68
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	1898      	adds	r0, r3, r2
 800f98a:	3008      	adds	r0, #8
 800f98c:	1c69      	adds	r1, r5, #1
 800f98e:	3708      	adds	r7, #8
 800f990:	2200      	movs	r2, #0
 800f992:	4465      	add	r5, ip
 800f994:	9005      	str	r0, [sp, #20]
 800f996:	428d      	cmp	r5, r1
 800f998:	f6ff af07 	blt.w	800f7aa <__kernel_rem_pio2+0xc2>
 800f99c:	a81a      	add	r0, sp, #104	; 0x68
 800f99e:	eb02 0c03 	add.w	ip, r2, r3
 800f9a2:	4484      	add	ip, r0
 800f9a4:	9803      	ldr	r0, [sp, #12]
 800f9a6:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f9aa:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800f9ae:	9001      	str	r0, [sp, #4]
 800f9b0:	ee07 0a90 	vmov	s15, r0
 800f9b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f9b8:	9805      	ldr	r0, [sp, #20]
 800f9ba:	ed8c 7b00 	vstr	d7, [ip]
 800f9be:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800fa00 <__kernel_rem_pio2+0x318>
 800f9c2:	eb00 0802 	add.w	r8, r0, r2
 800f9c6:	f04f 0c00 	mov.w	ip, #0
 800f9ca:	45d4      	cmp	ip, sl
 800f9cc:	dd0c      	ble.n	800f9e8 <__kernel_rem_pio2+0x300>
 800f9ce:	eb02 0c07 	add.w	ip, r2, r7
 800f9d2:	a86a      	add	r0, sp, #424	; 0x1a8
 800f9d4:	4484      	add	ip, r0
 800f9d6:	ed8c 7b02 	vstr	d7, [ip, #8]
 800f9da:	3101      	adds	r1, #1
 800f9dc:	3208      	adds	r2, #8
 800f9de:	e7da      	b.n	800f996 <__kernel_rem_pio2+0x2ae>
 800f9e0:	9b04      	ldr	r3, [sp, #16]
 800f9e2:	f04f 0c01 	mov.w	ip, #1
 800f9e6:	e7c7      	b.n	800f978 <__kernel_rem_pio2+0x290>
 800f9e8:	ecbe 5b02 	vldmia	lr!, {d5}
 800f9ec:	ed38 6b02 	vldmdb	r8!, {d6}
 800f9f0:	f10c 0c01 	add.w	ip, ip, #1
 800f9f4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f9f8:	e7e7      	b.n	800f9ca <__kernel_rem_pio2+0x2e2>
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	e768      	b.n	800f8d0 <__kernel_rem_pio2+0x1e8>
 800f9fe:	bf00      	nop
	...
 800fa0c:	3e700000 	.word	0x3e700000
 800fa10:	00000000 	.word	0x00000000
 800fa14:	41700000 	.word	0x41700000
 800fa18:	080196d0 	.word	0x080196d0
 800fa1c:	08019690 	.word	0x08019690
 800fa20:	4260      	negs	r0, r4
 800fa22:	eeb0 0b48 	vmov.f64	d0, d8
 800fa26:	f000 fa77 	bl	800ff18 <scalbn>
 800fa2a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800fc08 <__kernel_rem_pio2+0x520>
 800fa2e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800fa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa36:	db18      	blt.n	800fa6a <__kernel_rem_pio2+0x382>
 800fa38:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800fc10 <__kernel_rem_pio2+0x528>
 800fa3c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800fa40:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800fa44:	aa06      	add	r2, sp, #24
 800fa46:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800fa4a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800fa4e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fa52:	a906      	add	r1, sp, #24
 800fa54:	ee10 3a10 	vmov	r3, s0
 800fa58:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800fa5c:	1c6b      	adds	r3, r5, #1
 800fa5e:	ee17 2a10 	vmov	r2, s14
 800fa62:	3418      	adds	r4, #24
 800fa64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fa68:	e739      	b.n	800f8de <__kernel_rem_pio2+0x1f6>
 800fa6a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fa6e:	aa06      	add	r2, sp, #24
 800fa70:	ee10 3a10 	vmov	r3, s0
 800fa74:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800fa78:	462b      	mov	r3, r5
 800fa7a:	e730      	b.n	800f8de <__kernel_rem_pio2+0x1f6>
 800fa7c:	aa06      	add	r2, sp, #24
 800fa7e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800fa82:	9202      	str	r2, [sp, #8]
 800fa84:	ee07 2a90 	vmov	s15, r2
 800fa88:	3c01      	subs	r4, #1
 800fa8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fa8e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800fa92:	ee20 0b06 	vmul.f64	d0, d0, d6
 800fa96:	ed25 7b02 	vstmdb	r5!, {d7}
 800fa9a:	e72f      	b.n	800f8fc <__kernel_rem_pio2+0x214>
 800fa9c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800faa0:	ecb7 5b02 	vldmia	r7!, {d5}
 800faa4:	ed9c 6b00 	vldr	d6, [ip]
 800faa8:	3401      	adds	r4, #1
 800faaa:	eea5 7b06 	vfma.f64	d7, d5, d6
 800faae:	454c      	cmp	r4, r9
 800fab0:	dc01      	bgt.n	800fab6 <__kernel_rem_pio2+0x3ce>
 800fab2:	42a5      	cmp	r5, r4
 800fab4:	daf2      	bge.n	800fa9c <__kernel_rem_pio2+0x3b4>
 800fab6:	aa42      	add	r2, sp, #264	; 0x108
 800fab8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800fabc:	ed84 7b00 	vstr	d7, [r4]
 800fac0:	3501      	adds	r5, #1
 800fac2:	3808      	subs	r0, #8
 800fac4:	e71e      	b.n	800f904 <__kernel_rem_pio2+0x21c>
 800fac6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800fac8:	2a03      	cmp	r2, #3
 800faca:	d84e      	bhi.n	800fb6a <__kernel_rem_pio2+0x482>
 800facc:	e8df f002 	tbb	[pc, r2]
 800fad0:	021f1f3e 	.word	0x021f1f3e
 800fad4:	3108      	adds	r1, #8
 800fad6:	aa42      	add	r2, sp, #264	; 0x108
 800fad8:	4411      	add	r1, r2
 800fada:	4608      	mov	r0, r1
 800fadc:	461c      	mov	r4, r3
 800fade:	2c00      	cmp	r4, #0
 800fae0:	dc61      	bgt.n	800fba6 <__kernel_rem_pio2+0x4be>
 800fae2:	4608      	mov	r0, r1
 800fae4:	461c      	mov	r4, r3
 800fae6:	2c01      	cmp	r4, #1
 800fae8:	dc6d      	bgt.n	800fbc6 <__kernel_rem_pio2+0x4de>
 800faea:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800fc18 <__kernel_rem_pio2+0x530>
 800faee:	2b01      	cmp	r3, #1
 800faf0:	dc79      	bgt.n	800fbe6 <__kernel_rem_pio2+0x4fe>
 800faf2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800faf6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800fafa:	f1b8 0f00 	cmp.w	r8, #0
 800fafe:	d178      	bne.n	800fbf2 <__kernel_rem_pio2+0x50a>
 800fb00:	ed86 5b00 	vstr	d5, [r6]
 800fb04:	ed86 6b02 	vstr	d6, [r6, #8]
 800fb08:	ed86 7b04 	vstr	d7, [r6, #16]
 800fb0c:	e02d      	b.n	800fb6a <__kernel_rem_pio2+0x482>
 800fb0e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800fc18 <__kernel_rem_pio2+0x530>
 800fb12:	3108      	adds	r1, #8
 800fb14:	aa42      	add	r2, sp, #264	; 0x108
 800fb16:	4411      	add	r1, r2
 800fb18:	4618      	mov	r0, r3
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	da34      	bge.n	800fb88 <__kernel_rem_pio2+0x4a0>
 800fb1e:	f1b8 0f00 	cmp.w	r8, #0
 800fb22:	d037      	beq.n	800fb94 <__kernel_rem_pio2+0x4ac>
 800fb24:	eeb1 7b46 	vneg.f64	d7, d6
 800fb28:	ed86 7b00 	vstr	d7, [r6]
 800fb2c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800fb30:	a844      	add	r0, sp, #272	; 0x110
 800fb32:	2101      	movs	r1, #1
 800fb34:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fb38:	428b      	cmp	r3, r1
 800fb3a:	da2e      	bge.n	800fb9a <__kernel_rem_pio2+0x4b2>
 800fb3c:	f1b8 0f00 	cmp.w	r8, #0
 800fb40:	d001      	beq.n	800fb46 <__kernel_rem_pio2+0x45e>
 800fb42:	eeb1 7b47 	vneg.f64	d7, d7
 800fb46:	ed86 7b02 	vstr	d7, [r6, #8]
 800fb4a:	e00e      	b.n	800fb6a <__kernel_rem_pio2+0x482>
 800fb4c:	aa92      	add	r2, sp, #584	; 0x248
 800fb4e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800fc18 <__kernel_rem_pio2+0x530>
 800fb52:	4411      	add	r1, r2
 800fb54:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	da0f      	bge.n	800fb7c <__kernel_rem_pio2+0x494>
 800fb5c:	f1b8 0f00 	cmp.w	r8, #0
 800fb60:	d001      	beq.n	800fb66 <__kernel_rem_pio2+0x47e>
 800fb62:	eeb1 7b47 	vneg.f64	d7, d7
 800fb66:	ed86 7b00 	vstr	d7, [r6]
 800fb6a:	9b01      	ldr	r3, [sp, #4]
 800fb6c:	f003 0007 	and.w	r0, r3, #7
 800fb70:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800fb74:	ecbd 8b06 	vpop	{d8-d10}
 800fb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb7c:	ed31 6b02 	vldmdb	r1!, {d6}
 800fb80:	3b01      	subs	r3, #1
 800fb82:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fb86:	e7e7      	b.n	800fb58 <__kernel_rem_pio2+0x470>
 800fb88:	ed31 7b02 	vldmdb	r1!, {d7}
 800fb8c:	3801      	subs	r0, #1
 800fb8e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fb92:	e7c2      	b.n	800fb1a <__kernel_rem_pio2+0x432>
 800fb94:	eeb0 7b46 	vmov.f64	d7, d6
 800fb98:	e7c6      	b.n	800fb28 <__kernel_rem_pio2+0x440>
 800fb9a:	ecb0 6b02 	vldmia	r0!, {d6}
 800fb9e:	3101      	adds	r1, #1
 800fba0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fba4:	e7c8      	b.n	800fb38 <__kernel_rem_pio2+0x450>
 800fba6:	ed10 7b04 	vldr	d7, [r0, #-16]
 800fbaa:	ed30 5b02 	vldmdb	r0!, {d5}
 800fbae:	3c01      	subs	r4, #1
 800fbb0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fbb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fbb8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800fbbc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fbc0:	ed80 7b00 	vstr	d7, [r0]
 800fbc4:	e78b      	b.n	800fade <__kernel_rem_pio2+0x3f6>
 800fbc6:	ed10 7b04 	vldr	d7, [r0, #-16]
 800fbca:	ed30 5b02 	vldmdb	r0!, {d5}
 800fbce:	3c01      	subs	r4, #1
 800fbd0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fbd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fbd8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800fbdc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fbe0:	ed80 7b00 	vstr	d7, [r0]
 800fbe4:	e77f      	b.n	800fae6 <__kernel_rem_pio2+0x3fe>
 800fbe6:	ed31 6b02 	vldmdb	r1!, {d6}
 800fbea:	3b01      	subs	r3, #1
 800fbec:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fbf0:	e77d      	b.n	800faee <__kernel_rem_pio2+0x406>
 800fbf2:	eeb1 5b45 	vneg.f64	d5, d5
 800fbf6:	eeb1 6b46 	vneg.f64	d6, d6
 800fbfa:	ed86 5b00 	vstr	d5, [r6]
 800fbfe:	eeb1 7b47 	vneg.f64	d7, d7
 800fc02:	ed86 6b02 	vstr	d6, [r6, #8]
 800fc06:	e77f      	b.n	800fb08 <__kernel_rem_pio2+0x420>
 800fc08:	00000000 	.word	0x00000000
 800fc0c:	41700000 	.word	0x41700000
 800fc10:	00000000 	.word	0x00000000
 800fc14:	3e700000 	.word	0x3e700000
	...

0800fc20 <__kernel_sin>:
 800fc20:	ee10 3a90 	vmov	r3, s1
 800fc24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc28:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fc2c:	da04      	bge.n	800fc38 <__kernel_sin+0x18>
 800fc2e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800fc32:	ee17 3a90 	vmov	r3, s15
 800fc36:	b35b      	cbz	r3, 800fc90 <__kernel_sin+0x70>
 800fc38:	ee20 6b00 	vmul.f64	d6, d0, d0
 800fc3c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800fc40:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800fc98 <__kernel_sin+0x78>
 800fc44:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800fca0 <__kernel_sin+0x80>
 800fc48:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fc4c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800fca8 <__kernel_sin+0x88>
 800fc50:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fc54:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800fcb0 <__kernel_sin+0x90>
 800fc58:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fc5c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800fcb8 <__kernel_sin+0x98>
 800fc60:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fc64:	b930      	cbnz	r0, 800fc74 <__kernel_sin+0x54>
 800fc66:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800fcc0 <__kernel_sin+0xa0>
 800fc6a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fc6e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800fc72:	4770      	bx	lr
 800fc74:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800fc78:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800fc7c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800fc80:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800fc84:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800fcc8 <__kernel_sin+0xa8>
 800fc88:	eea5 1b07 	vfma.f64	d1, d5, d7
 800fc8c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop
 800fc94:	f3af 8000 	nop.w
 800fc98:	5acfd57c 	.word	0x5acfd57c
 800fc9c:	3de5d93a 	.word	0x3de5d93a
 800fca0:	8a2b9ceb 	.word	0x8a2b9ceb
 800fca4:	be5ae5e6 	.word	0xbe5ae5e6
 800fca8:	57b1fe7d 	.word	0x57b1fe7d
 800fcac:	3ec71de3 	.word	0x3ec71de3
 800fcb0:	19c161d5 	.word	0x19c161d5
 800fcb4:	bf2a01a0 	.word	0xbf2a01a0
 800fcb8:	1110f8a6 	.word	0x1110f8a6
 800fcbc:	3f811111 	.word	0x3f811111
 800fcc0:	55555549 	.word	0x55555549
 800fcc4:	bfc55555 	.word	0xbfc55555
 800fcc8:	55555549 	.word	0x55555549
 800fccc:	3fc55555 	.word	0x3fc55555

0800fcd0 <fabs>:
 800fcd0:	ec51 0b10 	vmov	r0, r1, d0
 800fcd4:	ee10 2a10 	vmov	r2, s0
 800fcd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fcdc:	ec43 2b10 	vmov	d0, r2, r3
 800fce0:	4770      	bx	lr

0800fce2 <finite>:
 800fce2:	ee10 3a90 	vmov	r3, s1
 800fce6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800fcea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fcee:	0fc0      	lsrs	r0, r0, #31
 800fcf0:	4770      	bx	lr
 800fcf2:	0000      	movs	r0, r0
 800fcf4:	0000      	movs	r0, r0
	...

0800fcf8 <floor>:
 800fcf8:	ee10 1a90 	vmov	r1, s1
 800fcfc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fd00:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800fd04:	2b13      	cmp	r3, #19
 800fd06:	b530      	push	{r4, r5, lr}
 800fd08:	ee10 0a10 	vmov	r0, s0
 800fd0c:	ee10 5a10 	vmov	r5, s0
 800fd10:	dc33      	bgt.n	800fd7a <floor+0x82>
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	da17      	bge.n	800fd46 <floor+0x4e>
 800fd16:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800fdd8 <floor+0xe0>
 800fd1a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fd1e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd26:	dd09      	ble.n	800fd3c <floor+0x44>
 800fd28:	2900      	cmp	r1, #0
 800fd2a:	da50      	bge.n	800fdce <floor+0xd6>
 800fd2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd30:	4a2b      	ldr	r2, [pc, #172]	; (800fde0 <floor+0xe8>)
 800fd32:	4303      	orrs	r3, r0
 800fd34:	2000      	movs	r0, #0
 800fd36:	4283      	cmp	r3, r0
 800fd38:	bf18      	it	ne
 800fd3a:	4611      	movne	r1, r2
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4602      	mov	r2, r0
 800fd40:	ec43 2b10 	vmov	d0, r2, r3
 800fd44:	e020      	b.n	800fd88 <floor+0x90>
 800fd46:	4a27      	ldr	r2, [pc, #156]	; (800fde4 <floor+0xec>)
 800fd48:	411a      	asrs	r2, r3
 800fd4a:	ea01 0402 	and.w	r4, r1, r2
 800fd4e:	4304      	orrs	r4, r0
 800fd50:	d01a      	beq.n	800fd88 <floor+0x90>
 800fd52:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fdd8 <floor+0xe0>
 800fd56:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fd5a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd62:	ddeb      	ble.n	800fd3c <floor+0x44>
 800fd64:	2900      	cmp	r1, #0
 800fd66:	bfbe      	ittt	lt
 800fd68:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800fd6c:	fa40 f303 	asrlt.w	r3, r0, r3
 800fd70:	18c9      	addlt	r1, r1, r3
 800fd72:	ea21 0102 	bic.w	r1, r1, r2
 800fd76:	2000      	movs	r0, #0
 800fd78:	e7e0      	b.n	800fd3c <floor+0x44>
 800fd7a:	2b33      	cmp	r3, #51	; 0x33
 800fd7c:	dd05      	ble.n	800fd8a <floor+0x92>
 800fd7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd82:	d101      	bne.n	800fd88 <floor+0x90>
 800fd84:	ee30 0b00 	vadd.f64	d0, d0, d0
 800fd88:	bd30      	pop	{r4, r5, pc}
 800fd8a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800fd8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd92:	40e2      	lsrs	r2, r4
 800fd94:	4202      	tst	r2, r0
 800fd96:	d0f7      	beq.n	800fd88 <floor+0x90>
 800fd98:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800fdd8 <floor+0xe0>
 800fd9c:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fda0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda8:	ddc8      	ble.n	800fd3c <floor+0x44>
 800fdaa:	2900      	cmp	r1, #0
 800fdac:	da02      	bge.n	800fdb4 <floor+0xbc>
 800fdae:	2b14      	cmp	r3, #20
 800fdb0:	d103      	bne.n	800fdba <floor+0xc2>
 800fdb2:	3101      	adds	r1, #1
 800fdb4:	ea20 0002 	bic.w	r0, r0, r2
 800fdb8:	e7c0      	b.n	800fd3c <floor+0x44>
 800fdba:	2401      	movs	r4, #1
 800fdbc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fdc0:	fa04 f303 	lsl.w	r3, r4, r3
 800fdc4:	4418      	add	r0, r3
 800fdc6:	42a8      	cmp	r0, r5
 800fdc8:	bf38      	it	cc
 800fdca:	1909      	addcc	r1, r1, r4
 800fdcc:	e7f2      	b.n	800fdb4 <floor+0xbc>
 800fdce:	2000      	movs	r0, #0
 800fdd0:	4601      	mov	r1, r0
 800fdd2:	e7b3      	b.n	800fd3c <floor+0x44>
 800fdd4:	f3af 8000 	nop.w
 800fdd8:	8800759c 	.word	0x8800759c
 800fddc:	7e37e43c 	.word	0x7e37e43c
 800fde0:	bff00000 	.word	0xbff00000
 800fde4:	000fffff 	.word	0x000fffff

0800fde8 <matherr>:
 800fde8:	2000      	movs	r0, #0
 800fdea:	4770      	bx	lr
 800fdec:	0000      	movs	r0, r0
	...

0800fdf0 <nan>:
 800fdf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fdf8 <nan+0x8>
 800fdf4:	4770      	bx	lr
 800fdf6:	bf00      	nop
 800fdf8:	00000000 	.word	0x00000000
 800fdfc:	7ff80000 	.word	0x7ff80000

0800fe00 <rint>:
 800fe00:	b530      	push	{r4, r5, lr}
 800fe02:	b085      	sub	sp, #20
 800fe04:	ed8d 0b00 	vstr	d0, [sp]
 800fe08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe0c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800fe10:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800fe14:	2813      	cmp	r0, #19
 800fe16:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800fe1a:	dc5a      	bgt.n	800fed2 <rint+0xd2>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	da2f      	bge.n	800fe80 <rint+0x80>
 800fe20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe24:	4311      	orrs	r1, r2
 800fe26:	d027      	beq.n	800fe78 <rint+0x78>
 800fe28:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800fe2c:	4315      	orrs	r5, r2
 800fe2e:	426a      	negs	r2, r5
 800fe30:	432a      	orrs	r2, r5
 800fe32:	0b12      	lsrs	r2, r2, #12
 800fe34:	0c5b      	lsrs	r3, r3, #17
 800fe36:	045b      	lsls	r3, r3, #17
 800fe38:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800fe3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe40:	ea42 0103 	orr.w	r1, r2, r3
 800fe44:	4b31      	ldr	r3, [pc, #196]	; (800ff0c <rint+0x10c>)
 800fe46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe4a:	ed93 6b00 	vldr	d6, [r3]
 800fe4e:	ec41 0b17 	vmov	d7, r0, r1
 800fe52:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fe56:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe62:	ed8d 7b00 	vstr	d7, [sp]
 800fe66:	9b01      	ldr	r3, [sp, #4]
 800fe68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe70:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800fe74:	e9cd 0100 	strd	r0, r1, [sp]
 800fe78:	ed9d 0b00 	vldr	d0, [sp]
 800fe7c:	b005      	add	sp, #20
 800fe7e:	bd30      	pop	{r4, r5, pc}
 800fe80:	4923      	ldr	r1, [pc, #140]	; (800ff10 <rint+0x110>)
 800fe82:	4101      	asrs	r1, r0
 800fe84:	ea03 0501 	and.w	r5, r3, r1
 800fe88:	4315      	orrs	r5, r2
 800fe8a:	d0f5      	beq.n	800fe78 <rint+0x78>
 800fe8c:	0849      	lsrs	r1, r1, #1
 800fe8e:	ea03 0501 	and.w	r5, r3, r1
 800fe92:	432a      	orrs	r2, r5
 800fe94:	d00b      	beq.n	800feae <rint+0xae>
 800fe96:	ea23 0101 	bic.w	r1, r3, r1
 800fe9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fe9e:	2813      	cmp	r0, #19
 800fea0:	fa43 f300 	asr.w	r3, r3, r0
 800fea4:	bf0c      	ite	eq
 800fea6:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800feaa:	2200      	movne	r2, #0
 800feac:	430b      	orrs	r3, r1
 800feae:	4619      	mov	r1, r3
 800feb0:	4b16      	ldr	r3, [pc, #88]	; (800ff0c <rint+0x10c>)
 800feb2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800feb6:	ed94 6b00 	vldr	d6, [r4]
 800feba:	4610      	mov	r0, r2
 800febc:	ec41 0b17 	vmov	d7, r0, r1
 800fec0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fec4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fec8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fecc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fed0:	e008      	b.n	800fee4 <rint+0xe4>
 800fed2:	2833      	cmp	r0, #51	; 0x33
 800fed4:	dd09      	ble.n	800feea <rint+0xea>
 800fed6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800feda:	d1cd      	bne.n	800fe78 <rint+0x78>
 800fedc:	ed9d 7b00 	vldr	d7, [sp]
 800fee0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fee4:	ed8d 7b00 	vstr	d7, [sp]
 800fee8:	e7c6      	b.n	800fe78 <rint+0x78>
 800feea:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800feee:	f04f 31ff 	mov.w	r1, #4294967295
 800fef2:	40c1      	lsrs	r1, r0
 800fef4:	420a      	tst	r2, r1
 800fef6:	d0bf      	beq.n	800fe78 <rint+0x78>
 800fef8:	0849      	lsrs	r1, r1, #1
 800fefa:	420a      	tst	r2, r1
 800fefc:	bf1f      	itttt	ne
 800fefe:	ea22 0101 	bicne.w	r1, r2, r1
 800ff02:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800ff06:	4102      	asrne	r2, r0
 800ff08:	430a      	orrne	r2, r1
 800ff0a:	e7d0      	b.n	800feae <rint+0xae>
 800ff0c:	080196e0 	.word	0x080196e0
 800ff10:	000fffff 	.word	0x000fffff
 800ff14:	00000000 	.word	0x00000000

0800ff18 <scalbn>:
 800ff18:	b500      	push	{lr}
 800ff1a:	ed2d 8b02 	vpush	{d8}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	ed8d 0b00 	vstr	d0, [sp]
 800ff24:	9b01      	ldr	r3, [sp, #4]
 800ff26:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ff2a:	b9a2      	cbnz	r2, 800ff56 <scalbn+0x3e>
 800ff2c:	9a00      	ldr	r2, [sp, #0]
 800ff2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ff32:	4313      	orrs	r3, r2
 800ff34:	d03a      	beq.n	800ffac <scalbn+0x94>
 800ff36:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800fff0 <scalbn+0xd8>
 800ff3a:	4b35      	ldr	r3, [pc, #212]	; (8010010 <scalbn+0xf8>)
 800ff3c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ff40:	4298      	cmp	r0, r3
 800ff42:	ed8d 7b00 	vstr	d7, [sp]
 800ff46:	da11      	bge.n	800ff6c <scalbn+0x54>
 800ff48:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800fff8 <scalbn+0xe0>
 800ff4c:	ed9d 6b00 	vldr	d6, [sp]
 800ff50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff54:	e007      	b.n	800ff66 <scalbn+0x4e>
 800ff56:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ff5a:	428a      	cmp	r2, r1
 800ff5c:	d10a      	bne.n	800ff74 <scalbn+0x5c>
 800ff5e:	ed9d 7b00 	vldr	d7, [sp]
 800ff62:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ff66:	ed8d 7b00 	vstr	d7, [sp]
 800ff6a:	e01f      	b.n	800ffac <scalbn+0x94>
 800ff6c:	9b01      	ldr	r3, [sp, #4]
 800ff6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ff72:	3a36      	subs	r2, #54	; 0x36
 800ff74:	4402      	add	r2, r0
 800ff76:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ff7a:	428a      	cmp	r2, r1
 800ff7c:	dd0a      	ble.n	800ff94 <scalbn+0x7c>
 800ff7e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8010000 <scalbn+0xe8>
 800ff82:	eeb0 0b48 	vmov.f64	d0, d8
 800ff86:	ed9d 1b00 	vldr	d1, [sp]
 800ff8a:	f000 f95f 	bl	801024c <copysign>
 800ff8e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800ff92:	e7e8      	b.n	800ff66 <scalbn+0x4e>
 800ff94:	2a00      	cmp	r2, #0
 800ff96:	dd10      	ble.n	800ffba <scalbn+0xa2>
 800ff98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffa0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ffa4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ffa8:	e9cd 0100 	strd	r0, r1, [sp]
 800ffac:	ed9d 0b00 	vldr	d0, [sp]
 800ffb0:	b003      	add	sp, #12
 800ffb2:	ecbd 8b02 	vpop	{d8}
 800ffb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffba:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ffbe:	da06      	bge.n	800ffce <scalbn+0xb6>
 800ffc0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ffc4:	4298      	cmp	r0, r3
 800ffc6:	dcda      	bgt.n	800ff7e <scalbn+0x66>
 800ffc8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800fff8 <scalbn+0xe0>
 800ffcc:	e7d9      	b.n	800ff82 <scalbn+0x6a>
 800ffce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffd6:	3236      	adds	r2, #54	; 0x36
 800ffd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ffdc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ffe0:	ec41 0b17 	vmov	d7, r0, r1
 800ffe4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8010008 <scalbn+0xf0>
 800ffe8:	e7b2      	b.n	800ff50 <scalbn+0x38>
 800ffea:	bf00      	nop
 800ffec:	f3af 8000 	nop.w
 800fff0:	00000000 	.word	0x00000000
 800fff4:	43500000 	.word	0x43500000
 800fff8:	c2f8f359 	.word	0xc2f8f359
 800fffc:	01a56e1f 	.word	0x01a56e1f
 8010000:	8800759c 	.word	0x8800759c
 8010004:	7e37e43c 	.word	0x7e37e43c
 8010008:	00000000 	.word	0x00000000
 801000c:	3c900000 	.word	0x3c900000
 8010010:	ffff3cb0 	.word	0xffff3cb0
 8010014:	00000000 	.word	0x00000000

08010018 <__ieee754_log>:
 8010018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801001a:	ed8d 0b00 	vstr	d0, [sp]
 801001e:	9a01      	ldr	r2, [sp, #4]
 8010020:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8010024:	da26      	bge.n	8010074 <__ieee754_log+0x5c>
 8010026:	9900      	ldr	r1, [sp, #0]
 8010028:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801002c:	430b      	orrs	r3, r1
 801002e:	d107      	bne.n	8010040 <__ieee754_log+0x28>
 8010030:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80101e0 <__ieee754_log+0x1c8>
 8010034:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 80101e8 <__ieee754_log+0x1d0>
 8010038:	ee86 0b07 	vdiv.f64	d0, d6, d7
 801003c:	b003      	add	sp, #12
 801003e:	bd30      	pop	{r4, r5, pc}
 8010040:	2a00      	cmp	r2, #0
 8010042:	da04      	bge.n	801004e <__ieee754_log+0x36>
 8010044:	ed9d 7b00 	vldr	d7, [sp]
 8010048:	ee37 6b47 	vsub.f64	d6, d7, d7
 801004c:	e7f2      	b.n	8010034 <__ieee754_log+0x1c>
 801004e:	ed9d 6b00 	vldr	d6, [sp]
 8010052:	ed9f 7b67 	vldr	d7, [pc, #412]	; 80101f0 <__ieee754_log+0x1d8>
 8010056:	ee26 7b07 	vmul.f64	d7, d6, d7
 801005a:	ed8d 7b00 	vstr	d7, [sp]
 801005e:	9a01      	ldr	r2, [sp, #4]
 8010060:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8010064:	4b78      	ldr	r3, [pc, #480]	; (8010248 <__ieee754_log+0x230>)
 8010066:	429a      	cmp	r2, r3
 8010068:	dd06      	ble.n	8010078 <__ieee754_log+0x60>
 801006a:	ed9d 7b00 	vldr	d7, [sp]
 801006e:	ee37 0b07 	vadd.f64	d0, d7, d7
 8010072:	e7e3      	b.n	801003c <__ieee754_log+0x24>
 8010074:	2100      	movs	r1, #0
 8010076:	e7f5      	b.n	8010064 <__ieee754_log+0x4c>
 8010078:	1513      	asrs	r3, r2, #20
 801007a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 801007e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010082:	4419      	add	r1, r3
 8010084:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 8010088:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801008c:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 8010090:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 8010094:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010098:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801009c:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 80100a0:	ea45 0300 	orr.w	r3, r5, r0
 80100a4:	ec43 2b10 	vmov	d0, r2, r3
 80100a8:	1c82      	adds	r2, r0, #2
 80100aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80100ae:	2a02      	cmp	r2, #2
 80100b0:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 80100b4:	ee30 0b47 	vsub.f64	d0, d0, d7
 80100b8:	dc31      	bgt.n	801011e <__ieee754_log+0x106>
 80100ba:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80100be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c2:	d10f      	bne.n	80100e4 <__ieee754_log+0xcc>
 80100c4:	2c00      	cmp	r4, #0
 80100c6:	f000 8086 	beq.w	80101d6 <__ieee754_log+0x1be>
 80100ca:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80101f8 <__ieee754_log+0x1e0>
 80100ce:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8010200 <__ieee754_log+0x1e8>
 80100d2:	ee07 4a90 	vmov	s15, r4
 80100d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80100da:	ee27 0b00 	vmul.f64	d0, d7, d0
 80100de:	eea7 0b06 	vfma.f64	d0, d7, d6
 80100e2:	e7ab      	b.n	801003c <__ieee754_log+0x24>
 80100e4:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8010208 <__ieee754_log+0x1f0>
 80100e8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80100ec:	eea0 6b47 	vfms.f64	d6, d0, d7
 80100f0:	ee20 7b00 	vmul.f64	d7, d0, d0
 80100f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80100f8:	b914      	cbnz	r4, 8010100 <__ieee754_log+0xe8>
 80100fa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80100fe:	e79d      	b.n	801003c <__ieee754_log+0x24>
 8010100:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 80101f8 <__ieee754_log+0x1e0>
 8010104:	ee07 4a90 	vmov	s15, r4
 8010108:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801010c:	eea7 6b45 	vfms.f64	d6, d7, d5
 8010110:	ee36 0b40 	vsub.f64	d0, d6, d0
 8010114:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8010200 <__ieee754_log+0x1e8>
 8010118:	ee97 0b06 	vfnms.f64	d0, d7, d6
 801011c:	e78e      	b.n	801003c <__ieee754_log+0x24>
 801011e:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010122:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010126:	ee80 4b07 	vdiv.f64	d4, d0, d7
 801012a:	ee07 4a90 	vmov	s15, r4
 801012e:	ee24 2b04 	vmul.f64	d2, d4, d4
 8010132:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8010210 <__ieee754_log+0x1f8>
 8010136:	ee22 5b02 	vmul.f64	d5, d2, d2
 801013a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801013e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8010218 <__ieee754_log+0x200>
 8010142:	eea5 7b03 	vfma.f64	d7, d5, d3
 8010146:	ed9f 3b36 	vldr	d3, [pc, #216]	; 8010220 <__ieee754_log+0x208>
 801014a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8010228 <__ieee754_log+0x210>
 801014e:	eea7 3b05 	vfma.f64	d3, d7, d5
 8010152:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8010230 <__ieee754_log+0x218>
 8010156:	eea5 7b01 	vfma.f64	d7, d5, d1
 801015a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8010238 <__ieee754_log+0x220>
 801015e:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 8010162:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 8010166:	eea7 1b05 	vfma.f64	d1, d7, d5
 801016a:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 801016e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8010240 <__ieee754_log+0x228>
 8010172:	3251      	adds	r2, #81	; 0x51
 8010174:	430a      	orrs	r2, r1
 8010176:	2a00      	cmp	r2, #0
 8010178:	eea1 7b05 	vfma.f64	d7, d1, d5
 801017c:	ee27 7b02 	vmul.f64	d7, d7, d2
 8010180:	eea3 7b05 	vfma.f64	d7, d3, d5
 8010184:	dd1c      	ble.n	80101c0 <__ieee754_log+0x1a8>
 8010186:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801018a:	ee20 5b05 	vmul.f64	d5, d0, d5
 801018e:	ee25 5b00 	vmul.f64	d5, d5, d0
 8010192:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010196:	ee27 7b04 	vmul.f64	d7, d7, d4
 801019a:	b924      	cbnz	r4, 80101a6 <__ieee754_log+0x18e>
 801019c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80101a0:	ee30 0b47 	vsub.f64	d0, d0, d7
 80101a4:	e74a      	b.n	801003c <__ieee754_log+0x24>
 80101a6:	ed9f 4b14 	vldr	d4, [pc, #80]	; 80101f8 <__ieee754_log+0x1e0>
 80101aa:	eea6 7b04 	vfma.f64	d7, d6, d4
 80101ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 80101b2:	ee37 0b40 	vsub.f64	d0, d7, d0
 80101b6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8010200 <__ieee754_log+0x1e8>
 80101ba:	ee96 0b07 	vfnms.f64	d0, d6, d7
 80101be:	e73d      	b.n	801003c <__ieee754_log+0x24>
 80101c0:	ee30 7b47 	vsub.f64	d7, d0, d7
 80101c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80101c8:	2c00      	cmp	r4, #0
 80101ca:	d0e9      	beq.n	80101a0 <__ieee754_log+0x188>
 80101cc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80101f8 <__ieee754_log+0x1e0>
 80101d0:	eea6 7b45 	vfms.f64	d7, d6, d5
 80101d4:	e7ed      	b.n	80101b2 <__ieee754_log+0x19a>
 80101d6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80101e8 <__ieee754_log+0x1d0>
 80101da:	e72f      	b.n	801003c <__ieee754_log+0x24>
 80101dc:	f3af 8000 	nop.w
 80101e0:	00000000 	.word	0x00000000
 80101e4:	c3500000 	.word	0xc3500000
	...
 80101f4:	43500000 	.word	0x43500000
 80101f8:	35793c76 	.word	0x35793c76
 80101fc:	3dea39ef 	.word	0x3dea39ef
 8010200:	fee00000 	.word	0xfee00000
 8010204:	3fe62e42 	.word	0x3fe62e42
 8010208:	55555555 	.word	0x55555555
 801020c:	3fd55555 	.word	0x3fd55555
 8010210:	d078c69f 	.word	0xd078c69f
 8010214:	3fc39a09 	.word	0x3fc39a09
 8010218:	1d8e78af 	.word	0x1d8e78af
 801021c:	3fcc71c5 	.word	0x3fcc71c5
 8010220:	9997fa04 	.word	0x9997fa04
 8010224:	3fd99999 	.word	0x3fd99999
 8010228:	df3e5244 	.word	0xdf3e5244
 801022c:	3fc2f112 	.word	0x3fc2f112
 8010230:	96cb03de 	.word	0x96cb03de
 8010234:	3fc74664 	.word	0x3fc74664
 8010238:	94229359 	.word	0x94229359
 801023c:	3fd24924 	.word	0x3fd24924
 8010240:	55555593 	.word	0x55555593
 8010244:	3fe55555 	.word	0x3fe55555
 8010248:	7fefffff 	.word	0x7fefffff

0801024c <copysign>:
 801024c:	ec51 0b10 	vmov	r0, r1, d0
 8010250:	ee11 0a90 	vmov	r0, s3
 8010254:	ee10 2a10 	vmov	r2, s0
 8010258:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801025c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010260:	ea41 0300 	orr.w	r3, r1, r0
 8010264:	ec43 2b10 	vmov	d0, r2, r3
 8010268:	4770      	bx	lr
	...

0801026c <_init>:
 801026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026e:	bf00      	nop
 8010270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010272:	bc08      	pop	{r3}
 8010274:	469e      	mov	lr, r3
 8010276:	4770      	bx	lr

08010278 <_fini>:
 8010278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801027a:	bf00      	nop
 801027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801027e:	bc08      	pop	{r3}
 8010280:	469e      	mov	lr, r3
 8010282:	4770      	bx	lr
