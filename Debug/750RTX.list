
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014698  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a9a0  08014938  08014938  00024938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f2d8  0801f2d8  00050800  2**0
                  CONTENTS
  4 .ARM          00000008  0801f2d8  0801f2d8  0002f2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f2e0  0801f2e0  00050800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f2e0  0801f2e0  0002f2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f2e4  0801f2e4  0002f2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005dc  24000000  0801f2e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d138  240005e0  0801f8c4  000305e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000640  2400d718  0801f8c4  0003d718  2**0
                  ALLOC
 11 .dtcm         00010800  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00050800  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0005082e  2**0
                  CONTENTS, READONLY
 14 .debug_line   00047991  00000000  00000000  00050871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000081  00000000  00000000  00098202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00043db7  00000000  00000000  00098283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008191  00000000  00000000  000dc03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001bd0  00000000  00000000  000e41d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018777c  00000000  00000000  000e5da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0001ef20  00000000  00000000  0026d51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00003371  00000000  00000000  0028c43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0000a18b  00000000  00000000  0028f7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000070e8  00000000  00000000  00299938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240005e0 	.word	0x240005e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014920 	.word	0x08014920

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240005e4 	.word	0x240005e4
 80002dc:	08014920 	.word	0x08014920

080002e0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002e0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002e2:	2b01      	cmp	r3, #1
	IT       LS
 80002e4:	bf98      	it	ls
	BXLS     lr
 80002e6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002ec:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002fe:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000300:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000302:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000304:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800030e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000314:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000318:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800031c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000320:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800032a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800033c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800033e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000340:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800034a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800034c:	2b01      	cmp	r3, #1
	IT       LS
 800034e:	bf98      	it	ls
	BXLS     lr
 8000350:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000356:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000362:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000380:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000386:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800038a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800038e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000392:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000394:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000396:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <strlen>:
 8000440:	4603      	mov	r3, r0
 8000442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000446:	2a00      	cmp	r2, #0
 8000448:	d1fb      	bne.n	8000442 <strlen+0x2>
 800044a:	1a18      	subs	r0, r3, r0
 800044c:	3801      	subs	r0, #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b970 	b.w	8000748 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	460d      	mov	r5, r1
 8000488:	4604      	mov	r4, r0
 800048a:	460f      	mov	r7, r1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d14a      	bne.n	8000526 <__udivmoddi4+0xa6>
 8000490:	428a      	cmp	r2, r1
 8000492:	4694      	mov	ip, r2
 8000494:	d965      	bls.n	8000562 <__udivmoddi4+0xe2>
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	b143      	cbz	r3, 80004ae <__udivmoddi4+0x2e>
 800049c:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a0:	f1c3 0220 	rsb	r2, r3, #32
 80004a4:	409f      	lsls	r7, r3
 80004a6:	fa20 f202 	lsr.w	r2, r0, r2
 80004aa:	4317      	orrs	r7, r2
 80004ac:	409c      	lsls	r4, r3
 80004ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004b2:	fa1f f58c 	uxth.w	r5, ip
 80004b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80004ba:	0c22      	lsrs	r2, r4, #16
 80004bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80004c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004c4:	fb01 f005 	mul.w	r0, r1, r5
 80004c8:	4290      	cmp	r0, r2
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x62>
 80004cc:	eb1c 0202 	adds.w	r2, ip, r2
 80004d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80004d4:	f080 811c 	bcs.w	8000710 <__udivmoddi4+0x290>
 80004d8:	4290      	cmp	r0, r2
 80004da:	f240 8119 	bls.w	8000710 <__udivmoddi4+0x290>
 80004de:	3902      	subs	r1, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a12      	subs	r2, r2, r0
 80004e4:	b2a4      	uxth	r4, r4
 80004e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80004ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f2:	fb00 f505 	mul.w	r5, r0, r5
 80004f6:	42a5      	cmp	r5, r4
 80004f8:	d90a      	bls.n	8000510 <__udivmoddi4+0x90>
 80004fa:	eb1c 0404 	adds.w	r4, ip, r4
 80004fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000502:	f080 8107 	bcs.w	8000714 <__udivmoddi4+0x294>
 8000506:	42a5      	cmp	r5, r4
 8000508:	f240 8104 	bls.w	8000714 <__udivmoddi4+0x294>
 800050c:	4464      	add	r4, ip
 800050e:	3802      	subs	r0, #2
 8000510:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	2100      	movs	r1, #0
 8000518:	b11e      	cbz	r6, 8000522 <__udivmoddi4+0xa2>
 800051a:	40dc      	lsrs	r4, r3
 800051c:	2300      	movs	r3, #0
 800051e:	e9c6 4300 	strd	r4, r3, [r6]
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0xbc>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80ed 	beq.w	800070a <__udivmoddi4+0x28a>
 8000530:	2100      	movs	r1, #0
 8000532:	e9c6 0500 	strd	r0, r5, [r6]
 8000536:	4608      	mov	r0, r1
 8000538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053c:	fab3 f183 	clz	r1, r3
 8000540:	2900      	cmp	r1, #0
 8000542:	d149      	bne.n	80005d8 <__udivmoddi4+0x158>
 8000544:	42ab      	cmp	r3, r5
 8000546:	d302      	bcc.n	800054e <__udivmoddi4+0xce>
 8000548:	4282      	cmp	r2, r0
 800054a:	f200 80f8 	bhi.w	800073e <__udivmoddi4+0x2be>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb65 0203 	sbc.w	r2, r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	4617      	mov	r7, r2
 8000558:	2e00      	cmp	r6, #0
 800055a:	d0e2      	beq.n	8000522 <__udivmoddi4+0xa2>
 800055c:	e9c6 4700 	strd	r4, r7, [r6]
 8000560:	e7df      	b.n	8000522 <__udivmoddi4+0xa2>
 8000562:	b902      	cbnz	r2, 8000566 <__udivmoddi4+0xe6>
 8000564:	deff      	udf	#255	; 0xff
 8000566:	fab2 f382 	clz	r3, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	f040 8090 	bne.w	8000690 <__udivmoddi4+0x210>
 8000570:	1a8a      	subs	r2, r1, r2
 8000572:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000576:	fa1f fe8c 	uxth.w	lr, ip
 800057a:	2101      	movs	r1, #1
 800057c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000580:	fb07 2015 	mls	r0, r7, r5, r2
 8000584:	0c22      	lsrs	r2, r4, #16
 8000586:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800058a:	fb0e f005 	mul.w	r0, lr, r5
 800058e:	4290      	cmp	r0, r2
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000592:	eb1c 0202 	adds.w	r2, ip, r2
 8000596:	f105 38ff 	add.w	r8, r5, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4290      	cmp	r0, r2
 800059e:	f200 80cb 	bhi.w	8000738 <__udivmoddi4+0x2b8>
 80005a2:	4645      	mov	r5, r8
 80005a4:	1a12      	subs	r2, r2, r0
 80005a6:	b2a4      	uxth	r4, r4
 80005a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80005ac:	fb07 2210 	mls	r2, r7, r0, r2
 80005b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005b4:	fb0e fe00 	mul.w	lr, lr, r0
 80005b8:	45a6      	cmp	lr, r4
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x14e>
 80005bc:	eb1c 0404 	adds.w	r4, ip, r4
 80005c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005c4:	d202      	bcs.n	80005cc <__udivmoddi4+0x14c>
 80005c6:	45a6      	cmp	lr, r4
 80005c8:	f200 80bb 	bhi.w	8000742 <__udivmoddi4+0x2c2>
 80005cc:	4610      	mov	r0, r2
 80005ce:	eba4 040e 	sub.w	r4, r4, lr
 80005d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005d6:	e79f      	b.n	8000518 <__udivmoddi4+0x98>
 80005d8:	f1c1 0720 	rsb	r7, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 fc07 	lsr.w	ip, r2, r7
 80005e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005e6:	fa05 f401 	lsl.w	r4, r5, r1
 80005ea:	fa20 f307 	lsr.w	r3, r0, r7
 80005ee:	40fd      	lsrs	r5, r7
 80005f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005f4:	4323      	orrs	r3, r4
 80005f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80005fa:	fa1f fe8c 	uxth.w	lr, ip
 80005fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000602:	0c1c      	lsrs	r4, r3, #16
 8000604:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000608:	fb08 f50e 	mul.w	r5, r8, lr
 800060c:	42a5      	cmp	r5, r4
 800060e:	fa02 f201 	lsl.w	r2, r2, r1
 8000612:	fa00 f001 	lsl.w	r0, r0, r1
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1c 0404 	adds.w	r4, ip, r4
 800061c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000620:	f080 8088 	bcs.w	8000734 <__udivmoddi4+0x2b4>
 8000624:	42a5      	cmp	r5, r4
 8000626:	f240 8085 	bls.w	8000734 <__udivmoddi4+0x2b4>
 800062a:	f1a8 0802 	sub.w	r8, r8, #2
 800062e:	4464      	add	r4, ip
 8000630:	1b64      	subs	r4, r4, r5
 8000632:	b29d      	uxth	r5, r3
 8000634:	fbb4 f3f9 	udiv	r3, r4, r9
 8000638:	fb09 4413 	mls	r4, r9, r3, r4
 800063c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000640:	fb03 fe0e 	mul.w	lr, r3, lr
 8000644:	45a6      	cmp	lr, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1c 0404 	adds.w	r4, ip, r4
 800064c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000650:	d26c      	bcs.n	800072c <__udivmoddi4+0x2ac>
 8000652:	45a6      	cmp	lr, r4
 8000654:	d96a      	bls.n	800072c <__udivmoddi4+0x2ac>
 8000656:	3b02      	subs	r3, #2
 8000658:	4464      	add	r4, ip
 800065a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800065e:	fba3 9502 	umull	r9, r5, r3, r2
 8000662:	eba4 040e 	sub.w	r4, r4, lr
 8000666:	42ac      	cmp	r4, r5
 8000668:	46c8      	mov	r8, r9
 800066a:	46ae      	mov	lr, r5
 800066c:	d356      	bcc.n	800071c <__udivmoddi4+0x29c>
 800066e:	d053      	beq.n	8000718 <__udivmoddi4+0x298>
 8000670:	b156      	cbz	r6, 8000688 <__udivmoddi4+0x208>
 8000672:	ebb0 0208 	subs.w	r2, r0, r8
 8000676:	eb64 040e 	sbc.w	r4, r4, lr
 800067a:	fa04 f707 	lsl.w	r7, r4, r7
 800067e:	40ca      	lsrs	r2, r1
 8000680:	40cc      	lsrs	r4, r1
 8000682:	4317      	orrs	r7, r2
 8000684:	e9c6 7400 	strd	r7, r4, [r6]
 8000688:	4618      	mov	r0, r3
 800068a:	2100      	movs	r1, #0
 800068c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000690:	f1c3 0120 	rsb	r1, r3, #32
 8000694:	fa02 fc03 	lsl.w	ip, r2, r3
 8000698:	fa20 f201 	lsr.w	r2, r0, r1
 800069c:	fa25 f101 	lsr.w	r1, r5, r1
 80006a0:	409d      	lsls	r5, r3
 80006a2:	432a      	orrs	r2, r5
 80006a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006a8:	fa1f fe8c 	uxth.w	lr, ip
 80006ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80006b0:	fb07 1510 	mls	r5, r7, r0, r1
 80006b4:	0c11      	lsrs	r1, r2, #16
 80006b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006ba:	fb00 f50e 	mul.w	r5, r0, lr
 80006be:	428d      	cmp	r5, r1
 80006c0:	fa04 f403 	lsl.w	r4, r4, r3
 80006c4:	d908      	bls.n	80006d8 <__udivmoddi4+0x258>
 80006c6:	eb1c 0101 	adds.w	r1, ip, r1
 80006ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80006ce:	d22f      	bcs.n	8000730 <__udivmoddi4+0x2b0>
 80006d0:	428d      	cmp	r5, r1
 80006d2:	d92d      	bls.n	8000730 <__udivmoddi4+0x2b0>
 80006d4:	3802      	subs	r0, #2
 80006d6:	4461      	add	r1, ip
 80006d8:	1b49      	subs	r1, r1, r5
 80006da:	b292      	uxth	r2, r2
 80006dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80006e0:	fb07 1115 	mls	r1, r7, r5, r1
 80006e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006e8:	fb05 f10e 	mul.w	r1, r5, lr
 80006ec:	4291      	cmp	r1, r2
 80006ee:	d908      	bls.n	8000702 <__udivmoddi4+0x282>
 80006f0:	eb1c 0202 	adds.w	r2, ip, r2
 80006f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80006f8:	d216      	bcs.n	8000728 <__udivmoddi4+0x2a8>
 80006fa:	4291      	cmp	r1, r2
 80006fc:	d914      	bls.n	8000728 <__udivmoddi4+0x2a8>
 80006fe:	3d02      	subs	r5, #2
 8000700:	4462      	add	r2, ip
 8000702:	1a52      	subs	r2, r2, r1
 8000704:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000708:	e738      	b.n	800057c <__udivmoddi4+0xfc>
 800070a:	4631      	mov	r1, r6
 800070c:	4630      	mov	r0, r6
 800070e:	e708      	b.n	8000522 <__udivmoddi4+0xa2>
 8000710:	4639      	mov	r1, r7
 8000712:	e6e6      	b.n	80004e2 <__udivmoddi4+0x62>
 8000714:	4610      	mov	r0, r2
 8000716:	e6fb      	b.n	8000510 <__udivmoddi4+0x90>
 8000718:	4548      	cmp	r0, r9
 800071a:	d2a9      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 800071c:	ebb9 0802 	subs.w	r8, r9, r2
 8000720:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000724:	3b01      	subs	r3, #1
 8000726:	e7a3      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000728:	4645      	mov	r5, r8
 800072a:	e7ea      	b.n	8000702 <__udivmoddi4+0x282>
 800072c:	462b      	mov	r3, r5
 800072e:	e794      	b.n	800065a <__udivmoddi4+0x1da>
 8000730:	4640      	mov	r0, r8
 8000732:	e7d1      	b.n	80006d8 <__udivmoddi4+0x258>
 8000734:	46d0      	mov	r8, sl
 8000736:	e77b      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000738:	3d02      	subs	r5, #2
 800073a:	4462      	add	r2, ip
 800073c:	e732      	b.n	80005a4 <__udivmoddi4+0x124>
 800073e:	4608      	mov	r0, r1
 8000740:	e70a      	b.n	8000558 <__udivmoddi4+0xd8>
 8000742:	4464      	add	r4, ip
 8000744:	3802      	subs	r0, #2
 8000746:	e742      	b.n	80005ce <__udivmoddi4+0x14e>

08000748 <__aeabi_idiv0>:
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop

0800074c <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000750:	4605      	mov	r5, r0
 8000752:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 8000754:	f8b5 8000 	ldrh.w	r8, [r5]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000758:	686a      	ldr	r2, [r5, #4]

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 800075a:	ea4f 0158 	mov.w	r1, r8, lsr #1
  float32_t * p2 = p1 + L;
 800075e:	eb00 0688 	add.w	r6, r0, r8, lsl #2
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000762:	ea5f 08d8 	movs.w	r8, r8, lsr #3
{
 8000766:	ed2d 8b08 	vpush	{d8-d11}
 800076a:	b082      	sub	sp, #8
  for (l = L >> 2; l > 0; l-- )
 800076c:	f000 80a9 	beq.w	80008c2 <arm_cfft_radix8by2_f32+0x176>
 8000770:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8000774:	f100 0310 	add.w	r3, r0, #16
 8000778:	f102 0710 	add.w	r7, r2, #16
 800077c:	f106 0e10 	add.w	lr, r6, #16
 8000780:	f10c 0c10 	add.w	ip, ip, #16
 8000784:	eb03 1808 	add.w	r8, r3, r8, lsl #4
 8000788:	eb00 040c 	add.w	r4, r0, ip
 800078c:	44b4      	add	ip, r6
    t1[0] = p1[0];
    t1[1] = p1[1];
    t1[2] = p1[2];
    t1[3] = p1[3];

    t2[0] = p2[0];
 800078e:	ed5e 2a04 	vldr	s5, [lr, #-16]
  for (l = L >> 2; l > 0; l-- )
 8000792:	f10c 0c10 	add.w	ip, ip, #16
    t2[1] = p2[1];
 8000796:	ed1e 3a03 	vldr	s6, [lr, #-12]
  for (l = L >> 2; l > 0; l-- )
 800079a:	f10e 0e10 	add.w	lr, lr, #16
    t3[0] = pMid1[0];
    t3[1] = pMid1[1];
    t3[2] = pMid1[2];
    t3[3] = pMid1[3];

    t4[0] = pMid2[0];
 800079e:	ed1c 2a08 	vldr	s4, [ip, #-32]	; 0xffffffe0
  for (l = L >> 2; l > 0; l-- )
 80007a2:	3710      	adds	r7, #16
    t4[1] = pMid2[1];
 80007a4:	ed5c 5a07 	vldr	s11, [ip, #-28]	; 0xffffffe4
  for (l = L >> 2; l > 0; l-- )
 80007a8:	3310      	adds	r3, #16
    t2[2] = p2[2];
 80007aa:	ed5e 3a06 	vldr	s7, [lr, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 80007ae:	3410      	adds	r4, #16
    t2[3] = p2[3];
 80007b0:	ed1e 4a05 	vldr	s8, [lr, #-20]	; 0xffffffec
    t4[2] = pMid2[2];
 80007b4:	ed5c 7a06 	vldr	s15, [ip, #-24]	; 0xffffffe8
    t4[3] = pMid2[3];
 80007b8:	ed5c 6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
    t1[0] = p1[0];
 80007bc:	ed13 1a08 	vldr	s2, [r3, #-32]	; 0xffffffe0
    t1[1] = p1[1];
 80007c0:	ed53 1a07 	vldr	s3, [r3, #-28]	; 0xffffffe4
    t1[2] = p1[2];
 80007c4:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8

    *p1++ = t1[0] + t2[0];
 80007c8:	ee71 ba22 	vadd.f32	s23, s2, s5
    t1[3] = p1[3];
 80007cc:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
    *p1++ = t1[1] + t2[1];
 80007d0:	ee31 ba83 	vadd.f32	s22, s3, s6
    t3[0] = pMid1[0];
 80007d4:	ed54 4a08 	vldr	s9, [r4, #-32]	; 0xffffffe0
    *p1++ = t1[2] + t2[2];
 80007d8:	ee76 aa23 	vadd.f32	s21, s12, s7
    t3[1] = pMid1[1];
 80007dc:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80007e0:	ee37 aa04 	vadd.f32	s20, s14, s8
    t3[2] = pMid1[2];
 80007e4:	ed54 0a06 	vldr	s1, [r4, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
    t2[1] = t1[1] - t2[1];
    t2[2] = t1[2] - t2[2];
    t2[3] = t1[3] - t2[3];    /* for col 2 */

    *pMid1++ = t3[0] + t4[0];
 80007e8:	ee74 9a82 	vadd.f32	s19, s9, s4
    t3[3] = pMid1[3];
 80007ec:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    *pMid1++ = t3[1] + t4[1];
 80007f0:	ee35 9a25 	vadd.f32	s18, s10, s11
    *pMid1++ = t3[2] + t4[2];
 80007f4:	ee70 8aa7 	vadd.f32	s17, s1, s15
    *p1++ = t1[0] + t2[0];
 80007f8:	ed43 ba08 	vstr	s23, [r3, #-32]	; 0xffffffe0
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80007fc:	ee30 8a26 	vadd.f32	s16, s0, s13
    *p1++ = t1[1] + t2[1];
 8000800:	ed03 ba07 	vstr	s22, [r3, #-28]	; 0xffffffe4
    *p1++ = t1[2] + t2[2];
 8000804:	ed43 aa06 	vstr	s21, [r3, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
 8000808:	ee31 1a62 	vsub.f32	s2, s2, s5
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800080c:	ed03 aa05 	vstr	s20, [r3, #-20]	; 0xffffffec
    t2[1] = t1[1] - t2[1];
 8000810:	ee71 1ac3 	vsub.f32	s3, s3, s6
    *pMid1++ = t3[0] + t4[0];
 8000814:	ed44 9a08 	vstr	s19, [r4, #-32]	; 0xffffffe0

    t4[0] = t4[0] - t3[0];
 8000818:	ee32 2a64 	vsub.f32	s4, s4, s9
    *pMid1++ = t3[1] + t4[1];
 800081c:	ed04 9a07 	vstr	s18, [r4, #-28]	; 0xffffffe4
    t4[1] = t4[1] - t3[1];
 8000820:	ee75 5ac5 	vsub.f32	s11, s11, s10
    *pMid1++ = t3[2] + t4[2];
 8000824:	ed44 8a06 	vstr	s17, [r4, #-24]	; 0xffffffe8
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8000828:	ee37 7a44 	vsub.f32	s14, s14, s8
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800082c:	ed04 8a05 	vstr	s16, [r4, #-20]	; 0xffffffec
    t2[2] = t1[2] - t2[2];
 8000830:	ee36 6a63 	vsub.f32	s12, s12, s7
    t4[2] = t4[2] - t3[2];
    t4[3] = t4[3] - t3[3];    /* for col 2 */

    twR = *tw++;
 8000834:	ed57 4a08 	vldr	s9, [r7, #-32]	; 0xffffffe0
    t4[2] = t4[2] - t3[2];
 8000838:	ee77 7ae0 	vsub.f32	s15, s15, s1
    twI = *tw++;
 800083c:	ed17 5a07 	vldr	s10, [r7, #-28]	; 0xffffffe4
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8000840:	ee76 6ac0 	vsub.f32	s13, s13, s0
    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
    m1 = t4[1] * twR;
    m2 = t4[1] * twI;
    m3 = t4[0] * twR;
 8000844:	ee22 4a24 	vmul.f32	s8, s4, s9
  for (l = L >> 2; l > 0; l-- )
 8000848:	4543      	cmp	r3, r8
    m1 = t2[1] * twI;
 800084a:	ee61 2a85 	vmul.f32	s5, s3, s10
    *p2++ = m2 - m3;
 800084e:	ee25 3a41 	vnmul.f32	s6, s10, s2

    *pMid2++ = m0 - m1;
 8000852:	ee64 3ae5 	vnmul.f32	s7, s9, s11
    *p2++ = m0 + m1;
 8000856:	eee1 2a24 	vfma.f32	s5, s2, s9
    *p2++ = m2 - m3;
 800085a:	eea1 3aa4 	vfma.f32	s6, s3, s9
    *pMid2++ = m2 + m3;
 800085e:	eef0 4a44 	vmov.f32	s9, s8
    *pMid2++ = m0 - m1;
 8000862:	eee2 3a05 	vfma.f32	s7, s4, s10
    *pMid2++ = m2 + m3;
 8000866:	eee5 4a85 	vfma.f32	s9, s11, s10
    *p2++ = m0 + m1;
 800086a:	ed4e 2a08 	vstr	s5, [lr, #-32]	; 0xffffffe0
    *p2++ = m2 - m3;
 800086e:	ed0e 3a07 	vstr	s6, [lr, #-28]	; 0xffffffe4
    *pMid2++ = m0 - m1;
 8000872:	ed4c 3a08 	vstr	s7, [ip, #-32]	; 0xffffffe0
    *pMid2++ = m2 + m3;
 8000876:	ed4c 4a07 	vstr	s9, [ip, #-28]	; 0xffffffe4

    twR = *tw++;
 800087a:	ed17 5a06 	vldr	s10, [r7, #-24]	; 0xffffffe8
    twI = *tw++;
 800087e:	ed57 5a05 	vldr	s11, [r7, #-20]	; 0xffffffec
    *p2++ = m2 - m3;

    m0 = t4[2] * twI;
    m1 = t4[3] * twR;
    m2 = t4[3] * twI;
    m3 = t4[2] * twR;
 8000882:	ee67 4a85 	vmul.f32	s9, s15, s10
    m1 = t2[3] * twI;
 8000886:	ee27 3a25 	vmul.f32	s6, s14, s11
    *p2++ = m2 - m3;
 800088a:	ee65 3ac6 	vnmul.f32	s7, s11, s12

    *pMid2++ = m0 - m1;
 800088e:	ee25 4a66 	vnmul.f32	s8, s10, s13
    *p2++ = m0 + m1;
 8000892:	eea6 3a05 	vfma.f32	s6, s12, s10
    *pMid2++ = m2 + m3;
 8000896:	eeb0 6a64 	vmov.f32	s12, s9
 800089a:	eea6 6aa5 	vfma.f32	s12, s13, s11
    *p2++ = m2 - m3;
 800089e:	eef0 6a63 	vmov.f32	s13, s7
    *p2++ = m0 + m1;
 80008a2:	ed0e 3a06 	vstr	s6, [lr, #-24]	; 0xffffffe8
    *p2++ = m2 - m3;
 80008a6:	eee7 6a05 	vfma.f32	s13, s14, s10
    *pMid2++ = m0 - m1;
 80008aa:	eeb0 7a44 	vmov.f32	s14, s8
 80008ae:	eea7 7aa5 	vfma.f32	s14, s15, s11
    *p2++ = m2 - m3;
 80008b2:	ed4e 6a05 	vstr	s13, [lr, #-20]	; 0xffffffec
    *pMid2++ = m2 + m3;
 80008b6:	ed0c 6a05 	vstr	s12, [ip, #-20]	; 0xffffffec
    *pMid2++ = m0 - m1;
 80008ba:	ed0c 7a06 	vstr	s14, [ip, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 80008be:	f47f af66 	bne.w	800078e <arm_cfft_radix8by2_f32+0x42>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80008c2:	b289      	uxth	r1, r1
 80008c4:	2302      	movs	r3, #2
 80008c6:	9101      	str	r1, [sp, #4]
 80008c8:	f000 facc 	bl	8000e64 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80008cc:	2302      	movs	r3, #2
 80008ce:	686a      	ldr	r2, [r5, #4]
 80008d0:	9901      	ldr	r1, [sp, #4]
 80008d2:	4630      	mov	r0, r6
}
 80008d4:	b002      	add	sp, #8
 80008d6:	ecbd 8b08 	vpop	{d8-d11}
 80008da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80008de:	f000 bac1 	b.w	8000e64 <arm_radix8_butterfly_f32>
 80008e2:	bf00      	nop

080008e4 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80008e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e8:	4607      	mov	r7, r0
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80008ea:	edd1 7a00 	vldr	s15, [r1]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 80008ee:	ed91 7a01 	vldr	s14, [r1, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80008f2:	460e      	mov	r6, r1
    uint32_t    L  = S->fftLen >> 1;
 80008f4:	883a      	ldrh	r2, [r7, #0]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80008f6:	687f      	ldr	r7, [r7, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80008f8:	3608      	adds	r6, #8
    uint32_t    L  = S->fftLen >> 1;
 80008fa:	0852      	lsrs	r2, r2, #1
{
 80008fc:	ed2d 8b06 	vpush	{d8-d10}
 8000900:	b08f      	sub	sp, #60	; 0x3c
    float32_t * p2 = p1 + L;
 8000902:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8000906:	0093      	lsls	r3, r2, #2
{
 8000908:	900b      	str	r0, [sp, #44]	; 0x2c
 800090a:	4608      	mov	r0, r1
 800090c:	910c      	str	r1, [sp, #48]	; 0x30
    float32_t * p3 = p2 + L;
 800090e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000912:	ed95 5a00 	vldr	s10, [r5]
    p1ap3_0 = p1[0] + p3[0];
 8000916:	edd1 6a00 	vldr	s13, [r1]
    float32_t * p4 = p3 + L;
 800091a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    p1ap3_1 = p1[1] + p3[1];
 800091e:	edd1 5a01 	vldr	s11, [r1, #4]
    L >>= 1;
 8000922:	0852      	lsrs	r2, r2, #1
    p1ap3_0 = p1[0] + p3[0];
 8000924:	ee37 6aa6 	vadd.f32	s12, s15, s13
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000928:	edd5 2a01 	vldr	s5, [r5, #4]
    p1sp3_0 = p1[0] - p3[0];
 800092c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    L >>= 1;
 8000930:	9207      	str	r2, [sp, #28]
    p1ap3_1 = p1[1] + p3[1];
 8000932:	ee77 6a25 	vadd.f32	s13, s14, s11
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8000936:	462a      	mov	r2, r5
    p1sp3_1 = p1[1] - p3[1];
 8000938:	ee37 7a65 	vsub.f32	s14, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800093c:	edd4 5a00 	vldr	s11, [r4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000940:	ee76 3a45 	vsub.f32	s7, s12, s10
    *p2++ = t2[0];
 8000944:	3208      	adds	r2, #8
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000946:	ee35 6a86 	vadd.f32	s12, s11, s12
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800094a:	ed94 2a01 	vldr	s4, [r4, #4]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800094e:	ee75 4a07 	vadd.f32	s9, s10, s14
    *p2++ = t2[0];
 8000952:	9206      	str	r2, [sp, #24]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000954:	ee35 7a87 	vadd.f32	s14, s11, s14
    *p2++ = t2[1];
    *p3++ = t3[0];
 8000958:	460a      	mov	r2, r1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800095a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800095e:	9604      	str	r6, [sp, #16]
    *p3++ = t3[0];
 8000960:	3208      	adds	r2, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000962:	ee32 3aa7 	vadd.f32	s6, s5, s15
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000966:	ee37 7a45 	vsub.f32	s14, s14, s10
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];

    tw2 += twMod2;
 800096a:	f107 0608 	add.w	r6, r7, #8
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800096e:	ed80 6a00 	vstr	s12, [r0]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000972:	ee36 4ae2 	vsub.f32	s8, s13, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000976:	ed94 5a01 	vldr	s10, [r4, #4]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800097a:	ee72 7a27 	vadd.f32	s15, s4, s15
    *p3++ = t3[0];
 800097e:	9200      	str	r2, [sp, #0]
    *p4++ = t4[0];
 8000980:	4622      	mov	r2, r4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000982:	ee76 6a85 	vadd.f32	s13, s13, s10
 8000986:	ed95 6a01 	vldr	s12, [r5, #4]
    *p4++ = t4[0];
 800098a:	3208      	adds	r2, #8
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800098c:	ee73 3ae5 	vsub.f32	s7, s7, s11
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000990:	ee33 3a42 	vsub.f32	s6, s6, s4
    float32_t * p3 = p2 + L;
 8000994:	9109      	str	r1, [sp, #36]	; 0x24
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000996:	ee34 4a42 	vsub.f32	s8, s8, s4
    *p4++ = t4[0];
 800099a:	9205      	str	r2, [sp, #20]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800099c:	ee77 7ae2 	vsub.f32	s15, s15, s5
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- )
 80009a0:	9a07      	ldr	r2, [sp, #28]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80009a2:	ee74 5ae5 	vsub.f32	s11, s9, s11
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80009a6:	970a      	str	r7, [sp, #40]	; 0x28
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80009a8:	ee76 6a86 	vadd.f32	s13, s13, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009ac:	3a02      	subs	r2, #2
 80009ae:	0852      	lsrs	r2, r2, #1
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80009b0:	edc0 6a01 	vstr	s13, [r0, #4]
    *p2++ = t2[0];
 80009b4:	ed85 3a00 	vstr	s6, [r5]
    *p2++ = t2[1];
 80009b8:	ed85 7a01 	vstr	s14, [r5, #4]
    *p3++ = t3[0];
 80009bc:	edc1 3a00 	vstr	s7, [r1]
    *p3++ = t3[1];
 80009c0:	ed81 4a01 	vstr	s8, [r1, #4]
    *p4++ = t4[0];
 80009c4:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
 80009c8:	edc4 5a01 	vstr	s11, [r4, #4]
    tw2 += twMod2;
 80009cc:	9603      	str	r6, [sp, #12]
    tw3 += twMod3;
 80009ce:	f107 0610 	add.w	r6, r7, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009d2:	9208      	str	r2, [sp, #32]
    tw3 += twMod3;
 80009d4:	9601      	str	r6, [sp, #4]
    tw4 += twMod4;
 80009d6:	f107 0618 	add.w	r6, r7, #24
 80009da:	9602      	str	r6, [sp, #8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009dc:	f000 8134 	beq.w	8000c48 <arm_cfft_radix8by4_f32+0x364>
 80009e0:	4693      	mov	fp, r2
 80009e2:	f100 0210 	add.w	r2, r0, #16
 80009e6:	3b0c      	subs	r3, #12
 80009e8:	f107 0920 	add.w	r9, r7, #32
 80009ec:	920d      	str	r2, [sp, #52]	; 0x34
 80009ee:	460a      	mov	r2, r1
 80009f0:	f107 0830 	add.w	r8, r7, #48	; 0x30
 80009f4:	4423      	add	r3, r4
 80009f6:	f102 0e10 	add.w	lr, r2, #16
 80009fa:	f1a5 060c 	sub.w	r6, r5, #12
 80009fe:	f8dd a004 	ldr.w	sl, [sp, #4]
 8000a02:	f105 0010 	add.w	r0, r5, #16
 8000a06:	390c      	subs	r1, #12
 8000a08:	f1a4 0c0c 	sub.w	ip, r4, #12
 8000a0c:	f104 0210 	add.w	r2, r4, #16
 8000a10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a12:	ed12 5a02 	vldr	s10, [r2, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a16:	f1bb 0b01 	subs.w	fp, fp, #1
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a1a:	ed50 5a02 	vldr	s11, [r0, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a1e:	f107 0708 	add.w	r7, r7, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a22:	ed5e 3a02 	vldr	s7, [lr, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a26:	f1a6 0608 	sub.w	r6, r6, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a2a:	ed17 7a04 	vldr	s14, [r7, #-16]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a2e:	ee75 6a85 	vadd.f32	s13, s11, s10
      p1ap3_1 = p1[1] + p3[1];
 8000a32:	ed1e 4a01 	vldr	s8, [lr, #-4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a36:	f10a 0a08 	add.w	sl, sl, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a3a:	ee37 1a23 	vadd.f32	s2, s14, s7
      p1ap3_1 = p1[1] + p3[1];
 8000a3e:	ed57 7a03 	vldr	s15, [r7, #-12]
      p1sp3_0 = p1[0] - p3[0];
 8000a42:	ee37 7a63 	vsub.f32	s14, s14, s7
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a46:	ed52 4a01 	vldr	s9, [r2, #-4]
 8000a4a:	ed10 6a01 	vldr	s12, [r0, #-4]
      p1ap3_1 = p1[1] + p3[1];
 8000a4e:	ee77 3a84 	vadd.f32	s7, s15, s8
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a52:	ee76 6a81 	vadd.f32	s13, s13, s2
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a56:	f100 0008 	add.w	r0, r0, #8
      p1sp3_1 = p1[1] - p3[1];
 8000a5a:	ee77 7ac4 	vsub.f32	s15, s15, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a5e:	f1a1 0108 	sub.w	r1, r1, #8
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a62:	ee77 0a64 	vsub.f32	s1, s14, s9
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a66:	f109 0910 	add.w	r9, r9, #16
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a6a:	ed47 6a04 	vstr	s13, [r7, #-16]
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000a6e:	ee31 1a65 	vsub.f32	s2, s2, s11
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a72:	ed12 4a01 	vldr	s8, [r2, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a76:	ee37 0ae5 	vsub.f32	s0, s15, s11
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a7a:	ed50 6a03 	vldr	s13, [r0, #-12]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a7e:	ee70 0a86 	vadd.f32	s1, s1, s12
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000a82:	ee37 7a46 	vsub.f32	s14, s14, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a86:	f10e 0e08 	add.w	lr, lr, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a8a:	ee76 6a84 	vadd.f32	s13, s13, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a8e:	f1ac 0c08 	sub.w	ip, ip, #8
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000a92:	ee33 6ac6 	vsub.f32	s12, s7, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a96:	f108 0818 	add.w	r8, r8, #24
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000a9a:	ee77 7ac5 	vsub.f32	s15, s15, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a9e:	f102 0208 	add.w	r2, r2, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000aa2:	ee76 6aa3 	vadd.f32	s13, s13, s7
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000aa6:	f1a3 0308 	sub.w	r3, r3, #8
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000aaa:	ee36 4a64 	vsub.f32	s8, s12, s9
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000aae:	ee31 1a45 	vsub.f32	s2, s2, s10
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000ab2:	ed47 6a03 	vstr	s13, [r7, #-12]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000ab6:	ee30 0a05 	vadd.f32	s0, s0, s10
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000aba:	edd3 9a04 	vldr	s19, [r3, #16]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000abe:	ee37 5aa5 	vadd.f32	s10, s15, s11
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000ac2:	ed96 8a04 	vldr	s16, [r6, #16]
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000ac6:	ee37 7a24 	vadd.f32	s14, s14, s9
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000aca:	eddc 7a04 	vldr	s15, [ip, #16]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000ace:	ed91 6a04 	vldr	s12, [r1, #16]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000ad2:	ee38 3a27 	vadd.f32	s6, s16, s15
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000ad6:	ed93 9a03 	vldr	s18, [r3, #12]
 8000ada:	ee76 2a29 	vadd.f32	s5, s12, s19
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000ade:	eddc 3a03 	vldr	s7, [ip, #12]
 8000ae2:	edd6 8a03 	vldr	s17, [r6, #12]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000ae6:	ee76 4a69 	vsub.f32	s9, s12, s19
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000aea:	ed91 2a03 	vldr	s4, [r1, #12]
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000aee:	ee73 5a46 	vsub.f32	s11, s6, s12
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000af2:	ee73 aa22 	vadd.f32	s21, s6, s5
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000af6:	ee78 6a09 	vadd.f32	s13, s16, s18
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000afa:	ee38 aaa3 	vadd.f32	s20, s17, s7
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000afe:	edc6 aa04 	vstr	s21, [r6, #16]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000b02:	ee74 1ae3 	vsub.f32	s3, s9, s7
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b06:	edd3 aa03 	vldr	s21, [r3, #12]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000b0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b0e:	ed91 6a03 	vldr	s12, [r1, #12]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b12:	ee77 7a89 	vadd.f32	s15, s15, s18
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000b16:	ee74 4ae8 	vsub.f32	s9, s9, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b1a:	ee36 6a2a 	vadd.f32	s12, s12, s21
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000b1e:	ee71 1aa8 	vadd.f32	s3, s3, s17
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000b22:	ee76 6ac2 	vsub.f32	s13, s13, s4
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b26:	ee36 6a0a 	vadd.f32	s12, s12, s20
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b2a:	ee77 7ac2 	vsub.f32	s15, s15, s4
      *p3++ = m0 + m1;
      *p3++ = m2 - m3;
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8000b2e:	ee72 2ac3 	vsub.f32	s5, s5, s6
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000b32:	ee3a 3a42 	vsub.f32	s6, s20, s4
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b36:	ed86 6a03 	vstr	s12, [r6, #12]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000b3a:	ee74 4aa3 	vadd.f32	s9, s9, s7
      twI = *tw2++;
 8000b3e:	ed1a 2a03 	vldr	s4, [sl, #-12]
      twR = *tw2++;
 8000b42:	ed5a 3a04 	vldr	s7, [sl, #-16]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b46:	ee37 6ac8 	vsub.f32	s12, s15, s16
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000b4a:	ee33 3a49 	vsub.f32	s6, s6, s18
      m3 = t2[3] * twR;
 8000b4e:	ee66 7aa3 	vmul.f32	s15, s13, s7
      *pEnd2-- = m0 - m1;
 8000b52:	ee23 8ae1 	vnmul.f32	s16, s7, s3
      *p2++ = m2 - m3;
 8000b56:	ee62 8a60 	vnmul.f32	s17, s4, s1
      m1 = t2[1] * twI;
 8000b5a:	ee20 9a02 	vmul.f32	s18, s0, s4
      *pEnd2-- = m2 + m3;
 8000b5e:	eee1 7a82 	vfma.f32	s15, s3, s4
      *pEnd2-- = m0 - m1;
 8000b62:	eea6 8a82 	vfma.f32	s16, s13, s4
      *p2++ = m0 + m1;
 8000b66:	eeb0 2a49 	vmov.f32	s4, s18
      *p2++ = m2 - m3;
 8000b6a:	eef0 6a68 	vmov.f32	s13, s17
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000b6e:	ee75 5ae9 	vsub.f32	s11, s11, s19
      *p2++ = m0 + m1;
 8000b72:	eea0 2aa3 	vfma.f32	s4, s1, s7
      *p2++ = m2 - m3;
 8000b76:	eee0 6a23 	vfma.f32	s13, s0, s7
      *p2++ = m0 + m1;
 8000b7a:	ed00 2a04 	vstr	s4, [r0, #-16]
      *p2++ = m2 - m3;
 8000b7e:	ed40 6a03 	vstr	s13, [r0, #-12]
      *pEnd2-- = m0 - m1;
 8000b82:	ed81 8a04 	vstr	s16, [r1, #16]
      *pEnd2-- = m2 + m3;
 8000b86:	edc1 7a03 	vstr	s15, [r1, #12]
      twI = tw3[1];
 8000b8a:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
      twR = tw3[0];
 8000b8e:	ed59 3a08 	vldr	s7, [r9, #-32]	; 0xffffffe0
      *p3++ = m2 - m3;
 8000b92:	ee27 2ac1 	vnmul.f32	s4, s15, s2
      m1 = t3[1] * twI;
 8000b96:	ee64 1a27 	vmul.f32	s3, s8, s15
      m1 =  t3[2] * twI;
      m2 =  t3[2] * twR;
      m3 =  t3[3] * twI;
 8000b9a:	ee65 6aa7 	vmul.f32	s13, s11, s15

      *pEnd3-- = m0 - m1;
 8000b9e:	ee67 7ac3 	vnmul.f32	s15, s15, s6
      *p3++ = m2 - m3;
 8000ba2:	eef0 5a42 	vmov.f32	s11, s4
      *pEnd3-- = m3 - m2;
 8000ba6:	eee3 6a63 	vfms.f32	s13, s6, s7
      *pEnd3-- = m0 - m1;
 8000baa:	eee2 7aa3 	vfma.f32	s15, s5, s7
      *p3++ = m2 - m3;
 8000bae:	eee4 5a23 	vfma.f32	s11, s8, s7
      *p3++ = m0 + m1;
 8000bb2:	eee1 1a23 	vfma.f32	s3, s2, s7
 8000bb6:	ed4e 1a04 	vstr	s3, [lr, #-16]
      *p3++ = m2 - m3;
 8000bba:	ed4e 5a03 	vstr	s11, [lr, #-12]
      *pEnd3-- = m0 - m1;
 8000bbe:	edcc 7a04 	vstr	s15, [ip, #16]
      *pEnd3-- = m3 - m2;
 8000bc2:	edcc 6a03 	vstr	s13, [ip, #12]

      /* COL 4 */
      twR = tw4[0];
 8000bc6:	ed58 6a0c 	vldr	s13, [r8, #-48]	; 0xffffffd0
      twI = tw4[1];
 8000bca:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
      m1 = t4[2] * twR;
      m2 = t4[2] * twI;
      m3 = t4[3] * twR;
 8000bce:	ee66 5a26 	vmul.f32	s11, s12, s13
      *p4++ = m2 - m3;
 8000bd2:	ee67 3ac7 	vnmul.f32	s7, s15, s14
      m1 = t4[1] * twI;
 8000bd6:	ee25 3a27 	vmul.f32	s6, s10, s15

      *pEnd4-- = m0 - m1;
 8000bda:	ee26 4ae4 	vnmul.f32	s8, s13, s9
      *p4++ = m2 - m3;
 8000bde:	eee5 3a26 	vfma.f32	s7, s10, s13
      *p4++ = m0 + m1;
 8000be2:	eea7 3a26 	vfma.f32	s6, s14, s13
      *pEnd4-- = m0 - m1;
 8000be6:	eef0 6a44 	vmov.f32	s13, s8
      *pEnd4-- = m2 + m3;
 8000bea:	eeb0 7a65 	vmov.f32	s14, s11
      *pEnd4-- = m0 - m1;
 8000bee:	eee6 6a27 	vfma.f32	s13, s12, s15
      *pEnd4-- = m2 + m3;
 8000bf2:	eea4 7aa7 	vfma.f32	s14, s9, s15
      *p4++ = m2 - m3;
 8000bf6:	ed42 3a03 	vstr	s7, [r2, #-12]
      *p4++ = m0 + m1;
 8000bfa:	ed02 3a04 	vstr	s6, [r2, #-16]
      *pEnd4-- = m0 - m1;
 8000bfe:	edc3 6a04 	vstr	s13, [r3, #16]
      *pEnd4-- = m2 + m3;
 8000c02:	ed83 7a03 	vstr	s14, [r3, #12]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000c06:	f47f af04 	bne.w	8000a12 <arm_cfft_radix8by4_f32+0x12e>
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000c0a:	9b08      	ldr	r3, [sp, #32]
 8000c0c:	9a04      	ldr	r2, [sp, #16]
 8000c0e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c12:	9204      	str	r2, [sp, #16]
      twI = *tw2++;
 8000c14:	9a03      	ldr	r2, [sp, #12]
 8000c16:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c1a:	9203      	str	r2, [sp, #12]
      *p2++ = m2 - m3;
 8000c1c:	9a06      	ldr	r2, [sp, #24]
 8000c1e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c22:	9206      	str	r2, [sp, #24]
      tw3 += twMod3;
 8000c24:	9a01      	ldr	r2, [sp, #4]
 8000c26:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000c2a:	9201      	str	r2, [sp, #4]
      *p3++ = m2 - m3;
 8000c2c:	9a00      	ldr	r2, [sp, #0]
 8000c2e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c32:	9200      	str	r2, [sp, #0]
      *p4++ = m2 - m3;
 8000c34:	9a05      	ldr	r2, [sp, #20]
 8000c36:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      tw4 += twMod4;
 8000c3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      *p4++ = m2 - m3;
 8000c3e:	9205      	str	r2, [sp, #20]
      tw4 += twMod4;
 8000c40:	9a02      	ldr	r2, [sp, #8]
 8000c42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000c46:	9302      	str	r3, [sp, #8]
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c48:	9b06      	ldr	r3, [sp, #24]
 8000c4a:	9e05      	ldr	r6, [sp, #20]
    p1ap3_0 = p1[0] + p3[0];
 8000c4c:	9f04      	ldr	r7, [sp, #16]
 8000c4e:	9900      	ldr	r1, [sp, #0]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c50:	edd3 3a00 	vldr	s7, [r3]
 8000c54:	ed96 3a00 	vldr	s6, [r6]
    p1ap3_0 = p1[0] + p3[0];
 8000c58:	ed91 7a00 	vldr	s14, [r1]
 8000c5c:	edd7 7a00 	vldr	s15, [r7]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c60:	ee73 6a83 	vadd.f32	s13, s7, s6
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c64:	edd6 2a01 	vldr	s5, [r6, #4]
    p1ap3_0 = p1[0] + p3[0];
 8000c68:	ee77 5a87 	vadd.f32	s11, s15, s14
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c6c:	ed93 2a01 	vldr	s4, [r3, #4]
    p1ap3_1 = p1[1] + p3[1];
 8000c70:	ed91 5a01 	vldr	s10, [r1, #4]
    p1sp3_0 = p1[0] - p3[0];
 8000c74:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 8000c78:	ed97 6a01 	vldr	s12, [r7, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c7c:	ee76 6aa5 	vadd.f32	s13, s13, s11

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c80:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    p1sp3_1 = p1[1] - p3[1];
 8000c84:	ee36 7a45 	vsub.f32	s14, s12, s10
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    p1ap3_1 = p1[1] + p3[1];
 8000c8a:	ee36 6a05 	vadd.f32	s12, s12, s10
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c8e:	980c      	ldr	r0, [sp, #48]	; 0x30
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c90:	edc7 6a00 	vstr	s13, [r7]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c94:	ee37 4ae2 	vsub.f32	s8, s15, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000c98:	edd6 1a01 	vldr	s3, [r6, #4]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c9c:	ee77 4a63 	vsub.f32	s9, s14, s7
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000ca0:	edd3 6a01 	vldr	s13, [r3, #4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000ca4:	ee35 5ae3 	vsub.f32	s10, s11, s7
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000ca8:	ee34 4a02 	vadd.f32	s8, s8, s4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cac:	ee76 6aa1 	vadd.f32	s13, s13, s3
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cb0:	ee74 4a83 	vadd.f32	s9, s9, s6
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cb4:	ee76 5a42 	vsub.f32	s11, s12, s4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cb8:	ee76 6a86 	vadd.f32	s13, s13, s12
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000cbc:	ee35 5a43 	vsub.f32	s10, s10, s6
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000cc0:	ee37 7a43 	vsub.f32	s14, s14, s6
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cc4:	edc7 6a01 	vstr	s13, [r7, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cc8:	ee75 5ae2 	vsub.f32	s11, s11, s5
    twI = tw2[1];
 8000ccc:	9f03      	ldr	r7, [sp, #12]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000cce:	ee77 7ac2 	vsub.f32	s15, s15, s4
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000cd2:	ee37 7a23 	vadd.f32	s14, s14, s7
    twI = tw2[1];
 8000cd6:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw2[0];
 8000cda:	ed97 3a00 	vldr	s6, [r7]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000cde:	ee77 7aa2 	vadd.f32	s15, s15, s5
    m1 = t2[1] * twI;
 8000ce2:	ee24 6aa6 	vmul.f32	s12, s9, s13
    twI = tw3[1];
 8000ce6:	9f01      	ldr	r7, [sp, #4]
    *p2++ = m2 - m3;
 8000ce8:	ee66 6ac4 	vnmul.f32	s13, s13, s8
    *p2++ = m0 + m1;
 8000cec:	eea4 6a03 	vfma.f32	s12, s8, s6
    *p2++ = m2 - m3;
 8000cf0:	eee4 6a83 	vfma.f32	s13, s9, s6
    *p2++ = m0 + m1;
 8000cf4:	ed83 6a00 	vstr	s12, [r3]
    *p2++ = m2 - m3;
 8000cf8:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw3[1];
 8000cfc:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw3[0];
 8000d00:	edd7 4a00 	vldr	s9, [r7]
    m1 = t3[1] * twI;
 8000d04:	ee25 6aa6 	vmul.f32	s12, s11, s13
    *p3++ = m0 + m1;
 8000d08:	9b00      	ldr	r3, [sp, #0]
    *p3++ = m2 - m3;
 8000d0a:	ee66 6ac5 	vnmul.f32	s13, s13, s10
    *p3++ = m0 + m1;
 8000d0e:	eea5 6a24 	vfma.f32	s12, s10, s9
    *p3++ = m2 - m3;
 8000d12:	eee5 6aa4 	vfma.f32	s13, s11, s9
    *p3++ = m0 + m1;
 8000d16:	ed83 6a00 	vstr	s12, [r3]
    *p3++ = m2 - m3;
 8000d1a:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw4[1];
 8000d1e:	9b02      	ldr	r3, [sp, #8]
 8000d20:	edd3 6a01 	vldr	s13, [r3, #4]
    twR = tw4[0];
 8000d24:	edd3 5a00 	vldr	s11, [r3]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d28:	2304      	movs	r3, #4
    m1 = t4[1] * twI;
 8000d2a:	ee27 6a26 	vmul.f32	s12, s14, s13
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d2e:	9100      	str	r1, [sp, #0]
    *p4++ = m2 - m3;
 8000d30:	ee66 6ae7 	vnmul.f32	s13, s13, s15
    *p4++ = m0 + m1;
 8000d34:	eea7 6aa5 	vfma.f32	s12, s15, s11
    *p4++ = m2 - m3;
 8000d38:	eee7 6a25 	vfma.f32	s13, s14, s11
    *p4++ = m0 + m1;
 8000d3c:	ed86 6a00 	vstr	s12, [r6]
    *p4++ = m2 - m3;
 8000d40:	edc6 6a01 	vstr	s13, [r6, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d44:	f000 f88e 	bl	8000e64 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8000d48:	4628      	mov	r0, r5
 8000d4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	9900      	ldr	r1, [sp, #0]
 8000d50:	686a      	ldr	r2, [r5, #4]
 8000d52:	f000 f887 	bl	8000e64 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8000d56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d58:	686a      	ldr	r2, [r5, #4]
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	9900      	ldr	r1, [sp, #0]
 8000d5e:	f000 f881 	bl	8000e64 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8000d62:	2304      	movs	r3, #4
 8000d64:	686a      	ldr	r2, [r5, #4]
 8000d66:	4620      	mov	r0, r4
 8000d68:	9900      	ldr	r1, [sp, #0]
}
 8000d6a:	b00f      	add	sp, #60	; 0x3c
 8000d6c:	ecbd 8b06 	vpop	{d8-d10}
 8000d70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8000d74:	f000 b876 	b.w	8000e64 <arm_radix8_butterfly_f32>

08000d78 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8000d78:	2a01      	cmp	r2, #1
{
 8000d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7e:	4606      	mov	r6, r0
 8000d80:	4617      	mov	r7, r2
 8000d82:	460c      	mov	r4, r1
 8000d84:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 8000d86:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 8000d88:	d059      	beq.n	8000e3e <arm_cfft_f32+0xc6>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 8000d8a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000d8e:	d051      	beq.n	8000e34 <arm_cfft_f32+0xbc>
 8000d90:	d80f      	bhi.n	8000db2 <arm_cfft_f32+0x3a>
 8000d92:	2d40      	cmp	r5, #64	; 0x40
 8000d94:	d014      	beq.n	8000dc0 <arm_cfft_f32+0x48>
 8000d96:	d949      	bls.n	8000e2c <arm_cfft_f32+0xb4>
 8000d98:	2d80      	cmp	r5, #128	; 0x80
 8000d9a:	d103      	bne.n	8000da4 <arm_cfft_f32+0x2c>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	4630      	mov	r0, r6
 8000da0:	f7ff fcd4 	bl	800074c <arm_cfft_radix8by2_f32>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 8000da4:	f1b8 0f00 	cmp.w	r8, #0
 8000da8:	d113      	bne.n	8000dd2 <arm_cfft_f32+0x5a>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);

  if (ifftFlag == 1U)
 8000daa:	2f01      	cmp	r7, #1
 8000dac:	d018      	beq.n	8000de0 <arm_cfft_f32+0x68>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 8000dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8000db2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000db6:	d03d      	beq.n	8000e34 <arm_cfft_f32+0xbc>
 8000db8:	d931      	bls.n	8000e1e <arm_cfft_f32+0xa6>
 8000dba:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8000dbe:	d1f1      	bne.n	8000da4 <arm_cfft_f32+0x2c>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	6872      	ldr	r2, [r6, #4]
 8000dc4:	4629      	mov	r1, r5
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f000 f84c 	bl	8000e64 <arm_radix8_butterfly_f32>
  if ( bitReverseFlag )
 8000dcc:	f1b8 0f00 	cmp.w	r8, #0
 8000dd0:	d0eb      	beq.n	8000daa <arm_cfft_f32+0x32>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8000dd2:	68b2      	ldr	r2, [r6, #8]
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	89b1      	ldrh	r1, [r6, #12]
 8000dd8:	f7ff fa82 	bl	80002e0 <arm_bitreversal_32>
  if (ifftFlag == 1U)
 8000ddc:	2f01      	cmp	r7, #1
 8000dde:	d1e6      	bne.n	8000dae <arm_cfft_f32+0x36>
    invL = 1.0f / (float32_t)L;
 8000de0:	ee07 5a90 	vmov	s15, r5
 8000de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dec:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (l= 0; l < L; l++)
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	d0dc      	beq.n	8000dae <arm_cfft_f32+0x36>
 8000df4:	f104 0108 	add.w	r1, r4, #8
 8000df8:	2300      	movs	r3, #0
      *pSrc++ *=   invL ;
 8000dfa:	ed11 7a02 	vldr	s14, [r1, #-8]
    for (l= 0; l < L; l++)
 8000dfe:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
 8000e00:	ed51 7a01 	vldr	s15, [r1, #-4]
    for (l= 0; l < L; l++)
 8000e04:	3108      	adds	r1, #8
 8000e06:	429d      	cmp	r5, r3
      *pSrc++ *=   invL ;
 8000e08:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pSrc    = -(*pSrc) * invL;
 8000e0c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
      *pSrc++ *=   invL ;
 8000e10:	ed01 7a04 	vstr	s14, [r1, #-16]
      *pSrc    = -(*pSrc) * invL;
 8000e14:	ed41 7a03 	vstr	s15, [r1, #-12]
    for (l= 0; l < L; l++)
 8000e18:	d1ef      	bne.n	8000dfa <arm_cfft_f32+0x82>
}
 8000e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8000e1e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000e22:	d0cd      	beq.n	8000dc0 <arm_cfft_f32+0x48>
 8000e24:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000e28:	d0b8      	beq.n	8000d9c <arm_cfft_f32+0x24>
 8000e2a:	e7bb      	b.n	8000da4 <arm_cfft_f32+0x2c>
 8000e2c:	2d10      	cmp	r5, #16
 8000e2e:	d0b5      	beq.n	8000d9c <arm_cfft_f32+0x24>
 8000e30:	2d20      	cmp	r5, #32
 8000e32:	d1b7      	bne.n	8000da4 <arm_cfft_f32+0x2c>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8000e34:	4621      	mov	r1, r4
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff fd54 	bl	80008e4 <arm_cfft_radix8by4_f32>
    break;
 8000e3c:	e7b2      	b.n	8000da4 <arm_cfft_f32+0x2c>
    for (l = 0; l < L; l++)
 8000e3e:	b175      	cbz	r5, 8000e5e <arm_cfft_f32+0xe6>
 8000e40:	310c      	adds	r1, #12
 8000e42:	f04f 0c00 	mov.w	ip, #0
      *pSrc = -*pSrc;
 8000e46:	ed51 7a02 	vldr	s15, [r1, #-8]
    for (l = 0; l < L; l++)
 8000e4a:	f10c 0c01 	add.w	ip, ip, #1
 8000e4e:	3108      	adds	r1, #8
      *pSrc = -*pSrc;
 8000e50:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
 8000e54:	4565      	cmp	r5, ip
      *pSrc = -*pSrc;
 8000e56:	ed41 7a04 	vstr	s15, [r1, #-16]
    for (l = 0; l < L; l++)
 8000e5a:	d1f4      	bne.n	8000e46 <arm_cfft_f32+0xce>
 8000e5c:	e795      	b.n	8000d8a <arm_cfft_f32+0x12>
  if ( bitReverseFlag )
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0a5      	beq.n	8000dae <arm_cfft_f32+0x36>
 8000e62:	e7b6      	b.n	8000dd2 <arm_cfft_f32+0x5a>

08000e64 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8000e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e68:	ed2d 8b10 	vpush	{d8-d15}
 8000e6c:	b091      	sub	sp, #68	; 0x44
 8000e6e:	468a      	mov	sl, r1
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 8000e70:	468b      	mov	fp, r1
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8000e72:	eddf babd 	vldr	s23, [pc, #756]	; 8001168 <arm_radix8_butterfly_f32+0x304>
{
 8000e76:	900e      	str	r0, [sp, #56]	; 0x38
 8000e78:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	3304      	adds	r3, #4
 8000e80:	930f      	str	r3, [sp, #60]	; 0x3c
      n2 = n2 >> 3;
 8000e82:	ea4f 07db 	mov.w	r7, fp, lsr #3
 8000e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
      i1 = 0;
 8000e8c:	f04f 0e00 	mov.w	lr, #0
 8000e90:	eb07 0187 	add.w	r1, r7, r7, lsl #2
      n2 = n2 >> 3;
 8000e94:	970b      	str	r7, [sp, #44]	; 0x2c
      i1 = 0;
 8000e96:	0178      	lsls	r0, r7, #5
 8000e98:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8000e9c:	9002      	str	r0, [sp, #8]
 8000e9e:	00c8      	lsls	r0, r1, #3
 8000ea0:	ebc7 01c7 	rsb	r1, r7, r7, lsl #3
 8000ea4:	ea4f 1807 	mov.w	r8, r7, lsl #4
 8000ea8:	9003      	str	r0, [sp, #12]
 8000eaa:	00c8      	lsls	r0, r1, #3
 8000eac:	eb02 1447 	add.w	r4, r2, r7, lsl #5
 8000eb0:	f108 0104 	add.w	r1, r8, #4
 8000eb4:	9006      	str	r0, [sp, #24]
 8000eb6:	f109 0004 	add.w	r0, r9, #4
 8000eba:	9401      	str	r4, [sp, #4]
 8000ebc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8000ec0:	4410      	add	r0, r2
 8000ec2:	4411      	add	r1, r2
 8000ec4:	9a01      	ldr	r2, [sp, #4]
 8000ec6:	eb04 1507 	add.w	r5, r4, r7, lsl #4
 8000eca:	eb02 0cc7 	add.w	ip, r2, r7, lsl #3
 8000ece:	0132      	lsls	r2, r6, #4
 8000ed0:	eba5 04c6 	sub.w	r4, r5, r6, lsl #3
 8000ed4:	9204      	str	r2, [sp, #16]
 8000ed6:	00f2      	lsls	r2, r6, #3
 8000ed8:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8000edc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8000ede:	9205      	str	r2, [sp, #20]
 8000ee0:	9a01      	ldr	r2, [sp, #4]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000ee2:	ed11 7a01 	vldr	s14, [r1, #-4]
         pSrc[2 * i2 + 1] = s5 - r7;
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
         pSrc[2 * i4 + 1] = t2 + r8;

         i1 += n1;
 8000ee6:	44de      	add	lr, fp
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000ee8:	edd4 4a00 	vldr	s9, [r4]
 8000eec:	ed97 5a00 	vldr	s10, [r7]
      } while (i1 < fftLen);
 8000ef0:	45f2      	cmp	sl, lr
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000ef2:	ed95 9a00 	vldr	s18, [r5]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000ef6:	ed92 6a00 	vldr	s12, [r2]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000efa:	ee74 8a85 	vadd.f32	s17, s9, s10
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000efe:	ed9c 4a00 	vldr	s8, [ip]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000f02:	ee77 5a09 	vadd.f32	s11, s14, s18
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f06:	ed56 6a01 	vldr	s13, [r6, #-4]
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8000f0a:	ee37 1a49 	vsub.f32	s2, s14, s18
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f0e:	ed50 7a01 	vldr	s15, [r0, #-4]
 8000f12:	ee39 9a47 	vsub.f32	s18, s18, s14
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f16:	ee76 1a86 	vadd.f32	s3, s13, s12
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f1a:	ee37 8a84 	vadd.f32	s16, s15, s8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8000f1e:	ee76 6ac6 	vsub.f32	s13, s13, s12
         r1 = r1 + r3;
 8000f22:	ee31 7aa5 	vadd.f32	s14, s3, s11
         r2 = r2 + r4;
 8000f26:	ee38 6a28 	vadd.f32	s12, s16, s17
         t1 = r1 - r3;
 8000f2a:	ee71 1ae5 	vsub.f32	s3, s3, s11
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8000f2e:	ee77 7ac4 	vsub.f32	s15, s15, s8
         pSrc[2 * i1] = r1 + r2;
 8000f32:	ee77 5a06 	vadd.f32	s11, s14, s12
         pSrc[2 * i5] = r1 - r2;
 8000f36:	ee37 7a46 	vsub.f32	s14, s14, s12
         r1 = (r6 - r8) * C81;
 8000f3a:	ee37 4ae4 	vsub.f32	s8, s15, s9
         pSrc[2 * i1] = r1 + r2;
 8000f3e:	ed46 5a01 	vstr	s11, [r6, #-4]
         r6 = (r6 + r8) * C81;
 8000f42:	ee77 7ac5 	vsub.f32	s15, s15, s10
         pSrc[2 * i5] = r1 - r2;
 8000f46:	ed82 7a00 	vstr	s14, [r2]
         t1 = r5 - r1;
 8000f4a:	eeb0 0a66 	vmov.f32	s0, s13
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f4e:	ed9c aa01 	vldr	s20, [ip, #4]
         r1 = (r6 - r8) * C81;
 8000f52:	ee34 4a05 	vadd.f32	s8, s8, s10
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f56:	ed90 2a00 	vldr	s4, [r0]
         r6 = (r6 + r8) * C81;
 8000f5a:	ee77 7aa4 	vadd.f32	s15, s15, s9
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f5e:	edd2 3a01 	vldr	s7, [r2, #4]
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8000f62:	ee32 6a4a 	vsub.f32	s12, s4, s20
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000f66:	edd4 2a01 	vldr	s5, [r4, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f6a:	edd6 5a00 	vldr	s11, [r6]
         t1 = r5 - r1;
 8000f6e:	eea4 0a6b 	vfms.f32	s0, s8, s23
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000f72:	edd7 9a01 	vldr	s19, [r7, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f76:	ee32 2a0a 	vadd.f32	s4, s4, s20
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8000f7a:	ee75 0ae3 	vsub.f32	s1, s11, s7
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f7e:	ed91 5a00 	vldr	s10, [r1]
         r2 = (s6 - s8) * C81;
 8000f82:	ee36 3a62 	vsub.f32	s6, s12, s5
         s6 = (s6 + s8) * C81;
 8000f86:	ee36 7a69 	vsub.f32	s14, s12, s19
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f8a:	ed95 6a01 	vldr	s12, [r5, #4]
         t2 = s5 - r2;
 8000f8e:	eef0 4a60 	vmov.f32	s9, s1
         r2 = (s6 - s8) * C81;
 8000f92:	ee33 3a29 	vadd.f32	s6, s6, s19
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f96:	ee75 5aa3 	vadd.f32	s11, s11, s7
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8000f9a:	ee75 3a46 	vsub.f32	s7, s10, s12
         t2 = s5 - r2;
 8000f9e:	eee3 4a6b 	vfms.f32	s9, s6, s23
         s6 = (s6 + s8) * C81;
 8000fa2:	ee37 7a22 	vadd.f32	s14, s14, s5
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000fa6:	ee75 aa06 	vadd.f32	s21, s10, s12
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000faa:	ee72 2aa9 	vadd.f32	s5, s5, s19
         t2 = r1 - s3;
 8000fae:	ee36 5a45 	vsub.f32	s10, s12, s10
         s7 = s7 + s6;
 8000fb2:	eeb0 aa63 	vmov.f32	s20, s7
 8000fb6:	eef0 9a40 	vmov.f32	s19, s0
         t2 = r1 - s3;
 8000fba:	ee35 6aea 	vsub.f32	s12, s11, s21
         r5 = r5 + r1;
 8000fbe:	eee4 6a2b 	vfma.f32	s13, s8, s23
         s7 = s7 + s6;
 8000fc2:	eea7 aa2b 	vfma.f32	s20, s14, s23
 8000fc6:	eee7 9a6b 	vfms.f32	s19, s14, s23
 8000fca:	eea7 5a2b 	vfma.f32	s10, s14, s23
         r7 = r7 + r6;
 8000fce:	eeb0 4a41 	vmov.f32	s8, s2
         r1 = r1 + s3;
 8000fd2:	ee35 7aaa 	vadd.f32	s14, s11, s21
 8000fd6:	eef0 5a64 	vmov.f32	s11, s9
         r7 = r7 + r6;
 8000fda:	eea7 4aab 	vfma.f32	s8, s15, s23
         s5 = s5 + r2;
 8000fde:	eee3 0a2b 	vfma.f32	s1, s6, s23
 8000fe2:	eea7 9aab 	vfma.f32	s18, s15, s23
 8000fe6:	eee7 5aeb 	vfms.f32	s11, s15, s23
         r2 = r2 + r4;
 8000fea:	ee72 aa22 	vadd.f32	s21, s4, s5
         pSrc[2 * i3]     = t1 + s3;
 8000fee:	ee31 bae2 	vsub.f32	s22, s3, s5
         pSrc[2 * i7]     = t1 - s3;
 8000ff2:	ee71 7ac2 	vsub.f32	s15, s3, s4
         pSrc[2 * i3 + 1] = t2 - r3;
 8000ff6:	ee36 3a48 	vsub.f32	s6, s12, s16
         pSrc[2 * i7 + 1] = t2 + r3;
 8000ffa:	ee36 6a68 	vsub.f32	s12, s12, s17
         pSrc[2 * i1 + 1] = r1 + r2;
 8000ffe:	ee77 1a2a 	vadd.f32	s3, s14, s21
         pSrc[2 * i7]     = t1 - s3;
 8001002:	ee77 7aa2 	vadd.f32	s15, s15, s5
         pSrc[2 * i7 + 1] = t2 + r3;
 8001006:	ee36 6a08 	vadd.f32	s12, s12, s16
         pSrc[2 * i2 + 1] = s5 - r7;
 800100a:	ee70 2ac4 	vsub.f32	s5, s1, s8
         pSrc[2 * i1 + 1] = r1 + r2;
 800100e:	edc6 1a00 	vstr	s3, [r6]
         pSrc[2 * i2]     = r5 + s7;
 8001012:	ee36 8a8a 	vadd.f32	s16, s13, s20
      } while (i1 < fftLen);
 8001016:	441e      	add	r6, r3
         pSrc[2 * i5 + 1] = r1 - r2;
 8001018:	ee37 7a6a 	vsub.f32	s14, s14, s21
         pSrc[2 * i3]     = t1 + s3;
 800101c:	ee3b 2a02 	vadd.f32	s4, s22, s4
         pSrc[2 * i3 + 1] = t2 - r3;
 8001020:	ee33 3a28 	vadd.f32	s6, s6, s17
         pSrc[2 * i8]     = r5 - s7;
 8001024:	ee76 6aca 	vsub.f32	s13, s13, s20
         pSrc[2 * i5 + 1] = r1 - r2;
 8001028:	ed82 7a01 	vstr	s14, [r2, #4]
         pSrc[2 * i6]     = t1 + s8;
 800102c:	ee73 3aa9 	vadd.f32	s7, s7, s19
         pSrc[2 * i3]     = t1 + s3;
 8001030:	ed01 2a01 	vstr	s4, [r1, #-4]
         pSrc[2 * i4]     = t1 - s8;
 8001034:	ee30 5a05 	vadd.f32	s10, s0, s10
         pSrc[2 * i7]     = t1 - s3;
 8001038:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i8 + 1] = s5 + r7;
 800103c:	ee34 4a20 	vadd.f32	s8, s8, s1
         pSrc[2 * i3 + 1] = t2 - r3;
 8001040:	ed81 3a00 	vstr	s6, [r1]
         pSrc[2 * i6 + 1] = t2 - r8;
 8001044:	ee74 4a89 	vadd.f32	s9, s9, s18
         pSrc[2 * i7 + 1] = t2 + r3;
 8001048:	ed85 6a01 	vstr	s12, [r5, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 800104c:	ee71 5a25 	vadd.f32	s11, s2, s11
         pSrc[2 * i2]     = r5 + s7;
 8001050:	ed00 8a01 	vstr	s16, [r0, #-4]
      } while (i1 < fftLen);
 8001054:	441a      	add	r2, r3
         pSrc[2 * i8]     = r5 - s7;
 8001056:	edc7 6a00 	vstr	s13, [r7]
      } while (i1 < fftLen);
 800105a:	4419      	add	r1, r3
         pSrc[2 * i6]     = t1 + s8;
 800105c:	edcc 3a00 	vstr	s7, [ip]
      } while (i1 < fftLen);
 8001060:	441d      	add	r5, r3
         pSrc[2 * i4]     = t1 - s8;
 8001062:	ed84 5a00 	vstr	s10, [r4]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001066:	edc0 2a00 	vstr	s5, [r0]
      } while (i1 < fftLen);
 800106a:	4418      	add	r0, r3
         pSrc[2 * i8 + 1] = s5 + r7;
 800106c:	ed87 4a01 	vstr	s8, [r7, #4]
      } while (i1 < fftLen);
 8001070:	441f      	add	r7, r3
         pSrc[2 * i6 + 1] = t2 - r8;
 8001072:	edcc 4a01 	vstr	s9, [ip, #4]
      } while (i1 < fftLen);
 8001076:	449c      	add	ip, r3
         pSrc[2 * i4 + 1] = t2 + r8;
 8001078:	edc4 5a01 	vstr	s11, [r4, #4]
      } while (i1 < fftLen);
 800107c:	441c      	add	r4, r3
 800107e:	f63f af30 	bhi.w	8000ee2 <arm_radix8_butterfly_f32+0x7e>

      if (n2 < 8)
 8001082:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001084:	2a07      	cmp	r2, #7
 8001086:	f240 819f 	bls.w	80013c8 <arm_radix8_butterfly_f32+0x564>
 800108a:	9d02      	ldr	r5, [sp, #8]
 800108c:	f109 0908 	add.w	r9, r9, #8
 8001090:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8001092:	f108 080c 	add.w	r8, r8, #12
 8001096:	3508      	adds	r5, #8
 8001098:	9a06      	ldr	r2, [sp, #24]
 800109a:	9905      	ldr	r1, [sp, #20]
 800109c:	1975      	adds	r5, r6, r5
 800109e:	3208      	adds	r2, #8
 80010a0:	9c03      	ldr	r4, [sp, #12]
 80010a2:	3108      	adds	r1, #8
 80010a4:	950a      	str	r5, [sp, #40]	; 0x28
 80010a6:	4635      	mov	r5, r6
 80010a8:	9804      	ldr	r0, [sp, #16]
 80010aa:	3408      	adds	r4, #8
 80010ac:	18aa      	adds	r2, r5, r2
 80010ae:	1869      	adds	r1, r5, r1
 80010b0:	3008      	adds	r0, #8
 80010b2:	444e      	add	r6, r9
 80010b4:	9205      	str	r2, [sp, #20]
 80010b6:	462a      	mov	r2, r5
 80010b8:	192c      	adds	r4, r5, r4
 80010ba:	1828      	adds	r0, r5, r0
 80010bc:	320c      	adds	r2, #12
 80010be:	9106      	str	r1, [sp, #24]
         break;

      ia1 = 0;
      j = 1;
 80010c0:	f04f 0901 	mov.w	r9, #1
 80010c4:	eb05 0108 	add.w	r1, r5, r8
      ia1 = 0;
 80010c8:	f04f 0800 	mov.w	r8, #0
 80010cc:	9609      	str	r6, [sp, #36]	; 0x24
 80010ce:	9408      	str	r4, [sp, #32]
 80010d0:	9007      	str	r0, [sp, #28]
 80010d2:	9103      	str	r1, [sp, #12]
 80010d4:	9204      	str	r2, [sp, #16]

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80010d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 80010d8:	46ce      	mov	lr, r9
         si8 = pCoef[2 * ia7 + 1];
 80010da:	9e05      	ldr	r6, [sp, #20]
         id  = ia1 + twidCoefModifier;
 80010dc:	4490      	add	r8, r2
         co2 = pCoef[2 * ia1];
 80010de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80010e0:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80010e4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 80010e8:	ed92 fa00 	vldr	s30, [r2]
         co3 = pCoef[2 * ia2];
 80010ec:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80010f0:	edd2 ea00 	vldr	s29, [r2]
         co4 = pCoef[2 * ia3];
 80010f4:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80010f8:	ed92 ea00 	vldr	s28, [r2]
         co5 = pCoef[2 * ia4];
 80010fc:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001100:	edd2 da00 	vldr	s27, [r2]
         co6 = pCoef[2 * ia5];
 8001104:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001108:	ed92 da00 	vldr	s26, [r2]
         co7 = pCoef[2 * ia6];
 800110c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001110:	edd2 ca00 	vldr	s25, [r2]
         co8 = pCoef[2 * ia7];
 8001114:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001118:	ed92 ca00 	vldr	s24, [r2]
         si8 = pCoef[2 * ia7 + 1];
 800111c:	ed92 ba01 	vldr	s22, [r2, #4]
 8001120:	eba2 1201 	sub.w	r2, r2, r1, lsl #4
         si2 = pCoef[2 * ia1 + 1];
 8001124:	edd2 aa01 	vldr	s21, [r2, #4]
         si3 = pCoef[2 * ia2 + 1];
 8001128:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800112c:	ed92 aa01 	vldr	s20, [r2, #4]
         si4 = pCoef[2 * ia3 + 1];
 8001130:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001134:	edd2 9a01 	vldr	s19, [r2, #4]
         si5 = pCoef[2 * ia4 + 1];
 8001138:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800113c:	ed92 9a01 	vldr	s18, [r2, #4]
         si6 = pCoef[2 * ia5 + 1];
 8001140:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001144:	edd2 7a01 	vldr	s15, [r2, #4]
         si7 = pCoef[2 * ia6 + 1];
 8001148:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
         si6 = pCoef[2 * ia5 + 1];
 800114c:	edcd 7a01 	vstr	s15, [sp, #4]
         si7 = pCoef[2 * ia6 + 1];
 8001150:	edd2 7a01 	vldr	s15, [r2, #4]
         si8 = pCoef[2 * ia7 + 1];
 8001154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         si7 = pCoef[2 * ia6 + 1];
 8001156:	edcd 7a02 	vstr	s15, [sp, #8]
         si8 = pCoef[2 * ia7 + 1];
 800115a:	e9dd c703 	ldrd	ip, r7, [sp, #12]
 800115e:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8001162:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001166:	e001      	b.n	800116c <arm_radix8_butterfly_f32+0x308>
 8001168:	3f3504f3 	.word	0x3f3504f3
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800116c:	edd5 3a00 	vldr	s7, [r5]
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;

            i1 += n1;
 8001170:	44de      	add	lr, fp
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001172:	ed1c 7a01 	vldr	s14, [ip, #-4]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001176:	edd6 fa00 	vldr	s31, [r6]
         } while (i1 < fftLen);
 800117a:	45f2      	cmp	sl, lr
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800117c:	edd4 6a00 	vldr	s13, [r4]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001180:	edd2 4a00 	vldr	s9, [r2]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001184:	ee33 0aaf 	vadd.f32	s0, s7, s31
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001188:	ed90 4a00 	vldr	s8, [r0]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800118c:	ee37 5a26 	vadd.f32	s10, s14, s13
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001190:	ed57 5a01 	vldr	s11, [r7, #-4]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001194:	ee77 8a66 	vsub.f32	s17, s14, s13
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001198:	edd1 7a00 	vldr	s15, [r1]
 800119c:	ee76 6ac7 	vsub.f32	s13, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80011a0:	ee35 6aa4 	vadd.f32	s12, s11, s9
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011a4:	ed97 1a00 	vldr	s2, [r7]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80011a8:	ee77 0a84 	vadd.f32	s1, s15, s8
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80011ac:	ee77 7ac4 	vsub.f32	s15, s15, s8
            r1 = r1 + r3;
 80011b0:	ee36 2a05 	vadd.f32	s4, s12, s10
            r2 = r2 + r4;
 80011b4:	ee30 7a80 	vadd.f32	s14, s1, s0
            t1 = r1 - r3;
 80011b8:	ee36 6a45 	vsub.f32	s12, s12, s10
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80011bc:	ee75 5ae4 	vsub.f32	s11, s11, s9
            pSrc[2 * i1] = r1 + r2;
 80011c0:	ee32 5a07 	vadd.f32	s10, s4, s14
            r2 = r1 - r2;
 80011c4:	ee32 2a47 	vsub.f32	s4, s4, s14
            pSrc[2 * i1] = r1 + r2;
 80011c8:	ed07 5a01 	vstr	s10, [r7, #-4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011cc:	edd2 4a01 	vldr	s9, [r2, #4]
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80011d0:	ed90 7a01 	vldr	s14, [r0, #4]
 80011d4:	ed91 3a01 	vldr	s6, [r1, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80011d8:	ee71 2a64 	vsub.f32	s5, s2, s9
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011dc:	ee31 1a24 	vadd.f32	s2, s2, s9
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80011e0:	ed95 4a01 	vldr	s8, [r5, #4]
            r1 = (r6 - r8) * C81;
 80011e4:	ee77 4ae3 	vsub.f32	s9, s15, s7
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80011e8:	ed9c 8a00 	vldr	s16, [ip]
            r6 = (r6 + r8) * C81;
 80011ec:	ee77 7aef 	vsub.f32	s15, s15, s31
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80011f0:	ee33 5a47 	vsub.f32	s10, s6, s14
            r1 = (r6 - r8) * C81;
 80011f4:	ee74 4aaf 	vadd.f32	s9, s9, s31
            r6 = (r6 + r8) * C81;
 80011f8:	ee77 7aa3 	vadd.f32	s15, s15, s7
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80011fc:	edd6 3a01 	vldr	s7, [r6, #4]
            s1 = (s6 - s8) * C81;
 8001200:	ee75 fa44 	vsub.f32	s31, s10, s8
            s6 = (s6 + s8) * C81;
 8001204:	ee35 5a63 	vsub.f32	s10, s10, s7
 8001208:	eee7 6aab 	vfma.f32	s13, s15, s23
            s1 = (s6 - s8) * C81;
 800120c:	ee7f faa3 	vadd.f32	s31, s31, s7
            s6 = (s6 + s8) * C81;
 8001210:	ee35 5a04 	vadd.f32	s10, s10, s8
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001214:	ee74 3a23 	vadd.f32	s7, s8, s7
            t1 = r5 - r1;
 8001218:	eeb0 4a65 	vmov.f32	s8, s11
            r5 = r5 + r1;
 800121c:	eee4 5aab 	vfma.f32	s11, s9, s23
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001220:	ee33 3a07 	vadd.f32	s6, s6, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001224:	ed94 7a01 	vldr	s14, [r4, #4]
            t1 = r5 - r1;
 8001228:	eea4 4aeb 	vfms.f32	s8, s9, s23
            t2 = s5 - s1;
 800122c:	eef0 4a62 	vmov.f32	s9, s5
            s5 = s5 + s1;
 8001230:	eeef 2aab 	vfma.f32	s5, s31, s23
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001234:	ee78 1a07 	vadd.f32	s3, s16, s14
            t2 = s5 - s1;
 8001238:	eeef 4aeb 	vfms.f32	s9, s31, s23
            r7 = r7 + r6;
 800123c:	eef0 fa68 	vmov.f32	s31, s17
 8001240:	eee7 faab 	vfma.f32	s31, s15, s23
            s6 = t2 - r8;
 8001244:	ee74 6aa6 	vadd.f32	s13, s9, s13
 8001248:	eee7 4aeb 	vfms.f32	s9, s15, s23
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800124c:	ee78 7a47 	vsub.f32	s15, s16, s14
            t2 = s1 - s3;
 8001250:	ee37 7a48 	vsub.f32	s14, s14, s16
            s7 = s7 + s6;
 8001254:	eeb0 8a67 	vmov.f32	s16, s15
 8001258:	eea5 7a2b 	vfma.f32	s14, s10, s23
            t2 = t2 + r8;
 800125c:	ee78 4aa4 	vadd.f32	s9, s17, s9
            s7 = s7 + s6;
 8001260:	eea5 8a2b 	vfma.f32	s16, s10, s23
            t1 = t1 - s8;
 8001264:	ee37 7a04 	vadd.f32	s14, s14, s8
 8001268:	eea5 4a6b 	vfms.f32	s8, s10, s23
            s2 = s2 + s4;
 800126c:	ee33 5a23 	vadd.f32	s10, s6, s7
            r6 = t1 + s8;
 8001270:	ee34 4a27 	vadd.f32	s8, s8, s15
            t2 = s1 - s3;
 8001274:	ee71 7a61 	vsub.f32	s15, s2, s3
            s1 = s1 + s3;
 8001278:	ee71 1a21 	vadd.f32	s3, s2, s3
            r1 = t1 + s3;
 800127c:	ee36 1a63 	vsub.f32	s2, s12, s7
 8001280:	ee36 6a43 	vsub.f32	s12, s12, s6
 8001284:	ee31 1a03 	vadd.f32	s2, s2, s6
            t1 = t1 - s3;
 8001288:	ee33 6a86 	vadd.f32	s12, s7, s12
            s1 = t2 - r3;
 800128c:	ee37 3ae0 	vsub.f32	s6, s15, s1
            pSrc[2 * i1 + 1] = s1 + s2;
 8001290:	ee71 3a85 	vadd.f32	s7, s3, s10
 8001294:	ee77 7ac0 	vsub.f32	s15, s15, s0
            s2 = s1 - s2;
 8001298:	ee31 5ac5 	vsub.f32	s10, s3, s10
            pSrc[2 * i1 + 1] = s1 + s2;
 800129c:	edc7 3a00 	vstr	s7, [r7]
            s1 = t2 - r3;
 80012a0:	ee73 3a00 	vadd.f32	s7, s6, s0
            t2 = t2 + r3;
 80012a4:	ee70 7aa7 	vadd.f32	s15, s1, s15
         } while (i1 < fftLen);
 80012a8:	441f      	add	r7, r3
            pSrc[2 * i5 + 1] = p3 - p4;
 80012aa:	ee62 0a49 	vnmul.f32	s1, s4, s18
            p2 = si3 * s1;
 80012ae:	ee6a 1a23 	vmul.f32	s3, s20, s7
            pSrc[2 * i3 + 1] = p3 - p4;
 80012b2:	ee21 3a4a 	vnmul.f32	s6, s2, s20
            pSrc[2 * i5 + 1] = p3 - p4;
 80012b6:	eeed 0a85 	vfma.f32	s1, s27, s10
            pSrc[2 * i3]     = p1 + p2;
 80012ba:	eeee 1a81 	vfma.f32	s3, s29, s2
            p2 = si7 * t2;
 80012be:	ed9d 1a02 	vldr	s2, [sp, #8]
            p2 = si5 * s2;
 80012c2:	ee29 0a05 	vmul.f32	s0, s18, s10
            r1 = r5 + s7;
 80012c6:	ee35 5a88 	vadd.f32	s10, s11, s16
            r5 = r5 - s7;
 80012ca:	ee35 8ac8 	vsub.f32	s16, s11, s16
            s1 = s5 - r7;
 80012ce:	ee72 5aef 	vsub.f32	s11, s5, s31
            s5 = s5 + r7;
 80012d2:	ee7f faa2 	vadd.f32	s31, s31, s5
            pSrc[2 * i5 + 1] = p3 - p4;
 80012d6:	edc2 0a01 	vstr	s1, [r2, #4]
            pSrc[2 * i7 + 1] = p3 - p4;
 80012da:	ee66 2a41 	vnmul.f32	s5, s12, s2
            pSrc[2 * i3 + 1] = p3 - p4;
 80012de:	eeae 3aa3 	vfma.f32	s6, s29, s7
            p2 = si7 * t2;
 80012e2:	ee61 3a27 	vmul.f32	s7, s2, s15
            pSrc[2 * i7 + 1] = p3 - p4;
 80012e6:	eeec 2aa7 	vfma.f32	s5, s25, s15
            pSrc[2 * i2 + 1] = p3 - p4;
 80012ea:	ee65 7a6a 	vnmul.f32	s15, s10, s21
            pSrc[2 * i5]     = p1 + p2;
 80012ee:	eead 0a82 	vfma.f32	s0, s27, s4
            p2 = si2 * s1;
 80012f2:	ee6a 0aa5 	vmul.f32	s1, s21, s11
            pSrc[2 * i2 + 1] = p3 - p4;
 80012f6:	eeef 7a25 	vfma.f32	s15, s30, s11
            pSrc[2 * i7]     = p1 + p2;
 80012fa:	eeec 3a86 	vfma.f32	s7, s25, s12
            pSrc[2 * i2]     = p1 + p2;
 80012fe:	eeef 0a05 	vfma.f32	s1, s30, s10
            p2 = si8 * s5;
 8001302:	ee2b 1a2f 	vmul.f32	s2, s22, s31
            pSrc[2 * i5]     = p1 + p2;
 8001306:	ed82 0a00 	vstr	s0, [r2]
            pSrc[2 * i8 + 1] = p3 - p4;
 800130a:	ee28 2a4b 	vnmul.f32	s4, s16, s22
            p2 = si6 * s6;
 800130e:	ed9d 0a01 	vldr	s0, [sp, #4]
            p2 = si4 * t2;
 8001312:	ee69 5aa4 	vmul.f32	s11, s19, s9
            pSrc[2 * i3]     = p1 + p2;
 8001316:	ed4c 1a01 	vstr	s3, [ip, #-4]
            pSrc[2 * i2 + 1] = p3 - p4;
 800131a:	eeb0 5a67 	vmov.f32	s10, s15
            p2 = si6 * s6;
 800131e:	ee20 6a26 	vmul.f32	s12, s0, s13
            pSrc[2 * i3 + 1] = p3 - p4;
 8001322:	ed8c 3a00 	vstr	s6, [ip]
            pSrc[2 * i6 + 1] = p3 - p4;
 8001326:	ee64 1a40 	vnmul.f32	s3, s8, s0
            pSrc[2 * i7]     = p1 + p2;
 800132a:	edc4 3a00 	vstr	s7, [r4]
            pSrc[2 * i4 + 1] = p3 - p4;
 800132e:	ee67 7a69 	vnmul.f32	s15, s14, s19
            pSrc[2 * i7 + 1] = p3 - p4;
 8001332:	edc4 2a01 	vstr	s5, [r4, #4]
            pSrc[2 * i8]     = p1 + p2;
 8001336:	eeac 1a08 	vfma.f32	s2, s24, s16
            pSrc[2 * i2]     = p1 + p2;
 800133a:	edc1 0a00 	vstr	s1, [r1]
            pSrc[2 * i8 + 1] = p3 - p4;
 800133e:	eeac 2a2f 	vfma.f32	s4, s24, s31
            pSrc[2 * i2 + 1] = p3 - p4;
 8001342:	ed81 5a01 	vstr	s10, [r1, #4]
            pSrc[2 * i6]     = p1 + p2;
 8001346:	eead 6a04 	vfma.f32	s12, s26, s8
         } while (i1 < fftLen);
 800134a:	441a      	add	r2, r3
            pSrc[2 * i6 + 1] = p3 - p4;
 800134c:	eeed 1a26 	vfma.f32	s3, s26, s13
         } while (i1 < fftLen);
 8001350:	449c      	add	ip, r3
            pSrc[2 * i4]     = p1 + p2;
 8001352:	eeee 5a07 	vfma.f32	s11, s28, s14
         } while (i1 < fftLen);
 8001356:	441c      	add	r4, r3
            pSrc[2 * i4 + 1] = p3 - p4;
 8001358:	eeee 7a24 	vfma.f32	s15, s28, s9
         } while (i1 < fftLen);
 800135c:	4419      	add	r1, r3
            pSrc[2 * i8]     = p1 + p2;
 800135e:	ed86 1a00 	vstr	s2, [r6]
            pSrc[2 * i8 + 1] = p3 - p4;
 8001362:	ed86 2a01 	vstr	s4, [r6, #4]
         } while (i1 < fftLen);
 8001366:	441e      	add	r6, r3
            pSrc[2 * i6]     = p1 + p2;
 8001368:	ed80 6a00 	vstr	s12, [r0]
            pSrc[2 * i6 + 1] = p3 - p4;
 800136c:	edc0 1a01 	vstr	s3, [r0, #4]
         } while (i1 < fftLen);
 8001370:	4418      	add	r0, r3
            pSrc[2 * i4]     = p1 + p2;
 8001372:	edc5 5a00 	vstr	s11, [r5]
            pSrc[2 * i4 + 1] = p3 - p4;
 8001376:	edc5 7a01 	vstr	s15, [r5, #4]
         } while (i1 < fftLen);
 800137a:	441d      	add	r5, r3
 800137c:	f63f aef6 	bhi.w	800116c <arm_radix8_butterfly_f32+0x308>

         j++;
      } while (j < n2);
 8001380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         j++;
 8001382:	f109 0901 	add.w	r9, r9, #1
      } while (j < n2);
 8001386:	3208      	adds	r2, #8
 8001388:	920a      	str	r2, [sp, #40]	; 0x28
 800138a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800138c:	3208      	adds	r2, #8
 800138e:	9209      	str	r2, [sp, #36]	; 0x24
 8001390:	9a08      	ldr	r2, [sp, #32]
 8001392:	3208      	adds	r2, #8
 8001394:	9208      	str	r2, [sp, #32]
 8001396:	9a07      	ldr	r2, [sp, #28]
 8001398:	3208      	adds	r2, #8
 800139a:	9207      	str	r2, [sp, #28]
 800139c:	9a06      	ldr	r2, [sp, #24]
 800139e:	3208      	adds	r2, #8
 80013a0:	9206      	str	r2, [sp, #24]
 80013a2:	9a05      	ldr	r2, [sp, #20]
 80013a4:	3208      	adds	r2, #8
 80013a6:	9205      	str	r2, [sp, #20]
 80013a8:	9a04      	ldr	r2, [sp, #16]
 80013aa:	3208      	adds	r2, #8
 80013ac:	9204      	str	r2, [sp, #16]
 80013ae:	9a03      	ldr	r2, [sp, #12]
 80013b0:	3208      	adds	r2, #8
 80013b2:	9203      	str	r2, [sp, #12]
 80013b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80013b6:	454a      	cmp	r2, r9
 80013b8:	f47f ae8d 	bne.w	80010d6 <arm_radix8_butterfly_f32+0x272>

      twidCoefModifier <<= 3;
 80013bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013be:	4693      	mov	fp, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	930c      	str	r3, [sp, #48]	; 0x30
   } while (n2 > 7);
 80013c6:	e55c      	b.n	8000e82 <arm_radix8_butterfly_f32+0x1e>
}
 80013c8:	b011      	add	sp, #68	; 0x44
 80013ca:	ecbd 8b10 	vpop	{d8-d15}
 80013ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013d2:	bf00      	nop

080013d4 <arm_cmplx_mult_cmplx_f32>:
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 80013d4:	b1eb      	cbz	r3, 8001412 <arm_cmplx_mult_cmplx_f32+0x3e>
 80013d6:	3008      	adds	r0, #8
 80013d8:	3108      	adds	r1, #8
 80013da:	3208      	adds	r2, #8
  {
    /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */

    a = *pSrcA++;
    b = *pSrcA++;
 80013dc:	ed50 7a01 	vldr	s15, [r0, #-4]
  while (blkCnt > 0U)
 80013e0:	3208      	adds	r2, #8
    c = *pSrcB++;
 80013e2:	ed51 6a02 	vldr	s13, [r1, #-8]
  while (blkCnt > 0U)
 80013e6:	3b01      	subs	r3, #1
    d = *pSrcB++;
 80013e8:	ed51 5a01 	vldr	s11, [r1, #-4]
  while (blkCnt > 0U)
 80013ec:	f100 0008 	add.w	r0, r0, #8

    /* store result in destination buffer. */
    *pDst++ = (a * c) - (b * d);
    *pDst++ = (a * d) + (b * c);
 80013f0:	ee27 7aa6 	vmul.f32	s14, s15, s13
    a = *pSrcA++;
 80013f4:	ed10 6a04 	vldr	s12, [r0, #-16]
    *pDst++ = (a * c) - (b * d);
 80013f8:	ee65 7ae7 	vnmul.f32	s15, s11, s15
  while (blkCnt > 0U)
 80013fc:	f101 0108 	add.w	r1, r1, #8
    *pDst++ = (a * d) + (b * c);
 8001400:	eea6 7a25 	vfma.f32	s14, s12, s11
    *pDst++ = (a * c) - (b * d);
 8001404:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pDst++ = (a * d) + (b * c);
 8001408:	ed02 7a03 	vstr	s14, [r2, #-12]
    *pDst++ = (a * c) - (b * d);
 800140c:	ed42 7a04 	vstr	s15, [r2, #-16]
  while (blkCnt > 0U)
 8001410:	d1e4      	bne.n	80013dc <arm_cmplx_mult_cmplx_f32+0x8>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 8001412:	4770      	bx	lr

08001414 <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8001418:	8844      	ldrh	r4, [r0, #2]
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 800141a:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 800141e:	f890 8000 	ldrb.w	r8, [r0]
        float32_t *pState = S->pState;                 /* State pointer */
 8001422:	6887      	ldr	r7, [r0, #8]
  pStateCur = S->pState + (numTaps - 1U);
 8001424:	44a6      	add	lr, r4
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001426:	4598      	cmp	r8, r3
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8001428:	f8d0 9004 	ldr.w	r9, [r0, #4]
  pStateCur = S->pState + (numTaps - 1U);
 800142c:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8001430:	fbb3 faf8 	udiv	sl, r3, r8
  while (blkCnt > 0U)
 8001434:	d834      	bhi.n	80014a0 <arm_fir_decimate_f32+0x8c>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8001436:	ea4f 0c88 	mov.w	ip, r8, lsl #2
  blkCnt = outBlockSize;
 800143a:	4655      	mov	r5, sl
        float32_t *pState = S->pState;                 /* State pointer */
 800143c:	463e      	mov	r6, r7
 800143e:	46f3      	mov	fp, lr
 8001440:	4643      	mov	r3, r8
 8001442:	4608      	mov	r0, r1
      *pStateCur++ = *pSrc++;
 8001444:	ecf0 7a01 	vldmia	r0!, {s15}
    } while (--i);
 8001448:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
 800144a:	eceb 7a01 	vstmia	fp!, {s15}
    } while (--i);
 800144e:	d1f9      	bne.n	8001444 <arm_fir_decimate_f32+0x30>
      *pStateCur++ = *pSrc++;
 8001450:	4461      	add	r1, ip
 8001452:	44e6      	add	lr, ip
    while (tapCnt > 0U)
 8001454:	b1e4      	cbz	r4, 8001490 <arm_fir_decimate_f32+0x7c>
 8001456:	4623      	mov	r3, r4
    acc0 = 0.0f;
 8001458:	eddf 7a12 	vldr	s15, [pc, #72]	; 80014a4 <arm_fir_decimate_f32+0x90>
    pb = pCoeffs;
 800145c:	46cb      	mov	fp, r9
    while (tapCnt > 0U)
 800145e:	4630      	mov	r0, r6
      acc0 += x0 * c0;
 8001460:	ecfb 6a01 	vldmia	fp!, {s13}
    while (tapCnt > 0U)
 8001464:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
 8001466:	ecb0 7a01 	vldmia	r0!, {s14}
 800146a:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (tapCnt > 0U)
 800146e:	d1f7      	bne.n	8001460 <arm_fir_decimate_f32+0x4c>
  while (blkCnt > 0U)
 8001470:	3d01      	subs	r5, #1
    pState = pState + S->M;
 8001472:	4466      	add	r6, ip

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 8001474:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 8001478:	d1e1      	bne.n	800143e <arm_fir_decimate_f32+0x2a>
    pState = pState + S->M;
 800147a:	fb0a 7c0c 	mla	ip, sl, ip, r7
 800147e:	e003      	b.n	8001488 <arm_fir_decimate_f32+0x74>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8001480:	f85c 3b04 	ldr.w	r3, [ip], #4
 8001484:	f847 3b04 	str.w	r3, [r7], #4
  while (tapCnt > 0U)
 8001488:	3c01      	subs	r4, #1
 800148a:	d1f9      	bne.n	8001480 <arm_fir_decimate_f32+0x6c>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 800148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acc0 = 0.0f;
 8001490:	eddf 7a04 	vldr	s15, [pc, #16]	; 80014a4 <arm_fir_decimate_f32+0x90>
  while (blkCnt > 0U)
 8001494:	3d01      	subs	r5, #1
    pState = pState + S->M;
 8001496:	4466      	add	r6, ip
    *pDst++ = acc0;
 8001498:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 800149c:	d1cf      	bne.n	800143e <arm_fir_decimate_f32+0x2a>
 800149e:	e7ec      	b.n	800147a <arm_fir_decimate_f32+0x66>
        float32_t *pState = S->pState;                 /* State pointer */
 80014a0:	46bc      	mov	ip, r7
 80014a2:	e7f1      	b.n	8001488 <arm_fir_decimate_f32+0x74>
 80014a4:	00000000 	.word	0x00000000

080014a8 <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	4616      	mov	r6, r2
 80014ac:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 80014b0:	fbb2 f4f6 	udiv	r4, r2, r6
 80014b4:	fb06 2414 	mls	r4, r6, r4, r2
 80014b8:	b96c      	cbnz	r4, 80014d6 <arm_fir_decimate_init_f32+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 80014ba:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80014bc:	1e4b      	subs	r3, r1, #1
 80014be:	4605      	mov	r5, r0
    S->numTaps = numTaps;
 80014c0:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80014c2:	441a      	add	r2, r3
 80014c4:	4621      	mov	r1, r4
 80014c6:	4638      	mov	r0, r7
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	f010 f822 	bl	8011512 <memset>
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;

    status = ARM_MATH_SUCCESS;
 80014ce:	4620      	mov	r0, r4
    S->pState = pState;
 80014d0:	60af      	str	r7, [r5, #8]
    S->M = M;
 80014d2:	702e      	strb	r6, [r5, #0]
  }

  return (status);

}
 80014d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
 80014d6:	f06f 0001 	mvn.w	r0, #1
}
 80014da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014dc <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 80014dc:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 80014de:	4c05      	ldr	r4, [pc, #20]	; (80014f4 <loadWPM+0x18>)
{
 80014e0:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 80014e2:	17c3      	asrs	r3, r0, #31
 80014e4:	2100      	movs	r1, #0
 80014e6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80014ea:	f7fe ffb1 	bl	8000450 <__aeabi_uldivmod>
 80014ee:	6020      	str	r0, [r4, #0]

}
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	bf00      	nop
 80014f4:	24007c18 	.word	0x24007c18

080014f8 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80014f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

void DoKeyer(void)
{

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 80014fc:	4c9a      	ldr	r4, [pc, #616]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d12f      	bne.n	8001564 <HAL_TIM_PeriodElapsedCallback+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 8001504:	4a99      	ldr	r2, [pc, #612]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	2a02      	cmp	r2, #2
 800150a:	d029      	beq.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 800150c:	4d98      	ldr	r5, [pc, #608]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800150e:	782a      	ldrb	r2, [r5, #0]
 8001510:	2a05      	cmp	r2, #5
 8001512:	d825      	bhi.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
 8001514:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001518:	009f0070 	.word	0x009f0070
 800151c:	000600d9 	.word	0x000600d9
 8001520:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 8001524:	4a93      	ldr	r2, [pc, #588]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001526:	2001      	movs	r0, #1
 8001528:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80e2 	beq.w	80016f4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 8001530:	4f91      	ldr	r7, [pc, #580]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x280>)
	tx = tx_enable;
 8001532:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 8001534:	2300      	movs	r3, #0
			CarrierEnable(1);
 8001536:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 8001538:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 800153a:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 800153c:	f003 fd44 	bl	8004fc8 <CarrierEnable>
		TXSwitch(1);
 8001540:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 8001542:	2404      	movs	r4, #4
		TXSwitch(1);
 8001544:	f003 fcd8 	bl	8004ef8 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001548:	f005 fae8 	bl	8006b1c <HAL_GetTick>
 800154c:	498b      	ldr	r1, [pc, #556]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800154e:	4a8c      	ldr	r2, [pc, #560]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001550:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 8001552:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001554:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8001556:	7813      	ldrb	r3, [r2, #0]
 8001558:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800155c:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800155e:	7013      	strb	r3, [r2, #0]
}
 8001560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 8001564:	f005 fada 	bl	8006b1c <HAL_GetTick>
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800156e:	4290      	cmp	r0, r2
 8001570:	f200 80b9 	bhi.w	80016e6 <HAL_TIM_PeriodElapsedCallback+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0c5      	beq.n	8001504 <HAL_TIM_PeriodElapsedCallback+0xc>
 8001578:	f005 fad0 	bl	8006b1c <HAL_GetTick>
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	4298      	cmp	r0, r3
 8001580:	d9c0      	bls.n	8001504 <HAL_TIM_PeriodElapsedCallback+0xc>
						pk = Saved_pk;
 8001582:	4f80      	ldr	r7, [pc, #512]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x28c>)
			TXSwitch(0);
 8001584:	2000      	movs	r0, #0
 8001586:	f003 fcb7 	bl	8004ef8 <TXSwitch>
						pk = Saved_pk;
 800158a:	4e7f      	ldr	r6, [pc, #508]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x290>)
			semi_qsk_timeout = 0;
 800158c:	2200      	movs	r2, #0
						pk = Saved_pk;
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 8001592:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 8001594:	6031      	str	r1, [r6, #0]
 8001596:	e7b5      	b.n	8001504 <HAL_TIM_PeriodElapsedCallback+0xc>
	if(KEYER_DASH) {
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	487c      	ldr	r0, [pc, #496]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800159c:	f008 fb78 	bl	8009c90 <HAL_GPIO_ReadPin>
 80015a0:	b948      	cbnz	r0, 80015b6 <HAL_TIM_PeriodElapsedCallback+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80015a2:	4b7b      	ldr	r3, [pc, #492]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015a4:	4a76      	ldr	r2, [pc, #472]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	7811      	ldrb	r1, [r2, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf14      	ite	ne
 80015ae:	2302      	movne	r3, #2
 80015b0:	2301      	moveq	r3, #1
 80015b2:	430b      	orrs	r3, r1
 80015b4:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	4874      	ldr	r0, [pc, #464]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015ba:	f008 fb69 	bl	8009c90 <HAL_GPIO_ReadPin>
 80015be:	b948      	cbnz	r0, 80015d4 <HAL_TIM_PeriodElapsedCallback+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80015c0:	4b73      	ldr	r3, [pc, #460]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015c2:	4a6f      	ldr	r2, [pc, #444]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	7811      	ldrb	r1, [r2, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf14      	ite	ne
 80015cc:	2301      	movne	r3, #1
 80015ce:	2302      	moveq	r3, #2
 80015d0:	430b      	orrs	r3, r1
 80015d2:	7013      	strb	r3, [r2, #0]
			}
			break;
		case INTER_ELEMENT:
			// Insert time between dits/dahs
			update_PaddleLatch();               // latch paddle state
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 80015d4:	f005 faa2 	bl	8006b1c <HAL_GetTick>
 80015d8:	4b68      	ldr	r3, [pc, #416]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4298      	cmp	r0, r3
 80015de:	d9bf      	bls.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 80015e0:	4a67      	ldr	r2, [pc, #412]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015e2:	7813      	ldrb	r3, [r2, #0]
 80015e4:	f013 0104 	ands.w	r1, r3, #4
 80015e8:	f000 80b9 	beq.w	800175e <HAL_TIM_PeriodElapsedCallback+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80015ec:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 80015f0:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80015f2:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 80015f4:	7029      	strb	r1, [r5, #0]
 80015f6:	e7b3      	b.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
			if((KEYER_DASH) ||
 80015f8:	2140      	movs	r1, #64	; 0x40
 80015fa:	4864      	ldr	r0, [pc, #400]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015fc:	f008 fb48 	bl	8009c90 <HAL_GPIO_ReadPin>
 8001600:	b140      	cbz	r0, 8001614 <HAL_TIM_PeriodElapsedCallback+0x11c>
					(KEYER_DOT) ||
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	4861      	ldr	r0, [pc, #388]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001606:	f008 fb43 	bl	8009c90 <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 800160a:	b118      	cbz	r0, 8001614 <HAL_TIM_PeriodElapsedCallback+0x11c>
					(keyerControl & 0x03))
 800160c:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
					(KEYER_DOT) ||
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	0798      	lsls	r0, r3, #30
 8001612:	d0a5      	beq.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	485d      	ldr	r0, [pc, #372]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001618:	f008 fb3a 	bl	8009c90 <HAL_GPIO_ReadPin>
 800161c:	b948      	cbnz	r0, 8001632 <HAL_TIM_PeriodElapsedCallback+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001620:	4a57      	ldr	r2, [pc, #348]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	7811      	ldrb	r1, [r2, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2302      	movne	r3, #2
 800162c:	2301      	moveq	r3, #1
 800162e:	430b      	orrs	r3, r1
 8001630:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	4855      	ldr	r0, [pc, #340]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001636:	f008 fb2b 	bl	8009c90 <HAL_GPIO_ReadPin>
 800163a:	b948      	cbnz	r0, 8001650 <HAL_TIM_PeriodElapsedCallback+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 800163c:	4b54      	ldr	r3, [pc, #336]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800163e:	4a50      	ldr	r2, [pc, #320]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	7811      	ldrb	r1, [r2, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf14      	ite	ne
 8001648:	2301      	movne	r3, #1
 800164a:	2302      	moveq	r3, #2
 800164c:	430b      	orrs	r3, r1
 800164e:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8001650:	2301      	movs	r3, #1
 8001652:	702b      	strb	r3, [r5, #0]
 8001654:	e784      	b.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DIT_L) {
 8001656:	4a4a      	ldr	r2, [pc, #296]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001658:	7813      	ldrb	r3, [r2, #0]
 800165a:	07d9      	lsls	r1, r3, #31
 800165c:	d55e      	bpl.n	800171c <HAL_TIM_PeriodElapsedCallback+0x224>
				keyerControl |= DIT_PROC;
 800165e:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 8001662:	484c      	ldr	r0, [pc, #304]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001664:	4945      	ldr	r1, [pc, #276]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001666:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 8001668:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800166a:	2303      	movs	r3, #3
				ktimer = ditTime;
 800166c:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 800166e:	702b      	strb	r3, [r5, #0]
 8001670:	e776      	b.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 8001672:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800177c <HAL_TIM_PeriodElapsedCallback+0x284>
 8001676:	f005 fa51 	bl	8006b1c <HAL_GetTick>
 800167a:	f8d8 3000 	ldr.w	r3, [r8]
 800167e:	4298      	cmp	r0, r3
 8001680:	d84f      	bhi.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x22a>
			} else if(keyerControl & IAMBICB) {
 8001682:	4c3f      	ldr	r4, [pc, #252]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001684:	7823      	ldrb	r3, [r4, #0]
 8001686:	06db      	lsls	r3, r3, #27
 8001688:	f57f af6a 	bpl.w	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 800168c:	2140      	movs	r1, #64	; 0x40
 800168e:	483f      	ldr	r0, [pc, #252]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001690:	f008 fafe 	bl	8009c90 <HAL_GPIO_ReadPin>
 8001694:	b940      	cbnz	r0, 80016a8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 8001696:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001698:	7822      	ldrb	r2, [r4, #0]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2302      	movne	r3, #2
 80016a2:	2301      	moveq	r3, #1
 80016a4:	4313      	orrs	r3, r2
 80016a6:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	4838      	ldr	r0, [pc, #224]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80016ac:	f008 faf0 	bl	8009c90 <HAL_GPIO_ReadPin>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	f47f af55 	bne.w	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016b8:	7822      	ldrb	r2, [r4, #0]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2302      	moveq	r3, #2
 80016c4:	4313      	orrs	r3, r2
 80016c6:	7023      	strb	r3, [r4, #0]
}
 80016c8:	e74a      	b.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DAH_L) {
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	f013 0302 	ands.w	r3, r3, #2
 80016d2:	d00d      	beq.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				ktimer = ditTime*3;
 80016d4:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x29c>)
				keyerState = KEYED_PREP;
 80016d6:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 80016d8:	4a28      	ldr	r2, [pc, #160]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016da:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 80016dc:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 80016de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016e2:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 80016e4:	e73c      	b.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
		TXSwitch(0);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f003 fc06 	bl	8004ef8 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	e741      	b.n	8001574 <HAL_TIM_PeriodElapsedCallback+0x7c>
				keyerState = IDLE;
 80016f0:	702b      	strb	r3, [r5, #0]
 80016f2:	e735      	b.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80016f4:	4e28      	ldr	r6, [pc, #160]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80016f6:	4f20      	ldr	r7, [pc, #128]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016f8:	7833      	ldrb	r3, [r6, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f43f af19 	beq.w	8001532 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001700:	783b      	ldrb	r3, [r7, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f47f af15 	bne.w	8001532 <HAL_TIM_PeriodElapsedCallback+0x3a>
					Saved_pk = pk;
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800170e:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 8001710:	f003 fbf2 	bl	8004ef8 <TXSwitch>
			HAL_Delay(txdelay);
 8001714:	7830      	ldrb	r0, [r6, #0]
 8001716:	f005 fa07 	bl	8006b28 <HAL_Delay>
 800171a:	e70a      	b.n	8001532 <HAL_TIM_PeriodElapsedCallback+0x3a>
				keyerState = CHK_DAH;
 800171c:	2302      	movs	r3, #2
 800171e:	702b      	strb	r3, [r5, #0]
 8001720:	e71e      	b.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
				Key_state = LOW;
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001724:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 8001726:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 8001728:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 800172a:	bbb8      	cbnz	r0, 800179c <HAL_TIM_PeriodElapsedCallback+0x2a4>
	tx = tx_enable;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 800172e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8001794 <HAL_TIM_PeriodElapsedCallback+0x29c>
	tx = tx_enable;
 8001732:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 8001734:	f003 fc48 	bl	8004fc8 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001738:	f005 f9f0 	bl	8006b1c <HAL_GetTick>
 800173c:	f8d9 3000 	ldr.w	r3, [r9]
 8001740:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001744:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001746:	2800      	cmp	r0, #0
 8001748:	d039      	beq.n	80017be <HAL_TIM_PeriodElapsedCallback+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 800174a:	f005 f9e7 	bl	8006b1c <HAL_GetTick>
 800174e:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 8001752:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001754:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 8001756:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001758:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 800175c:	e700      	b.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
				} else {
					keyerControl &= ~(DAH_L);              // clear dah latch
 800175e:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 8001762:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 8001764:	7013      	strb	r3, [r2, #0]
}
 8001766:	e6fb      	b.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x68>
 8001768:	2400a974 	.word	0x2400a974
 800176c:	2400a7ea 	.word	0x2400a7ea
 8001770:	2400a7e9 	.word	0x2400a7e9
 8001774:	24005234 	.word	0x24005234
 8001778:	2400b9a8 	.word	0x2400b9a8
 800177c:	2400a7f4 	.word	0x2400a7f4
 8001780:	2400a7e8 	.word	0x2400a7e8
 8001784:	2400626c 	.word	0x2400626c
 8001788:	2400a820 	.word	0x2400a820
 800178c:	58020000 	.word	0x58020000
 8001790:	2400a7f0 	.word	0x2400a7f0
 8001794:	24007c18 	.word	0x24007c18
 8001798:	2400b9a9 	.word	0x2400b9a9
	tx = tx_enable;
 800179c:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
			pk = Saved_pk;
 800179e:	4f0a      	ldr	r7, [pc, #40]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80017a0:	4e0a      	ldr	r6, [pc, #40]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
			semi_qsk_timeout = 0;
 80017a2:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80017a4:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 80017a6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80017d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f003 fba2 	bl	8004ef8 <TXSwitch>
						pk = Saved_pk;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 80017bc:	e7c5      	b.n	800174a <HAL_TIM_PeriodElapsedCallback+0x252>
 80017be:	4e03      	ldr	r6, [pc, #12]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80017c0:	4f01      	ldr	r7, [pc, #4]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80017c2:	e7f4      	b.n	80017ae <HAL_TIM_PeriodElapsedCallback+0x2b6>
 80017c4:	2400b9a8 	.word	0x2400b9a8
 80017c8:	2400626c 	.word	0x2400626c
 80017cc:	2400a820 	.word	0x2400a820
 80017d0:	24007c18 	.word	0x24007c18

080017d4 <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 80017d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80017d8:	497d      	ldr	r1, [pc, #500]	; (80019d0 <cw_tx_char+0x1fc>)
 80017da:	237e      	movs	r3, #126	; 0x7e
 80017dc:	2500      	movs	r5, #0
 80017de:	e004      	b.n	80017ea <cw_tx_char+0x16>
 80017e0:	b2d5      	uxtb	r5, r2
 80017e2:	5d4b      	ldrb	r3, [r1, r5]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 808b 	beq.w	8001900 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 80017ea:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80017ec:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 80017f0:	d1f6      	bne.n	80017e0 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80017f2:	062b      	lsls	r3, r5, #24
 80017f4:	f100 80e6 	bmi.w	80019c4 <cw_tx_char+0x1f0>
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	461e      	mov	r6, r3
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	422b      	tst	r3, r5
 8001800:	d0fb      	beq.n	80017fa <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001802:	08b6      	lsrs	r6, r6, #2
 8001804:	f000 80b2 	beq.w	800196c <cw_tx_char+0x198>
 8001808:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80019e4 <cw_tx_char+0x210>
 800180c:	4f71      	ldr	r7, [pc, #452]	; (80019d4 <cw_tx_char+0x200>)
 800180e:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80019ec <cw_tx_char+0x218>
					Saved_pk = pk;
 8001812:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80019e8 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b93b      	cbnz	r3, 800182a <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <cw_tx_char+0x204>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b123      	cbz	r3, 800182a <cw_tx_char+0x56>
 8001820:	f898 3000 	ldrb.w	r3, [r8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8095 	beq.w	8001954 <cw_tx_char+0x180>
	tx = tx_enable;
 800182a:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 800182c:	2300      	movs	r3, #0
			CarrierEnable(1);
 800182e:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 8001830:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 8001832:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 8001836:	f003 fbc7 	bl	8004fc8 <CarrierEnable>
		TXSwitch(1);
 800183a:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 800183c:	4c67      	ldr	r4, [pc, #412]	; (80019dc <cw_tx_char+0x208>)
		TXSwitch(1);
 800183e:	f003 fb5b 	bl	8004ef8 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001842:	422e      	tst	r6, r5
 8001844:	f8d9 3000 	ldr.w	r3, [r9]
 8001848:	bf14      	ite	ne
 800184a:	f04f 0b03 	movne.w	fp, #3
 800184e:	f04f 0b01 	moveq.w	fp, #1
 8001852:	fb03 fb0b 	mul.w	fp, r3, fp
  uint32_t event = HAL_GetTick() + ms;
 8001856:	f005 f961 	bl	8006b1c <HAL_GetTick>
 800185a:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 800185c:	e00a      	b.n	8001874 <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 800185e:	f008 fa17 	bl	8009c90 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	4620      	mov	r0, r4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d04c      	beq.n	8001906 <cw_tx_char+0x132>
 800186c:	f008 fa10 	bl	8009c90 <HAL_GPIO_ReadPin>
 8001870:	2800      	cmp	r0, #0
 8001872:	d048      	beq.n	8001906 <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8001874:	f005 f952 	bl	8006b1c <HAL_GetTick>
 8001878:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 800187e:	459b      	cmp	fp, r3
 8001880:	d8ed      	bhi.n	800185e <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8001882:	6838      	ldr	r0, [r7, #0]
 8001884:	2800      	cmp	r0, #0
 8001886:	d151      	bne.n	800192c <cw_tx_char+0x158>
	tx = tx_enable;
 8001888:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 800188c:	f003 fb9c 	bl	8004fc8 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001890:	f005 f944 	bl	8006b1c <HAL_GetTick>
 8001894:	f8d9 b000 	ldr.w	fp, [r9]
 8001898:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 800189c:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 800189e:	2800      	cmp	r0, #0
 80018a0:	d04c      	beq.n	800193c <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 80018a2:	f005 f93b 	bl	8006b1c <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 80018a6:	4c4d      	ldr	r4, [pc, #308]	; (80019dc <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 80018a8:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 80018aa:	e008      	b.n	80018be <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 80018ac:	f008 f9f0 	bl	8009c90 <HAL_GPIO_ReadPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	4620      	mov	r0, r4
 80018b6:	b3b3      	cbz	r3, 8001926 <cw_tx_char+0x152>
 80018b8:	f008 f9ea 	bl	8009c90 <HAL_GPIO_ReadPin>
 80018bc:	b398      	cbz	r0, 8001926 <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 80018be:	f005 f92d 	bl	8006b1c <HAL_GetTick>
 80018c2:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 80018c4:	2140      	movs	r1, #64	; 0x40
 80018c6:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 80018c8:	459b      	cmp	fp, r3
 80018ca:	d8ef      	bhi.n	80018ac <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 80018cc:	0876      	lsrs	r6, r6, #1
 80018ce:	d1a2      	bne.n	8001816 <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 80018d0:	f8d9 5000 	ldr.w	r5, [r9]
  uint32_t event = HAL_GetTick() + ms;
 80018d4:	f005 f922 	bl	8006b1c <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 80018d8:	4c40      	ldr	r4, [pc, #256]	; (80019dc <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 80018da:	006d      	lsls	r5, r5, #1
  uint32_t event = HAL_GetTick() + ms;
 80018dc:	4405      	add	r5, r0
  while(HAL_GetTick() < event){
 80018de:	e008      	b.n	80018f2 <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 80018e0:	f008 f9d6 	bl	8009c90 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	4620      	mov	r0, r4
 80018ea:	b1e3      	cbz	r3, 8001926 <cw_tx_char+0x152>
 80018ec:	f008 f9d0 	bl	8009c90 <HAL_GPIO_ReadPin>
 80018f0:	b1c8      	cbz	r0, 8001926 <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 80018f2:	f005 f913 	bl	8006b1c <HAL_GetTick>
 80018f6:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 80018fc:	429d      	cmp	r5, r3
 80018fe:	d8ef      	bhi.n	80018e0 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8001900:	2000      	movs	r0, #0
}
 8001902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8001906:	6838      	ldr	r0, [r7, #0]
 8001908:	2800      	cmp	r0, #0
 800190a:	d14a      	bne.n	80019a2 <cw_tx_char+0x1ce>
	tx = tx_enable;
 800190c:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8001910:	f003 fb5a 	bl	8004fc8 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001914:	f005 f902 	bl	8006b1c <HAL_GetTick>
 8001918:	f8d9 3000 	ldr.w	r3, [r9]
 800191c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001920:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001922:	2800      	cmp	r0, #0
 8001924:	d050      	beq.n	80019c8 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001926:	2001      	movs	r0, #1
}
 8001928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 800192c:	2300      	movs	r3, #0
			pk = Saved_pk;
 800192e:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8001930:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8001934:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8001936:	f8da 3000 	ldr.w	r3, [sl]
 800193a:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 800193c:	2000      	movs	r0, #0
 800193e:	f003 fadb 	bl	8004ef8 <TXSwitch>
			semi_qsk_timeout = 0;
 8001942:	2300      	movs	r3, #0
						pk = Saved_pk;
 8001944:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8001946:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8001948:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 800194c:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e7a6      	b.n	80018a2 <cw_tx_char+0xce>
					Saved_pk = pk;
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8001956:	2001      	movs	r0, #1
					Saved_pk = pk;
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 800195e:	f003 facb 	bl	8004ef8 <TXSwitch>
			HAL_Delay(txdelay);
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <cw_tx_char+0x204>)
 8001964:	7818      	ldrb	r0, [r3, #0]
 8001966:	f005 f8df 	bl	8006b28 <HAL_Delay>
 800196a:	e75e      	b.n	800182a <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 800196e:	4c1b      	ldr	r4, [pc, #108]	; (80019dc <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001970:	681d      	ldr	r5, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8001972:	f005 f8d3 	bl	8006b1c <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001976:	00ad      	lsls	r5, r5, #2
  uint32_t event = HAL_GetTick() + ms;
 8001978:	4405      	add	r5, r0
  while(HAL_GetTick() < event){
 800197a:	e00a      	b.n	8001992 <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 800197c:	f008 f988 	bl	8009c90 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	4620      	mov	r0, r4
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0ba      	beq.n	8001900 <cw_tx_char+0x12c>
 800198a:	f008 f981 	bl	8009c90 <HAL_GPIO_ReadPin>
 800198e:	2800      	cmp	r0, #0
 8001990:	d0b6      	beq.n	8001900 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 8001992:	f005 f8c3 	bl	8006b1c <HAL_GetTick>
 8001996:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8001998:	2140      	movs	r1, #64	; 0x40
 800199a:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 800199c:	429d      	cmp	r5, r3
 800199e:	d8ed      	bhi.n	800197c <cw_tx_char+0x1a8>
 80019a0:	e7ae      	b.n	8001900 <cw_tx_char+0x12c>
	tx = tx_enable;
 80019a2:	2300      	movs	r3, #0
			pk = Saved_pk;
 80019a4:	4d10      	ldr	r5, [pc, #64]	; (80019e8 <cw_tx_char+0x214>)
 80019a6:	4c0e      	ldr	r4, [pc, #56]	; (80019e0 <cw_tx_char+0x20c>)
	tx = tx_enable;
 80019a8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 80019ac:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f003 faa0 	bl	8004ef8 <TXSwitch>
			semi_qsk_timeout = 0;
 80019b8:	2200      	movs	r2, #0
						pk = Saved_pk;
 80019ba:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 80019bc:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 80019be:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 80019c0:	6023      	str	r3, [r4, #0]
 80019c2:	e79e      	b.n	8001902 <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80019c4:	2640      	movs	r6, #64	; 0x40
 80019c6:	e71f      	b.n	8001808 <cw_tx_char+0x34>
 80019c8:	4d07      	ldr	r5, [pc, #28]	; (80019e8 <cw_tx_char+0x214>)
 80019ca:	4c05      	ldr	r4, [pc, #20]	; (80019e0 <cw_tx_char+0x20c>)
 80019cc:	e7f1      	b.n	80019b2 <cw_tx_char+0x1de>
 80019ce:	bf00      	nop
 80019d0:	08017780 	.word	0x08017780
 80019d4:	2400a974 	.word	0x2400a974
 80019d8:	2400b9a9 	.word	0x2400b9a9
 80019dc:	58020000 	.word	0x58020000
 80019e0:	2400a820 	.word	0x2400a820
 80019e4:	24007c18 	.word	0x24007c18
 80019e8:	2400626c 	.word	0x2400626c
 80019ec:	2400b9a8 	.word	0x2400b9a8

080019f0 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 80019f0:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 80019f2:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <SendCWMessage+0x28>)
 80019f8:	012a      	lsls	r2, r5, #4
 80019fa:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 80019fe:	5c98      	ldrb	r0, [r3, r2]
 8001a00:	b148      	cbz	r0, 8001a16 <SendCWMessage+0x26>
 8001a02:	2400      	movs	r4, #0
 8001a04:	e002      	b.n	8001a0c <SendCWMessage+0x1c>
 8001a06:	b2e4      	uxtb	r4, r4
 8001a08:	5d28      	ldrb	r0, [r5, r4]
 8001a0a:	b120      	cbz	r0, 8001a16 <SendCWMessage+0x26>
 8001a0c:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8001a0e:	f7ff fee1 	bl	80017d4 <cw_tx_char>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d0f7      	beq.n	8001a06 <SendCWMessage+0x16>
}
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	24000000 	.word	0x24000000

08001a1c <DecodeDCF77>:
{
	uint8_t i;
	static uint8_t MinParity, HourParity;
	MinParity = HourParity = 0;
	for (i = 21 ; i < 28; i++)
		if (DCF77Message[i])
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <DecodeDCF77+0x150>)
{
 8001a1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (DCF77Message[i])
 8001a22:	7d59      	ldrb	r1, [r3, #21]
{
 8001a24:	b085      	sub	sp, #20
		if (DCF77Message[i])
 8001a26:	f893 9016 	ldrb.w	r9, [r3, #22]
			MinParity ^= 1;
 8001a2a:	1e0a      	subs	r2, r1, #0
 8001a2c:	bf18      	it	ne
 8001a2e:	2201      	movne	r2, #1
		if (DCF77Message[i])
 8001a30:	f1b9 0f00 	cmp.w	r9, #0
 8001a34:	d001      	beq.n	8001a3a <DecodeDCF77+0x1e>
			MinParity ^= 1;
 8001a36:	f082 0201 	eor.w	r2, r2, #1
		if (DCF77Message[i])
 8001a3a:	f893 c017 	ldrb.w	ip, [r3, #23]
 8001a3e:	f1bc 0f00 	cmp.w	ip, #0
 8001a42:	d001      	beq.n	8001a48 <DecodeDCF77+0x2c>
			MinParity ^= 1;
 8001a44:	f082 0201 	eor.w	r2, r2, #1
		if (DCF77Message[i])
 8001a48:	f893 8018 	ldrb.w	r8, [r3, #24]
 8001a4c:	f1b8 0f00 	cmp.w	r8, #0
 8001a50:	d001      	beq.n	8001a56 <DecodeDCF77+0x3a>
			MinParity ^= 1;
 8001a52:	f082 0201 	eor.w	r2, r2, #1
		if (DCF77Message[i])
 8001a56:	7e5d      	ldrb	r5, [r3, #25]
 8001a58:	b10d      	cbz	r5, 8001a5e <DecodeDCF77+0x42>
			MinParity ^= 1;
 8001a5a:	f082 0201 	eor.w	r2, r2, #1
		if (DCF77Message[i])
 8001a5e:	7e98      	ldrb	r0, [r3, #26]
 8001a60:	9003      	str	r0, [sp, #12]
 8001a62:	b108      	cbz	r0, 8001a68 <DecodeDCF77+0x4c>
			MinParity ^= 1;
 8001a64:	f082 0201 	eor.w	r2, r2, #1
		if (DCF77Message[i])
 8001a68:	7edf      	ldrb	r7, [r3, #27]
 8001a6a:	b10f      	cbz	r7, 8001a70 <DecodeDCF77+0x54>
			MinParity ^= 1;
 8001a6c:	f082 0201 	eor.w	r2, r2, #1
	for (i = 21 ; i < 28; i++)
 8001a70:	483f      	ldr	r0, [pc, #252]	; (8001b70 <DecodeDCF77+0x154>)
	for (i = 29 ; i < 35; i++)
		if (DCF77Message[i])
 8001a72:	f893 e01d 	ldrb.w	lr, [r3, #29]
 8001a76:	7002      	strb	r2, [r0, #0]
 8001a78:	7f98      	ldrb	r0, [r3, #30]
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	9001      	str	r0, [sp, #4]
			HourParity ^= 1;
 8001a7e:	f1be 0000 	subs.w	r0, lr, #0
 8001a82:	bf18      	it	ne
 8001a84:	2001      	movne	r0, #1
		if (DCF77Message[i])
 8001a86:	b10c      	cbz	r4, 8001a8c <DecodeDCF77+0x70>
			HourParity ^= 1;
 8001a88:	f080 0001 	eor.w	r0, r0, #1
		if (DCF77Message[i])
 8001a8c:	7fde      	ldrb	r6, [r3, #31]
 8001a8e:	b10e      	cbz	r6, 8001a94 <DecodeDCF77+0x78>
			HourParity ^= 1;
 8001a90:	f080 0001 	eor.w	r0, r0, #1
		if (DCF77Message[i])
 8001a94:	f893 4020 	ldrb.w	r4, [r3, #32]
 8001a98:	9402      	str	r4, [sp, #8]
 8001a9a:	b10c      	cbz	r4, 8001aa0 <DecodeDCF77+0x84>
			HourParity ^= 1;
 8001a9c:	f080 0001 	eor.w	r0, r0, #1
		if (DCF77Message[i])
 8001aa0:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8001aa4:	b10c      	cbz	r4, 8001aaa <DecodeDCF77+0x8e>
			HourParity ^= 1;
 8001aa6:	f080 0001 	eor.w	r0, r0, #1
		if (DCF77Message[i])
 8001aaa:	f893 a022 	ldrb.w	sl, [r3, #34]	; 0x22
 8001aae:	f1ba 0f00 	cmp.w	sl, #0
 8001ab2:	d143      	bne.n	8001b3c <DecodeDCF77+0x120>
	for (i = 29 ; i < 35; i++)
 8001ab4:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8001b8c <DecodeDCF77+0x170>
 8001ab8:	f88b 0000 	strb.w	r0, [fp]

	if (MinParity != DCF77Message[28] && HourParity != DCF77Message[35])
 8001abc:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8001ac0:	4593      	cmp	fp, r2
 8001ac2:	d006      	beq.n	8001ad2 <DecodeDCF77+0xb6>
 8001ac4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ac8:	4283      	cmp	r3, r0
 8001aca:	d002      	beq.n	8001ad2 <DecodeDCF77+0xb6>
			SystemSeconds = 0;
			WSPRBeaconState = FIRST_FIX;
		}
		break;
	}
}
 8001acc:	b005      	add	sp, #20
 8001ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001ad2:	9b03      	ldr	r3, [sp, #12]
		DCF77Min += DCF77Message[21+i] << i;
 8001ad4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001ad8:	00bf      	lsls	r7, r7, #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8001ada:	9a02      	ldr	r2, [sp, #8]
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001adc:	eb0c 0c49 	add.w	ip, ip, r9, lsl #1
 8001ae0:	eb07 0743 	add.w	r7, r7, r3, lsl #1
		DCF77Hour += (DCF77Message[29+i] << i);
 8001ae4:	9b01      	ldr	r3, [sp, #4]
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001ae6:	4461      	add	r1, ip
		DCF77Hour += (DCF77Message[29+i] << i);
 8001ae8:	00b6      	lsls	r6, r6, #2
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001aea:	443d      	add	r5, r7
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001aec:	eb04 044a 	add.w	r4, r4, sl, lsl #1
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001af0:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8001af4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8001af8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001afc:	eb01 0145 	add.w	r1, r1, r5, lsl #1
	switch (WSPRBeaconState)
 8001b00:	4d1c      	ldr	r5, [pc, #112]	; (8001b74 <DecodeDCF77+0x158>)
		DCF77Hour += (DCF77Message[29+i] << i);
 8001b02:	eb0e 0306 	add.w	r3, lr, r6
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001b06:	eb04 0484 	add.w	r4, r4, r4, lsl #2
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001b0a:	b2c9      	uxtb	r1, r1
		DCF77Hour += (DCF77Message[29+i] << i);
 8001b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <DecodeDCF77+0x15c>)
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001b12:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001b16:	7011      	strb	r1, [r2, #0]
	switch (WSPRBeaconState)
 8001b18:	782c      	ldrb	r4, [r5, #0]
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <DecodeDCF77+0x160>)
 8001b1c:	7013      	strb	r3, [r2, #0]
	switch (WSPRBeaconState)
 8001b1e:	b184      	cbz	r4, 8001b42 <DecodeDCF77+0x126>
 8001b20:	2c01      	cmp	r4, #1
 8001b22:	d1d3      	bne.n	8001acc <DecodeDCF77+0xb0>
		if (SystemMinutes == DCF77Min)
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <DecodeDCF77+0x164>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4291      	cmp	r1, r2
 8001b2a:	d013      	beq.n	8001b54 <DecodeDCF77+0x138>
			SystemSeconds = 0;
 8001b2c:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <DecodeDCF77+0x168>)
			SystemMinutes = DCF77Min;
 8001b2e:	6019      	str	r1, [r3, #0]
			SystemSeconds = 0;
 8001b30:	2300      	movs	r3, #0
			WSPRBeaconState = FIRST_FIX;
 8001b32:	702c      	strb	r4, [r5, #0]
			SystemSeconds = 0;
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	b005      	add	sp, #20
 8001b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			HourParity ^= 1;
 8001b3c:	f080 0001 	eor.w	r0, r0, #1
 8001b40:	e7b8      	b.n	8001ab4 <DecodeDCF77+0x98>
		SystemMinutes = DCF77Min;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <DecodeDCF77+0x164>)
		SystemSeconds = 0;
 8001b44:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <DecodeDCF77+0x168>)
		SystemMinutes = DCF77Min;
 8001b46:	6019      	str	r1, [r3, #0]
		WSPRBeaconState = FIRST_FIX;
 8001b48:	2301      	movs	r3, #1
		SystemSeconds = 0;
 8001b4a:	6014      	str	r4, [r2, #0]
		WSPRBeaconState = FIRST_FIX;
 8001b4c:	702b      	strb	r3, [r5, #0]
}
 8001b4e:	b005      	add	sp, #20
 8001b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SystemSeconds = 0;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <DecodeDCF77+0x168>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
			srand((unsigned) HAL_GetTick());
 8001b5a:	f004 ffdf 	bl	8006b1c <HAL_GetTick>
 8001b5e:	f00e fe91 	bl	8010884 <srand>
			TransmittingWSPR = 1;
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <DecodeDCF77+0x16c>)
			WSPRBeaconState = SEND_WSPR;
 8001b64:	2302      	movs	r3, #2
			TransmittingWSPR = 1;
 8001b66:	7014      	strb	r4, [r2, #0]
			WSPRBeaconState = SEND_WSPR;
 8001b68:	702b      	strb	r3, [r5, #0]
 8001b6a:	e7af      	b.n	8001acc <DecodeDCF77+0xb0>
 8001b6c:	2400060c 	.word	0x2400060c
 8001b70:	2400064a 	.word	0x2400064a
 8001b74:	240073dd 	.word	0x240073dd
 8001b78:	24000ffc 	.word	0x24000ffc
 8001b7c:	24000ff9 	.word	0x24000ff9
 8001b80:	240062b4 	.word	0x240062b4
 8001b84:	240062b8 	.word	0x240062b8
 8001b88:	240062c9 	.word	0x240062c9
 8001b8c:	24000649 	.word	0x24000649

08001b90 <DoDCF77>:

void DoDCF77(uint16_t DCF77In)
{
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
//100 mSec (DCF77 0) is 3200 samples
//200 mSec (DCF77 1) is 6400 samples
//2 Sec (DCF77 Sync) is 64000 samples


	if (DCF77In && !LastDCF77In)
 8001b92:	4d39      	ldr	r5, [pc, #228]	; (8001c78 <DoDCF77+0xe8>)
{
 8001b94:	b083      	sub	sp, #12
	if (DCF77In && !LastDCF77In)
 8001b96:	b1c8      	cbz	r0, 8001bcc <DoDCF77+0x3c>
 8001b98:	882b      	ldrh	r3, [r5, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d141      	bne.n	8001c22 <DoDCF77+0x92>
		RisingEdge = 1;
 8001b9e:	4937      	ldr	r1, [pc, #220]	; (8001c7c <DoDCF77+0xec>)
 8001ba0:	2201      	movs	r2, #1
		DCF77LowSampleCounter = 0;
	}

	if (RisingEdge)
	{
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8001ba2:	f640 34b6 	movw	r4, #2998	; 0xbb6
		RisingEdge = 1;
 8001ba6:	700a      	strb	r2, [r1, #0]
	if (!DCF77In && LastDCF77In)
 8001ba8:	4935      	ldr	r1, [pc, #212]	; (8001c80 <DoDCF77+0xf0>)
 8001baa:	700b      	strb	r3, [r1, #0]
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8001bac:	4935      	ldr	r1, [pc, #212]	; (8001c84 <DoDCF77+0xf4>)
 8001bae:	6809      	ldr	r1, [r1, #0]
 8001bb0:	f6a1 36b9 	subw	r6, r1, #3001	; 0xbb9
 8001bb4:	42a6      	cmp	r6, r4
 8001bb6:	d84f      	bhi.n	8001c58 <DoDCF77+0xc8>
			DCF77Message[DCF77BitCounter++] = 0;
 8001bb8:	4c33      	ldr	r4, [pc, #204]	; (8001c88 <DoDCF77+0xf8>)
 8001bba:	4934      	ldr	r1, [pc, #208]	; (8001c8c <DoDCF77+0xfc>)
 8001bbc:	6822      	ldr	r2, [r4, #0]
 8001bbe:	548b      	strb	r3, [r1, r2]
 8001bc0:	3201      	adds	r2, #1
 8001bc2:	6022      	str	r2, [r4, #0]
{
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <DoDCF77+0x100>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
				DCF77Message[DCF77BitCounter++] = 1;
		DCF77HighSampleCounter = 0;
	}
	if (DCF77In && DCF77HighSampleCounter < 100000)
		DCF77HighSampleCounter++;
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01a      	b.n	8001c02 <DoDCF77+0x72>
	if (!DCF77In && LastDCF77In)
 8001bcc:	882a      	ldrh	r2, [r5, #0]
		RisingEdge = 0;
 8001bce:	4f2b      	ldr	r7, [pc, #172]	; (8001c7c <DoDCF77+0xec>)
	if (!DCF77In && LastDCF77In)
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <DoDCF77+0xf0>)
		RisingEdge = 0;
 8001bd4:	7038      	strb	r0, [r7, #0]
	if (!DCF77In && LastDCF77In)
 8001bd6:	bf14      	ite	ne
 8001bd8:	2201      	movne	r2, #1
 8001bda:	2200      	moveq	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
	if (FallingEdge)
 8001bde:	d02c      	beq.n	8001c3a <DoDCF77+0xaa>
		if (DCF77HighSampleCounter > 40000 && DCF77HighSampleCounter < 90000)
 8001be0:	4e2b      	ldr	r6, [pc, #172]	; (8001c90 <DoDCF77+0x100>)
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <DoDCF77+0x104>)
 8001be4:	6832      	ldr	r2, [r6, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	f24c 324e 	movw	r2, #49998	; 0xc34e
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d910      	bls.n	8001c12 <DoDCF77+0x82>
		DCF77LowSampleCounter = 0;
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <DoDCF77+0xf4>)
 8001bf2:	4c25      	ldr	r4, [pc, #148]	; (8001c88 <DoDCF77+0xf8>)
 8001bf4:	6018      	str	r0, [r3, #0]

	if (!DCF77In && DCF77LowSampleCounter < 100000)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4927      	ldr	r1, [pc, #156]	; (8001c98 <DoDCF77+0x108>)
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d801      	bhi.n	8001c02 <DoDCF77+0x72>
		DCF77LowSampleCounter++;
 8001bfe:	3201      	adds	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

	if (DCF77BitCounter > 59)
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	2b3b      	cmp	r3, #59	; 0x3b
 8001c06:	d901      	bls.n	8001c0c <DoDCF77+0x7c>
		DCF77BitCounter = 59;
 8001c08:	233b      	movs	r3, #59	; 0x3b
 8001c0a:	6023      	str	r3, [r4, #0]
	LastDCF77In = DCF77In;
 8001c0c:	8028      	strh	r0, [r5, #0]
}
 8001c0e:	b003      	add	sp, #12
 8001c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (DCF77BitCounter == 59)
 8001c12:	4c1d      	ldr	r4, [pc, #116]	; (8001c88 <DoDCF77+0xf8>)
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	2b3b      	cmp	r3, #59	; 0x3b
 8001c18:	d012      	beq.n	8001c40 <DoDCF77+0xb0>
		DCF77LowSampleCounter = 0;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <DoDCF77+0xf4>)
			DCF77BitCounter = 0;
 8001c1c:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8001c1e:	6018      	str	r0, [r3, #0]
	if (RisingEdge)
 8001c20:	e7e9      	b.n	8001bf6 <DoDCF77+0x66>
		RisingEdge = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	4915      	ldr	r1, [pc, #84]	; (8001c7c <DoDCF77+0xec>)
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8001c26:	4a1a      	ldr	r2, [pc, #104]	; (8001c90 <DoDCF77+0x100>)
		RisingEdge = 0;
 8001c28:	700b      	strb	r3, [r1, #0]
	if (!DCF77In && LastDCF77In)
 8001c2a:	4915      	ldr	r1, [pc, #84]	; (8001c80 <DoDCF77+0xf0>)
 8001c2c:	700b      	strb	r3, [r1, #0]
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	4919      	ldr	r1, [pc, #100]	; (8001c98 <DoDCF77+0x108>)
 8001c32:	428b      	cmp	r3, r1
 8001c34:	d91d      	bls.n	8001c72 <DoDCF77+0xe2>
 8001c36:	4c14      	ldr	r4, [pc, #80]	; (8001c88 <DoDCF77+0xf8>)
 8001c38:	e7e3      	b.n	8001c02 <DoDCF77+0x72>
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <DoDCF77+0xf4>)
 8001c3c:	4c12      	ldr	r4, [pc, #72]	; (8001c88 <DoDCF77+0xf8>)
 8001c3e:	e7da      	b.n	8001bf6 <DoDCF77+0x66>
				DecodeDCF77();
 8001c40:	9001      	str	r0, [sp, #4]
 8001c42:	f7ff feeb 	bl	8001a1c <DecodeDCF77>
			DCF77BitCounter = 0;
 8001c46:	9801      	ldr	r0, [sp, #4]
		DCF77LowSampleCounter = 0;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <DoDCF77+0xf4>)
	if (RisingEdge)
 8001c4a:	783a      	ldrb	r2, [r7, #0]
			DCF77BitCounter = 0;
 8001c4c:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8001c4e:	6018      	str	r0, [r3, #0]
	if (RisingEdge)
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d0d0      	beq.n	8001bf6 <DoDCF77+0x66>
		DCF77HighSampleCounter = 0;
 8001c54:	6030      	str	r0, [r6, #0]
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8001c56:	e7ce      	b.n	8001bf6 <DoDCF77+0x66>
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <DoDCF77+0x10c>)
				DCF77Message[DCF77BitCounter++] = 1;
 8001c5a:	4c0b      	ldr	r4, [pc, #44]	; (8001c88 <DoDCF77+0xf8>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f241 716e 	movw	r1, #5998	; 0x176e
 8001c62:	428b      	cmp	r3, r1
 8001c64:	d8ae      	bhi.n	8001bc4 <DoDCF77+0x34>
				DCF77Message[DCF77BitCounter++] = 1;
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	4908      	ldr	r1, [pc, #32]	; (8001c8c <DoDCF77+0xfc>)
 8001c6a:	54ca      	strb	r2, [r1, r3]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	6023      	str	r3, [r4, #0]
 8001c70:	e7a8      	b.n	8001bc4 <DoDCF77+0x34>
		DCF77HighSampleCounter++;
 8001c72:	3301      	adds	r3, #1
 8001c74:	4c04      	ldr	r4, [pc, #16]	; (8001c88 <DoDCF77+0xf8>)
 8001c76:	e7a7      	b.n	8001bc8 <DoDCF77+0x38>
 8001c78:	2400623e 	.word	0x2400623e
 8001c7c:	2400064b 	.word	0x2400064b
 8001c80:	24000648 	.word	0x24000648
 8001c84:	24000608 	.word	0x24000608
 8001c88:	240005fc 	.word	0x240005fc
 8001c8c:	2400060c 	.word	0x2400060c
 8001c90:	24000604 	.word	0x24000604
 8001c94:	ffff63bf 	.word	0xffff63bf
 8001c98:	0001869f 	.word	0x0001869f
 8001c9c:	ffffe88f 	.word	0xffffe88f

08001ca0 <DCF77StatusDisplay>:

void DCF77StatusDisplay(void)
{
	static uint16_t DCF77DisplayCounter, DCF77DisplayPrescaler;

	if (DCF77DisplayPrescaler++ == 1)
 8001ca0:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <DCF77StatusDisplay+0x64>)
{
 8001ca2:	b538      	push	{r3, r4, r5, lr}
	if (DCF77DisplayPrescaler++ == 1)
 8001ca4:	8813      	ldrh	r3, [r2, #0]
	{
		DCF77DisplayPrescaler = 0;
		DCF77DisplayCounter++;
 8001ca6:	4c18      	ldr	r4, [pc, #96]	; (8001d08 <DCF77StatusDisplay+0x68>)
	if (DCF77DisplayPrescaler++ == 1)
 8001ca8:	1c59      	adds	r1, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	8011      	strh	r1, [r2, #0]
 8001cae:	d019      	beq.n	8001ce4 <DCF77StatusDisplay+0x44>
		DCF77DisplayCounter++;
 8001cb0:	8823      	ldrh	r3, [r4, #0]
	}
	if (DCF77DisplayCounter % 2 == 0)
 8001cb2:	f013 0201 	ands.w	r2, r3, #1
 8001cb6:	d01e      	beq.n	8001cf6 <DCF77StatusDisplay+0x56>
		LED_GREEN_OFF;
	else
	{
		if (DCF77DisplayCounter <= (WSPRBeaconState + 1) * 2 )
 8001cb8:	4d14      	ldr	r5, [pc, #80]	; (8001d0c <DCF77StatusDisplay+0x6c>)
			LED_GREEN_ON;
		else
			LED_GREEN_OFF;
 8001cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <DCF77StatusDisplay+0x70>)
		if (DCF77DisplayCounter <= (WSPRBeaconState + 1) * 2 )
 8001cc0:	782a      	ldrb	r2, [r5, #0]
 8001cc2:	3201      	adds	r2, #1
 8001cc4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
			LED_GREEN_ON;
 8001cc8:	bfd4      	ite	le
 8001cca:	2201      	movle	r2, #1
			LED_GREEN_OFF;
 8001ccc:	2200      	movgt	r2, #0
 8001cce:	f007 ffe5 	bl	8009c9c <HAL_GPIO_WritePin>
		if (DCF77DisplayCounter > (WSPRBeaconState + 3) * 2 )
 8001cd2:	782b      	ldrb	r3, [r5, #0]
 8001cd4:	8822      	ldrh	r2, [r4, #0]
 8001cd6:	3303      	adds	r3, #3
 8001cd8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8001cdc:	dd01      	ble.n	8001ce2 <DCF77StatusDisplay+0x42>
			DCF77DisplayCounter = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	8023      	strh	r3, [r4, #0]
	}

}
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
		DCF77DisplayCounter++;
 8001ce4:	8823      	ldrh	r3, [r4, #0]
		DCF77DisplayPrescaler = 0;
 8001ce6:	2100      	movs	r1, #0
		DCF77DisplayCounter++;
 8001ce8:	3301      	adds	r3, #1
		DCF77DisplayPrescaler = 0;
 8001cea:	8011      	strh	r1, [r2, #0]
		DCF77DisplayCounter++;
 8001cec:	b29b      	uxth	r3, r3
	if (DCF77DisplayCounter % 2 == 0)
 8001cee:	f013 0201 	ands.w	r2, r3, #1
		DCF77DisplayCounter++;
 8001cf2:	8023      	strh	r3, [r4, #0]
	if (DCF77DisplayCounter % 2 == 0)
 8001cf4:	d1e0      	bne.n	8001cb8 <DCF77StatusDisplay+0x18>
		LED_GREEN_OFF;
 8001cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <DCF77StatusDisplay+0x70>)
}
 8001cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LED_GREEN_OFF;
 8001d00:	f007 bfcc 	b.w	8009c9c <HAL_GPIO_WritePin>
 8001d04:	24000602 	.word	0x24000602
 8001d08:	24000600 	.word	0x24000600
 8001d0c:	240073dd 	.word	0x240073dd
 8001d10:	58020400 	.word	0x58020400

08001d14 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <Load_Presets+0x40>)
{
 8001d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1a:	4c0f      	ldr	r4, [pc, #60]	; (8001d58 <Load_Presets+0x44>)
 8001d1c:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8001d20:	4f0e      	ldr	r7, [pc, #56]	; (8001d5c <Load_Presets+0x48>)
 8001d22:	4e0f      	ldr	r6, [pc, #60]	; (8001d60 <Load_Presets+0x4c>)
 8001d24:	4d0f      	ldr	r5, [pc, #60]	; (8001d64 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8001d26:	4621      	mov	r1, r4
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f00f fcdd 	bl	80116e8 <strcpy>
 8001d2e:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 8001d30:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8001d34:	3410      	adds	r4, #16
 8001d36:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8001d38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8001d3c:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8001d40:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8001d44:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8001d46:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8001d4a:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8001d4e:	d1ea      	bne.n	8001d26 <Load_Presets+0x12>
	}
}
 8001d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d54:	2400a824 	.word	0x2400a824
 8001d58:	24000120 	.word	0x24000120
 8001d5c:	0801d810 	.word	0x0801d810
 8001d60:	0801d847 	.word	0x0801d847
 8001d64:	0801d7ff 	.word	0x0801d7ff

08001d68 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <SetBW+0x8c>)
	CurrentBW = newbw;
 8001d6a:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <SetBW+0x90>)
{
 8001d6c:	b410      	push	{r4}
	switch(CurrentMode)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 8001d70:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d83a      	bhi.n	8001dec <SetBW+0x84>
 8001d76:	e8df f003 	tbb	[pc, r3]
 8001d7a:	232b      	.short	0x232b
 8001d7c:	0210      	.short	0x0210

		break;

	case CW  :

		bw[CW] = newbw;
 8001d7e:	4c1f      	ldr	r4, [pc, #124]	; (8001dfc <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 8001d80:	2100      	movs	r1, #0
 8001d82:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8001d88:	70e0      	strb	r0, [r4, #3]
		CWindex = 0; // TODO toglimi
 8001d8a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001d8c:	481d      	ldr	r0, [pc, #116]	; (8001e04 <SetBW+0x9c>)
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <SetBW+0xa0>)
 8001d90:	491e      	ldr	r1, [pc, #120]	; (8001e0c <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 8001d92:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001d96:	f001 b8ff 	b.w	8002f98 <SDR_2R_toC_f32>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001d9a:	1e02      	subs	r2, r0, #0
		bw[USB] = newbw;
 8001d9c:	4917      	ldr	r1, [pc, #92]	; (8001dfc <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <SetBW+0xa8>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001da0:	bf18      	it	ne
 8001da2:	2201      	movne	r2, #1
		USBindex = 0; // TODO toglimi
 8001da4:	4c1b      	ldr	r4, [pc, #108]	; (8001e14 <SetBW+0xac>)
		bw[USB] = newbw;
 8001da6:	7088      	strb	r0, [r1, #2]
		USBindex = 0; // TODO toglimi
 8001da8:	2000      	movs	r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001daa:	801a      	strh	r2, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001dac:	491a      	ldr	r1, [pc, #104]	; (8001e18 <SetBW+0xb0>)
 8001dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8001db2:	8020      	strh	r0, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <SetBW+0xa0>)
 8001db6:	4819      	ldr	r0, [pc, #100]	; (8001e1c <SetBW+0xb4>)
}	
 8001db8:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001dbc:	f001 b8ec 	b.w	8002f98 <SDR_2R_toC_f32>
		bw[LSB] = newbw;
 8001dc0:	490e      	ldr	r1, [pc, #56]	; (8001dfc <SetBW+0x94>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001dc2:	1e02      	subs	r2, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <SetBW+0xa8>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001dc6:	bf18      	it	ne
 8001dc8:	2201      	movne	r2, #1
		LSBindex = 0; // TODO toglimi
 8001dca:	4c15      	ldr	r4, [pc, #84]	; (8001e20 <SetBW+0xb8>)
		bw[LSB] = newbw;
 8001dcc:	7048      	strb	r0, [r1, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001dce:	e7eb      	b.n	8001da8 <SetBW+0x40>
		bw[AM] = newbw;
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	; (8001dfc <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8001dda:	7020      	strb	r0, [r4, #0]
		AMindex = 0; // TODO toglimi
 8001ddc:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001dde:	4811      	ldr	r0, [pc, #68]	; (8001e24 <SetBW+0xbc>)
 8001de0:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <SetBW+0xa0>)
 8001de2:	4911      	ldr	r1, [pc, #68]	; (8001e28 <SetBW+0xc0>)
}	
 8001de4:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001de8:	f001 b8d6 	b.w	8002f98 <SDR_2R_toC_f32>
}	
 8001dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	24000ff8 	.word	0x24000ff8
 8001df8:	24000ff7 	.word	0x24000ff7
 8001dfc:	24007c10 	.word	0x24007c10
 8001e00:	24000ff4 	.word	0x24000ff4
 8001e04:	0801a800 	.word	0x0801a800
 8001e08:	20005800 	.word	0x20005800
 8001e0c:	08019800 	.word	0x08019800
 8001e10:	240007c0 	.word	0x240007c0
 8001e14:	240062d4 	.word	0x240062d4
 8001e18:	0801b800 	.word	0x0801b800
 8001e1c:	0801c800 	.word	0x0801c800
 8001e20:	2400623c 	.word	0x2400623c
 8001e24:	08018800 	.word	0x08018800
 8001e28:	08017800 	.word	0x08017800

08001e2c <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8001e2e:	4a26      	ldr	r2, [pc, #152]	; (8001ec8 <SetAGC+0x9c>)
{
 8001e30:	b410      	push	{r4}
	switch(CurrentMode)
 8001e32:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8001e34:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d810      	bhi.n	8001e5c <SetAGC+0x30>
 8001e3a:	e8df f003 	tbb	[pc, r3]
 8001e3e:	2333      	.short	0x2333
 8001e40:	1202      	.short	0x1202
	case LSB :      agc[LSB] = newAGC;
	Decay[LSB]  = AGC_decay[newAGC];
	Hcount[LSB] = Hangcount[newAGC]; break;

	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8001e44:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001e46:	4c23      	ldr	r4, [pc, #140]	; (8001ed4 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8001e48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e4c:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001e4e:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8001e52:	681b      	ldr	r3, [r3, #0]
	case USB :      agc[USB] = newAGC;
 8001e54:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001e56:	4921      	ldr	r1, [pc, #132]	; (8001edc <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8001e58:	6093      	str	r3, [r2, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001e5a:	808c      	strh	r4, [r1, #4]
	Decay[CW]   = AGC_decay[newAGC];
	Hcount[CW]  = Hangcount[newAGC]; break;
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8001e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e60:	4770      	bx	lr
	Decay[CW]   = AGC_decay[newAGC];
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001e64:	4c1b      	ldr	r4, [pc, #108]	; (8001ed4 <SetAGC+0xa8>)
	case CW :       agc[CW] = newAGC;
 8001e66:	491a      	ldr	r1, [pc, #104]	; (8001ed0 <SetAGC+0xa4>)
	Decay[CW]   = AGC_decay[newAGC];
 8001e68:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001e6c:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	case CW :       agc[CW] = newAGC;
 8001e70:	70c8      	strb	r0, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8001e72:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001e74:	4919      	ldr	r1, [pc, #100]	; (8001edc <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8001e76:	681b      	ldr	r3, [r3, #0]
}	
 8001e78:	f85d 4b04 	ldr.w	r4, [sp], #4
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001e7c:	f8a1 c006 	strh.w	ip, [r1, #6]
	Decay[CW]   = AGC_decay[newAGC];
 8001e80:	60d3      	str	r3, [r2, #12]
}	
 8001e82:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8001e86:	4912      	ldr	r1, [pc, #72]	; (8001ed0 <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001e88:	4c12      	ldr	r4, [pc, #72]	; (8001ed4 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8001e8a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8001e8e:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001e90:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8001e94:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001e96:	4911      	ldr	r1, [pc, #68]	; (8001edc <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8001e98:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001e9a:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8001e9c:	6053      	str	r3, [r2, #4]
}	
 8001e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ea2:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8001eaa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8001eae:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001eb0:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8001eb4:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001eb6:	4909      	ldr	r1, [pc, #36]	; (8001edc <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8001eb8:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001eba:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8001ebc:	6013      	str	r3, [r2, #0]
}	
 8001ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	24000ff8 	.word	0x24000ff8
 8001ec8:	24000ff6 	.word	0x24000ff6
 8001ecc:	240007b8 	.word	0x240007b8
 8001ed0:	24007c00 	.word	0x24007c00
 8001ed4:	24005228 	.word	0x24005228
 8001ed8:	24001000 	.word	0x24001000
 8001edc:	2400522c 	.word	0x2400522c

08001ee0 <Tune_Preset>:
{
 8001ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8001ee4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001ee8:	4e47      	ldr	r6, [pc, #284]	; (8002008 <Tune_Preset+0x128>)
 8001eea:	4a48      	ldr	r2, [pc, #288]	; (800200c <Tune_Preset+0x12c>)
{
 8001eec:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8001eee:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8001ef2:	4f47      	ldr	r7, [pc, #284]	; (8002010 <Tune_Preset+0x130>)
	LOfreq = psets[Idx].freq;
 8001ef4:	0045      	lsls	r5, r0, #1
 8001ef6:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8001ef8:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8001efa:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8001efc:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d87b      	bhi.n	8001ffa <Tune_Preset+0x11a>
 8001f02:	e8df f003 	tbb	[pc, r3]
 8001f06:	626e      	.short	0x626e
 8001f08:	0256      	.short	0x0256
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001f0a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800204c <Tune_Preset+0x16c>
 8001f0e:	f898 0003 	ldrb.w	r0, [r8, #3]
 8001f12:	f7ff ff29 	bl	8001d68 <SetBW>
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <Tune_Preset+0x134>)
 8001f18:	78d8      	ldrb	r0, [r3, #3]
 8001f1a:	f7ff ff87 	bl	8001e2c <SetAGC>
	switch(CurrentMode)
 8001f1e:	783a      	ldrb	r2, [r7, #0]
	SetBW( psets[Idx].bw);
 8001f20:	4425      	add	r5, r4
	CurrentBW = newbw;
 8001f22:	493d      	ldr	r1, [pc, #244]	; (8002018 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8001f24:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8001f28:	7d6b      	ldrb	r3, [r5, #21]
	CurrentBW = newbw;
 8001f2a:	700b      	strb	r3, [r1, #0]
	switch(CurrentMode)
 8001f2c:	2a03      	cmp	r2, #3
 8001f2e:	d80f      	bhi.n	8001f50 <Tune_Preset+0x70>
 8001f30:	e8df f002 	tbb	[pc, r2]
 8001f34:	02173629 	.word	0x02173629
		CWindex = 0; // TODO toglimi
 8001f38:	4a38      	ldr	r2, [pc, #224]	; (800201c <Tune_Preset+0x13c>)
 8001f3a:	2100      	movs	r1, #0
		bw[CW] = newbw;
 8001f3c:	f888 3003 	strb.w	r3, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8001f44:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001f46:	4836      	ldr	r0, [pc, #216]	; (8002020 <Tune_Preset+0x140>)
 8001f48:	4a36      	ldr	r2, [pc, #216]	; (8002024 <Tune_Preset+0x144>)
 8001f4a:	4937      	ldr	r1, [pc, #220]	; (8002028 <Tune_Preset+0x148>)
 8001f4c:	f001 f824 	bl	8002f98 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8001f50:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001f54:	4835      	ldr	r0, [pc, #212]	; (800202c <Tune_Preset+0x14c>)
 8001f56:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8001f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8001f5e:	f00f bbc3 	b.w	80116e8 <strcpy>
		bw[USB] = newbw;
 8001f62:	f888 3002 	strb.w	r3, [r8, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001f66:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001f68:	4a31      	ldr	r2, [pc, #196]	; (8002030 <Tune_Preset+0x150>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001f6a:	bf18      	it	ne
 8001f6c:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001f6e:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 8001f70:	4a30      	ldr	r2, [pc, #192]	; (8002034 <Tune_Preset+0x154>)
 8001f72:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f78:	482f      	ldr	r0, [pc, #188]	; (8002038 <Tune_Preset+0x158>)
		USBindex = 0; // TODO toglimi
 8001f7a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001f7c:	4a29      	ldr	r2, [pc, #164]	; (8002024 <Tune_Preset+0x144>)
 8001f7e:	492f      	ldr	r1, [pc, #188]	; (800203c <Tune_Preset+0x15c>)
 8001f80:	f001 f80a 	bl	8002f98 <SDR_2R_toC_f32>
		break;
 8001f84:	e7e4      	b.n	8001f50 <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 8001f86:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <Tune_Preset+0x150>)
 8001f88:	2100      	movs	r1, #0
		bw[AM] = newbw;
 8001f8a:	f888 3000 	strb.w	r3, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8001f92:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001f94:	482a      	ldr	r0, [pc, #168]	; (8002040 <Tune_Preset+0x160>)
 8001f96:	4a23      	ldr	r2, [pc, #140]	; (8002024 <Tune_Preset+0x144>)
 8001f98:	492a      	ldr	r1, [pc, #168]	; (8002044 <Tune_Preset+0x164>)
 8001f9a:	f000 fffd 	bl	8002f98 <SDR_2R_toC_f32>
		break;
 8001f9e:	e7d7      	b.n	8001f50 <Tune_Preset+0x70>
		bw[LSB] = newbw;
 8001fa0:	f888 3001 	strb.w	r3, [r8, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001fa4:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001fa6:	4a22      	ldr	r2, [pc, #136]	; (8002030 <Tune_Preset+0x150>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001fa8:	bf18      	it	ne
 8001faa:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001fac:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 8001fae:	4a26      	ldr	r2, [pc, #152]	; (8002048 <Tune_Preset+0x168>)
 8001fb0:	e7df      	b.n	8001f72 <Tune_Preset+0x92>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001fb2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800204c <Tune_Preset+0x16c>
 8001fb6:	f898 0002 	ldrb.w	r0, [r8, #2]
 8001fba:	f7ff fed5 	bl	8001d68 <SetBW>
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <Tune_Preset+0x134>)
 8001fc0:	7898      	ldrb	r0, [r3, #2]
 8001fc2:	f7ff ff33 	bl	8001e2c <SetAGC>
	switch(CurrentMode)
 8001fc6:	783a      	ldrb	r2, [r7, #0]
		break;
 8001fc8:	e7aa      	b.n	8001f20 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001fca:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800204c <Tune_Preset+0x16c>
 8001fce:	f898 0001 	ldrb.w	r0, [r8, #1]
 8001fd2:	f7ff fec9 	bl	8001d68 <SetBW>
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <Tune_Preset+0x134>)
 8001fd8:	7858      	ldrb	r0, [r3, #1]
 8001fda:	f7ff ff27 	bl	8001e2c <SetAGC>
	switch(CurrentMode)
 8001fde:	783a      	ldrb	r2, [r7, #0]
		break;
 8001fe0:	e79e      	b.n	8001f20 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001fe2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800204c <Tune_Preset+0x16c>
 8001fe6:	f898 0000 	ldrb.w	r0, [r8]
 8001fea:	f7ff febd 	bl	8001d68 <SetBW>
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <Tune_Preset+0x134>)
 8001ff0:	7818      	ldrb	r0, [r3, #0]
 8001ff2:	f7ff ff1b 	bl	8001e2c <SetAGC>
	switch(CurrentMode)
 8001ff6:	783a      	ldrb	r2, [r7, #0]
		break;

	default :
		break;
	}
}	
 8001ff8:	e792      	b.n	8001f20 <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8001ffa:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8001ffe:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 8002002:	7d5b      	ldrb	r3, [r3, #21]
 8002004:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8002006:	e7a3      	b.n	8001f50 <Tune_Preset+0x70>
 8002008:	2400a824 	.word	0x2400a824
 800200c:	24006238 	.word	0x24006238
 8002010:	24000ff8 	.word	0x24000ff8
 8002014:	24007c00 	.word	0x24007c00
 8002018:	24000ff7 	.word	0x24000ff7
 800201c:	24000ff4 	.word	0x24000ff4
 8002020:	0801a800 	.word	0x0801a800
 8002024:	20005800 	.word	0x20005800
 8002028:	08019800 	.word	0x08019800
 800202c:	2400a7fc 	.word	0x2400a7fc
 8002030:	240007c0 	.word	0x240007c0
 8002034:	240062d4 	.word	0x240062d4
 8002038:	0801c800 	.word	0x0801c800
 800203c:	0801b800 	.word	0x0801b800
 8002040:	08018800 	.word	0x08018800
 8002044:	08017800 	.word	0x08017800
 8002048:	2400623c 	.word	0x2400623c
 800204c:	24007c10 	.word	0x24007c10

08002050 <SetMode>:
{
 8002050:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <SetMode+0x64>)
 8002054:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8002056:	2803      	cmp	r0, #3
 8002058:	d82b      	bhi.n	80020b2 <SetMode+0x62>
 800205a:	e8df f000 	tbb	[pc, r0]
 800205e:	1620      	.short	0x1620
 8002060:	020c      	.short	0x020c
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <SetMode+0x68>)
 8002064:	78d8      	ldrb	r0, [r3, #3]
 8002066:	f7ff fe7f 	bl	8001d68 <SetBW>
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <SetMode+0x6c>)
 800206c:	78d8      	ldrb	r0, [r3, #3]
}	
 800206e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8002072:	f7ff bedb 	b.w	8001e2c <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <SetMode+0x68>)
 8002078:	7898      	ldrb	r0, [r3, #2]
 800207a:	f7ff fe75 	bl	8001d68 <SetBW>
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <SetMode+0x6c>)
 8002080:	7898      	ldrb	r0, [r3, #2]
}	
 8002082:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8002086:	f7ff bed1 	b.w	8001e2c <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <SetMode+0x68>)
 800208c:	7858      	ldrb	r0, [r3, #1]
 800208e:	f7ff fe6b 	bl	8001d68 <SetBW>
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <SetMode+0x6c>)
 8002094:	7858      	ldrb	r0, [r3, #1]
}	
 8002096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800209a:	f7ff bec7 	b.w	8001e2c <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SetMode+0x68>)
 80020a0:	7818      	ldrb	r0, [r3, #0]
 80020a2:	f7ff fe61 	bl	8001d68 <SetBW>
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SetMode+0x6c>)
 80020a8:	7818      	ldrb	r0, [r3, #0]
}	
 80020aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80020ae:	f7ff bebd 	b.w	8001e2c <SetAGC>
}	
 80020b2:	bd08      	pop	{r3, pc}
 80020b4:	24000ff8 	.word	0x24000ff8
 80020b8:	24007c10 	.word	0x24007c10
 80020bc:	24007c00 	.word	0x24007c00

080020c0 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 80020c0:	2809      	cmp	r0, #9
{
 80020c2:	b508      	push	{r3, lr}
	if (idx == 9)
 80020c4:	d012      	beq.n	80020ec <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 80020c6:	f1c0 0005 	rsb	r0, r0, #5
 80020ca:	ee06 0a90 	vmov	s13, r0
 80020ce:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80020f8 <SetFstep+0x38>
 80020d2:	eeb8 0be6 	vcvt.f64.s32	d0, s13
 80020d6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80020da:	f011 fbd5 	bl	8013888 <exp>
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <SetFstep+0x40>)
 80020e0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 80020e4:	ee17 3a90 	vmov	r3, s15
 80020e8:	6013      	str	r3, [r2, #0]
}	
 80020ea:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 80020ec:	f242 3328 	movw	r3, #9000	; 0x2328
 80020f0:	4a03      	ldr	r2, [pc, #12]	; (8002100 <SetFstep+0x40>)
 80020f2:	6013      	str	r3, [r2, #0]
}	
 80020f4:	bd08      	pop	{r3, pc}
 80020f6:	bf00      	nop
 80020f8:	bbb55516 	.word	0xbbb55516
 80020fc:	40026bb1 	.word	0x40026bb1
 8002100:	24005220 	.word	0x24005220

08002104 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <FplusClicked+0xb4>)
 8002106:	ee07 0a90 	vmov	s15, r0
 800210a:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <FplusClicked+0xb8>)
 800210c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002110:	ed93 6a00 	vldr	s12, [r3]
 8002114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002118:	ed92 7a00 	vldr	s14, [r2]
 800211c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <FplusClicked+0xbc>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8002122:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8002126:	4927      	ldr	r1, [pc, #156]	; (80021c4 <FplusClicked+0xc0>)
	LOfreq  = min(LOfreq, 50000000.f);
 8002128:	eddf 5a27 	vldr	s11, [pc, #156]	; 80021c8 <FplusClicked+0xc4>
	LOfreq += Fstep * (float)Nsteps / 2.0;
 800212c:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8002130:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8002132:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4c24      	ldr	r4, [pc, #144]	; (80021cc <FplusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 800213a:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 800213c:	eea6 7b04 	vfma.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002140:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8002142:	7560      	strb	r0, [r4, #21]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8002144:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8002148:	fe87 7a65 	vminnm.f32	s14, s14, s11
 800214c:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002150:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8002154:	2b03      	cmp	r3, #3
 8002156:	d80b      	bhi.n	8002170 <FplusClicked+0x6c>
 8002158:	e8df f003 	tbb	[pc, r3]
 800215c:	12021b24 	.word	0x12021b24
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8002160:	7888      	ldrb	r0, [r1, #2]
 8002162:	f7ff fe01 	bl	8001d68 <SetBW>
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <FplusClicked+0xcc>)
 8002168:	7898      	ldrb	r0, [r3, #2]
 800216a:	f7ff fe5f 	bl	8001e2c <SetAGC>
	SetBW( psets[Idx].bw);
 800216e:	7d60      	ldrb	r0, [r4, #21]
 8002170:	f7ff fdfa 	bl	8001d68 <SetBW>
	strcpy(msg, psets[Idx].name);
 8002174:	4915      	ldr	r1, [pc, #84]	; (80021cc <FplusClicked+0xc8>)
 8002176:	4817      	ldr	r0, [pc, #92]	; (80021d4 <FplusClicked+0xd0>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8002178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800217c:	f00f bab4 	b.w	80116e8 <strcpy>
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8002180:	78c8      	ldrb	r0, [r1, #3]
 8002182:	f7ff fdf1 	bl	8001d68 <SetBW>
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <FplusClicked+0xcc>)
 8002188:	78d8      	ldrb	r0, [r3, #3]
 800218a:	f7ff fe4f 	bl	8001e2c <SetAGC>
	SetBW( psets[Idx].bw);
 800218e:	7d60      	ldrb	r0, [r4, #21]
		break;
 8002190:	e7ee      	b.n	8002170 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8002192:	7848      	ldrb	r0, [r1, #1]
 8002194:	f7ff fde8 	bl	8001d68 <SetBW>
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <FplusClicked+0xcc>)
 800219a:	7858      	ldrb	r0, [r3, #1]
 800219c:	f7ff fe46 	bl	8001e2c <SetAGC>
	SetBW( psets[Idx].bw);
 80021a0:	7d60      	ldrb	r0, [r4, #21]
		break;
 80021a2:	e7e5      	b.n	8002170 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80021a4:	7808      	ldrb	r0, [r1, #0]
 80021a6:	f7ff fddf 	bl	8001d68 <SetBW>
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <FplusClicked+0xcc>)
 80021ac:	7818      	ldrb	r0, [r3, #0]
 80021ae:	f7ff fe3d 	bl	8001e2c <SetAGC>
	SetBW( psets[Idx].bw);
 80021b2:	7d60      	ldrb	r0, [r4, #21]
}	
 80021b4:	e7dc      	b.n	8002170 <FplusClicked+0x6c>
 80021b6:	bf00      	nop
 80021b8:	24005220 	.word	0x24005220
 80021bc:	24006238 	.word	0x24006238
 80021c0:	24000ff8 	.word	0x24000ff8
 80021c4:	24007c10 	.word	0x24007c10
 80021c8:	4c3ebc20 	.word	0x4c3ebc20
 80021cc:	2400a824 	.word	0x2400a824
 80021d0:	24007c00 	.word	0x24007c00
 80021d4:	2400a7fc 	.word	0x2400a7fc

080021d8 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <FminusClicked+0xb4>)
 80021da:	ee07 0a90 	vmov	s15, r0
 80021de:	4a2c      	ldr	r2, [pc, #176]	; (8002290 <FminusClicked+0xb8>)
 80021e0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80021e4:	ed93 6a00 	vldr	s12, [r3]
 80021e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ec:	ed92 7a00 	vldr	s14, [r2]
 80021f0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <FminusClicked+0xbc>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80021f6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 80021fa:	4927      	ldr	r1, [pc, #156]	; (8002298 <FminusClicked+0xc0>)
	LOfreq  = max(LOfreq, 8000.f);
 80021fc:	eddf 5a27 	vldr	s11, [pc, #156]	; 800229c <FminusClicked+0xc4>
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8002200:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8002204:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8002206:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4c24      	ldr	r4, [pc, #144]	; (80022a0 <FminusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 800220e:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8002210:	eea6 7b44 	vfms.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002214:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8002216:	7560      	strb	r0, [r4, #21]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8002218:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 800221c:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 8002220:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002224:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8002228:	2b03      	cmp	r3, #3
 800222a:	d80b      	bhi.n	8002244 <FminusClicked+0x6c>
 800222c:	e8df f003 	tbb	[pc, r3]
 8002230:	12021b24 	.word	0x12021b24
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8002234:	7888      	ldrb	r0, [r1, #2]
 8002236:	f7ff fd97 	bl	8001d68 <SetBW>
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <FminusClicked+0xcc>)
 800223c:	7898      	ldrb	r0, [r3, #2]
 800223e:	f7ff fdf5 	bl	8001e2c <SetAGC>
	SetBW( psets[Idx].bw);
 8002242:	7d60      	ldrb	r0, [r4, #21]
 8002244:	f7ff fd90 	bl	8001d68 <SetBW>
	strcpy(msg, psets[Idx].name);
 8002248:	4915      	ldr	r1, [pc, #84]	; (80022a0 <FminusClicked+0xc8>)
 800224a:	4817      	ldr	r0, [pc, #92]	; (80022a8 <FminusClicked+0xd0>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 800224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8002250:	f00f ba4a 	b.w	80116e8 <strcpy>
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8002254:	78c8      	ldrb	r0, [r1, #3]
 8002256:	f7ff fd87 	bl	8001d68 <SetBW>
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <FminusClicked+0xcc>)
 800225c:	78d8      	ldrb	r0, [r3, #3]
 800225e:	f7ff fde5 	bl	8001e2c <SetAGC>
	SetBW( psets[Idx].bw);
 8002262:	7d60      	ldrb	r0, [r4, #21]
		break;
 8002264:	e7ee      	b.n	8002244 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8002266:	7848      	ldrb	r0, [r1, #1]
 8002268:	f7ff fd7e 	bl	8001d68 <SetBW>
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <FminusClicked+0xcc>)
 800226e:	7858      	ldrb	r0, [r3, #1]
 8002270:	f7ff fddc 	bl	8001e2c <SetAGC>
	SetBW( psets[Idx].bw);
 8002274:	7d60      	ldrb	r0, [r4, #21]
		break;
 8002276:	e7e5      	b.n	8002244 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8002278:	7808      	ldrb	r0, [r1, #0]
 800227a:	f7ff fd75 	bl	8001d68 <SetBW>
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <FminusClicked+0xcc>)
 8002280:	7818      	ldrb	r0, [r3, #0]
 8002282:	f7ff fdd3 	bl	8001e2c <SetAGC>
	SetBW( psets[Idx].bw);
 8002286:	7d60      	ldrb	r0, [r4, #21]
}	
 8002288:	e7dc      	b.n	8002244 <FminusClicked+0x6c>
 800228a:	bf00      	nop
 800228c:	24005220 	.word	0x24005220
 8002290:	24006238 	.word	0x24006238
 8002294:	24000ff8 	.word	0x24000ff8
 8002298:	24007c10 	.word	0x24007c10
 800229c:	45fa0000 	.word	0x45fa0000
 80022a0:	2400a824 	.word	0x2400a824
 80022a4:	24007c00 	.word	0x24007c00
 80022a8:	2400a7fc 	.word	0x2400a7fc

080022ac <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop

080022b0 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80022b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 80022b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b8:	4989      	ldr	r1, [pc, #548]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x230>)
 80022ba:	488a      	ldr	r0, [pc, #552]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x234>)
	 */

	// TODO: check why with the original code above LSB and USB are swapped

	//if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80022bc:	4c8a      	ldr	r4, [pc, #552]	; (80024e8 <HAL_GPIO_EXTI_Callback+0x238>)
{
 80022be:	ed2d 8b08 	vpush	{d8-d11}
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 80022c2:	f000 ff6d 	bl	80031a0 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 80022c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ca:	4988      	ldr	r1, [pc, #544]	; (80024ec <HAL_GPIO_EXTI_Callback+0x23c>)
 80022cc:	4888      	ldr	r0, [pc, #544]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x240>)
 80022ce:	f000 ff67 	bl	80031a0 <SDR_memcpy_f32>
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 80022d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022d6:	4a87      	ldr	r2, [pc, #540]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x244>)
 80022d8:	4982      	ldr	r1, [pc, #520]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x234>)
 80022da:	4887      	ldr	r0, [pc, #540]	; (80024f8 <HAL_GPIO_EXTI_Callback+0x248>)
 80022dc:	f7ff f89a 	bl	8001414 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 80022e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022e4:	4a85      	ldr	r2, [pc, #532]	; (80024fc <HAL_GPIO_EXTI_Callback+0x24c>)
 80022e6:	4982      	ldr	r1, [pc, #520]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x240>)
 80022e8:	4885      	ldr	r0, [pc, #532]	; (8002500 <HAL_GPIO_EXTI_Callback+0x250>)
 80022ea:	f7ff f893 	bl	8001414 <arm_fir_decimate_f32>
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80022ee:	4985      	ldr	r1, [pc, #532]	; (8002504 <HAL_GPIO_EXTI_Callback+0x254>)
 80022f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f4:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 80022f8:	f000 ff52 	bl	80031a0 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 80022fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002300:	4a80      	ldr	r2, [pc, #512]	; (8002504 <HAL_GPIO_EXTI_Callback+0x254>)
 8002302:	497e      	ldr	r1, [pc, #504]	; (80024fc <HAL_GPIO_EXTI_Callback+0x24c>)
 8002304:	487b      	ldr	r0, [pc, #492]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x244>)
 8002306:	f000 fe47 	bl	8002f98 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 800230a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800230e:	497e      	ldr	r1, [pc, #504]	; (8002508 <HAL_GPIO_EXTI_Callback+0x258>)
 8002310:	487e      	ldr	r0, [pc, #504]	; (800250c <HAL_GPIO_EXTI_Callback+0x25c>)
 8002312:	f000 ff45 	bl	80031a0 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8002316:	2301      	movs	r3, #1
 8002318:	2200      	movs	r2, #0
 800231a:	497c      	ldr	r1, [pc, #496]	; (800250c <HAL_GPIO_EXTI_Callback+0x25c>)
 800231c:	487c      	ldr	r0, [pc, #496]	; (8002510 <HAL_GPIO_EXTI_Callback+0x260>)
 800231e:	f7fe fd2b 	bl	8000d78 <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8002322:	7823      	ldrb	r3, [r4, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	f000 80c4 	beq.w	80024b2 <HAL_GPIO_EXTI_Callback+0x202>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 800232a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800232e:	4a79      	ldr	r2, [pc, #484]	; (8002514 <HAL_GPIO_EXTI_Callback+0x264>)
 8002330:	4979      	ldr	r1, [pc, #484]	; (8002518 <HAL_GPIO_EXTI_Callback+0x268>)
 8002332:	4876      	ldr	r0, [pc, #472]	; (800250c <HAL_GPIO_EXTI_Callback+0x25c>)
 8002334:	f7ff f84e 	bl	80013d4 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8002338:	2301      	movs	r3, #1
 800233a:	4976      	ldr	r1, [pc, #472]	; (8002514 <HAL_GPIO_EXTI_Callback+0x264>)
 800233c:	461a      	mov	r2, r3
 800233e:	4874      	ldr	r0, [pc, #464]	; (8002510 <HAL_GPIO_EXTI_Callback+0x260>)
 8002340:	f7fe fd1a 	bl	8000d78 <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 8002344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002348:	4974      	ldr	r1, [pc, #464]	; (800251c <HAL_GPIO_EXTI_Callback+0x26c>)
 800234a:	4875      	ldr	r0, [pc, #468]	; (8002520 <HAL_GPIO_EXTI_Callback+0x270>)
 800234c:	f000 ff28 	bl	80031a0 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8002350:	7823      	ldrb	r3, [r4, #0]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d831      	bhi.n	80023ba <HAL_GPIO_EXTI_Callback+0x10a>
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 80a6 	bne.w	80024a8 <HAL_GPIO_EXTI_Callback+0x1f8>
	{	
	case AM :
#ifdef RECEIVE_AM
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 800235c:	4971      	ldr	r1, [pc, #452]	; (8002524 <HAL_GPIO_EXTI_Callback+0x274>)
 800235e:	4870      	ldr	r0, [pc, #448]	; (8002520 <HAL_GPIO_EXTI_Callback+0x270>)
 8002360:	f001 f86e 	bl	8003440 <SDR_demodAM_AGC>
	}


#ifdef DCF77_DECODER

	if (WSPRBeaconMode == 1)
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_GPIO_EXTI_Callback+0x278>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d040      	beq.n	80023ee <HAL_GPIO_EXTI_Callback+0x13e>
#endif

#ifdef CW_TX_SIDETONE
	// CW tone while keying
	//TODO: make it sine and with attack/decay
	if (TXCarrierEnabled)
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_GPIO_EXTI_Callback+0x27c>)
 800236e:	7819      	ldrb	r1, [r3, #0]
 8002370:	2900      	cmp	r1, #0
 8002372:	d032      	beq.n	80023da <HAL_GPIO_EXTI_Callback+0x12a>
		for (i=0; i<BSIZE; i++)
		{
			if (i % 64 > 31)
				fAudio[i] = volume * SIDETONE_VOLUME; //Volume
			else
				fAudio[i] = -volume * SIDETONE_VOLUME;
 8002374:	496e      	ldr	r1, [pc, #440]	; (8002530 <HAL_GPIO_EXTI_Callback+0x280>)
 8002376:	2300      	movs	r3, #0
 8002378:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002534 <HAL_GPIO_EXTI_Callback+0x284>
 800237c:	edd1 7a00 	vldr	s15, [r1]
 8002380:	4a68      	ldr	r2, [pc, #416]	; (8002524 <HAL_GPIO_EXTI_Callback+0x274>)
 8002382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002386:	eeb1 7a67 	vneg.f32	s14, s15
			if (i % 64 > 31)
 800238a:	0699      	lsls	r1, r3, #26
		for (i=0; i<BSIZE; i++)
 800238c:	f103 0301 	add.w	r3, r3, #1
 8002390:	f102 0204 	add.w	r2, r2, #4
				fAudio[i] = volume * SIDETONE_VOLUME; //Volume
 8002394:	bf4c      	ite	mi
 8002396:	ed02 7a01 	vstrmi	s14, [r2, #-4]
				fAudio[i] = -volume * SIDETONE_VOLUME;
 800239a:	ed42 7a01 	vstrpl	s15, [r2, #-4]
		for (i=0; i<BSIZE; i++)
 800239e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a2:	d1f2      	bne.n	800238a <HAL_GPIO_EXTI_Callback+0xda>
#endif

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80023a4:	4b64      	ldr	r3, [pc, #400]	; (8002538 <HAL_GPIO_EXTI_Callback+0x288>)
 80023a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023aa:	485e      	ldr	r0, [pc, #376]	; (8002524 <HAL_GPIO_EXTI_Callback+0x274>)
 80023ac:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 80023ae:	ecbd 8b08 	vpop	{d8-d11}
 80023b2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80023b6:	f000 be8d 	b.w	80030d4 <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d1d2      	bne.n	8002364 <HAL_GPIO_EXTI_Callback+0xb4>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 80023be:	4959      	ldr	r1, [pc, #356]	; (8002524 <HAL_GPIO_EXTI_Callback+0x274>)
 80023c0:	4857      	ldr	r0, [pc, #348]	; (8002520 <HAL_GPIO_EXTI_Callback+0x270>)
 80023c2:	f001 f8cd 	bl	8003560 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 80023c6:	4b5d      	ldr	r3, [pc, #372]	; (800253c <HAL_GPIO_EXTI_Callback+0x28c>)
 80023c8:	78db      	ldrb	r3, [r3, #3]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ca      	bne.n	8002364 <HAL_GPIO_EXTI_Callback+0xb4>
			SDR_CWPeak(fAudio, BSIZE);
 80023ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d2:	4854      	ldr	r0, [pc, #336]	; (8002524 <HAL_GPIO_EXTI_Callback+0x274>)
 80023d4:	f000 ffa6 	bl	8003324 <SDR_CWPeak>
 80023d8:	e7c4      	b.n	8002364 <HAL_GPIO_EXTI_Callback+0xb4>
		if (TransmissionEnabled)
 80023da:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_GPIO_EXTI_Callback+0x290>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0e0      	beq.n	80023a4 <HAL_GPIO_EXTI_Callback+0xf4>
				fAudio[i] = 0.;
 80023e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023e6:	484f      	ldr	r0, [pc, #316]	; (8002524 <HAL_GPIO_EXTI_Callback+0x274>)
 80023e8:	f00f f893 	bl	8011512 <memset>
 80023ec:	e7da      	b.n	80023a4 <HAL_GPIO_EXTI_Callback+0xf4>
		BaseNoiseLevel = 9999.f;
 80023ee:	4c4d      	ldr	r4, [pc, #308]	; (8002524 <HAL_GPIO_EXTI_Callback+0x274>)
 80023f0:	4b54      	ldr	r3, [pc, #336]	; (8002544 <HAL_GPIO_EXTI_Callback+0x294>)
 80023f2:	4a55      	ldr	r2, [pc, #340]	; (8002548 <HAL_GPIO_EXTI_Callback+0x298>)
 80023f4:	f504 6a00 	add.w	sl, r4, #2048	; 0x800
 80023f8:	f8df b164 	ldr.w	fp, [pc, #356]	; 8002560 <HAL_GPIO_EXTI_Callback+0x2b0>
 80023fc:	4f53      	ldr	r7, [pc, #332]	; (800254c <HAL_GPIO_EXTI_Callback+0x29c>)
 80023fe:	4e54      	ldr	r6, [pc, #336]	; (8002550 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002400:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8002564 <HAL_GPIO_EXTI_Callback+0x2b4>
 8002404:	4d53      	ldr	r5, [pc, #332]	; (8002554 <HAL_GPIO_EXTI_Callback+0x2a4>)
				LED_RED_ON;
 8002406:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8002568 <HAL_GPIO_EXTI_Callback+0x2b8>
		BaseNoiseLevel = 9999.f;
 800240a:	601a      	str	r2, [r3, #0]
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 800240c:	ed9f bb2c 	vldr	d11, [pc, #176]	; 80024c0 <HAL_GPIO_EXTI_Callback+0x210>
 8002410:	ed9f ab2d 	vldr	d10, [pc, #180]	; 80024c8 <HAL_GPIO_EXTI_Callback+0x218>
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002414:	ed9f 9b2e 	vldr	d9, [pc, #184]	; 80024d0 <HAL_GPIO_EXTI_Callback+0x220>
 8002418:	ed9f 8b2f 	vldr	d8, [pc, #188]	; 80024d8 <HAL_GPIO_EXTI_Callback+0x228>
 800241c:	e008      	b.n	8002430 <HAL_GPIO_EXTI_Callback+0x180>
				DCF77In = 0;
 800241e:	f8a5 c000 	strh.w	ip, [r5]
				LED_RED_ON;
 8002422:	f007 fc3b 	bl	8009c9c <HAL_GPIO_WritePin>
			DoDCF77(DCF77In);
 8002426:	8828      	ldrh	r0, [r5, #0]
 8002428:	f7ff fbb2 	bl	8001b90 <DoDCF77>
		for (i = 0; i < BSIZE; i++)
 800242c:	45a2      	cmp	sl, r4
 800242e:	d09d      	beq.n	800236c <HAL_GPIO_EXTI_Callback+0xbc>
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002430:	ed97 6a00 	vldr	s12, [r7]
				DCF77In = 0;
 8002434:	f04f 0c00 	mov.w	ip, #0
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002438:	ed96 7a00 	vldr	s14, [r6]
				LED_RED_OFF;
 800243c:	4640      	mov	r0, r8
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 800243e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
			CWLevel = fabs(fAudio[i]);
 8002442:	ecf4 5a01 	vldmia	r4!, {s11}
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002446:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 800244a:	ed99 5a00 	vldr	s10, [r9]
			CWLevel = fabs(fAudio[i]);
 800244e:	eef0 5ae5 	vabs.f32	s11, s11
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002454:	ee26 6b0b 	vmul.f64	d6, d6, d11
				LED_RED_OFF;
 8002458:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800245c:	4662      	mov	r2, ip
			CWLevel = fabs(fAudio[i]);
 800245e:	edcb 5a00 	vstr	s11, [fp]
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002462:	ee27 7b09 	vmul.f64	d7, d7, d9
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002466:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800246a:	eea4 7b08 	vfma.f64	d7, d4, d8
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 800246e:	eea4 6b0a 	vfma.f64	d6, d4, d10
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002472:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			OldMediumLevelAverage = MediumLevelFiltered;
 8002476:	ed86 7a00 	vstr	s14, [r6]
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 800247a:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 800247e:	ee77 7a46 	vsub.f32	s15, s14, s12
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002482:	ed83 6a00 	vstr	s12, [r3]
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002486:	4b35      	ldr	r3, [pc, #212]	; (800255c <HAL_GPIO_EXTI_Callback+0x2ac>)
			OldCWLevelAverage = CWLevelFiltered;
 8002488:	ed87 6a00 	vstr	s12, [r7]
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 800248c:	eef4 7ac5 	vcmpe.f32	s15, s10
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002490:	ed83 7a00 	vstr	s14, [r3]
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	dcc1      	bgt.n	800241e <HAL_GPIO_EXTI_Callback+0x16e>
				DCF77In += 1; //TODO limit CW increase
 800249a:	882b      	ldrh	r3, [r5, #0]
				LED_RED_ON;
 800249c:	2201      	movs	r2, #1
 800249e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
				DCF77In += 1; //TODO limit CW increase
 80024a2:	4413      	add	r3, r2
 80024a4:	802b      	strh	r3, [r5, #0]
 80024a6:	e7bc      	b.n	8002422 <HAL_GPIO_EXTI_Callback+0x172>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 80024a8:	491e      	ldr	r1, [pc, #120]	; (8002524 <HAL_GPIO_EXTI_Callback+0x274>)
 80024aa:	481d      	ldr	r0, [pc, #116]	; (8002520 <HAL_GPIO_EXTI_Callback+0x270>)
 80024ac:	f001 f858 	bl	8003560 <SDR_demodSSB_CW_AGC>
 80024b0:	e758      	b.n	8002364 <HAL_GPIO_EXTI_Callback+0xb4>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80024b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024b6:	4815      	ldr	r0, [pc, #84]	; (800250c <HAL_GPIO_EXTI_Callback+0x25c>)
 80024b8:	f000 fe8c 	bl	80031d4 <SDR_mirror_LSB>
 80024bc:	e735      	b.n	800232a <HAL_GPIO_EXTI_Callback+0x7a>
 80024be:	bf00      	nop
 80024c0:	d916872b 	.word	0xd916872b
 80024c4:	3feff7ce 	.word	0x3feff7ce
 80024c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80024cc:	3f50624d 	.word	0x3f50624d
 80024d0:	074a771d 	.word	0x074a771d
 80024d4:	3fefffeb 	.word	0x3fefffeb
 80024d8:	88e368f1 	.word	0x88e368f1
 80024dc:	3ee4f8b5 	.word	0x3ee4f8b5
 80024e0:	2000e800 	.word	0x2000e800
 80024e4:	2000a800 	.word	0x2000a800
 80024e8:	24000ff8 	.word	0x24000ff8
 80024ec:	2000c800 	.word	0x2000c800
 80024f0:	20008800 	.word	0x20008800
 80024f4:	20008000 	.word	0x20008000
 80024f8:	2400627c 	.word	0x2400627c
 80024fc:	20007800 	.word	0x20007800
 8002500:	24006270 	.word	0x24006270
 8002504:	2400941c 	.word	0x2400941c
 8002508:	2400841c 	.word	0x2400841c
 800250c:	20003800 	.word	0x20003800
 8002510:	08017770 	.word	0x08017770
 8002514:	20001800 	.word	0x20001800
 8002518:	20005800 	.word	0x20005800
 800251c:	20002800 	.word	0x20002800
 8002520:	2400a978 	.word	0x2400a978
 8002524:	24007c1c 	.word	0x24007c1c
 8002528:	240073dc 	.word	0x240073dc
 800252c:	240062bc 	.word	0x240062bc
 8002530:	2400b9ac 	.word	0x2400b9ac
 8002534:	be4ccccd 	.word	0xbe4ccccd
 8002538:	240073d8 	.word	0x240073d8
 800253c:	24007c10 	.word	0x24007c10
 8002540:	240062c8 	.word	0x240062c8
 8002544:	24000fe4 	.word	0x24000fe4
 8002548:	461c3c00 	.word	0x461c3c00
 800254c:	24006254 	.word	0x24006254
 8002550:	24006258 	.word	0x24006258
 8002554:	24000ffa 	.word	0x24000ffa
 8002558:	24000fec 	.word	0x24000fec
 800255c:	2400624c 	.word	0x2400624c
 8002560:	24000fe8 	.word	0x24000fe8
 8002564:	24000ff0 	.word	0x24000ff0
 8002568:	58020400 	.word	0x58020400

0800256c <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 800256c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It needs a delay between fract div disable and parameter setting.
	 * Reference manual says otherwise.
	 * So we disable at the top of the ISR and set the parameter near the bottom.
	 */
	if (TransmittingWSPR)
 8002570:	4d8d      	ldr	r5, [pc, #564]	; (80027a8 <ADC_Stream0_Handler+0x23c>)
{
 8002572:	ed2d 8b10 	vpush	{d8-d15}
	if (TransmittingWSPR)
 8002576:	782b      	ldrb	r3, [r5, #0]
{
 8002578:	b095      	sub	sp, #84	; 0x54
	if (TransmittingWSPR)
 800257a:	b123      	cbz	r3, 8002586 <ADC_Stream0_Handler+0x1a>
	{
		__HAL_RCC_PLL2FRACN_DISABLE();
 800257c:	4a8b      	ldr	r2, [pc, #556]	; (80027ac <ADC_Stream0_Handler+0x240>)
 800257e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002580:	f023 0310 	bic.w	r3, r3, #16
 8002584:	62d3      	str	r3, [r2, #44]	; 0x2c

	// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
	else
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002586:	4f8a      	ldr	r7, [pc, #552]	; (80027b0 <ADC_Stream0_Handler+0x244>)
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8002588:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <ADC_Stream0_Handler+0x248>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800258a:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 800258e:	781b      	ldrb	r3, [r3, #0]
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002590:	2800      	cmp	r0, #0
 8002592:	bf08      	it	eq
 8002594:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 8002596:	2b03      	cmp	r3, #3
 8002598:	f000 842b 	beq.w	8002df2 <ADC_Stream0_Handler+0x886>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 800259c:	4b86      	ldr	r3, [pc, #536]	; (80027b8 <ADC_Stream0_Handler+0x24c>)
 800259e:	ed93 0a00 	vldr	s0, [r3]
 80025a2:	f000 fc39 	bl	8002e18 <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 80025a6:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 80025aa:	1eb8      	subs	r0, r7, #2
	sum = 0; k = BSIZE;
 80025ac:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80027bc <ADC_Stream0_Handler+0x250>
	{
		sum += pR[k-1];
 80025b0:	8814      	ldrh	r4, [r2, #0]
	while(k)
 80025b2:	3a08      	subs	r2, #8
		sum += pR[k-2];
 80025b4:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 80025b6:	b2a4      	uxth	r4, r4
		sum += pR[k-3];
 80025b8:	8896      	ldrh	r6, [r2, #4]
		sum += pR[k-2];
 80025ba:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 80025bc:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 80025be:	ee07 4a10 	vmov	s14, r4
		sum += pR[k-3];
 80025c2:	b2b6      	uxth	r6, r6
		sum += pR[k-2];
 80025c4:	ee07 3a90 	vmov	s15, r3
		sum += pR[k-4];
 80025c8:	b289      	uxth	r1, r1
		sum += pR[k-1];
 80025ca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
		sum += pR[k-3];
 80025ce:	ee07 6a10 	vmov	s14, r6
		sum += pR[k-2];
 80025d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 80025d6:	4290      	cmp	r0, r2
		sum += pR[k-3];
 80025d8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		sum += pR[k-4];
 80025dc:	ee07 1a10 	vmov	s14, r1
 80025e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025e4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80025e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025f0:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80025f4:	d1dc      	bne.n	80025b0 <ADC_Stream0_Handler+0x44>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80025f6:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 80025fa:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80025fc:	eddf 7a70 	vldr	s15, [pc, #448]	; 80027c0 <ADC_Stream0_Handler+0x254>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8002600:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 8002602:	b29b      	uxth	r3, r3
 8002604:	4c6f      	ldr	r4, [pc, #444]	; (80027c4 <ADC_Stream0_Handler+0x258>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8002606:	ee20 0a27 	vmul.f32	s0, s0, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800260a:	496f      	ldr	r1, [pc, #444]	; (80027c8 <ADC_Stream0_Handler+0x25c>)
	TestSampledValue=pR[BSIZE/2];
 800260c:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8002610:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <ADC_Stream0_Handler+0x260>)
 8002612:	8022      	strh	r2, [r4, #0]
	TestSampledValue=pR[BSIZE/2];
 8002614:	eef8 7a67 	vcvt.f32.u32	s15, s15
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8002618:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 800261c:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <ADC_Stream0_Handler+0x264>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <ADC_Stream0_Handler+0x268>)
	TestSampledValue=pR[BSIZE/2];
 8002620:	edc3 7a00 	vstr	s15, [r3]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8002624:	f000 fce4 	bl	8002ff0 <SDR_downconvert_f32>


	ptDataR = ADC_Rdata;  ptDataI = ADC_Idata;


	if (TransmittingWSPR)
 8002628:	782b      	ldrb	r3, [r5, #0]
 800262a:	b303      	cbz	r3, 800266e <ADC_Stream0_Handler+0x102>
	{
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 800262c:	496a      	ldr	r1, [pc, #424]	; (80027d8 <ADC_Stream0_Handler+0x26c>)
 800262e:	4d6b      	ldr	r5, [pc, #428]	; (80027dc <ADC_Stream0_Handler+0x270>)
 8002630:	7809      	ldrb	r1, [r1, #0]
 8002632:	4b6b      	ldr	r3, [pc, #428]	; (80027e0 <ADC_Stream0_Handler+0x274>)
 8002634:	f9b5 2000 	ldrsh.w	r2, [r5]
 8002638:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800263c:	1c53      	adds	r3, r2, #1
 800263e:	4282      	cmp	r2, r0
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8002640:	485a      	ldr	r0, [pc, #360]	; (80027ac <ADC_Stream0_Handler+0x240>)
 8002642:	4a68      	ldr	r2, [pc, #416]	; (80027e4 <ADC_Stream0_Handler+0x278>)
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8002644:	b21b      	sxth	r3, r3
		}
		else
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002646:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8002648:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 800264c:	4a66      	ldr	r2, [pc, #408]	; (80027e8 <ADC_Stream0_Handler+0x27c>)
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 800264e:	bfb8      	it	lt
 8002650:	3101      	addlt	r1, #1
		}
		if (IntCounter == 8)
 8002652:	2b08      	cmp	r3, #8
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002654:	ea02 0206 	and.w	r2, r2, r6
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8002658:	802b      	strh	r3, [r5, #0]
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 800265a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800265e:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (IntCounter == 8)
 8002660:	f000 83d3 	beq.w	8002e0a <ADC_Stream0_Handler+0x89e>
		{
			IntCounter = 0;
		}
		__HAL_RCC_PLL2FRACN_ENABLE();
 8002664:	4a51      	ldr	r2, [pc, #324]	; (80027ac <ADC_Stream0_Handler+0x240>)
 8002666:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002668:	f043 0310 	orr.w	r3, r3, #16
 800266c:	62d3      	str	r3, [r2, #44]	; 0x2c
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 800266e:	4a5f      	ldr	r2, [pc, #380]	; (80027ec <ADC_Stream0_Handler+0x280>)
 8002670:	23ff      	movs	r3, #255	; 0xff
 8002672:	495f      	ldr	r1, [pc, #380]	; (80027f0 <ADC_Stream0_Handler+0x284>)
 8002674:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8002678:	edd2 7a00 	vldr	s15, [r2]
 800267c:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8002680:	4a5c      	ldr	r2, [pc, #368]	; (80027f4 <ADC_Stream0_Handler+0x288>)
 8002682:	ed91 3a00 	vldr	s6, [r1]
 8002686:	edd2 2a00 	vldr	s5, [r2]
 800268a:	4a5b      	ldr	r2, [pc, #364]	; (80027f8 <ADC_Stream0_Handler+0x28c>)
 800268c:	495b      	ldr	r1, [pc, #364]	; (80027fc <ADC_Stream0_Handler+0x290>)
 800268e:	ed92 1a00 	vldr	s2, [r2]
 8002692:	4a5b      	ldr	r2, [pc, #364]	; (8002800 <ADC_Stream0_Handler+0x294>)
 8002694:	edd1 9a00 	vldr	s19, [r1]
 8002698:	ed92 7a00 	vldr	s14, [r2]
 800269c:	4a59      	ldr	r2, [pc, #356]	; (8002804 <ADC_Stream0_Handler+0x298>)
 800269e:	495a      	ldr	r1, [pc, #360]	; (8002808 <ADC_Stream0_Handler+0x29c>)
 80026a0:	eeb0 6a47 	vmov.f32	s12, s14
 80026a4:	ed92 2a00 	vldr	s4, [r2]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <ADC_Stream0_Handler+0x2a0>)
 80026aa:	ed91 da00 	vldr	s26, [r1]
 80026ae:	ed92 8a00 	vldr	s16, [r2]
 80026b2:	4957      	ldr	r1, [pc, #348]	; (8002810 <ADC_Stream0_Handler+0x2a4>)
 80026b4:	4a57      	ldr	r2, [pc, #348]	; (8002814 <ADC_Stream0_Handler+0x2a8>)
 80026b6:	edd1 6a00 	vldr	s13, [r1]
 80026ba:	edd2 5a00 	vldr	s11, [r2]
 80026be:	4956      	ldr	r1, [pc, #344]	; (8002818 <ADC_Stream0_Handler+0x2ac>)
 80026c0:	4a56      	ldr	r2, [pc, #344]	; (800281c <ADC_Stream0_Handler+0x2b0>)
 80026c2:	ed91 ca00 	vldr	s24, [r1]
 80026c6:	ed92 fa00 	vldr	s30, [r2]
 80026ca:	4955      	ldr	r1, [pc, #340]	; (8002820 <ADC_Stream0_Handler+0x2b4>)
 80026cc:	4a55      	ldr	r2, [pc, #340]	; (8002824 <ADC_Stream0_Handler+0x2b8>)
 80026ce:	edd1 ea00 	vldr	s29, [r1]
 80026d2:	edd2 8a00 	vldr	s17, [r2]
 80026d6:	4954      	ldr	r1, [pc, #336]	; (8002828 <ADC_Stream0_Handler+0x2bc>)
 80026d8:	4a54      	ldr	r2, [pc, #336]	; (800282c <ADC_Stream0_Handler+0x2c0>)
 80026da:	edcd 6a02 	vstr	s13, [sp, #8]
 80026de:	ed92 5a00 	vldr	s10, [r2]
 80026e2:	edd1 6a00 	vldr	s13, [r1]
 80026e6:	4a52      	ldr	r2, [pc, #328]	; (8002830 <ADC_Stream0_Handler+0x2c4>)
 80026e8:	4952      	ldr	r1, [pc, #328]	; (8002834 <ADC_Stream0_Handler+0x2c8>)
 80026ea:	edd2 fa00 	vldr	s31, [r2]
 80026ee:	edd1 ca00 	vldr	s25, [r1]
 80026f2:	4a51      	ldr	r2, [pc, #324]	; (8002838 <ADC_Stream0_Handler+0x2cc>)
 80026f4:	4951      	ldr	r1, [pc, #324]	; (800283c <ADC_Stream0_Handler+0x2d0>)
 80026f6:	ed92 ba00 	vldr	s22, [r2]
 80026fa:	edcd 6a01 	vstr	s13, [sp, #4]
 80026fe:	4a50      	ldr	r2, [pc, #320]	; (8002840 <ADC_Stream0_Handler+0x2d4>)
 8002700:	edd1 6a00 	vldr	s13, [r1]
 8002704:	494f      	ldr	r1, [pc, #316]	; (8002844 <ADC_Stream0_Handler+0x2d8>)
 8002706:	edd2 3a00 	vldr	s7, [r2]
 800270a:	edcd 6a03 	vstr	s13, [sp, #12]
 800270e:	4a4e      	ldr	r2, [pc, #312]	; (8002848 <ADC_Stream0_Handler+0x2dc>)
 8002710:	edd1 6a00 	vldr	s13, [r1]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <ADC_Stream0_Handler+0x2e0>)
 8002716:	ed92 9a00 	vldr	s18, [r2]
 800271a:	edcd 6a08 	vstr	s13, [sp, #32]
 800271e:	4a4c      	ldr	r2, [pc, #304]	; (8002850 <ADC_Stream0_Handler+0x2e4>)
 8002720:	edd1 6a00 	vldr	s13, [r1]
 8002724:	f8df b150 	ldr.w	fp, [pc, #336]	; 8002878 <ADC_Stream0_Handler+0x30c>
 8002728:	494a      	ldr	r1, [pc, #296]	; (8002854 <ADC_Stream0_Handler+0x2e8>)
 800272a:	edd2 ba00 	vldr	s23, [r2]
 800272e:	eddb 1a00 	vldr	s3, [fp]
 8002732:	8023      	strh	r3, [r4, #0]
 8002734:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 8002738:	edd1 6a00 	vldr	s13, [r1]
 800273c:	4946      	ldr	r1, [pc, #280]	; (8002858 <ADC_Stream0_Handler+0x2ec>)
 800273e:	edcd 6a00 	vstr	s13, [sp]
 8002742:	edd1 6a00 	vldr	s13, [r1]
 8002746:	4945      	ldr	r1, [pc, #276]	; (800285c <ADC_Stream0_Handler+0x2f0>)
 8002748:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 800274c:	edd1 6a00 	vldr	s13, [r1]
 8002750:	4943      	ldr	r1, [pc, #268]	; (8002860 <ADC_Stream0_Handler+0x2f4>)
 8002752:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8002756:	edd1 6a00 	vldr	s13, [r1]
 800275a:	4942      	ldr	r1, [pc, #264]	; (8002864 <ADC_Stream0_Handler+0x2f8>)
 800275c:	4e42      	ldr	r6, [pc, #264]	; (8002868 <ADC_Stream0_Handler+0x2fc>)
 800275e:	edcd 6a06 	vstr	s13, [sp, #24]
 8002762:	edd1 6a00 	vldr	s13, [r1]
 8002766:	4f41      	ldr	r7, [pc, #260]	; (800286c <ADC_Stream0_Handler+0x300>)
 8002768:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 800276c:	edd6 6a00 	vldr	s13, [r6]
 8002770:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800287c <ADC_Stream0_Handler+0x310>
 8002774:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8002778:	edd7 6a00 	vldr	s13, [r7]
 800277c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8002880 <ADC_Stream0_Handler+0x314>
 8002780:	f8df a100 	ldr.w	sl, [pc, #256]	; 8002884 <ADC_Stream0_Handler+0x318>
 8002784:	edcd 6a07 	vstr	s13, [sp, #28]
 8002788:	edd8 6a00 	vldr	s13, [r8]
 800278c:	4a38      	ldr	r2, [pc, #224]	; (8002870 <ADC_Stream0_Handler+0x304>)
 800278e:	f9ba 0000 	ldrsh.w	r0, [sl]
 8002792:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8002796:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 800279a:	edd9 6a00 	vldr	s13, [r9]
 800279e:	4686      	mov	lr, r0
 80027a0:	4934      	ldr	r1, [pc, #208]	; (8002874 <ADC_Stream0_Handler+0x308>)
 80027a2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80027a6:	e17a      	b.n	8002a9e <ADC_Stream0_Handler+0x532>
 80027a8:	240062c9 	.word	0x240062c9
 80027ac:	58024400 	.word	0x58024400
 80027b0:	24007800 	.word	0x24007800
 80027b4:	24000ff8 	.word	0x24000ff8
 80027b8:	24006238 	.word	0x24006238
 80027bc:	00000000 	.word	0x00000000
 80027c0:	3b000000 	.word	0x3b000000
 80027c4:	240006e0 	.word	0x240006e0
 80027c8:	20000800 	.word	0x20000800
 80027cc:	2400a7f8 	.word	0x2400a7f8
 80027d0:	240062c4 	.word	0x240062c4
 80027d4:	20000000 	.word	0x20000000
 80027d8:	240073df 	.word	0x240073df
 80027dc:	2400064c 	.word	0x2400064c
 80027e0:	24005218 	.word	0x24005218
 80027e4:	2400520c 	.word	0x2400520c
 80027e8:	ffff0007 	.word	0xffff0007
 80027ec:	2400068c 	.word	0x2400068c
 80027f0:	240006a4 	.word	0x240006a4
 80027f4:	24000654 	.word	0x24000654
 80027f8:	24000680 	.word	0x24000680
 80027fc:	24000660 	.word	0x24000660
 8002800:	24000684 	.word	0x24000684
 8002804:	24000650 	.word	0x24000650
 8002808:	240006b8 	.word	0x240006b8
 800280c:	24000698 	.word	0x24000698
 8002810:	240006bc 	.word	0x240006bc
 8002814:	2400069c 	.word	0x2400069c
 8002818:	2400066c 	.word	0x2400066c
 800281c:	2400065c 	.word	0x2400065c
 8002820:	240006b0 	.word	0x240006b0
 8002824:	24000690 	.word	0x24000690
 8002828:	240006b4 	.word	0x240006b4
 800282c:	24000694 	.word	0x24000694
 8002830:	24000658 	.word	0x24000658
 8002834:	24000668 	.word	0x24000668
 8002838:	240006a8 	.word	0x240006a8
 800283c:	240006c8 	.word	0x240006c8
 8002840:	240006ac 	.word	0x240006ac
 8002844:	240006cc 	.word	0x240006cc
 8002848:	24000664 	.word	0x24000664
 800284c:	24000674 	.word	0x24000674
 8002850:	240006a0 	.word	0x240006a0
 8002854:	240006c0 	.word	0x240006c0
 8002858:	240006c4 	.word	0x240006c4
 800285c:	24000670 	.word	0x24000670
 8002860:	240006d8 	.word	0x240006d8
 8002864:	240006dc 	.word	0x240006dc
 8002868:	2400067c 	.word	0x2400067c
 800286c:	240006d0 	.word	0x240006d0
 8002870:	20000808 	.word	0x20000808
 8002874:	20000008 	.word	0x20000008
 8002878:	24000688 	.word	0x24000688
 800287c:	240006d4 	.word	0x240006d4
 8002880:	24000678 	.word	0x24000678
 8002884:	2400064e 	.word	0x2400064e
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8002888:	eef0 6a65 	vmov.f32	s13, s11

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 800288c:	0798      	lsls	r0, r3, #30
 800288e:	eeb0 6a45 	vmov.f32	s12, s10
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8002892:	ee3f fa2a 	vadd.f32	s30, s30, s21
 8002896:	eee8 6a04 	vfma.f32	s13, s16, s8
 800289a:	eea8 6a84 	vfma.f32	s12, s17, s8
 800289e:	ee7f fa8a 	vadd.f32	s31, s31, s20
 80028a2:	eeef 6a24 	vfma.f32	s13, s30, s9
 80028a6:	eeaf 6aa4 	vfma.f32	s12, s31, s9
 80028aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028ae:	ee36 6a07 	vadd.f32	s12, s12, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80028b2:	f100 811c 	bmi.w	8002aee <ADC_Stream0_Handler+0x582>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80028b6:	eef0 5a63 	vmov.f32	s11, s7

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80028ba:	075d      	lsls	r5, r3, #29
 80028bc:	eeb0 5a43 	vmov.f32	s10, s6
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80028c0:	ee79 3a0e 	vadd.f32	s7, s18, s28
 80028c4:	eeeb 5a04 	vfma.f32	s11, s22, s8
 80028c8:	eeab 5a84 	vfma.f32	s10, s23, s8
 80028cc:	ee79 9aad 	vadd.f32	s19, s19, s27
 80028d0:	eee3 5aa4 	vfma.f32	s11, s7, s9
 80028d4:	eea9 5aa4 	vfma.f32	s10, s19, s9
 80028d8:	ee35 9aa6 	vadd.f32	s18, s11, s13
 80028dc:	ee75 9a06 	vadd.f32	s19, s10, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80028e0:	f100 8116 	bmi.w	8002b10 <ADC_Stream0_Handler+0x5a4>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80028e4:	eddd 5a02 	vldr	s11, [sp, #8]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80028e8:	0718      	lsls	r0, r3, #28
 80028ea:	ed9d 5a01 	vldr	s10, [sp, #4]
 80028ee:	eeed 5a04 	vfma.f32	s11, s26, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80028f2:	eddd 3a05 	vldr	s7, [sp, #20]
 80028f6:	eeae 5a84 	vfma.f32	s10, s29, s8
 80028fa:	ed9d 3a04 	vldr	s6, [sp, #16]
 80028fe:	ee7c 3a23 	vadd.f32	s7, s24, s7
 8002902:	ee7c ca83 	vadd.f32	s25, s25, s6
 8002906:	eee3 5aa4 	vfma.f32	s11, s7, s9
 800290a:	eeac 5aa4 	vfma.f32	s10, s25, s9
 800290e:	ee39 ca25 	vadd.f32	s24, s18, s11
 8002912:	ee75 ca29 	vadd.f32	s25, s10, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8002916:	f100 81a5 	bmi.w	8002c64 <ADC_Stream0_Handler+0x6f8>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800291a:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800291e:	f013 0010 	ands.w	r0, r3, #16
 8002922:	ed9d 3a03 	vldr	s6, [sp, #12]
 8002926:	eddd 5a00 	vldr	s11, [sp]
 800292a:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 800292e:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8002932:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
 8002936:	eee5 fa84 	vfma.f32	s31, s11, s8
 800293a:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800293e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8002942:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 8002946:	eea5 faa4 	vfma.f32	s30, s11, s9
 800294a:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800294e:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8002950:	ee75 5a25 	vadd.f32	s11, s10, s11
 8002954:	eee5 faa4 	vfma.f32	s31, s11, s9
 8002958:	ee3c fa0f 	vadd.f32	s30, s24, s30
 800295c:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 8002960:	ee7c faaf 	vadd.f32	s31, s25, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8002964:	f040 819b 	bne.w	8002c9e <ADC_Stream0_Handler+0x732>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002968:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800296c:	ea4f 008e 	mov.w	r0, lr, lsl #2
 8002970:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 8002974:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 8002978:	eee3 5a84 	vfma.f32	s11, s7, s8
 800297c:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002980:	ed9d fa0d 	vldr	s30, [sp, #52]	; 0x34
 8002984:	eea3 5a84 	vfma.f32	s10, s7, s8
 8002988:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800298c:	4ddb      	ldr	r5, [pc, #876]	; (8002cfc <ADC_Stream0_Handler+0x790>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800298e:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8002992:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002996:	4428      	add	r0, r5
 8002998:	4dd9      	ldr	r5, [pc, #868]	; (8002d00 <ADC_Stream0_Handler+0x794>)
 800299a:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800299e:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 80029a2:	ee73 3a8f 	vadd.f32	s7, s7, s30
 80029a6:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 80029aa:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80029ae:	eddf 3ad5 	vldr	s7, [pc, #852]	; 8002d04 <ADC_Stream0_Handler+0x798>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80029b2:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80029b6:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80029ba:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80029be:	ee25 5a23 	vmul.f32	s10, s10, s7
 80029c2:	ed80 5a00 	vstr	s10, [r0]
 80029c6:	f10e 0001 	add.w	r0, lr, #1
 80029ca:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 80029ce:	edce 5a00 	vstr	s11, [lr]
 80029d2:	fa0f fe80 	sxth.w	lr, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80029d6:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 80029da:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80029de:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		if(idx < BSIZE*4)
 80029e2:	f2c0 81cf 	blt.w	8002d84 <ADC_Stream0_Handler+0x818>
#endif


			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 80029e6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029ea:	eddd 5a00 	vldr	s11, [sp]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80029ee:	eddd 3a06 	vldr	s7, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029f2:	eeb0 5a68 	vmov.f32	s10, s17
			EXTI->SWIER1 |= GPIO_PIN_14;
 80029f6:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80029f8:	eef0 8a47 	vmov.f32	s17, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80029fc:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002a00:	eef0 5a48 	vmov.f32	s11, s16
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002a04:	edcd ea01 	vstr	s29, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002a08:	eeb0 8a67 	vmov.f32	s16, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002a0c:	ed8d da02 	vstr	s26, [sp, #8]
 8002a10:	eef0 ea69 	vmov.f32	s29, s19
 8002a14:	eeb0 da49 	vmov.f32	s26, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002a18:	edcd 3a0c 	vstr	s7, [sp, #48]	; 0x30
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002a1c:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002a20:	eef0 3a4b 	vmov.f32	s7, s22
 8002a24:	eeb0 3a6b 	vmov.f32	s6, s23
			EXTI->SWIER1 |= GPIO_PIN_14;
 8002a28:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002a2c:	eef0 ba46 	vmov.f32	s23, s12
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002a30:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002a34:	eeb0 ba66 	vmov.f32	s22, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8002a38:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
 8002a3c:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		idx = 0;
 8002a40:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002a44:	edcd fa07 	vstr	s31, [sp, #28]
 8002a48:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002a4c:	edcd ca00 	vstr	s25, [sp]
 8002a50:	ed8d ca03 	vstr	s24, [sp, #12]
			EXTI->SWIER1 |= GPIO_PIN_14;
 8002a54:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002a56:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8002a5a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002a5e:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8002a62:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8002a66:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002a6a:	eef0 9a6d 	vmov.f32	s19, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 8002a6e:	eddd ca04 	vldr	s25, [sp, #16]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002a72:	eeb0 9a4e 	vmov.f32	s18, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 8002a76:	ed9d ca05 	vldr	s24, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 8002a7a:	eef0 fa4a 	vmov.f32	s31, s20
 8002a7e:	eeb0 fa6a 	vmov.f32	s30, s21
	while(k--)
 8002a82:	3208      	adds	r2, #8
 8002a84:	3b01      	subs	r3, #1
 8002a86:	eef0 7a61 	vmov.f32	s15, s3
 8002a8a:	3108      	adds	r1, #8
 8002a8c:	4594      	cmp	ip, r2
 8002a8e:	eeb0 6a41 	vmov.f32	s12, s2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	d059      	beq.n	8002b4a <ADC_Stream0_Handler+0x5de>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8002a96:	eeb0 1a40 	vmov.f32	s2, s0
 8002a9a:	eef0 1a60 	vmov.f32	s3, s1
 8002a9e:	eeb0 7a62 	vmov.f32	s14, s5
 8002aa2:	ed52 0a01 	vldr	s1, [r2, #-4]
 8002aa6:	ed52 2a02 	vldr	s5, [r2, #-8]
 8002aaa:	eef0 6a42 	vmov.f32	s13, s4
 8002aae:	ed11 0a01 	vldr	s0, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8002ab2:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8002ab4:	ee32 2a87 	vadd.f32	s4, s5, s14
 8002ab8:	eeb0 7a60 	vmov.f32	s14, s1
 8002abc:	eea1 7a84 	vfma.f32	s14, s3, s8
 8002ac0:	eea2 7a24 	vfma.f32	s14, s4, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8002ac4:	ed11 2a02 	vldr	s4, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8002ac8:	ee76 6a82 	vadd.f32	s13, s13, s4
 8002acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ad4:	eea1 7a04 	vfma.f32	s14, s2, s8
 8002ad8:	eea6 7aa4 	vfma.f32	s14, s13, s9
 8002adc:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8002ae0:	f57f aed2 	bpl.w	8002888 <ADC_Stream0_Handler+0x31c>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 8002ae4:	eeb0 aa47 	vmov.f32	s20, s14
 8002ae8:	eef0 aa67 	vmov.f32	s21, s15
 8002aec:	e7c9      	b.n	8002a82 <ADC_Stream0_Handler+0x516>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002aee:	eeb0 5a68 	vmov.f32	s10, s17
 8002af2:	eef0 5a48 	vmov.f32	s11, s16
 8002af6:	eef0 8a47 	vmov.f32	s17, s14
 8002afa:	eeb0 8a67 	vmov.f32	s16, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8002afe:	eef0 da46 	vmov.f32	s27, s12
 8002b02:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8002b06:	eef0 fa4a 	vmov.f32	s31, s20
 8002b0a:	eeb0 fa6a 	vmov.f32	s30, s21
 8002b0e:	e7b8      	b.n	8002a82 <ADC_Stream0_Handler+0x516>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002b10:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8002b14:	edcd 9a04 	vstr	s19, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002b18:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8002b1c:	ed8d 9a05 	vstr	s18, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002b20:	eeb0 5a68 	vmov.f32	s10, s17
 8002b24:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002b28:	eef0 ba46 	vmov.f32	s23, s12
 8002b2c:	eeb0 ba66 	vmov.f32	s22, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002b30:	eef0 8a47 	vmov.f32	s17, s14
 8002b34:	eeb0 8a67 	vmov.f32	s16, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002b38:	eef0 9a6d 	vmov.f32	s19, s27
 8002b3c:	eeb0 9a4e 	vmov.f32	s18, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 8002b40:	eef0 fa4a 	vmov.f32	s31, s20
 8002b44:	eeb0 fa6a 	vmov.f32	s30, s21
 8002b48:	e79b      	b.n	8002a82 <ADC_Stream0_Handler+0x516>
 8002b4a:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8002b4e:	4b6e      	ldr	r3, [pc, #440]	; (8002d08 <ADC_Stream0_Handler+0x79c>)
 8002b50:	edc9 7a00 	vstr	s15, [r9]
 8002b54:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8002b58:	f8aa e000 	strh.w	lr, [sl]
 8002b5c:	edc8 7a00 	vstr	s15, [r8]
 8002b60:	eddd 7a07 	vldr	s15, [sp, #28]
 8002b64:	edc7 7a00 	vstr	s15, [r7]
 8002b68:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8002b6c:	edc6 7a00 	vstr	s15, [r6]
 8002b70:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8002b74:	edc3 7a00 	vstr	s15, [r3]
 8002b78:	eddd 7a06 	vldr	s15, [sp, #24]
 8002b7c:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <ADC_Stream0_Handler+0x7a0>)
 8002b7e:	edc3 7a00 	vstr	s15, [r3]
 8002b82:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8002b86:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <ADC_Stream0_Handler+0x7a4>)
 8002b88:	edc3 7a00 	vstr	s15, [r3]
 8002b8c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8002b90:	4b60      	ldr	r3, [pc, #384]	; (8002d14 <ADC_Stream0_Handler+0x7a8>)
 8002b92:	edc3 7a00 	vstr	s15, [r3]
 8002b96:	eddd 7a00 	vldr	s15, [sp]
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	; (8002d18 <ADC_Stream0_Handler+0x7ac>)
 8002b9c:	edc3 7a00 	vstr	s15, [r3]
 8002ba0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8002ba4:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <ADC_Stream0_Handler+0x7b0>)
 8002ba6:	edc3 7a00 	vstr	s15, [r3]
 8002baa:	eddd 7a08 	vldr	s15, [sp, #32]
 8002bae:	4b5c      	ldr	r3, [pc, #368]	; (8002d20 <ADC_Stream0_Handler+0x7b4>)
 8002bb0:	edc3 7a00 	vstr	s15, [r3]
 8002bb4:	eddd 7a03 	vldr	s15, [sp, #12]
 8002bb8:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <ADC_Stream0_Handler+0x7b8>)
 8002bba:	edc3 7a00 	vstr	s15, [r3]
 8002bbe:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <ADC_Stream0_Handler+0x7bc>)
 8002bc0:	eddd 7a01 	vldr	s15, [sp, #4]
 8002bc4:	edc3 ca00 	vstr	s25, [r3]
 8002bc8:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <ADC_Stream0_Handler+0x7c0>)
 8002bca:	edc3 7a00 	vstr	s15, [r3]
 8002bce:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <ADC_Stream0_Handler+0x7c4>)
 8002bd0:	eddd 7a02 	vldr	s15, [sp, #8]
 8002bd4:	edc3 ea00 	vstr	s29, [r3]
 8002bd8:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <ADC_Stream0_Handler+0x7c8>)
 8002bda:	ed83 ca00 	vstr	s24, [r3]
 8002bde:	4b56      	ldr	r3, [pc, #344]	; (8002d38 <ADC_Stream0_Handler+0x7cc>)
 8002be0:	edc3 7a00 	vstr	s15, [r3]
 8002be4:	4b55      	ldr	r3, [pc, #340]	; (8002d3c <ADC_Stream0_Handler+0x7d0>)
 8002be6:	ed83 da00 	vstr	s26, [r3]
 8002bea:	4b55      	ldr	r3, [pc, #340]	; (8002d40 <ADC_Stream0_Handler+0x7d4>)
 8002bec:	edcb 0a00 	vstr	s1, [fp]
 8002bf0:	edc3 9a00 	vstr	s19, [r3]
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <ADC_Stream0_Handler+0x7d8>)
 8002bf6:	ed83 3a00 	vstr	s6, [r3]
 8002bfa:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <ADC_Stream0_Handler+0x7dc>)
 8002bfc:	edc3 ba00 	vstr	s23, [r3]
 8002c00:	4b52      	ldr	r3, [pc, #328]	; (8002d4c <ADC_Stream0_Handler+0x7e0>)
 8002c02:	ed83 9a00 	vstr	s18, [r3]
 8002c06:	4b52      	ldr	r3, [pc, #328]	; (8002d50 <ADC_Stream0_Handler+0x7e4>)
 8002c08:	edc3 3a00 	vstr	s7, [r3]
 8002c0c:	4b51      	ldr	r3, [pc, #324]	; (8002d54 <ADC_Stream0_Handler+0x7e8>)
 8002c0e:	ed83 ba00 	vstr	s22, [r3]
 8002c12:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <ADC_Stream0_Handler+0x7ec>)
 8002c14:	edc3 fa00 	vstr	s31, [r3]
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <ADC_Stream0_Handler+0x7f0>)
 8002c1a:	ed83 5a00 	vstr	s10, [r3]
 8002c1e:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <ADC_Stream0_Handler+0x7f4>)
 8002c20:	edc3 8a00 	vstr	s17, [r3]
 8002c24:	4b4f      	ldr	r3, [pc, #316]	; (8002d64 <ADC_Stream0_Handler+0x7f8>)
 8002c26:	ed83 fa00 	vstr	s30, [r3]
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <ADC_Stream0_Handler+0x7fc>)
 8002c2c:	edc3 5a00 	vstr	s11, [r3]
 8002c30:	4b4e      	ldr	r3, [pc, #312]	; (8002d6c <ADC_Stream0_Handler+0x800>)
 8002c32:	ed83 8a00 	vstr	s16, [r3]
 8002c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c3a:	8023      	strh	r3, [r4, #0]
 8002c3c:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <ADC_Stream0_Handler+0x804>)
 8002c3e:	ed83 2a00 	vstr	s4, [r3]
 8002c42:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <ADC_Stream0_Handler+0x808>)
 8002c44:	ed83 1a00 	vstr	s2, [r3]
 8002c48:	4b4b      	ldr	r3, [pc, #300]	; (8002d78 <ADC_Stream0_Handler+0x80c>)
 8002c4a:	ed83 0a00 	vstr	s0, [r3]
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <ADC_Stream0_Handler+0x810>)
 8002c50:	edc3 2a00 	vstr	s5, [r3]
 8002c54:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <ADC_Stream0_Handler+0x814>)
 8002c56:	edc3 1a00 	vstr	s3, [r3]
		}

		// LED_YELLOW_OFF;

	}
 8002c5a:	b015      	add	sp, #84	; 0x54
 8002c5c:	ecbd 8b10 	vpop	{d8-d15}
 8002c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002c64:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002c68:	edcd ea01 	vstr	s29, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002c6c:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002c70:	ed8d da02 	vstr	s26, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002c74:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8002c78:	edcd ca10 	vstr	s25, [sp, #64]	; 0x40
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002c7c:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8002c80:	ed8d ca11 	vstr	s24, [sp, #68]	; 0x44
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002c84:	eef0 ea69 	vmov.f32	s29, s19
 8002c88:	eeb0 da49 	vmov.f32	s26, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002c8c:	eef0 ba46 	vmov.f32	s23, s12
 8002c90:	eeb0 ba66 	vmov.f32	s22, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002c94:	eef0 8a47 	vmov.f32	s17, s14
 8002c98:	eeb0 8a67 	vmov.f32	s16, s15
 8002c9c:	e6e5      	b.n	8002a6a <ADC_Stream0_Handler+0x4fe>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002c9e:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002ca2:	eeb0 3a6b 	vmov.f32	s6, s23
 8002ca6:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002caa:	edcd ea01 	vstr	s29, [sp, #4]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002cae:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002cb2:	eeb0 5a68 	vmov.f32	s10, s17
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002cb6:	eddd 5a03 	vldr	s11, [sp, #12]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002cba:	eef0 ea69 	vmov.f32	s29, s19
 8002cbe:	ed8d da02 	vstr	s26, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002cc2:	eef0 ba46 	vmov.f32	s23, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002cc6:	eeb0 da49 	vmov.f32	s26, s18
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002cca:	edcd 5a08 	vstr	s11, [sp, #32]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002cce:	eeb0 ba66 	vmov.f32	s22, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002cd2:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002cd6:	eef0 8a47 	vmov.f32	s17, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002cda:	ed8d ca03 	vstr	s24, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002cde:	eef0 5a48 	vmov.f32	s11, s16
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8002ce2:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002ce6:	eeb0 8a67 	vmov.f32	s16, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8002cea:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8002cee:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002cf2:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8002cf6:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8002cfa:	e6b2      	b.n	8002a62 <ADC_Stream0_Handler+0x4f6>
 8002cfc:	2000c800 	.word	0x2000c800
 8002d00:	2000e800 	.word	0x2000e800
 8002d04:	34000000 	.word	0x34000000
 8002d08:	240006dc 	.word	0x240006dc
 8002d0c:	240006d8 	.word	0x240006d8
 8002d10:	24000670 	.word	0x24000670
 8002d14:	240006c4 	.word	0x240006c4
 8002d18:	240006c0 	.word	0x240006c0
 8002d1c:	24000674 	.word	0x24000674
 8002d20:	240006cc 	.word	0x240006cc
 8002d24:	240006c8 	.word	0x240006c8
 8002d28:	24000668 	.word	0x24000668
 8002d2c:	240006b4 	.word	0x240006b4
 8002d30:	240006b0 	.word	0x240006b0
 8002d34:	2400066c 	.word	0x2400066c
 8002d38:	240006bc 	.word	0x240006bc
 8002d3c:	240006b8 	.word	0x240006b8
 8002d40:	24000660 	.word	0x24000660
 8002d44:	240006a4 	.word	0x240006a4
 8002d48:	240006a0 	.word	0x240006a0
 8002d4c:	24000664 	.word	0x24000664
 8002d50:	240006ac 	.word	0x240006ac
 8002d54:	240006a8 	.word	0x240006a8
 8002d58:	24000658 	.word	0x24000658
 8002d5c:	24000694 	.word	0x24000694
 8002d60:	24000690 	.word	0x24000690
 8002d64:	2400065c 	.word	0x2400065c
 8002d68:	2400069c 	.word	0x2400069c
 8002d6c:	24000698 	.word	0x24000698
 8002d70:	24000650 	.word	0x24000650
 8002d74:	24000684 	.word	0x24000684
 8002d78:	24000680 	.word	0x24000680
 8002d7c:	24000654 	.word	0x24000654
 8002d80:	2400068c 	.word	0x2400068c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002d84:	eddd 5a06 	vldr	s11, [sp, #24]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002d88:	eeb0 3a6b 	vmov.f32	s6, s23
 8002d8c:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002d90:	edcd ea01 	vstr	s29, [sp, #4]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002d94:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002d98:	eeb0 5a68 	vmov.f32	s10, s17
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002d9c:	eddd 5a00 	vldr	s11, [sp]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002da0:	eef0 ea69 	vmov.f32	s29, s19
 8002da4:	ed8d da02 	vstr	s26, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002da8:	eef0 ba46 	vmov.f32	s23, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002dac:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002db0:	eeb0 da49 	vmov.f32	s26, s18
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002db4:	eddd 5a03 	vldr	s11, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002db8:	eeb0 ba66 	vmov.f32	s22, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002dbc:	eef0 8a47 	vmov.f32	s17, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002dc0:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002dc4:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002dc8:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002dcc:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002dd0:	edcd ca00 	vstr	s25, [sp]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002dd4:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002dd8:	eeb0 8a67 	vmov.f32	s16, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8002ddc:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002de0:	ed8d ca03 	vstr	s24, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002de4:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8002de8:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8002dec:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8002df0:	e77f      	b.n	8002cf2 <ADC_Stream0_Handler+0x786>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <ADC_Stream0_Handler+0x8a4>)
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <ADC_Stream0_Handler+0x8a8>)
 8002df6:	ed92 0a00 	vldr	s0, [r2]
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002e02:	f000 f809 	bl	8002e18 <SDR_ComputeLO>
 8002e06:	f7ff bbce 	b.w	80025a6 <ADC_Stream0_Handler+0x3a>
			IntCounter = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	802b      	strh	r3, [r5, #0]
 8002e0e:	e429      	b.n	8002664 <ADC_Stream0_Handler+0xf8>
 8002e10:	24006238 	.word	0x24006238
 8002e14:	24007c14 	.word	0x24007c14

08002e18 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8002e18:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
	static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f,
			ypi, ypq, tmpi, gain=1.f;

	if (oldfreq != freq)
 8002e1a:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <SDR_ComputeLO+0x148>)
 8002e1c:	edd3 7a00 	vldr	s15, [r3]
 8002e20:	eef4 7a40 	vcmp.f32	s15, s0
{
 8002e24:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	d175      	bne.n	8002f1a <SDR_ComputeLO+0x102>
	// Coupled Quadrature Oscillator with level stabilization
	while(k)
	{                    
		// loop partially unrolled for performance

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e2e:	4a4d      	ldr	r2, [pc, #308]	; (8002f64 <SDR_ComputeLO+0x14c>)
 8002e30:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <SDR_ComputeLO+0x150>)
 8002e32:	ed92 8a00 	vldr	s16, [r2]
 8002e36:	ed93 7a00 	vldr	s14, [r3]
 8002e3a:	4c4c      	ldr	r4, [pc, #304]	; (8002f6c <SDR_ComputeLO+0x154>)
 8002e3c:	4d4c      	ldr	r5, [pc, #304]	; (8002f70 <SDR_ComputeLO+0x158>)
 8002e3e:	484d      	ldr	r0, [pc, #308]	; (8002f74 <SDR_ComputeLO+0x15c>)
 8002e40:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <SDR_ComputeLO+0x160>)
 8002e42:	edd4 5a00 	vldr	s11, [r4]
 8002e46:	edd5 7a00 	vldr	s15, [r5]
 8002e4a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8002e4e:	edd0 6a00 	vldr	s13, [r0]
 8002e52:	4a4a      	ldr	r2, [pc, #296]	; (8002f7c <SDR_ComputeLO+0x164>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002e54:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 8002e58:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e5a:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 8002e5e:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002e60:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 8002e64:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e66:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002e6a:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002e72:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002e76:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e7a:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e7e:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002e82:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e86:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002e8a:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e8e:	ee66 5aa5 	vmul.f32	s11, s13, s11
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002e92:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002e96:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e9a:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002e9e:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002ea2:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002ea6:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002eaa:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002eb2:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002eb6:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002eba:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002ebe:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002ec2:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002ec6:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002eca:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002ece:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002ed2:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002ed6:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002eda:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8002ede:	d1b9      	bne.n	8002e54 <SDR_ComputeLO+0x3c>
		ym1i = tmpi;

		k--;
	}
	// compute the gain to be applied to stabilize the level
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8002ee0:	ee66 6a06 	vmul.f32	s13, s12, s12
 8002ee4:	edc5 7a00 	vstr	s15, [r5]
 8002ee8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002f80 <SDR_ComputeLO+0x168>
 8002eec:	eddf 4a25 	vldr	s9, [pc, #148]	; 8002f84 <SDR_ComputeLO+0x16c>
 8002ef0:	eef0 7a66 	vmov.f32	s15, s13
 8002ef4:	4a24      	ldr	r2, [pc, #144]	; (8002f88 <SDR_ComputeLO+0x170>)
 8002ef6:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <SDR_ComputeLO+0x174>)
 8002ef8:	ed82 5a00 	vstr	s10, [r2]
 8002efc:	eee5 7a05 	vfma.f32	s15, s10, s10
 8002f00:	ed83 6a00 	vstr	s12, [r3]
 8002f04:	edc4 5a00 	vstr	s11, [r4]
}	
 8002f08:	ecbd 8b04 	vpop	{d8-d9}
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8002f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f10:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8002f14:	edc0 7a00 	vstr	s15, [r0]
}	
 8002f18:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002f1a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002f90 <SDR_ComputeLO+0x178>
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <SDR_ComputeLO+0x17c>)
 8002f20:	ee60 7a27 	vmul.f32	s15, s0, s15
		oldfreq  =  freq;
 8002f24:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002f28:	ed92 7a00 	vldr	s14, [r2]
 8002f2c:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8002f30:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8002f34:	eeb0 0b49 	vmov.f64	d0, d9
 8002f38:	f010 fc06 	bl	8013748 <cos>
 8002f3c:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <SDR_ComputeLO+0x14c>)
		sintheta = -sin(TWOPI * freq / SamplingRate);
 8002f42:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002f46:	ed83 8a00 	vstr	s16, [r3]
		sintheta = -sin(TWOPI * freq / SamplingRate);
 8002f4a:	f010 fc49 	bl	80137e0 <sin>
 8002f4e:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <SDR_ComputeLO+0x150>)
 8002f54:	eeb1 7a47 	vneg.f32	s14, s14
 8002f58:	ed83 7a00 	vstr	s14, [r3]
 8002f5c:	e76d      	b.n	8002e3a <SDR_ComputeLO+0x22>
 8002f5e:	bf00      	nop
 8002f60:	24000204 	.word	0x24000204
 8002f64:	240006e4 	.word	0x240006e4
 8002f68:	240006ec 	.word	0x240006ec
 8002f6c:	24000208 	.word	0x24000208
 8002f70:	24000704 	.word	0x24000704
 8002f74:	24000200 	.word	0x24000200
 8002f78:	24005a48 	.word	0x24005a48
 8002f7c:	24005248 	.word	0x24005248
 8002f80:	46000200 	.word	0x46000200
 8002f84:	39000000 	.word	0x39000000
 8002f88:	24000708 	.word	0x24000708
 8002f8c:	2400070c 	.word	0x2400070c
 8002f90:	40c90fdb 	.word	0x40c90fdb
 8002f94:	24006268 	.word	0x24006268

08002f98 <SDR_2R_toC_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time
	while(blkCnt)
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	d028      	beq.n	8002fee <SDR_2R_toC_f32+0x56>
 8002f9c:	3010      	adds	r0, #16
 8002f9e:	3110      	adds	r1, #16
 8002fa0:	3220      	adds	r2, #32
	{
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002fa2:	f850 cc10 	ldr.w	ip, [r0, #-16]
	while(blkCnt)
 8002fa6:	3110      	adds	r1, #16
 8002fa8:	3010      	adds	r0, #16
 8002faa:	3b01      	subs	r3, #1
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002fac:	f842 cc20 	str.w	ip, [r2, #-32]
	while(blkCnt)
 8002fb0:	f102 0220 	add.w	r2, r2, #32
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002fb4:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8002fb8:	f842 cc3c 	str.w	ip, [r2, #-60]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002fbc:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8002fc0:	f842 cc38 	str.w	ip, [r2, #-56]
 8002fc4:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8002fc8:	f842 cc34 	str.w	ip, [r2, #-52]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002fcc:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8002fd0:	f842 cc30 	str.w	ip, [r2, #-48]
 8002fd4:	f851 cc18 	ldr.w	ip, [r1, #-24]
 8002fd8:	f842 cc2c 	str.w	ip, [r2, #-44]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002fdc:	f850 cc14 	ldr.w	ip, [r0, #-20]
 8002fe0:	f842 cc28 	str.w	ip, [r2, #-40]
 8002fe4:	f851 cc14 	ldr.w	ip, [r1, #-20]
 8002fe8:	f842 cc24 	str.w	ip, [r2, #-36]
	while(blkCnt)
 8002fec:	d1d9      	bne.n	8002fa2 <SDR_2R_toC_f32+0xa>

		blkCnt--;
	}
}
 8002fee:	4770      	bx	lr

08002ff0 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <SDR_downconvert_f32+0xd8>)
	float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;

	// loop Unrolling
	blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
	while(blkCnt)
 8002ff2:	3110      	adds	r1, #16
 8002ff4:	3210      	adds	r2, #16
 8002ff6:	3008      	adds	r0, #8
		tmp2=((*(pt+1)-offset)) / 2048.f;
		tmp1 = tmp2;
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3 = tmp4;
#else
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8002ff8:	eddf 5a34 	vldr	s11, [pc, #208]	; 80030cc <SDR_downconvert_f32+0xdc>
 8002ffc:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 8003000:	b510      	push	{r4, lr}
 8003002:	4c33      	ldr	r4, [pc, #204]	; (80030d0 <SDR_downconvert_f32+0xe0>)
		tmp1=((*(pt)  -offset)) / 2048.f;
 8003004:	f830 ec08 	ldrh.w	lr, [r0, #-8]
	while(blkCnt)
 8003008:	3110      	adds	r1, #16
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800300a:	ed13 5a04 	vldr	s10, [r3, #-16]
	while(blkCnt)
 800300e:	3410      	adds	r4, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 8003010:	ee06 ea10 	vmov	s12, lr
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8003014:	f830 ec06 	ldrh.w	lr, [r0, #-6]
	while(blkCnt)
 8003018:	3310      	adds	r3, #16
 800301a:	3210      	adds	r2, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 800301c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8003020:	ee06 ea90 	vmov	s13, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8003024:	f830 ec02 	ldrh.w	lr, [r0, #-2]
	while(blkCnt)
 8003028:	4563      	cmp	r3, ip
		tmp2=((*(pt+1)-offset)) / 2048.f;
 800302a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	while(blkCnt)
 800302e:	f100 0008 	add.w	r0, r0, #8
		tmp1=((*(pt)  -offset)) / 2048.f;
 8003032:	ee36 6a40 	vsub.f32	s12, s12, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8003036:	ee07 ea90 	vmov	s15, lr
		tmp3=((*(pt+2)-offset)) / 2048.f;
 800303a:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
		tmp2=((*(pt+1)-offset)) / 2048.f;
 800303e:	ee76 6ac0 	vsub.f32	s13, s13, s0
		tmp1=((*(pt)  -offset)) / 2048.f;
 8003042:	ee26 6a25 	vmul.f32	s12, s12, s11
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8003046:	ee07 ea10 	vmov	s14, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 800304a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		tmp2=((*(pt+1)-offset)) / 2048.f;
 800304e:	ee66 6aa5 	vmul.f32	s13, s13, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8003052:	ee25 5a06 	vmul.f32	s10, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8003056:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		tmp4=((*(pt+3)-offset)) / 2048.f;
 800305a:	ee77 7ac0 	vsub.f32	s15, s15, s0
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800305e:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8003062:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8003066:	ee37 7a40 	vsub.f32	s14, s14, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 800306a:	ee67 7aa5 	vmul.f32	s15, s15, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800306e:	ee25 6a06 	vmul.f32	s12, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8003072:	ee27 7a25 	vmul.f32	s14, s14, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8003076:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		*zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 800307a:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800307e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8003082:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8003086:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 800308a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800308e:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		*zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8003092:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8003096:	ee66 6a87 	vmul.f32	s13, s13, s14
 800309a:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 800309e:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 80030a2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80030a6:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		*zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 80030aa:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80030ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b2:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 80030b6:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 80030ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030be:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(blkCnt)
 80030c2:	d19f      	bne.n	8003004 <SDR_downconvert_f32+0x14>
		pt += 4;
		blkCnt--;
	}	
}
 80030c4:	bd10      	pop	{r4, pc}
 80030c6:	bf00      	nop
 80030c8:	24005248 	.word	0x24005248
 80030cc:	3a000000 	.word	0x3a000000
 80030d0:	24005a48 	.word	0x24005a48

080030d4 <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 80030d4:	b410      	push	{r4}
	short *AudioBuffer;

	AudioBuffer = pDst;

	/* loop Unrolling */
	blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 80030d6:	0894      	lsrs	r4, r2, #2
	while(blkCnt--)
 80030d8:	2c00      	cmp	r4, #0
 80030da:	d057      	beq.n	800318c <SDR_float_to_DAC_audio+0xb8>
 80030dc:	1e63      	subs	r3, r4, #1
	{
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80030de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030e2:	fa1f fc83 	uxth.w	ip, r3
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <SDR_float_to_DAC_audio+0xc4>)
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	f100 0310 	add.w	r3, r0, #16
 80030f0:	3020      	adds	r0, #32
 80030f2:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 80030f6:	f101 0008 	add.w	r0, r1, #8
 80030fa:	eeb0 5a47 	vmov.f32	s10, s14
 80030fe:	ed53 5a04 	vldr	s11, [r3, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003102:	ed13 6a03 	vldr	s12, [r3, #-12]
	while(blkCnt--)
 8003106:	3008      	adds	r0, #8
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003108:	ed53 6a02 	vldr	s13, [r3, #-8]
	while(blkCnt--)
 800310c:	3310      	adds	r3, #16
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800310e:	eea5 5aa7 	vfma.f32	s10, s11, s15
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003112:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003116:	eef0 5a47 	vmov.f32	s11, s14
	while(blkCnt--)
 800311a:	459c      	cmp	ip, r3
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800311c:	eee7 5a86 	vfma.f32	s11, s15, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003120:	eeb0 6a47 	vmov.f32	s12, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003124:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003128:	eea7 6aa6 	vfma.f32	s12, s15, s13
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800312c:	eef0 6a47 	vmov.f32	s13, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003130:	ee15 4a10 	vmov	r4, s10
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003134:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003138:	f820 4c10 	strh.w	r4, [r0, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800313c:	eee7 6aa4 	vfma.f32	s13, s15, s9
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003140:	ee15 4a90 	vmov	r4, s11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003144:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003148:	f820 4c0e 	strh.w	r4, [r0, #-14]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800314c:	ee16 4a10 	vmov	r4, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003150:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003154:	f820 4c0c 	strh.w	r4, [r0, #-12]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003158:	ee16 4a90 	vmov	r4, s13
 800315c:	f820 4c0a 	strh.w	r4, [r0, #-10]
	while(blkCnt--)
 8003160:	d1cb      	bne.n	80030fa <SDR_float_to_DAC_audio+0x26>
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003162:	f001 031f 	and.w	r3, r1, #31
	}	

	// SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
	SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800316a:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800316e:	480b      	ldr	r0, [pc, #44]	; (800319c <SDR_float_to_DAC_audio+0xc8>)
 8003170:	440a      	add	r2, r1
 8003172:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003176:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8003178:	1a53      	subs	r3, r2, r1
 800317a:	2b00      	cmp	r3, #0
 800317c:	dcf9      	bgt.n	8003172 <SDR_float_to_DAC_audio+0x9e>
 800317e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003182:	f3bf 8f6f 	isb	sy
#endif
	return;
}	
 8003186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800318a:	4770      	bx	lr
    if ( dsize > 0 ) { 
 800318c:	2a00      	cmp	r2, #0
 800318e:	d1e8      	bne.n	8003162 <SDR_float_to_DAC_audio+0x8e>
 8003190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	2400b9ac 	.word	0x2400b9ac
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <SDR_memcpy_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time.
	while(blkCnt > 0u)
 80031a0:	0892      	lsrs	r2, r2, #2
 80031a2:	d016      	beq.n	80031d2 <SDR_memcpy_f32+0x32>
 80031a4:	3110      	adds	r1, #16
 80031a6:	3010      	adds	r0, #16
	{
		/* Copy and then store the results in the destination buffer */
		in1 = *pSrc++;  *pDst++ = in1;
 80031a8:	f851 3c10 	ldr.w	r3, [r1, #-16]
	while(blkCnt > 0u)
 80031ac:	3110      	adds	r1, #16
 80031ae:	3a01      	subs	r2, #1
 80031b0:	f100 0010 	add.w	r0, r0, #16
		in1 = *pSrc++;  *pDst++ = in1;
 80031b4:	f840 3c20 	str.w	r3, [r0, #-32]
		in2 = *pSrc++;  *pDst++ = in2;
 80031b8:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80031bc:	f840 3c1c 	str.w	r3, [r0, #-28]
		in3 = *pSrc++;  *pDst++ = in3;
 80031c0:	f851 3c18 	ldr.w	r3, [r1, #-24]
 80031c4:	f840 3c18 	str.w	r3, [r0, #-24]
		in4 = *pSrc++;  *pDst++ = in4;
 80031c8:	f851 3c14 	ldr.w	r3, [r1, #-20]
 80031cc:	f840 3c14 	str.w	r3, [r0, #-20]
	while(blkCnt > 0u)
 80031d0:	d1ea      	bne.n	80031a8 <SDR_memcpy_f32+0x8>

		// Decrement the loop counter
		blkCnt--;
	}
}
 80031d2:	4770      	bx	lr

080031d4 <SDR_mirror_LSB>:
{
	uint32_t blkCnt;            /* loop counter */
	float *pbR, *pbI, *peR, *peI;

	// loop Unrolling */
	blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 80031d4:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80031d6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

	//  Compute 4 outputs at a time.
	while(blkCnt--)
 80031da:	2a01      	cmp	r2, #1
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80031dc:	440b      	add	r3, r1
	while(blkCnt--)
 80031de:	f1a2 0102 	sub.w	r1, r2, #2
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80031e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 80031e6:	d036      	beq.n	8003256 <SDR_mirror_LSB+0x82>
 80031e8:	f1a3 0220 	sub.w	r2, r3, #32
 80031ec:	f1a3 0c1c 	sub.w	ip, r3, #28
 80031f0:	f100 0328 	add.w	r3, r0, #40	; 0x28
 80031f4:	4402      	add	r2, r0
 80031f6:	4460      	add	r0, ip
	{
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80031f8:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 80031fc:	3a20      	subs	r2, #32
 80031fe:	3820      	subs	r0, #32
 8003200:	3901      	subs	r1, #1
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003202:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 8003206:	3320      	adds	r3, #32
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003208:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 800320c:	f1b1 3fff 	cmp.w	r1, #4294967295
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003210:	eef1 7a67 	vneg.f32	s15, s15
 8003214:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003218:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 800321c:	f843 cc38 	str.w	ip, [r3, #-56]
 8003220:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8003224:	eef1 7a67 	vneg.f32	s15, s15
 8003228:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800322c:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8003230:	f843 cc30 	str.w	ip, [r3, #-48]
 8003234:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8003238:	eef1 7a67 	vneg.f32	s15, s15
 800323c:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003240:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 8003244:	f843 cc28 	str.w	ip, [r3, #-40]
 8003248:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 800324c:	eef1 7a67 	vneg.f32	s15, s15
 8003250:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8003254:	d1d0      	bne.n	80031f8 <SDR_mirror_LSB+0x24>
	}
}
 8003256:	4770      	bx	lr

08003258 <SDR_compute_IIR_parms>:
#endif
	r = Qfactor;

	a1 = a2 = b0 = 0.f;
	r2 = r*r;
	wr = 2.f * cwpitch / rate * myPI;
 8003258:	4929      	ldr	r1, [pc, #164]	; (8003300 <SDR_compute_IIR_parms+0xa8>)
 800325a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003304 <SDR_compute_IIR_parms+0xac>
 800325e:	edd1 7a00 	vldr	s15, [r1]
	float rate = SamplingRate/256; //SamplingRate / decimation
 8003262:	4a29      	ldr	r2, [pc, #164]	; (8003308 <SDR_compute_IIR_parms+0xb0>)
	wr = 2.f * cwpitch / rate * myPI;
 8003264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003268:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800330c <SDR_compute_IIR_parms+0xb4>
 800326c:	edd2 6a00 	vldr	s13, [r2]
{
 8003270:	b508      	push	{r3, lr}
 8003272:	ed2d 8b06 	vpush	{d8-d10}
	wr = 2.f * cwpitch / rate * myPI;
 8003276:	eec7 8aa6 	vdiv.f32	s17, s15, s13
	r = Qfactor;
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <SDR_compute_IIR_parms+0xb8>)
 800327c:	ed93 aa00 	vldr	s20, [r3]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003280:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	r2 = r*r;
 8003284:	ee6a aa0a 	vmul.f32	s21, s20, s20
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003288:	ee7a 9a0a 	vadd.f32	s19, s20, s20
 800328c:	ee3a 9a88 	vadd.f32	s18, s21, s16
	// (see the Proakis & Manolakis book)
	a1 = -2.f * r * cosw0;
	a2 = r2;
	// b0 is normalized for gain ~ 2dB on all the band
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8003290:	ee38 8a4a 	vsub.f32	s16, s16, s20
	wr = 2.f * cwpitch / rate * myPI;
 8003294:	ee68 8a87 	vmul.f32	s17, s17, s14
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003298:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 800329c:	f010 fa54 	bl	8013748 <cos>
 80032a0:	ee89 7a89 	vdiv.f32	s14, s19, s18
	a1 = -2.f * r * cosw0;
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <SDR_compute_IIR_parms+0xbc>)
	a2 = r2;
 80032a6:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <SDR_compute_IIR_parms+0xc0>)
 80032a8:	edc2 aa00 	vstr	s21, [r2]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80032ac:	eeb0 6b40 	vmov.f64	d6, d0
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80032b0:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80032b4:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80032b8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80032bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80032c0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	a1 = -2.f * r * cosw0;
 80032c4:	ee29 7ac7 	vnmul.f32	s14, s19, s14
 80032c8:	ed83 7a00 	vstr	s14, [r3]
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80032cc:	f010 fa3c 	bl	8013748 <cos>
 80032d0:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
 80032d4:	eddf 5a11 	vldr	s11, [pc, #68]	; 800331c <SDR_compute_IIR_parms+0xc4>
 80032d8:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 80032dc:	4b10      	ldr	r3, [pc, #64]	; (8003320 <SDR_compute_IIR_parms+0xc8>)
 80032de:	eea7 6b40 	vfms.f64	d6, d7, d0
 80032e2:	ee28 7a25 	vmul.f32	s14, s16, s11
}
 80032e6:	ecbd 8b06 	vpop	{d8-d10}
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80032ea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80032ee:	eeb1 5bc6 	vsqrt.f64	d5, d6
 80032f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80032f6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80032fa:	ed83 7a00 	vstr	s14, [r3]
}
 80032fe:	bd08      	pop	{r3, pc}
 8003300:	24007c14 	.word	0x24007c14
 8003304:	44000000 	.word	0x44000000
 8003308:	24006268 	.word	0x24006268
 800330c:	40490fdb 	.word	0x40490fdb
 8003310:	24006260 	.word	0x24006260
 8003314:	240073e4 	.word	0x240073e4
 8003318:	240073e8 	.word	0x240073e8
 800331c:	3f99999a 	.word	0x3f99999a
 8003320:	24007c0c 	.word	0x24007c0c

08003324 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
	static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	register float x0, y0;
	uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8003324:	0889      	lsrs	r1, r1, #2

	// Compute 4 outputs at a time, loop unrolled for performance
	while(blkCnt--)
 8003326:	2900      	cmp	r1, #0
 8003328:	d07b      	beq.n	8003422 <SDR_CWPeak+0xfe>
 800332a:	1e4b      	subs	r3, r1, #1
 800332c:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800343c <SDR_CWPeak+0x118>
	{
		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003330:	493c      	ldr	r1, [pc, #240]	; (8003424 <SDR_CWPeak+0x100>)
 8003332:	3010      	adds	r0, #16
 8003334:	4a3c      	ldr	r2, [pc, #240]	; (8003428 <SDR_CWPeak+0x104>)
 8003336:	ed9c 7a00 	vldr	s14, [ip]
 800333a:	edd1 6a00 	vldr	s13, [r1]
 800333e:	edd2 5a00 	vldr	s11, [r2]
{
 8003342:	b4f0      	push	{r4, r5, r6, r7}
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003344:	4c39      	ldr	r4, [pc, #228]	; (800342c <SDR_CWPeak+0x108>)
 8003346:	4f3a      	ldr	r7, [pc, #232]	; (8003430 <SDR_CWPeak+0x10c>)
 8003348:	edd4 4a00 	vldr	s9, [r4]
 800334c:	4d39      	ldr	r5, [pc, #228]	; (8003434 <SDR_CWPeak+0x110>)
 800334e:	4e3a      	ldr	r6, [pc, #232]	; (8003438 <SDR_CWPeak+0x114>)
 8003350:	eef1 2a64 	vneg.f32	s5, s9
 8003354:	ed97 3a00 	vldr	s6, [r7]
 8003358:	ed95 6a00 	vldr	s12, [r5]
 800335c:	ed96 5a00 	vldr	s10, [r6]
 8003360:	ee66 4ac7 	vnmul.f32	s9, s13, s14
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003364:	ed50 7a03 	vldr	s15, [r0, #-12]
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003368:	ee26 4ac5 	vnmul.f32	s8, s13, s10
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800336c:	ed50 6a04 	vldr	s13, [r0, #-16]
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003370:	ed10 7a02 	vldr	s14, [r0, #-8]
	while(blkCnt--)
 8003374:	3010      	adds	r0, #16
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003376:	eeb0 5a64 	vmov.f32	s10, s9
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800337a:	ed50 3a05 	vldr	s7, [r0, #-20]	; 0xffffffec
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800337e:	eea2 4a86 	vfma.f32	s8, s5, s12
	while(blkCnt--)
 8003382:	3b01      	subs	r3, #1
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003384:	eea2 5a83 	vfma.f32	s10, s5, s6
	while(blkCnt--)
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800338c:	eea6 5aa5 	vfma.f32	s10, s13, s11
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003390:	eea5 4a25 	vfma.f32	s8, s10, s11
		*buf++ = y0;
 8003394:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003398:	edd2 5a00 	vldr	s11, [r2]
 800339c:	edd1 6a00 	vldr	s13, [r1]
 80033a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80033a4:	edd4 4a00 	vldr	s9, [r4]
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80033a8:	ee25 7a87 	vmul.f32	s14, s11, s14
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80033ac:	ee65 3aa3 	vmul.f32	s7, s11, s7
 80033b0:	eee6 7ac3 	vfms.f32	s15, s13, s6
 80033b4:	eea6 7ac5 	vfms.f32	s14, s13, s10
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80033b8:	eef1 2a64 	vneg.f32	s5, s9
 80033bc:	eee4 7ac5 	vfms.f32	s15, s9, s10
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80033c0:	eeb0 5a63 	vmov.f32	s10, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80033c4:	eea4 7ae7 	vfms.f32	s14, s9, s15
 80033c8:	eea6 5ae7 	vfms.f32	s10, s13, s15
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80033cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80033d0:	eee4 7ac4 	vfms.f32	s15, s9, s8
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80033d4:	eea4 5ac7 	vfms.f32	s10, s9, s14
 80033d8:	eeb0 3a45 	vmov.f32	s6, s10
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80033dc:	ee25 5a87 	vmul.f32	s10, s11, s14
 80033e0:	eea6 5ac4 	vfms.f32	s10, s13, s8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80033e4:	eeb0 4a67 	vmov.f32	s8, s15
 80033e8:	eed6 7a86 	vfnms.f32	s15, s13, s12
 80033ec:	eea6 4ac6 	vfms.f32	s8, s13, s12
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80033f0:	ee25 6a83 	vmul.f32	s12, s11, s6
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80033f4:	eea4 5aa7 	vfma.f32	s10, s9, s15
 80033f8:	eea6 6ac4 	vfms.f32	s12, s13, s8
		*buf++ = y0;
 80033fc:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
		*buf++ = y0;
 8003400:	ed00 5a06 	vstr	s10, [r0, #-24]	; 0xffffffe8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003404:	eea4 6ac5 	vfms.f32	s12, s9, s10
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;
 8003408:	ed00 6a05 	vstr	s12, [r0, #-20]	; 0xffffffec
	while(blkCnt--)
 800340c:	d1a8      	bne.n	8003360 <SDR_CWPeak+0x3c>
 800340e:	ed87 3a00 	vstr	s6, [r7]
 8003412:	ed86 5a00 	vstr	s10, [r6]
 8003416:	ed85 6a00 	vstr	s12, [r5]
 800341a:	ed8c 7a00 	vstr	s14, [ip]
	}
}
 800341e:	bcf0      	pop	{r4, r5, r6, r7}
 8003420:	4770      	bx	lr
 8003422:	4770      	bx	lr
 8003424:	240073e8 	.word	0x240073e8
 8003428:	24007c0c 	.word	0x24007c0c
 800342c:	240073e4 	.word	0x240073e4
 8003430:	240006f4 	.word	0x240006f4
 8003434:	240006f8 	.word	0x240006f8
 8003438:	24000700 	.word	0x24000700
 800343c:	240006fc 	.word	0x240006fc

08003440 <SDR_demodAM_AGC>:

#ifdef RECEIVE_AM

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8003440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

		if(pk < audiotmp)
		{
			pk = audiotmp;
			hangcnt = Hcount[AM];
 8003444:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <SDR_demodAM_AGC+0xf8>)
{
 8003446:	b082      	sub	sp, #8
 8003448:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8003558 <SDR_demodAM_AGC+0x118>
 800344c:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
			hangcnt = Hcount[AM];
 8003450:	881c      	ldrh	r4, [r3, #0]
 8003452:	ed98 7a00 	vldr	s14, [r8]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8003456:	eddf 4a39 	vldr	s9, [pc, #228]	; 800353c <SDR_demodAM_AGC+0xfc>

		if(hangcnt == 0)
			pk  *= Decay[AM];

		// DC removal filter -----------------------
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800345a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8003540 <SDR_demodAM_AGC+0x100>
 800345e:	4f39      	ldr	r7, [pc, #228]	; (8003544 <SDR_demodAM_AGC+0x104>)
 8003460:	4a39      	ldr	r2, [pc, #228]	; (8003548 <SDR_demodAM_AGC+0x108>)
 8003462:	4d3a      	ldr	r5, [pc, #232]	; (800354c <SDR_demodAM_AGC+0x10c>)
 8003464:	4e3a      	ldr	r6, [pc, #232]	; (8003550 <SDR_demodAM_AGC+0x110>)
			pk  *= Decay[AM];
 8003466:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 800355c <SDR_demodAM_AGC+0x11c>
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800346a:	edd0 7a01 	vldr	s15, [r0, #4]
			hangcnt = Hcount[AM];
 800346e:	4623      	mov	r3, r4
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8003470:	edd0 6a00 	vldr	s13, [r0]
 8003474:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003478:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800347c:	edcd 7a01 	vstr	s15, [sp, #4]
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8003480:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8003484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 800348c:	bfa8      	it	ge
 800348e:	eef1 5ae7 	vsqrtge.f32	s11, s15
		if(pk < audiotmp)
 8003492:	edd2 7a00 	vldr	s15, [r2]
      *pOut = 0.0f;
 8003496:	bfb8      	it	lt
 8003498:	eef0 5a64 	vmovlt.f32	s11, s9
 800349c:	eef4 7ae5 	vcmpe.f32	s15, s11
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a4:	d52c      	bpl.n	8003500 <SDR_demodAM_AGC+0xc0>
			hangcnt = Hcount[AM];
 80034a6:	eef0 7a65 	vmov.f32	s15, s11
			pk = audiotmp;
 80034aa:	edc2 5a00 	vstr	s11, [r2]
			hangcnt = Hcount[AM];
 80034ae:	602c      	str	r4, [r5, #0]
		audiotmp /= max(pk, AgcThreshold);
 80034b0:	ed96 6a00 	vldr	s12, [r6]
 80034b4:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 80034b8:	eec5 6a86 	vdiv.f32	s13, s11, s12
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80034bc:	eef0 5a66 	vmov.f32	s11, s13
		audiotmp /= max(pk, AgcThreshold);
 80034c0:	edc7 6a00 	vstr	s13, [r7]
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80034c4:	eee7 5a05 	vfma.f32	s11, s14, s10
		if(hangcnt == 0)
 80034c8:	b9e3      	cbnz	r3, 8003504 <SDR_demodAM_AGC+0xc4>
			pk  *= Decay[AM];
 80034ca:	edde 6a00 	vldr	s13, [lr]
	for(k=j=0; k<BSIZE*2; k+=2)
 80034ce:	3008      	adds	r0, #8
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80034d0:	edcd 5a00 	vstr	s11, [sp]
			pk  *= Decay[AM];
 80034d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80034d8:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80034dc:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80034de:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 80034e2:	ed9d 7a00 	vldr	s14, [sp]
			pk  *= Decay[AM];
 80034e6:	edc2 6a00 	vstr	s13, [r2]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80034ea:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80034ee:	d1bc      	bne.n	800346a <SDR_demodAM_AGC+0x2a>
		// -----------------------------------------
	}
	PeakAudioValue=pk;
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <SDR_demodAM_AGC+0x114>)
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	ed88 7a00 	vstr	s14, [r8]
 80034f8:	601a      	str	r2, [r3, #0]
	if(hangcnt > 0)  hangcnt--;
}
 80034fa:	b002      	add	sp, #8
 80034fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(hangcnt == 0)
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	e7d5      	b.n	80034b0 <SDR_demodAM_AGC+0x70>
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8003504:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8003508:	3008      	adds	r0, #8
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800350a:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 800350e:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8003510:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 8003514:	ed9d 7a00 	vldr	s14, [sp]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8003518:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 800351c:	d1a5      	bne.n	800346a <SDR_demodAM_AGC+0x2a>
	PeakAudioValue=pk;
 800351e:	490d      	ldr	r1, [pc, #52]	; (8003554 <SDR_demodAM_AGC+0x114>)
	if(hangcnt > 0)  hangcnt--;
 8003520:	2b00      	cmp	r3, #0
	PeakAudioValue=pk;
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	ed88 7a00 	vstr	s14, [r8]
 8003528:	600a      	str	r2, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 800352a:	dd01      	ble.n	8003530 <SDR_demodAM_AGC+0xf0>
 800352c:	3b01      	subs	r3, #1
 800352e:	602b      	str	r3, [r5, #0]
}
 8003530:	b002      	add	sp, #8
 8003532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003536:	bf00      	nop
 8003538:	2400522c 	.word	0x2400522c
 800353c:	00000000 	.word	0x00000000
 8003540:	3f75c28f 	.word	0x3f75c28f
 8003544:	24007c08 	.word	0x24007c08
 8003548:	2400a820 	.word	0x2400a820
 800354c:	2400a4e4 	.word	0x2400a4e4
 8003550:	240007c4 	.word	0x240007c4
 8003554:	2400625c 	.word	0x2400625c
 8003558:	240006f0 	.word	0x240006f0
 800355c:	24001000 	.word	0x24001000

08003560 <SDR_demodSSB_CW_AGC>:
#endif

//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8003560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(pk < sav)
		{
			pk = sav;
			if(CurrentMode == CW) hangcnt = Hcount[CW];
			else
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8003564:	4b38      	ldr	r3, [pc, #224]	; (8003648 <SDR_demodSSB_CW_AGC+0xe8>)
 8003566:	f241 0c04 	movw	ip, #4100	; 0x1004
		if(pk < sav)
 800356a:	4c38      	ldr	r4, [pc, #224]	; (800364c <SDR_demodSSB_CW_AGC+0xec>)
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800356c:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8003570:	4484      	add	ip, r0
 8003572:	f8b3 8002 	ldrh.w	r8, [r3, #2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003576:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800357a:	1d03      	adds	r3, r0, #4
		if(pk < sav)
 800357c:	edd4 7a00 	vldr	s15, [r4]
 8003580:	4d33      	ldr	r5, [pc, #204]	; (8003650 <SDR_demodSSB_CW_AGC+0xf0>)
 8003582:	4f34      	ldr	r7, [pc, #208]	; (8003654 <SDR_demodSSB_CW_AGC+0xf4>)
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003584:	4e34      	ldr	r6, [pc, #208]	; (8003658 <SDR_demodSSB_CW_AGC+0xf8>)

		if(hangcnt == 0)
		{
			if(CurrentMode == CW) pk  *= Decay[CW];
			else
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8003586:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8003664 <SDR_demodSSB_CW_AGC+0x104>
 800358a:	e011      	b.n	80035b0 <SDR_demodSSB_CW_AGC+0x50>
			if(CurrentMode == CW) pk  *= Decay[CW];
 800358c:	7830      	ldrb	r0, [r6, #0]
 800358e:	2803      	cmp	r0, #3
 8003590:	d050      	beq.n	8003634 <SDR_demodSSB_CW_AGC+0xd4>
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8003592:	2801      	cmp	r0, #1
 8003594:	ed94 7a00 	vldr	s14, [r4]
 8003598:	bf0c      	ite	eq
 800359a:	edda 7a01 	vldreq	s15, [sl, #4]
 800359e:	edda 7a02 	vldrne	s15, [sl, #8]
 80035a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a6:	edc4 7a00 	vstr	s15, [r4]
	for(k=j=0; k<BSIZE*2; k+=2)
 80035aa:	3308      	adds	r3, #8
 80035ac:	459c      	cmp	ip, r3
 80035ae:	d02b      	beq.n	8003608 <SDR_demodSSB_CW_AGC+0xa8>
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80035b0:	ed93 7a00 	vldr	s14, [r3]
 80035b4:	ed53 6a01 	vldr	s13, [r3, #-4]
 80035b8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80035bc:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 80035c0:	eeb1 6ac7 	vsqrt.f32	s12, s14
		if(pk < sav)
 80035c4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	d528      	bpl.n	8003620 <SDR_demodSSB_CW_AGC+0xc0>
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80035ce:	7830      	ldrb	r0, [r6, #0]
			pk = sav;
 80035d0:	ed84 6a00 	vstr	s12, [r4]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80035d4:	2803      	cmp	r0, #3
 80035d6:	d025      	beq.n	8003624 <SDR_demodSSB_CW_AGC+0xc4>
 80035d8:	eef0 7a46 	vmov.f32	s15, s12
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80035dc:	2801      	cmp	r0, #1
 80035de:	bf0c      	ite	eq
 80035e0:	4642      	moveq	r2, r8
 80035e2:	464a      	movne	r2, r9
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 80035e4:	ed53 6a01 	vldr	s13, [r3, #-4]
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80035e8:	602a      	str	r2, [r5, #0]
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 80035ea:	ed97 7a00 	vldr	s14, [r7]
 80035ee:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80035f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f6:	eca1 7a01 	vstmia	r1!, {s14}
		if(hangcnt == 0)
 80035fa:	2a00      	cmp	r2, #0
 80035fc:	d0c6      	beq.n	800358c <SDR_demodSSB_CW_AGC+0x2c>
	for(k=j=0; k<BSIZE*2; k+=2)
 80035fe:	3308      	adds	r3, #8
			if(CurrentMode == CW) pk  *= Decay[CW];
 8003600:	edd4 7a00 	vldr	s15, [r4]
	for(k=j=0; k<BSIZE*2; k+=2)
 8003604:	459c      	cmp	ip, r3
 8003606:	d1d3      	bne.n	80035b0 <SDR_demodSSB_CW_AGC+0x50>
 8003608:	4914      	ldr	r1, [pc, #80]	; (800365c <SDR_demodSSB_CW_AGC+0xfc>)
		}
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 800360a:	2a00      	cmp	r2, #0
	PeakAudioValue=pk;
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <SDR_demodSSB_CW_AGC+0x100>)
 800360e:	ed81 6a00 	vstr	s12, [r1]
 8003612:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 8003616:	dd01      	ble.n	800361c <SDR_demodSSB_CW_AGC+0xbc>
 8003618:	3a01      	subs	r2, #1
 800361a:	602a      	str	r2, [r5, #0]
}
 800361c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(hangcnt == 0)
 8003620:	682a      	ldr	r2, [r5, #0]
 8003622:	e7e2      	b.n	80035ea <SDR_demodSSB_CW_AGC+0x8a>
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 8003624:	ed53 6a01 	vldr	s13, [r3, #-4]
 8003628:	eef0 7a46 	vmov.f32	s15, s12
 800362c:	4672      	mov	r2, lr
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 800362e:	f8c5 e000 	str.w	lr, [r5]
 8003632:	e7da      	b.n	80035ea <SDR_demodSSB_CW_AGC+0x8a>
			if(CurrentMode == CW) pk  *= Decay[CW];
 8003634:	ed94 7a00 	vldr	s14, [r4]
 8003638:	edda 7a03 	vldr	s15, [sl, #12]
 800363c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003640:	edc4 7a00 	vstr	s15, [r4]
 8003644:	e7b1      	b.n	80035aa <SDR_demodSSB_CW_AGC+0x4a>
 8003646:	bf00      	nop
 8003648:	2400522c 	.word	0x2400522c
 800364c:	2400a820 	.word	0x2400a820
 8003650:	2400a4e4 	.word	0x2400a4e4
 8003654:	240007c4 	.word	0x240007c4
 8003658:	24000ff8 	.word	0x24000ff8
 800365c:	240006e8 	.word	0x240006e8
 8003660:	2400625c 	.word	0x2400625c
 8003664:	24001000 	.word	0x24001000

08003668 <pack_call>:
	return m;
}

static long
unsigned int pack_call(char const *callsign)
{
 8003668:	b510      	push	{r4, lr}
	unsigned int i;
	long unsigned int n;
	char call6[6];
	memset(call6,' ',sizeof(call6));
 800366a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
{
 800366e:	b082      	sub	sp, #8
 8003670:	4604      	mov	r4, r0
	memset(call6,' ',sizeof(call6));
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f8ad 3004 	strh.w	r3, [sp, #4]
	// callsign is 6 characters in length. Exactly.
	size_t call_len = strlen(callsign);
 8003678:	f7fc fee2 	bl	8000440 <strlen>
	if( call_len > 6 ) {
 800367c:	2806      	cmp	r0, #6
 800367e:	f200 808e 	bhi.w	800379e <pack_call+0x136>
		return 0;
	}
	if( isdigit((int) callsign[2]) ) {
 8003682:	78a2      	ldrb	r2, [r4, #2]
 8003684:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <pack_call+0x180>)
 8003686:	5c9a      	ldrb	r2, [r3, r2]
 8003688:	0752      	lsls	r2, r2, #29
 800368a:	d57b      	bpl.n	8003784 <pack_call+0x11c>
		for (i=0; i<call_len; i++) {
 800368c:	b120      	cbz	r0, 8003698 <pack_call+0x30>
			call6[i]=callsign[i];
 800368e:	4602      	mov	r2, r0
 8003690:	4621      	mov	r1, r4
 8003692:	4668      	mov	r0, sp
 8003694:	f00e f830 	bl	80116f8 <memcpy>
		for (i=1; i<call_len+1; i++) {
			call6[i]=callsign[i-1];
		}
	}
	for (i=0; i<6; i++) {
		call6[i]=get_callsign_character_code(call6[i]);
 8003698:	f89d 3000 	ldrb.w	r3, [sp]
	if( ch >=48 && ch <=57 ) { //0-9
 800369c:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80036a0:	fa5f fe8e 	uxtb.w	lr, lr
 80036a4:	f1be 0f09 	cmp.w	lr, #9
 80036a8:	d908      	bls.n	80036bc <pack_call+0x54>
	if( ch == 32 ) {  //space
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	f000 8095 	beq.w	80037da <pack_call+0x172>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80036b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80036b4:	2a19      	cmp	r2, #25
 80036b6:	d975      	bls.n	80037a4 <pack_call+0x13c>
	return -1;
 80036b8:	f04f 0eff 	mov.w	lr, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80036bc:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 80036c0:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80036c4:	b2e4      	uxtb	r4, r4
 80036c6:	2c09      	cmp	r4, #9
 80036c8:	d907      	bls.n	80036da <pack_call+0x72>
	if( ch == 32 ) {  //space
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	f000 8083 	beq.w	80037d6 <pack_call+0x16e>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80036d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80036d4:	2a19      	cmp	r2, #25
 80036d6:	d977      	bls.n	80037c8 <pack_call+0x160>
	return -1;
 80036d8:	24ff      	movs	r4, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80036da:	f89d 3002 	ldrb.w	r3, [sp, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 80036de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80036e2:	b2c9      	uxtb	r1, r1
 80036e4:	2909      	cmp	r1, #9
 80036e6:	d906      	bls.n	80036f6 <pack_call+0x8e>
	if( ch == 32 ) {  //space
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d072      	beq.n	80037d2 <pack_call+0x16a>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80036ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80036f0:	2a19      	cmp	r2, #25
 80036f2:	d966      	bls.n	80037c2 <pack_call+0x15a>
	return -1;
 80036f4:	21ff      	movs	r1, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80036f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 80036fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	2a09      	cmp	r2, #9
 8003702:	d906      	bls.n	8003712 <pack_call+0xaa>
	if( ch == 32 ) {  //space
 8003704:	2b20      	cmp	r3, #32
 8003706:	d062      	beq.n	80037ce <pack_call+0x166>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003708:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800370c:	2a19      	cmp	r2, #25
 800370e:	d955      	bls.n	80037bc <pack_call+0x154>
	return -1;
 8003710:	22ff      	movs	r2, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003712:	f89d 0004 	ldrb.w	r0, [sp, #4]
	if( ch >=48 && ch <=57 ) { //0-9
 8003716:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b09      	cmp	r3, #9
 800371e:	d906      	bls.n	800372e <pack_call+0xc6>
	if( ch == 32 ) {  //space
 8003720:	2820      	cmp	r0, #32
 8003722:	d05d      	beq.n	80037e0 <pack_call+0x178>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003724:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003728:	2b19      	cmp	r3, #25
 800372a:	d93f      	bls.n	80037ac <pack_call+0x144>
	return -1;
 800372c:	23ff      	movs	r3, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 800372e:	f89d c005 	ldrb.w	ip, [sp, #5]
	if( ch >=48 && ch <=57 ) { //0-9
 8003732:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 8003736:	b2c0      	uxtb	r0, r0
 8003738:	2809      	cmp	r0, #9
 800373a:	d907      	bls.n	800374c <pack_call+0xe4>
	if( ch == 32 ) {  //space
 800373c:	f1bc 0f20 	cmp.w	ip, #32
 8003740:	d050      	beq.n	80037e4 <pack_call+0x17c>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003742:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 8003746:	2819      	cmp	r0, #25
 8003748:	d933      	bls.n	80037b2 <pack_call+0x14a>
	return -1;
 800374a:	20ff      	movs	r0, #255	; 0xff
	}
	n = call6[0];
	n = n*36+call6[1];
 800374c:	f04f 0c24 	mov.w	ip, #36	; 0x24
 8003750:	fb1c 4c0e 	smlabb	ip, ip, lr, r4
	n = n*10+call6[2];
 8003754:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003758:	eb01 014c 	add.w	r1, r1, ip, lsl #1
	n = n*27+call6[3]-10;
 800375c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003760:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003764:	390a      	subs	r1, #10
 8003766:	440a      	add	r2, r1
	n = n*27+call6[4]-10;
 8003768:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800376c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8003770:	3a0a      	subs	r2, #10
 8003772:	4413      	add	r3, r2
	n = n*27+call6[5]-10;
 8003774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003778:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800377c:	3b0a      	subs	r3, #10
 800377e:	4418      	add	r0, r3
	return n;
}
 8003780:	b002      	add	sp, #8
 8003782:	bd10      	pop	{r4, pc}
	} else if( isdigit((int) callsign[1]) ) {
 8003784:	7862      	ldrb	r2, [r4, #1]
 8003786:	5c9b      	ldrb	r3, [r3, r2]
 8003788:	075b      	lsls	r3, r3, #29
 800378a:	d585      	bpl.n	8003698 <pack_call+0x30>
		for (i=1; i<call_len+1; i++) {
 800378c:	2800      	cmp	r0, #0
 800378e:	d083      	beq.n	8003698 <pack_call+0x30>
			call6[i]=callsign[i-1];
 8003790:	4602      	mov	r2, r0
 8003792:	4621      	mov	r1, r4
 8003794:	f10d 0001 	add.w	r0, sp, #1
 8003798:	f00d ffae 	bl	80116f8 <memcpy>
 800379c:	e77c      	b.n	8003698 <pack_call+0x30>
		return 0;
 800379e:	2000      	movs	r0, #0
}
 80037a0:	b002      	add	sp, #8
 80037a2:	bd10      	pop	{r4, pc}
		return ch-55;
 80037a4:	3b37      	subs	r3, #55	; 0x37
 80037a6:	fa5f fe83 	uxtb.w	lr, r3
 80037aa:	e787      	b.n	80036bc <pack_call+0x54>
 80037ac:	3837      	subs	r0, #55	; 0x37
 80037ae:	b2c3      	uxtb	r3, r0
 80037b0:	e7bd      	b.n	800372e <pack_call+0xc6>
 80037b2:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
 80037b6:	fa5f f08c 	uxtb.w	r0, ip
 80037ba:	e7c7      	b.n	800374c <pack_call+0xe4>
 80037bc:	3b37      	subs	r3, #55	; 0x37
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	e7a7      	b.n	8003712 <pack_call+0xaa>
 80037c2:	3b37      	subs	r3, #55	; 0x37
 80037c4:	b2d9      	uxtb	r1, r3
 80037c6:	e796      	b.n	80036f6 <pack_call+0x8e>
 80037c8:	3b37      	subs	r3, #55	; 0x37
 80037ca:	b2dc      	uxtb	r4, r3
 80037cc:	e785      	b.n	80036da <pack_call+0x72>
		return 36;
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	e79f      	b.n	8003712 <pack_call+0xaa>
 80037d2:	2124      	movs	r1, #36	; 0x24
 80037d4:	e78f      	b.n	80036f6 <pack_call+0x8e>
 80037d6:	2424      	movs	r4, #36	; 0x24
 80037d8:	e77f      	b.n	80036da <pack_call+0x72>
 80037da:	f04f 0e24 	mov.w	lr, #36	; 0x24
 80037de:	e76d      	b.n	80036bc <pack_call+0x54>
 80037e0:	2324      	movs	r3, #36	; 0x24
 80037e2:	e7a4      	b.n	800372e <pack_call+0xc6>
 80037e4:	2024      	movs	r0, #36	; 0x24
 80037e6:	e7b1      	b.n	800374c <pack_call+0xe4>
 80037e8:	0801dc4c 	.word	0x0801dc4c

080037ec <get_wspr_channel_symbols>:
	memcpy(sym, tmp, sizeof(tmp));
}

int
get_wspr_channel_symbols(char* rawmessage, uint8_t* symbols)
{
 80037ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	};
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
	char *callsign, *grid, *powstr;
	char grid4[5], message[23];

	memset(message,0,sizeof(char)*23);
 80037f0:	2300      	movs	r3, #0
{
 80037f2:	b0ed      	sub	sp, #436	; 0x1b4
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80037f4:	4fb0      	ldr	r7, [pc, #704]	; (8003ab8 <get_wspr_channel_symbols+0x2cc>)
{
 80037f6:	4605      	mov	r5, r0
	memset(message,0,sizeof(char)*23);
 80037f8:	930b      	str	r3, [sp, #44]	; 0x2c
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80037fa:	ae0d      	add	r6, sp, #52	; 0x34
	i=0;
	while ( rawmessage[i] != 0 && i<23 ) {
 80037fc:	7804      	ldrb	r4, [r0, #0]
{
 80037fe:	9103      	str	r1, [sp, #12]
	memset(message,0,sizeof(char)*23);
 8003800:	f8cd 302f 	str.w	r3, [sp, #47]	; 0x2f
 8003804:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003808:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 800380c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800380e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003810:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003812:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003814:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003818:	e886 0003 	stmia.w	r6, {r0, r1}
	while ( rawmessage[i] != 0 && i<23 ) {
 800381c:	b154      	cbz	r4, 8003834 <get_wspr_channel_symbols+0x48>
 800381e:	aa07      	add	r2, sp, #28
 8003820:	1c6b      	adds	r3, r5, #1
 8003822:	e000      	b.n	8003826 <get_wspr_channel_symbols+0x3a>
 8003824:	b134      	cbz	r4, 8003834 <get_wspr_channel_symbols+0x48>
		message[i]=rawmessage[i];
 8003826:	f802 4b01 	strb.w	r4, [r2], #1
	while ( rawmessage[i] != 0 && i<23 ) {
 800382a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800382e:	1b59      	subs	r1, r3, r5
 8003830:	2918      	cmp	r1, #24
 8003832:	d1f7      	bne.n	8003824 <get_wspr_channel_symbols+0x38>
		i++;
	}

	size_t i1=strcspn(message," ");
 8003834:	49a1      	ldr	r1, [pc, #644]	; (8003abc <get_wspr_channel_symbols+0x2d0>)
 8003836:	a807      	add	r0, sp, #28
 8003838:	f00d fe73 	bl	8011522 <strcspn>
	size_t i2=strcspn(message,"/");
 800383c:	49a0      	ldr	r1, [pc, #640]	; (8003ac0 <get_wspr_channel_symbols+0x2d4>)
	size_t i1=strcspn(message," ");
 800383e:	4604      	mov	r4, r0
	size_t i2=strcspn(message,"/");
 8003840:	a807      	add	r0, sp, #28
 8003842:	f00d fe6e 	bl	8011522 <strcspn>
	size_t i3=strcspn(message,"<");
 8003846:	499f      	ldr	r1, [pc, #636]	; (8003ac4 <get_wspr_channel_symbols+0x2d8>)
	size_t i2=strcspn(message,"/");
 8003848:	4606      	mov	r6, r0
	size_t i3=strcspn(message,"<");
 800384a:	a807      	add	r0, sp, #28
 800384c:	f00d fe69 	bl	8011522 <strcspn>
	size_t mlen=strlen(message);

	// Use the presence and/or absence of "<" and "/" to decide what
	// type of message. No sanity checks! Beware!

	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003850:	3c04      	subs	r4, #4
	size_t i4=strcspn(message,">");
 8003852:	499d      	ldr	r1, [pc, #628]	; (8003ac8 <get_wspr_channel_symbols+0x2dc>)
	size_t i3=strcspn(message,"<");
 8003854:	4605      	mov	r5, r0
	size_t i4=strcspn(message,">");
 8003856:	a807      	add	r0, sp, #28
 8003858:	f00d fe63 	bl	8011522 <strcspn>
 800385c:	4607      	mov	r7, r0
	size_t mlen=strlen(message);
 800385e:	a807      	add	r0, sp, #28
 8003860:	f7fc fdee 	bl	8000440 <strlen>
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003864:	2c02      	cmp	r4, #2
	size_t mlen=strlen(message);
 8003866:	4603      	mov	r3, r0
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003868:	d804      	bhi.n	8003874 <get_wspr_channel_symbols+0x88>
 800386a:	4286      	cmp	r6, r0
 800386c:	d102      	bne.n	8003874 <get_wspr_channel_symbols+0x88>
 800386e:	4285      	cmp	r5, r0
 8003870:	f000 8132 	beq.w	8003ad8 <get_wspr_channel_symbols+0x2ec>
		for (i=0; i<4; i++) {
			grid4[i]=get_locator_character_code(*(grid+i));
		}
		m = pack_grid4_power(grid4,power);

	} else if ( i3 == 0 && i4 < mlen ) {
 8003874:	b90d      	cbnz	r5, 800387a <get_wspr_channel_symbols+0x8e>
 8003876:	429f      	cmp	r7, r3
 8003878:	d37e      	bcc.n	8003978 <get_wspr_channel_symbols+0x18c>
		for(i=0; i<j-1; i++) {
			grid6[i]=grid[i+1];
		}
		grid6[5]=grid[0];
		n = pack_call(grid6);
	} else if ( i2 < mlen ) {  // just looks for a right slash
 800387a:	429e      	cmp	r6, r3
 800387c:	d303      	bcc.n	8003886 <get_wspr_channel_symbols+0x9a>
		pack_prefix(callsign, &n1, &ng, &nadd);
		ntype=power + 1 + nadd;
		m=128*ng+ntype+64;
		n=n1;
	} else {
		return 0;
 800387e:	2000      	movs	r0, #0

	for (i=0; i < 162; i++) {
		symbols[i] = 2 * channelbits[i] + pr3[i];
	}
	return 1;
}
 8003880:	b06d      	add	sp, #436	; 0x1b4
 8003882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		callsign = strtok (message," ");
 8003886:	498d      	ldr	r1, [pc, #564]	; (8003abc <get_wspr_channel_symbols+0x2d0>)
 8003888:	a807      	add	r0, sp, #28
 800388a:	f00d fe5b 	bl	8011544 <strtok>
 800388e:	4605      	mov	r5, r0
		if( i2==0 || i2>strlen(callsign) ) return 0; //guards against pathological case
 8003890:	2e00      	cmp	r6, #0
 8003892:	d0f4      	beq.n	800387e <get_wspr_channel_symbols+0x92>
 8003894:	f7fc fdd4 	bl	8000440 <strlen>
 8003898:	42b0      	cmp	r0, r6
 800389a:	d3f0      	bcc.n	800387e <get_wspr_channel_symbols+0x92>
		powstr = strtok (NULL," ");
 800389c:	4987      	ldr	r1, [pc, #540]	; (8003abc <get_wspr_channel_symbols+0x2d0>)
 800389e:	2000      	movs	r0, #0
 80038a0:	f00d fe50 	bl	8011544 <strtok>
		int power = atoi (powstr);
 80038a4:	f00c ffea 	bl	801087c <atoi>
		if( power < 0 ) power=0;
 80038a8:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 80038aa:	4b88      	ldr	r3, [pc, #544]	; (8003acc <get_wspr_channel_symbols+0x2e0>)
 80038ac:	bfa8      	it	ge
 80038ae:	203c      	movge	r0, #60	; 0x3c
	size_t i1 = strcspn(callsign,"/");
 80038b0:	4983      	ldr	r1, [pc, #524]	; (8003ac0 <get_wspr_channel_symbols+0x2d4>)
 80038b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		power=power+nu[power%10];
 80038b6:	fba3 2300 	umull	r2, r3, r3, r0
 80038ba:	aa0d      	add	r2, sp, #52	; 0x34
 80038bc:	08db      	lsrs	r3, r3, #3
 80038be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038c2:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 80038c6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80038ca:	4406      	add	r6, r0
	size_t i1 = strcspn(callsign,"/");
 80038cc:	4628      	mov	r0, r5
 80038ce:	f00d fe28 	bl	8011522 <strcspn>
	if( callsign[i1+2] == 0 ) {
 80038d2:	f100 0802 	add.w	r8, r0, #2
	size_t i1 = strcspn(callsign,"/");
 80038d6:	4607      	mov	r7, r0
	if( callsign[i1+2] == 0 ) {
 80038d8:	f815 3008 	ldrb.w	r3, [r5, r8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 842b 	beq.w	8004138 <get_wspr_channel_symbols+0x94c>
	} else if( callsign[i1+3]==0 ) {
 80038e2:	eb05 0900 	add.w	r9, r5, r0
 80038e6:	f899 3003 	ldrb.w	r3, [r9, #3]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 8502 	bne.w	80042f4 <get_wspr_channel_symbols+0xb08>
		for (i=0; i<i1; i++) {
 80038f0:	ab40      	add	r3, sp, #256	; 0x100
 80038f2:	2800      	cmp	r0, #0
 80038f4:	f000 857d 	beq.w	80043f2 <get_wspr_channel_symbols+0xc06>
 80038f8:	461a      	mov	r2, r3
 80038fa:	9302      	str	r3, [sp, #8]
 80038fc:	1c6b      	adds	r3, r5, #1
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	f240 854d 	bls.w	80043a0 <get_wspr_channel_symbols+0xbb4>
 8003906:	1e43      	subs	r3, r0, #1
 8003908:	2b05      	cmp	r3, #5
 800390a:	f240 8549 	bls.w	80043a0 <get_wspr_channel_symbols+0xbb4>
			call6[i]=callsign[i];
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	0782      	lsls	r2, r0, #30
 8003912:	9340      	str	r3, [sp, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8003914:	f020 0303 	bic.w	r3, r0, #3
 8003918:	d017      	beq.n	800394a <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 800391a:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
 800391e:	5ce9      	ldrb	r1, [r5, r3]
 8003920:	446a      	add	r2, sp
 8003922:	f802 1cb0 	strb.w	r1, [r2, #-176]
		for (i=0; i<i1; i++) {
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	4290      	cmp	r0, r2
 800392a:	d90e      	bls.n	800394a <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 800392c:	5ca9      	ldrb	r1, [r5, r2]
		for (i=0; i<i1; i++) {
 800392e:	3302      	adds	r3, #2
			call6[i]=callsign[i];
 8003930:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
		for (i=0; i<i1; i++) {
 8003934:	4298      	cmp	r0, r3
			call6[i]=callsign[i];
 8003936:	446a      	add	r2, sp
 8003938:	f802 1cb0 	strb.w	r1, [r2, #-176]
		for (i=0; i<i1; i++) {
 800393c:	d905      	bls.n	800394a <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 800393e:	5cea      	ldrb	r2, [r5, r3]
 8003940:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8003944:	446b      	add	r3, sp
 8003946:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 800394a:	9802      	ldr	r0, [sp, #8]
 800394c:	f7ff fe8c 	bl	8003668 <pack_call>
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 8003950:	f899 3001 	ldrb.w	r3, [r9, #1]
 8003954:	f815 2008 	ldrb.w	r2, [r5, r8]
		*n=pack_call(call6);
 8003958:	4604      	mov	r4, r0
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 800395a:	3b30      	subs	r3, #48	; 0x30
 800395c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003960:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		*m=60000 + 26 + *m;
 8003964:	f64e 234a 	movw	r3, #59978	; 0xea4a
 8003968:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 800396a:	01db      	lsls	r3, r3, #7
		*nadd=1;
 800396c:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 800396e:	f106 0541 	add.w	r5, r6, #65	; 0x41
 8003972:	4405      	add	r5, r0
 8003974:	441d      	add	r5, r3
		n=n1;
 8003976:	e110      	b.n	8003b9a <get_wspr_channel_symbols+0x3ae>
		callsign=strtok(message,"<> ");
 8003978:	4955      	ldr	r1, [pc, #340]	; (8003ad0 <get_wspr_channel_symbols+0x2e4>)
 800397a:	a807      	add	r0, sp, #28
 800397c:	f00d fde2 	bl	8011544 <strtok>
		grid=strtok(NULL," ");
 8003980:	494e      	ldr	r1, [pc, #312]	; (8003abc <get_wspr_channel_symbols+0x2d0>)
		callsign=strtok(message,"<> ");
 8003982:	4607      	mov	r7, r0
		grid=strtok(NULL," ");
 8003984:	2000      	movs	r0, #0
 8003986:	f00d fddd 	bl	8011544 <strtok>
		powstr=strtok(NULL," ");
 800398a:	494c      	ldr	r1, [pc, #304]	; (8003abc <get_wspr_channel_symbols+0x2d0>)
		grid=strtok(NULL," ");
 800398c:	4604      	mov	r4, r0
		powstr=strtok(NULL," ");
 800398e:	2000      	movs	r0, #0
 8003990:	f00d fdd8 	bl	8011544 <strtok>
		int power = atoi(powstr);
 8003994:	f00c ff72 	bl	801087c <atoi>
		if( power < 0 ) power=0;
 8003998:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 800399a:	4b4c      	ldr	r3, [pc, #304]	; (8003acc <get_wspr_channel_symbols+0x2e0>)
 800399c:	bfa8      	it	ge
 800399e:	203c      	movge	r0, #60	; 0x3c
 80039a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80039a4:	fba3 2300 	umull	r2, r3, r3, r0
 80039a8:	aa0d      	add	r2, sp, #52	; 0x34
 80039aa:	08db      	lsrs	r3, r3, #3
 80039ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80039b0:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 80039b4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80039b8:	4405      	add	r5, r0
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 80039ba:	4638      	mov	r0, r7
 80039bc:	f7fc fd40 	bl	8000440 <strlen>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80039c0:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <get_wspr_channel_symbols+0x2e8>)
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 80039c2:	07ba      	lsls	r2, r7, #30
		ntype=-(power+1);
 80039c4:	ea6f 0505 	mvn.w	r5, r5
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80039c8:	4403      	add	r3, r0
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 80039ca:	f000 8282 	beq.w	8003ed2 <get_wspr_channel_symbols+0x6e6>
	} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {
 80039ce:	07fe      	lsls	r6, r7, #31
 80039d0:	f140 8350 	bpl.w	8004074 <get_wspr_channel_symbols+0x888>
		while (length > 12)
 80039d4:	280c      	cmp	r0, #12
 80039d6:	f240 853a 	bls.w	800444e <get_wspr_channel_symbols+0xc62>
 80039da:	f107 060c 	add.w	r6, r7, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80039de:	461a      	mov	r2, r3
 80039e0:	4619      	mov	r1, r3
 80039e2:	469c      	mov	ip, r3
			c += ((uint32_t)k[10])<<16;
 80039e4:	f816 ec02 	ldrb.w	lr, [r6, #-2]
			length -= 12;
 80039e8:	380c      	subs	r0, #12
			c += ((uint32_t)k[9])<<8;
 80039ea:	f816 3c03 	ldrb.w	r3, [r6, #-3]
			c += ((uint32_t)k[10])<<16;
 80039ee:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
			a += ((uint32_t)k[2])<<16;
 80039f2:	f816 7c0a 	ldrb.w	r7, [r6, #-10]
			c += ((uint32_t)k[11])<<24;
 80039f6:	f816 8c01 	ldrb.w	r8, [r6, #-1]
		while (length > 12)
 80039fa:	280c      	cmp	r0, #12
			c += ((uint32_t)k[11])<<24;
 80039fc:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
			c += k[8];
 8003a00:	f816 3c04 	ldrb.w	r3, [r6, #-4]
			a += ((uint32_t)k[2])<<16;
 8003a04:	ea4f 4707 	mov.w	r7, r7, lsl #16
			c += ((uint32_t)k[11])<<24;
 8003a08:	449e      	add	lr, r3
			a += ((uint32_t)k[1])<<8;
 8003a0a:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
			c += ((uint32_t)k[11])<<24;
 8003a0e:	eb0e 6e08 	add.w	lr, lr, r8, lsl #24
			mix(a,b,c);
 8003a12:	eb07 2703 	add.w	r7, r7, r3, lsl #8
			b += ((uint32_t)k[6])<<16;
 8003a16:	f816 3c06 	ldrb.w	r3, [r6, #-6]
			c += ((uint32_t)k[11])<<24;
 8003a1a:	4472      	add	r2, lr
			a += k[0];
 8003a1c:	f816 ec0c 	ldrb.w	lr, [r6, #-12]
			b += ((uint32_t)k[6])<<16;
 8003a20:	ea4f 4303 	mov.w	r3, r3, lsl #16
			mix(a,b,c);
 8003a24:	4477      	add	r7, lr
			b += ((uint32_t)k[5])<<8;
 8003a26:	f816 ec07 	ldrb.w	lr, [r6, #-7]
			b += ((uint32_t)k[7])<<24;
 8003a2a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
			a += ((uint32_t)k[3])<<24;
 8003a2e:	f816 ec09 	ldrb.w	lr, [r6, #-9]
			mix(a,b,c);
 8003a32:	eb07 670e 	add.w	r7, r7, lr, lsl #24
 8003a36:	eba7 0702 	sub.w	r7, r7, r2
 8003a3a:	4467      	add	r7, ip
			b += k[4];
 8003a3c:	f816 cc08 	ldrb.w	ip, [r6, #-8]
			b += ((uint32_t)k[7])<<24;
 8003a40:	4463      	add	r3, ip
 8003a42:	f816 cc05 	ldrb.w	ip, [r6, #-5]
			mix(a,b,c);
 8003a46:	ea87 7732 	eor.w	r7, r7, r2, ror #28
			b += ((uint32_t)k[7])<<24;
 8003a4a:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 8003a4e:	440b      	add	r3, r1
			mix(a,b,c);
 8003a50:	441a      	add	r2, r3
 8003a52:	eba3 0307 	sub.w	r3, r3, r7
 8003a56:	ea83 63b7 	eor.w	r3, r3, r7, ror #26
 8003a5a:	eb07 0102 	add.w	r1, r7, r2
 8003a5e:	eba2 0203 	sub.w	r2, r2, r3
 8003a62:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8003a66:	440b      	add	r3, r1
 8003a68:	eba1 0102 	sub.w	r1, r1, r2
 8003a6c:	ea81 4732 	eor.w	r7, r1, r2, ror #16
 8003a70:	441a      	add	r2, r3
 8003a72:	eba3 0307 	sub.w	r3, r3, r7
 8003a76:	eb07 0c02 	add.w	ip, r7, r2
 8003a7a:	ea83 3177 	eor.w	r1, r3, r7, ror #13
 8003a7e:	4637      	mov	r7, r6
		while (length > 12)
 8003a80:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 8003a84:	eba2 0201 	sub.w	r2, r2, r1
 8003a88:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8003a8c:	4461      	add	r1, ip
		while (length > 12)
 8003a8e:	d8a9      	bhi.n	80039e4 <get_wspr_channel_symbols+0x1f8>
 8003a90:	4663      	mov	r3, ip
		switch(length)                   /* all the case statements fall through */
 8003a92:	3801      	subs	r0, #1
 8003a94:	280b      	cmp	r0, #11
 8003a96:	f200 829c 	bhi.w	8003fd2 <get_wspr_channel_symbols+0x7e6>
 8003a9a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003a9e:	027f      	.short	0x027f
 8003aa0:	0279027c 	.word	0x0279027c
 8003aa4:	02740276 	.word	0x02740276
 8003aa8:	026e0271 	.word	0x026e0271
 8003aac:	0269026b 	.word	0x0269026b
 8003ab0:	02630266 	.word	0x02630266
 8003ab4:	0260      	.short	0x0260
 8003ab6:	bf00      	nop
 8003ab8:	08014938 	.word	0x08014938
 8003abc:	0801da30 	.word	0x0801da30
 8003ac0:	0801d858 	.word	0x0801d858
 8003ac4:	0801d85c 	.word	0x0801d85c
 8003ac8:	0801d860 	.word	0x0801d860
 8003acc:	cccccccd 	.word	0xcccccccd
 8003ad0:	0801d864 	.word	0x0801d864
 8003ad4:	deadbf81 	.word	0xdeadbf81
		callsign = strtok(message," ");
 8003ad8:	49cb      	ldr	r1, [pc, #812]	; (8003e08 <get_wspr_channel_symbols+0x61c>)
 8003ada:	a807      	add	r0, sp, #28
 8003adc:	f00d fd32 	bl	8011544 <strtok>
		grid = strtok(NULL," ");
 8003ae0:	49c9      	ldr	r1, [pc, #804]	; (8003e08 <get_wspr_channel_symbols+0x61c>)
		callsign = strtok(message," ");
 8003ae2:	4604      	mov	r4, r0
		grid = strtok(NULL," ");
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f00d fd2d 	bl	8011544 <strtok>
		powstr = strtok(NULL," ");
 8003aea:	49c7      	ldr	r1, [pc, #796]	; (8003e08 <get_wspr_channel_symbols+0x61c>)
		grid = strtok(NULL," ");
 8003aec:	4605      	mov	r5, r0
		powstr = strtok(NULL," ");
 8003aee:	2000      	movs	r0, #0
 8003af0:	f00d fd28 	bl	8011544 <strtok>
		int power = atoi(powstr);
 8003af4:	f00c fec2 	bl	801087c <atoi>
 8003af8:	4607      	mov	r7, r0
		n = pack_call(callsign);
 8003afa:	4620      	mov	r0, r4
 8003afc:	f7ff fdb4 	bl	8003668 <pack_call>
			grid4[i]=get_locator_character_code(*(grid+i));
 8003b00:	782b      	ldrb	r3, [r5, #0]
		n = pack_call(callsign);
 8003b02:	4604      	mov	r4, r0
	if( ch >=48 && ch <=57 ) { //0-9
 8003b04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	2a09      	cmp	r2, #9
 8003b0c:	d907      	bls.n	8003b1e <get_wspr_channel_symbols+0x332>
	if( ch == 32 ) {  //space
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	f000 8439 	beq.w	8004386 <get_wspr_channel_symbols+0xb9a>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003b14:	3b41      	subs	r3, #65	; 0x41
 8003b16:	b2da      	uxtb	r2, r3
	return -1;
 8003b18:	2a12      	cmp	r2, #18
 8003b1a:	bf28      	it	cs
 8003b1c:	22ff      	movcs	r2, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003b1e:	7869      	ldrb	r1, [r5, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 8003b20:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b09      	cmp	r3, #9
 8003b28:	d907      	bls.n	8003b3a <get_wspr_channel_symbols+0x34e>
	if( ch == 32 ) {  //space
 8003b2a:	2920      	cmp	r1, #32
 8003b2c:	f000 8428 	beq.w	8004380 <get_wspr_channel_symbols+0xb94>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003b30:	3941      	subs	r1, #65	; 0x41
 8003b32:	b2cb      	uxtb	r3, r1
	return -1;
 8003b34:	2b12      	cmp	r3, #18
 8003b36:	bf28      	it	cs
 8003b38:	23ff      	movcs	r3, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003b3a:	78a9      	ldrb	r1, [r5, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 8003b3c:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
 8003b40:	b2f6      	uxtb	r6, r6
 8003b42:	2e09      	cmp	r6, #9
 8003b44:	d907      	bls.n	8003b56 <get_wspr_channel_symbols+0x36a>
	if( ch == 32 ) {  //space
 8003b46:	2920      	cmp	r1, #32
 8003b48:	f000 8417 	beq.w	800437a <get_wspr_channel_symbols+0xb8e>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003b4c:	3941      	subs	r1, #65	; 0x41
 8003b4e:	b2ce      	uxtb	r6, r1
	return -1;
 8003b50:	2e12      	cmp	r6, #18
 8003b52:	bf28      	it	cs
 8003b54:	26ff      	movcs	r6, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003b56:	78e8      	ldrb	r0, [r5, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 8003b58:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8003b5c:	b2c9      	uxtb	r1, r1
 8003b5e:	2909      	cmp	r1, #9
 8003b60:	d907      	bls.n	8003b72 <get_wspr_channel_symbols+0x386>
	if( ch == 32 ) {  //space
 8003b62:	2820      	cmp	r0, #32
 8003b64:	f000 8406 	beq.w	8004374 <get_wspr_channel_symbols+0xb88>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003b68:	3841      	subs	r0, #65	; 0x41
 8003b6a:	b2c1      	uxtb	r1, r0
	return -1;
 8003b6c:	2912      	cmp	r1, #18
 8003b6e:	bf28      	it	cs
 8003b70:	21ff      	movcs	r1, #255	; 0xff
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8003b72:	f06f 0509 	mvn.w	r5, #9
 8003b76:	b21b      	sxth	r3, r3
	m=m*128+power+64;
 8003b78:	f107 0040 	add.w	r0, r7, #64	; 0x40
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8003b7c:	fb05 f202 	mul.w	r2, r5, r2
 8003b80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b84:	25b4      	movs	r5, #180	; 0xb4
 8003b86:	32b3      	adds	r2, #179	; 0xb3
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	1b92      	subs	r2, r2, r6
 8003b8c:	fb05 3302 	mla	r3, r5, r2, r3
 8003b90:	aa40      	add	r2, sp, #256	; 0x100
 8003b92:	440b      	add	r3, r1
	return m;
 8003b94:	9202      	str	r2, [sp, #8]
	m=m*128+power+64;
 8003b96:	eb00 15c3 	add.w	r5, r0, r3, lsl #7
	memset(data,0,sizeof(data));
 8003b9a:	2600      	movs	r6, #0
	it=0xFF & (n>>20);
 8003b9c:	0d21      	lsrs	r1, r4, #20
	it=0xFF & (n>>12);
 8003b9e:	0b23      	lsrs	r3, r4, #12
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8003ba0:	f3c5 4083 	ubfx	r0, r5, #18, #4
	data[0]=it;
 8003ba4:	4632      	mov	r2, r6
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003ba6:	f8dd 9008 	ldr.w	r9, [sp, #8]
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8003baa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	memset(data,0,sizeof(data));
 8003bae:	f8cd 6017 	str.w	r6, [sp, #23]
	data[0]=it;
 8003bb2:	f361 0207 	bfi	r2, r1, #0, #8
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003bb6:	4631      	mov	r1, r6
			ENCODE(sym,encstate);
 8003bb8:	46b2      	mov	sl, r6
	data[0]=it;
 8003bba:	f363 220f 	bfi	r2, r3, #8, #8
	it=0xFF & (n>>4);
 8003bbe:	0923      	lsrs	r3, r4, #4
	data[0]=it;
 8003bc0:	f363 4217 	bfi	r2, r3, #16, #8
	it=0xFF & (m>>10);
 8003bc4:	12ab      	asrs	r3, r5, #10
 8003bc6:	f88d 3014 	strb.w	r3, [sp, #20]
	it=0xFF & (m>>2);
 8003bca:	10ab      	asrs	r3, r5, #2
	data[0]=it;
 8003bcc:	f360 621f 	bfi	r2, r0, #24, #8
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003bd0:	4648      	mov	r0, r9
	it=0xFF & (m>>2);
 8003bd2:	f88d 3015 	strb.w	r3, [sp, #21]
	it=(m & 0x03)<<6 ;
 8003bd6:	01ab      	lsls	r3, r5, #6
	data[0]=it;
 8003bd8:	9204      	str	r2, [sp, #16]
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003bda:	22b0      	movs	r2, #176	; 0xb0
	it=(m & 0x03)<<6 ;
 8003bdc:	f88d 3016 	strb.w	r3, [sp, #22]
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003be0:	f00d fc97 	bl	8011512 <memset>
	while(nbytes-- != 0) {
 8003be4:	ab04      	add	r3, sp, #16
			ENCODE(sym,encstate);
 8003be6:	4989      	ldr	r1, [pc, #548]	; (8003e0c <get_wspr_channel_symbols+0x620>)
 8003be8:	4a89      	ldr	r2, [pc, #548]	; (8003e10 <get_wspr_channel_symbols+0x624>)
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	4b89      	ldr	r3, [pc, #548]	; (8003e14 <get_wspr_channel_symbols+0x628>)
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003bee:	9801      	ldr	r0, [sp, #4]
 8003bf0:	f810 7b01 	ldrb.w	r7, [r0], #1
 8003bf4:	9001      	str	r0, [sp, #4]
 8003bf6:	09f8      	lsrs	r0, r7, #7
 8003bf8:	f3c7 1480 	ubfx	r4, r7, #6, #1
 8003bfc:	f3c7 06c0 	ubfx	r6, r7, #3, #1
 8003c00:	ea40 004a 	orr.w	r0, r0, sl, lsl #1
 8003c04:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
			ENCODE(sym,encstate);
 8003c08:	ea00 0501 	and.w	r5, r0, r1
 8003c0c:	4010      	ands	r0, r2
 8003c0e:	ea85 4515 	eor.w	r5, r5, r5, lsr #16
 8003c12:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003c16:	ea85 2515 	eor.w	r5, r5, r5, lsr #8
 8003c1a:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003c1e:	b2ed      	uxtb	r5, r5
 8003c20:	b2c0      	uxtb	r0, r0
 8003c22:	5d5d      	ldrb	r5, [r3, r5]
 8003c24:	f813 e000 	ldrb.w	lr, [r3, r0]
 8003c28:	ea04 0002 	and.w	r0, r4, r2
 8003c2c:	ea4e 0e45 	orr.w	lr, lr, r5, lsl #1
 8003c30:	ea04 0501 	and.w	r5, r4, r1
 8003c34:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003c38:	ea85 4515 	eor.w	r5, r5, r5, lsr #16
 8003c3c:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003c40:	ea85 2515 	eor.w	r5, r5, r5, lsr #8
 8003c44:	b2c0      	uxtb	r0, r0
 8003c46:	b2ed      	uxtb	r5, r5
 8003c48:	5c18      	ldrb	r0, [r3, r0]
			*symbols++ = sym >> 1;
 8003c4a:	ea4f 0b6e 	mov.w	fp, lr, asr #1
			ENCODE(sym,encstate);
 8003c4e:	5d5d      	ldrb	r5, [r3, r5]
			*symbols++ = sym & 1;
 8003c50:	f00e 0e01 	and.w	lr, lr, #1
			ENCODE(sym,encstate);
 8003c54:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8003c58:	9000      	str	r0, [sp, #0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c5a:	f3c7 1040 	ubfx	r0, r7, #5, #1
 8003c5e:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
			ENCODE(sym,encstate);
 8003c62:	ea00 0401 	and.w	r4, r0, r1
 8003c66:	ea84 4414 	eor.w	r4, r4, r4, lsr #16
 8003c6a:	ea84 2414 	eor.w	r4, r4, r4, lsr #8
 8003c6e:	b2e4      	uxtb	r4, r4
 8003c70:	5d1d      	ldrb	r5, [r3, r4]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c72:	f3c7 1400 	ubfx	r4, r7, #4, #1
 8003c76:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
			ENCODE(sym,encstate);
 8003c7a:	4010      	ands	r0, r2
 8003c7c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c80:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
			ENCODE(sym,encstate);
 8003c84:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003c88:	b2c0      	uxtb	r0, r0
 8003c8a:	f813 c000 	ldrb.w	ip, [r3, r0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c8e:	f3c7 0080 	ubfx	r0, r7, #2, #1
			ENCODE(sym,encstate);
 8003c92:	ea4c 0c45 	orr.w	ip, ip, r5, lsl #1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003c96:	f3c7 0540 	ubfx	r5, r7, #1, #1
 8003c9a:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
 8003c9e:	f007 0701 	and.w	r7, r7, #1
 8003ca2:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
 8003ca6:	ea47 0a45 	orr.w	sl, r7, r5, lsl #1
			ENCODE(sym,encstate);
 8003caa:	ea06 0701 	and.w	r7, r6, r1
 8003cae:	4016      	ands	r6, r2
 8003cb0:	ea87 4717 	eor.w	r7, r7, r7, lsr #16
 8003cb4:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8003cb8:	ea87 2717 	eor.w	r7, r7, r7, lsr #8
 8003cbc:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8003cc0:	b2ff      	uxtb	r7, r7
 8003cc2:	b2f6      	uxtb	r6, r6
 8003cc4:	f813 8007 	ldrb.w	r8, [r3, r7]
 8003cc8:	5d9f      	ldrb	r7, [r3, r6]
 8003cca:	ea05 0601 	and.w	r6, r5, r1
 8003cce:	4015      	ands	r5, r2
 8003cd0:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8003cd4:	ea85 4515 	eor.w	r5, r5, r5, lsr #16
 8003cd8:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8003cdc:	ea85 2515 	eor.w	r5, r5, r5, lsr #8
 8003ce0:	b2f6      	uxtb	r6, r6
 8003ce2:	b2ed      	uxtb	r5, r5
 8003ce4:	ea47 0748 	orr.w	r7, r7, r8, lsl #1
 8003ce8:	f813 8006 	ldrb.w	r8, [r3, r6]
 8003cec:	5d5e      	ldrb	r6, [r3, r5]
 8003cee:	ea04 0501 	and.w	r5, r4, r1
 8003cf2:	4014      	ands	r4, r2
 8003cf4:	ea85 4515 	eor.w	r5, r5, r5, lsr #16
 8003cf8:	ea84 4414 	eor.w	r4, r4, r4, lsr #16
 8003cfc:	ea85 2515 	eor.w	r5, r5, r5, lsr #8
 8003d00:	ea84 2414 	eor.w	r4, r4, r4, lsr #8
 8003d04:	b2ed      	uxtb	r5, r5
 8003d06:	b2e4      	uxtb	r4, r4
 8003d08:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
 8003d0c:	f813 8005 	ldrb.w	r8, [r3, r5]
 8003d10:	5d1d      	ldrb	r5, [r3, r4]
 8003d12:	ea00 0401 	and.w	r4, r0, r1
 8003d16:	4010      	ands	r0, r2
 8003d18:	ea84 4414 	eor.w	r4, r4, r4, lsr #16
 8003d1c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003d20:	ea84 2414 	eor.w	r4, r4, r4, lsr #8
 8003d24:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003d28:	b2e4      	uxtb	r4, r4
 8003d2a:	b2c0      	uxtb	r0, r0
 8003d2c:	ea45 0548 	orr.w	r5, r5, r8, lsl #1
 8003d30:	f813 8004 	ldrb.w	r8, [r3, r4]
 8003d34:	5c1c      	ldrb	r4, [r3, r0]
 8003d36:	ea0a 0001 	and.w	r0, sl, r1
 8003d3a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003d3e:	ea44 0448 	orr.w	r4, r4, r8, lsl #1
 8003d42:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003d46:	b2c0      	uxtb	r0, r0
 8003d48:	f813 8000 	ldrb.w	r8, [r3, r0]
 8003d4c:	ea0a 0002 	and.w	r0, sl, r2
 8003d50:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003d54:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003d58:	b2c0      	uxtb	r0, r0
 8003d5a:	5c18      	ldrb	r0, [r3, r0]
 8003d5c:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
			*symbols++ = sym >> 1;
 8003d60:	f04f 0800 	mov.w	r8, #0
 8003d64:	f36b 0807 	bfi	r8, fp, #0, #8
 8003d68:	ea4f 0b6c 	mov.w	fp, ip, asr #1
			*symbols++ = sym & 1;
 8003d6c:	f00c 0c01 	and.w	ip, ip, #1
			*symbols++ = sym >> 1;
 8003d70:	f36e 280f 	bfi	r8, lr, #8, #8
 8003d74:	f04f 0e00 	mov.w	lr, #0
 8003d78:	f36b 0e07 	bfi	lr, fp, #0, #8
 8003d7c:	ea4f 0b67 	mov.w	fp, r7, asr #1
			*symbols++ = sym & 1;
 8003d80:	f007 0701 	and.w	r7, r7, #1
			*symbols++ = sym >> 1;
 8003d84:	f36c 2e0f 	bfi	lr, ip, #8, #8
 8003d88:	f04f 0c00 	mov.w	ip, #0
 8003d8c:	f36b 0c07 	bfi	ip, fp, #0, #8
 8003d90:	ea4f 0b66 	mov.w	fp, r6, asr #1
			*symbols++ = sym & 1;
 8003d94:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8003d98:	f367 2c0f 	bfi	ip, r7, #8, #8
 8003d9c:	2700      	movs	r7, #0
 8003d9e:	f36b 0707 	bfi	r7, fp, #0, #8
 8003da2:	f366 270f 	bfi	r7, r6, #8, #8
 8003da6:	9e00      	ldr	r6, [sp, #0]
 8003da8:	1076      	asrs	r6, r6, #1
 8003daa:	f366 4817 	bfi	r8, r6, #16, #8
			*symbols++ = sym & 1;
 8003dae:	9e00      	ldr	r6, [sp, #0]
 8003db0:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8003db4:	f366 681f 	bfi	r8, r6, #24, #8
 8003db8:	106e      	asrs	r6, r5, #1
			*symbols++ = sym & 1;
 8003dba:	f005 0501 	and.w	r5, r5, #1
			*symbols++ = sym >> 1;
 8003dbe:	f366 4e17 	bfi	lr, r6, #16, #8
 8003dc2:	f849 8b10 	str.w	r8, [r9], #16
 8003dc6:	f365 6e1f 	bfi	lr, r5, #24, #8
 8003dca:	1065      	asrs	r5, r4, #1
			*symbols++ = sym & 1;
 8003dcc:	f004 0401 	and.w	r4, r4, #1
			*symbols++ = sym >> 1;
 8003dd0:	f365 4c17 	bfi	ip, r5, #16, #8
 8003dd4:	f849 ec0c 	str.w	lr, [r9, #-12]
 8003dd8:	f364 6c1f 	bfi	ip, r4, #24, #8
 8003ddc:	1044      	asrs	r4, r0, #1
			*symbols++ = sym & 1;
 8003dde:	f000 0001 	and.w	r0, r0, #1
			*symbols++ = sym >> 1;
 8003de2:	f364 4717 	bfi	r7, r4, #16, #8
 8003de6:	f849 cc08 	str.w	ip, [r9, #-8]
 8003dea:	f360 671f 	bfi	r7, r0, #24, #8
	while(nbytes-- != 0) {
 8003dee:	a86c      	add	r0, sp, #432	; 0x1b0
 8003df0:	4581      	cmp	r9, r0
			*symbols++ = sym >> 1;
 8003df2:	f849 7c04 	str.w	r7, [r9, #-4]
	while(nbytes-- != 0) {
 8003df6:	f47f aefa 	bne.w	8003bee <get_wspr_channel_symbols+0x402>
 8003dfa:	f04f 0e00 	mov.w	lr, #0
 8003dfe:	a917      	add	r1, sp, #92	; 0x5c
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003e00:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003e18 <get_wspr_channel_symbols+0x62c>
	i = p = 0;
 8003e04:	46f4      	mov	ip, lr
 8003e06:	e009      	b.n	8003e1c <get_wspr_channel_symbols+0x630>
 8003e08:	0801da30 	.word	0x0801da30
 8003e0c:	f2d05351 	.word	0xf2d05351
 8003e10:	e4613c47 	.word	0xe4613c47
 8003e14:	0801d878 	.word	0x0801d878
 8003e18:	84422110 	.word	0x84422110
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003e1c:	fa5f f28e 	uxtb.w	r2, lr
 8003e20:	2300      	movs	r3, #0
			tmp[j] = sym[p];
 8003e22:	f50c 70d8 	add.w	r0, ip, #432	; 0x1b0
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003e26:	0295      	lsls	r5, r2, #10
			tmp[j] = sym[p];
 8003e28:	eb0d 0400 	add.w	r4, sp, r0
			p++;
 8003e2c:	f10c 0001 	add.w	r0, ip, #1
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003e30:	18ad      	adds	r5, r5, r2
 8003e32:	f143 0300 	adc.w	r3, r3, #0
 8003e36:	052a      	lsls	r2, r5, #20
 8003e38:	051e      	lsls	r6, r3, #20
 8003e3a:	18aa      	adds	r2, r5, r2
 8003e3c:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 8003e40:	eb43 0306 	adc.w	r3, r3, r6
 8003e44:	1892      	adds	r2, r2, r2
 8003e46:	415b      	adcs	r3, r3
 8003e48:	ea02 060a 	and.w	r6, r2, sl
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	0235      	lsls	r5, r6, #8
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	19ad      	adds	r5, r5, r6
 8003e56:	ea42 6216 	orr.w	r2, r2, r6, lsr #24
 8003e5a:	ea4f 4705 	mov.w	r7, r5, lsl #16
 8003e5e:	eb43 0202 	adc.w	r2, r3, r2
 8003e62:	19ef      	adds	r7, r5, r7
 8003e64:	ea4f 4902 	mov.w	r9, r2, lsl #16
 8003e68:	ea4f 2807 	mov.w	r8, r7, lsl #8
 8003e6c:	ea49 4915 	orr.w	r9, r9, r5, lsr #16
 8003e70:	eb42 0209 	adc.w	r2, r2, r9
 8003e74:	eb18 0806 	adds.w	r8, r8, r6
 8003e78:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003e7c:	ea42 6217 	orr.w	r2, r2, r7, lsr #24
 8003e80:	eb43 0302 	adc.w	r3, r3, r2
 8003e84:	b2db      	uxtb	r3, r3
		if (j < 162 ) {
 8003e86:	2ba1      	cmp	r3, #161	; 0xa1
 8003e88:	f200 80ed 	bhi.w	8004066 <get_wspr_channel_symbols+0x87a>
			p++;
 8003e8c:	fa5f fc80 	uxtb.w	ip, r0
			tmp[j] = sym[p];
 8003e90:	f814 2cb0 	ldrb.w	r2, [r4, #-176]
	while (p < 162) {
 8003e94:	f10e 0e01 	add.w	lr, lr, #1
 8003e98:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
			tmp[j] = sym[p];
 8003e9c:	54ca      	strb	r2, [r1, r3]
	while (p < 162) {
 8003e9e:	d1bd      	bne.n	8003e1c <get_wspr_channel_symbols+0x630>
	memcpy(sym, tmp, sizeof(tmp));
 8003ea0:	22a2      	movs	r2, #162	; 0xa2
 8003ea2:	9802      	ldr	r0, [sp, #8]
 8003ea4:	f00d fc28 	bl	80116f8 <memcpy>
	for (i=0; i < 162; i++) {
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	f10d 02ff 	add.w	r2, sp, #255	; 0xff
 8003eae:	48ca      	ldr	r0, [pc, #808]	; (80041d8 <get_wspr_channel_symbols+0x9ec>)
 8003eb0:	1e59      	subs	r1, r3, #1
 8003eb2:	f20d 15a1 	addw	r5, sp, #417	; 0x1a1
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003eb6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003eba:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8003ebe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	for (i=0; i < 162; i++) {
 8003ec2:	42aa      	cmp	r2, r5
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003ec4:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i=0; i < 162; i++) {
 8003ec8:	d1f5      	bne.n	8003eb6 <get_wspr_channel_symbols+0x6ca>
	return 1;
 8003eca:	2001      	movs	r0, #1
}
 8003ecc:	b06d      	add	sp, #436	; 0x1b4
 8003ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (length > 12)
 8003ed2:	280c      	cmp	r0, #12
 8003ed4:	f240 824b 	bls.w	800436e <get_wspr_channel_symbols+0xb82>
 8003ed8:	f107 060c 	add.w	r6, r7, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003edc:	461a      	mov	r2, r3
 8003ede:	4619      	mov	r1, r3
			c += k[2];
 8003ee0:	f856 7c04 	ldr.w	r7, [r6, #-4]
			length -= 12;
 8003ee4:	380c      	subs	r0, #12
			c += k[2];
 8003ee6:	443a      	add	r2, r7
			mix(a,b,c);
 8003ee8:	f856 7c0c 	ldr.w	r7, [r6, #-12]
		while (length > 12)
 8003eec:	280c      	cmp	r0, #12
			mix(a,b,c);
 8003eee:	eba7 0702 	sub.w	r7, r7, r2
 8003ef2:	441f      	add	r7, r3
			b += k[1];
 8003ef4:	f856 3c08 	ldr.w	r3, [r6, #-8]
			mix(a,b,c);
 8003ef8:	ea87 7732 	eor.w	r7, r7, r2, ror #28
			b += k[1];
 8003efc:	440b      	add	r3, r1
			mix(a,b,c);
 8003efe:	441a      	add	r2, r3
 8003f00:	eba3 0307 	sub.w	r3, r3, r7
 8003f04:	ea83 63b7 	eor.w	r3, r3, r7, ror #26
 8003f08:	4417      	add	r7, r2
 8003f0a:	eba2 0203 	sub.w	r2, r2, r3
 8003f0e:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8003f12:	443b      	add	r3, r7
 8003f14:	eba7 0702 	sub.w	r7, r7, r2
 8003f18:	ea87 4732 	eor.w	r7, r7, r2, ror #16
 8003f1c:	441a      	add	r2, r3
 8003f1e:	eba3 0307 	sub.w	r3, r3, r7
 8003f22:	ea83 3177 	eor.w	r1, r3, r7, ror #13
 8003f26:	eb07 0302 	add.w	r3, r7, r2
 8003f2a:	4637      	mov	r7, r6
		while (length > 12)
 8003f2c:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 8003f30:	eba2 0201 	sub.w	r2, r2, r1
 8003f34:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8003f38:	4419      	add	r1, r3
		while (length > 12)
 8003f3a:	d8d1      	bhi.n	8003ee0 <get_wspr_channel_symbols+0x6f4>
		switch(length)
 8003f3c:	3801      	subs	r0, #1
 8003f3e:	280b      	cmp	r0, #11
 8003f40:	d847      	bhi.n	8003fd2 <get_wspr_channel_symbols+0x7e6>
 8003f42:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003f46:	002b      	.short	0x002b
 8003f48:	015f0140 	.word	0x015f0140
 8003f4c:	015a008d 	.word	0x015a008d
 8003f50:	014e0155 	.word	0x014e0155
 8003f54:	014b008b 	.word	0x014b008b
 8003f58:	00870146 	.word	0x00870146
 8003f5c:	0143      	.short	0x0143
		case 12: c+=((uint32_t)k[11])<<24;
 8003f5e:	7af8      	ldrb	r0, [r7, #11]
 8003f60:	eb02 6200 	add.w	r2, r2, r0, lsl #24
		case 11: c+=((uint32_t)k[10])<<16;
 8003f64:	7ab8      	ldrb	r0, [r7, #10]
 8003f66:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		case 10: c+=((uint32_t)k[9])<<8;
 8003f6a:	7a78      	ldrb	r0, [r7, #9]
 8003f6c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		case 9 : c+=k[8];
 8003f70:	7a38      	ldrb	r0, [r7, #8]
 8003f72:	4402      	add	r2, r0
		case 8 : b+=((uint32_t)k[7])<<24;
 8003f74:	79f8      	ldrb	r0, [r7, #7]
 8003f76:	eb01 6100 	add.w	r1, r1, r0, lsl #24
		case 7 : b+=((uint32_t)k[6])<<16;
 8003f7a:	79b8      	ldrb	r0, [r7, #6]
 8003f7c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		case 6 : b+=((uint32_t)k[5])<<8;
 8003f80:	7978      	ldrb	r0, [r7, #5]
 8003f82:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		case 5 : b+=k[4];
 8003f86:	7938      	ldrb	r0, [r7, #4]
 8003f88:	4401      	add	r1, r0
		case 4 : a+=((uint32_t)k[3])<<24;
 8003f8a:	78f8      	ldrb	r0, [r7, #3]
 8003f8c:	eb03 6300 	add.w	r3, r3, r0, lsl #24
		case 3 : a+=((uint32_t)k[2])<<16;
 8003f90:	78b8      	ldrb	r0, [r7, #2]
 8003f92:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=((uint32_t)k[1])<<8;
 8003f96:	7878      	ldrb	r0, [r7, #1]
 8003f98:	eb03 2300 	add.w	r3, r3, r0, lsl #8
		case 1 : a+=k[0];
 8003f9c:	7838      	ldrb	r0, [r7, #0]
 8003f9e:	4403      	add	r3, r0
	final(a,b,c);
 8003fa0:	404a      	eors	r2, r1
 8003fa2:	eba2 40b1 	sub.w	r0, r2, r1, ror #18
 8003fa6:	4043      	eors	r3, r0
 8003fa8:	eba3 5370 	sub.w	r3, r3, r0, ror #21
 8003fac:	4059      	eors	r1, r3
 8003fae:	eba1 12f3 	sub.w	r2, r1, r3, ror #7
 8003fb2:	ea80 0102 	eor.w	r1, r0, r2
 8003fb6:	eba1 4132 	sub.w	r1, r1, r2, ror #16
 8003fba:	404b      	eors	r3, r1
 8003fbc:	eba3 7331 	sub.w	r3, r3, r1, ror #28
 8003fc0:	405a      	eors	r2, r3
 8003fc2:	eba2 43b3 	sub.w	r3, r2, r3, ror #18
 8003fc6:	ea81 0203 	eor.w	r2, r1, r3
 8003fca:	eba2 2233 	sub.w	r2, r2, r3, ror #8
	c=(32767&c);
 8003fce:	f3c2 020e 	ubfx	r2, r2, #0, #15
		memset(grid6,0,sizeof(char)*7);
 8003fd2:	2300      	movs	r3, #0
		m=128*ihash + ntype + 64;
 8003fd4:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
		memset(grid6,0,sizeof(char)*7);
 8003fd8:	aa40      	add	r2, sp, #256	; 0x100
		j=strlen(grid);
 8003fda:	4620      	mov	r0, r4
		memset(grid6,0,sizeof(char)*7);
 8003fdc:	9340      	str	r3, [sp, #256]	; 0x100
		m=128*ihash + ntype + 64;
 8003fde:	3540      	adds	r5, #64	; 0x40
		memset(grid6,0,sizeof(char)*7);
 8003fe0:	9202      	str	r2, [sp, #8]
 8003fe2:	f8cd 3103 	str.w	r3, [sp, #259]	; 0x103
		j=strlen(grid);
 8003fe6:	f7fc fa2b 	bl	8000440 <strlen>
		for(i=0; i<j-1; i++) {
 8003fea:	1e42      	subs	r2, r0, #1
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	dd29      	ble.n	8004044 <get_wspr_channel_symbols+0x858>
 8003ff0:	1ca3      	adds	r3, r4, #2
 8003ff2:	9902      	ldr	r1, [sp, #8]
 8003ff4:	1acb      	subs	r3, r1, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	f240 814a 	bls.w	8004290 <get_wspr_channel_symbols+0xaa4>
 8003ffc:	3802      	subs	r0, #2
 8003ffe:	2805      	cmp	r0, #5
 8004000:	f240 8146 	bls.w	8004290 <get_wspr_channel_symbols+0xaa4>
			grid6[i]=grid[i+1];
 8004004:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8004008:	0790      	lsls	r0, r2, #30
 800400a:	9340      	str	r3, [sp, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 800400c:	f022 0303 	bic.w	r3, r2, #3
 8004010:	d018      	beq.n	8004044 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8004012:	18e0      	adds	r0, r4, r3
		for(i=0; i<j-1; i++) {
 8004014:	1c59      	adds	r1, r3, #1
			grid6[i]=grid[i+1];
 8004016:	f503 76d8 	add.w	r6, r3, #432	; 0x1b0
 800401a:	7847      	ldrb	r7, [r0, #1]
		for(i=0; i<j-1; i++) {
 800401c:	428a      	cmp	r2, r1
			grid6[i]=grid[i+1];
 800401e:	446e      	add	r6, sp
 8004020:	f806 7cb0 	strb.w	r7, [r6, #-176]
		for(i=0; i<j-1; i++) {
 8004024:	dd0e      	ble.n	8004044 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8004026:	f203 11b1 	addw	r1, r3, #433	; 0x1b1
		for(i=0; i<j-1; i++) {
 800402a:	3302      	adds	r3, #2
			grid6[i]=grid[i+1];
 800402c:	7886      	ldrb	r6, [r0, #2]
 800402e:	4469      	add	r1, sp
		for(i=0; i<j-1; i++) {
 8004030:	429a      	cmp	r2, r3
			grid6[i]=grid[i+1];
 8004032:	f801 6cb0 	strb.w	r6, [r1, #-176]
		for(i=0; i<j-1; i++) {
 8004036:	dd05      	ble.n	8004044 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 8004038:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800403c:	78c2      	ldrb	r2, [r0, #3]
 800403e:	446b      	add	r3, sp
 8004040:	f803 2cb0 	strb.w	r2, [r3, #-176]
		grid6[5]=grid[0];
 8004044:	7823      	ldrb	r3, [r4, #0]
		n = pack_call(grid6);
 8004046:	9802      	ldr	r0, [sp, #8]
		grid6[5]=grid[0];
 8004048:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
		n = pack_call(grid6);
 800404c:	f7ff fb0c 	bl	8003668 <pack_call>
 8004050:	4604      	mov	r4, r0
 8004052:	e5a2      	b.n	8003b9a <get_wspr_channel_symbols+0x3ae>
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 8004054:	68b8      	ldr	r0, [r7, #8]
 8004056:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800405a:	4402      	add	r2, r0
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4401      	add	r1, r0
 8004060:	6838      	ldr	r0, [r7, #0]
 8004062:	4403      	add	r3, r0
 8004064:	e79c      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
	while (p < 162) {
 8004066:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
 800406a:	f10e 0e01 	add.w	lr, lr, #1
 800406e:	f47f aed5 	bne.w	8003e1c <get_wspr_channel_symbols+0x630>
 8004072:	e715      	b.n	8003ea0 <get_wspr_channel_symbols+0x6b4>
		while (length > 12)
 8004074:	280c      	cmp	r0, #12
 8004076:	f240 81bf 	bls.w	80043f8 <get_wspr_channel_symbols+0xc0c>
 800407a:	f107 060c 	add.w	r6, r7, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800407e:	461a      	mov	r2, r3
 8004080:	4619      	mov	r1, r3
			c += k[4] + (((uint32_t)k[5])<<16);
 8004082:	f836 cc02 	ldrh.w	ip, [r6, #-2]
			length -= 12;
 8004086:	380c      	subs	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 8004088:	f836 7c04 	ldrh.w	r7, [r6, #-4]
		while (length > 12)
 800408c:	280c      	cmp	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 800408e:	eb07 470c 	add.w	r7, r7, ip, lsl #16
			a += k[0] + (((uint32_t)k[1])<<16);
 8004092:	f836 cc0a 	ldrh.w	ip, [r6, #-10]
			c += k[4] + (((uint32_t)k[5])<<16);
 8004096:	4417      	add	r7, r2
			a += k[0] + (((uint32_t)k[1])<<16);
 8004098:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
			mix(a,b,c);
 800409c:	eb02 420c 	add.w	r2, r2, ip, lsl #16
			b += k[2] + (((uint32_t)k[3])<<16);
 80040a0:	f836 cc06 	ldrh.w	ip, [r6, #-6]
			mix(a,b,c);
 80040a4:	eba2 0207 	sub.w	r2, r2, r7
 80040a8:	441a      	add	r2, r3
			b += k[2] + (((uint32_t)k[3])<<16);
 80040aa:	f836 3c08 	ldrh.w	r3, [r6, #-8]
 80040ae:	eb03 430c 	add.w	r3, r3, ip, lsl #16
			mix(a,b,c);
 80040b2:	ea82 7237 	eor.w	r2, r2, r7, ror #28
			b += k[2] + (((uint32_t)k[3])<<16);
 80040b6:	440b      	add	r3, r1
			mix(a,b,c);
 80040b8:	441f      	add	r7, r3
 80040ba:	eba3 0302 	sub.w	r3, r3, r2
 80040be:	ea83 63b2 	eor.w	r3, r3, r2, ror #26
 80040c2:	443a      	add	r2, r7
 80040c4:	eba7 0703 	sub.w	r7, r7, r3
 80040c8:	ea87 6133 	eor.w	r1, r7, r3, ror #24
 80040cc:	4413      	add	r3, r2
 80040ce:	eba2 0201 	sub.w	r2, r2, r1
 80040d2:	eb01 0703 	add.w	r7, r1, r3
 80040d6:	ea82 4231 	eor.w	r2, r2, r1, ror #16
 80040da:	eba3 0302 	sub.w	r3, r3, r2
 80040de:	ea83 3172 	eor.w	r1, r3, r2, ror #13
 80040e2:	eb02 0307 	add.w	r3, r2, r7
 80040e6:	eba7 0701 	sub.w	r7, r7, r1
 80040ea:	ea87 7231 	eor.w	r2, r7, r1, ror #28
 80040ee:	4637      	mov	r7, r6
 80040f0:	4419      	add	r1, r3
		while (length > 12)
 80040f2:	f106 060c 	add.w	r6, r6, #12
 80040f6:	d8c4      	bhi.n	8004082 <get_wspr_channel_symbols+0x896>
		switch(length)
 80040f8:	3801      	subs	r0, #1
 80040fa:	280b      	cmp	r0, #11
 80040fc:	f63f af69 	bhi.w	8003fd2 <get_wspr_channel_symbols+0x7e6>
 8004100:	a601      	add	r6, pc, #4	; (adr r6, 8004108 <get_wspr_channel_symbols+0x91c>)
 8004102:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8004106:	bf00      	nop
 8004108:	08003f9d 	.word	0x08003f9d
 800410c:	080041c7 	.word	0x080041c7
 8004110:	080041c1 	.word	0x080041c1
 8004114:	08004243 	.word	0x08004243
 8004118:	0800423f 	.word	0x0800423f
 800411c:	0800422f 	.word	0x0800422f
 8004120:	08004229 	.word	0x08004229
 8004124:	08004213 	.word	0x08004213
 8004128:	0800420f 	.word	0x0800420f
 800412c:	08004255 	.word	0x08004255
 8004130:	0800424f 	.word	0x0800424f
 8004134:	0800426f 	.word	0x0800426f
		for (i=0; i<i1; i++) {
 8004138:	ab40      	add	r3, sp, #256	; 0x100
 800413a:	2800      	cmp	r0, #0
 800413c:	f000 812e 	beq.w	800439c <get_wspr_channel_symbols+0xbb0>
 8004140:	461a      	mov	r2, r3
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	1c6b      	adds	r3, r5, #1
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	f240 8158 	bls.w	80043fe <get_wspr_channel_symbols+0xc12>
 800414e:	1e43      	subs	r3, r0, #1
 8004150:	2b05      	cmp	r3, #5
 8004152:	f240 8154 	bls.w	80043fe <get_wspr_channel_symbols+0xc12>
			call6[i]=callsign[i];
 8004156:	682b      	ldr	r3, [r5, #0]
 8004158:	0781      	lsls	r1, r0, #30
 800415a:	9340      	str	r3, [sp, #256]	; 0x100
		for (i=0; i<i1; i++) {
 800415c:	f020 0303 	bic.w	r3, r0, #3
 8004160:	d017      	beq.n	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 8004162:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
 8004166:	5ce9      	ldrb	r1, [r5, r3]
 8004168:	446a      	add	r2, sp
 800416a:	f802 1cb0 	strb.w	r1, [r2, #-176]
		for (i=0; i<i1; i++) {
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	4290      	cmp	r0, r2
 8004172:	d90e      	bls.n	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 8004174:	5ca9      	ldrb	r1, [r5, r2]
		for (i=0; i<i1; i++) {
 8004176:	3302      	adds	r3, #2
			call6[i]=callsign[i];
 8004178:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
		for (i=0; i<i1; i++) {
 800417c:	4298      	cmp	r0, r3
			call6[i]=callsign[i];
 800417e:	446a      	add	r2, sp
 8004180:	f802 1cb0 	strb.w	r1, [r2, #-176]
		for (i=0; i<i1; i++) {
 8004184:	d905      	bls.n	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 8004186:	5cea      	ldrb	r2, [r5, r3]
 8004188:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800418c:	446b      	add	r3, sp
 800418e:	f803 2cb0 	strb.w	r2, [r3, #-176]
		call6[i] = '\0';
 8004192:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004196:	2200      	movs	r2, #0
		int nc = callsign[i1+1];
 8004198:	442f      	add	r7, r5
		*n=pack_call(call6);
 800419a:	9802      	ldr	r0, [sp, #8]
		call6[i] = '\0';
 800419c:	446b      	add	r3, sp
 800419e:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 80041a2:	f7ff fa61 	bl	8003668 <pack_call>
		int nc = callsign[i1+1];
 80041a6:	787a      	ldrb	r2, [r7, #1]
		*n=pack_call(call6);
 80041a8:	4604      	mov	r4, r0
		if( nc >= 48 && nc <= 57 ) {
 80041aa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80041ae:	2b09      	cmp	r3, #9
 80041b0:	f200 8096 	bhi.w	80042e0 <get_wspr_channel_symbols+0xaf4>
		*m=60000-32768+*m;
 80041b4:	f646 2330 	movw	r3, #27184	; 0x6a30
 80041b8:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 80041ba:	01db      	lsls	r3, r3, #7
 80041bc:	f7ff bbd6 	b.w	800396c <get_wspr_channel_symbols+0x180>
		case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */
 80041c0:	78b8      	ldrb	r0, [r7, #2]
 80041c2:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=k[0];
 80041c6:	8838      	ldrh	r0, [r7, #0]
 80041c8:	4403      	add	r3, r0
		break;
 80041ca:	e6e9      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
		case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;
 80041cc:	68b8      	ldr	r0, [r7, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 80041ce:	4402      	add	r2, r0
 80041d0:	e744      	b.n	800405c <get_wspr_channel_symbols+0x870>
		case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;
 80041d2:	8938      	ldrh	r0, [r7, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 80041d4:	4402      	add	r2, r0
 80041d6:	e741      	b.n	800405c <get_wspr_channel_symbols+0x870>
 80041d8:	0801d977 	.word	0x0801d977
		case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;
 80041dc:	7a38      	ldrb	r0, [r7, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 80041de:	4402      	add	r2, r0
 80041e0:	e73c      	b.n	800405c <get_wspr_channel_symbols+0x870>
		case 7 : b+=k[1]&0xffffff; a+=k[0]; break;
 80041e2:	e9d7 6000 	ldrd	r6, r0, [r7]
 80041e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80041ea:	4433      	add	r3, r6
 80041ec:	4401      	add	r1, r0
 80041ee:	e6d7      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
		case 6 : b+=k[1]&0xffff; a+=k[0]; break;
 80041f0:	88b8      	ldrh	r0, [r7, #4]
 80041f2:	4401      	add	r1, r0
 80041f4:	6838      	ldr	r0, [r7, #0]
 80041f6:	4403      	add	r3, r0
 80041f8:	e6d2      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
		case 5 : b+=k[1]&0xff; a+=k[0]; break;
 80041fa:	7938      	ldrb	r0, [r7, #4]
 80041fc:	4401      	add	r1, r0
 80041fe:	6838      	ldr	r0, [r7, #0]
 8004200:	4403      	add	r3, r0
 8004202:	e6cd      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
		case 3 : a+=k[0]&0xffffff; break;
 8004204:	6838      	ldr	r0, [r7, #0]
 8004206:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800420a:	4403      	add	r3, r0
 800420c:	e6c8      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
		case 9 : c+=k8[8];                      /* fall through */
 800420e:	7a38      	ldrb	r0, [r7, #8]
 8004210:	4402      	add	r2, r0
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 8004212:	88be      	ldrh	r6, [r7, #4]
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004214:	8838      	ldrh	r0, [r7, #0]
 8004216:	440e      	add	r6, r1
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 8004218:	88f9      	ldrh	r1, [r7, #6]
 800421a:	4418      	add	r0, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 800421c:	887b      	ldrh	r3, [r7, #2]
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 800421e:	eb06 4101 	add.w	r1, r6, r1, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004222:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8004226:	e6bb      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
		case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */
 8004228:	79b8      	ldrb	r0, [r7, #6]
 800422a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 800422e:	8838      	ldrh	r0, [r7, #0]
 8004230:	4418      	add	r0, r3
		case 6 : b+=k[2];
 8004232:	88bb      	ldrh	r3, [r7, #4]
 8004234:	4419      	add	r1, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800423c:	e6b0      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
		case 5 : b+=k8[4];                      /* fall through */
 800423e:	7938      	ldrb	r0, [r7, #4]
 8004240:	4401      	add	r1, r0
		case 4 : a+=k[0]+(((uint32_t)k[1])<<16);
 8004242:	8838      	ldrh	r0, [r7, #0]
 8004244:	4418      	add	r0, r3
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800424c:	e6a8      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
		case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */
 800424e:	7ab8      	ldrb	r0, [r7, #10]
 8004250:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004254:	8838      	ldrh	r0, [r7, #0]
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004256:	88be      	ldrh	r6, [r7, #4]
 8004258:	4418      	add	r0, r3
		case 10: c+=k[4];
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	440e      	add	r6, r1
		b+=k[2]+(((uint32_t)k[3])<<16);
 800425e:	88f9      	ldrh	r1, [r7, #6]
		case 10: c+=k[4];
 8004260:	441a      	add	r2, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004262:	887b      	ldrh	r3, [r7, #2]
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004264:	eb06 4101 	add.w	r1, r6, r1, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004268:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800426c:	e698      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 800426e:	f8b7 c008 	ldrh.w	ip, [r7, #8]
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004272:	88be      	ldrh	r6, [r7, #4]
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004274:	8838      	ldrh	r0, [r7, #0]
 8004276:	4494      	add	ip, r2
 8004278:	440e      	add	r6, r1
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 800427a:	897a      	ldrh	r2, [r7, #10]
 800427c:	4418      	add	r0, r3
		b+=k[2]+(((uint32_t)k[3])<<16);
 800427e:	88f9      	ldrh	r1, [r7, #6]
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004280:	887b      	ldrh	r3, [r7, #2]
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8004282:	eb0c 4202 	add.w	r2, ip, r2, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004286:	eb06 4101 	add.w	r1, r6, r1, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 800428a:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800428e:	e687      	b.n	8003fa0 <get_wspr_channel_symbols+0x7b4>
			grid6[i]=grid[i+1];
 8004290:	7863      	ldrb	r3, [r4, #1]
		for(i=0; i<j-1; i++) {
 8004292:	2a01      	cmp	r2, #1
			grid6[i]=grid[i+1];
 8004294:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 8004298:	f43f aed4 	beq.w	8004044 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 800429c:	78a3      	ldrb	r3, [r4, #2]
		for(i=0; i<j-1; i++) {
 800429e:	2a02      	cmp	r2, #2
			grid6[i]=grid[i+1];
 80042a0:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
		for(i=0; i<j-1; i++) {
 80042a4:	f43f aece 	beq.w	8004044 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 80042a8:	78e3      	ldrb	r3, [r4, #3]
		for(i=0; i<j-1; i++) {
 80042aa:	2a03      	cmp	r2, #3
			grid6[i]=grid[i+1];
 80042ac:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
		for(i=0; i<j-1; i++) {
 80042b0:	f43f aec8 	beq.w	8004044 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 80042b4:	7923      	ldrb	r3, [r4, #4]
		for(i=0; i<j-1; i++) {
 80042b6:	2a04      	cmp	r2, #4
			grid6[i]=grid[i+1];
 80042b8:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
		for(i=0; i<j-1; i++) {
 80042bc:	f43f aec2 	beq.w	8004044 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 80042c0:	7963      	ldrb	r3, [r4, #5]
		for(i=0; i<j-1; i++) {
 80042c2:	2a05      	cmp	r2, #5
			grid6[i]=grid[i+1];
 80042c4:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
		for(i=0; i<j-1; i++) {
 80042c8:	f43f aebc 	beq.w	8004044 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 80042cc:	79a3      	ldrb	r3, [r4, #6]
		for(i=0; i<j-1; i++) {
 80042ce:	2a06      	cmp	r2, #6
			grid6[i]=grid[i+1];
 80042d0:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
		for(i=0; i<j-1; i++) {
 80042d4:	f43f aeb6 	beq.w	8004044 <get_wspr_channel_symbols+0x858>
			grid6[i]=grid[i+1];
 80042d8:	79e3      	ldrb	r3, [r4, #7]
 80042da:	f88d 3106 	strb.w	r3, [sp, #262]	; 0x106
		for(i=0; i<j-1; i++) {
 80042de:	e6b1      	b.n	8004044 <get_wspr_channel_symbols+0x858>
		} else if ( nc >= 65 && nc <= 90 ) {
 80042e0:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80042e4:	2b19      	cmp	r3, #25
 80042e6:	d851      	bhi.n	800438c <get_wspr_channel_symbols+0xba0>
		*m=60000-32768+*m;
 80042e8:	f646 2329 	movw	r3, #27177	; 0x6a29
 80042ec:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 80042ee:	01db      	lsls	r3, r3, #7
 80042f0:	f7ff bb3c 	b.w	800396c <get_wspr_channel_symbols+0x180>
		char const * pfx = strtok (callsign,"/");
 80042f4:	495d      	ldr	r1, [pc, #372]	; (800446c <get_wspr_channel_symbols+0xc80>)
 80042f6:	4628      	mov	r0, r5
 80042f8:	f00d f924 	bl	8011544 <strtok>
		char const * call = strtok(NULL," ");
 80042fc:	495c      	ldr	r1, [pc, #368]	; (8004470 <get_wspr_channel_symbols+0xc84>)
		char const * pfx = strtok (callsign,"/");
 80042fe:	4607      	mov	r7, r0
		char const * call = strtok(NULL," ");
 8004300:	2000      	movs	r0, #0
 8004302:	f00d f91f 	bl	8011544 <strtok>
		*n = pack_call (call);
 8004306:	f7ff f9af 	bl	8003668 <pack_call>
 800430a:	4604      	mov	r4, r0
		size_t plen=strlen (pfx);
 800430c:	4638      	mov	r0, r7
 800430e:	f7fc f897 	bl	8000440 <strlen>
		if( plen ==1 ) {
 8004312:	2801      	cmp	r0, #1
 8004314:	d03f      	beq.n	8004396 <get_wspr_channel_symbols+0xbaa>
		} else if( plen == 2 ) {
 8004316:	2802      	cmp	r0, #2
 8004318:	d03b      	beq.n	8004392 <get_wspr_channel_symbols+0xba6>
		for (i=0; i<plen; i++) {
 800431a:	2800      	cmp	r0, #0
 800431c:	f000 80a1 	beq.w	8004462 <get_wspr_channel_symbols+0xc76>
			*m=0;
 8004320:	2300      	movs	r3, #0
 8004322:	f105 3cff 	add.w	ip, r5, #4294967295
			} else if ( nc >= 65 && nc <= 90 ) {
 8004326:	4662      	mov	r2, ip
			int nc = callsign[i];
 8004328:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
			if( nc >= 48 && nc <= 57 ) {
 800432c:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
			} else if ( nc >= 65 && nc <= 90 ) {
 8004330:	f1a7 0e41 	sub.w	lr, r7, #65	; 0x41
			if( nc >= 48 && nc <= 57 ) {
 8004334:	2909      	cmp	r1, #9
 8004336:	d906      	bls.n	8004346 <get_wspr_channel_symbols+0xb5a>
			} else if ( nc >= 65 && nc <= 90 ) {
 8004338:	f1be 0f19 	cmp.w	lr, #25
				nc=36;
 800433c:	f04f 0124 	mov.w	r1, #36	; 0x24
				nc=nc-65+10;
 8004340:	bf98      	it	ls
 8004342:	f1a7 0137 	subls.w	r1, r7, #55	; 0x37
		for (i=0; i<plen; i++) {
 8004346:	3202      	adds	r2, #2
			*m=37*(*m)+nc;
 8004348:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
		for (i=0; i<plen; i++) {
 800434c:	1b52      	subs	r2, r2, r5
			*m=37*(*m)+nc;
 800434e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
		for (i=0; i<plen; i++) {
 8004352:	4290      	cmp	r0, r2
			*m=37*(*m)+nc;
 8004354:	440b      	add	r3, r1
		for (i=0; i<plen; i++) {
 8004356:	d8e6      	bhi.n	8004326 <get_wspr_channel_symbols+0xb3a>
		if( *m > 32768 ) {
 8004358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435c:	dd7b      	ble.n	8004456 <get_wspr_channel_symbols+0xc6a>
			*m=*m-32768;
 800435e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8004362:	aa40      	add	r2, sp, #256	; 0x100
			*nadd=1;
 8004364:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 8004366:	01db      	lsls	r3, r3, #7
 8004368:	9202      	str	r2, [sp, #8]
 800436a:	f7ff bb00 	b.w	800396e <get_wspr_channel_symbols+0x182>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800436e:	461a      	mov	r2, r3
 8004370:	4619      	mov	r1, r3
 8004372:	e5e3      	b.n	8003f3c <get_wspr_channel_symbols+0x750>
		return 36;
 8004374:	2124      	movs	r1, #36	; 0x24
 8004376:	f7ff bbfc 	b.w	8003b72 <get_wspr_channel_symbols+0x386>
 800437a:	2624      	movs	r6, #36	; 0x24
 800437c:	f7ff bbeb 	b.w	8003b56 <get_wspr_channel_symbols+0x36a>
 8004380:	2324      	movs	r3, #36	; 0x24
 8004382:	f7ff bbda 	b.w	8003b3a <get_wspr_channel_symbols+0x34e>
 8004386:	2224      	movs	r2, #36	; 0x24
 8004388:	f7ff bbc9 	b.w	8003b1e <get_wspr_channel_symbols+0x332>
 800438c:	4b39      	ldr	r3, [pc, #228]	; (8004474 <get_wspr_channel_symbols+0xc88>)
		*m=60000-32768+*m;
 800438e:	f7ff baed 	b.w	800396c <get_wspr_channel_symbols+0x180>
			*m=36;
 8004392:	2324      	movs	r3, #36	; 0x24
		for (i=0; i<plen; i++) {
 8004394:	e7c5      	b.n	8004322 <get_wspr_channel_symbols+0xb36>
			*m=37*(*m)+36;
 8004396:	f44f 63ab 	mov.w	r3, #1368	; 0x558
 800439a:	e7c2      	b.n	8004322 <get_wspr_channel_symbols+0xb36>
 800439c:	9302      	str	r3, [sp, #8]
 800439e:	e6f8      	b.n	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 80043a0:	782b      	ldrb	r3, [r5, #0]
		for (i=0; i<i1; i++) {
 80043a2:	2f01      	cmp	r7, #1
			call6[i]=callsign[i];
 80043a4:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
		for (i=0; i<i1; i++) {
 80043a8:	f43f aacf 	beq.w	800394a <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 80043ac:	786b      	ldrb	r3, [r5, #1]
		for (i=0; i<i1; i++) {
 80043ae:	2f02      	cmp	r7, #2
			call6[i]=callsign[i];
 80043b0:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
		for (i=0; i<i1; i++) {
 80043b4:	f43f aac9 	beq.w	800394a <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 80043b8:	78ab      	ldrb	r3, [r5, #2]
		for (i=0; i<i1; i++) {
 80043ba:	2f03      	cmp	r7, #3
			call6[i]=callsign[i];
 80043bc:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
		for (i=0; i<i1; i++) {
 80043c0:	f43f aac3 	beq.w	800394a <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 80043c4:	78eb      	ldrb	r3, [r5, #3]
		for (i=0; i<i1; i++) {
 80043c6:	2f04      	cmp	r7, #4
			call6[i]=callsign[i];
 80043c8:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
		for (i=0; i<i1; i++) {
 80043cc:	f43f aabd 	beq.w	800394a <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 80043d0:	792b      	ldrb	r3, [r5, #4]
		for (i=0; i<i1; i++) {
 80043d2:	2f05      	cmp	r7, #5
			call6[i]=callsign[i];
 80043d4:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
		for (i=0; i<i1; i++) {
 80043d8:	f43f aab7 	beq.w	800394a <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 80043dc:	796b      	ldrb	r3, [r5, #5]
		for (i=0; i<i1; i++) {
 80043de:	2f06      	cmp	r7, #6
			call6[i]=callsign[i];
 80043e0:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
		for (i=0; i<i1; i++) {
 80043e4:	f43f aab1 	beq.w	800394a <get_wspr_channel_symbols+0x15e>
			call6[i]=callsign[i];
 80043e8:	79ab      	ldrb	r3, [r5, #6]
 80043ea:	f88d 3106 	strb.w	r3, [sp, #262]	; 0x106
		for (i=0; i<i1; i++) {
 80043ee:	f7ff baac 	b.w	800394a <get_wspr_channel_symbols+0x15e>
 80043f2:	9302      	str	r3, [sp, #8]
 80043f4:	f7ff baa9 	b.w	800394a <get_wspr_channel_symbols+0x15e>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80043f8:	461a      	mov	r2, r3
 80043fa:	4619      	mov	r1, r3
 80043fc:	e67c      	b.n	80040f8 <get_wspr_channel_symbols+0x90c>
			call6[i]=callsign[i];
 80043fe:	782b      	ldrb	r3, [r5, #0]
		for (i=0; i<i1; i++) {
 8004400:	2f01      	cmp	r7, #1
			call6[i]=callsign[i];
 8004402:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8004406:	f43f aec4 	beq.w	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 800440a:	786b      	ldrb	r3, [r5, #1]
		for (i=0; i<i1; i++) {
 800440c:	2f02      	cmp	r7, #2
			call6[i]=callsign[i];
 800440e:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
		for (i=0; i<i1; i++) {
 8004412:	f43f aebe 	beq.w	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 8004416:	78ab      	ldrb	r3, [r5, #2]
		for (i=0; i<i1; i++) {
 8004418:	2f03      	cmp	r7, #3
			call6[i]=callsign[i];
 800441a:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
		for (i=0; i<i1; i++) {
 800441e:	f43f aeb8 	beq.w	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 8004422:	78eb      	ldrb	r3, [r5, #3]
		for (i=0; i<i1; i++) {
 8004424:	2f04      	cmp	r7, #4
			call6[i]=callsign[i];
 8004426:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
		for (i=0; i<i1; i++) {
 800442a:	f43f aeb2 	beq.w	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 800442e:	792b      	ldrb	r3, [r5, #4]
		for (i=0; i<i1; i++) {
 8004430:	2f05      	cmp	r7, #5
			call6[i]=callsign[i];
 8004432:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
		for (i=0; i<i1; i++) {
 8004436:	f43f aeac 	beq.w	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 800443a:	796b      	ldrb	r3, [r5, #5]
		for (i=0; i<i1; i++) {
 800443c:	2f06      	cmp	r7, #6
			call6[i]=callsign[i];
 800443e:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8004442:	f43f aea6 	beq.w	8004192 <get_wspr_channel_symbols+0x9a6>
			call6[i]=callsign[i];
 8004446:	79ab      	ldrb	r3, [r5, #6]
 8004448:	f88d 3106 	strb.w	r3, [sp, #262]	; 0x106
		for (i=0; i<i1; i++) {
 800444c:	e6a1      	b.n	8004192 <get_wspr_channel_symbols+0x9a6>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800444e:	461a      	mov	r2, r3
 8004450:	4619      	mov	r1, r3
 8004452:	f7ff bb1e 	b.w	8003a92 <get_wspr_channel_symbols+0x2a6>
 8004456:	aa40      	add	r2, sp, #256	; 0x100
		m=128*ng+ntype+64;
 8004458:	01db      	lsls	r3, r3, #7
		*nadd=0;
 800445a:	2000      	movs	r0, #0
 800445c:	9202      	str	r2, [sp, #8]
 800445e:	f7ff ba86 	b.w	800396e <get_wspr_channel_symbols+0x182>
 8004462:	aa40      	add	r2, sp, #256	; 0x100
		for (i=0; i<plen; i++) {
 8004464:	4603      	mov	r3, r0
 8004466:	9202      	str	r2, [sp, #8]
 8004468:	f7ff ba81 	b.w	800396e <get_wspr_channel_symbols+0x182>
 800446c:	0801d858 	.word	0x0801d858
 8004470:	0801da30 	.word	0x0801da30
 8004474:	00354300 	.word	0x00354300

08004478 <SendWSPR>:
{
 8004478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 800447c:	496a      	ldr	r1, [pc, #424]	; (8004628 <SendWSPR+0x1b0>)
 800447e:	486b      	ldr	r0, [pc, #428]	; (800462c <SendWSPR+0x1b4>)
	LOfreq = (double)WSPR_FREQ;
 8004480:	4c6b      	ldr	r4, [pc, #428]	; (8004630 <SendWSPR+0x1b8>)
 8004482:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8004668 <SendWSPR+0x1f0>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004486:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800466c <SendWSPR+0x1f4>
{
 800448a:	ed2d 8b02 	vpush	{d8}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 800448e:	f7ff f9ad 	bl	80037ec <get_wspr_channel_symbols>
	LOfreq = (double)WSPR_FREQ;
 8004492:	4b68      	ldr	r3, [pc, #416]	; (8004634 <SendWSPR+0x1bc>)
	LastTXFreq = LOfreq;
 8004494:	4a68      	ldr	r2, [pc, #416]	; (8004638 <SendWSPR+0x1c0>)
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8004496:	4969      	ldr	r1, [pc, #420]	; (800463c <SendWSPR+0x1c4>)
 8004498:	4869      	ldr	r0, [pc, #420]	; (8004640 <SendWSPR+0x1c8>)
	LastTXFreq = LOfreq;
 800449a:	6013      	str	r3, [r2, #0]
	LOfreq = (double)WSPR_FREQ;
 800449c:	6023      	str	r3, [r4, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 800449e:	ed9f 0b60 	vldr	d0, [pc, #384]	; 8004620 <SendWSPR+0x1a8>
 80044a2:	f000 fa7d 	bl	80049a0 <SetWSPRPLLCoeff>
	WSPRTXFraction = 20; //percentage
 80044a6:	2314      	movs	r3, #20
 80044a8:	4a66      	ldr	r2, [pc, #408]	; (8004644 <SendWSPR+0x1cc>)
 80044aa:	7013      	strb	r3, [r2, #0]
				LED_GREEN_ON;
 80044ac:	4d66      	ldr	r5, [pc, #408]	; (8004648 <SendWSPR+0x1d0>)
			if(KEYER_DASH || KEYER_DOT)
 80044ae:	4c67      	ldr	r4, [pc, #412]	; (800464c <SendWSPR+0x1d4>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80044b0:	e012      	b.n	80044d8 <SendWSPR+0x60>
 80044b2:	f8db 3000 	ldr.w	r3, [fp]
 80044b6:	07da      	lsls	r2, r3, #31
 80044b8:	d51e      	bpl.n	80044f8 <SendWSPR+0x80>
				LED_GREEN_ON;
 80044ba:	2201      	movs	r2, #1
 80044bc:	f005 fbee 	bl	8009c9c <HAL_GPIO_WritePin>
			if(KEYER_DASH || KEYER_DOT)
 80044c0:	2140      	movs	r1, #64	; 0x40
 80044c2:	4620      	mov	r0, r4
 80044c4:	f005 fbe4 	bl	8009c90 <HAL_GPIO_ReadPin>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2180      	movs	r1, #128	; 0x80
 80044cc:	4620      	mov	r0, r4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d036      	beq.n	8004540 <SendWSPR+0xc8>
 80044d2:	f005 fbdd 	bl	8009c90 <HAL_GPIO_ReadPin>
 80044d6:	b398      	cbz	r0, 8004540 <SendWSPR+0xc8>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80044d8:	f8d8 3000 	ldr.w	r3, [r8]
				LED_GREEN_OFF;
 80044dc:	2200      	movs	r2, #0
				LED_GREEN_ON;
 80044de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044e2:	4628      	mov	r0, r5
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0e4      	beq.n	80044b2 <SendWSPR+0x3a>
			if (SystemSeconds % 2 == 0)
 80044e8:	07de      	lsls	r6, r3, #31
 80044ea:	d5e6      	bpl.n	80044ba <SendWSPR+0x42>
				LED_GREEN_OFF;
 80044ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044f0:	4628      	mov	r0, r5
 80044f2:	f005 fbd3 	bl	8009c9c <HAL_GPIO_WritePin>
 80044f6:	e7e3      	b.n	80044c0 <SendWSPR+0x48>
		if (((rand() % 101) > WSPRTXFraction) && (!WSPRFirstTime))
 80044f8:	f00c f9f2 	bl	80108e0 <rand>
 80044fc:	4b51      	ldr	r3, [pc, #324]	; (8004644 <SendWSPR+0x1cc>)
 80044fe:	2165      	movs	r1, #101	; 0x65
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	4b53      	ldr	r3, [pc, #332]	; (8004650 <SendWSPR+0x1d8>)
 8004504:	fb83 3400 	smull	r3, r4, r3, r0
 8004508:	17c3      	asrs	r3, r0, #31
 800450a:	ebc3 1324 	rsb	r3, r3, r4, asr #4
 800450e:	4c51      	ldr	r4, [pc, #324]	; (8004654 <SendWSPR+0x1dc>)
 8004510:	fb01 0013 	mls	r0, r1, r3, r0
 8004514:	4290      	cmp	r0, r2
 8004516:	dd17      	ble.n	8004548 <SendWSPR+0xd0>
 8004518:	7823      	ldrb	r3, [r4, #0]
 800451a:	b9ab      	cbnz	r3, 8004548 <SendWSPR+0xd0>
				if(KEYER_DASH || KEYER_DOT)
 800451c:	4c4b      	ldr	r4, [pc, #300]	; (800464c <SendWSPR+0x1d4>)
 800451e:	e002      	b.n	8004526 <SendWSPR+0xae>
 8004520:	f005 fbb6 	bl	8009c90 <HAL_GPIO_ReadPin>
 8004524:	b160      	cbz	r0, 8004540 <SendWSPR+0xc8>
			while (SystemSeconds != 1)
 8004526:	f8d8 3000 	ldr.w	r3, [r8]
				if(KEYER_DASH || KEYER_DOT)
 800452a:	2140      	movs	r1, #64	; 0x40
 800452c:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 800452e:	2b01      	cmp	r3, #1
 8004530:	d0bc      	beq.n	80044ac <SendWSPR+0x34>
				if(KEYER_DASH || KEYER_DOT)
 8004532:	f005 fbad 	bl	8009c90 <HAL_GPIO_ReadPin>
 8004536:	4603      	mov	r3, r0
 8004538:	2180      	movs	r1, #128	; 0x80
 800453a:	4620      	mov	r0, r4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ef      	bne.n	8004520 <SendWSPR+0xa8>
}
 8004540:	ecbd 8b02 	vpop	{d8}
 8004544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (HAL_ADCEx_MultiModeStart_DMA(HAdc1,
 8004548:	4b43      	ldr	r3, [pc, #268]	; (8004658 <SendWSPR+0x1e0>)
 800454a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800454e:	4943      	ldr	r1, [pc, #268]	; (800465c <SendWSPR+0x1e4>)
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f003 fbc3 	bl	8007cdc <HAL_ADCEx_MultiModeStart_DMA>
 8004556:	2800      	cmp	r0, #0
 8004558:	d15f      	bne.n	800461a <SendWSPR+0x1a2>
			WSPRFirstTime = 0;
 800455a:	2300      	movs	r3, #0
			TXSwitch(1);
 800455c:	2001      	movs	r0, #1
			WSPRFirstTime = 0;
 800455e:	7023      	strb	r3, [r4, #0]
			TXSwitch(1);
 8004560:	f000 fcca 	bl	8004ef8 <TXSwitch>
			CarrierEnable(1);
 8004564:	2001      	movs	r0, #1
				if(KEYER_DASH || KEYER_DOT)
 8004566:	4c39      	ldr	r4, [pc, #228]	; (800464c <SendWSPR+0x1d4>)
			CarrierEnable(1);
 8004568:	f000 fd2e 	bl	8004fc8 <CarrierEnable>
			while (SystemSeconds != 1)
 800456c:	e00a      	b.n	8004584 <SendWSPR+0x10c>
				if(KEYER_DASH || KEYER_DOT)
 800456e:	f005 fb8f 	bl	8009c90 <HAL_GPIO_ReadPin>
 8004572:	4603      	mov	r3, r0
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	4620      	mov	r0, r4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0e1      	beq.n	8004540 <SendWSPR+0xc8>
 800457c:	f005 fb88 	bl	8009c90 <HAL_GPIO_ReadPin>
 8004580:	2800      	cmp	r0, #0
 8004582:	d0dd      	beq.n	8004540 <SendWSPR+0xc8>
			while (SystemSeconds != 1)
 8004584:	f8d8 7000 	ldr.w	r7, [r8]
				if(KEYER_DASH || KEYER_DOT)
 8004588:	2140      	movs	r1, #64	; 0x40
 800458a:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 800458c:	2f01      	cmp	r7, #1
 800458e:	d1ee      	bne.n	800456e <SendWSPR+0xf6>
			WSPRTone = syms[txIndex++];
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <SendWSPR+0x1b0>)
 8004592:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8004670 <SendWSPR+0x1f8>
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	4699      	mov	r9, r3
			WSPRStartTick = HAL_GetTick();
 800459a:	4d31      	ldr	r5, [pc, #196]	; (8004660 <SendWSPR+0x1e8>)
						LED_GREEN_OFF;
 800459c:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8004648 <SendWSPR+0x1d0>
			WSPRTone = syms[txIndex++];
 80045a0:	f88a 2000 	strb.w	r2, [sl]
			WSPRStartTick = HAL_GetTick();
 80045a4:	f002 faba 	bl	8006b1c <HAL_GetTick>
 80045a8:	6028      	str	r0, [r5, #0]
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 80045aa:	4b2e      	ldr	r3, [pc, #184]	; (8004664 <SendWSPR+0x1ec>)
 80045ac:	037c      	lsls	r4, r7, #13
 80045ae:	fba3 3404 	umull	r3, r4, r3, r4
 80045b2:	07fb      	lsls	r3, r7, #31
 80045b4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 80045b8:	d522      	bpl.n	8004600 <SendWSPR+0x188>
 80045ba:	e001      	b.n	80045c0 <SendWSPR+0x148>
						LED_GREEN_OFF;
 80045bc:	f005 fb6e 	bl	8009c9c <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 80045c0:	f002 faac 	bl	8006b1c <HAL_GetTick>
 80045c4:	682e      	ldr	r6, [r5, #0]
 80045c6:	4603      	mov	r3, r0
						LED_GREEN_OFF;
 80045c8:	2200      	movs	r2, #0
 80045ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045ce:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 80045d2:	1b9b      	subs	r3, r3, r6
 80045d4:	429c      	cmp	r4, r3
 80045d6:	d8f1      	bhi.n	80045bc <SendWSPR+0x144>
				WSPRTone = syms[txIndex++];
 80045d8:	3701      	adds	r7, #1
 80045da:	f819 3f01 	ldrb.w	r3, [r9, #1]!
			while (txIndex < 162) {
 80045de:	2fa2      	cmp	r7, #162	; 0xa2
				WSPRTone = syms[txIndex++];
 80045e0:	f88a 3000 	strb.w	r3, [sl]
			while (txIndex < 162) {
 80045e4:	d1e1      	bne.n	80045aa <SendWSPR+0x132>
			TXSwitch(0);
 80045e6:	2000      	movs	r0, #0
 80045e8:	f000 fc86 	bl	8004ef8 <TXSwitch>
			CarrierEnable(0);
 80045ec:	2000      	movs	r0, #0
 80045ee:	f000 fceb 	bl	8004fc8 <CarrierEnable>
			HAL_ADCEx_MultiModeStop_DMA(HAdc1);
 80045f2:	4b19      	ldr	r3, [pc, #100]	; (8004658 <SendWSPR+0x1e0>)
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	f003 fbed 	bl	8007dd4 <HAL_ADCEx_MultiModeStop_DMA>
 80045fa:	e757      	b.n	80044ac <SendWSPR+0x34>
						LED_GREEN_ON;
 80045fc:	f005 fb4e 	bl	8009c9c <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004600:	f002 fa8c 	bl	8006b1c <HAL_GetTick>
 8004604:	682e      	ldr	r6, [r5, #0]
 8004606:	4603      	mov	r3, r0
						LED_GREEN_ON;
 8004608:	2201      	movs	r2, #1
 800460a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800460e:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004612:	1b9b      	subs	r3, r3, r6
 8004614:	42a3      	cmp	r3, r4
 8004616:	d3f1      	bcc.n	80045fc <SendWSPR+0x184>
 8004618:	e7de      	b.n	80045d8 <SendWSPR+0x160>
				Error_Handler();
 800461a:	f000 fd33 	bl	8005084 <Error_Handler>
 800461e:	e79c      	b.n	800455a <SendWSPR+0xe2>
 8004620:	c0000000 	.word	0xc0000000
 8004624:	415adb21 	.word	0x415adb21
 8004628:	24000714 	.word	0x24000714
 800462c:	0801d868 	.word	0x0801d868
 8004630:	24006238 	.word	0x24006238
 8004634:	4ad6d90e 	.word	0x4ad6d90e
 8004638:	24006244 	.word	0x24006244
 800463c:	24005218 	.word	0x24005218
 8004640:	2400520c 	.word	0x2400520c
 8004644:	240073de 	.word	0x240073de
 8004648:	58020400 	.word	0x58020400
 800464c:	58020000 	.word	0x58020000
 8004650:	288df0cb 	.word	0x288df0cb
 8004654:	2400020c 	.word	0x2400020c
 8004658:	24005224 	.word	0x24005224
 800465c:	24007400 	.word	0x24007400
 8004660:	24000710 	.word	0x24000710
 8004664:	aaaaaaab 	.word	0xaaaaaaab
 8004668:	240062b8 	.word	0x240062b8
 800466c:	240062b4 	.word	0x240062b4
 8004670:	240073df 	.word	0x240073df

08004674 <DisplayStatus.part.0>:
	static char StringStep[8];
	static char StringTxPower[8];

	if (!DisableDisplay)
	{
		switch(Fstep)
 8004674:	4b74      	ldr	r3, [pc, #464]	; (8004848 <DisplayStatus.part.0+0x1d4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
void DisplayStatus(void)
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
		switch(Fstep)
 8004680:	f000 80d8 	beq.w	8004834 <DisplayStatus.part.0+0x1c0>
 8004684:	d81f      	bhi.n	80046c6 <DisplayStatus.part.0+0x52>
 8004686:	2b0a      	cmp	r3, #10
 8004688:	f000 80c6 	beq.w	8004818 <DisplayStatus.part.0+0x1a4>
 800468c:	2b64      	cmp	r3, #100	; 0x64
 800468e:	d110      	bne.n	80046b2 <DisplayStatus.part.0+0x3e>
		{
		case 1:			strcpy(StringStep,"   1 "); break;
		case 10: 		strcpy(StringStep,"  10 "); break;
		case 100: 		strcpy(StringStep," 100 "); break;
 8004690:	4b6e      	ldr	r3, [pc, #440]	; (800484c <DisplayStatus.part.0+0x1d8>)
 8004692:	4a6f      	ldr	r2, [pc, #444]	; (8004850 <DisplayStatus.part.0+0x1dc>)
 8004694:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004698:	6010      	str	r0, [r2, #0]
 800469a:	8091      	strh	r1, [r2, #4]
		case 9000: 		strcpy(StringStep,"   9K"); break;
		case 10000:		strcpy(StringStep,"  10K"); break;
		case 100000: 	strcpy(StringStep," 100K"); break;
		}

		switch(CurrentMode)
 800469c:	4b6d      	ldr	r3, [pc, #436]	; (8004854 <DisplayStatus.part.0+0x1e0>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	f200 80ce 	bhi.w	8004842 <DisplayStatus.part.0+0x1ce>
 80046a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80046aa:	00ab      	.short	0x00ab
 80046ac:	008500a7 	.word	0x008500a7
 80046b0:	0029      	.short	0x0029
		switch(Fstep)
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	f040 80aa 	bne.w	800480c <DisplayStatus.part.0+0x198>
		case 1:			strcpy(StringStep,"   1 "); break;
 80046b8:	4b67      	ldr	r3, [pc, #412]	; (8004858 <DisplayStatus.part.0+0x1e4>)
 80046ba:	4a65      	ldr	r2, [pc, #404]	; (8004850 <DisplayStatus.part.0+0x1dc>)
 80046bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046c0:	6010      	str	r0, [r2, #0]
 80046c2:	8091      	strh	r1, [r2, #4]
 80046c4:	e7ea      	b.n	800469c <DisplayStatus.part.0+0x28>
		switch(Fstep)
 80046c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80046ca:	4293      	cmp	r3, r2
 80046cc:	f000 80ab 	beq.w	8004826 <DisplayStatus.part.0+0x1b2>
 80046d0:	4a62      	ldr	r2, [pc, #392]	; (800485c <DisplayStatus.part.0+0x1e8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d106      	bne.n	80046e4 <DisplayStatus.part.0+0x70>
		case 100000: 	strcpy(StringStep," 100K"); break;
 80046d6:	4b62      	ldr	r3, [pc, #392]	; (8004860 <DisplayStatus.part.0+0x1ec>)
 80046d8:	4a5d      	ldr	r2, [pc, #372]	; (8004850 <DisplayStatus.part.0+0x1dc>)
 80046da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046de:	6010      	str	r0, [r2, #0]
 80046e0:	8091      	strh	r1, [r2, #4]
 80046e2:	e7db      	b.n	800469c <DisplayStatus.part.0+0x28>
		switch(Fstep)
 80046e4:	f242 3228 	movw	r2, #9000	; 0x2328
 80046e8:	4293      	cmp	r3, r2
 80046ea:	f040 808f 	bne.w	800480c <DisplayStatus.part.0+0x198>
		case 9000: 		strcpy(StringStep,"   9K"); break;
 80046ee:	4b5d      	ldr	r3, [pc, #372]	; (8004864 <DisplayStatus.part.0+0x1f0>)
 80046f0:	4a57      	ldr	r2, [pc, #348]	; (8004850 <DisplayStatus.part.0+0x1dc>)
 80046f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046f6:	6010      	str	r0, [r2, #0]
 80046f8:	8091      	strh	r1, [r2, #4]
 80046fa:	e7cf      	b.n	800469c <DisplayStatus.part.0+0x28>
		{
		case LSB: strcpy(StringMode,"LSB"); break;
		case USB: strcpy(StringMode,"USB"); break;
		case AM: strcpy(StringMode,"AM"); break;
		case CW: strcpy(StringMode,"CW"); break;
 80046fc:	4b5a      	ldr	r3, [pc, #360]	; (8004868 <DisplayStatus.part.0+0x1f4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4e5a      	ldr	r6, [pc, #360]	; (800486c <DisplayStatus.part.0+0x1f8>)
 8004702:	0c19      	lsrs	r1, r3, #16
 8004704:	8033      	strh	r3, [r6, #0]
 8004706:	70b1      	strb	r1, [r6, #2]
		}
		switch (CurrentAGC)
 8004708:	4b59      	ldr	r3, [pc, #356]	; (8004870 <DisplayStatus.part.0+0x1fc>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d058      	beq.n	80047c2 <DisplayStatus.part.0+0x14e>
 8004710:	2b01      	cmp	r3, #1
 8004712:	d179      	bne.n	8004808 <DisplayStatus.part.0+0x194>
		{
		case Fast: strcpy(StringAGC,"Fast"); break;
		case Slow: strcpy(StringAGC,"Slow"); break;
 8004714:	4b57      	ldr	r3, [pc, #348]	; (8004874 <DisplayStatus.part.0+0x200>)
 8004716:	4d58      	ldr	r5, [pc, #352]	; (8004878 <DisplayStatus.part.0+0x204>)
 8004718:	e893 0003 	ldmia.w	r3, {r0, r1}
 800471c:	6028      	str	r0, [r5, #0]
 800471e:	7129      	strb	r1, [r5, #4]
		}
		switch (CurrentBW)
 8004720:	4b56      	ldr	r3, [pc, #344]	; (800487c <DisplayStatus.part.0+0x208>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d056      	beq.n	80047d6 <DisplayStatus.part.0+0x162>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d16b      	bne.n	8004804 <DisplayStatus.part.0+0x190>
		{
		case Narrow: strcpy(StringWidth,"Narrow"); break;
		case Wide: strcpy(StringWidth,"Wide"); break;
 800472c:	4b54      	ldr	r3, [pc, #336]	; (8004880 <DisplayStatus.part.0+0x20c>)
 800472e:	4c55      	ldr	r4, [pc, #340]	; (8004884 <DisplayStatus.part.0+0x210>)
 8004730:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004734:	6020      	str	r0, [r4, #0]
 8004736:	7121      	strb	r1, [r4, #4]
		}
		switch (TxPowerOut)
 8004738:	4b53      	ldr	r3, [pc, #332]	; (8004888 <DisplayStatus.part.0+0x214>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004740:	d056      	beq.n	80047f0 <DisplayStatus.part.0+0x17c>
 8004742:	f640 71ff 	movw	r1, #4095	; 0xfff
 8004746:	428b      	cmp	r3, r1
 8004748:	d062      	beq.n	8004810 <DisplayStatus.part.0+0x19c>
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474e:	4b4f      	ldr	r3, [pc, #316]	; (800488c <DisplayStatus.part.0+0x218>)
		{
		case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 8004750:	bf04      	itt	eq
 8004752:	494f      	ldreq	r1, [pc, #316]	; (8004890 <DisplayStatus.part.0+0x21c>)
 8004754:	6019      	streq	r1, [r3, #0]
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
		}
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, volume);
 8004756:	9306      	str	r3, [sp, #24]
 8004758:	4b4e      	ldr	r3, [pc, #312]	; (8004894 <DisplayStatus.part.0+0x220>)
 800475a:	9503      	str	r5, [sp, #12]
 800475c:	9402      	str	r4, [sp, #8]
 800475e:	ed93 7a00 	vldr	s14, [r3]
 8004762:	4b4d      	ldr	r3, [pc, #308]	; (8004898 <DisplayStatus.part.0+0x224>)
 8004764:	9601      	str	r6, [sp, #4]
 8004766:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	484b      	ldr	r0, [pc, #300]	; (800489c <DisplayStatus.part.0+0x228>)
 800476e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80048a0 <DisplayStatus.part.0+0x22c>
 8004772:	6804      	ldr	r4, [r0, #0]
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <DisplayStatus.part.0+0x230>)
 8004778:	9200      	str	r2, [sp, #0]
 800477a:	9405      	str	r4, [sp, #20]
 800477c:	494a      	ldr	r1, [pc, #296]	; (80048a8 <DisplayStatus.part.0+0x234>)
 800477e:	484b      	ldr	r0, [pc, #300]	; (80048ac <DisplayStatus.part.0+0x238>)
 8004780:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800478c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004790:	ec53 2b17 	vmov	r2, r3, d7
 8004794:	f00c fe5a 	bl	801144c <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8004798:	4844      	ldr	r0, [pc, #272]	; (80048ac <DisplayStatus.part.0+0x238>)
 800479a:	f7fb fe51 	bl	8000440 <strlen>
 800479e:	4601      	mov	r1, r0
 80047a0:	4842      	ldr	r0, [pc, #264]	; (80048ac <DisplayStatus.part.0+0x238>)
 80047a2:	b289      	uxth	r1, r1
 80047a4:	f00b fdea 	bl	801037c <CDC_Transmit_FS>
	HAL_Delay(1);
 80047a8:	2001      	movs	r0, #1
		PrintUI(UartTXString);
	}
}
 80047aa:	b00a      	add	sp, #40	; 0x28
 80047ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 80047b0:	f002 b9ba 	b.w	8006b28 <HAL_Delay>
		case USB: strcpy(StringMode,"USB"); break;
 80047b4:	4b3e      	ldr	r3, [pc, #248]	; (80048b0 <DisplayStatus.part.0+0x23c>)
 80047b6:	4e2d      	ldr	r6, [pc, #180]	; (800486c <DisplayStatus.part.0+0x1f8>)
 80047b8:	6033      	str	r3, [r6, #0]
		switch (CurrentAGC)
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <DisplayStatus.part.0+0x1fc>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1a6      	bne.n	8004710 <DisplayStatus.part.0+0x9c>
		case Fast: strcpy(StringAGC,"Fast"); break;
 80047c2:	4b3c      	ldr	r3, [pc, #240]	; (80048b4 <DisplayStatus.part.0+0x240>)
 80047c4:	4d2c      	ldr	r5, [pc, #176]	; (8004878 <DisplayStatus.part.0+0x204>)
 80047c6:	e893 0003 	ldmia.w	r3, {r0, r1}
		switch (CurrentBW)
 80047ca:	4b2c      	ldr	r3, [pc, #176]	; (800487c <DisplayStatus.part.0+0x208>)
		case Fast: strcpy(StringAGC,"Fast"); break;
 80047cc:	6028      	str	r0, [r5, #0]
		switch (CurrentBW)
 80047ce:	781b      	ldrb	r3, [r3, #0]
		case Fast: strcpy(StringAGC,"Fast"); break;
 80047d0:	7129      	strb	r1, [r5, #4]
		switch (CurrentBW)
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1a8      	bne.n	8004728 <DisplayStatus.part.0+0xb4>
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80047d6:	4b38      	ldr	r3, [pc, #224]	; (80048b8 <DisplayStatus.part.0+0x244>)
 80047d8:	4c2a      	ldr	r4, [pc, #168]	; (8004884 <DisplayStatus.part.0+0x210>)
 80047da:	e893 0003 	ldmia.w	r3, {r0, r1}
		switch (TxPowerOut)
 80047de:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <DisplayStatus.part.0+0x214>)
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80047e0:	80a1      	strh	r1, [r4, #4]
 80047e2:	0c09      	lsrs	r1, r1, #16
		switch (TxPowerOut)
 80047e4:	681b      	ldr	r3, [r3, #0]
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80047e6:	6020      	str	r0, [r4, #0]
		switch (TxPowerOut)
 80047e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80047ec:	71a1      	strb	r1, [r4, #6]
		switch (TxPowerOut)
 80047ee:	d1a8      	bne.n	8004742 <DisplayStatus.part.0+0xce>
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 80047f0:	4b26      	ldr	r3, [pc, #152]	; (800488c <DisplayStatus.part.0+0x218>)
 80047f2:	4932      	ldr	r1, [pc, #200]	; (80048bc <DisplayStatus.part.0+0x248>)
 80047f4:	6019      	str	r1, [r3, #0]
 80047f6:	e7ae      	b.n	8004756 <DisplayStatus.part.0+0xe2>
		case LSB: strcpy(StringMode,"LSB"); break;
 80047f8:	4e1c      	ldr	r6, [pc, #112]	; (800486c <DisplayStatus.part.0+0x1f8>)
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <DisplayStatus.part.0+0x24c>)
 80047fc:	6033      	str	r3, [r6, #0]
 80047fe:	e783      	b.n	8004708 <DisplayStatus.part.0+0x94>
		case AM: strcpy(StringMode,"AM"); break;
 8004800:	4b30      	ldr	r3, [pc, #192]	; (80048c4 <DisplayStatus.part.0+0x250>)
 8004802:	e77c      	b.n	80046fe <DisplayStatus.part.0+0x8a>
 8004804:	4c1f      	ldr	r4, [pc, #124]	; (8004884 <DisplayStatus.part.0+0x210>)
 8004806:	e797      	b.n	8004738 <DisplayStatus.part.0+0xc4>
 8004808:	4d1b      	ldr	r5, [pc, #108]	; (8004878 <DisplayStatus.part.0+0x204>)
 800480a:	e789      	b.n	8004720 <DisplayStatus.part.0+0xac>
 800480c:	4a10      	ldr	r2, [pc, #64]	; (8004850 <DisplayStatus.part.0+0x1dc>)
 800480e:	e745      	b.n	800469c <DisplayStatus.part.0+0x28>
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 8004810:	4b1e      	ldr	r3, [pc, #120]	; (800488c <DisplayStatus.part.0+0x218>)
 8004812:	492d      	ldr	r1, [pc, #180]	; (80048c8 <DisplayStatus.part.0+0x254>)
 8004814:	6019      	str	r1, [r3, #0]
 8004816:	e79e      	b.n	8004756 <DisplayStatus.part.0+0xe2>
		case 10: 		strcpy(StringStep,"  10 "); break;
 8004818:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <DisplayStatus.part.0+0x258>)
 800481a:	4a0d      	ldr	r2, [pc, #52]	; (8004850 <DisplayStatus.part.0+0x1dc>)
 800481c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004820:	6010      	str	r0, [r2, #0]
 8004822:	8091      	strh	r1, [r2, #4]
 8004824:	e73a      	b.n	800469c <DisplayStatus.part.0+0x28>
		case 10000:		strcpy(StringStep,"  10K"); break;
 8004826:	4b2a      	ldr	r3, [pc, #168]	; (80048d0 <DisplayStatus.part.0+0x25c>)
 8004828:	4a09      	ldr	r2, [pc, #36]	; (8004850 <DisplayStatus.part.0+0x1dc>)
 800482a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800482e:	6010      	str	r0, [r2, #0]
 8004830:	8091      	strh	r1, [r2, #4]
 8004832:	e733      	b.n	800469c <DisplayStatus.part.0+0x28>
		case 1000: 		strcpy(StringStep,"   1K"); break;
 8004834:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <DisplayStatus.part.0+0x260>)
 8004836:	4a06      	ldr	r2, [pc, #24]	; (8004850 <DisplayStatus.part.0+0x1dc>)
 8004838:	e893 0003 	ldmia.w	r3, {r0, r1}
 800483c:	6010      	str	r0, [r2, #0]
 800483e:	8091      	strh	r1, [r2, #4]
 8004840:	e72c      	b.n	800469c <DisplayStatus.part.0+0x28>
 8004842:	4e0a      	ldr	r6, [pc, #40]	; (800486c <DisplayStatus.part.0+0x1f8>)
 8004844:	e760      	b.n	8004708 <DisplayStatus.part.0+0x94>
 8004846:	bf00      	nop
 8004848:	24005220 	.word	0x24005220
 800484c:	0801da2c 	.word	0x0801da2c
 8004850:	2400629c 	.word	0x2400629c
 8004854:	24000ff8 	.word	0x24000ff8
 8004858:	0801da1c 	.word	0x0801da1c
 800485c:	000186a0 	.word	0x000186a0
 8004860:	0801da4c 	.word	0x0801da4c
 8004864:	0801da3c 	.word	0x0801da3c
 8004868:	0801da58 	.word	0x0801da58
 800486c:	24006294 	.word	0x24006294
 8004870:	24000ff6 	.word	0x24000ff6
 8004874:	0801da64 	.word	0x0801da64
 8004878:	2400628c 	.word	0x2400628c
 800487c:	24000ff7 	.word	0x24000ff7
 8004880:	0801da74 	.word	0x0801da74
 8004884:	240062ac 	.word	0x240062ac
 8004888:	240062cc 	.word	0x240062cc
 800488c:	240062a4 	.word	0x240062a4
 8004890:	00776f4c 	.word	0x00776f4c
 8004894:	2400b9ac 	.word	0x2400b9ac
 8004898:	240062c0 	.word	0x240062c0
 800489c:	2400a7ec 	.word	0x2400a7ec
 80048a0:	3a83126f 	.word	0x3a83126f
 80048a4:	24006238 	.word	0x24006238
 80048a8:	0801da7c 	.word	0x0801da7c
 80048ac:	240063d8 	.word	0x240063d8
 80048b0:	00425355 	.word	0x00425355
 80048b4:	0801da5c 	.word	0x0801da5c
 80048b8:	0801da6c 	.word	0x0801da6c
 80048bc:	0064694d 	.word	0x0064694d
 80048c0:	0042534c 	.word	0x0042534c
 80048c4:	0801da54 	.word	0x0801da54
 80048c8:	0078614d 	.word	0x0078614d
 80048cc:	0801da24 	.word	0x0801da24
 80048d0:	0801da44 	.word	0x0801da44
 80048d4:	0801da34 	.word	0x0801da34

080048d8 <HAL_ADC_ConvCpltCallback>:
{
 80048d8:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80048dc:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80048e0:	490a      	ldr	r1, [pc, #40]	; (800490c <HAL_ADC_ConvCpltCallback+0x34>)
 80048e2:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80048e6:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80048ea:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d1fa      	bne.n	80048e6 <HAL_ADC_ConvCpltCallback+0xe>
 80048f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048f4:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(1);
 80048f8:	2001      	movs	r0, #1
 80048fa:	f7fd fe37 	bl	800256c <ADC_Stream0_Handler>
	ubADCDualConversionComplete = SET;
 80048fe:	4b04      	ldr	r3, [pc, #16]	; (8004910 <HAL_ADC_ConvCpltCallback+0x38>)
 8004900:	2201      	movs	r2, #1
 8004902:	701a      	strb	r2, [r3, #0]
}
 8004904:	bd08      	pop	{r3, pc}
 8004906:	bf00      	nop
 8004908:	24007800 	.word	0x24007800
 800490c:	e000ed00 	.word	0xe000ed00
 8004910:	2400b9aa 	.word	0x2400b9aa

08004914 <HAL_ADC_ConvHalfCpltCallback>:
{
 8004914:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8004918:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800491c:	490a      	ldr	r1, [pc, #40]	; (8004948 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800491e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8004922:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004926:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8004928:	4293      	cmp	r3, r2
 800492a:	d1fa      	bne.n	8004922 <HAL_ADC_ConvHalfCpltCallback+0xe>
 800492c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004930:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(0);
 8004934:	2000      	movs	r0, #0
 8004936:	f7fd fe19 	bl	800256c <ADC_Stream0_Handler>
	ubADCDualConversionComplete = RESET;
 800493a:	4b04      	ldr	r3, [pc, #16]	; (800494c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800493c:	2200      	movs	r2, #0
 800493e:	701a      	strb	r2, [r3, #0]
}
 8004940:	bd08      	pop	{r3, pc}
 8004942:	bf00      	nop
 8004944:	24007400 	.word	0x24007400
 8004948:	e000ed00 	.word	0xe000ed00
 800494c:	2400b9aa 	.word	0x2400b9aa

08004950 <HAL_DAC_ConvCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[BSIZE];
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <HAL_DAC_ConvCpltCallbackCh1+0x8>)
 8004952:	4a02      	ldr	r2, [pc, #8]	; (800495c <HAL_DAC_ConvCpltCallbackCh1+0xc>)
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	4770      	bx	lr
 8004958:	240073d8 	.word	0x240073d8
 800495c:	24000be0 	.word	0x24000be0

08004960 <HAL_DAC_ConvHalfCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[0];
 8004960:	4b01      	ldr	r3, [pc, #4]	; (8004968 <HAL_DAC_ConvHalfCpltCallbackCh1+0x8>)
 8004962:	4a02      	ldr	r2, [pc, #8]	; (800496c <HAL_DAC_ConvHalfCpltCallbackCh1+0xc>)
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	4770      	bx	lr
 8004968:	240073d8 	.word	0x240073d8
 800496c:	240007e0 	.word	0x240007e0

08004970 <HAL_ADC_LevelOutOfWindowCallback>:
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004970:	4907      	ldr	r1, [pc, #28]	; (8004990 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 8004972:	2002      	movs	r0, #2
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004976:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 800497a:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 800497c:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 800497e:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004984:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004986:	6853      	ldr	r3, [r2, #4]
 8004988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498c:	6053      	str	r3, [r2, #4]
}
 800498e:	4770      	bx	lr
 8004990:	2400a41c 	.word	0x2400a41c
 8004994:	24006252 	.word	0x24006252
 8004998:	2400a480 	.word	0x2400a480
 800499c:	00000000 	.word	0x00000000

080049a0 <SetWSPRPLLCoeff>:
 * for 7040.1 PLL coeffs are N 450, M 17, P 94, FracDiv 48
 */


void SetWSPRPLLCoeff(double TXFreq, uint16_t *FracDivCoeff, uint16_t *FracPWMCoeff)
{
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
	uint32_t m, n, p, od;
	volatile uint32_t fm, fn, fp, fdiff, fod, FMaxErr, FracDiv, i;
	LastTXFreq = (float)TXFreq;
#define TEST_COEFF 1
	for (i = 0; i < 4; i++) {
 80049a4:	2300      	movs	r3, #0
	LastTXFreq = (float)TXFreq;
 80049a6:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 80049aa:	4ab1      	ldr	r2, [pc, #708]	; (8004c70 <SetWSPRPLLCoeff+0x2d0>)
{
 80049ac:	ed2d 8b02 	vpush	{d8}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 80049b0:	f20f 2bac 	addw	fp, pc, #684	; 0x2ac
 80049b4:	e9db ab00 	ldrd	sl, fp, [fp]
{
 80049b8:	b08f      	sub	sp, #60	; 0x3c
	LastTXFreq = (float)TXFreq;
 80049ba:	edc2 7a00 	vstr	s15, [r2]
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 80049be:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	for (i = 0; i < 4; i++) {
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	9b05      	ldr	r3, [sp, #20]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	f200 80e0 	bhi.w	8004b8c <SetWSPRPLLCoeff+0x1ec>
		for (m = 2; m <= 25; m++) //was 64
		{
			for (n = 2; n <= 512; n++) //was 1
			{
				for (p = 2; p <= 128; p += 2) {
					OutF = XTalFreq * n / m / p / od;
 80049cc:	4ba9      	ldr	r3, [pc, #676]	; (8004c74 <SetWSPRPLLCoeff+0x2d4>)
 80049ce:	4604      	mov	r4, r0
 80049d0:	460d      	mov	r5, r1
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80049d2:	ed9f 8aa9 	vldr	s16, [pc, #676]	; 8004c78 <SetWSPRPLLCoeff+0x2d8>
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
							&& ((XTalFreq * n / m) > 150000000.0)
 80049d6:	ed9f 2aa9 	vldr	s4, [pc, #676]	; 8004c7c <SetWSPRPLLCoeff+0x2dc>
						MinDiff = abs(OutF - TF);

						fp = p;
						fn = n;
						fm = m;
						fod = od;
 80049da:	2001      	movs	r0, #1
					OutF = XTalFreq * n / m / p / od;
 80049dc:	edd3 2a00 	vldr	s5, [r3]
 80049e0:	4ea7      	ldr	r6, [pc, #668]	; (8004c80 <SetWSPRPLLCoeff+0x2e0>)
							&& ((XTalFreq * n / m) < 960000000.0)) {
 80049e2:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 8004c84 <SetWSPRPLLCoeff+0x2e4>
		}
		if (fn < 511) {
			OutF = XTalFreq * fn / fm / fp / fod;
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
					* 8192 * 8); //FracDiv PWM has 8 levels
 80049e6:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8004c68 <SetWSPRPLLCoeff+0x2c8>
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80049ea:	ed9d 7a05 	vldr	s14, [sp, #20]
 80049ee:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		for (m = 2; m <= 25; m++) //was 64
 80049f2:	2102      	movs	r1, #2
			for (n = 2; n <= 512; n++) //was 1
 80049f4:	f240 2e01 	movw	lr, #513	; 0x201
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80049f8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049fc:	ee27 7a08 	vmul.f32	s14, s14, s16
 8004a00:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004a04:	ee37 7b00 	vadd.f64	d7, d7, d0
 8004a08:	ed8d 7b06 	vstr	d7, [sp, #24]
		MinDiff = 999999999;
 8004a0c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
					OutF = XTalFreq * n / m / p / od;
 8004a10:	ee07 1a90 	vmov	s15, r1
			for (n = 2; n <= 512; n++) //was 1
 8004a14:	2202      	movs	r2, #2
					OutF = XTalFreq * n / m / p / od;
 8004a16:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8004a1a:	eec8 1a84 	vdiv.f32	s3, s17, s8
 8004a1e:	ee07 2a90 	vmov	s15, r2
				for (p = 2; p <= 128; p += 2) {
 8004a22:	2302      	movs	r3, #2
					OutF = XTalFreq * n / m / p / od;
 8004a24:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8004a28:	ee64 4aa2 	vmul.f32	s9, s9, s5
							&& ((XTalFreq * n / m) > 150000000.0)
 8004a2c:	ee64 7aa1 	vmul.f32	s15, s9, s3
 8004a30:	eef4 7a42 	vcmp.f32	s15, s4
 8004a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a38:	dd05      	ble.n	8004a46 <SetWSPRPLLCoeff+0xa6>
 8004a3a:	eef4 7ac1 	vcmpe.f32	s15, s2
 8004a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a42:	f100 80c4 	bmi.w	8004bce <SetWSPRPLLCoeff+0x22e>
					OutF = XTalFreq * n / m / p / od;
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a50:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004a54:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8004a58:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004a5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004a60:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004a64:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004a68:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004a6c:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004a70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	dd03      	ble.n	8004a82 <SetWSPRPLLCoeff+0xe2>
 8004a7a:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004a7e:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
				for (p = 2; p <= 128; p += 2) {
 8004a82:	2b82      	cmp	r3, #130	; 0x82
 8004a84:	d1df      	bne.n	8004a46 <SetWSPRPLLCoeff+0xa6>
			for (n = 2; n <= 512; n++) //was 1
 8004a86:	3201      	adds	r2, #1
 8004a88:	4572      	cmp	r2, lr
 8004a8a:	d1c8      	bne.n	8004a1e <SetWSPRPLLCoeff+0x7e>
		for (m = 2; m <= 25; m++) //was 64
 8004a8c:	3101      	adds	r1, #1
 8004a8e:	291a      	cmp	r1, #26
 8004a90:	d1be      	bne.n	8004a10 <SetWSPRPLLCoeff+0x70>
		if (fn < 511) {
 8004a92:	9b01      	ldr	r3, [sp, #4]
 8004a94:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004a98:	f200 80dc 	bhi.w	8004c54 <SetWSPRPLLCoeff+0x2b4>
			OutF = XTalFreq * fn / fm / fp / fod;
 8004a9c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004aa0:	eddd 7a00 	vldr	s15, [sp]
 8004aa4:	eddd 6a02 	vldr	s13, [sp, #8]
 8004aa8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ab4:	ee27 7a22 	vmul.f32	s14, s14, s5
 8004ab8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004abc:	eddd 6a03 	vldr	s13, [sp, #12]
 8004ac0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ac4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ac8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004acc:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 8004ad0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8004ad4:	9b01      	ldr	r3, [sp, #4]
 8004ad6:	eddd 7a00 	vldr	s15, [sp]
 8004ada:	eddd 6a02 	vldr	s13, [sp, #8]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ae8:	ee07 3a10 	vmov	s14, r3
 8004aec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004af0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004af4:	eddd 6a03 	vldr	s13, [sp, #12]
 8004af8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004afc:	ee27 7a22 	vmul.f32	s14, s14, s5
 8004b00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b08:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 8004b0c:	ed8d 7b08 	vstr	d7, [sp, #32]
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8004b10:	ed9d 5b06 	vldr	d5, [sp, #24]
 8004b14:	ed9d 4b0a 	vldr	d4, [sp, #40]	; 0x28
 8004b18:	ed9d 6b08 	vldr	d6, [sp, #32]
 8004b1c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8004b20:	ee35 5b44 	vsub.f64	d5, d5, d4
 8004b24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004b28:	ee85 7b06 	vdiv.f64	d7, d5, d6
					* 8192 * 8); //FracDiv PWM has 8 levels
 8004b2c:	ee27 7b03 	vmul.f64	d7, d7, d3
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8004b30:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8004b34:	ed8d 7a04 	vstr	s14, [sp, #16]
		} else {
			FracDiv = 8191 * 8;
		}

		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8004b38:	9b04      	ldr	r3, [sp, #16]
		FracDiv >>= 0x03;
 8004b3a:	9a04      	ldr	r2, [sp, #16]
		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8004b3c:	f003 0307 	and.w	r3, r3, #7
		FracDiv >>= 0x03;
 8004b40:	ea4f 08d2 	mov.w	r8, r2, lsr #3
		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8004b44:	8033      	strh	r3, [r6, #0]
		FracDiv >>= 0x03;
 8004b46:	f8cd 8010 	str.w	r8, [sp, #16]
		FracDivCoeff[i] = FracDiv;
 8004b4a:	9f04      	ldr	r7, [sp, #16]
 8004b4c:	9a05      	ldr	r2, [sp, #20]
 8004b4e:	b2bf      	uxth	r7, r7
 8004b50:	eb04 0942 	add.w	r9, r4, r2, lsl #1
 8004b54:	f824 7012 	strh.w	r7, [r4, r2, lsl #1]
		FracPWMCoeff[i] = FracDivPWM;
 8004b58:	9a05      	ldr	r2, [sp, #20]
	for (i = 0; i < 4; i++) {
 8004b5a:	9905      	ldr	r1, [sp, #20]
		FracPWMCoeff[i] = FracDivPWM;
 8004b5c:	f8b6 e000 	ldrh.w	lr, [r6]
	for (i = 0; i < 4; i++) {
 8004b60:	3101      	adds	r1, #1
		FracPWMCoeff[i] = FracDivPWM;
 8004b62:	f825 e012 	strh.w	lr, [r5, r2, lsl #1]
 8004b66:	eb05 0242 	add.w	r2, r5, r2, lsl #1
	for (i = 0; i < 4; i++) {
 8004b6a:	9105      	str	r1, [sp, #20]
 8004b6c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004b70:	f1bc 0f03 	cmp.w	ip, #3
 8004b74:	f67f af39 	bls.w	80049ea <SetWSPRPLLCoeff+0x4a>
 8004b78:	f8cd 8010 	str.w	r8, [sp, #16]
 8004b7c:	9105      	str	r1, [sp, #20]
 8004b7e:	4942      	ldr	r1, [pc, #264]	; (8004c88 <SetWSPRPLLCoeff+0x2e8>)
 8004b80:	8033      	strh	r3, [r6, #0]
 8004b82:	800b      	strh	r3, [r1, #0]
 8004b84:	f8a9 7000 	strh.w	r7, [r9]
 8004b88:	f8a2 e000 	strh.w	lr, [r2]
	}
	__HAL_RCC_PLL2_DISABLE();
 8004b8c:	4a3f      	ldr	r2, [pc, #252]	; (8004c8c <SetWSPRPLLCoeff+0x2ec>)
 8004b8e:	6813      	ldr	r3, [r2, #0]
 8004b90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b94:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the same for the 4 WSPR tones
 8004b96:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004b98:	9900      	ldr	r1, [sp, #0]
 8004b9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b9e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8004ba2:	6293      	str	r3, [r2, #40]	; 0x28
 8004ba4:	9901      	ldr	r1, [sp, #4]
 8004ba6:	9b02      	ldr	r3, [sp, #8]
 8004ba8:	3901      	subs	r1, #1
 8004baa:	3b01      	subs	r3, #1
 8004bac:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004bb0:	025b      	lsls	r3, r3, #9
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bba:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bc2:	6013      	str	r3, [r2, #0]
}
 8004bc4:	b00f      	add	sp, #60	; 0x3c
 8004bc6:	ecbd 8b02 	vpop	{d8}
 8004bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					OutF = XTalFreq * n / m / p / od;
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bd6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004bda:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8004bde:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004be2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004be6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004bea:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004bee:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004bf2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004bf6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	d521      	bpl.n	8004c44 <SetWSPRPLLCoeff+0x2a4>
 8004c00:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004c04:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8004c08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c0c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c14:	dd16      	ble.n	8004c44 <SetWSPRPLLCoeff+0x2a4>
						MinDiff = abs(OutF - TF);
 8004c16:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8004c1a:	ed9d 6b06 	vldr	d6, [sp, #24]
 8004c1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c22:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8004c26:	ee17 7a10 	vmov	r7, s14
 8004c2a:	2f00      	cmp	r7, #0
 8004c2c:	bfb8      	it	lt
 8004c2e:	427f      	neglt	r7, r7
 8004c30:	ee07 7a10 	vmov	s14, r7
 8004c34:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8004c38:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
						fp = p;
 8004c3c:	9302      	str	r3, [sp, #8]
						fn = n;
 8004c3e:	9201      	str	r2, [sp, #4]
						fm = m;
 8004c40:	9100      	str	r1, [sp, #0]
						fod = od;
 8004c42:	9003      	str	r0, [sp, #12]
				for (p = 2; p <= 128; p += 2) {
 8004c44:	3302      	adds	r3, #2
 8004c46:	2b82      	cmp	r3, #130	; 0x82
 8004c48:	d1c1      	bne.n	8004bce <SetWSPRPLLCoeff+0x22e>
			for (n = 2; n <= 512; n++) //was 1
 8004c4a:	3201      	adds	r2, #1
 8004c4c:	4572      	cmp	r2, lr
 8004c4e:	f47f aee6 	bne.w	8004a1e <SetWSPRPLLCoeff+0x7e>
 8004c52:	e71b      	b.n	8004a8c <SetWSPRPLLCoeff+0xec>
			FracDiv = 8191 * 8;
 8004c54:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	e76d      	b.n	8004b38 <SetWSPRPLLCoeff+0x198>
 8004c5c:	f3af 8000 	nop.w
 8004c60:	ff800000 	.word	0xff800000
 8004c64:	41cdcd64 	.word	0x41cdcd64
 8004c68:	00000000 	.word	0x00000000
 8004c6c:	40f00000 	.word	0x40f00000
 8004c70:	24006244 	.word	0x24006244
 8004c74:	240073e0 	.word	0x240073e0
 8004c78:	3fbb7e91 	.word	0x3fbb7e91
 8004c7c:	4d0f0d18 	.word	0x4d0f0d18
 8004c80:	24005214 	.word	0x24005214
 8004c84:	4e64e1c0 	.word	0x4e64e1c0
 8004c88:	24006248 	.word	0x24006248
 8004c8c:	58024400 	.word	0x58024400

08004c90 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8004c90:	4a90      	ldr	r2, [pc, #576]	; (8004ed4 <SetTXPLL+0x244>)
 8004c92:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8004c96:	4b90      	ldr	r3, [pc, #576]	; (8004ed8 <SetTXPLL+0x248>)
	for (m = 2; m <= 25; m++) //was 64
 8004c98:	2002      	movs	r0, #2
				OutF = XTalFreq * n / m / p / od;
 8004c9a:	edd2 5a00 	vldr	s11, [r2]
		for (n = 2; n <= 512; n++) //was 1
 8004c9e:	f240 2c01 	movw	ip, #513	; 0x201
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004ca2:	ed9f 5a8e 	vldr	s10, [pc, #568]	; 8004edc <SetTXPLL+0x24c>
 8004ca6:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 8004ee0 <SetTXPLL+0x250>
{
 8004caa:	b410      	push	{r4}
					MinDiff = abs(OutF - TF);

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 8004cac:	2401      	movs	r4, #1
{
 8004cae:	b08b      	sub	sp, #44	; 0x2c
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8004cb0:	9303      	str	r3, [sp, #12]
	MinDiff = 999999999;
 8004cb2:	9303      	str	r3, [sp, #12]
				OutF = XTalFreq * n / m / p / od;
 8004cb4:	ee07 0a90 	vmov	s15, r0
		for (n = 2; n <= 512; n++) //was 1
 8004cb8:	2102      	movs	r1, #2
				OutF = XTalFreq * n / m / p / od;
 8004cba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004cbe:	eec3 4a86 	vdiv.f32	s9, s7, s12
 8004cc2:	ee07 1a90 	vmov	s15, r1
			for (p = 2; p <= 128; p+=2)
 8004cc6:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 8004cc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ccc:	ee66 6aa5 	vmul.f32	s13, s13, s11
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004cd0:	ee66 7aa4 	vmul.f32	s15, s13, s9
 8004cd4:	eef4 7a45 	vcmp.f32	s15, s10
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	dd05      	ble.n	8004cea <SetTXPLL+0x5a>
 8004cde:	eef4 7ac4 	vcmpe.f32	s15, s8
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	f100 80b6 	bmi.w	8004e56 <SetTXPLL+0x1c6>
				OutF = XTalFreq * n / m / p / od;
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	3302      	adds	r3, #2
 8004cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cf4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfc:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004d00:	eddd 7a02 	vldr	s15, [sp, #8]
 8004d04:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004d08:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004d0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	dd00      	ble.n	8004d18 <SetTXPLL+0x88>
 8004d16:	9a02      	ldr	r2, [sp, #8]
			for (p = 2; p <= 128; p+=2)
 8004d18:	2b82      	cmp	r3, #130	; 0x82
 8004d1a:	d1e6      	bne.n	8004cea <SetTXPLL+0x5a>
		for (n = 2; n <= 512; n++) //was 1
 8004d1c:	3101      	adds	r1, #1
 8004d1e:	4561      	cmp	r1, ip
 8004d20:	d1cf      	bne.n	8004cc2 <SetTXPLL+0x32>
	for (m = 2; m <= 25; m++) //was 64
 8004d22:	3001      	adds	r0, #1
 8004d24:	281a      	cmp	r0, #26
 8004d26:	d1c5      	bne.n	8004cb4 <SetTXPLL+0x24>
				}
			}
		}
	}
	if (fn < 511)
 8004d28:	9b05      	ldr	r3, [sp, #20]
 8004d2a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004d2e:	f200 80cd 	bhi.w	8004ecc <SetTXPLL+0x23c>
	{
		OutF = XTalFreq * fn / fm / fp / fod;
 8004d32:	ed9d 7a05 	vldr	s14, [sp, #20]
 8004d36:	eddd 7a04 	vldr	s15, [sp, #16]
 8004d3a:	ed9d 6a06 	vldr	s12, [sp, #24]
 8004d3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddd 6a07 	vldr	s13, [sp, #28]
 8004d4a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8004d4e:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8004ee4 <SetTXPLL+0x254>
		OutF = XTalFreq * fn / fm / fp / fod;
 8004d52:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004d56:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004d5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d66:	edcd 6a02 	vstr	s13, [sp, #8]
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8004d6a:	9b05      	ldr	r3, [sp, #20]
 8004d6c:	eddd 7a04 	vldr	s15, [sp, #16]
 8004d70:	ed9d 6a06 	vldr	s12, [sp, #24]
 8004d74:	3301      	adds	r3, #1
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	eddd 6a07 	vldr	s13, [sp, #28]
 8004d7e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004d82:	ee07 3a10 	vmov	s14, r3
 8004d86:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004d8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d92:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004d96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d9e:	edcd 6a01 	vstr	s13, [sp, #4]
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8004da2:	eddd 6a02 	vldr	s13, [sp, #8]
 8004da6:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004daa:	eddd 7a02 	vldr	s15, [sp, #8]
 8004dae:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004db6:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8004dba:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc2:	edcd 7a08 	vstr	s15, [sp, #32]
	else
	{
		FracDiv = 8191;
	}

	TXFreqError = MinDiff;
 8004dc6:	eddd 7a03 	vldr	s15, [sp, #12]
	for (i=0; i< 50; i++)
 8004dca:	2000      	movs	r0, #0
	__HAL_RCC_PLL2_DISABLE();
 8004dcc:	4a46      	ldr	r2, [pc, #280]	; (8004ee8 <SetTXPLL+0x258>)
	TXFreqError = MinDiff;
 8004dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dd2:	4b46      	ldr	r3, [pc, #280]	; (8004eec <SetTXPLL+0x25c>)
 8004dd4:	edc3 7a00 	vstr	s15, [r3]
	__HAL_RCC_PLL2_DISABLE();
 8004dd8:	6813      	ldr	r3, [r2, #0]
 8004dda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dde:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8004de0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004de2:	9904      	ldr	r1, [sp, #16]
 8004de4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004de8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8004dec:	6293      	str	r3, [r2, #40]	; 0x28
 8004dee:	9905      	ldr	r1, [sp, #20]
 8004df0:	9b06      	ldr	r3, [sp, #24]
 8004df2:	3901      	subs	r1, #1
 8004df4:	3b01      	subs	r3, #1
 8004df6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004dfa:	025b      	lsls	r3, r3, #9
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e04:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e0c:	6013      	str	r3, [r2, #0]

	SetFracPLL(FracDiv);
 8004e0e:	9908      	ldr	r1, [sp, #32]
	__HAL_RCC_PLL2FRACN_DISABLE();
 8004e10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e12:	f023 0310 	bic.w	r3, r3, #16
 8004e16:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8004e18:	9009      	str	r0, [sp, #36]	; 0x24
 8004e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1c:	2b31      	cmp	r3, #49	; 0x31
 8004e1e:	d80b      	bhi.n	8004e38 <SetTXPLL+0x1a8>
		i++;
 8004e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e22:	3301      	adds	r3, #1
 8004e24:	9309      	str	r3, [sp, #36]	; 0x24
		i--;
 8004e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	9309      	str	r3, [sp, #36]	; 0x24
	for (i=0; i< 50; i++)
 8004e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2e:	3301      	adds	r3, #1
 8004e30:	9309      	str	r3, [sp, #36]	; 0x24
 8004e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e34:	2b31      	cmp	r3, #49	; 0x31
 8004e36:	d9f3      	bls.n	8004e20 <SetTXPLL+0x190>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8004e38:	4a2b      	ldr	r2, [pc, #172]	; (8004ee8 <SetTXPLL+0x258>)
 8004e3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <SetTXPLL+0x260>)
 8004e3c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8004e3e:	4003      	ands	r3, r0
 8004e40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e44:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8004e46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e48:	f043 0310 	orr.w	r3, r3, #16
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif

}
 8004e4e:	b00b      	add	sp, #44	; 0x2c
 8004e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e54:	4770      	bx	lr
				OutF = XTalFreq * n / m / p / od;
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004e6a:	eddd 7a02 	vldr	s15, [sp, #8]
 8004e6e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004e72:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7e:	d51d      	bpl.n	8004ebc <SetTXPLL+0x22c>
 8004e80:	eddd 7a02 	vldr	s15, [sp, #8]
 8004e84:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e90:	dd14      	ble.n	8004ebc <SetTXPLL+0x22c>
					MinDiff = abs(OutF - TF);
 8004e92:	eddd 7a02 	vldr	s15, [sp, #8]
 8004e96:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e9e:	ee17 2a90 	vmov	r2, s15
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	bfb8      	it	lt
 8004ea6:	4252      	neglt	r2, r2
 8004ea8:	ee07 2a90 	vmov	s15, r2
 8004eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb0:	edcd 7a03 	vstr	s15, [sp, #12]
					fp = p;
 8004eb4:	9306      	str	r3, [sp, #24]
					fn = n;
 8004eb6:	9105      	str	r1, [sp, #20]
					fm = m;
 8004eb8:	9004      	str	r0, [sp, #16]
					fod = od;
 8004eba:	9407      	str	r4, [sp, #28]
			for (p = 2; p <= 128; p+=2)
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	2b82      	cmp	r3, #130	; 0x82
 8004ec0:	d1c9      	bne.n	8004e56 <SetTXPLL+0x1c6>
		for (n = 2; n <= 512; n++) //was 1
 8004ec2:	3101      	adds	r1, #1
 8004ec4:	4561      	cmp	r1, ip
 8004ec6:	f47f aefc 	bne.w	8004cc2 <SetTXPLL+0x32>
 8004eca:	e72a      	b.n	8004d22 <SetTXPLL+0x92>
		FracDiv = 8191;
 8004ecc:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004ed0:	9308      	str	r3, [sp, #32]
 8004ed2:	e778      	b.n	8004dc6 <SetTXPLL+0x136>
 8004ed4:	240073e0 	.word	0x240073e0
 8004ed8:	4e6e6b28 	.word	0x4e6e6b28
 8004edc:	4d0f0d18 	.word	0x4d0f0d18
 8004ee0:	4e64e1c0 	.word	0x4e64e1c0
 8004ee4:	46000000 	.word	0x46000000
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	240062c0 	.word	0x240062c0
 8004ef0:	ffff0007 	.word	0xffff0007
 8004ef4:	00000000 	.word	0x00000000

08004ef8 <TXSwitch>:


void TXSwitch(uint8_t Status)
{
 8004ef8:	b510      	push	{r4, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004efa:	2300      	movs	r3, #0
{
 8004efc:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004efe:	e9cd 3300 	strd	r3, r3, [sp]
 8004f02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f06:	9304      	str	r3, [sp, #16]

	if (Status)
 8004f08:	b380      	cbz	r0, 8004f6c <TXSwitch+0x74>
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 8004f0a:	4929      	ldr	r1, [pc, #164]	; (8004fb0 <TXSwitch+0xb8>)
		TransmissionEnabled = 1;
 8004f0c:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 8004f0e:	4c29      	ldr	r4, [pc, #164]	; (8004fb4 <TXSwitch+0xbc>)
 8004f10:	ed91 3a00 	vldr	s6, [r1]
 8004f14:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8004f18:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <TXSwitch+0xc0>)
		if (LastTXFreq != LOfreq)
 8004f1a:	eef4 7a43 	vcmp.f32	s15, s6
		TransmissionEnabled = 1;
 8004f1e:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8004f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f24:	d11b      	bne.n	8004f5e <TXSwitch+0x66>
			SetTXPLL(LOfreq);
			LastTXFreq = LOfreq;
		}

		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004f26:	f44f 7400 	mov.w	r4, #512	; 0x200
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2a:	2002      	movs	r0, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2c:	2300      	movs	r3, #0
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f2e:	2203      	movs	r2, #3
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f30:	4669      	mov	r1, sp
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f32:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	e9cd 4000 	strd	r4, r0, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f38:	4820      	ldr	r0, [pc, #128]	; (8004fbc <TXSwitch+0xc4>)
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3a:	e9cd 3202 	strd	r3, r2, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f3e:	f004 fd75 	bl	8009a2c <HAL_GPIO_Init>

		RELAY_TX_ON;
 8004f42:	2201      	movs	r2, #1
 8004f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f48:	481d      	ldr	r0, [pc, #116]	; (8004fc0 <TXSwitch+0xc8>)
 8004f4a:	f004 fea7 	bl	8009c9c <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f54:	481b      	ldr	r0, [pc, #108]	; (8004fc4 <TXSwitch+0xcc>)
 8004f56:	f004 fea1 	bl	8009c9c <HAL_GPIO_WritePin>
		RELAY_TX_OFF;
		LED_YELLOW_OFF;
		TransmissionEnabled = 0;

	}
}
 8004f5a:	b006      	add	sp, #24
 8004f5c:	bd10      	pop	{r4, pc}
			SetTXPLL(LOfreq);
 8004f5e:	eeb0 0a43 	vmov.f32	s0, s6
 8004f62:	f7ff fe95 	bl	8004c90 <SetTXPLL>
			LastTXFreq = LOfreq;
 8004f66:	ed84 3a00 	vstr	s6, [r4]
 8004f6a:	e7dc      	b.n	8004f26 <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004f6c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8004fa8 <TXSwitch+0xb0>
 8004f70:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f72:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f74:	4669      	mov	r1, sp
 8004f76:	4811      	ldr	r0, [pc, #68]	; (8004fbc <TXSwitch+0xc4>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f78:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004f7a:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f7e:	f004 fd55 	bl	8009a2c <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8004f82:	4622      	mov	r2, r4
 8004f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f88:	480d      	ldr	r0, [pc, #52]	; (8004fc0 <TXSwitch+0xc8>)
 8004f8a:	f004 fe87 	bl	8009c9c <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8004f8e:	4622      	mov	r2, r4
 8004f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f94:	480b      	ldr	r0, [pc, #44]	; (8004fc4 <TXSwitch+0xcc>)
 8004f96:	f004 fe81 	bl	8009c9c <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8004f9a:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <TXSwitch+0xc0>)
 8004f9c:	701c      	strb	r4, [r3, #0]
}
 8004f9e:	b006      	add	sp, #24
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	bf00      	nop
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	00000200 	.word	0x00000200
 8004fac:	00000001 	.word	0x00000001
 8004fb0:	24006238 	.word	0x24006238
 8004fb4:	24006244 	.word	0x24006244
 8004fb8:	240062c8 	.word	0x240062c8
 8004fbc:	58020800 	.word	0x58020800
 8004fc0:	58020c00 	.word	0x58020c00
 8004fc4:	58020400 	.word	0x58020400

08004fc8 <CarrierEnable>:


void CarrierEnable(uint8_t Status)
{
 8004fc8:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fca:	2400      	movs	r4, #0
{
 8004fcc:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fce:	e9cd 4400 	strd	r4, r4, [sp]
 8004fd2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004fd6:	9404      	str	r4, [sp, #16]
	if (Status)
 8004fd8:	b320      	cbz	r0, 8005024 <CarrierEnable+0x5c>
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8004fda:	4622      	mov	r2, r4
 8004fdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fe0:	4822      	ldr	r0, [pc, #136]	; (800506c <CarrierEnable+0xa4>)
 8004fe2:	f004 fe5b 	bl	8009c9c <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8004fe6:	4b22      	ldr	r3, [pc, #136]	; (8005070 <CarrierEnable+0xa8>)
 8004fe8:	4622      	mov	r2, r4
 8004fea:	2110      	movs	r1, #16
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4821      	ldr	r0, [pc, #132]	; (8005074 <CarrierEnable+0xac>)
 8004ff0:	f003 f93c 	bl	800826c <HAL_DAC_SetValue>
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff8:	2302      	movs	r3, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ffa:	4669      	mov	r1, sp
 8004ffc:	481e      	ldr	r0, [pc, #120]	; (8005078 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004ffe:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005000:	e9cd 2300 	strd	r2, r3, [sp]
 8005004:	2200      	movs	r2, #0
 8005006:	2303      	movs	r3, #3
 8005008:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800500c:	f004 fd0e 	bl	8009a2c <HAL_GPIO_Init>

		TXCarrierEnabled = 1;
 8005010:	2201      	movs	r2, #1
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 8005014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005018:	4819      	ldr	r0, [pc, #100]	; (8005080 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 800501a:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 800501c:	f004 fe3e 	bl	8009c9c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		LED_GREEN_OFF;
	}
}
 8005020:	b007      	add	sp, #28
 8005022:	bd30      	pop	{r4, r5, pc}
 8005024:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005026:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800502a:	4810      	ldr	r0, [pc, #64]	; (800506c <CarrierEnable+0xa4>)
 800502c:	2201      	movs	r2, #1
 800502e:	f004 fe35 	bl	8009c9c <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8005032:	462b      	mov	r3, r5
 8005034:	462a      	mov	r2, r5
 8005036:	2110      	movs	r1, #16
 8005038:	480e      	ldr	r0, [pc, #56]	; (8005074 <CarrierEnable+0xac>)
 800503a:	f003 f917 	bl	800826c <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800503e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005042:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 8005044:	480d      	ldr	r0, [pc, #52]	; (800507c <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005046:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 8005048:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800504a:	480b      	ldr	r0, [pc, #44]	; (8005078 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800504c:	e9cd 2300 	strd	r2, r3, [sp]
 8005050:	2300      	movs	r3, #0
 8005052:	2202      	movs	r2, #2
 8005054:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005058:	f004 fce8 	bl	8009a2c <HAL_GPIO_Init>
		LED_GREEN_OFF;
 800505c:	462a      	mov	r2, r5
 800505e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005062:	4807      	ldr	r0, [pc, #28]	; (8005080 <CarrierEnable+0xb8>)
 8005064:	f004 fe1a 	bl	8009c9c <HAL_GPIO_WritePin>
}
 8005068:	b007      	add	sp, #28
 800506a:	bd30      	pop	{r4, r5, pc}
 800506c:	58020c00 	.word	0x58020c00
 8005070:	240062cc 	.word	0x240062cc
 8005074:	2400a4e8 	.word	0x2400a4e8
 8005078:	58020800 	.word	0x58020800
 800507c:	240062bc 	.word	0x240062bc
 8005080:	58020400 	.word	0x58020400

08005084 <Error_Handler>:
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8005084:	4e09      	ldr	r6, [pc, #36]	; (80050ac <Error_Handler+0x28>)
{
 8005086:	4d0a      	ldr	r5, [pc, #40]	; (80050b0 <Error_Handler+0x2c>)
 8005088:	4c0a      	ldr	r4, [pc, #40]	; (80050b4 <Error_Handler+0x30>)
 800508a:	b508      	push	{r3, lr}
 800508c:	6833      	ldr	r3, [r6, #0]
 800508e:	fb05 f303 	mul.w	r3, r5, r3
 8005092:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8005096:	d200      	bcs.n	800509a <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8005098:	e7fe      	b.n	8005098 <Error_Handler+0x14>
			LED_switch();
 800509a:	f7fd f907 	bl	80022ac <LED_switch>
 800509e:	6833      	ldr	r3, [r6, #0]
 80050a0:	fb05 f303 	mul.w	r3, r5, r3
 80050a4:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80050a8:	d2f7      	bcs.n	800509a <Error_Handler+0x16>
 80050aa:	e7f5      	b.n	8005098 <Error_Handler+0x14>
 80050ac:	2400a81c 	.word	0x2400a81c
 80050b0:	c28f5c29 	.word	0xc28f5c29
 80050b4:	051eb851 	.word	0x051eb851

080050b8 <SystemClock_Config_For_OC>:
{
 80050b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050bc:	b0ce      	sub	sp, #312	; 0x138
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050be:	224c      	movs	r2, #76	; 0x4c
 80050c0:	2100      	movs	r1, #0
 80050c2:	a80a      	add	r0, sp, #40	; 0x28
 80050c4:	f00c fa25 	bl	8011512 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050c8:	2220      	movs	r2, #32
 80050ca:	2100      	movs	r1, #0
 80050cc:	a802      	add	r0, sp, #8
 80050ce:	f00c fa20 	bl	8011512 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050d2:	22c0      	movs	r2, #192	; 0xc0
 80050d4:	2100      	movs	r1, #0
 80050d6:	a81e      	add	r0, sp, #120	; 0x78
 80050d8:	f00c fa1b 	bl	8011512 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80050dc:	2002      	movs	r0, #2
 80050de:	f005 fe5d 	bl	800ad9c <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80050e2:	4a44      	ldr	r2, [pc, #272]	; (80051f4 <SystemClock_Config_For_OC+0x13c>)
 80050e4:	2300      	movs	r3, #0
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	6991      	ldr	r1, [r2, #24]
 80050ea:	4b43      	ldr	r3, [pc, #268]	; (80051f8 <SystemClock_Config_For_OC+0x140>)
 80050ec:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80050f0:	6191      	str	r1, [r2, #24]
 80050f2:	6991      	ldr	r1, [r2, #24]
 80050f4:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 80050f8:	9101      	str	r1, [sp, #4]
 80050fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050fc:	f041 0101 	orr.w	r1, r1, #1
 8005100:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800510c:	6993      	ldr	r3, [r2, #24]
 800510e:	0498      	lsls	r0, r3, #18
 8005110:	d5fc      	bpl.n	800510c <SystemClock_Config_For_OC+0x54>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005112:	4a3a      	ldr	r2, [pc, #232]	; (80051fc <SystemClock_Config_For_OC+0x144>)
	RCC_OscInitStruct.PLL.PLLM = 10;
 8005114:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005118:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800511a:	2504      	movs	r5, #4
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800511c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800511e:	2601      	movs	r6, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005120:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	f043 0302 	orr.w	r3, r3, #2
 800512a:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800512c:	2300      	movs	r3, #0
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 800512e:	4a34      	ldr	r2, [pc, #208]	; (8005200 <SystemClock_Config_For_OC+0x148>)
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005130:	9610      	str	r6, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8005132:	9417      	str	r4, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8005134:	9419      	str	r4, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8005136:	951a      	str	r5, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8005138:	9518      	str	r5, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800513a:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 800513e:	230a      	movs	r3, #10
 8005140:	e9cd 3115 	strd	r3, r1, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 8005144:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <SystemClock_Config_For_OC+0x14c>)
 8005146:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005148:	2221      	movs	r2, #33	; 0x21
 800514a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800514e:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005152:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005156:	f005 fed3 	bl	800af00 <HAL_RCC_OscConfig>
 800515a:	2800      	cmp	r0, #0
 800515c:	d147      	bne.n	80051ee <SystemClock_Config_For_OC+0x136>
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800515e:	2340      	movs	r3, #64	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005160:	f04f 0808 	mov.w	r8, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005164:	223f      	movs	r2, #63	; 0x3f
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005166:	f44f 6780 	mov.w	r7, #1024	; 0x400
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800516a:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800516c:	4629      	mov	r1, r5
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800516e:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005170:	eb0d 0008 	add.w	r0, sp, r8
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005174:	f8cd 8014 	str.w	r8, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005178:	9708      	str	r7, [sp, #32]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800517a:	e9cd 3306 	strd	r3, r3, [sp, #24]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800517e:	2303      	movs	r3, #3
 8005180:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005184:	f006 faa4 	bl	800b6d0 <HAL_RCC_ClockConfig>
 8005188:	4603      	mov	r3, r0
 800518a:	bb80      	cbnz	r0, 80051ee <SystemClock_Config_For_OC+0x136>
	PeriphClkInitStruct.PLL2.PLL2N = 38;
 800518c:	2226      	movs	r2, #38	; 0x26
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800518e:	933c      	str	r3, [sp, #240]	; 0xf0
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8005190:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005194:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.PLL2.PLL2N = 38;
 8005196:	9221      	str	r2, [sp, #132]	; 0x84
	PeriphClkInitStruct.PLL2.PLL2P = 24;
 8005198:	2218      	movs	r2, #24
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800519a:	9520      	str	r5, [sp, #128]	; 0x80
	PeriphClkInitStruct.PLL2.PLL2P = 24;
 800519c:	9222      	str	r2, [sp, #136]	; 0x88
	PeriphClkInitStruct.PLL3.PLL3M = 5;
 800519e:	2205      	movs	r2, #5
	PeriphClkInitStruct.PLL3.PLL3Q = 8;
 80051a0:	f8cd 80ac 	str.w	r8, [sp, #172]	; 0xac
	PeriphClkInitStruct.PLL3.PLL3R = 5;
 80051a4:	922c      	str	r2, [sp, #176]	; 0xb0
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 80051a6:	942a      	str	r4, [sp, #168]	; 0xa8
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80051a8:	972d      	str	r7, [sp, #180]	; 0xb4
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80051aa:	9745      	str	r7, [sp, #276]	; 0x114
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80051ac:	9147      	str	r1, [sp, #284]	; 0x11c
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80051ae:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80051b2:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.PLL3.PLL3N = 128;
 80051b6:	2380      	movs	r3, #128	; 0x80
 80051b8:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80051bc:	9325      	str	r3, [sp, #148]	; 0x94
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80051be:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80051c2:	4a11      	ldr	r2, [pc, #68]	; (8005208 <SystemClock_Config_For_OC+0x150>)
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80051c4:	9340      	str	r3, [sp, #256]	; 0x100
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80051c6:	2300      	movs	r3, #0
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80051c8:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80051cc:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051d0:	f006 fd6a 	bl	800bca8 <HAL_RCCEx_PeriphCLKConfig>
 80051d4:	b958      	cbnz	r0, 80051ee <SystemClock_Config_For_OC+0x136>
	HAL_PWREx_EnableUSBVoltageDetector();
 80051d6:	f005 fe05 	bl	800ade4 <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 80051da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80051de:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80051e2:	4630      	mov	r0, r6
 80051e4:	f006 f980 	bl	800b4e8 <HAL_RCC_MCOConfig>
}
 80051e8:	b04e      	add	sp, #312	; 0x138
 80051ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Error_Handler();
 80051ee:	f7ff ff49 	bl	8005084 <Error_Handler>
 80051f2:	bf00      	nop
 80051f4:	58024800 	.word	0x58024800
 80051f8:	58000400 	.word	0x58000400
 80051fc:	58024400 	.word	0x58024400
 8005200:	4bbebbd3 	.word	0x4bbebbd3
 8005204:	240073e0 	.word	0x240073e0
 8005208:	000c0042 	.word	0x000c0042
 800520c:	00000000 	.word	0x00000000

08005210 <UserInput>:
{
 8005210:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (WSPRBeaconState == SEND_WSPR)
 8005212:	4e83      	ldr	r6, [pc, #524]	; (8005420 <UserInput+0x210>)
{
 8005214:	b08d      	sub	sp, #52	; 0x34
	if (WSPRBeaconState == SEND_WSPR)
 8005216:	7835      	ldrb	r5, [r6, #0]
 8005218:	2d02      	cmp	r5, #2
 800521a:	f000 8129 	beq.w	8005470 <UserInput+0x260>
	if (USBRXLength)
 800521e:	4b81      	ldr	r3, [pc, #516]	; (8005424 <UserInput+0x214>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	bb1a      	cbnz	r2, 800526c <UserInput+0x5c>
		result = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f88d 3017 	strb.w	r3, [sp, #23]
	if (result == HAL_OK)
 800522a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800522e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005232:	b32b      	cbz	r3, 8005280 <UserInput+0x70>
 8005234:	4c7c      	ldr	r4, [pc, #496]	; (8005428 <UserInput+0x218>)
	EncVal = TIM4->CNT;
 8005236:	4b7d      	ldr	r3, [pc, #500]	; (800542c <UserInput+0x21c>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005238:	4d7d      	ldr	r5, [pc, #500]	; (8005430 <UserInput+0x220>)
	EncVal = TIM4->CNT;
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 800523c:	882a      	ldrh	r2, [r5, #0]
	EncVal = TIM4->CNT;
 800523e:	b29b      	uxth	r3, r3
 8005240:	4e7c      	ldr	r6, [pc, #496]	; (8005434 <UserInput+0x224>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005242:	1a98      	subs	r0, r3, r2
	EncVal = TIM4->CNT;
 8005244:	8033      	strh	r3, [r6, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005246:	b201      	sxth	r1, r0
 8005248:	b280      	uxth	r0, r0
	if (DiffEncVal < 0)
 800524a:	2900      	cmp	r1, #0
 800524c:	f2c0 80d7 	blt.w	80053fe <UserInput+0x1ee>
	if (DiffEncVal > 0)
 8005250:	d07f      	beq.n	8005352 <UserInput+0x142>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8005252:	f7fc ffc1 	bl	80021d8 <FminusClicked>
	if (!DisableDisplay)
 8005256:	7823      	ldrb	r3, [r4, #0]
 8005258:	b913      	cbnz	r3, 8005260 <UserInput+0x50>
 800525a:	f7ff fa0b 	bl	8004674 <DisplayStatus.part.0>
	if (!DisableDisplay)
 800525e:	7823      	ldrb	r3, [r4, #0]
		LastEncVal = EncVal;
 8005260:	8832      	ldrh	r2, [r6, #0]
 8005262:	802a      	strh	r2, [r5, #0]
	if (!DisableDisplay)
 8005264:	2b00      	cmp	r3, #0
 8005266:	d077      	beq.n	8005358 <UserInput+0x148>
}
 8005268:	b00d      	add	sp, #52	; 0x34
 800526a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = HAL_OK;
 800526c:	2200      	movs	r2, #0
 800526e:	f88d 2017 	strb.w	r2, [sp, #23]
		USBRXLength = 0;
 8005272:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 8005274:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005278:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1d9      	bne.n	8005234 <UserInput+0x24>
		switch (UartRXString[0])
 8005280:	4b6d      	ldr	r3, [pc, #436]	; (8005438 <UserInput+0x228>)
		UartRXDataReady = RESET;
 8005282:	496e      	ldr	r1, [pc, #440]	; (800543c <UserInput+0x22c>)
		switch (UartRXString[0])
 8005284:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 8005286:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 8005288:	3b2b      	subs	r3, #43	; 0x2b
 800528a:	2b4c      	cmp	r3, #76	; 0x4c
 800528c:	d859      	bhi.n	8005342 <UserInput+0x132>
 800528e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005292:	0158      	.short	0x0158
 8005294:	016a0058 	.word	0x016a0058
 8005298:	00580058 	.word	0x00580058
 800529c:	017f0058 	.word	0x017f0058
 80052a0:	01870183 	.word	0x01870183
 80052a4:	018f018b 	.word	0x018f018b
 80052a8:	01970193 	.word	0x01970193
 80052ac:	019f019b 	.word	0x019f019b
 80052b0:	00580058 	.word	0x00580058
 80052b4:	00580058 	.word	0x00580058
 80052b8:	00580058 	.word	0x00580058
 80052bc:	00580058 	.word	0x00580058
 80052c0:	01a701a3 	.word	0x01a701a3
 80052c4:	005801ab 	.word	0x005801ab
 80052c8:	00580058 	.word	0x00580058
 80052cc:	00580058 	.word	0x00580058
 80052d0:	01b401af 	.word	0x01b401af
 80052d4:	005801b9 	.word	0x005801b9
 80052d8:	00580058 	.word	0x00580058
 80052dc:	00580058 	.word	0x00580058
 80052e0:	00580058 	.word	0x00580058
 80052e4:	00580058 	.word	0x00580058
 80052e8:	01be0058 	.word	0x01be0058
 80052ec:	01c60058 	.word	0x01c60058
 80052f0:	005802dc 	.word	0x005802dc
 80052f4:	00580058 	.word	0x00580058
 80052f8:	00580058 	.word	0x00580058
 80052fc:	02e40058 	.word	0x02e40058
 8005300:	02cb02c7 	.word	0x02cb02c7
 8005304:	00580058 	.word	0x00580058
 8005308:	02d302cf 	.word	0x02d302cf
 800530c:	0058004d 	.word	0x0058004d
 8005310:	00580058 	.word	0x00580058
 8005314:	005801d5 	.word	0x005801d5
 8005318:	005801d9 	.word	0x005801d9
 800531c:	00580058 	.word	0x00580058
 8005320:	021e01dd 	.word	0x021e01dd
 8005324:	02a10222 	.word	0x02a10222
 8005328:	015402a5 	.word	0x015402a5
			keyer_speed += 1;
 800532c:	4b44      	ldr	r3, [pc, #272]	; (8005440 <UserInput+0x230>)
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 8005332:	2832      	cmp	r0, #50	; 0x32
 8005334:	f340 8295 	ble.w	8005862 <UserInput+0x652>
				keyer_speed = 50;
 8005338:	2232      	movs	r2, #50	; 0x32
 800533a:	4610      	mov	r0, r2
 800533c:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 800533e:	f7fc f8cd 	bl	80014dc <loadWPM>
	if (!DisableDisplay)
 8005342:	4c39      	ldr	r4, [pc, #228]	; (8005428 <UserInput+0x218>)
 8005344:	7823      	ldrb	r3, [r4, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f47f af75 	bne.w	8005236 <UserInput+0x26>
 800534c:	f7ff f992 	bl	8004674 <DisplayStatus.part.0>
 8005350:	e771      	b.n	8005236 <UserInput+0x26>
	if (!DisableDisplay)
 8005352:	7823      	ldrb	r3, [r4, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d187      	bne.n	8005268 <UserInput+0x58>
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005358:	4b3a      	ldr	r3, [pc, #232]	; (8005444 <UserInput+0x234>)
 800535a:	4c3b      	ldr	r4, [pc, #236]	; (8005448 <UserInput+0x238>)
 800535c:	ed93 7a00 	vldr	s14, [r3]
 8005360:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8005410 <UserInput+0x200>
 8005364:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005368:	ee27 0b00 	vmul.f64	d0, d7, d0
 800536c:	f00e f9b8 	bl	80136e0 <log10>
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005370:	4936      	ldr	r1, [pc, #216]	; (800544c <UserInput+0x23c>)
 8005372:	4a37      	ldr	r2, [pc, #220]	; (8005450 <UserInput+0x240>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005374:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005378:	4b36      	ldr	r3, [pc, #216]	; (8005454 <UserInput+0x244>)
 800537a:	6808      	ldr	r0, [r1, #0]
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	4935      	ldr	r1, [pc, #212]	; (8005458 <UserInput+0x248>)
 8005382:	9300      	str	r3, [sp, #0]
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005384:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8005418 <UserInput+0x208>
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005388:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800538c:	4833      	ldr	r0, [pc, #204]	; (800545c <UserInput+0x24c>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800538e:	eea0 7b06 	vfma.f64	d7, d0, d6
 8005392:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005396:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800539a:	ed84 7a00 	vstr	s14, [r4]
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 800539e:	ec53 2b16 	vmov	r2, r3, d6
 80053a2:	f00c f853 	bl	801144c <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 80053a6:	482d      	ldr	r0, [pc, #180]	; (800545c <UserInput+0x24c>)
 80053a8:	f7fb f84a 	bl	8000440 <strlen>
 80053ac:	4601      	mov	r1, r0
 80053ae:	482b      	ldr	r0, [pc, #172]	; (800545c <UserInput+0x24c>)
 80053b0:	b289      	uxth	r1, r1
 80053b2:	f00a ffe3 	bl	801037c <CDC_Transmit_FS>
	HAL_Delay(1);
 80053b6:	2001      	movs	r0, #1
 80053b8:	f001 fbb6 	bl	8006b28 <HAL_Delay>
		if (OVFDetected)
 80053bc:	4a28      	ldr	r2, [pc, #160]	; (8005460 <UserInput+0x250>)
 80053be:	8813      	ldrh	r3, [r2, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80a4 	beq.w	800550e <UserInput+0x2fe>
			OVFDetected--;
 80053c6:	3b01      	subs	r3, #1
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 80053c8:	4926      	ldr	r1, [pc, #152]	; (8005464 <UserInput+0x254>)
 80053ca:	4c24      	ldr	r4, [pc, #144]	; (800545c <UserInput+0x24c>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 80053cc:	2580      	movs	r5, #128	; 0x80
			OVFDetected--;
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8013      	strh	r3, [r2, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 80053d2:	4a25      	ldr	r2, [pc, #148]	; (8005468 <UserInput+0x258>)
 80053d4:	6816      	ldr	r6, [r2, #0]
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 80053d6:	c907      	ldmia	r1, {r0, r1, r2}
 80053d8:	c403      	stmia	r4!, {r0, r1}
 80053da:	f824 2b02 	strh.w	r2, [r4], #2
 80053de:	0c12      	lsrs	r2, r2, #16
 80053e0:	7022      	strb	r2, [r4, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 80053e2:	4a22      	ldr	r2, [pc, #136]	; (800546c <UserInput+0x25c>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 80053e4:	6035      	str	r5, [r6, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	6015      	str	r5, [r2, #0]
			if (!OVFDetected)
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f040 8097 	bne.w	800551e <UserInput+0x30e>
				__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 80053f0:	6873      	ldr	r3, [r6, #4]
 80053f2:	432b      	orrs	r3, r5
 80053f4:	6073      	str	r3, [r6, #4]
				__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 80053f6:	6853      	ldr	r3, [r2, #4]
 80053f8:	432b      	orrs	r3, r5
 80053fa:	6053      	str	r3, [r2, #4]
 80053fc:	e08f      	b.n	800551e <UserInput+0x30e>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 80053fe:	1ad0      	subs	r0, r2, r3
 8005400:	b280      	uxth	r0, r0
 8005402:	f7fc fe7f 	bl	8002104 <FplusClicked>
	if (!DisableDisplay)
 8005406:	7823      	ldrb	r3, [r4, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f47f af29 	bne.w	8005260 <UserInput+0x50>
 800540e:	e724      	b.n	800525a <UserInput+0x4a>
 8005410:	00000000 	.word	0x00000000
 8005414:	409f4000 	.word	0x409f4000
 8005418:	9916f6a6 	.word	0x9916f6a6
 800541c:	400a93fc 	.word	0x400a93fc
 8005420:	240073dd 	.word	0x240073dd
 8005424:	240062d0 	.word	0x240062d0
 8005428:	24001010 	.word	0x24001010
 800542c:	40000800 	.word	0x40000800
 8005430:	24006240 	.word	0x24006240
 8005434:	24001012 	.word	0x24001012
 8005438:	240062d8 	.word	0x240062d8
 800543c:	240062d6 	.word	0x240062d6
 8005440:	2400a7ec 	.word	0x2400a7ec
 8005444:	2400625c 	.word	0x2400625c
 8005448:	24006264 	.word	0x24006264
 800544c:	240062b8 	.word	0x240062b8
 8005450:	240062b4 	.word	0x240062b4
 8005454:	24000ff9 	.word	0x24000ff9
 8005458:	0801dad8 	.word	0x0801dad8
 800545c:	240063d8 	.word	0x240063d8
 8005460:	24006252 	.word	0x24006252
 8005464:	0801dafc 	.word	0x0801dafc
 8005468:	2400a41c 	.word	0x2400a41c
 800546c:	2400a480 	.word	0x2400a480
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8005470:	48c5      	ldr	r0, [pc, #788]	; (8005788 <UserInput+0x578>)
 8005472:	f002 fcaf 	bl	8007dd4 <HAL_ADCEx_MultiModeStop_DMA>
		SendWSPR(); //endless loop, only way to exit is by CW keying.
 8005476:	f7fe ffff 	bl	8004478 <SendWSPR>
		if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 800547a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547e:	49c3      	ldr	r1, [pc, #780]	; (800578c <UserInput+0x57c>)
 8005480:	48c1      	ldr	r0, [pc, #772]	; (8005788 <UserInput+0x578>)
 8005482:	f002 fc2b 	bl	8007cdc <HAL_ADCEx_MultiModeStart_DMA>
 8005486:	4604      	mov	r4, r0
 8005488:	2800      	cmp	r0, #0
 800548a:	f040 81f6 	bne.w	800587a <UserInput+0x66a>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800548e:	2301      	movs	r3, #1
 8005490:	f44f 7200 	mov.w	r2, #512	; 0x200
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005494:	a906      	add	r1, sp, #24
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005496:	9508      	str	r5, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005498:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800549c:	48bc      	ldr	r0, [pc, #752]	; (8005790 <UserInput+0x580>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800549e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054a2:	f004 fac3 	bl	8009a2c <HAL_GPIO_Init>
		RELAY_TX_OFF;
 80054a6:	4622      	mov	r2, r4
 80054a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054ac:	48b9      	ldr	r0, [pc, #740]	; (8005794 <UserInput+0x584>)
 80054ae:	f004 fbf5 	bl	8009c9c <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 80054b2:	4622      	mov	r2, r4
 80054b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054b8:	48b7      	ldr	r0, [pc, #732]	; (8005798 <UserInput+0x588>)
 80054ba:	f004 fbef 	bl	8009c9c <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 80054be:	4bb7      	ldr	r3, [pc, #732]	; (800579c <UserInput+0x58c>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80054c0:	2201      	movs	r2, #1
 80054c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054c6:	48b3      	ldr	r0, [pc, #716]	; (8005794 <UserInput+0x584>)
		TransmissionEnabled = 0;
 80054c8:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ca:	940a      	str	r4, [sp, #40]	; 0x28
 80054cc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80054d0:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80054d4:	f004 fbe2 	bl	8009c9c <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 80054d8:	4622      	mov	r2, r4
 80054da:	4623      	mov	r3, r4
 80054dc:	2110      	movs	r1, #16
 80054de:	48b0      	ldr	r0, [pc, #704]	; (80057a0 <UserInput+0x590>)
 80054e0:	f002 fec4 	bl	800826c <HAL_DAC_SetValue>
		TXCarrierEnabled = 0;
 80054e4:	4baf      	ldr	r3, [pc, #700]	; (80057a4 <UserInput+0x594>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054e6:	a906      	add	r1, sp, #24
 80054e8:	48a9      	ldr	r0, [pc, #676]	; (8005790 <UserInput+0x580>)
		TXCarrierEnabled = 0;
 80054ea:	701c      	strb	r4, [r3, #0]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054ec:	f44f 7300 	mov.w	r3, #512	; 0x200
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80054f0:	9508      	str	r5, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054f2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 80054f4:	2301      	movs	r3, #1
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f6:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 80054f8:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054fa:	f004 fa97 	bl	8009a2c <HAL_GPIO_Init>
		LED_GREEN_OFF;
 80054fe:	4622      	mov	r2, r4
 8005500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005504:	48a4      	ldr	r0, [pc, #656]	; (8005798 <UserInput+0x588>)
 8005506:	f004 fbc9 	bl	8009c9c <HAL_GPIO_WritePin>
		WSPRBeaconState = NO_FIX;
 800550a:	7034      	strb	r4, [r6, #0]
 800550c:	e687      	b.n	800521e <UserInput+0xe>
			sprintf((char*)UartTXString, "\e[4;1H   \r");
 800550e:	4aa6      	ldr	r2, [pc, #664]	; (80057a8 <UserInput+0x598>)
 8005510:	4ba6      	ldr	r3, [pc, #664]	; (80057ac <UserInput+0x59c>)
 8005512:	ca07      	ldmia	r2, {r0, r1, r2}
 8005514:	0c14      	lsrs	r4, r2, #16
 8005516:	c303      	stmia	r3!, {r0, r1}
 8005518:	f823 2b02 	strh.w	r2, [r3], #2
 800551c:	701c      	strb	r4, [r3, #0]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 800551e:	48a3      	ldr	r0, [pc, #652]	; (80057ac <UserInput+0x59c>)
 8005520:	f7fa ff8e 	bl	8000440 <strlen>
 8005524:	4601      	mov	r1, r0
 8005526:	48a1      	ldr	r0, [pc, #644]	; (80057ac <UserInput+0x59c>)
 8005528:	b289      	uxth	r1, r1
 800552a:	f00a ff27 	bl	801037c <CDC_Transmit_FS>
	HAL_Delay(1);
 800552e:	2001      	movs	r0, #1
}
 8005530:	b00d      	add	sp, #52	; 0x34
 8005532:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_Delay(1);
 8005536:	f001 baf7 	b.w	8006b28 <HAL_Delay>
			SetBW((Bwidth)Wide);  break;
 800553a:	2001      	movs	r0, #1
 800553c:	f7fc fc14 	bl	8001d68 <SetBW>
 8005540:	e6ff      	b.n	8005342 <UserInput+0x132>
			volume += 0.1;
 8005542:	4b9b      	ldr	r3, [pc, #620]	; (80057b0 <UserInput+0x5a0>)
			if (volume > 1.0)
 8005544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8005548:	ed93 7a00 	vldr	s14, [r3]
 800554c:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8005780 <UserInput+0x570>
 8005550:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005554:	ee37 7b05 	vadd.f64	d7, d7, d5
 8005558:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800555c:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8005560:	edc3 7a00 	vstr	s15, [r3]
 8005564:	e6ed      	b.n	8005342 <UserInput+0x132>
			volume -= 0.1;
 8005566:	4b92      	ldr	r3, [pc, #584]	; (80057b0 <UserInput+0x5a0>)
			if (volume < 0)
 8005568:	2200      	movs	r2, #0
			volume -= 0.1;
 800556a:	ed93 7a00 	vldr	s14, [r3]
 800556e:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8005780 <UserInput+0x570>
 8005572:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005576:	ee37 7b46 	vsub.f64	d7, d7, d6
 800557a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 800557e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8005586:	bf54      	ite	pl
 8005588:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 800558c:	601a      	strmi	r2, [r3, #0]
 800558e:	e6d8      	b.n	8005342 <UserInput+0x132>
			FminusClicked(2); break;
 8005590:	2002      	movs	r0, #2
 8005592:	f7fc fe21 	bl	80021d8 <FminusClicked>
 8005596:	e6d4      	b.n	8005342 <UserInput+0x132>
			FplusClicked(2); break;
 8005598:	2002      	movs	r0, #2
 800559a:	f7fc fdb3 	bl	8002104 <FplusClicked>
 800559e:	e6d0      	b.n	8005342 <UserInput+0x132>
			SetFstep(5);  break;
 80055a0:	2005      	movs	r0, #5
 80055a2:	f7fc fd8d 	bl	80020c0 <SetFstep>
 80055a6:	e6cc      	b.n	8005342 <UserInput+0x132>
			SetFstep(4);  break;
 80055a8:	2004      	movs	r0, #4
 80055aa:	f7fc fd89 	bl	80020c0 <SetFstep>
 80055ae:	e6c8      	b.n	8005342 <UserInput+0x132>
			SetFstep(3);  break;
 80055b0:	2003      	movs	r0, #3
 80055b2:	f7fc fd85 	bl	80020c0 <SetFstep>
 80055b6:	e6c4      	b.n	8005342 <UserInput+0x132>
			SetFstep(2);  break;
 80055b8:	2002      	movs	r0, #2
 80055ba:	f7fc fd81 	bl	80020c0 <SetFstep>
 80055be:	e6c0      	b.n	8005342 <UserInput+0x132>
			SetFstep(1); break;
 80055c0:	2001      	movs	r0, #1
 80055c2:	f7fc fd7d 	bl	80020c0 <SetFstep>
 80055c6:	e6bc      	b.n	8005342 <UserInput+0x132>
			SetFstep(0); break;
 80055c8:	2000      	movs	r0, #0
 80055ca:	f7fc fd79 	bl	80020c0 <SetFstep>
 80055ce:	e6b8      	b.n	8005342 <UserInput+0x132>
			SetFstep(9); break;
 80055d0:	2009      	movs	r0, #9
 80055d2:	f7fc fd75 	bl	80020c0 <SetFstep>
 80055d6:	e6b4      	b.n	8005342 <UserInput+0x132>
			DisableDisplay = 1; break;
 80055d8:	4c76      	ldr	r4, [pc, #472]	; (80057b4 <UserInput+0x5a4>)
 80055da:	2301      	movs	r3, #1
 80055dc:	7023      	strb	r3, [r4, #0]
	if (!DisableDisplay)
 80055de:	e62a      	b.n	8005236 <UserInput+0x26>
			SendCWMessage(0); break;
 80055e0:	2000      	movs	r0, #0
 80055e2:	f7fc fa05 	bl	80019f0 <SendCWMessage>
 80055e6:	e6ac      	b.n	8005342 <UserInput+0x132>
			SendCWMessage(1); break;
 80055e8:	2001      	movs	r0, #1
 80055ea:	f7fc fa01 	bl	80019f0 <SendCWMessage>
 80055ee:	e6a8      	b.n	8005342 <UserInput+0x132>
			TxPowerOut = LOW_POWER_OUT;
 80055f0:	4b71      	ldr	r3, [pc, #452]	; (80057b8 <UserInput+0x5a8>)
 80055f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055f6:	601a      	str	r2, [r3, #0]
			break;
 80055f8:	e6a3      	b.n	8005342 <UserInput+0x132>
			TxPowerOut = MID_POWER_OUT;
 80055fa:	4b6f      	ldr	r3, [pc, #444]	; (80057b8 <UserInput+0x5a8>)
 80055fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005600:	601a      	str	r2, [r3, #0]
			break;
 8005602:	e69e      	b.n	8005342 <UserInput+0x132>
			TxPowerOut = MAX_POWER_OUT;
 8005604:	4b6c      	ldr	r3, [pc, #432]	; (80057b8 <UserInput+0x5a8>)
 8005606:	f640 72ff 	movw	r2, #4095	; 0xfff
 800560a:	601a      	str	r2, [r3, #0]
			break;
 800560c:	e699      	b.n	8005342 <UserInput+0x132>
			if (ShowWF)
 800560e:	4b6b      	ldr	r3, [pc, #428]	; (80057bc <UserInput+0x5ac>)
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	2a00      	cmp	r2, #0
 8005614:	f000 8127 	beq.w	8005866 <UserInput+0x656>
				ShowWF=0;
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e691      	b.n	8005342 <UserInput+0x132>
			SetWSPRPLLCoeff((double)LOfreq, FracDivCoeff, FracPWMCoeff);
 800561e:	4b68      	ldr	r3, [pc, #416]	; (80057c0 <UserInput+0x5b0>)
 8005620:	4968      	ldr	r1, [pc, #416]	; (80057c4 <UserInput+0x5b4>)
 8005622:	ed93 0a00 	vldr	s0, [r3]
 8005626:	4868      	ldr	r0, [pc, #416]	; (80057c8 <UserInput+0x5b8>)
 8005628:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800562c:	f7ff f9b8 	bl	80049a0 <SetWSPRPLLCoeff>
			TransmittingWSPR = 1;
 8005630:	4b66      	ldr	r3, [pc, #408]	; (80057cc <UserInput+0x5bc>)
 8005632:	2201      	movs	r2, #1
 8005634:	701a      	strb	r2, [r3, #0]
			SendWSPR();
 8005636:	f7fe ff1f 	bl	8004478 <SendWSPR>
			break;
 800563a:	e682      	b.n	8005342 <UserInput+0x132>
			SetMode((Mode)LSB); break;
 800563c:	2001      	movs	r0, #1
 800563e:	f7fc fd07 	bl	8002050 <SetMode>
 8005642:	e67e      	b.n	8005342 <UserInput+0x132>
			SetBW((Bwidth)Narrow);  break;
 8005644:	2000      	movs	r0, #0
 8005646:	f7fc fb8f 	bl	8001d68 <SetBW>
 800564a:	e67a      	b.n	8005342 <UserInput+0x132>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800564c:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800564e:	2301      	movs	r3, #1
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005650:	2502      	movs	r5, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005652:	f44f 7200 	mov.w	r2, #512	; 0x200
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005656:	a906      	add	r1, sp, #24
 8005658:	484d      	ldr	r0, [pc, #308]	; (8005790 <UserInput+0x580>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800565a:	9508      	str	r5, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800565c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005660:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005664:	f004 f9e2 	bl	8009a2c <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8005668:	4622      	mov	r2, r4
 800566a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800566e:	4849      	ldr	r0, [pc, #292]	; (8005794 <UserInput+0x584>)
 8005670:	f004 fb14 	bl	8009c9c <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8005674:	4622      	mov	r2, r4
 8005676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800567a:	4847      	ldr	r0, [pc, #284]	; (8005798 <UserInput+0x588>)
 800567c:	f004 fb0e 	bl	8009c9c <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005680:	4b46      	ldr	r3, [pc, #280]	; (800579c <UserInput+0x58c>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005682:	2201      	movs	r2, #1
 8005684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005688:	4842      	ldr	r0, [pc, #264]	; (8005794 <UserInput+0x584>)
		TransmissionEnabled = 0;
 800568a:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568c:	940a      	str	r4, [sp, #40]	; 0x28
 800568e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8005692:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8005696:	f004 fb01 	bl	8009c9c <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 800569a:	4622      	mov	r2, r4
 800569c:	4623      	mov	r3, r4
 800569e:	2110      	movs	r1, #16
 80056a0:	483f      	ldr	r0, [pc, #252]	; (80057a0 <UserInput+0x590>)
 80056a2:	f002 fde3 	bl	800826c <HAL_DAC_SetValue>
		TXCarrierEnabled = 0;
 80056a6:	4b3f      	ldr	r3, [pc, #252]	; (80057a4 <UserInput+0x594>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056a8:	a906      	add	r1, sp, #24
 80056aa:	4839      	ldr	r0, [pc, #228]	; (8005790 <UserInput+0x580>)
		TXCarrierEnabled = 0;
 80056ac:	701c      	strb	r4, [r3, #0]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056ae:	f44f 7300 	mov.w	r3, #512	; 0x200
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80056b2:	9508      	str	r5, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056b4:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 80056b6:	2301      	movs	r3, #1
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b8:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 80056ba:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056bc:	f004 f9b6 	bl	8009a2c <HAL_GPIO_Init>
		LED_GREEN_OFF;
 80056c0:	4622      	mov	r2, r4
 80056c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056c6:	4834      	ldr	r0, [pc, #208]	; (8005798 <UserInput+0x588>)
 80056c8:	f004 fae8 	bl	8009c9c <HAL_GPIO_WritePin>
}
 80056cc:	e639      	b.n	8005342 <UserInput+0x132>
			SetAGC((Agctype)Slow);  break;
 80056ce:	2001      	movs	r0, #1
 80056d0:	f7fc fbac 	bl	8001e2c <SetAGC>
 80056d4:	e635      	b.n	8005342 <UserInput+0x132>
		if (LastTXFreq != LOfreq)
 80056d6:	483a      	ldr	r0, [pc, #232]	; (80057c0 <UserInput+0x5b0>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d8:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 80056da:	4c3d      	ldr	r4, [pc, #244]	; (80057d0 <UserInput+0x5c0>)
		TransmissionEnabled = 1;
 80056dc:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 80056de:	ed90 3a00 	vldr	s6, [r0]
 80056e2:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 80056e6:	4a2d      	ldr	r2, [pc, #180]	; (800579c <UserInput+0x58c>)
		if (LastTXFreq != LOfreq)
 80056e8:	eef4 7a43 	vcmp.f32	s15, s6
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ec:	9306      	str	r3, [sp, #24]
		TransmissionEnabled = 1;
 80056ee:	7011      	strb	r1, [r2, #0]
		if (LastTXFreq != LOfreq)
 80056f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80056f8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
		if (LastTXFreq != LOfreq)
 80056fc:	f040 80b6 	bne.w	800586c <UserInput+0x65c>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005700:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005702:	f44f 7700 	mov.w	r7, #512	; 0x200
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005706:	2602      	movs	r6, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005708:	2503      	movs	r5, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800570a:	a906      	add	r1, sp, #24
 800570c:	4820      	ldr	r0, [pc, #128]	; (8005790 <UserInput+0x580>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800570e:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005710:	e9cd 6407 	strd	r6, r4, [sp, #28]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005714:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005718:	f004 f988 	bl	8009a2c <HAL_GPIO_Init>
		RELAY_TX_ON;
 800571c:	2201      	movs	r2, #1
 800571e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005722:	481c      	ldr	r0, [pc, #112]	; (8005794 <UserInput+0x584>)
 8005724:	f004 faba 	bl	8009c9c <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8005728:	2201      	movs	r2, #1
 800572a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800572e:	481a      	ldr	r0, [pc, #104]	; (8005798 <UserInput+0x588>)
 8005730:	f004 fab4 	bl	8009c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8005734:	4622      	mov	r2, r4
 8005736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800573a:	4816      	ldr	r0, [pc, #88]	; (8005794 <UserInput+0x584>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800573c:	940a      	str	r4, [sp, #40]	; 0x28
 800573e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8005742:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8005746:	f004 faa9 	bl	8009c9c <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 800574a:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <UserInput+0x5a8>)
 800574c:	4622      	mov	r2, r4
 800574e:	2110      	movs	r1, #16
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4813      	ldr	r0, [pc, #76]	; (80057a0 <UserInput+0x590>)
 8005754:	f002 fd8a 	bl	800826c <HAL_DAC_SetValue>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005758:	a906      	add	r1, sp, #24
 800575a:	480d      	ldr	r0, [pc, #52]	; (8005790 <UserInput+0x580>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800575c:	9706      	str	r7, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575e:	e9cd 6407 	strd	r6, r4, [sp, #28]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005762:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005766:	f004 f961 	bl	8009a2c <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 800576a:	2201      	movs	r2, #1
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <UserInput+0x594>)
		LED_GREEN_ON;
 800576e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005772:	4809      	ldr	r0, [pc, #36]	; (8005798 <UserInput+0x588>)
		TXCarrierEnabled = 1;
 8005774:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8005776:	f004 fa91 	bl	8009c9c <HAL_GPIO_WritePin>
}
 800577a:	e5e2      	b.n	8005342 <UserInput+0x132>
 800577c:	f3af 8000 	nop.w
 8005780:	9999999a 	.word	0x9999999a
 8005784:	3fb99999 	.word	0x3fb99999
 8005788:	2400a41c 	.word	0x2400a41c
 800578c:	24007400 	.word	0x24007400
 8005790:	58020800 	.word	0x58020800
 8005794:	58020c00 	.word	0x58020c00
 8005798:	58020400 	.word	0x58020400
 800579c:	240062c8 	.word	0x240062c8
 80057a0:	2400a4e8 	.word	0x2400a4e8
 80057a4:	240062bc 	.word	0x240062bc
 80057a8:	0801db08 	.word	0x0801db08
 80057ac:	240063d8 	.word	0x240063d8
 80057b0:	2400b9ac 	.word	0x2400b9ac
 80057b4:	24001010 	.word	0x24001010
 80057b8:	240062cc 	.word	0x240062cc
 80057bc:	24006288 	.word	0x24006288
 80057c0:	24006238 	.word	0x24006238
 80057c4:	24005218 	.word	0x24005218
 80057c8:	2400520c 	.word	0x2400520c
 80057cc:	240062c9 	.word	0x240062c9
 80057d0:	24006244 	.word	0x24006244
			SetMode((Mode)USB); break;
 80057d4:	2002      	movs	r0, #2
 80057d6:	f7fc fc3b 	bl	8002050 <SetMode>
 80057da:	e5b2      	b.n	8005342 <UserInput+0x132>
	__HAL_RCC_PLL2FRACN_DISABLE();
 80057dc:	4a28      	ldr	r2, [pc, #160]	; (8005880 <UserInput+0x670>)
	for (i=0; i< 50; i++)
 80057de:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 80057e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057e2:	f023 0310 	bic.w	r3, r3, #16
 80057e6:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 80057e8:	9106      	str	r1, [sp, #24]
 80057ea:	9b06      	ldr	r3, [sp, #24]
 80057ec:	2b31      	cmp	r3, #49	; 0x31
 80057ee:	d80b      	bhi.n	8005808 <UserInput+0x5f8>
		i++;
 80057f0:	9b06      	ldr	r3, [sp, #24]
 80057f2:	3301      	adds	r3, #1
 80057f4:	9306      	str	r3, [sp, #24]
		i--;
 80057f6:	9b06      	ldr	r3, [sp, #24]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	9306      	str	r3, [sp, #24]
	for (i=0; i< 50; i++)
 80057fc:	9b06      	ldr	r3, [sp, #24]
 80057fe:	3301      	adds	r3, #1
 8005800:	9306      	str	r3, [sp, #24]
 8005802:	9b06      	ldr	r3, [sp, #24]
 8005804:	2b31      	cmp	r3, #49	; 0x31
 8005806:	d9f3      	bls.n	80057f0 <UserInput+0x5e0>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8005808:	4a1d      	ldr	r2, [pc, #116]	; (8005880 <UserInput+0x670>)
 800580a:	4b1e      	ldr	r3, [pc, #120]	; (8005884 <UserInput+0x674>)
 800580c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800580e:	400b      	ands	r3, r1
 8005810:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005814:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8005816:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005818:	f043 0310 	orr.w	r3, r3, #16
 800581c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800581e:	e590      	b.n	8005342 <UserInput+0x132>
			DisableDisplay = 0; break;
 8005820:	4c19      	ldr	r4, [pc, #100]	; (8005888 <UserInput+0x678>)
 8005822:	2300      	movs	r3, #0
 8005824:	7023      	strb	r3, [r4, #0]
	if (!DisableDisplay)
 8005826:	e591      	b.n	800534c <UserInput+0x13c>
			SetMode((Mode)CW); break;
 8005828:	2003      	movs	r0, #3
 800582a:	f7fc fc11 	bl	8002050 <SetMode>
 800582e:	e588      	b.n	8005342 <UserInput+0x132>
			SetAGC((Agctype)Fast);  break;
 8005830:	2000      	movs	r0, #0
 8005832:	f7fc fafb 	bl	8001e2c <SetAGC>
 8005836:	e584      	b.n	8005342 <UserInput+0x132>
			keyer_speed -= 1;
 8005838:	4b14      	ldr	r3, [pc, #80]	; (800588c <UserInput+0x67c>)
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 800583e:	2802      	cmp	r0, #2
 8005840:	dc0f      	bgt.n	8005862 <UserInput+0x652>
				keyer_speed = 3;
 8005842:	2203      	movs	r2, #3
 8005844:	4610      	mov	r0, r2
 8005846:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8005848:	e579      	b.n	800533e <UserInput+0x12e>
			uwTick = SystemSeconds = SystemMinutes = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	4810      	ldr	r0, [pc, #64]	; (8005890 <UserInput+0x680>)
 800584e:	4911      	ldr	r1, [pc, #68]	; (8005894 <UserInput+0x684>)
 8005850:	4a11      	ldr	r2, [pc, #68]	; (8005898 <UserInput+0x688>)
 8005852:	6003      	str	r3, [r0, #0]
 8005854:	600b      	str	r3, [r1, #0]
 8005856:	6013      	str	r3, [r2, #0]
			break;
 8005858:	e573      	b.n	8005342 <UserInput+0x132>
			SetMode((Mode)AM); break;
 800585a:	2000      	movs	r0, #0
 800585c:	f7fc fbf8 	bl	8002050 <SetMode>
 8005860:	e56f      	b.n	8005342 <UserInput+0x132>
			keyer_speed += 1;
 8005862:	6018      	str	r0, [r3, #0]
 8005864:	e56b      	b.n	800533e <UserInput+0x12e>
				ShowWF=1;
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	e56a      	b.n	8005342 <UserInput+0x132>
			SetTXPLL(LOfreq);
 800586c:	eeb0 0a43 	vmov.f32	s0, s6
 8005870:	f7ff fa0e 	bl	8004c90 <SetTXPLL>
			LastTXFreq = LOfreq;
 8005874:	ed84 3a00 	vstr	s6, [r4]
 8005878:	e742      	b.n	8005700 <UserInput+0x4f0>
			Error_Handler();
 800587a:	f7ff fc03 	bl	8005084 <Error_Handler>
 800587e:	bf00      	nop
 8005880:	58024400 	.word	0x58024400
 8005884:	ffff0007 	.word	0xffff0007
 8005888:	24001010 	.word	0x24001010
 800588c:	2400a7ec 	.word	0x2400a7ec
 8005890:	240062b4 	.word	0x240062b4
 8005894:	240062b8 	.word	0x240062b8
 8005898:	2400b9b8 	.word	0x2400b9b8

0800589c <MX_TIM6_Init_Custom_Rate>:
{
 800589c:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800589e:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 80058a0:	4c0f      	ldr	r4, [pc, #60]	; (80058e0 <MX_TIM6_Init_Custom_Rate+0x44>)
 80058a2:	4810      	ldr	r0, [pc, #64]	; (80058e4 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 80058a4:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 80058a6:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058aa:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058ac:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058ae:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 80058b0:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80058b4:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 80058b6:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80058be:	f007 fbd9 	bl	800d074 <HAL_TIM_Base_Init>
 80058c2:	b950      	cbnz	r0, 80058da <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80058c4:	4603      	mov	r3, r0
 80058c6:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80058c8:	a901      	add	r1, sp, #4
 80058ca:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058cc:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80058ce:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80058d0:	f008 f80a 	bl	800d8e8 <HAL_TIMEx_MasterConfigSynchronization>
 80058d4:	b908      	cbnz	r0, 80058da <MX_TIM6_Init_Custom_Rate+0x3e>
}
 80058d6:	b004      	add	sp, #16
 80058d8:	bd10      	pop	{r4, pc}
		Error_Handler();
 80058da:	f7ff fbd3 	bl	8005084 <Error_Handler>
 80058de:	bf00      	nop
 80058e0:	2400a6bc 	.word	0x2400a6bc
 80058e4:	40001000 	.word	0x40001000

080058e8 <main>:
{
 80058e8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80058ec:	b0c9      	sub	sp, #292	; 0x124
  HAL_Init();
 80058ee:	f001 f8d9 	bl	8006aa4 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80058f2:	4ace      	ldr	r2, [pc, #824]	; (8005c2c <main+0x344>)
 80058f4:	6953      	ldr	r3, [r2, #20]
 80058f6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80058fa:	d111      	bne.n	8005920 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80058fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005900:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005904:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005908:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800590c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005910:	6953      	ldr	r3, [r2, #20]
 8005912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005916:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005918:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800591c:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005920:	2600      	movs	r6, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005922:	4cc3      	ldr	r4, [pc, #780]	; (8005c30 <main+0x348>)
	SystemClock_Config_For_OC();
 8005924:	f7ff fbc8 	bl	80050b8 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB sometimes (and almost always on an Android phone) does not initialize
 8005928:	2014      	movs	r0, #20
 800592a:	f001 f8fd 	bl	8006b28 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592e:	9643      	str	r6, [sp, #268]	; 0x10c
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8005930:	4632      	mov	r2, r6
 8005932:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8005936:	48bf      	ldr	r0, [pc, #764]	; (8005c34 <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005938:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = SwInt1_Pin;
 800593a:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800593e:	2702      	movs	r7, #2
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005940:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005944:	e9cd 663f 	strd	r6, r6, [sp, #252]	; 0xfc
 8005948:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800594c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005950:	f043 0304 	orr.w	r3, r3, #4
 8005954:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005958:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	9304      	str	r3, [sp, #16]
 8005962:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005964:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005970:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	9305      	str	r3, [sp, #20]
 800597a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800597c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005988:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	9306      	str	r3, [sp, #24]
 8005992:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005994:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005998:	f043 0302 	orr.w	r3, r3, #2
 800599c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80059a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	9307      	str	r3, [sp, #28]
 80059aa:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80059b0:	f043 0308 	orr.w	r3, r3, #8
 80059b4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80059b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	9308      	str	r3, [sp, #32]
 80059c2:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 80059c4:	f004 f96a 	bl	8009c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 80059c8:	4632      	mov	r2, r6
 80059ca:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80059ce:	489a      	ldr	r0, [pc, #616]	; (8005c38 <main+0x350>)
 80059d0:	f004 f964 	bl	8009c9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 80059d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 80059d8:	a93f      	add	r1, sp, #252	; 0xfc
 80059da:	4898      	ldr	r0, [pc, #608]	; (8005c3c <main+0x354>)
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 80059dc:	933f      	str	r3, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059de:	e9cd 6540 	strd	r6, r5, [sp, #256]	; 0x100
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 80059e2:	f004 f823 	bl	8009a2c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80059e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80059ea:	a93f      	add	r1, sp, #252	; 0xfc
 80059ec:	4893      	ldr	r0, [pc, #588]	; (8005c3c <main+0x354>)
  GPIO_InitStruct.Pin = SwInt1_Pin;
 80059ee:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80059f2:	9340      	str	r3, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059f4:	9541      	str	r5, [sp, #260]	; 0x104
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80059f6:	f004 f819 	bl	8009a2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80059fa:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fc:	a93f      	add	r1, sp, #252	; 0xfc
 80059fe:	4890      	ldr	r0, [pc, #576]	; (8005c40 <main+0x358>)
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8005a00:	933f      	str	r3, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a02:	e9cd 6540 	strd	r6, r5, [sp, #256]	; 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a06:	f004 f811 	bl	8009a2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8005a0a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a0e:	a93f      	add	r1, sp, #252	; 0xfc
 8005a10:	4888      	ldr	r0, [pc, #544]	; (8005c34 <main+0x34c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a12:	9642      	str	r6, [sp, #264]	; 0x108
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8005a14:	933f      	str	r3, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a16:	e9cd 5640 	strd	r5, r6, [sp, #256]	; 0x100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a1a:	f004 f807 	bl	8009a2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8005a1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a22:	a93f      	add	r1, sp, #252	; 0xfc
 8005a24:	4884      	ldr	r0, [pc, #528]	; (8005c38 <main+0x350>)
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8005a26:	933f      	str	r3, [sp, #252]	; 0xfc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a28:	9642      	str	r6, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a2a:	9540      	str	r5, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005a2c:	9741      	str	r7, [sp, #260]	; 0x104
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a2e:	f003 fffd 	bl	8009a2c <HAL_GPIO_Init>
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005a32:	a93f      	add	r1, sp, #252	; 0xfc
 8005a34:	4880      	ldr	r0, [pc, #512]	; (8005c38 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a36:	9541      	str	r5, [sp, #260]	; 0x104
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a38:	e9cd 863f 	strd	r8, r6, [sp, #252]	; 0xfc
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005a3c:	f003 fff6 	bl	8009a2c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a40:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005a44:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a48:	a93f      	add	r1, sp, #252	; 0xfc
 8005a4a:	487c      	ldr	r0, [pc, #496]	; (8005c3c <main+0x354>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005a4c:	933f      	str	r3, [sp, #252]	; 0xfc
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a4e:	9643      	str	r6, [sp, #268]	; 0x10c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a50:	f8cd 8108 	str.w	r8, [sp, #264]	; 0x108
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a54:	e9cd 7640 	strd	r7, r6, [sp, #256]	; 0x100
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a58:	f003 ffe8 	bl	8009a2c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	2104      	movs	r1, #4
 8005a60:	2028      	movs	r0, #40	; 0x28
 8005a62:	f002 facb 	bl	8007ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005a66:	2028      	movs	r0, #40	; 0x28
 8005a68:	f002 fb06 	bl	8008078 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a6c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005a70:	4632      	mov	r2, r6
 8005a72:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a74:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005a76:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a78:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005a7c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  hadc1.Instance = ADC1;
 8005a80:	4c70      	ldr	r4, [pc, #448]	; (8005c44 <main+0x35c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a82:	402b      	ands	r3, r5
 8005a84:	9303      	str	r3, [sp, #12]
 8005a86:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005a88:	f002 fab8 	bl	8007ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005a8c:	200b      	movs	r0, #11
 8005a8e:	f002 faf3 	bl	8008078 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8005a92:	4632      	mov	r2, r6
 8005a94:	4639      	mov	r1, r7
 8005a96:	200c      	movs	r0, #12
 8005a98:	f002 fab0 	bl	8007ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005a9c:	200c      	movs	r0, #12
 8005a9e:	f002 faeb 	bl	8008078 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005aa2:	4b69      	ldr	r3, [pc, #420]	; (8005c48 <main+0x360>)
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8005aa4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005aa8:	f44f 7880 	mov.w	r8, #256	; 0x100
  ADC_MultiModeTypeDef multimode = {0};
 8005aac:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005aae:	4620      	mov	r0, r4
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005ab0:	9622      	str	r6, [sp, #136]	; 0x88
  ADC_ChannelConfTypeDef sConfig = {0};
 8005ab2:	962f      	str	r6, [sp, #188]	; 0xbc
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005ab4:	9627      	str	r6, [sp, #156]	; 0x9c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005ab6:	60e6      	str	r6, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005ab8:	7726      	strb	r6, [r4, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005aba:	6366      	str	r6, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005abc:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005ac0:	f8a4 8014 	strh.w	r8, [r4, #20]
  hadc1.Init.NbrOfConversion = 1;
 8005ac4:	61a5      	str	r5, [r4, #24]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005ac6:	e9c4 3b00 	strd	r3, fp, [r4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005aca:	2308      	movs	r3, #8
  ADC_MultiModeTypeDef multimode = {0};
 8005acc:	e9cd 6616 	strd	r6, r6, [sp, #88]	; 0x58
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005ad0:	e9cd 6623 	strd	r6, r6, [sp, #140]	; 0x8c
 8005ad4:	e9cd 6625 	strd	r6, r6, [sp, #148]	; 0x94
  ADC_ChannelConfTypeDef sConfig = {0};
 8005ad8:	e9cd 6630 	strd	r6, r6, [sp, #192]	; 0xc0
 8005adc:	e9cd 6632 	strd	r6, r6, [sp, #200]	; 0xc8
 8005ae0:	e9cd 6634 	strd	r6, r6, [sp, #208]	; 0xd0
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ae4:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005ae8:	60a3      	str	r3, [r4, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005aea:	2604      	movs	r6, #4
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005af0:	6126      	str	r6, [r4, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005af2:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005af4:	f001 ff92 	bl	8007a1c <HAL_ADC_Init>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	f040 8308 	bne.w	800610e <main+0x826>
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8005afe:	2707      	movs	r7, #7
 8005b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005b04:	a915      	add	r1, sp, #84	; 0x54
 8005b06:	4620      	mov	r0, r4
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8005b08:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8005b0c:	e9cd 7315 	strd	r7, r3, [sp, #84]	; 0x54
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005b10:	f002 f9fa 	bl	8007f08 <HAL_ADCEx_MultiModeConfigChannel>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f040 82fa 	bne.w	800610e <main+0x826>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8005b1a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005b1e:	4b4b      	ldr	r3, [pc, #300]	; (8005c4c <main+0x364>)
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005b20:	4f4b      	ldr	r7, [pc, #300]	; (8005c50 <main+0x368>)
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8005b22:	a922      	add	r1, sp, #136	; 0x88
 8005b24:	4620      	mov	r0, r4
  AnalogWDGConfig.ITMode = ENABLE;
 8005b26:	f88d 5094 	strb.w	r5, [sp, #148]	; 0x94
  AnalogWDGConfig.LowThreshold = 1;
 8005b2a:	9527      	str	r5, [sp, #156]	; 0x9c
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005b2c:	9724      	str	r7, [sp, #144]	; 0x90
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8005b2e:	e9cd 3222 	strd	r3, r2, [sp, #136]	; 0x88
  AnalogWDGConfig.HighThreshold = 4094;
 8005b32:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005b36:	9226      	str	r2, [sp, #152]	; 0x98
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8005b38:	f001 fbea 	bl	8007310 <HAL_ADC_AnalogWDGConfig>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	f040 82e6 	bne.w	800610e <main+0x826>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005b42:	f04f 0a06 	mov.w	sl, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005b46:	f240 72ff 	movw	r2, #2047	; 0x7ff
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005b4a:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b4c:	a92f      	add	r1, sp, #188	; 0xbc
  sConfig.OffsetSignedSaturation = DISABLE;
 8005b4e:	f88d 00d5 	strb.w	r0, [sp, #213]	; 0xd5
  sConfig.Channel = ADC_CHANNEL_5;
 8005b52:	972f      	str	r7, [sp, #188]	; 0xbc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005b54:	f8cd a0c0 	str.w	sl, [sp, #192]	; 0xc0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005b58:	9232      	str	r2, [sp, #200]	; 0xc8
  sConfig.Offset = 0;
 8005b5a:	e9cd 6033 	strd	r6, r0, [sp, #204]	; 0xcc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f001 f9ae 	bl	8006ec0 <HAL_ADC_ConfigChannel>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f040 82d2 	bne.w	800610e <main+0x826>
  hadc2.Instance = ADC2;
 8005b6a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8005c60 <main+0x378>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005b6e:	2208      	movs	r2, #8
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005b70:	901c      	str	r0, [sp, #112]	; 0x70
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005b72:	f8c9 2008 	str.w	r2, [r9, #8]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  ADC_ChannelConfTypeDef sConfig = {0};
 8005b7a:	9028      	str	r0, [sp, #160]	; 0xa0
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005b7c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
  hadc2.Instance = ADC2;
 8005b80:	4a34      	ldr	r2, [pc, #208]	; (8005c54 <main+0x36c>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005b82:	9021      	str	r0, [sp, #132]	; 0x84
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005b84:	f889 001c 	strb.w	r0, [r9, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8005b88:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005b8c:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8005b90:	f889 0038 	strb.w	r0, [r9, #56]	; 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005b94:	f8c9 b004 	str.w	fp, [r9, #4]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005b98:	f8a9 8014 	strh.w	r8, [r9, #20]
  hadc2.Init.NbrOfConversion = 1;
 8005b9c:	f8c9 5018 	str.w	r5, [r9, #24]
  hadc2.Instance = ADC2;
 8005ba0:	f8c9 2000 	str.w	r2, [r9]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005ba4:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
 8005ba8:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  ADC_ChannelConfTypeDef sConfig = {0};
 8005bac:	e9cd 0029 	strd	r0, r0, [sp, #164]	; 0xa4
 8005bb0:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 8005bb4:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005bb8:	e9c9 0603 	strd	r0, r6, [r9, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005bbc:	4648      	mov	r0, r9
 8005bbe:	f001 ff2d 	bl	8007a1c <HAL_ADC_Init>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	f040 82a3 	bne.w	800610e <main+0x826>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8005bc8:	4820      	ldr	r0, [pc, #128]	; (8005c4c <main+0x364>)
 8005bca:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8005bce:	a91c      	add	r1, sp, #112	; 0x70
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005bd0:	971e      	str	r7, [sp, #120]	; 0x78
  AnalogWDGConfig.ITMode = ENABLE;
 8005bd2:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
  AnalogWDGConfig.LowThreshold = 1;
 8005bd6:	9521      	str	r5, [sp, #132]	; 0x84
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8005bd8:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
  AnalogWDGConfig.HighThreshold = 4094;
 8005bdc:	f640 73fe 	movw	r3, #4094	; 0xffe
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8005be0:	4648      	mov	r0, r9
  AnalogWDGConfig.HighThreshold = 4094;
 8005be2:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8005be4:	f001 fb94 	bl	8007310 <HAL_ADC_AnalogWDGConfig>
 8005be8:	4602      	mov	r2, r0
 8005bea:	2800      	cmp	r0, #0
 8005bec:	f040 828f 	bne.w	800610e <main+0x826>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005bf0:	f240 73ff 	movw	r3, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bf4:	a928      	add	r1, sp, #160	; 0xa0
 8005bf6:	4648      	mov	r0, r9
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005bf8:	922a      	str	r2, [sp, #168]	; 0xa8
  sConfig.Offset = 0;
 8005bfa:	922d      	str	r2, [sp, #180]	; 0xb4
  sConfig.OffsetSignedSaturation = DISABLE;
 8005bfc:	f88d 20b9 	strb.w	r2, [sp, #185]	; 0xb9
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005c00:	e9cd 7a28 	strd	r7, sl, [sp, #160]	; 0xa0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005c04:	e9cd 362b 	strd	r3, r6, [sp, #172]	; 0xac
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c08:	f001 f95a 	bl	8006ec0 <HAL_ADC_ConfigChannel>
 8005c0c:	4601      	mov	r1, r0
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f040 827d 	bne.w	800610e <main+0x826>
  hdac1.Instance = DAC1;
 8005c14:	4e10      	ldr	r6, [pc, #64]	; (8005c58 <main+0x370>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8005c16:	2224      	movs	r2, #36	; 0x24
 8005c18:	a83f      	add	r0, sp, #252	; 0xfc
 8005c1a:	f00b fc7a 	bl	8011512 <memset>
  hdac1.Instance = DAC1;
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <main+0x374>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005c20:	4630      	mov	r0, r6
  hdac1.Instance = DAC1;
 8005c22:	6033      	str	r3, [r6, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005c24:	f002 fa4c 	bl	80080c0 <HAL_DAC_Init>
 8005c28:	e01c      	b.n	8005c64 <main+0x37c>
 8005c2a:	bf00      	nop
 8005c2c:	e000ed00 	.word	0xe000ed00
 8005c30:	58024400 	.word	0x58024400
 8005c34:	58020400 	.word	0x58020400
 8005c38:	58020c00 	.word	0x58020c00
 8005c3c:	58020800 	.word	0x58020800
 8005c40:	58020000 	.word	0x58020000
 8005c44:	2400a41c 	.word	0x2400a41c
 8005c48:	40022000 	.word	0x40022000
 8005c4c:	7dc00000 	.word	0x7dc00000
 8005c50:	14f00020 	.word	0x14f00020
 8005c54:	40022100 	.word	0x40022100
 8005c58:	2400a4e8 	.word	0x2400a4e8
 8005c5c:	40007400 	.word	0x40007400
 8005c60:	2400a480 	.word	0x2400a480
 8005c64:	2800      	cmp	r0, #0
 8005c66:	f040 8252 	bne.w	800610e <main+0x826>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8005c6a:	2316      	movs	r3, #22
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005c6c:	4602      	mov	r2, r0
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005c6e:	903f      	str	r0, [sp, #252]	; 0xfc
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005c70:	a93f      	add	r1, sp, #252	; 0xfc
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005c72:	9041      	str	r0, [sp, #260]	; 0x104
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005c74:	9043      	str	r0, [sp, #268]	; 0x10c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005c76:	4630      	mov	r0, r6
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8005c78:	9340      	str	r3, [sp, #256]	; 0x100
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005c7a:	9542      	str	r5, [sp, #264]	; 0x108
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005c7c:	f002 fb60 	bl	8008340 <HAL_DAC_ConfigChannel>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f040 8243 	bne.w	800610e <main+0x826>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005c88:	2210      	movs	r2, #16
 8005c8a:	a93f      	add	r1, sp, #252	; 0xfc
 8005c8c:	4630      	mov	r0, r6
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005c8e:	9340      	str	r3, [sp, #256]	; 0x100
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005c90:	f002 fb56 	bl	8008340 <HAL_DAC_ConfigChannel>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	f040 823a 	bne.w	800610e <main+0x826>
  hlptim2.Instance = LPTIM2;
 8005c9a:	48ba      	ldr	r0, [pc, #744]	; (8005f84 <main+0x69c>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8005c9c:	2300      	movs	r3, #0
  hlptim2.Instance = LPTIM2;
 8005c9e:	4aba      	ldr	r2, [pc, #744]	; (8005f88 <main+0x6a0>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005ca0:	f64f 76ff 	movw	r6, #65535	; 0xffff
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8005ca4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8005ca8:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8005cac:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8005cb0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8005cb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  hlptim2.Instance = LPTIM2;
 8005cb8:	6002      	str	r2, [r0, #0]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005cba:	6146      	str	r6, [r0, #20]
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8005cbc:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8005cbe:	f003 ffff 	bl	8009cc0 <HAL_LPTIM_Init>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f040 8223 	bne.w	800610e <main+0x826>
  htim6.Instance = TIM6;
 8005cc8:	4db0      	ldr	r5, [pc, #704]	; (8005f8c <main+0x6a4>)
 8005cca:	4bb1      	ldr	r3, [pc, #708]	; (8005f90 <main+0x6a8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ccc:	9014      	str	r0, [sp, #80]	; 0x50
  htim6.Instance = TIM6;
 8005cce:	602b      	str	r3, [r5, #0]
  htim6.Init.Period = 8191;
 8005cd0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005cd4:	60eb      	str	r3, [r5, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cd6:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cd8:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cdc:	e9c5 0001 	strd	r0, r0, [r5, #4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005ce0:	4628      	mov	r0, r5
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ce2:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005ce4:	f007 f9c6 	bl	800d074 <HAL_TIM_Base_Init>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	f040 8210 	bne.w	800610e <main+0x826>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cee:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cf0:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005cf2:	a912      	add	r1, sp, #72	; 0x48
 8005cf4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cf6:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005cf8:	f007 fdf6 	bl	800d8e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	f040 8205 	bne.w	800610e <main+0x826>
  huart3.Instance = USART3;
 8005d04:	4da3      	ldr	r5, [pc, #652]	; (8005f94 <main+0x6ac>)
 8005d06:	4aa4      	ldr	r2, [pc, #656]	; (8005f98 <main+0x6b0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005d08:	60a8      	str	r0, [r5, #8]
  huart3.Instance = USART3;
 8005d0a:	602a      	str	r2, [r5, #0]
  huart3.Init.BaudRate = 115200;
 8005d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d10:	61a8      	str	r0, [r5, #24]
  huart3.Init.BaudRate = 115200;
 8005d12:	606a      	str	r2, [r5, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d14:	220c      	movs	r2, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8005d16:	e9c5 0003 	strd	r0, r0, [r5, #12]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d1a:	e9c5 0007 	strd	r0, r0, [r5, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d1e:	4628      	mov	r0, r5
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d20:	616a      	str	r2, [r5, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d22:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d26:	f008 fc2f 	bl	800e588 <HAL_UART_Init>
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	f040 81ee 	bne.w	800610e <main+0x826>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d32:	4628      	mov	r0, r5
 8005d34:	f008 fc80 	bl	800e638 <HAL_UARTEx_SetTxFifoThreshold>
 8005d38:	4601      	mov	r1, r0
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	f040 81e7 	bne.w	800610e <main+0x826>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d40:	4628      	mov	r0, r5
 8005d42:	f008 fcbb 	bl	800e6bc <HAL_UARTEx_SetRxFifoThreshold>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f040 81e1 	bne.w	800610e <main+0x826>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f008 fc55 	bl	800e5fc <HAL_UARTEx_DisableFifoMode>
 8005d52:	4605      	mov	r5, r0
 8005d54:	2800      	cmp	r0, #0
 8005d56:	f040 81da 	bne.w	800610e <main+0x826>
  MX_USB_DEVICE_Init();
 8005d5a:	f00a fa85 	bl	8010268 <MX_USB_DEVICE_Init>
  htim4.Instance = TIM4;
 8005d5e:	4f8f      	ldr	r7, [pc, #572]	; (8005f9c <main+0x6b4>)
 8005d60:	4b8f      	ldr	r3, [pc, #572]	; (8005fa0 <main+0x6b8>)
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005d62:	a936      	add	r1, sp, #216	; 0xd8
 8005d64:	4638      	mov	r0, r7
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d66:	9539      	str	r5, [sp, #228]	; 0xe4
  htim4.Instance = TIM4;
 8005d68:	603b      	str	r3, [r7, #0]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005d6a:	2301      	movs	r3, #1
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d6c:	953d      	str	r5, [sp, #244]	; 0xf4
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005d6e:	9336      	str	r3, [sp, #216]	; 0xd8
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d70:	9338      	str	r3, [sp, #224]	; 0xe0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d72:	933c      	str	r3, [sp, #240]	; 0xf0
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005d74:	2302      	movs	r3, #2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d76:	950f      	str	r5, [sp, #60]	; 0x3c
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005d78:	9337      	str	r3, [sp, #220]	; 0xdc
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005d7a:	933b      	str	r3, [sp, #236]	; 0xec
  sConfig.IC1Filter = 8;
 8005d7c:	2308      	movs	r3, #8
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d7e:	61bd      	str	r5, [r7, #24]
  sConfig.IC1Filter = 8;
 8005d80:	933a      	str	r3, [sp, #232]	; 0xe8
  sConfig.IC2Filter = 8;
 8005d82:	933e      	str	r3, [sp, #248]	; 0xf8
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d84:	e9c7 5501 	strd	r5, r5, [r7, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d88:	e9c7 6503 	strd	r6, r5, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d8c:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005d90:	f007 fada 	bl	800d348 <HAL_TIM_Encoder_Init>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f040 81b9 	bne.w	800610e <main+0x826>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005d9c:	a90f      	add	r1, sp, #60	; 0x3c
 8005d9e:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005da0:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005da2:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005da4:	f007 fda0 	bl	800d8e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2800      	cmp	r0, #0
 8005dac:	f040 81af 	bne.w	800610e <main+0x826>
  htim7.Instance = TIM7;
 8005db0:	4d7c      	ldr	r5, [pc, #496]	; (8005fa4 <main+0x6bc>)
  htim7.Init.Period = 8192;
 8005db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  htim7.Instance = TIM7;
 8005db6:	497c      	ldr	r1, [pc, #496]	; (8005fa8 <main+0x6c0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005db8:	900c      	str	r0, [sp, #48]	; 0x30
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dba:	61ab      	str	r3, [r5, #24]
  htim7.Init.Prescaler = 0;
 8005dbc:	e9c5 1000 	strd	r1, r0, [r5]
  htim7.Init.Period = 8192;
 8005dc0:	e9c5 0202 	strd	r0, r2, [r5, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005dc4:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dc6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005dca:	f007 f953 	bl	800d074 <HAL_TIM_Base_Init>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	f040 819d 	bne.w	800610e <main+0x826>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dd4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005dd6:	a90c      	add	r1, sp, #48	; 0x30
 8005dd8:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dda:	930c      	str	r3, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ddc:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005dde:	f007 fd83 	bl	800d8e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	f040 8193 	bne.w	800610e <main+0x826>
	htim7.Instance = TIM7;
 8005de8:	4b6f      	ldr	r3, [pc, #444]	; (8005fa8 <main+0x6c0>)
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dea:	61a8      	str	r0, [r5, #24]
	htim7.Instance = TIM7;
 8005dec:	602b      	str	r3, [r5, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8005dee:	f247 5330 	movw	r3, #30000	; 0x7530
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005df2:	e9c5 0001 	strd	r0, r0, [r5, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005df6:	4628      	mov	r0, r5
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8005df8:	60eb      	str	r3, [r5, #12]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005dfa:	f007 f93b 	bl	800d074 <HAL_TIM_Base_Init>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2800      	cmp	r0, #0
 8005e02:	f040 8184 	bne.w	800610e <main+0x826>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005e06:	a90c      	add	r1, sp, #48	; 0x30
 8005e08:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e0a:	930c      	str	r3, [sp, #48]	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e0c:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005e0e:	f007 fd6b 	bl	800d8e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2800      	cmp	r0, #0
 8005e16:	f040 817a 	bne.w	800610e <main+0x826>
  htim2.Instance = TIM2;
 8005e1a:	4d64      	ldr	r5, [pc, #400]	; (8005fac <main+0x6c4>)
 8005e1c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  htim2.Init.Period = 10000;
 8005e20:	f242 7210 	movw	r2, #10000	; 0x2710
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e24:	9018      	str	r0, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e26:	9009      	str	r0, [sp, #36]	; 0x24
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e28:	612b      	str	r3, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e2a:	61ab      	str	r3, [r5, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e2c:	931b      	str	r3, [sp, #108]	; 0x6c
  htim2.Init.Prescaler = 0;
 8005e2e:	e9c5 6000 	strd	r6, r0, [r5]
  htim2.Init.Period = 10000;
 8005e32:	e9c5 0202 	strd	r0, r2, [r5, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e36:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e38:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e3c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e40:	f007 f918 	bl	800d074 <HAL_TIM_Base_Init>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	f040 8162 	bne.w	800610e <main+0x826>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e4a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e4e:	a918      	add	r1, sp, #96	; 0x60
 8005e50:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e52:	9718      	str	r7, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e54:	f007 fbbc 	bl	800d5d0 <HAL_TIM_ConfigClockSource>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	f040 8158 	bne.w	800610e <main+0x826>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e5e:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e60:	a909      	add	r1, sp, #36	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e62:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e64:	4628      	mov	r0, r5
 8005e66:	f007 fd3f 	bl	800d8e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	f040 814f 	bne.w	800610e <main+0x826>
	htim2.Init.Period = 15000;
 8005e70:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e74:	60a8      	str	r0, [r5, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e76:	6128      	str	r0, [r5, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e78:	61a8      	str	r0, [r5, #24]
	htim2.Init.Period = 15000;
 8005e7a:	60eb      	str	r3, [r5, #12]
	htim2.Init.Prescaler = 0;
 8005e7c:	e9c5 6000 	strd	r6, r0, [r5]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e80:	4628      	mov	r0, r5
 8005e82:	f007 f8f7 	bl	800d074 <HAL_TIM_Base_Init>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f040 8141 	bne.w	800610e <main+0x826>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e8c:	a918      	add	r1, sp, #96	; 0x60
 8005e8e:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e90:	9718      	str	r7, [sp, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e92:	f007 fb9d 	bl	800d5d0 <HAL_TIM_ConfigClockSource>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f040 8138 	bne.w	800610e <main+0x826>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e9e:	a909      	add	r1, sp, #36	; 0x24
 8005ea0:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ea2:	9309      	str	r3, [sp, #36]	; 0x24
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ea4:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005ea6:	f007 fd1f 	bl	800d8e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	f040 812f 	bne.w	800610e <main+0x826>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005eb0:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <main+0x6c8>)
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	03d9      	lsls	r1, r3, #15
 8005eb6:	d426      	bmi.n	8005f06 <main+0x61e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005eb8:	483d      	ldr	r0, [pc, #244]	; (8005fb0 <main+0x6c8>)
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005ec0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005ec4:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005ec8:	f643 77e0 	movw	r7, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005ecc:	f3c6 354e 	ubfx	r5, r6, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005ed0:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 8005ed4:	016d      	lsls	r5, r5, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005ed6:	ea05 0107 	and.w	r1, r5, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005eda:	4633      	mov	r3, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005edc:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8005ee0:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005ee2:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	d1f8      	bne.n	8005edc <main+0x5f4>
    } while(sets-- != 0U);
 8005eea:	3d20      	subs	r5, #32
 8005eec:	f115 0f20 	cmn.w	r5, #32
 8005ef0:	d1f1      	bne.n	8005ed6 <main+0x5ee>
 8005ef2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005ef6:	6943      	ldr	r3, [r0, #20]
 8005ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005efc:	6143      	str	r3, [r0, #20]
 8005efe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005f02:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8005f06:	f7ff fcc9 	bl	800589c <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8005f0a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f12:	4828      	ldr	r0, [pc, #160]	; (8005fb4 <main+0x6cc>)
 8005f14:	f001 fe90 	bl	8007c38 <HAL_ADCEx_Calibration_Start>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	f040 80f8 	bne.w	800610e <main+0x826>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8005f1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005f22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f26:	4824      	ldr	r0, [pc, #144]	; (8005fb8 <main+0x6d0>)
 8005f28:	f001 fe86 	bl	8007c38 <HAL_ADCEx_Calibration_Start>
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	f040 80ed 	bne.w	800610e <main+0x826>
	HAL_Delay(1);
 8005f34:	2001      	movs	r0, #1
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8005f36:	4f21      	ldr	r7, [pc, #132]	; (8005fbc <main+0x6d4>)
	AMindex  = LSBindex = 1;
 8005f38:	4606      	mov	r6, r0
	HAL_Delay(1);
 8005f3a:	f000 fdf5 	bl	8006b28 <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4816      	ldr	r0, [pc, #88]	; (8005f9c <main+0x6b4>)
 8005f42:	f007 fae5 	bl	800d510 <HAL_TIM_Encoder_Start>
	volume= 0.1;
 8005f46:	4b1e      	ldr	r3, [pc, #120]	; (8005fc0 <main+0x6d8>)
 8005f48:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <main+0x6dc>)
	SetFstep(2);
 8005f4a:	2002      	movs	r0, #2
	volume= 0.1;
 8005f4c:	601a      	str	r2, [r3, #0]
	SetFstep(2);
 8005f4e:	f7fc f8b7 	bl	80020c0 <SetFstep>
	cwpitch = CWPITCH;
 8005f52:	4b1d      	ldr	r3, [pc, #116]	; (8005fc8 <main+0x6e0>)
	meanavg = 0.f;
 8005f54:	2100      	movs	r1, #0
	cwpitch = CWPITCH;
 8005f56:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <main+0x6e4>)
	CarrierEnable(0);
 8005f58:	4628      	mov	r0, r5
	cwpitch = CWPITCH;
 8005f5a:	601a      	str	r2, [r3, #0]
	meanavg = 0.f;
 8005f5c:	4a1c      	ldr	r2, [pc, #112]	; (8005fd0 <main+0x6e8>)
	os_time = 0;
 8005f5e:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <main+0x6ec>)
	meanavg = 0.f;
 8005f60:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8005f62:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <main+0x6f0>)
 8005f64:	491d      	ldr	r1, [pc, #116]	; (8005fdc <main+0x6f4>)
	os_time = 0;
 8005f66:	601d      	str	r5, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8005f68:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8005f6a:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 8005f6e:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <main+0x6f8>)
	AGC_decay[Fast] = 0.9995f;
 8005f70:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <main+0x6fc>)
	Muted   = false;
 8005f72:	7015      	strb	r5, [r2, #0]
	AMindex  = LSBindex = 1;
 8005f74:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <main+0x700>)
 8005f76:	8016      	strh	r6, [r2, #0]
 8005f78:	4a1c      	ldr	r2, [pc, #112]	; (8005fec <main+0x704>)
 8005f7a:	8016      	strh	r6, [r2, #0]
	USBindex = CWindex  = 1;
 8005f7c:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <main+0x708>)
 8005f7e:	8016      	strh	r6, [r2, #0]
 8005f80:	e038      	b.n	8005ff4 <main+0x70c>
 8005f82:	bf00      	nop
 8005f84:	2400a5ec 	.word	0x2400a5ec
 8005f88:	58002400 	.word	0x58002400
 8005f8c:	2400a6bc 	.word	0x2400a6bc
 8005f90:	40001000 	.word	0x40001000
 8005f94:	2400a754 	.word	0x2400a754
 8005f98:	40004800 	.word	0x40004800
 8005f9c:	2400a670 	.word	0x2400a670
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	2400a708 	.word	0x2400a708
 8005fa8:	40001400 	.word	0x40001400
 8005fac:	2400a624 	.word	0x2400a624
 8005fb0:	e000ed00 	.word	0xe000ed00
 8005fb4:	2400a41c 	.word	0x2400a41c
 8005fb8:	2400a480 	.word	0x2400a480
 8005fbc:	24006268 	.word	0x24006268
 8005fc0:	2400b9ac 	.word	0x2400b9ac
 8005fc4:	3dcccccd 	.word	0x3dcccccd
 8005fc8:	24007c14 	.word	0x24007c14
 8005fcc:	44228000 	.word	0x44228000
 8005fd0:	2400a7f8 	.word	0x2400a7f8
 8005fd4:	2400a81c 	.word	0x2400a81c
 8005fd8:	24006260 	.word	0x24006260
 8005fdc:	3f7cac08 	.word	0x3f7cac08
 8005fe0:	24006250 	.word	0x24006250
 8005fe4:	240007b8 	.word	0x240007b8
 8005fe8:	2400623c 	.word	0x2400623c
 8005fec:	240007c0 	.word	0x240007c0
 8005ff0:	24000ff4 	.word	0x24000ff4
 8005ff4:	4a6c      	ldr	r2, [pc, #432]	; (80061a8 <main+0x8c0>)
 8005ff6:	8016      	strh	r6, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8005ff8:	4a6c      	ldr	r2, [pc, #432]	; (80061ac <main+0x8c4>)
 8005ffa:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 8005ffc:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 8006000:	4a6b      	ldr	r2, [pc, #428]	; (80061b0 <main+0x8c8>)
 8006002:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8006004:	4a6b      	ldr	r2, [pc, #428]	; (80061b4 <main+0x8cc>)
 8006006:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8006008:	4a6b      	ldr	r2, [pc, #428]	; (80061b8 <main+0x8d0>)
 800600a:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 800600c:	4b6b      	ldr	r3, [pc, #428]	; (80061bc <main+0x8d4>)
 800600e:	4a6c      	ldr	r2, [pc, #432]	; (80061c0 <main+0x8d8>)
 8006010:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8006012:	4b6c      	ldr	r3, [pc, #432]	; (80061c4 <main+0x8dc>)
 8006014:	4a6c      	ldr	r2, [pc, #432]	; (80061c8 <main+0x8e0>)
 8006016:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 8006018:	4a6c      	ldr	r2, [pc, #432]	; (80061cc <main+0x8e4>)
 800601a:	4b6d      	ldr	r3, [pc, #436]	; (80061d0 <main+0x8e8>)
 800601c:	601a      	str	r2, [r3, #0]
	HAdc1 = &hadc1;
 800601e:	4b6d      	ldr	r3, [pc, #436]	; (80061d4 <main+0x8ec>)
 8006020:	601c      	str	r4, [r3, #0]
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8006022:	4b6d      	ldr	r3, [pc, #436]	; (80061d8 <main+0x8f0>)
 8006024:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 8006026:	f7fe ffcf 	bl	8004fc8 <CarrierEnable>
	TXSwitch(0);
 800602a:	4628      	mov	r0, r5
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 800602c:	f44f 6500 	mov.w	r5, #2048	; 0x800
	TXSwitch(0);
 8006030:	f7fe ff62 	bl	8004ef8 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 8006034:	4a69      	ldr	r2, [pc, #420]	; (80061dc <main+0x8f4>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8006036:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006038:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 800603c:	4968      	ldr	r1, [pc, #416]	; (80061e0 <main+0x8f8>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 800603e:	9302      	str	r3, [sp, #8]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006040:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 8006044:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006046:	eddf 6a67 	vldr	s13, [pc, #412]	; 80061e4 <main+0x8fc>
	__HAL_RCC_PLL2_DISABLE();
 800604a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.01;
 800604e:	4866      	ldr	r0, [pc, #408]	; (80061e8 <main+0x900>)
	__HAL_RCC_PLL2_DISABLE();
 8006050:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006052:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006054:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800605c:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80061a0 <main+0x8b8>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006060:	6293      	str	r3, [r2, #40]	; 0x28
 8006062:	9b02      	ldr	r3, [sp, #8]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006064:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006068:	3b01      	subs	r3, #1
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	4319      	orrs	r1, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006070:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006074:	6391      	str	r1, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8006076:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006078:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 800607c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006080:	6013      	str	r3, [r2, #0]
	CWThreshold = 0.01;
 8006082:	4a5a      	ldr	r2, [pc, #360]	; (80061ec <main+0x904>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006084:	4b5a      	ldr	r3, [pc, #360]	; (80061f0 <main+0x908>)
	CWThreshold = 0.01;
 8006086:	6002      	str	r2, [r0, #0]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006088:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800608c:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8006090:	f7fd f8e2 	bl	8003258 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8006094:	4957      	ldr	r1, [pc, #348]	; (80061f4 <main+0x90c>)
 8006096:	2204      	movs	r2, #4
 8006098:	4f57      	ldr	r7, [pc, #348]	; (80061f8 <main+0x910>)
 800609a:	4b58      	ldr	r3, [pc, #352]	; (80061fc <main+0x914>)
 800609c:	4858      	ldr	r0, [pc, #352]	; (8006200 <main+0x918>)
 800609e:	e9cd 1500 	strd	r1, r5, [sp]
 80060a2:	2140      	movs	r1, #64	; 0x40
 80060a4:	f7fb fa00 	bl	80014a8 <arm_fir_decimate_init_f32>
 80060a8:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 80060aa:	b100      	cbz	r0, 80060ae <main+0x7c6>
 80060ac:	e7fe      	b.n	80060ac <main+0x7c4>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 80060ae:	4a55      	ldr	r2, [pc, #340]	; (8006204 <main+0x91c>)
 80060b0:	2140      	movs	r1, #64	; 0x40
 80060b2:	4b52      	ldr	r3, [pc, #328]	; (80061fc <main+0x914>)
 80060b4:	4854      	ldr	r0, [pc, #336]	; (8006208 <main+0x920>)
 80060b6:	e9cd 2500 	strd	r2, r5, [sp]
 80060ba:	2204      	movs	r2, #4
 80060bc:	f7fb f9f4 	bl	80014a8 <arm_fir_decimate_init_f32>
 80060c0:	4604      	mov	r4, r0
 80060c2:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 80060c4:	bb28      	cbnz	r0, 8006112 <main+0x82a>
	Load_Presets();
 80060c6:	f7fb fe25 	bl	8001d14 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7fb ff08 	bl	8001ee0 <Tune_Preset>
	keyerState = IDLE;
 80060d0:	4a4e      	ldr	r2, [pc, #312]	; (800620c <main+0x924>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 80060d2:	4b4f      	ldr	r3, [pc, #316]	; (8006210 <main+0x928>)
	keyer_speed = 15;
 80060d4:	200f      	movs	r0, #15
	keyerState = IDLE;
 80060d6:	7014      	strb	r4, [r2, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 80060d8:	2210      	movs	r2, #16
 80060da:	701a      	strb	r2, [r3, #0]
	keyer_speed = 15;
 80060dc:	4b4d      	ldr	r3, [pc, #308]	; (8006214 <main+0x92c>)
 80060de:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 80060e0:	f7fb f9fc 	bl	80014dc <loadWPM>
	keyer_mode = 1; //->  iambic
 80060e4:	4a4c      	ldr	r2, [pc, #304]	; (8006218 <main+0x930>)
	txdelay = 10;
 80060e6:	200a      	movs	r0, #10
	if (!DisableDisplay)
 80060e8:	4b4c      	ldr	r3, [pc, #304]	; (800621c <main+0x934>)
	keyer_mode = 1; //->  iambic
 80060ea:	7016      	strb	r6, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 80060ec:	4a4c      	ldr	r2, [pc, #304]	; (8006220 <main+0x938>)
	txdelay = 10;
 80060ee:	494d      	ldr	r1, [pc, #308]	; (8006224 <main+0x93c>)
	keyer_swap = 0; //->  DI/DAH
 80060f0:	7014      	strb	r4, [r2, #0]
	if (!DisableDisplay)
 80060f2:	781b      	ldrb	r3, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 80060f4:	4a4c      	ldr	r2, [pc, #304]	; (8006228 <main+0x940>)
	txdelay = 10;
 80060f6:	7008      	strb	r0, [r1, #0]
	TxPowerOut = MID_POWER_OUT;
 80060f8:	6015      	str	r5, [r2, #0]
	if (!DisableDisplay)
 80060fa:	b90b      	cbnz	r3, 8006100 <main+0x818>
 80060fc:	f7fe faba 	bl	8004674 <DisplayStatus.part.0>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8006100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006104:	4949      	ldr	r1, [pc, #292]	; (800622c <main+0x944>)
 8006106:	484a      	ldr	r0, [pc, #296]	; (8006230 <main+0x948>)
 8006108:	f001 fde8 	bl	8007cdc <HAL_ADCEx_MultiModeStart_DMA>
 800610c:	b110      	cbz	r0, 8006114 <main+0x82c>
    Error_Handler();
 800610e:	f7fe ffb9 	bl	8005084 <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8006112:	e7fe      	b.n	8006112 <main+0x82a>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8006114:	4847      	ldr	r0, [pc, #284]	; (8006234 <main+0x94c>)
 8006116:	f007 f8bb 	bl	800d290 <HAL_TIM_Base_Start_IT>
 800611a:	4604      	mov	r4, r0
 800611c:	2800      	cmp	r0, #0
 800611e:	d1f6      	bne.n	800610e <main+0x826>
	HAL_TIM_Base_Start(&htim6);
 8006120:	4845      	ldr	r0, [pc, #276]	; (8006238 <main+0x950>)
 8006122:	f007 f85d 	bl	800d1e0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8006126:	4845      	ldr	r0, [pc, #276]	; (800623c <main+0x954>)
 8006128:	f007 f85a 	bl	800d1e0 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800612c:	4621      	mov	r1, r4
 800612e:	4844      	ldr	r0, [pc, #272]	; (8006240 <main+0x958>)
 8006130:	f001 ffdc 	bl	80080ec <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8006134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006138:	4a42      	ldr	r2, [pc, #264]	; (8006244 <main+0x95c>)
 800613a:	4621      	mov	r1, r4
 800613c:	4840      	ldr	r0, [pc, #256]	; (8006240 <main+0x958>)
 800613e:	9400      	str	r4, [sp, #0]
 8006140:	f002 f808 	bl	8008154 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8006144:	4620      	mov	r0, r4
 8006146:	f000 fd07 	bl	8006b58 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800614a:	2110      	movs	r1, #16
 800614c:	483c      	ldr	r0, [pc, #240]	; (8006240 <main+0x958>)
 800614e:	f001 ffcd 	bl	80080ec <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 8006152:	4623      	mov	r3, r4
 8006154:	2110      	movs	r1, #16
 8006156:	4622      	mov	r2, r4
 8006158:	4839      	ldr	r0, [pc, #228]	; (8006240 <main+0x958>)
 800615a:	f002 f887 	bl	800826c <HAL_DAC_SetValue>
	WSPRBeaconState = NO_FIX;
 800615e:	4b3a      	ldr	r3, [pc, #232]	; (8006248 <main+0x960>)
	if (ENC_BUTTON)
 8006160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006164:	4839      	ldr	r0, [pc, #228]	; (800624c <main+0x964>)
	WSPRBeaconState = NO_FIX;
 8006166:	701c      	strb	r4, [r3, #0]
	if (ENC_BUTTON)
 8006168:	f003 fd92 	bl	8009c90 <HAL_GPIO_ReadPin>
 800616c:	b170      	cbz	r0, 800618c <main+0x8a4>
		UserInput();
 800616e:	f7ff f84f 	bl	8005210 <UserInput>
		DCF77StatusDisplay();
 8006172:	f7fb fd95 	bl	8001ca0 <DCF77StatusDisplay>
		HAL_Delay(200);
 8006176:	20c8      	movs	r0, #200	; 0xc8
 8006178:	f000 fcd6 	bl	8006b28 <HAL_Delay>
		UserInput();
 800617c:	f7ff f848 	bl	8005210 <UserInput>
		DCF77StatusDisplay();
 8006180:	f7fb fd8e 	bl	8001ca0 <DCF77StatusDisplay>
		HAL_Delay(200);
 8006184:	20c8      	movs	r0, #200	; 0xc8
 8006186:	f000 fccf 	bl	8006b28 <HAL_Delay>
	while (1)
 800618a:	e7f0      	b.n	800616e <main+0x886>
		SetMode((Mode)CW);
 800618c:	2003      	movs	r0, #3
 800618e:	f7fb ff5f 	bl	8002050 <SetMode>
		LOfreq = DCF77_FREQ;
 8006192:	492f      	ldr	r1, [pc, #188]	; (8006250 <main+0x968>)
 8006194:	482f      	ldr	r0, [pc, #188]	; (8006254 <main+0x96c>)
		WSPRBeaconMode = 1;
 8006196:	2201      	movs	r2, #1
 8006198:	4b2f      	ldr	r3, [pc, #188]	; (8006258 <main+0x970>)
		LOfreq = DCF77_FREQ;
 800619a:	6008      	str	r0, [r1, #0]
		WSPRBeaconMode = 1;
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e7e6      	b.n	800616e <main+0x886>
 80061a0:	8f04fefd 	.word	0x8f04fefd
 80061a4:	3feffff9 	.word	0x3feffff9
 80061a8:	240062d4 	.word	0x240062d4
 80061ac:	24007c10 	.word	0x24007c10
 80061b0:	24007c00 	.word	0x24007c00
 80061b4:	3f7fdf3b 	.word	0x3f7fdf3b
 80061b8:	3f7ffcb9 	.word	0x3f7ffcb9
 80061bc:	24005228 	.word	0x24005228
 80061c0:	001e0002 	.word	0x001e0002
 80061c4:	240007c4 	.word	0x240007c4
 80061c8:	3949539c 	.word	0x3949539c
 80061cc:	3ca3d70a 	.word	0x3ca3d70a
 80061d0:	2400a820 	.word	0x2400a820
 80061d4:	24005224 	.word	0x24005224
 80061d8:	4af42400 	.word	0x4af42400
 80061dc:	58024400 	.word	0x58024400
 80061e0:	01012e00 	.word	0x01012e00
 80061e4:	3b800000 	.word	0x3b800000
 80061e8:	24000ff0 	.word	0x24000ff0
 80061ec:	3c23d70a 	.word	0x3c23d70a
 80061f0:	24000fe0 	.word	0x24000fe0
 80061f4:	24003110 	.word	0x24003110
 80061f8:	24007c04 	.word	0x24007c04
 80061fc:	24000210 	.word	0x24000210
 8006200:	2400627c 	.word	0x2400627c
 8006204:	24001014 	.word	0x24001014
 8006208:	24006270 	.word	0x24006270
 800620c:	2400a7e9 	.word	0x2400a7e9
 8006210:	2400a7e8 	.word	0x2400a7e8
 8006214:	2400a7ec 	.word	0x2400a7ec
 8006218:	2400a7ea 	.word	0x2400a7ea
 800621c:	24001010 	.word	0x24001010
 8006220:	2400a7f0 	.word	0x2400a7f0
 8006224:	2400b9a9 	.word	0x2400b9a9
 8006228:	240062cc 	.word	0x240062cc
 800622c:	24007400 	.word	0x24007400
 8006230:	2400a41c 	.word	0x2400a41c
 8006234:	2400a708 	.word	0x2400a708
 8006238:	2400a6bc 	.word	0x2400a6bc
 800623c:	2400a624 	.word	0x2400a624
 8006240:	2400a4e8 	.word	0x2400a4e8
 8006244:	240007e0 	.word	0x240007e0
 8006248:	240073dd 	.word	0x240073dd
 800624c:	58020c00 	.word	0x58020c00
 8006250:	24006238 	.word	0x24006238
 8006254:	47975e00 	.word	0x47975e00
 8006258:	240073dc 	.word	0x240073dc

0800625c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800625c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800625e:	4c14      	ldr	r4, [pc, #80]	; (80062b0 <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006260:	2102      	movs	r1, #2
{
 8006262:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006264:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006266:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800626a:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800626e:	430b      	orrs	r3, r1
 8006270:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8006274:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006278:	400b      	ands	r3, r1
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800627e:	f001 febd 	bl	8007ffc <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8006282:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8006286:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8006288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8006290:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800629c:	f000 fc5c 	bl	8006b58 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80062a0:	f000 fc6e 	bl	8006b80 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80062a4:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062a6:	b002      	add	sp, #8
 80062a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80062ac:	f000 bc5e 	b.w	8006b6c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 80062b0:	58024400 	.word	0x58024400

080062b4 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80062b4:	494c      	ldr	r1, [pc, #304]	; (80063e8 <HAL_ADC_MspInit+0x134>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062b6:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80062b8:	6802      	ldr	r2, [r0, #0]
{
 80062ba:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 80062bc:	428a      	cmp	r2, r1
{
 80062be:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80062c4:	9306      	str	r3, [sp, #24]
 80062c6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80062ca:	d029      	beq.n	8006320 <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80062cc:	4b47      	ldr	r3, [pc, #284]	; (80063ec <HAL_ADC_MspInit+0x138>)
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d001      	beq.n	80062d6 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80062d2:	b00a      	add	sp, #40	; 0x28
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80062d6:	4a46      	ldr	r2, [pc, #280]	; (80063f0 <HAL_ADC_MspInit+0x13c>)
 80062d8:	6813      	ldr	r3, [r2, #0]
 80062da:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80062dc:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80062de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80062e0:	d070      	beq.n	80063c4 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062e2:	4b44      	ldr	r3, [pc, #272]	; (80063f4 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80062e4:	2402      	movs	r4, #2
 80062e6:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062e8:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062ee:	4842      	ldr	r0, [pc, #264]	; (80063f8 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062f0:	f042 0202 	orr.w	r2, r2, #2
 80062f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80062f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	9303      	str	r3, [sp, #12]
 8006302:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006304:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006308:	f003 fb90 	bl	8009a2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800630c:	2200      	movs	r2, #0
 800630e:	2012      	movs	r0, #18
 8006310:	4611      	mov	r1, r2
 8006312:	f001 fe73 	bl	8007ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006316:	2012      	movs	r0, #18
 8006318:	f001 feae 	bl	8008078 <HAL_NVIC_EnableIRQ>
}
 800631c:	b00a      	add	sp, #40	; 0x28
 800631e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006320:	4a33      	ldr	r2, [pc, #204]	; (80063f0 <HAL_ADC_MspInit+0x13c>)
 8006322:	4604      	mov	r4, r0
 8006324:	6813      	ldr	r3, [r2, #0]
 8006326:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006328:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800632a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800632c:	d03c      	beq.n	80063a8 <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800632e:	4b31      	ldr	r3, [pc, #196]	; (80063f4 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006330:	a904      	add	r1, sp, #16
 8006332:	4831      	ldr	r0, [pc, #196]	; (80063f8 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 8006338:	4d30      	ldr	r5, [pc, #192]	; (80063fc <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800633a:	f042 0202 	orr.w	r2, r2, #2
 800633e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006342:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800634e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006350:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006352:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006356:	f003 fb69 	bl	8009a2c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 800635a:	4929      	ldr	r1, [pc, #164]	; (8006400 <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800635c:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800635e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006360:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006362:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006364:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800636c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006370:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006374:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800637c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006380:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8006384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006388:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800638a:	f002 f989 	bl	80086a0 <HAL_DMA_Init>
 800638e:	bb38      	cbnz	r0, 80063e0 <HAL_ADC_MspInit+0x12c>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006390:	2200      	movs	r2, #0
 8006392:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006394:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006396:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006398:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800639a:	f001 fe2f 	bl	8007ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800639e:	2012      	movs	r0, #18
 80063a0:	f001 fe6a 	bl	8008078 <HAL_NVIC_EnableIRQ>
}
 80063a4:	b00a      	add	sp, #40	; 0x28
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80063a8:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <HAL_ADC_MspInit+0x140>)
 80063aa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80063ae:	f042 0220 	orr.w	r2, r2, #32
 80063b2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80063b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	9b00      	ldr	r3, [sp, #0]
 80063c2:	e7b4      	b.n	800632e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <HAL_ADC_MspInit+0x140>)
 80063c6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80063ca:	f042 0220 	orr.w	r2, r2, #32
 80063ce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80063d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	9302      	str	r3, [sp, #8]
 80063dc:	9b02      	ldr	r3, [sp, #8]
 80063de:	e780      	b.n	80062e2 <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 80063e0:	f7fe fe50 	bl	8005084 <Error_Handler>
 80063e4:	e7d4      	b.n	8006390 <HAL_ADC_MspInit+0xdc>
 80063e6:	bf00      	nop
 80063e8:	40022000 	.word	0x40022000
 80063ec:	40022100 	.word	0x40022100
 80063f0:	2400b9b0 	.word	0x2400b9b0
 80063f4:	58024400 	.word	0x58024400
 80063f8:	58020400 	.word	0x58020400
 80063fc:	2400a4fc 	.word	0x2400a4fc
 8006400:	40020010 	.word	0x40020010

08006404 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8006404:	4b2c      	ldr	r3, [pc, #176]	; (80064b8 <HAL_DAC_MspInit+0xb4>)
 8006406:	6802      	ldr	r2, [r0, #0]
{
 8006408:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 800640a:	429a      	cmp	r2, r3
{
 800640c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800640e:	f04f 0400 	mov.w	r4, #0
 8006412:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006416:	9404      	str	r4, [sp, #16]
 8006418:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 800641c:	d001      	beq.n	8006422 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800641e:	b008      	add	sp, #32
 8006420:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006422:	4b26      	ldr	r3, [pc, #152]	; (80064bc <HAL_DAC_MspInit+0xb8>)
 8006424:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006426:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8006428:	4e25      	ldr	r6, [pc, #148]	; (80064c0 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 800642a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800642e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006432:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006436:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800643a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800643e:	9200      	str	r2, [sp, #0]
 8006440:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006442:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800644e:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800645a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800645c:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800645e:	4819      	ldr	r0, [pc, #100]	; (80064c4 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006460:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006464:	f003 fae2 	bl	8009a2c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8006468:	4a17      	ldr	r2, [pc, #92]	; (80064c8 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800646a:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800646c:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 800646e:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006470:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8006472:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006474:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006478:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800647a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800647e:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006484:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006486:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006488:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800648a:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800648e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006492:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006494:	f002 f904 	bl	80086a0 <HAL_DMA_Init>
 8006498:	b958      	cbnz	r0, 80064b2 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800649a:	2200      	movs	r2, #0
 800649c:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800649e:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80064a0:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80064a2:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80064a4:	f001 fdaa 	bl	8007ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80064a8:	2036      	movs	r0, #54	; 0x36
 80064aa:	f001 fde5 	bl	8008078 <HAL_NVIC_EnableIRQ>
}
 80064ae:	b008      	add	sp, #32
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80064b2:	f7fe fde7 	bl	8005084 <Error_Handler>
 80064b6:	e7f0      	b.n	800649a <HAL_DAC_MspInit+0x96>
 80064b8:	40007400 	.word	0x40007400
 80064bc:	58024400 	.word	0x58024400
 80064c0:	2400a574 	.word	0x2400a574
 80064c4:	58020000 	.word	0x58020000
 80064c8:	40020028 	.word	0x40020028
 80064cc:	00000000 	.word	0x00000000

080064d0 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 80064d0:	4a1b      	ldr	r2, [pc, #108]	; (8006540 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064d2:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 80064d4:	6801      	ldr	r1, [r0, #0]
{
 80064d6:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 80064d8:	4291      	cmp	r1, r2
{
 80064da:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80064e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80064e4:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 80064e6:	d001      	beq.n	80064ec <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80064e8:	b008      	add	sp, #32
 80064ea:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80064ec:	4b15      	ldr	r3, [pc, #84]	; (8006544 <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80064ee:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064f0:	a902      	add	r1, sp, #8
 80064f2:	4815      	ldr	r0, [pc, #84]	; (8006548 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80064f4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80064f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006500:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006504:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006508:	9200      	str	r2, [sp, #0]
 800650a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800650c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006510:	f042 0202 	orr.w	r2, r2, #2
 8006514:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 800651c:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800651e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006522:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8006538 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800652a:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800652e:	f003 fa7d 	bl	8009a2c <HAL_GPIO_Init>
}
 8006532:	b008      	add	sp, #32
 8006534:	bd10      	pop	{r4, pc}
 8006536:	bf00      	nop
 8006538:	00000400 	.word	0x00000400
 800653c:	00000002 	.word	0x00000002
 8006540:	58002400 	.word	0x58002400
 8006544:	58024400 	.word	0x58024400
 8006548:	58020400 	.word	0x58020400

0800654c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800654c:	6803      	ldr	r3, [r0, #0]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8006552:	b510      	push	{r4, lr}
 8006554:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 8006556:	d007      	beq.n	8006568 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8006558:	4a27      	ldr	r2, [pc, #156]	; (80065f8 <HAL_TIM_Base_MspInit+0xac>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d01c      	beq.n	8006598 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 800655e:	4a27      	ldr	r2, [pc, #156]	; (80065fc <HAL_TIM_Base_MspInit+0xb0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d031      	beq.n	80065c8 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006564:	b004      	add	sp, #16
 8006566:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006568:	4b25      	ldr	r3, [pc, #148]	; (8006600 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 800656a:	201c      	movs	r0, #28
 800656c:	2200      	movs	r2, #0
 800656e:	2104      	movs	r1, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006570:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006574:	f044 0401 	orr.w	r4, r4, #1
 8006578:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800657c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8006588:	f001 fd38 	bl	8007ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800658c:	201c      	movs	r0, #28
}
 800658e:	b004      	add	sp, #16
 8006590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006594:	f001 bd70 	b.w	8008078 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006598:	4b19      	ldr	r3, [pc, #100]	; (8006600 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800659a:	2036      	movs	r0, #54	; 0x36
 800659c:	2200      	movs	r2, #0
 800659e:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 80065a0:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80065a4:	f044 0410 	orr.w	r4, r4, #16
 80065a8:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80065ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065b0:	f003 0310 	and.w	r3, r3, #16
 80065b4:	9302      	str	r3, [sp, #8]
 80065b6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80065b8:	f001 fd20 	bl	8007ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80065bc:	2036      	movs	r0, #54	; 0x36
}
 80065be:	b004      	add	sp, #16
 80065c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80065c4:	f001 bd58 	b.w	8008078 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80065c8:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80065ca:	2037      	movs	r0, #55	; 0x37
 80065cc:	2200      	movs	r2, #0
 80065ce:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 80065d0:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80065d4:	f044 0420 	orr.w	r4, r4, #32
 80065d8:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80065dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80065e8:	f001 fd08 	bl	8007ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80065ec:	2037      	movs	r0, #55	; 0x37
}
 80065ee:	b004      	add	sp, #16
 80065f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80065f4:	f001 bd40 	b.w	8008078 <HAL_NVIC_EnableIRQ>
 80065f8:	40001000 	.word	0x40001000
 80065fc:	40001400 	.word	0x40001400
 8006600:	58024400 	.word	0x58024400
 8006604:	00000000 	.word	0x00000000

08006608 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8006608:	4a1d      	ldr	r2, [pc, #116]	; (8006680 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800660a:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 800660c:	6801      	ldr	r1, [r0, #0]
{
 800660e:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 8006610:	4291      	cmp	r1, r2
{
 8006612:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006614:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006618:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800661c:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 800661e:	d002      	beq.n	8006626 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006620:	b009      	add	sp, #36	; 0x24
 8006622:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006626:	4b17      	ldr	r3, [pc, #92]	; (8006684 <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006628:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800662a:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 800662c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006630:	f042 0204 	orr.w	r2, r2, #4
 8006634:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006638:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800663c:	f002 0204 	and.w	r2, r2, #4
 8006640:	9200      	str	r2, [sp, #0]
 8006642:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006644:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006648:	f042 0208 	orr.w	r2, r2, #8
 800664c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006650:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006656:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006658:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800665c:	480a      	ldr	r0, [pc, #40]	; (8006688 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800665e:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006664:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8006678 <HAL_TIM_Encoder_MspInit+0x70>
 8006668:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800666c:	f003 f9de 	bl	8009a2c <HAL_GPIO_Init>
}
 8006670:	b009      	add	sp, #36	; 0x24
 8006672:	f85d fb04 	ldr.w	pc, [sp], #4
 8006676:	bf00      	nop
 8006678:	00003000 	.word	0x00003000
 800667c:	00000002 	.word	0x00000002
 8006680:	40000800 	.word	0x40000800
 8006684:	58024400 	.word	0x58024400
 8006688:	58020c00 	.word	0x58020c00

0800668c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800668c:	b5d0      	push	{r4, r6, r7, lr}
 800668e:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006690:	2100      	movs	r1, #0
{
 8006692:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006694:	22c0      	movs	r2, #192	; 0xc0
 8006696:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006698:	9108      	str	r1, [sp, #32]
 800669a:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800669e:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066a2:	f00a ff36 	bl	8011512 <memset>
  if(huart->Instance==USART3)
 80066a6:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <HAL_UART_MspInit+0xd4>)
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d001      	beq.n	80066b2 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80066ae:	b03a      	add	sp, #232	; 0xe8
 80066b0:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80066b2:	2202      	movs	r2, #2
 80066b4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066b6:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80066b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066bc:	f005 faf4 	bl	800bca8 <HAL_RCCEx_PeriphCLKConfig>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d149      	bne.n	8006758 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80066c4:	4b27      	ldr	r3, [pc, #156]	; (8006764 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80066c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80066ca:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066cc:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80066ce:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80066d2:	2600      	movs	r6, #0
 80066d4:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80066d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80066da:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80066de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80066e2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80066e6:	9201      	str	r2, [sp, #4]
 80066e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80066ee:	f042 0202 	orr.w	r2, r2, #2
 80066f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80066f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80066fa:	f002 0202 	and.w	r2, r2, #2
 80066fe:	9202      	str	r2, [sp, #8]
 8006700:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006702:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006706:	f042 0208 	orr.w	r2, r2, #8
 800670a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800670e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006712:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006714:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006718:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800671c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800671e:	a904      	add	r1, sp, #16
 8006720:	4811      	ldr	r0, [pc, #68]	; (8006768 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006722:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006724:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006728:	f003 f980 	bl	8009a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800672c:	2302      	movs	r3, #2
 800672e:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006732:	a904      	add	r1, sp, #16
 8006734:	480d      	ldr	r0, [pc, #52]	; (800676c <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006736:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006738:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800673c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006740:	f003 f974 	bl	8009a2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8006744:	2200      	movs	r2, #0
 8006746:	2101      	movs	r1, #1
 8006748:	2027      	movs	r0, #39	; 0x27
 800674a:	f001 fc57 	bl	8007ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800674e:	2027      	movs	r0, #39	; 0x27
 8006750:	f001 fc92 	bl	8008078 <HAL_NVIC_EnableIRQ>
}
 8006754:	b03a      	add	sp, #232	; 0xe8
 8006756:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8006758:	f7fe fc94 	bl	8005084 <Error_Handler>
 800675c:	e7b2      	b.n	80066c4 <HAL_UART_MspInit+0x38>
 800675e:	bf00      	nop
 8006760:	40004800 	.word	0x40004800
 8006764:	58024400 	.word	0x58024400
 8006768:	58020400 	.word	0x58020400
 800676c:	58020c00 	.word	0x58020c00

08006770 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop

08006774 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006774:	e7fe      	b.n	8006774 <HardFault_Handler>
 8006776:	bf00      	nop

08006778 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006778:	e7fe      	b.n	8006778 <MemManage_Handler>
 800677a:	bf00      	nop

0800677c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800677c:	e7fe      	b.n	800677c <BusFault_Handler>
 800677e:	bf00      	nop

08006780 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006780:	e7fe      	b.n	8006780 <UsageFault_Handler>
 8006782:	bf00      	nop

08006784 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8006784:	f000 b966 	b.w	8006a54 <ADC3_IRQHandler>

08006788 <DebugMon_Handler>:
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop

0800678c <PendSV_Handler>:
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop

08006790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006790:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint32_t SystemSeconds, SystemMinutes;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006792:	f000 f9b7 	bl	8006b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if ((uwTick % 1000) == 0)
 8006796:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <SysTick_Handler+0x3c>)
 8006798:	490d      	ldr	r1, [pc, #52]	; (80067d0 <SysTick_Handler+0x40>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a0d      	ldr	r2, [pc, #52]	; (80067d4 <SysTick_Handler+0x44>)
 800679e:	fb01 f303 	mul.w	r3, r1, r3
 80067a2:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 80067a6:	d310      	bcc.n	80067ca <SysTick_Handler+0x3a>
	{
		SystemSeconds++;
 80067a8:	490b      	ldr	r1, [pc, #44]	; (80067d8 <SysTick_Handler+0x48>)
 80067aa:	4a0c      	ldr	r2, [pc, #48]	; (80067dc <SysTick_Handler+0x4c>)
 80067ac:	680b      	ldr	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 80067ae:	480c      	ldr	r0, [pc, #48]	; (80067e0 <SysTick_Handler+0x50>)
		SystemSeconds++;
 80067b0:	3301      	adds	r3, #1
 80067b2:	fb03 f202 	mul.w	r2, r3, r2
 80067b6:	600b      	str	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 80067b8:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
 80067bc:	d305      	bcc.n	80067ca <SysTick_Handler+0x3a>
		{
			SystemMinutes++;
 80067be:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <SysTick_Handler+0x54>)
			SystemSeconds = 0;
 80067c0:	2000      	movs	r0, #0
			SystemMinutes++;
 80067c2:	6813      	ldr	r3, [r2, #0]
			SystemSeconds = 0;
 80067c4:	6008      	str	r0, [r1, #0]
			SystemMinutes++;
 80067c6:	3301      	adds	r3, #1
 80067c8:	6013      	str	r3, [r2, #0]
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 80067ca:	bd08      	pop	{r3, pc}
 80067cc:	2400b9b8 	.word	0x2400b9b8
 80067d0:	26e978d5 	.word	0x26e978d5
 80067d4:	00418937 	.word	0x00418937
 80067d8:	240062b8 	.word	0x240062b8
 80067dc:	eeeeeeef 	.word	0xeeeeeeef
 80067e0:	04444444 	.word	0x04444444
 80067e4:	240062b4 	.word	0x240062b4

080067e8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80067e8:	4801      	ldr	r0, [pc, #4]	; (80067f0 <DMA1_Stream0_IRQHandler+0x8>)
 80067ea:	f002 bdd1 	b.w	8009390 <HAL_DMA_IRQHandler>
 80067ee:	bf00      	nop
 80067f0:	2400a4fc 	.word	0x2400a4fc

080067f4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80067f4:	4801      	ldr	r0, [pc, #4]	; (80067fc <DMA1_Stream1_IRQHandler+0x8>)
 80067f6:	f002 bdcb 	b.w	8009390 <HAL_DMA_IRQHandler>
 80067fa:	bf00      	nop
 80067fc:	2400a574 	.word	0x2400a574

08006800 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006800:	4804      	ldr	r0, [pc, #16]	; (8006814 <ADC_IRQHandler+0x14>)
{
 8006802:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 8006804:	f000 f9dc 	bl	8006bc0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8006808:	4803      	ldr	r0, [pc, #12]	; (8006818 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800680a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 800680e:	f000 b9d7 	b.w	8006bc0 <HAL_ADC_IRQHandler>
 8006812:	bf00      	nop
 8006814:	2400a41c 	.word	0x2400a41c
 8006818:	2400a480 	.word	0x2400a480

0800681c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <TIM2_IRQHandler+0x8>)
 800681e:	f006 bfab 	b.w	800d778 <HAL_TIM_IRQHandler>
 8006822:	bf00      	nop
 8006824:	2400a624 	.word	0x2400a624

08006828 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <USART3_IRQHandler+0x8>)
 800682a:	f007 b8cd 	b.w	800d9c8 <HAL_UART_IRQHandler>
 800682e:	bf00      	nop
 8006830:	2400a754 	.word	0x2400a754

08006834 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 8006834:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006838:	f003 ba34 	b.w	8009ca4 <HAL_GPIO_EXTI_IRQHandler>

0800683c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800683c:	4804      	ldr	r0, [pc, #16]	; (8006850 <TIM6_DAC_IRQHandler+0x14>)
{
 800683e:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8006840:	f001 fd4a 	bl	80082d8 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8006844:	4803      	ldr	r0, [pc, #12]	; (8006854 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800684a:	f006 bf95 	b.w	800d778 <HAL_TIM_IRQHandler>
 800684e:	bf00      	nop
 8006850:	2400a4e8 	.word	0x2400a4e8
 8006854:	2400a6bc 	.word	0x2400a6bc

08006858 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006858:	4801      	ldr	r0, [pc, #4]	; (8006860 <TIM7_IRQHandler+0x8>)
 800685a:	f006 bf8d 	b.w	800d778 <HAL_TIM_IRQHandler>
 800685e:	bf00      	nop
 8006860:	2400a708 	.word	0x2400a708

08006864 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006864:	4801      	ldr	r0, [pc, #4]	; (800686c <OTG_FS_IRQHandler+0x8>)
 8006866:	f003 bb55 	b.w	8009f14 <HAL_PCD_IRQHandler>
 800686a:	bf00      	nop
 800686c:	2400cea0 	.word	0x2400cea0

08006870 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006870:	2001      	movs	r0, #1
 8006872:	4770      	bx	lr

08006874 <_kill>:

int _kill(int pid, int sig)
{
 8006874:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006876:	f00a ff0b 	bl	8011690 <__errno>
 800687a:	2216      	movs	r2, #22
 800687c:	4603      	mov	r3, r0
	return -1;
}
 800687e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8006882:	601a      	str	r2, [r3, #0]
}
 8006884:	bd08      	pop	{r3, pc}
 8006886:	bf00      	nop

08006888 <_exit>:

void _exit (int status)
{
 8006888:	b508      	push	{r3, lr}
	errno = EINVAL;
 800688a:	f00a ff01 	bl	8011690 <__errno>
 800688e:	2316      	movs	r3, #22
 8006890:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8006892:	e7fe      	b.n	8006892 <_exit+0xa>

08006894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006894:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006896:	1e16      	subs	r6, r2, #0
 8006898:	dd07      	ble.n	80068aa <_read+0x16>
 800689a:	460c      	mov	r4, r1
 800689c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800689e:	f3af 8000 	nop.w
 80068a2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068a6:	42a5      	cmp	r5, r4
 80068a8:	d1f9      	bne.n	800689e <_read+0xa>
	}

return len;
}
 80068aa:	4630      	mov	r0, r6
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
 80068ae:	bf00      	nop

080068b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80068b0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068b2:	1e16      	subs	r6, r2, #0
 80068b4:	dd07      	ble.n	80068c6 <_write+0x16>
 80068b6:	460c      	mov	r4, r1
 80068b8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80068ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 80068be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068c2:	42ac      	cmp	r4, r5
 80068c4:	d1f9      	bne.n	80068ba <_write+0xa>
	}
	return len;
}
 80068c6:	4630      	mov	r0, r6
 80068c8:	bd70      	pop	{r4, r5, r6, pc}
 80068ca:	bf00      	nop

080068cc <_close>:

int _close(int file)
{
	return -1;
}
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop

080068d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80068d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80068d8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80068da:	604b      	str	r3, [r1, #4]
}
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop

080068e0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80068e0:	2001      	movs	r0, #1
 80068e2:	4770      	bx	lr

080068e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80068e4:	2000      	movs	r0, #0
 80068e6:	4770      	bx	lr

080068e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068e8:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068ea:	4c0d      	ldr	r4, [pc, #52]	; (8006920 <_sbrk+0x38>)
{
 80068ec:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068ee:	490d      	ldr	r1, [pc, #52]	; (8006924 <_sbrk+0x3c>)
 80068f0:	4d0d      	ldr	r5, [pc, #52]	; (8006928 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80068f2:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068f4:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80068f6:	b12a      	cbz	r2, 8006904 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068f8:	4413      	add	r3, r2
 80068fa:	428b      	cmp	r3, r1
 80068fc:	d808      	bhi.n	8006910 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80068fe:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8006900:	6023      	str	r3, [r4, #0]
}
 8006902:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8006904:	4809      	ldr	r0, [pc, #36]	; (800692c <_sbrk+0x44>)
 8006906:	4602      	mov	r2, r0
 8006908:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800690a:	4413      	add	r3, r2
 800690c:	428b      	cmp	r3, r1
 800690e:	d9f6      	bls.n	80068fe <_sbrk+0x16>
    errno = ENOMEM;
 8006910:	f00a febe 	bl	8011690 <__errno>
 8006914:	230c      	movs	r3, #12
    return (void *)-1;
 8006916:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800691a:	6003      	str	r3, [r0, #0]
}
 800691c:	4610      	mov	r0, r2
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	2400b9b4 	.word	0x2400b9b4
 8006924:	24080000 	.word	0x24080000
 8006928:	00000420 	.word	0x00000420
 800692c:	2400d718 	.word	0x2400d718

08006930 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006930:	4929      	ldr	r1, [pc, #164]	; (80069d8 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006932:	4a2a      	ldr	r2, [pc, #168]	; (80069dc <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006934:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 800693c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800693e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	2b06      	cmp	r3, #6
 800694a:	d805      	bhi.n	8006958 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	f023 030f 	bic.w	r3, r3, #15
 8006952:	f043 0307 	orr.w	r3, r3, #7
 8006956:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006958:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800695a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800695c:	4a21      	ldr	r2, [pc, #132]	; (80069e4 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 800695e:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006960:	481e      	ldr	r0, [pc, #120]	; (80069dc <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8006962:	f041 0101 	orr.w	r1, r1, #1
 8006966:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006968:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800696a:	6819      	ldr	r1, [r3, #0]
 800696c:	400a      	ands	r2, r1
 800696e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006970:	6803      	ldr	r3, [r0, #0]
 8006972:	071b      	lsls	r3, r3, #28
 8006974:	d505      	bpl.n	8006982 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006976:	6803      	ldr	r3, [r0, #0]
 8006978:	f023 030f 	bic.w	r3, r3, #15
 800697c:	f043 0307 	orr.w	r3, r3, #7
 8006980:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006982:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <SystemInit+0xb0>)
 8006984:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006986:	4918      	ldr	r1, [pc, #96]	; (80069e8 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8006988:	4c18      	ldr	r4, [pc, #96]	; (80069ec <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 800698a:	4819      	ldr	r0, [pc, #100]	; (80069f0 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 800698c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800698e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006990:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006992:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8006994:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8006996:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800699a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800699c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800699e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80069a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80069a2:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80069a4:	4c13      	ldr	r4, [pc, #76]	; (80069f4 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 80069a6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80069aa:	4913      	ldr	r1, [pc, #76]	; (80069f8 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 80069ac:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80069ae:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	4019      	ands	r1, r3
 80069b4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80069b8:	d203      	bcs.n	80069c2 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <SystemInit+0xcc>)
 80069bc:	2201      	movs	r2, #1
 80069be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80069c2:	490f      	ldr	r1, [pc, #60]	; (8006a00 <SystemInit+0xd0>)
 80069c4:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069c8:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <SystemInit+0xa8>)
 80069ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80069ce:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80069d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069d4:	609a      	str	r2, [r3, #8]
}
 80069d6:	4770      	bx	lr
 80069d8:	e000ed00 	.word	0xe000ed00
 80069dc:	52002000 	.word	0x52002000
 80069e0:	58024400 	.word	0x58024400
 80069e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80069e8:	01010280 	.word	0x01010280
 80069ec:	02020200 	.word	0x02020200
 80069f0:	01ff0000 	.word	0x01ff0000
 80069f4:	5c001000 	.word	0x5c001000
 80069f8:	ffff0000 	.word	0xffff0000
 80069fc:	51008000 	.word	0x51008000
 8006a00:	52004000 	.word	0x52004000

08006a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a3c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006a08:	f7ff ff92 	bl	8006930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006a0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006a0e:	e003      	b.n	8006a18 <LoopCopyDataInit>

08006a10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8006a12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006a14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006a16:	3104      	adds	r1, #4

08006a18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006a18:	480a      	ldr	r0, [pc, #40]	; (8006a44 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8006a1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006a1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006a20:	d3f6      	bcc.n	8006a10 <CopyDataInit>
  ldr  r2, =_sbss
 8006a22:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8006a24:	e002      	b.n	8006a2c <LoopFillZerobss>

08006a26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006a26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006a28:	f842 3b04 	str.w	r3, [r2], #4

08006a2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006a2c:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8006a2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006a30:	d3f9      	bcc.n	8006a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006a32:	f00a fe33 	bl	801169c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a36:	f7fe ff57 	bl	80058e8 <main>
  bx  lr    
 8006a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006a3c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006a40:	0801f2e8 	.word	0x0801f2e8
  ldr  r0, =_sdata
 8006a44:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006a48:	240005dc 	.word	0x240005dc
  ldr  r2, =_sbss
 8006a4c:	240005e0 	.word	0x240005e0
  ldr  r3, = _ebss
 8006a50:	2400d718 	.word	0x2400d718

08006a54 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a54:	e7fe      	b.n	8006a54 <ADC3_IRQHandler>
	...

08006a58 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006a58:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <HAL_InitTick+0x40>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b90b      	cbnz	r3, 8006a62 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8006a5e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006a60:	4770      	bx	lr
{
 8006a62:	b510      	push	{r4, lr}
 8006a64:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a6a:	4a0c      	ldr	r2, [pc, #48]	; (8006a9c <HAL_InitTick+0x44>)
 8006a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a70:	6810      	ldr	r0, [r2, #0]
 8006a72:	fbb0 f0f3 	udiv	r0, r0, r3
 8006a76:	f001 fb0d 	bl	8008094 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a7a:	2c0f      	cmp	r4, #15
 8006a7c:	d800      	bhi.n	8006a80 <HAL_InitTick+0x28>
 8006a7e:	b108      	cbz	r0, 8006a84 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8006a80:	2001      	movs	r0, #1
}
 8006a82:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a84:	2200      	movs	r2, #0
 8006a86:	4621      	mov	r1, r4
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	f001 fab6 	bl	8007ffc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <HAL_InitTick+0x48>)
 8006a92:	2000      	movs	r0, #0
 8006a94:	601c      	str	r4, [r3, #0]
}
 8006a96:	bd10      	pop	{r4, pc}
 8006a98:	24000318 	.word	0x24000318
 8006a9c:	24000310 	.word	0x24000310
 8006aa0:	2400031c 	.word	0x2400031c

08006aa4 <HAL_Init>:
{
 8006aa4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006aa6:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006aa8:	4c12      	ldr	r4, [pc, #72]	; (8006af4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006aaa:	f001 fa95 	bl	8007fd8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006aae:	f004 fd6d 	bl	800b58c <HAL_RCC_GetSysClockFreq>
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <HAL_Init+0x54>)
 8006ab4:	4911      	ldr	r1, [pc, #68]	; (8006afc <HAL_Init+0x58>)
 8006ab6:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ab8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006aba:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006abe:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ac2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ac4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ac6:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8006aca:	490d      	ldr	r1, [pc, #52]	; (8006b00 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006acc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ad0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ad2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8006ad6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ad8:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ada:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006adc:	f7ff ffbc 	bl	8006a58 <HAL_InitTick>
 8006ae0:	b110      	cbz	r0, 8006ae8 <HAL_Init+0x44>
    return HAL_ERROR;
 8006ae2:	2401      	movs	r4, #1
}
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	bd10      	pop	{r4, pc}
 8006ae8:	4604      	mov	r4, r0
  HAL_MspInit();
 8006aea:	f7ff fbb7 	bl	800625c <HAL_MspInit>
}
 8006aee:	4620      	mov	r0, r4
 8006af0:	bd10      	pop	{r4, pc}
 8006af2:	bf00      	nop
 8006af4:	24000314 	.word	0x24000314
 8006af8:	58024400 	.word	0x58024400
 8006afc:	0801db14 	.word	0x0801db14
 8006b00:	24000310 	.word	0x24000310

08006b04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006b04:	4a03      	ldr	r2, [pc, #12]	; (8006b14 <HAL_IncTick+0x10>)
 8006b06:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <HAL_IncTick+0x14>)
 8006b08:	6811      	ldr	r1, [r2, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	440b      	add	r3, r1
 8006b0e:	6013      	str	r3, [r2, #0]
}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	2400b9b8 	.word	0x2400b9b8
 8006b18:	24000318 	.word	0x24000318

08006b1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006b1c:	4b01      	ldr	r3, [pc, #4]	; (8006b24 <HAL_GetTick+0x8>)
 8006b1e:	6818      	ldr	r0, [r3, #0]
}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	2400b9b8 	.word	0x2400b9b8

08006b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006b2c:	f7ff fff6 	bl	8006b1c <HAL_GetTick>
 8006b30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b32:	1c63      	adds	r3, r4, #1
 8006b34:	d002      	beq.n	8006b3c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b36:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <HAL_Delay+0x20>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b3c:	f7ff ffee 	bl	8006b1c <HAL_GetTick>
 8006b40:	1b43      	subs	r3, r0, r5
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	d3fa      	bcc.n	8006b3c <HAL_Delay+0x14>
  {
  }
}
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	24000318 	.word	0x24000318

08006b4c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006b4c:	4b01      	ldr	r3, [pc, #4]	; (8006b54 <HAL_GetREVID+0x8>)
 8006b4e:	6818      	ldr	r0, [r3, #0]
}
 8006b50:	0c00      	lsrs	r0, r0, #16
 8006b52:	4770      	bx	lr
 8006b54:	5c001000 	.word	0x5c001000

08006b58 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8006b58:	4a03      	ldr	r2, [pc, #12]	; (8006b68 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	4318      	orrs	r0, r3
 8006b62:	6010      	str	r0, [r2, #0]
}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	58003c00 	.word	0x58003c00

08006b6c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8006b6c:	4a03      	ldr	r2, [pc, #12]	; (8006b7c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	f023 0302 	bic.w	r3, r3, #2
 8006b74:	4318      	orrs	r0, r3
 8006b76:	6010      	str	r0, [r2, #0]
}
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	58003c00 	.word	0x58003c00

08006b80 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8006b80:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8006b82:	4c0a      	ldr	r4, [pc, #40]	; (8006bac <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	f043 0301 	orr.w	r3, r3, #1
 8006b8a:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b8c:	f7ff ffc6 	bl	8006b1c <HAL_GetTick>
 8006b90:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8006b92:	e004      	b.n	8006b9e <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8006b94:	f7ff ffc2 	bl	8006b1c <HAL_GetTick>
 8006b98:	1b40      	subs	r0, r0, r5
 8006b9a:	280a      	cmp	r0, #10
 8006b9c:	d804      	bhi.n	8006ba8 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	071b      	lsls	r3, r3, #28
 8006ba2:	d5f7      	bpl.n	8006b94 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006ba4:	2000      	movs	r0, #0
}
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8006ba8:	2003      	movs	r0, #3
}
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	58003c00 	.word	0x58003c00

08006bb0 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006bb0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006bb2:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006bb4:	f7fd feae 	bl	8004914 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bb8:	bd08      	pop	{r3, pc}
 8006bba:	bf00      	nop

08006bbc <HAL_ADC_ErrorCallback>:
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop

08006bc0 <HAL_ADC_IRQHandler>:
{
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bc2:	4a8e      	ldr	r2, [pc, #568]	; (8006dfc <HAL_ADC_IRQHandler+0x23c>)
{
 8006bc4:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006bc6:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bc8:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006bca:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006bcc:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bce:	f000 8095 	beq.w	8006cfc <HAL_ADC_IRQHandler+0x13c>
 8006bd2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	f000 8090 	beq.w	8006cfc <HAL_ADC_IRQHandler+0x13c>
 8006bdc:	4a88      	ldr	r2, [pc, #544]	; (8006e00 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006bde:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006be0:	07a9      	lsls	r1, r5, #30
 8006be2:	f007 071f 	and.w	r7, r7, #31
 8006be6:	d502      	bpl.n	8006bee <HAL_ADC_IRQHandler+0x2e>
 8006be8:	07b2      	lsls	r2, r6, #30
 8006bea:	f100 80aa 	bmi.w	8006d42 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006bee:	0769      	lsls	r1, r5, #29
 8006bf0:	d579      	bpl.n	8006ce6 <HAL_ADC_IRQHandler+0x126>
 8006bf2:	0772      	lsls	r2, r6, #29
 8006bf4:	d577      	bpl.n	8006ce6 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bf6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006bf8:	06d2      	lsls	r2, r2, #27
 8006bfa:	d403      	bmi.n	8006c04 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bfc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c02:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006c0a:	d11c      	bne.n	8006c46 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c0c:	4a7d      	ldr	r2, [pc, #500]	; (8006e04 <HAL_ADC_IRQHandler+0x244>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	f000 80e7 	beq.w	8006de2 <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006c14:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006c16:	0490      	lsls	r0, r2, #18
 8006c18:	d415      	bmi.n	8006c46 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	0711      	lsls	r1, r2, #28
 8006c1e:	d512      	bpl.n	8006c46 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	0752      	lsls	r2, r2, #29
 8006c24:	f100 80f2 	bmi.w	8006e0c <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	f022 020c 	bic.w	r2, r2, #12
 8006c2e:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c36:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c3a:	04db      	lsls	r3, r3, #19
 8006c3c:	d403      	bmi.n	8006c46 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7fd fe46 	bl	80048d8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	220c      	movs	r2, #12
 8006c50:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006c52:	06a8      	lsls	r0, r5, #26
 8006c54:	d54d      	bpl.n	8006cf2 <HAL_ADC_IRQHandler+0x132>
 8006c56:	06b1      	lsls	r1, r6, #26
 8006c58:	d54b      	bpl.n	8006cf2 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006c5c:	06d1      	lsls	r1, r2, #27
 8006c5e:	d403      	bmi.n	8006c68 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006c60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006c62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c66:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c68:	4966      	ldr	r1, [pc, #408]	; (8006e04 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c6c:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006c6e:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006c70:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8006c74:	d073      	beq.n	8006d5e <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006c76:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006c78:	b9d2      	cbnz	r2, 8006cb0 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006c7a:	018a      	lsls	r2, r1, #6
 8006c7c:	f100 80a9 	bmi.w	8006dd2 <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	0650      	lsls	r0, r2, #25
 8006c84:	d514      	bpl.n	8006cb0 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006c86:	0289      	lsls	r1, r1, #10
 8006c88:	d412      	bmi.n	8006cb0 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	0712      	lsls	r2, r2, #28
 8006c8e:	f100 80c8 	bmi.w	8006e22 <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c98:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006c9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca0:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006ca2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ca4:	05d8      	lsls	r0, r3, #23
 8006ca6:	d403      	bmi.n	8006cb0 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ca8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f001 f91f 	bl	8007ef4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	2260      	movs	r2, #96	; 0x60
 8006cba:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006cbc:	0629      	lsls	r1, r5, #24
 8006cbe:	d501      	bpl.n	8006cc4 <HAL_ADC_IRQHandler+0x104>
 8006cc0:	0632      	lsls	r2, r6, #24
 8006cc2:	d45f      	bmi.n	8006d84 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006cc4:	05e8      	lsls	r0, r5, #23
 8006cc6:	d501      	bpl.n	8006ccc <HAL_ADC_IRQHandler+0x10c>
 8006cc8:	05f1      	lsls	r1, r6, #23
 8006cca:	d466      	bmi.n	8006d9a <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006ccc:	05aa      	lsls	r2, r5, #22
 8006cce:	d501      	bpl.n	8006cd4 <HAL_ADC_IRQHandler+0x114>
 8006cd0:	05b0      	lsls	r0, r6, #22
 8006cd2:	d44b      	bmi.n	8006d6c <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006cd4:	06e9      	lsls	r1, r5, #27
 8006cd6:	d501      	bpl.n	8006cdc <HAL_ADC_IRQHandler+0x11c>
 8006cd8:	06f2      	lsls	r2, r6, #27
 8006cda:	d411      	bmi.n	8006d00 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006cdc:	056d      	lsls	r5, r5, #21
 8006cde:	d501      	bpl.n	8006ce4 <HAL_ADC_IRQHandler+0x124>
 8006ce0:	0570      	lsls	r0, r6, #21
 8006ce2:	d466      	bmi.n	8006db2 <HAL_ADC_IRQHandler+0x1f2>
}
 8006ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006ce6:	0728      	lsls	r0, r5, #28
 8006ce8:	d5b3      	bpl.n	8006c52 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006cea:	0731      	lsls	r1, r6, #28
 8006cec:	d483      	bmi.n	8006bf6 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006cee:	06a8      	lsls	r0, r5, #26
 8006cf0:	d4b1      	bmi.n	8006c56 <HAL_ADC_IRQHandler+0x96>
 8006cf2:	066a      	lsls	r2, r5, #25
 8006cf4:	d5e2      	bpl.n	8006cbc <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006cf6:	0670      	lsls	r0, r6, #25
 8006cf8:	d5e0      	bpl.n	8006cbc <HAL_ADC_IRQHandler+0xfc>
 8006cfa:	e7ae      	b.n	8006c5a <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006cfc:	4a42      	ldr	r2, [pc, #264]	; (8006e08 <HAL_ADC_IRQHandler+0x248>)
 8006cfe:	e76e      	b.n	8006bde <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006d00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006d02:	b17a      	cbz	r2, 8006d24 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006d04:	2f00      	cmp	r7, #0
 8006d06:	d075      	beq.n	8006df4 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006d08:	4a3c      	ldr	r2, [pc, #240]	; (8006dfc <HAL_ADC_IRQHandler+0x23c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	f000 8087 	beq.w	8006e1e <HAL_ADC_IRQHandler+0x25e>
 8006d10:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006d14:	4293      	cmp	r3, r2
 8006d16:	f000 8082 	beq.w	8006e1e <HAL_ADC_IRQHandler+0x25e>
 8006d1a:	4a39      	ldr	r2, [pc, #228]	; (8006e00 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006d1c:	6892      	ldr	r2, [r2, #8]
 8006d1e:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8006d22:	d00b      	beq.n	8006d3c <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006d24:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 8006d26:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d2c:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d30:	f043 0302 	orr.w	r3, r3, #2
 8006d34:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8006d36:	f7ff ff41 	bl	8006bbc <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	2210      	movs	r2, #16
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e7cc      	b.n	8006cdc <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006d42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d44:	06d8      	lsls	r0, r3, #27
 8006d46:	d403      	bmi.n	8006d50 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006d48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d4e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006d50:	4620      	mov	r0, r4
 8006d52:	f001 f8d7 	bl	8007f04 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e747      	b.n	8006bee <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006d5e:	21c1      	movs	r1, #193	; 0xc1
 8006d60:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006d62:	07c9      	lsls	r1, r1, #31
 8006d64:	d487      	bmi.n	8006c76 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006d66:	4925      	ldr	r1, [pc, #148]	; (8006dfc <HAL_ADC_IRQHandler+0x23c>)
 8006d68:	68c9      	ldr	r1, [r1, #12]
 8006d6a:	e785      	b.n	8006c78 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006d6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006d6e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d74:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006d76:	f001 f8c3 	bl	8007f00 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e7a7      	b.n	8006cd4 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d84:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006d86:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d8c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006d8e:	f7fd fdef 	bl	8004970 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	2280      	movs	r2, #128	; 0x80
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e794      	b.n	8006cc4 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006d9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006d9c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006da2:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006da4:	f001 f8aa 	bl	8007efc <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	e78c      	b.n	8006ccc <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006db2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006db8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dbe:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006dc0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006dc2:	f042 0208 	orr.w	r2, r2, #8
 8006dc6:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006dc8:	6019      	str	r1, [r3, #0]
}
 8006dca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006dce:	f001 b893 	b.w	8007ef8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006dd2:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006dd6:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006dda:	4302      	orrs	r2, r0
 8006ddc:	f47f af68 	bne.w	8006cb0 <HAL_ADC_IRQHandler+0xf0>
 8006de0:	e74e      	b.n	8006c80 <HAL_ADC_IRQHandler+0xc0>
 8006de2:	f240 2221 	movw	r2, #545	; 0x221
 8006de6:	40fa      	lsrs	r2, r7
 8006de8:	07d2      	lsls	r2, r2, #31
 8006dea:	f53f af13 	bmi.w	8006c14 <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006dee:	4a03      	ldr	r2, [pc, #12]	; (8006dfc <HAL_ADC_IRQHandler+0x23c>)
 8006df0:	68d2      	ldr	r2, [r2, #12]
 8006df2:	e710      	b.n	8006c16 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	0797      	lsls	r7, r2, #30
 8006df8:	d0a0      	beq.n	8006d3c <HAL_ADC_IRQHandler+0x17c>
 8006dfa:	e793      	b.n	8006d24 <HAL_ADC_IRQHandler+0x164>
 8006dfc:	40022000 	.word	0x40022000
 8006e00:	58026300 	.word	0x58026300
 8006e04:	40022100 	.word	0x40022100
 8006e08:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e0e:	f043 0310 	orr.w	r3, r3, #16
 8006e12:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e1c:	e713      	b.n	8006c46 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006e1e:	4a05      	ldr	r2, [pc, #20]	; (8006e34 <HAL_ADC_IRQHandler+0x274>)
 8006e20:	e77c      	b.n	8006d1c <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e24:	f043 0310 	orr.w	r3, r3, #16
 8006e28:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e32:	e73d      	b.n	8006cb0 <HAL_ADC_IRQHandler+0xf0>
 8006e34:	40022300 	.word	0x40022300

08006e38 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e38:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006e3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e3c:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8006e42:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006e44:	d11d      	bne.n	8006e82 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006e46:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e4c:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006e4e:	680a      	ldr	r2, [r1, #0]
 8006e50:	f012 0f08 	tst.w	r2, #8
 8006e54:	68ca      	ldr	r2, [r1, #12]
 8006e56:	d01b      	beq.n	8006e90 <ADC_DMAConvCplt+0x58>
 8006e58:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006e5c:	d10d      	bne.n	8006e7a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006e5e:	68ca      	ldr	r2, [r1, #12]
 8006e60:	0494      	lsls	r4, r2, #18
 8006e62:	d40a      	bmi.n	8006e7a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e6a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e6e:	04d1      	lsls	r1, r2, #19
 8006e70:	d403      	bmi.n	8006e7a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e74:	f042 0201 	orr.w	r2, r2, #1
 8006e78:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fd fd2c 	bl	80048d8 <HAL_ADC_ConvCpltCallback>
}
 8006e80:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e82:	06d2      	lsls	r2, r2, #27
 8006e84:	d40a      	bmi.n	8006e9c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006e90:	0790      	lsls	r0, r2, #30
 8006e92:	d0e7      	beq.n	8006e64 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fd fd1f 	bl	80048d8 <HAL_ADC_ConvCpltCallback>
 8006e9a:	e7f1      	b.n	8006e80 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fe8d 	bl	8006bbc <HAL_ADC_ErrorCallback>
}
 8006ea2:	bd10      	pop	{r4, pc}

08006ea4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006ea6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006ea8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eae:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006eb0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006eb2:	f043 0304 	orr.w	r3, r3, #4
 8006eb6:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006eb8:	f7ff fe80 	bl	8006bbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ebc:	bd08      	pop	{r3, pc}
 8006ebe:	bf00      	nop

08006ec0 <HAL_ADC_ConfigChannel>:
{
 8006ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8006ec2:	2200      	movs	r2, #0
{
 8006ec4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8006ec6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8006ec8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8006ecc:	2a01      	cmp	r2, #1
 8006ece:	f000 8136 	beq.w	800713e <HAL_ADC_ConfigChannel+0x27e>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ed6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8006ed8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006edc:	6894      	ldr	r4, [r2, #8]
 8006ede:	0766      	lsls	r6, r4, #29
 8006ee0:	f100 809a 	bmi.w	8007018 <HAL_ADC_ConfigChannel+0x158>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006ee4:	680c      	ldr	r4, [r1, #0]
 8006ee6:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	f040 809d 	bne.w	800702a <HAL_ADC_ConfigChannel+0x16a>
 8006ef0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8006ef4:	40a0      	lsls	r0, r4
 8006ef6:	69d6      	ldr	r6, [r2, #28]
  MODIFY_REG(*preg,
 8006ef8:	f04f 0e1f 	mov.w	lr, #31
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006efc:	684d      	ldr	r5, [r1, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006efe:	4330      	orrs	r0, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006f00:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8006f04:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 8006f06:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006f0a:	f00c 050c 	and.w	r5, ip, #12
 8006f0e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8006f12:	4084      	lsls	r4, r0
 8006f14:	fa0e fe00 	lsl.w	lr, lr, r0
 8006f18:	f85c 0005 	ldr.w	r0, [ip, r5]
 8006f1c:	ea20 000e 	bic.w	r0, r0, lr
 8006f20:	4320      	orrs	r0, r4
 8006f22:	f84c 0005 	str.w	r0, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f26:	6890      	ldr	r0, [r2, #8]
 8006f28:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f2c:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f2e:	d159      	bne.n	8006fe4 <HAL_ADC_ConfigChannel+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f30:	0705      	lsls	r5, r0, #28
 8006f32:	d457      	bmi.n	8006fe4 <HAL_ADC_ConfigChannel+0x124>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006f34:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006f36:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8006f3a:	f04f 0c07 	mov.w	ip, #7
 8006f3e:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006f40:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8006f42:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006f46:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8006f4a:	fa0c fc04 	lsl.w	ip, ip, r4
 8006f4e:	fa07 f404 	lsl.w	r4, r7, r4
 8006f52:	5970      	ldr	r0, [r6, r5]
 8006f54:	ea20 000c 	bic.w	r0, r0, ip
 8006f58:	4320      	orrs	r0, r4
 8006f5a:	5170      	str	r0, [r6, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006f5c:	48bd      	ldr	r0, [pc, #756]	; (8007254 <HAL_ADC_ConfigChannel+0x394>)
 8006f5e:	6800      	ldr	r0, [r0, #0]
 8006f60:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006f64:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8006f68:	68d0      	ldr	r0, [r2, #12]
 8006f6a:	f000 80e2 	beq.w	8007132 <HAL_ADC_ConfigChannel+0x272>
 8006f6e:	f010 0f10 	tst.w	r0, #16
 8006f72:	694d      	ldr	r5, [r1, #20]
 8006f74:	68d0      	ldr	r0, [r2, #12]
 8006f76:	f040 8102 	bne.w	800717e <HAL_ADC_ConfigChannel+0x2be>
 8006f7a:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006f7e:	0040      	lsls	r0, r0, #1
 8006f80:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006f82:	690e      	ldr	r6, [r1, #16]
 8006f84:	2e04      	cmp	r6, #4
 8006f86:	f000 80dd 	beq.w	8007144 <HAL_ADC_ConfigChannel+0x284>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006f8a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8006f8e:	6808      	ldr	r0, [r1, #0]
 8006f90:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
 8006f94:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006f98:	f007 4c00 	and.w	ip, r7, #2147483648	; 0x80000000
 8006f9c:	ea40 000c 	orr.w	r0, r0, ip
 8006fa0:	4328      	orrs	r0, r5
 8006fa2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006fa6:	7e4d      	ldrb	r5, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006fa8:	690e      	ldr	r6, [r1, #16]
 8006faa:	f1a5 0501 	sub.w	r5, r5, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006fae:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8006fb2:	fab5 f585 	clz	r5, r5
 8006fb6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006fba:	096d      	lsrs	r5, r5, #5
 8006fbc:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
 8006fc0:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006fc4:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006fc6:	690d      	ldr	r5, [r1, #16]
 8006fc8:	f1a0 0001 	sub.w	r0, r0, #1
 8006fcc:	6914      	ldr	r4, [r2, #16]
 8006fce:	f005 051f 	and.w	r5, r5, #31
 8006fd2:	fab0 f080 	clz	r0, r0
 8006fd6:	f424 44f0 	bic.w	r4, r4, #30720	; 0x7800
 8006fda:	0940      	lsrs	r0, r0, #5
 8006fdc:	02c0      	lsls	r0, r0, #11
 8006fde:	40a8      	lsls	r0, r5
 8006fe0:	4320      	orrs	r0, r4
 8006fe2:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006fe4:	6890      	ldr	r0, [r2, #8]
 8006fe6:	07c4      	lsls	r4, r0, #31
 8006fe8:	d414      	bmi.n	8007014 <HAL_ADC_ConfigChannel+0x154>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006fea:	68ce      	ldr	r6, [r1, #12]
 8006fec:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8006fee:	f006 0718 	and.w	r7, r6, #24
 8006ff2:	4899      	ldr	r0, [pc, #612]	; (8007258 <HAL_ADC_ConfigChannel+0x398>)
 8006ff4:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8006ff8:	40f8      	lsrs	r0, r7
 8006ffa:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8006ffe:	4020      	ands	r0, r4
 8007000:	ea25 0507 	bic.w	r5, r5, r7
 8007004:	4328      	orrs	r0, r5
 8007006:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800700a:	4894      	ldr	r0, [pc, #592]	; (800725c <HAL_ADC_ConfigChannel+0x39c>)
 800700c:	4286      	cmp	r6, r0
 800700e:	d043      	beq.n	8007098 <HAL_ADC_ConfigChannel+0x1d8>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007010:	2c00      	cmp	r4, #0
 8007012:	db13      	blt.n	800703c <HAL_ADC_ConfigChannel+0x17c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007014:	2000      	movs	r0, #0
 8007016:	e003      	b.n	8007020 <HAL_ADC_ConfigChannel+0x160>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800701a:	f042 0220 	orr.w	r2, r2, #32
 800701e:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007026:	b003      	add	sp, #12
 8007028:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800702a:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800702e:	b115      	cbz	r5, 8007036 <HAL_ADC_ConfigChannel+0x176>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8007030:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007034:	40a8      	lsls	r0, r5
 8007036:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800703a:	e75c      	b.n	8006ef6 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800703c:	4988      	ldr	r1, [pc, #544]	; (8007260 <HAL_ADC_ConfigChannel+0x3a0>)
 800703e:	428a      	cmp	r2, r1
 8007040:	f000 80c1 	beq.w	80071c6 <HAL_ADC_ConfigChannel+0x306>
 8007044:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8007048:	428a      	cmp	r2, r1
 800704a:	f000 80bc 	beq.w	80071c6 <HAL_ADC_ConfigChannel+0x306>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800704e:	4d85      	ldr	r5, [pc, #532]	; (8007264 <HAL_ADC_ConfigChannel+0x3a4>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007050:	4885      	ldr	r0, [pc, #532]	; (8007268 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007052:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007054:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007056:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800705a:	43c0      	mvns	r0, r0
 800705c:	f000 0001 	and.w	r0, r0, #1
 8007060:	2800      	cmp	r0, #0
 8007062:	f000 80bf 	beq.w	80071e4 <HAL_ADC_ConfigChannel+0x324>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007066:	4881      	ldr	r0, [pc, #516]	; (800726c <HAL_ADC_ConfigChannel+0x3ac>)
 8007068:	4284      	cmp	r4, r0
 800706a:	f000 8107 	beq.w	800727c <HAL_ADC_ConfigChannel+0x3bc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800706e:	4880      	ldr	r0, [pc, #512]	; (8007270 <HAL_ADC_ConfigChannel+0x3b0>)
 8007070:	4284      	cmp	r4, r0
 8007072:	f000 8126 	beq.w	80072c2 <HAL_ADC_ConfigChannel+0x402>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007076:	487f      	ldr	r0, [pc, #508]	; (8007274 <HAL_ADC_ConfigChannel+0x3b4>)
 8007078:	4284      	cmp	r4, r0
 800707a:	d1cb      	bne.n	8007014 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_VREFINT_INSTANCE(hadc))
 800707c:	0249      	lsls	r1, r1, #9
 800707e:	d4c9      	bmi.n	8007014 <HAL_ADC_ConfigChannel+0x154>
 8007080:	4979      	ldr	r1, [pc, #484]	; (8007268 <HAL_ADC_ConfigChannel+0x3a8>)
 8007082:	428a      	cmp	r2, r1
 8007084:	d1c6      	bne.n	8007014 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007086:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007088:	2000      	movs	r0, #0
 800708a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800708e:	4332      	orrs	r2, r6
 8007090:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007094:	60aa      	str	r2, [r5, #8]
}
 8007096:	e7c3      	b.n	8007020 <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007098:	2f00      	cmp	r7, #0
 800709a:	d075      	beq.n	8007188 <HAL_ADC_ConfigChannel+0x2c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800709c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80070a0:	2800      	cmp	r0, #0
 80070a2:	f000 80b3 	beq.w	800720c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80070a6:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070aa:	3001      	adds	r0, #1
 80070ac:	f000 001f 	and.w	r0, r0, #31
 80070b0:	2809      	cmp	r0, #9
 80070b2:	f240 80ab 	bls.w	800720c <HAL_ADC_ConfigChannel+0x34c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80070ba:	2d00      	cmp	r5, #0
 80070bc:	f000 8115 	beq.w	80072ea <HAL_ADC_ConfigChannel+0x42a>
  return __builtin_clz(value);
 80070c0:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80070c4:	3501      	adds	r5, #1
 80070c6:	06ad      	lsls	r5, r5, #26
 80070c8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070cc:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80070d0:	2800      	cmp	r0, #0
 80070d2:	f000 8108 	beq.w	80072e6 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80070d6:	fab0 f080 	clz	r0, r0
 80070da:	2601      	movs	r6, #1
 80070dc:	3001      	adds	r0, #1
 80070de:	f000 001f 	and.w	r0, r0, #31
 80070e2:	fa06 f000 	lsl.w	r0, r6, r0
 80070e6:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e8:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80070ec:	2c00      	cmp	r4, #0
 80070ee:	f000 80f8 	beq.w	80072e2 <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
 80070f2:	fab4 f484 	clz	r4, r4
 80070f6:	2003      	movs	r0, #3
 80070f8:	f06f 061d 	mvn.w	r6, #29
 80070fc:	3401      	adds	r4, #1
 80070fe:	f004 041f 	and.w	r4, r4, #31
 8007102:	fb10 6004 	smlabb	r0, r0, r4, r6
 8007106:	0500      	lsls	r0, r0, #20
 8007108:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800710c:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800710e:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8007112:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007114:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8007116:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800711a:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800711e:	4087      	lsls	r7, r0
 8007120:	5974      	ldr	r4, [r6, r5]
 8007122:	ea24 0407 	bic.w	r4, r4, r7
 8007126:	688f      	ldr	r7, [r1, #8]
 8007128:	4087      	lsls	r7, r0
 800712a:	433c      	orrs	r4, r7
 800712c:	5174      	str	r4, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800712e:	680c      	ldr	r4, [r1, #0]
}
 8007130:	e76e      	b.n	8007010 <HAL_ADC_ConfigChannel+0x150>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007132:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007136:	694d      	ldr	r5, [r1, #20]
 8007138:	0040      	lsls	r0, r0, #1
 800713a:	4085      	lsls	r5, r0
 800713c:	e721      	b.n	8006f82 <HAL_ADC_ConfigChannel+0xc2>
  __HAL_LOCK(hadc);
 800713e:	2002      	movs	r0, #2
}
 8007140:	b003      	add	sp, #12
 8007142:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007144:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8007146:	680c      	ldr	r4, [r1, #0]
 8007148:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800714c:	06a5      	lsls	r5, r4, #26
 800714e:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8007152:	d02e      	beq.n	80071b2 <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007154:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8007156:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800715a:	4285      	cmp	r5, r0
 800715c:	d024      	beq.n	80071a8 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800715e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8007160:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007164:	4285      	cmp	r5, r0
 8007166:	d029      	beq.n	80071bc <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007168:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800716a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800716e:	4285      	cmp	r5, r0
 8007170:	f47f af38 	bne.w	8006fe4 <HAL_ADC_ConfigChannel+0x124>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007174:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8007176:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800717a:	66d0      	str	r0, [r2, #108]	; 0x6c
 800717c:	e732      	b.n	8006fe4 <HAL_ADC_ConfigChannel+0x124>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800717e:	0840      	lsrs	r0, r0, #1
 8007180:	f000 0008 	and.w	r0, r0, #8
 8007184:	4085      	lsls	r5, r0
 8007186:	e6fc      	b.n	8006f82 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007188:	0ea0      	lsrs	r0, r4, #26
 800718a:	3001      	adds	r0, #1
 800718c:	f000 041f 	and.w	r4, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007190:	2c09      	cmp	r4, #9
 8007192:	d82d      	bhi.n	80071f0 <HAL_ADC_ConfigChannel+0x330>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007194:	0685      	lsls	r5, r0, #26
 8007196:	2001      	movs	r0, #1
 8007198:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800719c:	40a0      	lsls	r0, r4
 800719e:	4305      	orrs	r5, r0
 80071a0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80071a4:	0500      	lsls	r0, r0, #20
 80071a6:	e7b1      	b.n	800710c <HAL_ADC_ConfigChannel+0x24c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80071a8:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80071aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80071ae:	6650      	str	r0, [r2, #100]	; 0x64
 80071b0:	e7d5      	b.n	800715e <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80071b2:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80071b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80071b8:	6610      	str	r0, [r2, #96]	; 0x60
 80071ba:	e7cb      	b.n	8007154 <HAL_ADC_ConfigChannel+0x294>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80071bc:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80071be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80071c2:	6690      	str	r0, [r2, #104]	; 0x68
 80071c4:	e7d0      	b.n	8007168 <HAL_ADC_ConfigChannel+0x2a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80071c6:	4826      	ldr	r0, [pc, #152]	; (8007260 <HAL_ADC_ConfigChannel+0x3a0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80071c8:	4d2b      	ldr	r5, [pc, #172]	; (8007278 <HAL_ADC_ConfigChannel+0x3b8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80071ca:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80071ce:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80071d0:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 80071d4:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071d6:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80071d8:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 80071dc:	43c0      	mvns	r0, r0
 80071de:	f000 0001 	and.w	r0, r0, #1
 80071e2:	e73d      	b.n	8007060 <HAL_ADC_ConfigChannel+0x1a0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80071e6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071e8:	f042 0220 	orr.w	r2, r2, #32
 80071ec:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80071ee:	e717      	b.n	8007020 <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80071f0:	0685      	lsls	r5, r0, #26
 80071f2:	2601      	movs	r6, #1
 80071f4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80071f8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80071fc:	fa06 f404 	lsl.w	r4, r6, r4
 8007200:	381e      	subs	r0, #30
 8007202:	4325      	orrs	r5, r4
 8007204:	0500      	lsls	r0, r0, #20
 8007206:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800720a:	e77f      	b.n	800710c <HAL_ADC_ConfigChannel+0x24c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800720c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8007210:	2d00      	cmp	r5, #0
 8007212:	d072      	beq.n	80072fa <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8007214:	fab5 f585 	clz	r5, r5
 8007218:	3501      	adds	r5, #1
 800721a:	06ad      	lsls	r5, r5, #26
 800721c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007220:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007224:	2800      	cmp	r0, #0
 8007226:	d066      	beq.n	80072f6 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8007228:	fab0 f080 	clz	r0, r0
 800722c:	2601      	movs	r6, #1
 800722e:	3001      	adds	r0, #1
 8007230:	f000 001f 	and.w	r0, r0, #31
 8007234:	fa06 f000 	lsl.w	r0, r6, r0
 8007238:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800723e:	2c00      	cmp	r4, #0
 8007240:	d056      	beq.n	80072f0 <HAL_ADC_ConfigChannel+0x430>
  return __builtin_clz(value);
 8007242:	fab4 f084 	clz	r0, r4
 8007246:	3001      	adds	r0, #1
 8007248:	f000 001f 	and.w	r0, r0, #31
 800724c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007250:	0500      	lsls	r0, r0, #20
 8007252:	e75b      	b.n	800710c <HAL_ADC_ConfigChannel+0x24c>
 8007254:	5c001000 	.word	0x5c001000
 8007258:	000fffff 	.word	0x000fffff
 800725c:	47ff0000 	.word	0x47ff0000
 8007260:	40022000 	.word	0x40022000
 8007264:	58026300 	.word	0x58026300
 8007268:	58026000 	.word	0x58026000
 800726c:	cb840000 	.word	0xcb840000
 8007270:	c7520000 	.word	0xc7520000
 8007274:	cfb80000 	.word	0xcfb80000
 8007278:	40022300 	.word	0x40022300
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800727c:	0208      	lsls	r0, r1, #8
 800727e:	f53f aec9 	bmi.w	8007014 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007282:	491f      	ldr	r1, [pc, #124]	; (8007300 <HAL_ADC_ConfigChannel+0x440>)
 8007284:	428a      	cmp	r2, r1
 8007286:	f47f aec5 	bne.w	8007014 <HAL_ADC_ConfigChannel+0x154>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800728a:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <HAL_ADC_ConfigChannel+0x444>)
 800728c:	481e      	ldr	r0, [pc, #120]	; (8007308 <HAL_ADC_ConfigChannel+0x448>)
 800728e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007290:	68a9      	ldr	r1, [r5, #8]
 8007292:	0992      	lsrs	r2, r2, #6
 8007294:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8007298:	fba0 0202 	umull	r0, r2, r0, r2
 800729c:	4331      	orrs	r1, r6
 800729e:	0992      	lsrs	r2, r2, #6
 80072a0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80072a4:	3201      	adds	r2, #1
 80072a6:	60a9      	str	r1, [r5, #8]
 80072a8:	0052      	lsls	r2, r2, #1
 80072aa:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80072ac:	9a01      	ldr	r2, [sp, #4]
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	f43f aeb0 	beq.w	8007014 <HAL_ADC_ConfigChannel+0x154>
                wait_loop_index--;
 80072b4:	9a01      	ldr	r2, [sp, #4]
 80072b6:	3a01      	subs	r2, #1
 80072b8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80072ba:	9a01      	ldr	r2, [sp, #4]
 80072bc:	2a00      	cmp	r2, #0
 80072be:	d1f9      	bne.n	80072b4 <HAL_ADC_ConfigChannel+0x3f4>
 80072c0:	e6a8      	b.n	8007014 <HAL_ADC_ConfigChannel+0x154>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80072c2:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 80072c6:	f47f aea5 	bne.w	8007014 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072ca:	490d      	ldr	r1, [pc, #52]	; (8007300 <HAL_ADC_ConfigChannel+0x440>)
 80072cc:	428a      	cmp	r2, r1
 80072ce:	f47f aea1 	bne.w	8007014 <HAL_ADC_ConfigChannel+0x154>
 80072d2:	68aa      	ldr	r2, [r5, #8]
 80072d4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80072d8:	4332      	orrs	r2, r6
 80072da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80072de:	60aa      	str	r2, [r5, #8]
}
 80072e0:	e69e      	b.n	8007020 <HAL_ADC_ConfigChannel+0x160>
 80072e2:	480a      	ldr	r0, [pc, #40]	; (800730c <HAL_ADC_ConfigChannel+0x44c>)
 80072e4:	e712      	b.n	800710c <HAL_ADC_ConfigChannel+0x24c>
 80072e6:	2002      	movs	r0, #2
 80072e8:	e6fd      	b.n	80070e6 <HAL_ADC_ConfigChannel+0x226>
 80072ea:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80072ee:	e6ed      	b.n	80070cc <HAL_ADC_ConfigChannel+0x20c>
 80072f0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80072f4:	e70a      	b.n	800710c <HAL_ADC_ConfigChannel+0x24c>
 80072f6:	2002      	movs	r0, #2
 80072f8:	e79e      	b.n	8007238 <HAL_ADC_ConfigChannel+0x378>
 80072fa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80072fe:	e78f      	b.n	8007220 <HAL_ADC_ConfigChannel+0x360>
 8007300:	58026000 	.word	0x58026000
 8007304:	24000310 	.word	0x24000310
 8007308:	053e2d63 	.word	0x053e2d63
 800730c:	fe500000 	.word	0xfe500000

08007310 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8007310:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8007314:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007316:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8007318:	2a01      	cmp	r2, #1
 800731a:	f000 80ea 	beq.w	80074f2 <HAL_ADC_AnalogWDGConfig+0x1e2>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800731e:	681a      	ldr	r2, [r3, #0]
{
 8007320:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8007322:	2401      	movs	r4, #1
 8007324:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007328:	6894      	ldr	r4, [r2, #8]
 800732a:	0765      	lsls	r5, r4, #29
 800732c:	d428      	bmi.n	8007380 <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800732e:	6894      	ldr	r4, [r2, #8]
 8007330:	0724      	lsls	r4, r4, #28
 8007332:	d426      	bmi.n	8007382 <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007334:	680c      	ldr	r4, [r1, #0]
 8007336:	4db8      	ldr	r5, [pc, #736]	; (8007618 <HAL_ADC_AnalogWDGConfig+0x308>)
 8007338:	42ac      	cmp	r4, r5
 800733a:	f000 8097 	beq.w	800746c <HAL_ADC_AnalogWDGConfig+0x15c>
      switch (AnalogWDGConfig->WatchdogMode)
 800733e:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8007342:	d02e      	beq.n	80073a2 <HAL_ADC_AnalogWDGConfig+0x92>
 8007344:	d827      	bhi.n	8007396 <HAL_ADC_AnalogWDGConfig+0x86>
 8007346:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 800734a:	d02a      	beq.n	80073a2 <HAL_ADC_AnalogWDGConfig+0x92>
 800734c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007350:	d027      	beq.n	80073a2 <HAL_ADC_AnalogWDGConfig+0x92>
 8007352:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007356:	d024      	beq.n	80073a2 <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007358:	f004 0001 	and.w	r0, r4, #1
 800735c:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 8007360:	4eae      	ldr	r6, [pc, #696]	; (800761c <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007362:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8007366:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007368:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800736c:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 8007370:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8007374:	ea24 0406 	bic.w	r4, r4, r6
 8007378:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800737c:	680c      	ldr	r4, [r1, #0]
}
 800737e:	e023      	b.n	80073c8 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007380:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007382:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007384:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007386:	f042 0220 	orr.w	r2, r2, #32
 800738a:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007392:	bc70      	pop	{r4, r5, r6}
 8007394:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8007396:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800739a:	d002      	beq.n	80073a2 <HAL_ADC_AnalogWDGConfig+0x92>
 800739c:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 80073a0:	d1da      	bne.n	8007358 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80073a2:	489f      	ldr	r0, [pc, #636]	; (8007620 <HAL_ADC_AnalogWDGConfig+0x310>)
 80073a4:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80073a6:	6888      	ldr	r0, [r1, #8]
 80073a8:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80073ac:	f000 80cf 	beq.w	800754e <HAL_ADC_AnalogWDGConfig+0x23e>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80073b0:	2d00      	cmp	r5, #0
 80073b2:	f040 80e3 	bne.w	800757c <HAL_ADC_AnalogWDGConfig+0x26c>
 80073b6:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80073ba:	2501      	movs	r5, #1
 80073bc:	4085      	lsls	r5, r0
 80073be:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 80073c2:	4328      	orrs	r0, r5
 80073c4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80073c8:	4896      	ldr	r0, [pc, #600]	; (8007624 <HAL_ADC_AnalogWDGConfig+0x314>)
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80073d0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80073d4:	f000 808f 	beq.w	80074f6 <HAL_ADC_AnalogWDGConfig+0x1e6>
 80073d8:	68d0      	ldr	r0, [r2, #12]
 80073da:	68d5      	ldr	r5, [r2, #12]
 80073dc:	06c0      	lsls	r0, r0, #27
 80073de:	f100 80b0 	bmi.w	8007542 <HAL_ADC_AnalogWDGConfig+0x232>
 80073e2:	f3c5 0582 	ubfx	r5, r5, #2, #3
 80073e6:	6908      	ldr	r0, [r1, #16]
 80073e8:	006d      	lsls	r5, r5, #1
 80073ea:	40a8      	lsls	r0, r5
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80073ec:	4d8d      	ldr	r5, [pc, #564]	; (8007624 <HAL_ADC_AnalogWDGConfig+0x314>)
 80073ee:	682d      	ldr	r5, [r5, #0]
 80073f0:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 80073f4:	68d5      	ldr	r5, [r2, #12]
 80073f6:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 80073fa:	d030      	beq.n	800745e <HAL_ADC_AnalogWDGConfig+0x14e>
 80073fc:	f015 0f10 	tst.w	r5, #16
 8007400:	68d5      	ldr	r5, [r2, #12]
 8007402:	d02c      	beq.n	800745e <HAL_ADC_AnalogWDGConfig+0x14e>
 8007404:	086d      	lsrs	r5, r5, #1
 8007406:	694e      	ldr	r6, [r1, #20]
 8007408:	f005 0508 	and.w	r5, r5, #8
 800740c:	fa06 fc05 	lsl.w	ip, r6, r5
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007410:	4d83      	ldr	r5, [pc, #524]	; (8007620 <HAL_ADC_AnalogWDGConfig+0x310>)
 8007412:	42ac      	cmp	r4, r5
 8007414:	d076      	beq.n	8007504 <HAL_ADC_AnalogWDGConfig+0x1f4>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8007416:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 800741a:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800741e:	ea44 040c 	orr.w	r4, r4, ip
 8007422:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007426:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 800742a:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800742e:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8007430:	f44f 7400 	mov.w	r4, #512	; 0x200
 8007434:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007438:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800743a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800743e:	6558      	str	r0, [r3, #84]	; 0x54
 8007440:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007442:	7b09      	ldrb	r1, [r1, #12]
 8007444:	2901      	cmp	r1, #1
 8007446:	f000 8093 	beq.w	8007570 <HAL_ADC_AnalogWDGConfig+0x260>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800744a:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800744c:	2000      	movs	r0, #0
 800744e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8007452:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800745a:	bc70      	pop	{r4, r5, r6}
 800745c:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800745e:	f3c5 0582 	ubfx	r5, r5, #2, #3
 8007462:	694e      	ldr	r6, [r1, #20]
 8007464:	006d      	lsls	r5, r5, #1
 8007466:	fa06 fc05 	lsl.w	ip, r6, r5
 800746a:	e7d1      	b.n	8007410 <HAL_ADC_AnalogWDGConfig+0x100>
      switch (AnalogWDGConfig->WatchdogMode)
 800746c:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8007470:	f000 80fb 	beq.w	800766a <HAL_ADC_AnalogWDGConfig+0x35a>
 8007474:	d82a      	bhi.n	80074cc <HAL_ADC_AnalogWDGConfig+0x1bc>
 8007476:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 800747a:	f000 80eb 	beq.w	8007654 <HAL_ADC_AnalogWDGConfig+0x344>
 800747e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007482:	d118      	bne.n	80074b6 <HAL_ADC_AnalogWDGConfig+0x1a6>
  MODIFY_REG(*preg,
 8007484:	68d4      	ldr	r4, [r2, #12]
 8007486:	4868      	ldr	r0, [pc, #416]	; (8007628 <HAL_ADC_AnalogWDGConfig+0x318>)
 8007488:	4020      	ands	r0, r4
 800748a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800748e:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007490:	4864      	ldr	r0, [pc, #400]	; (8007624 <HAL_ADC_AnalogWDGConfig+0x314>)
 8007492:	6800      	ldr	r0, [r0, #0]
 8007494:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8007498:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800749c:	68d0      	ldr	r0, [r2, #12]
 800749e:	d076      	beq.n	800758e <HAL_ADC_AnalogWDGConfig+0x27e>
 80074a0:	f010 0f10 	tst.w	r0, #16
 80074a4:	690c      	ldr	r4, [r1, #16]
 80074a6:	68d0      	ldr	r0, [r2, #12]
 80074a8:	f040 80a5 	bne.w	80075f6 <HAL_ADC_AnalogWDGConfig+0x2e6>
 80074ac:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80074b0:	0040      	lsls	r0, r0, #1
 80074b2:	4084      	lsls	r4, r0
 80074b4:	e070      	b.n	8007598 <HAL_ADC_AnalogWDGConfig+0x288>
      switch (AnalogWDGConfig->WatchdogMode)
 80074b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80074ba:	f040 80bf 	bne.w	800763c <HAL_ADC_AnalogWDGConfig+0x32c>
 80074be:	68d4      	ldr	r4, [r2, #12]
 80074c0:	4859      	ldr	r0, [pc, #356]	; (8007628 <HAL_ADC_AnalogWDGConfig+0x318>)
 80074c2:	4020      	ands	r0, r4
 80074c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80074c8:	60d0      	str	r0, [r2, #12]
}
 80074ca:	e7e1      	b.n	8007490 <HAL_ADC_AnalogWDGConfig+0x180>
 80074cc:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80074d0:	f000 80b9 	beq.w	8007646 <HAL_ADC_AnalogWDGConfig+0x336>
 80074d4:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 80074d8:	f040 80b0 	bne.w	800763c <HAL_ADC_AnalogWDGConfig+0x32c>
  MODIFY_REG(*preg,
 80074dc:	68d5      	ldr	r5, [r2, #12]
 80074de:	6888      	ldr	r0, [r1, #8]
 80074e0:	4c51      	ldr	r4, [pc, #324]	; (8007628 <HAL_ADC_AnalogWDGConfig+0x318>)
 80074e2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80074e6:	402c      	ands	r4, r5
 80074e8:	4320      	orrs	r0, r4
 80074ea:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 80074ee:	60d0      	str	r0, [r2, #12]
}
 80074f0:	e7ce      	b.n	8007490 <HAL_ADC_AnalogWDGConfig+0x180>
  __HAL_LOCK(hadc);
 80074f2:	2002      	movs	r0, #2
}
 80074f4:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80074f6:	68d5      	ldr	r5, [r2, #12]
 80074f8:	6908      	ldr	r0, [r1, #16]
 80074fa:	f3c5 0582 	ubfx	r5, r5, #2, #3
 80074fe:	006d      	lsls	r5, r5, #1
 8007500:	40a8      	lsls	r0, r5
 8007502:	e773      	b.n	80073ec <HAL_ADC_AnalogWDGConfig+0xdc>
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8007504:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8007508:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800750c:	ea44 040c 	orr.w	r4, r4, ip
 8007510:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007514:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8007518:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800751c:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800751e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8007522:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007526:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007528:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 800752c:	6558      	str	r0, [r3, #84]	; 0x54
 800752e:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007530:	7b09      	ldrb	r1, [r1, #12]
 8007532:	2901      	cmp	r1, #1
 8007534:	d07c      	beq.n	8007630 <HAL_ADC_AnalogWDGConfig+0x320>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007536:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007538:	2000      	movs	r0, #0
 800753a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800753e:	6051      	str	r1, [r2, #4]
}
 8007540:	e724      	b.n	800738c <HAL_ADC_AnalogWDGConfig+0x7c>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007542:	086d      	lsrs	r5, r5, #1
 8007544:	6908      	ldr	r0, [r1, #16]
 8007546:	f005 0508 	and.w	r5, r5, #8
 800754a:	40a8      	lsls	r0, r5
 800754c:	e74e      	b.n	80073ec <HAL_ADC_AnalogWDGConfig+0xdc>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800754e:	2d00      	cmp	r5, #0
 8007550:	d05c      	beq.n	800760c <HAL_ADC_AnalogWDGConfig+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007552:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8007556:	2800      	cmp	r0, #0
 8007558:	f000 8092 	beq.w	8007680 <HAL_ADC_AnalogWDGConfig+0x370>
  return __builtin_clz(value);
 800755c:	fab0 f080 	clz	r0, r0
 8007560:	2501      	movs	r5, #1
 8007562:	4085      	lsls	r5, r0
 8007564:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8007568:	4328      	orrs	r0, r5
 800756a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 800756e:	e72b      	b.n	80073c8 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007570:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007572:	2000      	movs	r0, #0
 8007574:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007578:	6051      	str	r1, [r2, #4]
}
 800757a:	e707      	b.n	800738c <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800757c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8007580:	2800      	cmp	r0, #0
 8007582:	d053      	beq.n	800762c <HAL_ADC_AnalogWDGConfig+0x31c>
  return __builtin_clz(value);
 8007584:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007588:	2501      	movs	r5, #1
 800758a:	4085      	lsls	r5, r0
 800758c:	e717      	b.n	80073be <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800758e:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007592:	690c      	ldr	r4, [r1, #16]
 8007594:	0040      	lsls	r0, r0, #1
 8007596:	4084      	lsls	r4, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007598:	4822      	ldr	r0, [pc, #136]	; (8007624 <HAL_ADC_AnalogWDGConfig+0x314>)
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80075a0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80075a4:	68d0      	ldr	r0, [r2, #12]
 80075a6:	d003      	beq.n	80075b0 <HAL_ADC_AnalogWDGConfig+0x2a0>
 80075a8:	f010 0f10 	tst.w	r0, #16
 80075ac:	68d0      	ldr	r0, [r2, #12]
 80075ae:	d127      	bne.n	8007600 <HAL_ADC_AnalogWDGConfig+0x2f0>
 80075b0:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80075b4:	694d      	ldr	r5, [r1, #20]
 80075b6:	0040      	lsls	r0, r0, #1
 80075b8:	4085      	lsls	r5, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80075ba:	6a10      	ldr	r0, [r2, #32]
 80075bc:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 80075c0:	4328      	orrs	r0, r5
 80075c2:	6210      	str	r0, [r2, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80075c4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80075c6:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 80075ca:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80075cc:	2480      	movs	r4, #128	; 0x80
 80075ce:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80075d0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80075d2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80075d6:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075d8:	2000      	movs	r0, #0
 80075da:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 80075dc:	7b09      	ldrb	r1, [r1, #12]
 80075de:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80075e0:	6851      	ldr	r1, [r2, #4]
 80075e2:	bf0c      	ite	eq
 80075e4:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80075e6:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 80075ea:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80075f2:	bc70      	pop	{r4, r5, r6}
 80075f4:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80075f6:	0840      	lsrs	r0, r0, #1
 80075f8:	f000 0008 	and.w	r0, r0, #8
 80075fc:	4084      	lsls	r4, r0
 80075fe:	e7cb      	b.n	8007598 <HAL_ADC_AnalogWDGConfig+0x288>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007600:	0840      	lsrs	r0, r0, #1
 8007602:	694d      	ldr	r5, [r1, #20]
 8007604:	f000 0008 	and.w	r0, r0, #8
 8007608:	4085      	lsls	r5, r0
 800760a:	e7d6      	b.n	80075ba <HAL_ADC_AnalogWDGConfig+0x2aa>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800760c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8007610:	2501      	movs	r5, #1
 8007612:	4085      	lsls	r5, r0
 8007614:	e7a6      	b.n	8007564 <HAL_ADC_AnalogWDGConfig+0x254>
 8007616:	bf00      	nop
 8007618:	7dc00000 	.word	0x7dc00000
 800761c:	7dcfffff 	.word	0x7dcfffff
 8007620:	001fffff 	.word	0x001fffff
 8007624:	5c001000 	.word	0x5c001000
 8007628:	823fffff 	.word	0x823fffff
 800762c:	2501      	movs	r5, #1
 800762e:	e6c6      	b.n	80073be <HAL_ADC_AnalogWDGConfig+0xae>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007630:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007632:	2000      	movs	r0, #0
 8007634:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007638:	6051      	str	r1, [r2, #4]
}
 800763a:	e6a7      	b.n	800738c <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 800763c:	68d4      	ldr	r4, [r2, #12]
 800763e:	4811      	ldr	r0, [pc, #68]	; (8007684 <HAL_ADC_AnalogWDGConfig+0x374>)
 8007640:	4020      	ands	r0, r4
 8007642:	60d0      	str	r0, [r2, #12]
}
 8007644:	e724      	b.n	8007490 <HAL_ADC_AnalogWDGConfig+0x180>
  MODIFY_REG(*preg,
 8007646:	68d4      	ldr	r4, [r2, #12]
 8007648:	480e      	ldr	r0, [pc, #56]	; (8007684 <HAL_ADC_AnalogWDGConfig+0x374>)
 800764a:	4020      	ands	r0, r4
 800764c:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8007650:	60d0      	str	r0, [r2, #12]
}
 8007652:	e71d      	b.n	8007490 <HAL_ADC_AnalogWDGConfig+0x180>
  MODIFY_REG(*preg,
 8007654:	68d5      	ldr	r5, [r2, #12]
 8007656:	6888      	ldr	r0, [r1, #8]
 8007658:	4c0a      	ldr	r4, [pc, #40]	; (8007684 <HAL_ADC_AnalogWDGConfig+0x374>)
 800765a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800765e:	402c      	ands	r4, r5
 8007660:	4320      	orrs	r0, r4
 8007662:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8007666:	60d0      	str	r0, [r2, #12]
}
 8007668:	e712      	b.n	8007490 <HAL_ADC_AnalogWDGConfig+0x180>
  MODIFY_REG(*preg,
 800766a:	68d5      	ldr	r5, [r2, #12]
 800766c:	6888      	ldr	r0, [r1, #8]
 800766e:	4c05      	ldr	r4, [pc, #20]	; (8007684 <HAL_ADC_AnalogWDGConfig+0x374>)
 8007670:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007674:	402c      	ands	r4, r5
 8007676:	4320      	orrs	r0, r4
 8007678:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 800767c:	60d0      	str	r0, [r2, #12]
}
 800767e:	e707      	b.n	8007490 <HAL_ADC_AnalogWDGConfig+0x180>
 8007680:	2501      	movs	r5, #1
 8007682:	e76f      	b.n	8007564 <HAL_ADC_AnalogWDGConfig+0x254>
 8007684:	823fffff 	.word	0x823fffff

08007688 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007688:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007690:	689a      	ldr	r2, [r3, #8]
{
 8007692:	b570      	push	{r4, r5, r6, lr}
 8007694:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007696:	d103      	bne.n	80076a0 <ADC_ConversionStop+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007698:	0712      	lsls	r2, r2, #28
 800769a:	d401      	bmi.n	80076a0 <ADC_ConversionStop+0x18>
  return HAL_OK;
 800769c:	2000      	movs	r0, #0
}
 800769e:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	0196      	lsls	r6, r2, #6
 80076a4:	d504      	bpl.n	80076b0 <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80076a6:	8aa0      	ldrh	r0, [r4, #20]
 80076a8:	f240 1201 	movw	r2, #257	; 0x101
 80076ac:	4290      	cmp	r0, r2
 80076ae:	d01a      	beq.n	80076e6 <ADC_ConversionStop+0x5e>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80076b0:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	d040      	beq.n	8007738 <ADC_ConversionStop+0xb0>
 80076b6:	0750      	lsls	r0, r2, #29
 80076b8:	d508      	bpl.n	80076cc <ADC_ConversionStop+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	0792      	lsls	r2, r2, #30
 80076be:	d405      	bmi.n	80076cc <ADC_ConversionStop+0x44>
  MODIFY_REG(ADCx->CR,
 80076c0:	6898      	ldr	r0, [r3, #8]
 80076c2:	4a2d      	ldr	r2, [pc, #180]	; (8007778 <ADC_ConversionStop+0xf0>)
 80076c4:	4002      	ands	r2, r0
 80076c6:	f042 0210 	orr.w	r2, r2, #16
 80076ca:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80076cc:	2901      	cmp	r1, #1
 80076ce:	d019      	beq.n	8007704 <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	0716      	lsls	r6, r2, #28
 80076d4:	d502      	bpl.n	80076dc <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	0790      	lsls	r0, r2, #30
 80076da:	d534      	bpl.n	8007746 <ADC_ConversionStop+0xbe>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80076dc:	2903      	cmp	r1, #3
 80076de:	bf14      	ite	ne
 80076e0:	2504      	movne	r5, #4
 80076e2:	250c      	moveq	r5, #12
 80076e4:	e00f      	b.n	8007706 <ADC_ConversionStop+0x7e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	0650      	lsls	r0, r2, #25
 80076ea:	d406      	bmi.n	80076fa <ADC_ConversionStop+0x72>
 80076ec:	4a23      	ldr	r2, [pc, #140]	; (800777c <ADC_ConversionStop+0xf4>)
 80076ee:	e001      	b.n	80076f4 <ADC_ConversionStop+0x6c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80076f0:	3a01      	subs	r2, #1
 80076f2:	d018      	beq.n	8007726 <ADC_ConversionStop+0x9e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80076f4:	6819      	ldr	r1, [r3, #0]
 80076f6:	0649      	lsls	r1, r1, #25
 80076f8:	d5fa      	bpl.n	80076f0 <ADC_ConversionStop+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80076fa:	2240      	movs	r2, #64	; 0x40
 80076fc:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	0756      	lsls	r6, r2, #29
 8007702:	d427      	bmi.n	8007754 <ADC_ConversionStop+0xcc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007704:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8007706:	f7ff fa09 	bl	8006b1c <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800770a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800770c:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	421d      	tst	r5, r3
 8007712:	d0c3      	beq.n	800769c <ADC_ConversionStop+0x14>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007714:	f7ff fa02 	bl	8006b1c <HAL_GetTick>
 8007718:	1b83      	subs	r3, r0, r6
 800771a:	2b05      	cmp	r3, #5
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800771c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800771e:	d9f6      	bls.n	800770e <ADC_ConversionStop+0x86>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	422a      	tst	r2, r5
 8007724:	d0f3      	beq.n	800770e <ADC_ConversionStop+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007726:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8007728:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800772a:	f043 0310 	orr.w	r3, r3, #16
 800772e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007730:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007732:	4303      	orrs	r3, r0
 8007734:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8007736:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007738:	0715      	lsls	r5, r2, #28
 800773a:	d502      	bpl.n	8007742 <ADC_ConversionStop+0xba>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	0792      	lsls	r2, r2, #30
 8007740:	d513      	bpl.n	800776a <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007742:	2508      	movs	r5, #8
 8007744:	e7df      	b.n	8007706 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8007746:	6898      	ldr	r0, [r3, #8]
 8007748:	4a0b      	ldr	r2, [pc, #44]	; (8007778 <ADC_ConversionStop+0xf0>)
 800774a:	4002      	ands	r2, r0
 800774c:	f042 0220 	orr.w	r2, r2, #32
 8007750:	609a      	str	r2, [r3, #8]
}
 8007752:	e7c3      	b.n	80076dc <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	0791      	lsls	r1, r2, #30
 8007758:	d4d4      	bmi.n	8007704 <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR,
 800775a:	6899      	ldr	r1, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800775c:	2504      	movs	r5, #4
 800775e:	4a06      	ldr	r2, [pc, #24]	; (8007778 <ADC_ConversionStop+0xf0>)
 8007760:	400a      	ands	r2, r1
 8007762:	f042 0210 	orr.w	r2, r2, #16
 8007766:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007768:	e7cd      	b.n	8007706 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 800776a:	6899      	ldr	r1, [r3, #8]
 800776c:	4a02      	ldr	r2, [pc, #8]	; (8007778 <ADC_ConversionStop+0xf0>)
 800776e:	400a      	ands	r2, r1
 8007770:	f042 0220 	orr.w	r2, r2, #32
 8007774:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8007776:	e7e4      	b.n	8007742 <ADC_ConversionStop+0xba>
 8007778:	7fffffc0 	.word	0x7fffffc0
 800777c:	000cdc00 	.word	0x000cdc00

08007780 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007780:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	07d1      	lsls	r1, r2, #31
 8007786:	d501      	bpl.n	800778c <ADC_Enable+0xc>
  return HAL_OK;
 8007788:	2000      	movs	r0, #0
}
 800778a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800778c:	6899      	ldr	r1, [r3, #8]
 800778e:	4a21      	ldr	r2, [pc, #132]	; (8007814 <ADC_Enable+0x94>)
 8007790:	4211      	tst	r1, r2
{
 8007792:	b570      	push	{r4, r5, r6, lr}
 8007794:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007796:	d12c      	bne.n	80077f2 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8007798:	6899      	ldr	r1, [r3, #8]
 800779a:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <ADC_Enable+0x98>)
 800779c:	400a      	ands	r2, r1
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80077a4:	f7ff f9ba 	bl	8006b1c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	4a1c      	ldr	r2, [pc, #112]	; (800781c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 80077ac:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d028      	beq.n	8007804 <ADC_Enable+0x84>
 80077b2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d024      	beq.n	8007804 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80077ba:	4a19      	ldr	r2, [pc, #100]	; (8007820 <ADC_Enable+0xa0>)
 80077bc:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	07d6      	lsls	r6, r2, #31
 80077c2:	d414      	bmi.n	80077ee <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 80077c4:	4e14      	ldr	r6, [pc, #80]	; (8007818 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	07d0      	lsls	r0, r2, #31
 80077ca:	d404      	bmi.n	80077d6 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	4032      	ands	r2, r6
 80077d0:	f042 0201 	orr.w	r2, r2, #1
 80077d4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80077d6:	f7ff f9a1 	bl	8006b1c <HAL_GetTick>
 80077da:	1b43      	subs	r3, r0, r5
 80077dc:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077de:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80077e0:	d902      	bls.n	80077e8 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	07d1      	lsls	r1, r2, #31
 80077e6:	d504      	bpl.n	80077f2 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	07d2      	lsls	r2, r2, #31
 80077ec:	d5eb      	bpl.n	80077c6 <ADC_Enable+0x46>
  return HAL_OK;
 80077ee:	2000      	movs	r0, #0
}
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80077f4:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077f6:	f043 0310 	orr.w	r3, r3, #16
 80077fa:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077fe:	4303      	orrs	r3, r0
 8007800:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8007802:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007804:	4a07      	ldr	r2, [pc, #28]	; (8007824 <ADC_Enable+0xa4>)
 8007806:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007808:	06d2      	lsls	r2, r2, #27
 800780a:	d0d8      	beq.n	80077be <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800780c:	4a06      	ldr	r2, [pc, #24]	; (8007828 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800780e:	4293      	cmp	r3, r2
 8007810:	d1d5      	bne.n	80077be <ADC_Enable+0x3e>
 8007812:	e7ec      	b.n	80077ee <ADC_Enable+0x6e>
 8007814:	8000003f 	.word	0x8000003f
 8007818:	7fffffc0 	.word	0x7fffffc0
 800781c:	40022000 	.word	0x40022000
 8007820:	58026300 	.word	0x58026300
 8007824:	40022300 	.word	0x40022300
 8007828:	40022100 	.word	0x40022100

0800782c <ADC_Disable>:
{
 800782c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800782e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	0795      	lsls	r5, r2, #30
 8007834:	d502      	bpl.n	800783c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007836:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8007838:	2000      	movs	r0, #0
}
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	07d4      	lsls	r4, r2, #31
 8007840:	d529      	bpl.n	8007896 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	4604      	mov	r4, r0
 8007846:	f002 020d 	and.w	r2, r2, #13
 800784a:	2a01      	cmp	r2, #1
 800784c:	d008      	beq.n	8007860 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800784e:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8007850:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007852:	f043 0310 	orr.w	r3, r3, #16
 8007856:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800785a:	4303      	orrs	r3, r0
 800785c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800785e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8007860:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007862:	2103      	movs	r1, #3
 8007864:	4a0d      	ldr	r2, [pc, #52]	; (800789c <ADC_Disable+0x70>)
 8007866:	4002      	ands	r2, r0
 8007868:	f042 0202 	orr.w	r2, r2, #2
 800786c:	609a      	str	r2, [r3, #8]
 800786e:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8007870:	f7ff f954 	bl	8006b1c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007874:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007876:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	07d9      	lsls	r1, r3, #31
 800787c:	d50b      	bpl.n	8007896 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800787e:	f7ff f94d 	bl	8006b1c <HAL_GetTick>
 8007882:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007884:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007886:	2802      	cmp	r0, #2
 8007888:	d902      	bls.n	8007890 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	07d2      	lsls	r2, r2, #31
 800788e:	d4de      	bmi.n	800784e <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	07db      	lsls	r3, r3, #31
 8007894:	d4f3      	bmi.n	800787e <ADC_Disable+0x52>
  return HAL_OK;
 8007896:	2000      	movs	r0, #0
}
 8007898:	bd38      	pop	{r3, r4, r5, pc}
 800789a:	bf00      	nop
 800789c:	7fffffc0 	.word	0x7fffffc0

080078a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80078a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80078a2:	4a57      	ldr	r2, [pc, #348]	; (8007a00 <ADC_ConfigureBoostMode+0x160>)
{
 80078a4:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80078a6:	6803      	ldr	r3, [r0, #0]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d026      	beq.n	80078fa <ADC_ConfigureBoostMode+0x5a>
 80078ac:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d022      	beq.n	80078fa <ADC_ConfigureBoostMode+0x5a>
 80078b4:	4b53      	ldr	r3, [pc, #332]	; (8007a04 <ADC_ConfigureBoostMode+0x164>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80078bc:	d022      	beq.n	8007904 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80078be:	f004 f82f 	bl	800b920 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80078c2:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80078c4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80078c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ca:	f000 8088 	beq.w	80079de <ADC_ConfigureBoostMode+0x13e>
 80078ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078d2:	d06c      	beq.n	80079ae <ADC_ConfigureBoostMode+0x10e>
 80078d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078d8:	f000 8081 	beq.w	80079de <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80078dc:	f7ff f936 	bl	8006b4c <HAL_GetREVID>
 80078e0:	f241 0303 	movw	r3, #4099	; 0x1003
 80078e4:	4298      	cmp	r0, r3
 80078e6:	d84b      	bhi.n	8007980 <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
 80078e8:	4b47      	ldr	r3, [pc, #284]	; (8007a08 <ADC_ConfigureBoostMode+0x168>)
 80078ea:	429d      	cmp	r5, r3
 80078ec:	d92a      	bls.n	8007944 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80078ee:	6822      	ldr	r2, [r4, #0]
 80078f0:	6893      	ldr	r3, [r2, #8]
 80078f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078f6:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80078f8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80078fa:	4b44      	ldr	r3, [pc, #272]	; (8007a0c <ADC_ConfigureBoostMode+0x16c>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8007902:	d1dc      	bne.n	80078be <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007904:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007908:	2100      	movs	r1, #0
 800790a:	f005 f9eb 	bl	800cce4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800790e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007910:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8007912:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007916:	d06c      	beq.n	80079f2 <ADC_ConfigureBoostMode+0x152>
 8007918:	d808      	bhi.n	800792c <ADC_ConfigureBoostMode+0x8c>
 800791a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800791e:	d050      	beq.n	80079c2 <ADC_ConfigureBoostMode+0x122>
 8007920:	d916      	bls.n	8007950 <ADC_ConfigureBoostMode+0xb0>
 8007922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007926:	d1d9      	bne.n	80078dc <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8007928:	0945      	lsrs	r5, r0, #5
        break;
 800792a:	e7d7      	b.n	80078dc <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 800792c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007930:	d045      	beq.n	80079be <ADC_ConfigureBoostMode+0x11e>
 8007932:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007936:	d1d1      	bne.n	80078dc <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007938:	f7ff f908 	bl	8006b4c <HAL_GetREVID>
 800793c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007940:	4298      	cmp	r0, r3
 8007942:	d840      	bhi.n	80079c6 <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007944:	6822      	ldr	r2, [r4, #0]
 8007946:	6893      	ldr	r3, [r2, #8]
 8007948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800794c:	6093      	str	r3, [r2, #8]
}
 800794e:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8007950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007954:	d006      	beq.n	8007964 <ADC_ConfigureBoostMode+0xc4>
 8007956:	d90a      	bls.n	800796e <ADC_ConfigureBoostMode+0xce>
 8007958:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800795c:	d002      	beq.n	8007964 <ADC_ConfigureBoostMode+0xc4>
 800795e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007962:	d1bb      	bne.n	80078dc <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007964:	0c9b      	lsrs	r3, r3, #18
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800796c:	e7b6      	b.n	80078dc <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 800796e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007972:	d0f7      	beq.n	8007964 <ADC_ConfigureBoostMode+0xc4>
 8007974:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007978:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800797c:	d0f2      	beq.n	8007964 <ADC_ConfigureBoostMode+0xc4>
 800797e:	e7ad      	b.n	80078dc <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8007980:	4b23      	ldr	r3, [pc, #140]	; (8007a10 <ADC_ConfigureBoostMode+0x170>)
 8007982:	429d      	cmp	r5, r3
 8007984:	d805      	bhi.n	8007992 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	6893      	ldr	r3, [r2, #8]
 800798a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800798e:	6093      	str	r3, [r2, #8]
}
 8007990:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8007992:	4b20      	ldr	r3, [pc, #128]	; (8007a14 <ADC_ConfigureBoostMode+0x174>)
 8007994:	429d      	cmp	r5, r3
 8007996:	d91a      	bls.n	80079ce <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
 8007998:	4b1f      	ldr	r3, [pc, #124]	; (8007a18 <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800799a:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 800799c:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800799e:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 80079a0:	d829      	bhi.n	80079f6 <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80079a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079aa:	6093      	str	r3, [r2, #8]
}
 80079ac:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 80079ae:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80079b0:	f7ff f8cc 	bl	8006b4c <HAL_GetREVID>
 80079b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80079b8:	4298      	cmp	r0, r3
 80079ba:	d8e1      	bhi.n	8007980 <ADC_ConfigureBoostMode+0xe0>
 80079bc:	e794      	b.n	80078e8 <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
 80079be:	09c5      	lsrs	r5, r0, #7
        break;
 80079c0:	e78c      	b.n	80078dc <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 80079c2:	0905      	lsrs	r5, r0, #4
        break;
 80079c4:	e78a      	b.n	80078dc <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 80079c6:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <ADC_ConfigureBoostMode+0x170>)
 80079c8:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80079cc:	d2db      	bcs.n	8007986 <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80079ce:	6822      	ldr	r2, [r4, #0]
 80079d0:	6893      	ldr	r3, [r2, #8]
 80079d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079da:	6093      	str	r3, [r2, #8]
}
 80079dc:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80079de:	0c1b      	lsrs	r3, r3, #16
 80079e0:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80079e4:	f7ff f8b2 	bl	8006b4c <HAL_GetREVID>
 80079e8:	f241 0303 	movw	r3, #4099	; 0x1003
 80079ec:	4298      	cmp	r0, r3
 80079ee:	d8c7      	bhi.n	8007980 <ADC_ConfigureBoostMode+0xe0>
 80079f0:	e77a      	b.n	80078e8 <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
 80079f2:	0985      	lsrs	r5, r0, #6
        break;
 80079f4:	e772      	b.n	80078dc <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80079f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80079fa:	6093      	str	r3, [r2, #8]
}
 80079fc:	bd38      	pop	{r3, r4, r5, pc}
 80079fe:	bf00      	nop
 8007a00:	40022000 	.word	0x40022000
 8007a04:	58026300 	.word	0x58026300
 8007a08:	01312d00 	.word	0x01312d00
 8007a0c:	40022300 	.word	0x40022300
 8007a10:	00bebc21 	.word	0x00bebc21
 8007a14:	017d7841 	.word	0x017d7841
 8007a18:	02faf081 	.word	0x02faf081

08007a1c <HAL_ADC_Init>:
{
 8007a1c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8007a1e:	2300      	movs	r3, #0
{
 8007a20:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8007a22:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f000 80d1 	beq.w	8007bcc <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007a2a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	f000 80bb 	beq.w	8007baa <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007a34:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007a36:	6893      	ldr	r3, [r2, #8]
 8007a38:	009d      	lsls	r5, r3, #2
 8007a3a:	d503      	bpl.n	8007a44 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007a3c:	6891      	ldr	r1, [r2, #8]
 8007a3e:	4b72      	ldr	r3, [pc, #456]	; (8007c08 <HAL_ADC_Init+0x1ec>)
 8007a40:	400b      	ands	r3, r1
 8007a42:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a44:	6893      	ldr	r3, [r2, #8]
 8007a46:	00d8      	lsls	r0, r3, #3
 8007a48:	d416      	bmi.n	8007a78 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a4a:	4b70      	ldr	r3, [pc, #448]	; (8007c0c <HAL_ADC_Init+0x1f0>)
 8007a4c:	4970      	ldr	r1, [pc, #448]	; (8007c10 <HAL_ADC_Init+0x1f4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8007a50:	6890      	ldr	r0, [r2, #8]
 8007a52:	099b      	lsrs	r3, r3, #6
 8007a54:	fba1 1303 	umull	r1, r3, r1, r3
 8007a58:	496e      	ldr	r1, [pc, #440]	; (8007c14 <HAL_ADC_Init+0x1f8>)
 8007a5a:	099b      	lsrs	r3, r3, #6
 8007a5c:	4001      	ands	r1, r0
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007a64:	6091      	str	r1, [r2, #8]
 8007a66:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007a68:	9b01      	ldr	r3, [sp, #4]
 8007a6a:	b12b      	cbz	r3, 8007a78 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8007a6c:	9b01      	ldr	r3, [sp, #4]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007a72:	9b01      	ldr	r3, [sp, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1f9      	bne.n	8007a6c <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a78:	6893      	ldr	r3, [r2, #8]
 8007a7a:	00d9      	lsls	r1, r3, #3
 8007a7c:	d424      	bmi.n	8007ac8 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007a80:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a82:	f043 0310 	orr.w	r3, r3, #16
 8007a86:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a8a:	432b      	orrs	r3, r5
 8007a8c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007a8e:	6893      	ldr	r3, [r2, #8]
 8007a90:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007a96:	d11d      	bne.n	8007ad4 <HAL_ADC_Init+0xb8>
 8007a98:	06db      	lsls	r3, r3, #27
 8007a9a:	d41b      	bmi.n	8007ad4 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8007a9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007a9e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007aa2:	f043 0302 	orr.w	r3, r3, #2
 8007aa6:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007aa8:	6893      	ldr	r3, [r2, #8]
 8007aaa:	07de      	lsls	r6, r3, #31
 8007aac:	d428      	bmi.n	8007b00 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007aae:	4b5a      	ldr	r3, [pc, #360]	; (8007c18 <HAL_ADC_Init+0x1fc>)
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d017      	beq.n	8007ae4 <HAL_ADC_Init+0xc8>
 8007ab4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d013      	beq.n	8007ae4 <HAL_ADC_Init+0xc8>
 8007abc:	4b57      	ldr	r3, [pc, #348]	; (8007c1c <HAL_ADC_Init+0x200>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	07d9      	lsls	r1, r3, #31
 8007ac2:	d41d      	bmi.n	8007b00 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007ac4:	4a56      	ldr	r2, [pc, #344]	; (8007c20 <HAL_ADC_Init+0x204>)
 8007ac6:	e015      	b.n	8007af4 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ac8:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007aca:	2500      	movs	r5, #0
 8007acc:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ad0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007ad2:	d0e1      	beq.n	8007a98 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ad4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007ad6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ad8:	f043 0310 	orr.w	r3, r3, #16
}
 8007adc:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ade:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007ae0:	b002      	add	sp, #8
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007ae4:	4a4c      	ldr	r2, [pc, #304]	; (8007c18 <HAL_ADC_Init+0x1fc>)
 8007ae6:	4b4f      	ldr	r3, [pc, #316]	; (8007c24 <HAL_ADC_Init+0x208>)
 8007ae8:	6892      	ldr	r2, [r2, #8]
 8007aea:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	07d8      	lsls	r0, r3, #31
 8007af0:	d406      	bmi.n	8007b00 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007af2:	4a4d      	ldr	r2, [pc, #308]	; (8007c28 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007af4:	6893      	ldr	r3, [r2, #8]
 8007af6:	6861      	ldr	r1, [r4, #4]
 8007af8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007b00:	f7ff f824 	bl	8006b4c <HAL_GetREVID>
 8007b04:	f241 0303 	movw	r3, #4099	; 0x1003
 8007b08:	68a1      	ldr	r1, [r4, #8]
 8007b0a:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b0c:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007b0e:	d852      	bhi.n	8007bb6 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b10:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b14:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b16:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007b18:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8007b1c:	4302      	orrs	r2, r0
 8007b1e:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d103      	bne.n	8007b2c <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007b24:	6a23      	ldr	r3, [r4, #32]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b2e:	b123      	cbz	r3, 8007b3a <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b30:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007b34:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007b36:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007b38:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	493b      	ldr	r1, [pc, #236]	; (8007c2c <HAL_ADC_Init+0x210>)
 8007b3e:	68d8      	ldr	r0, [r3, #12]
 8007b40:	4001      	ands	r1, r0
 8007b42:	4311      	orrs	r1, r2
 8007b44:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007b4c:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b4e:	d11c      	bne.n	8007b8a <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007b50:	0712      	lsls	r2, r2, #28
 8007b52:	d41a      	bmi.n	8007b8a <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007b54:	68d8      	ldr	r0, [r3, #12]
 8007b56:	4a36      	ldr	r2, [pc, #216]	; (8007c30 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007b58:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007b5a:	4002      	ands	r2, r0
 8007b5c:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8007b60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007b62:	430a      	orrs	r2, r1
 8007b64:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8007b66:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8007b6a:	2a01      	cmp	r2, #1
 8007b6c:	d03a      	beq.n	8007be4 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	f022 0201 	bic.w	r2, r2, #1
 8007b74:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007b76:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8007b78:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007b7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b7c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007b80:	430a      	orrs	r2, r1
 8007b82:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8007b84:	f7ff fe8c 	bl	80078a0 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007b88:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007b8a:	68e2      	ldr	r2, [r4, #12]
 8007b8c:	2a01      	cmp	r2, #1
 8007b8e:	d021      	beq.n	8007bd4 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b92:	f022 020f 	bic.w	r2, r2, #15
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007b98:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8007b9a:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007ba6:	b002      	add	sp, #8
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8007baa:	f7fe fb83 	bl	80062b4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007bae:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8007bb0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8007bb4:	e73e      	b.n	8007a34 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007bb6:	2910      	cmp	r1, #16
 8007bb8:	d1aa      	bne.n	8007b10 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007bba:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007bbc:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007bbe:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8007bc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	f042 021c 	orr.w	r2, r2, #28
 8007bca:	e7a9      	b.n	8007b20 <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 8007bcc:	2501      	movs	r5, #1
}
 8007bce:	4628      	mov	r0, r5
 8007bd0:	b002      	add	sp, #8
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007bd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007bd6:	69a2      	ldr	r2, [r4, #24]
 8007bd8:	f021 010f 	bic.w	r1, r1, #15
 8007bdc:	3a01      	subs	r2, #1
 8007bde:	430a      	orrs	r2, r1
 8007be0:	631a      	str	r2, [r3, #48]	; 0x30
 8007be2:	e7d9      	b.n	8007b98 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007be4:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8007be8:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8007bea:	3901      	subs	r1, #1
 8007bec:	6918      	ldr	r0, [r3, #16]
 8007bee:	4332      	orrs	r2, r6
 8007bf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007bf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	490e      	ldr	r1, [pc, #56]	; (8007c34 <HAL_ADC_Init+0x218>)
 8007bfa:	4001      	ands	r1, r0
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	611a      	str	r2, [r3, #16]
 8007c04:	e7b7      	b.n	8007b76 <HAL_ADC_Init+0x15a>
 8007c06:	bf00      	nop
 8007c08:	5fffffc0 	.word	0x5fffffc0
 8007c0c:	24000310 	.word	0x24000310
 8007c10:	053e2d63 	.word	0x053e2d63
 8007c14:	6fffffc0 	.word	0x6fffffc0
 8007c18:	40022000 	.word	0x40022000
 8007c1c:	58026000 	.word	0x58026000
 8007c20:	58026300 	.word	0x58026300
 8007c24:	40022100 	.word	0x40022100
 8007c28:	40022300 	.word	0x40022300
 8007c2c:	fff0c003 	.word	0xfff0c003
 8007c30:	ffffbffc 	.word	0xffffbffc
 8007c34:	fc00f81e 	.word	0xfc00f81e

08007c38 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007c38:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007c3a:	2300      	movs	r3, #0
{
 8007c3c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8007c3e:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c40:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d040      	beq.n	8007cca <HAL_ADCEx_Calibration_Start+0x92>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	460e      	mov	r6, r1
 8007c4e:	4615      	mov	r5, r2
 8007c50:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007c54:	f7ff fdea 	bl	800782c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007c58:	b9e8      	cbnz	r0, 8007c96 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c5a:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8007c5c:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 8007c60:	4b1b      	ldr	r3, [pc, #108]	; (8007cd0 <HAL_ADCEx_Calibration_Start+0x98>)
 8007c62:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8007c66:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8007c68:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007c6a:	4f1a      	ldr	r7, [pc, #104]	; (8007cd4 <HAL_ADCEx_Calibration_Start+0x9c>)
    ADC_STATE_CLR_SET(hadc->State,
 8007c6c:	f043 0302 	orr.w	r3, r3, #2
 8007c70:	6563      	str	r3, [r4, #84]	; 0x54
 8007c72:	4b19      	ldr	r3, [pc, #100]	; (8007cd8 <HAL_ADCEx_Calibration_Start+0xa0>)
 8007c74:	68ae      	ldr	r6, [r5, #8]
 8007c76:	4033      	ands	r3, r6
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	4319      	orrs	r1, r3
 8007c7c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007c80:	60a9      	str	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007c82:	68ab      	ldr	r3, [r5, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	db0f      	blt.n	8007ca8 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007c8a:	f023 0303 	bic.w	r3, r3, #3
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	6563      	str	r3, [r4, #84]	; 0x54
 8007c94:	e003      	b.n	8007c9e <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007c98:	f043 0310 	orr.w	r3, r3, #16
 8007c9c:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8007ca4:	b003      	add	sp, #12
 8007ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	3301      	adds	r3, #1
 8007cac:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007cae:	9b01      	ldr	r3, [sp, #4]
 8007cb0:	42bb      	cmp	r3, r7
 8007cb2:	d3e6      	bcc.n	8007c82 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8007cb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8007cb6:	2200      	movs	r2, #0
        return HAL_ERROR;
 8007cb8:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8007cba:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8007cbe:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8007cc2:	f043 0310 	orr.w	r3, r3, #16
 8007cc6:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8007cc8:	e7ec      	b.n	8007ca4 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8007cca:	2002      	movs	r0, #2
}
 8007ccc:	b003      	add	sp, #12
 8007cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd0:	ffffeefd 	.word	0xffffeefd
 8007cd4:	25c3f800 	.word	0x25c3f800
 8007cd8:	3ffeffc0 	.word	0x3ffeffc0

08007cdc <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007ce0:	f8d0 8000 	ldr.w	r8, [r0]
{
 8007ce4:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ce6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8007cea:	f015 0504 	ands.w	r5, r5, #4
 8007cee:	d117      	bne.n	8007d20 <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007cf0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d012      	beq.n	8007d20 <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007cfa:	4b2d      	ldr	r3, [pc, #180]	; (8007db0 <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 8007cfc:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007d00:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007d02:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007d04:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 8007d06:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007d0a:	d00d      	beq.n	8007d28 <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d0c:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8007d0e:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 8007d10:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d14:	f043 0320 	orr.w	r3, r3, #32
 8007d18:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8007d1a:	b01a      	add	sp, #104	; 0x68
 8007d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007d20:	2002      	movs	r0, #2
}
 8007d22:	b01a      	add	sp, #104	; 0x68
 8007d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d28:	4d22      	ldr	r5, [pc, #136]	; (8007db4 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 8007d2a:	460e      	mov	r6, r1
 8007d2c:	4617      	mov	r7, r2
 8007d2e:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8007d30:	f7ff fd26 	bl	8007780 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007d34:	b128      	cbz	r0, 8007d42 <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 8007d36:	2300      	movs	r3, #0
 8007d38:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007d3c:	b01a      	add	sp, #104	; 0x68
 8007d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8007d42:	a801      	add	r0, sp, #4
 8007d44:	f7ff fd1c 	bl	8007780 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d1f4      	bne.n	8007d36 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8007d4c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007d4e:	4a1a      	ldr	r2, [pc, #104]	; (8007db8 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007d50:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 8007d52:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007d54:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 8007d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007d5c:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 8007d5e:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8007d60:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007d62:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007d64:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007d66:	4b16      	ldr	r3, [pc, #88]	; (8007dc0 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8007d68:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8007d6a:	4b16      	ldr	r3, [pc, #88]	; (8007dc4 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8007d6c:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007d6e:	d01d      	beq.n	8007dac <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8007d70:	45ac      	cmp	ip, r5
 8007d72:	d01b      	beq.n	8007dac <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8007d74:	4914      	ldr	r1, [pc, #80]	; (8007dc8 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007d76:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007d78:	463b      	mov	r3, r7
 8007d7a:	4632      	mov	r2, r6
 8007d7c:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007d7e:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 8007d82:	2500      	movs	r5, #0
 8007d84:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007d88:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007d8c:	f045 0510 	orr.w	r5, r5, #16
 8007d90:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007d94:	f000 ff22 	bl	8008bdc <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007d98:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8007d9a:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8007d9c:	6891      	ldr	r1, [r2, #8]
 8007d9e:	400b      	ands	r3, r1
 8007da0:	f043 0304 	orr.w	r3, r3, #4
 8007da4:	6093      	str	r3, [r2, #8]
}
 8007da6:	b01a      	add	sp, #104	; 0x68
 8007da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007dac:	4908      	ldr	r1, [pc, #32]	; (8007dd0 <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 8007dae:	e7e2      	b.n	8007d76 <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 8007db0:	40022000 	.word	0x40022000
 8007db4:	40022100 	.word	0x40022100
 8007db8:	fffff0fe 	.word	0xfffff0fe
 8007dbc:	08006e39 	.word	0x08006e39
 8007dc0:	08006bb1 	.word	0x08006bb1
 8007dc4:	08006ea5 	.word	0x08006ea5
 8007dc8:	58026300 	.word	0x58026300
 8007dcc:	7fffffc0 	.word	0x7fffffc0
 8007dd0:	40022300 	.word	0x40022300

08007dd4 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8007dd4:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007dd6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8007dda:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d05a      	beq.n	8007e96 <HAL_ADCEx_MultiModeStop_DMA+0xc2>
 8007de0:	2601      	movs	r6, #1


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007de2:	2103      	movs	r1, #3
 8007de4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007de6:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007dea:	f7ff fc4d 	bl	8007688 <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007dee:	4605      	mov	r5, r0
 8007df0:	bb40      	cbnz	r0, 8007e44 <HAL_ADCEx_MultiModeStop_DMA+0x70>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007df2:	4b3d      	ldr	r3, [pc, #244]	; (8007ee8 <HAL_ADCEx_MultiModeStop_DMA+0x114>)
 8007df4:	6822      	ldr	r2, [r4, #0]
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007df6:	9016      	str	r0, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007df8:	429a      	cmp	r2, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007dfa:	9017      	str	r0, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007dfc:	d028      	beq.n	8007e50 <HAL_ADCEx_MultiModeStop_DMA+0x7c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007dfe:	6d63      	ldr	r3, [r4, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8007e00:	4635      	mov	r5, r6
      __HAL_UNLOCK(hadc);
 8007e02:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e06:	f043 0320 	orr.w	r3, r3, #32
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8007e0a:	4628      	mov	r0, r5
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e0c:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007e0e:	b01a      	add	sp, #104	; 0x68
 8007e10:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007e12:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007e14:	f001 f87a 	bl	8008f0c <HAL_DMA_Abort>
    if (tmp_hal_status == HAL_ERROR)
 8007e18:	2801      	cmp	r0, #1
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007e1a:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_ERROR)
 8007e1c:	d053      	beq.n	8007ec6 <HAL_ADCEx_MultiModeStop_DMA+0xf2>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	6853      	ldr	r3, [r2, #4]
 8007e22:	f023 0310 	bic.w	r3, r3, #16
 8007e26:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d155      	bne.n	8007ed8 <HAL_ADCEx_MultiModeStop_DMA+0x104>
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8007e2c:	a801      	add	r0, sp, #4
 8007e2e:	f7ff fcfd 	bl	800782c <ADC_Disable>
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8007e32:	4620      	mov	r0, r4
 8007e34:	f7ff fcfa 	bl	800782c <ADC_Disable>
    ADC_STATE_CLR_SET(hadc->State,
 8007e38:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007e3a:	4b2c      	ldr	r3, [pc, #176]	; (8007eec <HAL_ADCEx_MultiModeStop_DMA+0x118>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	f043 0301 	orr.w	r3, r3, #1
 8007e42:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8007e48:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007e4c:	b01a      	add	sp, #104	; 0x68
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	4b27      	ldr	r3, [pc, #156]	; (8007ef0 <HAL_ADCEx_MultiModeStop_DMA+0x11c>)
 8007e52:	9301      	str	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8007e54:	f7fe fe62 	bl	8006b1c <HAL_GetTick>
    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007e58:	9b01      	ldr	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8007e5a:	4605      	mov	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	075b      	lsls	r3, r3, #29
 8007e60:	d41d      	bmi.n	8007e9e <HAL_ADCEx_MultiModeStop_DMA+0xca>
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	075a      	lsls	r2, r3, #29
 8007e68:	d5d3      	bpl.n	8007e12 <HAL_ADCEx_MultiModeStop_DMA+0x3e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007e6a:	f7fe fe57 	bl	8006b1c <HAL_GetTick>
 8007e6e:	1b43      	subs	r3, r0, r5
 8007e70:	2b05      	cmp	r3, #5
 8007e72:	d91b      	bls.n	8007eac <HAL_ADCEx_MultiModeStop_DMA+0xd8>
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	0750      	lsls	r0, r2, #29
 8007e7a:	d51f      	bpl.n	8007ebc <HAL_ADCEx_MultiModeStop_DMA+0xe8>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e80:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8007e82:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8007e84:	2200      	movs	r2, #0
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e86:	f043 0310 	orr.w	r3, r3, #16
}
 8007e8a:	4628      	mov	r0, r5
          __HAL_UNLOCK(hadc);
 8007e8c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e90:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007e92:	b01a      	add	sp, #104	; 0x68
 8007e94:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8007e96:	2502      	movs	r5, #2
}
 8007e98:	4628      	mov	r0, r5
 8007e9a:	b01a      	add	sp, #104	; 0x68
 8007e9c:	bd70      	pop	{r4, r5, r6, pc}
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007ea2:	f7fe fe3b 	bl	8006b1c <HAL_GetTick>
 8007ea6:	1b43      	subs	r3, r0, r5
 8007ea8:	2b05      	cmp	r3, #5
 8007eaa:	d8e3      	bhi.n	8007e74 <HAL_ADCEx_MultiModeStop_DMA+0xa0>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007eac:	6822      	ldr	r2, [r4, #0]
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007eae:	9b01      	ldr	r3, [sp, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f013 0f04 	tst.w	r3, #4
 8007eb6:	6893      	ldr	r3, [r2, #8]
 8007eb8:	d1d7      	bne.n	8007e6a <HAL_ADCEx_MultiModeStop_DMA+0x96>
 8007eba:	e7d4      	b.n	8007e66 <HAL_ADCEx_MultiModeStop_DMA+0x92>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007ebc:	6822      	ldr	r2, [r4, #0]
 8007ebe:	6891      	ldr	r1, [r2, #8]
 8007ec0:	0749      	lsls	r1, r1, #29
 8007ec2:	d5f5      	bpl.n	8007eb0 <HAL_ADCEx_MultiModeStop_DMA+0xdc>
 8007ec4:	e7dc      	b.n	8007e80 <HAL_ADCEx_MultiModeStop_DMA+0xac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007ec6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007ec8:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ece:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007ed0:	6853      	ldr	r3, [r2, #4]
 8007ed2:	f023 0310 	bic.w	r3, r3, #16
 8007ed6:	6053      	str	r3, [r2, #4]
      (void) ADC_Disable(hadc);
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f7ff fca7 	bl	800782c <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8007ede:	a801      	add	r0, sp, #4
 8007ee0:	f7ff fca4 	bl	800782c <ADC_Disable>
 8007ee4:	e7a8      	b.n	8007e38 <HAL_ADCEx_MultiModeStop_DMA+0x64>
 8007ee6:	bf00      	nop
 8007ee8:	40022000 	.word	0x40022000
 8007eec:	ffffeefe 	.word	0xffffeefe
 8007ef0:	40022100 	.word	0x40022100

08007ef4 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop

08007ef8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop

08007efc <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop

08007f04 <HAL_ADCEx_EndOfSamplingCallback>:
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop

08007f08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007f08:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f0a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8007f0e:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007f10:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8007f12:	2a01      	cmp	r2, #1
 8007f14:	d04d      	beq.n	8007fb2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8007f16:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007f18:	4c2b      	ldr	r4, [pc, #172]	; (8007fc8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007f1a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8007f1c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007f1e:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007f20:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007f22:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8007f24:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007f28:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007f2a:	d008      	beq.n	8007f3e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f2c:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f32:	f041 0120 	orr.w	r1, r1, #32
 8007f36:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8007f38:	b01a      	add	sp, #104	; 0x68
 8007f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8007f3c:	4770      	bx	lr
 8007f3e:	4c23      	ldr	r4, [pc, #140]	; (8007fcc <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8007f40:	68a2      	ldr	r2, [r4, #8]
 8007f42:	0752      	lsls	r2, r2, #29
 8007f44:	d50b      	bpl.n	8007f5e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8007f46:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007f4a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f4c:	f042 0220 	orr.w	r2, r2, #32
 8007f50:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007f58:	b01a      	add	sp, #104	; 0x68
 8007f5a:	bcf0      	pop	{r4, r5, r6, r7}
 8007f5c:	4770      	bx	lr
 8007f5e:	68a8      	ldr	r0, [r5, #8]
 8007f60:	f010 0004 	ands.w	r0, r0, #4
 8007f64:	d1f0      	bne.n	8007f48 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007f66:	b1c6      	cbz	r6, 8007f9a <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007f68:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007fd4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8007f6c:	684f      	ldr	r7, [r1, #4]
 8007f6e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8007f72:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f76:	433a      	orrs	r2, r7
 8007f78:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f7c:	68ad      	ldr	r5, [r5, #8]
 8007f7e:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007f80:	432a      	orrs	r2, r5
 8007f82:	07d4      	lsls	r4, r2, #31
 8007f84:	d413      	bmi.n	8007fae <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8007f86:	688a      	ldr	r2, [r1, #8]
 8007f88:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8007f8c:	4910      	ldr	r1, [pc, #64]	; (8007fd0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8007f8e:	4332      	orrs	r2, r6
 8007f90:	4021      	ands	r1, r4
 8007f92:	430a      	orrs	r2, r1
 8007f94:	f8cc 2008 	str.w	r2, [ip, #8]
 8007f98:	e7db      	b.n	8007f52 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007f9a:	490e      	ldr	r1, [pc, #56]	; (8007fd4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8007f9c:	688a      	ldr	r2, [r1, #8]
 8007f9e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007fa2:	608a      	str	r2, [r1, #8]
 8007fa4:	68a8      	ldr	r0, [r5, #8]
 8007fa6:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007fa8:	4302      	orrs	r2, r0
 8007faa:	07d0      	lsls	r0, r2, #31
 8007fac:	d505      	bpl.n	8007fba <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007fae:	2000      	movs	r0, #0
 8007fb0:	e7cf      	b.n	8007f52 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8007fb2:	2002      	movs	r0, #2
}
 8007fb4:	b01a      	add	sp, #104	; 0x68
 8007fb6:	bcf0      	pop	{r4, r5, r6, r7}
 8007fb8:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007fba:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007fbc:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007fbe:	4a04      	ldr	r2, [pc, #16]	; (8007fd0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8007fc0:	4022      	ands	r2, r4
 8007fc2:	608a      	str	r2, [r1, #8]
 8007fc4:	e7c5      	b.n	8007f52 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8007fc6:	bf00      	nop
 8007fc8:	40022000 	.word	0x40022000
 8007fcc:	40022100 	.word	0x40022100
 8007fd0:	fffff0e0 	.word	0xfffff0e0
 8007fd4:	40022300 	.word	0x40022300

08007fd8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fd8:	4906      	ldr	r1, [pc, #24]	; (8007ff4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fda:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fde:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fe2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fe4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fe8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fec:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8007fee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8007ff0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007ff2:	4770      	bx	lr
 8007ff4:	e000ed00 	.word	0xe000ed00
 8007ff8:	05fa0000 	.word	0x05fa0000

08007ffc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ffc:	4b1b      	ldr	r3, [pc, #108]	; (800806c <HAL_NVIC_SetPriority+0x70>)
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008004:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008006:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800800a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800800e:	f1be 0f04 	cmp.w	lr, #4
 8008012:	bf28      	it	cs
 8008014:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008018:	f1bc 0f06 	cmp.w	ip, #6
 800801c:	d91a      	bls.n	8008054 <HAL_NVIC_SetPriority+0x58>
 800801e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008020:	f04f 3cff 	mov.w	ip, #4294967295
 8008024:	fa0c fc03 	lsl.w	ip, ip, r3
 8008028:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800802c:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008030:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008032:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008036:	ea21 010c 	bic.w	r1, r1, ip
 800803a:	fa01 f103 	lsl.w	r1, r1, r3
 800803e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8008042:	db0a      	blt.n	800805a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008044:	0109      	lsls	r1, r1, #4
 8008046:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <HAL_NVIC_SetPriority+0x74>)
 8008048:	b2c9      	uxtb	r1, r1
 800804a:	4403      	add	r3, r0
 800804c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008050:	f85d fb04 	ldr.w	pc, [sp], #4
 8008054:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008056:	4613      	mov	r3, r2
 8008058:	e7e8      	b.n	800802c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800805a:	f000 000f 	and.w	r0, r0, #15
 800805e:	0109      	lsls	r1, r1, #4
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <HAL_NVIC_SetPriority+0x78>)
 8008062:	b2c9      	uxtb	r1, r1
 8008064:	4403      	add	r3, r0
 8008066:	7619      	strb	r1, [r3, #24]
 8008068:	f85d fb04 	ldr.w	pc, [sp], #4
 800806c:	e000ed00 	.word	0xe000ed00
 8008070:	e000e100 	.word	0xe000e100
 8008074:	e000ecfc 	.word	0xe000ecfc

08008078 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008078:	2800      	cmp	r0, #0
 800807a:	db07      	blt.n	800808c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800807c:	2301      	movs	r3, #1
 800807e:	f000 011f 	and.w	r1, r0, #31
 8008082:	4a03      	ldr	r2, [pc, #12]	; (8008090 <HAL_NVIC_EnableIRQ+0x18>)
 8008084:	0940      	lsrs	r0, r0, #5
 8008086:	408b      	lsls	r3, r1
 8008088:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	e000e100 	.word	0xe000e100

08008094 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008094:	1e43      	subs	r3, r0, #1
 8008096:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800809a:	d20c      	bcs.n	80080b6 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800809c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080a0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080a2:	4906      	ldr	r1, [pc, #24]	; (80080bc <HAL_SYSTICK_Config+0x28>)
 80080a4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080a8:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080aa:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ac:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080b0:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080b2:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80080b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	e000ed00 	.word	0xe000ed00

080080c0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80080c0:	b188      	cbz	r0, 80080e6 <HAL_DAC_Init+0x26>
{
 80080c2:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80080c4:	7903      	ldrb	r3, [r0, #4]
 80080c6:	4604      	mov	r4, r0
 80080c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80080cc:	b13b      	cbz	r3, 80080de <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80080ce:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80080d0:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80080d2:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80080d4:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80080d6:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80080d8:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80080da:	7122      	strb	r2, [r4, #4]
}
 80080dc:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80080de:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80080e0:	f7fe f990 	bl	8006404 <HAL_DAC_MspInit>
 80080e4:	e7f3      	b.n	80080ce <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80080e6:	2001      	movs	r0, #1
}
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop

080080ec <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80080ec:	7942      	ldrb	r2, [r0, #5]
 80080ee:	2a01      	cmp	r2, #1
 80080f0:	d02e      	beq.n	8008150 <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80080f2:	4603      	mov	r3, r0
 80080f4:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80080f8:	6800      	ldr	r0, [r0, #0]
 80080fa:	2201      	movs	r2, #1
{
 80080fc:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 80080fe:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8008102:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8008106:	6804      	ldr	r4, [r0, #0]
 8008108:	fa02 f20e 	lsl.w	r2, r2, lr
 800810c:	4322      	orrs	r2, r4
 800810e:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008110:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 8008112:	b969      	cbnz	r1, 8008130 <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008114:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8008118:	4562      	cmp	r2, ip
 800811a:	d103      	bne.n	8008124 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800811c:	6842      	ldr	r2, [r0, #4]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008124:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008126:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8008128:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 800812a:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 800812c:	715a      	strb	r2, [r3, #5]
}
 800812e:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008130:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008134:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8008138:	4562      	cmp	r2, ip
 800813a:	d1f3      	bne.n	8008124 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800813c:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 800813e:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008140:	f042 0202 	orr.w	r2, r2, #2
 8008144:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8008146:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008148:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 800814a:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 800814c:	715a      	strb	r2, [r3, #5]
}
 800814e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8008150:	2002      	movs	r0, #2
}
 8008152:	4770      	bx	lr

08008154 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008158:	7940      	ldrb	r0, [r0, #5]
{
 800815a:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 800815c:	2801      	cmp	r0, #1
 800815e:	d053      	beq.n	8008208 <HAL_DAC_Start_DMA+0xb4>
 8008160:	460d      	mov	r5, r1
 8008162:	4611      	mov	r1, r2
 8008164:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008166:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8008168:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800816a:	2202      	movs	r2, #2
 800816c:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 800816e:	bb3d      	cbnz	r5, 80081c0 <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008170:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008172:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008174:	4a37      	ldr	r2, [pc, #220]	; (8008254 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008176:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800825c <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800817a:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800817c:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800817e:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008182:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008186:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8008260 <HAL_DAC_Start_DMA+0x10c>
 800818a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800818e:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8008190:	d042      	beq.n	8008218 <HAL_DAC_Start_DMA+0xc4>
 8008192:	2f08      	cmp	r7, #8
 8008194:	d03d      	beq.n	8008212 <HAL_DAC_Start_DMA+0xbe>
 8008196:	2f00      	cmp	r7, #0
 8008198:	d038      	beq.n	800820c <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800819a:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800819c:	6837      	ldr	r7, [r6, #0]
 800819e:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 80081a2:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80081a4:	f000 fd1a 	bl	8008bdc <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80081a8:	2300      	movs	r3, #0
 80081aa:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80081ac:	bb38      	cbnz	r0, 80081fe <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	f005 0510 	and.w	r5, r5, #16
 80081b4:	2301      	movs	r3, #1
 80081b6:	6811      	ldr	r1, [r2, #0]
 80081b8:	40ab      	lsls	r3, r5
 80081ba:	430b      	orrs	r3, r1
 80081bc:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80081be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80081c0:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 80081c2:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80081c4:	4a24      	ldr	r2, [pc, #144]	; (8008258 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80081c6:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8008264 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80081ca:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80081cc:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80081ce:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80081d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80081d6:	f8df c090 	ldr.w	ip, [pc, #144]	; 8008268 <HAL_DAC_Start_DMA+0x114>
 80081da:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80081de:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 80081e0:	d02f      	beq.n	8008242 <HAL_DAC_Start_DMA+0xee>
 80081e2:	2f08      	cmp	r7, #8
 80081e4:	d024      	beq.n	8008230 <HAL_DAC_Start_DMA+0xdc>
 80081e6:	b1d7      	cbz	r7, 800821e <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80081e8:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80081ea:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80081ec:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 80081f0:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80081f2:	f000 fcf3 	bl	8008bdc <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 80081f6:	2300      	movs	r3, #0
 80081f8:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d0d7      	beq.n	80081ae <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80081fe:	6923      	ldr	r3, [r4, #16]
 8008200:	f043 0304 	orr.w	r3, r3, #4
 8008204:	6123      	str	r3, [r4, #16]
}
 8008206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8008208:	2002      	movs	r0, #2
}
 800820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800820c:	f106 0208 	add.w	r2, r6, #8
        break;
 8008210:	e7c4      	b.n	800819c <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008212:	f106 0210 	add.w	r2, r6, #16
        break;
 8008216:	e7c1      	b.n	800819c <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008218:	f106 020c 	add.w	r2, r6, #12
        break;
 800821c:	e7be      	b.n	800819c <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800821e:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008220:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008224:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008228:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800822a:	f000 fcd7 	bl	8008bdc <HAL_DMA_Start_IT>
 800822e:	e7e2      	b.n	80081f6 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008230:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008232:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008236:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800823a:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800823c:	f000 fcce 	bl	8008bdc <HAL_DMA_Start_IT>
 8008240:	e7d9      	b.n	80081f6 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008242:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008244:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008248:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800824c:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800824e:	f000 fcc5 	bl	8008bdc <HAL_DMA_Start_IT>
 8008252:	e7d0      	b.n	80081f6 <HAL_DAC_Start_DMA+0xa2>
 8008254:	0800829d 	.word	0x0800829d
 8008258:	0800849d 	.word	0x0800849d
 800825c:	080082ad 	.word	0x080082ad
 8008260:	080082bd 	.word	0x080082bd
 8008264:	080084b1 	.word	0x080084b1
 8008268:	080084c1 	.word	0x080084c1

0800826c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800826c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800826e:	6800      	ldr	r0, [r0, #0]
{
 8008270:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8008272:	2400      	movs	r4, #0
 8008274:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8008276:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8008278:	b951      	cbnz	r1, 8008290 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800827a:	9901      	ldr	r1, [sp, #4]
 800827c:	3108      	adds	r1, #8
 800827e:	440a      	add	r2, r1
 8008280:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8008282:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8008284:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8008286:	6013      	str	r3, [r2, #0]
}
 8008288:	b003      	add	sp, #12
 800828a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800828e:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008290:	9901      	ldr	r1, [sp, #4]
 8008292:	3114      	adds	r1, #20
 8008294:	440a      	add	r2, r1
 8008296:	9201      	str	r2, [sp, #4]
 8008298:	e7f3      	b.n	8008282 <HAL_DAC_SetValue+0x16>
 800829a:	bf00      	nop

0800829c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800829c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80082a0:	4620      	mov	r0, r4
 80082a2:	f7fc fb55 	bl	8004950 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80082a6:	2301      	movs	r3, #1
 80082a8:	7123      	strb	r3, [r4, #4]
}
 80082aa:	bd10      	pop	{r4, pc}

080082ac <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80082ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80082ae:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80082b0:	f7fc fb56 	bl	8004960 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80082b4:	bd08      	pop	{r3, pc}
 80082b6:	bf00      	nop

080082b8 <HAL_DAC_ErrorCallbackCh1>:
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop

080082bc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80082bc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082be:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80082c0:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80082c2:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80082c4:	f043 0304 	orr.w	r3, r3, #4
 80082c8:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80082ca:	f7ff fff5 	bl	80082b8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80082ce:	2301      	movs	r3, #1
 80082d0:	7123      	strb	r3, [r4, #4]
}
 80082d2:	bd10      	pop	{r4, pc}

080082d4 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop

080082d8 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80082d8:	6803      	ldr	r3, [r0, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	0491      	lsls	r1, r2, #18
{
 80082de:	b510      	push	{r4, lr}
 80082e0:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80082e2:	d502      	bpl.n	80082ea <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80082e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082e6:	0492      	lsls	r2, r2, #18
 80082e8:	d418      	bmi.n	800831c <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	0091      	lsls	r1, r2, #2
 80082ee:	d502      	bpl.n	80082f6 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80082f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f2:	0092      	lsls	r2, r2, #2
 80082f4:	d400      	bmi.n	80082f8 <HAL_DAC_IRQHandler+0x20>
}
 80082f6:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80082f8:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80082fa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80082fe:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8008300:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008302:	6922      	ldr	r2, [r4, #16]
 8008304:	f042 0202 	orr.w	r2, r2, #2
 8008308:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800830a:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8008312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008316:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008318:	f000 b8de 	b.w	80084d8 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 800831c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800831e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008322:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008324:	6902      	ldr	r2, [r0, #16]
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800832c:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008334:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008336:	f7ff ffcd 	bl	80082d4 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	e7d5      	b.n	80082ea <HAL_DAC_IRQHandler+0x12>
 800833e:	bf00      	nop

08008340 <HAL_DAC_ConfigChannel>:
{
 8008340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8008344:	7943      	ldrb	r3, [r0, #5]
{
 8008346:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8008348:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 800834a:	2b01      	cmp	r3, #1
 800834c:	f000 8097 	beq.w	800847e <HAL_DAC_ConfigChannel+0x13e>
 8008350:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008352:	2904      	cmp	r1, #4
 8008354:	4605      	mov	r5, r0
 8008356:	4614      	mov	r4, r2
  __HAL_LOCK(hdac);
 8008358:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800835a:	f04f 0302 	mov.w	r3, #2
 800835e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008360:	d044      	beq.n	80083ec <HAL_DAC_ConfigChannel+0xac>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008362:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8008366:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008368:	6933      	ldr	r3, [r6, #16]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d108      	bne.n	8008380 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800836e:	231f      	movs	r3, #31
    tmpreg1 = hdac->Instance->CCR;
 8008370:	6b84      	ldr	r4, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008372:	4093      	lsls	r3, r2
 8008374:	ea24 0403 	bic.w	r4, r4, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008378:	6973      	ldr	r3, [r6, #20]
 800837a:	4093      	lsls	r3, r2
 800837c:	4323      	orrs	r3, r4
    hdac->Instance->CCR = tmpreg1;
 800837e:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008380:	2307      	movs	r3, #7
  tmpreg1 = hdac->Instance->MCR;
 8008382:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008384:	4093      	lsls	r3, r2
 8008386:	ea24 0403 	bic.w	r4, r4, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800838a:	e9d6 7302 	ldrd	r7, r3, [r6, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800838e:	2b01      	cmp	r3, #1
 8008390:	d028      	beq.n	80083e4 <HAL_DAC_ConfigChannel+0xa4>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008392:	2b02      	cmp	r3, #2
 8008394:	d028      	beq.n	80083e8 <HAL_DAC_ConfigChannel+0xa8>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008396:	fab7 f387 	clz	r3, r7
 800839a:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800839c:	433b      	orrs	r3, r7
 800839e:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083a0:	6871      	ldr	r1, [r6, #4]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083a2:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083a4:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083a6:	4323      	orrs	r3, r4
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80083a8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 80083ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80083ae:	4094      	lsls	r4, r2
 80083b0:	6803      	ldr	r3, [r0, #0]
 80083b2:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80083b6:	f640 74fe 	movw	r4, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80083ba:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80083bc:	4094      	lsls	r4, r2
  tmpreg1 = hdac->Instance->CR;
 80083be:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80083c0:	ea23 0304 	bic.w	r3, r3, r4
  hdac->State = HAL_DAC_STATE_READY;
 80083c4:	2401      	movs	r4, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083c6:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80083c8:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 80083ca:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80083cc:	fa01 f202 	lsl.w	r2, r1, r2
 80083d0:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(hdac);
 80083d2:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80083d4:	ea23 0302 	bic.w	r3, r3, r2
 80083d8:	6003      	str	r3, [r0, #0]
  return HAL_OK;
 80083da:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 80083dc:	712c      	strb	r4, [r5, #4]
  __HAL_UNLOCK(hdac);
 80083de:	7169      	strb	r1, [r5, #5]
}
 80083e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 80083e4:	2300      	movs	r3, #0
 80083e6:	e7d9      	b.n	800839c <HAL_DAC_ConfigChannel+0x5c>
    connectOnChip = DAC_MCR_MODE1_0;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e7d7      	b.n	800839c <HAL_DAC_ConfigChannel+0x5c>
    tickstart = HAL_GetTick();
 80083ec:	f7fe fb96 	bl	8006b1c <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80083f0:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80083f2:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80083f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 80083f6:	bb1c      	cbnz	r4, 8008440 <HAL_DAC_ConfigChannel+0x100>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80083f8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008494 <HAL_DAC_ConfigChannel+0x154>
 80083fc:	ea13 0f08 	tst.w	r3, r8
 8008400:	d00d      	beq.n	800841e <HAL_DAC_ConfigChannel+0xde>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008402:	f7fe fb8b 	bl	8006b1c <HAL_GetTick>
 8008406:	1bc3      	subs	r3, r0, r7
 8008408:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800840a:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800840c:	d903      	bls.n	8008416 <HAL_DAC_ConfigChannel+0xd6>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800840e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008410:	ea12 0f08 	tst.w	r2, r8
 8008414:	d136      	bne.n	8008484 <HAL_DAC_ConfigChannel+0x144>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008418:	ea13 0f08 	tst.w	r3, r8
 800841c:	d1f1      	bne.n	8008402 <HAL_DAC_ConfigChannel+0xc2>
      HAL_Delay(1);
 800841e:	2001      	movs	r0, #1
 8008420:	f7fe fb82 	bl	8006b28 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008424:	6828      	ldr	r0, [r5, #0]
 8008426:	69b3      	ldr	r3, [r6, #24]
 8008428:	6403      	str	r3, [r0, #64]	; 0x40
 800842a:	e011      	b.n	8008450 <HAL_DAC_ConfigChannel+0x110>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800842c:	f7fe fb76 	bl	8006b1c <HAL_GetTick>
 8008430:	1bc3      	subs	r3, r0, r7
 8008432:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008434:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008436:	d902      	bls.n	800843e <HAL_DAC_ConfigChannel+0xfe>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800843a:	2a00      	cmp	r2, #0
 800843c:	db22      	blt.n	8008484 <HAL_DAC_ConfigChannel+0x144>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800843e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008440:	2b00      	cmp	r3, #0
 8008442:	dbf3      	blt.n	800842c <HAL_DAC_ConfigChannel+0xec>
      HAL_Delay(1U);
 8008444:	2001      	movs	r0, #1
 8008446:	f7fe fb6f 	bl	8006b28 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800844a:	6828      	ldr	r0, [r5, #0]
 800844c:	69b3      	ldr	r3, [r6, #24]
 800844e:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008450:	f004 0210 	and.w	r2, r4, #16
 8008454:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008458:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800845a:	4091      	lsls	r1, r2
 800845c:	ea23 0301 	bic.w	r3, r3, r1
 8008460:	69f1      	ldr	r1, [r6, #28]
 8008462:	4091      	lsls	r1, r2
 8008464:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008466:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008468:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800846a:	4091      	lsls	r1, r2
 800846c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800846e:	ea23 0301 	bic.w	r3, r3, r1
 8008472:	6a31      	ldr	r1, [r6, #32]
 8008474:	4091      	lsls	r1, r2
 8008476:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008478:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800847a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800847c:	e774      	b.n	8008368 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 800847e:	2002      	movs	r0, #2
}
 8008480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008484:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008486:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008488:	f043 0308 	orr.w	r3, r3, #8
            return HAL_TIMEOUT;
 800848c:	4610      	mov	r0, r2
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800848e:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008490:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8008492:	e7a5      	b.n	80083e0 <HAL_DAC_ConfigChannel+0xa0>
 8008494:	20008000 	.word	0x20008000

08008498 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop

0800849c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800849c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800849e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80084a0:	4620      	mov	r0, r4
 80084a2:	f7ff fff9 	bl	8008498 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80084a6:	2301      	movs	r3, #1
 80084a8:	7123      	strb	r3, [r4, #4]
}
 80084aa:	bd10      	pop	{r4, pc}

080084ac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop

080084b0 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80084b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80084b2:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80084b4:	f7ff fffa 	bl	80084ac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80084b8:	bd08      	pop	{r3, pc}
 80084ba:	bf00      	nop

080084bc <HAL_DACEx_ErrorCallbackCh2>:
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop

080084c0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80084c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084c2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80084c4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80084c6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80084c8:	f043 0304 	orr.w	r3, r3, #4
 80084cc:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80084ce:	f7ff fff5 	bl	80084bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80084d2:	2301      	movs	r3, #1
 80084d4:	7123      	strb	r3, [r4, #4]
}
 80084d6:	bd10      	pop	{r4, pc}

080084d8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop

080084dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084dc:	6802      	ldr	r2, [r0, #0]
{
 80084de:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084e0:	4b32      	ldr	r3, [pc, #200]	; (80085ac <DMA_CalcBaseAndBitshift+0xd0>)
 80084e2:	4833      	ldr	r0, [pc, #204]	; (80085b0 <DMA_CalcBaseAndBitshift+0xd4>)
{
 80084e4:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084e6:	4e33      	ldr	r6, [pc, #204]	; (80085b4 <DMA_CalcBaseAndBitshift+0xd8>)
 80084e8:	4d33      	ldr	r5, [pc, #204]	; (80085b8 <DMA_CalcBaseAndBitshift+0xdc>)
 80084ea:	42b2      	cmp	r2, r6
 80084ec:	bf18      	it	ne
 80084ee:	429a      	cmpne	r2, r3
 80084f0:	4c32      	ldr	r4, [pc, #200]	; (80085bc <DMA_CalcBaseAndBitshift+0xe0>)
 80084f2:	bf0c      	ite	eq
 80084f4:	2301      	moveq	r3, #1
 80084f6:	2300      	movne	r3, #0
 80084f8:	42aa      	cmp	r2, r5
 80084fa:	bf08      	it	eq
 80084fc:	f043 0301 	orreq.w	r3, r3, #1
 8008500:	42a2      	cmp	r2, r4
 8008502:	bf08      	it	eq
 8008504:	f043 0301 	orreq.w	r3, r3, #1
 8008508:	3430      	adds	r4, #48	; 0x30
 800850a:	4282      	cmp	r2, r0
 800850c:	bf08      	it	eq
 800850e:	f043 0301 	orreq.w	r3, r3, #1
 8008512:	3030      	adds	r0, #48	; 0x30
 8008514:	42a2      	cmp	r2, r4
 8008516:	bf08      	it	eq
 8008518:	f043 0301 	orreq.w	r3, r3, #1
 800851c:	3430      	adds	r4, #48	; 0x30
 800851e:	4282      	cmp	r2, r0
 8008520:	bf08      	it	eq
 8008522:	f043 0301 	orreq.w	r3, r3, #1
 8008526:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800852a:	42a2      	cmp	r2, r4
 800852c:	bf08      	it	eq
 800852e:	f043 0301 	orreq.w	r3, r3, #1
 8008532:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008536:	4282      	cmp	r2, r0
 8008538:	bf08      	it	eq
 800853a:	f043 0301 	orreq.w	r3, r3, #1
 800853e:	3030      	adds	r0, #48	; 0x30
 8008540:	42a2      	cmp	r2, r4
 8008542:	bf08      	it	eq
 8008544:	f043 0301 	orreq.w	r3, r3, #1
 8008548:	3430      	adds	r4, #48	; 0x30
 800854a:	4282      	cmp	r2, r0
 800854c:	bf08      	it	eq
 800854e:	f043 0301 	orreq.w	r3, r3, #1
 8008552:	3030      	adds	r0, #48	; 0x30
 8008554:	42a2      	cmp	r2, r4
 8008556:	bf08      	it	eq
 8008558:	f043 0301 	orreq.w	r3, r3, #1
 800855c:	3430      	adds	r4, #48	; 0x30
 800855e:	4282      	cmp	r2, r0
 8008560:	bf08      	it	eq
 8008562:	f043 0301 	orreq.w	r3, r3, #1
 8008566:	3030      	adds	r0, #48	; 0x30
 8008568:	42a2      	cmp	r2, r4
 800856a:	bf08      	it	eq
 800856c:	f043 0301 	orreq.w	r3, r3, #1
 8008570:	4282      	cmp	r2, r0
 8008572:	bf08      	it	eq
 8008574:	f043 0301 	orreq.w	r3, r3, #1
 8008578:	b913      	cbnz	r3, 8008580 <DMA_CalcBaseAndBitshift+0xa4>
 800857a:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <DMA_CalcBaseAndBitshift+0xe4>)
 800857c:	429a      	cmp	r2, r3
 800857e:	d112      	bne.n	80085a6 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008580:	b2d3      	uxtb	r3, r2
 8008582:	4810      	ldr	r0, [pc, #64]	; (80085c4 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008584:	4c10      	ldr	r4, [pc, #64]	; (80085c8 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008586:	3b10      	subs	r3, #16
 8008588:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 800858c:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800858e:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008592:	5c20      	ldrb	r0, [r4, r0]
 8008594:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008596:	480d      	ldr	r0, [pc, #52]	; (80085cc <DMA_CalcBaseAndBitshift+0xf0>)
 8008598:	ea00 0002 	and.w	r0, r0, r2
 800859c:	bf88      	it	hi
 800859e:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80085a0:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80085a2:	bc70      	pop	{r4, r5, r6}
 80085a4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80085a6:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80085aa:	e7f9      	b.n	80085a0 <DMA_CalcBaseAndBitshift+0xc4>
 80085ac:	40020010 	.word	0x40020010
 80085b0:	40020070 	.word	0x40020070
 80085b4:	40020028 	.word	0x40020028
 80085b8:	40020040 	.word	0x40020040
 80085bc:	40020058 	.word	0x40020058
 80085c0:	400204b8 	.word	0x400204b8
 80085c4:	aaaaaaab 	.word	0xaaaaaaab
 80085c8:	0801db24 	.word	0x0801db24
 80085cc:	fffffc00 	.word	0xfffffc00

080085d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80085d0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085d2:	4a27      	ldr	r2, [pc, #156]	; (8008670 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80085d4:	4927      	ldr	r1, [pc, #156]	; (8008674 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 80085d6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085d8:	4d27      	ldr	r5, [pc, #156]	; (8008678 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80085da:	4c28      	ldr	r4, [pc, #160]	; (800867c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80085dc:	42ab      	cmp	r3, r5
 80085de:	bf18      	it	ne
 80085e0:	4293      	cmpne	r3, r2
 80085e2:	bf0c      	ite	eq
 80085e4:	2201      	moveq	r2, #1
 80085e6:	2200      	movne	r2, #0
 80085e8:	428b      	cmp	r3, r1
 80085ea:	bf08      	it	eq
 80085ec:	f042 0201 	orreq.w	r2, r2, #1
 80085f0:	3128      	adds	r1, #40	; 0x28
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	bf08      	it	eq
 80085f6:	f042 0201 	orreq.w	r2, r2, #1
 80085fa:	3428      	adds	r4, #40	; 0x28
 80085fc:	428b      	cmp	r3, r1
 80085fe:	bf08      	it	eq
 8008600:	f042 0201 	orreq.w	r2, r2, #1
 8008604:	3128      	adds	r1, #40	; 0x28
 8008606:	42a3      	cmp	r3, r4
 8008608:	bf08      	it	eq
 800860a:	f042 0201 	orreq.w	r2, r2, #1
 800860e:	428b      	cmp	r3, r1
 8008610:	bf08      	it	eq
 8008612:	f042 0201 	orreq.w	r2, r2, #1
 8008616:	b912      	cbnz	r2, 800861e <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8008618:	4a19      	ldr	r2, [pc, #100]	; (8008680 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d113      	bne.n	8008646 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4918      	ldr	r1, [pc, #96]	; (8008684 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008622:	4a19      	ldr	r2, [pc, #100]	; (8008688 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008624:	3b08      	subs	r3, #8
 8008626:	4c19      	ldr	r4, [pc, #100]	; (800868c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8008628:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800862c:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800862e:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008632:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008636:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008638:	fa01 f303 	lsl.w	r3, r1, r3
 800863c:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800863e:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008642:	bc30      	pop	{r4, r5}
 8008644:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008646:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008648:	4a11      	ldr	r2, [pc, #68]	; (8008690 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800864a:	4c12      	ldr	r4, [pc, #72]	; (8008694 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 800864c:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800864e:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008650:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008654:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008656:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800865a:	d800      	bhi.n	800865e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800865c:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800865e:	4a0e      	ldr	r2, [pc, #56]	; (8008698 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008660:	f001 041f 	and.w	r4, r1, #31
 8008664:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008666:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008668:	40a3      	lsls	r3, r4
 800866a:	4c0c      	ldr	r4, [pc, #48]	; (800869c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800866c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800866e:	e7e5      	b.n	800863c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8008670:	58025408 	.word	0x58025408
 8008674:	58025430 	.word	0x58025430
 8008678:	5802541c 	.word	0x5802541c
 800867c:	58025444 	.word	0x58025444
 8008680:	58025494 	.word	0x58025494
 8008684:	cccccccd 	.word	0xcccccccd
 8008688:	16009600 	.word	0x16009600
 800868c:	58025880 	.word	0x58025880
 8008690:	bffdfbf0 	.word	0xbffdfbf0
 8008694:	aaaaaaab 	.word	0xaaaaaaab
 8008698:	10008200 	.word	0x10008200
 800869c:	40020880 	.word	0x40020880

080086a0 <HAL_DMA_Init>:
{
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	4605      	mov	r5, r0
 80086a6:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 80086a8:	f7fe fa38 	bl	8006b1c <HAL_GetTick>
  if(hdma == NULL)
 80086ac:	2d00      	cmp	r5, #0
 80086ae:	f000 8199 	beq.w	80089e4 <HAL_DMA_Init+0x344>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086b2:	682c      	ldr	r4, [r5, #0]
 80086b4:	4606      	mov	r6, r0
 80086b6:	4ba0      	ldr	r3, [pc, #640]	; (8008938 <HAL_DMA_Init+0x298>)
 80086b8:	429c      	cmp	r4, r3
 80086ba:	d048      	beq.n	800874e <HAL_DMA_Init+0xae>
 80086bc:	3318      	adds	r3, #24
 80086be:	429c      	cmp	r4, r3
 80086c0:	d045      	beq.n	800874e <HAL_DMA_Init+0xae>
 80086c2:	3330      	adds	r3, #48	; 0x30
 80086c4:	4a9d      	ldr	r2, [pc, #628]	; (800893c <HAL_DMA_Init+0x29c>)
 80086c6:	4294      	cmp	r4, r2
 80086c8:	bf18      	it	ne
 80086ca:	429c      	cmpne	r4, r3
 80086cc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80086d0:	bf0c      	ite	eq
 80086d2:	2301      	moveq	r3, #1
 80086d4:	2300      	movne	r3, #0
 80086d6:	4294      	cmp	r4, r2
 80086d8:	bf08      	it	eq
 80086da:	f043 0301 	orreq.w	r3, r3, #1
 80086de:	3218      	adds	r2, #24
 80086e0:	4294      	cmp	r4, r2
 80086e2:	bf08      	it	eq
 80086e4:	f043 0301 	orreq.w	r3, r3, #1
 80086e8:	3218      	adds	r2, #24
 80086ea:	4294      	cmp	r4, r2
 80086ec:	bf08      	it	eq
 80086ee:	f043 0301 	orreq.w	r3, r3, #1
 80086f2:	3218      	adds	r2, #24
 80086f4:	4294      	cmp	r4, r2
 80086f6:	bf08      	it	eq
 80086f8:	f043 0301 	orreq.w	r3, r3, #1
 80086fc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8008700:	4294      	cmp	r4, r2
 8008702:	bf08      	it	eq
 8008704:	f043 0301 	orreq.w	r3, r3, #1
 8008708:	3218      	adds	r2, #24
 800870a:	4294      	cmp	r4, r2
 800870c:	bf08      	it	eq
 800870e:	f043 0301 	orreq.w	r3, r3, #1
 8008712:	3218      	adds	r2, #24
 8008714:	4294      	cmp	r4, r2
 8008716:	bf08      	it	eq
 8008718:	f043 0301 	orreq.w	r3, r3, #1
 800871c:	3218      	adds	r2, #24
 800871e:	4294      	cmp	r4, r2
 8008720:	bf08      	it	eq
 8008722:	f043 0301 	orreq.w	r3, r3, #1
 8008726:	3218      	adds	r2, #24
 8008728:	4294      	cmp	r4, r2
 800872a:	bf08      	it	eq
 800872c:	f043 0301 	orreq.w	r3, r3, #1
 8008730:	3218      	adds	r2, #24
 8008732:	4294      	cmp	r4, r2
 8008734:	bf08      	it	eq
 8008736:	f043 0301 	orreq.w	r3, r3, #1
 800873a:	3218      	adds	r2, #24
 800873c:	4294      	cmp	r4, r2
 800873e:	bf08      	it	eq
 8008740:	f043 0301 	orreq.w	r3, r3, #1
 8008744:	b91b      	cbnz	r3, 800874e <HAL_DMA_Init+0xae>
 8008746:	4b7e      	ldr	r3, [pc, #504]	; (8008940 <HAL_DMA_Init+0x2a0>)
 8008748:	429c      	cmp	r4, r3
 800874a:	f040 81a4 	bne.w	8008a96 <HAL_DMA_Init+0x3f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 800874e:	2302      	movs	r3, #2
 8008750:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8008754:	2300      	movs	r3, #0
 8008756:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	f023 0301 	bic.w	r3, r3, #1
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	e006      	b.n	8008772 <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008764:	f7fe f9da 	bl	8006b1c <HAL_GetTick>
 8008768:	1b80      	subs	r0, r0, r6
 800876a:	2805      	cmp	r0, #5
 800876c:	f200 8120 	bhi.w	80089b0 <HAL_DMA_Init+0x310>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008770:	682c      	ldr	r4, [r5, #0]
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	07df      	lsls	r7, r3, #31
 8008776:	d4f5      	bmi.n	8008764 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8008778:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800877c:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 800877e:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008780:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008782:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008784:	430b      	orrs	r3, r1
 8008786:	6969      	ldr	r1, [r5, #20]
 8008788:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800878a:	69e9      	ldr	r1, [r5, #28]
 800878c:	4313      	orrs	r3, r2
 800878e:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008790:	496c      	ldr	r1, [pc, #432]	; (8008944 <HAL_DMA_Init+0x2a4>)
 8008792:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8008794:	6a28      	ldr	r0, [r5, #32]
 8008796:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008798:	486b      	ldr	r0, [pc, #428]	; (8008948 <HAL_DMA_Init+0x2a8>)
    registerValue |=  hdma->Init.Direction           |
 800879a:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800879c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800879e:	2904      	cmp	r1, #4
 80087a0:	f000 8124 	beq.w	80089ec <HAL_DMA_Init+0x34c>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80087a4:	6806      	ldr	r6, [r0, #0]
 80087a6:	4869      	ldr	r0, [pc, #420]	; (800894c <HAL_DMA_Init+0x2ac>)
 80087a8:	4030      	ands	r0, r6
 80087aa:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80087ae:	f080 80dd 	bcs.w	800896c <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80087b2:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80087b4:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80087b6:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80087ba:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80087bc:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80087be:	4628      	mov	r0, r5
 80087c0:	f7ff fe8c 	bl	80084dc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80087c4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80087c6:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087c8:	495b      	ldr	r1, [pc, #364]	; (8008938 <HAL_DMA_Init+0x298>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80087ca:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087ce:	4e60      	ldr	r6, [pc, #384]	; (8008950 <HAL_DMA_Init+0x2b0>)
 80087d0:	4f60      	ldr	r7, [pc, #384]	; (8008954 <HAL_DMA_Init+0x2b4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80087d2:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087d4:	4a60      	ldr	r2, [pc, #384]	; (8008958 <HAL_DMA_Init+0x2b8>)
 80087d6:	1ba6      	subs	r6, r4, r6
 80087d8:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80087da:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087dc:	eba4 0b02 	sub.w	fp, r4, r2
 80087e0:	4b5e      	ldr	r3, [pc, #376]	; (800895c <HAL_DMA_Init+0x2bc>)
 80087e2:	fab6 f686 	clz	r6, r6
 80087e6:	fabb fb8b 	clz	fp, fp
 80087ea:	fab7 f787 	clz	r7, r7
 80087ee:	eba4 0a03 	sub.w	sl, r4, r3
 80087f2:	4b5b      	ldr	r3, [pc, #364]	; (8008960 <HAL_DMA_Init+0x2c0>)
 80087f4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80087f8:	485a      	ldr	r0, [pc, #360]	; (8008964 <HAL_DMA_Init+0x2c4>)
 80087fa:	429c      	cmp	r4, r3
 80087fc:	bf18      	it	ne
 80087fe:	428c      	cmpne	r4, r1
 8008800:	f103 0318 	add.w	r3, r3, #24
 8008804:	faba fa8a 	clz	sl, sl
 8008808:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800880c:	bf0c      	ite	eq
 800880e:	2101      	moveq	r1, #1
 8008810:	2100      	movne	r1, #0
 8008812:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8008816:	1a22      	subs	r2, r4, r0
 8008818:	429c      	cmp	r4, r3
 800881a:	bf08      	it	eq
 800881c:	f041 0101 	orreq.w	r1, r1, #1
 8008820:	3318      	adds	r3, #24
 8008822:	097f      	lsrs	r7, r7, #5
 8008824:	fab2 f282 	clz	r2, r2
 8008828:	429c      	cmp	r4, r3
 800882a:	bf08      	it	eq
 800882c:	f041 0101 	orreq.w	r1, r1, #1
 8008830:	3318      	adds	r3, #24
 8008832:	0952      	lsrs	r2, r2, #5
 8008834:	429c      	cmp	r4, r3
 8008836:	bf08      	it	eq
 8008838:	f041 0101 	orreq.w	r1, r1, #1
 800883c:	3318      	adds	r3, #24
 800883e:	9201      	str	r2, [sp, #4]
 8008840:	429c      	cmp	r4, r3
 8008842:	bf08      	it	eq
 8008844:	f041 0101 	orreq.w	r1, r1, #1
 8008848:	3318      	adds	r3, #24
 800884a:	429c      	cmp	r4, r3
 800884c:	bf08      	it	eq
 800884e:	f041 0101 	orreq.w	r1, r1, #1
 8008852:	3318      	adds	r3, #24
 8008854:	429c      	cmp	r4, r3
 8008856:	bf08      	it	eq
 8008858:	f041 0101 	orreq.w	r1, r1, #1
 800885c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008860:	429c      	cmp	r4, r3
 8008862:	bf08      	it	eq
 8008864:	f041 0101 	orreq.w	r1, r1, #1
 8008868:	3318      	adds	r3, #24
 800886a:	429c      	cmp	r4, r3
 800886c:	bf08      	it	eq
 800886e:	f041 0101 	orreq.w	r1, r1, #1
 8008872:	3318      	adds	r3, #24
 8008874:	429c      	cmp	r4, r3
 8008876:	bf08      	it	eq
 8008878:	f041 0101 	orreq.w	r1, r1, #1
 800887c:	3318      	adds	r3, #24
 800887e:	429c      	cmp	r4, r3
 8008880:	bf08      	it	eq
 8008882:	f041 0101 	orreq.w	r1, r1, #1
 8008886:	3318      	adds	r3, #24
 8008888:	429c      	cmp	r4, r3
 800888a:	bf08      	it	eq
 800888c:	f041 0101 	orreq.w	r1, r1, #1
 8008890:	3318      	adds	r3, #24
 8008892:	429c      	cmp	r4, r3
 8008894:	bf08      	it	eq
 8008896:	f041 0101 	orreq.w	r1, r1, #1
 800889a:	3318      	adds	r3, #24
 800889c:	429c      	cmp	r4, r3
 800889e:	bf08      	it	eq
 80088a0:	f041 0101 	orreq.w	r1, r1, #1
 80088a4:	3318      	adds	r3, #24
 80088a6:	429c      	cmp	r4, r3
 80088a8:	bf08      	it	eq
 80088aa:	f041 0101 	orreq.w	r1, r1, #1
 80088ae:	4b2e      	ldr	r3, [pc, #184]	; (8008968 <HAL_DMA_Init+0x2c8>)
 80088b0:	ea4b 0101 	orr.w	r1, fp, r1
 80088b4:	eba4 0803 	sub.w	r8, r4, r3
 80088b8:	3314      	adds	r3, #20
 80088ba:	ea4a 0101 	orr.w	r1, sl, r1
 80088be:	fab8 f888 	clz	r8, r8
 80088c2:	eba4 0903 	sub.w	r9, r4, r3
 80088c6:	3314      	adds	r3, #20
 80088c8:	4331      	orrs	r1, r6
 80088ca:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80088ce:	fab9 f989 	clz	r9, r9
 80088d2:	1ae3      	subs	r3, r4, r3
 80088d4:	4339      	orrs	r1, r7
 80088d6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80088da:	fab3 f383 	clz	r3, r3
 80088de:	ea48 0101 	orr.w	r1, r8, r1
 80088e2:	095b      	lsrs	r3, r3, #5
 80088e4:	ea49 0101 	orr.w	r1, r9, r1
 80088e8:	4319      	orrs	r1, r3
 80088ea:	d100      	bne.n	80088ee <HAL_DMA_Init+0x24e>
 80088ec:	b1da      	cbz	r2, 8008926 <HAL_DMA_Init+0x286>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80088ee:	4628      	mov	r0, r5
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	f7ff fe6d 	bl	80085d0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80088f6:	68a9      	ldr	r1, [r5, #8]
 80088f8:	9b00      	ldr	r3, [sp, #0]
 80088fa:	2980      	cmp	r1, #128	; 0x80
 80088fc:	d066      	beq.n	80089cc <HAL_DMA_Init+0x32c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80088fe:	6868      	ldr	r0, [r5, #4]
 8008900:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8008902:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008904:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008906:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800890a:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800890c:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800890e:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008912:	d862      	bhi.n	80089da <HAL_DMA_Init+0x33a>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008914:	1e61      	subs	r1, r4, #1
 8008916:	2907      	cmp	r1, #7
 8008918:	d979      	bls.n	8008a0e <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800891a:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 800891c:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008920:	2100      	movs	r1, #0
 8008922:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008924:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008926:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8008928:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800892a:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800892c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8008930:	b003      	add	sp, #12
 8008932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008936:	bf00      	nop
 8008938:	40020010 	.word	0x40020010
 800893c:	40020040 	.word	0x40020040
 8008940:	400204b8 	.word	0x400204b8
 8008944:	fe10803f 	.word	0xfe10803f
 8008948:	5c001000 	.word	0x5c001000
 800894c:	ffff0000 	.word	0xffff0000
 8008950:	58025430 	.word	0x58025430
 8008954:	58025444 	.word	0x58025444
 8008958:	58025408 	.word	0x58025408
 800895c:	5802541c 	.word	0x5802541c
 8008960:	40020028 	.word	0x40020028
 8008964:	58025494 	.word	0x58025494
 8008968:	58025458 	.word	0x58025458
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800896c:	6868      	ldr	r0, [r5, #4]
 800896e:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 8008972:	2e1f      	cmp	r6, #31
 8008974:	d925      	bls.n	80089c2 <HAL_DMA_Init+0x322>
 8008976:	384f      	subs	r0, #79	; 0x4f
 8008978:	2803      	cmp	r0, #3
 800897a:	d801      	bhi.n	8008980 <HAL_DMA_Init+0x2e0>
        registerValue |= DMA_SxCR_TRBUFF;
 800897c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008980:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008982:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008984:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008986:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800898a:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800898e:	f47f af15 	bne.w	80087bc <HAL_DMA_Init+0x11c>
 8008992:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8008994:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008996:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008998:	2800      	cmp	r0, #0
 800899a:	f43f af0f 	beq.w	80087bc <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800899e:	2a00      	cmp	r2, #0
 80089a0:	d153      	bne.n	8008a4a <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 80089a2:	2901      	cmp	r1, #1
 80089a4:	d072      	beq.n	8008a8c <HAL_DMA_Init+0x3ec>
 80089a6:	f031 0202 	bics.w	r2, r1, #2
 80089aa:	f47f af07 	bne.w	80087bc <HAL_DMA_Init+0x11c>
 80089ae:	e054      	b.n	8008a5a <HAL_DMA_Init+0x3ba>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089b0:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80089b2:	2303      	movs	r3, #3
        return HAL_ERROR;
 80089b4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089b6:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80089b8:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80089bc:	b003      	add	sp, #12
 80089be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80089c2:	4878      	ldr	r0, [pc, #480]	; (8008ba4 <HAL_DMA_Init+0x504>)
 80089c4:	40f0      	lsrs	r0, r6
 80089c6:	07c0      	lsls	r0, r0, #31
 80089c8:	d5da      	bpl.n	8008980 <HAL_DMA_Init+0x2e0>
 80089ca:	e7d7      	b.n	800897c <HAL_DMA_Init+0x2dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80089cc:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089ce:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80089d0:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80089d4:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80089d6:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089d8:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 80089da:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80089dc:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80089e0:	676b      	str	r3, [r5, #116]	; 0x74
 80089e2:	e7a0      	b.n	8008926 <HAL_DMA_Init+0x286>
    return HAL_ERROR;
 80089e4:	2001      	movs	r0, #1
}
 80089e6:	b003      	add	sp, #12
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80089ec:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80089ee:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 80089f2:	4306      	orrs	r6, r0
 80089f4:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80089f6:	4e6c      	ldr	r6, [pc, #432]	; (8008ba8 <HAL_DMA_Init+0x508>)
 80089f8:	403e      	ands	r6, r7
 80089fa:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 80089fe:	d2b5      	bcs.n	800896c <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008a00:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008a02:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008a04:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8008a08:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a0c:	e7c2      	b.n	8008994 <HAL_DMA_Init+0x2f4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a0e:	9a01      	ldr	r2, [sp, #4]
 8008a10:	431a      	orrs	r2, r3
 8008a12:	ea49 0902 	orr.w	r9, r9, r2
 8008a16:	ea48 0809 	orr.w	r8, r8, r9
 8008a1a:	ea47 0708 	orr.w	r7, r7, r8
 8008a1e:	433e      	orrs	r6, r7
 8008a20:	ea5a 0606 	orrs.w	r6, sl, r6
 8008a24:	d107      	bne.n	8008a36 <HAL_DMA_Init+0x396>
 8008a26:	f1bb 0f00 	cmp.w	fp, #0
 8008a2a:	d104      	bne.n	8008a36 <HAL_DMA_Init+0x396>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a2c:	4b5f      	ldr	r3, [pc, #380]	; (8008bac <HAL_DMA_Init+0x50c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008a2e:	4860      	ldr	r0, [pc, #384]	; (8008bb0 <HAL_DMA_Init+0x510>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a30:	4423      	add	r3, r4
 8008a32:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008a34:	e003      	b.n	8008a3e <HAL_DMA_Init+0x39e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a36:	4b5f      	ldr	r3, [pc, #380]	; (8008bb4 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008a38:	485f      	ldr	r0, [pc, #380]	; (8008bb8 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a3a:	4423      	add	r3, r4
 8008a3c:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008a3e:	2201      	movs	r2, #1
 8008a40:	408a      	lsls	r2, r1
 8008a42:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 8008a46:	676a      	str	r2, [r5, #116]	; 0x74
 8008a48:	e76a      	b.n	8008920 <HAL_DMA_Init+0x280>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a4a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008a4e:	d00e      	beq.n	8008a6e <HAL_DMA_Init+0x3ce>
    switch (hdma->Init.FIFOThreshold)
 8008a50:	2902      	cmp	r1, #2
 8008a52:	d905      	bls.n	8008a60 <HAL_DMA_Init+0x3c0>
 8008a54:	2903      	cmp	r1, #3
 8008a56:	f47f aeb1 	bne.w	80087bc <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a5a:	01c2      	lsls	r2, r0, #7
 8008a5c:	f57f aeae 	bpl.w	80087bc <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 8008a60:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008a62:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8008a64:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008a66:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8008a68:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 8008a6c:	e7a6      	b.n	80089bc <HAL_DMA_Init+0x31c>
    switch (hdma->Init.FIFOThreshold)
 8008a6e:	2903      	cmp	r1, #3
 8008a70:	f63f aea4 	bhi.w	80087bc <HAL_DMA_Init+0x11c>
 8008a74:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <HAL_DMA_Init+0x3dc>)
 8008a76:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008a61 	.word	0x08008a61
 8008a80:	08008a5b 	.word	0x08008a5b
 8008a84:	08008a61 	.word	0x08008a61
 8008a88:	08008a8d 	.word	0x08008a8d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a8c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8008a90:	f47f ae94 	bne.w	80087bc <HAL_DMA_Init+0x11c>
 8008a94:	e7e4      	b.n	8008a60 <HAL_DMA_Init+0x3c0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a96:	4a49      	ldr	r2, [pc, #292]	; (8008bbc <HAL_DMA_Init+0x51c>)
 8008a98:	4b49      	ldr	r3, [pc, #292]	; (8008bc0 <HAL_DMA_Init+0x520>)
 8008a9a:	eba4 0b02 	sub.w	fp, r4, r2
 8008a9e:	4e49      	ldr	r6, [pc, #292]	; (8008bc4 <HAL_DMA_Init+0x524>)
 8008aa0:	eba4 0a03 	sub.w	sl, r4, r3
 8008aa4:	4f48      	ldr	r7, [pc, #288]	; (8008bc8 <HAL_DMA_Init+0x528>)
 8008aa6:	fabb fb8b 	clz	fp, fp
 8008aaa:	1ba6      	subs	r6, r4, r6
 8008aac:	faba fa8a 	clz	sl, sl
 8008ab0:	333c      	adds	r3, #60	; 0x3c
 8008ab2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8008ab6:	fab6 f686 	clz	r6, r6
 8008aba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8008abe:	1be7      	subs	r7, r4, r7
 8008ac0:	eba4 0803 	sub.w	r8, r4, r3
 8008ac4:	0976      	lsrs	r6, r6, #5
 8008ac6:	3314      	adds	r3, #20
 8008ac8:	fab7 f787 	clz	r7, r7
 8008acc:	ea4b 010a 	orr.w	r1, fp, sl
 8008ad0:	fab8 f888 	clz	r8, r8
 8008ad4:	eba4 0903 	sub.w	r9, r4, r3
 8008ad8:	097f      	lsrs	r7, r7, #5
 8008ada:	4331      	orrs	r1, r6
 8008adc:	3314      	adds	r3, #20
 8008ade:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8008ae2:	fab9 f989 	clz	r9, r9
 8008ae6:	4339      	orrs	r1, r7
 8008ae8:	1ae3      	subs	r3, r4, r3
 8008aea:	4838      	ldr	r0, [pc, #224]	; (8008bcc <HAL_DMA_Init+0x52c>)
 8008aec:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8008af0:	ea48 0101 	orr.w	r1, r8, r1
 8008af4:	fab3 f383 	clz	r3, r3
 8008af8:	1a22      	subs	r2, r4, r0
 8008afa:	ea49 0101 	orr.w	r1, r9, r1
 8008afe:	095b      	lsrs	r3, r3, #5
 8008b00:	fab2 f282 	clz	r2, r2
 8008b04:	4319      	orrs	r1, r3
 8008b06:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8008b0a:	9201      	str	r2, [sp, #4]
 8008b0c:	d101      	bne.n	8008b12 <HAL_DMA_Init+0x472>
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d041      	beq.n	8008b96 <HAL_DMA_Init+0x4f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b12:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008b14:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008bd8 <HAL_DMA_Init+0x538>
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b18:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008b22:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008b24:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008b28:	68a9      	ldr	r1, [r5, #8]
 8008b2a:	2940      	cmp	r1, #64	; 0x40
 8008b2c:	d030      	beq.n	8008b90 <HAL_DMA_Init+0x4f0>
 8008b2e:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 8008b32:	fab1 f181 	clz	r1, r1
 8008b36:	0949      	lsrs	r1, r1, #5
 8008b38:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008b3c:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008b3e:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008b40:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008b42:	4a23      	ldr	r2, [pc, #140]	; (8008bd0 <HAL_DMA_Init+0x530>)
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008b4a:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008b4c:	4422      	add	r2, r4
 8008b4e:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008b52:	69a9      	ldr	r1, [r5, #24]
 8008b54:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008b58:	69e9      	ldr	r1, [r5, #28]
 8008b5a:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008b5e:	6a29      	ldr	r1, [r5, #32]
 8008b60:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 8008b64:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008b68:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008b6c:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008b6e:	4919      	ldr	r1, [pc, #100]	; (8008bd4 <HAL_DMA_Init+0x534>)
 8008b70:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b74:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008b76:	0909      	lsrs	r1, r1, #4
 8008b78:	0089      	lsls	r1, r1, #2
 8008b7a:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b7c:	f7ff fcae 	bl	80084dc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b80:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8008b82:	9b00      	ldr	r3, [sp, #0]
 8008b84:	f001 041f 	and.w	r4, r1, #31
 8008b88:	2101      	movs	r1, #1
 8008b8a:	40a1      	lsls	r1, r4
 8008b8c:	6041      	str	r1, [r0, #4]
 8008b8e:	e6ae      	b.n	80088ee <HAL_DMA_Init+0x24e>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008b90:	f04f 0e10 	mov.w	lr, #16
 8008b94:	e7d2      	b.n	8008b3c <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b96:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008b98:	2303      	movs	r3, #3
    return HAL_ERROR;
 8008b9a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b9c:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008b9e:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 8008ba2:	e70b      	b.n	80089bc <HAL_DMA_Init+0x31c>
 8008ba4:	c3c0003f 	.word	0xc3c0003f
 8008ba8:	ffff0000 	.word	0xffff0000
 8008bac:	1000823f 	.word	0x1000823f
 8008bb0:	40020940 	.word	0x40020940
 8008bb4:	1600963f 	.word	0x1600963f
 8008bb8:	58025940 	.word	0x58025940
 8008bbc:	58025408 	.word	0x58025408
 8008bc0:	5802541c 	.word	0x5802541c
 8008bc4:	58025430 	.word	0x58025430
 8008bc8:	58025444 	.word	0x58025444
 8008bcc:	58025494 	.word	0x58025494
 8008bd0:	a7fdabf8 	.word	0xa7fdabf8
 8008bd4:	cccccccd 	.word	0xcccccccd
 8008bd8:	fffe000f 	.word	0xfffe000f

08008bdc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	f000 8177 	beq.w	8008ed0 <HAL_DMA_Start_IT+0x2f4>
 8008be2:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8008be4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8008be8:	2801      	cmp	r0, #1
 8008bea:	f000 8173 	beq.w	8008ed4 <HAL_DMA_Start_IT+0x2f8>
 8008bee:	2001      	movs	r0, #1
{
 8008bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8008bf4:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8008bf8:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8008bfc:	4284      	cmp	r4, r0
 8008bfe:	d008      	beq.n	8008c12 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8008c04:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008c06:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8008c0a:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8008c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c12:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8008c14:	f8dc 4000 	ldr.w	r4, [ip]
 8008c18:	4d53      	ldr	r5, [pc, #332]	; (8008d68 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c1a:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c1e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008c20:	4e52      	ldr	r6, [pc, #328]	; (8008d6c <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c22:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8008c26:	4852      	ldr	r0, [pc, #328]	; (8008d70 <HAL_DMA_Start_IT+0x194>)
 8008c28:	42ac      	cmp	r4, r5
 8008c2a:	bf18      	it	ne
 8008c2c:	4284      	cmpne	r4, r0
 8008c2e:	f105 0518 	add.w	r5, r5, #24
 8008c32:	bf0c      	ite	eq
 8008c34:	2001      	moveq	r0, #1
 8008c36:	2000      	movne	r0, #0
 8008c38:	42ac      	cmp	r4, r5
 8008c3a:	bf08      	it	eq
 8008c3c:	f040 0001 	orreq.w	r0, r0, #1
 8008c40:	3518      	adds	r5, #24
 8008c42:	42ac      	cmp	r4, r5
 8008c44:	bf08      	it	eq
 8008c46:	f040 0001 	orreq.w	r0, r0, #1
 8008c4a:	3518      	adds	r5, #24
 8008c4c:	42ac      	cmp	r4, r5
 8008c4e:	bf08      	it	eq
 8008c50:	f040 0001 	orreq.w	r0, r0, #1
 8008c54:	3518      	adds	r5, #24
 8008c56:	42ac      	cmp	r4, r5
 8008c58:	bf08      	it	eq
 8008c5a:	f040 0001 	orreq.w	r0, r0, #1
 8008c5e:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8008c62:	42ac      	cmp	r4, r5
 8008c64:	bf08      	it	eq
 8008c66:	f040 0001 	orreq.w	r0, r0, #1
 8008c6a:	3518      	adds	r5, #24
 8008c6c:	42ac      	cmp	r4, r5
 8008c6e:	bf08      	it	eq
 8008c70:	f040 0001 	orreq.w	r0, r0, #1
 8008c74:	3518      	adds	r5, #24
 8008c76:	42ac      	cmp	r4, r5
 8008c78:	bf08      	it	eq
 8008c7a:	f040 0001 	orreq.w	r0, r0, #1
 8008c7e:	3518      	adds	r5, #24
 8008c80:	42ac      	cmp	r4, r5
 8008c82:	bf08      	it	eq
 8008c84:	f040 0001 	orreq.w	r0, r0, #1
 8008c88:	3518      	adds	r5, #24
 8008c8a:	42ac      	cmp	r4, r5
 8008c8c:	bf08      	it	eq
 8008c8e:	f040 0001 	orreq.w	r0, r0, #1
 8008c92:	3518      	adds	r5, #24
 8008c94:	42ac      	cmp	r4, r5
 8008c96:	bf08      	it	eq
 8008c98:	f040 0001 	orreq.w	r0, r0, #1
 8008c9c:	3518      	adds	r5, #24
 8008c9e:	42ac      	cmp	r4, r5
 8008ca0:	bf08      	it	eq
 8008ca2:	f040 0001 	orreq.w	r0, r0, #1
 8008ca6:	3518      	adds	r5, #24
 8008ca8:	42ac      	cmp	r4, r5
 8008caa:	bf14      	ite	ne
 8008cac:	4681      	movne	r9, r0
 8008cae:	f040 0901 	orreq.w	r9, r0, #1
 8008cb2:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 8008cb6:	42b4      	cmp	r4, r6
 8008cb8:	bf18      	it	ne
 8008cba:	42ac      	cmpne	r4, r5
 8008cbc:	bf0c      	ite	eq
 8008cbe:	2501      	moveq	r5, #1
 8008cc0:	2500      	movne	r5, #0
 8008cc2:	d002      	beq.n	8008cca <HAL_DMA_Start_IT+0xee>
 8008cc4:	f1b9 0f00 	cmp.w	r9, #0
 8008cc8:	d054      	beq.n	8008d74 <HAL_DMA_Start_IT+0x198>
 8008cca:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ccc:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8008cd0:	f026 0601 	bic.w	r6, r6, #1
 8008cd4:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	d078      	beq.n	8008dcc <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008cda:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8008cde:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008ce0:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8008ce4:	b117      	cbz	r7, 8008cec <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ce6:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8008cea:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cec:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8008cf0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8008cf4:	f006 081f 	and.w	r8, r6, #31
 8008cf8:	fa0e fe08 	lsl.w	lr, lr, r8
 8008cfc:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d00:	6826      	ldr	r6, [r4, #0]
 8008d02:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8008d06:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008d08:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d0a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8008d0e:	2b40      	cmp	r3, #64	; 0x40
 8008d10:	f000 80e2 	beq.w	8008ed8 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008d14:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008d16:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d18:	b91d      	cbnz	r5, 8008d22 <HAL_DMA_Start_IT+0x146>
 8008d1a:	f1b9 0f00 	cmp.w	r9, #0
 8008d1e:	f000 80e1 	beq.w	8008ee4 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f023 031e 	bic.w	r3, r3, #30
 8008d28:	f043 0316 	orr.w	r3, r3, #22
 8008d2c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008d2e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008d32:	b11b      	cbz	r3, 8008d3c <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	f043 0308 	orr.w	r3, r3, #8
 8008d3a:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008d3c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	03d2      	lsls	r2, r2, #15
 8008d44:	d503      	bpl.n	8008d4e <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d4c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8008d4e:	b11f      	cbz	r7, 8008d58 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d56:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8008d58:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d5a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	6023      	str	r3, [r4, #0]
}
 8008d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d66:	bf00      	nop
 8008d68:	40020058 	.word	0x40020058
 8008d6c:	40020028 	.word	0x40020028
 8008d70:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d74:	4f61      	ldr	r7, [pc, #388]	; (8008efc <HAL_DMA_Start_IT+0x320>)
 8008d76:	4e62      	ldr	r6, [pc, #392]	; (8008f00 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d78:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d7c:	42b4      	cmp	r4, r6
 8008d7e:	bf18      	it	ne
 8008d80:	42bc      	cmpne	r4, r7
 8008d82:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8008d86:	bf0c      	ite	eq
 8008d88:	2701      	moveq	r7, #1
 8008d8a:	2700      	movne	r7, #0
 8008d8c:	42b4      	cmp	r4, r6
 8008d8e:	bf08      	it	eq
 8008d90:	f047 0701 	orreq.w	r7, r7, #1
 8008d94:	3614      	adds	r6, #20
 8008d96:	42b4      	cmp	r4, r6
 8008d98:	bf08      	it	eq
 8008d9a:	f047 0701 	orreq.w	r7, r7, #1
 8008d9e:	3614      	adds	r6, #20
 8008da0:	42b4      	cmp	r4, r6
 8008da2:	bf08      	it	eq
 8008da4:	f047 0701 	orreq.w	r7, r7, #1
 8008da8:	3614      	adds	r6, #20
 8008daa:	42b4      	cmp	r4, r6
 8008dac:	bf08      	it	eq
 8008dae:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8008db2:	6826      	ldr	r6, [r4, #0]
 8008db4:	f026 0601 	bic.w	r6, r6, #1
 8008db8:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008dba:	4e52      	ldr	r6, [pc, #328]	; (8008f04 <HAL_DMA_Start_IT+0x328>)
 8008dbc:	42b4      	cmp	r4, r6
 8008dbe:	bf08      	it	eq
 8008dc0:	f047 0701 	orreq.w	r7, r7, #1
 8008dc4:	b917      	cbnz	r7, 8008dcc <HAL_DMA_Start_IT+0x1f0>
 8008dc6:	4f50      	ldr	r7, [pc, #320]	; (8008f08 <HAL_DMA_Start_IT+0x32c>)
 8008dc8:	42bc      	cmp	r4, r7
 8008dca:	d10b      	bne.n	8008de4 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008dcc:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8008dd0:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008dd2:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8008dd6:	b117      	cbz	r7, 8008dde <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008dd8:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8008ddc:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008dde:	f1b9 0f00 	cmp.w	r9, #0
 8008de2:	d183      	bne.n	8008cec <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008de4:	4f46      	ldr	r7, [pc, #280]	; (8008f00 <HAL_DMA_Start_IT+0x324>)
 8008de6:	f8df e114 	ldr.w	lr, [pc, #276]	; 8008efc <HAL_DMA_Start_IT+0x320>
 8008dea:	4574      	cmp	r4, lr
 8008dec:	bf18      	it	ne
 8008dee:	42bc      	cmpne	r4, r7
 8008df0:	f10e 0e14 	add.w	lr, lr, #20
 8008df4:	bf0c      	ite	eq
 8008df6:	2701      	moveq	r7, #1
 8008df8:	2700      	movne	r7, #0
 8008dfa:	4574      	cmp	r4, lr
 8008dfc:	bf08      	it	eq
 8008dfe:	f047 0701 	orreq.w	r7, r7, #1
 8008e02:	f10e 0e14 	add.w	lr, lr, #20
 8008e06:	4574      	cmp	r4, lr
 8008e08:	bf08      	it	eq
 8008e0a:	f047 0701 	orreq.w	r7, r7, #1
 8008e0e:	f10e 0e14 	add.w	lr, lr, #20
 8008e12:	4574      	cmp	r4, lr
 8008e14:	bf08      	it	eq
 8008e16:	f047 0701 	orreq.w	r7, r7, #1
 8008e1a:	f10e 0e14 	add.w	lr, lr, #20
 8008e1e:	4574      	cmp	r4, lr
 8008e20:	bf08      	it	eq
 8008e22:	f047 0701 	orreq.w	r7, r7, #1
 8008e26:	f10e 0e14 	add.w	lr, lr, #20
 8008e2a:	4574      	cmp	r4, lr
 8008e2c:	bf08      	it	eq
 8008e2e:	f047 0701 	orreq.w	r7, r7, #1
 8008e32:	b917      	cbnz	r7, 8008e3a <HAL_DMA_Start_IT+0x25e>
 8008e34:	4f34      	ldr	r7, [pc, #208]	; (8008f08 <HAL_DMA_Start_IT+0x32c>)
 8008e36:	42bc      	cmp	r4, r7
 8008e38:	d154      	bne.n	8008ee4 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008e3a:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8008e3e:	2701      	movs	r7, #1
 8008e40:	f000 0e1f 	and.w	lr, r0, #31
 8008e44:	fa07 f70e 	lsl.w	r7, r7, lr
 8008e48:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008e4c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e4e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d043      	beq.n	8008ede <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008e56:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008e58:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	f023 030e 	bic.w	r3, r3, #14
 8008e60:	f043 030a 	orr.w	r3, r3, #10
 8008e64:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008e66:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d02d      	beq.n	8008eca <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	f043 0304 	orr.w	r3, r3, #4
 8008e74:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e76:	4b21      	ldr	r3, [pc, #132]	; (8008efc <HAL_DMA_Start_IT+0x320>)
 8008e78:	4a21      	ldr	r2, [pc, #132]	; (8008f00 <HAL_DMA_Start_IT+0x324>)
 8008e7a:	4294      	cmp	r4, r2
 8008e7c:	bf18      	it	ne
 8008e7e:	429c      	cmpne	r4, r3
 8008e80:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008e84:	bf0c      	ite	eq
 8008e86:	2301      	moveq	r3, #1
 8008e88:	2300      	movne	r3, #0
 8008e8a:	4294      	cmp	r4, r2
 8008e8c:	bf08      	it	eq
 8008e8e:	f043 0301 	orreq.w	r3, r3, #1
 8008e92:	3214      	adds	r2, #20
 8008e94:	4294      	cmp	r4, r2
 8008e96:	bf08      	it	eq
 8008e98:	f043 0301 	orreq.w	r3, r3, #1
 8008e9c:	3214      	adds	r2, #20
 8008e9e:	4294      	cmp	r4, r2
 8008ea0:	bf08      	it	eq
 8008ea2:	f043 0301 	orreq.w	r3, r3, #1
 8008ea6:	3214      	adds	r2, #20
 8008ea8:	4294      	cmp	r4, r2
 8008eaa:	bf08      	it	eq
 8008eac:	f043 0301 	orreq.w	r3, r3, #1
 8008eb0:	3214      	adds	r2, #20
 8008eb2:	4294      	cmp	r4, r2
 8008eb4:	bf08      	it	eq
 8008eb6:	f043 0301 	orreq.w	r3, r3, #1
 8008eba:	3214      	adds	r2, #20
 8008ebc:	4294      	cmp	r4, r2
 8008ebe:	bf08      	it	eq
 8008ec0:	f043 0301 	orreq.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f43f af47 	beq.w	8008d58 <HAL_DMA_Start_IT+0x17c>
 8008eca:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8008ece:	e735      	b.n	8008d3c <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8008ed4:	2002      	movs	r0, #2
}
 8008ed6:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008ed8:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008eda:	60e1      	str	r1, [r4, #12]
 8008edc:	e71c      	b.n	8008d18 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ede:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ee0:	60e1      	str	r1, [r4, #12]
 8008ee2:	e7ba      	b.n	8008e5a <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	f023 030e 	bic.w	r3, r3, #14
 8008eea:	f043 030a 	orr.w	r3, r3, #10
 8008eee:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008ef0:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1ba      	bne.n	8008e6e <HAL_DMA_Start_IT+0x292>
 8008ef8:	e7bd      	b.n	8008e76 <HAL_DMA_Start_IT+0x29a>
 8008efa:	bf00      	nop
 8008efc:	5802541c 	.word	0x5802541c
 8008f00:	58025408 	.word	0x58025408
 8008f04:	58025480 	.word	0x58025480
 8008f08:	58025494 	.word	0x58025494

08008f0c <HAL_DMA_Abort>:
{
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8008f10:	f7fd fe04 	bl	8006b1c <HAL_GetTick>
  if(hdma == NULL)
 8008f14:	2d00      	cmp	r5, #0
 8008f16:	f000 8124 	beq.w	8009162 <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f1a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	f040 80dd 	bne.w	80090de <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f24:	682c      	ldr	r4, [r5, #0]
 8008f26:	4606      	mov	r6, r0
 8008f28:	4b8f      	ldr	r3, [pc, #572]	; (8009168 <HAL_DMA_Abort+0x25c>)
 8008f2a:	4890      	ldr	r0, [pc, #576]	; (800916c <HAL_DMA_Abort+0x260>)
 8008f2c:	4a90      	ldr	r2, [pc, #576]	; (8009170 <HAL_DMA_Abort+0x264>)
 8008f2e:	4284      	cmp	r4, r0
 8008f30:	bf18      	it	ne
 8008f32:	429c      	cmpne	r4, r3
 8008f34:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8008f38:	498e      	ldr	r1, [pc, #568]	; (8009174 <HAL_DMA_Abort+0x268>)
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2301      	moveq	r3, #1
 8008f3e:	2300      	movne	r3, #0
 8008f40:	4284      	cmp	r4, r0
 8008f42:	bf08      	it	eq
 8008f44:	f043 0301 	orreq.w	r3, r3, #1
 8008f48:	3018      	adds	r0, #24
 8008f4a:	4284      	cmp	r4, r0
 8008f4c:	bf08      	it	eq
 8008f4e:	f043 0301 	orreq.w	r3, r3, #1
 8008f52:	3018      	adds	r0, #24
 8008f54:	4284      	cmp	r4, r0
 8008f56:	bf08      	it	eq
 8008f58:	f043 0301 	orreq.w	r3, r3, #1
 8008f5c:	3018      	adds	r0, #24
 8008f5e:	4284      	cmp	r4, r0
 8008f60:	bf08      	it	eq
 8008f62:	f043 0301 	orreq.w	r3, r3, #1
 8008f66:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8008f6a:	4284      	cmp	r4, r0
 8008f6c:	bf08      	it	eq
 8008f6e:	f043 0301 	orreq.w	r3, r3, #1
 8008f72:	3018      	adds	r0, #24
 8008f74:	4284      	cmp	r4, r0
 8008f76:	bf08      	it	eq
 8008f78:	f043 0301 	orreq.w	r3, r3, #1
 8008f7c:	3018      	adds	r0, #24
 8008f7e:	4284      	cmp	r4, r0
 8008f80:	bf08      	it	eq
 8008f82:	f043 0301 	orreq.w	r3, r3, #1
 8008f86:	3018      	adds	r0, #24
 8008f88:	4284      	cmp	r4, r0
 8008f8a:	bf08      	it	eq
 8008f8c:	f043 0301 	orreq.w	r3, r3, #1
 8008f90:	3018      	adds	r0, #24
 8008f92:	4284      	cmp	r4, r0
 8008f94:	bf08      	it	eq
 8008f96:	f043 0301 	orreq.w	r3, r3, #1
 8008f9a:	3018      	adds	r0, #24
 8008f9c:	4284      	cmp	r4, r0
 8008f9e:	bf08      	it	eq
 8008fa0:	f043 0301 	orreq.w	r3, r3, #1
 8008fa4:	3018      	adds	r0, #24
 8008fa6:	4284      	cmp	r4, r0
 8008fa8:	bf08      	it	eq
 8008faa:	f043 0301 	orreq.w	r3, r3, #1
 8008fae:	3018      	adds	r0, #24
 8008fb0:	4284      	cmp	r4, r0
 8008fb2:	bf08      	it	eq
 8008fb4:	f043 0301 	orreq.w	r3, r3, #1
 8008fb8:	428c      	cmp	r4, r1
 8008fba:	bf18      	it	ne
 8008fbc:	4294      	cmpne	r4, r2
 8008fbe:	bf0c      	ite	eq
 8008fc0:	2201      	moveq	r2, #1
 8008fc2:	2200      	movne	r2, #0
 8008fc4:	d002      	beq.n	8008fcc <HAL_DMA_Abort+0xc0>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 8090 	beq.w	80090ec <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008fcc:	6821      	ldr	r1, [r4, #0]
 8008fce:	f021 011e 	bic.w	r1, r1, #30
 8008fd2:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008fd4:	6961      	ldr	r1, [r4, #20]
 8008fd6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008fda:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008fdc:	2a00      	cmp	r2, #0
 8008fde:	f000 80b0 	beq.w	8009142 <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008fe2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8008fe4:	6813      	ldr	r3, [r2, #0]
 8008fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fea:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	6023      	str	r3, [r4, #0]
 8008ff4:	e005      	b.n	8009002 <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ff6:	f7fd fd91 	bl	8006b1c <HAL_GetTick>
 8008ffa:	1b83      	subs	r3, r0, r6
 8008ffc:	2b05      	cmp	r3, #5
 8008ffe:	f200 80a6 	bhi.w	800914e <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	07db      	lsls	r3, r3, #31
 8009006:	d4f6      	bmi.n	8008ff6 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009008:	682a      	ldr	r2, [r5, #0]
 800900a:	4b57      	ldr	r3, [pc, #348]	; (8009168 <HAL_DMA_Abort+0x25c>)
 800900c:	4857      	ldr	r0, [pc, #348]	; (800916c <HAL_DMA_Abort+0x260>)
 800900e:	495a      	ldr	r1, [pc, #360]	; (8009178 <HAL_DMA_Abort+0x26c>)
 8009010:	4282      	cmp	r2, r0
 8009012:	bf18      	it	ne
 8009014:	429a      	cmpne	r2, r3
 8009016:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800901a:	bf0c      	ite	eq
 800901c:	2301      	moveq	r3, #1
 800901e:	2300      	movne	r3, #0
 8009020:	428a      	cmp	r2, r1
 8009022:	bf08      	it	eq
 8009024:	f043 0301 	orreq.w	r3, r3, #1
 8009028:	3130      	adds	r1, #48	; 0x30
 800902a:	4282      	cmp	r2, r0
 800902c:	bf08      	it	eq
 800902e:	f043 0301 	orreq.w	r3, r3, #1
 8009032:	3030      	adds	r0, #48	; 0x30
 8009034:	428a      	cmp	r2, r1
 8009036:	bf08      	it	eq
 8009038:	f043 0301 	orreq.w	r3, r3, #1
 800903c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009040:	4282      	cmp	r2, r0
 8009042:	bf08      	it	eq
 8009044:	f043 0301 	orreq.w	r3, r3, #1
 8009048:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800904c:	428a      	cmp	r2, r1
 800904e:	bf08      	it	eq
 8009050:	f043 0301 	orreq.w	r3, r3, #1
 8009054:	3130      	adds	r1, #48	; 0x30
 8009056:	4282      	cmp	r2, r0
 8009058:	bf08      	it	eq
 800905a:	f043 0301 	orreq.w	r3, r3, #1
 800905e:	3030      	adds	r0, #48	; 0x30
 8009060:	428a      	cmp	r2, r1
 8009062:	bf08      	it	eq
 8009064:	f043 0301 	orreq.w	r3, r3, #1
 8009068:	3130      	adds	r1, #48	; 0x30
 800906a:	4282      	cmp	r2, r0
 800906c:	bf08      	it	eq
 800906e:	f043 0301 	orreq.w	r3, r3, #1
 8009072:	3030      	adds	r0, #48	; 0x30
 8009074:	428a      	cmp	r2, r1
 8009076:	bf08      	it	eq
 8009078:	f043 0301 	orreq.w	r3, r3, #1
 800907c:	3130      	adds	r1, #48	; 0x30
 800907e:	4282      	cmp	r2, r0
 8009080:	bf08      	it	eq
 8009082:	f043 0301 	orreq.w	r3, r3, #1
 8009086:	428a      	cmp	r2, r1
 8009088:	bf08      	it	eq
 800908a:	f043 0301 	orreq.w	r3, r3, #1
 800908e:	3118      	adds	r1, #24
 8009090:	428a      	cmp	r2, r1
 8009092:	bf08      	it	eq
 8009094:	f043 0301 	orreq.w	r3, r3, #1
 8009098:	b933      	cbnz	r3, 80090a8 <HAL_DMA_Abort+0x19c>
 800909a:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800909e:	4b35      	ldr	r3, [pc, #212]	; (8009174 <HAL_DMA_Abort+0x268>)
 80090a0:	429a      	cmp	r2, r3
 80090a2:	bf18      	it	ne
 80090a4:	428a      	cmpne	r2, r1
 80090a6:	d16f      	bne.n	8009188 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80090a8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80090aa:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80090ac:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80090ae:	f002 021f 	and.w	r2, r2, #31
 80090b2:	4093      	lsls	r3, r2
 80090b4:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 80090b6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80090b8:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 80090bc:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80090be:	b133      	cbz	r3, 80090ce <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80090c0:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80090c2:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80090c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090ca:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80090cc:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 80090ce:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80090d0:	2201      	movs	r2, #1
  return HAL_OK;
 80090d2:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80090d4:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80090d8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 80090dc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090de:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80090e0:	2300      	movs	r3, #0
    return HAL_ERROR;
 80090e2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090e4:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80090e6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80090ec:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80090ee:	4923      	ldr	r1, [pc, #140]	; (800917c <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80090f0:	f022 020e 	bic.w	r2, r2, #14
 80090f4:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80090f6:	4a22      	ldr	r2, [pc, #136]	; (8009180 <HAL_DMA_Abort+0x274>)
 80090f8:	428c      	cmp	r4, r1
 80090fa:	bf18      	it	ne
 80090fc:	4294      	cmpne	r4, r2
 80090fe:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8009102:	bf0c      	ite	eq
 8009104:	2201      	moveq	r2, #1
 8009106:	2200      	movne	r2, #0
 8009108:	428c      	cmp	r4, r1
 800910a:	bf08      	it	eq
 800910c:	f042 0201 	orreq.w	r2, r2, #1
 8009110:	3114      	adds	r1, #20
 8009112:	428c      	cmp	r4, r1
 8009114:	bf08      	it	eq
 8009116:	f042 0201 	orreq.w	r2, r2, #1
 800911a:	3114      	adds	r1, #20
 800911c:	428c      	cmp	r4, r1
 800911e:	bf08      	it	eq
 8009120:	f042 0201 	orreq.w	r2, r2, #1
 8009124:	3114      	adds	r1, #20
 8009126:	428c      	cmp	r4, r1
 8009128:	bf08      	it	eq
 800912a:	f042 0201 	orreq.w	r2, r2, #1
 800912e:	3114      	adds	r1, #20
 8009130:	428c      	cmp	r4, r1
 8009132:	bf08      	it	eq
 8009134:	f042 0201 	orreq.w	r2, r2, #1
 8009138:	b91a      	cbnz	r2, 8009142 <HAL_DMA_Abort+0x236>
 800913a:	4a12      	ldr	r2, [pc, #72]	; (8009184 <HAL_DMA_Abort+0x278>)
 800913c:	4294      	cmp	r4, r2
 800913e:	f47f af55 	bne.w	8008fec <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009142:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009144:	680a      	ldr	r2, [r1, #0]
 8009146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800914a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800914c:	e74e      	b.n	8008fec <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800914e:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8009150:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8009152:	2300      	movs	r3, #0
        return HAL_ERROR;
 8009154:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009156:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8009158:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800915c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8009160:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009162:	2001      	movs	r0, #1
}
 8009164:	bd70      	pop	{r4, r5, r6, pc}
 8009166:	bf00      	nop
 8009168:	40020058 	.word	0x40020058
 800916c:	40020040 	.word	0x40020040
 8009170:	40020010 	.word	0x40020010
 8009174:	40020028 	.word	0x40020028
 8009178:	40020070 	.word	0x40020070
 800917c:	58025408 	.word	0x58025408
 8009180:	5802541c 	.word	0x5802541c
 8009184:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009188:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800918a:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800918c:	4b16      	ldr	r3, [pc, #88]	; (80091e8 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800918e:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009192:	4c16      	ldr	r4, [pc, #88]	; (80091ec <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009194:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009196:	42a2      	cmp	r2, r4
 8009198:	bf18      	it	ne
 800919a:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800919c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800919e:	bf0c      	ite	eq
 80091a0:	2301      	moveq	r3, #1
 80091a2:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80091a4:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091a6:	4812      	ldr	r0, [pc, #72]	; (80091f0 <HAL_DMA_Abort+0x2e4>)
 80091a8:	4912      	ldr	r1, [pc, #72]	; (80091f4 <HAL_DMA_Abort+0x2e8>)
 80091aa:	4282      	cmp	r2, r0
 80091ac:	bf08      	it	eq
 80091ae:	f043 0301 	orreq.w	r3, r3, #1
 80091b2:	3028      	adds	r0, #40	; 0x28
 80091b4:	428a      	cmp	r2, r1
 80091b6:	bf08      	it	eq
 80091b8:	f043 0301 	orreq.w	r3, r3, #1
 80091bc:	3128      	adds	r1, #40	; 0x28
 80091be:	4282      	cmp	r2, r0
 80091c0:	bf08      	it	eq
 80091c2:	f043 0301 	orreq.w	r3, r3, #1
 80091c6:	428a      	cmp	r2, r1
 80091c8:	bf08      	it	eq
 80091ca:	f043 0301 	orreq.w	r3, r3, #1
 80091ce:	3114      	adds	r1, #20
 80091d0:	428a      	cmp	r2, r1
 80091d2:	bf08      	it	eq
 80091d4:	f043 0301 	orreq.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f47f af6c 	bne.w	80090b6 <HAL_DMA_Abort+0x1aa>
 80091de:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <HAL_DMA_Abort+0x2ec>)
 80091e0:	429a      	cmp	r2, r3
 80091e2:	f43f af68 	beq.w	80090b6 <HAL_DMA_Abort+0x1aa>
 80091e6:	e772      	b.n	80090ce <HAL_DMA_Abort+0x1c2>
 80091e8:	5802541c 	.word	0x5802541c
 80091ec:	58025408 	.word	0x58025408
 80091f0:	58025430 	.word	0x58025430
 80091f4:	58025444 	.word	0x58025444
 80091f8:	58025494 	.word	0x58025494

080091fc <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d05f      	beq.n	80092c0 <HAL_DMA_Abort_IT+0xc4>
{
 8009200:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009202:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8009206:	4603      	mov	r3, r0
 8009208:	2a02      	cmp	r2, #2
 800920a:	d155      	bne.n	80092b8 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800920c:	6801      	ldr	r1, [r0, #0]
 800920e:	4a57      	ldr	r2, [pc, #348]	; (800936c <HAL_DMA_Abort_IT+0x170>)
 8009210:	4291      	cmp	r1, r2
 8009212:	d048      	beq.n	80092a6 <HAL_DMA_Abort_IT+0xaa>
 8009214:	3218      	adds	r2, #24
 8009216:	4291      	cmp	r1, r2
 8009218:	d045      	beq.n	80092a6 <HAL_DMA_Abort_IT+0xaa>
 800921a:	3230      	adds	r2, #48	; 0x30
 800921c:	4c54      	ldr	r4, [pc, #336]	; (8009370 <HAL_DMA_Abort_IT+0x174>)
 800921e:	4855      	ldr	r0, [pc, #340]	; (8009374 <HAL_DMA_Abort_IT+0x178>)
 8009220:	42a1      	cmp	r1, r4
 8009222:	bf18      	it	ne
 8009224:	4291      	cmpne	r1, r2
 8009226:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800922a:	bf0c      	ite	eq
 800922c:	2201      	moveq	r2, #1
 800922e:	2200      	movne	r2, #0
 8009230:	4281      	cmp	r1, r0
 8009232:	bf08      	it	eq
 8009234:	f042 0201 	orreq.w	r2, r2, #1
 8009238:	3030      	adds	r0, #48	; 0x30
 800923a:	42a1      	cmp	r1, r4
 800923c:	bf08      	it	eq
 800923e:	f042 0201 	orreq.w	r2, r2, #1
 8009242:	3430      	adds	r4, #48	; 0x30
 8009244:	4281      	cmp	r1, r0
 8009246:	bf08      	it	eq
 8009248:	f042 0201 	orreq.w	r2, r2, #1
 800924c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009250:	42a1      	cmp	r1, r4
 8009252:	bf08      	it	eq
 8009254:	f042 0201 	orreq.w	r2, r2, #1
 8009258:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800925c:	4281      	cmp	r1, r0
 800925e:	bf08      	it	eq
 8009260:	f042 0201 	orreq.w	r2, r2, #1
 8009264:	3030      	adds	r0, #48	; 0x30
 8009266:	42a1      	cmp	r1, r4
 8009268:	bf08      	it	eq
 800926a:	f042 0201 	orreq.w	r2, r2, #1
 800926e:	3430      	adds	r4, #48	; 0x30
 8009270:	4281      	cmp	r1, r0
 8009272:	bf08      	it	eq
 8009274:	f042 0201 	orreq.w	r2, r2, #1
 8009278:	3030      	adds	r0, #48	; 0x30
 800927a:	42a1      	cmp	r1, r4
 800927c:	bf08      	it	eq
 800927e:	f042 0201 	orreq.w	r2, r2, #1
 8009282:	3430      	adds	r4, #48	; 0x30
 8009284:	4281      	cmp	r1, r0
 8009286:	bf08      	it	eq
 8009288:	f042 0201 	orreq.w	r2, r2, #1
 800928c:	3030      	adds	r0, #48	; 0x30
 800928e:	42a1      	cmp	r1, r4
 8009290:	bf08      	it	eq
 8009292:	f042 0201 	orreq.w	r2, r2, #1
 8009296:	4281      	cmp	r1, r0
 8009298:	bf08      	it	eq
 800929a:	f042 0201 	orreq.w	r2, r2, #1
 800929e:	b912      	cbnz	r2, 80092a6 <HAL_DMA_Abort_IT+0xaa>
 80092a0:	4a35      	ldr	r2, [pc, #212]	; (8009378 <HAL_DMA_Abort_IT+0x17c>)
 80092a2:	4291      	cmp	r1, r2
 80092a4:	d10e      	bne.n	80092c4 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80092a6:	2204      	movs	r2, #4
  return HAL_OK;
 80092a8:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80092aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80092ae:	680b      	ldr	r3, [r1, #0]
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	600b      	str	r3, [r1, #0]
}
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092b8:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80092ba:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092bc:	655a      	str	r2, [r3, #84]	; 0x54
}
 80092be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80092c0:	2001      	movs	r0, #1
}
 80092c2:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092c4:	4a2d      	ldr	r2, [pc, #180]	; (800937c <HAL_DMA_Abort_IT+0x180>)
 80092c6:	4d2e      	ldr	r5, [pc, #184]	; (8009380 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80092c8:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092ca:	42a9      	cmp	r1, r5
 80092cc:	bf18      	it	ne
 80092ce:	4291      	cmpne	r1, r2
 80092d0:	4c2c      	ldr	r4, [pc, #176]	; (8009384 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80092d2:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092d6:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 80092da:	bf0c      	ite	eq
 80092dc:	2201      	moveq	r2, #1
 80092de:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80092e0:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092e2:	42a1      	cmp	r1, r4
 80092e4:	bf08      	it	eq
 80092e6:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80092ea:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092ec:	3428      	adds	r4, #40	; 0x28
 80092ee:	42a9      	cmp	r1, r5
 80092f0:	bf08      	it	eq
 80092f2:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80092f6:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092fa:	42a1      	cmp	r1, r4
 80092fc:	bf08      	it	eq
 80092fe:	f042 0201 	orreq.w	r2, r2, #1
 8009302:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8009304:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009306:	42a1      	cmp	r1, r4
 8009308:	bf08      	it	eq
 800930a:	f042 0201 	orreq.w	r2, r2, #1
 800930e:	481e      	ldr	r0, [pc, #120]	; (8009388 <HAL_DMA_Abort_IT+0x18c>)
 8009310:	4281      	cmp	r1, r0
 8009312:	bf08      	it	eq
 8009314:	f042 0201 	orreq.w	r2, r2, #1
 8009318:	b912      	cbnz	r2, 8009320 <HAL_DMA_Abort_IT+0x124>
 800931a:	4a1c      	ldr	r2, [pc, #112]	; (800938c <HAL_DMA_Abort_IT+0x190>)
 800931c:	4291      	cmp	r1, r2
 800931e:	d117      	bne.n	8009350 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009320:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009322:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009324:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009328:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800932a:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800932e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009332:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009334:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009336:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8009338:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800933a:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 800933e:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8009340:	b132      	cbz	r2, 8009350 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009342:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009344:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009348:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800934c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800934e:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8009350:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8009352:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8009354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8009356:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800935a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800935e:	b11a      	cbz	r2, 8009368 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8009360:	4618      	mov	r0, r3
 8009362:	4790      	blx	r2
  return HAL_OK;
 8009364:	4620      	mov	r0, r4
}
 8009366:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8009368:	4610      	mov	r0, r2
}
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	40020010 	.word	0x40020010
 8009370:	40020040 	.word	0x40020040
 8009374:	40020070 	.word	0x40020070
 8009378:	400204b8 	.word	0x400204b8
 800937c:	5802541c 	.word	0x5802541c
 8009380:	58025408 	.word	0x58025408
 8009384:	58025430 	.word	0x58025430
 8009388:	58025480 	.word	0x58025480
 800938c:	58025494 	.word	0x58025494

08009390 <HAL_DMA_IRQHandler>:
{
 8009390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8009394:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8009396:	4b9e      	ldr	r3, [pc, #632]	; (8009610 <HAL_DMA_IRQHandler+0x280>)
{
 8009398:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800939a:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 800939c:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800939e:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 80093a0:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80093a2:	6803      	ldr	r3, [r0, #0]
 80093a4:	4a9b      	ldr	r2, [pc, #620]	; (8009614 <HAL_DMA_IRQHandler+0x284>)
 80093a6:	489c      	ldr	r0, [pc, #624]	; (8009618 <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 80093a8:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80093aa:	4293      	cmp	r3, r2
 80093ac:	bf18      	it	ne
 80093ae:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 80093b0:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80093b2:	bf0c      	ite	eq
 80093b4:	2001      	moveq	r0, #1
 80093b6:	2000      	movne	r0, #0
 80093b8:	d04f      	beq.n	800945a <HAL_DMA_IRQHandler+0xca>
 80093ba:	3218      	adds	r2, #24
 80093bc:	f8df c260 	ldr.w	ip, [pc, #608]	; 8009620 <HAL_DMA_IRQHandler+0x290>
 80093c0:	4563      	cmp	r3, ip
 80093c2:	bf18      	it	ne
 80093c4:	4293      	cmpne	r3, r2
 80093c6:	f10c 0c18 	add.w	ip, ip, #24
 80093ca:	bf0c      	ite	eq
 80093cc:	2201      	moveq	r2, #1
 80093ce:	2200      	movne	r2, #0
 80093d0:	4563      	cmp	r3, ip
 80093d2:	bf08      	it	eq
 80093d4:	f042 0201 	orreq.w	r2, r2, #1
 80093d8:	f10c 0c18 	add.w	ip, ip, #24
 80093dc:	4563      	cmp	r3, ip
 80093de:	bf08      	it	eq
 80093e0:	f042 0201 	orreq.w	r2, r2, #1
 80093e4:	f10c 0c18 	add.w	ip, ip, #24
 80093e8:	4563      	cmp	r3, ip
 80093ea:	bf08      	it	eq
 80093ec:	f042 0201 	orreq.w	r2, r2, #1
 80093f0:	f10c 0c18 	add.w	ip, ip, #24
 80093f4:	4563      	cmp	r3, ip
 80093f6:	bf08      	it	eq
 80093f8:	f042 0201 	orreq.w	r2, r2, #1
 80093fc:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 8009400:	4563      	cmp	r3, ip
 8009402:	bf08      	it	eq
 8009404:	f042 0201 	orreq.w	r2, r2, #1
 8009408:	f10c 0c18 	add.w	ip, ip, #24
 800940c:	4563      	cmp	r3, ip
 800940e:	bf08      	it	eq
 8009410:	f042 0201 	orreq.w	r2, r2, #1
 8009414:	f10c 0c18 	add.w	ip, ip, #24
 8009418:	4563      	cmp	r3, ip
 800941a:	bf08      	it	eq
 800941c:	f042 0201 	orreq.w	r2, r2, #1
 8009420:	f10c 0c18 	add.w	ip, ip, #24
 8009424:	4563      	cmp	r3, ip
 8009426:	bf08      	it	eq
 8009428:	f042 0201 	orreq.w	r2, r2, #1
 800942c:	f10c 0c18 	add.w	ip, ip, #24
 8009430:	4563      	cmp	r3, ip
 8009432:	bf08      	it	eq
 8009434:	f042 0201 	orreq.w	r2, r2, #1
 8009438:	f10c 0c18 	add.w	ip, ip, #24
 800943c:	4563      	cmp	r3, ip
 800943e:	bf08      	it	eq
 8009440:	f042 0201 	orreq.w	r2, r2, #1
 8009444:	f10c 0c18 	add.w	ip, ip, #24
 8009448:	4563      	cmp	r3, ip
 800944a:	bf08      	it	eq
 800944c:	f042 0201 	orreq.w	r2, r2, #1
 8009450:	b91a      	cbnz	r2, 800945a <HAL_DMA_IRQHandler+0xca>
 8009452:	4a72      	ldr	r2, [pc, #456]	; (800961c <HAL_DMA_IRQHandler+0x28c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	f040 824b 	bne.w	80098f0 <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800945a:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 800945c:	2208      	movs	r2, #8
 800945e:	f001 0c1f 	and.w	ip, r1, #31
 8009462:	fa02 f20c 	lsl.w	r2, r2, ip
 8009466:	4217      	tst	r7, r2
 8009468:	f040 817d 	bne.w	8009766 <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800946c:	fa27 f20c 	lsr.w	r2, r7, ip
 8009470:	07d2      	lsls	r2, r2, #31
 8009472:	d50a      	bpl.n	800948a <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009474:	695a      	ldr	r2, [r3, #20]
 8009476:	0612      	lsls	r2, r2, #24
 8009478:	d507      	bpl.n	800948a <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800947a:	2201      	movs	r2, #1
 800947c:	fa02 f20c 	lsl.w	r2, r2, ip
 8009480:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009482:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009484:	f042 0202 	orr.w	r2, r2, #2
 8009488:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800948a:	f04f 0e04 	mov.w	lr, #4
 800948e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009492:	ea1e 0f07 	tst.w	lr, r7
 8009496:	d05a      	beq.n	800954e <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009498:	2800      	cmp	r0, #0
 800949a:	d14f      	bne.n	800953c <HAL_DMA_IRQHandler+0x1ac>
 800949c:	4a60      	ldr	r2, [pc, #384]	; (8009620 <HAL_DMA_IRQHandler+0x290>)
 800949e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8009624 <HAL_DMA_IRQHandler+0x294>
 80094a2:	4543      	cmp	r3, r8
 80094a4:	bf18      	it	ne
 80094a6:	4293      	cmpne	r3, r2
 80094a8:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80094ac:	bf0c      	ite	eq
 80094ae:	2201      	moveq	r2, #1
 80094b0:	2200      	movne	r2, #0
 80094b2:	4543      	cmp	r3, r8
 80094b4:	bf08      	it	eq
 80094b6:	f042 0201 	orreq.w	r2, r2, #1
 80094ba:	f108 0818 	add.w	r8, r8, #24
 80094be:	4543      	cmp	r3, r8
 80094c0:	bf08      	it	eq
 80094c2:	f042 0201 	orreq.w	r2, r2, #1
 80094c6:	f108 0818 	add.w	r8, r8, #24
 80094ca:	4543      	cmp	r3, r8
 80094cc:	bf08      	it	eq
 80094ce:	f042 0201 	orreq.w	r2, r2, #1
 80094d2:	f108 0818 	add.w	r8, r8, #24
 80094d6:	4543      	cmp	r3, r8
 80094d8:	bf08      	it	eq
 80094da:	f042 0201 	orreq.w	r2, r2, #1
 80094de:	f508 7856 	add.w	r8, r8, #856	; 0x358
 80094e2:	4543      	cmp	r3, r8
 80094e4:	bf08      	it	eq
 80094e6:	f042 0201 	orreq.w	r2, r2, #1
 80094ea:	f108 0818 	add.w	r8, r8, #24
 80094ee:	4543      	cmp	r3, r8
 80094f0:	bf08      	it	eq
 80094f2:	f042 0201 	orreq.w	r2, r2, #1
 80094f6:	f108 0818 	add.w	r8, r8, #24
 80094fa:	4543      	cmp	r3, r8
 80094fc:	bf08      	it	eq
 80094fe:	f042 0201 	orreq.w	r2, r2, #1
 8009502:	f108 0818 	add.w	r8, r8, #24
 8009506:	4543      	cmp	r3, r8
 8009508:	bf08      	it	eq
 800950a:	f042 0201 	orreq.w	r2, r2, #1
 800950e:	f108 0818 	add.w	r8, r8, #24
 8009512:	4543      	cmp	r3, r8
 8009514:	bf08      	it	eq
 8009516:	f042 0201 	orreq.w	r2, r2, #1
 800951a:	f108 0818 	add.w	r8, r8, #24
 800951e:	4543      	cmp	r3, r8
 8009520:	bf08      	it	eq
 8009522:	f042 0201 	orreq.w	r2, r2, #1
 8009526:	f108 0818 	add.w	r8, r8, #24
 800952a:	4543      	cmp	r3, r8
 800952c:	bf08      	it	eq
 800952e:	f042 0201 	orreq.w	r2, r2, #1
 8009532:	b91a      	cbnz	r2, 800953c <HAL_DMA_IRQHandler+0x1ac>
 8009534:	4a39      	ldr	r2, [pc, #228]	; (800961c <HAL_DMA_IRQHandler+0x28c>)
 8009536:	4293      	cmp	r3, r2
 8009538:	f040 8214 	bne.w	8009964 <HAL_DMA_IRQHandler+0x5d4>
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	0792      	lsls	r2, r2, #30
 8009540:	d505      	bpl.n	800954e <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009542:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009546:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009548:	f042 0204 	orr.w	r2, r2, #4
 800954c:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800954e:	2210      	movs	r2, #16
 8009550:	fa02 fc0c 	lsl.w	ip, r2, ip
 8009554:	ea1c 0f07 	tst.w	ip, r7
 8009558:	d069      	beq.n	800962e <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800955a:	2800      	cmp	r0, #0
 800955c:	d145      	bne.n	80095ea <HAL_DMA_IRQHandler+0x25a>
 800955e:	4a30      	ldr	r2, [pc, #192]	; (8009620 <HAL_DMA_IRQHandler+0x290>)
 8009560:	4830      	ldr	r0, [pc, #192]	; (8009624 <HAL_DMA_IRQHandler+0x294>)
 8009562:	4283      	cmp	r3, r0
 8009564:	bf18      	it	ne
 8009566:	4293      	cmpne	r3, r2
 8009568:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800956c:	bf0c      	ite	eq
 800956e:	2201      	moveq	r2, #1
 8009570:	2200      	movne	r2, #0
 8009572:	4283      	cmp	r3, r0
 8009574:	bf08      	it	eq
 8009576:	f042 0201 	orreq.w	r2, r2, #1
 800957a:	3018      	adds	r0, #24
 800957c:	4283      	cmp	r3, r0
 800957e:	bf08      	it	eq
 8009580:	f042 0201 	orreq.w	r2, r2, #1
 8009584:	3018      	adds	r0, #24
 8009586:	4283      	cmp	r3, r0
 8009588:	bf08      	it	eq
 800958a:	f042 0201 	orreq.w	r2, r2, #1
 800958e:	3018      	adds	r0, #24
 8009590:	4283      	cmp	r3, r0
 8009592:	bf08      	it	eq
 8009594:	f042 0201 	orreq.w	r2, r2, #1
 8009598:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800959c:	4283      	cmp	r3, r0
 800959e:	bf08      	it	eq
 80095a0:	f042 0201 	orreq.w	r2, r2, #1
 80095a4:	3018      	adds	r0, #24
 80095a6:	4283      	cmp	r3, r0
 80095a8:	bf08      	it	eq
 80095aa:	f042 0201 	orreq.w	r2, r2, #1
 80095ae:	3018      	adds	r0, #24
 80095b0:	4283      	cmp	r3, r0
 80095b2:	bf08      	it	eq
 80095b4:	f042 0201 	orreq.w	r2, r2, #1
 80095b8:	3018      	adds	r0, #24
 80095ba:	4283      	cmp	r3, r0
 80095bc:	bf08      	it	eq
 80095be:	f042 0201 	orreq.w	r2, r2, #1
 80095c2:	3018      	adds	r0, #24
 80095c4:	4283      	cmp	r3, r0
 80095c6:	bf08      	it	eq
 80095c8:	f042 0201 	orreq.w	r2, r2, #1
 80095cc:	3018      	adds	r0, #24
 80095ce:	4283      	cmp	r3, r0
 80095d0:	bf08      	it	eq
 80095d2:	f042 0201 	orreq.w	r2, r2, #1
 80095d6:	3018      	adds	r0, #24
 80095d8:	4283      	cmp	r3, r0
 80095da:	bf08      	it	eq
 80095dc:	f042 0201 	orreq.w	r2, r2, #1
 80095e0:	b91a      	cbnz	r2, 80095ea <HAL_DMA_IRQHandler+0x25a>
 80095e2:	4a0e      	ldr	r2, [pc, #56]	; (800961c <HAL_DMA_IRQHandler+0x28c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	f040 81c5 	bne.w	8009974 <HAL_DMA_IRQHandler+0x5e4>
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	0712      	lsls	r2, r2, #28
 80095ee:	d51e      	bpl.n	800962e <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095f0:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	0352      	lsls	r2, r2, #13
 80095f8:	f100 814e 	bmi.w	8009898 <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	05d2      	lsls	r2, r2, #23
 8009600:	d403      	bmi.n	800960a <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	f022 0208 	bic.w	r2, r2, #8
 8009608:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800960a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800960c:	b17b      	cbz	r3, 800962e <HAL_DMA_IRQHandler+0x29e>
 800960e:	e00b      	b.n	8009628 <HAL_DMA_IRQHandler+0x298>
 8009610:	24000310 	.word	0x24000310
 8009614:	40020028 	.word	0x40020028
 8009618:	40020010 	.word	0x40020010
 800961c:	400204b8 	.word	0x400204b8
 8009620:	40020058 	.word	0x40020058
 8009624:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8009628:	4630      	mov	r0, r6
 800962a:	4798      	blx	r3
 800962c:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800962e:	f001 011f 	and.w	r1, r1, #31
 8009632:	2020      	movs	r0, #32
 8009634:	4088      	lsls	r0, r1
 8009636:	4238      	tst	r0, r7
 8009638:	d066      	beq.n	8009708 <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800963a:	6832      	ldr	r2, [r6, #0]
 800963c:	4ba4      	ldr	r3, [pc, #656]	; (80098d0 <HAL_DMA_IRQHandler+0x540>)
 800963e:	4fa5      	ldr	r7, [pc, #660]	; (80098d4 <HAL_DMA_IRQHandler+0x544>)
 8009640:	42ba      	cmp	r2, r7
 8009642:	bf18      	it	ne
 8009644:	429a      	cmpne	r2, r3
 8009646:	f107 0718 	add.w	r7, r7, #24
 800964a:	bf0c      	ite	eq
 800964c:	2301      	moveq	r3, #1
 800964e:	2300      	movne	r3, #0
 8009650:	42ba      	cmp	r2, r7
 8009652:	bf08      	it	eq
 8009654:	f043 0301 	orreq.w	r3, r3, #1
 8009658:	3718      	adds	r7, #24
 800965a:	42ba      	cmp	r2, r7
 800965c:	bf08      	it	eq
 800965e:	f043 0301 	orreq.w	r3, r3, #1
 8009662:	3718      	adds	r7, #24
 8009664:	42ba      	cmp	r2, r7
 8009666:	bf08      	it	eq
 8009668:	f043 0301 	orreq.w	r3, r3, #1
 800966c:	3718      	adds	r7, #24
 800966e:	42ba      	cmp	r2, r7
 8009670:	bf08      	it	eq
 8009672:	f043 0301 	orreq.w	r3, r3, #1
 8009676:	3718      	adds	r7, #24
 8009678:	42ba      	cmp	r2, r7
 800967a:	bf08      	it	eq
 800967c:	f043 0301 	orreq.w	r3, r3, #1
 8009680:	3718      	adds	r7, #24
 8009682:	42ba      	cmp	r2, r7
 8009684:	bf08      	it	eq
 8009686:	f043 0301 	orreq.w	r3, r3, #1
 800968a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800968e:	42ba      	cmp	r2, r7
 8009690:	bf08      	it	eq
 8009692:	f043 0301 	orreq.w	r3, r3, #1
 8009696:	3718      	adds	r7, #24
 8009698:	42ba      	cmp	r2, r7
 800969a:	bf08      	it	eq
 800969c:	f043 0301 	orreq.w	r3, r3, #1
 80096a0:	3718      	adds	r7, #24
 80096a2:	42ba      	cmp	r2, r7
 80096a4:	bf08      	it	eq
 80096a6:	f043 0301 	orreq.w	r3, r3, #1
 80096aa:	3718      	adds	r7, #24
 80096ac:	42ba      	cmp	r2, r7
 80096ae:	bf08      	it	eq
 80096b0:	f043 0301 	orreq.w	r3, r3, #1
 80096b4:	3718      	adds	r7, #24
 80096b6:	42ba      	cmp	r2, r7
 80096b8:	bf08      	it	eq
 80096ba:	f043 0301 	orreq.w	r3, r3, #1
 80096be:	3718      	adds	r7, #24
 80096c0:	42ba      	cmp	r2, r7
 80096c2:	bf08      	it	eq
 80096c4:	f043 0301 	orreq.w	r3, r3, #1
 80096c8:	3718      	adds	r7, #24
 80096ca:	42ba      	cmp	r2, r7
 80096cc:	bf08      	it	eq
 80096ce:	f043 0301 	orreq.w	r3, r3, #1
 80096d2:	b91b      	cbnz	r3, 80096dc <HAL_DMA_IRQHandler+0x34c>
 80096d4:	4b80      	ldr	r3, [pc, #512]	; (80098d8 <HAL_DMA_IRQHandler+0x548>)
 80096d6:	429a      	cmp	r2, r3
 80096d8:	f040 8161 	bne.w	800999e <HAL_DMA_IRQHandler+0x60e>
 80096dc:	6813      	ldr	r3, [r2, #0]
 80096de:	06df      	lsls	r7, r3, #27
 80096e0:	d512      	bpl.n	8009708 <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80096e2:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80096e4:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 80096e8:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80096ea:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80096ec:	f000 80b6 	beq.w	800985c <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80096f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80096f4:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80096f6:	f000 80d8 	beq.w	80098aa <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80096fa:	031f      	lsls	r7, r3, #12
 80096fc:	f140 80e3 	bpl.w	80098c6 <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 8009700:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8009702:	b10b      	cbz	r3, 8009708 <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 8009704:	4630      	mov	r0, r6
 8009706:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009708:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 80c1 	beq.w	8009892 <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009710:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009712:	07dc      	lsls	r4, r3, #31
 8009714:	d51e      	bpl.n	8009754 <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 8009716:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8009718:	2104      	movs	r1, #4
 800971a:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 800971e:	496f      	ldr	r1, [pc, #444]	; (80098dc <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 8009720:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009722:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 8009726:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800972a:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 800972c:	6013      	str	r3, [r2, #0]
 800972e:	e002      	b.n	8009736 <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009730:	6813      	ldr	r3, [r2, #0]
 8009732:	07d8      	lsls	r0, r3, #31
 8009734:	d504      	bpl.n	8009740 <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 8009736:	9b01      	ldr	r3, [sp, #4]
 8009738:	3301      	adds	r3, #1
 800973a:	428b      	cmp	r3, r1
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	d9f7      	bls.n	8009730 <HAL_DMA_IRQHandler+0x3a0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009740:	6813      	ldr	r3, [r2, #0]
 8009742:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8009744:	bf4c      	ite	mi
 8009746:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8009748:	2301      	movpl	r3, #1
 800974a:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800974e:	2300      	movs	r3, #0
 8009750:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8009754:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 809b 	beq.w	8009892 <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 800975c:	4630      	mov	r0, r6
}
 800975e:	b002      	add	sp, #8
 8009760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8009764:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009766:	f8d3 e000 	ldr.w	lr, [r3]
 800976a:	f01e 0f04 	tst.w	lr, #4
 800976e:	d00a      	beq.n	8009786 <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009770:	f8d3 e000 	ldr.w	lr, [r3]
 8009774:	f02e 0e04 	bic.w	lr, lr, #4
 8009778:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800977c:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800977e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009780:	f042 0201 	orr.w	r2, r2, #1
 8009784:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009786:	fa27 f20c 	lsr.w	r2, r7, ip
 800978a:	07d2      	lsls	r2, r2, #31
 800978c:	f57f ae7d 	bpl.w	800948a <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009790:	4a53      	ldr	r2, [pc, #332]	; (80098e0 <HAL_DMA_IRQHandler+0x550>)
 8009792:	f8df e150 	ldr.w	lr, [pc, #336]	; 80098e4 <HAL_DMA_IRQHandler+0x554>
 8009796:	4573      	cmp	r3, lr
 8009798:	bf18      	it	ne
 800979a:	4293      	cmpne	r3, r2
 800979c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80097a0:	bf0c      	ite	eq
 80097a2:	2201      	moveq	r2, #1
 80097a4:	2200      	movne	r2, #0
 80097a6:	4573      	cmp	r3, lr
 80097a8:	bf08      	it	eq
 80097aa:	f042 0201 	orreq.w	r2, r2, #1
 80097ae:	f10e 0e18 	add.w	lr, lr, #24
 80097b2:	4573      	cmp	r3, lr
 80097b4:	bf08      	it	eq
 80097b6:	f042 0201 	orreq.w	r2, r2, #1
 80097ba:	f10e 0e18 	add.w	lr, lr, #24
 80097be:	4573      	cmp	r3, lr
 80097c0:	bf08      	it	eq
 80097c2:	f042 0201 	orreq.w	r2, r2, #1
 80097c6:	f10e 0e18 	add.w	lr, lr, #24
 80097ca:	4573      	cmp	r3, lr
 80097cc:	bf08      	it	eq
 80097ce:	f042 0201 	orreq.w	r2, r2, #1
 80097d2:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 80097d6:	4573      	cmp	r3, lr
 80097d8:	bf08      	it	eq
 80097da:	f042 0201 	orreq.w	r2, r2, #1
 80097de:	f10e 0e18 	add.w	lr, lr, #24
 80097e2:	4573      	cmp	r3, lr
 80097e4:	bf08      	it	eq
 80097e6:	f042 0201 	orreq.w	r2, r2, #1
 80097ea:	f10e 0e18 	add.w	lr, lr, #24
 80097ee:	4573      	cmp	r3, lr
 80097f0:	bf08      	it	eq
 80097f2:	f042 0201 	orreq.w	r2, r2, #1
 80097f6:	f10e 0e18 	add.w	lr, lr, #24
 80097fa:	4573      	cmp	r3, lr
 80097fc:	bf08      	it	eq
 80097fe:	f042 0201 	orreq.w	r2, r2, #1
 8009802:	f10e 0e18 	add.w	lr, lr, #24
 8009806:	4573      	cmp	r3, lr
 8009808:	bf08      	it	eq
 800980a:	f042 0201 	orreq.w	r2, r2, #1
 800980e:	f10e 0e18 	add.w	lr, lr, #24
 8009812:	4573      	cmp	r3, lr
 8009814:	bf08      	it	eq
 8009816:	f042 0201 	orreq.w	r2, r2, #1
 800981a:	f10e 0e18 	add.w	lr, lr, #24
 800981e:	4573      	cmp	r3, lr
 8009820:	bf08      	it	eq
 8009822:	f042 0201 	orreq.w	r2, r2, #1
 8009826:	f10e 0e18 	add.w	lr, lr, #24
 800982a:	4573      	cmp	r3, lr
 800982c:	bf08      	it	eq
 800982e:	f042 0201 	orreq.w	r2, r2, #1
 8009832:	2a00      	cmp	r2, #0
 8009834:	f47f ae1e 	bne.w	8009474 <HAL_DMA_IRQHandler+0xe4>
 8009838:	2800      	cmp	r0, #0
 800983a:	f47f ae1b 	bne.w	8009474 <HAL_DMA_IRQHandler+0xe4>
 800983e:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009840:	2204      	movs	r2, #4
 8009842:	fa02 f20c 	lsl.w	r2, r2, ip
 8009846:	423a      	tst	r2, r7
 8009848:	f040 808c 	bne.w	8009964 <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800984c:	2210      	movs	r2, #16
 800984e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8009852:	ea17 0f0c 	tst.w	r7, ip
 8009856:	f43f aeea 	beq.w	800962e <HAL_DMA_IRQHandler+0x29e>
 800985a:	e680      	b.n	800955e <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800985c:	f023 0316 	bic.w	r3, r3, #22
 8009860:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009862:	6953      	ldr	r3, [r2, #20]
 8009864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009868:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800986a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800986c:	2b00      	cmp	r3, #0
 800986e:	d03b      	beq.n	80098e8 <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009870:	6813      	ldr	r3, [r2, #0]
 8009872:	f023 0308 	bic.w	r3, r3, #8
 8009876:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009878:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800987a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 800987c:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800987e:	408b      	lsls	r3, r1
 8009880:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 8009882:	6d33      	ldr	r3, [r6, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8009884:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8009888:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 800988c:	2b00      	cmp	r3, #0
 800988e:	f47f af65 	bne.w	800975c <HAL_DMA_IRQHandler+0x3cc>
}
 8009892:	b002      	add	sp, #8
 8009894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	0318      	lsls	r0, r3, #12
 800989c:	f57f aeb5 	bpl.w	800960a <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80098a0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f47f aec0 	bne.w	8009628 <HAL_DMA_IRQHandler+0x298>
 80098a8:	e6c1      	b.n	800962e <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80098aa:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80098ae:	f47f af27 	bne.w	8009700 <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80098b2:	6811      	ldr	r1, [r2, #0]
 80098b4:	f021 0110 	bic.w	r1, r1, #16
 80098b8:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80098ba:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 80098bc:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80098c0:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80098c4:	e71c      	b.n	8009700 <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 80098c6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f47f af1b 	bne.w	8009704 <HAL_DMA_IRQHandler+0x374>
 80098ce:	e71b      	b.n	8009708 <HAL_DMA_IRQHandler+0x378>
 80098d0:	40020010 	.word	0x40020010
 80098d4:	40020028 	.word	0x40020028
 80098d8:	400204b8 	.word	0x400204b8
 80098dc:	1b4e81b5 	.word	0x1b4e81b5
 80098e0:	40020058 	.word	0x40020058
 80098e4:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80098e8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1c0      	bne.n	8009870 <HAL_DMA_IRQHandler+0x4e0>
 80098ee:	e7c3      	b.n	8009878 <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80098f0:	4a4b      	ldr	r2, [pc, #300]	; (8009a20 <HAL_DMA_IRQHandler+0x690>)
 80098f2:	484c      	ldr	r0, [pc, #304]	; (8009a24 <HAL_DMA_IRQHandler+0x694>)
 80098f4:	4283      	cmp	r3, r0
 80098f6:	bf18      	it	ne
 80098f8:	4293      	cmpne	r3, r2
 80098fa:	f100 0014 	add.w	r0, r0, #20
 80098fe:	bf0c      	ite	eq
 8009900:	2201      	moveq	r2, #1
 8009902:	2200      	movne	r2, #0
 8009904:	4283      	cmp	r3, r0
 8009906:	bf08      	it	eq
 8009908:	f042 0201 	orreq.w	r2, r2, #1
 800990c:	3014      	adds	r0, #20
 800990e:	4283      	cmp	r3, r0
 8009910:	bf08      	it	eq
 8009912:	f042 0201 	orreq.w	r2, r2, #1
 8009916:	3014      	adds	r0, #20
 8009918:	4283      	cmp	r3, r0
 800991a:	bf08      	it	eq
 800991c:	f042 0201 	orreq.w	r2, r2, #1
 8009920:	3014      	adds	r0, #20
 8009922:	4283      	cmp	r3, r0
 8009924:	bf08      	it	eq
 8009926:	f042 0201 	orreq.w	r2, r2, #1
 800992a:	3014      	adds	r0, #20
 800992c:	4283      	cmp	r3, r0
 800992e:	bf08      	it	eq
 8009930:	f042 0201 	orreq.w	r2, r2, #1
 8009934:	b912      	cbnz	r2, 800993c <HAL_DMA_IRQHandler+0x5ac>
 8009936:	4a3c      	ldr	r2, [pc, #240]	; (8009a28 <HAL_DMA_IRQHandler+0x698>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d1aa      	bne.n	8009892 <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800993c:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 800993e:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009940:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009942:	f000 001f 	and.w	r0, r0, #31
 8009946:	4085      	lsls	r5, r0
 8009948:	420d      	tst	r5, r1
 800994a:	d018      	beq.n	800997e <HAL_DMA_IRQHandler+0x5ee>
 800994c:	0757      	lsls	r7, r2, #29
 800994e:	d516      	bpl.n	800997e <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009950:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009952:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009954:	d547      	bpl.n	80099e6 <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009956:	03d1      	lsls	r1, r2, #15
 8009958:	d44b      	bmi.n	80099f2 <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800995a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800995c:	2b00      	cmp	r3, #0
 800995e:	f47f aefd 	bne.w	800975c <HAL_DMA_IRQHandler+0x3cc>
 8009962:	e796      	b.n	8009892 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009964:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009966:	2210      	movs	r2, #16
 8009968:	fa02 fc0c 	lsl.w	ip, r2, ip
 800996c:	ea17 0f0c 	tst.w	r7, ip
 8009970:	f43f ae5d 	beq.w	800962e <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	0750      	lsls	r0, r2, #29
 8009978:	f57f ae59 	bpl.w	800962e <HAL_DMA_IRQHandler+0x29e>
 800997c:	e638      	b.n	80095f0 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800997e:	2502      	movs	r5, #2
 8009980:	4085      	lsls	r5, r0
 8009982:	420d      	tst	r5, r1
 8009984:	d010      	beq.n	80099a8 <HAL_DMA_IRQHandler+0x618>
 8009986:	0797      	lsls	r7, r2, #30
 8009988:	d50e      	bpl.n	80099a8 <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800998a:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800998c:	0414      	lsls	r4, r2, #16
 800998e:	d535      	bpl.n	80099fc <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009990:	03d0      	lsls	r0, r2, #15
 8009992:	d43f      	bmi.n	8009a14 <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 8009994:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8009996:	2b00      	cmp	r3, #0
 8009998:	f47f aee0 	bne.w	800975c <HAL_DMA_IRQHandler+0x3cc>
 800999c:	e779      	b.n	8009892 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800999e:	6813      	ldr	r3, [r2, #0]
 80099a0:	079b      	lsls	r3, r3, #30
 80099a2:	f57f aeb1 	bpl.w	8009708 <HAL_DMA_IRQHandler+0x378>
 80099a6:	e69c      	b.n	80096e2 <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80099a8:	2508      	movs	r5, #8
 80099aa:	4085      	lsls	r5, r0
 80099ac:	420d      	tst	r5, r1
 80099ae:	f43f af70 	beq.w	8009892 <HAL_DMA_IRQHandler+0x502>
 80099b2:	0711      	lsls	r1, r2, #28
 80099b4:	f57f af6d 	bpl.w	8009892 <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099b8:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 80099ba:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099bc:	f022 020e 	bic.w	r2, r2, #14
 80099c0:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80099c2:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 80099c4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80099c6:	fa03 f000 	lsl.w	r0, r3, r0
 80099ca:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80099cc:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80099ce:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80099d2:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	f43f af5b 	beq.w	8009892 <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 80099dc:	4630      	mov	r0, r6
}
 80099de:	b002      	add	sp, #8
 80099e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80099e4:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80099e6:	0692      	lsls	r2, r2, #26
 80099e8:	d403      	bmi.n	80099f2 <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	f022 0204 	bic.w	r2, r2, #4
 80099f0:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80099f2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f47f aeb1 	bne.w	800975c <HAL_DMA_IRQHandler+0x3cc>
 80099fa:	e74a      	b.n	8009892 <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80099fc:	f012 0220 	ands.w	r2, r2, #32
 8009a00:	d108      	bne.n	8009a14 <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009a02:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009a04:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009a06:	f021 010a 	bic.w	r1, r1, #10
 8009a0a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009a0c:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8009a10:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8009a14:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f47f aea0 	bne.w	800975c <HAL_DMA_IRQHandler+0x3cc>
 8009a1c:	e739      	b.n	8009892 <HAL_DMA_IRQHandler+0x502>
 8009a1e:	bf00      	nop
 8009a20:	58025408 	.word	0x58025408
 8009a24:	5802541c 	.word	0x5802541c
 8009a28:	58025494 	.word	0x58025494

08009a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009a30:	680c      	ldr	r4, [r1, #0]
{
 8009a32:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009a34:	2c00      	cmp	r4, #0
 8009a36:	f000 80a7 	beq.w	8009b88 <HAL_GPIO_Init+0x15c>
 8009a3a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a3e:	4f8a      	ldr	r7, [pc, #552]	; (8009c68 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 8009a40:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009a42:	2201      	movs	r2, #1
 8009a44:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8009a46:	ea12 0e04 	ands.w	lr, r2, r4
 8009a4a:	f000 8096 	beq.w	8009b7a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009a4e:	684d      	ldr	r5, [r1, #4]
 8009a50:	f005 0903 	and.w	r9, r5, #3
 8009a54:	f109 36ff 	add.w	r6, r9, #4294967295
 8009a58:	2e01      	cmp	r6, #1
 8009a5a:	f240 8098 	bls.w	8009b8e <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a5e:	f1b9 0f03 	cmp.w	r9, #3
 8009a62:	f040 80d2 	bne.w	8009c0a <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009a66:	fa09 f20c 	lsl.w	r2, r9, ip
 8009a6a:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8009a6e:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a70:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009a74:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a78:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8009a7c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a7e:	d07c      	beq.n	8009b7a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a80:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8009a84:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009a88:	f003 0903 	and.w	r9, r3, #3
 8009a8c:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a8e:	f042 0202 	orr.w	r2, r2, #2
 8009a92:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009a96:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a9a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009a9e:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8009aa2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009aa6:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009aaa:	f002 0202 	and.w	r2, r2, #2
 8009aae:	9201      	str	r2, [sp, #4]
 8009ab0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009ab2:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009ab6:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009aba:	4e6c      	ldr	r6, [pc, #432]	; (8009c6c <HAL_GPIO_Init+0x240>)
 8009abc:	42b0      	cmp	r0, r6
 8009abe:	d028      	beq.n	8009b12 <HAL_GPIO_Init+0xe6>
 8009ac0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009ac4:	42b0      	cmp	r0, r6
 8009ac6:	f000 80ac 	beq.w	8009c22 <HAL_GPIO_Init+0x1f6>
 8009aca:	4e69      	ldr	r6, [pc, #420]	; (8009c70 <HAL_GPIO_Init+0x244>)
 8009acc:	42b0      	cmp	r0, r6
 8009ace:	f000 80ad 	beq.w	8009c2c <HAL_GPIO_Init+0x200>
 8009ad2:	4e68      	ldr	r6, [pc, #416]	; (8009c74 <HAL_GPIO_Init+0x248>)
 8009ad4:	42b0      	cmp	r0, r6
 8009ad6:	f000 809f 	beq.w	8009c18 <HAL_GPIO_Init+0x1ec>
 8009ada:	4e67      	ldr	r6, [pc, #412]	; (8009c78 <HAL_GPIO_Init+0x24c>)
 8009adc:	42b0      	cmp	r0, r6
 8009ade:	f000 80af 	beq.w	8009c40 <HAL_GPIO_Init+0x214>
 8009ae2:	4e66      	ldr	r6, [pc, #408]	; (8009c7c <HAL_GPIO_Init+0x250>)
 8009ae4:	42b0      	cmp	r0, r6
 8009ae6:	f000 80b0 	beq.w	8009c4a <HAL_GPIO_Init+0x21e>
 8009aea:	4e65      	ldr	r6, [pc, #404]	; (8009c80 <HAL_GPIO_Init+0x254>)
 8009aec:	42b0      	cmp	r0, r6
 8009aee:	f000 80a2 	beq.w	8009c36 <HAL_GPIO_Init+0x20a>
 8009af2:	4e64      	ldr	r6, [pc, #400]	; (8009c84 <HAL_GPIO_Init+0x258>)
 8009af4:	42b0      	cmp	r0, r6
 8009af6:	f000 80ad 	beq.w	8009c54 <HAL_GPIO_Init+0x228>
 8009afa:	4e63      	ldr	r6, [pc, #396]	; (8009c88 <HAL_GPIO_Init+0x25c>)
 8009afc:	42b0      	cmp	r0, r6
 8009afe:	f000 80ae 	beq.w	8009c5e <HAL_GPIO_Init+0x232>
 8009b02:	4e62      	ldr	r6, [pc, #392]	; (8009c8c <HAL_GPIO_Init+0x260>)
 8009b04:	42b0      	cmp	r0, r6
 8009b06:	bf0c      	ite	eq
 8009b08:	2609      	moveq	r6, #9
 8009b0a:	260a      	movne	r6, #10
 8009b0c:	fa06 f609 	lsl.w	r6, r6, r9
 8009b10:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009b12:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009b1a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8009b1e:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 8009b22:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8009b24:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8009b28:	bf0c      	ite	eq
 8009b2a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8009b2c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009b30:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8009b34:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8009b38:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8009b3c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8009b40:	bf0c      	ite	eq
 8009b42:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8009b44:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009b48:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8009b4c:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8009b50:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009b54:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8009b58:	bf0c      	ite	eq
 8009b5a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8009b5c:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009b60:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009b62:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8009b66:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8009b6a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 8009b6e:	bf54      	ite	pl
 8009b70:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8009b72:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8009b76:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8009b7a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009b7c:	f10c 0c02 	add.w	ip, ip, #2
 8009b80:	fa34 f203 	lsrs.w	r2, r4, r3
 8009b84:	f47f af5d 	bne.w	8009a42 <HAL_GPIO_Init+0x16>
  }
}
 8009b88:	b003      	add	sp, #12
 8009b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b8e:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8009b92:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b94:	fa08 f80c 	lsl.w	r8, r8, ip
 8009b98:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b9c:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b9e:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ba2:	fa06 f60c 	lsl.w	r6, r6, ip
 8009ba6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8009baa:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009bac:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8009bb0:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009bb4:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009bb6:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009bba:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8009bbc:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8009bbe:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009bc0:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009bc4:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009bc6:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009bca:	fa06 f60c 	lsl.w	r6, r6, ip
 8009bce:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8009bd2:	fa09 f20c 	lsl.w	r2, r9, ip
 8009bd6:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009bd8:	f47f af49 	bne.w	8009a6e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8009bdc:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009be0:	f003 0b07 	and.w	fp, r3, #7
 8009be4:	260f      	movs	r6, #15
 8009be6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8009bea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8009bee:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009bf2:	fa06 f60b 	lsl.w	r6, r6, fp
 8009bf6:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009bfa:	690e      	ldr	r6, [r1, #16]
 8009bfc:	fa06 f60b 	lsl.w	r6, r6, fp
 8009c00:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8009c04:	f8c9 6020 	str.w	r6, [r9, #32]
 8009c08:	e731      	b.n	8009a6e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c0a:	f04f 0803 	mov.w	r8, #3
 8009c0e:	fa08 f80c 	lsl.w	r8, r8, ip
 8009c12:	ea6f 0808 	mvn.w	r8, r8
 8009c16:	e7d2      	b.n	8009bbe <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c18:	2603      	movs	r6, #3
 8009c1a:	fa06 f609 	lsl.w	r6, r6, r9
 8009c1e:	4332      	orrs	r2, r6
 8009c20:	e777      	b.n	8009b12 <HAL_GPIO_Init+0xe6>
 8009c22:	2601      	movs	r6, #1
 8009c24:	fa06 f609 	lsl.w	r6, r6, r9
 8009c28:	4332      	orrs	r2, r6
 8009c2a:	e772      	b.n	8009b12 <HAL_GPIO_Init+0xe6>
 8009c2c:	2602      	movs	r6, #2
 8009c2e:	fa06 f609 	lsl.w	r6, r6, r9
 8009c32:	4332      	orrs	r2, r6
 8009c34:	e76d      	b.n	8009b12 <HAL_GPIO_Init+0xe6>
 8009c36:	2606      	movs	r6, #6
 8009c38:	fa06 f609 	lsl.w	r6, r6, r9
 8009c3c:	4332      	orrs	r2, r6
 8009c3e:	e768      	b.n	8009b12 <HAL_GPIO_Init+0xe6>
 8009c40:	2604      	movs	r6, #4
 8009c42:	fa06 f609 	lsl.w	r6, r6, r9
 8009c46:	4332      	orrs	r2, r6
 8009c48:	e763      	b.n	8009b12 <HAL_GPIO_Init+0xe6>
 8009c4a:	2605      	movs	r6, #5
 8009c4c:	fa06 f609 	lsl.w	r6, r6, r9
 8009c50:	4332      	orrs	r2, r6
 8009c52:	e75e      	b.n	8009b12 <HAL_GPIO_Init+0xe6>
 8009c54:	2607      	movs	r6, #7
 8009c56:	fa06 f609 	lsl.w	r6, r6, r9
 8009c5a:	4332      	orrs	r2, r6
 8009c5c:	e759      	b.n	8009b12 <HAL_GPIO_Init+0xe6>
 8009c5e:	2608      	movs	r6, #8
 8009c60:	fa06 f609 	lsl.w	r6, r6, r9
 8009c64:	4332      	orrs	r2, r6
 8009c66:	e754      	b.n	8009b12 <HAL_GPIO_Init+0xe6>
 8009c68:	58024400 	.word	0x58024400
 8009c6c:	58020000 	.word	0x58020000
 8009c70:	58020800 	.word	0x58020800
 8009c74:	58020c00 	.word	0x58020c00
 8009c78:	58021000 	.word	0x58021000
 8009c7c:	58021400 	.word	0x58021400
 8009c80:	58021800 	.word	0x58021800
 8009c84:	58021c00 	.word	0x58021c00
 8009c88:	58022000 	.word	0x58022000
 8009c8c:	58022400 	.word	0x58022400

08009c90 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009c90:	6903      	ldr	r3, [r0, #16]
 8009c92:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009c94:	bf14      	ite	ne
 8009c96:	2001      	movne	r0, #1
 8009c98:	2000      	moveq	r0, #0
 8009c9a:	4770      	bx	lr

08009c9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c9c:	b902      	cbnz	r2, 8009ca0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009c9e:	0409      	lsls	r1, r1, #16
 8009ca0:	6181      	str	r1, [r0, #24]
  }
}
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ca8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8009cac:	4201      	tst	r1, r0
 8009cae:	d100      	bne.n	8009cb2 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8009cb0:	4770      	bx	lr
{
 8009cb2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009cb4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009cb8:	f7f8 fafa 	bl	80022b0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009cbc:	bd08      	pop	{r3, pc}
 8009cbe:	bf00      	nop

08009cc0 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d05e      	beq.n	8009d82 <HAL_LPTIM_Init+0xc2>
{
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8009cc6:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8009cca:	4604      	mov	r4, r0
 8009ccc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d051      	beq.n	8009d78 <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009cd4:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009cd6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009cd8:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009cdc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009ce0:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8009ce2:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009ce4:	d03c      	beq.n	8009d60 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009ce6:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8009cea:	d039      	beq.n	8009d60 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009cec:	6962      	ldr	r2, [r4, #20]
 8009cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d003      	beq.n	8009cfe <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8009cf6:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8009cfa:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009cfe:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 8009d00:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009d02:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 8009d04:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 8009d06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d08:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009d0a:	4e22      	ldr	r6, [pc, #136]	; (8009d94 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 8009d0c:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009d0e:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009d10:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8009d12:	b1ed      	cbz	r5, 8009d50 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009d14:	2d01      	cmp	r5, #1
 8009d16:	d11f      	bne.n	8009d58 <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009d18:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 8009d1c:	4328      	orrs	r0, r5
 8009d1e:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009d20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009d24:	4282      	cmp	r2, r0
 8009d26:	d004      	beq.n	8009d32 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009d28:	69a0      	ldr	r0, [r4, #24]
 8009d2a:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 8009d2c:	69e0      	ldr	r0, [r4, #28]
 8009d2e:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009d30:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8009d32:	4a19      	ldr	r2, [pc, #100]	; (8009d98 <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 8009d34:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8009d36:	4291      	cmp	r1, r2
 8009d38:	d015      	beq.n	8009d66 <HAL_LPTIM_Init+0xa6>
 8009d3a:	4b18      	ldr	r3, [pc, #96]	; (8009d9c <HAL_LPTIM_Init+0xdc>)
 8009d3c:	4299      	cmp	r1, r3
 8009d3e:	d012      	beq.n	8009d66 <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8009d40:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <HAL_LPTIM_Init+0xe0>)
 8009d42:	4299      	cmp	r1, r3
 8009d44:	d01f      	beq.n	8009d86 <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009d46:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8009d48:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009d4a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8009d50:	69e0      	ldr	r0, [r4, #28]
 8009d52:	6925      	ldr	r5, [r4, #16]
 8009d54:	4328      	orrs	r0, r5
 8009d56:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009d58:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8009d5c:	d1e0      	bne.n	8009d20 <HAL_LPTIM_Init+0x60>
 8009d5e:	e7db      	b.n	8009d18 <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8009d60:	f020 001e 	bic.w	r0, r0, #30
 8009d64:	e7c2      	b.n	8009cec <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8009d66:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 8009d6a:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009d70:	2301      	movs	r3, #1
 8009d72:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8009d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8009d78:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8009d7c:	f7fc fba8 	bl	80064d0 <HAL_LPTIM_MspInit>
 8009d80:	e7a8      	b.n	8009cd4 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 8009d82:	2001      	movs	r0, #1
}
 8009d84:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8009d86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8009d88:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8009d8a:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8009d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d94:	ff19f1fe 	.word	0xff19f1fe
 8009d98:	40002400 	.word	0x40002400
 8009d9c:	58002400 	.word	0x58002400
 8009da0:	58002800 	.word	0x58002800

08009da4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009da8:	2800      	cmp	r0, #0
 8009daa:	f000 8088 	beq.w	8009ebe <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009dae:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8009db2:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8009db4:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009db6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d079      	beq.n	8009eb2 <HAL_PCD_Init+0x10e>
 8009dbe:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009dc0:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009dc2:	462e      	mov	r6, r5
 8009dc4:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8009dc6:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009dca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009dcc:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009dce:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8009dd2:	bf08      	it	eq
 8009dd4:	60eb      	streq	r3, [r5, #12]
  __HAL_PCD_DISABLE(hpcd);
 8009dd6:	f004 fdd7 	bl	800e988 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009dda:	f856 eb10 	ldr.w	lr, [r6], #16
 8009dde:	46b4      	mov	ip, r6
 8009de0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009de6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dec:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009df0:	e884 0003 	stmia.w	r4, {r0, r1}
 8009df4:	4670      	mov	r0, lr
 8009df6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8009dfa:	f004 fca1 	bl	800e740 <USB_CoreInit>
 8009dfe:	4604      	mov	r4, r0
 8009e00:	b130      	cbz	r0, 8009e10 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8009e02:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e04:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8009e06:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e08:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8009e0c:	b00b      	add	sp, #44	; 0x2c
 8009e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009e10:	4601      	mov	r1, r0
 8009e12:	6828      	ldr	r0, [r5, #0]
 8009e14:	f004 fdc0 	bl	800e998 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e18:	6868      	ldr	r0, [r5, #4]
 8009e1a:	b358      	cbz	r0, 8009e74 <HAL_PCD_Init+0xd0>
 8009e1c:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8009e1e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009e22:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8009e24:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e28:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 8009e2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8009e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009e34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e38:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 8009e3c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e40:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009e42:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8009e46:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009e48:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e4c:	d3ea      	bcc.n	8009e24 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8009e4e:	2200      	movs	r2, #0
 8009e50:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e54:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8009e56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8009e5a:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e5e:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 8009e60:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e64:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009e66:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009e6a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009e6e:	e9c3 22a1 	strd	r2, r2, [r3, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e72:	d3ed      	bcc.n	8009e50 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e74:	466c      	mov	r4, sp
 8009e76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e7e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009e82:	e884 0003 	stmia.w	r4, {r0, r1}
 8009e86:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8009e8a:	6828      	ldr	r0, [r5, #0]
 8009e8c:	f004 fdba 	bl	800ea04 <USB_DevInit>
 8009e90:	4604      	mov	r4, r0
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d1b5      	bne.n	8009e02 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 8009e96:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8009e98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8009e9a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8009e9e:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8009ea0:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8009ea4:	d00f      	beq.n	8009ec6 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8009ea6:	6828      	ldr	r0, [r5, #0]
 8009ea8:	f005 f9ee 	bl	800f288 <USB_DevDisconnect>
}
 8009eac:	4620      	mov	r0, r4
 8009eae:	b00b      	add	sp, #44	; 0x2c
 8009eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8009eb2:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8009eb6:	f006 fb4f 	bl	8010558 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8009eba:	6828      	ldr	r0, [r5, #0]
 8009ebc:	e780      	b.n	8009dc0 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8009ebe:	2401      	movs	r4, #1
}
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	b00b      	add	sp, #44	; 0x2c
 8009ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f000 ff4e 	bl	800ad68 <HAL_PCDEx_ActivateLPM>
 8009ecc:	e7eb      	b.n	8009ea6 <HAL_PCD_Init+0x102>
 8009ece:	bf00      	nop

08009ed0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009ed0:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8009ed2:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
{
 8009ed6:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ed8:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d017      	beq.n	8009f0e <HAL_PCD_Start+0x3e>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009ee4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009ee6:	05db      	lsls	r3, r3, #23
 8009ee8:	d402      	bmi.n	8009ef0 <HAL_PCD_Start+0x20>
 8009eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d009      	beq.n	8009f04 <HAL_PCD_Start+0x34>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8009ef0:	f004 fd42 	bl	800e978 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009ef4:	6820      	ldr	r0, [r4, #0]
 8009ef6:	f005 f9b7 	bl	800f268 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009efa:	2300      	movs	r3, #0

  return HAL_OK;
 8009efc:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009efe:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8009f02:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f0a:	6383      	str	r3, [r0, #56]	; 0x38
 8009f0c:	e7f0      	b.n	8009ef0 <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 8009f0e:	2002      	movs	r0, #2
}
 8009f10:	bd10      	pop	{r4, pc}
 8009f12:	bf00      	nop

08009f14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f18:	6805      	ldr	r5, [r0, #0]
{
 8009f1a:	b089      	sub	sp, #36	; 0x24
 8009f1c:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f005 f9f0 	bl	800f304 <USB_GetMode>
 8009f24:	b110      	cbz	r0, 8009f2c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 8009f26:	b009      	add	sp, #36	; 0x24
 8009f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009f2c:	4683      	mov	fp, r0
 8009f2e:	6820      	ldr	r0, [r4, #0]
 8009f30:	f005 f9ba 	bl	800f2a8 <USB_ReadInterrupts>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d0f6      	beq.n	8009f26 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009f38:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8009f3c:	f505 6200 	add.w	r2, r5, #2048	; 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009f40:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009f42:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8009f46:	9202      	str	r2, [sp, #8]
 8009f48:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009f4c:	f005 f9ac 	bl	800f2a8 <USB_ReadInterrupts>
 8009f50:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009f54:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009f56:	d003      	beq.n	8009f60 <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009f58:	6943      	ldr	r3, [r0, #20]
 8009f5a:	f003 0302 	and.w	r3, r3, #2
 8009f5e:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009f60:	f005 f9a2 	bl	800f2a8 <USB_ReadInterrupts>
 8009f64:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009f68:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009f6a:	d012      	beq.n	8009f92 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009f6c:	6983      	ldr	r3, [r0, #24]
 8009f6e:	f023 0310 	bic.w	r3, r3, #16
 8009f72:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8009f74:	6a2e      	ldr	r6, [r5, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009f76:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009f7a:	f006 070f 	and.w	r7, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	f000 83e5 	beq.w	800a74e <HAL_PCD_IRQHandler+0x83a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009f84:	2b06      	cmp	r3, #6
 8009f86:	f000 8323 	beq.w	800a5d0 <HAL_PCD_IRQHandler+0x6bc>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009f8a:	6983      	ldr	r3, [r0, #24]
 8009f8c:	f043 0310 	orr.w	r3, r3, #16
 8009f90:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009f92:	f005 f989 	bl	800f2a8 <USB_ReadInterrupts>
 8009f96:	0307      	lsls	r7, r0, #12
 8009f98:	f100 8281 	bmi.w	800a49e <HAL_PCD_IRQHandler+0x58a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009f9c:	6820      	ldr	r0, [r4, #0]
 8009f9e:	f005 f983 	bl	800f2a8 <USB_ReadInterrupts>
 8009fa2:	0346      	lsls	r6, r0, #13
 8009fa4:	f100 8228 	bmi.w	800a3f8 <HAL_PCD_IRQHandler+0x4e4>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009fa8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009faa:	f005 f97d 	bl	800f2a8 <USB_ReadInterrupts>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f2c0 819a 	blt.w	800a2e8 <HAL_PCD_IRQHandler+0x3d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009fb4:	6820      	ldr	r0, [r4, #0]
 8009fb6:	f005 f977 	bl	800f2a8 <USB_ReadInterrupts>
 8009fba:	0503      	lsls	r3, r0, #20
 8009fbc:	f100 8157 	bmi.w	800a26e <HAL_PCD_IRQHandler+0x35a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009fc0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009fc2:	f005 f971 	bl	800f2a8 <USB_ReadInterrupts>
 8009fc6:	0106      	lsls	r6, r0, #4
 8009fc8:	d514      	bpl.n	8009ff4 <HAL_PCD_IRQHandler+0xe0>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	6953      	ldr	r3, [r2, #20]
 8009fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fd2:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8009fd4:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f040 82ac 	bne.w	800a536 <HAL_PCD_IRQHandler+0x622>
        hpcd->LPM_State = LPM_L1;
 8009fde:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009fe0:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8009fe2:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009fe6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009fe8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8009fec:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009ff0:	f000 fed2 	bl	800ad98 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009ff4:	6820      	ldr	r0, [r4, #0]
 8009ff6:	f005 f957 	bl	800f2a8 <USB_ReadInterrupts>
 8009ffa:	04c0      	lsls	r0, r0, #19
 8009ffc:	f100 819e 	bmi.w	800a33c <HAL_PCD_IRQHandler+0x428>
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a000:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a002:	f005 f951 	bl	800f2a8 <USB_ReadInterrupts>
 800a006:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800a00a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a00c:	f040 817f 	bne.w	800a30e <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a010:	f005 f94a 	bl	800f2a8 <USB_ReadInterrupts>
 800a014:	0701      	lsls	r1, r0, #28
 800a016:	f100 81e6 	bmi.w	800a3e6 <HAL_PCD_IRQHandler+0x4d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a01a:	6820      	ldr	r0, [r4, #0]
 800a01c:	f005 f944 	bl	800f2a8 <USB_ReadInterrupts>
 800a020:	0602      	lsls	r2, r0, #24
 800a022:	d571      	bpl.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a024:	69aa      	ldr	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a026:	6863      	ldr	r3, [r4, #4]
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a02c:	2b01      	cmp	r3, #1
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a02e:	61aa      	str	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a030:	d96a      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a032:	f894 22a3 	ldrb.w	r2, [r4, #675]	; 0x2a3
 800a036:	2a01      	cmp	r2, #1
 800a038:	f000 83ea 	beq.w	800a810 <HAL_PCD_IRQHandler+0x8fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d963      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a040:	f894 22c7 	ldrb.w	r2, [r4, #711]	; 0x2c7
 800a044:	2a01      	cmp	r2, #1
 800a046:	f000 83fe 	beq.w	800a846 <HAL_PCD_IRQHandler+0x932>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d95c      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a04e:	f894 22eb 	ldrb.w	r2, [r4, #747]	; 0x2eb
 800a052:	2a01      	cmp	r2, #1
 800a054:	f000 82b5 	beq.w	800a5c2 <HAL_PCD_IRQHandler+0x6ae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a058:	2b04      	cmp	r3, #4
 800a05a:	d955      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a05c:	f894 230f 	ldrb.w	r2, [r4, #783]	; 0x30f
 800a060:	2a01      	cmp	r2, #1
 800a062:	f000 82c8 	beq.w	800a5f6 <HAL_PCD_IRQHandler+0x6e2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a066:	2b05      	cmp	r3, #5
 800a068:	d94e      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a06a:	f894 2333 	ldrb.w	r2, [r4, #819]	; 0x333
 800a06e:	2a01      	cmp	r2, #1
 800a070:	f000 8426 	beq.w	800a8c0 <HAL_PCD_IRQHandler+0x9ac>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a074:	2b06      	cmp	r3, #6
 800a076:	d947      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a078:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
 800a07c:	2a01      	cmp	r2, #1
 800a07e:	f000 8433 	beq.w	800a8e8 <HAL_PCD_IRQHandler+0x9d4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a082:	2b07      	cmp	r3, #7
 800a084:	d940      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a086:	f894 237b 	ldrb.w	r2, [r4, #891]	; 0x37b
 800a08a:	2a01      	cmp	r2, #1
 800a08c:	f000 844a 	beq.w	800a924 <HAL_PCD_IRQHandler+0xa10>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a090:	2b08      	cmp	r3, #8
 800a092:	d939      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a094:	f894 239f 	ldrb.w	r2, [r4, #927]	; 0x39f
 800a098:	2a01      	cmp	r2, #1
 800a09a:	f000 8457 	beq.w	800a94c <HAL_PCD_IRQHandler+0xa38>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a09e:	2b09      	cmp	r3, #9
 800a0a0:	d932      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0a2:	f894 23c3 	ldrb.w	r2, [r4, #963]	; 0x3c3
 800a0a6:	2a01      	cmp	r2, #1
 800a0a8:	f000 8464 	beq.w	800a974 <HAL_PCD_IRQHandler+0xa60>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0ac:	2b0a      	cmp	r3, #10
 800a0ae:	d92b      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0b0:	f894 23e7 	ldrb.w	r2, [r4, #999]	; 0x3e7
 800a0b4:	2a01      	cmp	r2, #1
 800a0b6:	f000 8471 	beq.w	800a99c <HAL_PCD_IRQHandler+0xa88>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0ba:	2b0b      	cmp	r3, #11
 800a0bc:	d924      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0be:	f894 240b 	ldrb.w	r2, [r4, #1035]	; 0x40b
 800a0c2:	2a01      	cmp	r2, #1
 800a0c4:	f000 847e 	beq.w	800a9c4 <HAL_PCD_IRQHandler+0xab0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0c8:	2b0c      	cmp	r3, #12
 800a0ca:	d91d      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0cc:	f894 242f 	ldrb.w	r2, [r4, #1071]	; 0x42f
 800a0d0:	2a01      	cmp	r2, #1
 800a0d2:	f000 847f 	beq.w	800a9d4 <HAL_PCD_IRQHandler+0xac0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0d6:	2b0d      	cmp	r3, #13
 800a0d8:	d916      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0da:	f894 2453 	ldrb.w	r2, [r4, #1107]	; 0x453
 800a0de:	2a01      	cmp	r2, #1
 800a0e0:	f000 849f 	beq.w	800aa22 <HAL_PCD_IRQHandler+0xb0e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0e4:	2b0e      	cmp	r3, #14
 800a0e6:	d90f      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0e8:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 800a0ec:	2a01      	cmp	r2, #1
 800a0ee:	f000 84a6 	beq.w	800aa3e <HAL_PCD_IRQHandler+0xb2a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0f2:	2b0f      	cmp	r3, #15
 800a0f4:	d908      	bls.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0f6:	f894 349b 	ldrb.w	r3, [r4, #1179]	; 0x49b
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d104      	bne.n	800a108 <HAL_PCD_IRQHandler+0x1f4>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a0fe:	f504 6193 	add.w	r1, r4, #1176	; 0x498
 800a102:	6820      	ldr	r0, [r4, #0]
 800a104:	f004 ffc0 	bl	800f088 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a108:	6820      	ldr	r0, [r4, #0]
 800a10a:	f005 f8cd 	bl	800f2a8 <USB_ReadInterrupts>
 800a10e:	02c3      	lsls	r3, r0, #11
 800a110:	f140 80ab 	bpl.w	800a26a <HAL_PCD_IRQHandler+0x356>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a114:	6863      	ldr	r3, [r4, #4]
 800a116:	2b01      	cmp	r3, #1
 800a118:	f240 8089 	bls.w	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a11c:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a120:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a124:	2a01      	cmp	r2, #1
 800a126:	f000 8215 	beq.w	800a554 <HAL_PCD_IRQHandler+0x640>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d97f      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a12e:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a132:	f8d5 1940 	ldr.w	r1, [r5, #2368]	; 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a136:	2a01      	cmp	r2, #1
 800a138:	f000 821f 	beq.w	800a57a <HAL_PCD_IRQHandler+0x666>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d976      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a140:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a144:	f8d5 1960 	ldr.w	r1, [r5, #2400]	; 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a148:	2a01      	cmp	r2, #1
 800a14a:	f000 8222 	beq.w	800a592 <HAL_PCD_IRQHandler+0x67e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d96d      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a152:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a156:	f8d5 1980 	ldr.w	r1, [r5, #2432]	; 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a15a:	2a01      	cmp	r2, #1
 800a15c:	f000 8225 	beq.w	800a5aa <HAL_PCD_IRQHandler+0x696>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a160:	2b05      	cmp	r3, #5
 800a162:	d964      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a164:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a168:	f8d5 19a0 	ldr.w	r1, [r5, #2464]	; 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a16c:	2a01      	cmp	r2, #1
 800a16e:	f000 8343 	beq.w	800a7f8 <HAL_PCD_IRQHandler+0x8e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a172:	2b06      	cmp	r3, #6
 800a174:	d95b      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a176:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a17a:	f8d5 19c0 	ldr.w	r1, [r5, #2496]	; 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a17e:	2a01      	cmp	r2, #1
 800a180:	f000 8355 	beq.w	800a82e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a184:	2b07      	cmp	r3, #7
 800a186:	d952      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a188:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a18c:	f8d5 19e0 	ldr.w	r1, [r5, #2528]	; 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a190:	2a01      	cmp	r2, #1
 800a192:	f000 8360 	beq.w	800a856 <HAL_PCD_IRQHandler+0x942>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a196:	2b08      	cmp	r3, #8
 800a198:	d949      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a19a:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a19e:	f8d5 1a00 	ldr.w	r1, [r5, #2560]	; 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1a2:	2a01      	cmp	r2, #1
 800a1a4:	f000 8363 	beq.w	800a86e <HAL_PCD_IRQHandler+0x95a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1a8:	2b09      	cmp	r3, #9
 800a1aa:	d940      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1ac:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a1b0:	f8d5 1a20 	ldr.w	r1, [r5, #2592]	; 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1b4:	2a01      	cmp	r2, #1
 800a1b6:	f000 8377 	beq.w	800a8a8 <HAL_PCD_IRQHandler+0x994>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1ba:	2b0a      	cmp	r3, #10
 800a1bc:	d937      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1be:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a1c2:	f8d5 1a40 	ldr.w	r1, [r5, #2624]	; 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1c6:	2a01      	cmp	r2, #1
 800a1c8:	f000 8382 	beq.w	800a8d0 <HAL_PCD_IRQHandler+0x9bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1cc:	2b0b      	cmp	r3, #11
 800a1ce:	d92e      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1d0:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a1d4:	f8d5 1a60 	ldr.w	r1, [r5, #2656]	; 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1d8:	2a01      	cmp	r2, #1
 800a1da:	f000 8397 	beq.w	800a90c <HAL_PCD_IRQHandler+0x9f8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1de:	2b0c      	cmp	r3, #12
 800a1e0:	d925      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1e2:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a1e6:	f8d5 1a80 	ldr.w	r1, [r5, #2688]	; 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1ea:	2a01      	cmp	r2, #1
 800a1ec:	f000 83a2 	beq.w	800a934 <HAL_PCD_IRQHandler+0xa20>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1f0:	2b0d      	cmp	r3, #13
 800a1f2:	d91c      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1f4:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a1f8:	f8d5 1aa0 	ldr.w	r1, [r5, #2720]	; 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1fc:	2a01      	cmp	r2, #1
 800a1fe:	f000 83ad 	beq.w	800a95c <HAL_PCD_IRQHandler+0xa48>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a202:	2b0e      	cmp	r3, #14
 800a204:	d913      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a206:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a20a:	f8d5 1ac0 	ldr.w	r1, [r5, #2752]	; 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a20e:	2a01      	cmp	r2, #1
 800a210:	f000 83b8 	beq.w	800a984 <HAL_PCD_IRQHandler+0xa70>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a214:	2b0f      	cmp	r3, #15
 800a216:	d90a      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a218:	f894 225c 	ldrb.w	r2, [r4, #604]	; 0x25c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a21c:	f8d5 1ae0 	ldr.w	r1, [r5, #2784]	; 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a220:	2a01      	cmp	r2, #1
 800a222:	f000 83c3 	beq.w	800a9ac <HAL_PCD_IRQHandler+0xa98>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a226:	2b10      	cmp	r3, #16
 800a228:	d901      	bls.n	800a22e <HAL_PCD_IRQHandler+0x31a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a22a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a22e:	6820      	ldr	r0, [r4, #0]
 800a230:	6943      	ldr	r3, [r0, #20]
 800a232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a236:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a238:	f005 f836 	bl	800f2a8 <USB_ReadInterrupts>
 800a23c:	0287      	lsls	r7, r0, #10
 800a23e:	d421      	bmi.n	800a284 <HAL_PCD_IRQHandler+0x370>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a240:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a242:	f005 f831 	bl	800f2a8 <USB_ReadInterrupts>
 800a246:	0040      	lsls	r0, r0, #1
 800a248:	f100 80c4 	bmi.w	800a3d4 <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	f005 f82b 	bl	800f2a8 <USB_ReadInterrupts>
 800a252:	0741      	lsls	r1, r0, #29
 800a254:	f57f ae67 	bpl.w	8009f26 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a25c:	076a      	lsls	r2, r5, #29
 800a25e:	f100 8297 	bmi.w	800a790 <HAL_PCD_IRQHandler+0x87c>
      hpcd->Instance->GOTGINT |= RegVal;
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	432a      	orrs	r2, r5
 800a266:	605a      	str	r2, [r3, #4]
 800a268:	e65d      	b.n	8009f26 <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a26a:	6820      	ldr	r0, [r4, #0]
 800a26c:	e7e4      	b.n	800a238 <HAL_PCD_IRQHandler+0x324>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a26e:	9b02      	ldr	r3, [sp, #8]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	07df      	lsls	r7, r3, #31
 800a274:	f100 8288 	bmi.w	800a788 <HAL_PCD_IRQHandler+0x874>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a278:	6820      	ldr	r0, [r4, #0]
 800a27a:	6943      	ldr	r3, [r0, #20]
 800a27c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a280:	6143      	str	r3, [r0, #20]
 800a282:	e69e      	b.n	8009fc2 <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a284:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800a288:	f1bc 0f01 	cmp.w	ip, #1
 800a28c:	d926      	bls.n	800a2dc <HAL_PCD_IRQHandler+0x3c8>
 800a28e:	f505 6232 	add.w	r2, r5, #2848	; 0xb20
 800a292:	4623      	mov	r3, r4
 800a294:	2101      	movs	r1, #1
 800a296:	e004      	b.n	800a2a2 <HAL_PCD_IRQHandler+0x38e>
 800a298:	3101      	adds	r1, #1
 800a29a:	3220      	adds	r2, #32
 800a29c:	3324      	adds	r3, #36	; 0x24
 800a29e:	4561      	cmp	r1, ip
 800a2a0:	d01c      	beq.n	800a2dc <HAL_PCD_IRQHandler+0x3c8>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2a2:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a2a6:	6816      	ldr	r6, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2a8:	2801      	cmp	r0, #1
 800a2aa:	d1f5      	bne.n	800a298 <HAL_PCD_IRQHandler+0x384>
 800a2ac:	2e00      	cmp	r6, #0
 800a2ae:	daf3      	bge.n	800a298 <HAL_PCD_IRQHandler+0x384>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a2b0:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 800a2b4:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 800a2b8:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a2bc:	42be      	cmp	r6, r7
 800a2be:	d1eb      	bne.n	800a298 <HAL_PCD_IRQHandler+0x384>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a2c0:	f883 02a3 	strb.w	r0, [r3, #675]	; 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a2c4:	69a8      	ldr	r0, [r5, #24]
 800a2c6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a2ca:	61a8      	str	r0, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a2cc:	6968      	ldr	r0, [r5, #20]
 800a2ce:	0606      	lsls	r6, r0, #24
 800a2d0:	d4e2      	bmi.n	800a298 <HAL_PCD_IRQHandler+0x384>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a2d2:	9a02      	ldr	r2, [sp, #8]
 800a2d4:	6853      	ldr	r3, [r2, #4]
 800a2d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2da:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a2dc:	6820      	ldr	r0, [r4, #0]
 800a2de:	6943      	ldr	r3, [r0, #20]
 800a2e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2e4:	6143      	str	r3, [r0, #20]
 800a2e6:	e7ac      	b.n	800a242 <HAL_PCD_IRQHandler+0x32e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a2e8:	9a02      	ldr	r2, [sp, #8]
 800a2ea:	6853      	ldr	r3, [r2, #4]
 800a2ec:	f023 0301 	bic.w	r3, r3, #1
 800a2f0:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 800a2f2:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	f000 8138 	beq.w	800a56c <HAL_PCD_IRQHandler+0x658>
        HAL_PCD_ResumeCallback(hpcd);
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f006 f9d9 	bl	80106b4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a302:	6820      	ldr	r0, [r4, #0]
 800a304:	6943      	ldr	r3, [r0, #20]
 800a306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a30a:	6143      	str	r3, [r0, #20]
 800a30c:	e653      	b.n	8009fb6 <HAL_PCD_IRQHandler+0xa2>
      (void)USB_ActivateSetup(hpcd->Instance);
 800a30e:	f004 fffd 	bl	800f30c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a312:	6820      	ldr	r0, [r4, #0]
 800a314:	f004 fcc2 	bl	800ec9c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a318:	6826      	ldr	r6, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a31a:	6120      	str	r0, [r4, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a31c:	f001 fb00 	bl	800b920 <HAL_RCC_GetHCLKFreq>
 800a320:	7c22      	ldrb	r2, [r4, #16]
 800a322:	4601      	mov	r1, r0
 800a324:	4630      	mov	r0, r6
 800a326:	f004 faad 	bl	800e884 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800a32a:	4620      	mov	r0, r4
 800a32c:	f006 f994 	bl	8010658 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a330:	6820      	ldr	r0, [r4, #0]
 800a332:	6943      	ldr	r3, [r0, #20]
 800a334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a338:	6143      	str	r3, [r0, #20]
 800a33a:	e669      	b.n	800a010 <HAL_PCD_IRQHandler+0xfc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a33c:	9a02      	ldr	r2, [sp, #8]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a33e:	2110      	movs	r1, #16
 800a340:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a342:	6853      	ldr	r3, [r2, #4]
 800a344:	f023 0301 	bic.w	r3, r3, #1
 800a348:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a34a:	f004 fc7d 	bl	800ec48 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a34e:	6860      	ldr	r0, [r4, #4]
 800a350:	b1e0      	cbz	r0, 800a38c <HAL_PCD_IRQHandler+0x478>
 800a352:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a356:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800a35a:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a35c:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a360:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a362:	3320      	adds	r3, #32
 800a364:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a366:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a36a:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a36e:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a372:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800a376:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a37a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a37e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800a382:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a386:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a38a:	d1e6      	bne.n	800a35a <HAL_PCD_IRQHandler+0x446>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a38c:	9902      	ldr	r1, [sp, #8]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a38e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a390:	69cb      	ldr	r3, [r1, #28]
 800a392:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a396:	61cb      	str	r3, [r1, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a398:	2a00      	cmp	r2, #0
 800a39a:	f040 80d0 	bne.w	800a53e <HAL_PCD_IRQHandler+0x62a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a39e:	694a      	ldr	r2, [r1, #20]
 800a3a0:	f242 032b 	movw	r3, #8235	; 0x202b
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a3a8:	690b      	ldr	r3, [r1, #16]
 800a3aa:	f043 030b 	orr.w	r3, r3, #11
 800a3ae:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a3b0:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a3b4:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800a3b8:	7b21      	ldrb	r1, [r4, #12]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a3ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a3be:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a3c0:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a3c4:	f004 ffb8 	bl	800f338 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a3c8:	6820      	ldr	r0, [r4, #0]
 800a3ca:	6943      	ldr	r3, [r0, #20]
 800a3cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3d0:	6143      	str	r3, [r0, #20]
 800a3d2:	e616      	b.n	800a002 <HAL_PCD_IRQHandler+0xee>
      HAL_PCD_ConnectCallback(hpcd);
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f006 f979 	bl	80106cc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a3da:	6820      	ldr	r0, [r4, #0]
 800a3dc:	6943      	ldr	r3, [r0, #20]
 800a3de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3e2:	6143      	str	r3, [r0, #20]
 800a3e4:	e733      	b.n	800a24e <HAL_PCD_IRQHandler+0x33a>
      HAL_PCD_SOFCallback(hpcd);
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f006 f932 	bl	8010650 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	6943      	ldr	r3, [r0, #20]
 800a3f0:	f003 0308 	and.w	r3, r3, #8
 800a3f4:	6143      	str	r3, [r0, #20]
 800a3f6:	e611      	b.n	800a01c <HAL_PCD_IRQHandler+0x108>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a3f8:	6820      	ldr	r0, [r4, #0]
 800a3fa:	f004 ff61 	bl	800f2c0 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800a3fe:	4680      	mov	r8, r0
 800a400:	2800      	cmp	r0, #0
 800a402:	f43f add1 	beq.w	8009fa8 <HAL_PCD_IRQHandler+0x94>
      epnum = 0U;
 800a406:	f04f 0a00 	mov.w	sl, #0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a40a:	6820      	ldr	r0, [r4, #0]
 800a40c:	4627      	mov	r7, r4
 800a40e:	f505 6910 	add.w	r9, r5, #2304	; 0x900
              ep->is_iso_incomplete = 0U;
 800a412:	4656      	mov	r6, sl
 800a414:	9503      	str	r5, [sp, #12]
 800a416:	f8cd b010 	str.w	fp, [sp, #16]
 800a41a:	e009      	b.n	800a430 <HAL_PCD_IRQHandler+0x51c>
      while (ep_intr != 0U)
 800a41c:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800a420:	f106 0601 	add.w	r6, r6, #1
      while (ep_intr != 0U)
 800a424:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800a428:	f109 0920 	add.w	r9, r9, #32
 800a42c:	f000 80ed 	beq.w	800a60a <HAL_PCD_IRQHandler+0x6f6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a430:	f018 0f01 	tst.w	r8, #1
 800a434:	d0f2      	beq.n	800a41c <HAL_PCD_IRQHandler+0x508>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a436:	fa5f fa86 	uxtb.w	sl, r6
 800a43a:	4651      	mov	r1, sl
 800a43c:	f004 ff52 	bl	800f2e4 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a440:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a442:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a444:	d514      	bpl.n	800a470 <HAL_PCD_IRQHandler+0x55c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a446:	9902      	ldr	r1, [sp, #8]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a448:	2301      	movs	r3, #1
 800a44a:	f006 020f 	and.w	r2, r6, #15
 800a44e:	fa03 f202 	lsl.w	r2, r3, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a452:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a454:	ea23 0302 	bic.w	r3, r3, r2
 800a458:	634b      	str	r3, [r1, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a45a:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800a45c:	68e1      	ldr	r1, [r4, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a45e:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800a462:	4299      	cmp	r1, r3
 800a464:	f000 8199 	beq.w	800a79a <HAL_PCD_IRQHandler+0x886>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a468:	4651      	mov	r1, sl
 800a46a:	4620      	mov	r0, r4
 800a46c:	f006 f8e6 	bl	801063c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a470:	072a      	lsls	r2, r5, #28
 800a472:	d502      	bpl.n	800a47a <HAL_PCD_IRQHandler+0x566>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a474:	2308      	movs	r3, #8
 800a476:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a47a:	06eb      	lsls	r3, r5, #27
 800a47c:	d502      	bpl.n	800a484 <HAL_PCD_IRQHandler+0x570>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a47e:	2310      	movs	r3, #16
 800a480:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a484:	0668      	lsls	r0, r5, #25
 800a486:	d502      	bpl.n	800a48e <HAL_PCD_IRQHandler+0x57a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a488:	2340      	movs	r3, #64	; 0x40
 800a48a:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a48e:	07a9      	lsls	r1, r5, #30
 800a490:	f100 8150 	bmi.w	800a734 <HAL_PCD_IRQHandler+0x820>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a494:	062a      	lsls	r2, r5, #24
 800a496:	f100 80f9 	bmi.w	800a68c <HAL_PCD_IRQHandler+0x778>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a49a:	6820      	ldr	r0, [r4, #0]
 800a49c:	e7be      	b.n	800a41c <HAL_PCD_IRQHandler+0x508>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a49e:	6820      	ldr	r0, [r4, #0]
 800a4a0:	f004 ff06 	bl	800f2b0 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800a4a4:	4606      	mov	r6, r0
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	f43f ad78 	beq.w	8009f9c <HAL_PCD_IRQHandler+0x88>
 800a4ac:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 800a4b0:	46a2      	mov	sl, r4
      epnum = 0U;
 800a4b2:	f04f 0900 	mov.w	r9, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a4b6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a4ba:	e008      	b.n	800a4ce <HAL_PCD_IRQHandler+0x5ba>
      while (ep_intr != 0U)
 800a4bc:	0876      	lsrs	r6, r6, #1
        epnum++;
 800a4be:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 800a4c2:	f107 0720 	add.w	r7, r7, #32
 800a4c6:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 800a4ca:	f000 809b 	beq.w	800a604 <HAL_PCD_IRQHandler+0x6f0>
        if ((ep_intr & 0x1U) != 0U)
 800a4ce:	07f0      	lsls	r0, r6, #31
 800a4d0:	d5f4      	bpl.n	800a4bc <HAL_PCD_IRQHandler+0x5a8>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a4d2:	fa5f fb89 	uxtb.w	fp, r9
 800a4d6:	6820      	ldr	r0, [r4, #0]
 800a4d8:	4659      	mov	r1, fp
 800a4da:	f004 fef9 	bl	800f2d0 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a4de:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a4e2:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a4e4:	f040 80b3 	bne.w	800a64e <HAL_PCD_IRQHandler+0x73a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a4e8:	f018 0f08 	tst.w	r8, #8
 800a4ec:	f040 8090 	bne.w	800a610 <HAL_PCD_IRQHandler+0x6fc>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a4f0:	f018 0f10 	tst.w	r8, #16
 800a4f4:	d001      	beq.n	800a4fa <HAL_PCD_IRQHandler+0x5e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a4f6:	2210      	movs	r2, #16
 800a4f8:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a4fa:	f018 0f02 	tst.w	r8, #2
 800a4fe:	d00e      	beq.n	800a51e <HAL_PCD_IRQHandler+0x60a>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a500:	696a      	ldr	r2, [r5, #20]
 800a502:	0610      	lsls	r0, r2, #24
 800a504:	d504      	bpl.n	800a510 <HAL_PCD_IRQHandler+0x5fc>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a506:	9b02      	ldr	r3, [sp, #8]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a50e:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 800a510:	f89a 227f 	ldrb.w	r2, [sl, #639]	; 0x27f
 800a514:	2a01      	cmp	r2, #1
 800a516:	f000 8182 	beq.w	800a81e <HAL_PCD_IRQHandler+0x90a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a51a:	2302      	movs	r3, #2
 800a51c:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a51e:	f018 0f20 	tst.w	r8, #32
 800a522:	d001      	beq.n	800a528 <HAL_PCD_IRQHandler+0x614>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a524:	2320      	movs	r3, #32
 800a526:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a528:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 800a52c:	d0c6      	beq.n	800a4bc <HAL_PCD_IRQHandler+0x5a8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a52e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a532:	60bb      	str	r3, [r7, #8]
 800a534:	e7c2      	b.n	800a4bc <HAL_PCD_IRQHandler+0x5a8>
        HAL_PCD_SuspendCallback(hpcd);
 800a536:	4620      	mov	r0, r4
 800a538:	f006 f8a4 	bl	8010684 <HAL_PCD_SuspendCallback>
 800a53c:	e55a      	b.n	8009ff4 <HAL_PCD_IRQHandler+0xe0>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a53e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 800a542:	f043 030b 	orr.w	r3, r3, #11
 800a546:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a54a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800a54c:	f043 030b 	orr.w	r3, r3, #11
 800a550:	644b      	str	r3, [r1, #68]	; 0x44
 800a552:	e72d      	b.n	800a3b0 <HAL_PCD_IRQHandler+0x49c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a554:	2900      	cmp	r1, #0
 800a556:	f6bf ade8 	bge.w	800a12a <HAL_PCD_IRQHandler+0x216>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a55a:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a55c:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a560:	f851 0b60 	ldr.w	r0, [r1], #96
 800a564:	f004 fd90 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a568:	6863      	ldr	r3, [r4, #4]
 800a56a:	e5de      	b.n	800a12a <HAL_PCD_IRQHandler+0x216>
        hpcd->LPM_State = LPM_L0;
 800a56c:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a56e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800a570:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a574:	f000 fc10 	bl	800ad98 <HAL_PCDEx_LPM_Callback>
 800a578:	e6c3      	b.n	800a302 <HAL_PCD_IRQHandler+0x3ee>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a57a:	2900      	cmp	r1, #0
 800a57c:	f6bf adde 	bge.w	800a13c <HAL_PCD_IRQHandler+0x228>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a580:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a582:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a586:	f851 0b84 	ldr.w	r0, [r1], #132
 800a58a:	f004 fd7d 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	e5d4      	b.n	800a13c <HAL_PCD_IRQHandler+0x228>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a592:	2900      	cmp	r1, #0
 800a594:	f6bf addb 	bge.w	800a14e <HAL_PCD_IRQHandler+0x23a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a598:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a59a:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a59e:	f851 0ba8 	ldr.w	r0, [r1], #168
 800a5a2:	f004 fd71 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a5a6:	6863      	ldr	r3, [r4, #4]
 800a5a8:	e5d1      	b.n	800a14e <HAL_PCD_IRQHandler+0x23a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a5aa:	2900      	cmp	r1, #0
 800a5ac:	f6bf add8 	bge.w	800a160 <HAL_PCD_IRQHandler+0x24c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5b0:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a5b2:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a5b6:	f851 0bcc 	ldr.w	r0, [r1], #204
 800a5ba:	f004 fd65 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a5be:	6863      	ldr	r3, [r4, #4]
 800a5c0:	e5ce      	b.n	800a160 <HAL_PCD_IRQHandler+0x24c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a5c2:	f504 713a 	add.w	r1, r4, #744	; 0x2e8
 800a5c6:	6820      	ldr	r0, [r4, #0]
 800a5c8:	f004 fd5e 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a5cc:	6863      	ldr	r3, [r4, #4]
 800a5ce:	e543      	b.n	800a058 <HAL_PCD_IRQHandler+0x144>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a5d0:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a5d4:	2208      	movs	r2, #8
 800a5d6:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f004 fdae 	bl	800f13c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a5e0:	f3c6 130a 	ubfx	r3, r6, #4, #11
 800a5e4:	eb04 0287 	add.w	r2, r4, r7, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a5e8:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a5ea:	f8d2 1290 	ldr.w	r1, [r2, #656]	; 0x290
 800a5ee:	440b      	add	r3, r1
 800a5f0:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
 800a5f4:	e4c9      	b.n	8009f8a <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a5f6:	f504 7143 	add.w	r1, r4, #780	; 0x30c
 800a5fa:	6820      	ldr	r0, [r4, #0]
 800a5fc:	f004 fd44 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a600:	6863      	ldr	r3, [r4, #4]
 800a602:	e530      	b.n	800a066 <HAL_PCD_IRQHandler+0x152>
 800a604:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a608:	e4c8      	b.n	8009f9c <HAL_PCD_IRQHandler+0x88>
 800a60a:	e9dd 5b03 	ldrd	r5, fp, [sp, #12]
 800a60e:	e4cc      	b.n	8009faa <HAL_PCD_IRQHandler+0x96>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a610:	6821      	ldr	r1, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a612:	2208      	movs	r2, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a614:	4bbb      	ldr	r3, [pc, #748]	; (800a904 <HAL_PCD_IRQHandler+0x9f0>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a616:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a618:	f501 6230 	add.w	r2, r1, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a61c:	6c09      	ldr	r1, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a61e:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a622:	4299      	cmp	r1, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a624:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a626:	f240 80c9 	bls.w	800a7bc <HAL_PCD_IRQHandler+0x8a8>
 800a62a:	0403      	lsls	r3, r0, #16
 800a62c:	d502      	bpl.n	800a634 <HAL_PCD_IRQHandler+0x720>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a62e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a632:	6091      	str	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a634:	4620      	mov	r0, r4
 800a636:	f005 fff1 	bl	801061c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a63a:	68e1      	ldr	r1, [r4, #12]
 800a63c:	2901      	cmp	r1, #1
 800a63e:	f47f af57 	bne.w	800a4f0 <HAL_PCD_IRQHandler+0x5dc>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a642:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800a646:	6820      	ldr	r0, [r4, #0]
 800a648:	f004 fe76 	bl	800f338 <USB_EP0_OutStart>
 800a64c:	e750      	b.n	800a4f0 <HAL_PCD_IRQHandler+0x5dc>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a64e:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a650:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800a652:	68e1      	ldr	r1, [r4, #12]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a654:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a656:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800a65a:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a65c:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a660:	eb02 1249 	add.w	r2, r2, r9, lsl #5
 800a664:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800a666:	f000 80ad 	beq.w	800a7c4 <HAL_PCD_IRQHandler+0x8b0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a66a:	49a7      	ldr	r1, [pc, #668]	; (800a908 <HAL_PCD_IRQHandler+0x9f4>)
 800a66c:	458c      	cmp	ip, r1
 800a66e:	f000 810a 	beq.w	800a886 <HAL_PCD_IRQHandler+0x972>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a672:	f1b9 0f00 	cmp.w	r9, #0
 800a676:	d104      	bne.n	800a682 <HAL_PCD_IRQHandler+0x76e>
 800a678:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800a67c:	2a00      	cmp	r2, #0
 800a67e:	f000 81d8 	beq.w	800aa32 <HAL_PCD_IRQHandler+0xb1e>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a682:	4659      	mov	r1, fp
 800a684:	4620      	mov	r0, r4
 800a686:	f005 ffcf 	bl	8010628 <HAL_PCD_DataOutStageCallback>
 800a68a:	e72d      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x5d4>
  if (ep->xfer_count > ep->xfer_len)
 800a68c:	e9d7 5313 	ldrd	r5, r3, [r7, #76]	; 0x4c
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a690:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800a694:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a696:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800a698:	f63f aec0 	bhi.w	800a41c <HAL_PCD_IRQHandler+0x508>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a69c:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800a6a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a2:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6a6:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 800a6aa:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800a6ac:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800a6ae:	428a      	cmp	r2, r1
 800a6b0:	bf28      	it	cs
 800a6b2:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6b4:	9905      	ldr	r1, [sp, #20]
 800a6b6:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800a6b8:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6ba:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6bc:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800a6c0:	f0c0 8096 	bcc.w	800a7f0 <HAL_PCD_IRQHandler+0x8dc>
 800a6c4:	4652      	mov	r2, sl
 800a6c6:	9606      	str	r6, [sp, #24]
 800a6c8:	46ca      	mov	sl, r9
 800a6ca:	4626      	mov	r6, r4
 800a6cc:	46c1      	mov	r9, r8
 800a6ce:	9c05      	ldr	r4, [sp, #20]
 800a6d0:	4690      	mov	r8, r2
 800a6d2:	e019      	b.n	800a708 <HAL_PCD_IRQHandler+0x7f4>
    len = ep->xfer_len - ep->xfer_count;
 800a6d4:	1aed      	subs	r5, r5, r3
 800a6d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a6d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a6da:	4642      	mov	r2, r8
 800a6dc:	429d      	cmp	r5, r3
 800a6de:	4658      	mov	r0, fp
 800a6e0:	bf28      	it	cs
 800a6e2:	461d      	movcs	r5, r3
 800a6e4:	7b33      	ldrb	r3, [r6, #12]
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	b2ab      	uxth	r3, r5
 800a6ea:	f004 fd11 	bl	800f110 <USB_WritePacket>
    ep->xfer_buff  += len;
 800a6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6f0:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800a6f2:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6f4:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800a6f6:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 800a6f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6fa:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800a6fc:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6fe:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800a702:	653b      	str	r3, [r7, #80]	; 0x50
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a704:	d36c      	bcc.n	800a7e0 <HAL_PCD_IRQHandler+0x8cc>
  if (ep->xfer_len <= ep->xfer_count)
 800a706:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a708:	42ab      	cmp	r3, r5
 800a70a:	d3e3      	bcc.n	800a6d4 <HAL_PCD_IRQHandler+0x7c0>
 800a70c:	4634      	mov	r4, r6
 800a70e:	46c8      	mov	r8, r9
 800a710:	9e06      	ldr	r6, [sp, #24]
 800a712:	46d1      	mov	r9, sl
 800a714:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a718:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a71a:	f006 020f 	and.w	r2, r6, #15
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a71e:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a720:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a724:	2301      	movs	r3, #1
 800a726:	fa03 f202 	lsl.w	r2, r3, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a72a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a72c:	ea23 0302 	bic.w	r3, r3, r2
 800a730:	634b      	str	r3, [r1, #52]	; 0x34
 800a732:	e673      	b.n	800a41c <HAL_PCD_IRQHandler+0x508>
            (void)USB_FlushTxFifo(USBx, epnum);
 800a734:	4631      	mov	r1, r6
 800a736:	9803      	ldr	r0, [sp, #12]
 800a738:	f004 fa86 	bl	800ec48 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 800a73c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a740:	2b01      	cmp	r3, #1
 800a742:	f000 80a8 	beq.w	800a896 <HAL_PCD_IRQHandler+0x982>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a746:	2302      	movs	r3, #2
 800a748:	f8c9 3008 	str.w	r3, [r9, #8]
 800a74c:	e6a2      	b.n	800a494 <HAL_PCD_IRQHandler+0x580>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a74e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a752:	421e      	tst	r6, r3
 800a754:	f43f ac19 	beq.w	8009f8a <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a758:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800a75c:	f3c6 120a 	ubfx	r2, r6, #4, #11
 800a760:	4628      	mov	r0, r5
 800a762:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a766:	4616      	mov	r6, r2
 800a768:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 800a76c:	f004 fce6 	bl	800f13c <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a770:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a774:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a776:	4433      	add	r3, r6
 800a778:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a77c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800a780:	4433      	add	r3, r6
 800a782:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800a786:	e400      	b.n	8009f8a <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 800a788:	4620      	mov	r0, r4
 800a78a:	f005 ff7b 	bl	8010684 <HAL_PCD_SuspendCallback>
 800a78e:	e573      	b.n	800a278 <HAL_PCD_IRQHandler+0x364>
        HAL_PCD_DisconnectCallback(hpcd);
 800a790:	4620      	mov	r0, r4
 800a792:	f005 ff9f 	bl	80106d4 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	e563      	b.n	800a262 <HAL_PCD_IRQHandler+0x34e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a79a:	e9d7 2311 	ldrd	r2, r3, [r7, #68]	; 0x44
 800a79e:	4413      	add	r3, r2
 800a7a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a7a2:	2e00      	cmp	r6, #0
 800a7a4:	f47f ae60 	bne.w	800a468 <HAL_PCD_IRQHandler+0x554>
 800a7a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f47f ae5c 	bne.w	800a468 <HAL_PCD_IRQHandler+0x554>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a7b0:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800a7b4:	6820      	ldr	r0, [r4, #0]
 800a7b6:	f004 fdbf 	bl	800f338 <USB_EP0_OutStart>
 800a7ba:	e655      	b.n	800a468 <HAL_PCD_IRQHandler+0x554>
  HAL_PCD_SetupStageCallback(hpcd);
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f005 ff2d 	bl	801061c <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a7c2:	e695      	b.n	800a4f0 <HAL_PCD_IRQHandler+0x5dc>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a7c4:	0719      	lsls	r1, r3, #28
 800a7c6:	f140 8097 	bpl.w	800a8f8 <HAL_PCD_IRQHandler+0x9e4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7ca:	494e      	ldr	r1, [pc, #312]	; (800a904 <HAL_PCD_IRQHandler+0x9f0>)
 800a7cc:	458c      	cmp	ip, r1
 800a7ce:	f67f ae8b 	bls.w	800a4e8 <HAL_PCD_IRQHandler+0x5d4>
 800a7d2:	0418      	lsls	r0, r3, #16
 800a7d4:	f57f ae88 	bpl.w	800a4e8 <HAL_PCD_IRQHandler+0x5d4>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a7dc:	6091      	str	r1, [r2, #8]
 800a7de:	e683      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x5d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a7e0:	4634      	mov	r4, r6
 800a7e2:	46c8      	mov	r8, r9
 800a7e4:	9e06      	ldr	r6, [sp, #24]
 800a7e6:	46d1      	mov	r9, sl
 800a7e8:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 800a7ec:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a7ee:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800a7f0:	42ab      	cmp	r3, r5
 800a7f2:	f4ff ae13 	bcc.w	800a41c <HAL_PCD_IRQHandler+0x508>
 800a7f6:	e78f      	b.n	800a718 <HAL_PCD_IRQHandler+0x804>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a7f8:	2900      	cmp	r1, #0
 800a7fa:	f6bf acba 	bge.w	800a172 <HAL_PCD_IRQHandler+0x25e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7fe:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a800:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a804:	f851 0bf0 	ldr.w	r0, [r1], #240
 800a808:	f004 fc3e 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a80c:	6863      	ldr	r3, [r4, #4]
 800a80e:	e4b0      	b.n	800a172 <HAL_PCD_IRQHandler+0x25e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a810:	f504 7128 	add.w	r1, r4, #672	; 0x2a0
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	f004 fc37 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a81a:	6863      	ldr	r3, [r4, #4]
 800a81c:	e40e      	b.n	800a03c <HAL_PCD_IRQHandler+0x128>
              ep->is_iso_incomplete = 0U;
 800a81e:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a820:	4659      	mov	r1, fp
 800a822:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 800a824:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a828:	f005 ff48 	bl	80106bc <HAL_PCD_ISOOUTIncompleteCallback>
 800a82c:	e675      	b.n	800a51a <HAL_PCD_IRQHandler+0x606>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a82e:	2900      	cmp	r1, #0
 800a830:	f6bf aca8 	bge.w	800a184 <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a834:	f504 718a 	add.w	r1, r4, #276	; 0x114
 800a838:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a83a:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a83e:	f004 fc23 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	e49e      	b.n	800a184 <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a846:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 800a84a:	6820      	ldr	r0, [r4, #0]
 800a84c:	f004 fc1c 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a850:	6863      	ldr	r3, [r4, #4]
 800a852:	f7ff bbfa 	b.w	800a04a <HAL_PCD_IRQHandler+0x136>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a856:	2900      	cmp	r1, #0
 800a858:	f6bf ac9d 	bge.w	800a196 <HAL_PCD_IRQHandler+0x282>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a85c:	f504 719c 	add.w	r1, r4, #312	; 0x138
 800a860:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a862:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a866:	f004 fc0f 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a86a:	6863      	ldr	r3, [r4, #4]
 800a86c:	e493      	b.n	800a196 <HAL_PCD_IRQHandler+0x282>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a86e:	2900      	cmp	r1, #0
 800a870:	f6bf ac9a 	bge.w	800a1a8 <HAL_PCD_IRQHandler+0x294>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a874:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 800a878:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a87a:	f884 215f 	strb.w	r2, [r4, #351]	; 0x15f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a87e:	f004 fc03 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a882:	6863      	ldr	r3, [r4, #4]
 800a884:	e490      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x294>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a886:	0418      	lsls	r0, r3, #16
 800a888:	d4a6      	bmi.n	800a7d8 <HAL_PCD_IRQHandler+0x8c4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a88a:	0699      	lsls	r1, r3, #26
 800a88c:	f57f aef9 	bpl.w	800a682 <HAL_PCD_IRQHandler+0x76e>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a890:	2120      	movs	r1, #32
 800a892:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a894:	e6f5      	b.n	800a682 <HAL_PCD_IRQHandler+0x76e>
              ep->is_iso_incomplete = 0U;
 800a896:	f04f 0300 	mov.w	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a89a:	4651      	mov	r1, sl
 800a89c:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 800a89e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a8a2:	f005 ff0f 	bl	80106c4 <HAL_PCD_ISOINIncompleteCallback>
 800a8a6:	e74e      	b.n	800a746 <HAL_PCD_IRQHandler+0x832>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a8a8:	2900      	cmp	r1, #0
 800a8aa:	f6bf ac86 	bge.w	800a1ba <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8ae:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 800a8b2:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a8b4:	f884 2183 	strb.w	r2, [r4, #387]	; 0x183
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8b8:	f004 fbe6 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8bc:	6863      	ldr	r3, [r4, #4]
 800a8be:	e47c      	b.n	800a1ba <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8c0:	f504 714c 	add.w	r1, r4, #816	; 0x330
 800a8c4:	6820      	ldr	r0, [r4, #0]
 800a8c6:	f004 fbdf 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8ca:	6863      	ldr	r3, [r4, #4]
 800a8cc:	f7ff bbd2 	b.w	800a074 <HAL_PCD_IRQHandler+0x160>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a8d0:	2900      	cmp	r1, #0
 800a8d2:	f6bf ac7b 	bge.w	800a1cc <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8d6:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 800a8da:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a8dc:	f884 21a7 	strb.w	r2, [r4, #423]	; 0x1a7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8e0:	f004 fbd2 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8e4:	6863      	ldr	r3, [r4, #4]
 800a8e6:	e471      	b.n	800a1cc <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8e8:	f504 7155 	add.w	r1, r4, #852	; 0x354
 800a8ec:	6820      	ldr	r0, [r4, #0]
 800a8ee:	f004 fbcb 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8f2:	6863      	ldr	r3, [r4, #4]
 800a8f4:	f7ff bbc5 	b.w	800a082 <HAL_PCD_IRQHandler+0x16e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a8f8:	0699      	lsls	r1, r3, #26
 800a8fa:	d573      	bpl.n	800a9e4 <HAL_PCD_IRQHandler+0xad0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a8fc:	2120      	movs	r1, #32
 800a8fe:	6091      	str	r1, [r2, #8]
 800a900:	e5f2      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x5d4>
 800a902:	bf00      	nop
 800a904:	4f54300a 	.word	0x4f54300a
 800a908:	4f54310a 	.word	0x4f54310a
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a90c:	2900      	cmp	r1, #0
 800a90e:	f6bf ac66 	bge.w	800a1de <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a912:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 800a916:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a918:	f884 21cb 	strb.w	r2, [r4, #459]	; 0x1cb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a91c:	f004 fbb4 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a920:	6863      	ldr	r3, [r4, #4]
 800a922:	e45c      	b.n	800a1de <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a924:	f504 715e 	add.w	r1, r4, #888	; 0x378
 800a928:	6820      	ldr	r0, [r4, #0]
 800a92a:	f004 fbad 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a92e:	6863      	ldr	r3, [r4, #4]
 800a930:	f7ff bbae 	b.w	800a090 <HAL_PCD_IRQHandler+0x17c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a934:	2900      	cmp	r1, #0
 800a936:	f6bf ac5b 	bge.w	800a1f0 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a93a:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 800a93e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a940:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a944:	f004 fba0 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a948:	6863      	ldr	r3, [r4, #4]
 800a94a:	e451      	b.n	800a1f0 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a94c:	f504 7167 	add.w	r1, r4, #924	; 0x39c
 800a950:	6820      	ldr	r0, [r4, #0]
 800a952:	f004 fb99 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a956:	6863      	ldr	r3, [r4, #4]
 800a958:	f7ff bba1 	b.w	800a09e <HAL_PCD_IRQHandler+0x18a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a95c:	2900      	cmp	r1, #0
 800a95e:	f6bf ac50 	bge.w	800a202 <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a962:	f504 7104 	add.w	r1, r4, #528	; 0x210
 800a966:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a968:	f884 2213 	strb.w	r2, [r4, #531]	; 0x213
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a96c:	f004 fb8c 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a970:	6863      	ldr	r3, [r4, #4]
 800a972:	e446      	b.n	800a202 <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a974:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 800a978:	6820      	ldr	r0, [r4, #0]
 800a97a:	f004 fb85 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a97e:	6863      	ldr	r3, [r4, #4]
 800a980:	f7ff bb94 	b.w	800a0ac <HAL_PCD_IRQHandler+0x198>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a984:	2900      	cmp	r1, #0
 800a986:	f6bf ac45 	bge.w	800a214 <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a98a:	f504 710d 	add.w	r1, r4, #564	; 0x234
 800a98e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a990:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a994:	f004 fb78 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a998:	6863      	ldr	r3, [r4, #4]
 800a99a:	e43b      	b.n	800a214 <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a99c:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 800a9a0:	6820      	ldr	r0, [r4, #0]
 800a9a2:	f004 fb71 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9a6:	6863      	ldr	r3, [r4, #4]
 800a9a8:	f7ff bb87 	b.w	800a0ba <HAL_PCD_IRQHandler+0x1a6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a9ac:	2900      	cmp	r1, #0
 800a9ae:	f6bf ac3a 	bge.w	800a226 <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9b2:	f504 7116 	add.w	r1, r4, #600	; 0x258
 800a9b6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a9b8:	f884 225b 	strb.w	r2, [r4, #603]	; 0x25b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9bc:	f004 fb64 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9c0:	6863      	ldr	r3, [r4, #4]
 800a9c2:	e430      	b.n	800a226 <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9c4:	f504 6181 	add.w	r1, r4, #1032	; 0x408
 800a9c8:	6820      	ldr	r0, [r4, #0]
 800a9ca:	f004 fb5d 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9ce:	6863      	ldr	r3, [r4, #4]
 800a9d0:	f7ff bb7a 	b.w	800a0c8 <HAL_PCD_IRQHandler+0x1b4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9d4:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 800a9d8:	6820      	ldr	r0, [r4, #0]
 800a9da:	f004 fb55 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9de:	6863      	ldr	r3, [r4, #4]
 800a9e0:	f7ff bb79 	b.w	800a0d6 <HAL_PCD_IRQHandler+0x1c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a9e4:	f013 0f28 	tst.w	r3, #40	; 0x28
 800a9e8:	f47f ad7e 	bne.w	800a4e8 <HAL_PCD_IRQHandler+0x5d4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9ec:	491b      	ldr	r1, [pc, #108]	; (800aa5c <HAL_PCD_IRQHandler+0xb48>)
 800a9ee:	458c      	cmp	ip, r1
 800a9f0:	d902      	bls.n	800a9f8 <HAL_PCD_IRQHandler+0xae4>
 800a9f2:	041b      	lsls	r3, r3, #16
 800a9f4:	f53f aef0 	bmi.w	800a7d8 <HAL_PCD_IRQHandler+0x8c4>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9f8:	6911      	ldr	r1, [r2, #16]
 800a9fa:	f8da 229c 	ldr.w	r2, [sl, #668]	; 0x29c
 800a9fe:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800aa02:	1a52      	subs	r2, r2, r1
 800aa04:	f8ca 2290 	str.w	r2, [sl, #656]	; 0x290
        if (epnum == 0U)
 800aa08:	f1b9 0f00 	cmp.w	r9, #0
 800aa0c:	f47f ae39 	bne.w	800a682 <HAL_PCD_IRQHandler+0x76e>
          if (ep->xfer_len == 0U)
 800aa10:	f8d4 128c 	ldr.w	r1, [r4, #652]	; 0x28c
 800aa14:	b1d9      	cbz	r1, 800aa4e <HAL_PCD_IRQHandler+0xb3a>
            ep->xfer_buff += ep->xfer_count;
 800aa16:	f8d4 1288 	ldr.w	r1, [r4, #648]	; 0x288
 800aa1a:	4411      	add	r1, r2
 800aa1c:	f8c4 1288 	str.w	r1, [r4, #648]	; 0x288
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa20:	e62f      	b.n	800a682 <HAL_PCD_IRQHandler+0x76e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa22:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 800aa26:	6820      	ldr	r0, [r4, #0]
 800aa28:	f004 fb2e 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa2c:	6863      	ldr	r3, [r4, #4]
 800aa2e:	f7ff bb59 	b.w	800a0e4 <HAL_PCD_IRQHandler+0x1d0>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aa32:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800aa36:	4649      	mov	r1, r9
 800aa38:	f004 fc7e 	bl	800f338 <USB_EP0_OutStart>
 800aa3c:	e621      	b.n	800a682 <HAL_PCD_IRQHandler+0x76e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa3e:	f204 4174 	addw	r1, r4, #1140	; 0x474
 800aa42:	6820      	ldr	r0, [r4, #0]
 800aa44:	f004 fb20 	bl	800f088 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa48:	6863      	ldr	r3, [r4, #4]
 800aa4a:	f7ff bb52 	b.w	800a0f2 <HAL_PCD_IRQHandler+0x1de>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa4e:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800aa52:	2101      	movs	r1, #1
 800aa54:	f004 fc70 	bl	800f338 <USB_EP0_OutStart>
 800aa58:	e613      	b.n	800a682 <HAL_PCD_IRQHandler+0x76e>
 800aa5a:	bf00      	nop
 800aa5c:	4f54300a 	.word	0x4f54300a

0800aa60 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800aa60:	f890 24bc 	ldrb.w	r2, [r0, #1212]	; 0x4bc
 800aa64:	2a01      	cmp	r2, #1
 800aa66:	d00e      	beq.n	800aa86 <HAL_PCD_SetAddress+0x26>
 800aa68:	2201      	movs	r2, #1
{
 800aa6a:	b510      	push	{r4, lr}
 800aa6c:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aa6e:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800aa70:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800aa74:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aa78:	f004 fbe4 	bl	800f244 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aa7c:	2300      	movs	r3, #0
  return HAL_OK;
 800aa7e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800aa80:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800aa84:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800aa86:	2002      	movs	r0, #2
}
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop

0800aa8c <HAL_PCD_EP_Open>:
{
 800aa8c:	b510      	push	{r4, lr}
 800aa8e:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800aa92:	0609      	lsls	r1, r1, #24
{
 800aa94:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800aa96:	d427      	bmi.n	800aae8 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa98:	f04f 0c24 	mov.w	ip, #36	; 0x24
 800aa9c:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800aaa0:	f50c 711f 	add.w	r1, ip, #636	; 0x27c
    ep->is_in = 0U;
 800aaa4:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 800aaa8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800aaac:	2000      	movs	r0, #0
 800aaae:	f88c 027d 	strb.w	r0, [ip, #637]	; 0x27d
  ep->maxpacket = ep_mps;
 800aab2:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800aab4:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aab6:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800aaba:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 800aabc:	b10a      	cbz	r2, 800aac2 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800aabe:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d101      	bne.n	800aaca <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	714b      	strb	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 800aaca:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d018      	beq.n	800ab04 <HAL_PCD_EP_Open+0x78>
 800aad2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800aad4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800aad6:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800aada:	f004 f8eb 	bl	800ecb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aade:	2300      	movs	r3, #0
  return ret;
 800aae0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800aae2:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800aae6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aae8:	2024      	movs	r0, #36	; 0x24
    ep->is_in = 1U;
 800aaea:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aaee:	fb00 400e 	mla	r0, r0, lr, r4
 800aaf2:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800aaf6:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 800aafa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800aafe:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800ab02:	e7d6      	b.n	800aab2 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800ab04:	2002      	movs	r0, #2
}
 800ab06:	bd10      	pop	{r4, pc}

0800ab08 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800ab08:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ab0c:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab10:	f04f 0124 	mov.w	r1, #36	; 0x24
{
 800ab14:	b510      	push	{r4, lr}
 800ab16:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800ab18:	d11a      	bne.n	800ab50 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab1a:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800ab1e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ab22:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab24:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 800ab28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ab2c:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab30:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800ab32:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d019      	beq.n	800ab6e <HAL_PCD_EP_Close+0x66>
 800ab3a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ab3c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800ab3e:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ab42:	f004 f8ff 	bl	800ed44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab46:	2300      	movs	r3, #0
  return HAL_OK;
 800ab48:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ab4a:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800ab4e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab50:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800ab54:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ab58:	2001      	movs	r0, #1
 800ab5a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab5e:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ab60:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab64:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800ab66:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d1e5      	bne.n	800ab3a <HAL_PCD_EP_Close+0x32>
 800ab6e:	2002      	movs	r0, #2
}
 800ab70:	bd10      	pop	{r4, pc}
 800ab72:	bf00      	nop

0800ab74 <HAL_PCD_EP_Receive>:
{
 800ab74:	b508      	push	{r3, lr}
 800ab76:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab7a:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 800ab7c:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab80:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 800ab84:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab88:	f501 711f 	add.w	r1, r1, #636	; 0x27c
  ep->xfer_len = len;
 800ab8c:	f8cc 328c 	str.w	r3, [ip, #652]	; 0x28c
  ep->xfer_count = 0U;
 800ab90:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800ab92:	f8cc 2288 	str.w	r2, [ip, #648]	; 0x288
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab96:	f88c e27c 	strb.w	lr, [ip, #636]	; 0x27c
  ep->xfer_count = 0U;
 800ab9a:	f8cc 3290 	str.w	r3, [ip, #656]	; 0x290
  ep->is_in = 0U;
 800ab9e:	f88c 327d 	strb.w	r3, [ip, #637]	; 0x27d
  if (hpcd->Init.dma_enable == 1U)
 800aba2:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aba4:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800aba6:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800aba8:	bf08      	it	eq
 800abaa:	f8cc 2298 	streq.w	r2, [ip, #664]	; 0x298
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	f004 f926 	bl	800ee00 <USB_EPStartXfer>
}
 800abb4:	2000      	movs	r0, #0
 800abb6:	bd08      	pop	{r3, pc}

0800abb8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800abb8:	f001 010f 	and.w	r1, r1, #15
 800abbc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800abc0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 800abc4:	f8d0 0290 	ldr.w	r0, [r0, #656]	; 0x290
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop

0800abcc <HAL_PCD_EP_Transmit>:
{
 800abcc:	b508      	push	{r3, lr}
 800abce:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abd2:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 800abd4:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abd8:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 800abdc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abe0:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800abe2:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 800abe6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800abe8:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800abec:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->is_in = 1U;
 800abf0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800abf2:	f88c e03c 	strb.w	lr, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800abf6:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800abfa:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800abfc:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800abfe:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800ac00:	bf08      	it	eq
 800ac02:	f8cc 2058 	streq.w	r2, [ip, #88]	; 0x58
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	f004 f8fa 	bl	800ee00 <USB_EPStartXfer>
}
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	bd08      	pop	{r3, pc}

0800ac10 <HAL_PCD_EP_SetStall>:
{
 800ac10:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ac12:	6843      	ldr	r3, [r0, #4]
 800ac14:	f001 050f 	and.w	r5, r1, #15
 800ac18:	429d      	cmp	r5, r3
 800ac1a:	d834      	bhi.n	800ac86 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800ac1c:	060b      	lsls	r3, r1, #24
 800ac1e:	4604      	mov	r4, r0
 800ac20:	d41d      	bmi.n	800ac5e <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800ac22:	2224      	movs	r2, #36	; 0x24
    ep->is_in = 0U;
 800ac24:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800ac28:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800ac2c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ac30:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800ac32:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 800ac36:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  ep->is_stall = 1U;
 800ac3a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac3c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800ac3e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800ac40:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d01c      	beq.n	800ac82 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ac48:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800ac4a:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ac4e:	f004 fa99 	bl	800f184 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac52:	b1d5      	cbz	r5, 800ac8a <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800ac54:	2300      	movs	r3, #0
  return HAL_OK;
 800ac56:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ac58:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800ac5c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac5e:	2124      	movs	r1, #36	; 0x24
    ep->is_in = 1U;
 800ac60:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800ac64:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac66:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800ac6a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac6e:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ac70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800ac74:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac76:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800ac78:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800ac7a:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d1e2      	bne.n	800ac48 <HAL_PCD_EP_SetStall+0x38>
 800ac82:	2002      	movs	r0, #2
}
 800ac84:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ac86:	2001      	movs	r0, #1
}
 800ac88:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ac8a:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800ac8e:	7b21      	ldrb	r1, [r4, #12]
 800ac90:	6820      	ldr	r0, [r4, #0]
 800ac92:	f004 fb51 	bl	800f338 <USB_EP0_OutStart>
 800ac96:	e7dd      	b.n	800ac54 <HAL_PCD_EP_SetStall+0x44>

0800ac98 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ac98:	6842      	ldr	r2, [r0, #4]
{
 800ac9a:	b538      	push	{r3, r4, r5, lr}
 800ac9c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d832      	bhi.n	800ad0a <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800aca4:	f011 0f80 	tst.w	r1, #128	; 0x80
 800aca8:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acaa:	f04f 0124 	mov.w	r1, #36	; 0x24
    ep->is_in = 1U;
 800acae:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800acb2:	d119      	bne.n	800ace8 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800acb4:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800acb8:	2000      	movs	r0, #0
 800acba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800acbe:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800acc0:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 800acc4:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 800acc8:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800acca:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800accc:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d018      	beq.n	800ad06 <HAL_PCD_EP_ClrStall+0x6e>
 800acd4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800acd6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800acd8:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800acdc:	f004 fa86 	bl	800f1ec <USB_EPClearStall>
  return HAL_OK;
 800ace0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800ace2:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
}
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ace8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800acec:	2001      	movs	r0, #1
 800acee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800acf2:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acf4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800acf6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800acfa:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800acfc:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800acfe:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d1e6      	bne.n	800acd4 <HAL_PCD_EP_ClrStall+0x3c>
 800ad06:	2002      	movs	r0, #2
}
 800ad08:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ad0a:	2001      	movs	r0, #1
}
 800ad0c:	bd38      	pop	{r3, r4, r5, pc}
 800ad0e:	bf00      	nop

0800ad10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ad10:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ad12:	6804      	ldr	r4, [r0, #0]
 800ad14:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 800ad16:	b931      	cbnz	r1, 800ad26 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ad18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800ad1c:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ad1e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800ad20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad24:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ad26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800ad28:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ad2a:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800ad2e:	d00b      	beq.n	800ad48 <HAL_PCDEx_SetTxFiFo+0x38>
 800ad30:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ad32:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800ad36:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ad38:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800ad3c:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ad3e:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800ad40:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ad42:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800ad46:	d3f4      	bcc.n	800ad32 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ad48:	3140      	adds	r1, #64	; 0x40
 800ad4a:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
}
 800ad4e:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ad50:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800ad54:	6062      	str	r2, [r4, #4]
}
 800ad56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ad5c:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800ad5e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	6259      	str	r1, [r3, #36]	; 0x24
}
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop

0800ad68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ad68:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800ad6a:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ad6e:	4909      	ldr	r1, [pc, #36]	; (800ad94 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad70:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800ad72:	4660      	mov	r0, ip
{
 800ad74:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800ad76:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800ad78:	f883 c4f4 	strb.w	ip, [r3, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 800ad7c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ad80:	6993      	ldr	r3, [r2, #24]
}
 800ad82:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ad86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad8a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ad8c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ad8e:	4319      	orrs	r1, r3
 800ad90:	6551      	str	r1, [r2, #84]	; 0x54
}
 800ad92:	4770      	bx	lr
 800ad94:	10000003 	.word	0x10000003

0800ad98 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop

0800ad9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ad9c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ad9e:	4c10      	ldr	r4, [pc, #64]	; (800ade0 <HAL_PWREx_ConfigSupply+0x44>)
 800ada0:	68e3      	ldr	r3, [r4, #12]
 800ada2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ada6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ada8:	d105      	bne.n	800adb6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800adaa:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800adae:	1a18      	subs	r0, r3, r0
 800adb0:	bf18      	it	ne
 800adb2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800adb4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800adb6:	f023 0307 	bic.w	r3, r3, #7
 800adba:	4303      	orrs	r3, r0
 800adbc:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800adbe:	f7fb fead 	bl	8006b1c <HAL_GetTick>
 800adc2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800adc4:	e005      	b.n	800add2 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800adc6:	f7fb fea9 	bl	8006b1c <HAL_GetTick>
 800adca:	1b40      	subs	r0, r0, r5
 800adcc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800add0:	d804      	bhi.n	800addc <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800add2:	6863      	ldr	r3, [r4, #4]
 800add4:	049b      	lsls	r3, r3, #18
 800add6:	d5f6      	bpl.n	800adc6 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800add8:	2000      	movs	r0, #0
}
 800adda:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800addc:	2001      	movs	r0, #1
}
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	58024800 	.word	0x58024800

0800ade4 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800ade4:	4a02      	ldr	r2, [pc, #8]	; (800adf0 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800ade6:	68d3      	ldr	r3, [r2, #12]
 800ade8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adec:	60d3      	str	r3, [r2, #12]
}
 800adee:	4770      	bx	lr
 800adf0:	58024800 	.word	0x58024800

0800adf4 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adf4:	4b3c      	ldr	r3, [pc, #240]	; (800aee8 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800adf6:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800adfa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800adfc:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800adfe:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae02:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ae04:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800ae08:	d038      	beq.n	800ae7c <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae0a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ae0e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae12:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae16:	fb05 f101 	mul.w	r1, r5, r1
 800ae1a:	2a01      	cmp	r2, #1
 800ae1c:	ee07 1a90 	vmov	s15, r1
 800ae20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800ae24:	d002      	beq.n	800ae2c <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800ae26:	2a02      	cmp	r2, #2
 800ae28:	d050      	beq.n	800aecc <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 800ae2a:	b34a      	cbz	r2, 800ae80 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae2c:	ee07 0a90 	vmov	s15, r0
 800ae30:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 800aeec <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800ae34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800ae3e:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800aef0 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800ae42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ae4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae52:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ae56:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ae5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ae5e:	4b22      	ldr	r3, [pc, #136]	; (800aee8 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 800ae60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae62:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ae66:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ae68:	ee07 3a90 	vmov	s15, r3
 800ae6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ae70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae78:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800ae7c:	bc30      	pop	{r4, r5}
 800ae7e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	0692      	lsls	r2, r2, #26
 800ae84:	d529      	bpl.n	800aeda <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae86:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae88:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae8c:	4a19      	ldr	r2, [pc, #100]	; (800aef4 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae94:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae9c:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800aef0 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800aea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aea4:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aea6:	ee06 3a10 	vmov	s12, r3
 800aeaa:	ee05 2a90 	vmov	s11, r2
 800aeae:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800aeb2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800aeb6:	ee36 6a26 	vadd.f32	s12, s12, s13
 800aeba:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800aebe:	eef0 7a46 	vmov.f32	s15, s12
 800aec2:	eee7 7a05 	vfma.f32	s15, s14, s10
 800aec6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800aeca:	e7c8      	b.n	800ae5e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aecc:	ee07 0a90 	vmov	s15, r0
 800aed0:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800aef8 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800aed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aed8:	e7ae      	b.n	800ae38 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aeda:	ee07 0a90 	vmov	s15, r0
 800aede:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800aefc <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800aee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aee6:	e7a7      	b.n	800ae38 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800aee8:	58024400 	.word	0x58024400
 800aeec:	4a742400 	.word	0x4a742400
 800aef0:	39000000 	.word	0x39000000
 800aef4:	03d09000 	.word	0x03d09000
 800aef8:	4bbebc20 	.word	0x4bbebc20
 800aefc:	4c742400 	.word	0x4c742400

0800af00 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800af00:	2800      	cmp	r0, #0
 800af02:	f000 81e8 	beq.w	800b2d6 <HAL_RCC_OscConfig+0x3d6>
{
 800af06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af08:	6803      	ldr	r3, [r0, #0]
 800af0a:	4604      	mov	r4, r0
 800af0c:	07d9      	lsls	r1, r3, #31
 800af0e:	d52e      	bpl.n	800af6e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af10:	49a4      	ldr	r1, [pc, #656]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800af12:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af14:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af16:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800af1a:	2a10      	cmp	r2, #16
 800af1c:	f000 8107 	beq.w	800b12e <HAL_RCC_OscConfig+0x22e>
 800af20:	2a18      	cmp	r2, #24
 800af22:	f000 80ff 	beq.w	800b124 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af26:	6863      	ldr	r3, [r4, #4]
 800af28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af2c:	f000 812a 	beq.w	800b184 <HAL_RCC_OscConfig+0x284>
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 8168 	beq.w	800b206 <HAL_RCC_OscConfig+0x306>
 800af36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af3a:	4b9a      	ldr	r3, [pc, #616]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	f000 8289 	beq.w	800b454 <HAL_RCC_OscConfig+0x554>
 800af42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800af50:	f7fb fde4 	bl	8006b1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af54:	4e93      	ldr	r6, [pc, #588]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800af56:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af58:	e005      	b.n	800af66 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af5a:	f7fb fddf 	bl	8006b1c <HAL_GetTick>
 800af5e:	1b40      	subs	r0, r0, r5
 800af60:	2864      	cmp	r0, #100	; 0x64
 800af62:	f200 814e 	bhi.w	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af66:	6833      	ldr	r3, [r6, #0]
 800af68:	039b      	lsls	r3, r3, #14
 800af6a:	d5f6      	bpl.n	800af5a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	079d      	lsls	r5, r3, #30
 800af70:	f100 808a 	bmi.w	800b088 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800af74:	06d9      	lsls	r1, r3, #27
 800af76:	d533      	bpl.n	800afe0 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af78:	4a8a      	ldr	r2, [pc, #552]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800af7a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800af82:	2b08      	cmp	r3, #8
 800af84:	f000 80e3 	beq.w	800b14e <HAL_RCC_OscConfig+0x24e>
 800af88:	2b18      	cmp	r3, #24
 800af8a:	f000 80db 	beq.w	800b144 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800af8e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800af90:	4d84      	ldr	r5, [pc, #528]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 816f 	beq.w	800b276 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af9e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800afa0:	f7fb fdbc 	bl	8006b1c <HAL_GetTick>
 800afa4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800afa6:	e005      	b.n	800afb4 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800afa8:	f7fb fdb8 	bl	8006b1c <HAL_GetTick>
 800afac:	1b80      	subs	r0, r0, r6
 800afae:	2802      	cmp	r0, #2
 800afb0:	f200 8127 	bhi.w	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	05db      	lsls	r3, r3, #23
 800afb8:	d5f6      	bpl.n	800afa8 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800afba:	f7fb fdc7 	bl	8006b4c <HAL_GetREVID>
 800afbe:	f241 0303 	movw	r3, #4099	; 0x1003
 800afc2:	4298      	cmp	r0, r3
 800afc4:	f200 826d 	bhi.w	800b4a2 <HAL_RCC_OscConfig+0x5a2>
 800afc8:	6a22      	ldr	r2, [r4, #32]
 800afca:	686b      	ldr	r3, [r5, #4]
 800afcc:	2a20      	cmp	r2, #32
 800afce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800afd2:	bf0c      	ite	eq
 800afd4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800afd8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800afdc:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	071d      	lsls	r5, r3, #28
 800afe2:	d516      	bpl.n	800b012 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800afe4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800afe6:	4d6f      	ldr	r5, [pc, #444]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 8122 	beq.w	800b232 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800afee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800aff0:	f043 0301 	orr.w	r3, r3, #1
 800aff4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800aff6:	f7fb fd91 	bl	8006b1c <HAL_GetTick>
 800affa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800affc:	e005      	b.n	800b00a <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800affe:	f7fb fd8d 	bl	8006b1c <HAL_GetTick>
 800b002:	1b80      	subs	r0, r0, r6
 800b004:	2802      	cmp	r0, #2
 800b006:	f200 80fc 	bhi.w	800b202 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b00a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b00c:	0798      	lsls	r0, r3, #30
 800b00e:	d5f6      	bpl.n	800affe <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	069a      	lsls	r2, r3, #26
 800b014:	d516      	bpl.n	800b044 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b016:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800b018:	4d62      	ldr	r5, [pc, #392]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 811a 	beq.w	800b254 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b026:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b028:	f7fb fd78 	bl	8006b1c <HAL_GetTick>
 800b02c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b02e:	e005      	b.n	800b03c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b030:	f7fb fd74 	bl	8006b1c <HAL_GetTick>
 800b034:	1b80      	subs	r0, r0, r6
 800b036:	2802      	cmp	r0, #2
 800b038:	f200 80e3 	bhi.w	800b202 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	049f      	lsls	r7, r3, #18
 800b040:	d5f6      	bpl.n	800b030 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	0759      	lsls	r1, r3, #29
 800b046:	f100 80a3 	bmi.w	800b190 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b04a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b04c:	b1d0      	cbz	r0, 800b084 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b04e:	4d55      	ldr	r5, [pc, #340]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800b050:	692b      	ldr	r3, [r5, #16]
 800b052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b056:	2b18      	cmp	r3, #24
 800b058:	f000 81ae 	beq.w	800b3b8 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800b05c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b05e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800b060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b064:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b066:	f000 8142 	beq.w	800b2ee <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800b06a:	f7fb fd57 	bl	8006b1c <HAL_GetTick>
 800b06e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b070:	e005      	b.n	800b07e <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b072:	f7fb fd53 	bl	8006b1c <HAL_GetTick>
 800b076:	1b00      	subs	r0, r0, r4
 800b078:	2802      	cmp	r0, #2
 800b07a:	f200 80c2 	bhi.w	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b07e:	682b      	ldr	r3, [r5, #0]
 800b080:	019b      	lsls	r3, r3, #6
 800b082:	d4f6      	bmi.n	800b072 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800b084:	2000      	movs	r0, #0
}
 800b086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b088:	4a46      	ldr	r2, [pc, #280]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800b08a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b08c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b08e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800b092:	d12d      	bne.n	800b0f0 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b094:	4b43      	ldr	r3, [pc, #268]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800b096:	68e2      	ldr	r2, [r4, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	0759      	lsls	r1, r3, #29
 800b09c:	d501      	bpl.n	800b0a2 <HAL_RCC_OscConfig+0x1a2>
 800b09e:	2a00      	cmp	r2, #0
 800b0a0:	d04e      	beq.n	800b140 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b0a2:	4d40      	ldr	r5, [pc, #256]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	f023 0319 	bic.w	r3, r3, #25
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b0ae:	f7fb fd35 	bl	8006b1c <HAL_GetTick>
 800b0b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0b4:	e005      	b.n	800b0c2 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0b6:	f7fb fd31 	bl	8006b1c <HAL_GetTick>
 800b0ba:	1b80      	subs	r0, r0, r6
 800b0bc:	2802      	cmp	r0, #2
 800b0be:	f200 80a0 	bhi.w	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0c2:	682b      	ldr	r3, [r5, #0]
 800b0c4:	075b      	lsls	r3, r3, #29
 800b0c6:	d5f6      	bpl.n	800b0b6 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0c8:	f7fb fd40 	bl	8006b4c <HAL_GetREVID>
 800b0cc:	f241 0303 	movw	r3, #4099	; 0x1003
 800b0d0:	4298      	cmp	r0, r3
 800b0d2:	f200 80f7 	bhi.w	800b2c4 <HAL_RCC_OscConfig+0x3c4>
 800b0d6:	6922      	ldr	r2, [r4, #16]
 800b0d8:	686b      	ldr	r3, [r5, #4]
 800b0da:	2a40      	cmp	r2, #64	; 0x40
 800b0dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b0e0:	bf0c      	ite	eq
 800b0e2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800b0e6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800b0ea:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	e741      	b.n	800af74 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b0f0:	2b18      	cmp	r3, #24
 800b0f2:	f000 80e3 	beq.w	800b2bc <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b0f6:	4d2b      	ldr	r5, [pc, #172]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b0f8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b0fa:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	f000 80cc 	beq.w	800b29a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b102:	f023 0319 	bic.w	r3, r3, #25
 800b106:	4313      	orrs	r3, r2
 800b108:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b10a:	f7fb fd07 	bl	8006b1c <HAL_GetTick>
 800b10e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b110:	e004      	b.n	800b11c <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b112:	f7fb fd03 	bl	8006b1c <HAL_GetTick>
 800b116:	1b80      	subs	r0, r0, r6
 800b118:	2802      	cmp	r0, #2
 800b11a:	d872      	bhi.n	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b11c:	682b      	ldr	r3, [r5, #0]
 800b11e:	075f      	lsls	r7, r3, #29
 800b120:	d5f7      	bpl.n	800b112 <HAL_RCC_OscConfig+0x212>
 800b122:	e7d1      	b.n	800b0c8 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b124:	f001 0103 	and.w	r1, r1, #3
 800b128:	2902      	cmp	r1, #2
 800b12a:	f47f aefc 	bne.w	800af26 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b12e:	4a1d      	ldr	r2, [pc, #116]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800b130:	6812      	ldr	r2, [r2, #0]
 800b132:	0392      	lsls	r2, r2, #14
 800b134:	f57f af1b 	bpl.w	800af6e <HAL_RCC_OscConfig+0x6e>
 800b138:	6862      	ldr	r2, [r4, #4]
 800b13a:	2a00      	cmp	r2, #0
 800b13c:	f47f af17 	bne.w	800af6e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800b140:	2001      	movs	r0, #1
}
 800b142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b144:	f002 0203 	and.w	r2, r2, #3
 800b148:	2a01      	cmp	r2, #1
 800b14a:	f47f af20 	bne.w	800af8e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b14e:	4b15      	ldr	r3, [pc, #84]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	05da      	lsls	r2, r3, #23
 800b154:	d502      	bpl.n	800b15c <HAL_RCC_OscConfig+0x25c>
 800b156:	69e3      	ldr	r3, [r4, #28]
 800b158:	2b80      	cmp	r3, #128	; 0x80
 800b15a:	d1f1      	bne.n	800b140 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b15c:	f7fb fcf6 	bl	8006b4c <HAL_GetREVID>
 800b160:	f241 0303 	movw	r3, #4099	; 0x1003
 800b164:	4298      	cmp	r0, r3
 800b166:	f200 80b8 	bhi.w	800b2da <HAL_RCC_OscConfig+0x3da>
 800b16a:	6a22      	ldr	r2, [r4, #32]
 800b16c:	2a20      	cmp	r2, #32
 800b16e:	f000 81a7 	beq.w	800b4c0 <HAL_RCC_OscConfig+0x5c0>
 800b172:	490c      	ldr	r1, [pc, #48]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800b174:	684b      	ldr	r3, [r1, #4]
 800b176:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b17a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800b17e:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	e72d      	b.n	800afe0 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b184:	4a07      	ldr	r2, [pc, #28]	; (800b1a4 <HAL_RCC_OscConfig+0x2a4>)
 800b186:	6813      	ldr	r3, [r2, #0]
 800b188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b18c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b18e:	e6df      	b.n	800af50 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800b190:	4d05      	ldr	r5, [pc, #20]	; (800b1a8 <HAL_RCC_OscConfig+0x2a8>)
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b198:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800b19a:	f7fb fcbf 	bl	8006b1c <HAL_GetTick>
 800b19e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1a0:	e009      	b.n	800b1b6 <HAL_RCC_OscConfig+0x2b6>
 800b1a2:	bf00      	nop
 800b1a4:	58024400 	.word	0x58024400
 800b1a8:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1ac:	f7fb fcb6 	bl	8006b1c <HAL_GetTick>
 800b1b0:	1b80      	subs	r0, r0, r6
 800b1b2:	2864      	cmp	r0, #100	; 0x64
 800b1b4:	d825      	bhi.n	800b202 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1b6:	682b      	ldr	r3, [r5, #0]
 800b1b8:	05da      	lsls	r2, r3, #23
 800b1ba:	d5f7      	bpl.n	800b1ac <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1bc:	68a3      	ldr	r3, [r4, #8]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	f000 8178 	beq.w	800b4b4 <HAL_RCC_OscConfig+0x5b4>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 8153 	beq.w	800b470 <HAL_RCC_OscConfig+0x570>
 800b1ca:	2b05      	cmp	r3, #5
 800b1cc:	4ba5      	ldr	r3, [pc, #660]	; (800b464 <HAL_RCC_OscConfig+0x564>)
 800b1ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1d0:	f000 817f 	beq.w	800b4d2 <HAL_RCC_OscConfig+0x5d2>
 800b1d4:	f022 0201 	bic.w	r2, r2, #1
 800b1d8:	671a      	str	r2, [r3, #112]	; 0x70
 800b1da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1dc:	f022 0204 	bic.w	r2, r2, #4
 800b1e0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b1e2:	f7fb fc9b 	bl	8006b1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1e6:	4e9f      	ldr	r6, [pc, #636]	; (800b464 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1e8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b1ec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1ee:	e004      	b.n	800b1fa <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1f0:	f7fb fc94 	bl	8006b1c <HAL_GetTick>
 800b1f4:	1b40      	subs	r0, r0, r5
 800b1f6:	42b8      	cmp	r0, r7
 800b1f8:	d803      	bhi.n	800b202 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1fa:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b1fc:	079b      	lsls	r3, r3, #30
 800b1fe:	d5f7      	bpl.n	800b1f0 <HAL_RCC_OscConfig+0x2f0>
 800b200:	e723      	b.n	800b04a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800b202:	2003      	movs	r0, #3
}
 800b204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b206:	4d97      	ldr	r5, [pc, #604]	; (800b464 <HAL_RCC_OscConfig+0x564>)
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b216:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b218:	f7fb fc80 	bl	8006b1c <HAL_GetTick>
 800b21c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b21e:	e004      	b.n	800b22a <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b220:	f7fb fc7c 	bl	8006b1c <HAL_GetTick>
 800b224:	1b80      	subs	r0, r0, r6
 800b226:	2864      	cmp	r0, #100	; 0x64
 800b228:	d8eb      	bhi.n	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	039f      	lsls	r7, r3, #14
 800b22e:	d4f7      	bmi.n	800b220 <HAL_RCC_OscConfig+0x320>
 800b230:	e69c      	b.n	800af6c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800b232:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b234:	f023 0301 	bic.w	r3, r3, #1
 800b238:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b23a:	f7fb fc6f 	bl	8006b1c <HAL_GetTick>
 800b23e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b240:	e004      	b.n	800b24c <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b242:	f7fb fc6b 	bl	8006b1c <HAL_GetTick>
 800b246:	1b80      	subs	r0, r0, r6
 800b248:	2802      	cmp	r0, #2
 800b24a:	d8da      	bhi.n	800b202 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b24c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b24e:	0799      	lsls	r1, r3, #30
 800b250:	d4f7      	bmi.n	800b242 <HAL_RCC_OscConfig+0x342>
 800b252:	e6dd      	b.n	800b010 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b25a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b25c:	f7fb fc5e 	bl	8006b1c <HAL_GetTick>
 800b260:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b262:	e004      	b.n	800b26e <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b264:	f7fb fc5a 	bl	8006b1c <HAL_GetTick>
 800b268:	1b80      	subs	r0, r0, r6
 800b26a:	2802      	cmp	r0, #2
 800b26c:	d8c9      	bhi.n	800b202 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b26e:	682b      	ldr	r3, [r5, #0]
 800b270:	0498      	lsls	r0, r3, #18
 800b272:	d4f7      	bmi.n	800b264 <HAL_RCC_OscConfig+0x364>
 800b274:	e6e5      	b.n	800b042 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800b276:	682b      	ldr	r3, [r5, #0]
 800b278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b27c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b27e:	f7fb fc4d 	bl	8006b1c <HAL_GetTick>
 800b282:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b284:	e004      	b.n	800b290 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b286:	f7fb fc49 	bl	8006b1c <HAL_GetTick>
 800b28a:	1b80      	subs	r0, r0, r6
 800b28c:	2802      	cmp	r0, #2
 800b28e:	d8b8      	bhi.n	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	05df      	lsls	r7, r3, #23
 800b294:	d4f7      	bmi.n	800b286 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	e6a2      	b.n	800afe0 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b2a0:	f7fb fc3c 	bl	8006b1c <HAL_GetTick>
 800b2a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b2a6:	e004      	b.n	800b2b2 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2a8:	f7fb fc38 	bl	8006b1c <HAL_GetTick>
 800b2ac:	1b80      	subs	r0, r0, r6
 800b2ae:	2802      	cmp	r0, #2
 800b2b0:	d8a7      	bhi.n	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	0758      	lsls	r0, r3, #29
 800b2b6:	d4f7      	bmi.n	800b2a8 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	e65b      	b.n	800af74 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b2bc:	0790      	lsls	r0, r2, #30
 800b2be:	f47f af1a 	bne.w	800b0f6 <HAL_RCC_OscConfig+0x1f6>
 800b2c2:	e6e7      	b.n	800b094 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2c4:	686b      	ldr	r3, [r5, #4]
 800b2c6:	6922      	ldr	r2, [r4, #16]
 800b2c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b2cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b2d0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	e64e      	b.n	800af74 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800b2d6:	2001      	movs	r0, #1
}
 800b2d8:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b2da:	4a62      	ldr	r2, [pc, #392]	; (800b464 <HAL_RCC_OscConfig+0x564>)
 800b2dc:	6a21      	ldr	r1, [r4, #32]
 800b2de:	68d3      	ldr	r3, [r2, #12]
 800b2e0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b2e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b2e8:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	e678      	b.n	800afe0 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800b2ee:	f7fb fc15 	bl	8006b1c <HAL_GetTick>
 800b2f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2f4:	e004      	b.n	800b300 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2f6:	f7fb fc11 	bl	8006b1c <HAL_GetTick>
 800b2fa:	1b80      	subs	r0, r0, r6
 800b2fc:	2802      	cmp	r0, #2
 800b2fe:	d880      	bhi.n	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	0199      	lsls	r1, r3, #6
 800b304:	d4f7      	bmi.n	800b2f6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b306:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b308:	4b57      	ldr	r3, [pc, #348]	; (800b468 <HAL_RCC_OscConfig+0x568>)
 800b30a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b30c:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b30e:	4957      	ldr	r1, [pc, #348]	; (800b46c <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b310:	4e54      	ldr	r6, [pc, #336]	; (800b464 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b312:	4313      	orrs	r3, r2
 800b314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b316:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b31a:	62ab      	str	r3, [r5, #40]	; 0x28
 800b31c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800b320:	3b01      	subs	r3, #1
 800b322:	3a01      	subs	r2, #1
 800b324:	025b      	lsls	r3, r3, #9
 800b326:	0412      	lsls	r2, r2, #16
 800b328:	b29b      	uxth	r3, r3
 800b32a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b32e:	4313      	orrs	r3, r2
 800b330:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b332:	3a01      	subs	r2, #1
 800b334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b338:	4313      	orrs	r3, r2
 800b33a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b33c:	3a01      	subs	r2, #1
 800b33e:	0612      	lsls	r2, r2, #24
 800b340:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b344:	4313      	orrs	r3, r2
 800b346:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800b348:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b34a:	f023 0301 	bic.w	r3, r3, #1
 800b34e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b350:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800b352:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b354:	4011      	ands	r1, r2
 800b356:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800b35a:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b35c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b35e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b360:	f023 030c 	bic.w	r3, r3, #12
 800b364:	4313      	orrs	r3, r2
 800b366:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b368:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b36a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b36c:	f023 0302 	bic.w	r3, r3, #2
 800b370:	4313      	orrs	r3, r2
 800b372:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b374:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b37a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b37c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b37e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b382:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b384:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b38a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800b38c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b38e:	f043 0301 	orr.w	r3, r3, #1
 800b392:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b39a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b39c:	f7fb fbbe 	bl	8006b1c <HAL_GetTick>
 800b3a0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b3a2:	e005      	b.n	800b3b0 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3a4:	f7fb fbba 	bl	8006b1c <HAL_GetTick>
 800b3a8:	1b00      	subs	r0, r0, r4
 800b3aa:	2802      	cmp	r0, #2
 800b3ac:	f63f af29 	bhi.w	800b202 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b3b0:	6833      	ldr	r3, [r6, #0]
 800b3b2:	019a      	lsls	r2, r3, #6
 800b3b4:	d5f6      	bpl.n	800b3a4 <HAL_RCC_OscConfig+0x4a4>
 800b3b6:	e665      	b.n	800b084 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3b8:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b3ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b3bc:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3be:	f43f ae62 	beq.w	800b086 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3c2:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b3c8:	428b      	cmp	r3, r1
 800b3ca:	f47f aeb9 	bne.w	800b140 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b3ce:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	f47f aeb3 	bne.w	800b140 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b3da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b3dc:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800b3e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	f47f aeac 	bne.w	800b140 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b3e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3ea:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800b3ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	f47f aea5 	bne.w	800b140 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b3f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b3f8:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800b3fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b3fe:	429a      	cmp	r2, r3
 800b400:	f47f ae9e 	bne.w	800b140 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b406:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800b40a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b40c:	429e      	cmp	r6, r3
 800b40e:	f47f ae97 	bne.w	800b140 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b412:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b414:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b416:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b41a:	429a      	cmp	r2, r3
 800b41c:	f43f ae32 	beq.w	800b084 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800b420:	4a10      	ldr	r2, [pc, #64]	; (800b464 <HAL_RCC_OscConfig+0x564>)
 800b422:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b424:	f023 0301 	bic.w	r3, r3, #1
 800b428:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800b42a:	f7fb fb77 	bl	8006b1c <HAL_GetTick>
 800b42e:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b430:	f7fb fb74 	bl	8006b1c <HAL_GetTick>
 800b434:	42a8      	cmp	r0, r5
 800b436:	d0fb      	beq.n	800b430 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b438:	4a0a      	ldr	r2, [pc, #40]	; (800b464 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 800b43a:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b43c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b43e:	4b0b      	ldr	r3, [pc, #44]	; (800b46c <HAL_RCC_OscConfig+0x56c>)
 800b440:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b442:	4023      	ands	r3, r4
 800b444:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b448:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800b44a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b44c:	f043 0301 	orr.w	r3, r3, #1
 800b450:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b454:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b460:	601a      	str	r2, [r3, #0]
 800b462:	e575      	b.n	800af50 <HAL_RCC_OscConfig+0x50>
 800b464:	58024400 	.word	0x58024400
 800b468:	fffffc0c 	.word	0xfffffc0c
 800b46c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b470:	4d1c      	ldr	r5, [pc, #112]	; (800b4e4 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b472:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b476:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b478:	f023 0301 	bic.w	r3, r3, #1
 800b47c:	672b      	str	r3, [r5, #112]	; 0x70
 800b47e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b480:	f023 0304 	bic.w	r3, r3, #4
 800b484:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b486:	f7fb fb49 	bl	8006b1c <HAL_GetTick>
 800b48a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b48c:	e005      	b.n	800b49a <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b48e:	f7fb fb45 	bl	8006b1c <HAL_GetTick>
 800b492:	1b80      	subs	r0, r0, r6
 800b494:	42b8      	cmp	r0, r7
 800b496:	f63f aeb4 	bhi.w	800b202 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b49a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b49c:	0798      	lsls	r0, r3, #30
 800b49e:	d4f6      	bmi.n	800b48e <HAL_RCC_OscConfig+0x58e>
 800b4a0:	e5d3      	b.n	800b04a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b4a2:	68eb      	ldr	r3, [r5, #12]
 800b4a4:	6a22      	ldr	r2, [r4, #32]
 800b4a6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b4aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b4ae:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	e595      	b.n	800afe0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4b4:	4a0b      	ldr	r2, [pc, #44]	; (800b4e4 <HAL_RCC_OscConfig+0x5e4>)
 800b4b6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b4b8:	f043 0301 	orr.w	r3, r3, #1
 800b4bc:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b4be:	e690      	b.n	800b1e2 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b4c0:	4a08      	ldr	r2, [pc, #32]	; (800b4e4 <HAL_RCC_OscConfig+0x5e4>)
 800b4c2:	6853      	ldr	r3, [r2, #4]
 800b4c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b4c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4cc:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	e586      	b.n	800afe0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4d2:	f042 0204 	orr.w	r2, r2, #4
 800b4d6:	671a      	str	r2, [r3, #112]	; 0x70
 800b4d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4da:	f042 0201 	orr.w	r2, r2, #1
 800b4de:	671a      	str	r2, [r3, #112]	; 0x70
 800b4e0:	e67f      	b.n	800b1e2 <HAL_RCC_OscConfig+0x2e2>
 800b4e2:	bf00      	nop
 800b4e4:	58024400 	.word	0x58024400

0800b4e8 <HAL_RCC_MCOConfig>:
{
 800b4e8:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800b4ea:	4e25      	ldr	r6, [pc, #148]	; (800b580 <HAL_RCC_MCOConfig+0x98>)
{
 800b4ec:	b088      	sub	sp, #32
 800b4ee:	460d      	mov	r5, r1
 800b4f0:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 800b4f2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800b4f6:	b9f8      	cbnz	r0, 800b538 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800b4f8:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b4fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b500:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 800b502:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b506:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b50a:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 800b50c:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b510:	481c      	ldr	r0, [pc, #112]	; (800b584 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b516:	2302      	movs	r3, #2
 800b518:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b51c:	2200      	movs	r2, #0
 800b51e:	2303      	movs	r3, #3
 800b520:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b524:	f7fe fa82 	bl	8009a2c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b528:	6933      	ldr	r3, [r6, #16]
 800b52a:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800b52e:	432b      	orrs	r3, r5
 800b530:	4323      	orrs	r3, r4
 800b532:	6133      	str	r3, [r6, #16]
}
 800b534:	b008      	add	sp, #32
 800b536:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800b538:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b53c:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b540:	4811      	ldr	r0, [pc, #68]	; (800b588 <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 800b542:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b546:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b54a:	f003 0304 	and.w	r3, r3, #4
 800b54e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b550:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 800b552:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b554:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b55a:	2200      	movs	r2, #0
 800b55c:	2303      	movs	r3, #3
 800b55e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b562:	2300      	movs	r3, #0
 800b564:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b566:	f7fe fa61 	bl	8009a2c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b56a:	6933      	ldr	r3, [r6, #16]
 800b56c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800b570:	ea43 0105 	orr.w	r1, r3, r5
 800b574:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 800b578:	6131      	str	r1, [r6, #16]
}
 800b57a:	b008      	add	sp, #32
 800b57c:	bd70      	pop	{r4, r5, r6, pc}
 800b57e:	bf00      	nop
 800b580:	58024400 	.word	0x58024400
 800b584:	58020000 	.word	0x58020000
 800b588:	58020800 	.word	0x58020800

0800b58c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b58c:	4a48      	ldr	r2, [pc, #288]	; (800b6b0 <HAL_RCC_GetSysClockFreq+0x124>)
 800b58e:	6913      	ldr	r3, [r2, #16]
 800b590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b594:	2b10      	cmp	r3, #16
 800b596:	d004      	beq.n	800b5a2 <HAL_RCC_GetSysClockFreq+0x16>
 800b598:	2b18      	cmp	r3, #24
 800b59a:	d00d      	beq.n	800b5b8 <HAL_RCC_GetSysClockFreq+0x2c>
 800b59c:	b11b      	cbz	r3, 800b5a6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800b59e:	4845      	ldr	r0, [pc, #276]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x128>)
 800b5a0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5a2:	4845      	ldr	r0, [pc, #276]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b5a4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5a6:	6813      	ldr	r3, [r2, #0]
 800b5a8:	0699      	lsls	r1, r3, #26
 800b5aa:	d54a      	bpl.n	800b642 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5ac:	6813      	ldr	r3, [r2, #0]
 800b5ae:	4843      	ldr	r0, [pc, #268]	; (800b6bc <HAL_RCC_GetSysClockFreq+0x130>)
 800b5b0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b5b4:	40d8      	lsrs	r0, r3
 800b5b6:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800b5ba:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b5bc:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b5be:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800b5c0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b5c4:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b5c6:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800b5ca:	d038      	beq.n	800b63e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b5cc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b5d0:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5d4:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b5d8:	fb05 f101 	mul.w	r1, r5, r1
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	ee07 1a90 	vmov	s15, r1
 800b5e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800b5e6:	d002      	beq.n	800b5ee <HAL_RCC_GetSysClockFreq+0x62>
 800b5e8:	2b02      	cmp	r3, #2
 800b5ea:	d02c      	beq.n	800b646 <HAL_RCC_GetSysClockFreq+0xba>
 800b5ec:	b393      	cbz	r3, 800b654 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5ee:	ee07 0a90 	vmov	s15, r0
 800b5f2:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800b6c0 <HAL_RCC_GetSysClockFreq+0x134>
 800b5f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b5fc:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800b600:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800b6c4 <HAL_RCC_GetSysClockFreq+0x138>
 800b604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b608:	ee07 3a90 	vmov	s15, r3
 800b60c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b614:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b618:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b61c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b620:	4b23      	ldr	r3, [pc, #140]	; (800b6b0 <HAL_RCC_GetSysClockFreq+0x124>)
 800b622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b624:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b628:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b62a:	ee07 3a90 	vmov	s15, r3
 800b62e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b63a:	ee17 0a90 	vmov	r0, s15
}
 800b63e:	bc30      	pop	{r4, r5}
 800b640:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b642:	481e      	ldr	r0, [pc, #120]	; (800b6bc <HAL_RCC_GetSysClockFreq+0x130>)
}
 800b644:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b646:	ee07 0a90 	vmov	s15, r0
 800b64a:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800b6c8 <HAL_RCC_GetSysClockFreq+0x13c>
 800b64e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b652:	e7d2      	b.n	800b5fa <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b654:	6813      	ldr	r3, [r2, #0]
 800b656:	069b      	lsls	r3, r3, #26
 800b658:	d522      	bpl.n	800b6a0 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b65a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b65c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b660:	4916      	ldr	r1, [pc, #88]	; (800b6bc <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b666:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b668:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b66c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b670:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b6c4 <HAL_RCC_GetSysClockFreq+0x138>
 800b674:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b678:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b67a:	ee06 3a10 	vmov	s12, r3
 800b67e:	ee05 1a90 	vmov	s11, r1
 800b682:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800b686:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b68a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800b68e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800b692:	eef0 7a46 	vmov.f32	s15, s12
 800b696:	eee7 7a05 	vfma.f32	s15, s14, s10
 800b69a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b69e:	e7bf      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6a0:	ee07 0a90 	vmov	s15, r0
 800b6a4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800b6cc <HAL_RCC_GetSysClockFreq+0x140>
 800b6a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6ac:	e7a5      	b.n	800b5fa <HAL_RCC_GetSysClockFreq+0x6e>
 800b6ae:	bf00      	nop
 800b6b0:	58024400 	.word	0x58024400
 800b6b4:	003d0900 	.word	0x003d0900
 800b6b8:	017d7840 	.word	0x017d7840
 800b6bc:	03d09000 	.word	0x03d09000
 800b6c0:	4a742400 	.word	0x4a742400
 800b6c4:	39000000 	.word	0x39000000
 800b6c8:	4bbebc20 	.word	0x4bbebc20
 800b6cc:	4c742400 	.word	0x4c742400

0800b6d0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	f000 810c 	beq.w	800b8ee <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b6d6:	4a8c      	ldr	r2, [pc, #560]	; (800b908 <HAL_RCC_ClockConfig+0x238>)
 800b6d8:	6813      	ldr	r3, [r2, #0]
 800b6da:	f003 030f 	and.w	r3, r3, #15
 800b6de:	428b      	cmp	r3, r1
{
 800b6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b6e8:	d20c      	bcs.n	800b704 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6ea:	6813      	ldr	r3, [r2, #0]
 800b6ec:	f023 030f 	bic.w	r3, r3, #15
 800b6f0:	430b      	orrs	r3, r1
 800b6f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6f4:	6813      	ldr	r3, [r2, #0]
 800b6f6:	f003 030f 	and.w	r3, r3, #15
 800b6fa:	428b      	cmp	r3, r1
 800b6fc:	d002      	beq.n	800b704 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800b6fe:	2001      	movs	r0, #1
}
 800b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	075f      	lsls	r7, r3, #29
 800b708:	d50b      	bpl.n	800b722 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b70a:	4980      	ldr	r1, [pc, #512]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b70c:	6920      	ldr	r0, [r4, #16]
 800b70e:	698a      	ldr	r2, [r1, #24]
 800b710:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b714:	4290      	cmp	r0, r2
 800b716:	d904      	bls.n	800b722 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b718:	698a      	ldr	r2, [r1, #24]
 800b71a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b71e:	4302      	orrs	r2, r0
 800b720:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b722:	071e      	lsls	r6, r3, #28
 800b724:	d50b      	bpl.n	800b73e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b726:	4979      	ldr	r1, [pc, #484]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b728:	6960      	ldr	r0, [r4, #20]
 800b72a:	69ca      	ldr	r2, [r1, #28]
 800b72c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b730:	4290      	cmp	r0, r2
 800b732:	d904      	bls.n	800b73e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b734:	69ca      	ldr	r2, [r1, #28]
 800b736:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b73a:	4302      	orrs	r2, r0
 800b73c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b73e:	06d8      	lsls	r0, r3, #27
 800b740:	d50b      	bpl.n	800b75a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b742:	4972      	ldr	r1, [pc, #456]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b744:	69a0      	ldr	r0, [r4, #24]
 800b746:	69ca      	ldr	r2, [r1, #28]
 800b748:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b74c:	4290      	cmp	r0, r2
 800b74e:	d904      	bls.n	800b75a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b750:	69ca      	ldr	r2, [r1, #28]
 800b752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b756:	4302      	orrs	r2, r0
 800b758:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b75a:	0699      	lsls	r1, r3, #26
 800b75c:	d50b      	bpl.n	800b776 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b75e:	496b      	ldr	r1, [pc, #428]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b760:	69e0      	ldr	r0, [r4, #28]
 800b762:	6a0a      	ldr	r2, [r1, #32]
 800b764:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b768:	4290      	cmp	r0, r2
 800b76a:	d904      	bls.n	800b776 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b76c:	6a0a      	ldr	r2, [r1, #32]
 800b76e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b772:	4302      	orrs	r2, r0
 800b774:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b776:	079a      	lsls	r2, r3, #30
 800b778:	f140 80ab 	bpl.w	800b8d2 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b77c:	4863      	ldr	r0, [pc, #396]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b77e:	68e1      	ldr	r1, [r4, #12]
 800b780:	6982      	ldr	r2, [r0, #24]
 800b782:	f002 020f 	and.w	r2, r2, #15
 800b786:	4291      	cmp	r1, r2
 800b788:	d904      	bls.n	800b794 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b78a:	6982      	ldr	r2, [r0, #24]
 800b78c:	f022 020f 	bic.w	r2, r2, #15
 800b790:	430a      	orrs	r2, r1
 800b792:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b794:	07d8      	lsls	r0, r3, #31
 800b796:	d530      	bpl.n	800b7fa <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b798:	4a5c      	ldr	r2, [pc, #368]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b79a:	68a1      	ldr	r1, [r4, #8]
 800b79c:	6993      	ldr	r3, [r2, #24]
 800b79e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b7a2:	430b      	orrs	r3, r1
 800b7a4:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7a6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b7a8:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7aa:	2902      	cmp	r1, #2
 800b7ac:	f000 80a1 	beq.w	800b8f2 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b7b0:	2903      	cmp	r1, #3
 800b7b2:	f000 8098 	beq.w	800b8e6 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b7b6:	2901      	cmp	r1, #1
 800b7b8:	f000 80a1 	beq.w	800b8fe <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7bc:	0758      	lsls	r0, r3, #29
 800b7be:	d59e      	bpl.n	800b6fe <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b7c0:	4e52      	ldr	r6, [pc, #328]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7c2:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b7c6:	6933      	ldr	r3, [r6, #16]
 800b7c8:	f023 0307 	bic.w	r3, r3, #7
 800b7cc:	430b      	orrs	r3, r1
 800b7ce:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800b7d0:	f7fb f9a4 	bl	8006b1c <HAL_GetTick>
 800b7d4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7d6:	e005      	b.n	800b7e4 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7d8:	f7fb f9a0 	bl	8006b1c <HAL_GetTick>
 800b7dc:	1bc0      	subs	r0, r0, r7
 800b7de:	4540      	cmp	r0, r8
 800b7e0:	f200 808b 	bhi.w	800b8fa <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7e4:	6933      	ldr	r3, [r6, #16]
 800b7e6:	6862      	ldr	r2, [r4, #4]
 800b7e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7ec:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b7f0:	d1f2      	bne.n	800b7d8 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	0799      	lsls	r1, r3, #30
 800b7f6:	d506      	bpl.n	800b806 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b7f8:	68e1      	ldr	r1, [r4, #12]
 800b7fa:	4844      	ldr	r0, [pc, #272]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b7fc:	6982      	ldr	r2, [r0, #24]
 800b7fe:	f002 020f 	and.w	r2, r2, #15
 800b802:	428a      	cmp	r2, r1
 800b804:	d869      	bhi.n	800b8da <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b806:	4940      	ldr	r1, [pc, #256]	; (800b908 <HAL_RCC_ClockConfig+0x238>)
 800b808:	680a      	ldr	r2, [r1, #0]
 800b80a:	f002 020f 	and.w	r2, r2, #15
 800b80e:	42aa      	cmp	r2, r5
 800b810:	d90a      	bls.n	800b828 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b812:	680a      	ldr	r2, [r1, #0]
 800b814:	f022 020f 	bic.w	r2, r2, #15
 800b818:	432a      	orrs	r2, r5
 800b81a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b81c:	680a      	ldr	r2, [r1, #0]
 800b81e:	f002 020f 	and.w	r2, r2, #15
 800b822:	42aa      	cmp	r2, r5
 800b824:	f47f af6b 	bne.w	800b6fe <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b828:	075a      	lsls	r2, r3, #29
 800b82a:	d50b      	bpl.n	800b844 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b82c:	4937      	ldr	r1, [pc, #220]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b82e:	6920      	ldr	r0, [r4, #16]
 800b830:	698a      	ldr	r2, [r1, #24]
 800b832:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b836:	4290      	cmp	r0, r2
 800b838:	d204      	bcs.n	800b844 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b83a:	698a      	ldr	r2, [r1, #24]
 800b83c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b840:	4302      	orrs	r2, r0
 800b842:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b844:	071f      	lsls	r7, r3, #28
 800b846:	d50b      	bpl.n	800b860 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b848:	4930      	ldr	r1, [pc, #192]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b84a:	6960      	ldr	r0, [r4, #20]
 800b84c:	69ca      	ldr	r2, [r1, #28]
 800b84e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b852:	4290      	cmp	r0, r2
 800b854:	d204      	bcs.n	800b860 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b856:	69ca      	ldr	r2, [r1, #28]
 800b858:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b85c:	4302      	orrs	r2, r0
 800b85e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b860:	06de      	lsls	r6, r3, #27
 800b862:	d50b      	bpl.n	800b87c <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b864:	4929      	ldr	r1, [pc, #164]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b866:	69a0      	ldr	r0, [r4, #24]
 800b868:	69ca      	ldr	r2, [r1, #28]
 800b86a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b86e:	4290      	cmp	r0, r2
 800b870:	d204      	bcs.n	800b87c <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b872:	69ca      	ldr	r2, [r1, #28]
 800b874:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b878:	4302      	orrs	r2, r0
 800b87a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b87c:	069d      	lsls	r5, r3, #26
 800b87e:	d50b      	bpl.n	800b898 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b880:	4a22      	ldr	r2, [pc, #136]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b882:	69e1      	ldr	r1, [r4, #28]
 800b884:	6a13      	ldr	r3, [r2, #32]
 800b886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b88a:	4299      	cmp	r1, r3
 800b88c:	d204      	bcs.n	800b898 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b88e:	6a13      	ldr	r3, [r2, #32]
 800b890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b894:	430b      	orrs	r3, r1
 800b896:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b898:	f7ff fe78 	bl	800b58c <HAL_RCC_GetSysClockFreq>
 800b89c:	4a1b      	ldr	r2, [pc, #108]	; (800b90c <HAL_RCC_ClockConfig+0x23c>)
 800b89e:	4603      	mov	r3, r0
 800b8a0:	481b      	ldr	r0, [pc, #108]	; (800b910 <HAL_RCC_ClockConfig+0x240>)
 800b8a2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8a4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b8a6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800b8aa:	4d1a      	ldr	r5, [pc, #104]	; (800b914 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8ac:	f002 020f 	and.w	r2, r2, #15
 800b8b0:	4c19      	ldr	r4, [pc, #100]	; (800b918 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b8b2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8b4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b8b6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800b8ba:	4818      	ldr	r0, [pc, #96]	; (800b91c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8bc:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b8c0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800b8c2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800b8c4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8c6:	40d3      	lsrs	r3, r2
 800b8c8:	6023      	str	r3, [r4, #0]
}
 800b8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b8ce:	f7fb b8c3 	b.w	8006a58 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8d2:	07da      	lsls	r2, r3, #31
 800b8d4:	f53f af60 	bmi.w	800b798 <HAL_RCC_ClockConfig+0xc8>
 800b8d8:	e795      	b.n	800b806 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8da:	6982      	ldr	r2, [r0, #24]
 800b8dc:	f022 020f 	bic.w	r2, r2, #15
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	6182      	str	r2, [r0, #24]
 800b8e4:	e78f      	b.n	800b806 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b8e6:	019f      	lsls	r7, r3, #6
 800b8e8:	f53f af6a 	bmi.w	800b7c0 <HAL_RCC_ClockConfig+0xf0>
 800b8ec:	e707      	b.n	800b6fe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800b8ee:	2001      	movs	r0, #1
}
 800b8f0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b8f2:	039b      	lsls	r3, r3, #14
 800b8f4:	f53f af64 	bmi.w	800b7c0 <HAL_RCC_ClockConfig+0xf0>
 800b8f8:	e701      	b.n	800b6fe <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800b8fa:	2003      	movs	r0, #3
 800b8fc:	e700      	b.n	800b700 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b8fe:	05de      	lsls	r6, r3, #23
 800b900:	f53f af5e 	bmi.w	800b7c0 <HAL_RCC_ClockConfig+0xf0>
 800b904:	e6fb      	b.n	800b6fe <HAL_RCC_ClockConfig+0x2e>
 800b906:	bf00      	nop
 800b908:	52002000 	.word	0x52002000
 800b90c:	58024400 	.word	0x58024400
 800b910:	0801db14 	.word	0x0801db14
 800b914:	24000310 	.word	0x24000310
 800b918:	24000314 	.word	0x24000314
 800b91c:	2400031c 	.word	0x2400031c

0800b920 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b920:	4a18      	ldr	r2, [pc, #96]	; (800b984 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b922:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b924:	6913      	ldr	r3, [r2, #16]
 800b926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b92a:	2b10      	cmp	r3, #16
 800b92c:	d01a      	beq.n	800b964 <HAL_RCC_GetHCLKFreq+0x44>
 800b92e:	2b18      	cmp	r3, #24
 800b930:	d023      	beq.n	800b97a <HAL_RCC_GetHCLKFreq+0x5a>
 800b932:	b1cb      	cbz	r3, 800b968 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800b934:	4814      	ldr	r0, [pc, #80]	; (800b988 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b936:	4b13      	ldr	r3, [pc, #76]	; (800b984 <HAL_RCC_GetHCLKFreq+0x64>)
 800b938:	4914      	ldr	r1, [pc, #80]	; (800b98c <HAL_RCC_GetHCLKFreq+0x6c>)
 800b93a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b93c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b93e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b942:	4c13      	ldr	r4, [pc, #76]	; (800b990 <HAL_RCC_GetHCLKFreq+0x70>)
 800b944:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b948:	4d12      	ldr	r5, [pc, #72]	; (800b994 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b94a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b94c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b94e:	f002 021f 	and.w	r2, r2, #31
 800b952:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b956:	f003 001f 	and.w	r0, r3, #31
 800b95a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800b95e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b960:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b962:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b964:	480c      	ldr	r0, [pc, #48]	; (800b998 <HAL_RCC_GetHCLKFreq+0x78>)
 800b966:	e7e6      	b.n	800b936 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b968:	6813      	ldr	r3, [r2, #0]
 800b96a:	069b      	lsls	r3, r3, #26
 800b96c:	d508      	bpl.n	800b980 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b96e:	6813      	ldr	r3, [r2, #0]
 800b970:	480a      	ldr	r0, [pc, #40]	; (800b99c <HAL_RCC_GetHCLKFreq+0x7c>)
 800b972:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b976:	40d8      	lsrs	r0, r3
 800b978:	e7dd      	b.n	800b936 <HAL_RCC_GetHCLKFreq+0x16>
 800b97a:	f7ff fa3b 	bl	800adf4 <HAL_RCC_GetSysClockFreq.part.0>
 800b97e:	e7da      	b.n	800b936 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b980:	4806      	ldr	r0, [pc, #24]	; (800b99c <HAL_RCC_GetHCLKFreq+0x7c>)
 800b982:	e7d8      	b.n	800b936 <HAL_RCC_GetHCLKFreq+0x16>
 800b984:	58024400 	.word	0x58024400
 800b988:	003d0900 	.word	0x003d0900
 800b98c:	0801db14 	.word	0x0801db14
 800b990:	24000314 	.word	0x24000314
 800b994:	24000310 	.word	0x24000310
 800b998:	017d7840 	.word	0x017d7840
 800b99c:	03d09000 	.word	0x03d09000

0800b9a0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9a0:	4a1c      	ldr	r2, [pc, #112]	; (800ba14 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9a2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9a4:	6913      	ldr	r3, [r2, #16]
 800b9a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9aa:	2b10      	cmp	r3, #16
 800b9ac:	d021      	beq.n	800b9f2 <HAL_RCC_GetPCLK1Freq+0x52>
 800b9ae:	2b18      	cmp	r3, #24
 800b9b0:	d02a      	beq.n	800ba08 <HAL_RCC_GetPCLK1Freq+0x68>
 800b9b2:	b303      	cbz	r3, 800b9f6 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800b9b4:	4818      	ldr	r0, [pc, #96]	; (800ba18 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b9b6:	4a17      	ldr	r2, [pc, #92]	; (800ba14 <HAL_RCC_GetPCLK1Freq+0x74>)
 800b9b8:	4918      	ldr	r1, [pc, #96]	; (800ba1c <HAL_RCC_GetPCLK1Freq+0x7c>)
 800b9ba:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b9bc:	4c18      	ldr	r4, [pc, #96]	; (800ba20 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b9be:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800b9c2:	4d18      	ldr	r5, [pc, #96]	; (800ba24 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b9c4:	5ccb      	ldrb	r3, [r1, r3]
 800b9c6:	f003 031f 	and.w	r3, r3, #31
 800b9ca:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b9cc:	6993      	ldr	r3, [r2, #24]
 800b9ce:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 800b9d2:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b9d4:	5ccb      	ldrb	r3, [r1, r3]
 800b9d6:	f003 031f 	and.w	r3, r3, #31
 800b9da:	fa20 f303 	lsr.w	r3, r0, r3
 800b9de:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b9e0:	69d2      	ldr	r2, [r2, #28]
 800b9e2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800b9e6:	5c88      	ldrb	r0, [r1, r2]
 800b9e8:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b9ec:	fa23 f000 	lsr.w	r0, r3, r0
 800b9f0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9f2:	480d      	ldr	r0, [pc, #52]	; (800ba28 <HAL_RCC_GetPCLK1Freq+0x88>)
 800b9f4:	e7df      	b.n	800b9b6 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9f6:	6813      	ldr	r3, [r2, #0]
 800b9f8:	069b      	lsls	r3, r3, #26
 800b9fa:	d508      	bpl.n	800ba0e <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9fc:	6813      	ldr	r3, [r2, #0]
 800b9fe:	480b      	ldr	r0, [pc, #44]	; (800ba2c <HAL_RCC_GetPCLK1Freq+0x8c>)
 800ba00:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ba04:	40d8      	lsrs	r0, r3
 800ba06:	e7d6      	b.n	800b9b6 <HAL_RCC_GetPCLK1Freq+0x16>
 800ba08:	f7ff f9f4 	bl	800adf4 <HAL_RCC_GetSysClockFreq.part.0>
 800ba0c:	e7d3      	b.n	800b9b6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ba0e:	4807      	ldr	r0, [pc, #28]	; (800ba2c <HAL_RCC_GetPCLK1Freq+0x8c>)
 800ba10:	e7d1      	b.n	800b9b6 <HAL_RCC_GetPCLK1Freq+0x16>
 800ba12:	bf00      	nop
 800ba14:	58024400 	.word	0x58024400
 800ba18:	003d0900 	.word	0x003d0900
 800ba1c:	0801db14 	.word	0x0801db14
 800ba20:	24000314 	.word	0x24000314
 800ba24:	24000310 	.word	0x24000310
 800ba28:	017d7840 	.word	0x017d7840
 800ba2c:	03d09000 	.word	0x03d09000

0800ba30 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba30:	4a1c      	ldr	r2, [pc, #112]	; (800baa4 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba32:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba34:	6913      	ldr	r3, [r2, #16]
 800ba36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba3a:	2b10      	cmp	r3, #16
 800ba3c:	d021      	beq.n	800ba82 <HAL_RCC_GetPCLK2Freq+0x52>
 800ba3e:	2b18      	cmp	r3, #24
 800ba40:	d02a      	beq.n	800ba98 <HAL_RCC_GetPCLK2Freq+0x68>
 800ba42:	b303      	cbz	r3, 800ba86 <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800ba44:	4818      	ldr	r0, [pc, #96]	; (800baa8 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba46:	4a17      	ldr	r2, [pc, #92]	; (800baa4 <HAL_RCC_GetPCLK2Freq+0x74>)
 800ba48:	4918      	ldr	r1, [pc, #96]	; (800baac <HAL_RCC_GetPCLK2Freq+0x7c>)
 800ba4a:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba4c:	4c18      	ldr	r4, [pc, #96]	; (800bab0 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba4e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800ba52:	4d18      	ldr	r5, [pc, #96]	; (800bab4 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba54:	5ccb      	ldrb	r3, [r1, r3]
 800ba56:	f003 031f 	and.w	r3, r3, #31
 800ba5a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba5c:	6993      	ldr	r3, [r2, #24]
 800ba5e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 800ba62:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba64:	5ccb      	ldrb	r3, [r1, r3]
 800ba66:	f003 031f 	and.w	r3, r3, #31
 800ba6a:	fa20 f303 	lsr.w	r3, r0, r3
 800ba6e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ba70:	69d2      	ldr	r2, [r2, #28]
 800ba72:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800ba76:	5c88      	ldrb	r0, [r1, r2]
 800ba78:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ba7c:	fa23 f000 	lsr.w	r0, r3, r0
 800ba80:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba82:	480d      	ldr	r0, [pc, #52]	; (800bab8 <HAL_RCC_GetPCLK2Freq+0x88>)
 800ba84:	e7df      	b.n	800ba46 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba86:	6813      	ldr	r3, [r2, #0]
 800ba88:	069b      	lsls	r3, r3, #26
 800ba8a:	d508      	bpl.n	800ba9e <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba8c:	6813      	ldr	r3, [r2, #0]
 800ba8e:	480b      	ldr	r0, [pc, #44]	; (800babc <HAL_RCC_GetPCLK2Freq+0x8c>)
 800ba90:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ba94:	40d8      	lsrs	r0, r3
 800ba96:	e7d6      	b.n	800ba46 <HAL_RCC_GetPCLK2Freq+0x16>
 800ba98:	f7ff f9ac 	bl	800adf4 <HAL_RCC_GetSysClockFreq.part.0>
 800ba9c:	e7d3      	b.n	800ba46 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ba9e:	4807      	ldr	r0, [pc, #28]	; (800babc <HAL_RCC_GetPCLK2Freq+0x8c>)
 800baa0:	e7d1      	b.n	800ba46 <HAL_RCC_GetPCLK2Freq+0x16>
 800baa2:	bf00      	nop
 800baa4:	58024400 	.word	0x58024400
 800baa8:	003d0900 	.word	0x003d0900
 800baac:	0801db14 	.word	0x0801db14
 800bab0:	24000314 	.word	0x24000314
 800bab4:	24000310 	.word	0x24000310
 800bab8:	017d7840 	.word	0x017d7840
 800babc:	03d09000 	.word	0x03d09000

0800bac0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bac2:	4c3a      	ldr	r4, [pc, #232]	; (800bbac <RCCEx_PLL2_Config+0xec>)
 800bac4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bac6:	f003 0303 	and.w	r3, r3, #3
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d067      	beq.n	800bb9e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	4606      	mov	r6, r0
 800bad2:	460f      	mov	r7, r1
 800bad4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bad8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bada:	f7fb f81f 	bl	8006b1c <HAL_GetTick>
 800bade:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bae0:	e004      	b.n	800baec <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bae2:	f7fb f81b 	bl	8006b1c <HAL_GetTick>
 800bae6:	1b43      	subs	r3, r0, r5
 800bae8:	2b02      	cmp	r3, #2
 800baea:	d856      	bhi.n	800bb9a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	011a      	lsls	r2, r3, #4
 800baf0:	d4f7      	bmi.n	800bae2 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800baf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800baf4:	6832      	ldr	r2, [r6, #0]
 800baf6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bafa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800bafe:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb00:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800bb04:	3b01      	subs	r3, #1
 800bb06:	3a01      	subs	r2, #1
 800bb08:	025b      	lsls	r3, r3, #9
 800bb0a:	0412      	lsls	r2, r2, #16
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bb12:	4313      	orrs	r3, r2
 800bb14:	6872      	ldr	r2, [r6, #4]
 800bb16:	3a01      	subs	r2, #1
 800bb18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	6932      	ldr	r2, [r6, #16]
 800bb20:	3a01      	subs	r2, #1
 800bb22:	0612      	lsls	r2, r2, #24
 800bb24:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bb2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb2e:	6972      	ldr	r2, [r6, #20]
 800bb30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bb34:	4313      	orrs	r3, r2
 800bb36:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bb38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb3a:	69b3      	ldr	r3, [r6, #24]
 800bb3c:	f022 0220 	bic.w	r2, r2, #32
 800bb40:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb42:	4b1b      	ldr	r3, [pc, #108]	; (800bbb0 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bb44:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bb46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb48:	f022 0210 	bic.w	r2, r2, #16
 800bb4c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb4e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bb50:	69f2      	ldr	r2, [r6, #28]
 800bb52:	400b      	ands	r3, r1
 800bb54:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bb58:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bb5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb5c:	f043 0310 	orr.w	r3, r3, #16
 800bb60:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bb62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800bb64:	b1ef      	cbz	r7, 800bba2 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb66:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bb68:	bf0c      	ite	eq
 800bb6a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bb6e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800bb72:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bb74:	4c0d      	ldr	r4, [pc, #52]	; (800bbac <RCCEx_PLL2_Config+0xec>)
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb7c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb7e:	f7fa ffcd 	bl	8006b1c <HAL_GetTick>
 800bb82:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb84:	e004      	b.n	800bb90 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb86:	f7fa ffc9 	bl	8006b1c <HAL_GetTick>
 800bb8a:	1b40      	subs	r0, r0, r5
 800bb8c:	2802      	cmp	r0, #2
 800bb8e:	d804      	bhi.n	800bb9a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	011b      	lsls	r3, r3, #4
 800bb94:	d5f7      	bpl.n	800bb86 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800bb96:	2000      	movs	r0, #0
}
 800bb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800bb9a:	2003      	movs	r0, #3
}
 800bb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800bb9e:	2001      	movs	r0, #1
}
 800bba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bba6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bba8:	e7e4      	b.n	800bb74 <RCCEx_PLL2_Config+0xb4>
 800bbaa:	bf00      	nop
 800bbac:	58024400 	.word	0x58024400
 800bbb0:	ffff0007 	.word	0xffff0007

0800bbb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbb6:	4c3a      	ldr	r4, [pc, #232]	; (800bca0 <RCCEx_PLL3_Config+0xec>)
 800bbb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbba:	f003 0303 	and.w	r3, r3, #3
 800bbbe:	2b03      	cmp	r3, #3
 800bbc0:	d067      	beq.n	800bc92 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	460f      	mov	r7, r1
 800bbc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbcc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbce:	f7fa ffa5 	bl	8006b1c <HAL_GetTick>
 800bbd2:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbd4:	e004      	b.n	800bbe0 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bbd6:	f7fa ffa1 	bl	8006b1c <HAL_GetTick>
 800bbda:	1b43      	subs	r3, r0, r5
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d856      	bhi.n	800bc8e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	009a      	lsls	r2, r3, #2
 800bbe4:	d4f7      	bmi.n	800bbd6 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bbe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbe8:	6832      	ldr	r2, [r6, #0]
 800bbea:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800bbee:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800bbf2:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbf4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	3a01      	subs	r2, #1
 800bbfc:	025b      	lsls	r3, r3, #9
 800bbfe:	0412      	lsls	r2, r2, #16
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bc06:	4313      	orrs	r3, r2
 800bc08:	6872      	ldr	r2, [r6, #4]
 800bc0a:	3a01      	subs	r2, #1
 800bc0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc10:	4313      	orrs	r3, r2
 800bc12:	6932      	ldr	r2, [r6, #16]
 800bc14:	3a01      	subs	r2, #1
 800bc16:	0612      	lsls	r2, r2, #24
 800bc18:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bc20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bc22:	6972      	ldr	r2, [r6, #20]
 800bc24:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bc2e:	69b3      	ldr	r3, [r6, #24]
 800bc30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bc34:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc36:	4b1b      	ldr	r3, [pc, #108]	; (800bca4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc38:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bc3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bc3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc40:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bc44:	69f2      	ldr	r2, [r6, #28]
 800bc46:	400b      	ands	r3, r1
 800bc48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bc4c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bc50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc54:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bc56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800bc58:	b1ef      	cbz	r7, 800bc96 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc5a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bc5c:	bf0c      	ite	eq
 800bc5e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bc62:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800bc66:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bc68:	4c0d      	ldr	r4, [pc, #52]	; (800bca0 <RCCEx_PLL3_Config+0xec>)
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc70:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc72:	f7fa ff53 	bl	8006b1c <HAL_GetTick>
 800bc76:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc78:	e004      	b.n	800bc84 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc7a:	f7fa ff4f 	bl	8006b1c <HAL_GetTick>
 800bc7e:	1b40      	subs	r0, r0, r5
 800bc80:	2802      	cmp	r0, #2
 800bc82:	d804      	bhi.n	800bc8e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	d5f7      	bpl.n	800bc7a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800bc8a:	2000      	movs	r0, #0
}
 800bc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800bc8e:	2003      	movs	r0, #3
}
 800bc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800bc92:	2001      	movs	r0, #1
}
 800bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bc96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bc9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc9c:	e7e4      	b.n	800bc68 <RCCEx_PLL3_Config+0xb4>
 800bc9e:	bf00      	nop
 800bca0:	58024400 	.word	0x58024400
 800bca4:	ffff0007 	.word	0xffff0007

0800bca8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800bca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bcac:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800bcb0:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bcb2:	011d      	lsls	r5, r3, #4
 800bcb4:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800bcb8:	d523      	bpl.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bcba:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800bcbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bcc0:	f000 8553 	beq.w	800c76a <HAL_RCCEx_PeriphCLKConfig+0xac2>
 800bcc4:	d812      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bcc6:	2900      	cmp	r1, #0
 800bcc8:	f000 85a9 	beq.w	800c81e <HAL_RCCEx_PeriphCLKConfig+0xb76>
 800bccc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bcd0:	f040 85a2 	bne.w	800c818 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcd4:	2102      	movs	r1, #2
 800bcd6:	3008      	adds	r0, #8
 800bcd8:	f7ff fef2 	bl	800bac0 <RCCEx_PLL2_Config>
 800bcdc:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800bcde:	2e00      	cmp	r6, #0
 800bce0:	f040 8522 	bne.w	800c728 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bce4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bce6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bcea:	e003      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bcec:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800bcf0:	f040 8592 	bne.w	800c818 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bcf4:	4dae      	ldr	r5, [pc, #696]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bcf6:	2600      	movs	r6, #0
 800bcf8:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800bcfa:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800bcfe:	4301      	orrs	r1, r0
 800bd00:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bd02:	05d8      	lsls	r0, r3, #23
 800bd04:	d50a      	bpl.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bd06:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bd08:	2904      	cmp	r1, #4
 800bd0a:	d806      	bhi.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800bd0c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bd10:	053d0536 	.word	0x053d0536
 800bd14:	0323051a 	.word	0x0323051a
 800bd18:	0323      	.short	0x0323
 800bd1a:	2601      	movs	r6, #1
 800bd1c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bd1e:	0599      	lsls	r1, r3, #22
 800bd20:	d51d      	bpl.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800bd22:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bd24:	2980      	cmp	r1, #128	; 0x80
 800bd26:	f000 8516 	beq.w	800c756 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800bd2a:	f200 80f9 	bhi.w	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800bd2e:	2900      	cmp	r1, #0
 800bd30:	f000 8433 	beq.w	800c59a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800bd34:	2940      	cmp	r1, #64	; 0x40
 800bd36:	f040 80fa 	bne.w	800bf2e <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	f104 0008 	add.w	r0, r4, #8
 800bd40:	f7ff febe 	bl	800bac0 <RCCEx_PLL2_Config>
 800bd44:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bd46:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd4a:	2d00      	cmp	r5, #0
 800bd4c:	f040 83fe 	bne.w	800c54c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bd50:	4f97      	ldr	r7, [pc, #604]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bd52:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800bd54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd56:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 800bd5a:	4301      	orrs	r1, r0
 800bd5c:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bd5e:	055f      	lsls	r7, r3, #21
 800bd60:	d521      	bpl.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bd62:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800bd66:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800bd6a:	f000 8521 	beq.w	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 800bd6e:	f200 80e1 	bhi.w	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800bd72:	2900      	cmp	r1, #0
 800bd74:	f000 8418 	beq.w	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x900>
 800bd78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bd7c:	f040 80e2 	bne.w	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd80:	2100      	movs	r1, #0
 800bd82:	f104 0008 	add.w	r0, r4, #8
 800bd86:	f7ff fe9b 	bl	800bac0 <RCCEx_PLL2_Config>
 800bd8a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bd8c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd90:	2d00      	cmp	r5, #0
 800bd92:	f040 83e2 	bne.w	800c55a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bd96:	4f86      	ldr	r7, [pc, #536]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bd98:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800bd9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd9e:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800bda2:	4301      	orrs	r1, r0
 800bda4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bda6:	0518      	lsls	r0, r3, #20
 800bda8:	d521      	bpl.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bdaa:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800bdae:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800bdb2:	f000 84bd 	beq.w	800c730 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 800bdb6:	f200 80c8 	bhi.w	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800bdba:	2900      	cmp	r1, #0
 800bdbc:	f000 83e7 	beq.w	800c58e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 800bdc0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800bdc4:	f040 80c9 	bne.w	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdc8:	2100      	movs	r1, #0
 800bdca:	f104 0008 	add.w	r0, r4, #8
 800bdce:	f7ff fe77 	bl	800bac0 <RCCEx_PLL2_Config>
 800bdd2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bdd4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bdd8:	2d00      	cmp	r5, #0
 800bdda:	f040 83b5 	bne.w	800c548 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bdde:	4f74      	ldr	r7, [pc, #464]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bde0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800bde4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bde6:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800bdea:	4301      	orrs	r1, r0
 800bdec:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bdee:	0199      	lsls	r1, r3, #6
 800bdf0:	d518      	bpl.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 800bdf2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bdf4:	2920      	cmp	r1, #32
 800bdf6:	f000 841f 	beq.w	800c638 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800bdfa:	f200 80b1 	bhi.w	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bdfe:	b139      	cbz	r1, 800be10 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800be00:	2910      	cmp	r1, #16
 800be02:	f040 80b0 	bne.w	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be06:	486a      	ldr	r0, [pc, #424]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800be08:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800be0a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800be0e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800be10:	2d00      	cmp	r5, #0
 800be12:	f040 83d8 	bne.w	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800be16:	4f66      	ldr	r7, [pc, #408]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800be18:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800be1a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800be1c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800be20:	4301      	orrs	r1, r0
 800be22:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800be24:	04df      	lsls	r7, r3, #19
 800be26:	d51f      	bpl.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 800be28:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800be2a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800be2e:	f000 84b5 	beq.w	800c79c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 800be32:	f200 809b 	bhi.w	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800be36:	2900      	cmp	r1, #0
 800be38:	f000 83a3 	beq.w	800c582 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800be3c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800be40:	f040 809c 	bne.w	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be44:	2100      	movs	r1, #0
 800be46:	f104 0008 	add.w	r0, r4, #8
 800be4a:	f7ff fe39 	bl	800bac0 <RCCEx_PLL2_Config>
 800be4e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800be50:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be54:	2d00      	cmp	r5, #0
 800be56:	f040 837b 	bne.w	800c550 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800be5a:	4f55      	ldr	r7, [pc, #340]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800be5c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800be5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be60:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800be64:	4301      	orrs	r1, r0
 800be66:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800be68:	0498      	lsls	r0, r3, #18
 800be6a:	d51d      	bpl.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 800be6c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800be6e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800be72:	f000 8410 	beq.w	800c696 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800be76:	f200 8084 	bhi.w	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800be7a:	b159      	cbz	r1, 800be94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800be7c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800be80:	f040 8087 	bne.w	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be84:	2101      	movs	r1, #1
 800be86:	f104 0008 	add.w	r0, r4, #8
 800be8a:	f7ff fe19 	bl	800bac0 <RCCEx_PLL2_Config>
 800be8e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be90:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be94:	2d00      	cmp	r5, #0
 800be96:	f040 839a 	bne.w	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800be9a:	4f45      	ldr	r7, [pc, #276]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800be9c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800be9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bea0:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800bea4:	4301      	orrs	r1, r0
 800bea6:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bea8:	0459      	lsls	r1, r3, #17
 800beaa:	d51d      	bpl.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 800beac:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800beb0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800beb4:	f000 83fb 	beq.w	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800beb8:	d86e      	bhi.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800beba:	b151      	cbz	r1, 800bed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bebc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bec0:	d172      	bne.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bec2:	2101      	movs	r1, #1
 800bec4:	f104 0008 	add.w	r0, r4, #8
 800bec8:	f7ff fdfa 	bl	800bac0 <RCCEx_PLL2_Config>
 800becc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bece:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bed2:	2d00      	cmp	r5, #0
 800bed4:	f040 837f 	bne.w	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bed8:	4f35      	ldr	r7, [pc, #212]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800beda:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800bede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bee0:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800bee4:	4301      	orrs	r1, r0
 800bee6:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bee8:	041f      	lsls	r7, r3, #16
 800beea:	d50d      	bpl.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 800beec:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800beee:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bef2:	f000 83c8 	beq.w	800c686 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bef6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800befa:	f000 823b 	beq.w	800c374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800befe:	2900      	cmp	r1, #0
 800bf00:	f000 8240 	beq.w	800c384 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800bf04:	2601      	movs	r6, #1
 800bf06:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bf08:	01d8      	lsls	r0, r3, #7
 800bf0a:	d562      	bpl.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
 800bf0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf0e:	2903      	cmp	r1, #3
 800bf10:	f200 84bf 	bhi.w	800c892 <HAL_RCCEx_PeriphCLKConfig+0xbea>
 800bf14:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bf18:	004e0053 	.word	0x004e0053
 800bf1c:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
 800bf20:	29c0      	cmp	r1, #192	; 0xc0
 800bf22:	f43f af12 	beq.w	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800bf26:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bf2a:	f43f af0e 	beq.w	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800bf2e:	2601      	movs	r6, #1
 800bf30:	4635      	mov	r5, r6
 800bf32:	e714      	b.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bf34:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800bf38:	f43f af2a 	beq.w	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bf3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800bf40:	f43f af26 	beq.w	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bf44:	2601      	movs	r6, #1
 800bf46:	4635      	mov	r5, r6
 800bf48:	e72d      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bf4a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800bf4e:	f43f af43 	beq.w	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800bf52:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800bf56:	f43f af3f 	beq.w	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800bf5a:	2601      	movs	r6, #1
 800bf5c:	4635      	mov	r5, r6
 800bf5e:	e746      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 800bf60:	2930      	cmp	r1, #48	; 0x30
 800bf62:	f43f af55 	beq.w	800be10 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bf66:	2601      	movs	r6, #1
 800bf68:	4635      	mov	r5, r6
 800bf6a:	e75b      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bf6c:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800bf70:	f43f af70 	beq.w	800be54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800bf74:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bf78:	f43f af6c 	beq.w	800be54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800bf7c:	2601      	movs	r6, #1
 800bf7e:	4635      	mov	r5, r6
 800bf80:	e772      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bf82:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800bf86:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800bf8a:	d083      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800bf8c:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800bf90:	d080      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800bf92:	2601      	movs	r6, #1
 800bf94:	4635      	mov	r5, r6
 800bf96:	e787      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bf98:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800bf9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bfa0:	d097      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bfa2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800bfa6:	d094      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bfa8:	2601      	movs	r6, #1
 800bfaa:	4635      	mov	r5, r6
 800bfac:	e79c      	b.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800bfae:	bf00      	nop
 800bfb0:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfb4:	4839      	ldr	r0, [pc, #228]	; (800c09c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bfb6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bfb8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bfbc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800bfbe:	2d00      	cmp	r5, #0
 800bfc0:	f040 8303 	bne.w	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bfc4:	4f35      	ldr	r7, [pc, #212]	; (800c09c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800bfc6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bfc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bfca:	f021 0103 	bic.w	r1, r1, #3
 800bfce:	4301      	orrs	r1, r0
 800bfd0:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bfd2:	0259      	lsls	r1, r3, #9
 800bfd4:	f100 826a 	bmi.w	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bfd8:	07d8      	lsls	r0, r3, #31
 800bfda:	d52f      	bpl.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
 800bfdc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800bfde:	2928      	cmp	r1, #40	; 0x28
 800bfe0:	d82a      	bhi.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800bfe2:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bfe6:	020a      	.short	0x020a
 800bfe8:	00290029 	.word	0x00290029
 800bfec:	00290029 	.word	0x00290029
 800bff0:	00290029 	.word	0x00290029
 800bff4:	02020029 	.word	0x02020029
 800bff8:	00290029 	.word	0x00290029
 800bffc:	00290029 	.word	0x00290029
 800c000:	00290029 	.word	0x00290029
 800c004:	04070029 	.word	0x04070029
 800c008:	00290029 	.word	0x00290029
 800c00c:	00290029 	.word	0x00290029
 800c010:	00290029 	.word	0x00290029
 800c014:	020a0029 	.word	0x020a0029
 800c018:	00290029 	.word	0x00290029
 800c01c:	00290029 	.word	0x00290029
 800c020:	00290029 	.word	0x00290029
 800c024:	020a0029 	.word	0x020a0029
 800c028:	00290029 	.word	0x00290029
 800c02c:	00290029 	.word	0x00290029
 800c030:	00290029 	.word	0x00290029
 800c034:	020a0029 	.word	0x020a0029
 800c038:	2601      	movs	r6, #1
 800c03a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c03c:	0799      	lsls	r1, r3, #30
 800c03e:	d51d      	bpl.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c040:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c042:	2905      	cmp	r1, #5
 800c044:	f200 8421 	bhi.w	800c88a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800c048:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c04c:	0006000e 	.word	0x0006000e
 800c050:	000e03c8 	.word	0x000e03c8
 800c054:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c058:	2101      	movs	r1, #1
 800c05a:	f104 0008 	add.w	r0, r4, #8
 800c05e:	f7ff fd2f 	bl	800bac0 <RCCEx_PLL2_Config>
 800c062:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c064:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c068:	2d00      	cmp	r5, #0
 800c06a:	f040 82b8 	bne.w	800c5de <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c06e:	4f0b      	ldr	r7, [pc, #44]	; (800c09c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c070:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c072:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c074:	f021 0107 	bic.w	r1, r1, #7
 800c078:	4301      	orrs	r1, r0
 800c07a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c07c:	075f      	lsls	r7, r3, #29
 800c07e:	d522      	bpl.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c080:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c084:	2905      	cmp	r1, #5
 800c086:	f200 8408 	bhi.w	800c89a <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 800c08a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c08e:	0011      	.short	0x0011
 800c090:	039b0009 	.word	0x039b0009
 800c094:	00110011 	.word	0x00110011
 800c098:	0011      	.short	0x0011
 800c09a:	bf00      	nop
 800c09c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	f104 0008 	add.w	r0, r4, #8
 800c0a6:	f7ff fd0b 	bl	800bac0 <RCCEx_PLL2_Config>
 800c0aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c0b0:	2d00      	cmp	r5, #0
 800c0b2:	f040 8286 	bne.w	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0b6:	4fae      	ldr	r7, [pc, #696]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0b8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800c0bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c0be:	f021 0107 	bic.w	r1, r1, #7
 800c0c2:	4301      	orrs	r1, r0
 800c0c4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0c6:	0698      	lsls	r0, r3, #26
 800c0c8:	d51f      	bpl.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c0ca:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800c0ce:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800c0d2:	f000 82f7 	beq.w	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800c0d6:	f200 810b 	bhi.w	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800c0da:	b159      	cbz	r1, 800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800c0dc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800c0e0:	f040 8110 	bne.w	800c304 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	f104 0008 	add.w	r0, r4, #8
 800c0ea:	f7ff fce9 	bl	800bac0 <RCCEx_PLL2_Config>
 800c0ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c0f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c0f4:	2d00      	cmp	r5, #0
 800c0f6:	f040 8260 	bne.w	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0fa:	4f9d      	ldr	r7, [pc, #628]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c0fc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800c100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c102:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800c106:	4301      	orrs	r1, r0
 800c108:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c10a:	0659      	lsls	r1, r3, #25
 800c10c:	d51f      	bpl.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c10e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800c112:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c116:	f000 829b 	beq.w	800c650 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 800c11a:	f200 80f6 	bhi.w	800c30a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c11e:	b159      	cbz	r1, 800c138 <HAL_RCCEx_PeriphCLKConfig+0x490>
 800c120:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c124:	f040 80fb 	bne.w	800c31e <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c128:	2100      	movs	r1, #0
 800c12a:	f104 0008 	add.w	r0, r4, #8
 800c12e:	f7ff fcc7 	bl	800bac0 <RCCEx_PLL2_Config>
 800c132:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c134:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c138:	2d00      	cmp	r5, #0
 800c13a:	f040 824e 	bne.w	800c5da <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c13e:	4f8c      	ldr	r7, [pc, #560]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c140:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800c144:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c146:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800c14a:	4301      	orrs	r1, r0
 800c14c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c14e:	061f      	lsls	r7, r3, #24
 800c150:	d51f      	bpl.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c152:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800c156:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c15a:	f000 8289 	beq.w	800c670 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 800c15e:	f200 80e1 	bhi.w	800c324 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 800c162:	b159      	cbz	r1, 800c17c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800c164:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800c168:	f040 80e6 	bne.w	800c338 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c16c:	2100      	movs	r1, #0
 800c16e:	f104 0008 	add.w	r0, r4, #8
 800c172:	f7ff fca5 	bl	800bac0 <RCCEx_PLL2_Config>
 800c176:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c178:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c17c:	2d00      	cmp	r5, #0
 800c17e:	f040 8228 	bne.w	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c182:	4f7b      	ldr	r7, [pc, #492]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c184:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800c188:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c18a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800c18e:	4301      	orrs	r1, r0
 800c190:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c192:	0718      	lsls	r0, r3, #28
 800c194:	d50b      	bpl.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c196:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800c19a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c19e:	f000 82a9 	beq.w	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c1a2:	4f73      	ldr	r7, [pc, #460]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c1a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1a6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800c1aa:	4301      	orrs	r1, r0
 800c1ac:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c1ae:	06d9      	lsls	r1, r3, #27
 800c1b0:	d50b      	bpl.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c1b2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800c1b6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c1ba:	f000 82a8 	beq.w	800c70e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c1be:	4f6c      	ldr	r7, [pc, #432]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c1c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1c2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800c1c6:	4301      	orrs	r1, r0
 800c1c8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c1ca:	031f      	lsls	r7, r3, #12
 800c1cc:	d50e      	bpl.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
 800c1ce:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800c1d2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c1d6:	f000 80f4 	beq.w	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 800c1da:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800c1de:	f000 80f8 	beq.w	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x72a>
 800c1e2:	2900      	cmp	r1, #0
 800c1e4:	f000 821c 	beq.w	800c620 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800c1e8:	2601      	movs	r6, #1
 800c1ea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c1ec:	0358      	lsls	r0, r3, #13
 800c1ee:	d50f      	bpl.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
 800c1f0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800c1f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c1f8:	f000 80cf 	beq.w	800c39a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c1fc:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800c200:	f000 80d3 	beq.w	800c3aa <HAL_RCCEx_PeriphCLKConfig+0x702>
 800c204:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c208:	f000 8202 	beq.w	800c610 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800c20c:	2601      	movs	r6, #1
 800c20e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c210:	03d9      	lsls	r1, r3, #15
 800c212:	d509      	bpl.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
 800c214:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c216:	2900      	cmp	r1, #0
 800c218:	f000 81f1 	beq.w	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x956>
 800c21c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c220:	f000 819d 	beq.w	800c55e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 800c224:	2601      	movs	r6, #1
 800c226:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c228:	009f      	lsls	r7, r3, #2
 800c22a:	f100 80f1 	bmi.w	800c410 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c22e:	0398      	lsls	r0, r3, #14
 800c230:	d50c      	bpl.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
 800c232:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c236:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c23a:	f000 81d8 	beq.w	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x946>
 800c23e:	d97e      	bls.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x696>
 800c240:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800c244:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c248:	d07b      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800c24a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c24c:	02d9      	lsls	r1, r3, #11
 800c24e:	d506      	bpl.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c250:	4847      	ldr	r0, [pc, #284]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c252:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800c254:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800c256:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c25a:	4329      	orrs	r1, r5
 800c25c:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c25e:	00df      	lsls	r7, r3, #3
 800c260:	d507      	bpl.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c262:	4843      	ldr	r0, [pc, #268]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c264:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800c268:	6901      	ldr	r1, [r0, #16]
 800c26a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800c26e:	4329      	orrs	r1, r5
 800c270:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c272:	029d      	lsls	r5, r3, #10
 800c274:	d506      	bpl.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c276:	483e      	ldr	r0, [pc, #248]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c278:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800c27a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800c27c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800c280:	4329      	orrs	r1, r5
 800c282:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c284:	0058      	lsls	r0, r3, #1
 800c286:	d509      	bpl.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c288:	4939      	ldr	r1, [pc, #228]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c28a:	6908      	ldr	r0, [r1, #16]
 800c28c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800c290:	6108      	str	r0, [r1, #16]
 800c292:	6908      	ldr	r0, [r1, #16]
 800c294:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800c298:	4328      	orrs	r0, r5
 800c29a:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	da06      	bge.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c2a0:	4833      	ldr	r0, [pc, #204]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c2a2:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800c2a4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c2a6:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800c2aa:	4329      	orrs	r1, r5
 800c2ac:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c2ae:	0219      	lsls	r1, r3, #8
 800c2b0:	d507      	bpl.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c2b2:	492f      	ldr	r1, [pc, #188]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c2b4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800c2b8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c2ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800c2be:	4303      	orrs	r3, r0
 800c2c0:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c2c2:	07d3      	lsls	r3, r2, #31
 800c2c4:	f100 80b0 	bmi.w	800c428 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c2c8:	0797      	lsls	r7, r2, #30
 800c2ca:	f100 80ba 	bmi.w	800c442 <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c2ce:	0755      	lsls	r5, r2, #29
 800c2d0:	f100 80c4 	bmi.w	800c45c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c2d4:	0710      	lsls	r0, r2, #28
 800c2d6:	f100 80ce 	bmi.w	800c476 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c2da:	06d1      	lsls	r1, r2, #27
 800c2dc:	f100 80d8 	bmi.w	800c490 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c2e0:	0692      	lsls	r2, r2, #26
 800c2e2:	f100 8125 	bmi.w	800c530 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
 800c2e6:	1e30      	subs	r0, r6, #0
 800c2e8:	bf18      	it	ne
 800c2ea:	2001      	movne	r0, #1
}
 800c2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c2f0:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800c2f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c2f8:	f43f aefc 	beq.w	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800c2fc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800c300:	f43f aef8 	beq.w	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800c304:	2601      	movs	r6, #1
 800c306:	4635      	mov	r5, r6
 800c308:	e6ff      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c30a:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800c30e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c312:	f43f af11 	beq.w	800c138 <HAL_RCCEx_PeriphCLKConfig+0x490>
 800c316:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800c31a:	f43f af0d 	beq.w	800c138 <HAL_RCCEx_PeriphCLKConfig+0x490>
 800c31e:	2601      	movs	r6, #1
 800c320:	4635      	mov	r5, r6
 800c322:	e714      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c324:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800c328:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c32c:	f43f af26 	beq.w	800c17c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800c330:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800c334:	f43f af22 	beq.w	800c17c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800c338:	2601      	movs	r6, #1
 800c33a:	4635      	mov	r5, r6
 800c33c:	e729      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
 800c33e:	2900      	cmp	r1, #0
 800c340:	d183      	bne.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
 800c342:	2d00      	cmp	r5, #0
 800c344:	f040 8151 	bne.w	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c348:	4d09      	ldr	r5, [pc, #36]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c34a:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800c34c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800c350:	4301      	orrs	r1, r0
 800c352:	6569      	str	r1, [r5, #84]	; 0x54
 800c354:	e77a      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c356:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800c358:	2d00      	cmp	r5, #0
 800c35a:	f040 80fb 	bne.w	800c554 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c35e:	4f04      	ldr	r7, [pc, #16]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c362:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c364:	f021 0107 	bic.w	r1, r1, #7
 800c368:	4301      	orrs	r1, r0
 800c36a:	6539      	str	r1, [r7, #80]	; 0x50
 800c36c:	e4d7      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c36e:	bf00      	nop
 800c370:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c374:	2101      	movs	r1, #1
 800c376:	f104 0008 	add.w	r0, r4, #8
 800c37a:	f7ff fba1 	bl	800bac0 <RCCEx_PLL2_Config>
 800c37e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c380:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c384:	2d00      	cmp	r5, #0
 800c386:	f040 811a 	bne.w	800c5be <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c38a:	4fb7      	ldr	r7, [pc, #732]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c38c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c38e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c390:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800c394:	4301      	orrs	r1, r0
 800c396:	6539      	str	r1, [r7, #80]	; 0x50
 800c398:	e5b6      	b.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c39a:	2101      	movs	r1, #1
 800c39c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c3a0:	f7ff fc08 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c3a4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c3a6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c3aa:	2d00      	cmp	r5, #0
 800c3ac:	f040 811b 	bne.w	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3b0:	4fad      	ldr	r7, [pc, #692]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c3b2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c3b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3b8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800c3bc:	4301      	orrs	r1, r0
 800c3be:	6579      	str	r1, [r7, #84]	; 0x54
 800c3c0:	e726      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3c2:	2102      	movs	r1, #2
 800c3c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c3c8:	f7ff fbf4 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c3cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c3ce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c3d2:	2d00      	cmp	r5, #0
 800c3d4:	f040 8105 	bne.w	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c3d8:	4fa3      	ldr	r7, [pc, #652]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c3da:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800c3de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3e0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800c3e4:	4301      	orrs	r1, r0
 800c3e6:	65b9      	str	r1, [r7, #88]	; 0x58
 800c3e8:	e700      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	f104 0008 	add.w	r0, r4, #8
 800c3f0:	f7ff fb66 	bl	800bac0 <RCCEx_PLL2_Config>
 800c3f4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c3f6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c3fa:	2d00      	cmp	r5, #0
 800c3fc:	f040 80db 	bne.w	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c400:	4f99      	ldr	r7, [pc, #612]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c402:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c406:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800c40a:	4301      	orrs	r1, r0
 800c40c:	6579      	str	r1, [r7, #84]	; 0x54
 800c40e:	e615      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c410:	2102      	movs	r1, #2
 800c412:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c416:	f7ff fbcd 	bl	800bbb4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c41a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c41e:	2800      	cmp	r0, #0
 800c420:	f43f af05 	beq.w	800c22e <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
 800c424:	2601      	movs	r6, #1
 800c426:	e702      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c428:	2100      	movs	r1, #0
 800c42a:	f104 0008 	add.w	r0, r4, #8
 800c42e:	f7ff fb47 	bl	800bac0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c432:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c434:	2800      	cmp	r0, #0
 800c436:	f43f af47 	beq.w	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c43a:	0797      	lsls	r7, r2, #30
 800c43c:	4606      	mov	r6, r0
 800c43e:	f57f af46 	bpl.w	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c442:	2101      	movs	r1, #1
 800c444:	f104 0008 	add.w	r0, r4, #8
 800c448:	f7ff fb3a 	bl	800bac0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c44c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c44e:	2800      	cmp	r0, #0
 800c450:	f43f af3d 	beq.w	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c454:	0755      	lsls	r5, r2, #29
 800c456:	4606      	mov	r6, r0
 800c458:	f57f af3c 	bpl.w	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c45c:	2102      	movs	r1, #2
 800c45e:	f104 0008 	add.w	r0, r4, #8
 800c462:	f7ff fb2d 	bl	800bac0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c466:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c468:	2800      	cmp	r0, #0
 800c46a:	f43f af33 	beq.w	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c46e:	4606      	mov	r6, r0
 800c470:	0710      	lsls	r0, r2, #28
 800c472:	f57f af32 	bpl.w	800c2da <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c476:	2100      	movs	r1, #0
 800c478:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c47c:	f7ff fb9a 	bl	800bbb4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c480:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c482:	2800      	cmp	r0, #0
 800c484:	f43f af29 	beq.w	800c2da <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c488:	06d1      	lsls	r1, r2, #27
 800c48a:	4606      	mov	r6, r0
 800c48c:	f57f af28 	bpl.w	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c490:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800c494:	2101      	movs	r1, #1
 800c496:	4628      	mov	r0, r5
 800c498:	f7ff fb8c 	bl	800bbb4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c49c:	2800      	cmp	r0, #0
 800c49e:	f000 80c9 	beq.w	800c634 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c4a2:	6863      	ldr	r3, [r4, #4]
 800c4a4:	069b      	lsls	r3, r3, #26
 800c4a6:	d54c      	bpl.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	e043      	b.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c4ac:	4f6f      	ldr	r7, [pc, #444]	; (800c66c <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4b4:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800c4b6:	f7fa fb31 	bl	8006b1c <HAL_GetTick>
 800c4ba:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c4bc:	e006      	b.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4be:	f7fa fb2d 	bl	8006b1c <HAL_GetTick>
 800c4c2:	eba0 0008 	sub.w	r0, r0, r8
 800c4c6:	2864      	cmp	r0, #100	; 0x64
 800c4c8:	f200 81a0 	bhi.w	800c80c <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	05da      	lsls	r2, r3, #23
 800c4d0:	d5f5      	bpl.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
 800c4d2:	2d00      	cmp	r5, #0
 800c4d4:	f040 81d4 	bne.w	800c880 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c4d8:	4a63      	ldr	r2, [pc, #396]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c4da:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c4de:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800c4e0:	4059      	eors	r1, r3
 800c4e2:	f411 7f40 	tst.w	r1, #768	; 0x300
 800c4e6:	d00b      	beq.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c4e8:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800c4ea:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c4ec:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c4f0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800c4f4:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c4f6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800c4f8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800c4fc:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800c4fe:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c504:	f000 819e 	beq.w	800c844 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c508:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c50c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c510:	f000 81ac 	beq.w	800c86c <HAL_RCCEx_PeriphCLKConfig+0xbc4>
 800c514:	4954      	ldr	r1, [pc, #336]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c516:	690a      	ldr	r2, [r1, #16]
 800c518:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800c51c:	610a      	str	r2, [r1, #16]
 800c51e:	4852      	ldr	r0, [pc, #328]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c520:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800c524:	6f07      	ldr	r7, [r0, #112]	; 0x70
 800c526:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c528:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c52c:	6701      	str	r1, [r0, #112]	; 0x70
 800c52e:	e553      	b.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c530:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c534:	2102      	movs	r1, #2
 800c536:	4628      	mov	r0, r5
 800c538:	f7ff fb3c 	bl	800bbb4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c53c:	2800      	cmp	r0, #0
 800c53e:	f43f aed2 	beq.w	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
 800c542:	2001      	movs	r0, #1
}
 800c544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c548:	462e      	mov	r6, r5
 800c54a:	e450      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x146>
 800c54c:	462e      	mov	r6, r5
 800c54e:	e406      	b.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800c550:	462e      	mov	r6, r5
 800c552:	e489      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c554:	462e      	mov	r6, r5
 800c556:	f7ff bbe2 	b.w	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c55a:	462e      	mov	r6, r5
 800c55c:	e423      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c55e:	2102      	movs	r1, #2
 800c560:	f104 0008 	add.w	r0, r4, #8
 800c564:	f7ff faac 	bl	800bac0 <RCCEx_PLL2_Config>
 800c568:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c56a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c56e:	2d00      	cmp	r5, #0
 800c570:	d14c      	bne.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c572:	4f3d      	ldr	r7, [pc, #244]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c574:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c576:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c578:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800c57c:	4301      	orrs	r1, r0
 800c57e:	64f9      	str	r1, [r7, #76]	; 0x4c
 800c580:	e652      	b.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c582:	4839      	ldr	r0, [pc, #228]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c584:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c586:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c58a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c58c:	e462      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c58e:	4836      	ldr	r0, [pc, #216]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c590:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c592:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c596:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c598:	e41e      	b.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c59a:	4833      	ldr	r0, [pc, #204]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c59c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c59e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c5a2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c5a4:	f7ff bbd1 	b.w	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5a8:	482f      	ldr	r0, [pc, #188]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c5aa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c5ac:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c5b0:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c5b2:	f7ff bbed 	b.w	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800c5b6:	462e      	mov	r6, r5
 800c5b8:	e540      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x394>
 800c5ba:	462e      	mov	r6, r5
 800c5bc:	e5a5      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x462>
 800c5be:	462e      	mov	r6, r5
 800c5c0:	e4a2      	b.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800c5c2:	462e      	mov	r6, r5
 800c5c4:	e57f      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800c5c6:	462e      	mov	r6, r5
 800c5c8:	e42c      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800c5ca:	462e      	mov	r6, r5
 800c5cc:	e501      	b.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800c5ce:	462e      	mov	r6, r5
 800c5d0:	e46a      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800c5d2:	462e      	mov	r6, r5
 800c5d4:	e5dd      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800c5d6:	462e      	mov	r6, r5
 800c5d8:	e486      	b.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c5da:	462e      	mov	r6, r5
 800c5dc:	e5b7      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800c5de:	462e      	mov	r6, r5
 800c5e0:	e54c      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800c5e2:	462e      	mov	r6, r5
 800c5e4:	e602      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x544>
 800c5e6:	462e      	mov	r6, r5
 800c5e8:	e612      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800c5ea:	462e      	mov	r6, r5
 800c5ec:	e62e      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5ee:	4f1e      	ldr	r7, [pc, #120]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c5f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5f2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800c5f6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 800c5f8:	2d00      	cmp	r5, #0
 800c5fa:	d1f6      	bne.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x942>
 800c5fc:	e6a4      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5fe:	481a      	ldr	r0, [pc, #104]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c600:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c602:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c606:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c608:	2d00      	cmp	r5, #0
 800c60a:	d0b2      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800c60c:	462e      	mov	r6, r5
 800c60e:	e60b      	b.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c610:	4815      	ldr	r0, [pc, #84]	; (800c668 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800c612:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c614:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c618:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c61a:	2d00      	cmp	r5, #0
 800c61c:	d1e3      	bne.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800c61e:	e6c7      	b.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c620:	f104 0008 	add.w	r0, r4, #8
 800c624:	f7ff fa4c 	bl	800bac0 <RCCEx_PLL2_Config>
 800c628:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c62a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c62e:	2d00      	cmp	r5, #0
 800c630:	d1d7      	bne.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800c632:	e6d1      	b.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c634:	6862      	ldr	r2, [r4, #4]
 800c636:	e653      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c638:	2102      	movs	r1, #2
 800c63a:	f104 0008 	add.w	r0, r4, #8
 800c63e:	f7ff fa3f 	bl	800bac0 <RCCEx_PLL2_Config>
 800c642:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c644:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c648:	2d00      	cmp	r5, #0
 800c64a:	d1bc      	bne.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x91e>
 800c64c:	f7ff bbe3 	b.w	800be16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c650:	2102      	movs	r1, #2
 800c652:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c656:	f7ff faad 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c65a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c65c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c660:	2d00      	cmp	r5, #0
 800c662:	d1ba      	bne.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x932>
 800c664:	e56b      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800c666:	bf00      	nop
 800c668:	58024400 	.word	0x58024400
 800c66c:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c670:	2102      	movs	r1, #2
 800c672:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c676:	f7ff fa9d 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c67a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c67c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c680:	2d00      	cmp	r5, #0
 800c682:	d1a6      	bne.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800c684:	e57d      	b.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c686:	4886      	ldr	r0, [pc, #536]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800c688:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c68a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c68e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c690:	2d00      	cmp	r5, #0
 800c692:	d194      	bne.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x916>
 800c694:	e679      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c696:	2101      	movs	r1, #1
 800c698:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c69c:	f7ff fa8a 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c6a0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c6a2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	d191      	bne.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x926>
 800c6aa:	f7ff bbf6 	b.w	800be9a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6ae:	2101      	movs	r1, #1
 800c6b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c6b4:	f7ff fa7e 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c6b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c6ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c6be:	2d00      	cmp	r5, #0
 800c6c0:	d189      	bne.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800c6c2:	e409      	b.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6c4:	2102      	movs	r1, #2
 800c6c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c6ca:	f7ff fa73 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c6ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c6d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c6d4:	2d00      	cmp	r5, #0
 800c6d6:	f47f af70 	bne.w	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x912>
 800c6da:	e50e      	b.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c6dc:	2102      	movs	r1, #2
 800c6de:	f104 0008 	add.w	r0, r4, #8
 800c6e2:	f7ff f9ed 	bl	800bac0 <RCCEx_PLL2_Config>
 800c6e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c6e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c6ec:	2d00      	cmp	r5, #0
 800c6ee:	f47f af6c 	bne.w	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x922>
 800c6f2:	e467      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6f4:	2102      	movs	r1, #2
 800c6f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c6fa:	f7ff fa5b 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f040 8094 	bne.w	800c82c <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c704:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c708:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c70c:	e549      	b.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c70e:	2102      	movs	r1, #2
 800c710:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c714:	f7ff fa4e 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c718:	2800      	cmp	r0, #0
 800c71a:	f040 808d 	bne.w	800c838 <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c71e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c722:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c726:	e54a      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c728:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c72c:	f7ff bae9 	b.w	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c730:	2100      	movs	r1, #0
 800c732:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c736:	f7ff fa3d 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c73a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c73c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c740:	f7ff bb4a 	b.w	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c744:	2100      	movs	r1, #0
 800c746:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c74a:	f7ff fa33 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c74e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c750:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c754:	e600      	b.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c756:	2100      	movs	r1, #0
 800c758:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c75c:	f7ff fa2a 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c760:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c762:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c766:	f7ff baf0 	b.w	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c76a:	2102      	movs	r1, #2
 800c76c:	3028      	adds	r0, #40	; 0x28
 800c76e:	f7ff fa21 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c772:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c774:	2e00      	cmp	r6, #0
 800c776:	f43f aab5 	beq.w	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c77a:	e7d5      	b.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c77c:	4848      	ldr	r0, [pc, #288]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
 800c77e:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c780:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c782:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c786:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c788:	e5e6      	b.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c78a:	2100      	movs	r1, #0
 800c78c:	f104 0008 	add.w	r0, r4, #8
 800c790:	f7ff f996 	bl	800bac0 <RCCEx_PLL2_Config>
 800c794:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c796:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c79a:	e5dd      	b.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c79c:	2100      	movs	r1, #0
 800c79e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c7a2:	f7ff fa07 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c7a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c7a8:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c7ac:	f7ff bb52 	b.w	800be54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c7b6:	f7ff f9fd 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c7ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c7bc:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c7c0:	f7ff bae6 	b.w	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c7ca:	f7ff f9f3 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c7ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c7d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c7d4:	2d00      	cmp	r5, #0
 800c7d6:	f47f aef4 	bne.w	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800c7da:	e46c      	b.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7dc:	2101      	movs	r1, #1
 800c7de:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c7e2:	f7ff f9e7 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c7e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c7e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c7ec:	2d00      	cmp	r5, #0
 800c7ee:	f47f aef6 	bne.w	800c5de <HAL_RCCEx_PeriphCLKConfig+0x936>
 800c7f2:	e43c      	b.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7f4:	2101      	movs	r1, #1
 800c7f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c7fa:	f7ff f9db 	bl	800bbb4 <RCCEx_PLL3_Config>
 800c7fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c800:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c804:	2d00      	cmp	r5, #0
 800c806:	f47f aed6 	bne.w	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x90e>
 800c80a:	e5f9      	b.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
 800c80c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c80e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c812:	4635      	mov	r5, r6
 800c814:	f7ff bbe0 	b.w	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c818:	2601      	movs	r6, #1
 800c81a:	f7ff ba72 	b.w	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c81e:	4d20      	ldr	r5, [pc, #128]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800c820:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800c822:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800c826:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 800c828:	f7ff ba64 	b.w	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c82c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 800c830:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c832:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c836:	e4b4      	b.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c838:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 800c83c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c83e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c842:	e4bc      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
 800c844:	f7fa f96a 	bl	8006b1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c848:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
 800c84c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c84e:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c852:	e004      	b.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c854:	f7fa f962 	bl	8006b1c <HAL_GetTick>
 800c858:	1bc0      	subs	r0, r0, r7
 800c85a:	4548      	cmp	r0, r9
 800c85c:	d8d6      	bhi.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c85e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c862:	079b      	lsls	r3, r3, #30
 800c864:	d5f6      	bpl.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c866:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c86a:	e64d      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800c86c:	480c      	ldr	r0, [pc, #48]	; (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800c86e:	4a0d      	ldr	r2, [pc, #52]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800c870:	6901      	ldr	r1, [r0, #16]
 800c872:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800c876:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800c87a:	430a      	orrs	r2, r1
 800c87c:	6102      	str	r2, [r0, #16]
 800c87e:	e64e      	b.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c880:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c884:	462e      	mov	r6, r5
 800c886:	f7ff bba7 	b.w	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c88a:	2601      	movs	r6, #1
 800c88c:	4635      	mov	r5, r6
 800c88e:	f7ff bbf5 	b.w	800c07c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
 800c892:	2601      	movs	r6, #1
 800c894:	4635      	mov	r5, r6
 800c896:	f7ff bb9c 	b.w	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c89a:	2601      	movs	r6, #1
 800c89c:	4635      	mov	r5, r6
 800c89e:	e412      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800c8a0:	58024400 	.word	0x58024400
 800c8a4:	00ffffcf 	.word	0x00ffffcf

0800c8a8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800c8a8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c8aa:	f7ff f839 	bl	800b920 <HAL_RCC_GetHCLKFreq>
 800c8ae:	4b05      	ldr	r3, [pc, #20]	; (800c8c4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800c8b0:	4a05      	ldr	r2, [pc, #20]	; (800c8c8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800c8b2:	6a1b      	ldr	r3, [r3, #32]
 800c8b4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c8b8:	5cd3      	ldrb	r3, [r2, r3]
 800c8ba:	f003 031f 	and.w	r3, r3, #31
}
 800c8be:	40d8      	lsrs	r0, r3
 800c8c0:	bd08      	pop	{r3, pc}
 800c8c2:	bf00      	nop
 800c8c4:	58024400 	.word	0x58024400
 800c8c8:	0801db14 	.word	0x0801db14

0800c8cc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8cc:	4a50      	ldr	r2, [pc, #320]	; (800ca10 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 800c8ce:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c8d2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c8d4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 800c8d6:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c8da:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c8de:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800c8e0:	d05d      	beq.n	800c99e <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c8e2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c8e6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8ea:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c8ee:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c8f2:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c8f4:	ee07 4a90 	vmov	s15, r4
 800c8f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c8fc:	d003      	beq.n	800c906 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800c8fe:	2902      	cmp	r1, #2
 800c900:	d078      	beq.n	800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 800c902:	2900      	cmp	r1, #0
 800c904:	d050      	beq.n	800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800ca14 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c90e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c912:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c914:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800c918:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800ca18 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800c91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c920:	ee07 3a90 	vmov	s15, r3
 800c924:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c92c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c930:	eee7 7a06 	vfma.f32	s15, s14, s12
 800c934:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c938:	4a35      	ldr	r2, [pc, #212]	; (800ca10 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 800c93a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c93e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c940:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c944:	ee07 3a90 	vmov	s15, r3
 800c948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800c94c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c94e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c956:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c95a:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c95e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c960:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c964:	ee07 3a90 	vmov	s15, r3
 800c968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c96c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c974:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c978:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c97c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c97e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c982:	ee07 3a10 	vmov	s14, r3
 800c986:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c98a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c98e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c996:	ee17 3a90 	vmov	r3, s15
 800c99a:	6083      	str	r3, [r0, #8]
}
 800c99c:	4770      	bx	lr
 800c99e:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c9a0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c9a4:	6083      	str	r3, [r0, #8]
}
 800c9a6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9a8:	6811      	ldr	r1, [r2, #0]
 800c9aa:	0689      	lsls	r1, r1, #26
 800c9ac:	d529      	bpl.n	800ca02 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9ae:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9b0:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9b4:	4919      	ldr	r1, [pc, #100]	; (800ca1c <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9bc:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9c4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800ca18 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800c9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9cc:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9ce:	ee06 3a10 	vmov	s12, r3
 800c9d2:	ee05 1a90 	vmov	s11, r1
 800c9d6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c9da:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c9de:	ee36 6a26 	vadd.f32	s12, s12, s13
 800c9e2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800c9e6:	eef0 7a46 	vmov.f32	s15, s12
 800c9ea:	eee7 7a05 	vfma.f32	s15, s14, s10
 800c9ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c9f2:	e7a1      	b.n	800c938 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9f4:	ee07 3a90 	vmov	s15, r3
 800c9f8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800ca20 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800c9fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca00:	e787      	b.n	800c912 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800ca24 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 800ca0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca0e:	e780      	b.n	800c912 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800ca10:	58024400 	.word	0x58024400
 800ca14:	4a742400 	.word	0x4a742400
 800ca18:	39000000 	.word	0x39000000
 800ca1c:	03d09000 	.word	0x03d09000
 800ca20:	4bbebc20 	.word	0x4bbebc20
 800ca24:	4c742400 	.word	0x4c742400

0800ca28 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca28:	4a50      	ldr	r2, [pc, #320]	; (800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 800ca2a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ca2e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ca30:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 800ca32:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ca36:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ca3a:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800ca3c:	d05d      	beq.n	800cafa <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ca3e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ca42:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca46:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ca4a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800ca4e:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ca50:	ee07 4a90 	vmov	s15, r4
 800ca54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800ca58:	d003      	beq.n	800ca62 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800ca5a:	2902      	cmp	r1, #2
 800ca5c:	d078      	beq.n	800cb50 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 800ca5e:	2900      	cmp	r1, #0
 800ca60:	d050      	beq.n	800cb04 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca62:	ee07 3a90 	vmov	s15, r3
 800ca66:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800ca6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ca70:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800ca74:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800cb74 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800ca78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca7c:	ee07 3a90 	vmov	s15, r3
 800ca80:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ca84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca88:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ca8c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ca90:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ca94:	4a35      	ldr	r2, [pc, #212]	; (800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 800ca96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ca9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ca9c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800caa0:	ee07 3a90 	vmov	s15, r3
 800caa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800caa8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800caaa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800caae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cab2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800cab6:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800caba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800cabc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800cac0:	ee07 3a90 	vmov	s15, r3
 800cac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cac8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cacc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cad0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800cad4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cad8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800cada:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800cade:	ee07 3a10 	vmov	s14, r3
 800cae2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cae6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800caea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caf2:	ee17 3a90 	vmov	r3, s15
 800caf6:	6083      	str	r3, [r0, #8]
}
 800caf8:	4770      	bx	lr
 800cafa:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cafc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cb00:	6083      	str	r3, [r0, #8]
}
 800cb02:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb04:	6811      	ldr	r1, [r2, #0]
 800cb06:	0689      	lsls	r1, r1, #26
 800cb08:	d529      	bpl.n	800cb5e <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb0a:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb0c:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb10:	4919      	ldr	r1, [pc, #100]	; (800cb78 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb16:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb18:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb20:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800cb74 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800cb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb28:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb2a:	ee06 3a10 	vmov	s12, r3
 800cb2e:	ee05 1a90 	vmov	s11, r1
 800cb32:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800cb36:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800cb3a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800cb3e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800cb42:	eef0 7a46 	vmov.f32	s15, s12
 800cb46:	eee7 7a05 	vfma.f32	s15, s14, s10
 800cb4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cb4e:	e7a1      	b.n	800ca94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800cb7c <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800cb58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb5c:	e787      	b.n	800ca6e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800cb80 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 800cb66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb6a:	e780      	b.n	800ca6e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800cb6c:	58024400 	.word	0x58024400
 800cb70:	4a742400 	.word	0x4a742400
 800cb74:	39000000 	.word	0x39000000
 800cb78:	03d09000 	.word	0x03d09000
 800cb7c:	4bbebc20 	.word	0x4bbebc20
 800cb80:	4c742400 	.word	0x4c742400

0800cb84 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb84:	4a51      	ldr	r2, [pc, #324]	; (800cccc <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 800cb86:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb88:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cb8a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cb8c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 800cb8e:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cb92:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cb96:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800cb98:	d05e      	beq.n	800cc58 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cb9a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cb9e:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cba2:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cba6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800cbaa:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cbac:	ee07 4a90 	vmov	s15, r4
 800cbb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800cbb4:	f000 8082 	beq.w	800ccbc <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 800cbb8:	2902      	cmp	r1, #2
 800cbba:	d078      	beq.n	800ccae <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	d050      	beq.n	800cc62 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbc0:	ee07 3a90 	vmov	s15, r3
 800cbc4:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800ccd0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800cbc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbcc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cbce:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800cbd2:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800ccd4 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800cbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbda:	ee07 3a90 	vmov	s15, r3
 800cbde:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800cbe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbe6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800cbea:	eee7 7a06 	vfma.f32	s15, s14, s12
 800cbee:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cbf2:	4a36      	ldr	r2, [pc, #216]	; (800cccc <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 800cbf4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cbf8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cbfa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800cbfe:	ee07 3a90 	vmov	s15, r3
 800cc02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800cc06:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cc08:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cc0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc10:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800cc14:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cc18:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cc1a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800cc1e:	ee07 3a90 	vmov	s15, r3
 800cc22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc26:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cc2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc2e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800cc32:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cc36:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cc38:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800cc3c:	ee07 3a10 	vmov	s14, r3
 800cc40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc44:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cc48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc50:	ee17 3a90 	vmov	r3, s15
 800cc54:	6083      	str	r3, [r0, #8]
}
 800cc56:	4770      	bx	lr
 800cc58:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cc5a:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cc5e:	6083      	str	r3, [r0, #8]
}
 800cc60:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc62:	6811      	ldr	r1, [r2, #0]
 800cc64:	0689      	lsls	r1, r1, #26
 800cc66:	d5ab      	bpl.n	800cbc0 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc68:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc6a:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc6e:	491a      	ldr	r1, [pc, #104]	; (800ccd8 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc74:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc76:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc7e:	ed9f 5a15 	vldr	s10, [pc, #84]	; 800ccd4 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800cc82:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc86:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc88:	ee06 3a10 	vmov	s12, r3
 800cc8c:	ee05 1a90 	vmov	s11, r1
 800cc90:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800cc94:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800cc98:	ee36 6a26 	vadd.f32	s12, s12, s13
 800cc9c:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800cca0:	eef0 7a46 	vmov.f32	s15, s12
 800cca4:	eee7 7a05 	vfma.f32	s15, s14, s10
 800cca8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ccac:	e7a1      	b.n	800cbf2 <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccae:	ee07 3a90 	vmov	s15, r3
 800ccb2:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 800ccdc <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 800ccb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccba:	e787      	b.n	800cbcc <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccbc:	ee07 3a90 	vmov	s15, r3
 800ccc0:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800cce0 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 800ccc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccc8:	e780      	b.n	800cbcc <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 800ccca:	bf00      	nop
 800cccc:	58024400 	.word	0x58024400
 800ccd0:	4c742400 	.word	0x4c742400
 800ccd4:	39000000 	.word	0x39000000
 800ccd8:	03d09000 	.word	0x03d09000
 800ccdc:	4bbebc20 	.word	0x4bbebc20
 800cce0:	4a742400 	.word	0x4a742400

0800cce4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cce4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800cce8:	430b      	orrs	r3, r1
{
 800ccea:	b500      	push	{lr}
 800ccec:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ccee:	f000 8083 	beq.w	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ccf2:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800ccf6:	430b      	orrs	r3, r1
 800ccf8:	d038      	beq.n	800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ccfa:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800ccfe:	430b      	orrs	r3, r1
 800cd00:	f000 80e6 	beq.w	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cd04:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800cd08:	430b      	orrs	r3, r1
 800cd0a:	f000 8089 	beq.w	800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cd0e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800cd12:	430b      	orrs	r3, r1
 800cd14:	d060      	beq.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cd16:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800cd1a:	430b      	orrs	r3, r1
 800cd1c:	f000 8112 	beq.w	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cd20:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800cd24:	430b      	orrs	r3, r1
 800cd26:	f000 80a3 	beq.w	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd2a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800cd2e:	430b      	orrs	r3, r1
 800cd30:	f000 80fa 	beq.w	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cd34:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800cd38:	430b      	orrs	r3, r1
 800cd3a:	f000 8143 	beq.w	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cd3e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800cd42:	4308      	orrs	r0, r1
 800cd44:	d137      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cd46:	4a9a      	ldr	r2, [pc, #616]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd48:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cd4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800cd4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd52:	f000 8084 	beq.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cd56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd5a:	f000 8157 	beq.w	800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800cd5e:	bb53      	cbnz	r3, 800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd60:	6810      	ldr	r0, [r2, #0]
 800cd62:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800cd66:	d044      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 800cd68:	4892      	ldr	r0, [pc, #584]	; (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800cd6a:	e042      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800cd6c:	4a90      	ldr	r2, [pc, #576]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd6e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cd70:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800cd74:	2b80      	cmp	r3, #128	; 0x80
 800cd76:	f000 80a6 	beq.w	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cd7a:	d920      	bls.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800cd7c:	2bc0      	cmp	r3, #192	; 0xc0
 800cd7e:	d037      	beq.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800cd80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd84:	d117      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd86:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd88:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd8e:	0749      	lsls	r1, r1, #29
 800cd90:	d502      	bpl.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 80c2 	beq.w	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd98:	4a85      	ldr	r2, [pc, #532]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd9a:	6812      	ldr	r2, [r2, #0]
 800cd9c:	05d0      	lsls	r0, r2, #23
 800cd9e:	d503      	bpl.n	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800cda0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cda4:	f000 8102 	beq.w	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cda8:	4a81      	ldr	r2, [pc, #516]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cdaa:	6812      	ldr	r2, [r2, #0]
 800cdac:	0391      	lsls	r1, r2, #14
 800cdae:	d502      	bpl.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800cdb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdb4:	d0d8      	beq.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800cdb6:	2000      	movs	r0, #0
}
 800cdb8:	b005      	add	sp, #20
 800cdba:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d04d      	beq.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cdc2:	2b40      	cmp	r3, #64	; 0x40
 800cdc4:	d1f7      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdc6:	6810      	ldr	r0, [r2, #0]
 800cdc8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cdcc:	d011      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdce:	a801      	add	r0, sp, #4
 800cdd0:	f7ff fd7c 	bl	800c8cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cdd4:	9801      	ldr	r0, [sp, #4]
 800cdd6:	e00c      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cdd8:	4a75      	ldr	r2, [pc, #468]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cdda:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cddc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800cde0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cde4:	d06f      	beq.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cde6:	d938      	bls.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800cde8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdec:	f040 8088 	bne.w	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cdf0:	4871      	ldr	r0, [pc, #452]	; (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800cdf2:	b005      	add	sp, #20
 800cdf4:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cdf8:	4b6d      	ldr	r3, [pc, #436]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cdfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdfc:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800ce00:	2b04      	cmp	r3, #4
 800ce02:	d8d8      	bhi.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800ce04:	a201      	add	r2, pc, #4	; (adr r2, 800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800ce06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0a:	bf00      	nop
 800ce0c:	0800ceaf 	.word	0x0800ceaf
 800ce10:	0800ce8b 	.word	0x0800ce8b
 800ce14:	0800ce9b 	.word	0x0800ce9b
 800ce18:	0800cdf1 	.word	0x0800cdf1
 800ce1c:	0800ce97 	.word	0x0800ce97
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ce20:	4a63      	ldr	r2, [pc, #396]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce22:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ce24:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800ce28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce2c:	d04b      	beq.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800ce2e:	d944      	bls.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800ce30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ce34:	d0dc      	beq.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800ce36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce3a:	d1bc      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce3c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce3e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce44:	0752      	lsls	r2, r2, #29
 800ce46:	d5a7      	bpl.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1a5      	bne.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce4c:	4b58      	ldr	r3, [pc, #352]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce4e:	485b      	ldr	r0, [pc, #364]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ce56:	40d8      	lsrs	r0, r3
 800ce58:	e7cb      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d154      	bne.n	800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce5e:	6810      	ldr	r0, [r2, #0]
 800ce60:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800ce64:	d0c5      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce66:	a801      	add	r0, sp, #4
 800ce68:	f7ff fe8c 	bl	800cb84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce6c:	9802      	ldr	r0, [sp, #8]
 800ce6e:	e7c0      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ce70:	4a4f      	ldr	r2, [pc, #316]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce72:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ce74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800ce78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce7c:	f000 80d0 	beq.w	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800ce80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce84:	d0da      	beq.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d195      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce8a:	4b49      	ldr	r3, [pc, #292]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ce92:	d0ae      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800ce94:	e79b      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce96:	4a46      	ldr	r2, [pc, #280]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce98:	e775      	b.n	800cd86 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce9a:	4b45      	ldr	r3, [pc, #276]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce9c:	6818      	ldr	r0, [r3, #0]
 800ce9e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cea2:	d0a6      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cea4:	a801      	add	r0, sp, #4
 800cea6:	f7ff fdbf 	bl	800ca28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ceaa:	9801      	ldr	r0, [sp, #4]
 800ceac:	e7a1      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ceae:	4b40      	ldr	r3, [pc, #256]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800ceb6:	d09c      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800ceb8:	e7d5      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d0cf      	beq.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cebe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cec2:	d080      	beq.n	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800cec4:	e777      	b.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cec6:	6810      	ldr	r0, [r2, #0]
 800cec8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cecc:	d091      	beq.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cece:	e7e9      	b.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ced0:	4a37      	ldr	r2, [pc, #220]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ced2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ced4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800ced8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cedc:	d0f3      	beq.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cede:	d806      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d0bc      	beq.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cee8:	f43f af6d 	beq.w	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800ceec:	e763      	b.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800ceee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cef2:	f43f af7d 	beq.w	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800cef6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cefa:	f43f af44 	beq.w	800cd86 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800cefe:	e75a      	b.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 800cf00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf04:	d09a      	beq.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800cf06:	e756      	b.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800cf08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf0c:	f43f af5b 	beq.w	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800cf10:	e751      	b.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf12:	6810      	ldr	r0, [r2, #0]
 800cf14:	f010 0004 	ands.w	r0, r0, #4
 800cf18:	f43f af6b 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf1c:	6813      	ldr	r3, [r2, #0]
 800cf1e:	4827      	ldr	r0, [pc, #156]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800cf20:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cf24:	40d8      	lsrs	r0, r3
 800cf26:	e764      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cf28:	4b21      	ldr	r3, [pc, #132]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800cf2c:	03d2      	lsls	r2, r2, #15
 800cf2e:	d5bf      	bpl.n	800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf30:	6818      	ldr	r0, [r3, #0]
 800cf32:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cf36:	f43f af5c 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf3a:	a801      	add	r0, sp, #4
 800cf3c:	f7ff fcc6 	bl	800c8cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cf40:	9803      	ldr	r0, [sp, #12]
 800cf42:	e756      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cf44:	4a1a      	ldr	r2, [pc, #104]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf46:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cf48:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800cf4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf50:	d0df      	beq.n	800cf12 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800cf52:	d810      	bhi.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800cf54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf58:	d058      	beq.n	800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800cf5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf5e:	d118      	bne.n	800cf92 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf60:	4b13      	ldr	r3, [pc, #76]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf62:	6818      	ldr	r0, [r3, #0]
 800cf64:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cf68:	f43f af43 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf6c:	a801      	add	r0, sp, #4
 800cf6e:	f7ff fd5b 	bl	800ca28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf72:	9802      	ldr	r0, [sp, #8]
 800cf74:	e73d      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800cf76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cf7a:	d012      	beq.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800cf7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf80:	f47f af19 	bne.w	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf84:	4b0a      	ldr	r3, [pc, #40]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf86:	6818      	ldr	r0, [r3, #0]
 800cf88:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800cf8c:	f43f af31 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cf90:	e6ea      	b.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f47f af0f 	bne.w	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 800cf98:	b005      	add	sp, #20
 800cf9a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800cf9e:	f7fe bcff 	b.w	800b9a0 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cfa2:	6810      	ldr	r0, [r2, #0]
 800cfa4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800cfa8:	f43f af23 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 800cfac:	4804      	ldr	r0, [pc, #16]	; (800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800cfae:	e720      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cfb0:	58024400 	.word	0x58024400
 800cfb4:	017d7840 	.word	0x017d7840
 800cfb8:	00bb8000 	.word	0x00bb8000
 800cfbc:	03d09000 	.word	0x03d09000
 800cfc0:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cfc4:	4b28      	ldr	r3, [pc, #160]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800cfc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfc8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800cfcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cfd0:	d037      	beq.n	800d042 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800cfd2:	d814      	bhi.n	800cffe <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800cfd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfd8:	d03f      	beq.n	800d05a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800cfda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfde:	d0bf      	beq.n	800cf60 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f47f aee8 	bne.w	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfe6:	f7fe fc9b 	bl	800b920 <HAL_RCC_GetHCLKFreq>
 800cfea:	4b1f      	ldr	r3, [pc, #124]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800cfec:	4a1f      	ldr	r2, [pc, #124]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800cfee:	6a1b      	ldr	r3, [r3, #32]
 800cff0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cff4:	5cd3      	ldrb	r3, [r2, r3]
 800cff6:	f003 031f 	and.w	r3, r3, #31
 800cffa:	40d8      	lsrs	r0, r3
        break;
 800cffc:	e6f9      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800cffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d002:	d017      	beq.n	800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800d004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d008:	d0bc      	beq.n	800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800d00a:	e6d4      	b.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d00c:	6810      	ldr	r0, [r2, #0]
 800d00e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d012:	f43f aeee 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d016:	a801      	add	r0, sp, #4
 800d018:	f7ff fc58 	bl	800c8cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d01c:	9802      	ldr	r0, [sp, #8]
 800d01e:	e6e8      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d020:	6810      	ldr	r0, [r2, #0]
 800d022:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d026:	f43f aee4 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d02a:	a801      	add	r0, sp, #4
 800d02c:	f7ff fcfc 	bl	800ca28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d030:	9803      	ldr	r0, [sp, #12]
 800d032:	e6de      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d034:	4b0c      	ldr	r3, [pc, #48]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d036:	6818      	ldr	r0, [r3, #0]
 800d038:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800d03c:	f43f aed9 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d040:	e7b4      	b.n	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d042:	4b09      	ldr	r3, [pc, #36]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d044:	6818      	ldr	r0, [r3, #0]
 800d046:	f010 0004 	ands.w	r0, r0, #4
 800d04a:	f43f aed2 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4807      	ldr	r0, [pc, #28]	; (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800d052:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d056:	40d8      	lsrs	r0, r3
 800d058:	e6cb      	b.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d05a:	4b03      	ldr	r3, [pc, #12]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d05c:	6818      	ldr	r0, [r3, #0]
 800d05e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d062:	f43f aec6 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d066:	e7d6      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800d068:	58024400 	.word	0x58024400
 800d06c:	0801db14 	.word	0x0801db14
 800d070:	03d09000 	.word	0x03d09000

0800d074 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d074:	2800      	cmp	r0, #0
 800d076:	f000 80a5 	beq.w	800d1c4 <HAL_TIM_Base_Init+0x150>
{
 800d07a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d07c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d080:	4604      	mov	r4, r0
 800d082:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d086:	2b00      	cmp	r3, #0
 800d088:	d076      	beq.n	800d178 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d08a:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d08c:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d08e:	494e      	ldr	r1, [pc, #312]	; (800d1c8 <HAL_TIM_Base_Init+0x154>)
 800d090:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800d094:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d098:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800d09c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d09e:	fab1 f181 	clz	r1, r1
 800d0a2:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800d0a6:	d027      	beq.n	800d0f8 <HAL_TIM_Base_Init+0x84>
 800d0a8:	bb31      	cbnz	r1, 800d0f8 <HAL_TIM_Base_Init+0x84>
 800d0aa:	4848      	ldr	r0, [pc, #288]	; (800d1cc <HAL_TIM_Base_Init+0x158>)
 800d0ac:	4d48      	ldr	r5, [pc, #288]	; (800d1d0 <HAL_TIM_Base_Init+0x15c>)
 800d0ae:	4282      	cmp	r2, r0
 800d0b0:	d067      	beq.n	800d182 <HAL_TIM_Base_Init+0x10e>
 800d0b2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d0b6:	4282      	cmp	r2, r0
 800d0b8:	d063      	beq.n	800d182 <HAL_TIM_Base_Init+0x10e>
 800d0ba:	1b55      	subs	r5, r2, r5
 800d0bc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d0c0:	fab5 f585 	clz	r5, r5
 800d0c4:	4282      	cmp	r2, r0
 800d0c6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800d0ca:	d063      	beq.n	800d194 <HAL_TIM_Base_Init+0x120>
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	d161      	bne.n	800d194 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0d0:	4840      	ldr	r0, [pc, #256]	; (800d1d4 <HAL_TIM_Base_Init+0x160>)
 800d0d2:	4941      	ldr	r1, [pc, #260]	; (800d1d8 <HAL_TIM_Base_Init+0x164>)
 800d0d4:	428a      	cmp	r2, r1
 800d0d6:	bf18      	it	ne
 800d0d8:	4282      	cmpne	r2, r0
 800d0da:	d065      	beq.n	800d1a8 <HAL_TIM_Base_Init+0x134>
 800d0dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d0e0:	428a      	cmp	r2, r1
 800d0e2:	d061      	beq.n	800d1a8 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0e4:	69a0      	ldr	r0, [r4, #24]
 800d0e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0ea:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0ec:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800d0ee:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0f0:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0f2:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d0f4:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0f6:	e023      	b.n	800d140 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0f8:	4d35      	ldr	r5, [pc, #212]	; (800d1d0 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d0fe:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d100:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800d102:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d104:	fab5 f585 	clz	r5, r5
 800d108:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d10a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d10c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d110:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d112:	69a0      	ldr	r0, [r4, #24]
 800d114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d118:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800d11a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d11c:	68e3      	ldr	r3, [r4, #12]
 800d11e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d120:	6863      	ldr	r3, [r4, #4]
 800d122:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d124:	b951      	cbnz	r1, 800d13c <HAL_TIM_Base_Init+0xc8>
 800d126:	b94d      	cbnz	r5, 800d13c <HAL_TIM_Base_Init+0xc8>
 800d128:	492a      	ldr	r1, [pc, #168]	; (800d1d4 <HAL_TIM_Base_Init+0x160>)
 800d12a:	4b2b      	ldr	r3, [pc, #172]	; (800d1d8 <HAL_TIM_Base_Init+0x164>)
 800d12c:	429a      	cmp	r2, r3
 800d12e:	bf18      	it	ne
 800d130:	428a      	cmpne	r2, r1
 800d132:	d003      	beq.n	800d13c <HAL_TIM_Base_Init+0xc8>
 800d134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d138:	429a      	cmp	r2, r3
 800d13a:	d101      	bne.n	800d140 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d13c:	6963      	ldr	r3, [r4, #20]
 800d13e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d140:	2301      	movs	r3, #1
  return HAL_OK;
 800d142:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800d144:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d146:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d14a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800d14e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d152:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d156:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d15a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d15e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d162:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d16a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800d16e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d176:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800d178:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800d17c:	f7f9 f9e6 	bl	800654c <HAL_TIM_Base_MspInit>
 800d180:	e783      	b.n	800d08a <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d182:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d188:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d18a:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800d18e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d190:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d192:	e7ba      	b.n	800d10a <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800d194:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d19a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d19c:	480f      	ldr	r0, [pc, #60]	; (800d1dc <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d19e:	4282      	cmp	r2, r0
 800d1a0:	d0b3      	beq.n	800d10a <HAL_TIM_Base_Init+0x96>
 800d1a2:	2d00      	cmp	r5, #0
 800d1a4:	d1b1      	bne.n	800d10a <HAL_TIM_Base_Init+0x96>
 800d1a6:	e793      	b.n	800d0d0 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1a8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1ae:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1b0:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d1b2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1b8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800d1ba:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800d1bc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d1be:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d1c0:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d1c2:	e7b1      	b.n	800d128 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800d1c4:	2001      	movs	r0, #1
}
 800d1c6:	4770      	bx	lr
 800d1c8:	40010000 	.word	0x40010000
 800d1cc:	40000400 	.word	0x40000400
 800d1d0:	40010400 	.word	0x40010400
 800d1d4:	40014000 	.word	0x40014000
 800d1d8:	40014400 	.word	0x40014400
 800d1dc:	40000c00 	.word	0x40000c00

0800d1e0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800d1e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d13d      	bne.n	800d264 <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1e8:	6802      	ldr	r2, [r0, #0]
 800d1ea:	4b23      	ldr	r3, [pc, #140]	; (800d278 <HAL_TIM_Base_Start+0x98>)
 800d1ec:	4923      	ldr	r1, [pc, #140]	; (800d27c <HAL_TIM_Base_Start+0x9c>)
 800d1ee:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d1f2:	bf18      	it	ne
 800d1f4:	429a      	cmpne	r2, r3
{
 800d1f6:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1f8:	bf0c      	ite	eq
 800d1fa:	2301      	moveq	r3, #1
 800d1fc:	2300      	movne	r3, #0
 800d1fe:	4d20      	ldr	r5, [pc, #128]	; (800d280 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d200:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d202:	42aa      	cmp	r2, r5
 800d204:	bf08      	it	eq
 800d206:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d20a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d20e:	4c1d      	ldr	r4, [pc, #116]	; (800d284 <HAL_TIM_Base_Start+0xa4>)
 800d210:	428a      	cmp	r2, r1
 800d212:	bf08      	it	eq
 800d214:	f043 0301 	orreq.w	r3, r3, #1
 800d218:	481b      	ldr	r0, [pc, #108]	; (800d288 <HAL_TIM_Base_Start+0xa8>)
 800d21a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800d21e:	42a2      	cmp	r2, r4
 800d220:	bf08      	it	eq
 800d222:	f043 0301 	orreq.w	r3, r3, #1
 800d226:	4282      	cmp	r2, r0
 800d228:	bf08      	it	eq
 800d22a:	f043 0301 	orreq.w	r3, r3, #1
 800d22e:	428a      	cmp	r2, r1
 800d230:	bf08      	it	eq
 800d232:	f043 0301 	orreq.w	r3, r3, #1
 800d236:	b933      	cbnz	r3, 800d246 <HAL_TIM_Base_Start+0x66>
 800d238:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800d23c:	1a10      	subs	r0, r2, r0
 800d23e:	fab0 f080 	clz	r0, r0
 800d242:	0940      	lsrs	r0, r0, #5
 800d244:	b198      	cbz	r0, 800d26e <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d246:	6891      	ldr	r1, [r2, #8]
 800d248:	4b10      	ldr	r3, [pc, #64]	; (800d28c <HAL_TIM_Base_Start+0xac>)
 800d24a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d24c:	2b06      	cmp	r3, #6
 800d24e:	d00b      	beq.n	800d268 <HAL_TIM_Base_Start+0x88>
 800d250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d254:	d008      	beq.n	800d268 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800d256:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d258:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800d25a:	f043 0301 	orr.w	r3, r3, #1
 800d25e:	6013      	str	r3, [r2, #0]
}
 800d260:	bc30      	pop	{r4, r5}
 800d262:	4770      	bx	lr
    return HAL_ERROR;
 800d264:	2001      	movs	r0, #1
}
 800d266:	4770      	bx	lr
  return HAL_OK;
 800d268:	2000      	movs	r0, #0
}
 800d26a:	bc30      	pop	{r4, r5}
 800d26c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800d26e:	6813      	ldr	r3, [r2, #0]
 800d270:	f043 0301 	orr.w	r3, r3, #1
 800d274:	6013      	str	r3, [r2, #0]
 800d276:	e7f3      	b.n	800d260 <HAL_TIM_Base_Start+0x80>
 800d278:	40010000 	.word	0x40010000
 800d27c:	40000800 	.word	0x40000800
 800d280:	40000400 	.word	0x40000400
 800d284:	40000c00 	.word	0x40000c00
 800d288:	40010400 	.word	0x40010400
 800d28c:	00010007 	.word	0x00010007

0800d290 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800d290:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d294:	2b01      	cmp	r3, #1
 800d296:	d141      	bne.n	800d31c <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d298:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d29a:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d29c:	4b24      	ldr	r3, [pc, #144]	; (800d330 <HAL_TIM_Base_Start_IT+0xa0>)
 800d29e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d2a2:	bf18      	it	ne
 800d2a4:	429a      	cmpne	r2, r3
{
 800d2a6:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2a8:	bf0c      	ite	eq
 800d2aa:	2301      	moveq	r3, #1
 800d2ac:	2300      	movne	r3, #0
 800d2ae:	4d21      	ldr	r5, [pc, #132]	; (800d334 <HAL_TIM_Base_Start_IT+0xa4>)
 800d2b0:	4c21      	ldr	r4, [pc, #132]	; (800d338 <HAL_TIM_Base_Start_IT+0xa8>)
 800d2b2:	42aa      	cmp	r2, r5
 800d2b4:	bf08      	it	eq
 800d2b6:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d2ba:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d2be:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2c0:	42a2      	cmp	r2, r4
 800d2c2:	bf08      	it	eq
 800d2c4:	f043 0301 	orreq.w	r3, r3, #1
 800d2c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d2cc:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2d0:	481a      	ldr	r0, [pc, #104]	; (800d33c <HAL_TIM_Base_Start_IT+0xac>)
 800d2d2:	42a2      	cmp	r2, r4
 800d2d4:	bf08      	it	eq
 800d2d6:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d2da:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2dc:	4282      	cmp	r2, r0
 800d2de:	bf08      	it	eq
 800d2e0:	f043 0301 	orreq.w	r3, r3, #1
 800d2e4:	4916      	ldr	r1, [pc, #88]	; (800d340 <HAL_TIM_Base_Start_IT+0xb0>)
 800d2e6:	428a      	cmp	r2, r1
 800d2e8:	bf08      	it	eq
 800d2ea:	f043 0301 	orreq.w	r3, r3, #1
 800d2ee:	b933      	cbnz	r3, 800d2fe <HAL_TIM_Base_Start_IT+0x6e>
 800d2f0:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800d2f4:	1a10      	subs	r0, r2, r0
 800d2f6:	fab0 f080 	clz	r0, r0
 800d2fa:	0940      	lsrs	r0, r0, #5
 800d2fc:	b198      	cbz	r0, 800d326 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2fe:	6891      	ldr	r1, [r2, #8]
 800d300:	4b10      	ldr	r3, [pc, #64]	; (800d344 <HAL_TIM_Base_Start_IT+0xb4>)
 800d302:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d304:	2b06      	cmp	r3, #6
 800d306:	d00b      	beq.n	800d320 <HAL_TIM_Base_Start_IT+0x90>
 800d308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d30c:	d008      	beq.n	800d320 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800d30e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d310:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800d312:	f043 0301 	orr.w	r3, r3, #1
 800d316:	6013      	str	r3, [r2, #0]
}
 800d318:	bc30      	pop	{r4, r5}
 800d31a:	4770      	bx	lr
    return HAL_ERROR;
 800d31c:	2001      	movs	r0, #1
}
 800d31e:	4770      	bx	lr
  return HAL_OK;
 800d320:	2000      	movs	r0, #0
}
 800d322:	bc30      	pop	{r4, r5}
 800d324:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800d326:	6813      	ldr	r3, [r2, #0]
 800d328:	f043 0301 	orr.w	r3, r3, #1
 800d32c:	6013      	str	r3, [r2, #0]
 800d32e:	e7f3      	b.n	800d318 <HAL_TIM_Base_Start_IT+0x88>
 800d330:	40010000 	.word	0x40010000
 800d334:	40000400 	.word	0x40000400
 800d338:	40000800 	.word	0x40000800
 800d33c:	40010400 	.word	0x40010400
 800d340:	40001800 	.word	0x40001800
 800d344:	00010007 	.word	0x00010007

0800d348 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800d348:	2800      	cmp	r0, #0
 800d34a:	f000 80cc 	beq.w	800d4e6 <HAL_TIM_Encoder_Init+0x19e>
{
 800d34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800d350:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d354:	4604      	mov	r4, r0
 800d356:	460d      	mov	r5, r1
 800d358:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 809b 	beq.w	800d498 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d362:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d364:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d366:	4a61      	ldr	r2, [pc, #388]	; (800d4ec <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d368:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d36c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d370:	6899      	ldr	r1, [r3, #8]
 800d372:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d376:	495e      	ldr	r1, [pc, #376]	; (800d4f0 <HAL_TIM_Encoder_Init+0x1a8>)
 800d378:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d37c:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800d37e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d380:	fab1 f181 	clz	r1, r1
 800d384:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800d388:	d02b      	beq.n	800d3e2 <HAL_TIM_Encoder_Init+0x9a>
 800d38a:	bb51      	cbnz	r1, 800d3e2 <HAL_TIM_Encoder_Init+0x9a>
 800d38c:	4859      	ldr	r0, [pc, #356]	; (800d4f4 <HAL_TIM_Encoder_Init+0x1ac>)
 800d38e:	4283      	cmp	r3, r0
 800d390:	f000 8087 	beq.w	800d4a2 <HAL_TIM_Encoder_Init+0x15a>
 800d394:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d398:	4283      	cmp	r3, r0
 800d39a:	f000 8082 	beq.w	800d4a2 <HAL_TIM_Encoder_Init+0x15a>
 800d39e:	4e56      	ldr	r6, [pc, #344]	; (800d4f8 <HAL_TIM_Encoder_Init+0x1b0>)
 800d3a0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d3a4:	1b9e      	subs	r6, r3, r6
 800d3a6:	4283      	cmp	r3, r0
 800d3a8:	fab6 f686 	clz	r6, r6
 800d3ac:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800d3b0:	f000 8081 	beq.w	800d4b6 <HAL_TIM_Encoder_Init+0x16e>
 800d3b4:	2e00      	cmp	r6, #0
 800d3b6:	d17e      	bne.n	800d4b6 <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3b8:	4850      	ldr	r0, [pc, #320]	; (800d4fc <HAL_TIM_Encoder_Init+0x1b4>)
 800d3ba:	4951      	ldr	r1, [pc, #324]	; (800d500 <HAL_TIM_Encoder_Init+0x1b8>)
 800d3bc:	428b      	cmp	r3, r1
 800d3be:	bf18      	it	ne
 800d3c0:	4283      	cmpne	r3, r0
 800d3c2:	f000 8082 	beq.w	800d4ca <HAL_TIM_Encoder_Init+0x182>
 800d3c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d3ca:	428b      	cmp	r3, r1
 800d3cc:	d07d      	beq.n	800d4ca <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d3ce:	69a1      	ldr	r1, [r4, #24]
 800d3d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d3d4:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3d6:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800d3d8:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800d3da:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3dc:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d3de:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d3e0:	e023      	b.n	800d42a <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3e2:	4e45      	ldr	r6, [pc, #276]	; (800d4f8 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d3e8:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3ea:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800d3ec:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3ee:	fab6 f686 	clz	r6, r6
 800d3f2:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3f4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d3f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3fa:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d3fc:	69a0      	ldr	r0, [r4, #24]
 800d3fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d402:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800d404:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d406:	68e2      	ldr	r2, [r4, #12]
 800d408:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d40a:	6862      	ldr	r2, [r4, #4]
 800d40c:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d40e:	b951      	cbnz	r1, 800d426 <HAL_TIM_Encoder_Init+0xde>
 800d410:	b94e      	cbnz	r6, 800d426 <HAL_TIM_Encoder_Init+0xde>
 800d412:	493a      	ldr	r1, [pc, #232]	; (800d4fc <HAL_TIM_Encoder_Init+0x1b4>)
 800d414:	4a3a      	ldr	r2, [pc, #232]	; (800d500 <HAL_TIM_Encoder_Init+0x1b8>)
 800d416:	4293      	cmp	r3, r2
 800d418:	bf18      	it	ne
 800d41a:	428b      	cmpne	r3, r1
 800d41c:	d003      	beq.n	800d426 <HAL_TIM_Encoder_Init+0xde>
 800d41e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d422:	4293      	cmp	r3, r2
 800d424:	d101      	bne.n	800d42a <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800d426:	6962      	ldr	r2, [r4, #20]
 800d428:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d42a:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800d42c:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d42e:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d430:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d434:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800d436:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d438:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d43c:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800d43e:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d440:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800d444:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d446:	492f      	ldr	r1, [pc, #188]	; (800d504 <HAL_TIM_Encoder_Init+0x1bc>)
 800d448:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d44a:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d44c:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d450:	68e9      	ldr	r1, [r5, #12]
 800d452:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800d454:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d456:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d45a:	6a29      	ldr	r1, [r5, #32]
 800d45c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d460:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800d462:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d464:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800d468:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d46a:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800d46e:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d470:	4825      	ldr	r0, [pc, #148]	; (800d508 <HAL_TIM_Encoder_Init+0x1c0>)
 800d472:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d476:	4302      	orrs	r2, r0
  return HAL_OK;
 800d478:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800d47a:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800d47c:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d47e:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d482:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d486:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d48a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d48e:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800d492:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800d496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800d498:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800d49c:	f7f9 f8b4 	bl	8006608 <HAL_TIM_Encoder_MspInit>
 800d4a0:	e75f      	b.n	800d362 <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4a2:	4e15      	ldr	r6, [pc, #84]	; (800d4f8 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d4a8:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4aa:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800d4ac:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4ae:	fab6 f686 	clz	r6, r6
 800d4b2:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4b4:	e79e      	b.n	800d3f4 <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800d4b6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d4bc:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4be:	4813      	ldr	r0, [pc, #76]	; (800d50c <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4c0:	4283      	cmp	r3, r0
 800d4c2:	d097      	beq.n	800d3f4 <HAL_TIM_Encoder_Init+0xac>
 800d4c4:	2e00      	cmp	r6, #0
 800d4c6:	d195      	bne.n	800d3f4 <HAL_TIM_Encoder_Init+0xac>
 800d4c8:	e776      	b.n	800d3b8 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4ca:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4d0:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4d2:	69a1      	ldr	r1, [r4, #24]
 800d4d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4d8:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4da:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800d4dc:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800d4de:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4e0:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d4e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4e4:	e795      	b.n	800d412 <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800d4e6:	2001      	movs	r0, #1
}
 800d4e8:	4770      	bx	lr
 800d4ea:	bf00      	nop
 800d4ec:	fffebff8 	.word	0xfffebff8
 800d4f0:	40010000 	.word	0x40010000
 800d4f4:	40000400 	.word	0x40000400
 800d4f8:	40010400 	.word	0x40010400
 800d4fc:	40014000 	.word	0x40014000
 800d500:	40014400 	.word	0x40014400
 800d504:	fffffcfc 	.word	0xfffffcfc
 800d508:	ffff0303 	.word	0xffff0303
 800d50c:	40000c00 	.word	0x40000c00

0800d510 <HAL_TIM_Encoder_Start>:
{
 800d510:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d512:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d516:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d51a:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d51e:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d520:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d524:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800d526:	b9c1      	cbnz	r1, 800d55a <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d123      	bne.n	800d574 <HAL_TIM_Encoder_Start+0x64>
 800d52c:	2a01      	cmp	r2, #1
 800d52e:	d121      	bne.n	800d574 <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d530:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d532:	2302      	movs	r3, #2
 800d534:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d538:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d53c:	6a13      	ldr	r3, [r2, #32]
 800d53e:	f023 0301 	bic.w	r3, r3, #1
 800d542:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d544:	6a13      	ldr	r3, [r2, #32]
 800d546:	f043 0301 	orr.w	r3, r3, #1
 800d54a:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800d54c:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d54e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800d550:	f043 0301 	orr.w	r3, r3, #1
 800d554:	6013      	str	r3, [r2, #0]
}
 800d556:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800d55a:	2904      	cmp	r1, #4
 800d55c:	fa5f fc8c 	uxtb.w	ip, ip
 800d560:	fa5f fe8e 	uxtb.w	lr, lr
 800d564:	d027      	beq.n	800d5b6 <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d566:	2b01      	cmp	r3, #1
 800d568:	d104      	bne.n	800d574 <HAL_TIM_Encoder_Start+0x64>
 800d56a:	f1bc 0f01 	cmp.w	ip, #1
 800d56e:	d101      	bne.n	800d574 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d570:	2a01      	cmp	r2, #1
 800d572:	d002      	beq.n	800d57a <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800d574:	2001      	movs	r0, #1
}
 800d576:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d57a:	f1be 0f01 	cmp.w	lr, #1
 800d57e:	d1f9      	bne.n	800d574 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d580:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d582:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d584:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d588:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d58c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d590:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d594:	6a13      	ldr	r3, [r2, #32]
 800d596:	f023 0301 	bic.w	r3, r3, #1
 800d59a:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d59c:	6a13      	ldr	r3, [r2, #32]
 800d59e:	f043 0301 	orr.w	r3, r3, #1
 800d5a2:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800d5a4:	6a13      	ldr	r3, [r2, #32]
 800d5a6:	f023 0310 	bic.w	r3, r3, #16
 800d5aa:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d5ac:	6a13      	ldr	r3, [r2, #32]
 800d5ae:	f043 0310 	orr.w	r3, r3, #16
 800d5b2:	6213      	str	r3, [r2, #32]
}
 800d5b4:	e7ca      	b.n	800d54c <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d5b6:	f1bc 0f01 	cmp.w	ip, #1
 800d5ba:	d1db      	bne.n	800d574 <HAL_TIM_Encoder_Start+0x64>
 800d5bc:	f1be 0f01 	cmp.w	lr, #1
 800d5c0:	d1d8      	bne.n	800d574 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5c2:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d5c4:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5c6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5ca:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d5ce:	e7e9      	b.n	800d5a4 <HAL_TIM_Encoder_Start+0x94>

0800d5d0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800d5d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	f000 8081 	beq.w	800d6dc <HAL_TIM_ConfigClockSource+0x10c>
 800d5da:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d5dc:	2302      	movs	r3, #2
{
 800d5de:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800d5e0:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800d5e2:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d5e4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800d5e8:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5ec:	4b5a      	ldr	r3, [pc, #360]	; (800d758 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800d5ee:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5f0:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800d5f2:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800d5f4:	680b      	ldr	r3, [r1, #0]
 800d5f6:	2b70      	cmp	r3, #112	; 0x70
 800d5f8:	f000 809c 	beq.w	800d734 <HAL_TIM_ConfigClockSource+0x164>
 800d5fc:	d825      	bhi.n	800d64a <HAL_TIM_ConfigClockSource+0x7a>
 800d5fe:	2b50      	cmp	r3, #80	; 0x50
 800d600:	d06e      	beq.n	800d6e0 <HAL_TIM_ConfigClockSource+0x110>
 800d602:	d939      	bls.n	800d678 <HAL_TIM_ConfigClockSource+0xa8>
 800d604:	2b60      	cmp	r3, #96	; 0x60
 800d606:	d118      	bne.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d608:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800d60a:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d60c:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
 800d610:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d612:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d614:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d616:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d61a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800d61e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d620:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800d624:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d626:	4b4d      	ldr	r3, [pc, #308]	; (800d75c <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800d628:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  HAL_StatusTypeDef status = HAL_OK;
 800d62c:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 800d62e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800d630:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d632:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d634:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800d638:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800d63a:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800d63c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d63e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d642:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800d646:	bc30      	pop	{r4, r5}
 800d648:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800d64a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d64e:	d060      	beq.n	800d712 <HAL_TIM_ConfigClockSource+0x142>
 800d650:	d933      	bls.n	800d6ba <HAL_TIM_ConfigClockSource+0xea>
 800d652:	4943      	ldr	r1, [pc, #268]	; (800d760 <HAL_TIM_ConfigClockSource+0x190>)
 800d654:	428b      	cmp	r3, r1
 800d656:	d006      	beq.n	800d666 <HAL_TIM_ConfigClockSource+0x96>
 800d658:	d929      	bls.n	800d6ae <HAL_TIM_ConfigClockSource+0xde>
 800d65a:	4942      	ldr	r1, [pc, #264]	; (800d764 <HAL_TIM_ConfigClockSource+0x194>)
 800d65c:	428b      	cmp	r3, r1
 800d65e:	d002      	beq.n	800d666 <HAL_TIM_ConfigClockSource+0x96>
 800d660:	3110      	adds	r1, #16
 800d662:	428b      	cmp	r3, r1
 800d664:	d1e9      	bne.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800d666:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d668:	493c      	ldr	r1, [pc, #240]	; (800d75c <HAL_TIM_ConfigClockSource+0x18c>)
 800d66a:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800d66c:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d66e:	4319      	orrs	r1, r3
 800d670:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 800d674:	60a1      	str	r1, [r4, #8]
}
 800d676:	e7e0      	b.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d678:	2b40      	cmp	r3, #64	; 0x40
 800d67a:	d123      	bne.n	800d6c4 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800d67c:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800d67e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800d680:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d682:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d686:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 800d688:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d68a:	4b34      	ldr	r3, [pc, #208]	; (800d75c <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d68c:	f021 0101 	bic.w	r1, r1, #1
 800d690:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d692:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d694:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d698:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d69c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d69e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d6a0:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d6a2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6a4:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d6a6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800d6aa:	60a3      	str	r3, [r4, #8]
}
 800d6ac:	e7c5      	b.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d6ae:	f023 0110 	bic.w	r1, r3, #16
 800d6b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d6b6:	d1c0      	bne.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
 800d6b8:	e7d5      	b.n	800d666 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800d6ba:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800d6be:	bf18      	it	ne
 800d6c0:	2001      	movne	r0, #1
 800d6c2:	e7ba      	b.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d6c4:	d8b9      	bhi.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
 800d6c6:	2b20      	cmp	r3, #32
 800d6c8:	d0cd      	beq.n	800d666 <HAL_TIM_ConfigClockSource+0x96>
 800d6ca:	d903      	bls.n	800d6d4 <HAL_TIM_ConfigClockSource+0x104>
 800d6cc:	2b30      	cmp	r3, #48	; 0x30
 800d6ce:	d0ca      	beq.n	800d666 <HAL_TIM_ConfigClockSource+0x96>
 800d6d0:	2001      	movs	r0, #1
 800d6d2:	e7b2      	b.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
 800d6d4:	f033 0110 	bics.w	r1, r3, #16
 800d6d8:	d1af      	bne.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
 800d6da:	e7c4      	b.n	800d666 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800d6dc:	2002      	movs	r0, #2
}
 800d6de:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800d6e0:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800d6e2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800d6e4:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6e6:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6ea:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 800d6ec:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6ee:	4b1b      	ldr	r3, [pc, #108]	; (800d75c <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6f0:	f021 0101 	bic.w	r1, r1, #1
 800d6f4:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6f6:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d6f8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d6fc:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d700:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d702:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d704:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d706:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d708:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d70a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800d70e:	60a3      	str	r3, [r4, #8]
}
 800d710:	e793      	b.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d712:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d716:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d718:	432b      	orrs	r3, r5
 800d71a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d71c:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d720:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d722:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d726:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d728:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d72a:	68a3      	ldr	r3, [r4, #8]
 800d72c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d730:	60a3      	str	r3, [r4, #8]
      break;
 800d732:	e782      	b.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d734:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d738:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d73a:	432b      	orrs	r3, r5
 800d73c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d73e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d742:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d744:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d748:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d74a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800d74c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d74e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d752:	60a3      	str	r3, [r4, #8]
      break;
 800d754:	e771      	b.n	800d63a <HAL_TIM_ConfigClockSource+0x6a>
 800d756:	bf00      	nop
 800d758:	ffce0088 	.word	0xffce0088
 800d75c:	ffcfff8f 	.word	0xffcfff8f
 800d760:	00100020 	.word	0x00100020
 800d764:	00100030 	.word	0x00100030

0800d768 <HAL_TIM_OC_DelayElapsedCallback>:
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop

0800d76c <HAL_TIM_IC_CaptureCallback>:
 800d76c:	4770      	bx	lr
 800d76e:	bf00      	nop

0800d770 <HAL_TIM_PWM_PulseFinishedCallback>:
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop

0800d774 <HAL_TIM_TriggerCallback>:
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop

0800d778 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d778:	6803      	ldr	r3, [r0, #0]
 800d77a:	691a      	ldr	r2, [r3, #16]
 800d77c:	0791      	lsls	r1, r2, #30
{
 800d77e:	b510      	push	{r4, lr}
 800d780:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d782:	d502      	bpl.n	800d78a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d784:	68da      	ldr	r2, [r3, #12]
 800d786:	0792      	lsls	r2, r2, #30
 800d788:	d468      	bmi.n	800d85c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d78a:	691a      	ldr	r2, [r3, #16]
 800d78c:	0752      	lsls	r2, r2, #29
 800d78e:	d502      	bpl.n	800d796 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d790:	68da      	ldr	r2, [r3, #12]
 800d792:	0750      	lsls	r0, r2, #29
 800d794:	d44f      	bmi.n	800d836 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d796:	691a      	ldr	r2, [r3, #16]
 800d798:	0711      	lsls	r1, r2, #28
 800d79a:	d502      	bpl.n	800d7a2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d79c:	68da      	ldr	r2, [r3, #12]
 800d79e:	0712      	lsls	r2, r2, #28
 800d7a0:	d437      	bmi.n	800d812 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d7a2:	691a      	ldr	r2, [r3, #16]
 800d7a4:	06d0      	lsls	r0, r2, #27
 800d7a6:	d502      	bpl.n	800d7ae <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d7a8:	68da      	ldr	r2, [r3, #12]
 800d7aa:	06d1      	lsls	r1, r2, #27
 800d7ac:	d41e      	bmi.n	800d7ec <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d7ae:	691a      	ldr	r2, [r3, #16]
 800d7b0:	07d2      	lsls	r2, r2, #31
 800d7b2:	d502      	bpl.n	800d7ba <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d7b4:	68da      	ldr	r2, [r3, #12]
 800d7b6:	07d0      	lsls	r0, r2, #31
 800d7b8:	d469      	bmi.n	800d88e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d7ba:	691a      	ldr	r2, [r3, #16]
 800d7bc:	0611      	lsls	r1, r2, #24
 800d7be:	d502      	bpl.n	800d7c6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d7c0:	68da      	ldr	r2, [r3, #12]
 800d7c2:	0612      	lsls	r2, r2, #24
 800d7c4:	d46b      	bmi.n	800d89e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d7c6:	691a      	ldr	r2, [r3, #16]
 800d7c8:	05d0      	lsls	r0, r2, #23
 800d7ca:	d502      	bpl.n	800d7d2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d7cc:	68da      	ldr	r2, [r3, #12]
 800d7ce:	0611      	lsls	r1, r2, #24
 800d7d0:	d46d      	bmi.n	800d8ae <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d7d2:	691a      	ldr	r2, [r3, #16]
 800d7d4:	0652      	lsls	r2, r2, #25
 800d7d6:	d502      	bpl.n	800d7de <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d7d8:	68da      	ldr	r2, [r3, #12]
 800d7da:	0650      	lsls	r0, r2, #25
 800d7dc:	d46f      	bmi.n	800d8be <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d7de:	691a      	ldr	r2, [r3, #16]
 800d7e0:	0691      	lsls	r1, r2, #26
 800d7e2:	d502      	bpl.n	800d7ea <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d7e4:	68da      	ldr	r2, [r3, #12]
 800d7e6:	0692      	lsls	r2, r2, #26
 800d7e8:	d449      	bmi.n	800d87e <HAL_TIM_IRQHandler+0x106>
}
 800d7ea:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d7ec:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7f0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800d7f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d7f4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7f8:	69db      	ldr	r3, [r3, #28]
 800d7fa:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d7fe:	d16f      	bne.n	800d8e0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d800:	f7ff ffb2 	bl	800d768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d804:	4620      	mov	r0, r4
 800d806:	f7ff ffb3 	bl	800d770 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d80a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d80c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d80e:	7722      	strb	r2, [r4, #28]
 800d810:	e7cd      	b.n	800d7ae <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d812:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d816:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800d818:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d81a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d81c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d81e:	69db      	ldr	r3, [r3, #28]
 800d820:	079b      	lsls	r3, r3, #30
 800d822:	d15a      	bne.n	800d8da <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d824:	f7ff ffa0 	bl	800d768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d828:	4620      	mov	r0, r4
 800d82a:	f7ff ffa1 	bl	800d770 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d82e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d830:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d832:	7722      	strb	r2, [r4, #28]
 800d834:	e7b5      	b.n	800d7a2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d836:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d83a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800d83c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d83e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d840:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d848:	d144      	bne.n	800d8d4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d84a:	f7ff ff8d 	bl	800d768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d84e:	4620      	mov	r0, r4
 800d850:	f7ff ff8e 	bl	800d770 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d854:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d856:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d858:	7722      	strb	r2, [r4, #28]
 800d85a:	e79c      	b.n	800d796 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d85c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d860:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d862:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d864:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	0799      	lsls	r1, r3, #30
 800d86a:	d130      	bne.n	800d8ce <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d86c:	f7ff ff7c 	bl	800d768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d870:	4620      	mov	r0, r4
 800d872:	f7ff ff7d 	bl	800d770 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d876:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d878:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d87a:	7722      	strb	r2, [r4, #28]
 800d87c:	e785      	b.n	800d78a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d87e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d882:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d884:	611a      	str	r2, [r3, #16]
}
 800d886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d88a:	f000 b887 	b.w	800d99c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d88e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800d892:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d894:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d896:	f7f3 fe2f 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	e78d      	b.n	800d7ba <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d89e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800d8a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d8a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d8a6:	f000 f87b 	bl	800d9a0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	e78b      	b.n	800d7c6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d8ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800d8b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d8b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d8b6:	f000 f875 	bl	800d9a4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	e789      	b.n	800d7d2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d8be:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800d8c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d8c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d8c6:	f7ff ff55 	bl	800d774 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	e787      	b.n	800d7de <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800d8ce:	f7ff ff4d 	bl	800d76c <HAL_TIM_IC_CaptureCallback>
 800d8d2:	e7d0      	b.n	800d876 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800d8d4:	f7ff ff4a 	bl	800d76c <HAL_TIM_IC_CaptureCallback>
 800d8d8:	e7bc      	b.n	800d854 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800d8da:	f7ff ff47 	bl	800d76c <HAL_TIM_IC_CaptureCallback>
 800d8de:	e7a6      	b.n	800d82e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800d8e0:	f7ff ff44 	bl	800d76c <HAL_TIM_IC_CaptureCallback>
 800d8e4:	e791      	b.n	800d80a <HAL_TIM_IRQHandler+0x92>
 800d8e6:	bf00      	nop

0800d8e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d04b      	beq.n	800d988 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8f0:	6803      	ldr	r3, [r0, #0]
 800d8f2:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d8f4:	2002      	movs	r0, #2
{
 800d8f6:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d8f8:	4d24      	ldr	r5, [pc, #144]	; (800d98c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d8fa:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d8fe:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800d900:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800d902:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d904:	d029      	beq.n	800d95a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800d906:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d90a:	42ab      	cmp	r3, r5
 800d90c:	d025      	beq.n	800d95a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d90e:	4d20      	ldr	r5, [pc, #128]	; (800d990 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800d910:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d914:	42ab      	cmp	r3, r5
 800d916:	bf18      	it	ne
 800d918:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d91c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d920:	bf0c      	ite	eq
 800d922:	f04f 0c01 	moveq.w	ip, #1
 800d926:	f04f 0c00 	movne.w	ip, #0
 800d92a:	42ab      	cmp	r3, r5
 800d92c:	bf08      	it	eq
 800d92e:	f04c 0c01 	orreq.w	ip, ip, #1
 800d932:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d936:	42ab      	cmp	r3, r5
 800d938:	bf08      	it	eq
 800d93a:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d93e:	680d      	ldr	r5, [r1, #0]
 800d940:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d942:	4d14      	ldr	r5, [pc, #80]	; (800d994 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800d944:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d946:	42ab      	cmp	r3, r5
 800d948:	bf14      	ite	ne
 800d94a:	4660      	movne	r0, ip
 800d94c:	f04c 0001 	orreq.w	r0, ip, #1
 800d950:	b960      	cbnz	r0, 800d96c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800d952:	4811      	ldr	r0, [pc, #68]	; (800d998 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800d954:	4283      	cmp	r3, r0
 800d956:	d009      	beq.n	800d96c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800d958:	e00d      	b.n	800d976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d95a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d95c:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d960:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d962:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800d964:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d968:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800d96a:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d96c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d96e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d972:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d974:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800d976:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d978:	2101      	movs	r1, #1

  return HAL_OK;
 800d97a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d97c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d980:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800d984:	bc30      	pop	{r4, r5}
 800d986:	4770      	bx	lr
  __HAL_LOCK(htim);
 800d988:	2002      	movs	r0, #2
}
 800d98a:	4770      	bx	lr
 800d98c:	40010000 	.word	0x40010000
 800d990:	40000400 	.word	0x40000400
 800d994:	40001800 	.word	0x40001800
 800d998:	40014000 	.word	0x40014000

0800d99c <HAL_TIMEx_CommutCallback>:
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop

0800d9a0 <HAL_TIMEx_BreakCallback>:
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop

0800d9a4 <HAL_TIMEx_Break2Callback>:
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop

0800d9a8 <HAL_UART_TxCpltCallback>:
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop

0800d9ac <HAL_UART_ErrorCallback>:
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop

0800d9b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d9b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d9ba:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d9be:	f7ff fff5 	bl	800d9ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9c2:	bd08      	pop	{r3, pc}

0800d9c4 <HAL_UARTEx_RxEventCallback>:
}
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop

0800d9c8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d9c8:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d9ca:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d9ce:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d9d0:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 800d9d2:	ea12 0f0c 	tst.w	r2, ip
{
 800d9d6:	b570      	push	{r4, r5, r6, lr}
 800d9d8:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d9da:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800d9dc:	f000 8122 	beq.w	800dc24 <HAL_UART_IRQHandler+0x25c>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d9e0:	48b1      	ldr	r0, [pc, #708]	; (800dca8 <HAL_UART_IRQHandler+0x2e0>)
 800d9e2:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d9e6:	48b1      	ldr	r0, [pc, #708]	; (800dcac <HAL_UART_IRQHandler+0x2e4>)
 800d9e8:	4008      	ands	r0, r1
 800d9ea:	ea50 000c 	orrs.w	r0, r0, ip
 800d9ee:	f040 8089 	bne.w	800db04 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9f2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800d9f4:	2801      	cmp	r0, #1
 800d9f6:	d022      	beq.n	800da3e <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d9f8:	02d6      	lsls	r6, r2, #11
 800d9fa:	d502      	bpl.n	800da02 <HAL_UART_IRQHandler+0x3a>
 800d9fc:	0268      	lsls	r0, r5, #9
 800d9fe:	f100 813a 	bmi.w	800dc76 <HAL_UART_IRQHandler+0x2ae>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800da02:	0616      	lsls	r6, r2, #24
 800da04:	d506      	bpl.n	800da14 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800da06:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800da0a:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800da0e:	4328      	orrs	r0, r5
 800da10:	f040 8129 	bne.w	800dc66 <HAL_UART_IRQHandler+0x29e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800da14:	0650      	lsls	r0, r2, #25
 800da16:	d567      	bpl.n	800dae8 <HAL_UART_IRQHandler+0x120>
 800da18:	064e      	lsls	r6, r1, #25
 800da1a:	d565      	bpl.n	800dae8 <HAL_UART_IRQHandler+0x120>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da24:	e843 2100 	strex	r1, r2, [r3]
 800da28:	2900      	cmp	r1, #0
 800da2a:	d1f7      	bne.n	800da1c <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da2c:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da2e:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da30:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800da32:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->TxISR = NULL;
 800da36:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800da38:	f7ff ffb6 	bl	800d9a8 <HAL_UART_TxCpltCallback>
}
 800da3c:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da3e:	06d6      	lsls	r6, r2, #27
 800da40:	d5da      	bpl.n	800d9f8 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da42:	06c8      	lsls	r0, r1, #27
 800da44:	d5d8      	bpl.n	800d9f8 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da46:	2210      	movs	r2, #16
 800da48:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da4a:	689a      	ldr	r2, [r3, #8]
 800da4c:	0652      	lsls	r2, r2, #25
 800da4e:	f140 813c 	bpl.w	800dcca <HAL_UART_IRQHandler+0x302>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da52:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800da56:	6801      	ldr	r1, [r0, #0]
 800da58:	684a      	ldr	r2, [r1, #4]
 800da5a:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800da5c:	2a00      	cmp	r2, #0
 800da5e:	d0ed      	beq.n	800da3c <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800da60:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800da64:	4291      	cmp	r1, r2
 800da66:	d9e9      	bls.n	800da3c <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800da68:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800da6c:	69c2      	ldr	r2, [r0, #28]
 800da6e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800da72:	d02f      	beq.n	800dad4 <HAL_UART_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da74:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7c:	e843 2100 	strex	r1, r2, [r3]
 800da80:	2900      	cmp	r1, #0
 800da82:	d1f7      	bne.n	800da74 <HAL_UART_IRQHandler+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da84:	f103 0208 	add.w	r2, r3, #8
 800da88:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da8c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da90:	f103 0508 	add.w	r5, r3, #8
 800da94:	e845 2100 	strex	r1, r2, [r5]
 800da98:	2900      	cmp	r1, #0
 800da9a:	d1f3      	bne.n	800da84 <HAL_UART_IRQHandler+0xbc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9c:	f103 0208 	add.w	r2, r3, #8
 800daa0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800daa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa8:	f103 0508 	add.w	r5, r3, #8
 800daac:	e845 2100 	strex	r1, r2, [r5]
 800dab0:	2900      	cmp	r1, #0
 800dab2:	d1f3      	bne.n	800da9c <HAL_UART_IRQHandler+0xd4>
          huart->RxState = HAL_UART_STATE_READY;
 800dab4:	2220      	movs	r2, #32
 800dab6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daba:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dabc:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dac0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac4:	e843 2100 	strex	r1, r2, [r3]
 800dac8:	2900      	cmp	r1, #0
 800daca:	d1f7      	bne.n	800dabc <HAL_UART_IRQHandler+0xf4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dacc:	f7fb fa1e 	bl	8008f0c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dad0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dad4:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dad6:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dad8:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dada:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800dade:	1ac9      	subs	r1, r1, r3
 800dae0:	b289      	uxth	r1, r1
 800dae2:	f7ff ff6f 	bl	800d9c4 <HAL_UARTEx_RxEventCallback>
}
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dae8:	0215      	lsls	r5, r2, #8
 800daea:	d502      	bpl.n	800daf2 <HAL_UART_IRQHandler+0x12a>
 800daec:	0048      	lsls	r0, r1, #1
 800daee:	f100 80e7 	bmi.w	800dcc0 <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800daf2:	01d3      	lsls	r3, r2, #7
 800daf4:	d5a2      	bpl.n	800da3c <HAL_UART_IRQHandler+0x74>
 800daf6:	2900      	cmp	r1, #0
 800daf8:	daa0      	bge.n	800da3c <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dafa:	4620      	mov	r0, r4
}
 800dafc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800db00:	f000 bd78 	b.w	800e5f4 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800db04:	07d0      	lsls	r0, r2, #31
 800db06:	d509      	bpl.n	800db1c <HAL_UART_IRQHandler+0x154>
 800db08:	05ce      	lsls	r6, r1, #23
 800db0a:	d507      	bpl.n	800db1c <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db0c:	2001      	movs	r0, #1
 800db0e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db10:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800db14:	f040 0001 	orr.w	r0, r0, #1
 800db18:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db1c:	0790      	lsls	r0, r2, #30
 800db1e:	f140 8093 	bpl.w	800dc48 <HAL_UART_IRQHandler+0x280>
 800db22:	07ee      	lsls	r6, r5, #31
 800db24:	d50a      	bpl.n	800db3c <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800db26:	2002      	movs	r0, #2
 800db28:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db2a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800db2e:	f040 0004 	orr.w	r0, r0, #4
 800db32:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db36:	0750      	lsls	r0, r2, #29
 800db38:	f100 808c 	bmi.w	800dc54 <HAL_UART_IRQHandler+0x28c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800db3c:	0716      	lsls	r6, r2, #28
 800db3e:	d50c      	bpl.n	800db5a <HAL_UART_IRQHandler+0x192>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800db40:	f001 0020 	and.w	r0, r1, #32
 800db44:	ea50 000c 	orrs.w	r0, r0, ip
 800db48:	d007      	beq.n	800db5a <HAL_UART_IRQHandler+0x192>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db4a:	2008      	movs	r0, #8
 800db4c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db4e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800db52:	f040 0008 	orr.w	r0, r0, #8
 800db56:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800db5a:	0510      	lsls	r0, r2, #20
 800db5c:	d50a      	bpl.n	800db74 <HAL_UART_IRQHandler+0x1ac>
 800db5e:	014e      	lsls	r6, r1, #5
 800db60:	d508      	bpl.n	800db74 <HAL_UART_IRQHandler+0x1ac>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800db66:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800db68:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800db6c:	f040 0020 	orr.w	r0, r0, #32
 800db70:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db74:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800db78:	2800      	cmp	r0, #0
 800db7a:	f43f af5f 	beq.w	800da3c <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800db7e:	0690      	lsls	r0, r2, #26
 800db80:	d50a      	bpl.n	800db98 <HAL_UART_IRQHandler+0x1d0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800db82:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800db86:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 800db8a:	4329      	orrs	r1, r5
 800db8c:	d004      	beq.n	800db98 <HAL_UART_IRQHandler+0x1d0>
        if (huart->RxISR != NULL)
 800db8e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800db90:	b112      	cbz	r2, 800db98 <HAL_UART_IRQHandler+0x1d0>
          huart->RxISR(huart);
 800db92:	4620      	mov	r0, r4
 800db94:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db96:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800db98:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db9c:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800db9e:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dba2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800dba6:	ea52 0501 	orrs.w	r5, r2, r1
 800dbaa:	f000 80c4 	beq.w	800dd36 <HAL_UART_IRQHandler+0x36e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbae:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb6:	e843 2100 	strex	r1, r2, [r3]
 800dbba:	2900      	cmp	r1, #0
 800dbbc:	d1f7      	bne.n	800dbae <HAL_UART_IRQHandler+0x1e6>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbbe:	483c      	ldr	r0, [pc, #240]	; (800dcb0 <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc0:	f103 0208 	add.w	r2, r3, #8
 800dbc4:	e852 2f00 	ldrex	r2, [r2]
 800dbc8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbca:	f103 0508 	add.w	r5, r3, #8
 800dbce:	e845 2100 	strex	r1, r2, [r5]
 800dbd2:	2900      	cmp	r1, #0
 800dbd4:	d1f4      	bne.n	800dbc0 <HAL_UART_IRQHandler+0x1f8>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbd6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800dbd8:	2a01      	cmp	r2, #1
 800dbda:	d054      	beq.n	800dc86 <HAL_UART_IRQHandler+0x2be>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbdc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800dbde:	2120      	movs	r1, #32
 800dbe0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbe4:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbe6:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800dbe8:	6762      	str	r2, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbea:	064a      	lsls	r2, r1, #25
 800dbec:	d564      	bpl.n	800dcb8 <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbee:	f103 0208 	add.w	r2, r3, #8
 800dbf2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfa:	f103 0008 	add.w	r0, r3, #8
 800dbfe:	e840 2100 	strex	r1, r2, [r0]
 800dc02:	2900      	cmp	r1, #0
 800dc04:	d1f3      	bne.n	800dbee <HAL_UART_IRQHandler+0x226>
          if (huart->hdmarx != NULL)
 800dc06:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d054      	beq.n	800dcb8 <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc0e:	4b29      	ldr	r3, [pc, #164]	; (800dcb4 <HAL_UART_IRQHandler+0x2ec>)
 800dc10:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dc12:	f7fb faf3 	bl	80091fc <HAL_DMA_Abort_IT>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	f43f af10 	beq.w	800da3c <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc1c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dc20:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dc22:	e00e      	b.n	800dc42 <HAL_UART_IRQHandler+0x27a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dc24:	0696      	lsls	r6, r2, #26
 800dc26:	f57f aee4 	bpl.w	800d9f2 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dc2a:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc2e:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 800dc32:	ea5c 0c0e 	orrs.w	ip, ip, lr
 800dc36:	f43f aedc 	beq.w	800d9f2 <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800dc3a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f43f aefd 	beq.w	800da3c <HAL_UART_IRQHandler+0x74>
}
 800dc42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc46:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc48:	0756      	lsls	r6, r2, #29
 800dc4a:	f57f af77 	bpl.w	800db3c <HAL_UART_IRQHandler+0x174>
 800dc4e:	07e8      	lsls	r0, r5, #31
 800dc50:	f57f af74 	bpl.w	800db3c <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dc54:	2004      	movs	r0, #4
 800dc56:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc58:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dc5c:	f040 0002 	orr.w	r0, r0, #2
 800dc60:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
 800dc64:	e76a      	b.n	800db3c <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
 800dc66:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f43f aee7 	beq.w	800da3c <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800dc6e:	4620      	mov	r0, r4
}
 800dc70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800dc74:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dc76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800dc7a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dc7c:	621a      	str	r2, [r3, #32]
}
 800dc7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800dc82:	f000 bcb5 	b.w	800e5f0 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc86:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc8a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8e:	e843 2100 	strex	r1, r2, [r3]
 800dc92:	2900      	cmp	r1, #0
 800dc94:	d0a2      	beq.n	800dbdc <HAL_UART_IRQHandler+0x214>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc96:	e853 2f00 	ldrex	r2, [r3]
 800dc9a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc9e:	e843 2100 	strex	r1, r2, [r3]
 800dca2:	2900      	cmp	r1, #0
 800dca4:	d1ef      	bne.n	800dc86 <HAL_UART_IRQHandler+0x2be>
 800dca6:	e799      	b.n	800dbdc <HAL_UART_IRQHandler+0x214>
 800dca8:	10000001 	.word	0x10000001
 800dcac:	04000120 	.word	0x04000120
 800dcb0:	effffffe 	.word	0xeffffffe
 800dcb4:	0800d9b1 	.word	0x0800d9b1
            HAL_UART_ErrorCallback(huart);
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f7ff fe77 	bl	800d9ac <HAL_UART_ErrorCallback>
}
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dcc0:	4620      	mov	r0, r4
}
 800dcc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dcc6:	f000 bc97 	b.w	800e5f8 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dcca:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800dcce:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800dcd2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dcd6:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800dcd8:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dcda:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800dcdc:	2a00      	cmp	r2, #0
 800dcde:	f43f aead 	beq.w	800da3c <HAL_UART_IRQHandler+0x74>
 800dce2:	2900      	cmp	r1, #0
 800dce4:	f43f aeaa 	beq.w	800da3c <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf0:	e843 2000 	strex	r0, r2, [r3]
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d1f7      	bne.n	800dce8 <HAL_UART_IRQHandler+0x320>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcf8:	4d12      	ldr	r5, [pc, #72]	; (800dd44 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfa:	f103 0208 	add.w	r2, r3, #8
 800dcfe:	e852 2f00 	ldrex	r2, [r2]
 800dd02:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd04:	f103 0c08 	add.w	ip, r3, #8
 800dd08:	e84c 2000 	strex	r0, r2, [ip]
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d1f4      	bne.n	800dcfa <HAL_UART_IRQHandler+0x332>
        huart->RxState = HAL_UART_STATE_READY;
 800dd10:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800dd12:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800dd14:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd18:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd1a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd1e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd22:	e843 2000 	strex	r0, r2, [r3]
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d1f7      	bne.n	800dd1a <HAL_UART_IRQHandler+0x352>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd2a:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd2c:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd2e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd30:	f7ff fe48 	bl	800d9c4 <HAL_UARTEx_RxEventCallback>
}
 800dd34:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800dd36:	4620      	mov	r0, r4
 800dd38:	f7ff fe38 	bl	800d9ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd3c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 800dd40:	bd70      	pop	{r4, r5, r6, pc}
 800dd42:	bf00      	nop
 800dd44:	effffffe 	.word	0xeffffffe

0800dd48 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd48:	6901      	ldr	r1, [r0, #16]
 800dd4a:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd4c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd4e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd50:	49c0      	ldr	r1, [pc, #768]	; (800e054 <UART_SetConfig+0x30c>)
{
 800dd52:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd54:	6945      	ldr	r5, [r0, #20]
{
 800dd56:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd58:	69c0      	ldr	r0, [r0, #28]
{
 800dd5a:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd5c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd5e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd60:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd62:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd64:	4dbc      	ldr	r5, [pc, #752]	; (800e058 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd66:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd68:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd6a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800dd74:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd78:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd7a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd7c:	f000 80e0 	beq.w	800df40 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800dd80:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd82:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800dd84:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd86:	4ab5      	ldr	r2, [pc, #724]	; (800e05c <UART_SetConfig+0x314>)
 800dd88:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd8c:	4311      	orrs	r1, r2
 800dd8e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd92:	f022 020f 	bic.w	r2, r2, #15
 800dd96:	432a      	orrs	r2, r5
 800dd98:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd9a:	4ab1      	ldr	r2, [pc, #708]	; (800e060 <UART_SetConfig+0x318>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d023      	beq.n	800dde8 <UART_SetConfig+0xa0>
 800dda0:	4ab0      	ldr	r2, [pc, #704]	; (800e064 <UART_SetConfig+0x31c>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d076      	beq.n	800de94 <UART_SetConfig+0x14c>
 800dda6:	4ab0      	ldr	r2, [pc, #704]	; (800e068 <UART_SetConfig+0x320>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	f000 818f 	beq.w	800e0cc <UART_SetConfig+0x384>
 800ddae:	4aaf      	ldr	r2, [pc, #700]	; (800e06c <UART_SetConfig+0x324>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	f000 81e1 	beq.w	800e178 <UART_SetConfig+0x430>
 800ddb6:	4aae      	ldr	r2, [pc, #696]	; (800e070 <UART_SetConfig+0x328>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	f000 8121 	beq.w	800e000 <UART_SetConfig+0x2b8>
 800ddbe:	4aad      	ldr	r2, [pc, #692]	; (800e074 <UART_SetConfig+0x32c>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	f000 81e3 	beq.w	800e18c <UART_SetConfig+0x444>
 800ddc6:	4aac      	ldr	r2, [pc, #688]	; (800e078 <UART_SetConfig+0x330>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	f000 8234 	beq.w	800e236 <UART_SetConfig+0x4ee>
 800ddce:	4aab      	ldr	r2, [pc, #684]	; (800e07c <UART_SetConfig+0x334>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	f000 81e7 	beq.w	800e1a4 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800ddd6:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800ddd8:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800ddda:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800ddde:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800dde0:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800dde2:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800dde4:	b007      	add	sp, #28
 800dde6:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dde8:	4ba5      	ldr	r3, [pc, #660]	; (800e080 <UART_SetConfig+0x338>)
 800ddea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ddf0:	2b28      	cmp	r3, #40	; 0x28
 800ddf2:	d8f0      	bhi.n	800ddd6 <UART_SetConfig+0x8e>
 800ddf4:	4aa3      	ldr	r2, [pc, #652]	; (800e084 <UART_SetConfig+0x33c>)
 800ddf6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ddf8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ddfc:	d055      	beq.n	800deaa <UART_SetConfig+0x162>
    switch (clocksource)
 800ddfe:	2b20      	cmp	r3, #32
 800de00:	f200 814a 	bhi.w	800e098 <UART_SetConfig+0x350>
 800de04:	2b20      	cmp	r3, #32
 800de06:	d8e6      	bhi.n	800ddd6 <UART_SetConfig+0x8e>
 800de08:	a201      	add	r2, pc, #4	; (adr r2, 800de10 <UART_SetConfig+0xc8>)
 800de0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0e:	bf00      	nop
 800de10:	0800e04f 	.word	0x0800e04f
 800de14:	0800e049 	.word	0x0800e049
 800de18:	0800ddd7 	.word	0x0800ddd7
 800de1c:	0800ddd7 	.word	0x0800ddd7
 800de20:	0800e039 	.word	0x0800e039
 800de24:	0800ddd7 	.word	0x0800ddd7
 800de28:	0800ddd7 	.word	0x0800ddd7
 800de2c:	0800ddd7 	.word	0x0800ddd7
 800de30:	0800e02b 	.word	0x0800e02b
 800de34:	0800ddd7 	.word	0x0800ddd7
 800de38:	0800ddd7 	.word	0x0800ddd7
 800de3c:	0800ddd7 	.word	0x0800ddd7
 800de40:	0800ddd7 	.word	0x0800ddd7
 800de44:	0800ddd7 	.word	0x0800ddd7
 800de48:	0800ddd7 	.word	0x0800ddd7
 800de4c:	0800ddd7 	.word	0x0800ddd7
 800de50:	0800e015 	.word	0x0800e015
 800de54:	0800ddd7 	.word	0x0800ddd7
 800de58:	0800ddd7 	.word	0x0800ddd7
 800de5c:	0800ddd7 	.word	0x0800ddd7
 800de60:	0800ddd7 	.word	0x0800ddd7
 800de64:	0800ddd7 	.word	0x0800ddd7
 800de68:	0800ddd7 	.word	0x0800ddd7
 800de6c:	0800ddd7 	.word	0x0800ddd7
 800de70:	0800ddd7 	.word	0x0800ddd7
 800de74:	0800ddd7 	.word	0x0800ddd7
 800de78:	0800ddd7 	.word	0x0800ddd7
 800de7c:	0800ddd7 	.word	0x0800ddd7
 800de80:	0800ddd7 	.word	0x0800ddd7
 800de84:	0800ddd7 	.word	0x0800ddd7
 800de88:	0800ddd7 	.word	0x0800ddd7
 800de8c:	0800ddd7 	.word	0x0800ddd7
 800de90:	0800e1b9 	.word	0x0800e1b9
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de94:	4b7a      	ldr	r3, [pc, #488]	; (800e080 <UART_SetConfig+0x338>)
 800de96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de98:	f003 0307 	and.w	r3, r3, #7
 800de9c:	2b05      	cmp	r3, #5
 800de9e:	d89a      	bhi.n	800ddd6 <UART_SetConfig+0x8e>
 800dea0:	4a79      	ldr	r2, [pc, #484]	; (800e088 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dea2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800dea6:	5cd3      	ldrb	r3, [r2, r3]
 800dea8:	d1a9      	bne.n	800ddfe <UART_SetConfig+0xb6>
    switch (clocksource)
 800deaa:	2b20      	cmp	r3, #32
 800deac:	f200 8145 	bhi.w	800e13a <UART_SetConfig+0x3f2>
 800deb0:	2b20      	cmp	r3, #32
 800deb2:	d890      	bhi.n	800ddd6 <UART_SetConfig+0x8e>
 800deb4:	a201      	add	r2, pc, #4	; (adr r2, 800debc <UART_SetConfig+0x174>)
 800deb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deba:	bf00      	nop
 800debc:	0800e223 	.word	0x0800e223
 800dec0:	0800e21d 	.word	0x0800e21d
 800dec4:	0800ddd7 	.word	0x0800ddd7
 800dec8:	0800ddd7 	.word	0x0800ddd7
 800decc:	0800e229 	.word	0x0800e229
 800ded0:	0800ddd7 	.word	0x0800ddd7
 800ded4:	0800ddd7 	.word	0x0800ddd7
 800ded8:	0800ddd7 	.word	0x0800ddd7
 800dedc:	0800e20b 	.word	0x0800e20b
 800dee0:	0800ddd7 	.word	0x0800ddd7
 800dee4:	0800ddd7 	.word	0x0800ddd7
 800dee8:	0800ddd7 	.word	0x0800ddd7
 800deec:	0800ddd7 	.word	0x0800ddd7
 800def0:	0800ddd7 	.word	0x0800ddd7
 800def4:	0800ddd7 	.word	0x0800ddd7
 800def8:	0800ddd7 	.word	0x0800ddd7
 800defc:	0800e1f7 	.word	0x0800e1f7
 800df00:	0800ddd7 	.word	0x0800ddd7
 800df04:	0800ddd7 	.word	0x0800ddd7
 800df08:	0800ddd7 	.word	0x0800ddd7
 800df0c:	0800ddd7 	.word	0x0800ddd7
 800df10:	0800ddd7 	.word	0x0800ddd7
 800df14:	0800ddd7 	.word	0x0800ddd7
 800df18:	0800ddd7 	.word	0x0800ddd7
 800df1c:	0800ddd7 	.word	0x0800ddd7
 800df20:	0800ddd7 	.word	0x0800ddd7
 800df24:	0800ddd7 	.word	0x0800ddd7
 800df28:	0800ddd7 	.word	0x0800ddd7
 800df2c:	0800ddd7 	.word	0x0800ddd7
 800df30:	0800ddd7 	.word	0x0800ddd7
 800df34:	0800ddd7 	.word	0x0800ddd7
 800df38:	0800ddd7 	.word	0x0800ddd7
 800df3c:	0800e233 	.word	0x0800e233
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df40:	6898      	ldr	r0, [r3, #8]
 800df42:	4a46      	ldr	r2, [pc, #280]	; (800e05c <UART_SetConfig+0x314>)
 800df44:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df46:	484e      	ldr	r0, [pc, #312]	; (800e080 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df48:	430a      	orrs	r2, r1
 800df4a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df50:	f022 020f 	bic.w	r2, r2, #15
 800df54:	430a      	orrs	r2, r1
 800df56:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df58:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800df5a:	f003 0307 	and.w	r3, r3, #7
 800df5e:	2b05      	cmp	r3, #5
 800df60:	f63f af39 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800df64:	4a49      	ldr	r2, [pc, #292]	; (800e08c <UART_SetConfig+0x344>)
 800df66:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800df68:	2b20      	cmp	r3, #32
 800df6a:	f200 80b9 	bhi.w	800e0e0 <UART_SetConfig+0x398>
 800df6e:	2b01      	cmp	r3, #1
 800df70:	f67f af31 	bls.w	800ddd6 <UART_SetConfig+0x8e>
 800df74:	3b02      	subs	r3, #2
 800df76:	2b1e      	cmp	r3, #30
 800df78:	f63f af2d 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800df7c:	a201      	add	r2, pc, #4	; (adr r2, 800df84 <UART_SetConfig+0x23c>)
 800df7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df82:	bf00      	nop
 800df84:	0800e1ed 	.word	0x0800e1ed
 800df88:	0800ddd7 	.word	0x0800ddd7
 800df8c:	0800e1e3 	.word	0x0800e1e3
 800df90:	0800ddd7 	.word	0x0800ddd7
 800df94:	0800ddd7 	.word	0x0800ddd7
 800df98:	0800ddd7 	.word	0x0800ddd7
 800df9c:	0800e1d1 	.word	0x0800e1d1
 800dfa0:	0800ddd7 	.word	0x0800ddd7
 800dfa4:	0800ddd7 	.word	0x0800ddd7
 800dfa8:	0800ddd7 	.word	0x0800ddd7
 800dfac:	0800ddd7 	.word	0x0800ddd7
 800dfb0:	0800ddd7 	.word	0x0800ddd7
 800dfb4:	0800ddd7 	.word	0x0800ddd7
 800dfb8:	0800ddd7 	.word	0x0800ddd7
 800dfbc:	0800e1bd 	.word	0x0800e1bd
 800dfc0:	0800ddd7 	.word	0x0800ddd7
 800dfc4:	0800ddd7 	.word	0x0800ddd7
 800dfc8:	0800ddd7 	.word	0x0800ddd7
 800dfcc:	0800ddd7 	.word	0x0800ddd7
 800dfd0:	0800ddd7 	.word	0x0800ddd7
 800dfd4:	0800ddd7 	.word	0x0800ddd7
 800dfd8:	0800ddd7 	.word	0x0800ddd7
 800dfdc:	0800ddd7 	.word	0x0800ddd7
 800dfe0:	0800ddd7 	.word	0x0800ddd7
 800dfe4:	0800ddd7 	.word	0x0800ddd7
 800dfe8:	0800ddd7 	.word	0x0800ddd7
 800dfec:	0800ddd7 	.word	0x0800ddd7
 800dff0:	0800ddd7 	.word	0x0800ddd7
 800dff4:	0800ddd7 	.word	0x0800ddd7
 800dff8:	0800ddd7 	.word	0x0800ddd7
 800dffc:	0800e1f3 	.word	0x0800e1f3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e000:	4b1f      	ldr	r3, [pc, #124]	; (800e080 <UART_SetConfig+0x338>)
 800e002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e004:	f003 0307 	and.w	r3, r3, #7
 800e008:	2b05      	cmp	r3, #5
 800e00a:	f63f aee4 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800e00e:	4a20      	ldr	r2, [pc, #128]	; (800e090 <UART_SetConfig+0x348>)
 800e010:	5cd3      	ldrb	r3, [r2, r3]
 800e012:	e6f1      	b.n	800ddf8 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e014:	4b1a      	ldr	r3, [pc, #104]	; (800e080 <UART_SetConfig+0x338>)
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	0692      	lsls	r2, r2, #26
 800e01a:	f140 80c1 	bpl.w	800e1a0 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	481c      	ldr	r0, [pc, #112]	; (800e094 <UART_SetConfig+0x34c>)
 800e022:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e026:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e028:	e03b      	b.n	800e0a2 <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e02a:	a803      	add	r0, sp, #12
 800e02c:	f7fe fcfc 	bl	800ca28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e030:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e032:	b938      	cbnz	r0, 800e044 <UART_SetConfig+0x2fc>
        ret = HAL_ERROR;
 800e034:	2000      	movs	r0, #0
 800e036:	e6cf      	b.n	800ddd8 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e038:	4668      	mov	r0, sp
 800e03a:	f7fe fc47 	bl	800c8cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e03e:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800e040:	2800      	cmp	r0, #0
 800e042:	d0f7      	beq.n	800e034 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e044:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e046:	e02c      	b.n	800e0a2 <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e048:	f7fd fcf2 	bl	800ba30 <HAL_RCC_GetPCLK2Freq>
        break;
 800e04c:	e7f1      	b.n	800e032 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e04e:	f7fd fca7 	bl	800b9a0 <HAL_RCC_GetPCLK1Freq>
        break;
 800e052:	e7ee      	b.n	800e032 <UART_SetConfig+0x2ea>
 800e054:	cfff69f3 	.word	0xcfff69f3
 800e058:	58000c00 	.word	0x58000c00
 800e05c:	11fff4ff 	.word	0x11fff4ff
 800e060:	40011000 	.word	0x40011000
 800e064:	40004400 	.word	0x40004400
 800e068:	40004800 	.word	0x40004800
 800e06c:	40004c00 	.word	0x40004c00
 800e070:	40005000 	.word	0x40005000
 800e074:	40011400 	.word	0x40011400
 800e078:	40007800 	.word	0x40007800
 800e07c:	40007c00 	.word	0x40007c00
 800e080:	58024400 	.word	0x58024400
 800e084:	0801db2c 	.word	0x0801db2c
 800e088:	0801db58 	.word	0x0801db58
 800e08c:	0801db60 	.word	0x0801db60
 800e090:	0801db58 	.word	0x0801db58
 800e094:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800e098:	2b40      	cmp	r3, #64	; 0x40
 800e09a:	f47f ae9c 	bne.w	800ddd6 <UART_SetConfig+0x8e>
 800e09e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0a2:	4b6c      	ldr	r3, [pc, #432]	; (800e254 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0a4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0a8:	6862      	ldr	r2, [r4, #4]
 800e0aa:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e0ae:	fbb0 f3f3 	udiv	r3, r0, r3
 800e0b2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e0b6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0ba:	f1a3 0210 	sub.w	r2, r3, #16
 800e0be:	428a      	cmp	r2, r1
 800e0c0:	f63f ae89 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e0c4:	6822      	ldr	r2, [r4, #0]
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	60d3      	str	r3, [r2, #12]
 800e0ca:	e685      	b.n	800ddd8 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0cc:	4b62      	ldr	r3, [pc, #392]	; (800e258 <UART_SetConfig+0x510>)
 800e0ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0d0:	f003 0307 	and.w	r3, r3, #7
 800e0d4:	2b05      	cmp	r3, #5
 800e0d6:	f63f ae7e 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800e0da:	4a60      	ldr	r2, [pc, #384]	; (800e25c <UART_SetConfig+0x514>)
 800e0dc:	5cd3      	ldrb	r3, [r2, r3]
 800e0de:	e68b      	b.n	800ddf8 <UART_SetConfig+0xb0>
    switch (clocksource)
 800e0e0:	2b40      	cmp	r3, #64	; 0x40
 800e0e2:	f47f ae78 	bne.w	800ddd6 <UART_SetConfig+0x8e>
 800e0e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0ea:	4b5a      	ldr	r3, [pc, #360]	; (800e254 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0ec:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0ee:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0f2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0f6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0fa:	4299      	cmp	r1, r3
 800e0fc:	f63f ae6b 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800e100:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800e104:	f63f ae67 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e108:	2300      	movs	r3, #0
 800e10a:	4619      	mov	r1, r3
 800e10c:	f7f2 f9a0 	bl	8000450 <__aeabi_uldivmod>
 800e110:	462a      	mov	r2, r5
 800e112:	0209      	lsls	r1, r1, #8
 800e114:	0203      	lsls	r3, r0, #8
 800e116:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800e11a:	0868      	lsrs	r0, r5, #1
 800e11c:	1818      	adds	r0, r3, r0
 800e11e:	f04f 0300 	mov.w	r3, #0
 800e122:	f141 0100 	adc.w	r1, r1, #0
 800e126:	f7f2 f993 	bl	8000450 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e12a:	4a4d      	ldr	r2, [pc, #308]	; (800e260 <UART_SetConfig+0x518>)
 800e12c:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e130:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e132:	4291      	cmp	r1, r2
 800e134:	f63f ae4f 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800e138:	e7c4      	b.n	800e0c4 <UART_SetConfig+0x37c>
    switch (clocksource)
 800e13a:	2b40      	cmp	r3, #64	; 0x40
 800e13c:	f47f ae4b 	bne.w	800ddd6 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e140:	4b44      	ldr	r3, [pc, #272]	; (800e254 <UART_SetConfig+0x50c>)
 800e142:	6862      	ldr	r2, [r4, #4]
 800e144:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800e148:	0853      	lsrs	r3, r2, #1
 800e14a:	fbb0 f0f1 	udiv	r0, r0, r1
 800e14e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e152:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e156:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e15a:	f1a3 0210 	sub.w	r2, r3, #16
 800e15e:	428a      	cmp	r2, r1
 800e160:	f63f ae39 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e164:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e168:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800e16c:	6821      	ldr	r1, [r4, #0]
 800e16e:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e170:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800e172:	4313      	orrs	r3, r2
 800e174:	60cb      	str	r3, [r1, #12]
 800e176:	e62f      	b.n	800ddd8 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e178:	4b37      	ldr	r3, [pc, #220]	; (800e258 <UART_SetConfig+0x510>)
 800e17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e17c:	f003 0307 	and.w	r3, r3, #7
 800e180:	2b05      	cmp	r3, #5
 800e182:	f63f ae28 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800e186:	4a37      	ldr	r2, [pc, #220]	; (800e264 <UART_SetConfig+0x51c>)
 800e188:	5cd3      	ldrb	r3, [r2, r3]
 800e18a:	e635      	b.n	800ddf8 <UART_SetConfig+0xb0>
 800e18c:	4b32      	ldr	r3, [pc, #200]	; (800e258 <UART_SetConfig+0x510>)
 800e18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e194:	2b28      	cmp	r3, #40	; 0x28
 800e196:	f63f ae1e 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800e19a:	4a33      	ldr	r2, [pc, #204]	; (800e268 <UART_SetConfig+0x520>)
 800e19c:	5cd3      	ldrb	r3, [r2, r3]
 800e19e:	e62b      	b.n	800ddf8 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800e1a0:	4832      	ldr	r0, [pc, #200]	; (800e26c <UART_SetConfig+0x524>)
 800e1a2:	e77e      	b.n	800e0a2 <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e1a4:	4b2c      	ldr	r3, [pc, #176]	; (800e258 <UART_SetConfig+0x510>)
 800e1a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1a8:	f003 0307 	and.w	r3, r3, #7
 800e1ac:	2b05      	cmp	r3, #5
 800e1ae:	f63f ae12 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800e1b2:	4a2f      	ldr	r2, [pc, #188]	; (800e270 <UART_SetConfig+0x528>)
 800e1b4:	5cd3      	ldrb	r3, [r2, r3]
 800e1b6:	e61f      	b.n	800ddf8 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800e1b8:	482e      	ldr	r0, [pc, #184]	; (800e274 <UART_SetConfig+0x52c>)
 800e1ba:	e772      	b.n	800e0a2 <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1bc:	4b26      	ldr	r3, [pc, #152]	; (800e258 <UART_SetConfig+0x510>)
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	0690      	lsls	r0, r2, #26
 800e1c2:	d542      	bpl.n	800e24a <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4829      	ldr	r0, [pc, #164]	; (800e26c <UART_SetConfig+0x524>)
 800e1c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e1cc:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e1ce:	e78c      	b.n	800e0ea <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1d0:	a803      	add	r0, sp, #12
 800e1d2:	f7fe fc29 	bl	800ca28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1d6:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	f43f af2b 	beq.w	800e034 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e1de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e1e0:	e783      	b.n	800e0ea <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1e2:	4668      	mov	r0, sp
 800e1e4:	f7fe fb72 	bl	800c8cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1e8:	9801      	ldr	r0, [sp, #4]
        break;
 800e1ea:	e7f5      	b.n	800e1d8 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e1ec:	f7fe fb5c 	bl	800c8a8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800e1f0:	e7f2      	b.n	800e1d8 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800e1f2:	4820      	ldr	r0, [pc, #128]	; (800e274 <UART_SetConfig+0x52c>)
 800e1f4:	e779      	b.n	800e0ea <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1f6:	4b18      	ldr	r3, [pc, #96]	; (800e258 <UART_SetConfig+0x510>)
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	0691      	lsls	r1, r2, #26
 800e1fc:	d527      	bpl.n	800e24e <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	481a      	ldr	r0, [pc, #104]	; (800e26c <UART_SetConfig+0x524>)
 800e202:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e206:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e208:	e79a      	b.n	800e140 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e20a:	a803      	add	r0, sp, #12
 800e20c:	f7fe fc0c 	bl	800ca28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e210:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e212:	2800      	cmp	r0, #0
 800e214:	f43f af0e 	beq.w	800e034 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e218:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e21a:	e791      	b.n	800e140 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e21c:	f7fd fc08 	bl	800ba30 <HAL_RCC_GetPCLK2Freq>
        break;
 800e220:	e7f7      	b.n	800e212 <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e222:	f7fd fbbd 	bl	800b9a0 <HAL_RCC_GetPCLK1Freq>
        break;
 800e226:	e7f4      	b.n	800e212 <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e228:	4668      	mov	r0, sp
 800e22a:	f7fe fb4f 	bl	800c8cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e22e:	9801      	ldr	r0, [sp, #4]
        break;
 800e230:	e7ef      	b.n	800e212 <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800e232:	4810      	ldr	r0, [pc, #64]	; (800e274 <UART_SetConfig+0x52c>)
 800e234:	e784      	b.n	800e140 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e236:	4b08      	ldr	r3, [pc, #32]	; (800e258 <UART_SetConfig+0x510>)
 800e238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e23a:	f003 0307 	and.w	r3, r3, #7
 800e23e:	2b05      	cmp	r3, #5
 800e240:	f63f adc9 	bhi.w	800ddd6 <UART_SetConfig+0x8e>
 800e244:	4a0c      	ldr	r2, [pc, #48]	; (800e278 <UART_SetConfig+0x530>)
 800e246:	5cd3      	ldrb	r3, [r2, r3]
 800e248:	e5d6      	b.n	800ddf8 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800e24a:	4808      	ldr	r0, [pc, #32]	; (800e26c <UART_SetConfig+0x524>)
 800e24c:	e74d      	b.n	800e0ea <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800e24e:	4807      	ldr	r0, [pc, #28]	; (800e26c <UART_SetConfig+0x524>)
 800e250:	e776      	b.n	800e140 <UART_SetConfig+0x3f8>
 800e252:	bf00      	nop
 800e254:	0801db68 	.word	0x0801db68
 800e258:	58024400 	.word	0x58024400
 800e25c:	0801db58 	.word	0x0801db58
 800e260:	000ffcff 	.word	0x000ffcff
 800e264:	0801db58 	.word	0x0801db58
 800e268:	0801db2c 	.word	0x0801db2c
 800e26c:	03d09000 	.word	0x03d09000
 800e270:	0801db58 	.word	0x0801db58
 800e274:	003d0900 	.word	0x003d0900
 800e278:	0801db58 	.word	0x0801db58

0800e27c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e27c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e27e:	07da      	lsls	r2, r3, #31
{
 800e280:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e282:	d506      	bpl.n	800e292 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e284:	6801      	ldr	r1, [r0, #0]
 800e286:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800e288:	684a      	ldr	r2, [r1, #4]
 800e28a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e28e:	4322      	orrs	r2, r4
 800e290:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e292:	079c      	lsls	r4, r3, #30
 800e294:	d506      	bpl.n	800e2a4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e296:	6801      	ldr	r1, [r0, #0]
 800e298:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800e29a:	684a      	ldr	r2, [r1, #4]
 800e29c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e2a0:	4322      	orrs	r2, r4
 800e2a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2a4:	0759      	lsls	r1, r3, #29
 800e2a6:	d506      	bpl.n	800e2b6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2a8:	6801      	ldr	r1, [r0, #0]
 800e2aa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e2ac:	684a      	ldr	r2, [r1, #4]
 800e2ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e2b2:	4322      	orrs	r2, r4
 800e2b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2b6:	071a      	lsls	r2, r3, #28
 800e2b8:	d506      	bpl.n	800e2c8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2ba:	6801      	ldr	r1, [r0, #0]
 800e2bc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800e2be:	684a      	ldr	r2, [r1, #4]
 800e2c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e2c4:	4322      	orrs	r2, r4
 800e2c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e2c8:	06dc      	lsls	r4, r3, #27
 800e2ca:	d506      	bpl.n	800e2da <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e2cc:	6801      	ldr	r1, [r0, #0]
 800e2ce:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e2d0:	688a      	ldr	r2, [r1, #8]
 800e2d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e2d6:	4322      	orrs	r2, r4
 800e2d8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e2da:	0699      	lsls	r1, r3, #26
 800e2dc:	d506      	bpl.n	800e2ec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e2de:	6801      	ldr	r1, [r0, #0]
 800e2e0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800e2e2:	688a      	ldr	r2, [r1, #8]
 800e2e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e2e8:	4322      	orrs	r2, r4
 800e2ea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e2ec:	065a      	lsls	r2, r3, #25
 800e2ee:	d50a      	bpl.n	800e306 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e2f0:	6801      	ldr	r1, [r0, #0]
 800e2f2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800e2f4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e2f6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e2fa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800e2fe:	ea42 0204 	orr.w	r2, r2, r4
 800e302:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e304:	d00b      	beq.n	800e31e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e306:	061b      	lsls	r3, r3, #24
 800e308:	d506      	bpl.n	800e318 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e30a:	6802      	ldr	r2, [r0, #0]
 800e30c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e30e:	6853      	ldr	r3, [r2, #4]
 800e310:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800e314:	430b      	orrs	r3, r1
 800e316:	6053      	str	r3, [r2, #4]
}
 800e318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e31c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e31e:	684a      	ldr	r2, [r1, #4]
 800e320:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800e322:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800e326:	4322      	orrs	r2, r4
 800e328:	604a      	str	r2, [r1, #4]
 800e32a:	e7ec      	b.n	800e306 <UART_AdvFeatureConfig+0x8a>

0800e32c <UART_CheckIdleState>:
{
 800e32c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e32e:	2300      	movs	r3, #0
{
 800e330:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e332:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800e336:	f7f8 fbf1 	bl	8006b1c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e33a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800e33c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e33e:	6813      	ldr	r3, [r2, #0]
 800e340:	071b      	lsls	r3, r3, #28
 800e342:	d40f      	bmi.n	800e364 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e344:	6813      	ldr	r3, [r2, #0]
 800e346:	0759      	lsls	r1, r3, #29
 800e348:	d431      	bmi.n	800e3ae <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e34a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800e34c:	2220      	movs	r2, #32
  return HAL_OK;
 800e34e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800e350:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e354:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e358:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e35a:	6723      	str	r3, [r4, #112]	; 0x70
      __HAL_UNLOCK(huart);
 800e35c:	2300      	movs	r3, #0
 800e35e:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 800e362:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e364:	69d3      	ldr	r3, [r2, #28]
 800e366:	0298      	lsls	r0, r3, #10
 800e368:	d4ec      	bmi.n	800e344 <UART_CheckIdleState+0x18>
 800e36a:	e00c      	b.n	800e386 <UART_CheckIdleState+0x5a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e36c:	6819      	ldr	r1, [r3, #0]
 800e36e:	461a      	mov	r2, r3
 800e370:	0749      	lsls	r1, r1, #29
 800e372:	d505      	bpl.n	800e380 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e374:	69d9      	ldr	r1, [r3, #28]
 800e376:	0708      	lsls	r0, r1, #28
 800e378:	d44b      	bmi.n	800e412 <UART_CheckIdleState+0xe6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e37a:	69d9      	ldr	r1, [r3, #28]
 800e37c:	0509      	lsls	r1, r1, #20
 800e37e:	d476      	bmi.n	800e46e <UART_CheckIdleState+0x142>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e380:	69db      	ldr	r3, [r3, #28]
 800e382:	0298      	lsls	r0, r3, #10
 800e384:	d4de      	bmi.n	800e344 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e386:	f7f8 fbc9 	bl	8006b1c <HAL_GetTick>
 800e38a:	1b43      	subs	r3, r0, r5
 800e38c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	d3eb      	bcc.n	800e36c <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e394:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e39c:	e843 2100 	strex	r1, r2, [r3]
 800e3a0:	2900      	cmp	r1, #0
 800e3a2:	d1f7      	bne.n	800e394 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 800e3a4:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e3a6:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800e3a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800e3ac:	e7d6      	b.n	800e35c <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3ae:	69d3      	ldr	r3, [r2, #28]
 800e3b0:	025b      	lsls	r3, r3, #9
 800e3b2:	d4ca      	bmi.n	800e34a <UART_CheckIdleState+0x1e>
 800e3b4:	e00d      	b.n	800e3d2 <UART_CheckIdleState+0xa6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e3b6:	681a      	ldr	r2, [r3, #0]
 800e3b8:	0750      	lsls	r0, r2, #29
 800e3ba:	d507      	bpl.n	800e3cc <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e3bc:	69da      	ldr	r2, [r3, #28]
 800e3be:	0711      	lsls	r1, r2, #28
 800e3c0:	f100 8083 	bmi.w	800e4ca <UART_CheckIdleState+0x19e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e3c4:	69da      	ldr	r2, [r3, #28]
 800e3c6:	0512      	lsls	r2, r2, #20
 800e3c8:	f100 80ad 	bmi.w	800e526 <UART_CheckIdleState+0x1fa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3cc:	69db      	ldr	r3, [r3, #28]
 800e3ce:	025b      	lsls	r3, r3, #9
 800e3d0:	d4bb      	bmi.n	800e34a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3d2:	f7f8 fba3 	bl	8006b1c <HAL_GetTick>
 800e3d6:	1b43      	subs	r3, r0, r5
 800e3d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3dc:	6823      	ldr	r3, [r4, #0]
 800e3de:	d3ea      	bcc.n	800e3b6 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e8:	e843 2100 	strex	r1, r2, [r3]
 800e3ec:	2900      	cmp	r1, #0
 800e3ee:	d1f7      	bne.n	800e3e0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f0:	f103 0208 	add.w	r2, r3, #8
 800e3f4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3f8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fc:	f103 0008 	add.w	r0, r3, #8
 800e400:	e840 2100 	strex	r1, r2, [r0]
 800e404:	2900      	cmp	r1, #0
 800e406:	d1f3      	bne.n	800e3f0 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 800e408:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e40a:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 800e40c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 800e410:	e7a4      	b.n	800e35c <UART_CheckIdleState+0x30>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e412:	2208      	movs	r2, #8
 800e414:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e416:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e41a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41e:	e843 2100 	strex	r1, r2, [r3]
 800e422:	2900      	cmp	r1, #0
 800e424:	d1f7      	bne.n	800e416 <UART_CheckIdleState+0xea>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e426:	4857      	ldr	r0, [pc, #348]	; (800e584 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e428:	f103 0208 	add.w	r2, r3, #8
 800e42c:	e852 2f00 	ldrex	r2, [r2]
 800e430:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e432:	f103 0508 	add.w	r5, r3, #8
 800e436:	e845 2100 	strex	r1, r2, [r5]
 800e43a:	2900      	cmp	r1, #0
 800e43c:	d1f4      	bne.n	800e428 <UART_CheckIdleState+0xfc>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e43e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e440:	2a01      	cmp	r2, #1
 800e442:	d00b      	beq.n	800e45c <UART_CheckIdleState+0x130>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e444:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e446:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e448:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e44a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e44e:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e450:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e452:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e456:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e45a:	e79b      	b.n	800e394 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e45c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e460:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e464:	e843 2100 	strex	r1, r2, [r3]
 800e468:	2900      	cmp	r1, #0
 800e46a:	d1f7      	bne.n	800e45c <UART_CheckIdleState+0x130>
 800e46c:	e7ea      	b.n	800e444 <UART_CheckIdleState+0x118>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e46e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e472:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e474:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e478:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47c:	e843 2100 	strex	r1, r2, [r3]
 800e480:	2900      	cmp	r1, #0
 800e482:	d1f7      	bne.n	800e474 <UART_CheckIdleState+0x148>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e484:	483f      	ldr	r0, [pc, #252]	; (800e584 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e486:	f103 0208 	add.w	r2, r3, #8
 800e48a:	e852 2f00 	ldrex	r2, [r2]
 800e48e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e490:	f103 0508 	add.w	r5, r3, #8
 800e494:	e845 2100 	strex	r1, r2, [r5]
 800e498:	2900      	cmp	r1, #0
 800e49a:	d1f4      	bne.n	800e486 <UART_CheckIdleState+0x15a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e49c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e49e:	2a01      	cmp	r2, #1
 800e4a0:	d00a      	beq.n	800e4b8 <UART_CheckIdleState+0x18c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4a2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e4a4:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e4a6:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e4a8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e4ac:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4b0:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e4b2:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e4b6:	e76d      	b.n	800e394 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4bc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c0:	e843 2100 	strex	r1, r2, [r3]
 800e4c4:	2900      	cmp	r1, #0
 800e4c6:	d1f7      	bne.n	800e4b8 <UART_CheckIdleState+0x18c>
 800e4c8:	e7eb      	b.n	800e4a2 <UART_CheckIdleState+0x176>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e4ca:	2208      	movs	r2, #8
 800e4cc:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ce:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d6:	e843 2100 	strex	r1, r2, [r3]
 800e4da:	2900      	cmp	r1, #0
 800e4dc:	d1f7      	bne.n	800e4ce <UART_CheckIdleState+0x1a2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4de:	4829      	ldr	r0, [pc, #164]	; (800e584 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e0:	f103 0208 	add.w	r2, r3, #8
 800e4e4:	e852 2f00 	ldrex	r2, [r2]
 800e4e8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ea:	f103 0508 	add.w	r5, r3, #8
 800e4ee:	e845 2100 	strex	r1, r2, [r5]
 800e4f2:	2900      	cmp	r1, #0
 800e4f4:	d1f4      	bne.n	800e4e0 <UART_CheckIdleState+0x1b4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4f6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e4f8:	2a01      	cmp	r2, #1
 800e4fa:	d00b      	beq.n	800e514 <UART_CheckIdleState+0x1e8>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4fc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e4fe:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e500:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e502:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e506:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e508:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e50a:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e50e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e512:	e765      	b.n	800e3e0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e514:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e518:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e51c:	e843 2100 	strex	r1, r2, [r3]
 800e520:	2900      	cmp	r1, #0
 800e522:	d1f7      	bne.n	800e514 <UART_CheckIdleState+0x1e8>
 800e524:	e7ea      	b.n	800e4fc <UART_CheckIdleState+0x1d0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e52a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e530:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e534:	e843 2100 	strex	r1, r2, [r3]
 800e538:	2900      	cmp	r1, #0
 800e53a:	d1f7      	bne.n	800e52c <UART_CheckIdleState+0x200>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e53c:	4811      	ldr	r0, [pc, #68]	; (800e584 <UART_CheckIdleState+0x258>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53e:	f103 0208 	add.w	r2, r3, #8
 800e542:	e852 2f00 	ldrex	r2, [r2]
 800e546:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e548:	f103 0508 	add.w	r5, r3, #8
 800e54c:	e845 2100 	strex	r1, r2, [r5]
 800e550:	2900      	cmp	r1, #0
 800e552:	d1f4      	bne.n	800e53e <UART_CheckIdleState+0x212>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e554:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e556:	2a01      	cmp	r2, #1
 800e558:	d00a      	beq.n	800e570 <UART_CheckIdleState+0x244>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e55a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e55c:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e55e:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e560:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e564:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e568:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e56a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e56e:	e737      	b.n	800e3e0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e570:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e574:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e578:	e843 2100 	strex	r1, r2, [r3]
 800e57c:	2900      	cmp	r1, #0
 800e57e:	d1f7      	bne.n	800e570 <UART_CheckIdleState+0x244>
 800e580:	e7eb      	b.n	800e55a <UART_CheckIdleState+0x22e>
 800e582:	bf00      	nop
 800e584:	effffffe 	.word	0xeffffffe

0800e588 <HAL_UART_Init>:
  if (huart == NULL)
 800e588:	b380      	cbz	r0, 800e5ec <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e58a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800e58e:	b510      	push	{r4, lr}
 800e590:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800e592:	b333      	cbz	r3, 800e5e2 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800e594:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e596:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e598:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e59a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800e59e:	6813      	ldr	r3, [r2, #0]
 800e5a0:	f023 0301 	bic.w	r3, r3, #1
 800e5a4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e5a6:	f7ff fbcf 	bl	800dd48 <UART_SetConfig>
 800e5aa:	2801      	cmp	r0, #1
 800e5ac:	d017      	beq.n	800e5de <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e5ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e5b0:	b98b      	cbnz	r3, 800e5d6 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5b2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800e5b4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5b6:	685a      	ldr	r2, [r3, #4]
 800e5b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e5bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5be:	689a      	ldr	r2, [r3, #8]
 800e5c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e5c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	f042 0201 	orr.w	r2, r2, #1
}
 800e5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800e5d0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800e5d2:	f7ff beab 	b.w	800e32c <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f7ff fe50 	bl	800e27c <UART_AdvFeatureConfig>
 800e5dc:	e7e9      	b.n	800e5b2 <HAL_UART_Init+0x2a>
}
 800e5de:	2001      	movs	r0, #1
 800e5e0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800e5e2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800e5e6:	f7f8 f851 	bl	800668c <HAL_UART_MspInit>
 800e5ea:	e7d3      	b.n	800e594 <HAL_UART_Init+0xc>
}
 800e5ec:	2001      	movs	r0, #1
 800e5ee:	4770      	bx	lr

0800e5f0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop

0800e5f4 <HAL_UARTEx_RxFifoFullCallback>:
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop

0800e5f8 <HAL_UARTEx_TxFifoEmptyCallback>:
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop

0800e5fc <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5fc:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e600:	2a01      	cmp	r2, #1
 800e602:	d017      	beq.n	800e634 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e604:	6802      	ldr	r2, [r0, #0]
 800e606:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e608:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e60a:	2100      	movs	r1, #0
{
 800e60c:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800e60e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800e612:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e614:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e616:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e618:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800e61c:	f024 0401 	bic.w	r4, r4, #1
 800e620:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e622:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e624:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800e626:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e628:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e62c:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e630:	bc30      	pop	{r4, r5}
 800e632:	4770      	bx	lr
  __HAL_LOCK(huart);
 800e634:	2002      	movs	r0, #2
}
 800e636:	4770      	bx	lr

0800e638 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e638:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e63c:	2a01      	cmp	r2, #1
 800e63e:	d037      	beq.n	800e6b0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e640:	6802      	ldr	r2, [r0, #0]
 800e642:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e644:	2024      	movs	r0, #36	; 0x24
{
 800e646:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e648:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e64c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e64e:	6810      	ldr	r0, [r2, #0]
 800e650:	f020 0001 	bic.w	r0, r0, #1
 800e654:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e656:	6890      	ldr	r0, [r2, #8]
 800e658:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800e65c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e65e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e660:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e662:	b310      	cbz	r0, 800e6aa <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e664:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e666:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e668:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e66c:	4911      	ldr	r1, [pc, #68]	; (800e6b4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e66e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e672:	4d11      	ldr	r5, [pc, #68]	; (800e6b8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e674:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e678:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e67c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e680:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e682:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e686:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e688:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e68c:	fbb1 f1f5 	udiv	r1, r1, r5
 800e690:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e694:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e696:	2100      	movs	r1, #0
 800e698:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e69c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e69e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e6a0:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e6a4:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e6a8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e6aa:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	e7ef      	b.n	800e690 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e6b0:	2002      	movs	r0, #2
}
 800e6b2:	4770      	bx	lr
 800e6b4:	0801db88 	.word	0x0801db88
 800e6b8:	0801db80 	.word	0x0801db80

0800e6bc <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800e6bc:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e6c0:	2a01      	cmp	r2, #1
 800e6c2:	d037      	beq.n	800e734 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6c4:	6802      	ldr	r2, [r0, #0]
 800e6c6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e6c8:	2024      	movs	r0, #36	; 0x24
{
 800e6ca:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e6cc:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6d0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e6d2:	6810      	ldr	r0, [r2, #0]
 800e6d4:	f020 0001 	bic.w	r0, r0, #1
 800e6d8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e6da:	6890      	ldr	r0, [r2, #8]
 800e6dc:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800e6e0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e6e2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e6e4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e6e6:	b310      	cbz	r0, 800e72e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e6e8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e6ea:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6ec:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6f0:	4911      	ldr	r1, [pc, #68]	; (800e738 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e6f2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e6f6:	4d11      	ldr	r5, [pc, #68]	; (800e73c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6f8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6fc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e700:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e704:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e706:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e70a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e70c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e710:	fbb1 f1f5 	udiv	r1, r1, r5
 800e714:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e718:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e71a:	2100      	movs	r1, #0
 800e71c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e720:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e722:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e724:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e728:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e72c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e72e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e730:	4608      	mov	r0, r1
 800e732:	e7ef      	b.n	800e714 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e734:	2002      	movs	r0, #2
}
 800e736:	4770      	bx	lr
 800e738:	0801db88 	.word	0x0801db88
 800e73c:	0801db80 	.word	0x0801db80

0800e740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e740:	b084      	sub	sp, #16
 800e742:	4684      	mov	ip, r0
 800e744:	b500      	push	{lr}
 800e746:	b083      	sub	sp, #12
 800e748:	f10d 0e14 	add.w	lr, sp, #20
 800e74c:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e752:	2b01      	cmp	r3, #1
 800e754:	d13e      	bne.n	800e7d4 <USB_CoreInit+0x94>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e756:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e758:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800e75c:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e75e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800e762:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e764:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e766:	68c2      	ldr	r2, [r0, #12]
 800e768:	ea03 0302 	and.w	r3, r3, r2
 800e76c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e76e:	68c3      	ldr	r3, [r0, #12]
 800e770:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e774:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800e776:	d07c      	beq.n	800e872 <USB_CoreInit+0x132>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800e778:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800e77a:	4a40      	ldr	r2, [pc, #256]	; (800e87c <USB_CoreInit+0x13c>)
  __IO uint32_t count = 0U;
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	e003      	b.n	800e788 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e780:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	db41      	blt.n	800e80c <USB_CoreInit+0xcc>
    count++;
 800e788:	9b00      	ldr	r3, [sp, #0]
 800e78a:	3301      	adds	r3, #1
 800e78c:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e78e:	9b00      	ldr	r3, [sp, #0]
 800e790:	4293      	cmp	r3, r2
 800e792:	d9f5      	bls.n	800e780 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800e794:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800e796:	9b07      	ldr	r3, [sp, #28]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d116      	bne.n	800e7ca <USB_CoreInit+0x8a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e79c:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e7a0:	4b37      	ldr	r3, [pc, #220]	; (800e880 <USB_CoreInit+0x140>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e7a2:	b292      	uxth	r2, r2
 800e7a4:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e7a8:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e7b2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e7b6:	f043 0306 	orr.w	r3, r3, #6
 800e7ba:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e7be:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e7c2:	f043 0320 	orr.w	r3, r3, #32
 800e7c6:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800e7ca:	b003      	add	sp, #12
 800e7cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7d0:	b004      	add	sp, #16
 800e7d2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e7d4:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e7d6:	2100      	movs	r1, #0
    if (count > 200000U)
 800e7d8:	4a28      	ldr	r2, [pc, #160]	; (800e87c <USB_CoreInit+0x13c>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7de:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e7e0:	9101      	str	r1, [sp, #4]
 800e7e2:	e003      	b.n	800e7ec <USB_CoreInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e7e4:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	db2c      	blt.n	800e846 <USB_CoreInit+0x106>
    count++;
 800e7ec:	9b01      	ldr	r3, [sp, #4]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e7f2:	9b01      	ldr	r3, [sp, #4]
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d9f5      	bls.n	800e7e4 <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 800e7f8:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800e7fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7fc:	b9e3      	cbnz	r3, 800e838 <USB_CoreInit+0xf8>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e7fe:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e806:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e80a:	e7c4      	b.n	800e796 <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 800e80c:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 800e80e:	4a1b      	ldr	r2, [pc, #108]	; (800e87c <USB_CoreInit+0x13c>)
  count = 0U;
 800e810:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e812:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e816:	f043 0301 	orr.w	r3, r3, #1
 800e81a:	f8cc 3010 	str.w	r3, [ip, #16]
 800e81e:	e004      	b.n	800e82a <USB_CoreInit+0xea>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e820:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e824:	f010 0001 	ands.w	r0, r0, #1
 800e828:	d0b5      	beq.n	800e796 <USB_CoreInit+0x56>
    count++;
 800e82a:	9b00      	ldr	r3, [sp, #0]
 800e82c:	3301      	adds	r3, #1
 800e82e:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e830:	9b00      	ldr	r3, [sp, #0]
 800e832:	4293      	cmp	r3, r2
 800e834:	d9f4      	bls.n	800e820 <USB_CoreInit+0xe0>
 800e836:	e7ad      	b.n	800e794 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e838:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e83c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e840:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e844:	e7a7      	b.n	800e796 <USB_CoreInit+0x56>
  count = 0U;
 800e846:	2300      	movs	r3, #0
    if (count > 200000U)
 800e848:	4a0c      	ldr	r2, [pc, #48]	; (800e87c <USB_CoreInit+0x13c>)
  count = 0U;
 800e84a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e84c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e850:	f043 0301 	orr.w	r3, r3, #1
 800e854:	f8cc 3010 	str.w	r3, [ip, #16]
 800e858:	e004      	b.n	800e864 <USB_CoreInit+0x124>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e85a:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e85e:	f010 0001 	ands.w	r0, r0, #1
 800e862:	d0ca      	beq.n	800e7fa <USB_CoreInit+0xba>
    count++;
 800e864:	9b01      	ldr	r3, [sp, #4]
 800e866:	3301      	adds	r3, #1
 800e868:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e86a:	9b01      	ldr	r3, [sp, #4]
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d9f4      	bls.n	800e85a <USB_CoreInit+0x11a>
 800e870:	e7c2      	b.n	800e7f8 <USB_CoreInit+0xb8>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e872:	68c3      	ldr	r3, [r0, #12]
 800e874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e878:	60c3      	str	r3, [r0, #12]
 800e87a:	e77d      	b.n	800e778 <USB_CoreInit+0x38>
 800e87c:	00030d40 	.word	0x00030d40
 800e880:	03ee0000 	.word	0x03ee0000

0800e884 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800e884:	2a02      	cmp	r2, #2
{
 800e886:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800e888:	d00a      	beq.n	800e8a0 <USB_SetTurnaroundTime+0x1c>
 800e88a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e88e:	68da      	ldr	r2, [r3, #12]
}
 800e890:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e892:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800e896:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e898:	68da      	ldr	r2, [r3, #12]
 800e89a:	430a      	orrs	r2, r1
 800e89c:	60da      	str	r2, [r3, #12]
}
 800e89e:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e8a0:	4a23      	ldr	r2, [pc, #140]	; (800e930 <USB_SetTurnaroundTime+0xac>)
 800e8a2:	4824      	ldr	r0, [pc, #144]	; (800e934 <USB_SetTurnaroundTime+0xb0>)
 800e8a4:	440a      	add	r2, r1
 800e8a6:	4282      	cmp	r2, r0
 800e8a8:	d92c      	bls.n	800e904 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e8aa:	4a23      	ldr	r2, [pc, #140]	; (800e938 <USB_SetTurnaroundTime+0xb4>)
 800e8ac:	4823      	ldr	r0, [pc, #140]	; (800e93c <USB_SetTurnaroundTime+0xb8>)
 800e8ae:	440a      	add	r2, r1
 800e8b0:	4282      	cmp	r2, r0
 800e8b2:	d92a      	bls.n	800e90a <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e8b4:	4a22      	ldr	r2, [pc, #136]	; (800e940 <USB_SetTurnaroundTime+0xbc>)
 800e8b6:	4823      	ldr	r0, [pc, #140]	; (800e944 <USB_SetTurnaroundTime+0xc0>)
 800e8b8:	440a      	add	r2, r1
 800e8ba:	4282      	cmp	r2, r0
 800e8bc:	d928      	bls.n	800e910 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e8be:	4a22      	ldr	r2, [pc, #136]	; (800e948 <USB_SetTurnaroundTime+0xc4>)
 800e8c0:	4822      	ldr	r0, [pc, #136]	; (800e94c <USB_SetTurnaroundTime+0xc8>)
 800e8c2:	440a      	add	r2, r1
 800e8c4:	4282      	cmp	r2, r0
 800e8c6:	d326      	bcc.n	800e916 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e8c8:	4a21      	ldr	r2, [pc, #132]	; (800e950 <USB_SetTurnaroundTime+0xcc>)
 800e8ca:	4822      	ldr	r0, [pc, #136]	; (800e954 <USB_SetTurnaroundTime+0xd0>)
 800e8cc:	440a      	add	r2, r1
 800e8ce:	4282      	cmp	r2, r0
 800e8d0:	d924      	bls.n	800e91c <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e8d2:	4a21      	ldr	r2, [pc, #132]	; (800e958 <USB_SetTurnaroundTime+0xd4>)
 800e8d4:	4821      	ldr	r0, [pc, #132]	; (800e95c <USB_SetTurnaroundTime+0xd8>)
 800e8d6:	440a      	add	r2, r1
 800e8d8:	4282      	cmp	r2, r0
 800e8da:	d322      	bcc.n	800e922 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e8dc:	4a20      	ldr	r2, [pc, #128]	; (800e960 <USB_SetTurnaroundTime+0xdc>)
 800e8de:	4821      	ldr	r0, [pc, #132]	; (800e964 <USB_SetTurnaroundTime+0xe0>)
 800e8e0:	440a      	add	r2, r1
 800e8e2:	4282      	cmp	r2, r0
 800e8e4:	d3d1      	bcc.n	800e88a <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e8e6:	4a20      	ldr	r2, [pc, #128]	; (800e968 <USB_SetTurnaroundTime+0xe4>)
 800e8e8:	4820      	ldr	r0, [pc, #128]	; (800e96c <USB_SetTurnaroundTime+0xe8>)
 800e8ea:	440a      	add	r2, r1
 800e8ec:	4282      	cmp	r2, r0
 800e8ee:	d31b      	bcc.n	800e928 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e8f0:	4a1f      	ldr	r2, [pc, #124]	; (800e970 <USB_SetTurnaroundTime+0xec>)
 800e8f2:	4820      	ldr	r0, [pc, #128]	; (800e974 <USB_SetTurnaroundTime+0xf0>)
 800e8f4:	440a      	add	r2, r1
 800e8f6:	4282      	cmp	r2, r0
 800e8f8:	bf34      	ite	cc
 800e8fa:	f44f 51e0 	movcc.w	r1, #7168	; 0x1c00
 800e8fe:	f44f 51c0 	movcs.w	r1, #6144	; 0x1800
 800e902:	e7c4      	b.n	800e88e <USB_SetTurnaroundTime+0xa>
 800e904:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800e908:	e7c1      	b.n	800e88e <USB_SetTurnaroundTime+0xa>
 800e90a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800e90e:	e7be      	b.n	800e88e <USB_SetTurnaroundTime+0xa>
 800e910:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 800e914:	e7bb      	b.n	800e88e <USB_SetTurnaroundTime+0xa>
 800e916:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800e91a:	e7b8      	b.n	800e88e <USB_SetTurnaroundTime+0xa>
 800e91c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 800e920:	e7b5      	b.n	800e88e <USB_SetTurnaroundTime+0xa>
 800e922:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800e926:	e7b2      	b.n	800e88e <USB_SetTurnaroundTime+0xa>
 800e928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e92c:	e7af      	b.n	800e88e <USB_SetTurnaroundTime+0xa>
 800e92e:	bf00      	nop
 800e930:	ff275340 	.word	0xff275340
 800e934:	000c34ff 	.word	0x000c34ff
 800e938:	ff1b1e40 	.word	0xff1b1e40
 800e93c:	000f423f 	.word	0x000f423f
 800e940:	ff0bdc00 	.word	0xff0bdc00
 800e944:	00124f7f 	.word	0x00124f7f
 800e948:	fef98c80 	.word	0xfef98c80
 800e94c:	0013d620 	.word	0x0013d620
 800e950:	fee5b660 	.word	0xfee5b660
 800e954:	0016e35f 	.word	0x0016e35f
 800e958:	feced300 	.word	0xfeced300
 800e95c:	001b7740 	.word	0x001b7740
 800e960:	feb35bc0 	.word	0xfeb35bc0
 800e964:	002191c0 	.word	0x002191c0
 800e968:	fe91ca00 	.word	0xfe91ca00
 800e96c:	00387520 	.word	0x00387520
 800e970:	fe5954e0 	.word	0xfe5954e0
 800e974:	00419ce0 	.word	0x00419ce0

0800e978 <USB_EnableGlobalInt>:
{
 800e978:	4603      	mov	r3, r0
}
 800e97a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e97c:	689a      	ldr	r2, [r3, #8]
 800e97e:	f042 0201 	orr.w	r2, r2, #1
 800e982:	609a      	str	r2, [r3, #8]
}
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop

0800e988 <USB_DisableGlobalInt>:
{
 800e988:	4603      	mov	r3, r0
}
 800e98a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e98c:	689a      	ldr	r2, [r3, #8]
 800e98e:	f022 0201 	bic.w	r2, r2, #1
 800e992:	609a      	str	r2, [r3, #8]
}
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop

0800e998 <USB_SetCurrentMode>:
{
 800e998:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e99a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e99c:	2901      	cmp	r1, #1
{
 800e99e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e9a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e9a4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e9a6:	d017      	beq.n	800e9d8 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800e9a8:	b9a1      	cbnz	r1, 800e9d4 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e9aa:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800e9ac:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e9ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e9b2:	60c3      	str	r3, [r0, #12]
 800e9b4:	e001      	b.n	800e9ba <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e9b6:	2c32      	cmp	r4, #50	; 0x32
 800e9b8:	d00c      	beq.n	800e9d4 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800e9ba:	2001      	movs	r0, #1
      ms++;
 800e9bc:	4404      	add	r4, r0
      HAL_Delay(1U);
 800e9be:	f7f8 f8b3 	bl	8006b28 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800e9c2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e9c4:	07db      	lsls	r3, r3, #31
 800e9c6:	d4f6      	bmi.n	800e9b6 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800e9c8:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800e9cc:	fab0 f080 	clz	r0, r0
 800e9d0:	0940      	lsrs	r0, r0, #5
}
 800e9d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e9d4:	2001      	movs	r0, #1
}
 800e9d6:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e9d8:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800e9da:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e9dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9e0:	60c3      	str	r3, [r0, #12]
 800e9e2:	e001      	b.n	800e9e8 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e9e4:	2c32      	cmp	r4, #50	; 0x32
 800e9e6:	d0f5      	beq.n	800e9d4 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800e9e8:	2001      	movs	r0, #1
      ms++;
 800e9ea:	4404      	add	r4, r0
      HAL_Delay(1U);
 800e9ec:	f7f8 f89c 	bl	8006b28 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800e9f0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e9f2:	07da      	lsls	r2, r3, #31
 800e9f4:	d5f6      	bpl.n	800e9e4 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800e9f6:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800e9fa:	fab0 f080 	clz	r0, r0
 800e9fe:	0940      	lsrs	r0, r0, #5
 800ea00:	e7e7      	b.n	800e9d2 <USB_SetCurrentMode+0x3a>
 800ea02:	bf00      	nop

0800ea04 <USB_DevInit>:
{
 800ea04:	b084      	sub	sp, #16
 800ea06:	4684      	mov	ip, r0
 800ea08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea0c:	b083      	sub	sp, #12
 800ea0e:	ac0b      	add	r4, sp, #44	; 0x2c
 800ea10:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800ea14:	2300      	movs	r3, #0
 800ea16:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ea18:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800ea1c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800ea20:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800ea24:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800ea28:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800ea2c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800ea30:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800ea34:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800ea38:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800ea3c:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800ea40:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800ea44:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800ea48:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800ea4c:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800ea50:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800ea54:	2c00      	cmp	r4, #0
 800ea56:	f040 80b3 	bne.w	800ebc0 <USB_DevInit+0x1bc>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea5a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800ea5e:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 800ea62:	f043 0302 	orr.w	r3, r3, #2
 800ea66:	f8ce 3004 	str.w	r3, [lr, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ea6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ea6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea70:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ea72:	6803      	ldr	r3, [r0, #0]
 800ea74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea78:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ea7a:	6803      	ldr	r3, [r0, #0]
 800ea7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea80:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800ea82:	2300      	movs	r3, #0
 800ea84:	f8cc 3e00 	str.w	r3, [ip, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ea88:	f8de 3000 	ldr.w	r3, [lr]
 800ea8c:	f8ce 3000 	str.w	r3, [lr]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ea90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	f000 80c3 	beq.w	800ec1e <USB_DevInit+0x21a>
  USBx_DEVICE->DCFG |= speed;
 800ea98:	f8de 3000 	ldr.w	r3, [lr]
 800ea9c:	f043 0303 	orr.w	r3, r3, #3
 800eaa0:	f8ce 3000 	str.w	r3, [lr]
  __IO uint32_t count = 0U;
 800eaa4:	2300      	movs	r3, #0
    if (count > 200000U)
 800eaa6:	4a65      	ldr	r2, [pc, #404]	; (800ec3c <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	e004      	b.n	800eab6 <USB_DevInit+0xb2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eaac:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f2c0 809f 	blt.w	800ebf4 <USB_DevInit+0x1f0>
    count++;
 800eab6:	9b00      	ldr	r3, [sp, #0]
 800eab8:	3301      	adds	r3, #1
 800eaba:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800eabc:	9b00      	ldr	r3, [sp, #0]
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d9f4      	bls.n	800eaac <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 800eac2:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 800eac4:	2300      	movs	r3, #0
    if (count > 200000U)
 800eac6:	4a5d      	ldr	r2, [pc, #372]	; (800ec3c <USB_DevInit+0x238>)
  __IO uint32_t count = 0U;
 800eac8:	9301      	str	r3, [sp, #4]
 800eaca:	e003      	b.n	800ead4 <USB_DevInit+0xd0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eacc:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	db7c      	blt.n	800ebce <USB_DevInit+0x1ca>
    count++;
 800ead4:	9b01      	ldr	r3, [sp, #4]
 800ead6:	3301      	adds	r3, #1
 800ead8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800eada:	9b01      	ldr	r3, [sp, #4]
 800eadc:	4293      	cmp	r3, r2
 800eade:	d9f5      	bls.n	800eacc <USB_DevInit+0xc8>
    ret = HAL_ERROR;
 800eae0:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800eae2:	2200      	movs	r2, #0
 800eae4:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eae8:	f8ce 2014 	str.w	r2, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eaec:	f8ce 201c 	str.w	r2, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eaf0:	b1d1      	cbz	r1, 800eb28 <USB_DevInit+0x124>
 800eaf2:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eaf6:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eafa:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800eafe:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eb00:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800eb04:	e006      	b.n	800eb14 <USB_DevInit+0x110>
      USBx_INEP(i)->DIEPCTL = 0U;
 800eb06:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb08:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eb0a:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eb0c:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb0e:	3320      	adds	r3, #32
 800eb10:	4291      	cmp	r1, r2
 800eb12:	d039      	beq.n	800eb88 <USB_DevInit+0x184>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb14:	681d      	ldr	r5, [r3, #0]
 800eb16:	2d00      	cmp	r5, #0
 800eb18:	daf5      	bge.n	800eb06 <USB_DevInit+0x102>
      if (i == 0U)
 800eb1a:	b112      	cbz	r2, 800eb22 <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb1c:	f8c3 8000 	str.w	r8, [r3]
 800eb20:	e7f2      	b.n	800eb08 <USB_DevInit+0x104>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eb22:	f8c3 9000 	str.w	r9, [r3]
 800eb26:	e7ef      	b.n	800eb08 <USB_DevInit+0x104>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eb28:	f8de 3010 	ldr.w	r3, [lr, #16]
  USBx->GINTMSK = 0U;
 800eb2c:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eb2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb32:	f8ce 3010 	str.w	r3, [lr, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eb36:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800eb3a:	f8cc 2018 	str.w	r2, [ip, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eb3e:	f8cc 3014 	str.w	r3, [ip, #20]
  if (cfg.dma_enable == 0U)
 800eb42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb44:	b92b      	cbnz	r3, 800eb52 <USB_DevInit+0x14e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eb46:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800eb4a:	f043 0310 	orr.w	r3, r3, #16
 800eb4e:	f8cc 3018 	str.w	r3, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eb52:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800eb56:	4b3a      	ldr	r3, [pc, #232]	; (800ec40 <USB_DevInit+0x23c>)
 800eb58:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800eb5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eb5c:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.Sof_enable != 0U)
 800eb60:	b12a      	cbz	r2, 800eb6e <USB_DevInit+0x16a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800eb62:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800eb66:	f043 0308 	orr.w	r3, r3, #8
 800eb6a:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800eb6e:	2c01      	cmp	r4, #1
 800eb70:	d105      	bne.n	800eb7e <USB_DevInit+0x17a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eb72:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800eb76:	4b33      	ldr	r3, [pc, #204]	; (800ec44 <USB_DevInit+0x240>)
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	f8cc 3018 	str.w	r3, [ip, #24]
}
 800eb7e:	b003      	add	sp, #12
 800eb80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb84:	b004      	add	sp, #16
 800eb86:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eb8e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eb92:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eb96:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb98:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800eb9c:	e006      	b.n	800ebac <USB_DevInit+0x1a8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eb9e:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eba0:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eba2:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eba4:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eba6:	3320      	adds	r3, #32
 800eba8:	4291      	cmp	r1, r2
 800ebaa:	d0bd      	beq.n	800eb28 <USB_DevInit+0x124>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebac:	681d      	ldr	r5, [r3, #0]
 800ebae:	2d00      	cmp	r5, #0
 800ebb0:	daf5      	bge.n	800eb9e <USB_DevInit+0x19a>
      if (i == 0U)
 800ebb2:	b112      	cbz	r2, 800ebba <USB_DevInit+0x1b6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ebb4:	f8c3 8000 	str.w	r8, [r3]
 800ebb8:	e7f2      	b.n	800eba0 <USB_DevInit+0x19c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ebba:	f8c3 9000 	str.w	r9, [r3]
 800ebbe:	e7ef      	b.n	800eba0 <USB_DevInit+0x19c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ebc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ebc2:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ebc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ebca:	6383      	str	r3, [r0, #56]	; 0x38
 800ebcc:	e759      	b.n	800ea82 <USB_DevInit+0x7e>
  count = 0U;
 800ebce:	2300      	movs	r3, #0
    if (count > 200000U)
 800ebd0:	4a1a      	ldr	r2, [pc, #104]	; (800ec3c <USB_DevInit+0x238>)
  count = 0U;
 800ebd2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ebd4:	2310      	movs	r3, #16
 800ebd6:	f8cc 3010 	str.w	r3, [ip, #16]
 800ebda:	e004      	b.n	800ebe6 <USB_DevInit+0x1e2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ebdc:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800ebe0:	06db      	lsls	r3, r3, #27
 800ebe2:	f57f af7e 	bpl.w	800eae2 <USB_DevInit+0xde>
    count++;
 800ebe6:	9b01      	ldr	r3, [sp, #4]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ebec:	9b01      	ldr	r3, [sp, #4]
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d9f4      	bls.n	800ebdc <USB_DevInit+0x1d8>
 800ebf2:	e775      	b.n	800eae0 <USB_DevInit+0xdc>
  count = 0U;
 800ebf4:	2300      	movs	r3, #0
    if (count > 200000U)
 800ebf6:	4a11      	ldr	r2, [pc, #68]	; (800ec3c <USB_DevInit+0x238>)
  count = 0U;
 800ebf8:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ebfa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800ebfe:	f8cc 3010 	str.w	r3, [ip, #16]
 800ec02:	e005      	b.n	800ec10 <USB_DevInit+0x20c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec04:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800ec08:	f010 0020 	ands.w	r0, r0, #32
 800ec0c:	f43f af5a 	beq.w	800eac4 <USB_DevInit+0xc0>
    count++;
 800ec10:	9b00      	ldr	r3, [sp, #0]
 800ec12:	3301      	adds	r3, #1
 800ec14:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800ec16:	9b00      	ldr	r3, [sp, #0]
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d9f3      	bls.n	800ec04 <USB_DevInit+0x200>
 800ec1c:	e751      	b.n	800eac2 <USB_DevInit+0xbe>
    if (cfg.speed == USBD_HS_SPEED)
 800ec1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec20:	b923      	cbnz	r3, 800ec2c <USB_DevInit+0x228>
  USBx_DEVICE->DCFG |= speed;
 800ec22:	f8de 3000 	ldr.w	r3, [lr]
 800ec26:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 800ec2a:	e73b      	b.n	800eaa4 <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 800ec2c:	f8de 3000 	ldr.w	r3, [lr]
 800ec30:	f043 0301 	orr.w	r3, r3, #1
 800ec34:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 800ec38:	e734      	b.n	800eaa4 <USB_DevInit+0xa0>
 800ec3a:	bf00      	nop
 800ec3c:	00030d40 	.word	0x00030d40
 800ec40:	803c3800 	.word	0x803c3800
 800ec44:	40000004 	.word	0x40000004

0800ec48 <USB_FlushTxFifo>:
{
 800ec48:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800ec4a:	2300      	movs	r3, #0
    if (count > 200000U)
 800ec4c:	4a12      	ldr	r2, [pc, #72]	; (800ec98 <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 800ec4e:	9301      	str	r3, [sp, #4]
 800ec50:	e002      	b.n	800ec58 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec52:	6903      	ldr	r3, [r0, #16]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	db08      	blt.n	800ec6a <USB_FlushTxFifo+0x22>
    count++;
 800ec58:	9b01      	ldr	r3, [sp, #4]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ec5e:	9b01      	ldr	r3, [sp, #4]
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d9f6      	bls.n	800ec52 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800ec64:	2003      	movs	r0, #3
}
 800ec66:	b002      	add	sp, #8
 800ec68:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec6a:	0189      	lsls	r1, r1, #6
  count = 0U;
 800ec6c:	2300      	movs	r3, #0
    if (count > 200000U)
 800ec6e:	4a0a      	ldr	r2, [pc, #40]	; (800ec98 <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec70:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800ec74:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec76:	6101      	str	r1, [r0, #16]
 800ec78:	e003      	b.n	800ec82 <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec7a:	6903      	ldr	r3, [r0, #16]
 800ec7c:	f013 0320 	ands.w	r3, r3, #32
 800ec80:	d006      	beq.n	800ec90 <USB_FlushTxFifo+0x48>
    count++;
 800ec82:	9b01      	ldr	r3, [sp, #4]
 800ec84:	3301      	adds	r3, #1
 800ec86:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ec88:	9b01      	ldr	r3, [sp, #4]
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d9f5      	bls.n	800ec7a <USB_FlushTxFifo+0x32>
 800ec8e:	e7e9      	b.n	800ec64 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 800ec90:	4618      	mov	r0, r3
}
 800ec92:	b002      	add	sp, #8
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	00030d40 	.word	0x00030d40

0800ec9c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ec9c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800eca0:	f013 0006 	ands.w	r0, r3, #6
 800eca4:	d004      	beq.n	800ecb0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800eca6:	f013 0f02 	tst.w	r3, #2
 800ecaa:	bf14      	ite	ne
 800ecac:	2002      	movne	r0, #2
 800ecae:	200f      	moveq	r0, #15
}
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop

0800ecb4 <USB_ActivateEndpoint>:
{
 800ecb4:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800ecb6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ecb8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d020      	beq.n	800ed00 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ecbe:	f002 0c0f 	and.w	ip, r2, #15
 800ecc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ecc6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ecca:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ecce:	fa03 f30c 	lsl.w	r3, r3, ip
 800ecd2:	4323      	orrs	r3, r4
 800ecd4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ecd8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800ecdc:	041b      	lsls	r3, r3, #16
 800ecde:	d40c      	bmi.n	800ecfa <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ece0:	688b      	ldr	r3, [r1, #8]
 800ece2:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 800ece6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ecea:	7908      	ldrb	r0, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ecec:	4914      	ldr	r1, [pc, #80]	; (800ed40 <USB_ActivateEndpoint+0x8c>)
 800ecee:	4323      	orrs	r3, r4
 800ecf0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800ecf4:	4319      	orrs	r1, r3
 800ecf6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	bc30      	pop	{r4, r5}
 800ecfe:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ed00:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800ed04:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ed08:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ed0c:	40ab      	lsls	r3, r5
 800ed0e:	69e5      	ldr	r5, [r4, #28]
 800ed10:	432b      	orrs	r3, r5
 800ed12:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ed14:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ed18:	041c      	lsls	r4, r3, #16
 800ed1a:	d4ee      	bmi.n	800ecfa <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed1c:	688b      	ldr	r3, [r1, #8]
 800ed1e:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800ed22:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed26:	790c      	ldrb	r4, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed28:	4905      	ldr	r1, [pc, #20]	; (800ed40 <USB_ActivateEndpoint+0x8c>)
 800ed2a:	432b      	orrs	r3, r5
 800ed2c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800ed30:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800ed34:	4319      	orrs	r1, r3
}
 800ed36:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed38:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	4770      	bx	lr
 800ed40:	10008000 	.word	0x10008000

0800ed44 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 800ed44:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ed46:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ed48:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ed4a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800ed4e:	d02a      	beq.n	800eda6 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed50:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800ed54:	2a00      	cmp	r2, #0
 800ed56:	db19      	blt.n	800ed8c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ed5c:	f003 030f 	and.w	r3, r3, #15
 800ed60:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800ed64:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ed68:	4a23      	ldr	r2, [pc, #140]	; (800edf8 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed6a:	ea21 0103 	bic.w	r1, r1, r3
 800ed6e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed72:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800ed76:	ea21 0303 	bic.w	r3, r1, r3
 800ed7a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800ed7e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ed80:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800ed84:	401a      	ands	r2, r3
 800ed86:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 800ed8a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ed8c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800ed90:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ed94:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ed98:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800ed9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800eda0:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 800eda4:	e7d8      	b.n	800ed58 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eda6:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800edaa:	2a00      	cmp	r2, #0
 800edac:	da0b      	bge.n	800edc6 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800edae:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800edb2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800edb6:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800edba:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800edbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800edc2:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800edc6:	f003 020f 	and.w	r2, r3, #15
 800edca:	2301      	movs	r3, #1
 800edcc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800edd0:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800edd2:	4a0a      	ldr	r2, [pc, #40]	; (800edfc <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800edd4:	ea21 0103 	bic.w	r1, r1, r3
 800edd8:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eddc:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800ede0:	ea21 0303 	bic.w	r3, r1, r3
 800ede4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800ede8:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800edea:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800edee:	401a      	ands	r2, r3
 800edf0:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 800edf4:	4770      	bx	lr
 800edf6:	bf00      	nop
 800edf8:	eff37800 	.word	0xeff37800
 800edfc:	ec337800 	.word	0xec337800

0800ee00 <USB_EPStartXfer>:
{
 800ee00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800ee04:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ee06:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d045      	beq.n	800ee98 <USB_EPStartXfer+0x98>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ee0c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800ee10:	4e9a      	ldr	r6, [pc, #616]	; (800f07c <USB_EPStartXfer+0x27c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ee12:	4d9b      	ldr	r5, [pc, #620]	; (800f080 <USB_EPStartXfer+0x280>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ee14:	f8d3 7b10 	ldr.w	r7, [r3, #2832]	; 0xb10
 800ee18:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 800ee1c:	403e      	ands	r6, r7
 800ee1e:	f8c3 6b10 	str.w	r6, [r3, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ee22:	f8d3 6b10 	ldr.w	r6, [r3, #2832]	; 0xb10
 800ee26:	4035      	ands	r5, r6
 800ee28:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    if (epnum == 0U)
 800ee2c:	bb7c      	cbnz	r4, 800ee8e <USB_EPStartXfer+0x8e>
      if (ep->xfer_len > 0U)
 800ee2e:	690c      	ldr	r4, [r1, #16]
 800ee30:	2c00      	cmp	r4, #0
 800ee32:	f040 8093 	bne.w	800ef5c <USB_EPStartXfer+0x15c>
        if (ep->xfer_len > ep->maxpacket)
 800ee36:	688c      	ldr	r4, [r1, #8]
      ep->xfer_size = ep->maxpacket;
 800ee38:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ee3a:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800ee3e:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800ee42:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ee44:	ea44 0405 	orr.w	r4, r4, r5
 800ee48:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee4c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800ee50:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800ee54:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800ee58:	f000 80a1 	beq.w	800ef9e <USB_EPStartXfer+0x19e>
    if (ep->type == EP_TYPE_ISOC)
 800ee5c:	790a      	ldrb	r2, [r1, #4]
 800ee5e:	2a01      	cmp	r2, #1
 800ee60:	d10c      	bne.n	800ee7c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ee62:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800ee66:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ee6a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800ee6e:	bf0c      	ite	eq
 800ee70:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ee74:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800ee78:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ee7c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
}
 800ee80:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ee82:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ee86:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800ee8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->xfer_len == 0U)
 800ee8e:	690c      	ldr	r4, [r1, #16]
 800ee90:	2c00      	cmp	r4, #0
 800ee92:	d166      	bne.n	800ef62 <USB_EPStartXfer+0x162>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ee94:	688c      	ldr	r4, [r1, #8]
 800ee96:	e7d0      	b.n	800ee3a <USB_EPStartXfer+0x3a>
    if (ep->xfer_len == 0U)
 800ee98:	690b      	ldr	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee9a:	eb00 1644 	add.w	r6, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 800ee9e:	bb2b      	cbnz	r3, 800eeec <USB_EPStartXfer+0xec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eea0:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
    if (dma == 1U)
 800eea4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eea6:	4f76      	ldr	r7, [pc, #472]	; (800f080 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eea8:	4d74      	ldr	r5, [pc, #464]	; (800f07c <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eeaa:	ea0c 0707 	and.w	r7, ip, r7
 800eeae:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eeb2:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800eeb6:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800eeba:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eebe:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800eec2:	ea05 0507 	and.w	r5, r5, r7
 800eec6:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eeca:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800eece:	790f      	ldrb	r7, [r1, #4]
    if (dma == 1U)
 800eed0:	f000 80b1 	beq.w	800f036 <USB_EPStartXfer+0x236>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eed4:	f8d6 c900 	ldr.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800eed8:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eeda:	f04c 4c04 	orr.w	ip, ip, #2214592512	; 0x84000000
 800eede:	f8c6 c900 	str.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800eee2:	f000 8088 	beq.w	800eff6 <USB_EPStartXfer+0x1f6>
}
 800eee6:	2000      	movs	r0, #0
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eeec:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
 800eef0:	4f62      	ldr	r7, [pc, #392]	; (800f07c <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eef2:	4d63      	ldr	r5, [pc, #396]	; (800f080 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eef4:	ea0c 0707 	and.w	r7, ip, r7
 800eef8:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eefc:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800ef00:	403d      	ands	r5, r7
 800ef02:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef06:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (epnum == 0U)
 800ef0a:	2c00      	cmp	r4, #0
 800ef0c:	d14e      	bne.n	800efac <USB_EPStartXfer+0x1ac>
        if (ep->xfer_len > ep->maxpacket)
 800ef0e:	688f      	ldr	r7, [r1, #8]
 800ef10:	42bb      	cmp	r3, r7
 800ef12:	f200 80a0 	bhi.w	800f056 <USB_EPStartXfer+0x256>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ef16:	692f      	ldr	r7, [r5, #16]
 800ef18:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800ef1c:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ef1e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800ef22:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800ef26:	ea47 070c 	orr.w	r7, r7, ip
 800ef2a:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800ef2c:	790f      	ldrb	r7, [r1, #4]
 800ef2e:	2f01      	cmp	r7, #1
 800ef30:	d04d      	beq.n	800efce <USB_EPStartXfer+0x1ce>
    if (dma == 1U)
 800ef32:	2a01      	cmp	r2, #1
 800ef34:	f000 808a 	beq.w	800f04c <USB_EPStartXfer+0x24c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef38:	f8d6 2900 	ldr.w	r2, [r6, #2304]	; 0x900
 800ef3c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ef40:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
        if (ep->xfer_len > 0U)
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d0ce      	beq.n	800eee6 <USB_EPStartXfer+0xe6>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ef48:	f004 040f 	and.w	r4, r4, #15
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800ef52:	40a3      	lsls	r3, r4
 800ef54:	4313      	orrs	r3, r2
 800ef56:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800ef5a:	e7c4      	b.n	800eee6 <USB_EPStartXfer+0xe6>
        ep->xfer_len = ep->maxpacket;
 800ef5c:	688c      	ldr	r4, [r1, #8]
 800ef5e:	610c      	str	r4, [r1, #16]
 800ef60:	e76a      	b.n	800ee38 <USB_EPStartXfer+0x38>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ef62:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800ef64:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ef66:	4e47      	ldr	r6, [pc, #284]	; (800f084 <USB_EPStartXfer+0x284>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ef68:	442c      	add	r4, r5
 800ef6a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef6e:	fbb4 f4f5 	udiv	r4, r4, r5
 800ef72:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ef74:	fb04 f505 	mul.w	r5, r4, r5
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ef78:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800ef7c:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ef80:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ef82:	f3c5 0512 	ubfx	r5, r5, #0, #19
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ef86:	ea44 0406 	orr.w	r4, r4, r6
 800ef8a:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ef8e:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800ef92:	ea45 0504 	orr.w	r5, r5, r4
 800ef96:	f8cc 5010 	str.w	r5, [ip, #16]
    if (dma == 1U)
 800ef9a:	f47f af5f 	bne.w	800ee5c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800ef9e:	68ca      	ldr	r2, [r1, #12]
 800efa0:	2a00      	cmp	r2, #0
 800efa2:	f43f af5b 	beq.w	800ee5c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800efa6:	f8cc 2014 	str.w	r2, [ip, #20]
 800efaa:	e757      	b.n	800ee5c <USB_EPStartXfer+0x5c>
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800efac:	f8d1 e008 	ldr.w	lr, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800efb0:	4f34      	ldr	r7, [pc, #208]	; (800f084 <USB_EPStartXfer+0x284>)
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800efb2:	eb03 0c0e 	add.w	ip, r3, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800efb6:	f8d5 8010 	ldr.w	r8, [r5, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800efba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800efbe:	fbbc fcfe 	udiv	ip, ip, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800efc2:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800efc6:	ea47 0708 	orr.w	r7, r7, r8
 800efca:	612f      	str	r7, [r5, #16]
 800efcc:	e7a7      	b.n	800ef1e <USB_EPStartXfer+0x11e>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800efce:	f8d5 c010 	ldr.w	ip, [r5, #16]
    if (dma == 1U)
 800efd2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800efd4:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 800efd8:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800efdc:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800efe0:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 800efe4:	f8c5 c010 	str.w	ip, [r5, #16]
    if (dma == 1U)
 800efe8:	d038      	beq.n	800f05c <USB_EPStartXfer+0x25c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800efea:	f8d6 7900 	ldr.w	r7, [r6, #2304]	; 0x900
 800efee:	f047 4704 	orr.w	r7, r7, #2214592512	; 0x84000000
 800eff2:	f8c6 7900 	str.w	r7, [r6, #2304]	; 0x900
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eff6:	f8d0 6808 	ldr.w	r6, [r0, #2056]	; 0x808
 800effa:	f416 7f80 	tst.w	r6, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800effe:	682e      	ldr	r6, [r5, #0]
 800f000:	bf0c      	ite	eq
 800f002:	f046 5600 	orreq.w	r6, r6, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f006:	f046 5680 	orrne.w	r6, r6, #268435456	; 0x10000000
 800f00a:	602e      	str	r6, [r5, #0]
  if (dma == 0U)
 800f00c:	2a00      	cmp	r2, #0
 800f00e:	f47f af6a 	bne.w	800eee6 <USB_EPStartXfer+0xe6>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f012:	b29b      	uxth	r3, r3
 800f014:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800f016:	089a      	lsrs	r2, r3, #2
 800f018:	f43f af65 	beq.w	800eee6 <USB_EPStartXfer+0xe6>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f01c:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f01e:	eb00 3404 	add.w	r4, r0, r4, lsl #12
 800f022:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800f026:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800f02a:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800f02e:	4299      	cmp	r1, r3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f030:	6022      	str	r2, [r4, #0]
    for (i = 0U; i < count32b; i++)
 800f032:	d1fa      	bne.n	800f02a <USB_EPStartXfer+0x22a>
 800f034:	e757      	b.n	800eee6 <USB_EPStartXfer+0xe6>
      if ((uint32_t)ep->dma_addr != 0U)
 800f036:	69cb      	ldr	r3, [r1, #28]
 800f038:	b95b      	cbnz	r3, 800f052 <USB_EPStartXfer+0x252>
      if (ep->type == EP_TYPE_ISOC)
 800f03a:	2f01      	cmp	r7, #1
 800f03c:	d011      	beq.n	800f062 <USB_EPStartXfer+0x262>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f03e:	682b      	ldr	r3, [r5, #0]
}
 800f040:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f042:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f046:	602b      	str	r3, [r5, #0]
}
 800f048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800f04c:	69cb      	ldr	r3, [r1, #28]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d0f5      	beq.n	800f03e <USB_EPStartXfer+0x23e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f052:	616b      	str	r3, [r5, #20]
 800f054:	e7f1      	b.n	800f03a <USB_EPStartXfer+0x23a>
          ep->xfer_len = ep->maxpacket;
 800f056:	463b      	mov	r3, r7
 800f058:	610f      	str	r7, [r1, #16]
 800f05a:	e75c      	b.n	800ef16 <USB_EPStartXfer+0x116>
      if ((uint32_t)ep->dma_addr != 0U)
 800f05c:	69cb      	ldr	r3, [r1, #28]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1f7      	bne.n	800f052 <USB_EPStartXfer+0x252>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f062:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800f066:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f06a:	682b      	ldr	r3, [r5, #0]
 800f06c:	bf0c      	ite	eq
 800f06e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f072:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800f076:	602b      	str	r3, [r5, #0]
 800f078:	e7e1      	b.n	800f03e <USB_EPStartXfer+0x23e>
 800f07a:	bf00      	nop
 800f07c:	fff80000 	.word	0xfff80000
 800f080:	e007ffff 	.word	0xe007ffff
 800f084:	1ff80000 	.word	0x1ff80000

0800f088 <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 800f088:	2300      	movs	r3, #0
{
 800f08a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800f08c:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 800f08e:	784b      	ldrb	r3, [r1, #1]
 800f090:	2b01      	cmp	r3, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f092:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f094:	d020      	beq.n	800f0d8 <USB_EPStopXfer+0x50>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f096:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800f09a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f09e:	6803      	ldr	r3, [r0, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	db02      	blt.n	800f0aa <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 800f0a4:	2000      	movs	r0, #0
}
 800f0a6:	b002      	add	sp, #8
 800f0a8:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f0aa:	6803      	ldr	r3, [r0, #0]
        if (count > 10000U)
 800f0ac:	f242 7210 	movw	r2, #10000	; 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f0b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f0b4:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f0b6:	6803      	ldr	r3, [r0, #0]
 800f0b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0bc:	6003      	str	r3, [r0, #0]
 800f0be:	e002      	b.n	800f0c6 <USB_EPStopXfer+0x3e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f0c0:	6803      	ldr	r3, [r0, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	daee      	bge.n	800f0a4 <USB_EPStopXfer+0x1c>
        count++;
 800f0c6:	9b01      	ldr	r3, [sp, #4]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800f0cc:	9b01      	ldr	r3, [sp, #4]
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d9f6      	bls.n	800f0c0 <USB_EPStopXfer+0x38>
          ret = HAL_ERROR;
 800f0d2:	2001      	movs	r0, #1
}
 800f0d4:	b002      	add	sp, #8
 800f0d6:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f0d8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800f0dc:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	2a00      	cmp	r2, #0
 800f0e4:	dade      	bge.n	800f0a4 <USB_EPStopXfer+0x1c>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f0e6:	681a      	ldr	r2, [r3, #0]
        if (count > 10000U)
 800f0e8:	f242 7110 	movw	r1, #10000	; 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f0ec:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800f0f0:	601a      	str	r2, [r3, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f0f8:	601a      	str	r2, [r3, #0]
 800f0fa:	e002      	b.n	800f102 <USB_EPStopXfer+0x7a>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	2a00      	cmp	r2, #0
 800f100:	dad0      	bge.n	800f0a4 <USB_EPStopXfer+0x1c>
        count++;
 800f102:	9a01      	ldr	r2, [sp, #4]
 800f104:	3201      	adds	r2, #1
 800f106:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 800f108:	9a01      	ldr	r2, [sp, #4]
 800f10a:	428a      	cmp	r2, r1
 800f10c:	d9f6      	bls.n	800f0fc <USB_EPStopXfer+0x74>
 800f10e:	e7e0      	b.n	800f0d2 <USB_EPStopXfer+0x4a>

0800f110 <USB_WritePacket>:
{
 800f110:	b410      	push	{r4}
 800f112:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800f116:	b964      	cbnz	r4, 800f132 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f118:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800f11a:	089b      	lsrs	r3, r3, #2
 800f11c:	d009      	beq.n	800f132 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f11e:	3201      	adds	r2, #1
 800f120:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f124:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800f128:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800f12c:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f12e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800f130:	d1fa      	bne.n	800f128 <USB_WritePacket+0x18>
}
 800f132:	2000      	movs	r0, #0
 800f134:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop

0800f13c <USB_ReadPacket>:
{
 800f13c:	b530      	push	{r4, r5, lr}
  for (i = 0U; i < count32b; i++)
 800f13e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800f142:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 800f146:	d00b      	beq.n	800f160 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f148:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800f14c:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800f14e:	2300      	movs	r3, #0
 800f150:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f152:	6822      	ldr	r2, [r4, #0]
  for (i = 0U; i < count32b; i++)
 800f154:	459e      	cmp	lr, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f156:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 800f15a:	d1f9      	bne.n	800f150 <USB_ReadPacket+0x14>
    pDest++;
 800f15c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 800f160:	b16d      	cbz	r5, 800f17e <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f162:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 800f166:	1e6b      	subs	r3, r5, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f168:	6802      	ldr	r2, [r0, #0]
      remaining_bytes--;
 800f16a:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f16c:	700a      	strb	r2, [r1, #0]
    } while (remaining_bytes != 0U);
 800f16e:	b12b      	cbz	r3, 800f17c <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f170:	0a10      	lsrs	r0, r2, #8
    } while (remaining_bytes != 0U);
 800f172:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f174:	7048      	strb	r0, [r1, #1]
    } while (remaining_bytes != 0U);
 800f176:	d001      	beq.n	800f17c <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f178:	0c12      	lsrs	r2, r2, #16
 800f17a:	708a      	strb	r2, [r1, #2]
      pDest++;
 800f17c:	4429      	add	r1, r5
}
 800f17e:	4608      	mov	r0, r1
 800f180:	bd30      	pop	{r4, r5, pc}
 800f182:	bf00      	nop

0800f184 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800f184:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800f186:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f188:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f18a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800f18e:	d00c      	beq.n	800f1aa <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f190:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800f194:	b10b      	cbz	r3, 800f19a <USB_EPSetStall+0x16>
 800f196:	2a00      	cmp	r2, #0
 800f198:	da14      	bge.n	800f1c4 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f19a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f19e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f1a2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f1a6:	2000      	movs	r0, #0
 800f1a8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f1aa:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f1ae:	2a00      	cmp	r2, #0
 800f1b0:	db00      	blt.n	800f1b4 <USB_EPSetStall+0x30>
 800f1b2:	b973      	cbnz	r3, 800f1d2 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f1b4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f1b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f1bc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f1c4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f1c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f1cc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800f1d0:	e7e3      	b.n	800f19a <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f1d2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f1d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f1da:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f1de:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f1e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f1e6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800f1ea:	e7e9      	b.n	800f1c0 <USB_EPSetStall+0x3c>

0800f1ec <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800f1ec:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800f1ee:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f1f0:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f1f2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800f1f6:	d013      	beq.n	800f220 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f1f8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f1fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f200:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f204:	790b      	ldrb	r3, [r1, #4]
 800f206:	3b02      	subs	r3, #2
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d901      	bls.n	800f210 <USB_EPClearStall+0x24>
}
 800f20c:	2000      	movs	r0, #0
 800f20e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f210:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f218:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f21c:	2000      	movs	r0, #0
 800f21e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f220:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f224:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f228:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f22c:	790b      	ldrb	r3, [r1, #4]
 800f22e:	3b02      	subs	r3, #2
 800f230:	2b01      	cmp	r3, #1
 800f232:	d8eb      	bhi.n	800f20c <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f234:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f23c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800f240:	2000      	movs	r0, #0
 800f242:	4770      	bx	lr

0800f244 <USB_SetDevAddress>:
{
 800f244:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f246:	0109      	lsls	r1, r1, #4
}
 800f248:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f24a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f24e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f252:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800f256:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f25a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800f25e:	4311      	orrs	r1, r2
 800f260:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop

0800f268 <USB_DevConnect>:
{
 800f268:	4603      	mov	r3, r0
}
 800f26a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f26c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f270:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f274:	f022 0203 	bic.w	r2, r2, #3
 800f278:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f27c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800f280:	f023 0302 	bic.w	r3, r3, #2
 800f284:	604b      	str	r3, [r1, #4]
}
 800f286:	4770      	bx	lr

0800f288 <USB_DevDisconnect>:
{
 800f288:	4603      	mov	r3, r0
}
 800f28a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f28c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f290:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f294:	f022 0203 	bic.w	r2, r2, #3
 800f298:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f29c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800f2a0:	f043 0302 	orr.w	r3, r3, #2
 800f2a4:	604b      	str	r3, [r1, #4]
}
 800f2a6:	4770      	bx	lr

0800f2a8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800f2a8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800f2aa:	6980      	ldr	r0, [r0, #24]
}
 800f2ac:	4010      	ands	r0, r2
 800f2ae:	4770      	bx	lr

0800f2b0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f2b0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f2b4:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800f2b8:	4018      	ands	r0, r3
}
 800f2ba:	0c00      	lsrs	r0, r0, #16
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop

0800f2c0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f2c0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f2c4:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800f2c8:	4018      	ands	r0, r3
}
 800f2ca:	b280      	uxth	r0, r0
 800f2cc:	4770      	bx	lr
 800f2ce:	bf00      	nop

0800f2d0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f2d0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f2d4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f2d8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f2dc:	6940      	ldr	r0, [r0, #20]
}
 800f2de:	4010      	ands	r0, r2
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop

0800f2e4 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800f2e4:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2e8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2ec:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2f0:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2f4:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2f8:	40cb      	lsrs	r3, r1
 800f2fa:	01db      	lsls	r3, r3, #7
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	4313      	orrs	r3, r2
}
 800f300:	4018      	ands	r0, r3
 800f302:	4770      	bx	lr

0800f304 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800f304:	6940      	ldr	r0, [r0, #20]
}
 800f306:	f000 0001 	and.w	r0, r0, #1
 800f30a:	4770      	bx	lr

0800f30c <USB_ActivateSetup>:
{
 800f30c:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f30e:	4a09      	ldr	r2, [pc, #36]	; (800f334 <USB_ActivateSetup+0x28>)
}
 800f310:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f312:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800f316:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f318:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800f31c:	4022      	ands	r2, r4
}
 800f31e:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f322:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f326:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800f32a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f32e:	604b      	str	r3, [r1, #4]
}
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	fffff800 	.word	0xfffff800

0800f338 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f338:	4b14      	ldr	r3, [pc, #80]	; (800f38c <USB_EP0_OutStart+0x54>)
{
 800f33a:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f33c:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f33e:	429c      	cmp	r4, r3
 800f340:	d81a      	bhi.n	800f378 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f342:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f346:	2300      	movs	r3, #0
  if (dma == 1U)
 800f348:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f34a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f34c:	6903      	ldr	r3, [r0, #16]
 800f34e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f352:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f354:	6903      	ldr	r3, [r0, #16]
 800f356:	f043 0318 	orr.w	r3, r3, #24
 800f35a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f35c:	6903      	ldr	r3, [r0, #16]
 800f35e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f362:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800f364:	d104      	bne.n	800f370 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f366:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f368:	6803      	ldr	r3, [r0, #0]
 800f36a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f36e:	6003      	str	r3, [r0, #0]
}
 800f370:	2000      	movs	r0, #0
 800f372:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f376:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f378:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f37c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800f380:	2b00      	cmp	r3, #0
 800f382:	dae0      	bge.n	800f346 <USB_EP0_OutStart+0xe>
}
 800f384:	2000      	movs	r0, #0
 800f386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f38a:	4770      	bx	lr
 800f38c:	4f54300a 	.word	0x4f54300a

0800f390 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f390:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f394:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 800f398:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f39a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 800f39e:	b194      	cbz	r4, 800f3c6 <USBD_CDC_EP0_RxReady+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f3a0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 800f3a4:	b16b      	cbz	r3, 800f3c2 <USBD_CDC_EP0_RxReady+0x32>
 800f3a6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800f3aa:	28ff      	cmp	r0, #255	; 0xff
 800f3ac:	d009      	beq.n	800f3c2 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	4621      	mov	r1, r4
 800f3b2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800f3b6:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800f3b8:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800f3ba:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800f3bc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800f3c0:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800f3c2:	2000      	movs	r0, #0
}
 800f3c4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f3c6:	2003      	movs	r0, #3
}
 800f3c8:	bd10      	pop	{r4, pc}
 800f3ca:	bf00      	nop

0800f3cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f3cc:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f3ce:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800f3d0:	4801      	ldr	r0, [pc, #4]	; (800f3d8 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f3d2:	801a      	strh	r2, [r3, #0]
}
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	2400039c 	.word	0x2400039c

0800f3dc <USBD_CDC_GetFSCfgDesc>:
{
 800f3dc:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f3de:	2182      	movs	r1, #130	; 0x82
{
 800f3e0:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f3e2:	480f      	ldr	r0, [pc, #60]	; (800f420 <USBD_CDC_GetFSCfgDesc+0x44>)
 800f3e4:	f000 fc02 	bl	800fbec <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f3e8:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f3ea:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f3ec:	480c      	ldr	r0, [pc, #48]	; (800f420 <USBD_CDC_GetFSCfgDesc+0x44>)
 800f3ee:	f000 fbfd 	bl	800fbec <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f3f2:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f3f4:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f3f6:	480a      	ldr	r0, [pc, #40]	; (800f420 <USBD_CDC_GetFSCfgDesc+0x44>)
 800f3f8:	f000 fbf8 	bl	800fbec <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800f3fc:	b10d      	cbz	r5, 800f402 <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f3fe:	2210      	movs	r2, #16
 800f400:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800f402:	b11c      	cbz	r4, 800f40c <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f404:	2100      	movs	r1, #0
 800f406:	2240      	movs	r2, #64	; 0x40
 800f408:	7161      	strb	r1, [r4, #5]
 800f40a:	7122      	strb	r2, [r4, #4]
  if (pEpInDesc != NULL)
 800f40c:	b118      	cbz	r0, 800f416 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f40e:	2100      	movs	r1, #0
 800f410:	2240      	movs	r2, #64	; 0x40
 800f412:	7141      	strb	r1, [r0, #5]
 800f414:	7102      	strb	r2, [r0, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f416:	2343      	movs	r3, #67	; 0x43
}
 800f418:	4801      	ldr	r0, [pc, #4]	; (800f420 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f41a:	8033      	strh	r3, [r6, #0]
}
 800f41c:	bd70      	pop	{r4, r5, r6, pc}
 800f41e:	bf00      	nop
 800f420:	24000358 	.word	0x24000358

0800f424 <USBD_CDC_GetHSCfgDesc>:
{
 800f424:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f426:	2182      	movs	r1, #130	; 0x82
{
 800f428:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f42a:	480f      	ldr	r0, [pc, #60]	; (800f468 <USBD_CDC_GetHSCfgDesc+0x44>)
 800f42c:	f000 fbde 	bl	800fbec <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f430:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f432:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f434:	480c      	ldr	r0, [pc, #48]	; (800f468 <USBD_CDC_GetHSCfgDesc+0x44>)
 800f436:	f000 fbd9 	bl	800fbec <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f43a:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f43c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f43e:	480a      	ldr	r0, [pc, #40]	; (800f468 <USBD_CDC_GetHSCfgDesc+0x44>)
 800f440:	f000 fbd4 	bl	800fbec <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800f444:	b10d      	cbz	r5, 800f44a <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f446:	2210      	movs	r2, #16
 800f448:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800f44a:	b11c      	cbz	r4, 800f454 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f44c:	2100      	movs	r1, #0
 800f44e:	2202      	movs	r2, #2
 800f450:	7121      	strb	r1, [r4, #4]
 800f452:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800f454:	b118      	cbz	r0, 800f45e <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f456:	2100      	movs	r1, #0
 800f458:	2202      	movs	r2, #2
 800f45a:	7101      	strb	r1, [r0, #4]
 800f45c:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f45e:	2343      	movs	r3, #67	; 0x43
}
 800f460:	4801      	ldr	r0, [pc, #4]	; (800f468 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f462:	8033      	strh	r3, [r6, #0]
}
 800f464:	bd70      	pop	{r4, r5, r6, pc}
 800f466:	bf00      	nop
 800f468:	24000358 	.word	0x24000358

0800f46c <USBD_CDC_DataOut>:
{
 800f46c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f46e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f472:	33b0      	adds	r3, #176	; 0xb0
 800f474:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f478:	b195      	cbz	r5, 800f4a0 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f47a:	4604      	mov	r4, r0
 800f47c:	f001 f9f4 	bl	8010868 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f480:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800f484:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f488:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f48c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f490:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800f494:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f49c:	2000      	movs	r0, #0
}
 800f49e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800f4a0:	2003      	movs	r0, #3
}
 800f4a2:	bd38      	pop	{r3, r4, r5, pc}

0800f4a4 <USBD_CDC_DataIn>:
{
 800f4a4:	b570      	push	{r4, r5, r6, lr}
 800f4a6:	f8d0 42d4 	ldr.w	r4, [r0, #724]	; 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f4aa:	f8d0 62c8 	ldr.w	r6, [r0, #712]	; 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f4ae:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 800f4b2:	f8de 52c0 	ldr.w	r5, [lr, #704]	; 0x2c0
 800f4b6:	b365      	cbz	r5, 800f512 <USBD_CDC_DataIn+0x6e>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f4b8:	f001 040f 	and.w	r4, r1, #15
 800f4bc:	460a      	mov	r2, r1
 800f4be:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 800f4c2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800f4c6:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800f4ca:	b96b      	cbnz	r3, 800f4e8 <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f4cc:	f8de 32c4 	ldr.w	r3, [lr, #708]	; 0x2c4
    hcdc->TxState = 0U;
 800f4d0:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f4d2:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800f4d4:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f4d8:	b1cb      	cbz	r3, 800f50e <USBD_CDC_DataIn+0x6a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f4da:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800f4de:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800f4e2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f4e4:	4620      	mov	r0, r4
}
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f4e8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800f4ec:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800f4f0:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f4f2:	fbb3 f6f4 	udiv	r6, r3, r4
 800f4f6:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f4fa:	2c00      	cmp	r4, #0
 800f4fc:	d1e6      	bne.n	800f4cc <USBD_CDC_DataIn+0x28>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f4fe:	4623      	mov	r3, r4
 800f500:	4622      	mov	r2, r4
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f502:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f506:	f001 f993 	bl	8010830 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800f50a:	4620      	mov	r0, r4
}
 800f50c:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800f50e:	4618      	mov	r0, r3
}
 800f510:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800f512:	2003      	movs	r0, #3
}
 800f514:	bd70      	pop	{r4, r5, r6, pc}
 800f516:	bf00      	nop

0800f518 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f518:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f51c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 800f520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f522:	4604      	mov	r4, r0
 800f524:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 800f526:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f528:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
  uint8_t ifalt = 0U;
 800f52c:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 800f530:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 800f534:	2f00      	cmp	r7, #0
 800f536:	d066      	beq.n	800f606 <USBD_CDC_Setup+0xee>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f538:	f891 c000 	ldrb.w	ip, [r1]
 800f53c:	460d      	mov	r5, r1
 800f53e:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 800f542:	d01d      	beq.n	800f580 <USBD_CDC_Setup+0x68>
 800f544:	2e20      	cmp	r6, #32
 800f546:	d007      	beq.n	800f558 <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 800f548:	4629      	mov	r1, r5
 800f54a:	4620      	mov	r0, r4
          ret = USBD_FAIL;
 800f54c:	2603      	movs	r6, #3
          USBD_CtlError(pdev, req);
 800f54e:	f000 fe0d 	bl	801016c <USBD_CtlError>
}
 800f552:	4630      	mov	r0, r6
 800f554:	b003      	add	sp, #12
 800f556:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800f558:	88ca      	ldrh	r2, [r1, #6]
 800f55a:	b37a      	cbz	r2, 800f5bc <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 800f55c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f560:	d155      	bne.n	800f60e <USBD_CDC_Setup+0xf6>
          hcdc->CmdOpCode = req->bRequest;
 800f562:	784b      	ldrb	r3, [r1, #1]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f564:	2a3f      	cmp	r2, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 800f566:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f56a:	d960      	bls.n	800f62e <USBD_CDC_Setup+0x116>
 800f56c:	2340      	movs	r3, #64	; 0x40
 800f56e:	461a      	mov	r2, r3
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f570:	4639      	mov	r1, r7
 800f572:	4620      	mov	r0, r4
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f574:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 800f578:	2600      	movs	r6, #0
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f57a:	f000 fe45 	bl	8010208 <USBD_CtlPrepareRx>
 800f57e:	e7e8      	b.n	800f552 <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 800f580:	784b      	ldrb	r3, [r1, #1]
 800f582:	2b0b      	cmp	r3, #11
 800f584:	d8e0      	bhi.n	800f548 <USBD_CDC_Setup+0x30>
 800f586:	a201      	add	r2, pc, #4	; (adr r2, 800f58c <USBD_CDC_Setup+0x74>)
 800f588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f58c:	0800f5ef 	.word	0x0800f5ef
 800f590:	0800f553 	.word	0x0800f553
 800f594:	0800f549 	.word	0x0800f549
 800f598:	0800f549 	.word	0x0800f549
 800f59c:	0800f549 	.word	0x0800f549
 800f5a0:	0800f549 	.word	0x0800f549
 800f5a4:	0800f549 	.word	0x0800f549
 800f5a8:	0800f549 	.word	0x0800f549
 800f5ac:	0800f549 	.word	0x0800f549
 800f5b0:	0800f549 	.word	0x0800f549
 800f5b4:	0800f5d9 	.word	0x0800f5d9
 800f5b8:	0800f5cf 	.word	0x0800f5cf
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f5bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  USBD_StatusTypeDef ret = USBD_OK;
 800f5c0:	4616      	mov	r6, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f5c2:	7848      	ldrb	r0, [r1, #1]
 800f5c4:	689b      	ldr	r3, [r3, #8]
 800f5c6:	4798      	blx	r3
}
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	b003      	add	sp, #12
 800f5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f5ce:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800f5d2:	2b03      	cmp	r3, #3
 800f5d4:	d0bd      	beq.n	800f552 <USBD_CDC_Setup+0x3a>
 800f5d6:	e7b7      	b.n	800f548 <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5d8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800f5dc:	2b03      	cmp	r3, #3
 800f5de:	d1b3      	bne.n	800f548 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	f10d 0105 	add.w	r1, sp, #5
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f000 fdf6 	bl	80101d8 <USBD_CtlSendData>
 800f5ec:	e7b1      	b.n	800f552 <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5ee:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800f5f2:	2a03      	cmp	r2, #3
 800f5f4:	d1a8      	bne.n	800f548 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f5f6:	2202      	movs	r2, #2
 800f5f8:	f10d 0106 	add.w	r1, sp, #6
 800f5fc:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800f5fe:	461e      	mov	r6, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f600:	f000 fdea 	bl	80101d8 <USBD_CtlSendData>
 800f604:	e7a5      	b.n	800f552 <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 800f606:	2603      	movs	r6, #3
}
 800f608:	4630      	mov	r0, r6
 800f60a:	b003      	add	sp, #12
 800f60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f60e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f612:	4639      	mov	r1, r7
  USBD_StatusTypeDef ret = USBD_OK;
 800f614:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f616:	7868      	ldrb	r0, [r5, #1]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f61c:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f61e:	4639      	mov	r1, r7
 800f620:	4620      	mov	r0, r4
 800f622:	2a07      	cmp	r2, #7
 800f624:	bf28      	it	cs
 800f626:	2207      	movcs	r2, #7
 800f628:	f000 fdd6 	bl	80101d8 <USBD_CtlSendData>
 800f62c:	e791      	b.n	800f552 <USBD_CDC_Setup+0x3a>
 800f62e:	b2d3      	uxtb	r3, r2
 800f630:	e79e      	b.n	800f570 <USBD_CDC_Setup+0x58>
 800f632:	bf00      	nop

0800f634 <USBD_CDC_DeInit>:
{
 800f634:	b538      	push	{r3, r4, r5, lr}
 800f636:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f638:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f63a:	2181      	movs	r1, #129	; 0x81
 800f63c:	f001 f8ac 	bl	8010798 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f640:	2101      	movs	r1, #1
 800f642:	4620      	mov	r0, r4
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f644:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f646:	f001 f8a7 	bl	8010798 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f64a:	2182      	movs	r1, #130	; 0x82
 800f64c:	4620      	mov	r0, r4
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f64e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f652:	f001 f8a1 	bl	8010798 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f656:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f65a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f65c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f660:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 800f664:	b18a      	cbz	r2, 800f68a <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f666:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f66e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800f672:	33b0      	adds	r3, #176	; 0xb0
 800f674:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800f678:	f001 f8fe 	bl	8010878 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f67c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800f680:	33b0      	adds	r3, #176	; 0xb0
 800f682:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800f686:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800f68a:	2000      	movs	r0, #0
 800f68c:	bd38      	pop	{r3, r4, r5, pc}
 800f68e:	bf00      	nop

0800f690 <USBD_CDC_Init>:
{
 800f690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f694:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f696:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f69a:	f001 f8e9 	bl	8010870 <USBD_static_malloc>
  if (hcdc == NULL)
 800f69e:	4605      	mov	r5, r0
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d061      	beq.n	800f768 <USBD_CDC_Init+0xd8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f6a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	f001 ff32 	bl	8011512 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f6ae:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800f6b2:	33b0      	adds	r3, #176	; 0xb0
 800f6b4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6b8:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f6ba:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6be:	b3d3      	cbz	r3, 800f736 <USBD_CDC_Init+0xa6>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f6c0:	2340      	movs	r3, #64	; 0x40
 800f6c2:	2202      	movs	r2, #2
 800f6c4:	2181      	movs	r1, #129	; 0x81
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f001 f854 	bl	8010774 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f6cc:	2101      	movs	r1, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f6ce:	2340      	movs	r3, #64	; 0x40
 800f6d0:	2202      	movs	r2, #2
 800f6d2:	4620      	mov	r0, r4
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f6d4:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f6d6:	f001 f84d 	bl	8010774 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f6da:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f6dc:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f6de:	2308      	movs	r3, #8
 800f6e0:	2182      	movs	r1, #130	; 0x82
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f6e2:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f6ea:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f6ee:	f001 f841 	bl	8010774 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f6f2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxBuffer = NULL;
 800f6f6:	2600      	movs	r6, #0
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f6f8:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f6fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 800f700:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f704:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 800f70c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 800f710:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800f714:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 800f718:	b382      	cbz	r2, 800f77c <USBD_CDC_Init+0xec>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f71a:	f894 8010 	ldrb.w	r8, [r4, #16]
 800f71e:	f1b8 0f00 	cmp.w	r8, #0
 800f722:	d118      	bne.n	800f756 <USBD_CDC_Init+0xc6>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f724:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f728:	4639      	mov	r1, r7
 800f72a:	4620      	mov	r0, r4
 800f72c:	f001 f88e 	bl	801084c <USBD_LL_PrepareReceive>
}
 800f730:	4640      	mov	r0, r8
 800f732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f73a:	2202      	movs	r2, #2
 800f73c:	2181      	movs	r1, #129	; 0x81
 800f73e:	4620      	mov	r0, r4
 800f740:	f001 f818 	bl	8010774 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f744:	2101      	movs	r1, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f746:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f74a:	2202      	movs	r2, #2
 800f74c:	4620      	mov	r0, r4
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f74e:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f750:	f001 f810 	bl	8010774 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f754:	e7c1      	b.n	800f6da <USBD_CDC_Init+0x4a>
  return (uint8_t)USBD_OK;
 800f756:	46b0      	mov	r8, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f758:	2340      	movs	r3, #64	; 0x40
 800f75a:	4639      	mov	r1, r7
 800f75c:	4620      	mov	r0, r4
 800f75e:	f001 f875 	bl	801084c <USBD_LL_PrepareReceive>
}
 800f762:	4640      	mov	r0, r8
 800f764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f768:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 800f76c:	f04f 0802 	mov.w	r8, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f770:	33b0      	adds	r3, #176	; 0xb0
 800f772:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 800f776:	4640      	mov	r0, r8
 800f778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800f77c:	f04f 0802 	mov.w	r8, #2
 800f780:	e7d6      	b.n	800f730 <USBD_CDC_Init+0xa0>
 800f782:	bf00      	nop

0800f784 <USBD_CDC_GetOtherSpeedCfgDesc>:
 800f784:	b570      	push	{r4, r5, r6, lr}
 800f786:	2182      	movs	r1, #130	; 0x82
 800f788:	4606      	mov	r6, r0
 800f78a:	480f      	ldr	r0, [pc, #60]	; (800f7c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800f78c:	f000 fa2e 	bl	800fbec <USBD_GetEpDesc>
 800f790:	2101      	movs	r1, #1
 800f792:	4605      	mov	r5, r0
 800f794:	480c      	ldr	r0, [pc, #48]	; (800f7c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800f796:	f000 fa29 	bl	800fbec <USBD_GetEpDesc>
 800f79a:	2181      	movs	r1, #129	; 0x81
 800f79c:	4604      	mov	r4, r0
 800f79e:	480a      	ldr	r0, [pc, #40]	; (800f7c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800f7a0:	f000 fa24 	bl	800fbec <USBD_GetEpDesc>
 800f7a4:	b10d      	cbz	r5, 800f7aa <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 800f7a6:	2210      	movs	r2, #16
 800f7a8:	71aa      	strb	r2, [r5, #6]
 800f7aa:	b11c      	cbz	r4, 800f7b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	2240      	movs	r2, #64	; 0x40
 800f7b0:	7161      	strb	r1, [r4, #5]
 800f7b2:	7122      	strb	r2, [r4, #4]
 800f7b4:	b118      	cbz	r0, 800f7be <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	2240      	movs	r2, #64	; 0x40
 800f7ba:	7141      	strb	r1, [r0, #5]
 800f7bc:	7102      	strb	r2, [r0, #4]
 800f7be:	2343      	movs	r3, #67	; 0x43
 800f7c0:	4801      	ldr	r0, [pc, #4]	; (800f7c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800f7c2:	8033      	strh	r3, [r6, #0]
 800f7c4:	bd70      	pop	{r4, r5, r6, pc}
 800f7c6:	bf00      	nop
 800f7c8:	24000358 	.word	0x24000358

0800f7cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f7cc:	4603      	mov	r3, r0
  if (fops == NULL)
 800f7ce:	b139      	cbz	r1, 800f7e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800f7d0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4

  return (uint8_t)USBD_OK;
 800f7d4:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 800f7d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f7da:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 800f7de:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f7e0:	2003      	movs	r0, #3
}
 800f7e2:	4770      	bx	lr

0800f7e4 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f7e4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f7e8:	33b0      	adds	r3, #176	; 0xb0
 800f7ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f7ee:	b12b      	cbz	r3, 800f7fc <USBD_CDC_SetTxBuffer+0x18>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800f7f0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800f7f2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f7f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800f7fa:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f7fc:	2003      	movs	r0, #3
}
 800f7fe:	4770      	bx	lr

0800f800 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f800:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f804:	33b0      	adds	r3, #176	; 0xb0
 800f806:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800f80a:	b11b      	cbz	r3, 800f814 <USBD_CDC_SetRxBuffer+0x14>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800f80c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800f80e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800f812:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f814:	2003      	movs	r0, #3
}
 800f816:	4770      	bx	lr

0800f818 <USBD_CDC_TransmitPacket>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f818:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f81c:	33b0      	adds	r3, #176	; 0xb0
 800f81e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f822:	b192      	cbz	r2, 800f84a <USBD_CDC_TransmitPacket+0x32>
{
 800f824:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800f826:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800f82a:	b10c      	cbz	r4, 800f830 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f82c:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800f82e:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800f830:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f832:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800f834:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f838:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f83c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f840:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f842:	f000 fff5 	bl	8010830 <USBD_LL_Transmit>
    ret = USBD_OK;
 800f846:	4620      	mov	r0, r4
}
 800f848:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f84a:	2003      	movs	r0, #3
}
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop

0800f850 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f850:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800f854:	32b0      	adds	r2, #176	; 0xb0
 800f856:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
{
 800f85a:	b510      	push	{r4, lr}
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f85c:	b19a      	cbz	r2, 800f886 <USBD_CDC_ReceivePacket+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f85e:	7c04      	ldrb	r4, [r0, #16]
 800f860:	b144      	cbz	r4, 800f874 <USBD_CDC_ReceivePacket+0x24>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f862:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f864:	2340      	movs	r3, #64	; 0x40
 800f866:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800f86a:	2101      	movs	r1, #1
 800f86c:	f000 ffee 	bl	801084c <USBD_LL_PrepareReceive>
}
 800f870:	4620      	mov	r0, r4
 800f872:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f874:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f878:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800f87c:	2101      	movs	r1, #1
 800f87e:	f000 ffe5 	bl	801084c <USBD_LL_PrepareReceive>
}
 800f882:	4620      	mov	r0, r4
 800f884:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f886:	2403      	movs	r4, #3
}
 800f888:	4620      	mov	r0, r4
 800f88a:	bd10      	pop	{r4, pc}

0800f88c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f88c:	b178      	cbz	r0, 800f8ae <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f88e:	2300      	movs	r3, #0
 800f890:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800f894:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f898:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f89c:	b109      	cbz	r1, 800f8a2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800f89e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f8a2:	2301      	movs	r3, #1
  pdev->id = id;
 800f8a4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f8a6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f8aa:	f000 bf19 	b.w	80106e0 <USBD_LL_Init>

  return ret;
}
 800f8ae:	2003      	movs	r0, #3
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop

0800f8b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f8b4:	b510      	push	{r4, lr}
  uint16_t len = 0U;
 800f8b6:	2300      	movs	r3, #0
{
 800f8b8:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800f8ba:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800f8be:	b189      	cbz	r1, 800f8e4 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f8c0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800f8c2:	4604      	mov	r4, r0
  pdev->pClass[0] = pclass;
 800f8c4:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f8c8:	b123      	cbz	r3, 800f8d4 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f8ca:	f10d 0006 	add.w	r0, sp, #6
 800f8ce:	4798      	blx	r3
 800f8d0:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f8d4:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 800f8d8:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 800f8da:	3301      	adds	r3, #1
 800f8dc:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 800f8e0:	b002      	add	sp, #8
 800f8e2:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800f8e4:	2003      	movs	r0, #3
}
 800f8e6:	b002      	add	sp, #8
 800f8e8:	bd10      	pop	{r4, pc}
 800f8ea:	bf00      	nop

0800f8ec <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f8ec:	f000 bf34 	b.w	8010758 <USBD_LL_Start>

0800f8f0 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f8f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800f8f4:	b10b      	cbz	r3, 800f8fa <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop

0800f900 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f900:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f902:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800f90a:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800f90c:	bf18      	it	ne
 800f90e:	2003      	movne	r0, #3
 800f910:	bd08      	pop	{r3, pc}
 800f912:	bf00      	nop

0800f914 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f914:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f916:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800f91a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f91c:	4628      	mov	r0, r5
 800f91e:	f000 fc19 	bl	8010154 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 800f922:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 800f926:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800f92a:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800f92c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800f930:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800f934:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d009      	beq.n	800f950 <USBD_LL_SetupStage+0x3c>
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d013      	beq.n	800f968 <USBD_LL_SetupStage+0x54>
 800f940:	b163      	cbz	r3, 800f95c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f942:	4620      	mov	r0, r4
 800f944:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800f948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f94c:	f000 bf32 	b.w	80107b4 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f950:	4629      	mov	r1, r5
 800f952:	4620      	mov	r0, r4
}
 800f954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f958:	f000 bb0c 	b.w	800ff74 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f95c:	4629      	mov	r1, r5
 800f95e:	4620      	mov	r0, r4
}
 800f960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f964:	f000 b958 	b.w	800fc18 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f968:	4629      	mov	r1, r5
 800f96a:	4620      	mov	r0, r4
}
 800f96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f970:	f000 bb42 	b.w	800fff8 <USBD_StdEPReq>

0800f974 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f974:	b570      	push	{r4, r5, r6, lr}
 800f976:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800f978:	b931      	cbnz	r1, 800f988 <USBD_LL_DataOutStage+0x14>
 800f97a:	460b      	mov	r3, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f97c:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 800f980:	2903      	cmp	r1, #3
 800f982:	d010      	beq.n	800f9a6 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 800f984:	2000      	movs	r0, #0
 800f986:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f988:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f98c:	2b03      	cmp	r3, #3
 800f98e:	d1f9      	bne.n	800f984 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 800f990:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800f994:	699b      	ldr	r3, [r3, #24]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d0f4      	beq.n	800f984 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 800f99a:	2200      	movs	r2, #0
}
 800f99c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800f9a0:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f9a4:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800f9a6:	e9d0 1557 	ldrd	r1, r5, [r0, #348]	; 0x15c
 800f9aa:	42a9      	cmp	r1, r5
 800f9ac:	d808      	bhi.n	800f9c0 <USBD_LL_DataOutStage+0x4c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9ae:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800f9b2:	2a03      	cmp	r2, #3
 800f9b4:	d00f      	beq.n	800f9d6 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f000 fc3e 	bl	8010238 <USBD_CtlSendStatus>
}
 800f9bc:	2000      	movs	r0, #0
 800f9be:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800f9c0:	1b4b      	subs	r3, r1, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f9c2:	4611      	mov	r1, r2
 800f9c4:	462a      	mov	r2, r5
 800f9c6:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800f9c8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f9cc:	bf28      	it	cs
 800f9ce:	461a      	movcs	r2, r3
 800f9d0:	f000 fc28 	bl	8010224 <USBD_CtlContinueRx>
 800f9d4:	e7d6      	b.n	800f984 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f9d6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800f9da:	6912      	ldr	r2, [r2, #16]
 800f9dc:	2a00      	cmp	r2, #0
 800f9de:	d0ea      	beq.n	800f9b6 <USBD_LL_DataOutStage+0x42>
              pdev->classId = idx;
 800f9e0:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f9e4:	4790      	blx	r2
 800f9e6:	e7e6      	b.n	800f9b6 <USBD_LL_DataOutStage+0x42>

0800f9e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f9e8:	b570      	push	{r4, r5, r6, lr}
 800f9ea:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f9ec:	b959      	cbnz	r1, 800fa06 <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f9ee:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800f9f2:	2b02      	cmp	r3, #2
 800f9f4:	d016      	beq.n	800fa24 <USBD_LL_DataInStage+0x3c>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f9f6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800f9fa:	b113      	cbz	r3, 800fa02 <USBD_LL_DataInStage+0x1a>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800fa02:	2000      	movs	r0, #0
 800fa04:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa06:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fa0a:	2b03      	cmp	r3, #3
 800fa0c:	d1f9      	bne.n	800fa02 <USBD_LL_DataInStage+0x1a>
        if (pdev->pClass[idx]->DataIn != NULL)
 800fa0e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fa12:	695b      	ldr	r3, [r3, #20]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d0f4      	beq.n	800fa02 <USBD_LL_DataInStage+0x1a>
          pdev->classId = idx;
 800fa18:	2200      	movs	r2, #0
}
 800fa1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800fa1e:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fa22:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800fa24:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800fa28:	460d      	mov	r5, r1
 800fa2a:	42b3      	cmp	r3, r6
 800fa2c:	d810      	bhi.n	800fa50 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800fa2e:	d01c      	beq.n	800fa6a <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa30:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800fa34:	2b03      	cmp	r3, #3
 800fa36:	d02b      	beq.n	800fa90 <USBD_LL_DataInStage+0xa8>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa38:	2180      	movs	r1, #128	; 0x80
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f000 feba 	bl	80107b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fa40:	4620      	mov	r0, r4
 800fa42:	f000 fc05 	bl	8010250 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 800fa46:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d0d9      	beq.n	800fa02 <USBD_LL_DataInStage+0x1a>
 800fa4e:	e7d5      	b.n	800f9fc <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800fa50:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fa52:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800fa54:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fa56:	461a      	mov	r2, r3
 800fa58:	f000 fbcc 	bl	80101f4 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa5c:	462b      	mov	r3, r5
 800fa5e:	462a      	mov	r2, r5
 800fa60:	4629      	mov	r1, r5
 800fa62:	4620      	mov	r0, r4
 800fa64:	f000 fef2 	bl	801084c <USBD_LL_PrepareReceive>
 800fa68:	e7c5      	b.n	800f9f6 <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800fa6a:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d8df      	bhi.n	800fa30 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 800fa70:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d2db      	bcs.n	800fa30 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fa78:	460a      	mov	r2, r1
 800fa7a:	f000 fbbb 	bl	80101f4 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa7e:	462b      	mov	r3, r5
 800fa80:	462a      	mov	r2, r5
 800fa82:	4629      	mov	r1, r5
 800fa84:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800fa86:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa8a:	f000 fedf 	bl	801084c <USBD_LL_PrepareReceive>
 800fa8e:	e7b2      	b.n	800f9f6 <USBD_LL_DataInStage+0xe>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fa90:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d0ce      	beq.n	800fa38 <USBD_LL_DataInStage+0x50>
              pdev->classId = 0U;
 800fa9a:	2200      	movs	r2, #0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fa9c:	4620      	mov	r0, r4
              pdev->classId = 0U;
 800fa9e:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800faa2:	4798      	blx	r3
 800faa4:	e7c8      	b.n	800fa38 <USBD_LL_DataInStage+0x50>
 800faa6:	bf00      	nop

0800faa8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800faa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800faaa:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800faac:	2201      	movs	r2, #1
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800faae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
{
 800fab2:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fab4:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800fab8:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800faba:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800fabe:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800fac2:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 800fac6:	b11b      	cbz	r3, 800fad0 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	b10b      	cbz	r3, 800fad0 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800facc:	4798      	blx	r3
 800face:	b9b0      	cbnz	r0, 800fafe <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 800fad0:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fad2:	2340      	movs	r3, #64	; 0x40
 800fad4:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fad6:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fad8:	4620      	mov	r0, r4

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fada:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fadc:	4611      	mov	r1, r2
 800fade:	f000 fe49 	bl	8010774 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fae2:	2200      	movs	r2, #0
 800fae4:	462b      	mov	r3, r5
 800fae6:	2180      	movs	r1, #128	; 0x80
 800fae8:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800faea:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800faee:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800faf2:	f000 fe3f 	bl	8010774 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return ret;
}
 800faf6:	4638      	mov	r0, r7
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800faf8:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fafa:	6225      	str	r5, [r4, #32]
}
 800fafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 800fafe:	2703      	movs	r7, #3
 800fb00:	e7e7      	b.n	800fad2 <USBD_LL_Reset+0x2a>
 800fb02:	bf00      	nop

0800fb04 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fb04:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800fb06:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800fb08:	7419      	strb	r1, [r3, #16]
}
 800fb0a:	4770      	bx	lr

0800fb0c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fb0c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 800fb10:	4603      	mov	r3, r0
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fb12:	2a04      	cmp	r2, #4
 800fb14:	d004      	beq.n	800fb20 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 800fb16:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fb1a:	b2d2      	uxtb	r2, r2
 800fb1c:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fb20:	2204      	movs	r2, #4

  return USBD_OK;
}
 800fb22:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fb24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 800fb28:	4770      	bx	lr
 800fb2a:	bf00      	nop

0800fb2c <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fb2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fb30:	2b04      	cmp	r3, #4
 800fb32:	d104      	bne.n	800fb3e <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fb34:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800fb3e:	2000      	movs	r0, #0
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop

0800fb44 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb44:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fb48:	2a03      	cmp	r2, #3
 800fb4a:	d001      	beq.n	800fb50 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	4770      	bx	lr
{
 800fb50:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 800fb52:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fb56:	b113      	cbz	r3, 800fb5e <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	b103      	cbz	r3, 800fb5e <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800fb5c:	4798      	blx	r3
}
 800fb5e:	2000      	movs	r0, #0
 800fb60:	bd08      	pop	{r3, pc}
 800fb62:	bf00      	nop

0800fb64 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800fb64:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800fb68:	32ae      	adds	r2, #174	; 0xae
 800fb6a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800fb6e:	b15a      	cbz	r2, 800fb88 <USBD_LL_IsoINIncomplete+0x24>
{
 800fb70:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fb76:	2b03      	cmp	r3, #3
 800fb78:	d001      	beq.n	800fb7e <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800fb7a:	2000      	movs	r0, #0
}
 800fb7c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fb7e:	6a13      	ldr	r3, [r2, #32]
 800fb80:	b123      	cbz	r3, 800fb8c <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fb82:	4798      	blx	r3
  return USBD_OK;
 800fb84:	2000      	movs	r0, #0
}
 800fb86:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800fb88:	2003      	movs	r0, #3
}
 800fb8a:	4770      	bx	lr
  return USBD_OK;
 800fb8c:	4618      	mov	r0, r3
}
 800fb8e:	bd08      	pop	{r3, pc}

0800fb90 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800fb90:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800fb94:	32ae      	adds	r2, #174	; 0xae
 800fb96:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800fb9a:	b15a      	cbz	r2, 800fbb4 <USBD_LL_IsoOUTIncomplete+0x24>
{
 800fb9c:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb9e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fba2:	2b03      	cmp	r3, #3
 800fba4:	d001      	beq.n	800fbaa <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800fba6:	2000      	movs	r0, #0
}
 800fba8:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fbaa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fbac:	b123      	cbz	r3, 800fbb8 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fbae:	4798      	blx	r3
  return USBD_OK;
 800fbb0:	2000      	movs	r0, #0
}
 800fbb2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800fbb4:	2003      	movs	r0, #3
}
 800fbb6:	4770      	bx	lr
  return USBD_OK;
 800fbb8:	4618      	mov	r0, r3
}
 800fbba:	bd08      	pop	{r3, pc}

0800fbbc <USBD_LL_DevConnected>:
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	4770      	bx	lr

0800fbc0 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbc0:	2101      	movs	r1, #1
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fbc2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbc6:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass[0] != NULL)
 800fbca:	b142      	cbz	r2, 800fbde <USBD_LL_DevDisconnected+0x1e>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fbcc:	6852      	ldr	r2, [r2, #4]
 800fbce:	7901      	ldrb	r1, [r0, #4]
{
 800fbd0:	b508      	push	{r3, lr}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fbd2:	4790      	blx	r2
 800fbd4:	b908      	cbnz	r0, 800fbda <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 800fbd6:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800fbd8:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800fbda:	2003      	movs	r0, #3
}
 800fbdc:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800fbde:	2000      	movs	r0, #0
}
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop

0800fbe4 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	4770      	bx	lr

0800fbe8 <USBD_CoreFindEP>:
 800fbe8:	2000      	movs	r0, #0
 800fbea:	4770      	bx	lr

0800fbec <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fbec:	7802      	ldrb	r2, [r0, #0]
 800fbee:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800fbf2:	b293      	uxth	r3, r2
 800fbf4:	4594      	cmp	ip, r2
 800fbf6:	d803      	bhi.n	800fc00 <USBD_GetEpDesc+0x14>
 800fbf8:	e00c      	b.n	800fc14 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 800fbfa:	459c      	cmp	ip, r3
 800fbfc:	d90a      	bls.n	800fc14 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800fbfe:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fc00:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 800fc02:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fc04:	7842      	ldrb	r2, [r0, #1]
  *ptr += pnext->bLength;
 800fc06:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fc08:	2a05      	cmp	r2, #5
 800fc0a:	d1f6      	bne.n	800fbfa <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800fc0c:	7882      	ldrb	r2, [r0, #2]
 800fc0e:	428a      	cmp	r2, r1
 800fc10:	d1f3      	bne.n	800fbfa <USBD_GetEpDesc+0xe>
}
 800fc12:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fc14:	2000      	movs	r0, #0
}
 800fc16:	4770      	bx	lr

0800fc18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc1a:	780c      	ldrb	r4, [r1, #0]
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	460e      	mov	r6, r1
 800fc20:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc22:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800fc26:	2c20      	cmp	r4, #32
 800fc28:	d00e      	beq.n	800fc48 <USBD_StdDevReq+0x30>
 800fc2a:	2c40      	cmp	r4, #64	; 0x40
 800fc2c:	d00c      	beq.n	800fc48 <USBD_StdDevReq+0x30>
 800fc2e:	b1bc      	cbz	r4, 800fc60 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc30:	2180      	movs	r1, #128	; 0x80
 800fc32:	4628      	mov	r0, r5
 800fc34:	f000 fdbe 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc38:	2100      	movs	r1, #0
 800fc3a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800fc3c:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc3e:	f000 fdb9 	bl	80107b4 <USBD_LL_StallEP>
}
 800fc42:	4620      	mov	r0, r4
 800fc44:	b003      	add	sp, #12
 800fc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fc48:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 800fc4c:	4631      	mov	r1, r6
 800fc4e:	4628      	mov	r0, r5
 800fc50:	33ae      	adds	r3, #174	; 0xae
 800fc52:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800fc56:	689b      	ldr	r3, [r3, #8]
}
 800fc58:	b003      	add	sp, #12
 800fc5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fc5e:	4718      	bx	r3
      switch (req->bRequest)
 800fc60:	784b      	ldrb	r3, [r1, #1]
 800fc62:	2b09      	cmp	r3, #9
 800fc64:	d8e4      	bhi.n	800fc30 <USBD_StdDevReq+0x18>
 800fc66:	a201      	add	r2, pc, #4	; (adr r2, 800fc6c <USBD_StdDevReq+0x54>)
 800fc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6c:	0800fccd 	.word	0x0800fccd
 800fc70:	0800fcf7 	.word	0x0800fcf7
 800fc74:	0800fc31 	.word	0x0800fc31
 800fc78:	0800fd15 	.word	0x0800fd15
 800fc7c:	0800fc31 	.word	0x0800fc31
 800fc80:	0800fd37 	.word	0x0800fd37
 800fc84:	0800fd6f 	.word	0x0800fd6f
 800fc88:	0800fc31 	.word	0x0800fc31
 800fc8c:	0800fda1 	.word	0x0800fda1
 800fc90:	0800fc95 	.word	0x0800fc95
  cfgidx = (uint8_t)(req->wValue);
 800fc94:	7889      	ldrb	r1, [r1, #2]
 800fc96:	4eb2      	ldr	r6, [pc, #712]	; (800ff60 <USBD_StdDevReq+0x348>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fc98:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800fc9a:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fc9c:	f200 814e 	bhi.w	800ff3c <USBD_StdDevReq+0x324>
  switch (pdev->dev_state)
 800fca0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fca4:	2b02      	cmp	r3, #2
 800fca6:	b2df      	uxtb	r7, r3
 800fca8:	f000 810c 	beq.w	800fec4 <USBD_StdDevReq+0x2ac>
 800fcac:	2f03      	cmp	r7, #3
 800fcae:	f000 811d 	beq.w	800feec <USBD_StdDevReq+0x2d4>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcb2:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800fcb4:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcb6:	f000 fd7d 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fcba:	2100      	movs	r1, #0
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	f000 fd79 	bl	80107b4 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fcc2:	7831      	ldrb	r1, [r6, #0]
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	f7ff fe1b 	bl	800f900 <USBD_ClrClassConfig>
      break;
 800fcca:	e7ba      	b.n	800fc42 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800fccc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fcd0:	3a01      	subs	r2, #1
 800fcd2:	2a02      	cmp	r2, #2
 800fcd4:	d824      	bhi.n	800fd20 <USBD_StdDevReq+0x108>
      if (req->wLength != 0x2U)
 800fcd6:	88ca      	ldrh	r2, [r1, #6]
 800fcd8:	2a02      	cmp	r2, #2
 800fcda:	d121      	bne.n	800fd20 <USBD_StdDevReq+0x108>
      if (pdev->dev_remote_wakeup != 0U)
 800fcdc:	f8d0 42a4 	ldr.w	r4, [r0, #676]	; 0x2a4
 800fce0:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fce2:	2c00      	cmp	r4, #0
  USBD_StatusTypeDef ret = USBD_OK;
 800fce4:	461c      	mov	r4, r3
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fce6:	bf14      	ite	ne
 800fce8:	2303      	movne	r3, #3
 800fcea:	2301      	moveq	r3, #1
 800fcec:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fcf0:	f000 fa72 	bl	80101d8 <USBD_CtlSendData>
      break;
 800fcf4:	e7a5      	b.n	800fc42 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800fcf6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fcfa:	3b01      	subs	r3, #1
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d80f      	bhi.n	800fd20 <USBD_StdDevReq+0x108>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd00:	884b      	ldrh	r3, [r1, #2]
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d19d      	bne.n	800fc42 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800fd06:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 800fd08:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800fd0a:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fd0e:	f000 fa93 	bl	8010238 <USBD_CtlSendStatus>
 800fd12:	e796      	b.n	800fc42 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd14:	884b      	ldrh	r3, [r1, #2]
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d0f6      	beq.n	800fd08 <USBD_StdDevReq+0xf0>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fd1a:	2b02      	cmp	r3, #2
 800fd1c:	f000 8107 	beq.w	800ff2e <USBD_StdDevReq+0x316>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd20:	2180      	movs	r1, #128	; 0x80
 800fd22:	4628      	mov	r0, r5
 800fd24:	f000 fd46 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fd28:	2100      	movs	r1, #0
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	f000 fd42 	bl	80107b4 <USBD_LL_StallEP>
}
 800fd30:	4620      	mov	r0, r4
 800fd32:	b003      	add	sp, #12
 800fd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fd36:	888b      	ldrh	r3, [r1, #4]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d1f1      	bne.n	800fd20 <USBD_StdDevReq+0x108>
 800fd3c:	88cb      	ldrh	r3, [r1, #6]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d1ee      	bne.n	800fd20 <USBD_StdDevReq+0x108>
 800fd42:	884e      	ldrh	r6, [r1, #2]
 800fd44:	2e7f      	cmp	r6, #127	; 0x7f
 800fd46:	d8eb      	bhi.n	800fd20 <USBD_StdDevReq+0x108>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd48:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fd4c:	2b03      	cmp	r3, #3
 800fd4e:	d0e7      	beq.n	800fd20 <USBD_StdDevReq+0x108>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fd50:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800fd52:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fd56:	f000 fd5d 	bl	8010814 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	f000 fa6c 	bl	8010238 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800fd60:	2e00      	cmp	r6, #0
 800fd62:	f040 80e0 	bne.w	800ff26 <USBD_StdDevReq+0x30e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fd66:	2301      	movs	r3, #1
 800fd68:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800fd6c:	e769      	b.n	800fc42 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800fd6e:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800fd70:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800fd72:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800fd76:	0a13      	lsrs	r3, r2, #8
 800fd78:	3b01      	subs	r3, #1
 800fd7a:	2b06      	cmp	r3, #6
 800fd7c:	d8d0      	bhi.n	800fd20 <USBD_StdDevReq+0x108>
 800fd7e:	a101      	add	r1, pc, #4	; (adr r1, 800fd84 <USBD_StdDevReq+0x16c>)
 800fd80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd84:	0800fe2d 	.word	0x0800fe2d
 800fd88:	0800fe13 	.word	0x0800fe13
 800fd8c:	0800fe3d 	.word	0x0800fe3d
 800fd90:	0800fd21 	.word	0x0800fd21
 800fd94:	0800fd21 	.word	0x0800fd21
 800fd98:	0800fdff 	.word	0x0800fdff
 800fd9c:	0800fdc7 	.word	0x0800fdc7
  if (req->wLength != 1U)
 800fda0:	88ca      	ldrh	r2, [r1, #6]
 800fda2:	2a01      	cmp	r2, #1
 800fda4:	d1bc      	bne.n	800fd20 <USBD_StdDevReq+0x108>
    switch (pdev->dev_state)
 800fda6:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800fdaa:	2902      	cmp	r1, #2
 800fdac:	b2cb      	uxtb	r3, r1
 800fdae:	f200 8082 	bhi.w	800feb6 <USBD_StdDevReq+0x29e>
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	f43f af3c 	beq.w	800fc30 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800fdb8:	4601      	mov	r1, r0
 800fdba:	2300      	movs	r3, #0
 800fdbc:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fdc0:	f000 fa0a 	bl	80101d8 <USBD_CtlSendData>
        break;
 800fdc4:	e73d      	b.n	800fc42 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdc6:	7c03      	ldrb	r3, [r0, #16]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d1a9      	bne.n	800fd20 <USBD_StdDevReq+0x108>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fdcc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fdd0:	f10d 0006 	add.w	r0, sp, #6
 800fdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fdd8:	2307      	movs	r3, #7
 800fdda:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800fddc:	88f2      	ldrh	r2, [r6, #6]
 800fdde:	2a00      	cmp	r2, #0
 800fde0:	d065      	beq.n	800feae <USBD_StdDevReq+0x296>
    if (len != 0U)
 800fde2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d09a      	beq.n	800fd20 <USBD_StdDevReq+0x108>
      len = MIN(len, req->wLength);
 800fdea:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fdec:	4601      	mov	r1, r0
 800fdee:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800fdf0:	bf28      	it	cs
 800fdf2:	461a      	movcs	r2, r3
 800fdf4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fdf8:	f000 f9ee 	bl	80101d8 <USBD_CtlSendData>
 800fdfc:	e721      	b.n	800fc42 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdfe:	7c03      	ldrb	r3, [r0, #16]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d18d      	bne.n	800fd20 <USBD_StdDevReq+0x108>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fe04:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fe08:	f10d 0006 	add.w	r0, sp, #6
 800fe0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe0e:	4798      	blx	r3
  if (err != 0U)
 800fe10:	e7e4      	b.n	800fddc <USBD_StdDevReq+0x1c4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe12:	7c03      	ldrb	r3, [r0, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	f040 809a 	bne.w	800ff4e <USBD_StdDevReq+0x336>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fe1a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fe1e:	f10d 0006 	add.w	r0, sp, #6
 800fe22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe24:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fe26:	2302      	movs	r3, #2
 800fe28:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800fe2a:	e7d7      	b.n	800fddc <USBD_StdDevReq+0x1c4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fe2c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fe30:	f10d 0106 	add.w	r1, sp, #6
 800fe34:	7c00      	ldrb	r0, [r0, #16]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4798      	blx	r3
  if (err != 0U)
 800fe3a:	e7cf      	b.n	800fddc <USBD_StdDevReq+0x1c4>
      switch ((uint8_t)(req->wValue))
 800fe3c:	b2d2      	uxtb	r2, r2
 800fe3e:	2a05      	cmp	r2, #5
 800fe40:	f63f af6e 	bhi.w	800fd20 <USBD_StdDevReq+0x108>
 800fe44:	e8df f002 	tbb	[pc, r2]
 800fe48:	141a2026 	.word	0x141a2026
 800fe4c:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fe4e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fe52:	699b      	ldr	r3, [r3, #24]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	f43f af63 	beq.w	800fd20 <USBD_StdDevReq+0x108>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fe5a:	f10d 0106 	add.w	r1, sp, #6
 800fe5e:	7c28      	ldrb	r0, [r5, #16]
 800fe60:	4798      	blx	r3
  if (err != 0U)
 800fe62:	e7bb      	b.n	800fddc <USBD_StdDevReq+0x1c4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fe64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fe68:	695b      	ldr	r3, [r3, #20]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d1f5      	bne.n	800fe5a <USBD_StdDevReq+0x242>
 800fe6e:	e757      	b.n	800fd20 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fe70:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fe74:	691b      	ldr	r3, [r3, #16]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1ef      	bne.n	800fe5a <USBD_StdDevReq+0x242>
 800fe7a:	e751      	b.n	800fd20 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fe7c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1e9      	bne.n	800fe5a <USBD_StdDevReq+0x242>
 800fe86:	e74b      	b.n	800fd20 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fe88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fe8c:	689b      	ldr	r3, [r3, #8]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1e3      	bne.n	800fe5a <USBD_StdDevReq+0x242>
 800fe92:	e745      	b.n	800fd20 <USBD_StdDevReq+0x108>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fe94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d1dd      	bne.n	800fe5a <USBD_StdDevReq+0x242>
 800fe9e:	e73f      	b.n	800fd20 <USBD_StdDevReq+0x108>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fea0:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800fea2:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fea4:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fea6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800feaa:	f7ff fd29 	bl	800f900 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800feae:	4628      	mov	r0, r5
 800feb0:	f000 f9c2 	bl	8010238 <USBD_CtlSendStatus>
 800feb4:	e6c5      	b.n	800fc42 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800feb6:	2b03      	cmp	r3, #3
 800feb8:	f47f aeba 	bne.w	800fc30 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800febc:	1d01      	adds	r1, r0, #4
 800febe:	f000 f98b 	bl	80101d8 <USBD_CtlSendData>
        break;
 800fec2:	e6be      	b.n	800fc42 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800fec4:	2900      	cmp	r1, #0
 800fec6:	d0f2      	beq.n	800feae <USBD_StdDevReq+0x296>
        pdev->dev_config = cfgidx;
 800fec8:	2101      	movs	r1, #1
 800feca:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fecc:	f7ff fd10 	bl	800f8f0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800fed0:	4604      	mov	r4, r0
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d046      	beq.n	800ff64 <USBD_StdDevReq+0x34c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fed6:	2180      	movs	r1, #128	; 0x80
 800fed8:	4628      	mov	r0, r5
 800feda:	f000 fc6b 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fede:	2100      	movs	r1, #0
 800fee0:	4628      	mov	r0, r5
 800fee2:	f000 fc67 	bl	80107b4 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fee6:	f885 729c 	strb.w	r7, [r5, #668]	; 0x29c
 800feea:	e6aa      	b.n	800fc42 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800feec:	2900      	cmp	r1, #0
 800feee:	d0d7      	beq.n	800fea0 <USBD_StdDevReq+0x288>
      else if (cfgidx != pdev->dev_config)
 800fef0:	6841      	ldr	r1, [r0, #4]
 800fef2:	2901      	cmp	r1, #1
 800fef4:	d0db      	beq.n	800feae <USBD_StdDevReq+0x296>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fef6:	b2c9      	uxtb	r1, r1
 800fef8:	f7ff fd02 	bl	800f900 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fefc:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fefe:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800ff00:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff02:	f7ff fcf5 	bl	800f8f0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800ff06:	4606      	mov	r6, r0
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d0d0      	beq.n	800feae <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff0c:	2180      	movs	r1, #128	; 0x80
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f000 fc50 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff14:	2100      	movs	r1, #0
 800ff16:	4628      	mov	r0, r5
 800ff18:	4634      	mov	r4, r6
 800ff1a:	f000 fc4b 	bl	80107b4 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff1e:	7929      	ldrb	r1, [r5, #4]
 800ff20:	4628      	mov	r0, r5
 800ff22:	f7ff fced 	bl	800f900 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff26:	2302      	movs	r3, #2
 800ff28:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800ff2c:	e689      	b.n	800fc42 <USBD_StdDevReq+0x2a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ff2e:	888b      	ldrh	r3, [r1, #4]
 800ff30:	0a1b      	lsrs	r3, r3, #8
 800ff32:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ff36:	f000 f97f 	bl	8010238 <USBD_CtlSendStatus>
 800ff3a:	e682      	b.n	800fc42 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff3c:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800ff3e:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff40:	f000 fc38 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff44:	2100      	movs	r1, #0
 800ff46:	4628      	mov	r0, r5
 800ff48:	f000 fc34 	bl	80107b4 <USBD_LL_StallEP>
    return USBD_FAIL;
 800ff4c:	e679      	b.n	800fc42 <USBD_StdDevReq+0x2a>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ff4e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ff52:	f10d 0006 	add.w	r0, sp, #6
 800ff56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff58:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff5a:	2302      	movs	r3, #2
 800ff5c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ff5e:	e73d      	b.n	800fddc <USBD_StdDevReq+0x1c4>
 800ff60:	2400b9bc 	.word	0x2400b9bc
          (void)USBD_CtlSendStatus(pdev);
 800ff64:	4628      	mov	r0, r5
 800ff66:	f000 f967 	bl	8010238 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ff6a:	2303      	movs	r3, #3
 800ff6c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800ff70:	e667      	b.n	800fc42 <USBD_StdDevReq+0x2a>
 800ff72:	bf00      	nop

0800ff74 <USBD_StdItfReq>:
{
 800ff74:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff76:	780b      	ldrb	r3, [r1, #0]
{
 800ff78:	460d      	mov	r5, r1
 800ff7a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff7c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800ff80:	2a40      	cmp	r2, #64	; 0x40
 800ff82:	d00b      	beq.n	800ff9c <USBD_StdItfReq+0x28>
 800ff84:	065b      	lsls	r3, r3, #25
 800ff86:	d509      	bpl.n	800ff9c <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800ff88:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff8a:	2180      	movs	r1, #128	; 0x80
 800ff8c:	f000 fc12 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff90:	4620      	mov	r0, r4
 800ff92:	4629      	mov	r1, r5
 800ff94:	f000 fc0e 	bl	80107b4 <USBD_LL_StallEP>
}
 800ff98:	4628      	mov	r0, r5
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800ff9c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	2b02      	cmp	r3, #2
 800ffa4:	d802      	bhi.n	800ffac <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ffa6:	7929      	ldrb	r1, [r5, #4]
 800ffa8:	2901      	cmp	r1, #1
 800ffaa:	d90a      	bls.n	800ffc2 <USBD_StdItfReq+0x4e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffac:	2180      	movs	r1, #128	; 0x80
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 fc00 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ffb4:	2100      	movs	r1, #0
 800ffb6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800ffb8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800ffba:	f000 fbfb 	bl	80107b4 <USBD_LL_StallEP>
}
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	bd38      	pop	{r3, r4, r5, pc}
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f7ff fe0e 	bl	800fbe4 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ffc8:	b990      	cbnz	r0, 800fff0 <USBD_StdItfReq+0x7c>
              if (pdev->pClass[idx]->Setup != NULL)
 800ffca:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ffce:	689b      	ldr	r3, [r3, #8]
 800ffd0:	b173      	cbz	r3, 800fff0 <USBD_StdItfReq+0x7c>
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ffd2:	4629      	mov	r1, r5
                pdev->classId = idx;
 800ffd4:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ffd8:	4620      	mov	r0, r4
 800ffda:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ffdc:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ffde:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d1d9      	bne.n	800ff98 <USBD_StdItfReq+0x24>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	d1d7      	bne.n	800ff98 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f000 f925 	bl	8010238 <USBD_CtlSendStatus>
 800ffee:	e7d3      	b.n	800ff98 <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 800fff0:	2503      	movs	r5, #3
}
 800fff2:	4628      	mov	r0, r5
 800fff4:	bd38      	pop	{r3, r4, r5, pc}
 800fff6:	bf00      	nop

0800fff8 <USBD_StdEPReq>:
{
 800fff8:	b530      	push	{r4, r5, lr}
 800fffa:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800fffc:	888a      	ldrh	r2, [r1, #4]
{
 800fffe:	b083      	sub	sp, #12
 8010000:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 8010002:	7823      	ldrb	r3, [r4, #0]
 8010004:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801000a:	2b20      	cmp	r3, #32
 801000c:	d01e      	beq.n	801004c <USBD_StdEPReq+0x54>
 801000e:	2b40      	cmp	r3, #64	; 0x40
 8010010:	d01c      	beq.n	801004c <USBD_StdEPReq+0x54>
 8010012:	b36b      	cbz	r3, 8010070 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010014:	2180      	movs	r1, #128	; 0x80
 8010016:	4628      	mov	r0, r5
 8010018:	f000 fbcc 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801001c:	2100      	movs	r1, #0
 801001e:	4628      	mov	r0, r5
 8010020:	f000 fbc8 	bl	80107b4 <USBD_LL_StallEP>
}
 8010024:	2000      	movs	r0, #0
 8010026:	b003      	add	sp, #12
 8010028:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 801002a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801002e:	2b02      	cmp	r3, #2
 8010030:	b2da      	uxtb	r2, r3
 8010032:	d059      	beq.n	80100e8 <USBD_StdEPReq+0xf0>
 8010034:	2a03      	cmp	r2, #3
 8010036:	d1ed      	bne.n	8010014 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010038:	8863      	ldrh	r3, [r4, #2]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d1f2      	bne.n	8010024 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 801003e:	064b      	lsls	r3, r1, #25
 8010040:	d17f      	bne.n	8010142 <USBD_StdEPReq+0x14a>
                (void)USBD_CtlSendStatus(pdev);
 8010042:	4628      	mov	r0, r5
 8010044:	9101      	str	r1, [sp, #4]
 8010046:	f000 f8f7 	bl	8010238 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801004a:	9901      	ldr	r1, [sp, #4]
 801004c:	4628      	mov	r0, r5
 801004e:	f7ff fdcb 	bl	800fbe8 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010052:	2800      	cmp	r0, #0
 8010054:	d1e6      	bne.n	8010024 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 8010056:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 801005a:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d0df      	beq.n	8010024 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010064:	4621      	mov	r1, r4
 8010066:	4628      	mov	r0, r5
}
 8010068:	b003      	add	sp, #12
 801006a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801006e:	4718      	bx	r3
      switch (req->bRequest)
 8010070:	7863      	ldrb	r3, [r4, #1]
 8010072:	2b01      	cmp	r3, #1
 8010074:	d0d9      	beq.n	801002a <USBD_StdEPReq+0x32>
 8010076:	2b03      	cmp	r3, #3
 8010078:	d024      	beq.n	80100c4 <USBD_StdEPReq+0xcc>
 801007a:	2b00      	cmp	r3, #0
 801007c:	d1ca      	bne.n	8010014 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 801007e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010082:	2b02      	cmp	r3, #2
 8010084:	b2d8      	uxtb	r0, r3
 8010086:	d038      	beq.n	80100fa <USBD_StdEPReq+0x102>
 8010088:	2803      	cmp	r0, #3
 801008a:	d1c3      	bne.n	8010014 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801008c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8010090:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010092:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010096:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 801009a:	d43f      	bmi.n	801011c <USBD_StdEPReq+0x124>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801009c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d0b7      	beq.n	8010014 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80100a4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80100a8:	2414      	movs	r4, #20
 80100aa:	fb04 5403 	mla	r4, r4, r3, r5
 80100ae:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d13e      	bne.n	8010134 <USBD_StdEPReq+0x13c>
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80100b6:	2202      	movs	r2, #2
 80100b8:	4621      	mov	r1, r4
 80100ba:	4628      	mov	r0, r5
                pep->status = 0x0000U;
 80100bc:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80100be:	f000 f88b 	bl	80101d8 <USBD_CtlSendData>
              break;
 80100c2:	e7af      	b.n	8010024 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80100c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80100c8:	2b02      	cmp	r3, #2
 80100ca:	b2da      	uxtb	r2, r3
 80100cc:	d00c      	beq.n	80100e8 <USBD_StdEPReq+0xf0>
 80100ce:	2a03      	cmp	r2, #3
 80100d0:	d1a0      	bne.n	8010014 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80100d2:	8863      	ldrh	r3, [r4, #2]
 80100d4:	b923      	cbnz	r3, 80100e0 <USBD_StdEPReq+0xe8>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80100d6:	0648      	lsls	r0, r1, #25
 80100d8:	d002      	beq.n	80100e0 <USBD_StdEPReq+0xe8>
 80100da:	88e3      	ldrh	r3, [r4, #6]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d035      	beq.n	801014c <USBD_StdEPReq+0x154>
              (void)USBD_CtlSendStatus(pdev);
 80100e0:	4628      	mov	r0, r5
 80100e2:	f000 f8a9 	bl	8010238 <USBD_CtlSendStatus>
              break;
 80100e6:	e79d      	b.n	8010024 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80100e8:	064a      	lsls	r2, r1, #25
 80100ea:	d093      	beq.n	8010014 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80100ec:	f000 fb62 	bl	80107b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80100f0:	2180      	movs	r1, #128	; 0x80
 80100f2:	4628      	mov	r0, r5
 80100f4:	f000 fb5e 	bl	80107b4 <USBD_LL_StallEP>
 80100f8:	e794      	b.n	8010024 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80100fa:	0648      	lsls	r0, r1, #25
 80100fc:	d18a      	bne.n	8010014 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80100fe:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 8010100:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010104:	f04f 0202 	mov.w	r2, #2
 8010108:	4628      	mov	r0, r5
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801010a:	bf4c      	ite	mi
 801010c:	f105 0114 	addmi.w	r1, r5, #20
 8010110:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 8010114:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010116:	f000 f85f 	bl	80101d8 <USBD_CtlSendData>
              break;
 801011a:	e783      	b.n	8010024 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801011c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801011e:	2b00      	cmp	r3, #0
 8010120:	f43f af78 	beq.w	8010014 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010124:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8010128:	1c5c      	adds	r4, r3, #1
 801012a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801012e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8010132:	e7be      	b.n	80100b2 <USBD_StdEPReq+0xba>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010134:	4628      	mov	r0, r5
 8010136:	f000 fb59 	bl	80107ec <USBD_LL_IsStallEP>
 801013a:	1e03      	subs	r3, r0, #0
 801013c:	bf18      	it	ne
 801013e:	2301      	movne	r3, #1
 8010140:	e7b9      	b.n	80100b6 <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010142:	9101      	str	r1, [sp, #4]
 8010144:	f000 fb44 	bl	80107d0 <USBD_LL_ClearStallEP>
 8010148:	9901      	ldr	r1, [sp, #4]
 801014a:	e77a      	b.n	8010042 <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801014c:	4628      	mov	r0, r5
 801014e:	f000 fb31 	bl	80107b4 <USBD_LL_StallEP>
 8010152:	e7c5      	b.n	80100e0 <USBD_StdEPReq+0xe8>

08010154 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8010154:	780b      	ldrb	r3, [r1, #0]
 8010156:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8010158:	784b      	ldrb	r3, [r1, #1]
 801015a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 801015c:	884b      	ldrh	r3, [r1, #2]
 801015e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8010160:	888b      	ldrh	r3, [r1, #4]
 8010162:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8010164:	88cb      	ldrh	r3, [r1, #6]
 8010166:	80c3      	strh	r3, [r0, #6]
}
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop

0801016c <USBD_CtlError>:
{
 801016c:	b510      	push	{r4, lr}
 801016e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010170:	2180      	movs	r1, #128	; 0x80
 8010172:	f000 fb1f 	bl	80107b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010176:	2100      	movs	r1, #0
 8010178:	4620      	mov	r0, r4
}
 801017a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 801017e:	f000 bb19 	b.w	80107b4 <USBD_LL_StallEP>
 8010182:	bf00      	nop

08010184 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8010184:	b318      	cbz	r0, 80101ce <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8010186:	7803      	ldrb	r3, [r0, #0]
{
 8010188:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 801018a:	b30b      	cbz	r3, 80101d0 <USBD_GetString+0x4c>
 801018c:	4604      	mov	r4, r0
 801018e:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8010192:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 8010196:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801019a:	b2db      	uxtb	r3, r3
 801019c:	2d00      	cmp	r5, #0
 801019e:	d1f8      	bne.n	8010192 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80101a0:	3301      	adds	r3, #1
 80101a2:	005b      	lsls	r3, r3, #1
 80101a4:	b2dc      	uxtb	r4, r3
 80101a6:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80101a8:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80101aa:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80101ac:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80101ae:	7804      	ldrb	r4, [r0, #0]
 80101b0:	b15c      	cbz	r4, 80101ca <USBD_GetString+0x46>
  idx++;
 80101b2:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80101b4:	2500      	movs	r5, #0
    idx++;
 80101b6:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 80101b8:	54cc      	strb	r4, [r1, r3]
    idx++;
 80101ba:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80101bc:	b2d2      	uxtb	r2, r2
    idx++;
 80101be:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 80101c0:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80101c2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80101c6:	2c00      	cmp	r4, #0
 80101c8:	d1f5      	bne.n	80101b6 <USBD_GetString+0x32>
}
 80101ca:	bc30      	pop	{r4, r5}
 80101cc:	4770      	bx	lr
 80101ce:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80101d0:	2402      	movs	r4, #2
 80101d2:	4623      	mov	r3, r4
 80101d4:	e7e7      	b.n	80101a6 <USBD_GetString+0x22>
 80101d6:	bf00      	nop

080101d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80101d8:	b510      	push	{r4, lr}
 80101da:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80101dc:	2402      	movs	r4, #2
{
 80101de:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80101e0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80101e2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 80101e6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80101ea:	f000 fb21 	bl	8010830 <USBD_LL_Transmit>

  return USBD_OK;
}
 80101ee:	2000      	movs	r0, #0
 80101f0:	bd10      	pop	{r4, pc}
 80101f2:	bf00      	nop

080101f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80101f4:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80101f6:	2100      	movs	r1, #0
{
 80101f8:	b508      	push	{r3, lr}
 80101fa:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80101fc:	4662      	mov	r2, ip
 80101fe:	f000 fb17 	bl	8010830 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010202:	2000      	movs	r0, #0
 8010204:	bd08      	pop	{r3, pc}
 8010206:	bf00      	nop

08010208 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010208:	b510      	push	{r4, lr}
 801020a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801020c:	2403      	movs	r4, #3
{
 801020e:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010210:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010212:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8010216:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801021a:	f000 fb17 	bl	801084c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801021e:	2000      	movs	r0, #0
 8010220:	bd10      	pop	{r4, pc}
 8010222:	bf00      	nop

08010224 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010224:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010226:	2100      	movs	r1, #0
{
 8010228:	b508      	push	{r3, lr}
 801022a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801022c:	4662      	mov	r2, ip
 801022e:	f000 fb0d 	bl	801084c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010232:	2000      	movs	r0, #0
 8010234:	bd08      	pop	{r3, pc}
 8010236:	bf00      	nop

08010238 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010238:	2300      	movs	r3, #0
{
 801023a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801023c:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801023e:	461a      	mov	r2, r3
 8010240:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010242:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010246:	f000 faf3 	bl	8010830 <USBD_LL_Transmit>

  return USBD_OK;
}
 801024a:	2000      	movs	r0, #0
 801024c:	bd10      	pop	{r4, pc}
 801024e:	bf00      	nop

08010250 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010250:	2300      	movs	r3, #0
{
 8010252:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010254:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010256:	461a      	mov	r2, r3
 8010258:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801025a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801025e:	f000 faf5 	bl	801084c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010262:	2000      	movs	r0, #0
 8010264:	bd10      	pop	{r4, pc}
 8010266:	bf00      	nop

08010268 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010268:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801026a:	2200      	movs	r2, #0
 801026c:	4919      	ldr	r1, [pc, #100]	; (80102d4 <MX_USB_DEVICE_Init+0x6c>)
 801026e:	481a      	ldr	r0, [pc, #104]	; (80102d8 <MX_USB_DEVICE_Init+0x70>)
 8010270:	f7ff fb0c 	bl	800f88c <USBD_Init>
 8010274:	b988      	cbnz	r0, 801029a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010276:	4919      	ldr	r1, [pc, #100]	; (80102dc <MX_USB_DEVICE_Init+0x74>)
 8010278:	4817      	ldr	r0, [pc, #92]	; (80102d8 <MX_USB_DEVICE_Init+0x70>)
 801027a:	f7ff fb1b 	bl	800f8b4 <USBD_RegisterClass>
 801027e:	b9a0      	cbnz	r0, 80102aa <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010280:	4917      	ldr	r1, [pc, #92]	; (80102e0 <MX_USB_DEVICE_Init+0x78>)
 8010282:	4815      	ldr	r0, [pc, #84]	; (80102d8 <MX_USB_DEVICE_Init+0x70>)
 8010284:	f7ff faa2 	bl	800f7cc <USBD_CDC_RegisterInterface>
 8010288:	b9b8      	cbnz	r0, 80102ba <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801028a:	4813      	ldr	r0, [pc, #76]	; (80102d8 <MX_USB_DEVICE_Init+0x70>)
 801028c:	f7ff fb2e 	bl	800f8ec <USBD_Start>
 8010290:	b9d0      	cbnz	r0, 80102c8 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 8010296:	f7fa bda5 	b.w	800ade4 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 801029a:	f7f4 fef3 	bl	8005084 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801029e:	490f      	ldr	r1, [pc, #60]	; (80102dc <MX_USB_DEVICE_Init+0x74>)
 80102a0:	480d      	ldr	r0, [pc, #52]	; (80102d8 <MX_USB_DEVICE_Init+0x70>)
 80102a2:	f7ff fb07 	bl	800f8b4 <USBD_RegisterClass>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d0ea      	beq.n	8010280 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80102aa:	f7f4 feeb 	bl	8005084 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80102ae:	490c      	ldr	r1, [pc, #48]	; (80102e0 <MX_USB_DEVICE_Init+0x78>)
 80102b0:	4809      	ldr	r0, [pc, #36]	; (80102d8 <MX_USB_DEVICE_Init+0x70>)
 80102b2:	f7ff fa8b 	bl	800f7cc <USBD_CDC_RegisterInterface>
 80102b6:	2800      	cmp	r0, #0
 80102b8:	d0e7      	beq.n	801028a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80102ba:	f7f4 fee3 	bl	8005084 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80102be:	4806      	ldr	r0, [pc, #24]	; (80102d8 <MX_USB_DEVICE_Init+0x70>)
 80102c0:	f7ff fb14 	bl	800f8ec <USBD_Start>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d0e4      	beq.n	8010292 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 80102c8:	f7f4 fedc 	bl	8005084 <Error_Handler>
}
 80102cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 80102d0:	f7fa bd88 	b.w	800ade4 <HAL_PWREx_EnableUSBVoltageDetector>
 80102d4:	240003c4 	.word	0x240003c4
 80102d8:	2400b9c0 	.word	0x2400b9c0
 80102dc:	24000320 	.word	0x24000320
 80102e0:	240003a8 	.word	0x240003a8

080102e4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80102e4:	2000      	movs	r0, #0
 80102e6:	4770      	bx	lr

080102e8 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80102e8:	2000      	movs	r0, #0
 80102ea:	4770      	bx	lr

080102ec <CDC_Receive_FS>:
{
 80102ec:	b570      	push	{r4, r5, r6, lr}
 80102ee:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80102f0:	4e08      	ldr	r6, [pc, #32]	; (8010314 <CDC_Receive_FS+0x28>)
{
 80102f2:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80102f4:	4630      	mov	r0, r6
 80102f6:	4621      	mov	r1, r4
 80102f8:	f7ff fa82 	bl	800f800 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 80102fc:	4630      	mov	r0, r6
 80102fe:	f7ff faa7 	bl	800f850 <USBD_CDC_ReceivePacket>
 8010302:	682a      	ldr	r2, [r5, #0]
 8010304:	4b04      	ldr	r3, [pc, #16]	; (8010318 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 8010306:	4621      	mov	r1, r4
 8010308:	4804      	ldr	r0, [pc, #16]	; (801031c <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 801030a:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 801030c:	f001 f9f4 	bl	80116f8 <memcpy>
}
 8010310:	2000      	movs	r0, #0
 8010312:	bd70      	pop	{r4, r5, r6, pc}
 8010314:	2400b9c0 	.word	0x2400b9c0
 8010318:	240062d0 	.word	0x240062d0
 801031c:	240062d8 	.word	0x240062d8

08010320 <CDC_Init_FS>:
{
 8010320:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010322:	4c06      	ldr	r4, [pc, #24]	; (801033c <CDC_Init_FS+0x1c>)
 8010324:	2200      	movs	r2, #0
 8010326:	4906      	ldr	r1, [pc, #24]	; (8010340 <CDC_Init_FS+0x20>)
 8010328:	4620      	mov	r0, r4
 801032a:	f7ff fa5b 	bl	800f7e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801032e:	4905      	ldr	r1, [pc, #20]	; (8010344 <CDC_Init_FS+0x24>)
 8010330:	4620      	mov	r0, r4
 8010332:	f7ff fa65 	bl	800f800 <USBD_CDC_SetRxBuffer>
}
 8010336:	2000      	movs	r0, #0
 8010338:	bd10      	pop	{r4, pc}
 801033a:	bf00      	nop
 801033c:	2400b9c0 	.word	0x2400b9c0
 8010340:	2400c49c 	.word	0x2400c49c
 8010344:	2400bc9c 	.word	0x2400bc9c

08010348 <CDC_Control_FS>:
  switch(cmd)
 8010348:	2820      	cmp	r0, #32
 801034a:	d00a      	beq.n	8010362 <CDC_Control_FS+0x1a>
 801034c:	2821      	cmp	r0, #33	; 0x21
 801034e:	d106      	bne.n	801035e <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8010350:	4b09      	ldr	r3, [pc, #36]	; (8010378 <CDC_Control_FS+0x30>)
 8010352:	6818      	ldr	r0, [r3, #0]
 8010354:	889a      	ldrh	r2, [r3, #4]
 8010356:	799b      	ldrb	r3, [r3, #6]
 8010358:	6008      	str	r0, [r1, #0]
 801035a:	808a      	strh	r2, [r1, #4]
 801035c:	718b      	strb	r3, [r1, #6]
}
 801035e:	2000      	movs	r0, #0
 8010360:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8010362:	4b05      	ldr	r3, [pc, #20]	; (8010378 <CDC_Control_FS+0x30>)
 8010364:	6808      	ldr	r0, [r1, #0]
 8010366:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 801036a:	798a      	ldrb	r2, [r1, #6]
 801036c:	6018      	str	r0, [r3, #0]
}
 801036e:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8010370:	f8a3 c004 	strh.w	ip, [r3, #4]
 8010374:	719a      	strb	r2, [r3, #6]
}
 8010376:	4770      	bx	lr
 8010378:	240003bc 	.word	0x240003bc

0801037c <CDC_Transmit_FS>:
{
 801037c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801037e:	4c09      	ldr	r4, [pc, #36]	; (80103a4 <CDC_Transmit_FS+0x28>)
 8010380:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8010384:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010388:	b10b      	cbz	r3, 801038e <CDC_Transmit_FS+0x12>
}
 801038a:	2001      	movs	r0, #1
 801038c:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801038e:	460a      	mov	r2, r1
 8010390:	4601      	mov	r1, r0
 8010392:	4620      	mov	r0, r4
 8010394:	f7ff fa26 	bl	800f7e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010398:	4620      	mov	r0, r4
}
 801039a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801039e:	f7ff ba3b 	b.w	800f818 <USBD_CDC_TransmitPacket>
 80103a2:	bf00      	nop
 80103a4:	2400b9c0 	.word	0x2400b9c0

080103a8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80103a8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80103aa:	4801      	ldr	r0, [pc, #4]	; (80103b0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80103ac:	800b      	strh	r3, [r1, #0]
}
 80103ae:	4770      	bx	lr
 80103b0:	240003e0 	.word	0x240003e0

080103b4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80103b4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80103b6:	4801      	ldr	r0, [pc, #4]	; (80103bc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80103b8:	800b      	strh	r3, [r1, #0]
}
 80103ba:	4770      	bx	lr
 80103bc:	240003f4 	.word	0x240003f4

080103c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103c0:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80103c2:	4c04      	ldr	r4, [pc, #16]	; (80103d4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80103c4:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80103c6:	4804      	ldr	r0, [pc, #16]	; (80103d8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80103c8:	4621      	mov	r1, r4
 80103ca:	f7ff fedb 	bl	8010184 <USBD_GetString>
  return USBD_StrDesc;
}
 80103ce:	4620      	mov	r0, r4
 80103d0:	bd10      	pop	{r4, pc}
 80103d2:	bf00      	nop
 80103d4:	2400cc9c 	.word	0x2400cc9c
 80103d8:	0801db90 	.word	0x0801db90

080103dc <USBD_FS_ProductStrDescriptor>:
{
 80103dc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80103de:	4c04      	ldr	r4, [pc, #16]	; (80103f0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80103e0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80103e2:	4804      	ldr	r0, [pc, #16]	; (80103f4 <USBD_FS_ProductStrDescriptor+0x18>)
 80103e4:	4621      	mov	r1, r4
 80103e6:	f7ff fecd 	bl	8010184 <USBD_GetString>
}
 80103ea:	4620      	mov	r0, r4
 80103ec:	bd10      	pop	{r4, pc}
 80103ee:	bf00      	nop
 80103f0:	2400cc9c 	.word	0x2400cc9c
 80103f4:	0801dba4 	.word	0x0801dba4

080103f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103f8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80103fa:	4c04      	ldr	r4, [pc, #16]	; (801040c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80103fc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80103fe:	4804      	ldr	r0, [pc, #16]	; (8010410 <USBD_FS_ConfigStrDescriptor+0x18>)
 8010400:	4621      	mov	r1, r4
 8010402:	f7ff febf 	bl	8010184 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8010406:	4620      	mov	r0, r4
 8010408:	bd10      	pop	{r4, pc}
 801040a:	bf00      	nop
 801040c:	2400cc9c 	.word	0x2400cc9c
 8010410:	0801dbbc 	.word	0x0801dbbc

08010414 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010414:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010416:	4c04      	ldr	r4, [pc, #16]	; (8010428 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8010418:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801041a:	4804      	ldr	r0, [pc, #16]	; (801042c <USBD_FS_InterfaceStrDescriptor+0x18>)
 801041c:	4621      	mov	r1, r4
 801041e:	f7ff feb1 	bl	8010184 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8010422:	4620      	mov	r0, r4
 8010424:	bd10      	pop	{r4, pc}
 8010426:	bf00      	nop
 8010428:	2400cc9c 	.word	0x2400cc9c
 801042c:	0801dbc8 	.word	0x0801dbc8

08010430 <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010430:	4a46      	ldr	r2, [pc, #280]	; (801054c <USBD_FS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 8010432:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010436:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 801043a:	f8d2 0808 	ldr.w	r0, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 801043e:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 8010442:	181b      	adds	r3, r3, r0
 8010444:	d101      	bne.n	801044a <USBD_FS_SerialStrDescriptor+0x1a>
}
 8010446:	4842      	ldr	r0, [pc, #264]	; (8010550 <USBD_FS_SerialStrDescriptor+0x120>)
 8010448:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 801044a:	0f18      	lsrs	r0, r3, #28
 801044c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010450:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8010454:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8010458:	4a3d      	ldr	r2, [pc, #244]	; (8010550 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801045a:	bf2c      	ite	cs
 801045c:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801045e:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8010460:	f882 c003 	strb.w	ip, [r2, #3]
 8010464:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8010468:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 801046a:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 801046e:	f882 c005 	strb.w	ip, [r2, #5]
 8010472:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8010476:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8010478:	f882 c007 	strb.w	ip, [r2, #7]
 801047c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010480:	bf8c      	ite	hi
 8010482:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8010484:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8010486:	f882 c009 	strb.w	ip, [r2, #9]
 801048a:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 801048e:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8010490:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 8010494:	f882 c00b 	strb.w	ip, [r2, #11]
 8010498:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 801049c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 801049e:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104a2:	bf8c      	ite	hi
 80104a4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80104a6:	3030      	addls	r0, #48	; 0x30
 80104a8:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 80104aa:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80104ae:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104b0:	bf8c      	ite	hi
 80104b2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80104b4:	3030      	addls	r0, #48	; 0x30
 80104b6:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 80104b8:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80104bc:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104be:	bf8c      	ite	hi
 80104c0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80104c2:	3030      	addls	r0, #48	; 0x30
 80104c4:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 80104c6:	f3c3 2003 	ubfx	r0, r3, #8, #4
 80104ca:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104cc:	bf8c      	ite	hi
 80104ce:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80104d0:	3030      	addls	r0, #48	; 0x30
 80104d2:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80104d4:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80104d8:	f003 030f 	and.w	r3, r3, #15
 80104dc:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104de:	bf8c      	ite	hi
 80104e0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80104e2:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 80104e4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80104e6:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 80104e8:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80104ec:	bf94      	ite	ls
 80104ee:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104f0:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80104f2:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 80104f6:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104f8:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 80104fa:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 80104fe:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010502:	bf2c      	ite	cs
 8010504:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8010506:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8010508:	7450      	strb	r0, [r2, #17]
 801050a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 801050c:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 801050e:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 8010512:	74d0      	strb	r0, [r2, #19]
 8010514:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8010516:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8010518:	7550      	strb	r0, [r2, #21]
 801051a:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801051e:	bf8c      	ite	hi
 8010520:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8010522:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8010524:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 8010526:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8010528:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 801052c:	4808      	ldr	r0, [pc, #32]	; (8010550 <USBD_FS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 801052e:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010530:	bf8c      	ite	hi
 8010532:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8010534:	3330      	addls	r3, #48	; 0x30
 8010536:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8010538:	f3c1 4303 	ubfx	r3, r1, #16, #4
 801053c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801053e:	bf94      	ite	ls
 8010540:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010542:	3337      	addhi	r3, #55	; 0x37
 8010544:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8010546:	2300      	movs	r3, #0
 8010548:	7653      	strb	r3, [r2, #25]
}
 801054a:	4770      	bx	lr
 801054c:	1ff1e000 	.word	0x1ff1e000
 8010550:	240003f8 	.word	0x240003f8
 8010554:	00000000 	.word	0x00000000

08010558 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010558:	b510      	push	{r4, lr}
 801055a:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801055c:	2100      	movs	r1, #0
{
 801055e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010560:	22c0      	movs	r2, #192	; 0xc0
 8010562:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010564:	9106      	str	r1, [sp, #24]
 8010566:	e9cd 1102 	strd	r1, r1, [sp, #8]
 801056a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801056e:	f000 ffd0 	bl	8011512 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010572:	4b27      	ldr	r3, [pc, #156]	; (8010610 <HAL_PCD_MspInit+0xb8>)
 8010574:	6822      	ldr	r2, [r4, #0]
 8010576:	429a      	cmp	r2, r3
 8010578:	d001      	beq.n	801057e <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801057a:	b038      	add	sp, #224	; 0xe0
 801057c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801057e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010600 <HAL_PCD_MspInit+0xa8>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010582:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010586:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010588:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801058c:	932a      	str	r3, [sp, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801058e:	f7fb fb8b 	bl	800bca8 <HAL_RCCEx_PeriphCLKConfig>
 8010592:	bb90      	cbnz	r0, 80105fa <HAL_PCD_MspInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010594:	4c1f      	ldr	r4, [pc, #124]	; (8010614 <HAL_PCD_MspInit+0xbc>)
    HAL_PWREx_EnableUSBVoltageDetector();
 8010596:	f7fa fc25 	bl	800ade4 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801059a:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801059c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801059e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105a2:	481d      	ldr	r0, [pc, #116]	; (8010618 <HAL_PCD_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80105a4:	f043 0301 	orr.w	r3, r3, #1
 80105a8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80105ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80105b0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80105b2:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80105b4:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80105b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010608 <HAL_PCD_MspInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80105c0:	2300      	movs	r3, #0
 80105c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80105c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105ca:	f7f9 fa2f 	bl	8009a2c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80105ce:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80105d2:	2200      	movs	r2, #0
 80105d4:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80105d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80105da:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80105dc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80105e0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80105e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80105ec:	f7f7 fd06 	bl	8007ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80105f0:	2065      	movs	r0, #101	; 0x65
 80105f2:	f7f7 fd41 	bl	8008078 <HAL_NVIC_EnableIRQ>
}
 80105f6:	b038      	add	sp, #224	; 0xe0
 80105f8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80105fa:	f7f4 fd43 	bl	8005084 <Error_Handler>
 80105fe:	e7c9      	b.n	8010594 <HAL_PCD_MspInit+0x3c>
 8010600:	00040000 	.word	0x00040000
 8010604:	00000000 	.word	0x00000000
 8010608:	00001800 	.word	0x00001800
 801060c:	00000002 	.word	0x00000002
 8010610:	40080000 	.word	0x40080000
 8010614:	58024400 	.word	0x58024400
 8010618:	58020000 	.word	0x58020000

0801061c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801061c:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 8010620:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010624:	f7ff b976 	b.w	800f914 <USBD_LL_SetupStage>

08010628 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010628:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 801062c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010630:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010634:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 8010638:	f7ff b99c 	b.w	800f974 <USBD_LL_DataOutStage>

0801063c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801063c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8010640:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010644:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010648:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801064a:	f7ff b9cd 	b.w	800f9e8 <USBD_LL_DataInStage>
 801064e:	bf00      	nop

08010650 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010650:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010654:	f7ff ba76 	b.w	800fb44 <USBD_LL_SOF>

08010658 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010658:	6901      	ldr	r1, [r0, #16]
{
 801065a:	b510      	push	{r4, lr}
 801065c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801065e:	b111      	cbz	r1, 8010666 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010660:	2902      	cmp	r1, #2
 8010662:	d10a      	bne.n	801067a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8010664:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010666:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 801066a:	f7ff fa4b 	bl	800fb04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801066e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 8010672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010676:	f7ff ba17 	b.w	800faa8 <USBD_LL_Reset>
    Error_Handler();
 801067a:	f7f4 fd03 	bl	8005084 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801067e:	2101      	movs	r1, #1
 8010680:	e7f1      	b.n	8010666 <HAL_PCD_ResetCallback+0xe>
 8010682:	bf00      	nop

08010684 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010684:	b510      	push	{r4, lr}
 8010686:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010688:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 801068c:	f7ff fa3e 	bl	800fb0c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010690:	6822      	ldr	r2, [r4, #0]
 8010692:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8010696:	f043 0301 	orr.w	r3, r3, #1
 801069a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801069e:	6a23      	ldr	r3, [r4, #32]
 80106a0:	b123      	cbz	r3, 80106ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80106a2:	4a03      	ldr	r2, [pc, #12]	; (80106b0 <HAL_PCD_SuspendCallback+0x2c>)
 80106a4:	6913      	ldr	r3, [r2, #16]
 80106a6:	f043 0306 	orr.w	r3, r3, #6
 80106aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80106ac:	bd10      	pop	{r4, pc}
 80106ae:	bf00      	nop
 80106b0:	e000ed00 	.word	0xe000ed00

080106b4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80106b4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80106b8:	f7ff ba38 	b.w	800fb2c <USBD_LL_Resume>

080106bc <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80106bc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80106c0:	f7ff ba66 	b.w	800fb90 <USBD_LL_IsoOUTIncomplete>

080106c4 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80106c4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80106c8:	f7ff ba4c 	b.w	800fb64 <USBD_LL_IsoINIncomplete>

080106cc <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80106cc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80106d0:	f7ff ba74 	b.w	800fbbc <USBD_LL_DevConnected>

080106d4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80106d4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80106d8:	f7ff ba72 	b.w	800fbc0 <USBD_LL_DevDisconnected>
 80106dc:	0000      	movs	r0, r0
	...

080106e0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80106e0:	7802      	ldrb	r2, [r0, #0]
 80106e2:	b10a      	cbz	r2, 80106e8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 80106e4:	2000      	movs	r0, #0
 80106e6:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 80106e8:	4b19      	ldr	r3, [pc, #100]	; (8010750 <USBD_LL_Init+0x70>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80106ea:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80106ec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010748 <USBD_LL_Init+0x68>
{
 80106f0:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 80106f2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80106f6:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80106fa:	2009      	movs	r0, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80106fc:	4c15      	ldr	r4, [pc, #84]	; (8010754 <USBD_LL_Init+0x74>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80106fe:	6058      	str	r0, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010700:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010702:	601c      	str	r4, [r3, #0]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010704:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010706:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010708:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801070a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801070e:	e9c3 2103 	strd	r2, r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010712:	e9c3 2207 	strd	r2, r2, [r3, #28]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010716:	f7f9 fb45 	bl	8009da4 <HAL_PCD_Init>
 801071a:	b978      	cbnz	r0, 801073c <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801071c:	2180      	movs	r1, #128	; 0x80
 801071e:	480c      	ldr	r0, [pc, #48]	; (8010750 <USBD_LL_Init+0x70>)
 8010720:	f7fa fb1c 	bl	800ad5c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010724:	2240      	movs	r2, #64	; 0x40
 8010726:	2100      	movs	r1, #0
 8010728:	4809      	ldr	r0, [pc, #36]	; (8010750 <USBD_LL_Init+0x70>)
 801072a:	f7fa faf1 	bl	800ad10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801072e:	2280      	movs	r2, #128	; 0x80
 8010730:	2101      	movs	r1, #1
 8010732:	4807      	ldr	r0, [pc, #28]	; (8010750 <USBD_LL_Init+0x70>)
 8010734:	f7fa faec 	bl	800ad10 <HAL_PCDEx_SetTxFiFo>
}
 8010738:	2000      	movs	r0, #0
 801073a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 801073c:	f7f4 fca2 	bl	8005084 <Error_Handler>
 8010740:	e7ec      	b.n	801071c <USBD_LL_Init+0x3c>
 8010742:	bf00      	nop
 8010744:	f3af 8000 	nop.w
	...
 8010750:	2400cea0 	.word	0x2400cea0
 8010754:	40080000 	.word	0x40080000

08010758 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8010758:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 801075c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 801075e:	f7f9 fbb7 	bl	8009ed0 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8010762:	2803      	cmp	r0, #3
 8010764:	d802      	bhi.n	801076c <USBD_LL_Start+0x14>
 8010766:	4b02      	ldr	r3, [pc, #8]	; (8010770 <USBD_LL_Start+0x18>)
 8010768:	5c18      	ldrb	r0, [r3, r0]
}
 801076a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 801076c:	2003      	movs	r0, #3
}
 801076e:	bd08      	pop	{r3, pc}
 8010770:	0801dbd8 	.word	0x0801dbd8

08010774 <USBD_LL_OpenEP>:
{
 8010774:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010776:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 801077a:	461a      	mov	r2, r3
 801077c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801077e:	4663      	mov	r3, ip
 8010780:	f7fa f984 	bl	800aa8c <HAL_PCD_EP_Open>
  switch (hal_status)
 8010784:	2803      	cmp	r0, #3
 8010786:	d802      	bhi.n	801078e <USBD_LL_OpenEP+0x1a>
 8010788:	4b02      	ldr	r3, [pc, #8]	; (8010794 <USBD_LL_OpenEP+0x20>)
 801078a:	5c18      	ldrb	r0, [r3, r0]
}
 801078c:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801078e:	2003      	movs	r0, #3
}
 8010790:	bd08      	pop	{r3, pc}
 8010792:	bf00      	nop
 8010794:	0801dbd8 	.word	0x0801dbd8

08010798 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010798:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 801079c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801079e:	f7fa f9b3 	bl	800ab08 <HAL_PCD_EP_Close>
  switch (hal_status)
 80107a2:	2803      	cmp	r0, #3
 80107a4:	d802      	bhi.n	80107ac <USBD_LL_CloseEP+0x14>
 80107a6:	4b02      	ldr	r3, [pc, #8]	; (80107b0 <USBD_LL_CloseEP+0x18>)
 80107a8:	5c18      	ldrb	r0, [r3, r0]
}
 80107aa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80107ac:	2003      	movs	r0, #3
}
 80107ae:	bd08      	pop	{r3, pc}
 80107b0:	0801dbd8 	.word	0x0801dbd8

080107b4 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80107b4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 80107b8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80107ba:	f7fa fa29 	bl	800ac10 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80107be:	2803      	cmp	r0, #3
 80107c0:	d802      	bhi.n	80107c8 <USBD_LL_StallEP+0x14>
 80107c2:	4b02      	ldr	r3, [pc, #8]	; (80107cc <USBD_LL_StallEP+0x18>)
 80107c4:	5c18      	ldrb	r0, [r3, r0]
}
 80107c6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80107c8:	2003      	movs	r0, #3
}
 80107ca:	bd08      	pop	{r3, pc}
 80107cc:	0801dbd8 	.word	0x0801dbd8

080107d0 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80107d0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 80107d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80107d6:	f7fa fa5f 	bl	800ac98 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80107da:	2803      	cmp	r0, #3
 80107dc:	d802      	bhi.n	80107e4 <USBD_LL_ClearStallEP+0x14>
 80107de:	4b02      	ldr	r3, [pc, #8]	; (80107e8 <USBD_LL_ClearStallEP+0x18>)
 80107e0:	5c18      	ldrb	r0, [r3, r0]
}
 80107e2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80107e4:	2003      	movs	r0, #3
}
 80107e6:	bd08      	pop	{r3, pc}
 80107e8:	0801dbd8 	.word	0x0801dbd8

080107ec <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80107ec:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80107ee:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 80107f2:	d406      	bmi.n	8010802 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80107f4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80107f8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80107fc:	f893 027e 	ldrb.w	r0, [r3, #638]	; 0x27e
}
 8010800:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010802:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8010806:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801080a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801080e:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8010812:	4770      	bx	lr

08010814 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010814:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8010818:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801081a:	f7fa f921 	bl	800aa60 <HAL_PCD_SetAddress>
  switch (hal_status)
 801081e:	2803      	cmp	r0, #3
 8010820:	d802      	bhi.n	8010828 <USBD_LL_SetUSBAddress+0x14>
 8010822:	4b02      	ldr	r3, [pc, #8]	; (801082c <USBD_LL_SetUSBAddress+0x18>)
 8010824:	5c18      	ldrb	r0, [r3, r0]
}
 8010826:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010828:	2003      	movs	r0, #3
}
 801082a:	bd08      	pop	{r3, pc}
 801082c:	0801dbd8 	.word	0x0801dbd8

08010830 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010830:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8010834:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010836:	f7fa f9c9 	bl	800abcc <HAL_PCD_EP_Transmit>
  switch (hal_status)
 801083a:	2803      	cmp	r0, #3
 801083c:	d802      	bhi.n	8010844 <USBD_LL_Transmit+0x14>
 801083e:	4b02      	ldr	r3, [pc, #8]	; (8010848 <USBD_LL_Transmit+0x18>)
 8010840:	5c18      	ldrb	r0, [r3, r0]
}
 8010842:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010844:	2003      	movs	r0, #3
}
 8010846:	bd08      	pop	{r3, pc}
 8010848:	0801dbd8 	.word	0x0801dbd8

0801084c <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801084c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8010850:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010852:	f7fa f98f 	bl	800ab74 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8010856:	2803      	cmp	r0, #3
 8010858:	d802      	bhi.n	8010860 <USBD_LL_PrepareReceive+0x14>
 801085a:	4b02      	ldr	r3, [pc, #8]	; (8010864 <USBD_LL_PrepareReceive+0x18>)
 801085c:	5c18      	ldrb	r0, [r3, r0]
}
 801085e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010860:	2003      	movs	r0, #3
}
 8010862:	bd08      	pop	{r3, pc}
 8010864:	0801dbd8 	.word	0x0801dbd8

08010868 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010868:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 801086c:	f7fa b9a4 	b.w	800abb8 <HAL_PCD_EP_GetRxCount>

08010870 <USBD_static_malloc>:
}
 8010870:	4800      	ldr	r0, [pc, #0]	; (8010874 <USBD_static_malloc+0x4>)
 8010872:	4770      	bx	lr
 8010874:	2400d3ac 	.word	0x2400d3ac

08010878 <USBD_static_free>:
}
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop

0801087c <atoi>:
 801087c:	220a      	movs	r2, #10
 801087e:	2100      	movs	r1, #0
 8010880:	f000 b8ee 	b.w	8010a60 <strtol>

08010884 <srand>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4b10      	ldr	r3, [pc, #64]	; (80108c8 <srand+0x44>)
 8010888:	681d      	ldr	r5, [r3, #0]
 801088a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801088c:	4604      	mov	r4, r0
 801088e:	b9b3      	cbnz	r3, 80108be <srand+0x3a>
 8010890:	2018      	movs	r0, #24
 8010892:	f001 fd9d 	bl	80123d0 <malloc>
 8010896:	4602      	mov	r2, r0
 8010898:	6328      	str	r0, [r5, #48]	; 0x30
 801089a:	b920      	cbnz	r0, 80108a6 <srand+0x22>
 801089c:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <srand+0x48>)
 801089e:	480c      	ldr	r0, [pc, #48]	; (80108d0 <srand+0x4c>)
 80108a0:	2146      	movs	r1, #70	; 0x46
 80108a2:	f000 ff37 	bl	8011714 <__assert_func>
 80108a6:	490b      	ldr	r1, [pc, #44]	; (80108d4 <srand+0x50>)
 80108a8:	4b0b      	ldr	r3, [pc, #44]	; (80108d8 <srand+0x54>)
 80108aa:	e9c0 1300 	strd	r1, r3, [r0]
 80108ae:	4b0b      	ldr	r3, [pc, #44]	; (80108dc <srand+0x58>)
 80108b0:	6083      	str	r3, [r0, #8]
 80108b2:	230b      	movs	r3, #11
 80108b4:	8183      	strh	r3, [r0, #12]
 80108b6:	2100      	movs	r1, #0
 80108b8:	2001      	movs	r0, #1
 80108ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80108be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80108c0:	2200      	movs	r2, #0
 80108c2:	611c      	str	r4, [r3, #16]
 80108c4:	615a      	str	r2, [r3, #20]
 80108c6:	bd38      	pop	{r3, r4, r5, pc}
 80108c8:	2400046c 	.word	0x2400046c
 80108cc:	0801dbdc 	.word	0x0801dbdc
 80108d0:	0801dbf3 	.word	0x0801dbf3
 80108d4:	abcd330e 	.word	0xabcd330e
 80108d8:	e66d1234 	.word	0xe66d1234
 80108dc:	0005deec 	.word	0x0005deec

080108e0 <rand>:
 80108e0:	4b16      	ldr	r3, [pc, #88]	; (801093c <rand+0x5c>)
 80108e2:	b510      	push	{r4, lr}
 80108e4:	681c      	ldr	r4, [r3, #0]
 80108e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80108e8:	b9b3      	cbnz	r3, 8010918 <rand+0x38>
 80108ea:	2018      	movs	r0, #24
 80108ec:	f001 fd70 	bl	80123d0 <malloc>
 80108f0:	4602      	mov	r2, r0
 80108f2:	6320      	str	r0, [r4, #48]	; 0x30
 80108f4:	b920      	cbnz	r0, 8010900 <rand+0x20>
 80108f6:	4b12      	ldr	r3, [pc, #72]	; (8010940 <rand+0x60>)
 80108f8:	4812      	ldr	r0, [pc, #72]	; (8010944 <rand+0x64>)
 80108fa:	2152      	movs	r1, #82	; 0x52
 80108fc:	f000 ff0a 	bl	8011714 <__assert_func>
 8010900:	4911      	ldr	r1, [pc, #68]	; (8010948 <rand+0x68>)
 8010902:	4b12      	ldr	r3, [pc, #72]	; (801094c <rand+0x6c>)
 8010904:	e9c0 1300 	strd	r1, r3, [r0]
 8010908:	4b11      	ldr	r3, [pc, #68]	; (8010950 <rand+0x70>)
 801090a:	6083      	str	r3, [r0, #8]
 801090c:	230b      	movs	r3, #11
 801090e:	8183      	strh	r3, [r0, #12]
 8010910:	2100      	movs	r1, #0
 8010912:	2001      	movs	r0, #1
 8010914:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010918:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801091a:	480e      	ldr	r0, [pc, #56]	; (8010954 <rand+0x74>)
 801091c:	690b      	ldr	r3, [r1, #16]
 801091e:	694c      	ldr	r4, [r1, #20]
 8010920:	4a0d      	ldr	r2, [pc, #52]	; (8010958 <rand+0x78>)
 8010922:	4358      	muls	r0, r3
 8010924:	fb02 0004 	mla	r0, r2, r4, r0
 8010928:	fba3 3202 	umull	r3, r2, r3, r2
 801092c:	3301      	adds	r3, #1
 801092e:	eb40 0002 	adc.w	r0, r0, r2
 8010932:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010936:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801093a:	bd10      	pop	{r4, pc}
 801093c:	2400046c 	.word	0x2400046c
 8010940:	0801dbdc 	.word	0x0801dbdc
 8010944:	0801dbf3 	.word	0x0801dbf3
 8010948:	abcd330e 	.word	0xabcd330e
 801094c:	e66d1234 	.word	0xe66d1234
 8010950:	0005deec 	.word	0x0005deec
 8010954:	5851f42d 	.word	0x5851f42d
 8010958:	4c957f2d 	.word	0x4c957f2d

0801095c <_strtol_l.constprop.0>:
 801095c:	2b01      	cmp	r3, #1
 801095e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010962:	d001      	beq.n	8010968 <_strtol_l.constprop.0+0xc>
 8010964:	2b24      	cmp	r3, #36	; 0x24
 8010966:	d906      	bls.n	8010976 <_strtol_l.constprop.0+0x1a>
 8010968:	f000 fe92 	bl	8011690 <__errno>
 801096c:	2316      	movs	r3, #22
 801096e:	6003      	str	r3, [r0, #0]
 8010970:	2000      	movs	r0, #0
 8010972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010976:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010a5c <_strtol_l.constprop.0+0x100>
 801097a:	460d      	mov	r5, r1
 801097c:	462e      	mov	r6, r5
 801097e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010982:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010986:	f017 0708 	ands.w	r7, r7, #8
 801098a:	d1f7      	bne.n	801097c <_strtol_l.constprop.0+0x20>
 801098c:	2c2d      	cmp	r4, #45	; 0x2d
 801098e:	d132      	bne.n	80109f6 <_strtol_l.constprop.0+0x9a>
 8010990:	782c      	ldrb	r4, [r5, #0]
 8010992:	2701      	movs	r7, #1
 8010994:	1cb5      	adds	r5, r6, #2
 8010996:	2b00      	cmp	r3, #0
 8010998:	d05b      	beq.n	8010a52 <_strtol_l.constprop.0+0xf6>
 801099a:	2b10      	cmp	r3, #16
 801099c:	d109      	bne.n	80109b2 <_strtol_l.constprop.0+0x56>
 801099e:	2c30      	cmp	r4, #48	; 0x30
 80109a0:	d107      	bne.n	80109b2 <_strtol_l.constprop.0+0x56>
 80109a2:	782c      	ldrb	r4, [r5, #0]
 80109a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80109a8:	2c58      	cmp	r4, #88	; 0x58
 80109aa:	d14d      	bne.n	8010a48 <_strtol_l.constprop.0+0xec>
 80109ac:	786c      	ldrb	r4, [r5, #1]
 80109ae:	2310      	movs	r3, #16
 80109b0:	3502      	adds	r5, #2
 80109b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80109b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80109ba:	f04f 0e00 	mov.w	lr, #0
 80109be:	fbb8 f9f3 	udiv	r9, r8, r3
 80109c2:	4676      	mov	r6, lr
 80109c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80109c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80109cc:	f1bc 0f09 	cmp.w	ip, #9
 80109d0:	d816      	bhi.n	8010a00 <_strtol_l.constprop.0+0xa4>
 80109d2:	4664      	mov	r4, ip
 80109d4:	42a3      	cmp	r3, r4
 80109d6:	dd24      	ble.n	8010a22 <_strtol_l.constprop.0+0xc6>
 80109d8:	f1be 3fff 	cmp.w	lr, #4294967295
 80109dc:	d008      	beq.n	80109f0 <_strtol_l.constprop.0+0x94>
 80109de:	45b1      	cmp	r9, r6
 80109e0:	d31c      	bcc.n	8010a1c <_strtol_l.constprop.0+0xc0>
 80109e2:	d101      	bne.n	80109e8 <_strtol_l.constprop.0+0x8c>
 80109e4:	45a2      	cmp	sl, r4
 80109e6:	db19      	blt.n	8010a1c <_strtol_l.constprop.0+0xc0>
 80109e8:	fb06 4603 	mla	r6, r6, r3, r4
 80109ec:	f04f 0e01 	mov.w	lr, #1
 80109f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109f4:	e7e8      	b.n	80109c8 <_strtol_l.constprop.0+0x6c>
 80109f6:	2c2b      	cmp	r4, #43	; 0x2b
 80109f8:	bf04      	itt	eq
 80109fa:	782c      	ldrbeq	r4, [r5, #0]
 80109fc:	1cb5      	addeq	r5, r6, #2
 80109fe:	e7ca      	b.n	8010996 <_strtol_l.constprop.0+0x3a>
 8010a00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010a04:	f1bc 0f19 	cmp.w	ip, #25
 8010a08:	d801      	bhi.n	8010a0e <_strtol_l.constprop.0+0xb2>
 8010a0a:	3c37      	subs	r4, #55	; 0x37
 8010a0c:	e7e2      	b.n	80109d4 <_strtol_l.constprop.0+0x78>
 8010a0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010a12:	f1bc 0f19 	cmp.w	ip, #25
 8010a16:	d804      	bhi.n	8010a22 <_strtol_l.constprop.0+0xc6>
 8010a18:	3c57      	subs	r4, #87	; 0x57
 8010a1a:	e7db      	b.n	80109d4 <_strtol_l.constprop.0+0x78>
 8010a1c:	f04f 3eff 	mov.w	lr, #4294967295
 8010a20:	e7e6      	b.n	80109f0 <_strtol_l.constprop.0+0x94>
 8010a22:	f1be 3fff 	cmp.w	lr, #4294967295
 8010a26:	d105      	bne.n	8010a34 <_strtol_l.constprop.0+0xd8>
 8010a28:	2322      	movs	r3, #34	; 0x22
 8010a2a:	6003      	str	r3, [r0, #0]
 8010a2c:	4646      	mov	r6, r8
 8010a2e:	b942      	cbnz	r2, 8010a42 <_strtol_l.constprop.0+0xe6>
 8010a30:	4630      	mov	r0, r6
 8010a32:	e79e      	b.n	8010972 <_strtol_l.constprop.0+0x16>
 8010a34:	b107      	cbz	r7, 8010a38 <_strtol_l.constprop.0+0xdc>
 8010a36:	4276      	negs	r6, r6
 8010a38:	2a00      	cmp	r2, #0
 8010a3a:	d0f9      	beq.n	8010a30 <_strtol_l.constprop.0+0xd4>
 8010a3c:	f1be 0f00 	cmp.w	lr, #0
 8010a40:	d000      	beq.n	8010a44 <_strtol_l.constprop.0+0xe8>
 8010a42:	1e69      	subs	r1, r5, #1
 8010a44:	6011      	str	r1, [r2, #0]
 8010a46:	e7f3      	b.n	8010a30 <_strtol_l.constprop.0+0xd4>
 8010a48:	2430      	movs	r4, #48	; 0x30
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d1b1      	bne.n	80109b2 <_strtol_l.constprop.0+0x56>
 8010a4e:	2308      	movs	r3, #8
 8010a50:	e7af      	b.n	80109b2 <_strtol_l.constprop.0+0x56>
 8010a52:	2c30      	cmp	r4, #48	; 0x30
 8010a54:	d0a5      	beq.n	80109a2 <_strtol_l.constprop.0+0x46>
 8010a56:	230a      	movs	r3, #10
 8010a58:	e7ab      	b.n	80109b2 <_strtol_l.constprop.0+0x56>
 8010a5a:	bf00      	nop
 8010a5c:	0801dc4c 	.word	0x0801dc4c

08010a60 <strtol>:
 8010a60:	4613      	mov	r3, r2
 8010a62:	460a      	mov	r2, r1
 8010a64:	4601      	mov	r1, r0
 8010a66:	4802      	ldr	r0, [pc, #8]	; (8010a70 <strtol+0x10>)
 8010a68:	6800      	ldr	r0, [r0, #0]
 8010a6a:	f7ff bf77 	b.w	801095c <_strtol_l.constprop.0>
 8010a6e:	bf00      	nop
 8010a70:	2400046c 	.word	0x2400046c

08010a74 <__cvt>:
 8010a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a76:	ed2d 8b02 	vpush	{d8}
 8010a7a:	eeb0 8b40 	vmov.f64	d8, d0
 8010a7e:	b085      	sub	sp, #20
 8010a80:	4617      	mov	r7, r2
 8010a82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010a84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010a86:	ee18 2a90 	vmov	r2, s17
 8010a8a:	f025 0520 	bic.w	r5, r5, #32
 8010a8e:	2a00      	cmp	r2, #0
 8010a90:	bfb6      	itet	lt
 8010a92:	222d      	movlt	r2, #45	; 0x2d
 8010a94:	2200      	movge	r2, #0
 8010a96:	eeb1 8b40 	vneglt.f64	d8, d0
 8010a9a:	2d46      	cmp	r5, #70	; 0x46
 8010a9c:	460c      	mov	r4, r1
 8010a9e:	701a      	strb	r2, [r3, #0]
 8010aa0:	d004      	beq.n	8010aac <__cvt+0x38>
 8010aa2:	2d45      	cmp	r5, #69	; 0x45
 8010aa4:	d100      	bne.n	8010aa8 <__cvt+0x34>
 8010aa6:	3401      	adds	r4, #1
 8010aa8:	2102      	movs	r1, #2
 8010aaa:	e000      	b.n	8010aae <__cvt+0x3a>
 8010aac:	2103      	movs	r1, #3
 8010aae:	ab03      	add	r3, sp, #12
 8010ab0:	9301      	str	r3, [sp, #4]
 8010ab2:	ab02      	add	r3, sp, #8
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	4622      	mov	r2, r4
 8010ab8:	4633      	mov	r3, r6
 8010aba:	eeb0 0b48 	vmov.f64	d0, d8
 8010abe:	f000 fecf 	bl	8011860 <_dtoa_r>
 8010ac2:	2d47      	cmp	r5, #71	; 0x47
 8010ac4:	d101      	bne.n	8010aca <__cvt+0x56>
 8010ac6:	07fb      	lsls	r3, r7, #31
 8010ac8:	d51a      	bpl.n	8010b00 <__cvt+0x8c>
 8010aca:	2d46      	cmp	r5, #70	; 0x46
 8010acc:	eb00 0204 	add.w	r2, r0, r4
 8010ad0:	d10c      	bne.n	8010aec <__cvt+0x78>
 8010ad2:	7803      	ldrb	r3, [r0, #0]
 8010ad4:	2b30      	cmp	r3, #48	; 0x30
 8010ad6:	d107      	bne.n	8010ae8 <__cvt+0x74>
 8010ad8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae0:	bf1c      	itt	ne
 8010ae2:	f1c4 0401 	rsbne	r4, r4, #1
 8010ae6:	6034      	strne	r4, [r6, #0]
 8010ae8:	6833      	ldr	r3, [r6, #0]
 8010aea:	441a      	add	r2, r3
 8010aec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af4:	bf08      	it	eq
 8010af6:	9203      	streq	r2, [sp, #12]
 8010af8:	2130      	movs	r1, #48	; 0x30
 8010afa:	9b03      	ldr	r3, [sp, #12]
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d307      	bcc.n	8010b10 <__cvt+0x9c>
 8010b00:	9b03      	ldr	r3, [sp, #12]
 8010b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b04:	1a1b      	subs	r3, r3, r0
 8010b06:	6013      	str	r3, [r2, #0]
 8010b08:	b005      	add	sp, #20
 8010b0a:	ecbd 8b02 	vpop	{d8}
 8010b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b10:	1c5c      	adds	r4, r3, #1
 8010b12:	9403      	str	r4, [sp, #12]
 8010b14:	7019      	strb	r1, [r3, #0]
 8010b16:	e7f0      	b.n	8010afa <__cvt+0x86>

08010b18 <__exponent>:
 8010b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	bfb8      	it	lt
 8010b20:	4249      	neglt	r1, r1
 8010b22:	f803 2b02 	strb.w	r2, [r3], #2
 8010b26:	bfb4      	ite	lt
 8010b28:	222d      	movlt	r2, #45	; 0x2d
 8010b2a:	222b      	movge	r2, #43	; 0x2b
 8010b2c:	2909      	cmp	r1, #9
 8010b2e:	7042      	strb	r2, [r0, #1]
 8010b30:	dd2a      	ble.n	8010b88 <__exponent+0x70>
 8010b32:	f10d 0207 	add.w	r2, sp, #7
 8010b36:	4617      	mov	r7, r2
 8010b38:	260a      	movs	r6, #10
 8010b3a:	4694      	mov	ip, r2
 8010b3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8010b40:	fb06 1415 	mls	r4, r6, r5, r1
 8010b44:	3430      	adds	r4, #48	; 0x30
 8010b46:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010b4a:	460c      	mov	r4, r1
 8010b4c:	2c63      	cmp	r4, #99	; 0x63
 8010b4e:	f102 32ff 	add.w	r2, r2, #4294967295
 8010b52:	4629      	mov	r1, r5
 8010b54:	dcf1      	bgt.n	8010b3a <__exponent+0x22>
 8010b56:	3130      	adds	r1, #48	; 0x30
 8010b58:	f1ac 0402 	sub.w	r4, ip, #2
 8010b5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010b60:	1c41      	adds	r1, r0, #1
 8010b62:	4622      	mov	r2, r4
 8010b64:	42ba      	cmp	r2, r7
 8010b66:	d30a      	bcc.n	8010b7e <__exponent+0x66>
 8010b68:	f10d 0209 	add.w	r2, sp, #9
 8010b6c:	eba2 020c 	sub.w	r2, r2, ip
 8010b70:	42bc      	cmp	r4, r7
 8010b72:	bf88      	it	hi
 8010b74:	2200      	movhi	r2, #0
 8010b76:	4413      	add	r3, r2
 8010b78:	1a18      	subs	r0, r3, r0
 8010b7a:	b003      	add	sp, #12
 8010b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b7e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010b82:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010b86:	e7ed      	b.n	8010b64 <__exponent+0x4c>
 8010b88:	2330      	movs	r3, #48	; 0x30
 8010b8a:	3130      	adds	r1, #48	; 0x30
 8010b8c:	7083      	strb	r3, [r0, #2]
 8010b8e:	70c1      	strb	r1, [r0, #3]
 8010b90:	1d03      	adds	r3, r0, #4
 8010b92:	e7f1      	b.n	8010b78 <__exponent+0x60>
 8010b94:	0000      	movs	r0, r0
	...

08010b98 <_printf_float>:
 8010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	b08b      	sub	sp, #44	; 0x2c
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010ba4:	4616      	mov	r6, r2
 8010ba6:	461f      	mov	r7, r3
 8010ba8:	4605      	mov	r5, r0
 8010baa:	f000 fd27 	bl	80115fc <_localeconv_r>
 8010bae:	f8d0 b000 	ldr.w	fp, [r0]
 8010bb2:	4658      	mov	r0, fp
 8010bb4:	f7ef fc44 	bl	8000440 <strlen>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	9308      	str	r3, [sp, #32]
 8010bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8010bc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010bc4:	6822      	ldr	r2, [r4, #0]
 8010bc6:	3307      	adds	r3, #7
 8010bc8:	f023 0307 	bic.w	r3, r3, #7
 8010bcc:	f103 0108 	add.w	r1, r3, #8
 8010bd0:	f8c8 1000 	str.w	r1, [r8]
 8010bd4:	ed93 0b00 	vldr	d0, [r3]
 8010bd8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8010e38 <_printf_float+0x2a0>
 8010bdc:	eeb0 7bc0 	vabs.f64	d7, d0
 8010be0:	eeb4 7b46 	vcmp.f64	d7, d6
 8010be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8010bec:	4682      	mov	sl, r0
 8010bee:	dd24      	ble.n	8010c3a <_printf_float+0xa2>
 8010bf0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf8:	d502      	bpl.n	8010c00 <_printf_float+0x68>
 8010bfa:	232d      	movs	r3, #45	; 0x2d
 8010bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c00:	498f      	ldr	r1, [pc, #572]	; (8010e40 <_printf_float+0x2a8>)
 8010c02:	4b90      	ldr	r3, [pc, #576]	; (8010e44 <_printf_float+0x2ac>)
 8010c04:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010c08:	bf94      	ite	ls
 8010c0a:	4688      	movls	r8, r1
 8010c0c:	4698      	movhi	r8, r3
 8010c0e:	2303      	movs	r3, #3
 8010c10:	6123      	str	r3, [r4, #16]
 8010c12:	f022 0204 	bic.w	r2, r2, #4
 8010c16:	2300      	movs	r3, #0
 8010c18:	6022      	str	r2, [r4, #0]
 8010c1a:	9304      	str	r3, [sp, #16]
 8010c1c:	9700      	str	r7, [sp, #0]
 8010c1e:	4633      	mov	r3, r6
 8010c20:	aa09      	add	r2, sp, #36	; 0x24
 8010c22:	4621      	mov	r1, r4
 8010c24:	4628      	mov	r0, r5
 8010c26:	f000 f9d1 	bl	8010fcc <_printf_common>
 8010c2a:	3001      	adds	r0, #1
 8010c2c:	f040 808a 	bne.w	8010d44 <_printf_float+0x1ac>
 8010c30:	f04f 30ff 	mov.w	r0, #4294967295
 8010c34:	b00b      	add	sp, #44	; 0x2c
 8010c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c3a:	eeb4 0b40 	vcmp.f64	d0, d0
 8010c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c42:	d709      	bvc.n	8010c58 <_printf_float+0xc0>
 8010c44:	ee10 3a90 	vmov	r3, s1
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	bfbc      	itt	lt
 8010c4c:	232d      	movlt	r3, #45	; 0x2d
 8010c4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010c52:	497d      	ldr	r1, [pc, #500]	; (8010e48 <_printf_float+0x2b0>)
 8010c54:	4b7d      	ldr	r3, [pc, #500]	; (8010e4c <_printf_float+0x2b4>)
 8010c56:	e7d5      	b.n	8010c04 <_printf_float+0x6c>
 8010c58:	6863      	ldr	r3, [r4, #4]
 8010c5a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010c5e:	9104      	str	r1, [sp, #16]
 8010c60:	1c59      	adds	r1, r3, #1
 8010c62:	d13c      	bne.n	8010cde <_printf_float+0x146>
 8010c64:	2306      	movs	r3, #6
 8010c66:	6063      	str	r3, [r4, #4]
 8010c68:	2300      	movs	r3, #0
 8010c6a:	9303      	str	r3, [sp, #12]
 8010c6c:	ab08      	add	r3, sp, #32
 8010c6e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010c72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010c76:	ab07      	add	r3, sp, #28
 8010c78:	6861      	ldr	r1, [r4, #4]
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	6022      	str	r2, [r4, #0]
 8010c7e:	f10d 031b 	add.w	r3, sp, #27
 8010c82:	4628      	mov	r0, r5
 8010c84:	f7ff fef6 	bl	8010a74 <__cvt>
 8010c88:	9b04      	ldr	r3, [sp, #16]
 8010c8a:	9907      	ldr	r1, [sp, #28]
 8010c8c:	2b47      	cmp	r3, #71	; 0x47
 8010c8e:	4680      	mov	r8, r0
 8010c90:	d108      	bne.n	8010ca4 <_printf_float+0x10c>
 8010c92:	1cc8      	adds	r0, r1, #3
 8010c94:	db02      	blt.n	8010c9c <_printf_float+0x104>
 8010c96:	6863      	ldr	r3, [r4, #4]
 8010c98:	4299      	cmp	r1, r3
 8010c9a:	dd41      	ble.n	8010d20 <_printf_float+0x188>
 8010c9c:	f1a9 0902 	sub.w	r9, r9, #2
 8010ca0:	fa5f f989 	uxtb.w	r9, r9
 8010ca4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010ca8:	d820      	bhi.n	8010cec <_printf_float+0x154>
 8010caa:	3901      	subs	r1, #1
 8010cac:	464a      	mov	r2, r9
 8010cae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010cb2:	9107      	str	r1, [sp, #28]
 8010cb4:	f7ff ff30 	bl	8010b18 <__exponent>
 8010cb8:	9a08      	ldr	r2, [sp, #32]
 8010cba:	9004      	str	r0, [sp, #16]
 8010cbc:	1813      	adds	r3, r2, r0
 8010cbe:	2a01      	cmp	r2, #1
 8010cc0:	6123      	str	r3, [r4, #16]
 8010cc2:	dc02      	bgt.n	8010cca <_printf_float+0x132>
 8010cc4:	6822      	ldr	r2, [r4, #0]
 8010cc6:	07d2      	lsls	r2, r2, #31
 8010cc8:	d501      	bpl.n	8010cce <_printf_float+0x136>
 8010cca:	3301      	adds	r3, #1
 8010ccc:	6123      	str	r3, [r4, #16]
 8010cce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d0a2      	beq.n	8010c1c <_printf_float+0x84>
 8010cd6:	232d      	movs	r3, #45	; 0x2d
 8010cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cdc:	e79e      	b.n	8010c1c <_printf_float+0x84>
 8010cde:	9904      	ldr	r1, [sp, #16]
 8010ce0:	2947      	cmp	r1, #71	; 0x47
 8010ce2:	d1c1      	bne.n	8010c68 <_printf_float+0xd0>
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d1bf      	bne.n	8010c68 <_printf_float+0xd0>
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e7bc      	b.n	8010c66 <_printf_float+0xce>
 8010cec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010cf0:	d118      	bne.n	8010d24 <_printf_float+0x18c>
 8010cf2:	2900      	cmp	r1, #0
 8010cf4:	6863      	ldr	r3, [r4, #4]
 8010cf6:	dd0b      	ble.n	8010d10 <_printf_float+0x178>
 8010cf8:	6121      	str	r1, [r4, #16]
 8010cfa:	b913      	cbnz	r3, 8010d02 <_printf_float+0x16a>
 8010cfc:	6822      	ldr	r2, [r4, #0]
 8010cfe:	07d0      	lsls	r0, r2, #31
 8010d00:	d502      	bpl.n	8010d08 <_printf_float+0x170>
 8010d02:	3301      	adds	r3, #1
 8010d04:	440b      	add	r3, r1
 8010d06:	6123      	str	r3, [r4, #16]
 8010d08:	2300      	movs	r3, #0
 8010d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8010d0c:	9304      	str	r3, [sp, #16]
 8010d0e:	e7de      	b.n	8010cce <_printf_float+0x136>
 8010d10:	b913      	cbnz	r3, 8010d18 <_printf_float+0x180>
 8010d12:	6822      	ldr	r2, [r4, #0]
 8010d14:	07d2      	lsls	r2, r2, #31
 8010d16:	d501      	bpl.n	8010d1c <_printf_float+0x184>
 8010d18:	3302      	adds	r3, #2
 8010d1a:	e7f4      	b.n	8010d06 <_printf_float+0x16e>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e7f2      	b.n	8010d06 <_printf_float+0x16e>
 8010d20:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010d24:	9b08      	ldr	r3, [sp, #32]
 8010d26:	4299      	cmp	r1, r3
 8010d28:	db05      	blt.n	8010d36 <_printf_float+0x19e>
 8010d2a:	6823      	ldr	r3, [r4, #0]
 8010d2c:	6121      	str	r1, [r4, #16]
 8010d2e:	07d8      	lsls	r0, r3, #31
 8010d30:	d5ea      	bpl.n	8010d08 <_printf_float+0x170>
 8010d32:	1c4b      	adds	r3, r1, #1
 8010d34:	e7e7      	b.n	8010d06 <_printf_float+0x16e>
 8010d36:	2900      	cmp	r1, #0
 8010d38:	bfd4      	ite	le
 8010d3a:	f1c1 0202 	rsble	r2, r1, #2
 8010d3e:	2201      	movgt	r2, #1
 8010d40:	4413      	add	r3, r2
 8010d42:	e7e0      	b.n	8010d06 <_printf_float+0x16e>
 8010d44:	6823      	ldr	r3, [r4, #0]
 8010d46:	055a      	lsls	r2, r3, #21
 8010d48:	d407      	bmi.n	8010d5a <_printf_float+0x1c2>
 8010d4a:	6923      	ldr	r3, [r4, #16]
 8010d4c:	4642      	mov	r2, r8
 8010d4e:	4631      	mov	r1, r6
 8010d50:	4628      	mov	r0, r5
 8010d52:	47b8      	blx	r7
 8010d54:	3001      	adds	r0, #1
 8010d56:	d12a      	bne.n	8010dae <_printf_float+0x216>
 8010d58:	e76a      	b.n	8010c30 <_printf_float+0x98>
 8010d5a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010d5e:	f240 80e0 	bls.w	8010f22 <_printf_float+0x38a>
 8010d62:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010d66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d6e:	d133      	bne.n	8010dd8 <_printf_float+0x240>
 8010d70:	4a37      	ldr	r2, [pc, #220]	; (8010e50 <_printf_float+0x2b8>)
 8010d72:	2301      	movs	r3, #1
 8010d74:	4631      	mov	r1, r6
 8010d76:	4628      	mov	r0, r5
 8010d78:	47b8      	blx	r7
 8010d7a:	3001      	adds	r0, #1
 8010d7c:	f43f af58 	beq.w	8010c30 <_printf_float+0x98>
 8010d80:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	db02      	blt.n	8010d8e <_printf_float+0x1f6>
 8010d88:	6823      	ldr	r3, [r4, #0]
 8010d8a:	07d8      	lsls	r0, r3, #31
 8010d8c:	d50f      	bpl.n	8010dae <_printf_float+0x216>
 8010d8e:	4653      	mov	r3, sl
 8010d90:	465a      	mov	r2, fp
 8010d92:	4631      	mov	r1, r6
 8010d94:	4628      	mov	r0, r5
 8010d96:	47b8      	blx	r7
 8010d98:	3001      	adds	r0, #1
 8010d9a:	f43f af49 	beq.w	8010c30 <_printf_float+0x98>
 8010d9e:	f04f 0800 	mov.w	r8, #0
 8010da2:	f104 091a 	add.w	r9, r4, #26
 8010da6:	9b08      	ldr	r3, [sp, #32]
 8010da8:	3b01      	subs	r3, #1
 8010daa:	4543      	cmp	r3, r8
 8010dac:	dc09      	bgt.n	8010dc2 <_printf_float+0x22a>
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	079b      	lsls	r3, r3, #30
 8010db2:	f100 8106 	bmi.w	8010fc2 <_printf_float+0x42a>
 8010db6:	68e0      	ldr	r0, [r4, #12]
 8010db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dba:	4298      	cmp	r0, r3
 8010dbc:	bfb8      	it	lt
 8010dbe:	4618      	movlt	r0, r3
 8010dc0:	e738      	b.n	8010c34 <_printf_float+0x9c>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	464a      	mov	r2, r9
 8010dc6:	4631      	mov	r1, r6
 8010dc8:	4628      	mov	r0, r5
 8010dca:	47b8      	blx	r7
 8010dcc:	3001      	adds	r0, #1
 8010dce:	f43f af2f 	beq.w	8010c30 <_printf_float+0x98>
 8010dd2:	f108 0801 	add.w	r8, r8, #1
 8010dd6:	e7e6      	b.n	8010da6 <_printf_float+0x20e>
 8010dd8:	9b07      	ldr	r3, [sp, #28]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	dc3a      	bgt.n	8010e54 <_printf_float+0x2bc>
 8010dde:	4a1c      	ldr	r2, [pc, #112]	; (8010e50 <_printf_float+0x2b8>)
 8010de0:	2301      	movs	r3, #1
 8010de2:	4631      	mov	r1, r6
 8010de4:	4628      	mov	r0, r5
 8010de6:	47b8      	blx	r7
 8010de8:	3001      	adds	r0, #1
 8010dea:	f43f af21 	beq.w	8010c30 <_printf_float+0x98>
 8010dee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010df2:	4313      	orrs	r3, r2
 8010df4:	d102      	bne.n	8010dfc <_printf_float+0x264>
 8010df6:	6823      	ldr	r3, [r4, #0]
 8010df8:	07d9      	lsls	r1, r3, #31
 8010dfa:	d5d8      	bpl.n	8010dae <_printf_float+0x216>
 8010dfc:	4653      	mov	r3, sl
 8010dfe:	465a      	mov	r2, fp
 8010e00:	4631      	mov	r1, r6
 8010e02:	4628      	mov	r0, r5
 8010e04:	47b8      	blx	r7
 8010e06:	3001      	adds	r0, #1
 8010e08:	f43f af12 	beq.w	8010c30 <_printf_float+0x98>
 8010e0c:	f04f 0900 	mov.w	r9, #0
 8010e10:	f104 0a1a 	add.w	sl, r4, #26
 8010e14:	9b07      	ldr	r3, [sp, #28]
 8010e16:	425b      	negs	r3, r3
 8010e18:	454b      	cmp	r3, r9
 8010e1a:	dc01      	bgt.n	8010e20 <_printf_float+0x288>
 8010e1c:	9b08      	ldr	r3, [sp, #32]
 8010e1e:	e795      	b.n	8010d4c <_printf_float+0x1b4>
 8010e20:	2301      	movs	r3, #1
 8010e22:	4652      	mov	r2, sl
 8010e24:	4631      	mov	r1, r6
 8010e26:	4628      	mov	r0, r5
 8010e28:	47b8      	blx	r7
 8010e2a:	3001      	adds	r0, #1
 8010e2c:	f43f af00 	beq.w	8010c30 <_printf_float+0x98>
 8010e30:	f109 0901 	add.w	r9, r9, #1
 8010e34:	e7ee      	b.n	8010e14 <_printf_float+0x27c>
 8010e36:	bf00      	nop
 8010e38:	ffffffff 	.word	0xffffffff
 8010e3c:	7fefffff 	.word	0x7fefffff
 8010e40:	0801dd4c 	.word	0x0801dd4c
 8010e44:	0801dd50 	.word	0x0801dd50
 8010e48:	0801dd54 	.word	0x0801dd54
 8010e4c:	0801dd58 	.word	0x0801dd58
 8010e50:	0801dd5c 	.word	0x0801dd5c
 8010e54:	9a08      	ldr	r2, [sp, #32]
 8010e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	bfa8      	it	ge
 8010e5c:	461a      	movge	r2, r3
 8010e5e:	2a00      	cmp	r2, #0
 8010e60:	4691      	mov	r9, r2
 8010e62:	dc38      	bgt.n	8010ed6 <_printf_float+0x33e>
 8010e64:	2300      	movs	r3, #0
 8010e66:	9305      	str	r3, [sp, #20]
 8010e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e6c:	f104 021a 	add.w	r2, r4, #26
 8010e70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e72:	9905      	ldr	r1, [sp, #20]
 8010e74:	9304      	str	r3, [sp, #16]
 8010e76:	eba3 0309 	sub.w	r3, r3, r9
 8010e7a:	428b      	cmp	r3, r1
 8010e7c:	dc33      	bgt.n	8010ee6 <_printf_float+0x34e>
 8010e7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	db3c      	blt.n	8010f00 <_printf_float+0x368>
 8010e86:	6823      	ldr	r3, [r4, #0]
 8010e88:	07da      	lsls	r2, r3, #31
 8010e8a:	d439      	bmi.n	8010f00 <_printf_float+0x368>
 8010e8c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010e90:	eba2 0903 	sub.w	r9, r2, r3
 8010e94:	9b04      	ldr	r3, [sp, #16]
 8010e96:	1ad2      	subs	r2, r2, r3
 8010e98:	4591      	cmp	r9, r2
 8010e9a:	bfa8      	it	ge
 8010e9c:	4691      	movge	r9, r2
 8010e9e:	f1b9 0f00 	cmp.w	r9, #0
 8010ea2:	dc35      	bgt.n	8010f10 <_printf_float+0x378>
 8010ea4:	f04f 0800 	mov.w	r8, #0
 8010ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010eac:	f104 0a1a 	add.w	sl, r4, #26
 8010eb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010eb4:	1a9b      	subs	r3, r3, r2
 8010eb6:	eba3 0309 	sub.w	r3, r3, r9
 8010eba:	4543      	cmp	r3, r8
 8010ebc:	f77f af77 	ble.w	8010dae <_printf_float+0x216>
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	4652      	mov	r2, sl
 8010ec4:	4631      	mov	r1, r6
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	47b8      	blx	r7
 8010eca:	3001      	adds	r0, #1
 8010ecc:	f43f aeb0 	beq.w	8010c30 <_printf_float+0x98>
 8010ed0:	f108 0801 	add.w	r8, r8, #1
 8010ed4:	e7ec      	b.n	8010eb0 <_printf_float+0x318>
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	4631      	mov	r1, r6
 8010eda:	4642      	mov	r2, r8
 8010edc:	4628      	mov	r0, r5
 8010ede:	47b8      	blx	r7
 8010ee0:	3001      	adds	r0, #1
 8010ee2:	d1bf      	bne.n	8010e64 <_printf_float+0x2cc>
 8010ee4:	e6a4      	b.n	8010c30 <_printf_float+0x98>
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	4631      	mov	r1, r6
 8010eea:	4628      	mov	r0, r5
 8010eec:	9204      	str	r2, [sp, #16]
 8010eee:	47b8      	blx	r7
 8010ef0:	3001      	adds	r0, #1
 8010ef2:	f43f ae9d 	beq.w	8010c30 <_printf_float+0x98>
 8010ef6:	9b05      	ldr	r3, [sp, #20]
 8010ef8:	9a04      	ldr	r2, [sp, #16]
 8010efa:	3301      	adds	r3, #1
 8010efc:	9305      	str	r3, [sp, #20]
 8010efe:	e7b7      	b.n	8010e70 <_printf_float+0x2d8>
 8010f00:	4653      	mov	r3, sl
 8010f02:	465a      	mov	r2, fp
 8010f04:	4631      	mov	r1, r6
 8010f06:	4628      	mov	r0, r5
 8010f08:	47b8      	blx	r7
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	d1be      	bne.n	8010e8c <_printf_float+0x2f4>
 8010f0e:	e68f      	b.n	8010c30 <_printf_float+0x98>
 8010f10:	9a04      	ldr	r2, [sp, #16]
 8010f12:	464b      	mov	r3, r9
 8010f14:	4442      	add	r2, r8
 8010f16:	4631      	mov	r1, r6
 8010f18:	4628      	mov	r0, r5
 8010f1a:	47b8      	blx	r7
 8010f1c:	3001      	adds	r0, #1
 8010f1e:	d1c1      	bne.n	8010ea4 <_printf_float+0x30c>
 8010f20:	e686      	b.n	8010c30 <_printf_float+0x98>
 8010f22:	9a08      	ldr	r2, [sp, #32]
 8010f24:	2a01      	cmp	r2, #1
 8010f26:	dc01      	bgt.n	8010f2c <_printf_float+0x394>
 8010f28:	07db      	lsls	r3, r3, #31
 8010f2a:	d537      	bpl.n	8010f9c <_printf_float+0x404>
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	4642      	mov	r2, r8
 8010f30:	4631      	mov	r1, r6
 8010f32:	4628      	mov	r0, r5
 8010f34:	47b8      	blx	r7
 8010f36:	3001      	adds	r0, #1
 8010f38:	f43f ae7a 	beq.w	8010c30 <_printf_float+0x98>
 8010f3c:	4653      	mov	r3, sl
 8010f3e:	465a      	mov	r2, fp
 8010f40:	4631      	mov	r1, r6
 8010f42:	4628      	mov	r0, r5
 8010f44:	47b8      	blx	r7
 8010f46:	3001      	adds	r0, #1
 8010f48:	f43f ae72 	beq.w	8010c30 <_printf_float+0x98>
 8010f4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010f50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f58:	9b08      	ldr	r3, [sp, #32]
 8010f5a:	d01a      	beq.n	8010f92 <_printf_float+0x3fa>
 8010f5c:	3b01      	subs	r3, #1
 8010f5e:	f108 0201 	add.w	r2, r8, #1
 8010f62:	4631      	mov	r1, r6
 8010f64:	4628      	mov	r0, r5
 8010f66:	47b8      	blx	r7
 8010f68:	3001      	adds	r0, #1
 8010f6a:	d10e      	bne.n	8010f8a <_printf_float+0x3f2>
 8010f6c:	e660      	b.n	8010c30 <_printf_float+0x98>
 8010f6e:	2301      	movs	r3, #1
 8010f70:	464a      	mov	r2, r9
 8010f72:	4631      	mov	r1, r6
 8010f74:	4628      	mov	r0, r5
 8010f76:	47b8      	blx	r7
 8010f78:	3001      	adds	r0, #1
 8010f7a:	f43f ae59 	beq.w	8010c30 <_printf_float+0x98>
 8010f7e:	f108 0801 	add.w	r8, r8, #1
 8010f82:	9b08      	ldr	r3, [sp, #32]
 8010f84:	3b01      	subs	r3, #1
 8010f86:	4543      	cmp	r3, r8
 8010f88:	dcf1      	bgt.n	8010f6e <_printf_float+0x3d6>
 8010f8a:	9b04      	ldr	r3, [sp, #16]
 8010f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010f90:	e6dd      	b.n	8010d4e <_printf_float+0x1b6>
 8010f92:	f04f 0800 	mov.w	r8, #0
 8010f96:	f104 091a 	add.w	r9, r4, #26
 8010f9a:	e7f2      	b.n	8010f82 <_printf_float+0x3ea>
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	4642      	mov	r2, r8
 8010fa0:	e7df      	b.n	8010f62 <_printf_float+0x3ca>
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	464a      	mov	r2, r9
 8010fa6:	4631      	mov	r1, r6
 8010fa8:	4628      	mov	r0, r5
 8010faa:	47b8      	blx	r7
 8010fac:	3001      	adds	r0, #1
 8010fae:	f43f ae3f 	beq.w	8010c30 <_printf_float+0x98>
 8010fb2:	f108 0801 	add.w	r8, r8, #1
 8010fb6:	68e3      	ldr	r3, [r4, #12]
 8010fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010fba:	1a5b      	subs	r3, r3, r1
 8010fbc:	4543      	cmp	r3, r8
 8010fbe:	dcf0      	bgt.n	8010fa2 <_printf_float+0x40a>
 8010fc0:	e6f9      	b.n	8010db6 <_printf_float+0x21e>
 8010fc2:	f04f 0800 	mov.w	r8, #0
 8010fc6:	f104 0919 	add.w	r9, r4, #25
 8010fca:	e7f4      	b.n	8010fb6 <_printf_float+0x41e>

08010fcc <_printf_common>:
 8010fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd0:	4616      	mov	r6, r2
 8010fd2:	4699      	mov	r9, r3
 8010fd4:	688a      	ldr	r2, [r1, #8]
 8010fd6:	690b      	ldr	r3, [r1, #16]
 8010fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	bfb8      	it	lt
 8010fe0:	4613      	movlt	r3, r2
 8010fe2:	6033      	str	r3, [r6, #0]
 8010fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010fe8:	4607      	mov	r7, r0
 8010fea:	460c      	mov	r4, r1
 8010fec:	b10a      	cbz	r2, 8010ff2 <_printf_common+0x26>
 8010fee:	3301      	adds	r3, #1
 8010ff0:	6033      	str	r3, [r6, #0]
 8010ff2:	6823      	ldr	r3, [r4, #0]
 8010ff4:	0699      	lsls	r1, r3, #26
 8010ff6:	bf42      	ittt	mi
 8010ff8:	6833      	ldrmi	r3, [r6, #0]
 8010ffa:	3302      	addmi	r3, #2
 8010ffc:	6033      	strmi	r3, [r6, #0]
 8010ffe:	6825      	ldr	r5, [r4, #0]
 8011000:	f015 0506 	ands.w	r5, r5, #6
 8011004:	d106      	bne.n	8011014 <_printf_common+0x48>
 8011006:	f104 0a19 	add.w	sl, r4, #25
 801100a:	68e3      	ldr	r3, [r4, #12]
 801100c:	6832      	ldr	r2, [r6, #0]
 801100e:	1a9b      	subs	r3, r3, r2
 8011010:	42ab      	cmp	r3, r5
 8011012:	dc26      	bgt.n	8011062 <_printf_common+0x96>
 8011014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011018:	1e13      	subs	r3, r2, #0
 801101a:	6822      	ldr	r2, [r4, #0]
 801101c:	bf18      	it	ne
 801101e:	2301      	movne	r3, #1
 8011020:	0692      	lsls	r2, r2, #26
 8011022:	d42b      	bmi.n	801107c <_printf_common+0xb0>
 8011024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011028:	4649      	mov	r1, r9
 801102a:	4638      	mov	r0, r7
 801102c:	47c0      	blx	r8
 801102e:	3001      	adds	r0, #1
 8011030:	d01e      	beq.n	8011070 <_printf_common+0xa4>
 8011032:	6823      	ldr	r3, [r4, #0]
 8011034:	6922      	ldr	r2, [r4, #16]
 8011036:	f003 0306 	and.w	r3, r3, #6
 801103a:	2b04      	cmp	r3, #4
 801103c:	bf02      	ittt	eq
 801103e:	68e5      	ldreq	r5, [r4, #12]
 8011040:	6833      	ldreq	r3, [r6, #0]
 8011042:	1aed      	subeq	r5, r5, r3
 8011044:	68a3      	ldr	r3, [r4, #8]
 8011046:	bf0c      	ite	eq
 8011048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801104c:	2500      	movne	r5, #0
 801104e:	4293      	cmp	r3, r2
 8011050:	bfc4      	itt	gt
 8011052:	1a9b      	subgt	r3, r3, r2
 8011054:	18ed      	addgt	r5, r5, r3
 8011056:	2600      	movs	r6, #0
 8011058:	341a      	adds	r4, #26
 801105a:	42b5      	cmp	r5, r6
 801105c:	d11a      	bne.n	8011094 <_printf_common+0xc8>
 801105e:	2000      	movs	r0, #0
 8011060:	e008      	b.n	8011074 <_printf_common+0xa8>
 8011062:	2301      	movs	r3, #1
 8011064:	4652      	mov	r2, sl
 8011066:	4649      	mov	r1, r9
 8011068:	4638      	mov	r0, r7
 801106a:	47c0      	blx	r8
 801106c:	3001      	adds	r0, #1
 801106e:	d103      	bne.n	8011078 <_printf_common+0xac>
 8011070:	f04f 30ff 	mov.w	r0, #4294967295
 8011074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011078:	3501      	adds	r5, #1
 801107a:	e7c6      	b.n	801100a <_printf_common+0x3e>
 801107c:	18e1      	adds	r1, r4, r3
 801107e:	1c5a      	adds	r2, r3, #1
 8011080:	2030      	movs	r0, #48	; 0x30
 8011082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011086:	4422      	add	r2, r4
 8011088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801108c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011090:	3302      	adds	r3, #2
 8011092:	e7c7      	b.n	8011024 <_printf_common+0x58>
 8011094:	2301      	movs	r3, #1
 8011096:	4622      	mov	r2, r4
 8011098:	4649      	mov	r1, r9
 801109a:	4638      	mov	r0, r7
 801109c:	47c0      	blx	r8
 801109e:	3001      	adds	r0, #1
 80110a0:	d0e6      	beq.n	8011070 <_printf_common+0xa4>
 80110a2:	3601      	adds	r6, #1
 80110a4:	e7d9      	b.n	801105a <_printf_common+0x8e>
	...

080110a8 <_printf_i>:
 80110a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110ac:	7e0f      	ldrb	r7, [r1, #24]
 80110ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80110b0:	2f78      	cmp	r7, #120	; 0x78
 80110b2:	4691      	mov	r9, r2
 80110b4:	4680      	mov	r8, r0
 80110b6:	460c      	mov	r4, r1
 80110b8:	469a      	mov	sl, r3
 80110ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80110be:	d807      	bhi.n	80110d0 <_printf_i+0x28>
 80110c0:	2f62      	cmp	r7, #98	; 0x62
 80110c2:	d80a      	bhi.n	80110da <_printf_i+0x32>
 80110c4:	2f00      	cmp	r7, #0
 80110c6:	f000 80d4 	beq.w	8011272 <_printf_i+0x1ca>
 80110ca:	2f58      	cmp	r7, #88	; 0x58
 80110cc:	f000 80c0 	beq.w	8011250 <_printf_i+0x1a8>
 80110d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80110d8:	e03a      	b.n	8011150 <_printf_i+0xa8>
 80110da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80110de:	2b15      	cmp	r3, #21
 80110e0:	d8f6      	bhi.n	80110d0 <_printf_i+0x28>
 80110e2:	a101      	add	r1, pc, #4	; (adr r1, 80110e8 <_printf_i+0x40>)
 80110e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80110e8:	08011141 	.word	0x08011141
 80110ec:	08011155 	.word	0x08011155
 80110f0:	080110d1 	.word	0x080110d1
 80110f4:	080110d1 	.word	0x080110d1
 80110f8:	080110d1 	.word	0x080110d1
 80110fc:	080110d1 	.word	0x080110d1
 8011100:	08011155 	.word	0x08011155
 8011104:	080110d1 	.word	0x080110d1
 8011108:	080110d1 	.word	0x080110d1
 801110c:	080110d1 	.word	0x080110d1
 8011110:	080110d1 	.word	0x080110d1
 8011114:	08011259 	.word	0x08011259
 8011118:	08011181 	.word	0x08011181
 801111c:	08011213 	.word	0x08011213
 8011120:	080110d1 	.word	0x080110d1
 8011124:	080110d1 	.word	0x080110d1
 8011128:	0801127b 	.word	0x0801127b
 801112c:	080110d1 	.word	0x080110d1
 8011130:	08011181 	.word	0x08011181
 8011134:	080110d1 	.word	0x080110d1
 8011138:	080110d1 	.word	0x080110d1
 801113c:	0801121b 	.word	0x0801121b
 8011140:	682b      	ldr	r3, [r5, #0]
 8011142:	1d1a      	adds	r2, r3, #4
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	602a      	str	r2, [r5, #0]
 8011148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801114c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011150:	2301      	movs	r3, #1
 8011152:	e09f      	b.n	8011294 <_printf_i+0x1ec>
 8011154:	6820      	ldr	r0, [r4, #0]
 8011156:	682b      	ldr	r3, [r5, #0]
 8011158:	0607      	lsls	r7, r0, #24
 801115a:	f103 0104 	add.w	r1, r3, #4
 801115e:	6029      	str	r1, [r5, #0]
 8011160:	d501      	bpl.n	8011166 <_printf_i+0xbe>
 8011162:	681e      	ldr	r6, [r3, #0]
 8011164:	e003      	b.n	801116e <_printf_i+0xc6>
 8011166:	0646      	lsls	r6, r0, #25
 8011168:	d5fb      	bpl.n	8011162 <_printf_i+0xba>
 801116a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801116e:	2e00      	cmp	r6, #0
 8011170:	da03      	bge.n	801117a <_printf_i+0xd2>
 8011172:	232d      	movs	r3, #45	; 0x2d
 8011174:	4276      	negs	r6, r6
 8011176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801117a:	485a      	ldr	r0, [pc, #360]	; (80112e4 <_printf_i+0x23c>)
 801117c:	230a      	movs	r3, #10
 801117e:	e012      	b.n	80111a6 <_printf_i+0xfe>
 8011180:	682b      	ldr	r3, [r5, #0]
 8011182:	6820      	ldr	r0, [r4, #0]
 8011184:	1d19      	adds	r1, r3, #4
 8011186:	6029      	str	r1, [r5, #0]
 8011188:	0605      	lsls	r5, r0, #24
 801118a:	d501      	bpl.n	8011190 <_printf_i+0xe8>
 801118c:	681e      	ldr	r6, [r3, #0]
 801118e:	e002      	b.n	8011196 <_printf_i+0xee>
 8011190:	0641      	lsls	r1, r0, #25
 8011192:	d5fb      	bpl.n	801118c <_printf_i+0xe4>
 8011194:	881e      	ldrh	r6, [r3, #0]
 8011196:	4853      	ldr	r0, [pc, #332]	; (80112e4 <_printf_i+0x23c>)
 8011198:	2f6f      	cmp	r7, #111	; 0x6f
 801119a:	bf0c      	ite	eq
 801119c:	2308      	moveq	r3, #8
 801119e:	230a      	movne	r3, #10
 80111a0:	2100      	movs	r1, #0
 80111a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80111a6:	6865      	ldr	r5, [r4, #4]
 80111a8:	60a5      	str	r5, [r4, #8]
 80111aa:	2d00      	cmp	r5, #0
 80111ac:	bfa2      	ittt	ge
 80111ae:	6821      	ldrge	r1, [r4, #0]
 80111b0:	f021 0104 	bicge.w	r1, r1, #4
 80111b4:	6021      	strge	r1, [r4, #0]
 80111b6:	b90e      	cbnz	r6, 80111bc <_printf_i+0x114>
 80111b8:	2d00      	cmp	r5, #0
 80111ba:	d04b      	beq.n	8011254 <_printf_i+0x1ac>
 80111bc:	4615      	mov	r5, r2
 80111be:	fbb6 f1f3 	udiv	r1, r6, r3
 80111c2:	fb03 6711 	mls	r7, r3, r1, r6
 80111c6:	5dc7      	ldrb	r7, [r0, r7]
 80111c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80111cc:	4637      	mov	r7, r6
 80111ce:	42bb      	cmp	r3, r7
 80111d0:	460e      	mov	r6, r1
 80111d2:	d9f4      	bls.n	80111be <_printf_i+0x116>
 80111d4:	2b08      	cmp	r3, #8
 80111d6:	d10b      	bne.n	80111f0 <_printf_i+0x148>
 80111d8:	6823      	ldr	r3, [r4, #0]
 80111da:	07de      	lsls	r6, r3, #31
 80111dc:	d508      	bpl.n	80111f0 <_printf_i+0x148>
 80111de:	6923      	ldr	r3, [r4, #16]
 80111e0:	6861      	ldr	r1, [r4, #4]
 80111e2:	4299      	cmp	r1, r3
 80111e4:	bfde      	ittt	le
 80111e6:	2330      	movle	r3, #48	; 0x30
 80111e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80111ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80111f0:	1b52      	subs	r2, r2, r5
 80111f2:	6122      	str	r2, [r4, #16]
 80111f4:	f8cd a000 	str.w	sl, [sp]
 80111f8:	464b      	mov	r3, r9
 80111fa:	aa03      	add	r2, sp, #12
 80111fc:	4621      	mov	r1, r4
 80111fe:	4640      	mov	r0, r8
 8011200:	f7ff fee4 	bl	8010fcc <_printf_common>
 8011204:	3001      	adds	r0, #1
 8011206:	d14a      	bne.n	801129e <_printf_i+0x1f6>
 8011208:	f04f 30ff 	mov.w	r0, #4294967295
 801120c:	b004      	add	sp, #16
 801120e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	f043 0320 	orr.w	r3, r3, #32
 8011218:	6023      	str	r3, [r4, #0]
 801121a:	4833      	ldr	r0, [pc, #204]	; (80112e8 <_printf_i+0x240>)
 801121c:	2778      	movs	r7, #120	; 0x78
 801121e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011222:	6823      	ldr	r3, [r4, #0]
 8011224:	6829      	ldr	r1, [r5, #0]
 8011226:	061f      	lsls	r7, r3, #24
 8011228:	f851 6b04 	ldr.w	r6, [r1], #4
 801122c:	d402      	bmi.n	8011234 <_printf_i+0x18c>
 801122e:	065f      	lsls	r7, r3, #25
 8011230:	bf48      	it	mi
 8011232:	b2b6      	uxthmi	r6, r6
 8011234:	07df      	lsls	r7, r3, #31
 8011236:	bf48      	it	mi
 8011238:	f043 0320 	orrmi.w	r3, r3, #32
 801123c:	6029      	str	r1, [r5, #0]
 801123e:	bf48      	it	mi
 8011240:	6023      	strmi	r3, [r4, #0]
 8011242:	b91e      	cbnz	r6, 801124c <_printf_i+0x1a4>
 8011244:	6823      	ldr	r3, [r4, #0]
 8011246:	f023 0320 	bic.w	r3, r3, #32
 801124a:	6023      	str	r3, [r4, #0]
 801124c:	2310      	movs	r3, #16
 801124e:	e7a7      	b.n	80111a0 <_printf_i+0xf8>
 8011250:	4824      	ldr	r0, [pc, #144]	; (80112e4 <_printf_i+0x23c>)
 8011252:	e7e4      	b.n	801121e <_printf_i+0x176>
 8011254:	4615      	mov	r5, r2
 8011256:	e7bd      	b.n	80111d4 <_printf_i+0x12c>
 8011258:	682b      	ldr	r3, [r5, #0]
 801125a:	6826      	ldr	r6, [r4, #0]
 801125c:	6961      	ldr	r1, [r4, #20]
 801125e:	1d18      	adds	r0, r3, #4
 8011260:	6028      	str	r0, [r5, #0]
 8011262:	0635      	lsls	r5, r6, #24
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	d501      	bpl.n	801126c <_printf_i+0x1c4>
 8011268:	6019      	str	r1, [r3, #0]
 801126a:	e002      	b.n	8011272 <_printf_i+0x1ca>
 801126c:	0670      	lsls	r0, r6, #25
 801126e:	d5fb      	bpl.n	8011268 <_printf_i+0x1c0>
 8011270:	8019      	strh	r1, [r3, #0]
 8011272:	2300      	movs	r3, #0
 8011274:	6123      	str	r3, [r4, #16]
 8011276:	4615      	mov	r5, r2
 8011278:	e7bc      	b.n	80111f4 <_printf_i+0x14c>
 801127a:	682b      	ldr	r3, [r5, #0]
 801127c:	1d1a      	adds	r2, r3, #4
 801127e:	602a      	str	r2, [r5, #0]
 8011280:	681d      	ldr	r5, [r3, #0]
 8011282:	6862      	ldr	r2, [r4, #4]
 8011284:	2100      	movs	r1, #0
 8011286:	4628      	mov	r0, r5
 8011288:	f7ef f88a 	bl	80003a0 <memchr>
 801128c:	b108      	cbz	r0, 8011292 <_printf_i+0x1ea>
 801128e:	1b40      	subs	r0, r0, r5
 8011290:	6060      	str	r0, [r4, #4]
 8011292:	6863      	ldr	r3, [r4, #4]
 8011294:	6123      	str	r3, [r4, #16]
 8011296:	2300      	movs	r3, #0
 8011298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801129c:	e7aa      	b.n	80111f4 <_printf_i+0x14c>
 801129e:	6923      	ldr	r3, [r4, #16]
 80112a0:	462a      	mov	r2, r5
 80112a2:	4649      	mov	r1, r9
 80112a4:	4640      	mov	r0, r8
 80112a6:	47d0      	blx	sl
 80112a8:	3001      	adds	r0, #1
 80112aa:	d0ad      	beq.n	8011208 <_printf_i+0x160>
 80112ac:	6823      	ldr	r3, [r4, #0]
 80112ae:	079b      	lsls	r3, r3, #30
 80112b0:	d413      	bmi.n	80112da <_printf_i+0x232>
 80112b2:	68e0      	ldr	r0, [r4, #12]
 80112b4:	9b03      	ldr	r3, [sp, #12]
 80112b6:	4298      	cmp	r0, r3
 80112b8:	bfb8      	it	lt
 80112ba:	4618      	movlt	r0, r3
 80112bc:	e7a6      	b.n	801120c <_printf_i+0x164>
 80112be:	2301      	movs	r3, #1
 80112c0:	4632      	mov	r2, r6
 80112c2:	4649      	mov	r1, r9
 80112c4:	4640      	mov	r0, r8
 80112c6:	47d0      	blx	sl
 80112c8:	3001      	adds	r0, #1
 80112ca:	d09d      	beq.n	8011208 <_printf_i+0x160>
 80112cc:	3501      	adds	r5, #1
 80112ce:	68e3      	ldr	r3, [r4, #12]
 80112d0:	9903      	ldr	r1, [sp, #12]
 80112d2:	1a5b      	subs	r3, r3, r1
 80112d4:	42ab      	cmp	r3, r5
 80112d6:	dcf2      	bgt.n	80112be <_printf_i+0x216>
 80112d8:	e7eb      	b.n	80112b2 <_printf_i+0x20a>
 80112da:	2500      	movs	r5, #0
 80112dc:	f104 0619 	add.w	r6, r4, #25
 80112e0:	e7f5      	b.n	80112ce <_printf_i+0x226>
 80112e2:	bf00      	nop
 80112e4:	0801dd5e 	.word	0x0801dd5e
 80112e8:	0801dd6f 	.word	0x0801dd6f

080112ec <std>:
 80112ec:	2300      	movs	r3, #0
 80112ee:	b510      	push	{r4, lr}
 80112f0:	4604      	mov	r4, r0
 80112f2:	e9c0 3300 	strd	r3, r3, [r0]
 80112f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112fa:	6083      	str	r3, [r0, #8]
 80112fc:	8181      	strh	r1, [r0, #12]
 80112fe:	6643      	str	r3, [r0, #100]	; 0x64
 8011300:	81c2      	strh	r2, [r0, #14]
 8011302:	6183      	str	r3, [r0, #24]
 8011304:	4619      	mov	r1, r3
 8011306:	2208      	movs	r2, #8
 8011308:	305c      	adds	r0, #92	; 0x5c
 801130a:	f000 f902 	bl	8011512 <memset>
 801130e:	4b05      	ldr	r3, [pc, #20]	; (8011324 <std+0x38>)
 8011310:	6263      	str	r3, [r4, #36]	; 0x24
 8011312:	4b05      	ldr	r3, [pc, #20]	; (8011328 <std+0x3c>)
 8011314:	62a3      	str	r3, [r4, #40]	; 0x28
 8011316:	4b05      	ldr	r3, [pc, #20]	; (801132c <std+0x40>)
 8011318:	62e3      	str	r3, [r4, #44]	; 0x2c
 801131a:	4b05      	ldr	r3, [pc, #20]	; (8011330 <std+0x44>)
 801131c:	6224      	str	r4, [r4, #32]
 801131e:	6323      	str	r3, [r4, #48]	; 0x30
 8011320:	bd10      	pop	{r4, pc}
 8011322:	bf00      	nop
 8011324:	0801148d 	.word	0x0801148d
 8011328:	080114af 	.word	0x080114af
 801132c:	080114e7 	.word	0x080114e7
 8011330:	0801150b 	.word	0x0801150b

08011334 <stdio_exit_handler>:
 8011334:	4a02      	ldr	r2, [pc, #8]	; (8011340 <stdio_exit_handler+0xc>)
 8011336:	4903      	ldr	r1, [pc, #12]	; (8011344 <stdio_exit_handler+0x10>)
 8011338:	4803      	ldr	r0, [pc, #12]	; (8011348 <stdio_exit_handler+0x14>)
 801133a:	f000 b869 	b.w	8011410 <_fwalk_sglue>
 801133e:	bf00      	nop
 8011340:	24000414 	.word	0x24000414
 8011344:	08012fed 	.word	0x08012fed
 8011348:	24000420 	.word	0x24000420

0801134c <cleanup_stdio>:
 801134c:	6841      	ldr	r1, [r0, #4]
 801134e:	4b0c      	ldr	r3, [pc, #48]	; (8011380 <cleanup_stdio+0x34>)
 8011350:	4299      	cmp	r1, r3
 8011352:	b510      	push	{r4, lr}
 8011354:	4604      	mov	r4, r0
 8011356:	d001      	beq.n	801135c <cleanup_stdio+0x10>
 8011358:	f001 fe48 	bl	8012fec <_fflush_r>
 801135c:	68a1      	ldr	r1, [r4, #8]
 801135e:	4b09      	ldr	r3, [pc, #36]	; (8011384 <cleanup_stdio+0x38>)
 8011360:	4299      	cmp	r1, r3
 8011362:	d002      	beq.n	801136a <cleanup_stdio+0x1e>
 8011364:	4620      	mov	r0, r4
 8011366:	f001 fe41 	bl	8012fec <_fflush_r>
 801136a:	68e1      	ldr	r1, [r4, #12]
 801136c:	4b06      	ldr	r3, [pc, #24]	; (8011388 <cleanup_stdio+0x3c>)
 801136e:	4299      	cmp	r1, r3
 8011370:	d004      	beq.n	801137c <cleanup_stdio+0x30>
 8011372:	4620      	mov	r0, r4
 8011374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011378:	f001 be38 	b.w	8012fec <_fflush_r>
 801137c:	bd10      	pop	{r4, pc}
 801137e:	bf00      	nop
 8011380:	2400d5cc 	.word	0x2400d5cc
 8011384:	2400d634 	.word	0x2400d634
 8011388:	2400d69c 	.word	0x2400d69c

0801138c <global_stdio_init.part.0>:
 801138c:	b510      	push	{r4, lr}
 801138e:	4b0b      	ldr	r3, [pc, #44]	; (80113bc <global_stdio_init.part.0+0x30>)
 8011390:	4c0b      	ldr	r4, [pc, #44]	; (80113c0 <global_stdio_init.part.0+0x34>)
 8011392:	4a0c      	ldr	r2, [pc, #48]	; (80113c4 <global_stdio_init.part.0+0x38>)
 8011394:	601a      	str	r2, [r3, #0]
 8011396:	4620      	mov	r0, r4
 8011398:	2200      	movs	r2, #0
 801139a:	2104      	movs	r1, #4
 801139c:	f7ff ffa6 	bl	80112ec <std>
 80113a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80113a4:	2201      	movs	r2, #1
 80113a6:	2109      	movs	r1, #9
 80113a8:	f7ff ffa0 	bl	80112ec <std>
 80113ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80113b0:	2202      	movs	r2, #2
 80113b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113b6:	2112      	movs	r1, #18
 80113b8:	f7ff bf98 	b.w	80112ec <std>
 80113bc:	2400d704 	.word	0x2400d704
 80113c0:	2400d5cc 	.word	0x2400d5cc
 80113c4:	08011335 	.word	0x08011335

080113c8 <__sfp_lock_acquire>:
 80113c8:	4801      	ldr	r0, [pc, #4]	; (80113d0 <__sfp_lock_acquire+0x8>)
 80113ca:	f000 b98b 	b.w	80116e4 <__retarget_lock_acquire_recursive>
 80113ce:	bf00      	nop
 80113d0:	2400d70d 	.word	0x2400d70d

080113d4 <__sfp_lock_release>:
 80113d4:	4801      	ldr	r0, [pc, #4]	; (80113dc <__sfp_lock_release+0x8>)
 80113d6:	f000 b986 	b.w	80116e6 <__retarget_lock_release_recursive>
 80113da:	bf00      	nop
 80113dc:	2400d70d 	.word	0x2400d70d

080113e0 <__sinit>:
 80113e0:	b510      	push	{r4, lr}
 80113e2:	4604      	mov	r4, r0
 80113e4:	f7ff fff0 	bl	80113c8 <__sfp_lock_acquire>
 80113e8:	6a23      	ldr	r3, [r4, #32]
 80113ea:	b11b      	cbz	r3, 80113f4 <__sinit+0x14>
 80113ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113f0:	f7ff bff0 	b.w	80113d4 <__sfp_lock_release>
 80113f4:	4b04      	ldr	r3, [pc, #16]	; (8011408 <__sinit+0x28>)
 80113f6:	6223      	str	r3, [r4, #32]
 80113f8:	4b04      	ldr	r3, [pc, #16]	; (801140c <__sinit+0x2c>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d1f5      	bne.n	80113ec <__sinit+0xc>
 8011400:	f7ff ffc4 	bl	801138c <global_stdio_init.part.0>
 8011404:	e7f2      	b.n	80113ec <__sinit+0xc>
 8011406:	bf00      	nop
 8011408:	0801134d 	.word	0x0801134d
 801140c:	2400d704 	.word	0x2400d704

08011410 <_fwalk_sglue>:
 8011410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011414:	4607      	mov	r7, r0
 8011416:	4688      	mov	r8, r1
 8011418:	4614      	mov	r4, r2
 801141a:	2600      	movs	r6, #0
 801141c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011420:	f1b9 0901 	subs.w	r9, r9, #1
 8011424:	d505      	bpl.n	8011432 <_fwalk_sglue+0x22>
 8011426:	6824      	ldr	r4, [r4, #0]
 8011428:	2c00      	cmp	r4, #0
 801142a:	d1f7      	bne.n	801141c <_fwalk_sglue+0xc>
 801142c:	4630      	mov	r0, r6
 801142e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011432:	89ab      	ldrh	r3, [r5, #12]
 8011434:	2b01      	cmp	r3, #1
 8011436:	d907      	bls.n	8011448 <_fwalk_sglue+0x38>
 8011438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801143c:	3301      	adds	r3, #1
 801143e:	d003      	beq.n	8011448 <_fwalk_sglue+0x38>
 8011440:	4629      	mov	r1, r5
 8011442:	4638      	mov	r0, r7
 8011444:	47c0      	blx	r8
 8011446:	4306      	orrs	r6, r0
 8011448:	3568      	adds	r5, #104	; 0x68
 801144a:	e7e9      	b.n	8011420 <_fwalk_sglue+0x10>

0801144c <siprintf>:
 801144c:	b40e      	push	{r1, r2, r3}
 801144e:	b500      	push	{lr}
 8011450:	b09c      	sub	sp, #112	; 0x70
 8011452:	ab1d      	add	r3, sp, #116	; 0x74
 8011454:	9002      	str	r0, [sp, #8]
 8011456:	9006      	str	r0, [sp, #24]
 8011458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801145c:	4809      	ldr	r0, [pc, #36]	; (8011484 <siprintf+0x38>)
 801145e:	9107      	str	r1, [sp, #28]
 8011460:	9104      	str	r1, [sp, #16]
 8011462:	4909      	ldr	r1, [pc, #36]	; (8011488 <siprintf+0x3c>)
 8011464:	f853 2b04 	ldr.w	r2, [r3], #4
 8011468:	9105      	str	r1, [sp, #20]
 801146a:	6800      	ldr	r0, [r0, #0]
 801146c:	9301      	str	r3, [sp, #4]
 801146e:	a902      	add	r1, sp, #8
 8011470:	f001 fc38 	bl	8012ce4 <_svfiprintf_r>
 8011474:	9b02      	ldr	r3, [sp, #8]
 8011476:	2200      	movs	r2, #0
 8011478:	701a      	strb	r2, [r3, #0]
 801147a:	b01c      	add	sp, #112	; 0x70
 801147c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011480:	b003      	add	sp, #12
 8011482:	4770      	bx	lr
 8011484:	2400046c 	.word	0x2400046c
 8011488:	ffff0208 	.word	0xffff0208

0801148c <__sread>:
 801148c:	b510      	push	{r4, lr}
 801148e:	460c      	mov	r4, r1
 8011490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011494:	f000 f8d8 	bl	8011648 <_read_r>
 8011498:	2800      	cmp	r0, #0
 801149a:	bfab      	itete	ge
 801149c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801149e:	89a3      	ldrhlt	r3, [r4, #12]
 80114a0:	181b      	addge	r3, r3, r0
 80114a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80114a6:	bfac      	ite	ge
 80114a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80114aa:	81a3      	strhlt	r3, [r4, #12]
 80114ac:	bd10      	pop	{r4, pc}

080114ae <__swrite>:
 80114ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b2:	461f      	mov	r7, r3
 80114b4:	898b      	ldrh	r3, [r1, #12]
 80114b6:	05db      	lsls	r3, r3, #23
 80114b8:	4605      	mov	r5, r0
 80114ba:	460c      	mov	r4, r1
 80114bc:	4616      	mov	r6, r2
 80114be:	d505      	bpl.n	80114cc <__swrite+0x1e>
 80114c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114c4:	2302      	movs	r3, #2
 80114c6:	2200      	movs	r2, #0
 80114c8:	f000 f8ac 	bl	8011624 <_lseek_r>
 80114cc:	89a3      	ldrh	r3, [r4, #12]
 80114ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80114d6:	81a3      	strh	r3, [r4, #12]
 80114d8:	4632      	mov	r2, r6
 80114da:	463b      	mov	r3, r7
 80114dc:	4628      	mov	r0, r5
 80114de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114e2:	f000 b8c3 	b.w	801166c <_write_r>

080114e6 <__sseek>:
 80114e6:	b510      	push	{r4, lr}
 80114e8:	460c      	mov	r4, r1
 80114ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ee:	f000 f899 	bl	8011624 <_lseek_r>
 80114f2:	1c43      	adds	r3, r0, #1
 80114f4:	89a3      	ldrh	r3, [r4, #12]
 80114f6:	bf15      	itete	ne
 80114f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80114fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80114fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011502:	81a3      	strheq	r3, [r4, #12]
 8011504:	bf18      	it	ne
 8011506:	81a3      	strhne	r3, [r4, #12]
 8011508:	bd10      	pop	{r4, pc}

0801150a <__sclose>:
 801150a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801150e:	f000 b879 	b.w	8011604 <_close_r>

08011512 <memset>:
 8011512:	4402      	add	r2, r0
 8011514:	4603      	mov	r3, r0
 8011516:	4293      	cmp	r3, r2
 8011518:	d100      	bne.n	801151c <memset+0xa>
 801151a:	4770      	bx	lr
 801151c:	f803 1b01 	strb.w	r1, [r3], #1
 8011520:	e7f9      	b.n	8011516 <memset+0x4>

08011522 <strcspn>:
 8011522:	b570      	push	{r4, r5, r6, lr}
 8011524:	4603      	mov	r3, r0
 8011526:	461e      	mov	r6, r3
 8011528:	f813 4b01 	ldrb.w	r4, [r3], #1
 801152c:	b144      	cbz	r4, 8011540 <strcspn+0x1e>
 801152e:	1e4a      	subs	r2, r1, #1
 8011530:	e001      	b.n	8011536 <strcspn+0x14>
 8011532:	42a5      	cmp	r5, r4
 8011534:	d004      	beq.n	8011540 <strcspn+0x1e>
 8011536:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801153a:	2d00      	cmp	r5, #0
 801153c:	d1f9      	bne.n	8011532 <strcspn+0x10>
 801153e:	e7f2      	b.n	8011526 <strcspn+0x4>
 8011540:	1a30      	subs	r0, r6, r0
 8011542:	bd70      	pop	{r4, r5, r6, pc}

08011544 <strtok>:
 8011544:	4b16      	ldr	r3, [pc, #88]	; (80115a0 <strtok+0x5c>)
 8011546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011548:	681e      	ldr	r6, [r3, #0]
 801154a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801154c:	4605      	mov	r5, r0
 801154e:	b9fc      	cbnz	r4, 8011590 <strtok+0x4c>
 8011550:	2050      	movs	r0, #80	; 0x50
 8011552:	9101      	str	r1, [sp, #4]
 8011554:	f000 ff3c 	bl	80123d0 <malloc>
 8011558:	9901      	ldr	r1, [sp, #4]
 801155a:	6470      	str	r0, [r6, #68]	; 0x44
 801155c:	4602      	mov	r2, r0
 801155e:	b920      	cbnz	r0, 801156a <strtok+0x26>
 8011560:	4b10      	ldr	r3, [pc, #64]	; (80115a4 <strtok+0x60>)
 8011562:	4811      	ldr	r0, [pc, #68]	; (80115a8 <strtok+0x64>)
 8011564:	215b      	movs	r1, #91	; 0x5b
 8011566:	f000 f8d5 	bl	8011714 <__assert_func>
 801156a:	e9c0 4400 	strd	r4, r4, [r0]
 801156e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011572:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011576:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801157a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801157e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011582:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011586:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801158a:	6184      	str	r4, [r0, #24]
 801158c:	7704      	strb	r4, [r0, #28]
 801158e:	6244      	str	r4, [r0, #36]	; 0x24
 8011590:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8011592:	2301      	movs	r3, #1
 8011594:	4628      	mov	r0, r5
 8011596:	b002      	add	sp, #8
 8011598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801159c:	f000 b806 	b.w	80115ac <__strtok_r>
 80115a0:	2400046c 	.word	0x2400046c
 80115a4:	0801dbdc 	.word	0x0801dbdc
 80115a8:	0801dd80 	.word	0x0801dd80

080115ac <__strtok_r>:
 80115ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115ae:	b908      	cbnz	r0, 80115b4 <__strtok_r+0x8>
 80115b0:	6810      	ldr	r0, [r2, #0]
 80115b2:	b188      	cbz	r0, 80115d8 <__strtok_r+0x2c>
 80115b4:	4604      	mov	r4, r0
 80115b6:	4620      	mov	r0, r4
 80115b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80115bc:	460f      	mov	r7, r1
 80115be:	f817 6b01 	ldrb.w	r6, [r7], #1
 80115c2:	b91e      	cbnz	r6, 80115cc <__strtok_r+0x20>
 80115c4:	b965      	cbnz	r5, 80115e0 <__strtok_r+0x34>
 80115c6:	6015      	str	r5, [r2, #0]
 80115c8:	4628      	mov	r0, r5
 80115ca:	e005      	b.n	80115d8 <__strtok_r+0x2c>
 80115cc:	42b5      	cmp	r5, r6
 80115ce:	d1f6      	bne.n	80115be <__strtok_r+0x12>
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d1f0      	bne.n	80115b6 <__strtok_r+0xa>
 80115d4:	6014      	str	r4, [r2, #0]
 80115d6:	7003      	strb	r3, [r0, #0]
 80115d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115da:	461c      	mov	r4, r3
 80115dc:	e00c      	b.n	80115f8 <__strtok_r+0x4c>
 80115de:	b915      	cbnz	r5, 80115e6 <__strtok_r+0x3a>
 80115e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80115e4:	460e      	mov	r6, r1
 80115e6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80115ea:	42ab      	cmp	r3, r5
 80115ec:	d1f7      	bne.n	80115de <__strtok_r+0x32>
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d0f3      	beq.n	80115da <__strtok_r+0x2e>
 80115f2:	2300      	movs	r3, #0
 80115f4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80115f8:	6014      	str	r4, [r2, #0]
 80115fa:	e7ed      	b.n	80115d8 <__strtok_r+0x2c>

080115fc <_localeconv_r>:
 80115fc:	4800      	ldr	r0, [pc, #0]	; (8011600 <_localeconv_r+0x4>)
 80115fe:	4770      	bx	lr
 8011600:	24000560 	.word	0x24000560

08011604 <_close_r>:
 8011604:	b538      	push	{r3, r4, r5, lr}
 8011606:	4d06      	ldr	r5, [pc, #24]	; (8011620 <_close_r+0x1c>)
 8011608:	2300      	movs	r3, #0
 801160a:	4604      	mov	r4, r0
 801160c:	4608      	mov	r0, r1
 801160e:	602b      	str	r3, [r5, #0]
 8011610:	f7f5 f95c 	bl	80068cc <_close>
 8011614:	1c43      	adds	r3, r0, #1
 8011616:	d102      	bne.n	801161e <_close_r+0x1a>
 8011618:	682b      	ldr	r3, [r5, #0]
 801161a:	b103      	cbz	r3, 801161e <_close_r+0x1a>
 801161c:	6023      	str	r3, [r4, #0]
 801161e:	bd38      	pop	{r3, r4, r5, pc}
 8011620:	2400d708 	.word	0x2400d708

08011624 <_lseek_r>:
 8011624:	b538      	push	{r3, r4, r5, lr}
 8011626:	4d07      	ldr	r5, [pc, #28]	; (8011644 <_lseek_r+0x20>)
 8011628:	4604      	mov	r4, r0
 801162a:	4608      	mov	r0, r1
 801162c:	4611      	mov	r1, r2
 801162e:	2200      	movs	r2, #0
 8011630:	602a      	str	r2, [r5, #0]
 8011632:	461a      	mov	r2, r3
 8011634:	f7f5 f956 	bl	80068e4 <_lseek>
 8011638:	1c43      	adds	r3, r0, #1
 801163a:	d102      	bne.n	8011642 <_lseek_r+0x1e>
 801163c:	682b      	ldr	r3, [r5, #0]
 801163e:	b103      	cbz	r3, 8011642 <_lseek_r+0x1e>
 8011640:	6023      	str	r3, [r4, #0]
 8011642:	bd38      	pop	{r3, r4, r5, pc}
 8011644:	2400d708 	.word	0x2400d708

08011648 <_read_r>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	4d07      	ldr	r5, [pc, #28]	; (8011668 <_read_r+0x20>)
 801164c:	4604      	mov	r4, r0
 801164e:	4608      	mov	r0, r1
 8011650:	4611      	mov	r1, r2
 8011652:	2200      	movs	r2, #0
 8011654:	602a      	str	r2, [r5, #0]
 8011656:	461a      	mov	r2, r3
 8011658:	f7f5 f91c 	bl	8006894 <_read>
 801165c:	1c43      	adds	r3, r0, #1
 801165e:	d102      	bne.n	8011666 <_read_r+0x1e>
 8011660:	682b      	ldr	r3, [r5, #0]
 8011662:	b103      	cbz	r3, 8011666 <_read_r+0x1e>
 8011664:	6023      	str	r3, [r4, #0]
 8011666:	bd38      	pop	{r3, r4, r5, pc}
 8011668:	2400d708 	.word	0x2400d708

0801166c <_write_r>:
 801166c:	b538      	push	{r3, r4, r5, lr}
 801166e:	4d07      	ldr	r5, [pc, #28]	; (801168c <_write_r+0x20>)
 8011670:	4604      	mov	r4, r0
 8011672:	4608      	mov	r0, r1
 8011674:	4611      	mov	r1, r2
 8011676:	2200      	movs	r2, #0
 8011678:	602a      	str	r2, [r5, #0]
 801167a:	461a      	mov	r2, r3
 801167c:	f7f5 f918 	bl	80068b0 <_write>
 8011680:	1c43      	adds	r3, r0, #1
 8011682:	d102      	bne.n	801168a <_write_r+0x1e>
 8011684:	682b      	ldr	r3, [r5, #0]
 8011686:	b103      	cbz	r3, 801168a <_write_r+0x1e>
 8011688:	6023      	str	r3, [r4, #0]
 801168a:	bd38      	pop	{r3, r4, r5, pc}
 801168c:	2400d708 	.word	0x2400d708

08011690 <__errno>:
 8011690:	4b01      	ldr	r3, [pc, #4]	; (8011698 <__errno+0x8>)
 8011692:	6818      	ldr	r0, [r3, #0]
 8011694:	4770      	bx	lr
 8011696:	bf00      	nop
 8011698:	2400046c 	.word	0x2400046c

0801169c <__libc_init_array>:
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	4d0d      	ldr	r5, [pc, #52]	; (80116d4 <__libc_init_array+0x38>)
 80116a0:	4c0d      	ldr	r4, [pc, #52]	; (80116d8 <__libc_init_array+0x3c>)
 80116a2:	1b64      	subs	r4, r4, r5
 80116a4:	10a4      	asrs	r4, r4, #2
 80116a6:	2600      	movs	r6, #0
 80116a8:	42a6      	cmp	r6, r4
 80116aa:	d109      	bne.n	80116c0 <__libc_init_array+0x24>
 80116ac:	4d0b      	ldr	r5, [pc, #44]	; (80116dc <__libc_init_array+0x40>)
 80116ae:	4c0c      	ldr	r4, [pc, #48]	; (80116e0 <__libc_init_array+0x44>)
 80116b0:	f003 f936 	bl	8014920 <_init>
 80116b4:	1b64      	subs	r4, r4, r5
 80116b6:	10a4      	asrs	r4, r4, #2
 80116b8:	2600      	movs	r6, #0
 80116ba:	42a6      	cmp	r6, r4
 80116bc:	d105      	bne.n	80116ca <__libc_init_array+0x2e>
 80116be:	bd70      	pop	{r4, r5, r6, pc}
 80116c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80116c4:	4798      	blx	r3
 80116c6:	3601      	adds	r6, #1
 80116c8:	e7ee      	b.n	80116a8 <__libc_init_array+0xc>
 80116ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80116ce:	4798      	blx	r3
 80116d0:	3601      	adds	r6, #1
 80116d2:	e7f2      	b.n	80116ba <__libc_init_array+0x1e>
 80116d4:	0801f2e0 	.word	0x0801f2e0
 80116d8:	0801f2e0 	.word	0x0801f2e0
 80116dc:	0801f2e0 	.word	0x0801f2e0
 80116e0:	0801f2e4 	.word	0x0801f2e4

080116e4 <__retarget_lock_acquire_recursive>:
 80116e4:	4770      	bx	lr

080116e6 <__retarget_lock_release_recursive>:
 80116e6:	4770      	bx	lr

080116e8 <strcpy>:
 80116e8:	4603      	mov	r3, r0
 80116ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116ee:	f803 2b01 	strb.w	r2, [r3], #1
 80116f2:	2a00      	cmp	r2, #0
 80116f4:	d1f9      	bne.n	80116ea <strcpy+0x2>
 80116f6:	4770      	bx	lr

080116f8 <memcpy>:
 80116f8:	440a      	add	r2, r1
 80116fa:	4291      	cmp	r1, r2
 80116fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8011700:	d100      	bne.n	8011704 <memcpy+0xc>
 8011702:	4770      	bx	lr
 8011704:	b510      	push	{r4, lr}
 8011706:	f811 4b01 	ldrb.w	r4, [r1], #1
 801170a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801170e:	4291      	cmp	r1, r2
 8011710:	d1f9      	bne.n	8011706 <memcpy+0xe>
 8011712:	bd10      	pop	{r4, pc}

08011714 <__assert_func>:
 8011714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011716:	4614      	mov	r4, r2
 8011718:	461a      	mov	r2, r3
 801171a:	4b09      	ldr	r3, [pc, #36]	; (8011740 <__assert_func+0x2c>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4605      	mov	r5, r0
 8011720:	68d8      	ldr	r0, [r3, #12]
 8011722:	b14c      	cbz	r4, 8011738 <__assert_func+0x24>
 8011724:	4b07      	ldr	r3, [pc, #28]	; (8011744 <__assert_func+0x30>)
 8011726:	9100      	str	r1, [sp, #0]
 8011728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801172c:	4906      	ldr	r1, [pc, #24]	; (8011748 <__assert_func+0x34>)
 801172e:	462b      	mov	r3, r5
 8011730:	f001 fc84 	bl	801303c <fiprintf>
 8011734:	f001 fcbe 	bl	80130b4 <abort>
 8011738:	4b04      	ldr	r3, [pc, #16]	; (801174c <__assert_func+0x38>)
 801173a:	461c      	mov	r4, r3
 801173c:	e7f3      	b.n	8011726 <__assert_func+0x12>
 801173e:	bf00      	nop
 8011740:	2400046c 	.word	0x2400046c
 8011744:	0801ddda 	.word	0x0801ddda
 8011748:	0801dde7 	.word	0x0801dde7
 801174c:	0801de15 	.word	0x0801de15

08011750 <quorem>:
 8011750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011754:	6903      	ldr	r3, [r0, #16]
 8011756:	690c      	ldr	r4, [r1, #16]
 8011758:	42a3      	cmp	r3, r4
 801175a:	4607      	mov	r7, r0
 801175c:	db7e      	blt.n	801185c <quorem+0x10c>
 801175e:	3c01      	subs	r4, #1
 8011760:	f101 0814 	add.w	r8, r1, #20
 8011764:	f100 0514 	add.w	r5, r0, #20
 8011768:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801176c:	9301      	str	r3, [sp, #4]
 801176e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011776:	3301      	adds	r3, #1
 8011778:	429a      	cmp	r2, r3
 801177a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801177e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011782:	fbb2 f6f3 	udiv	r6, r2, r3
 8011786:	d331      	bcc.n	80117ec <quorem+0x9c>
 8011788:	f04f 0e00 	mov.w	lr, #0
 801178c:	4640      	mov	r0, r8
 801178e:	46ac      	mov	ip, r5
 8011790:	46f2      	mov	sl, lr
 8011792:	f850 2b04 	ldr.w	r2, [r0], #4
 8011796:	b293      	uxth	r3, r2
 8011798:	fb06 e303 	mla	r3, r6, r3, lr
 801179c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80117a0:	0c1a      	lsrs	r2, r3, #16
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	ebaa 0303 	sub.w	r3, sl, r3
 80117a8:	f8dc a000 	ldr.w	sl, [ip]
 80117ac:	fa13 f38a 	uxtah	r3, r3, sl
 80117b0:	fb06 220e 	mla	r2, r6, lr, r2
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	9b00      	ldr	r3, [sp, #0]
 80117b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80117bc:	b292      	uxth	r2, r2
 80117be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80117c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80117c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80117ca:	4581      	cmp	r9, r0
 80117cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117d0:	f84c 3b04 	str.w	r3, [ip], #4
 80117d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80117d8:	d2db      	bcs.n	8011792 <quorem+0x42>
 80117da:	f855 300b 	ldr.w	r3, [r5, fp]
 80117de:	b92b      	cbnz	r3, 80117ec <quorem+0x9c>
 80117e0:	9b01      	ldr	r3, [sp, #4]
 80117e2:	3b04      	subs	r3, #4
 80117e4:	429d      	cmp	r5, r3
 80117e6:	461a      	mov	r2, r3
 80117e8:	d32c      	bcc.n	8011844 <quorem+0xf4>
 80117ea:	613c      	str	r4, [r7, #16]
 80117ec:	4638      	mov	r0, r7
 80117ee:	f001 f91f 	bl	8012a30 <__mcmp>
 80117f2:	2800      	cmp	r0, #0
 80117f4:	db22      	blt.n	801183c <quorem+0xec>
 80117f6:	3601      	adds	r6, #1
 80117f8:	4629      	mov	r1, r5
 80117fa:	2000      	movs	r0, #0
 80117fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8011800:	f8d1 c000 	ldr.w	ip, [r1]
 8011804:	b293      	uxth	r3, r2
 8011806:	1ac3      	subs	r3, r0, r3
 8011808:	0c12      	lsrs	r2, r2, #16
 801180a:	fa13 f38c 	uxtah	r3, r3, ip
 801180e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011812:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011816:	b29b      	uxth	r3, r3
 8011818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801181c:	45c1      	cmp	r9, r8
 801181e:	f841 3b04 	str.w	r3, [r1], #4
 8011822:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011826:	d2e9      	bcs.n	80117fc <quorem+0xac>
 8011828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801182c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011830:	b922      	cbnz	r2, 801183c <quorem+0xec>
 8011832:	3b04      	subs	r3, #4
 8011834:	429d      	cmp	r5, r3
 8011836:	461a      	mov	r2, r3
 8011838:	d30a      	bcc.n	8011850 <quorem+0x100>
 801183a:	613c      	str	r4, [r7, #16]
 801183c:	4630      	mov	r0, r6
 801183e:	b003      	add	sp, #12
 8011840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011844:	6812      	ldr	r2, [r2, #0]
 8011846:	3b04      	subs	r3, #4
 8011848:	2a00      	cmp	r2, #0
 801184a:	d1ce      	bne.n	80117ea <quorem+0x9a>
 801184c:	3c01      	subs	r4, #1
 801184e:	e7c9      	b.n	80117e4 <quorem+0x94>
 8011850:	6812      	ldr	r2, [r2, #0]
 8011852:	3b04      	subs	r3, #4
 8011854:	2a00      	cmp	r2, #0
 8011856:	d1f0      	bne.n	801183a <quorem+0xea>
 8011858:	3c01      	subs	r4, #1
 801185a:	e7eb      	b.n	8011834 <quorem+0xe4>
 801185c:	2000      	movs	r0, #0
 801185e:	e7ee      	b.n	801183e <quorem+0xee>

08011860 <_dtoa_r>:
 8011860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011864:	ed2d 8b02 	vpush	{d8}
 8011868:	69c5      	ldr	r5, [r0, #28]
 801186a:	b091      	sub	sp, #68	; 0x44
 801186c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011870:	ec59 8b10 	vmov	r8, r9, d0
 8011874:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011876:	9106      	str	r1, [sp, #24]
 8011878:	4606      	mov	r6, r0
 801187a:	9208      	str	r2, [sp, #32]
 801187c:	930c      	str	r3, [sp, #48]	; 0x30
 801187e:	b975      	cbnz	r5, 801189e <_dtoa_r+0x3e>
 8011880:	2010      	movs	r0, #16
 8011882:	f000 fda5 	bl	80123d0 <malloc>
 8011886:	4602      	mov	r2, r0
 8011888:	61f0      	str	r0, [r6, #28]
 801188a:	b920      	cbnz	r0, 8011896 <_dtoa_r+0x36>
 801188c:	4ba6      	ldr	r3, [pc, #664]	; (8011b28 <_dtoa_r+0x2c8>)
 801188e:	21ef      	movs	r1, #239	; 0xef
 8011890:	48a6      	ldr	r0, [pc, #664]	; (8011b2c <_dtoa_r+0x2cc>)
 8011892:	f7ff ff3f 	bl	8011714 <__assert_func>
 8011896:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801189a:	6005      	str	r5, [r0, #0]
 801189c:	60c5      	str	r5, [r0, #12]
 801189e:	69f3      	ldr	r3, [r6, #28]
 80118a0:	6819      	ldr	r1, [r3, #0]
 80118a2:	b151      	cbz	r1, 80118ba <_dtoa_r+0x5a>
 80118a4:	685a      	ldr	r2, [r3, #4]
 80118a6:	604a      	str	r2, [r1, #4]
 80118a8:	2301      	movs	r3, #1
 80118aa:	4093      	lsls	r3, r2
 80118ac:	608b      	str	r3, [r1, #8]
 80118ae:	4630      	mov	r0, r6
 80118b0:	f000 fe82 	bl	80125b8 <_Bfree>
 80118b4:	69f3      	ldr	r3, [r6, #28]
 80118b6:	2200      	movs	r2, #0
 80118b8:	601a      	str	r2, [r3, #0]
 80118ba:	f1b9 0300 	subs.w	r3, r9, #0
 80118be:	bfbb      	ittet	lt
 80118c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80118c4:	9303      	strlt	r3, [sp, #12]
 80118c6:	2300      	movge	r3, #0
 80118c8:	2201      	movlt	r2, #1
 80118ca:	bfac      	ite	ge
 80118cc:	6023      	strge	r3, [r4, #0]
 80118ce:	6022      	strlt	r2, [r4, #0]
 80118d0:	4b97      	ldr	r3, [pc, #604]	; (8011b30 <_dtoa_r+0x2d0>)
 80118d2:	9c03      	ldr	r4, [sp, #12]
 80118d4:	43a3      	bics	r3, r4
 80118d6:	d11c      	bne.n	8011912 <_dtoa_r+0xb2>
 80118d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118da:	f242 730f 	movw	r3, #9999	; 0x270f
 80118de:	6013      	str	r3, [r2, #0]
 80118e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80118e4:	ea53 0308 	orrs.w	r3, r3, r8
 80118e8:	f000 84fb 	beq.w	80122e2 <_dtoa_r+0xa82>
 80118ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118ee:	b963      	cbnz	r3, 801190a <_dtoa_r+0xaa>
 80118f0:	4b90      	ldr	r3, [pc, #576]	; (8011b34 <_dtoa_r+0x2d4>)
 80118f2:	e020      	b.n	8011936 <_dtoa_r+0xd6>
 80118f4:	4b90      	ldr	r3, [pc, #576]	; (8011b38 <_dtoa_r+0x2d8>)
 80118f6:	9301      	str	r3, [sp, #4]
 80118f8:	3308      	adds	r3, #8
 80118fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80118fc:	6013      	str	r3, [r2, #0]
 80118fe:	9801      	ldr	r0, [sp, #4]
 8011900:	b011      	add	sp, #68	; 0x44
 8011902:	ecbd 8b02 	vpop	{d8}
 8011906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801190a:	4b8a      	ldr	r3, [pc, #552]	; (8011b34 <_dtoa_r+0x2d4>)
 801190c:	9301      	str	r3, [sp, #4]
 801190e:	3303      	adds	r3, #3
 8011910:	e7f3      	b.n	80118fa <_dtoa_r+0x9a>
 8011912:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011916:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191e:	d10c      	bne.n	801193a <_dtoa_r+0xda>
 8011920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011922:	2301      	movs	r3, #1
 8011924:	6013      	str	r3, [r2, #0]
 8011926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011928:	2b00      	cmp	r3, #0
 801192a:	f000 84d7 	beq.w	80122dc <_dtoa_r+0xa7c>
 801192e:	4b83      	ldr	r3, [pc, #524]	; (8011b3c <_dtoa_r+0x2dc>)
 8011930:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011932:	6013      	str	r3, [r2, #0]
 8011934:	3b01      	subs	r3, #1
 8011936:	9301      	str	r3, [sp, #4]
 8011938:	e7e1      	b.n	80118fe <_dtoa_r+0x9e>
 801193a:	aa0e      	add	r2, sp, #56	; 0x38
 801193c:	a90f      	add	r1, sp, #60	; 0x3c
 801193e:	4630      	mov	r0, r6
 8011940:	eeb0 0b48 	vmov.f64	d0, d8
 8011944:	f001 f91a 	bl	8012b7c <__d2b>
 8011948:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801194c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801194e:	4605      	mov	r5, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d046      	beq.n	80119e2 <_dtoa_r+0x182>
 8011954:	eeb0 7b48 	vmov.f64	d7, d8
 8011958:	ee18 1a90 	vmov	r1, s17
 801195c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011960:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8011964:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011968:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801196c:	2000      	movs	r0, #0
 801196e:	ee07 1a90 	vmov	s15, r1
 8011972:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8011976:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8011b10 <_dtoa_r+0x2b0>
 801197a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801197e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011b18 <_dtoa_r+0x2b8>
 8011982:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011986:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8011b20 <_dtoa_r+0x2c0>
 801198a:	ee07 3a90 	vmov	s15, r3
 801198e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011992:	eeb0 7b46 	vmov.f64	d7, d6
 8011996:	eea4 7b05 	vfma.f64	d7, d4, d5
 801199a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801199e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80119a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a6:	ee16 ba90 	vmov	fp, s13
 80119aa:	9009      	str	r0, [sp, #36]	; 0x24
 80119ac:	d508      	bpl.n	80119c0 <_dtoa_r+0x160>
 80119ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80119b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80119b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ba:	bf18      	it	ne
 80119bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80119c0:	f1bb 0f16 	cmp.w	fp, #22
 80119c4:	d82b      	bhi.n	8011a1e <_dtoa_r+0x1be>
 80119c6:	495e      	ldr	r1, [pc, #376]	; (8011b40 <_dtoa_r+0x2e0>)
 80119c8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80119cc:	ed91 7b00 	vldr	d7, [r1]
 80119d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80119d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d8:	d501      	bpl.n	80119de <_dtoa_r+0x17e>
 80119da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80119de:	2100      	movs	r1, #0
 80119e0:	e01e      	b.n	8011a20 <_dtoa_r+0x1c0>
 80119e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119e4:	4413      	add	r3, r2
 80119e6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80119ea:	2920      	cmp	r1, #32
 80119ec:	bfc1      	itttt	gt
 80119ee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80119f2:	408c      	lslgt	r4, r1
 80119f4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80119f8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80119fc:	bfd6      	itet	le
 80119fe:	f1c1 0120 	rsble	r1, r1, #32
 8011a02:	4321      	orrgt	r1, r4
 8011a04:	fa08 f101 	lslle.w	r1, r8, r1
 8011a08:	ee07 1a90 	vmov	s15, r1
 8011a0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011a10:	3b01      	subs	r3, #1
 8011a12:	ee17 1a90 	vmov	r1, s15
 8011a16:	2001      	movs	r0, #1
 8011a18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011a1c:	e7a7      	b.n	801196e <_dtoa_r+0x10e>
 8011a1e:	2101      	movs	r1, #1
 8011a20:	1ad2      	subs	r2, r2, r3
 8011a22:	1e53      	subs	r3, r2, #1
 8011a24:	9305      	str	r3, [sp, #20]
 8011a26:	bf45      	ittet	mi
 8011a28:	f1c2 0301 	rsbmi	r3, r2, #1
 8011a2c:	9304      	strmi	r3, [sp, #16]
 8011a2e:	2300      	movpl	r3, #0
 8011a30:	2300      	movmi	r3, #0
 8011a32:	bf4c      	ite	mi
 8011a34:	9305      	strmi	r3, [sp, #20]
 8011a36:	9304      	strpl	r3, [sp, #16]
 8011a38:	f1bb 0f00 	cmp.w	fp, #0
 8011a3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8011a3e:	db18      	blt.n	8011a72 <_dtoa_r+0x212>
 8011a40:	9b05      	ldr	r3, [sp, #20]
 8011a42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011a46:	445b      	add	r3, fp
 8011a48:	9305      	str	r3, [sp, #20]
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	9a06      	ldr	r2, [sp, #24]
 8011a4e:	2a09      	cmp	r2, #9
 8011a50:	d848      	bhi.n	8011ae4 <_dtoa_r+0x284>
 8011a52:	2a05      	cmp	r2, #5
 8011a54:	bfc4      	itt	gt
 8011a56:	3a04      	subgt	r2, #4
 8011a58:	9206      	strgt	r2, [sp, #24]
 8011a5a:	9a06      	ldr	r2, [sp, #24]
 8011a5c:	f1a2 0202 	sub.w	r2, r2, #2
 8011a60:	bfcc      	ite	gt
 8011a62:	2400      	movgt	r4, #0
 8011a64:	2401      	movle	r4, #1
 8011a66:	2a03      	cmp	r2, #3
 8011a68:	d847      	bhi.n	8011afa <_dtoa_r+0x29a>
 8011a6a:	e8df f002 	tbb	[pc, r2]
 8011a6e:	2d0b      	.short	0x2d0b
 8011a70:	392b      	.short	0x392b
 8011a72:	9b04      	ldr	r3, [sp, #16]
 8011a74:	2200      	movs	r2, #0
 8011a76:	eba3 030b 	sub.w	r3, r3, fp
 8011a7a:	9304      	str	r3, [sp, #16]
 8011a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8011a7e:	f1cb 0300 	rsb	r3, fp, #0
 8011a82:	e7e3      	b.n	8011a4c <_dtoa_r+0x1ec>
 8011a84:	2200      	movs	r2, #0
 8011a86:	9207      	str	r2, [sp, #28]
 8011a88:	9a08      	ldr	r2, [sp, #32]
 8011a8a:	2a00      	cmp	r2, #0
 8011a8c:	dc38      	bgt.n	8011b00 <_dtoa_r+0x2a0>
 8011a8e:	f04f 0a01 	mov.w	sl, #1
 8011a92:	46d1      	mov	r9, sl
 8011a94:	4652      	mov	r2, sl
 8011a96:	f8cd a020 	str.w	sl, [sp, #32]
 8011a9a:	69f7      	ldr	r7, [r6, #28]
 8011a9c:	2100      	movs	r1, #0
 8011a9e:	2004      	movs	r0, #4
 8011aa0:	f100 0c14 	add.w	ip, r0, #20
 8011aa4:	4594      	cmp	ip, r2
 8011aa6:	d930      	bls.n	8011b0a <_dtoa_r+0x2aa>
 8011aa8:	6079      	str	r1, [r7, #4]
 8011aaa:	4630      	mov	r0, r6
 8011aac:	930d      	str	r3, [sp, #52]	; 0x34
 8011aae:	f000 fd43 	bl	8012538 <_Balloc>
 8011ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ab4:	9001      	str	r0, [sp, #4]
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	d145      	bne.n	8011b48 <_dtoa_r+0x2e8>
 8011abc:	4b21      	ldr	r3, [pc, #132]	; (8011b44 <_dtoa_r+0x2e4>)
 8011abe:	f240 11af 	movw	r1, #431	; 0x1af
 8011ac2:	e6e5      	b.n	8011890 <_dtoa_r+0x30>
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	e7de      	b.n	8011a86 <_dtoa_r+0x226>
 8011ac8:	2200      	movs	r2, #0
 8011aca:	9207      	str	r2, [sp, #28]
 8011acc:	9a08      	ldr	r2, [sp, #32]
 8011ace:	eb0b 0a02 	add.w	sl, fp, r2
 8011ad2:	f10a 0901 	add.w	r9, sl, #1
 8011ad6:	464a      	mov	r2, r9
 8011ad8:	2a01      	cmp	r2, #1
 8011ada:	bfb8      	it	lt
 8011adc:	2201      	movlt	r2, #1
 8011ade:	e7dc      	b.n	8011a9a <_dtoa_r+0x23a>
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	e7f2      	b.n	8011aca <_dtoa_r+0x26a>
 8011ae4:	2401      	movs	r4, #1
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011aec:	f04f 3aff 	mov.w	sl, #4294967295
 8011af0:	2100      	movs	r1, #0
 8011af2:	46d1      	mov	r9, sl
 8011af4:	2212      	movs	r2, #18
 8011af6:	9108      	str	r1, [sp, #32]
 8011af8:	e7cf      	b.n	8011a9a <_dtoa_r+0x23a>
 8011afa:	2201      	movs	r2, #1
 8011afc:	9207      	str	r2, [sp, #28]
 8011afe:	e7f5      	b.n	8011aec <_dtoa_r+0x28c>
 8011b00:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011b04:	46d1      	mov	r9, sl
 8011b06:	4652      	mov	r2, sl
 8011b08:	e7c7      	b.n	8011a9a <_dtoa_r+0x23a>
 8011b0a:	3101      	adds	r1, #1
 8011b0c:	0040      	lsls	r0, r0, #1
 8011b0e:	e7c7      	b.n	8011aa0 <_dtoa_r+0x240>
 8011b10:	636f4361 	.word	0x636f4361
 8011b14:	3fd287a7 	.word	0x3fd287a7
 8011b18:	8b60c8b3 	.word	0x8b60c8b3
 8011b1c:	3fc68a28 	.word	0x3fc68a28
 8011b20:	509f79fb 	.word	0x509f79fb
 8011b24:	3fd34413 	.word	0x3fd34413
 8011b28:	0801dbdc 	.word	0x0801dbdc
 8011b2c:	0801de23 	.word	0x0801de23
 8011b30:	7ff00000 	.word	0x7ff00000
 8011b34:	0801de1f 	.word	0x0801de1f
 8011b38:	0801de16 	.word	0x0801de16
 8011b3c:	0801dd5d 	.word	0x0801dd5d
 8011b40:	0801df10 	.word	0x0801df10
 8011b44:	0801de7b 	.word	0x0801de7b
 8011b48:	69f2      	ldr	r2, [r6, #28]
 8011b4a:	9901      	ldr	r1, [sp, #4]
 8011b4c:	6011      	str	r1, [r2, #0]
 8011b4e:	f1b9 0f0e 	cmp.w	r9, #14
 8011b52:	d86c      	bhi.n	8011c2e <_dtoa_r+0x3ce>
 8011b54:	2c00      	cmp	r4, #0
 8011b56:	d06a      	beq.n	8011c2e <_dtoa_r+0x3ce>
 8011b58:	f1bb 0f00 	cmp.w	fp, #0
 8011b5c:	f340 80a0 	ble.w	8011ca0 <_dtoa_r+0x440>
 8011b60:	4ac1      	ldr	r2, [pc, #772]	; (8011e68 <_dtoa_r+0x608>)
 8011b62:	f00b 010f 	and.w	r1, fp, #15
 8011b66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011b6a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011b6e:	ed92 7b00 	vldr	d7, [r2]
 8011b72:	ea4f 122b 	mov.w	r2, fp, asr #4
 8011b76:	f000 8087 	beq.w	8011c88 <_dtoa_r+0x428>
 8011b7a:	49bc      	ldr	r1, [pc, #752]	; (8011e6c <_dtoa_r+0x60c>)
 8011b7c:	ed91 6b08 	vldr	d6, [r1, #32]
 8011b80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011b84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011b88:	f002 020f 	and.w	r2, r2, #15
 8011b8c:	2103      	movs	r1, #3
 8011b8e:	48b7      	ldr	r0, [pc, #732]	; (8011e6c <_dtoa_r+0x60c>)
 8011b90:	2a00      	cmp	r2, #0
 8011b92:	d17b      	bne.n	8011c8c <_dtoa_r+0x42c>
 8011b94:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011b98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011b9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011ba2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ba6:	2a00      	cmp	r2, #0
 8011ba8:	f000 80a0 	beq.w	8011cec <_dtoa_r+0x48c>
 8011bac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb8:	f140 8098 	bpl.w	8011cec <_dtoa_r+0x48c>
 8011bbc:	f1b9 0f00 	cmp.w	r9, #0
 8011bc0:	f000 8094 	beq.w	8011cec <_dtoa_r+0x48c>
 8011bc4:	f1ba 0f00 	cmp.w	sl, #0
 8011bc8:	dd2f      	ble.n	8011c2a <_dtoa_r+0x3ca>
 8011bca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011bd6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011bda:	3101      	adds	r1, #1
 8011bdc:	4654      	mov	r4, sl
 8011bde:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011be2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011be6:	ee07 1a90 	vmov	s15, r1
 8011bea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011bee:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011bf2:	ee15 7a90 	vmov	r7, s11
 8011bf6:	ec51 0b15 	vmov	r0, r1, d5
 8011bfa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8011bfe:	2c00      	cmp	r4, #0
 8011c00:	d177      	bne.n	8011cf2 <_dtoa_r+0x492>
 8011c02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011c06:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011c0a:	ec41 0b17 	vmov	d7, r0, r1
 8011c0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c16:	f300 826a 	bgt.w	80120ee <_dtoa_r+0x88e>
 8011c1a:	eeb1 7b47 	vneg.f64	d7, d7
 8011c1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c26:	f100 8260 	bmi.w	80120ea <_dtoa_r+0x88a>
 8011c2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c30:	2a00      	cmp	r2, #0
 8011c32:	f2c0 811d 	blt.w	8011e70 <_dtoa_r+0x610>
 8011c36:	f1bb 0f0e 	cmp.w	fp, #14
 8011c3a:	f300 8119 	bgt.w	8011e70 <_dtoa_r+0x610>
 8011c3e:	4b8a      	ldr	r3, [pc, #552]	; (8011e68 <_dtoa_r+0x608>)
 8011c40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011c44:	ed93 6b00 	vldr	d6, [r3]
 8011c48:	9b08      	ldr	r3, [sp, #32]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f280 80b7 	bge.w	8011dbe <_dtoa_r+0x55e>
 8011c50:	f1b9 0f00 	cmp.w	r9, #0
 8011c54:	f300 80b3 	bgt.w	8011dbe <_dtoa_r+0x55e>
 8011c58:	f040 8246 	bne.w	80120e8 <_dtoa_r+0x888>
 8011c5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011c60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c70:	464c      	mov	r4, r9
 8011c72:	464f      	mov	r7, r9
 8011c74:	f280 821c 	bge.w	80120b0 <_dtoa_r+0x850>
 8011c78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011c7c:	2331      	movs	r3, #49	; 0x31
 8011c7e:	f808 3b01 	strb.w	r3, [r8], #1
 8011c82:	f10b 0b01 	add.w	fp, fp, #1
 8011c86:	e218      	b.n	80120ba <_dtoa_r+0x85a>
 8011c88:	2102      	movs	r1, #2
 8011c8a:	e780      	b.n	8011b8e <_dtoa_r+0x32e>
 8011c8c:	07d4      	lsls	r4, r2, #31
 8011c8e:	d504      	bpl.n	8011c9a <_dtoa_r+0x43a>
 8011c90:	ed90 6b00 	vldr	d6, [r0]
 8011c94:	3101      	adds	r1, #1
 8011c96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c9a:	1052      	asrs	r2, r2, #1
 8011c9c:	3008      	adds	r0, #8
 8011c9e:	e777      	b.n	8011b90 <_dtoa_r+0x330>
 8011ca0:	d022      	beq.n	8011ce8 <_dtoa_r+0x488>
 8011ca2:	f1cb 0200 	rsb	r2, fp, #0
 8011ca6:	4970      	ldr	r1, [pc, #448]	; (8011e68 <_dtoa_r+0x608>)
 8011ca8:	f002 000f 	and.w	r0, r2, #15
 8011cac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011cb0:	ed91 7b00 	vldr	d7, [r1]
 8011cb4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011cbc:	486b      	ldr	r0, [pc, #428]	; (8011e6c <_dtoa_r+0x60c>)
 8011cbe:	1112      	asrs	r2, r2, #4
 8011cc0:	2400      	movs	r4, #0
 8011cc2:	2102      	movs	r1, #2
 8011cc4:	b92a      	cbnz	r2, 8011cd2 <_dtoa_r+0x472>
 8011cc6:	2c00      	cmp	r4, #0
 8011cc8:	f43f af6a 	beq.w	8011ba0 <_dtoa_r+0x340>
 8011ccc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011cd0:	e766      	b.n	8011ba0 <_dtoa_r+0x340>
 8011cd2:	07d7      	lsls	r7, r2, #31
 8011cd4:	d505      	bpl.n	8011ce2 <_dtoa_r+0x482>
 8011cd6:	ed90 6b00 	vldr	d6, [r0]
 8011cda:	3101      	adds	r1, #1
 8011cdc:	2401      	movs	r4, #1
 8011cde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011ce2:	1052      	asrs	r2, r2, #1
 8011ce4:	3008      	adds	r0, #8
 8011ce6:	e7ed      	b.n	8011cc4 <_dtoa_r+0x464>
 8011ce8:	2102      	movs	r1, #2
 8011cea:	e759      	b.n	8011ba0 <_dtoa_r+0x340>
 8011cec:	465a      	mov	r2, fp
 8011cee:	464c      	mov	r4, r9
 8011cf0:	e775      	b.n	8011bde <_dtoa_r+0x37e>
 8011cf2:	ec41 0b17 	vmov	d7, r0, r1
 8011cf6:	495c      	ldr	r1, [pc, #368]	; (8011e68 <_dtoa_r+0x608>)
 8011cf8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8011cfc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8011d00:	9901      	ldr	r1, [sp, #4]
 8011d02:	440c      	add	r4, r1
 8011d04:	9907      	ldr	r1, [sp, #28]
 8011d06:	b351      	cbz	r1, 8011d5e <_dtoa_r+0x4fe>
 8011d08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011d0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011d10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011d14:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011d18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011d1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011d20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011d24:	ee14 1a90 	vmov	r1, s9
 8011d28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011d2c:	3130      	adds	r1, #48	; 0x30
 8011d2e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d3a:	f808 1b01 	strb.w	r1, [r8], #1
 8011d3e:	d439      	bmi.n	8011db4 <_dtoa_r+0x554>
 8011d40:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011d44:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4c:	d472      	bmi.n	8011e34 <_dtoa_r+0x5d4>
 8011d4e:	45a0      	cmp	r8, r4
 8011d50:	f43f af6b 	beq.w	8011c2a <_dtoa_r+0x3ca>
 8011d54:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011d58:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011d5c:	e7e0      	b.n	8011d20 <_dtoa_r+0x4c0>
 8011d5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011d62:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011d66:	4620      	mov	r0, r4
 8011d68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011d6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011d70:	ee14 1a90 	vmov	r1, s9
 8011d74:	3130      	adds	r1, #48	; 0x30
 8011d76:	f808 1b01 	strb.w	r1, [r8], #1
 8011d7a:	45a0      	cmp	r8, r4
 8011d7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011d80:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d84:	d118      	bne.n	8011db8 <_dtoa_r+0x558>
 8011d86:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011d8a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011d8e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d96:	dc4d      	bgt.n	8011e34 <_dtoa_r+0x5d4>
 8011d98:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011d9c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da4:	f57f af41 	bpl.w	8011c2a <_dtoa_r+0x3ca>
 8011da8:	4680      	mov	r8, r0
 8011daa:	3801      	subs	r0, #1
 8011dac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011db0:	2b30      	cmp	r3, #48	; 0x30
 8011db2:	d0f9      	beq.n	8011da8 <_dtoa_r+0x548>
 8011db4:	4693      	mov	fp, r2
 8011db6:	e02a      	b.n	8011e0e <_dtoa_r+0x5ae>
 8011db8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011dbc:	e7d6      	b.n	8011d6c <_dtoa_r+0x50c>
 8011dbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011dc2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011dc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011dca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011dce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011dd2:	ee15 3a10 	vmov	r3, s10
 8011dd6:	3330      	adds	r3, #48	; 0x30
 8011dd8:	f808 3b01 	strb.w	r3, [r8], #1
 8011ddc:	9b01      	ldr	r3, [sp, #4]
 8011dde:	eba8 0303 	sub.w	r3, r8, r3
 8011de2:	4599      	cmp	r9, r3
 8011de4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011de8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011dec:	d133      	bne.n	8011e56 <_dtoa_r+0x5f6>
 8011dee:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011df2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dfa:	dc1a      	bgt.n	8011e32 <_dtoa_r+0x5d2>
 8011dfc:	eeb4 7b46 	vcmp.f64	d7, d6
 8011e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e04:	d103      	bne.n	8011e0e <_dtoa_r+0x5ae>
 8011e06:	ee15 3a10 	vmov	r3, s10
 8011e0a:	07d9      	lsls	r1, r3, #31
 8011e0c:	d411      	bmi.n	8011e32 <_dtoa_r+0x5d2>
 8011e0e:	4629      	mov	r1, r5
 8011e10:	4630      	mov	r0, r6
 8011e12:	f000 fbd1 	bl	80125b8 <_Bfree>
 8011e16:	2300      	movs	r3, #0
 8011e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e1a:	f888 3000 	strb.w	r3, [r8]
 8011e1e:	f10b 0301 	add.w	r3, fp, #1
 8011e22:	6013      	str	r3, [r2, #0]
 8011e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f43f ad69 	beq.w	80118fe <_dtoa_r+0x9e>
 8011e2c:	f8c3 8000 	str.w	r8, [r3]
 8011e30:	e565      	b.n	80118fe <_dtoa_r+0x9e>
 8011e32:	465a      	mov	r2, fp
 8011e34:	4643      	mov	r3, r8
 8011e36:	4698      	mov	r8, r3
 8011e38:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8011e3c:	2939      	cmp	r1, #57	; 0x39
 8011e3e:	d106      	bne.n	8011e4e <_dtoa_r+0x5ee>
 8011e40:	9901      	ldr	r1, [sp, #4]
 8011e42:	4299      	cmp	r1, r3
 8011e44:	d1f7      	bne.n	8011e36 <_dtoa_r+0x5d6>
 8011e46:	9801      	ldr	r0, [sp, #4]
 8011e48:	2130      	movs	r1, #48	; 0x30
 8011e4a:	3201      	adds	r2, #1
 8011e4c:	7001      	strb	r1, [r0, #0]
 8011e4e:	7819      	ldrb	r1, [r3, #0]
 8011e50:	3101      	adds	r1, #1
 8011e52:	7019      	strb	r1, [r3, #0]
 8011e54:	e7ae      	b.n	8011db4 <_dtoa_r+0x554>
 8011e56:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011e5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e62:	d1b2      	bne.n	8011dca <_dtoa_r+0x56a>
 8011e64:	e7d3      	b.n	8011e0e <_dtoa_r+0x5ae>
 8011e66:	bf00      	nop
 8011e68:	0801df10 	.word	0x0801df10
 8011e6c:	0801dee8 	.word	0x0801dee8
 8011e70:	9907      	ldr	r1, [sp, #28]
 8011e72:	2900      	cmp	r1, #0
 8011e74:	f000 80d0 	beq.w	8012018 <_dtoa_r+0x7b8>
 8011e78:	9906      	ldr	r1, [sp, #24]
 8011e7a:	2901      	cmp	r1, #1
 8011e7c:	f300 80b4 	bgt.w	8011fe8 <_dtoa_r+0x788>
 8011e80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e82:	2900      	cmp	r1, #0
 8011e84:	f000 80ac 	beq.w	8011fe0 <_dtoa_r+0x780>
 8011e88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011e8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011e90:	461c      	mov	r4, r3
 8011e92:	9309      	str	r3, [sp, #36]	; 0x24
 8011e94:	9b04      	ldr	r3, [sp, #16]
 8011e96:	4413      	add	r3, r2
 8011e98:	9304      	str	r3, [sp, #16]
 8011e9a:	9b05      	ldr	r3, [sp, #20]
 8011e9c:	2101      	movs	r1, #1
 8011e9e:	4413      	add	r3, r2
 8011ea0:	4630      	mov	r0, r6
 8011ea2:	9305      	str	r3, [sp, #20]
 8011ea4:	f000 fc3e 	bl	8012724 <__i2b>
 8011ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eaa:	4607      	mov	r7, r0
 8011eac:	f1b8 0f00 	cmp.w	r8, #0
 8011eb0:	d00d      	beq.n	8011ece <_dtoa_r+0x66e>
 8011eb2:	9a05      	ldr	r2, [sp, #20]
 8011eb4:	2a00      	cmp	r2, #0
 8011eb6:	dd0a      	ble.n	8011ece <_dtoa_r+0x66e>
 8011eb8:	4542      	cmp	r2, r8
 8011eba:	9904      	ldr	r1, [sp, #16]
 8011ebc:	bfa8      	it	ge
 8011ebe:	4642      	movge	r2, r8
 8011ec0:	1a89      	subs	r1, r1, r2
 8011ec2:	9104      	str	r1, [sp, #16]
 8011ec4:	9905      	ldr	r1, [sp, #20]
 8011ec6:	eba8 0802 	sub.w	r8, r8, r2
 8011eca:	1a8a      	subs	r2, r1, r2
 8011ecc:	9205      	str	r2, [sp, #20]
 8011ece:	b303      	cbz	r3, 8011f12 <_dtoa_r+0x6b2>
 8011ed0:	9a07      	ldr	r2, [sp, #28]
 8011ed2:	2a00      	cmp	r2, #0
 8011ed4:	f000 80a5 	beq.w	8012022 <_dtoa_r+0x7c2>
 8011ed8:	2c00      	cmp	r4, #0
 8011eda:	dd13      	ble.n	8011f04 <_dtoa_r+0x6a4>
 8011edc:	4639      	mov	r1, r7
 8011ede:	4622      	mov	r2, r4
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8011ee4:	f000 fcde 	bl	80128a4 <__pow5mult>
 8011ee8:	462a      	mov	r2, r5
 8011eea:	4601      	mov	r1, r0
 8011eec:	4607      	mov	r7, r0
 8011eee:	4630      	mov	r0, r6
 8011ef0:	f000 fc2e 	bl	8012750 <__multiply>
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	9009      	str	r0, [sp, #36]	; 0x24
 8011ef8:	4630      	mov	r0, r6
 8011efa:	f000 fb5d 	bl	80125b8 <_Bfree>
 8011efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f02:	4615      	mov	r5, r2
 8011f04:	1b1a      	subs	r2, r3, r4
 8011f06:	d004      	beq.n	8011f12 <_dtoa_r+0x6b2>
 8011f08:	4629      	mov	r1, r5
 8011f0a:	4630      	mov	r0, r6
 8011f0c:	f000 fcca 	bl	80128a4 <__pow5mult>
 8011f10:	4605      	mov	r5, r0
 8011f12:	2101      	movs	r1, #1
 8011f14:	4630      	mov	r0, r6
 8011f16:	f000 fc05 	bl	8012724 <__i2b>
 8011f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	4604      	mov	r4, r0
 8011f20:	f340 8081 	ble.w	8012026 <_dtoa_r+0x7c6>
 8011f24:	461a      	mov	r2, r3
 8011f26:	4601      	mov	r1, r0
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f000 fcbb 	bl	80128a4 <__pow5mult>
 8011f2e:	9b06      	ldr	r3, [sp, #24]
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	4604      	mov	r4, r0
 8011f34:	dd7a      	ble.n	801202c <_dtoa_r+0x7cc>
 8011f36:	2300      	movs	r3, #0
 8011f38:	9309      	str	r3, [sp, #36]	; 0x24
 8011f3a:	6922      	ldr	r2, [r4, #16]
 8011f3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011f40:	6910      	ldr	r0, [r2, #16]
 8011f42:	f000 fba1 	bl	8012688 <__hi0bits>
 8011f46:	f1c0 0020 	rsb	r0, r0, #32
 8011f4a:	9b05      	ldr	r3, [sp, #20]
 8011f4c:	4418      	add	r0, r3
 8011f4e:	f010 001f 	ands.w	r0, r0, #31
 8011f52:	f000 8093 	beq.w	801207c <_dtoa_r+0x81c>
 8011f56:	f1c0 0220 	rsb	r2, r0, #32
 8011f5a:	2a04      	cmp	r2, #4
 8011f5c:	f340 8085 	ble.w	801206a <_dtoa_r+0x80a>
 8011f60:	9b04      	ldr	r3, [sp, #16]
 8011f62:	f1c0 001c 	rsb	r0, r0, #28
 8011f66:	4403      	add	r3, r0
 8011f68:	9304      	str	r3, [sp, #16]
 8011f6a:	9b05      	ldr	r3, [sp, #20]
 8011f6c:	4480      	add	r8, r0
 8011f6e:	4403      	add	r3, r0
 8011f70:	9305      	str	r3, [sp, #20]
 8011f72:	9b04      	ldr	r3, [sp, #16]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	dd05      	ble.n	8011f84 <_dtoa_r+0x724>
 8011f78:	4629      	mov	r1, r5
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	f000 fceb 	bl	8012958 <__lshift>
 8011f82:	4605      	mov	r5, r0
 8011f84:	9b05      	ldr	r3, [sp, #20]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	dd05      	ble.n	8011f96 <_dtoa_r+0x736>
 8011f8a:	4621      	mov	r1, r4
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	4630      	mov	r0, r6
 8011f90:	f000 fce2 	bl	8012958 <__lshift>
 8011f94:	4604      	mov	r4, r0
 8011f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d071      	beq.n	8012080 <_dtoa_r+0x820>
 8011f9c:	4621      	mov	r1, r4
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	f000 fd46 	bl	8012a30 <__mcmp>
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	da6b      	bge.n	8012080 <_dtoa_r+0x820>
 8011fa8:	2300      	movs	r3, #0
 8011faa:	4629      	mov	r1, r5
 8011fac:	220a      	movs	r2, #10
 8011fae:	4630      	mov	r0, r6
 8011fb0:	f000 fb24 	bl	80125fc <__multadd>
 8011fb4:	9b07      	ldr	r3, [sp, #28]
 8011fb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011fba:	4605      	mov	r5, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	f000 8197 	beq.w	80122f0 <_dtoa_r+0xa90>
 8011fc2:	4639      	mov	r1, r7
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	220a      	movs	r2, #10
 8011fc8:	4630      	mov	r0, r6
 8011fca:	f000 fb17 	bl	80125fc <__multadd>
 8011fce:	f1ba 0f00 	cmp.w	sl, #0
 8011fd2:	4607      	mov	r7, r0
 8011fd4:	f300 8093 	bgt.w	80120fe <_dtoa_r+0x89e>
 8011fd8:	9b06      	ldr	r3, [sp, #24]
 8011fda:	2b02      	cmp	r3, #2
 8011fdc:	dc57      	bgt.n	801208e <_dtoa_r+0x82e>
 8011fde:	e08e      	b.n	80120fe <_dtoa_r+0x89e>
 8011fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fe2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011fe6:	e751      	b.n	8011e8c <_dtoa_r+0x62c>
 8011fe8:	f109 34ff 	add.w	r4, r9, #4294967295
 8011fec:	42a3      	cmp	r3, r4
 8011fee:	bfbf      	itttt	lt
 8011ff0:	1ae2      	sublt	r2, r4, r3
 8011ff2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011ff4:	189b      	addlt	r3, r3, r2
 8011ff6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011ff8:	bfae      	itee	ge
 8011ffa:	1b1c      	subge	r4, r3, r4
 8011ffc:	4623      	movlt	r3, r4
 8011ffe:	2400      	movlt	r4, #0
 8012000:	f1b9 0f00 	cmp.w	r9, #0
 8012004:	bfb5      	itete	lt
 8012006:	9a04      	ldrlt	r2, [sp, #16]
 8012008:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801200c:	eba2 0809 	sublt.w	r8, r2, r9
 8012010:	464a      	movge	r2, r9
 8012012:	bfb8      	it	lt
 8012014:	2200      	movlt	r2, #0
 8012016:	e73c      	b.n	8011e92 <_dtoa_r+0x632>
 8012018:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801201c:	9f07      	ldr	r7, [sp, #28]
 801201e:	461c      	mov	r4, r3
 8012020:	e744      	b.n	8011eac <_dtoa_r+0x64c>
 8012022:	461a      	mov	r2, r3
 8012024:	e770      	b.n	8011f08 <_dtoa_r+0x6a8>
 8012026:	9b06      	ldr	r3, [sp, #24]
 8012028:	2b01      	cmp	r3, #1
 801202a:	dc18      	bgt.n	801205e <_dtoa_r+0x7fe>
 801202c:	9b02      	ldr	r3, [sp, #8]
 801202e:	b9b3      	cbnz	r3, 801205e <_dtoa_r+0x7fe>
 8012030:	9b03      	ldr	r3, [sp, #12]
 8012032:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012036:	b9a2      	cbnz	r2, 8012062 <_dtoa_r+0x802>
 8012038:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801203c:	0d12      	lsrs	r2, r2, #20
 801203e:	0512      	lsls	r2, r2, #20
 8012040:	b18a      	cbz	r2, 8012066 <_dtoa_r+0x806>
 8012042:	9b04      	ldr	r3, [sp, #16]
 8012044:	3301      	adds	r3, #1
 8012046:	9304      	str	r3, [sp, #16]
 8012048:	9b05      	ldr	r3, [sp, #20]
 801204a:	3301      	adds	r3, #1
 801204c:	9305      	str	r3, [sp, #20]
 801204e:	2301      	movs	r3, #1
 8012050:	9309      	str	r3, [sp, #36]	; 0x24
 8012052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012054:	2b00      	cmp	r3, #0
 8012056:	f47f af70 	bne.w	8011f3a <_dtoa_r+0x6da>
 801205a:	2001      	movs	r0, #1
 801205c:	e775      	b.n	8011f4a <_dtoa_r+0x6ea>
 801205e:	2300      	movs	r3, #0
 8012060:	e7f6      	b.n	8012050 <_dtoa_r+0x7f0>
 8012062:	9b02      	ldr	r3, [sp, #8]
 8012064:	e7f4      	b.n	8012050 <_dtoa_r+0x7f0>
 8012066:	9209      	str	r2, [sp, #36]	; 0x24
 8012068:	e7f3      	b.n	8012052 <_dtoa_r+0x7f2>
 801206a:	d082      	beq.n	8011f72 <_dtoa_r+0x712>
 801206c:	9b04      	ldr	r3, [sp, #16]
 801206e:	321c      	adds	r2, #28
 8012070:	4413      	add	r3, r2
 8012072:	9304      	str	r3, [sp, #16]
 8012074:	9b05      	ldr	r3, [sp, #20]
 8012076:	4490      	add	r8, r2
 8012078:	4413      	add	r3, r2
 801207a:	e779      	b.n	8011f70 <_dtoa_r+0x710>
 801207c:	4602      	mov	r2, r0
 801207e:	e7f5      	b.n	801206c <_dtoa_r+0x80c>
 8012080:	f1b9 0f00 	cmp.w	r9, #0
 8012084:	dc36      	bgt.n	80120f4 <_dtoa_r+0x894>
 8012086:	9b06      	ldr	r3, [sp, #24]
 8012088:	2b02      	cmp	r3, #2
 801208a:	dd33      	ble.n	80120f4 <_dtoa_r+0x894>
 801208c:	46ca      	mov	sl, r9
 801208e:	f1ba 0f00 	cmp.w	sl, #0
 8012092:	d10d      	bne.n	80120b0 <_dtoa_r+0x850>
 8012094:	4621      	mov	r1, r4
 8012096:	4653      	mov	r3, sl
 8012098:	2205      	movs	r2, #5
 801209a:	4630      	mov	r0, r6
 801209c:	f000 faae 	bl	80125fc <__multadd>
 80120a0:	4601      	mov	r1, r0
 80120a2:	4604      	mov	r4, r0
 80120a4:	4628      	mov	r0, r5
 80120a6:	f000 fcc3 	bl	8012a30 <__mcmp>
 80120aa:	2800      	cmp	r0, #0
 80120ac:	f73f ade4 	bgt.w	8011c78 <_dtoa_r+0x418>
 80120b0:	9b08      	ldr	r3, [sp, #32]
 80120b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80120b6:	ea6f 0b03 	mvn.w	fp, r3
 80120ba:	f04f 0900 	mov.w	r9, #0
 80120be:	4621      	mov	r1, r4
 80120c0:	4630      	mov	r0, r6
 80120c2:	f000 fa79 	bl	80125b8 <_Bfree>
 80120c6:	2f00      	cmp	r7, #0
 80120c8:	f43f aea1 	beq.w	8011e0e <_dtoa_r+0x5ae>
 80120cc:	f1b9 0f00 	cmp.w	r9, #0
 80120d0:	d005      	beq.n	80120de <_dtoa_r+0x87e>
 80120d2:	45b9      	cmp	r9, r7
 80120d4:	d003      	beq.n	80120de <_dtoa_r+0x87e>
 80120d6:	4649      	mov	r1, r9
 80120d8:	4630      	mov	r0, r6
 80120da:	f000 fa6d 	bl	80125b8 <_Bfree>
 80120de:	4639      	mov	r1, r7
 80120e0:	4630      	mov	r0, r6
 80120e2:	f000 fa69 	bl	80125b8 <_Bfree>
 80120e6:	e692      	b.n	8011e0e <_dtoa_r+0x5ae>
 80120e8:	2400      	movs	r4, #0
 80120ea:	4627      	mov	r7, r4
 80120ec:	e7e0      	b.n	80120b0 <_dtoa_r+0x850>
 80120ee:	4693      	mov	fp, r2
 80120f0:	4627      	mov	r7, r4
 80120f2:	e5c1      	b.n	8011c78 <_dtoa_r+0x418>
 80120f4:	9b07      	ldr	r3, [sp, #28]
 80120f6:	46ca      	mov	sl, r9
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	f000 8100 	beq.w	80122fe <_dtoa_r+0xa9e>
 80120fe:	f1b8 0f00 	cmp.w	r8, #0
 8012102:	dd05      	ble.n	8012110 <_dtoa_r+0x8b0>
 8012104:	4639      	mov	r1, r7
 8012106:	4642      	mov	r2, r8
 8012108:	4630      	mov	r0, r6
 801210a:	f000 fc25 	bl	8012958 <__lshift>
 801210e:	4607      	mov	r7, r0
 8012110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012112:	2b00      	cmp	r3, #0
 8012114:	d05d      	beq.n	80121d2 <_dtoa_r+0x972>
 8012116:	6879      	ldr	r1, [r7, #4]
 8012118:	4630      	mov	r0, r6
 801211a:	f000 fa0d 	bl	8012538 <_Balloc>
 801211e:	4680      	mov	r8, r0
 8012120:	b928      	cbnz	r0, 801212e <_dtoa_r+0x8ce>
 8012122:	4b82      	ldr	r3, [pc, #520]	; (801232c <_dtoa_r+0xacc>)
 8012124:	4602      	mov	r2, r0
 8012126:	f240 21ef 	movw	r1, #751	; 0x2ef
 801212a:	f7ff bbb1 	b.w	8011890 <_dtoa_r+0x30>
 801212e:	693a      	ldr	r2, [r7, #16]
 8012130:	3202      	adds	r2, #2
 8012132:	0092      	lsls	r2, r2, #2
 8012134:	f107 010c 	add.w	r1, r7, #12
 8012138:	300c      	adds	r0, #12
 801213a:	f7ff fadd 	bl	80116f8 <memcpy>
 801213e:	2201      	movs	r2, #1
 8012140:	4641      	mov	r1, r8
 8012142:	4630      	mov	r0, r6
 8012144:	f000 fc08 	bl	8012958 <__lshift>
 8012148:	9b01      	ldr	r3, [sp, #4]
 801214a:	3301      	adds	r3, #1
 801214c:	9304      	str	r3, [sp, #16]
 801214e:	9b01      	ldr	r3, [sp, #4]
 8012150:	4453      	add	r3, sl
 8012152:	9308      	str	r3, [sp, #32]
 8012154:	9b02      	ldr	r3, [sp, #8]
 8012156:	f003 0301 	and.w	r3, r3, #1
 801215a:	46b9      	mov	r9, r7
 801215c:	9307      	str	r3, [sp, #28]
 801215e:	4607      	mov	r7, r0
 8012160:	9b04      	ldr	r3, [sp, #16]
 8012162:	4621      	mov	r1, r4
 8012164:	3b01      	subs	r3, #1
 8012166:	4628      	mov	r0, r5
 8012168:	9302      	str	r3, [sp, #8]
 801216a:	f7ff faf1 	bl	8011750 <quorem>
 801216e:	4603      	mov	r3, r0
 8012170:	3330      	adds	r3, #48	; 0x30
 8012172:	9005      	str	r0, [sp, #20]
 8012174:	4649      	mov	r1, r9
 8012176:	4628      	mov	r0, r5
 8012178:	9309      	str	r3, [sp, #36]	; 0x24
 801217a:	f000 fc59 	bl	8012a30 <__mcmp>
 801217e:	463a      	mov	r2, r7
 8012180:	4682      	mov	sl, r0
 8012182:	4621      	mov	r1, r4
 8012184:	4630      	mov	r0, r6
 8012186:	f000 fc6f 	bl	8012a68 <__mdiff>
 801218a:	68c2      	ldr	r2, [r0, #12]
 801218c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801218e:	4680      	mov	r8, r0
 8012190:	bb0a      	cbnz	r2, 80121d6 <_dtoa_r+0x976>
 8012192:	4601      	mov	r1, r0
 8012194:	4628      	mov	r0, r5
 8012196:	f000 fc4b 	bl	8012a30 <__mcmp>
 801219a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801219c:	4602      	mov	r2, r0
 801219e:	4641      	mov	r1, r8
 80121a0:	4630      	mov	r0, r6
 80121a2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80121a6:	f000 fa07 	bl	80125b8 <_Bfree>
 80121aa:	9b06      	ldr	r3, [sp, #24]
 80121ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80121b2:	ea43 0102 	orr.w	r1, r3, r2
 80121b6:	9b07      	ldr	r3, [sp, #28]
 80121b8:	4319      	orrs	r1, r3
 80121ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121bc:	d10d      	bne.n	80121da <_dtoa_r+0x97a>
 80121be:	2b39      	cmp	r3, #57	; 0x39
 80121c0:	d029      	beq.n	8012216 <_dtoa_r+0x9b6>
 80121c2:	f1ba 0f00 	cmp.w	sl, #0
 80121c6:	dd01      	ble.n	80121cc <_dtoa_r+0x96c>
 80121c8:	9b05      	ldr	r3, [sp, #20]
 80121ca:	3331      	adds	r3, #49	; 0x31
 80121cc:	9a02      	ldr	r2, [sp, #8]
 80121ce:	7013      	strb	r3, [r2, #0]
 80121d0:	e775      	b.n	80120be <_dtoa_r+0x85e>
 80121d2:	4638      	mov	r0, r7
 80121d4:	e7b8      	b.n	8012148 <_dtoa_r+0x8e8>
 80121d6:	2201      	movs	r2, #1
 80121d8:	e7e1      	b.n	801219e <_dtoa_r+0x93e>
 80121da:	f1ba 0f00 	cmp.w	sl, #0
 80121de:	db06      	blt.n	80121ee <_dtoa_r+0x98e>
 80121e0:	9906      	ldr	r1, [sp, #24]
 80121e2:	ea41 0a0a 	orr.w	sl, r1, sl
 80121e6:	9907      	ldr	r1, [sp, #28]
 80121e8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80121ec:	d120      	bne.n	8012230 <_dtoa_r+0x9d0>
 80121ee:	2a00      	cmp	r2, #0
 80121f0:	ddec      	ble.n	80121cc <_dtoa_r+0x96c>
 80121f2:	4629      	mov	r1, r5
 80121f4:	2201      	movs	r2, #1
 80121f6:	4630      	mov	r0, r6
 80121f8:	9304      	str	r3, [sp, #16]
 80121fa:	f000 fbad 	bl	8012958 <__lshift>
 80121fe:	4621      	mov	r1, r4
 8012200:	4605      	mov	r5, r0
 8012202:	f000 fc15 	bl	8012a30 <__mcmp>
 8012206:	2800      	cmp	r0, #0
 8012208:	9b04      	ldr	r3, [sp, #16]
 801220a:	dc02      	bgt.n	8012212 <_dtoa_r+0x9b2>
 801220c:	d1de      	bne.n	80121cc <_dtoa_r+0x96c>
 801220e:	07da      	lsls	r2, r3, #31
 8012210:	d5dc      	bpl.n	80121cc <_dtoa_r+0x96c>
 8012212:	2b39      	cmp	r3, #57	; 0x39
 8012214:	d1d8      	bne.n	80121c8 <_dtoa_r+0x968>
 8012216:	9a02      	ldr	r2, [sp, #8]
 8012218:	2339      	movs	r3, #57	; 0x39
 801221a:	7013      	strb	r3, [r2, #0]
 801221c:	4643      	mov	r3, r8
 801221e:	4698      	mov	r8, r3
 8012220:	3b01      	subs	r3, #1
 8012222:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012226:	2a39      	cmp	r2, #57	; 0x39
 8012228:	d051      	beq.n	80122ce <_dtoa_r+0xa6e>
 801222a:	3201      	adds	r2, #1
 801222c:	701a      	strb	r2, [r3, #0]
 801222e:	e746      	b.n	80120be <_dtoa_r+0x85e>
 8012230:	2a00      	cmp	r2, #0
 8012232:	dd03      	ble.n	801223c <_dtoa_r+0x9dc>
 8012234:	2b39      	cmp	r3, #57	; 0x39
 8012236:	d0ee      	beq.n	8012216 <_dtoa_r+0x9b6>
 8012238:	3301      	adds	r3, #1
 801223a:	e7c7      	b.n	80121cc <_dtoa_r+0x96c>
 801223c:	9a04      	ldr	r2, [sp, #16]
 801223e:	9908      	ldr	r1, [sp, #32]
 8012240:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012244:	428a      	cmp	r2, r1
 8012246:	d02b      	beq.n	80122a0 <_dtoa_r+0xa40>
 8012248:	4629      	mov	r1, r5
 801224a:	2300      	movs	r3, #0
 801224c:	220a      	movs	r2, #10
 801224e:	4630      	mov	r0, r6
 8012250:	f000 f9d4 	bl	80125fc <__multadd>
 8012254:	45b9      	cmp	r9, r7
 8012256:	4605      	mov	r5, r0
 8012258:	f04f 0300 	mov.w	r3, #0
 801225c:	f04f 020a 	mov.w	r2, #10
 8012260:	4649      	mov	r1, r9
 8012262:	4630      	mov	r0, r6
 8012264:	d107      	bne.n	8012276 <_dtoa_r+0xa16>
 8012266:	f000 f9c9 	bl	80125fc <__multadd>
 801226a:	4681      	mov	r9, r0
 801226c:	4607      	mov	r7, r0
 801226e:	9b04      	ldr	r3, [sp, #16]
 8012270:	3301      	adds	r3, #1
 8012272:	9304      	str	r3, [sp, #16]
 8012274:	e774      	b.n	8012160 <_dtoa_r+0x900>
 8012276:	f000 f9c1 	bl	80125fc <__multadd>
 801227a:	4639      	mov	r1, r7
 801227c:	4681      	mov	r9, r0
 801227e:	2300      	movs	r3, #0
 8012280:	220a      	movs	r2, #10
 8012282:	4630      	mov	r0, r6
 8012284:	f000 f9ba 	bl	80125fc <__multadd>
 8012288:	4607      	mov	r7, r0
 801228a:	e7f0      	b.n	801226e <_dtoa_r+0xa0e>
 801228c:	f1ba 0f00 	cmp.w	sl, #0
 8012290:	9a01      	ldr	r2, [sp, #4]
 8012292:	bfcc      	ite	gt
 8012294:	46d0      	movgt	r8, sl
 8012296:	f04f 0801 	movle.w	r8, #1
 801229a:	4490      	add	r8, r2
 801229c:	f04f 0900 	mov.w	r9, #0
 80122a0:	4629      	mov	r1, r5
 80122a2:	2201      	movs	r2, #1
 80122a4:	4630      	mov	r0, r6
 80122a6:	9302      	str	r3, [sp, #8]
 80122a8:	f000 fb56 	bl	8012958 <__lshift>
 80122ac:	4621      	mov	r1, r4
 80122ae:	4605      	mov	r5, r0
 80122b0:	f000 fbbe 	bl	8012a30 <__mcmp>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	dcb1      	bgt.n	801221c <_dtoa_r+0x9bc>
 80122b8:	d102      	bne.n	80122c0 <_dtoa_r+0xa60>
 80122ba:	9b02      	ldr	r3, [sp, #8]
 80122bc:	07db      	lsls	r3, r3, #31
 80122be:	d4ad      	bmi.n	801221c <_dtoa_r+0x9bc>
 80122c0:	4643      	mov	r3, r8
 80122c2:	4698      	mov	r8, r3
 80122c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80122c8:	2a30      	cmp	r2, #48	; 0x30
 80122ca:	d0fa      	beq.n	80122c2 <_dtoa_r+0xa62>
 80122cc:	e6f7      	b.n	80120be <_dtoa_r+0x85e>
 80122ce:	9a01      	ldr	r2, [sp, #4]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d1a4      	bne.n	801221e <_dtoa_r+0x9be>
 80122d4:	f10b 0b01 	add.w	fp, fp, #1
 80122d8:	2331      	movs	r3, #49	; 0x31
 80122da:	e778      	b.n	80121ce <_dtoa_r+0x96e>
 80122dc:	4b14      	ldr	r3, [pc, #80]	; (8012330 <_dtoa_r+0xad0>)
 80122de:	f7ff bb2a 	b.w	8011936 <_dtoa_r+0xd6>
 80122e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	f47f ab05 	bne.w	80118f4 <_dtoa_r+0x94>
 80122ea:	4b12      	ldr	r3, [pc, #72]	; (8012334 <_dtoa_r+0xad4>)
 80122ec:	f7ff bb23 	b.w	8011936 <_dtoa_r+0xd6>
 80122f0:	f1ba 0f00 	cmp.w	sl, #0
 80122f4:	dc03      	bgt.n	80122fe <_dtoa_r+0xa9e>
 80122f6:	9b06      	ldr	r3, [sp, #24]
 80122f8:	2b02      	cmp	r3, #2
 80122fa:	f73f aec8 	bgt.w	801208e <_dtoa_r+0x82e>
 80122fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012302:	4621      	mov	r1, r4
 8012304:	4628      	mov	r0, r5
 8012306:	f7ff fa23 	bl	8011750 <quorem>
 801230a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801230e:	f808 3b01 	strb.w	r3, [r8], #1
 8012312:	9a01      	ldr	r2, [sp, #4]
 8012314:	eba8 0202 	sub.w	r2, r8, r2
 8012318:	4592      	cmp	sl, r2
 801231a:	ddb7      	ble.n	801228c <_dtoa_r+0xa2c>
 801231c:	4629      	mov	r1, r5
 801231e:	2300      	movs	r3, #0
 8012320:	220a      	movs	r2, #10
 8012322:	4630      	mov	r0, r6
 8012324:	f000 f96a 	bl	80125fc <__multadd>
 8012328:	4605      	mov	r5, r0
 801232a:	e7ea      	b.n	8012302 <_dtoa_r+0xaa2>
 801232c:	0801de7b 	.word	0x0801de7b
 8012330:	0801dd5c 	.word	0x0801dd5c
 8012334:	0801de16 	.word	0x0801de16

08012338 <_free_r>:
 8012338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801233a:	2900      	cmp	r1, #0
 801233c:	d044      	beq.n	80123c8 <_free_r+0x90>
 801233e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012342:	9001      	str	r0, [sp, #4]
 8012344:	2b00      	cmp	r3, #0
 8012346:	f1a1 0404 	sub.w	r4, r1, #4
 801234a:	bfb8      	it	lt
 801234c:	18e4      	addlt	r4, r4, r3
 801234e:	f000 f8e7 	bl	8012520 <__malloc_lock>
 8012352:	4a1e      	ldr	r2, [pc, #120]	; (80123cc <_free_r+0x94>)
 8012354:	9801      	ldr	r0, [sp, #4]
 8012356:	6813      	ldr	r3, [r2, #0]
 8012358:	b933      	cbnz	r3, 8012368 <_free_r+0x30>
 801235a:	6063      	str	r3, [r4, #4]
 801235c:	6014      	str	r4, [r2, #0]
 801235e:	b003      	add	sp, #12
 8012360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012364:	f000 b8e2 	b.w	801252c <__malloc_unlock>
 8012368:	42a3      	cmp	r3, r4
 801236a:	d908      	bls.n	801237e <_free_r+0x46>
 801236c:	6825      	ldr	r5, [r4, #0]
 801236e:	1961      	adds	r1, r4, r5
 8012370:	428b      	cmp	r3, r1
 8012372:	bf01      	itttt	eq
 8012374:	6819      	ldreq	r1, [r3, #0]
 8012376:	685b      	ldreq	r3, [r3, #4]
 8012378:	1949      	addeq	r1, r1, r5
 801237a:	6021      	streq	r1, [r4, #0]
 801237c:	e7ed      	b.n	801235a <_free_r+0x22>
 801237e:	461a      	mov	r2, r3
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	b10b      	cbz	r3, 8012388 <_free_r+0x50>
 8012384:	42a3      	cmp	r3, r4
 8012386:	d9fa      	bls.n	801237e <_free_r+0x46>
 8012388:	6811      	ldr	r1, [r2, #0]
 801238a:	1855      	adds	r5, r2, r1
 801238c:	42a5      	cmp	r5, r4
 801238e:	d10b      	bne.n	80123a8 <_free_r+0x70>
 8012390:	6824      	ldr	r4, [r4, #0]
 8012392:	4421      	add	r1, r4
 8012394:	1854      	adds	r4, r2, r1
 8012396:	42a3      	cmp	r3, r4
 8012398:	6011      	str	r1, [r2, #0]
 801239a:	d1e0      	bne.n	801235e <_free_r+0x26>
 801239c:	681c      	ldr	r4, [r3, #0]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	6053      	str	r3, [r2, #4]
 80123a2:	440c      	add	r4, r1
 80123a4:	6014      	str	r4, [r2, #0]
 80123a6:	e7da      	b.n	801235e <_free_r+0x26>
 80123a8:	d902      	bls.n	80123b0 <_free_r+0x78>
 80123aa:	230c      	movs	r3, #12
 80123ac:	6003      	str	r3, [r0, #0]
 80123ae:	e7d6      	b.n	801235e <_free_r+0x26>
 80123b0:	6825      	ldr	r5, [r4, #0]
 80123b2:	1961      	adds	r1, r4, r5
 80123b4:	428b      	cmp	r3, r1
 80123b6:	bf04      	itt	eq
 80123b8:	6819      	ldreq	r1, [r3, #0]
 80123ba:	685b      	ldreq	r3, [r3, #4]
 80123bc:	6063      	str	r3, [r4, #4]
 80123be:	bf04      	itt	eq
 80123c0:	1949      	addeq	r1, r1, r5
 80123c2:	6021      	streq	r1, [r4, #0]
 80123c4:	6054      	str	r4, [r2, #4]
 80123c6:	e7ca      	b.n	801235e <_free_r+0x26>
 80123c8:	b003      	add	sp, #12
 80123ca:	bd30      	pop	{r4, r5, pc}
 80123cc:	2400d710 	.word	0x2400d710

080123d0 <malloc>:
 80123d0:	4b02      	ldr	r3, [pc, #8]	; (80123dc <malloc+0xc>)
 80123d2:	4601      	mov	r1, r0
 80123d4:	6818      	ldr	r0, [r3, #0]
 80123d6:	f000 b823 	b.w	8012420 <_malloc_r>
 80123da:	bf00      	nop
 80123dc:	2400046c 	.word	0x2400046c

080123e0 <sbrk_aligned>:
 80123e0:	b570      	push	{r4, r5, r6, lr}
 80123e2:	4e0e      	ldr	r6, [pc, #56]	; (801241c <sbrk_aligned+0x3c>)
 80123e4:	460c      	mov	r4, r1
 80123e6:	6831      	ldr	r1, [r6, #0]
 80123e8:	4605      	mov	r5, r0
 80123ea:	b911      	cbnz	r1, 80123f2 <sbrk_aligned+0x12>
 80123ec:	f000 fe52 	bl	8013094 <_sbrk_r>
 80123f0:	6030      	str	r0, [r6, #0]
 80123f2:	4621      	mov	r1, r4
 80123f4:	4628      	mov	r0, r5
 80123f6:	f000 fe4d 	bl	8013094 <_sbrk_r>
 80123fa:	1c43      	adds	r3, r0, #1
 80123fc:	d00a      	beq.n	8012414 <sbrk_aligned+0x34>
 80123fe:	1cc4      	adds	r4, r0, #3
 8012400:	f024 0403 	bic.w	r4, r4, #3
 8012404:	42a0      	cmp	r0, r4
 8012406:	d007      	beq.n	8012418 <sbrk_aligned+0x38>
 8012408:	1a21      	subs	r1, r4, r0
 801240a:	4628      	mov	r0, r5
 801240c:	f000 fe42 	bl	8013094 <_sbrk_r>
 8012410:	3001      	adds	r0, #1
 8012412:	d101      	bne.n	8012418 <sbrk_aligned+0x38>
 8012414:	f04f 34ff 	mov.w	r4, #4294967295
 8012418:	4620      	mov	r0, r4
 801241a:	bd70      	pop	{r4, r5, r6, pc}
 801241c:	2400d714 	.word	0x2400d714

08012420 <_malloc_r>:
 8012420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012424:	1ccd      	adds	r5, r1, #3
 8012426:	f025 0503 	bic.w	r5, r5, #3
 801242a:	3508      	adds	r5, #8
 801242c:	2d0c      	cmp	r5, #12
 801242e:	bf38      	it	cc
 8012430:	250c      	movcc	r5, #12
 8012432:	2d00      	cmp	r5, #0
 8012434:	4607      	mov	r7, r0
 8012436:	db01      	blt.n	801243c <_malloc_r+0x1c>
 8012438:	42a9      	cmp	r1, r5
 801243a:	d905      	bls.n	8012448 <_malloc_r+0x28>
 801243c:	230c      	movs	r3, #12
 801243e:	603b      	str	r3, [r7, #0]
 8012440:	2600      	movs	r6, #0
 8012442:	4630      	mov	r0, r6
 8012444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012448:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801251c <_malloc_r+0xfc>
 801244c:	f000 f868 	bl	8012520 <__malloc_lock>
 8012450:	f8d8 3000 	ldr.w	r3, [r8]
 8012454:	461c      	mov	r4, r3
 8012456:	bb5c      	cbnz	r4, 80124b0 <_malloc_r+0x90>
 8012458:	4629      	mov	r1, r5
 801245a:	4638      	mov	r0, r7
 801245c:	f7ff ffc0 	bl	80123e0 <sbrk_aligned>
 8012460:	1c43      	adds	r3, r0, #1
 8012462:	4604      	mov	r4, r0
 8012464:	d155      	bne.n	8012512 <_malloc_r+0xf2>
 8012466:	f8d8 4000 	ldr.w	r4, [r8]
 801246a:	4626      	mov	r6, r4
 801246c:	2e00      	cmp	r6, #0
 801246e:	d145      	bne.n	80124fc <_malloc_r+0xdc>
 8012470:	2c00      	cmp	r4, #0
 8012472:	d048      	beq.n	8012506 <_malloc_r+0xe6>
 8012474:	6823      	ldr	r3, [r4, #0]
 8012476:	4631      	mov	r1, r6
 8012478:	4638      	mov	r0, r7
 801247a:	eb04 0903 	add.w	r9, r4, r3
 801247e:	f000 fe09 	bl	8013094 <_sbrk_r>
 8012482:	4581      	cmp	r9, r0
 8012484:	d13f      	bne.n	8012506 <_malloc_r+0xe6>
 8012486:	6821      	ldr	r1, [r4, #0]
 8012488:	1a6d      	subs	r5, r5, r1
 801248a:	4629      	mov	r1, r5
 801248c:	4638      	mov	r0, r7
 801248e:	f7ff ffa7 	bl	80123e0 <sbrk_aligned>
 8012492:	3001      	adds	r0, #1
 8012494:	d037      	beq.n	8012506 <_malloc_r+0xe6>
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	442b      	add	r3, r5
 801249a:	6023      	str	r3, [r4, #0]
 801249c:	f8d8 3000 	ldr.w	r3, [r8]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d038      	beq.n	8012516 <_malloc_r+0xf6>
 80124a4:	685a      	ldr	r2, [r3, #4]
 80124a6:	42a2      	cmp	r2, r4
 80124a8:	d12b      	bne.n	8012502 <_malloc_r+0xe2>
 80124aa:	2200      	movs	r2, #0
 80124ac:	605a      	str	r2, [r3, #4]
 80124ae:	e00f      	b.n	80124d0 <_malloc_r+0xb0>
 80124b0:	6822      	ldr	r2, [r4, #0]
 80124b2:	1b52      	subs	r2, r2, r5
 80124b4:	d41f      	bmi.n	80124f6 <_malloc_r+0xd6>
 80124b6:	2a0b      	cmp	r2, #11
 80124b8:	d917      	bls.n	80124ea <_malloc_r+0xca>
 80124ba:	1961      	adds	r1, r4, r5
 80124bc:	42a3      	cmp	r3, r4
 80124be:	6025      	str	r5, [r4, #0]
 80124c0:	bf18      	it	ne
 80124c2:	6059      	strne	r1, [r3, #4]
 80124c4:	6863      	ldr	r3, [r4, #4]
 80124c6:	bf08      	it	eq
 80124c8:	f8c8 1000 	streq.w	r1, [r8]
 80124cc:	5162      	str	r2, [r4, r5]
 80124ce:	604b      	str	r3, [r1, #4]
 80124d0:	4638      	mov	r0, r7
 80124d2:	f104 060b 	add.w	r6, r4, #11
 80124d6:	f000 f829 	bl	801252c <__malloc_unlock>
 80124da:	f026 0607 	bic.w	r6, r6, #7
 80124de:	1d23      	adds	r3, r4, #4
 80124e0:	1af2      	subs	r2, r6, r3
 80124e2:	d0ae      	beq.n	8012442 <_malloc_r+0x22>
 80124e4:	1b9b      	subs	r3, r3, r6
 80124e6:	50a3      	str	r3, [r4, r2]
 80124e8:	e7ab      	b.n	8012442 <_malloc_r+0x22>
 80124ea:	42a3      	cmp	r3, r4
 80124ec:	6862      	ldr	r2, [r4, #4]
 80124ee:	d1dd      	bne.n	80124ac <_malloc_r+0x8c>
 80124f0:	f8c8 2000 	str.w	r2, [r8]
 80124f4:	e7ec      	b.n	80124d0 <_malloc_r+0xb0>
 80124f6:	4623      	mov	r3, r4
 80124f8:	6864      	ldr	r4, [r4, #4]
 80124fa:	e7ac      	b.n	8012456 <_malloc_r+0x36>
 80124fc:	4634      	mov	r4, r6
 80124fe:	6876      	ldr	r6, [r6, #4]
 8012500:	e7b4      	b.n	801246c <_malloc_r+0x4c>
 8012502:	4613      	mov	r3, r2
 8012504:	e7cc      	b.n	80124a0 <_malloc_r+0x80>
 8012506:	230c      	movs	r3, #12
 8012508:	603b      	str	r3, [r7, #0]
 801250a:	4638      	mov	r0, r7
 801250c:	f000 f80e 	bl	801252c <__malloc_unlock>
 8012510:	e797      	b.n	8012442 <_malloc_r+0x22>
 8012512:	6025      	str	r5, [r4, #0]
 8012514:	e7dc      	b.n	80124d0 <_malloc_r+0xb0>
 8012516:	605b      	str	r3, [r3, #4]
 8012518:	deff      	udf	#255	; 0xff
 801251a:	bf00      	nop
 801251c:	2400d710 	.word	0x2400d710

08012520 <__malloc_lock>:
 8012520:	4801      	ldr	r0, [pc, #4]	; (8012528 <__malloc_lock+0x8>)
 8012522:	f7ff b8df 	b.w	80116e4 <__retarget_lock_acquire_recursive>
 8012526:	bf00      	nop
 8012528:	2400d70c 	.word	0x2400d70c

0801252c <__malloc_unlock>:
 801252c:	4801      	ldr	r0, [pc, #4]	; (8012534 <__malloc_unlock+0x8>)
 801252e:	f7ff b8da 	b.w	80116e6 <__retarget_lock_release_recursive>
 8012532:	bf00      	nop
 8012534:	2400d70c 	.word	0x2400d70c

08012538 <_Balloc>:
 8012538:	b570      	push	{r4, r5, r6, lr}
 801253a:	69c6      	ldr	r6, [r0, #28]
 801253c:	4604      	mov	r4, r0
 801253e:	460d      	mov	r5, r1
 8012540:	b976      	cbnz	r6, 8012560 <_Balloc+0x28>
 8012542:	2010      	movs	r0, #16
 8012544:	f7ff ff44 	bl	80123d0 <malloc>
 8012548:	4602      	mov	r2, r0
 801254a:	61e0      	str	r0, [r4, #28]
 801254c:	b920      	cbnz	r0, 8012558 <_Balloc+0x20>
 801254e:	4b18      	ldr	r3, [pc, #96]	; (80125b0 <_Balloc+0x78>)
 8012550:	4818      	ldr	r0, [pc, #96]	; (80125b4 <_Balloc+0x7c>)
 8012552:	216b      	movs	r1, #107	; 0x6b
 8012554:	f7ff f8de 	bl	8011714 <__assert_func>
 8012558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801255c:	6006      	str	r6, [r0, #0]
 801255e:	60c6      	str	r6, [r0, #12]
 8012560:	69e6      	ldr	r6, [r4, #28]
 8012562:	68f3      	ldr	r3, [r6, #12]
 8012564:	b183      	cbz	r3, 8012588 <_Balloc+0x50>
 8012566:	69e3      	ldr	r3, [r4, #28]
 8012568:	68db      	ldr	r3, [r3, #12]
 801256a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801256e:	b9b8      	cbnz	r0, 80125a0 <_Balloc+0x68>
 8012570:	2101      	movs	r1, #1
 8012572:	fa01 f605 	lsl.w	r6, r1, r5
 8012576:	1d72      	adds	r2, r6, #5
 8012578:	0092      	lsls	r2, r2, #2
 801257a:	4620      	mov	r0, r4
 801257c:	f000 fda1 	bl	80130c2 <_calloc_r>
 8012580:	b160      	cbz	r0, 801259c <_Balloc+0x64>
 8012582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012586:	e00e      	b.n	80125a6 <_Balloc+0x6e>
 8012588:	2221      	movs	r2, #33	; 0x21
 801258a:	2104      	movs	r1, #4
 801258c:	4620      	mov	r0, r4
 801258e:	f000 fd98 	bl	80130c2 <_calloc_r>
 8012592:	69e3      	ldr	r3, [r4, #28]
 8012594:	60f0      	str	r0, [r6, #12]
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d1e4      	bne.n	8012566 <_Balloc+0x2e>
 801259c:	2000      	movs	r0, #0
 801259e:	bd70      	pop	{r4, r5, r6, pc}
 80125a0:	6802      	ldr	r2, [r0, #0]
 80125a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80125a6:	2300      	movs	r3, #0
 80125a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80125ac:	e7f7      	b.n	801259e <_Balloc+0x66>
 80125ae:	bf00      	nop
 80125b0:	0801dbdc 	.word	0x0801dbdc
 80125b4:	0801de8c 	.word	0x0801de8c

080125b8 <_Bfree>:
 80125b8:	b570      	push	{r4, r5, r6, lr}
 80125ba:	69c6      	ldr	r6, [r0, #28]
 80125bc:	4605      	mov	r5, r0
 80125be:	460c      	mov	r4, r1
 80125c0:	b976      	cbnz	r6, 80125e0 <_Bfree+0x28>
 80125c2:	2010      	movs	r0, #16
 80125c4:	f7ff ff04 	bl	80123d0 <malloc>
 80125c8:	4602      	mov	r2, r0
 80125ca:	61e8      	str	r0, [r5, #28]
 80125cc:	b920      	cbnz	r0, 80125d8 <_Bfree+0x20>
 80125ce:	4b09      	ldr	r3, [pc, #36]	; (80125f4 <_Bfree+0x3c>)
 80125d0:	4809      	ldr	r0, [pc, #36]	; (80125f8 <_Bfree+0x40>)
 80125d2:	218f      	movs	r1, #143	; 0x8f
 80125d4:	f7ff f89e 	bl	8011714 <__assert_func>
 80125d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125dc:	6006      	str	r6, [r0, #0]
 80125de:	60c6      	str	r6, [r0, #12]
 80125e0:	b13c      	cbz	r4, 80125f2 <_Bfree+0x3a>
 80125e2:	69eb      	ldr	r3, [r5, #28]
 80125e4:	6862      	ldr	r2, [r4, #4]
 80125e6:	68db      	ldr	r3, [r3, #12]
 80125e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80125ec:	6021      	str	r1, [r4, #0]
 80125ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80125f2:	bd70      	pop	{r4, r5, r6, pc}
 80125f4:	0801dbdc 	.word	0x0801dbdc
 80125f8:	0801de8c 	.word	0x0801de8c

080125fc <__multadd>:
 80125fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012600:	690d      	ldr	r5, [r1, #16]
 8012602:	4607      	mov	r7, r0
 8012604:	460c      	mov	r4, r1
 8012606:	461e      	mov	r6, r3
 8012608:	f101 0c14 	add.w	ip, r1, #20
 801260c:	2000      	movs	r0, #0
 801260e:	f8dc 3000 	ldr.w	r3, [ip]
 8012612:	b299      	uxth	r1, r3
 8012614:	fb02 6101 	mla	r1, r2, r1, r6
 8012618:	0c1e      	lsrs	r6, r3, #16
 801261a:	0c0b      	lsrs	r3, r1, #16
 801261c:	fb02 3306 	mla	r3, r2, r6, r3
 8012620:	b289      	uxth	r1, r1
 8012622:	3001      	adds	r0, #1
 8012624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012628:	4285      	cmp	r5, r0
 801262a:	f84c 1b04 	str.w	r1, [ip], #4
 801262e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012632:	dcec      	bgt.n	801260e <__multadd+0x12>
 8012634:	b30e      	cbz	r6, 801267a <__multadd+0x7e>
 8012636:	68a3      	ldr	r3, [r4, #8]
 8012638:	42ab      	cmp	r3, r5
 801263a:	dc19      	bgt.n	8012670 <__multadd+0x74>
 801263c:	6861      	ldr	r1, [r4, #4]
 801263e:	4638      	mov	r0, r7
 8012640:	3101      	adds	r1, #1
 8012642:	f7ff ff79 	bl	8012538 <_Balloc>
 8012646:	4680      	mov	r8, r0
 8012648:	b928      	cbnz	r0, 8012656 <__multadd+0x5a>
 801264a:	4602      	mov	r2, r0
 801264c:	4b0c      	ldr	r3, [pc, #48]	; (8012680 <__multadd+0x84>)
 801264e:	480d      	ldr	r0, [pc, #52]	; (8012684 <__multadd+0x88>)
 8012650:	21ba      	movs	r1, #186	; 0xba
 8012652:	f7ff f85f 	bl	8011714 <__assert_func>
 8012656:	6922      	ldr	r2, [r4, #16]
 8012658:	3202      	adds	r2, #2
 801265a:	f104 010c 	add.w	r1, r4, #12
 801265e:	0092      	lsls	r2, r2, #2
 8012660:	300c      	adds	r0, #12
 8012662:	f7ff f849 	bl	80116f8 <memcpy>
 8012666:	4621      	mov	r1, r4
 8012668:	4638      	mov	r0, r7
 801266a:	f7ff ffa5 	bl	80125b8 <_Bfree>
 801266e:	4644      	mov	r4, r8
 8012670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012674:	3501      	adds	r5, #1
 8012676:	615e      	str	r6, [r3, #20]
 8012678:	6125      	str	r5, [r4, #16]
 801267a:	4620      	mov	r0, r4
 801267c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012680:	0801de7b 	.word	0x0801de7b
 8012684:	0801de8c 	.word	0x0801de8c

08012688 <__hi0bits>:
 8012688:	0c03      	lsrs	r3, r0, #16
 801268a:	041b      	lsls	r3, r3, #16
 801268c:	b9d3      	cbnz	r3, 80126c4 <__hi0bits+0x3c>
 801268e:	0400      	lsls	r0, r0, #16
 8012690:	2310      	movs	r3, #16
 8012692:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012696:	bf04      	itt	eq
 8012698:	0200      	lsleq	r0, r0, #8
 801269a:	3308      	addeq	r3, #8
 801269c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80126a0:	bf04      	itt	eq
 80126a2:	0100      	lsleq	r0, r0, #4
 80126a4:	3304      	addeq	r3, #4
 80126a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80126aa:	bf04      	itt	eq
 80126ac:	0080      	lsleq	r0, r0, #2
 80126ae:	3302      	addeq	r3, #2
 80126b0:	2800      	cmp	r0, #0
 80126b2:	db05      	blt.n	80126c0 <__hi0bits+0x38>
 80126b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80126b8:	f103 0301 	add.w	r3, r3, #1
 80126bc:	bf08      	it	eq
 80126be:	2320      	moveq	r3, #32
 80126c0:	4618      	mov	r0, r3
 80126c2:	4770      	bx	lr
 80126c4:	2300      	movs	r3, #0
 80126c6:	e7e4      	b.n	8012692 <__hi0bits+0xa>

080126c8 <__lo0bits>:
 80126c8:	6803      	ldr	r3, [r0, #0]
 80126ca:	f013 0207 	ands.w	r2, r3, #7
 80126ce:	d00c      	beq.n	80126ea <__lo0bits+0x22>
 80126d0:	07d9      	lsls	r1, r3, #31
 80126d2:	d422      	bmi.n	801271a <__lo0bits+0x52>
 80126d4:	079a      	lsls	r2, r3, #30
 80126d6:	bf49      	itett	mi
 80126d8:	085b      	lsrmi	r3, r3, #1
 80126da:	089b      	lsrpl	r3, r3, #2
 80126dc:	6003      	strmi	r3, [r0, #0]
 80126de:	2201      	movmi	r2, #1
 80126e0:	bf5c      	itt	pl
 80126e2:	6003      	strpl	r3, [r0, #0]
 80126e4:	2202      	movpl	r2, #2
 80126e6:	4610      	mov	r0, r2
 80126e8:	4770      	bx	lr
 80126ea:	b299      	uxth	r1, r3
 80126ec:	b909      	cbnz	r1, 80126f2 <__lo0bits+0x2a>
 80126ee:	0c1b      	lsrs	r3, r3, #16
 80126f0:	2210      	movs	r2, #16
 80126f2:	b2d9      	uxtb	r1, r3
 80126f4:	b909      	cbnz	r1, 80126fa <__lo0bits+0x32>
 80126f6:	3208      	adds	r2, #8
 80126f8:	0a1b      	lsrs	r3, r3, #8
 80126fa:	0719      	lsls	r1, r3, #28
 80126fc:	bf04      	itt	eq
 80126fe:	091b      	lsreq	r3, r3, #4
 8012700:	3204      	addeq	r2, #4
 8012702:	0799      	lsls	r1, r3, #30
 8012704:	bf04      	itt	eq
 8012706:	089b      	lsreq	r3, r3, #2
 8012708:	3202      	addeq	r2, #2
 801270a:	07d9      	lsls	r1, r3, #31
 801270c:	d403      	bmi.n	8012716 <__lo0bits+0x4e>
 801270e:	085b      	lsrs	r3, r3, #1
 8012710:	f102 0201 	add.w	r2, r2, #1
 8012714:	d003      	beq.n	801271e <__lo0bits+0x56>
 8012716:	6003      	str	r3, [r0, #0]
 8012718:	e7e5      	b.n	80126e6 <__lo0bits+0x1e>
 801271a:	2200      	movs	r2, #0
 801271c:	e7e3      	b.n	80126e6 <__lo0bits+0x1e>
 801271e:	2220      	movs	r2, #32
 8012720:	e7e1      	b.n	80126e6 <__lo0bits+0x1e>
	...

08012724 <__i2b>:
 8012724:	b510      	push	{r4, lr}
 8012726:	460c      	mov	r4, r1
 8012728:	2101      	movs	r1, #1
 801272a:	f7ff ff05 	bl	8012538 <_Balloc>
 801272e:	4602      	mov	r2, r0
 8012730:	b928      	cbnz	r0, 801273e <__i2b+0x1a>
 8012732:	4b05      	ldr	r3, [pc, #20]	; (8012748 <__i2b+0x24>)
 8012734:	4805      	ldr	r0, [pc, #20]	; (801274c <__i2b+0x28>)
 8012736:	f240 1145 	movw	r1, #325	; 0x145
 801273a:	f7fe ffeb 	bl	8011714 <__assert_func>
 801273e:	2301      	movs	r3, #1
 8012740:	6144      	str	r4, [r0, #20]
 8012742:	6103      	str	r3, [r0, #16]
 8012744:	bd10      	pop	{r4, pc}
 8012746:	bf00      	nop
 8012748:	0801de7b 	.word	0x0801de7b
 801274c:	0801de8c 	.word	0x0801de8c

08012750 <__multiply>:
 8012750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012754:	4691      	mov	r9, r2
 8012756:	690a      	ldr	r2, [r1, #16]
 8012758:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801275c:	429a      	cmp	r2, r3
 801275e:	bfb8      	it	lt
 8012760:	460b      	movlt	r3, r1
 8012762:	460c      	mov	r4, r1
 8012764:	bfbc      	itt	lt
 8012766:	464c      	movlt	r4, r9
 8012768:	4699      	movlt	r9, r3
 801276a:	6927      	ldr	r7, [r4, #16]
 801276c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012770:	68a3      	ldr	r3, [r4, #8]
 8012772:	6861      	ldr	r1, [r4, #4]
 8012774:	eb07 060a 	add.w	r6, r7, sl
 8012778:	42b3      	cmp	r3, r6
 801277a:	b085      	sub	sp, #20
 801277c:	bfb8      	it	lt
 801277e:	3101      	addlt	r1, #1
 8012780:	f7ff feda 	bl	8012538 <_Balloc>
 8012784:	b930      	cbnz	r0, 8012794 <__multiply+0x44>
 8012786:	4602      	mov	r2, r0
 8012788:	4b44      	ldr	r3, [pc, #272]	; (801289c <__multiply+0x14c>)
 801278a:	4845      	ldr	r0, [pc, #276]	; (80128a0 <__multiply+0x150>)
 801278c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012790:	f7fe ffc0 	bl	8011714 <__assert_func>
 8012794:	f100 0514 	add.w	r5, r0, #20
 8012798:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801279c:	462b      	mov	r3, r5
 801279e:	2200      	movs	r2, #0
 80127a0:	4543      	cmp	r3, r8
 80127a2:	d321      	bcc.n	80127e8 <__multiply+0x98>
 80127a4:	f104 0314 	add.w	r3, r4, #20
 80127a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80127ac:	f109 0314 	add.w	r3, r9, #20
 80127b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80127b4:	9202      	str	r2, [sp, #8]
 80127b6:	1b3a      	subs	r2, r7, r4
 80127b8:	3a15      	subs	r2, #21
 80127ba:	f022 0203 	bic.w	r2, r2, #3
 80127be:	3204      	adds	r2, #4
 80127c0:	f104 0115 	add.w	r1, r4, #21
 80127c4:	428f      	cmp	r7, r1
 80127c6:	bf38      	it	cc
 80127c8:	2204      	movcc	r2, #4
 80127ca:	9201      	str	r2, [sp, #4]
 80127cc:	9a02      	ldr	r2, [sp, #8]
 80127ce:	9303      	str	r3, [sp, #12]
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d80c      	bhi.n	80127ee <__multiply+0x9e>
 80127d4:	2e00      	cmp	r6, #0
 80127d6:	dd03      	ble.n	80127e0 <__multiply+0x90>
 80127d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d05b      	beq.n	8012898 <__multiply+0x148>
 80127e0:	6106      	str	r6, [r0, #16]
 80127e2:	b005      	add	sp, #20
 80127e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e8:	f843 2b04 	str.w	r2, [r3], #4
 80127ec:	e7d8      	b.n	80127a0 <__multiply+0x50>
 80127ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80127f2:	f1ba 0f00 	cmp.w	sl, #0
 80127f6:	d024      	beq.n	8012842 <__multiply+0xf2>
 80127f8:	f104 0e14 	add.w	lr, r4, #20
 80127fc:	46a9      	mov	r9, r5
 80127fe:	f04f 0c00 	mov.w	ip, #0
 8012802:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012806:	f8d9 1000 	ldr.w	r1, [r9]
 801280a:	fa1f fb82 	uxth.w	fp, r2
 801280e:	b289      	uxth	r1, r1
 8012810:	fb0a 110b 	mla	r1, sl, fp, r1
 8012814:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012818:	f8d9 2000 	ldr.w	r2, [r9]
 801281c:	4461      	add	r1, ip
 801281e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012822:	fb0a c20b 	mla	r2, sl, fp, ip
 8012826:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801282a:	b289      	uxth	r1, r1
 801282c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012830:	4577      	cmp	r7, lr
 8012832:	f849 1b04 	str.w	r1, [r9], #4
 8012836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801283a:	d8e2      	bhi.n	8012802 <__multiply+0xb2>
 801283c:	9a01      	ldr	r2, [sp, #4]
 801283e:	f845 c002 	str.w	ip, [r5, r2]
 8012842:	9a03      	ldr	r2, [sp, #12]
 8012844:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012848:	3304      	adds	r3, #4
 801284a:	f1b9 0f00 	cmp.w	r9, #0
 801284e:	d021      	beq.n	8012894 <__multiply+0x144>
 8012850:	6829      	ldr	r1, [r5, #0]
 8012852:	f104 0c14 	add.w	ip, r4, #20
 8012856:	46ae      	mov	lr, r5
 8012858:	f04f 0a00 	mov.w	sl, #0
 801285c:	f8bc b000 	ldrh.w	fp, [ip]
 8012860:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012864:	fb09 220b 	mla	r2, r9, fp, r2
 8012868:	4452      	add	r2, sl
 801286a:	b289      	uxth	r1, r1
 801286c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012870:	f84e 1b04 	str.w	r1, [lr], #4
 8012874:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012878:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801287c:	f8be 1000 	ldrh.w	r1, [lr]
 8012880:	fb09 110a 	mla	r1, r9, sl, r1
 8012884:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012888:	4567      	cmp	r7, ip
 801288a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801288e:	d8e5      	bhi.n	801285c <__multiply+0x10c>
 8012890:	9a01      	ldr	r2, [sp, #4]
 8012892:	50a9      	str	r1, [r5, r2]
 8012894:	3504      	adds	r5, #4
 8012896:	e799      	b.n	80127cc <__multiply+0x7c>
 8012898:	3e01      	subs	r6, #1
 801289a:	e79b      	b.n	80127d4 <__multiply+0x84>
 801289c:	0801de7b 	.word	0x0801de7b
 80128a0:	0801de8c 	.word	0x0801de8c

080128a4 <__pow5mult>:
 80128a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128a8:	4615      	mov	r5, r2
 80128aa:	f012 0203 	ands.w	r2, r2, #3
 80128ae:	4606      	mov	r6, r0
 80128b0:	460f      	mov	r7, r1
 80128b2:	d007      	beq.n	80128c4 <__pow5mult+0x20>
 80128b4:	4c25      	ldr	r4, [pc, #148]	; (801294c <__pow5mult+0xa8>)
 80128b6:	3a01      	subs	r2, #1
 80128b8:	2300      	movs	r3, #0
 80128ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80128be:	f7ff fe9d 	bl	80125fc <__multadd>
 80128c2:	4607      	mov	r7, r0
 80128c4:	10ad      	asrs	r5, r5, #2
 80128c6:	d03d      	beq.n	8012944 <__pow5mult+0xa0>
 80128c8:	69f4      	ldr	r4, [r6, #28]
 80128ca:	b97c      	cbnz	r4, 80128ec <__pow5mult+0x48>
 80128cc:	2010      	movs	r0, #16
 80128ce:	f7ff fd7f 	bl	80123d0 <malloc>
 80128d2:	4602      	mov	r2, r0
 80128d4:	61f0      	str	r0, [r6, #28]
 80128d6:	b928      	cbnz	r0, 80128e4 <__pow5mult+0x40>
 80128d8:	4b1d      	ldr	r3, [pc, #116]	; (8012950 <__pow5mult+0xac>)
 80128da:	481e      	ldr	r0, [pc, #120]	; (8012954 <__pow5mult+0xb0>)
 80128dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80128e0:	f7fe ff18 	bl	8011714 <__assert_func>
 80128e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80128e8:	6004      	str	r4, [r0, #0]
 80128ea:	60c4      	str	r4, [r0, #12]
 80128ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80128f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80128f4:	b94c      	cbnz	r4, 801290a <__pow5mult+0x66>
 80128f6:	f240 2171 	movw	r1, #625	; 0x271
 80128fa:	4630      	mov	r0, r6
 80128fc:	f7ff ff12 	bl	8012724 <__i2b>
 8012900:	2300      	movs	r3, #0
 8012902:	f8c8 0008 	str.w	r0, [r8, #8]
 8012906:	4604      	mov	r4, r0
 8012908:	6003      	str	r3, [r0, #0]
 801290a:	f04f 0900 	mov.w	r9, #0
 801290e:	07eb      	lsls	r3, r5, #31
 8012910:	d50a      	bpl.n	8012928 <__pow5mult+0x84>
 8012912:	4639      	mov	r1, r7
 8012914:	4622      	mov	r2, r4
 8012916:	4630      	mov	r0, r6
 8012918:	f7ff ff1a 	bl	8012750 <__multiply>
 801291c:	4639      	mov	r1, r7
 801291e:	4680      	mov	r8, r0
 8012920:	4630      	mov	r0, r6
 8012922:	f7ff fe49 	bl	80125b8 <_Bfree>
 8012926:	4647      	mov	r7, r8
 8012928:	106d      	asrs	r5, r5, #1
 801292a:	d00b      	beq.n	8012944 <__pow5mult+0xa0>
 801292c:	6820      	ldr	r0, [r4, #0]
 801292e:	b938      	cbnz	r0, 8012940 <__pow5mult+0x9c>
 8012930:	4622      	mov	r2, r4
 8012932:	4621      	mov	r1, r4
 8012934:	4630      	mov	r0, r6
 8012936:	f7ff ff0b 	bl	8012750 <__multiply>
 801293a:	6020      	str	r0, [r4, #0]
 801293c:	f8c0 9000 	str.w	r9, [r0]
 8012940:	4604      	mov	r4, r0
 8012942:	e7e4      	b.n	801290e <__pow5mult+0x6a>
 8012944:	4638      	mov	r0, r7
 8012946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801294a:	bf00      	nop
 801294c:	0801dfd8 	.word	0x0801dfd8
 8012950:	0801dbdc 	.word	0x0801dbdc
 8012954:	0801de8c 	.word	0x0801de8c

08012958 <__lshift>:
 8012958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801295c:	460c      	mov	r4, r1
 801295e:	6849      	ldr	r1, [r1, #4]
 8012960:	6923      	ldr	r3, [r4, #16]
 8012962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012966:	68a3      	ldr	r3, [r4, #8]
 8012968:	4607      	mov	r7, r0
 801296a:	4691      	mov	r9, r2
 801296c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012970:	f108 0601 	add.w	r6, r8, #1
 8012974:	42b3      	cmp	r3, r6
 8012976:	db0b      	blt.n	8012990 <__lshift+0x38>
 8012978:	4638      	mov	r0, r7
 801297a:	f7ff fddd 	bl	8012538 <_Balloc>
 801297e:	4605      	mov	r5, r0
 8012980:	b948      	cbnz	r0, 8012996 <__lshift+0x3e>
 8012982:	4602      	mov	r2, r0
 8012984:	4b28      	ldr	r3, [pc, #160]	; (8012a28 <__lshift+0xd0>)
 8012986:	4829      	ldr	r0, [pc, #164]	; (8012a2c <__lshift+0xd4>)
 8012988:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801298c:	f7fe fec2 	bl	8011714 <__assert_func>
 8012990:	3101      	adds	r1, #1
 8012992:	005b      	lsls	r3, r3, #1
 8012994:	e7ee      	b.n	8012974 <__lshift+0x1c>
 8012996:	2300      	movs	r3, #0
 8012998:	f100 0114 	add.w	r1, r0, #20
 801299c:	f100 0210 	add.w	r2, r0, #16
 80129a0:	4618      	mov	r0, r3
 80129a2:	4553      	cmp	r3, sl
 80129a4:	db33      	blt.n	8012a0e <__lshift+0xb6>
 80129a6:	6920      	ldr	r0, [r4, #16]
 80129a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80129ac:	f104 0314 	add.w	r3, r4, #20
 80129b0:	f019 091f 	ands.w	r9, r9, #31
 80129b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80129b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80129bc:	d02b      	beq.n	8012a16 <__lshift+0xbe>
 80129be:	f1c9 0e20 	rsb	lr, r9, #32
 80129c2:	468a      	mov	sl, r1
 80129c4:	2200      	movs	r2, #0
 80129c6:	6818      	ldr	r0, [r3, #0]
 80129c8:	fa00 f009 	lsl.w	r0, r0, r9
 80129cc:	4310      	orrs	r0, r2
 80129ce:	f84a 0b04 	str.w	r0, [sl], #4
 80129d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80129d6:	459c      	cmp	ip, r3
 80129d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80129dc:	d8f3      	bhi.n	80129c6 <__lshift+0x6e>
 80129de:	ebac 0304 	sub.w	r3, ip, r4
 80129e2:	3b15      	subs	r3, #21
 80129e4:	f023 0303 	bic.w	r3, r3, #3
 80129e8:	3304      	adds	r3, #4
 80129ea:	f104 0015 	add.w	r0, r4, #21
 80129ee:	4584      	cmp	ip, r0
 80129f0:	bf38      	it	cc
 80129f2:	2304      	movcc	r3, #4
 80129f4:	50ca      	str	r2, [r1, r3]
 80129f6:	b10a      	cbz	r2, 80129fc <__lshift+0xa4>
 80129f8:	f108 0602 	add.w	r6, r8, #2
 80129fc:	3e01      	subs	r6, #1
 80129fe:	4638      	mov	r0, r7
 8012a00:	612e      	str	r6, [r5, #16]
 8012a02:	4621      	mov	r1, r4
 8012a04:	f7ff fdd8 	bl	80125b8 <_Bfree>
 8012a08:	4628      	mov	r0, r5
 8012a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012a12:	3301      	adds	r3, #1
 8012a14:	e7c5      	b.n	80129a2 <__lshift+0x4a>
 8012a16:	3904      	subs	r1, #4
 8012a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012a20:	459c      	cmp	ip, r3
 8012a22:	d8f9      	bhi.n	8012a18 <__lshift+0xc0>
 8012a24:	e7ea      	b.n	80129fc <__lshift+0xa4>
 8012a26:	bf00      	nop
 8012a28:	0801de7b 	.word	0x0801de7b
 8012a2c:	0801de8c 	.word	0x0801de8c

08012a30 <__mcmp>:
 8012a30:	b530      	push	{r4, r5, lr}
 8012a32:	6902      	ldr	r2, [r0, #16]
 8012a34:	690c      	ldr	r4, [r1, #16]
 8012a36:	1b12      	subs	r2, r2, r4
 8012a38:	d10e      	bne.n	8012a58 <__mcmp+0x28>
 8012a3a:	f100 0314 	add.w	r3, r0, #20
 8012a3e:	3114      	adds	r1, #20
 8012a40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012a44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012a48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012a4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012a50:	42a5      	cmp	r5, r4
 8012a52:	d003      	beq.n	8012a5c <__mcmp+0x2c>
 8012a54:	d305      	bcc.n	8012a62 <__mcmp+0x32>
 8012a56:	2201      	movs	r2, #1
 8012a58:	4610      	mov	r0, r2
 8012a5a:	bd30      	pop	{r4, r5, pc}
 8012a5c:	4283      	cmp	r3, r0
 8012a5e:	d3f3      	bcc.n	8012a48 <__mcmp+0x18>
 8012a60:	e7fa      	b.n	8012a58 <__mcmp+0x28>
 8012a62:	f04f 32ff 	mov.w	r2, #4294967295
 8012a66:	e7f7      	b.n	8012a58 <__mcmp+0x28>

08012a68 <__mdiff>:
 8012a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	460c      	mov	r4, r1
 8012a6e:	4606      	mov	r6, r0
 8012a70:	4611      	mov	r1, r2
 8012a72:	4620      	mov	r0, r4
 8012a74:	4690      	mov	r8, r2
 8012a76:	f7ff ffdb 	bl	8012a30 <__mcmp>
 8012a7a:	1e05      	subs	r5, r0, #0
 8012a7c:	d110      	bne.n	8012aa0 <__mdiff+0x38>
 8012a7e:	4629      	mov	r1, r5
 8012a80:	4630      	mov	r0, r6
 8012a82:	f7ff fd59 	bl	8012538 <_Balloc>
 8012a86:	b930      	cbnz	r0, 8012a96 <__mdiff+0x2e>
 8012a88:	4b3a      	ldr	r3, [pc, #232]	; (8012b74 <__mdiff+0x10c>)
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	f240 2137 	movw	r1, #567	; 0x237
 8012a90:	4839      	ldr	r0, [pc, #228]	; (8012b78 <__mdiff+0x110>)
 8012a92:	f7fe fe3f 	bl	8011714 <__assert_func>
 8012a96:	2301      	movs	r3, #1
 8012a98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa0:	bfa4      	itt	ge
 8012aa2:	4643      	movge	r3, r8
 8012aa4:	46a0      	movge	r8, r4
 8012aa6:	4630      	mov	r0, r6
 8012aa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012aac:	bfa6      	itte	ge
 8012aae:	461c      	movge	r4, r3
 8012ab0:	2500      	movge	r5, #0
 8012ab2:	2501      	movlt	r5, #1
 8012ab4:	f7ff fd40 	bl	8012538 <_Balloc>
 8012ab8:	b920      	cbnz	r0, 8012ac4 <__mdiff+0x5c>
 8012aba:	4b2e      	ldr	r3, [pc, #184]	; (8012b74 <__mdiff+0x10c>)
 8012abc:	4602      	mov	r2, r0
 8012abe:	f240 2145 	movw	r1, #581	; 0x245
 8012ac2:	e7e5      	b.n	8012a90 <__mdiff+0x28>
 8012ac4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012ac8:	6926      	ldr	r6, [r4, #16]
 8012aca:	60c5      	str	r5, [r0, #12]
 8012acc:	f104 0914 	add.w	r9, r4, #20
 8012ad0:	f108 0514 	add.w	r5, r8, #20
 8012ad4:	f100 0e14 	add.w	lr, r0, #20
 8012ad8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012adc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012ae0:	f108 0210 	add.w	r2, r8, #16
 8012ae4:	46f2      	mov	sl, lr
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	f859 3b04 	ldr.w	r3, [r9], #4
 8012aec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012af0:	fa11 f88b 	uxtah	r8, r1, fp
 8012af4:	b299      	uxth	r1, r3
 8012af6:	0c1b      	lsrs	r3, r3, #16
 8012af8:	eba8 0801 	sub.w	r8, r8, r1
 8012afc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012b00:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012b04:	fa1f f888 	uxth.w	r8, r8
 8012b08:	1419      	asrs	r1, r3, #16
 8012b0a:	454e      	cmp	r6, r9
 8012b0c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012b10:	f84a 3b04 	str.w	r3, [sl], #4
 8012b14:	d8e8      	bhi.n	8012ae8 <__mdiff+0x80>
 8012b16:	1b33      	subs	r3, r6, r4
 8012b18:	3b15      	subs	r3, #21
 8012b1a:	f023 0303 	bic.w	r3, r3, #3
 8012b1e:	3304      	adds	r3, #4
 8012b20:	3415      	adds	r4, #21
 8012b22:	42a6      	cmp	r6, r4
 8012b24:	bf38      	it	cc
 8012b26:	2304      	movcc	r3, #4
 8012b28:	441d      	add	r5, r3
 8012b2a:	4473      	add	r3, lr
 8012b2c:	469e      	mov	lr, r3
 8012b2e:	462e      	mov	r6, r5
 8012b30:	4566      	cmp	r6, ip
 8012b32:	d30e      	bcc.n	8012b52 <__mdiff+0xea>
 8012b34:	f10c 0203 	add.w	r2, ip, #3
 8012b38:	1b52      	subs	r2, r2, r5
 8012b3a:	f022 0203 	bic.w	r2, r2, #3
 8012b3e:	3d03      	subs	r5, #3
 8012b40:	45ac      	cmp	ip, r5
 8012b42:	bf38      	it	cc
 8012b44:	2200      	movcc	r2, #0
 8012b46:	4413      	add	r3, r2
 8012b48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012b4c:	b17a      	cbz	r2, 8012b6e <__mdiff+0x106>
 8012b4e:	6107      	str	r7, [r0, #16]
 8012b50:	e7a4      	b.n	8012a9c <__mdiff+0x34>
 8012b52:	f856 8b04 	ldr.w	r8, [r6], #4
 8012b56:	fa11 f288 	uxtah	r2, r1, r8
 8012b5a:	1414      	asrs	r4, r2, #16
 8012b5c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012b60:	b292      	uxth	r2, r2
 8012b62:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012b66:	f84e 2b04 	str.w	r2, [lr], #4
 8012b6a:	1421      	asrs	r1, r4, #16
 8012b6c:	e7e0      	b.n	8012b30 <__mdiff+0xc8>
 8012b6e:	3f01      	subs	r7, #1
 8012b70:	e7ea      	b.n	8012b48 <__mdiff+0xe0>
 8012b72:	bf00      	nop
 8012b74:	0801de7b 	.word	0x0801de7b
 8012b78:	0801de8c 	.word	0x0801de8c

08012b7c <__d2b>:
 8012b7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b80:	460f      	mov	r7, r1
 8012b82:	2101      	movs	r1, #1
 8012b84:	ec59 8b10 	vmov	r8, r9, d0
 8012b88:	4616      	mov	r6, r2
 8012b8a:	f7ff fcd5 	bl	8012538 <_Balloc>
 8012b8e:	4604      	mov	r4, r0
 8012b90:	b930      	cbnz	r0, 8012ba0 <__d2b+0x24>
 8012b92:	4602      	mov	r2, r0
 8012b94:	4b24      	ldr	r3, [pc, #144]	; (8012c28 <__d2b+0xac>)
 8012b96:	4825      	ldr	r0, [pc, #148]	; (8012c2c <__d2b+0xb0>)
 8012b98:	f240 310f 	movw	r1, #783	; 0x30f
 8012b9c:	f7fe fdba 	bl	8011714 <__assert_func>
 8012ba0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ba4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ba8:	bb2d      	cbnz	r5, 8012bf6 <__d2b+0x7a>
 8012baa:	9301      	str	r3, [sp, #4]
 8012bac:	f1b8 0300 	subs.w	r3, r8, #0
 8012bb0:	d026      	beq.n	8012c00 <__d2b+0x84>
 8012bb2:	4668      	mov	r0, sp
 8012bb4:	9300      	str	r3, [sp, #0]
 8012bb6:	f7ff fd87 	bl	80126c8 <__lo0bits>
 8012bba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012bbe:	b1e8      	cbz	r0, 8012bfc <__d2b+0x80>
 8012bc0:	f1c0 0320 	rsb	r3, r0, #32
 8012bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8012bc8:	430b      	orrs	r3, r1
 8012bca:	40c2      	lsrs	r2, r0
 8012bcc:	6163      	str	r3, [r4, #20]
 8012bce:	9201      	str	r2, [sp, #4]
 8012bd0:	9b01      	ldr	r3, [sp, #4]
 8012bd2:	61a3      	str	r3, [r4, #24]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	bf14      	ite	ne
 8012bd8:	2202      	movne	r2, #2
 8012bda:	2201      	moveq	r2, #1
 8012bdc:	6122      	str	r2, [r4, #16]
 8012bde:	b1bd      	cbz	r5, 8012c10 <__d2b+0x94>
 8012be0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012be4:	4405      	add	r5, r0
 8012be6:	603d      	str	r5, [r7, #0]
 8012be8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012bec:	6030      	str	r0, [r6, #0]
 8012bee:	4620      	mov	r0, r4
 8012bf0:	b003      	add	sp, #12
 8012bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012bfa:	e7d6      	b.n	8012baa <__d2b+0x2e>
 8012bfc:	6161      	str	r1, [r4, #20]
 8012bfe:	e7e7      	b.n	8012bd0 <__d2b+0x54>
 8012c00:	a801      	add	r0, sp, #4
 8012c02:	f7ff fd61 	bl	80126c8 <__lo0bits>
 8012c06:	9b01      	ldr	r3, [sp, #4]
 8012c08:	6163      	str	r3, [r4, #20]
 8012c0a:	3020      	adds	r0, #32
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	e7e5      	b.n	8012bdc <__d2b+0x60>
 8012c10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012c14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012c18:	6038      	str	r0, [r7, #0]
 8012c1a:	6918      	ldr	r0, [r3, #16]
 8012c1c:	f7ff fd34 	bl	8012688 <__hi0bits>
 8012c20:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012c24:	e7e2      	b.n	8012bec <__d2b+0x70>
 8012c26:	bf00      	nop
 8012c28:	0801de7b 	.word	0x0801de7b
 8012c2c:	0801de8c 	.word	0x0801de8c

08012c30 <__ssputs_r>:
 8012c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c34:	688e      	ldr	r6, [r1, #8]
 8012c36:	461f      	mov	r7, r3
 8012c38:	42be      	cmp	r6, r7
 8012c3a:	680b      	ldr	r3, [r1, #0]
 8012c3c:	4682      	mov	sl, r0
 8012c3e:	460c      	mov	r4, r1
 8012c40:	4690      	mov	r8, r2
 8012c42:	d82c      	bhi.n	8012c9e <__ssputs_r+0x6e>
 8012c44:	898a      	ldrh	r2, [r1, #12]
 8012c46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012c4a:	d026      	beq.n	8012c9a <__ssputs_r+0x6a>
 8012c4c:	6965      	ldr	r5, [r4, #20]
 8012c4e:	6909      	ldr	r1, [r1, #16]
 8012c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c54:	eba3 0901 	sub.w	r9, r3, r1
 8012c58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c5c:	1c7b      	adds	r3, r7, #1
 8012c5e:	444b      	add	r3, r9
 8012c60:	106d      	asrs	r5, r5, #1
 8012c62:	429d      	cmp	r5, r3
 8012c64:	bf38      	it	cc
 8012c66:	461d      	movcc	r5, r3
 8012c68:	0553      	lsls	r3, r2, #21
 8012c6a:	d527      	bpl.n	8012cbc <__ssputs_r+0x8c>
 8012c6c:	4629      	mov	r1, r5
 8012c6e:	f7ff fbd7 	bl	8012420 <_malloc_r>
 8012c72:	4606      	mov	r6, r0
 8012c74:	b360      	cbz	r0, 8012cd0 <__ssputs_r+0xa0>
 8012c76:	6921      	ldr	r1, [r4, #16]
 8012c78:	464a      	mov	r2, r9
 8012c7a:	f7fe fd3d 	bl	80116f8 <memcpy>
 8012c7e:	89a3      	ldrh	r3, [r4, #12]
 8012c80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c88:	81a3      	strh	r3, [r4, #12]
 8012c8a:	6126      	str	r6, [r4, #16]
 8012c8c:	6165      	str	r5, [r4, #20]
 8012c8e:	444e      	add	r6, r9
 8012c90:	eba5 0509 	sub.w	r5, r5, r9
 8012c94:	6026      	str	r6, [r4, #0]
 8012c96:	60a5      	str	r5, [r4, #8]
 8012c98:	463e      	mov	r6, r7
 8012c9a:	42be      	cmp	r6, r7
 8012c9c:	d900      	bls.n	8012ca0 <__ssputs_r+0x70>
 8012c9e:	463e      	mov	r6, r7
 8012ca0:	6820      	ldr	r0, [r4, #0]
 8012ca2:	4632      	mov	r2, r6
 8012ca4:	4641      	mov	r1, r8
 8012ca6:	f000 f9db 	bl	8013060 <memmove>
 8012caa:	68a3      	ldr	r3, [r4, #8]
 8012cac:	1b9b      	subs	r3, r3, r6
 8012cae:	60a3      	str	r3, [r4, #8]
 8012cb0:	6823      	ldr	r3, [r4, #0]
 8012cb2:	4433      	add	r3, r6
 8012cb4:	6023      	str	r3, [r4, #0]
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cbc:	462a      	mov	r2, r5
 8012cbe:	f000 fa28 	bl	8013112 <_realloc_r>
 8012cc2:	4606      	mov	r6, r0
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	d1e0      	bne.n	8012c8a <__ssputs_r+0x5a>
 8012cc8:	6921      	ldr	r1, [r4, #16]
 8012cca:	4650      	mov	r0, sl
 8012ccc:	f7ff fb34 	bl	8012338 <_free_r>
 8012cd0:	230c      	movs	r3, #12
 8012cd2:	f8ca 3000 	str.w	r3, [sl]
 8012cd6:	89a3      	ldrh	r3, [r4, #12]
 8012cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cdc:	81a3      	strh	r3, [r4, #12]
 8012cde:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce2:	e7e9      	b.n	8012cb8 <__ssputs_r+0x88>

08012ce4 <_svfiprintf_r>:
 8012ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce8:	4698      	mov	r8, r3
 8012cea:	898b      	ldrh	r3, [r1, #12]
 8012cec:	061b      	lsls	r3, r3, #24
 8012cee:	b09d      	sub	sp, #116	; 0x74
 8012cf0:	4607      	mov	r7, r0
 8012cf2:	460d      	mov	r5, r1
 8012cf4:	4614      	mov	r4, r2
 8012cf6:	d50e      	bpl.n	8012d16 <_svfiprintf_r+0x32>
 8012cf8:	690b      	ldr	r3, [r1, #16]
 8012cfa:	b963      	cbnz	r3, 8012d16 <_svfiprintf_r+0x32>
 8012cfc:	2140      	movs	r1, #64	; 0x40
 8012cfe:	f7ff fb8f 	bl	8012420 <_malloc_r>
 8012d02:	6028      	str	r0, [r5, #0]
 8012d04:	6128      	str	r0, [r5, #16]
 8012d06:	b920      	cbnz	r0, 8012d12 <_svfiprintf_r+0x2e>
 8012d08:	230c      	movs	r3, #12
 8012d0a:	603b      	str	r3, [r7, #0]
 8012d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d10:	e0d0      	b.n	8012eb4 <_svfiprintf_r+0x1d0>
 8012d12:	2340      	movs	r3, #64	; 0x40
 8012d14:	616b      	str	r3, [r5, #20]
 8012d16:	2300      	movs	r3, #0
 8012d18:	9309      	str	r3, [sp, #36]	; 0x24
 8012d1a:	2320      	movs	r3, #32
 8012d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d24:	2330      	movs	r3, #48	; 0x30
 8012d26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012ecc <_svfiprintf_r+0x1e8>
 8012d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d2e:	f04f 0901 	mov.w	r9, #1
 8012d32:	4623      	mov	r3, r4
 8012d34:	469a      	mov	sl, r3
 8012d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d3a:	b10a      	cbz	r2, 8012d40 <_svfiprintf_r+0x5c>
 8012d3c:	2a25      	cmp	r2, #37	; 0x25
 8012d3e:	d1f9      	bne.n	8012d34 <_svfiprintf_r+0x50>
 8012d40:	ebba 0b04 	subs.w	fp, sl, r4
 8012d44:	d00b      	beq.n	8012d5e <_svfiprintf_r+0x7a>
 8012d46:	465b      	mov	r3, fp
 8012d48:	4622      	mov	r2, r4
 8012d4a:	4629      	mov	r1, r5
 8012d4c:	4638      	mov	r0, r7
 8012d4e:	f7ff ff6f 	bl	8012c30 <__ssputs_r>
 8012d52:	3001      	adds	r0, #1
 8012d54:	f000 80a9 	beq.w	8012eaa <_svfiprintf_r+0x1c6>
 8012d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d5a:	445a      	add	r2, fp
 8012d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8012d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	f000 80a1 	beq.w	8012eaa <_svfiprintf_r+0x1c6>
 8012d68:	2300      	movs	r3, #0
 8012d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d72:	f10a 0a01 	add.w	sl, sl, #1
 8012d76:	9304      	str	r3, [sp, #16]
 8012d78:	9307      	str	r3, [sp, #28]
 8012d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8012d80:	4654      	mov	r4, sl
 8012d82:	2205      	movs	r2, #5
 8012d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d88:	4850      	ldr	r0, [pc, #320]	; (8012ecc <_svfiprintf_r+0x1e8>)
 8012d8a:	f7ed fb09 	bl	80003a0 <memchr>
 8012d8e:	9a04      	ldr	r2, [sp, #16]
 8012d90:	b9d8      	cbnz	r0, 8012dca <_svfiprintf_r+0xe6>
 8012d92:	06d0      	lsls	r0, r2, #27
 8012d94:	bf44      	itt	mi
 8012d96:	2320      	movmi	r3, #32
 8012d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d9c:	0711      	lsls	r1, r2, #28
 8012d9e:	bf44      	itt	mi
 8012da0:	232b      	movmi	r3, #43	; 0x2b
 8012da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012da6:	f89a 3000 	ldrb.w	r3, [sl]
 8012daa:	2b2a      	cmp	r3, #42	; 0x2a
 8012dac:	d015      	beq.n	8012dda <_svfiprintf_r+0xf6>
 8012dae:	9a07      	ldr	r2, [sp, #28]
 8012db0:	4654      	mov	r4, sl
 8012db2:	2000      	movs	r0, #0
 8012db4:	f04f 0c0a 	mov.w	ip, #10
 8012db8:	4621      	mov	r1, r4
 8012dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dbe:	3b30      	subs	r3, #48	; 0x30
 8012dc0:	2b09      	cmp	r3, #9
 8012dc2:	d94d      	bls.n	8012e60 <_svfiprintf_r+0x17c>
 8012dc4:	b1b0      	cbz	r0, 8012df4 <_svfiprintf_r+0x110>
 8012dc6:	9207      	str	r2, [sp, #28]
 8012dc8:	e014      	b.n	8012df4 <_svfiprintf_r+0x110>
 8012dca:	eba0 0308 	sub.w	r3, r0, r8
 8012dce:	fa09 f303 	lsl.w	r3, r9, r3
 8012dd2:	4313      	orrs	r3, r2
 8012dd4:	9304      	str	r3, [sp, #16]
 8012dd6:	46a2      	mov	sl, r4
 8012dd8:	e7d2      	b.n	8012d80 <_svfiprintf_r+0x9c>
 8012dda:	9b03      	ldr	r3, [sp, #12]
 8012ddc:	1d19      	adds	r1, r3, #4
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	9103      	str	r1, [sp, #12]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	bfbb      	ittet	lt
 8012de6:	425b      	neglt	r3, r3
 8012de8:	f042 0202 	orrlt.w	r2, r2, #2
 8012dec:	9307      	strge	r3, [sp, #28]
 8012dee:	9307      	strlt	r3, [sp, #28]
 8012df0:	bfb8      	it	lt
 8012df2:	9204      	strlt	r2, [sp, #16]
 8012df4:	7823      	ldrb	r3, [r4, #0]
 8012df6:	2b2e      	cmp	r3, #46	; 0x2e
 8012df8:	d10c      	bne.n	8012e14 <_svfiprintf_r+0x130>
 8012dfa:	7863      	ldrb	r3, [r4, #1]
 8012dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8012dfe:	d134      	bne.n	8012e6a <_svfiprintf_r+0x186>
 8012e00:	9b03      	ldr	r3, [sp, #12]
 8012e02:	1d1a      	adds	r2, r3, #4
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	9203      	str	r2, [sp, #12]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	bfb8      	it	lt
 8012e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e10:	3402      	adds	r4, #2
 8012e12:	9305      	str	r3, [sp, #20]
 8012e14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012edc <_svfiprintf_r+0x1f8>
 8012e18:	7821      	ldrb	r1, [r4, #0]
 8012e1a:	2203      	movs	r2, #3
 8012e1c:	4650      	mov	r0, sl
 8012e1e:	f7ed fabf 	bl	80003a0 <memchr>
 8012e22:	b138      	cbz	r0, 8012e34 <_svfiprintf_r+0x150>
 8012e24:	9b04      	ldr	r3, [sp, #16]
 8012e26:	eba0 000a 	sub.w	r0, r0, sl
 8012e2a:	2240      	movs	r2, #64	; 0x40
 8012e2c:	4082      	lsls	r2, r0
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	3401      	adds	r4, #1
 8012e32:	9304      	str	r3, [sp, #16]
 8012e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e38:	4825      	ldr	r0, [pc, #148]	; (8012ed0 <_svfiprintf_r+0x1ec>)
 8012e3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e3e:	2206      	movs	r2, #6
 8012e40:	f7ed faae 	bl	80003a0 <memchr>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d038      	beq.n	8012eba <_svfiprintf_r+0x1d6>
 8012e48:	4b22      	ldr	r3, [pc, #136]	; (8012ed4 <_svfiprintf_r+0x1f0>)
 8012e4a:	bb1b      	cbnz	r3, 8012e94 <_svfiprintf_r+0x1b0>
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	3307      	adds	r3, #7
 8012e50:	f023 0307 	bic.w	r3, r3, #7
 8012e54:	3308      	adds	r3, #8
 8012e56:	9303      	str	r3, [sp, #12]
 8012e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e5a:	4433      	add	r3, r6
 8012e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e5e:	e768      	b.n	8012d32 <_svfiprintf_r+0x4e>
 8012e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e64:	460c      	mov	r4, r1
 8012e66:	2001      	movs	r0, #1
 8012e68:	e7a6      	b.n	8012db8 <_svfiprintf_r+0xd4>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	3401      	adds	r4, #1
 8012e6e:	9305      	str	r3, [sp, #20]
 8012e70:	4619      	mov	r1, r3
 8012e72:	f04f 0c0a 	mov.w	ip, #10
 8012e76:	4620      	mov	r0, r4
 8012e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e7c:	3a30      	subs	r2, #48	; 0x30
 8012e7e:	2a09      	cmp	r2, #9
 8012e80:	d903      	bls.n	8012e8a <_svfiprintf_r+0x1a6>
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d0c6      	beq.n	8012e14 <_svfiprintf_r+0x130>
 8012e86:	9105      	str	r1, [sp, #20]
 8012e88:	e7c4      	b.n	8012e14 <_svfiprintf_r+0x130>
 8012e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e8e:	4604      	mov	r4, r0
 8012e90:	2301      	movs	r3, #1
 8012e92:	e7f0      	b.n	8012e76 <_svfiprintf_r+0x192>
 8012e94:	ab03      	add	r3, sp, #12
 8012e96:	9300      	str	r3, [sp, #0]
 8012e98:	462a      	mov	r2, r5
 8012e9a:	4b0f      	ldr	r3, [pc, #60]	; (8012ed8 <_svfiprintf_r+0x1f4>)
 8012e9c:	a904      	add	r1, sp, #16
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	f7fd fe7a 	bl	8010b98 <_printf_float>
 8012ea4:	1c42      	adds	r2, r0, #1
 8012ea6:	4606      	mov	r6, r0
 8012ea8:	d1d6      	bne.n	8012e58 <_svfiprintf_r+0x174>
 8012eaa:	89ab      	ldrh	r3, [r5, #12]
 8012eac:	065b      	lsls	r3, r3, #25
 8012eae:	f53f af2d 	bmi.w	8012d0c <_svfiprintf_r+0x28>
 8012eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012eb4:	b01d      	add	sp, #116	; 0x74
 8012eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eba:	ab03      	add	r3, sp, #12
 8012ebc:	9300      	str	r3, [sp, #0]
 8012ebe:	462a      	mov	r2, r5
 8012ec0:	4b05      	ldr	r3, [pc, #20]	; (8012ed8 <_svfiprintf_r+0x1f4>)
 8012ec2:	a904      	add	r1, sp, #16
 8012ec4:	4638      	mov	r0, r7
 8012ec6:	f7fe f8ef 	bl	80110a8 <_printf_i>
 8012eca:	e7eb      	b.n	8012ea4 <_svfiprintf_r+0x1c0>
 8012ecc:	0801dfe4 	.word	0x0801dfe4
 8012ed0:	0801dfee 	.word	0x0801dfee
 8012ed4:	08010b99 	.word	0x08010b99
 8012ed8:	08012c31 	.word	0x08012c31
 8012edc:	0801dfea 	.word	0x0801dfea

08012ee0 <__sflush_r>:
 8012ee0:	898a      	ldrh	r2, [r1, #12]
 8012ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	0710      	lsls	r0, r2, #28
 8012eea:	460c      	mov	r4, r1
 8012eec:	d458      	bmi.n	8012fa0 <__sflush_r+0xc0>
 8012eee:	684b      	ldr	r3, [r1, #4]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	dc05      	bgt.n	8012f00 <__sflush_r+0x20>
 8012ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	dc02      	bgt.n	8012f00 <__sflush_r+0x20>
 8012efa:	2000      	movs	r0, #0
 8012efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f02:	2e00      	cmp	r6, #0
 8012f04:	d0f9      	beq.n	8012efa <__sflush_r+0x1a>
 8012f06:	2300      	movs	r3, #0
 8012f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f0c:	682f      	ldr	r7, [r5, #0]
 8012f0e:	6a21      	ldr	r1, [r4, #32]
 8012f10:	602b      	str	r3, [r5, #0]
 8012f12:	d032      	beq.n	8012f7a <__sflush_r+0x9a>
 8012f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f16:	89a3      	ldrh	r3, [r4, #12]
 8012f18:	075a      	lsls	r2, r3, #29
 8012f1a:	d505      	bpl.n	8012f28 <__sflush_r+0x48>
 8012f1c:	6863      	ldr	r3, [r4, #4]
 8012f1e:	1ac0      	subs	r0, r0, r3
 8012f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f22:	b10b      	cbz	r3, 8012f28 <__sflush_r+0x48>
 8012f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f26:	1ac0      	subs	r0, r0, r3
 8012f28:	2300      	movs	r3, #0
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f2e:	6a21      	ldr	r1, [r4, #32]
 8012f30:	4628      	mov	r0, r5
 8012f32:	47b0      	blx	r6
 8012f34:	1c43      	adds	r3, r0, #1
 8012f36:	89a3      	ldrh	r3, [r4, #12]
 8012f38:	d106      	bne.n	8012f48 <__sflush_r+0x68>
 8012f3a:	6829      	ldr	r1, [r5, #0]
 8012f3c:	291d      	cmp	r1, #29
 8012f3e:	d82b      	bhi.n	8012f98 <__sflush_r+0xb8>
 8012f40:	4a29      	ldr	r2, [pc, #164]	; (8012fe8 <__sflush_r+0x108>)
 8012f42:	410a      	asrs	r2, r1
 8012f44:	07d6      	lsls	r6, r2, #31
 8012f46:	d427      	bmi.n	8012f98 <__sflush_r+0xb8>
 8012f48:	2200      	movs	r2, #0
 8012f4a:	6062      	str	r2, [r4, #4]
 8012f4c:	04d9      	lsls	r1, r3, #19
 8012f4e:	6922      	ldr	r2, [r4, #16]
 8012f50:	6022      	str	r2, [r4, #0]
 8012f52:	d504      	bpl.n	8012f5e <__sflush_r+0x7e>
 8012f54:	1c42      	adds	r2, r0, #1
 8012f56:	d101      	bne.n	8012f5c <__sflush_r+0x7c>
 8012f58:	682b      	ldr	r3, [r5, #0]
 8012f5a:	b903      	cbnz	r3, 8012f5e <__sflush_r+0x7e>
 8012f5c:	6560      	str	r0, [r4, #84]	; 0x54
 8012f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f60:	602f      	str	r7, [r5, #0]
 8012f62:	2900      	cmp	r1, #0
 8012f64:	d0c9      	beq.n	8012efa <__sflush_r+0x1a>
 8012f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f6a:	4299      	cmp	r1, r3
 8012f6c:	d002      	beq.n	8012f74 <__sflush_r+0x94>
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f7ff f9e2 	bl	8012338 <_free_r>
 8012f74:	2000      	movs	r0, #0
 8012f76:	6360      	str	r0, [r4, #52]	; 0x34
 8012f78:	e7c0      	b.n	8012efc <__sflush_r+0x1c>
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	47b0      	blx	r6
 8012f80:	1c41      	adds	r1, r0, #1
 8012f82:	d1c8      	bne.n	8012f16 <__sflush_r+0x36>
 8012f84:	682b      	ldr	r3, [r5, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d0c5      	beq.n	8012f16 <__sflush_r+0x36>
 8012f8a:	2b1d      	cmp	r3, #29
 8012f8c:	d001      	beq.n	8012f92 <__sflush_r+0xb2>
 8012f8e:	2b16      	cmp	r3, #22
 8012f90:	d101      	bne.n	8012f96 <__sflush_r+0xb6>
 8012f92:	602f      	str	r7, [r5, #0]
 8012f94:	e7b1      	b.n	8012efa <__sflush_r+0x1a>
 8012f96:	89a3      	ldrh	r3, [r4, #12]
 8012f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f9c:	81a3      	strh	r3, [r4, #12]
 8012f9e:	e7ad      	b.n	8012efc <__sflush_r+0x1c>
 8012fa0:	690f      	ldr	r7, [r1, #16]
 8012fa2:	2f00      	cmp	r7, #0
 8012fa4:	d0a9      	beq.n	8012efa <__sflush_r+0x1a>
 8012fa6:	0793      	lsls	r3, r2, #30
 8012fa8:	680e      	ldr	r6, [r1, #0]
 8012faa:	bf08      	it	eq
 8012fac:	694b      	ldreq	r3, [r1, #20]
 8012fae:	600f      	str	r7, [r1, #0]
 8012fb0:	bf18      	it	ne
 8012fb2:	2300      	movne	r3, #0
 8012fb4:	eba6 0807 	sub.w	r8, r6, r7
 8012fb8:	608b      	str	r3, [r1, #8]
 8012fba:	f1b8 0f00 	cmp.w	r8, #0
 8012fbe:	dd9c      	ble.n	8012efa <__sflush_r+0x1a>
 8012fc0:	6a21      	ldr	r1, [r4, #32]
 8012fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012fc4:	4643      	mov	r3, r8
 8012fc6:	463a      	mov	r2, r7
 8012fc8:	4628      	mov	r0, r5
 8012fca:	47b0      	blx	r6
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	dc06      	bgt.n	8012fde <__sflush_r+0xfe>
 8012fd0:	89a3      	ldrh	r3, [r4, #12]
 8012fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fd6:	81a3      	strh	r3, [r4, #12]
 8012fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fdc:	e78e      	b.n	8012efc <__sflush_r+0x1c>
 8012fde:	4407      	add	r7, r0
 8012fe0:	eba8 0800 	sub.w	r8, r8, r0
 8012fe4:	e7e9      	b.n	8012fba <__sflush_r+0xda>
 8012fe6:	bf00      	nop
 8012fe8:	dfbffffe 	.word	0xdfbffffe

08012fec <_fflush_r>:
 8012fec:	b538      	push	{r3, r4, r5, lr}
 8012fee:	690b      	ldr	r3, [r1, #16]
 8012ff0:	4605      	mov	r5, r0
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	b913      	cbnz	r3, 8012ffc <_fflush_r+0x10>
 8012ff6:	2500      	movs	r5, #0
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	bd38      	pop	{r3, r4, r5, pc}
 8012ffc:	b118      	cbz	r0, 8013006 <_fflush_r+0x1a>
 8012ffe:	6a03      	ldr	r3, [r0, #32]
 8013000:	b90b      	cbnz	r3, 8013006 <_fflush_r+0x1a>
 8013002:	f7fe f9ed 	bl	80113e0 <__sinit>
 8013006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d0f3      	beq.n	8012ff6 <_fflush_r+0xa>
 801300e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013010:	07d0      	lsls	r0, r2, #31
 8013012:	d404      	bmi.n	801301e <_fflush_r+0x32>
 8013014:	0599      	lsls	r1, r3, #22
 8013016:	d402      	bmi.n	801301e <_fflush_r+0x32>
 8013018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801301a:	f7fe fb63 	bl	80116e4 <__retarget_lock_acquire_recursive>
 801301e:	4628      	mov	r0, r5
 8013020:	4621      	mov	r1, r4
 8013022:	f7ff ff5d 	bl	8012ee0 <__sflush_r>
 8013026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013028:	07da      	lsls	r2, r3, #31
 801302a:	4605      	mov	r5, r0
 801302c:	d4e4      	bmi.n	8012ff8 <_fflush_r+0xc>
 801302e:	89a3      	ldrh	r3, [r4, #12]
 8013030:	059b      	lsls	r3, r3, #22
 8013032:	d4e1      	bmi.n	8012ff8 <_fflush_r+0xc>
 8013034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013036:	f7fe fb56 	bl	80116e6 <__retarget_lock_release_recursive>
 801303a:	e7dd      	b.n	8012ff8 <_fflush_r+0xc>

0801303c <fiprintf>:
 801303c:	b40e      	push	{r1, r2, r3}
 801303e:	b503      	push	{r0, r1, lr}
 8013040:	4601      	mov	r1, r0
 8013042:	ab03      	add	r3, sp, #12
 8013044:	4805      	ldr	r0, [pc, #20]	; (801305c <fiprintf+0x20>)
 8013046:	f853 2b04 	ldr.w	r2, [r3], #4
 801304a:	6800      	ldr	r0, [r0, #0]
 801304c:	9301      	str	r3, [sp, #4]
 801304e:	f000 f8c5 	bl	80131dc <_vfiprintf_r>
 8013052:	b002      	add	sp, #8
 8013054:	f85d eb04 	ldr.w	lr, [sp], #4
 8013058:	b003      	add	sp, #12
 801305a:	4770      	bx	lr
 801305c:	2400046c 	.word	0x2400046c

08013060 <memmove>:
 8013060:	4288      	cmp	r0, r1
 8013062:	b510      	push	{r4, lr}
 8013064:	eb01 0402 	add.w	r4, r1, r2
 8013068:	d902      	bls.n	8013070 <memmove+0x10>
 801306a:	4284      	cmp	r4, r0
 801306c:	4623      	mov	r3, r4
 801306e:	d807      	bhi.n	8013080 <memmove+0x20>
 8013070:	1e43      	subs	r3, r0, #1
 8013072:	42a1      	cmp	r1, r4
 8013074:	d008      	beq.n	8013088 <memmove+0x28>
 8013076:	f811 2b01 	ldrb.w	r2, [r1], #1
 801307a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801307e:	e7f8      	b.n	8013072 <memmove+0x12>
 8013080:	4402      	add	r2, r0
 8013082:	4601      	mov	r1, r0
 8013084:	428a      	cmp	r2, r1
 8013086:	d100      	bne.n	801308a <memmove+0x2a>
 8013088:	bd10      	pop	{r4, pc}
 801308a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801308e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013092:	e7f7      	b.n	8013084 <memmove+0x24>

08013094 <_sbrk_r>:
 8013094:	b538      	push	{r3, r4, r5, lr}
 8013096:	4d06      	ldr	r5, [pc, #24]	; (80130b0 <_sbrk_r+0x1c>)
 8013098:	2300      	movs	r3, #0
 801309a:	4604      	mov	r4, r0
 801309c:	4608      	mov	r0, r1
 801309e:	602b      	str	r3, [r5, #0]
 80130a0:	f7f3 fc22 	bl	80068e8 <_sbrk>
 80130a4:	1c43      	adds	r3, r0, #1
 80130a6:	d102      	bne.n	80130ae <_sbrk_r+0x1a>
 80130a8:	682b      	ldr	r3, [r5, #0]
 80130aa:	b103      	cbz	r3, 80130ae <_sbrk_r+0x1a>
 80130ac:	6023      	str	r3, [r4, #0]
 80130ae:	bd38      	pop	{r3, r4, r5, pc}
 80130b0:	2400d708 	.word	0x2400d708

080130b4 <abort>:
 80130b4:	b508      	push	{r3, lr}
 80130b6:	2006      	movs	r0, #6
 80130b8:	f000 fa68 	bl	801358c <raise>
 80130bc:	2001      	movs	r0, #1
 80130be:	f7f3 fbe3 	bl	8006888 <_exit>

080130c2 <_calloc_r>:
 80130c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130c4:	fba1 2402 	umull	r2, r4, r1, r2
 80130c8:	b94c      	cbnz	r4, 80130de <_calloc_r+0x1c>
 80130ca:	4611      	mov	r1, r2
 80130cc:	9201      	str	r2, [sp, #4]
 80130ce:	f7ff f9a7 	bl	8012420 <_malloc_r>
 80130d2:	9a01      	ldr	r2, [sp, #4]
 80130d4:	4605      	mov	r5, r0
 80130d6:	b930      	cbnz	r0, 80130e6 <_calloc_r+0x24>
 80130d8:	4628      	mov	r0, r5
 80130da:	b003      	add	sp, #12
 80130dc:	bd30      	pop	{r4, r5, pc}
 80130de:	220c      	movs	r2, #12
 80130e0:	6002      	str	r2, [r0, #0]
 80130e2:	2500      	movs	r5, #0
 80130e4:	e7f8      	b.n	80130d8 <_calloc_r+0x16>
 80130e6:	4621      	mov	r1, r4
 80130e8:	f7fe fa13 	bl	8011512 <memset>
 80130ec:	e7f4      	b.n	80130d8 <_calloc_r+0x16>

080130ee <__ascii_mbtowc>:
 80130ee:	b082      	sub	sp, #8
 80130f0:	b901      	cbnz	r1, 80130f4 <__ascii_mbtowc+0x6>
 80130f2:	a901      	add	r1, sp, #4
 80130f4:	b142      	cbz	r2, 8013108 <__ascii_mbtowc+0x1a>
 80130f6:	b14b      	cbz	r3, 801310c <__ascii_mbtowc+0x1e>
 80130f8:	7813      	ldrb	r3, [r2, #0]
 80130fa:	600b      	str	r3, [r1, #0]
 80130fc:	7812      	ldrb	r2, [r2, #0]
 80130fe:	1e10      	subs	r0, r2, #0
 8013100:	bf18      	it	ne
 8013102:	2001      	movne	r0, #1
 8013104:	b002      	add	sp, #8
 8013106:	4770      	bx	lr
 8013108:	4610      	mov	r0, r2
 801310a:	e7fb      	b.n	8013104 <__ascii_mbtowc+0x16>
 801310c:	f06f 0001 	mvn.w	r0, #1
 8013110:	e7f8      	b.n	8013104 <__ascii_mbtowc+0x16>

08013112 <_realloc_r>:
 8013112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013116:	4680      	mov	r8, r0
 8013118:	4614      	mov	r4, r2
 801311a:	460e      	mov	r6, r1
 801311c:	b921      	cbnz	r1, 8013128 <_realloc_r+0x16>
 801311e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013122:	4611      	mov	r1, r2
 8013124:	f7ff b97c 	b.w	8012420 <_malloc_r>
 8013128:	b92a      	cbnz	r2, 8013136 <_realloc_r+0x24>
 801312a:	f7ff f905 	bl	8012338 <_free_r>
 801312e:	4625      	mov	r5, r4
 8013130:	4628      	mov	r0, r5
 8013132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013136:	f000 fa45 	bl	80135c4 <_malloc_usable_size_r>
 801313a:	4284      	cmp	r4, r0
 801313c:	4607      	mov	r7, r0
 801313e:	d802      	bhi.n	8013146 <_realloc_r+0x34>
 8013140:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013144:	d812      	bhi.n	801316c <_realloc_r+0x5a>
 8013146:	4621      	mov	r1, r4
 8013148:	4640      	mov	r0, r8
 801314a:	f7ff f969 	bl	8012420 <_malloc_r>
 801314e:	4605      	mov	r5, r0
 8013150:	2800      	cmp	r0, #0
 8013152:	d0ed      	beq.n	8013130 <_realloc_r+0x1e>
 8013154:	42bc      	cmp	r4, r7
 8013156:	4622      	mov	r2, r4
 8013158:	4631      	mov	r1, r6
 801315a:	bf28      	it	cs
 801315c:	463a      	movcs	r2, r7
 801315e:	f7fe facb 	bl	80116f8 <memcpy>
 8013162:	4631      	mov	r1, r6
 8013164:	4640      	mov	r0, r8
 8013166:	f7ff f8e7 	bl	8012338 <_free_r>
 801316a:	e7e1      	b.n	8013130 <_realloc_r+0x1e>
 801316c:	4635      	mov	r5, r6
 801316e:	e7df      	b.n	8013130 <_realloc_r+0x1e>

08013170 <__ascii_wctomb>:
 8013170:	b149      	cbz	r1, 8013186 <__ascii_wctomb+0x16>
 8013172:	2aff      	cmp	r2, #255	; 0xff
 8013174:	bf85      	ittet	hi
 8013176:	238a      	movhi	r3, #138	; 0x8a
 8013178:	6003      	strhi	r3, [r0, #0]
 801317a:	700a      	strbls	r2, [r1, #0]
 801317c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013180:	bf98      	it	ls
 8013182:	2001      	movls	r0, #1
 8013184:	4770      	bx	lr
 8013186:	4608      	mov	r0, r1
 8013188:	4770      	bx	lr

0801318a <__sfputc_r>:
 801318a:	6893      	ldr	r3, [r2, #8]
 801318c:	3b01      	subs	r3, #1
 801318e:	2b00      	cmp	r3, #0
 8013190:	b410      	push	{r4}
 8013192:	6093      	str	r3, [r2, #8]
 8013194:	da08      	bge.n	80131a8 <__sfputc_r+0x1e>
 8013196:	6994      	ldr	r4, [r2, #24]
 8013198:	42a3      	cmp	r3, r4
 801319a:	db01      	blt.n	80131a0 <__sfputc_r+0x16>
 801319c:	290a      	cmp	r1, #10
 801319e:	d103      	bne.n	80131a8 <__sfputc_r+0x1e>
 80131a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131a4:	f000 b934 	b.w	8013410 <__swbuf_r>
 80131a8:	6813      	ldr	r3, [r2, #0]
 80131aa:	1c58      	adds	r0, r3, #1
 80131ac:	6010      	str	r0, [r2, #0]
 80131ae:	7019      	strb	r1, [r3, #0]
 80131b0:	4608      	mov	r0, r1
 80131b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131b6:	4770      	bx	lr

080131b8 <__sfputs_r>:
 80131b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ba:	4606      	mov	r6, r0
 80131bc:	460f      	mov	r7, r1
 80131be:	4614      	mov	r4, r2
 80131c0:	18d5      	adds	r5, r2, r3
 80131c2:	42ac      	cmp	r4, r5
 80131c4:	d101      	bne.n	80131ca <__sfputs_r+0x12>
 80131c6:	2000      	movs	r0, #0
 80131c8:	e007      	b.n	80131da <__sfputs_r+0x22>
 80131ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ce:	463a      	mov	r2, r7
 80131d0:	4630      	mov	r0, r6
 80131d2:	f7ff ffda 	bl	801318a <__sfputc_r>
 80131d6:	1c43      	adds	r3, r0, #1
 80131d8:	d1f3      	bne.n	80131c2 <__sfputs_r+0xa>
 80131da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080131dc <_vfiprintf_r>:
 80131dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e0:	460d      	mov	r5, r1
 80131e2:	b09d      	sub	sp, #116	; 0x74
 80131e4:	4614      	mov	r4, r2
 80131e6:	4698      	mov	r8, r3
 80131e8:	4606      	mov	r6, r0
 80131ea:	b118      	cbz	r0, 80131f4 <_vfiprintf_r+0x18>
 80131ec:	6a03      	ldr	r3, [r0, #32]
 80131ee:	b90b      	cbnz	r3, 80131f4 <_vfiprintf_r+0x18>
 80131f0:	f7fe f8f6 	bl	80113e0 <__sinit>
 80131f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131f6:	07d9      	lsls	r1, r3, #31
 80131f8:	d405      	bmi.n	8013206 <_vfiprintf_r+0x2a>
 80131fa:	89ab      	ldrh	r3, [r5, #12]
 80131fc:	059a      	lsls	r2, r3, #22
 80131fe:	d402      	bmi.n	8013206 <_vfiprintf_r+0x2a>
 8013200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013202:	f7fe fa6f 	bl	80116e4 <__retarget_lock_acquire_recursive>
 8013206:	89ab      	ldrh	r3, [r5, #12]
 8013208:	071b      	lsls	r3, r3, #28
 801320a:	d501      	bpl.n	8013210 <_vfiprintf_r+0x34>
 801320c:	692b      	ldr	r3, [r5, #16]
 801320e:	b99b      	cbnz	r3, 8013238 <_vfiprintf_r+0x5c>
 8013210:	4629      	mov	r1, r5
 8013212:	4630      	mov	r0, r6
 8013214:	f000 f93a 	bl	801348c <__swsetup_r>
 8013218:	b170      	cbz	r0, 8013238 <_vfiprintf_r+0x5c>
 801321a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801321c:	07dc      	lsls	r4, r3, #31
 801321e:	d504      	bpl.n	801322a <_vfiprintf_r+0x4e>
 8013220:	f04f 30ff 	mov.w	r0, #4294967295
 8013224:	b01d      	add	sp, #116	; 0x74
 8013226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801322a:	89ab      	ldrh	r3, [r5, #12]
 801322c:	0598      	lsls	r0, r3, #22
 801322e:	d4f7      	bmi.n	8013220 <_vfiprintf_r+0x44>
 8013230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013232:	f7fe fa58 	bl	80116e6 <__retarget_lock_release_recursive>
 8013236:	e7f3      	b.n	8013220 <_vfiprintf_r+0x44>
 8013238:	2300      	movs	r3, #0
 801323a:	9309      	str	r3, [sp, #36]	; 0x24
 801323c:	2320      	movs	r3, #32
 801323e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013242:	f8cd 800c 	str.w	r8, [sp, #12]
 8013246:	2330      	movs	r3, #48	; 0x30
 8013248:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80133fc <_vfiprintf_r+0x220>
 801324c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013250:	f04f 0901 	mov.w	r9, #1
 8013254:	4623      	mov	r3, r4
 8013256:	469a      	mov	sl, r3
 8013258:	f813 2b01 	ldrb.w	r2, [r3], #1
 801325c:	b10a      	cbz	r2, 8013262 <_vfiprintf_r+0x86>
 801325e:	2a25      	cmp	r2, #37	; 0x25
 8013260:	d1f9      	bne.n	8013256 <_vfiprintf_r+0x7a>
 8013262:	ebba 0b04 	subs.w	fp, sl, r4
 8013266:	d00b      	beq.n	8013280 <_vfiprintf_r+0xa4>
 8013268:	465b      	mov	r3, fp
 801326a:	4622      	mov	r2, r4
 801326c:	4629      	mov	r1, r5
 801326e:	4630      	mov	r0, r6
 8013270:	f7ff ffa2 	bl	80131b8 <__sfputs_r>
 8013274:	3001      	adds	r0, #1
 8013276:	f000 80a9 	beq.w	80133cc <_vfiprintf_r+0x1f0>
 801327a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801327c:	445a      	add	r2, fp
 801327e:	9209      	str	r2, [sp, #36]	; 0x24
 8013280:	f89a 3000 	ldrb.w	r3, [sl]
 8013284:	2b00      	cmp	r3, #0
 8013286:	f000 80a1 	beq.w	80133cc <_vfiprintf_r+0x1f0>
 801328a:	2300      	movs	r3, #0
 801328c:	f04f 32ff 	mov.w	r2, #4294967295
 8013290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013294:	f10a 0a01 	add.w	sl, sl, #1
 8013298:	9304      	str	r3, [sp, #16]
 801329a:	9307      	str	r3, [sp, #28]
 801329c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80132a0:	931a      	str	r3, [sp, #104]	; 0x68
 80132a2:	4654      	mov	r4, sl
 80132a4:	2205      	movs	r2, #5
 80132a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132aa:	4854      	ldr	r0, [pc, #336]	; (80133fc <_vfiprintf_r+0x220>)
 80132ac:	f7ed f878 	bl	80003a0 <memchr>
 80132b0:	9a04      	ldr	r2, [sp, #16]
 80132b2:	b9d8      	cbnz	r0, 80132ec <_vfiprintf_r+0x110>
 80132b4:	06d1      	lsls	r1, r2, #27
 80132b6:	bf44      	itt	mi
 80132b8:	2320      	movmi	r3, #32
 80132ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132be:	0713      	lsls	r3, r2, #28
 80132c0:	bf44      	itt	mi
 80132c2:	232b      	movmi	r3, #43	; 0x2b
 80132c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132c8:	f89a 3000 	ldrb.w	r3, [sl]
 80132cc:	2b2a      	cmp	r3, #42	; 0x2a
 80132ce:	d015      	beq.n	80132fc <_vfiprintf_r+0x120>
 80132d0:	9a07      	ldr	r2, [sp, #28]
 80132d2:	4654      	mov	r4, sl
 80132d4:	2000      	movs	r0, #0
 80132d6:	f04f 0c0a 	mov.w	ip, #10
 80132da:	4621      	mov	r1, r4
 80132dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132e0:	3b30      	subs	r3, #48	; 0x30
 80132e2:	2b09      	cmp	r3, #9
 80132e4:	d94d      	bls.n	8013382 <_vfiprintf_r+0x1a6>
 80132e6:	b1b0      	cbz	r0, 8013316 <_vfiprintf_r+0x13a>
 80132e8:	9207      	str	r2, [sp, #28]
 80132ea:	e014      	b.n	8013316 <_vfiprintf_r+0x13a>
 80132ec:	eba0 0308 	sub.w	r3, r0, r8
 80132f0:	fa09 f303 	lsl.w	r3, r9, r3
 80132f4:	4313      	orrs	r3, r2
 80132f6:	9304      	str	r3, [sp, #16]
 80132f8:	46a2      	mov	sl, r4
 80132fa:	e7d2      	b.n	80132a2 <_vfiprintf_r+0xc6>
 80132fc:	9b03      	ldr	r3, [sp, #12]
 80132fe:	1d19      	adds	r1, r3, #4
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	9103      	str	r1, [sp, #12]
 8013304:	2b00      	cmp	r3, #0
 8013306:	bfbb      	ittet	lt
 8013308:	425b      	neglt	r3, r3
 801330a:	f042 0202 	orrlt.w	r2, r2, #2
 801330e:	9307      	strge	r3, [sp, #28]
 8013310:	9307      	strlt	r3, [sp, #28]
 8013312:	bfb8      	it	lt
 8013314:	9204      	strlt	r2, [sp, #16]
 8013316:	7823      	ldrb	r3, [r4, #0]
 8013318:	2b2e      	cmp	r3, #46	; 0x2e
 801331a:	d10c      	bne.n	8013336 <_vfiprintf_r+0x15a>
 801331c:	7863      	ldrb	r3, [r4, #1]
 801331e:	2b2a      	cmp	r3, #42	; 0x2a
 8013320:	d134      	bne.n	801338c <_vfiprintf_r+0x1b0>
 8013322:	9b03      	ldr	r3, [sp, #12]
 8013324:	1d1a      	adds	r2, r3, #4
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	9203      	str	r2, [sp, #12]
 801332a:	2b00      	cmp	r3, #0
 801332c:	bfb8      	it	lt
 801332e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013332:	3402      	adds	r4, #2
 8013334:	9305      	str	r3, [sp, #20]
 8013336:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801340c <_vfiprintf_r+0x230>
 801333a:	7821      	ldrb	r1, [r4, #0]
 801333c:	2203      	movs	r2, #3
 801333e:	4650      	mov	r0, sl
 8013340:	f7ed f82e 	bl	80003a0 <memchr>
 8013344:	b138      	cbz	r0, 8013356 <_vfiprintf_r+0x17a>
 8013346:	9b04      	ldr	r3, [sp, #16]
 8013348:	eba0 000a 	sub.w	r0, r0, sl
 801334c:	2240      	movs	r2, #64	; 0x40
 801334e:	4082      	lsls	r2, r0
 8013350:	4313      	orrs	r3, r2
 8013352:	3401      	adds	r4, #1
 8013354:	9304      	str	r3, [sp, #16]
 8013356:	f814 1b01 	ldrb.w	r1, [r4], #1
 801335a:	4829      	ldr	r0, [pc, #164]	; (8013400 <_vfiprintf_r+0x224>)
 801335c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013360:	2206      	movs	r2, #6
 8013362:	f7ed f81d 	bl	80003a0 <memchr>
 8013366:	2800      	cmp	r0, #0
 8013368:	d03f      	beq.n	80133ea <_vfiprintf_r+0x20e>
 801336a:	4b26      	ldr	r3, [pc, #152]	; (8013404 <_vfiprintf_r+0x228>)
 801336c:	bb1b      	cbnz	r3, 80133b6 <_vfiprintf_r+0x1da>
 801336e:	9b03      	ldr	r3, [sp, #12]
 8013370:	3307      	adds	r3, #7
 8013372:	f023 0307 	bic.w	r3, r3, #7
 8013376:	3308      	adds	r3, #8
 8013378:	9303      	str	r3, [sp, #12]
 801337a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801337c:	443b      	add	r3, r7
 801337e:	9309      	str	r3, [sp, #36]	; 0x24
 8013380:	e768      	b.n	8013254 <_vfiprintf_r+0x78>
 8013382:	fb0c 3202 	mla	r2, ip, r2, r3
 8013386:	460c      	mov	r4, r1
 8013388:	2001      	movs	r0, #1
 801338a:	e7a6      	b.n	80132da <_vfiprintf_r+0xfe>
 801338c:	2300      	movs	r3, #0
 801338e:	3401      	adds	r4, #1
 8013390:	9305      	str	r3, [sp, #20]
 8013392:	4619      	mov	r1, r3
 8013394:	f04f 0c0a 	mov.w	ip, #10
 8013398:	4620      	mov	r0, r4
 801339a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801339e:	3a30      	subs	r2, #48	; 0x30
 80133a0:	2a09      	cmp	r2, #9
 80133a2:	d903      	bls.n	80133ac <_vfiprintf_r+0x1d0>
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d0c6      	beq.n	8013336 <_vfiprintf_r+0x15a>
 80133a8:	9105      	str	r1, [sp, #20]
 80133aa:	e7c4      	b.n	8013336 <_vfiprintf_r+0x15a>
 80133ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80133b0:	4604      	mov	r4, r0
 80133b2:	2301      	movs	r3, #1
 80133b4:	e7f0      	b.n	8013398 <_vfiprintf_r+0x1bc>
 80133b6:	ab03      	add	r3, sp, #12
 80133b8:	9300      	str	r3, [sp, #0]
 80133ba:	462a      	mov	r2, r5
 80133bc:	4b12      	ldr	r3, [pc, #72]	; (8013408 <_vfiprintf_r+0x22c>)
 80133be:	a904      	add	r1, sp, #16
 80133c0:	4630      	mov	r0, r6
 80133c2:	f7fd fbe9 	bl	8010b98 <_printf_float>
 80133c6:	4607      	mov	r7, r0
 80133c8:	1c78      	adds	r0, r7, #1
 80133ca:	d1d6      	bne.n	801337a <_vfiprintf_r+0x19e>
 80133cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133ce:	07d9      	lsls	r1, r3, #31
 80133d0:	d405      	bmi.n	80133de <_vfiprintf_r+0x202>
 80133d2:	89ab      	ldrh	r3, [r5, #12]
 80133d4:	059a      	lsls	r2, r3, #22
 80133d6:	d402      	bmi.n	80133de <_vfiprintf_r+0x202>
 80133d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133da:	f7fe f984 	bl	80116e6 <__retarget_lock_release_recursive>
 80133de:	89ab      	ldrh	r3, [r5, #12]
 80133e0:	065b      	lsls	r3, r3, #25
 80133e2:	f53f af1d 	bmi.w	8013220 <_vfiprintf_r+0x44>
 80133e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133e8:	e71c      	b.n	8013224 <_vfiprintf_r+0x48>
 80133ea:	ab03      	add	r3, sp, #12
 80133ec:	9300      	str	r3, [sp, #0]
 80133ee:	462a      	mov	r2, r5
 80133f0:	4b05      	ldr	r3, [pc, #20]	; (8013408 <_vfiprintf_r+0x22c>)
 80133f2:	a904      	add	r1, sp, #16
 80133f4:	4630      	mov	r0, r6
 80133f6:	f7fd fe57 	bl	80110a8 <_printf_i>
 80133fa:	e7e4      	b.n	80133c6 <_vfiprintf_r+0x1ea>
 80133fc:	0801dfe4 	.word	0x0801dfe4
 8013400:	0801dfee 	.word	0x0801dfee
 8013404:	08010b99 	.word	0x08010b99
 8013408:	080131b9 	.word	0x080131b9
 801340c:	0801dfea 	.word	0x0801dfea

08013410 <__swbuf_r>:
 8013410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013412:	460e      	mov	r6, r1
 8013414:	4614      	mov	r4, r2
 8013416:	4605      	mov	r5, r0
 8013418:	b118      	cbz	r0, 8013422 <__swbuf_r+0x12>
 801341a:	6a03      	ldr	r3, [r0, #32]
 801341c:	b90b      	cbnz	r3, 8013422 <__swbuf_r+0x12>
 801341e:	f7fd ffdf 	bl	80113e0 <__sinit>
 8013422:	69a3      	ldr	r3, [r4, #24]
 8013424:	60a3      	str	r3, [r4, #8]
 8013426:	89a3      	ldrh	r3, [r4, #12]
 8013428:	071a      	lsls	r2, r3, #28
 801342a:	d525      	bpl.n	8013478 <__swbuf_r+0x68>
 801342c:	6923      	ldr	r3, [r4, #16]
 801342e:	b31b      	cbz	r3, 8013478 <__swbuf_r+0x68>
 8013430:	6823      	ldr	r3, [r4, #0]
 8013432:	6922      	ldr	r2, [r4, #16]
 8013434:	1a98      	subs	r0, r3, r2
 8013436:	6963      	ldr	r3, [r4, #20]
 8013438:	b2f6      	uxtb	r6, r6
 801343a:	4283      	cmp	r3, r0
 801343c:	4637      	mov	r7, r6
 801343e:	dc04      	bgt.n	801344a <__swbuf_r+0x3a>
 8013440:	4621      	mov	r1, r4
 8013442:	4628      	mov	r0, r5
 8013444:	f7ff fdd2 	bl	8012fec <_fflush_r>
 8013448:	b9e0      	cbnz	r0, 8013484 <__swbuf_r+0x74>
 801344a:	68a3      	ldr	r3, [r4, #8]
 801344c:	3b01      	subs	r3, #1
 801344e:	60a3      	str	r3, [r4, #8]
 8013450:	6823      	ldr	r3, [r4, #0]
 8013452:	1c5a      	adds	r2, r3, #1
 8013454:	6022      	str	r2, [r4, #0]
 8013456:	701e      	strb	r6, [r3, #0]
 8013458:	6962      	ldr	r2, [r4, #20]
 801345a:	1c43      	adds	r3, r0, #1
 801345c:	429a      	cmp	r2, r3
 801345e:	d004      	beq.n	801346a <__swbuf_r+0x5a>
 8013460:	89a3      	ldrh	r3, [r4, #12]
 8013462:	07db      	lsls	r3, r3, #31
 8013464:	d506      	bpl.n	8013474 <__swbuf_r+0x64>
 8013466:	2e0a      	cmp	r6, #10
 8013468:	d104      	bne.n	8013474 <__swbuf_r+0x64>
 801346a:	4621      	mov	r1, r4
 801346c:	4628      	mov	r0, r5
 801346e:	f7ff fdbd 	bl	8012fec <_fflush_r>
 8013472:	b938      	cbnz	r0, 8013484 <__swbuf_r+0x74>
 8013474:	4638      	mov	r0, r7
 8013476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013478:	4621      	mov	r1, r4
 801347a:	4628      	mov	r0, r5
 801347c:	f000 f806 	bl	801348c <__swsetup_r>
 8013480:	2800      	cmp	r0, #0
 8013482:	d0d5      	beq.n	8013430 <__swbuf_r+0x20>
 8013484:	f04f 37ff 	mov.w	r7, #4294967295
 8013488:	e7f4      	b.n	8013474 <__swbuf_r+0x64>
	...

0801348c <__swsetup_r>:
 801348c:	b538      	push	{r3, r4, r5, lr}
 801348e:	4b2a      	ldr	r3, [pc, #168]	; (8013538 <__swsetup_r+0xac>)
 8013490:	4605      	mov	r5, r0
 8013492:	6818      	ldr	r0, [r3, #0]
 8013494:	460c      	mov	r4, r1
 8013496:	b118      	cbz	r0, 80134a0 <__swsetup_r+0x14>
 8013498:	6a03      	ldr	r3, [r0, #32]
 801349a:	b90b      	cbnz	r3, 80134a0 <__swsetup_r+0x14>
 801349c:	f7fd ffa0 	bl	80113e0 <__sinit>
 80134a0:	89a3      	ldrh	r3, [r4, #12]
 80134a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134a6:	0718      	lsls	r0, r3, #28
 80134a8:	d422      	bmi.n	80134f0 <__swsetup_r+0x64>
 80134aa:	06d9      	lsls	r1, r3, #27
 80134ac:	d407      	bmi.n	80134be <__swsetup_r+0x32>
 80134ae:	2309      	movs	r3, #9
 80134b0:	602b      	str	r3, [r5, #0]
 80134b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80134b6:	81a3      	strh	r3, [r4, #12]
 80134b8:	f04f 30ff 	mov.w	r0, #4294967295
 80134bc:	e034      	b.n	8013528 <__swsetup_r+0x9c>
 80134be:	0758      	lsls	r0, r3, #29
 80134c0:	d512      	bpl.n	80134e8 <__swsetup_r+0x5c>
 80134c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134c4:	b141      	cbz	r1, 80134d8 <__swsetup_r+0x4c>
 80134c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134ca:	4299      	cmp	r1, r3
 80134cc:	d002      	beq.n	80134d4 <__swsetup_r+0x48>
 80134ce:	4628      	mov	r0, r5
 80134d0:	f7fe ff32 	bl	8012338 <_free_r>
 80134d4:	2300      	movs	r3, #0
 80134d6:	6363      	str	r3, [r4, #52]	; 0x34
 80134d8:	89a3      	ldrh	r3, [r4, #12]
 80134da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80134de:	81a3      	strh	r3, [r4, #12]
 80134e0:	2300      	movs	r3, #0
 80134e2:	6063      	str	r3, [r4, #4]
 80134e4:	6923      	ldr	r3, [r4, #16]
 80134e6:	6023      	str	r3, [r4, #0]
 80134e8:	89a3      	ldrh	r3, [r4, #12]
 80134ea:	f043 0308 	orr.w	r3, r3, #8
 80134ee:	81a3      	strh	r3, [r4, #12]
 80134f0:	6923      	ldr	r3, [r4, #16]
 80134f2:	b94b      	cbnz	r3, 8013508 <__swsetup_r+0x7c>
 80134f4:	89a3      	ldrh	r3, [r4, #12]
 80134f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80134fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134fe:	d003      	beq.n	8013508 <__swsetup_r+0x7c>
 8013500:	4621      	mov	r1, r4
 8013502:	4628      	mov	r0, r5
 8013504:	f000 f88c 	bl	8013620 <__smakebuf_r>
 8013508:	89a0      	ldrh	r0, [r4, #12]
 801350a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801350e:	f010 0301 	ands.w	r3, r0, #1
 8013512:	d00a      	beq.n	801352a <__swsetup_r+0x9e>
 8013514:	2300      	movs	r3, #0
 8013516:	60a3      	str	r3, [r4, #8]
 8013518:	6963      	ldr	r3, [r4, #20]
 801351a:	425b      	negs	r3, r3
 801351c:	61a3      	str	r3, [r4, #24]
 801351e:	6923      	ldr	r3, [r4, #16]
 8013520:	b943      	cbnz	r3, 8013534 <__swsetup_r+0xa8>
 8013522:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013526:	d1c4      	bne.n	80134b2 <__swsetup_r+0x26>
 8013528:	bd38      	pop	{r3, r4, r5, pc}
 801352a:	0781      	lsls	r1, r0, #30
 801352c:	bf58      	it	pl
 801352e:	6963      	ldrpl	r3, [r4, #20]
 8013530:	60a3      	str	r3, [r4, #8]
 8013532:	e7f4      	b.n	801351e <__swsetup_r+0x92>
 8013534:	2000      	movs	r0, #0
 8013536:	e7f7      	b.n	8013528 <__swsetup_r+0x9c>
 8013538:	2400046c 	.word	0x2400046c

0801353c <_raise_r>:
 801353c:	291f      	cmp	r1, #31
 801353e:	b538      	push	{r3, r4, r5, lr}
 8013540:	4604      	mov	r4, r0
 8013542:	460d      	mov	r5, r1
 8013544:	d904      	bls.n	8013550 <_raise_r+0x14>
 8013546:	2316      	movs	r3, #22
 8013548:	6003      	str	r3, [r0, #0]
 801354a:	f04f 30ff 	mov.w	r0, #4294967295
 801354e:	bd38      	pop	{r3, r4, r5, pc}
 8013550:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013552:	b112      	cbz	r2, 801355a <_raise_r+0x1e>
 8013554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013558:	b94b      	cbnz	r3, 801356e <_raise_r+0x32>
 801355a:	4620      	mov	r0, r4
 801355c:	f000 f830 	bl	80135c0 <_getpid_r>
 8013560:	462a      	mov	r2, r5
 8013562:	4601      	mov	r1, r0
 8013564:	4620      	mov	r0, r4
 8013566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801356a:	f000 b817 	b.w	801359c <_kill_r>
 801356e:	2b01      	cmp	r3, #1
 8013570:	d00a      	beq.n	8013588 <_raise_r+0x4c>
 8013572:	1c59      	adds	r1, r3, #1
 8013574:	d103      	bne.n	801357e <_raise_r+0x42>
 8013576:	2316      	movs	r3, #22
 8013578:	6003      	str	r3, [r0, #0]
 801357a:	2001      	movs	r0, #1
 801357c:	e7e7      	b.n	801354e <_raise_r+0x12>
 801357e:	2400      	movs	r4, #0
 8013580:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013584:	4628      	mov	r0, r5
 8013586:	4798      	blx	r3
 8013588:	2000      	movs	r0, #0
 801358a:	e7e0      	b.n	801354e <_raise_r+0x12>

0801358c <raise>:
 801358c:	4b02      	ldr	r3, [pc, #8]	; (8013598 <raise+0xc>)
 801358e:	4601      	mov	r1, r0
 8013590:	6818      	ldr	r0, [r3, #0]
 8013592:	f7ff bfd3 	b.w	801353c <_raise_r>
 8013596:	bf00      	nop
 8013598:	2400046c 	.word	0x2400046c

0801359c <_kill_r>:
 801359c:	b538      	push	{r3, r4, r5, lr}
 801359e:	4d07      	ldr	r5, [pc, #28]	; (80135bc <_kill_r+0x20>)
 80135a0:	2300      	movs	r3, #0
 80135a2:	4604      	mov	r4, r0
 80135a4:	4608      	mov	r0, r1
 80135a6:	4611      	mov	r1, r2
 80135a8:	602b      	str	r3, [r5, #0]
 80135aa:	f7f3 f963 	bl	8006874 <_kill>
 80135ae:	1c43      	adds	r3, r0, #1
 80135b0:	d102      	bne.n	80135b8 <_kill_r+0x1c>
 80135b2:	682b      	ldr	r3, [r5, #0]
 80135b4:	b103      	cbz	r3, 80135b8 <_kill_r+0x1c>
 80135b6:	6023      	str	r3, [r4, #0]
 80135b8:	bd38      	pop	{r3, r4, r5, pc}
 80135ba:	bf00      	nop
 80135bc:	2400d708 	.word	0x2400d708

080135c0 <_getpid_r>:
 80135c0:	f7f3 b956 	b.w	8006870 <_getpid>

080135c4 <_malloc_usable_size_r>:
 80135c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135c8:	1f18      	subs	r0, r3, #4
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	bfbc      	itt	lt
 80135ce:	580b      	ldrlt	r3, [r1, r0]
 80135d0:	18c0      	addlt	r0, r0, r3
 80135d2:	4770      	bx	lr

080135d4 <__swhatbuf_r>:
 80135d4:	b570      	push	{r4, r5, r6, lr}
 80135d6:	460c      	mov	r4, r1
 80135d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135dc:	2900      	cmp	r1, #0
 80135de:	b096      	sub	sp, #88	; 0x58
 80135e0:	4615      	mov	r5, r2
 80135e2:	461e      	mov	r6, r3
 80135e4:	da0d      	bge.n	8013602 <__swhatbuf_r+0x2e>
 80135e6:	89a3      	ldrh	r3, [r4, #12]
 80135e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80135ec:	f04f 0100 	mov.w	r1, #0
 80135f0:	bf0c      	ite	eq
 80135f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80135f6:	2340      	movne	r3, #64	; 0x40
 80135f8:	2000      	movs	r0, #0
 80135fa:	6031      	str	r1, [r6, #0]
 80135fc:	602b      	str	r3, [r5, #0]
 80135fe:	b016      	add	sp, #88	; 0x58
 8013600:	bd70      	pop	{r4, r5, r6, pc}
 8013602:	466a      	mov	r2, sp
 8013604:	f000 f848 	bl	8013698 <_fstat_r>
 8013608:	2800      	cmp	r0, #0
 801360a:	dbec      	blt.n	80135e6 <__swhatbuf_r+0x12>
 801360c:	9901      	ldr	r1, [sp, #4]
 801360e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013612:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013616:	4259      	negs	r1, r3
 8013618:	4159      	adcs	r1, r3
 801361a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801361e:	e7eb      	b.n	80135f8 <__swhatbuf_r+0x24>

08013620 <__smakebuf_r>:
 8013620:	898b      	ldrh	r3, [r1, #12]
 8013622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013624:	079d      	lsls	r5, r3, #30
 8013626:	4606      	mov	r6, r0
 8013628:	460c      	mov	r4, r1
 801362a:	d507      	bpl.n	801363c <__smakebuf_r+0x1c>
 801362c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013630:	6023      	str	r3, [r4, #0]
 8013632:	6123      	str	r3, [r4, #16]
 8013634:	2301      	movs	r3, #1
 8013636:	6163      	str	r3, [r4, #20]
 8013638:	b002      	add	sp, #8
 801363a:	bd70      	pop	{r4, r5, r6, pc}
 801363c:	ab01      	add	r3, sp, #4
 801363e:	466a      	mov	r2, sp
 8013640:	f7ff ffc8 	bl	80135d4 <__swhatbuf_r>
 8013644:	9900      	ldr	r1, [sp, #0]
 8013646:	4605      	mov	r5, r0
 8013648:	4630      	mov	r0, r6
 801364a:	f7fe fee9 	bl	8012420 <_malloc_r>
 801364e:	b948      	cbnz	r0, 8013664 <__smakebuf_r+0x44>
 8013650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013654:	059a      	lsls	r2, r3, #22
 8013656:	d4ef      	bmi.n	8013638 <__smakebuf_r+0x18>
 8013658:	f023 0303 	bic.w	r3, r3, #3
 801365c:	f043 0302 	orr.w	r3, r3, #2
 8013660:	81a3      	strh	r3, [r4, #12]
 8013662:	e7e3      	b.n	801362c <__smakebuf_r+0xc>
 8013664:	89a3      	ldrh	r3, [r4, #12]
 8013666:	6020      	str	r0, [r4, #0]
 8013668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801366c:	81a3      	strh	r3, [r4, #12]
 801366e:	9b00      	ldr	r3, [sp, #0]
 8013670:	6163      	str	r3, [r4, #20]
 8013672:	9b01      	ldr	r3, [sp, #4]
 8013674:	6120      	str	r0, [r4, #16]
 8013676:	b15b      	cbz	r3, 8013690 <__smakebuf_r+0x70>
 8013678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801367c:	4630      	mov	r0, r6
 801367e:	f000 f81d 	bl	80136bc <_isatty_r>
 8013682:	b128      	cbz	r0, 8013690 <__smakebuf_r+0x70>
 8013684:	89a3      	ldrh	r3, [r4, #12]
 8013686:	f023 0303 	bic.w	r3, r3, #3
 801368a:	f043 0301 	orr.w	r3, r3, #1
 801368e:	81a3      	strh	r3, [r4, #12]
 8013690:	89a3      	ldrh	r3, [r4, #12]
 8013692:	431d      	orrs	r5, r3
 8013694:	81a5      	strh	r5, [r4, #12]
 8013696:	e7cf      	b.n	8013638 <__smakebuf_r+0x18>

08013698 <_fstat_r>:
 8013698:	b538      	push	{r3, r4, r5, lr}
 801369a:	4d07      	ldr	r5, [pc, #28]	; (80136b8 <_fstat_r+0x20>)
 801369c:	2300      	movs	r3, #0
 801369e:	4604      	mov	r4, r0
 80136a0:	4608      	mov	r0, r1
 80136a2:	4611      	mov	r1, r2
 80136a4:	602b      	str	r3, [r5, #0]
 80136a6:	f7f3 f915 	bl	80068d4 <_fstat>
 80136aa:	1c43      	adds	r3, r0, #1
 80136ac:	d102      	bne.n	80136b4 <_fstat_r+0x1c>
 80136ae:	682b      	ldr	r3, [r5, #0]
 80136b0:	b103      	cbz	r3, 80136b4 <_fstat_r+0x1c>
 80136b2:	6023      	str	r3, [r4, #0]
 80136b4:	bd38      	pop	{r3, r4, r5, pc}
 80136b6:	bf00      	nop
 80136b8:	2400d708 	.word	0x2400d708

080136bc <_isatty_r>:
 80136bc:	b538      	push	{r3, r4, r5, lr}
 80136be:	4d06      	ldr	r5, [pc, #24]	; (80136d8 <_isatty_r+0x1c>)
 80136c0:	2300      	movs	r3, #0
 80136c2:	4604      	mov	r4, r0
 80136c4:	4608      	mov	r0, r1
 80136c6:	602b      	str	r3, [r5, #0]
 80136c8:	f7f3 f90a 	bl	80068e0 <_isatty>
 80136cc:	1c43      	adds	r3, r0, #1
 80136ce:	d102      	bne.n	80136d6 <_isatty_r+0x1a>
 80136d0:	682b      	ldr	r3, [r5, #0]
 80136d2:	b103      	cbz	r3, 80136d6 <_isatty_r+0x1a>
 80136d4:	6023      	str	r3, [r4, #0]
 80136d6:	bd38      	pop	{r3, r4, r5, pc}
 80136d8:	2400d708 	.word	0x2400d708
 80136dc:	00000000 	.word	0x00000000

080136e0 <log10>:
 80136e0:	b508      	push	{r3, lr}
 80136e2:	ed2d 8b02 	vpush	{d8}
 80136e6:	eeb0 8b40 	vmov.f64	d8, d0
 80136ea:	f000 fad5 	bl	8013c98 <__ieee754_log10>
 80136ee:	eeb4 8b48 	vcmp.f64	d8, d8
 80136f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f6:	d60f      	bvs.n	8013718 <log10+0x38>
 80136f8:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80136fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013700:	d80a      	bhi.n	8013718 <log10+0x38>
 8013702:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801370a:	d108      	bne.n	801371e <log10+0x3e>
 801370c:	f7fd ffc0 	bl	8011690 <__errno>
 8013710:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013738 <log10+0x58>
 8013714:	2322      	movs	r3, #34	; 0x22
 8013716:	6003      	str	r3, [r0, #0]
 8013718:	ecbd 8b02 	vpop	{d8}
 801371c:	bd08      	pop	{r3, pc}
 801371e:	f7fd ffb7 	bl	8011690 <__errno>
 8013722:	ecbd 8b02 	vpop	{d8}
 8013726:	2321      	movs	r3, #33	; 0x21
 8013728:	6003      	str	r3, [r0, #0]
 801372a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801372e:	4804      	ldr	r0, [pc, #16]	; (8013740 <log10+0x60>)
 8013730:	f000 b8a2 	b.w	8013878 <nan>
 8013734:	f3af 8000 	nop.w
 8013738:	00000000 	.word	0x00000000
 801373c:	fff00000 	.word	0xfff00000
 8013740:	0801de15 	.word	0x0801de15
 8013744:	00000000 	.word	0x00000000

08013748 <cos>:
 8013748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801374a:	eeb0 7b40 	vmov.f64	d7, d0
 801374e:	ee17 3a90 	vmov	r3, s15
 8013752:	4a21      	ldr	r2, [pc, #132]	; (80137d8 <cos+0x90>)
 8013754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013758:	4293      	cmp	r3, r2
 801375a:	dc06      	bgt.n	801376a <cos+0x22>
 801375c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80137d0 <cos+0x88>
 8013760:	b005      	add	sp, #20
 8013762:	f85d eb04 	ldr.w	lr, [sp], #4
 8013766:	f000 b9d3 	b.w	8013b10 <__kernel_cos>
 801376a:	4a1c      	ldr	r2, [pc, #112]	; (80137dc <cos+0x94>)
 801376c:	4293      	cmp	r3, r2
 801376e:	dd04      	ble.n	801377a <cos+0x32>
 8013770:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013774:	b005      	add	sp, #20
 8013776:	f85d fb04 	ldr.w	pc, [sp], #4
 801377a:	4668      	mov	r0, sp
 801377c:	f000 fafc 	bl	8013d78 <__ieee754_rem_pio2>
 8013780:	f000 0003 	and.w	r0, r0, #3
 8013784:	2801      	cmp	r0, #1
 8013786:	d009      	beq.n	801379c <cos+0x54>
 8013788:	2802      	cmp	r0, #2
 801378a:	d010      	beq.n	80137ae <cos+0x66>
 801378c:	b9b0      	cbnz	r0, 80137bc <cos+0x74>
 801378e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013792:	ed9d 0b00 	vldr	d0, [sp]
 8013796:	f000 f9bb 	bl	8013b10 <__kernel_cos>
 801379a:	e7eb      	b.n	8013774 <cos+0x2c>
 801379c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80137a0:	ed9d 0b00 	vldr	d0, [sp]
 80137a4:	f000 fa20 	bl	8013be8 <__kernel_sin>
 80137a8:	eeb1 0b40 	vneg.f64	d0, d0
 80137ac:	e7e2      	b.n	8013774 <cos+0x2c>
 80137ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80137b2:	ed9d 0b00 	vldr	d0, [sp]
 80137b6:	f000 f9ab 	bl	8013b10 <__kernel_cos>
 80137ba:	e7f5      	b.n	80137a8 <cos+0x60>
 80137bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80137c0:	ed9d 0b00 	vldr	d0, [sp]
 80137c4:	2001      	movs	r0, #1
 80137c6:	f000 fa0f 	bl	8013be8 <__kernel_sin>
 80137ca:	e7d3      	b.n	8013774 <cos+0x2c>
 80137cc:	f3af 8000 	nop.w
	...
 80137d8:	3fe921fb 	.word	0x3fe921fb
 80137dc:	7fefffff 	.word	0x7fefffff

080137e0 <sin>:
 80137e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137e2:	eeb0 7b40 	vmov.f64	d7, d0
 80137e6:	ee17 3a90 	vmov	r3, s15
 80137ea:	4a21      	ldr	r2, [pc, #132]	; (8013870 <sin+0x90>)
 80137ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137f0:	4293      	cmp	r3, r2
 80137f2:	dc07      	bgt.n	8013804 <sin+0x24>
 80137f4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8013868 <sin+0x88>
 80137f8:	2000      	movs	r0, #0
 80137fa:	b005      	add	sp, #20
 80137fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013800:	f000 b9f2 	b.w	8013be8 <__kernel_sin>
 8013804:	4a1b      	ldr	r2, [pc, #108]	; (8013874 <sin+0x94>)
 8013806:	4293      	cmp	r3, r2
 8013808:	dd04      	ble.n	8013814 <sin+0x34>
 801380a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801380e:	b005      	add	sp, #20
 8013810:	f85d fb04 	ldr.w	pc, [sp], #4
 8013814:	4668      	mov	r0, sp
 8013816:	f000 faaf 	bl	8013d78 <__ieee754_rem_pio2>
 801381a:	f000 0003 	and.w	r0, r0, #3
 801381e:	2801      	cmp	r0, #1
 8013820:	d00a      	beq.n	8013838 <sin+0x58>
 8013822:	2802      	cmp	r0, #2
 8013824:	d00f      	beq.n	8013846 <sin+0x66>
 8013826:	b9c0      	cbnz	r0, 801385a <sin+0x7a>
 8013828:	ed9d 1b02 	vldr	d1, [sp, #8]
 801382c:	ed9d 0b00 	vldr	d0, [sp]
 8013830:	2001      	movs	r0, #1
 8013832:	f000 f9d9 	bl	8013be8 <__kernel_sin>
 8013836:	e7ea      	b.n	801380e <sin+0x2e>
 8013838:	ed9d 1b02 	vldr	d1, [sp, #8]
 801383c:	ed9d 0b00 	vldr	d0, [sp]
 8013840:	f000 f966 	bl	8013b10 <__kernel_cos>
 8013844:	e7e3      	b.n	801380e <sin+0x2e>
 8013846:	ed9d 1b02 	vldr	d1, [sp, #8]
 801384a:	ed9d 0b00 	vldr	d0, [sp]
 801384e:	2001      	movs	r0, #1
 8013850:	f000 f9ca 	bl	8013be8 <__kernel_sin>
 8013854:	eeb1 0b40 	vneg.f64	d0, d0
 8013858:	e7d9      	b.n	801380e <sin+0x2e>
 801385a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801385e:	ed9d 0b00 	vldr	d0, [sp]
 8013862:	f000 f955 	bl	8013b10 <__kernel_cos>
 8013866:	e7f5      	b.n	8013854 <sin+0x74>
	...
 8013870:	3fe921fb 	.word	0x3fe921fb
 8013874:	7fefffff 	.word	0x7fefffff

08013878 <nan>:
 8013878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013880 <nan+0x8>
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop
 8013880:	00000000 	.word	0x00000000
 8013884:	7ff80000 	.word	0x7ff80000

08013888 <exp>:
 8013888:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 801388a:	ee10 3a90 	vmov	r3, s1
 801388e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8013892:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8013896:	18a2      	adds	r2, r4, r2
 8013898:	2a3e      	cmp	r2, #62	; 0x3e
 801389a:	ee10 1a10 	vmov	r1, s0
 801389e:	d922      	bls.n	80138e6 <exp+0x5e>
 80138a0:	2a00      	cmp	r2, #0
 80138a2:	da06      	bge.n	80138b2 <exp+0x2a>
 80138a4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80138a8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80138ac:	b004      	add	sp, #16
 80138ae:	bcf0      	pop	{r4, r5, r6, r7}
 80138b0:	4770      	bx	lr
 80138b2:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 80138b6:	f04f 0000 	mov.w	r0, #0
 80138ba:	d913      	bls.n	80138e4 <exp+0x5c>
 80138bc:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 80138c0:	bf08      	it	eq
 80138c2:	4281      	cmpeq	r1, r0
 80138c4:	f000 80a0 	beq.w	8013a08 <exp+0x180>
 80138c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80138cc:	4294      	cmp	r4, r2
 80138ce:	d0e9      	beq.n	80138a4 <exp+0x1c>
 80138d0:	4283      	cmp	r3, r0
 80138d2:	da03      	bge.n	80138dc <exp+0x54>
 80138d4:	b004      	add	sp, #16
 80138d6:	bcf0      	pop	{r4, r5, r6, r7}
 80138d8:	f000 b8c6 	b.w	8013a68 <__math_uflow>
 80138dc:	b004      	add	sp, #16
 80138de:	bcf0      	pop	{r4, r5, r6, r7}
 80138e0:	f000 b8ca 	b.w	8013a78 <__math_oflow>
 80138e4:	4604      	mov	r4, r0
 80138e6:	4950      	ldr	r1, [pc, #320]	; (8013a28 <exp+0x1a0>)
 80138e8:	ed91 6b02 	vldr	d6, [r1, #8]
 80138ec:	ed91 5b00 	vldr	d5, [r1]
 80138f0:	eeb0 7b46 	vmov.f64	d7, d6
 80138f4:	eea5 7b00 	vfma.f64	d7, d5, d0
 80138f8:	ee17 5a10 	vmov	r5, s14
 80138fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013900:	ed91 6b04 	vldr	d6, [r1, #16]
 8013904:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8013908:	eea6 0b07 	vfma.f64	d0, d6, d7
 801390c:	ed91 6b06 	vldr	d6, [r1, #24]
 8013910:	18d8      	adds	r0, r3, r3
 8013912:	f100 030f 	add.w	r3, r0, #15
 8013916:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801391a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801391e:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8013922:	ee20 7b00 	vmul.f64	d7, d0, d0
 8013926:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801392a:	ed91 4b08 	vldr	d4, [r1, #32]
 801392e:	ee30 6b06 	vadd.f64	d6, d0, d6
 8013932:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8013936:	eea3 4b00 	vfma.f64	d4, d3, d0
 801393a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 801393e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8013942:	ee27 7b07 	vmul.f64	d7, d7, d7
 8013946:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 801394a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801394e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8013952:	eea3 4b00 	vfma.f64	d4, d3, d0
 8013956:	2600      	movs	r6, #0
 8013958:	19f2      	adds	r2, r6, r7
 801395a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801395e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8013962:	2c00      	cmp	r4, #0
 8013964:	d14b      	bne.n	80139fe <exp+0x176>
 8013966:	42b5      	cmp	r5, r6
 8013968:	db10      	blt.n	801398c <exp+0x104>
 801396a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801396e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8013a10 <exp+0x188>
 8013972:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8013976:	4610      	mov	r0, r2
 8013978:	ec41 0b10 	vmov	d0, r0, r1
 801397c:	eea6 0b00 	vfma.f64	d0, d6, d0
 8013980:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013984:	b004      	add	sp, #16
 8013986:	bcf0      	pop	{r4, r5, r6, r7}
 8013988:	f000 b8ae 	b.w	8013ae8 <__math_check_oflow>
 801398c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013990:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8013994:	4610      	mov	r0, r2
 8013996:	ec41 0b17 	vmov	d7, r0, r1
 801399a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801399e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80139a2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80139a6:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80139aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ae:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013a18 <exp+0x190>
 80139b2:	d51e      	bpl.n	80139f2 <exp+0x16a>
 80139b4:	ee35 3b04 	vadd.f64	d3, d5, d4
 80139b8:	ee37 7b45 	vsub.f64	d7, d7, d5
 80139bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80139c0:	ee34 6b43 	vsub.f64	d6, d4, d3
 80139c4:	ee36 6b05 	vadd.f64	d6, d6, d5
 80139c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80139cc:	ee36 6b03 	vadd.f64	d6, d6, d3
 80139d0:	ee36 5b44 	vsub.f64	d5, d6, d4
 80139d4:	eeb5 5b40 	vcmp.f64	d5, #0.0
 80139d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139dc:	d101      	bne.n	80139e2 <exp+0x15a>
 80139de:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8013a20 <exp+0x198>
 80139e2:	ed8d 0b00 	vstr	d0, [sp]
 80139e6:	ed9d 7b00 	vldr	d7, [sp]
 80139ea:	ee27 7b00 	vmul.f64	d7, d7, d0
 80139ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80139f2:	ee25 0b00 	vmul.f64	d0, d5, d0
 80139f6:	b004      	add	sp, #16
 80139f8:	bcf0      	pop	{r4, r5, r6, r7}
 80139fa:	f000 b86c 	b.w	8013ad6 <__math_check_uflow>
 80139fe:	ec43 2b10 	vmov	d0, r2, r3
 8013a02:	eea6 0b00 	vfma.f64	d0, d6, d0
 8013a06:	e751      	b.n	80138ac <exp+0x24>
 8013a08:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8013a20 <exp+0x198>
 8013a0c:	e74e      	b.n	80138ac <exp+0x24>
 8013a0e:	bf00      	nop
 8013a10:	00000000 	.word	0x00000000
 8013a14:	7f000000 	.word	0x7f000000
 8013a18:	00000000 	.word	0x00000000
 8013a1c:	00100000 	.word	0x00100000
	...
 8013a28:	0801e000 	.word	0x0801e000

08013a2c <with_errno>:
 8013a2c:	b513      	push	{r0, r1, r4, lr}
 8013a2e:	4604      	mov	r4, r0
 8013a30:	ed8d 0b00 	vstr	d0, [sp]
 8013a34:	f7fd fe2c 	bl	8011690 <__errno>
 8013a38:	ed9d 0b00 	vldr	d0, [sp]
 8013a3c:	6004      	str	r4, [r0, #0]
 8013a3e:	b002      	add	sp, #8
 8013a40:	bd10      	pop	{r4, pc}

08013a42 <xflow>:
 8013a42:	b082      	sub	sp, #8
 8013a44:	b158      	cbz	r0, 8013a5e <xflow+0x1c>
 8013a46:	eeb1 7b40 	vneg.f64	d7, d0
 8013a4a:	ed8d 7b00 	vstr	d7, [sp]
 8013a4e:	ed9d 7b00 	vldr	d7, [sp]
 8013a52:	2022      	movs	r0, #34	; 0x22
 8013a54:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013a58:	b002      	add	sp, #8
 8013a5a:	f7ff bfe7 	b.w	8013a2c <with_errno>
 8013a5e:	eeb0 7b40 	vmov.f64	d7, d0
 8013a62:	e7f2      	b.n	8013a4a <xflow+0x8>
 8013a64:	0000      	movs	r0, r0
	...

08013a68 <__math_uflow>:
 8013a68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013a70 <__math_uflow+0x8>
 8013a6c:	f7ff bfe9 	b.w	8013a42 <xflow>
 8013a70:	00000000 	.word	0x00000000
 8013a74:	10000000 	.word	0x10000000

08013a78 <__math_oflow>:
 8013a78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013a80 <__math_oflow+0x8>
 8013a7c:	f7ff bfe1 	b.w	8013a42 <xflow>
 8013a80:	00000000 	.word	0x00000000
 8013a84:	70000000 	.word	0x70000000

08013a88 <__math_divzero>:
 8013a88:	b082      	sub	sp, #8
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013a90:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8013a94:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8013a98:	ed8d 7b00 	vstr	d7, [sp]
 8013a9c:	ed9d 0b00 	vldr	d0, [sp]
 8013aa0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8013ab0 <__math_divzero+0x28>
 8013aa4:	2022      	movs	r0, #34	; 0x22
 8013aa6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013aaa:	b002      	add	sp, #8
 8013aac:	f7ff bfbe 	b.w	8013a2c <with_errno>
	...

08013ab8 <__math_invalid>:
 8013ab8:	eeb0 7b40 	vmov.f64	d7, d0
 8013abc:	eeb4 7b47 	vcmp.f64	d7, d7
 8013ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013ac8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013acc:	d602      	bvs.n	8013ad4 <__math_invalid+0x1c>
 8013ace:	2021      	movs	r0, #33	; 0x21
 8013ad0:	f7ff bfac 	b.w	8013a2c <with_errno>
 8013ad4:	4770      	bx	lr

08013ad6 <__math_check_uflow>:
 8013ad6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ade:	d102      	bne.n	8013ae6 <__math_check_uflow+0x10>
 8013ae0:	2022      	movs	r0, #34	; 0x22
 8013ae2:	f7ff bfa3 	b.w	8013a2c <with_errno>
 8013ae6:	4770      	bx	lr

08013ae8 <__math_check_oflow>:
 8013ae8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8013b08 <__math_check_oflow+0x20>
 8013aec:	eeb0 7bc0 	vabs.f64	d7, d0
 8013af0:	eeb4 7b46 	vcmp.f64	d7, d6
 8013af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af8:	dd02      	ble.n	8013b00 <__math_check_oflow+0x18>
 8013afa:	2022      	movs	r0, #34	; 0x22
 8013afc:	f7ff bf96 	b.w	8013a2c <with_errno>
 8013b00:	4770      	bx	lr
 8013b02:	bf00      	nop
 8013b04:	f3af 8000 	nop.w
 8013b08:	ffffffff 	.word	0xffffffff
 8013b0c:	7fefffff 	.word	0x7fefffff

08013b10 <__kernel_cos>:
 8013b10:	ee10 1a90 	vmov	r1, s1
 8013b14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013b18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013b1c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8013b20:	da05      	bge.n	8013b2e <__kernel_cos+0x1e>
 8013b22:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8013b26:	ee17 3a90 	vmov	r3, s15
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d03d      	beq.n	8013baa <__kernel_cos+0x9a>
 8013b2e:	ee20 5b00 	vmul.f64	d5, d0, d0
 8013b32:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8013b36:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8013bb0 <__kernel_cos+0xa0>
 8013b3a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8013bb8 <__kernel_cos+0xa8>
 8013b3e:	eea5 4b07 	vfma.f64	d4, d5, d7
 8013b42:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013bc0 <__kernel_cos+0xb0>
 8013b46:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013b4a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8013bc8 <__kernel_cos+0xb8>
 8013b4e:	eea7 4b05 	vfma.f64	d4, d7, d5
 8013b52:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013bd0 <__kernel_cos+0xc0>
 8013b56:	4b22      	ldr	r3, [pc, #136]	; (8013be0 <__kernel_cos+0xd0>)
 8013b58:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013b5c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8013bd8 <__kernel_cos+0xc8>
 8013b60:	4299      	cmp	r1, r3
 8013b62:	eea7 4b05 	vfma.f64	d4, d7, d5
 8013b66:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013b6a:	ee24 4b05 	vmul.f64	d4, d4, d5
 8013b6e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013b72:	eea5 1b04 	vfma.f64	d1, d5, d4
 8013b76:	dc04      	bgt.n	8013b82 <__kernel_cos+0x72>
 8013b78:	ee37 7b41 	vsub.f64	d7, d7, d1
 8013b7c:	ee36 0b47 	vsub.f64	d0, d6, d7
 8013b80:	4770      	bx	lr
 8013b82:	4b18      	ldr	r3, [pc, #96]	; (8013be4 <__kernel_cos+0xd4>)
 8013b84:	4299      	cmp	r1, r3
 8013b86:	dc0d      	bgt.n	8013ba4 <__kernel_cos+0x94>
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8013b8e:	ec43 2b15 	vmov	d5, r2, r3
 8013b92:	ee36 0b45 	vsub.f64	d0, d6, d5
 8013b96:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013b9a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8013b9e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013ba2:	4770      	bx	lr
 8013ba4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8013ba8:	e7f3      	b.n	8013b92 <__kernel_cos+0x82>
 8013baa:	eeb0 0b46 	vmov.f64	d0, d6
 8013bae:	4770      	bx	lr
 8013bb0:	be8838d4 	.word	0xbe8838d4
 8013bb4:	bda8fae9 	.word	0xbda8fae9
 8013bb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8013bbc:	3e21ee9e 	.word	0x3e21ee9e
 8013bc0:	809c52ad 	.word	0x809c52ad
 8013bc4:	be927e4f 	.word	0xbe927e4f
 8013bc8:	19cb1590 	.word	0x19cb1590
 8013bcc:	3efa01a0 	.word	0x3efa01a0
 8013bd0:	16c15177 	.word	0x16c15177
 8013bd4:	bf56c16c 	.word	0xbf56c16c
 8013bd8:	5555554c 	.word	0x5555554c
 8013bdc:	3fa55555 	.word	0x3fa55555
 8013be0:	3fd33332 	.word	0x3fd33332
 8013be4:	3fe90000 	.word	0x3fe90000

08013be8 <__kernel_sin>:
 8013be8:	ee10 3a90 	vmov	r3, s1
 8013bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013bf0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013bf4:	da04      	bge.n	8013c00 <__kernel_sin+0x18>
 8013bf6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8013bfa:	ee17 3a90 	vmov	r3, s15
 8013bfe:	b35b      	cbz	r3, 8013c58 <__kernel_sin+0x70>
 8013c00:	ee20 6b00 	vmul.f64	d6, d0, d0
 8013c04:	ee20 5b06 	vmul.f64	d5, d0, d6
 8013c08:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8013c60 <__kernel_sin+0x78>
 8013c0c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013c68 <__kernel_sin+0x80>
 8013c10:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013c14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013c70 <__kernel_sin+0x88>
 8013c18:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013c1c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013c78 <__kernel_sin+0x90>
 8013c20:	eea7 4b06 	vfma.f64	d4, d7, d6
 8013c24:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013c80 <__kernel_sin+0x98>
 8013c28:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013c2c:	b930      	cbnz	r0, 8013c3c <__kernel_sin+0x54>
 8013c2e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013c88 <__kernel_sin+0xa0>
 8013c32:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013c36:	eea4 0b05 	vfma.f64	d0, d4, d5
 8013c3a:	4770      	bx	lr
 8013c3c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8013c40:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8013c44:	eea1 7b04 	vfma.f64	d7, d1, d4
 8013c48:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8013c4c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8013c90 <__kernel_sin+0xa8>
 8013c50:	eea5 1b07 	vfma.f64	d1, d5, d7
 8013c54:	ee30 0b41 	vsub.f64	d0, d0, d1
 8013c58:	4770      	bx	lr
 8013c5a:	bf00      	nop
 8013c5c:	f3af 8000 	nop.w
 8013c60:	5acfd57c 	.word	0x5acfd57c
 8013c64:	3de5d93a 	.word	0x3de5d93a
 8013c68:	8a2b9ceb 	.word	0x8a2b9ceb
 8013c6c:	be5ae5e6 	.word	0xbe5ae5e6
 8013c70:	57b1fe7d 	.word	0x57b1fe7d
 8013c74:	3ec71de3 	.word	0x3ec71de3
 8013c78:	19c161d5 	.word	0x19c161d5
 8013c7c:	bf2a01a0 	.word	0xbf2a01a0
 8013c80:	1110f8a6 	.word	0x1110f8a6
 8013c84:	3f811111 	.word	0x3f811111
 8013c88:	55555549 	.word	0x55555549
 8013c8c:	bfc55555 	.word	0xbfc55555
 8013c90:	55555549 	.word	0x55555549
 8013c94:	3fc55555 	.word	0x3fc55555

08013c98 <__ieee754_log10>:
 8013c98:	b510      	push	{r4, lr}
 8013c9a:	ee10 3a90 	vmov	r3, s1
 8013c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013ca2:	ed2d 8b02 	vpush	{d8}
 8013ca6:	da21      	bge.n	8013cec <__ieee754_log10+0x54>
 8013ca8:	ee10 1a10 	vmov	r1, s0
 8013cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013cb0:	430a      	orrs	r2, r1
 8013cb2:	d108      	bne.n	8013cc6 <__ieee754_log10+0x2e>
 8013cb4:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8013d40 <__ieee754_log10+0xa8>
 8013cb8:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8013d48 <__ieee754_log10+0xb0>
 8013cbc:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8013cc0:	ecbd 8b02 	vpop	{d8}
 8013cc4:	bd10      	pop	{r4, pc}
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	da02      	bge.n	8013cd0 <__ieee754_log10+0x38>
 8013cca:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013cce:	e7f3      	b.n	8013cb8 <__ieee754_log10+0x20>
 8013cd0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013d50 <__ieee754_log10+0xb8>
 8013cd4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013cd8:	ee10 3a90 	vmov	r3, s1
 8013cdc:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8013ce0:	4923      	ldr	r1, [pc, #140]	; (8013d70 <__ieee754_log10+0xd8>)
 8013ce2:	428b      	cmp	r3, r1
 8013ce4:	dd04      	ble.n	8013cf0 <__ieee754_log10+0x58>
 8013ce6:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013cea:	e7e9      	b.n	8013cc0 <__ieee754_log10+0x28>
 8013cec:	2200      	movs	r2, #0
 8013cee:	e7f7      	b.n	8013ce0 <__ieee754_log10+0x48>
 8013cf0:	1518      	asrs	r0, r3, #20
 8013cf2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8013cf6:	4410      	add	r0, r2
 8013cf8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8013cfc:	f240 34ff 	movw	r4, #1023	; 0x3ff
 8013d00:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8013d04:	ee08 3a10 	vmov	s16, r3
 8013d08:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8013d0c:	ec53 2b10 	vmov	r2, r3, d0
 8013d10:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8013d14:	ec43 2b10 	vmov	d0, r2, r3
 8013d18:	f000 f97e 	bl	8014018 <log>
 8013d1c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013d58 <__ieee754_log10+0xc0>
 8013d20:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013d24:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013d60 <__ieee754_log10+0xc8>
 8013d28:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8013d2c:	eea8 0b07 	vfma.f64	d0, d8, d7
 8013d30:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8013d68 <__ieee754_log10+0xd0>
 8013d34:	eea8 0b07 	vfma.f64	d0, d8, d7
 8013d38:	e7c2      	b.n	8013cc0 <__ieee754_log10+0x28>
 8013d3a:	bf00      	nop
 8013d3c:	f3af 8000 	nop.w
 8013d40:	00000000 	.word	0x00000000
 8013d44:	c3500000 	.word	0xc3500000
	...
 8013d54:	43500000 	.word	0x43500000
 8013d58:	1526e50e 	.word	0x1526e50e
 8013d5c:	3fdbcb7b 	.word	0x3fdbcb7b
 8013d60:	11f12b36 	.word	0x11f12b36
 8013d64:	3d59fef3 	.word	0x3d59fef3
 8013d68:	509f6000 	.word	0x509f6000
 8013d6c:	3fd34413 	.word	0x3fd34413
 8013d70:	7fefffff 	.word	0x7fefffff
 8013d74:	00000000 	.word	0x00000000

08013d78 <__ieee754_rem_pio2>:
 8013d78:	b570      	push	{r4, r5, r6, lr}
 8013d7a:	eeb0 7b40 	vmov.f64	d7, d0
 8013d7e:	ee17 5a90 	vmov	r5, s15
 8013d82:	4b99      	ldr	r3, [pc, #612]	; (8013fe8 <__ieee754_rem_pio2+0x270>)
 8013d84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013d88:	429e      	cmp	r6, r3
 8013d8a:	b088      	sub	sp, #32
 8013d8c:	4604      	mov	r4, r0
 8013d8e:	dc07      	bgt.n	8013da0 <__ieee754_rem_pio2+0x28>
 8013d90:	2200      	movs	r2, #0
 8013d92:	2300      	movs	r3, #0
 8013d94:	ed84 0b00 	vstr	d0, [r4]
 8013d98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	e01b      	b.n	8013dd8 <__ieee754_rem_pio2+0x60>
 8013da0:	4b92      	ldr	r3, [pc, #584]	; (8013fec <__ieee754_rem_pio2+0x274>)
 8013da2:	429e      	cmp	r6, r3
 8013da4:	dc3b      	bgt.n	8013e1e <__ieee754_rem_pio2+0xa6>
 8013da6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8013daa:	2d00      	cmp	r5, #0
 8013dac:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8013fa8 <__ieee754_rem_pio2+0x230>
 8013db0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013db4:	dd19      	ble.n	8013dea <__ieee754_rem_pio2+0x72>
 8013db6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013dba:	429e      	cmp	r6, r3
 8013dbc:	d00e      	beq.n	8013ddc <__ieee754_rem_pio2+0x64>
 8013dbe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8013fb0 <__ieee754_rem_pio2+0x238>
 8013dc2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8013dc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013dca:	ed84 5b00 	vstr	d5, [r4]
 8013dce:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013dd2:	ed84 7b02 	vstr	d7, [r4, #8]
 8013dd6:	2001      	movs	r0, #1
 8013dd8:	b008      	add	sp, #32
 8013dda:	bd70      	pop	{r4, r5, r6, pc}
 8013ddc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8013fb8 <__ieee754_rem_pio2+0x240>
 8013de0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013de4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8013fc0 <__ieee754_rem_pio2+0x248>
 8013de8:	e7eb      	b.n	8013dc2 <__ieee754_rem_pio2+0x4a>
 8013dea:	429e      	cmp	r6, r3
 8013dec:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013df0:	d00e      	beq.n	8013e10 <__ieee754_rem_pio2+0x98>
 8013df2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8013fb0 <__ieee754_rem_pio2+0x238>
 8013df6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8013dfa:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013dfe:	ed84 5b00 	vstr	d5, [r4]
 8013e02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013e06:	f04f 30ff 	mov.w	r0, #4294967295
 8013e0a:	ed84 7b02 	vstr	d7, [r4, #8]
 8013e0e:	e7e3      	b.n	8013dd8 <__ieee754_rem_pio2+0x60>
 8013e10:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013fb8 <__ieee754_rem_pio2+0x240>
 8013e14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013e18:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013fc0 <__ieee754_rem_pio2+0x248>
 8013e1c:	e7eb      	b.n	8013df6 <__ieee754_rem_pio2+0x7e>
 8013e1e:	4b74      	ldr	r3, [pc, #464]	; (8013ff0 <__ieee754_rem_pio2+0x278>)
 8013e20:	429e      	cmp	r6, r3
 8013e22:	dc70      	bgt.n	8013f06 <__ieee754_rem_pio2+0x18e>
 8013e24:	f000 f8ec 	bl	8014000 <fabs>
 8013e28:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013e2c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8013fc8 <__ieee754_rem_pio2+0x250>
 8013e30:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013e34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013e38:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013e3c:	ee17 0a90 	vmov	r0, s15
 8013e40:	eeb1 4b45 	vneg.f64	d4, d5
 8013e44:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8013fa8 <__ieee754_rem_pio2+0x230>
 8013e48:	eea5 0b47 	vfms.f64	d0, d5, d7
 8013e4c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8013fb0 <__ieee754_rem_pio2+0x238>
 8013e50:	281f      	cmp	r0, #31
 8013e52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013e56:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013e5a:	dc08      	bgt.n	8013e6e <__ieee754_rem_pio2+0xf6>
 8013e5c:	4b65      	ldr	r3, [pc, #404]	; (8013ff4 <__ieee754_rem_pio2+0x27c>)
 8013e5e:	1e42      	subs	r2, r0, #1
 8013e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e64:	42b3      	cmp	r3, r6
 8013e66:	d002      	beq.n	8013e6e <__ieee754_rem_pio2+0xf6>
 8013e68:	ed84 6b00 	vstr	d6, [r4]
 8013e6c:	e024      	b.n	8013eb8 <__ieee754_rem_pio2+0x140>
 8013e6e:	ee16 3a90 	vmov	r3, s13
 8013e72:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013e76:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8013e7a:	2b10      	cmp	r3, #16
 8013e7c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013e80:	ddf2      	ble.n	8013e68 <__ieee754_rem_pio2+0xf0>
 8013e82:	eeb0 6b40 	vmov.f64	d6, d0
 8013e86:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8013fb8 <__ieee754_rem_pio2+0x240>
 8013e8a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8013e8e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013e92:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013e96:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8013fc0 <__ieee754_rem_pio2+0x248>
 8013e9a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013e9e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013ea2:	ee13 3a90 	vmov	r3, s7
 8013ea6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013eaa:	1ad3      	subs	r3, r2, r3
 8013eac:	2b31      	cmp	r3, #49	; 0x31
 8013eae:	dc17      	bgt.n	8013ee0 <__ieee754_rem_pio2+0x168>
 8013eb0:	eeb0 0b46 	vmov.f64	d0, d6
 8013eb4:	ed84 3b00 	vstr	d3, [r4]
 8013eb8:	ed94 6b00 	vldr	d6, [r4]
 8013ebc:	2d00      	cmp	r5, #0
 8013ebe:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013ec2:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013ec6:	ed84 0b02 	vstr	d0, [r4, #8]
 8013eca:	da85      	bge.n	8013dd8 <__ieee754_rem_pio2+0x60>
 8013ecc:	eeb1 6b46 	vneg.f64	d6, d6
 8013ed0:	eeb1 0b40 	vneg.f64	d0, d0
 8013ed4:	ed84 6b00 	vstr	d6, [r4]
 8013ed8:	ed84 0b02 	vstr	d0, [r4, #8]
 8013edc:	4240      	negs	r0, r0
 8013ede:	e77b      	b.n	8013dd8 <__ieee754_rem_pio2+0x60>
 8013ee0:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8013fd0 <__ieee754_rem_pio2+0x258>
 8013ee4:	eeb0 0b46 	vmov.f64	d0, d6
 8013ee8:	eea4 0b07 	vfma.f64	d0, d4, d7
 8013eec:	ee36 6b40 	vsub.f64	d6, d6, d0
 8013ef0:	eea4 6b07 	vfma.f64	d6, d4, d7
 8013ef4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8013fd8 <__ieee754_rem_pio2+0x260>
 8013ef8:	eeb0 7b46 	vmov.f64	d7, d6
 8013efc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8013f00:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013f04:	e7b0      	b.n	8013e68 <__ieee754_rem_pio2+0xf0>
 8013f06:	4b3c      	ldr	r3, [pc, #240]	; (8013ff8 <__ieee754_rem_pio2+0x280>)
 8013f08:	429e      	cmp	r6, r3
 8013f0a:	dd06      	ble.n	8013f1a <__ieee754_rem_pio2+0x1a2>
 8013f0c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013f10:	ed80 7b02 	vstr	d7, [r0, #8]
 8013f14:	ed80 7b00 	vstr	d7, [r0]
 8013f18:	e740      	b.n	8013d9c <__ieee754_rem_pio2+0x24>
 8013f1a:	1532      	asrs	r2, r6, #20
 8013f1c:	ee10 0a10 	vmov	r0, s0
 8013f20:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8013f24:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013f28:	ec41 0b17 	vmov	d7, r0, r1
 8013f2c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013f30:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8013fe0 <__ieee754_rem_pio2+0x268>
 8013f34:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013f38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013f3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013f40:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013f44:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013f48:	a808      	add	r0, sp, #32
 8013f4a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013f4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013f52:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013f56:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013f5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013f5e:	2103      	movs	r1, #3
 8013f60:	ed30 7b02 	vldmdb	r0!, {d7}
 8013f64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6c:	460b      	mov	r3, r1
 8013f6e:	f101 31ff 	add.w	r1, r1, #4294967295
 8013f72:	d0f5      	beq.n	8013f60 <__ieee754_rem_pio2+0x1e8>
 8013f74:	4921      	ldr	r1, [pc, #132]	; (8013ffc <__ieee754_rem_pio2+0x284>)
 8013f76:	9101      	str	r1, [sp, #4]
 8013f78:	2102      	movs	r1, #2
 8013f7a:	9100      	str	r1, [sp, #0]
 8013f7c:	a802      	add	r0, sp, #8
 8013f7e:	4621      	mov	r1, r4
 8013f80:	f000 f942 	bl	8014208 <__kernel_rem_pio2>
 8013f84:	2d00      	cmp	r5, #0
 8013f86:	f6bf af27 	bge.w	8013dd8 <__ieee754_rem_pio2+0x60>
 8013f8a:	ed94 7b00 	vldr	d7, [r4]
 8013f8e:	eeb1 7b47 	vneg.f64	d7, d7
 8013f92:	ed84 7b00 	vstr	d7, [r4]
 8013f96:	ed94 7b02 	vldr	d7, [r4, #8]
 8013f9a:	eeb1 7b47 	vneg.f64	d7, d7
 8013f9e:	ed84 7b02 	vstr	d7, [r4, #8]
 8013fa2:	e79b      	b.n	8013edc <__ieee754_rem_pio2+0x164>
 8013fa4:	f3af 8000 	nop.w
 8013fa8:	54400000 	.word	0x54400000
 8013fac:	3ff921fb 	.word	0x3ff921fb
 8013fb0:	1a626331 	.word	0x1a626331
 8013fb4:	3dd0b461 	.word	0x3dd0b461
 8013fb8:	1a600000 	.word	0x1a600000
 8013fbc:	3dd0b461 	.word	0x3dd0b461
 8013fc0:	2e037073 	.word	0x2e037073
 8013fc4:	3ba3198a 	.word	0x3ba3198a
 8013fc8:	6dc9c883 	.word	0x6dc9c883
 8013fcc:	3fe45f30 	.word	0x3fe45f30
 8013fd0:	2e000000 	.word	0x2e000000
 8013fd4:	3ba3198a 	.word	0x3ba3198a
 8013fd8:	252049c1 	.word	0x252049c1
 8013fdc:	397b839a 	.word	0x397b839a
 8013fe0:	00000000 	.word	0x00000000
 8013fe4:	41700000 	.word	0x41700000
 8013fe8:	3fe921fb 	.word	0x3fe921fb
 8013fec:	4002d97b 	.word	0x4002d97b
 8013ff0:	413921fb 	.word	0x413921fb
 8013ff4:	0801e870 	.word	0x0801e870
 8013ff8:	7fefffff 	.word	0x7fefffff
 8013ffc:	0801e8f0 	.word	0x0801e8f0

08014000 <fabs>:
 8014000:	ec51 0b10 	vmov	r0, r1, d0
 8014004:	ee10 2a10 	vmov	r2, s0
 8014008:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801400c:	ec43 2b10 	vmov	d0, r2, r3
 8014010:	4770      	bx	lr
 8014012:	0000      	movs	r0, r0
 8014014:	0000      	movs	r0, r0
	...

08014018 <log>:
 8014018:	b470      	push	{r4, r5, r6}
 801401a:	ee10 1a90 	vmov	r1, s1
 801401e:	ee10 3a10 	vmov	r3, s0
 8014022:	f04f 34ff 	mov.w	r4, #4294967295
 8014026:	429c      	cmp	r4, r3
 8014028:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 801402c:	4c72      	ldr	r4, [pc, #456]	; (80141f8 <log+0x1e0>)
 801402e:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8014032:	4184      	sbcs	r4, r0
 8014034:	ed2d 8b02 	vpush	{d8}
 8014038:	ea4f 4211 	mov.w	r2, r1, lsr #16
 801403c:	d35a      	bcc.n	80140f4 <log+0xdc>
 801403e:	4a6f      	ldr	r2, [pc, #444]	; (80141fc <log+0x1e4>)
 8014040:	4291      	cmp	r1, r2
 8014042:	bf08      	it	eq
 8014044:	2b00      	cmpeq	r3, #0
 8014046:	f000 80c5 	beq.w	80141d4 <log+0x1bc>
 801404a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801404e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014052:	4b6b      	ldr	r3, [pc, #428]	; (8014200 <log+0x1e8>)
 8014054:	ee20 2b00 	vmul.f64	d2, d0, d0
 8014058:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 801405c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8014060:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8014064:	eea6 7b00 	vfma.f64	d7, d6, d0
 8014068:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 801406c:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8014070:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014074:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8014078:	eea5 6b00 	vfma.f64	d6, d5, d0
 801407c:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8014080:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8014084:	eea5 6b02 	vfma.f64	d6, d5, d2
 8014088:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 801408c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8014090:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8014094:	eea3 5b02 	vfma.f64	d5, d3, d2
 8014098:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 801409c:	eea3 5b04 	vfma.f64	d5, d3, d4
 80140a0:	eea5 6b04 	vfma.f64	d6, d5, d4
 80140a4:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 80140a8:	eea6 7b04 	vfma.f64	d7, d6, d4
 80140ac:	eeb0 2b47 	vmov.f64	d2, d7
 80140b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80141e0 <log+0x1c8>
 80140b4:	eeb0 6b40 	vmov.f64	d6, d0
 80140b8:	eeb0 3b40 	vmov.f64	d3, d0
 80140bc:	eea0 6b07 	vfma.f64	d6, d0, d7
 80140c0:	eea0 6b47 	vfms.f64	d6, d0, d7
 80140c4:	ee30 8b46 	vsub.f64	d8, d0, d6
 80140c8:	ee26 1b06 	vmul.f64	d1, d6, d6
 80140cc:	eea1 3b05 	vfma.f64	d3, d1, d5
 80140d0:	ee30 7b43 	vsub.f64	d7, d0, d3
 80140d4:	ee30 0b06 	vadd.f64	d0, d0, d6
 80140d8:	eea1 7b05 	vfma.f64	d7, d1, d5
 80140dc:	ee25 5b08 	vmul.f64	d5, d5, d8
 80140e0:	eea5 7b00 	vfma.f64	d7, d5, d0
 80140e4:	eea2 7b04 	vfma.f64	d7, d2, d4
 80140e8:	ee33 0b07 	vadd.f64	d0, d3, d7
 80140ec:	ecbd 8b02 	vpop	{d8}
 80140f0:	bc70      	pop	{r4, r5, r6}
 80140f2:	4770      	bx	lr
 80140f4:	f1a2 0410 	sub.w	r4, r2, #16
 80140f8:	f647 70df 	movw	r0, #32735	; 0x7fdf
 80140fc:	4284      	cmp	r4, r0
 80140fe:	d924      	bls.n	801414a <log+0x132>
 8014100:	18d8      	adds	r0, r3, r3
 8014102:	eb41 0401 	adc.w	r4, r1, r1
 8014106:	4320      	orrs	r0, r4
 8014108:	d105      	bne.n	8014116 <log+0xfe>
 801410a:	ecbd 8b02 	vpop	{d8}
 801410e:	2001      	movs	r0, #1
 8014110:	bc70      	pop	{r4, r5, r6}
 8014112:	f7ff bcb9 	b.w	8013a88 <__math_divzero>
 8014116:	483b      	ldr	r0, [pc, #236]	; (8014204 <log+0x1ec>)
 8014118:	4281      	cmp	r1, r0
 801411a:	bf08      	it	eq
 801411c:	2b00      	cmpeq	r3, #0
 801411e:	d0e5      	beq.n	80140ec <log+0xd4>
 8014120:	0413      	lsls	r3, r2, #16
 8014122:	d403      	bmi.n	801412c <log+0x114>
 8014124:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8014128:	4393      	bics	r3, r2
 801412a:	d104      	bne.n	8014136 <log+0x11e>
 801412c:	ecbd 8b02 	vpop	{d8}
 8014130:	bc70      	pop	{r4, r5, r6}
 8014132:	f7ff bcc1 	b.w	8013ab8 <__math_invalid>
 8014136:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80141e8 <log+0x1d0>
 801413a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801413e:	ec53 2b17 	vmov	r2, r3, d7
 8014142:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8014146:	ee17 3a10 	vmov	r3, s14
 801414a:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 801414e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8014152:	f502 12d0 	add.w	r2, r2, #1703936	; 0x1a0000
 8014156:	0d16      	lsrs	r6, r2, #20
 8014158:	1e1c      	subs	r4, r3, #0
 801415a:	4b29      	ldr	r3, [pc, #164]	; (8014200 <log+0x1e8>)
 801415c:	f3c2 3046 	ubfx	r0, r2, #13, #7
 8014160:	0536      	lsls	r6, r6, #20
 8014162:	1b8d      	subs	r5, r1, r6
 8014164:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 8014168:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 801416c:	ec45 4b16 	vmov	d6, r4, r5
 8014170:	1512      	asrs	r2, r2, #20
 8014172:	eea6 5b07 	vfma.f64	d5, d6, d7
 8014176:	ee07 2a90 	vmov	s15, r2
 801417a:	ee25 2b05 	vmul.f64	d2, d5, d5
 801417e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8014182:	ed93 4b00 	vldr	d4, [r3]
 8014186:	ee25 1b02 	vmul.f64	d1, d5, d2
 801418a:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 801418e:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014192:	ee35 4b07 	vadd.f64	d4, d5, d7
 8014196:	ee37 0b44 	vsub.f64	d0, d7, d4
 801419a:	ed93 7b02 	vldr	d7, [r3, #8]
 801419e:	ee30 0b05 	vadd.f64	d0, d0, d5
 80141a2:	eea7 0b06 	vfma.f64	d0, d7, d6
 80141a6:	ed93 7b04 	vldr	d7, [r3, #16]
 80141aa:	ed93 6b08 	vldr	d6, [r3, #32]
 80141ae:	eea7 0b02 	vfma.f64	d0, d7, d2
 80141b2:	ed93 7b06 	vldr	d7, [r3, #24]
 80141b6:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80141ba:	eea6 7b05 	vfma.f64	d7, d6, d5
 80141be:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80141c2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80141c6:	eea6 7b02 	vfma.f64	d7, d6, d2
 80141ca:	eea1 0b07 	vfma.f64	d0, d1, d7
 80141ce:	ee30 0b04 	vadd.f64	d0, d0, d4
 80141d2:	e78b      	b.n	80140ec <log+0xd4>
 80141d4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80141f0 <log+0x1d8>
 80141d8:	e788      	b.n	80140ec <log+0xd4>
 80141da:	bf00      	nop
 80141dc:	f3af 8000 	nop.w
 80141e0:	00000000 	.word	0x00000000
 80141e4:	41a00000 	.word	0x41a00000
 80141e8:	00000000 	.word	0x00000000
 80141ec:	43300000 	.word	0x43300000
	...
 80141f8:	000308ff 	.word	0x000308ff
 80141fc:	3ff00000 	.word	0x3ff00000
 8014200:	0801e9f8 	.word	0x0801e9f8
 8014204:	7ff00000 	.word	0x7ff00000

08014208 <__kernel_rem_pio2>:
 8014208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801420c:	ed2d 8b06 	vpush	{d8-d10}
 8014210:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8014214:	460f      	mov	r7, r1
 8014216:	9002      	str	r0, [sp, #8]
 8014218:	49c3      	ldr	r1, [pc, #780]	; (8014528 <__kernel_rem_pio2+0x320>)
 801421a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801421c:	9301      	str	r3, [sp, #4]
 801421e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8014222:	9901      	ldr	r1, [sp, #4]
 8014224:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8014226:	f112 0f14 	cmn.w	r2, #20
 801422a:	bfa8      	it	ge
 801422c:	1ed0      	subge	r0, r2, #3
 801422e:	f101 3aff 	add.w	sl, r1, #4294967295
 8014232:	bfaa      	itet	ge
 8014234:	2418      	movge	r4, #24
 8014236:	2000      	movlt	r0, #0
 8014238:	fb90 f0f4 	sdivge	r0, r0, r4
 801423c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8014510 <__kernel_rem_pio2+0x308>
 8014240:	f06f 0417 	mvn.w	r4, #23
 8014244:	fb00 4404 	mla	r4, r0, r4, r4
 8014248:	eba0 060a 	sub.w	r6, r0, sl
 801424c:	4414      	add	r4, r2
 801424e:	eb09 0c0a 	add.w	ip, r9, sl
 8014252:	ad1a      	add	r5, sp, #104	; 0x68
 8014254:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8014258:	2200      	movs	r2, #0
 801425a:	4562      	cmp	r2, ip
 801425c:	dd10      	ble.n	8014280 <__kernel_rem_pio2+0x78>
 801425e:	9a01      	ldr	r2, [sp, #4]
 8014260:	a91a      	add	r1, sp, #104	; 0x68
 8014262:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8014266:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801426a:	f04f 0c00 	mov.w	ip, #0
 801426e:	45cc      	cmp	ip, r9
 8014270:	dc26      	bgt.n	80142c0 <__kernel_rem_pio2+0xb8>
 8014272:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8014510 <__kernel_rem_pio2+0x308>
 8014276:	f8dd e008 	ldr.w	lr, [sp, #8]
 801427a:	4616      	mov	r6, r2
 801427c:	2500      	movs	r5, #0
 801427e:	e015      	b.n	80142ac <__kernel_rem_pio2+0xa4>
 8014280:	42d6      	cmn	r6, r2
 8014282:	d409      	bmi.n	8014298 <__kernel_rem_pio2+0x90>
 8014284:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8014288:	ee07 1a90 	vmov	s15, r1
 801428c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014290:	eca5 7b02 	vstmia	r5!, {d7}
 8014294:	3201      	adds	r2, #1
 8014296:	e7e0      	b.n	801425a <__kernel_rem_pio2+0x52>
 8014298:	eeb0 7b46 	vmov.f64	d7, d6
 801429c:	e7f8      	b.n	8014290 <__kernel_rem_pio2+0x88>
 801429e:	ecbe 5b02 	vldmia	lr!, {d5}
 80142a2:	ed96 6b00 	vldr	d6, [r6]
 80142a6:	3501      	adds	r5, #1
 80142a8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80142ac:	4555      	cmp	r5, sl
 80142ae:	f1a6 0608 	sub.w	r6, r6, #8
 80142b2:	ddf4      	ble.n	801429e <__kernel_rem_pio2+0x96>
 80142b4:	eca8 7b02 	vstmia	r8!, {d7}
 80142b8:	f10c 0c01 	add.w	ip, ip, #1
 80142bc:	3208      	adds	r2, #8
 80142be:	e7d6      	b.n	801426e <__kernel_rem_pio2+0x66>
 80142c0:	aa06      	add	r2, sp, #24
 80142c2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8014518 <__kernel_rem_pio2+0x310>
 80142c6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8014520 <__kernel_rem_pio2+0x318>
 80142ca:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80142ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80142d2:	9204      	str	r2, [sp, #16]
 80142d4:	9303      	str	r3, [sp, #12]
 80142d6:	464d      	mov	r5, r9
 80142d8:	00eb      	lsls	r3, r5, #3
 80142da:	9305      	str	r3, [sp, #20]
 80142dc:	ab92      	add	r3, sp, #584	; 0x248
 80142de:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80142e2:	f10d 0b18 	add.w	fp, sp, #24
 80142e6:	ab6a      	add	r3, sp, #424	; 0x1a8
 80142e8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80142ec:	465e      	mov	r6, fp
 80142ee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80142f2:	4628      	mov	r0, r5
 80142f4:	2800      	cmp	r0, #0
 80142f6:	f1a2 0208 	sub.w	r2, r2, #8
 80142fa:	dc48      	bgt.n	801438e <__kernel_rem_pio2+0x186>
 80142fc:	4620      	mov	r0, r4
 80142fe:	f000 fa17 	bl	8014730 <scalbn>
 8014302:	eeb0 8b40 	vmov.f64	d8, d0
 8014306:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801430a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801430e:	f000 fa8f 	bl	8014830 <floor>
 8014312:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8014316:	eea0 8b47 	vfms.f64	d8, d0, d7
 801431a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801431e:	2c00      	cmp	r4, #0
 8014320:	ee17 8a90 	vmov	r8, s15
 8014324:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014328:	ee38 8b47 	vsub.f64	d8, d8, d7
 801432c:	dd41      	ble.n	80143b2 <__kernel_rem_pio2+0x1aa>
 801432e:	1e68      	subs	r0, r5, #1
 8014330:	ab06      	add	r3, sp, #24
 8014332:	f1c4 0c18 	rsb	ip, r4, #24
 8014336:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801433a:	fa46 f20c 	asr.w	r2, r6, ip
 801433e:	4490      	add	r8, r2
 8014340:	fa02 f20c 	lsl.w	r2, r2, ip
 8014344:	1ab6      	subs	r6, r6, r2
 8014346:	f1c4 0217 	rsb	r2, r4, #23
 801434a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801434e:	4116      	asrs	r6, r2
 8014350:	2e00      	cmp	r6, #0
 8014352:	dd3d      	ble.n	80143d0 <__kernel_rem_pio2+0x1c8>
 8014354:	f04f 0c00 	mov.w	ip, #0
 8014358:	f108 0801 	add.w	r8, r8, #1
 801435c:	4660      	mov	r0, ip
 801435e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8014362:	4565      	cmp	r5, ip
 8014364:	dc6a      	bgt.n	801443c <__kernel_rem_pio2+0x234>
 8014366:	2c00      	cmp	r4, #0
 8014368:	dd04      	ble.n	8014374 <__kernel_rem_pio2+0x16c>
 801436a:	2c01      	cmp	r4, #1
 801436c:	d07b      	beq.n	8014466 <__kernel_rem_pio2+0x25e>
 801436e:	2c02      	cmp	r4, #2
 8014370:	f000 8083 	beq.w	801447a <__kernel_rem_pio2+0x272>
 8014374:	2e02      	cmp	r6, #2
 8014376:	d12b      	bne.n	80143d0 <__kernel_rem_pio2+0x1c8>
 8014378:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801437c:	ee30 8b48 	vsub.f64	d8, d0, d8
 8014380:	b330      	cbz	r0, 80143d0 <__kernel_rem_pio2+0x1c8>
 8014382:	4620      	mov	r0, r4
 8014384:	f000 f9d4 	bl	8014730 <scalbn>
 8014388:	ee38 8b40 	vsub.f64	d8, d8, d0
 801438c:	e020      	b.n	80143d0 <__kernel_rem_pio2+0x1c8>
 801438e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8014392:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014396:	3801      	subs	r0, #1
 8014398:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801439c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80143a0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80143a4:	eca6 0a01 	vstmia	r6!, {s0}
 80143a8:	ed92 0b00 	vldr	d0, [r2]
 80143ac:	ee37 0b00 	vadd.f64	d0, d7, d0
 80143b0:	e7a0      	b.n	80142f4 <__kernel_rem_pio2+0xec>
 80143b2:	d105      	bne.n	80143c0 <__kernel_rem_pio2+0x1b8>
 80143b4:	1e6a      	subs	r2, r5, #1
 80143b6:	ab06      	add	r3, sp, #24
 80143b8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80143bc:	15f6      	asrs	r6, r6, #23
 80143be:	e7c7      	b.n	8014350 <__kernel_rem_pio2+0x148>
 80143c0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80143c4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80143c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143cc:	da34      	bge.n	8014438 <__kernel_rem_pio2+0x230>
 80143ce:	2600      	movs	r6, #0
 80143d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80143d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d8:	f040 80aa 	bne.w	8014530 <__kernel_rem_pio2+0x328>
 80143dc:	f105 3bff 	add.w	fp, r5, #4294967295
 80143e0:	4658      	mov	r0, fp
 80143e2:	2200      	movs	r2, #0
 80143e4:	4548      	cmp	r0, r9
 80143e6:	da50      	bge.n	801448a <__kernel_rem_pio2+0x282>
 80143e8:	2a00      	cmp	r2, #0
 80143ea:	d06b      	beq.n	80144c4 <__kernel_rem_pio2+0x2bc>
 80143ec:	ab06      	add	r3, sp, #24
 80143ee:	3c18      	subs	r4, #24
 80143f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	f000 8087 	beq.w	8014508 <__kernel_rem_pio2+0x300>
 80143fa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80143fe:	4620      	mov	r0, r4
 8014400:	f000 f996 	bl	8014730 <scalbn>
 8014404:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8014518 <__kernel_rem_pio2+0x310>
 8014408:	f10b 0201 	add.w	r2, fp, #1
 801440c:	a96a      	add	r1, sp, #424	; 0x1a8
 801440e:	00d3      	lsls	r3, r2, #3
 8014410:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014414:	465a      	mov	r2, fp
 8014416:	2a00      	cmp	r2, #0
 8014418:	f280 80b8 	bge.w	801458c <__kernel_rem_pio2+0x384>
 801441c:	465a      	mov	r2, fp
 801441e:	2a00      	cmp	r2, #0
 8014420:	f2c0 80d6 	blt.w	80145d0 <__kernel_rem_pio2+0x3c8>
 8014424:	a96a      	add	r1, sp, #424	; 0x1a8
 8014426:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801442a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8014510 <__kernel_rem_pio2+0x308>
 801442e:	4d3f      	ldr	r5, [pc, #252]	; (801452c <__kernel_rem_pio2+0x324>)
 8014430:	2000      	movs	r0, #0
 8014432:	ebab 0102 	sub.w	r1, fp, r2
 8014436:	e0c0      	b.n	80145ba <__kernel_rem_pio2+0x3b2>
 8014438:	2602      	movs	r6, #2
 801443a:	e78b      	b.n	8014354 <__kernel_rem_pio2+0x14c>
 801443c:	f8db 2000 	ldr.w	r2, [fp]
 8014440:	b958      	cbnz	r0, 801445a <__kernel_rem_pio2+0x252>
 8014442:	b122      	cbz	r2, 801444e <__kernel_rem_pio2+0x246>
 8014444:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8014448:	f8cb 2000 	str.w	r2, [fp]
 801444c:	2201      	movs	r2, #1
 801444e:	f10c 0c01 	add.w	ip, ip, #1
 8014452:	f10b 0b04 	add.w	fp, fp, #4
 8014456:	4610      	mov	r0, r2
 8014458:	e783      	b.n	8014362 <__kernel_rem_pio2+0x15a>
 801445a:	ebae 0202 	sub.w	r2, lr, r2
 801445e:	f8cb 2000 	str.w	r2, [fp]
 8014462:	4602      	mov	r2, r0
 8014464:	e7f3      	b.n	801444e <__kernel_rem_pio2+0x246>
 8014466:	f105 3cff 	add.w	ip, r5, #4294967295
 801446a:	ab06      	add	r3, sp, #24
 801446c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8014470:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8014474:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8014478:	e77c      	b.n	8014374 <__kernel_rem_pio2+0x16c>
 801447a:	f105 3cff 	add.w	ip, r5, #4294967295
 801447e:	ab06      	add	r3, sp, #24
 8014480:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8014484:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8014488:	e7f4      	b.n	8014474 <__kernel_rem_pio2+0x26c>
 801448a:	ab06      	add	r3, sp, #24
 801448c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014490:	3801      	subs	r0, #1
 8014492:	431a      	orrs	r2, r3
 8014494:	e7a6      	b.n	80143e4 <__kernel_rem_pio2+0x1dc>
 8014496:	3201      	adds	r2, #1
 8014498:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801449c:	2e00      	cmp	r6, #0
 801449e:	d0fa      	beq.n	8014496 <__kernel_rem_pio2+0x28e>
 80144a0:	9b05      	ldr	r3, [sp, #20]
 80144a2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80144a6:	eb0d 0003 	add.w	r0, sp, r3
 80144aa:	9b01      	ldr	r3, [sp, #4]
 80144ac:	18ee      	adds	r6, r5, r3
 80144ae:	ab1a      	add	r3, sp, #104	; 0x68
 80144b0:	f105 0c01 	add.w	ip, r5, #1
 80144b4:	3898      	subs	r0, #152	; 0x98
 80144b6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80144ba:	442a      	add	r2, r5
 80144bc:	4562      	cmp	r2, ip
 80144be:	da04      	bge.n	80144ca <__kernel_rem_pio2+0x2c2>
 80144c0:	4615      	mov	r5, r2
 80144c2:	e709      	b.n	80142d8 <__kernel_rem_pio2+0xd0>
 80144c4:	9804      	ldr	r0, [sp, #16]
 80144c6:	2201      	movs	r2, #1
 80144c8:	e7e6      	b.n	8014498 <__kernel_rem_pio2+0x290>
 80144ca:	9b03      	ldr	r3, [sp, #12]
 80144cc:	f8dd e008 	ldr.w	lr, [sp, #8]
 80144d0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80144d4:	9305      	str	r3, [sp, #20]
 80144d6:	ee07 3a90 	vmov	s15, r3
 80144da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80144de:	2500      	movs	r5, #0
 80144e0:	eca6 7b02 	vstmia	r6!, {d7}
 80144e4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8014510 <__kernel_rem_pio2+0x308>
 80144e8:	46b0      	mov	r8, r6
 80144ea:	4555      	cmp	r5, sl
 80144ec:	dd04      	ble.n	80144f8 <__kernel_rem_pio2+0x2f0>
 80144ee:	eca0 7b02 	vstmia	r0!, {d7}
 80144f2:	f10c 0c01 	add.w	ip, ip, #1
 80144f6:	e7e1      	b.n	80144bc <__kernel_rem_pio2+0x2b4>
 80144f8:	ecbe 5b02 	vldmia	lr!, {d5}
 80144fc:	ed38 6b02 	vldmdb	r8!, {d6}
 8014500:	3501      	adds	r5, #1
 8014502:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014506:	e7f0      	b.n	80144ea <__kernel_rem_pio2+0x2e2>
 8014508:	f10b 3bff 	add.w	fp, fp, #4294967295
 801450c:	e76e      	b.n	80143ec <__kernel_rem_pio2+0x1e4>
 801450e:	bf00      	nop
	...
 801451c:	3e700000 	.word	0x3e700000
 8014520:	00000000 	.word	0x00000000
 8014524:	41700000 	.word	0x41700000
 8014528:	0801f2c8 	.word	0x0801f2c8
 801452c:	0801f288 	.word	0x0801f288
 8014530:	4260      	negs	r0, r4
 8014532:	eeb0 0b48 	vmov.f64	d0, d8
 8014536:	f000 f8fb 	bl	8014730 <scalbn>
 801453a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8014718 <__kernel_rem_pio2+0x510>
 801453e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8014542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014546:	db18      	blt.n	801457a <__kernel_rem_pio2+0x372>
 8014548:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8014720 <__kernel_rem_pio2+0x518>
 801454c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014550:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014554:	aa06      	add	r2, sp, #24
 8014556:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801455a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801455e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014562:	f105 0b01 	add.w	fp, r5, #1
 8014566:	ee10 3a10 	vmov	r3, s0
 801456a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801456e:	ee17 3a10 	vmov	r3, s14
 8014572:	3418      	adds	r4, #24
 8014574:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8014578:	e73f      	b.n	80143fa <__kernel_rem_pio2+0x1f2>
 801457a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801457e:	aa06      	add	r2, sp, #24
 8014580:	ee10 3a10 	vmov	r3, s0
 8014584:	46ab      	mov	fp, r5
 8014586:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801458a:	e736      	b.n	80143fa <__kernel_rem_pio2+0x1f2>
 801458c:	a806      	add	r0, sp, #24
 801458e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8014592:	9001      	str	r0, [sp, #4]
 8014594:	ee07 0a90 	vmov	s15, r0
 8014598:	3a01      	subs	r2, #1
 801459a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801459e:	ee27 7b00 	vmul.f64	d7, d7, d0
 80145a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80145a6:	ed21 7b02 	vstmdb	r1!, {d7}
 80145aa:	e734      	b.n	8014416 <__kernel_rem_pio2+0x20e>
 80145ac:	ecb5 5b02 	vldmia	r5!, {d5}
 80145b0:	ecb4 6b02 	vldmia	r4!, {d6}
 80145b4:	3001      	adds	r0, #1
 80145b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80145ba:	4548      	cmp	r0, r9
 80145bc:	dc01      	bgt.n	80145c2 <__kernel_rem_pio2+0x3ba>
 80145be:	4288      	cmp	r0, r1
 80145c0:	ddf4      	ble.n	80145ac <__kernel_rem_pio2+0x3a4>
 80145c2:	a842      	add	r0, sp, #264	; 0x108
 80145c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80145c8:	ed81 7b00 	vstr	d7, [r1]
 80145cc:	3a01      	subs	r2, #1
 80145ce:	e726      	b.n	801441e <__kernel_rem_pio2+0x216>
 80145d0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80145d2:	2a02      	cmp	r2, #2
 80145d4:	dc0a      	bgt.n	80145ec <__kernel_rem_pio2+0x3e4>
 80145d6:	2a00      	cmp	r2, #0
 80145d8:	dc2e      	bgt.n	8014638 <__kernel_rem_pio2+0x430>
 80145da:	d047      	beq.n	801466c <__kernel_rem_pio2+0x464>
 80145dc:	f008 0007 	and.w	r0, r8, #7
 80145e0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80145e4:	ecbd 8b06 	vpop	{d8-d10}
 80145e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ec:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80145ee:	2a03      	cmp	r2, #3
 80145f0:	d1f4      	bne.n	80145dc <__kernel_rem_pio2+0x3d4>
 80145f2:	a942      	add	r1, sp, #264	; 0x108
 80145f4:	f1a3 0208 	sub.w	r2, r3, #8
 80145f8:	440a      	add	r2, r1
 80145fa:	4611      	mov	r1, r2
 80145fc:	4658      	mov	r0, fp
 80145fe:	2800      	cmp	r0, #0
 8014600:	f1a1 0108 	sub.w	r1, r1, #8
 8014604:	dc55      	bgt.n	80146b2 <__kernel_rem_pio2+0x4aa>
 8014606:	4659      	mov	r1, fp
 8014608:	2901      	cmp	r1, #1
 801460a:	f1a2 0208 	sub.w	r2, r2, #8
 801460e:	dc60      	bgt.n	80146d2 <__kernel_rem_pio2+0x4ca>
 8014610:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8014728 <__kernel_rem_pio2+0x520>
 8014614:	aa42      	add	r2, sp, #264	; 0x108
 8014616:	4413      	add	r3, r2
 8014618:	f1bb 0f01 	cmp.w	fp, #1
 801461c:	dc69      	bgt.n	80146f2 <__kernel_rem_pio2+0x4ea>
 801461e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8014622:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8014626:	2e00      	cmp	r6, #0
 8014628:	d16a      	bne.n	8014700 <__kernel_rem_pio2+0x4f8>
 801462a:	ed87 5b00 	vstr	d5, [r7]
 801462e:	ed87 6b02 	vstr	d6, [r7, #8]
 8014632:	ed87 7b04 	vstr	d7, [r7, #16]
 8014636:	e7d1      	b.n	80145dc <__kernel_rem_pio2+0x3d4>
 8014638:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014728 <__kernel_rem_pio2+0x520>
 801463c:	aa42      	add	r2, sp, #264	; 0x108
 801463e:	4413      	add	r3, r2
 8014640:	465a      	mov	r2, fp
 8014642:	2a00      	cmp	r2, #0
 8014644:	da26      	bge.n	8014694 <__kernel_rem_pio2+0x48c>
 8014646:	b35e      	cbz	r6, 80146a0 <__kernel_rem_pio2+0x498>
 8014648:	eeb1 7b46 	vneg.f64	d7, d6
 801464c:	ed87 7b00 	vstr	d7, [r7]
 8014650:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8014654:	aa44      	add	r2, sp, #272	; 0x110
 8014656:	2301      	movs	r3, #1
 8014658:	ee37 7b46 	vsub.f64	d7, d7, d6
 801465c:	459b      	cmp	fp, r3
 801465e:	da22      	bge.n	80146a6 <__kernel_rem_pio2+0x49e>
 8014660:	b10e      	cbz	r6, 8014666 <__kernel_rem_pio2+0x45e>
 8014662:	eeb1 7b47 	vneg.f64	d7, d7
 8014666:	ed87 7b02 	vstr	d7, [r7, #8]
 801466a:	e7b7      	b.n	80145dc <__kernel_rem_pio2+0x3d4>
 801466c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014728 <__kernel_rem_pio2+0x520>
 8014670:	aa42      	add	r2, sp, #264	; 0x108
 8014672:	4413      	add	r3, r2
 8014674:	f1bb 0f00 	cmp.w	fp, #0
 8014678:	da05      	bge.n	8014686 <__kernel_rem_pio2+0x47e>
 801467a:	b10e      	cbz	r6, 8014680 <__kernel_rem_pio2+0x478>
 801467c:	eeb1 7b47 	vneg.f64	d7, d7
 8014680:	ed87 7b00 	vstr	d7, [r7]
 8014684:	e7aa      	b.n	80145dc <__kernel_rem_pio2+0x3d4>
 8014686:	ed33 6b02 	vldmdb	r3!, {d6}
 801468a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801468e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014692:	e7ef      	b.n	8014674 <__kernel_rem_pio2+0x46c>
 8014694:	ed33 7b02 	vldmdb	r3!, {d7}
 8014698:	3a01      	subs	r2, #1
 801469a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801469e:	e7d0      	b.n	8014642 <__kernel_rem_pio2+0x43a>
 80146a0:	eeb0 7b46 	vmov.f64	d7, d6
 80146a4:	e7d2      	b.n	801464c <__kernel_rem_pio2+0x444>
 80146a6:	ecb2 6b02 	vldmia	r2!, {d6}
 80146aa:	3301      	adds	r3, #1
 80146ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80146b0:	e7d4      	b.n	801465c <__kernel_rem_pio2+0x454>
 80146b2:	ed91 7b00 	vldr	d7, [r1]
 80146b6:	ed91 5b02 	vldr	d5, [r1, #8]
 80146ba:	3801      	subs	r0, #1
 80146bc:	ee37 6b05 	vadd.f64	d6, d7, d5
 80146c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80146c4:	ed81 6b00 	vstr	d6, [r1]
 80146c8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80146cc:	ed81 7b02 	vstr	d7, [r1, #8]
 80146d0:	e795      	b.n	80145fe <__kernel_rem_pio2+0x3f6>
 80146d2:	ed92 7b00 	vldr	d7, [r2]
 80146d6:	ed92 5b02 	vldr	d5, [r2, #8]
 80146da:	3901      	subs	r1, #1
 80146dc:	ee37 6b05 	vadd.f64	d6, d7, d5
 80146e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80146e4:	ed82 6b00 	vstr	d6, [r2]
 80146e8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80146ec:	ed82 7b02 	vstr	d7, [r2, #8]
 80146f0:	e78a      	b.n	8014608 <__kernel_rem_pio2+0x400>
 80146f2:	ed33 6b02 	vldmdb	r3!, {d6}
 80146f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80146fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80146fe:	e78b      	b.n	8014618 <__kernel_rem_pio2+0x410>
 8014700:	eeb1 5b45 	vneg.f64	d5, d5
 8014704:	eeb1 6b46 	vneg.f64	d6, d6
 8014708:	ed87 5b00 	vstr	d5, [r7]
 801470c:	eeb1 7b47 	vneg.f64	d7, d7
 8014710:	ed87 6b02 	vstr	d6, [r7, #8]
 8014714:	e78d      	b.n	8014632 <__kernel_rem_pio2+0x42a>
 8014716:	bf00      	nop
 8014718:	00000000 	.word	0x00000000
 801471c:	41700000 	.word	0x41700000
 8014720:	00000000 	.word	0x00000000
 8014724:	3e700000 	.word	0x3e700000
	...

08014730 <scalbn>:
 8014730:	ee10 1a90 	vmov	r1, s1
 8014734:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014738:	b98b      	cbnz	r3, 801475e <scalbn+0x2e>
 801473a:	ee10 3a10 	vmov	r3, s0
 801473e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014742:	4319      	orrs	r1, r3
 8014744:	d00a      	beq.n	801475c <scalbn+0x2c>
 8014746:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80147f8 <scalbn+0xc8>
 801474a:	4b37      	ldr	r3, [pc, #220]	; (8014828 <scalbn+0xf8>)
 801474c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014750:	4298      	cmp	r0, r3
 8014752:	da0b      	bge.n	801476c <scalbn+0x3c>
 8014754:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8014800 <scalbn+0xd0>
 8014758:	ee20 0b07 	vmul.f64	d0, d0, d7
 801475c:	4770      	bx	lr
 801475e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014762:	4293      	cmp	r3, r2
 8014764:	d107      	bne.n	8014776 <scalbn+0x46>
 8014766:	ee30 0b00 	vadd.f64	d0, d0, d0
 801476a:	4770      	bx	lr
 801476c:	ee10 1a90 	vmov	r1, s1
 8014770:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014774:	3b36      	subs	r3, #54	; 0x36
 8014776:	f24c 3250 	movw	r2, #50000	; 0xc350
 801477a:	4290      	cmp	r0, r2
 801477c:	dd0d      	ble.n	801479a <scalbn+0x6a>
 801477e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8014808 <scalbn+0xd8>
 8014782:	ee10 3a90 	vmov	r3, s1
 8014786:	eeb0 6b47 	vmov.f64	d6, d7
 801478a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8014810 <scalbn+0xe0>
 801478e:	2b00      	cmp	r3, #0
 8014790:	fe27 7b05 	vselge.f64	d7, d7, d5
 8014794:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014798:	4770      	bx	lr
 801479a:	4418      	add	r0, r3
 801479c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80147a0:	4298      	cmp	r0, r3
 80147a2:	dcec      	bgt.n	801477e <scalbn+0x4e>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	dd0a      	ble.n	80147be <scalbn+0x8e>
 80147a8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80147ac:	ec53 2b10 	vmov	r2, r3, d0
 80147b0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80147b4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80147b8:	ec43 2b10 	vmov	d0, r2, r3
 80147bc:	4770      	bx	lr
 80147be:	f110 0f35 	cmn.w	r0, #53	; 0x35
 80147c2:	da09      	bge.n	80147d8 <scalbn+0xa8>
 80147c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014800 <scalbn+0xd0>
 80147c8:	ee10 3a90 	vmov	r3, s1
 80147cc:	eeb0 6b47 	vmov.f64	d6, d7
 80147d0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8014818 <scalbn+0xe8>
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	e7db      	b.n	8014790 <scalbn+0x60>
 80147d8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80147dc:	ec53 2b10 	vmov	r2, r3, d0
 80147e0:	3036      	adds	r0, #54	; 0x36
 80147e2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80147e6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80147ea:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8014820 <scalbn+0xf0>
 80147ee:	ec43 2b10 	vmov	d0, r2, r3
 80147f2:	e7b1      	b.n	8014758 <scalbn+0x28>
 80147f4:	f3af 8000 	nop.w
 80147f8:	00000000 	.word	0x00000000
 80147fc:	43500000 	.word	0x43500000
 8014800:	c2f8f359 	.word	0xc2f8f359
 8014804:	01a56e1f 	.word	0x01a56e1f
 8014808:	8800759c 	.word	0x8800759c
 801480c:	7e37e43c 	.word	0x7e37e43c
 8014810:	8800759c 	.word	0x8800759c
 8014814:	fe37e43c 	.word	0xfe37e43c
 8014818:	c2f8f359 	.word	0xc2f8f359
 801481c:	81a56e1f 	.word	0x81a56e1f
 8014820:	00000000 	.word	0x00000000
 8014824:	3c900000 	.word	0x3c900000
 8014828:	ffff3cb0 	.word	0xffff3cb0
 801482c:	00000000 	.word	0x00000000

08014830 <floor>:
 8014830:	ee10 1a90 	vmov	r1, s1
 8014834:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014838:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801483c:	2b13      	cmp	r3, #19
 801483e:	b530      	push	{r4, r5, lr}
 8014840:	ee10 0a10 	vmov	r0, s0
 8014844:	ee10 5a10 	vmov	r5, s0
 8014848:	dc31      	bgt.n	80148ae <floor+0x7e>
 801484a:	2b00      	cmp	r3, #0
 801484c:	da15      	bge.n	801487a <floor+0x4a>
 801484e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8014910 <floor+0xe0>
 8014852:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014856:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801485e:	dd07      	ble.n	8014870 <floor+0x40>
 8014860:	2900      	cmp	r1, #0
 8014862:	da4e      	bge.n	8014902 <floor+0xd2>
 8014864:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014868:	4308      	orrs	r0, r1
 801486a:	d04d      	beq.n	8014908 <floor+0xd8>
 801486c:	492a      	ldr	r1, [pc, #168]	; (8014918 <floor+0xe8>)
 801486e:	2000      	movs	r0, #0
 8014870:	460b      	mov	r3, r1
 8014872:	4602      	mov	r2, r0
 8014874:	ec43 2b10 	vmov	d0, r2, r3
 8014878:	e020      	b.n	80148bc <floor+0x8c>
 801487a:	4a28      	ldr	r2, [pc, #160]	; (801491c <floor+0xec>)
 801487c:	411a      	asrs	r2, r3
 801487e:	ea01 0402 	and.w	r4, r1, r2
 8014882:	4304      	orrs	r4, r0
 8014884:	d01a      	beq.n	80148bc <floor+0x8c>
 8014886:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8014910 <floor+0xe0>
 801488a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801488e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014896:	ddeb      	ble.n	8014870 <floor+0x40>
 8014898:	2900      	cmp	r1, #0
 801489a:	bfbe      	ittt	lt
 801489c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80148a0:	fa40 f303 	asrlt.w	r3, r0, r3
 80148a4:	18c9      	addlt	r1, r1, r3
 80148a6:	ea21 0102 	bic.w	r1, r1, r2
 80148aa:	2000      	movs	r0, #0
 80148ac:	e7e0      	b.n	8014870 <floor+0x40>
 80148ae:	2b33      	cmp	r3, #51	; 0x33
 80148b0:	dd05      	ble.n	80148be <floor+0x8e>
 80148b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80148b6:	d101      	bne.n	80148bc <floor+0x8c>
 80148b8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80148bc:	bd30      	pop	{r4, r5, pc}
 80148be:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80148c2:	f04f 32ff 	mov.w	r2, #4294967295
 80148c6:	40e2      	lsrs	r2, r4
 80148c8:	4210      	tst	r0, r2
 80148ca:	d0f7      	beq.n	80148bc <floor+0x8c>
 80148cc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8014910 <floor+0xe0>
 80148d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80148d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80148d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148dc:	ddc8      	ble.n	8014870 <floor+0x40>
 80148de:	2900      	cmp	r1, #0
 80148e0:	da02      	bge.n	80148e8 <floor+0xb8>
 80148e2:	2b14      	cmp	r3, #20
 80148e4:	d103      	bne.n	80148ee <floor+0xbe>
 80148e6:	3101      	adds	r1, #1
 80148e8:	ea20 0002 	bic.w	r0, r0, r2
 80148ec:	e7c0      	b.n	8014870 <floor+0x40>
 80148ee:	2401      	movs	r4, #1
 80148f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80148f4:	fa04 f303 	lsl.w	r3, r4, r3
 80148f8:	4418      	add	r0, r3
 80148fa:	4285      	cmp	r5, r0
 80148fc:	bf88      	it	hi
 80148fe:	1909      	addhi	r1, r1, r4
 8014900:	e7f2      	b.n	80148e8 <floor+0xb8>
 8014902:	2000      	movs	r0, #0
 8014904:	4601      	mov	r1, r0
 8014906:	e7b3      	b.n	8014870 <floor+0x40>
 8014908:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801490c:	e7b0      	b.n	8014870 <floor+0x40>
 801490e:	bf00      	nop
 8014910:	8800759c 	.word	0x8800759c
 8014914:	7e37e43c 	.word	0x7e37e43c
 8014918:	bff00000 	.word	0xbff00000
 801491c:	000fffff 	.word	0x000fffff

08014920 <_init>:
 8014920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014922:	bf00      	nop
 8014924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014926:	bc08      	pop	{r3}
 8014928:	469e      	mov	lr, r3
 801492a:	4770      	bx	lr

0801492c <_fini>:
 801492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801492e:	bf00      	nop
 8014930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014932:	bc08      	pop	{r3}
 8014934:	469e      	mov	lr, r3
 8014936:	4770      	bx	lr
